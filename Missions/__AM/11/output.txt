// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 38921 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1657 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 38949 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6497 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 38949 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 ;
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 95
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 3
 538: PUSH
 539: LD_INT 60
 541: PUSH
 542: EMPTY
 543: LIST
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: PPUSH
 554: CALL_OW 69
 558: PUSH
 559: LD_INT 5
 561: GREATEREQUAL
 562: IFFALSE 509
// wait ( 0 0$1 ) ;
 564: LD_INT 35
 566: PPUSH
 567: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 571: LD_EXP 2
 575: PPUSH
 576: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 580: LD_EXP 3
 584: PPUSH
 585: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 589: LD_INT 10
 591: PPUSH
 592: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 596: LD_EXP 3
 600: PPUSH
 601: LD_INT 52
 603: PPUSH
 604: LD_INT 42
 606: PPUSH
 607: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 611: LD_EXP 2
 615: PPUSH
 616: LD_INT 52
 618: PPUSH
 619: LD_INT 42
 621: PPUSH
 622: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 626: LD_EXP 3
 630: PPUSH
 631: LD_INT 68
 633: PPUSH
 634: LD_INT 55
 636: PPUSH
 637: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 641: LD_EXP 2
 645: PPUSH
 646: LD_INT 68
 648: PPUSH
 649: LD_INT 58
 651: PPUSH
 652: CALL_OW 171
// AddComTurnXY ( Powell , 73 , 54 ) ;
 656: LD_EXP 3
 660: PPUSH
 661: LD_INT 73
 663: PPUSH
 664: LD_INT 54
 666: PPUSH
 667: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 671: LD_EXP 2
 675: PPUSH
 676: LD_INT 74
 678: PPUSH
 679: LD_INT 58
 681: PPUSH
 682: CALL_OW 178
// ComExitVehicle ( people [ 4 ] ) ;
 686: LD_EXP 5
 690: PUSH
 691: LD_INT 4
 693: ARRAY
 694: PPUSH
 695: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 699: LD_EXP 5
 703: PUSH
 704: LD_INT 5
 706: ARRAY
 707: PPUSH
 708: CALL_OW 121
// wait ( 0 0$02 ) ;
 712: LD_INT 70
 714: PPUSH
 715: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 719: LD_EXP 5
 723: PUSH
 724: LD_INT 4
 726: ARRAY
 727: PPUSH
 728: LD_INT 50
 730: PPUSH
 731: LD_INT 40
 733: PPUSH
 734: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 738: LD_EXP 5
 742: PUSH
 743: LD_INT 5
 745: ARRAY
 746: PPUSH
 747: LD_INT 49
 749: PPUSH
 750: LD_INT 59
 752: PPUSH
 753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 757: LD_INT 35
 759: PPUSH
 760: CALL_OW 67
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 764: LD_EXP 3
 768: PPUSH
 769: LD_INT 68
 771: PPUSH
 772: LD_INT 55
 774: PPUSH
 775: CALL_OW 307
 779: PUSH
 780: LD_EXP 2
 784: PPUSH
 785: LD_INT 68
 787: PPUSH
 788: LD_INT 58
 790: PPUSH
 791: CALL_OW 307
 795: AND
 796: IFFALSE 757
// CenterNowOnUnits ( JMM ) ;
 798: LD_EXP 2
 802: PPUSH
 803: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 807: LD_EXP 3
 811: PPUSH
 812: LD_STRING D1-Pow-1
 814: PPUSH
 815: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 819: LD_EXP 2
 823: PPUSH
 824: LD_STRING D1-JMM-1
 826: PPUSH
 827: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 831: LD_EXP 3
 835: PPUSH
 836: LD_STRING D1-Pow-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_EXP 3
 852: PPUSH
 853: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 857: LD_EXP 2
 861: PPUSH
 862: LD_STRING D1-JMM-2
 864: PPUSH
 865: CALL_OW 88
// wait ( 0 0$01 ) ;
 869: LD_INT 35
 871: PPUSH
 872: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_EXP 2
 885: PPUSH
 886: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
 890: LD_EXP 3
 894: PPUSH
 895: LD_STRING D1-Pow-3
 897: PPUSH
 898: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
 902: LD_EXP 2
 906: PPUSH
 907: LD_STRING D1-JMM-3
 909: PPUSH
 910: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
 914: LD_EXP 3
 918: PPUSH
 919: LD_STRING D1-Pow-4
 921: PPUSH
 922: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
 926: LD_EXP 2
 930: PPUSH
 931: LD_STRING D1-JMM-4
 933: PPUSH
 934: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
 938: LD_EXP 3
 942: PPUSH
 943: LD_STRING D1-Pow-5
 945: PPUSH
 946: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
 950: LD_EXP 2
 954: PPUSH
 955: LD_STRING D1-JMM-5
 957: PPUSH
 958: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING D1-Pow-6
 969: PPUSH
 970: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
 974: LD_EXP 2
 978: PPUSH
 979: LD_STRING D1-JMM-6
 981: PPUSH
 982: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
 986: LD_EXP 3
 990: PPUSH
 991: LD_STRING D1-Pow-7
 993: PPUSH
 994: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
 998: LD_EXP 2
1002: PPUSH
1003: LD_STRING D1-JMM-7
1005: PPUSH
1006: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1010: LD_EXP 3
1014: PPUSH
1015: LD_INT 68
1017: PPUSH
1018: LD_INT 57
1020: PPUSH
1021: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1025: LD_INT 10
1027: PPUSH
1028: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_INT 68
1039: PPUSH
1040: LD_INT 57
1042: PPUSH
1043: CALL_OW 307
1047: IFFALSE 1025
// ComTurnUnit ( Powell , JMM ) ;
1049: LD_EXP 3
1053: PPUSH
1054: LD_EXP 2
1058: PPUSH
1059: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1063: LD_EXP 3
1067: PPUSH
1068: LD_STRING D1-Pow-8
1070: PPUSH
1071: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1075: LD_INT 18
1077: PPUSH
1078: CALL_OW 67
// Query ( QLetter ) ;
1082: LD_STRING QLetter
1084: PPUSH
1085: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1089: LD_EXP 3
1093: PPUSH
1094: LD_STRING D1aa-Pow-1
1096: PPUSH
1097: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1101: LD_EXP 2
1105: PPUSH
1106: LD_STRING D1aa-JMM-1
1108: PPUSH
1109: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1113: LD_EXP 3
1117: PPUSH
1118: LD_STRING D1aa-Pow-2
1120: PPUSH
1121: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1125: LD_EXP 2
1129: PPUSH
1130: LD_STRING D1aa-JMM-2
1132: PPUSH
1133: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1137: LD_EXP 3
1141: PPUSH
1142: LD_STRING D1aa-Pow-3
1144: PPUSH
1145: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1149: LD_EXP 2
1153: PPUSH
1154: LD_STRING D1aa-JMM-3
1156: PPUSH
1157: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1161: LD_EXP 3
1165: PPUSH
1166: LD_INT 69
1168: PPUSH
1169: LD_INT 55
1171: PPUSH
1172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1176: LD_INT 35
1178: PPUSH
1179: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1183: LD_EXP 3
1187: PPUSH
1188: LD_INT 69
1190: PPUSH
1191: LD_INT 55
1193: PPUSH
1194: CALL_OW 307
1198: IFFALSE 1176
// ComTurnXY ( Powell , 71 , 55 ) ;
1200: LD_EXP 3
1204: PPUSH
1205: LD_INT 71
1207: PPUSH
1208: LD_INT 55
1210: PPUSH
1211: CALL_OW 118
// wait ( 0 0$2 ) ;
1215: LD_INT 70
1217: PPUSH
1218: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1222: LD_EXP 3
1226: PPUSH
1227: LD_STRING D1aa-Pow-4
1229: PPUSH
1230: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1234: LD_EXP 2
1238: PPUSH
1239: LD_STRING D1aa-JMM-4
1241: PPUSH
1242: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1246: LD_EXP 3
1250: PPUSH
1251: LD_EXP 2
1255: PPUSH
1256: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1260: LD_INT 10
1262: PPUSH
1263: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1267: LD_EXP 3
1271: PPUSH
1272: LD_STRING D1aa-Pow-5
1274: PPUSH
1275: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1279: LD_EXP 2
1283: PPUSH
1284: LD_STRING D1aa-JMM-5
1286: PPUSH
1287: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1291: LD_EXP 3
1295: PPUSH
1296: LD_STRING D1aa-Pow-6
1298: PPUSH
1299: CALL_OW 88
// wait ( 0 0$1 ) ;
1303: LD_INT 35
1305: PPUSH
1306: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1310: LD_EXP 2
1314: PPUSH
1315: LD_EXP 4
1319: PUSH
1320: LD_INT 3
1322: ARRAY
1323: PPUSH
1324: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1328: LD_INT 18
1330: PPUSH
1331: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1335: LD_EXP 3
1339: PPUSH
1340: LD_EXP 4
1344: PUSH
1345: LD_INT 2
1347: ARRAY
1348: PPUSH
1349: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1353: LD_INT 35
1355: PPUSH
1356: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1360: LD_EXP 3
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL_OW 308
1372: IFFALSE 1353
// CenterOnXY ( 42 , 40 ) ;
1374: LD_INT 42
1376: PPUSH
1377: LD_INT 40
1379: PPUSH
1380: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1384: LD_EXP 5
1388: PUSH
1389: LD_INT 4
1391: ARRAY
1392: PPUSH
1393: LD_EXP 4
1397: PUSH
1398: LD_INT 4
1400: ARRAY
1401: PPUSH
1402: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1406: LD_EXP 5
1410: PUSH
1411: LD_INT 5
1413: ARRAY
1414: PPUSH
1415: LD_EXP 4
1419: PUSH
1420: LD_INT 5
1422: ARRAY
1423: PPUSH
1424: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1428: LD_INT 35
1430: PPUSH
1431: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1435: LD_INT 22
1437: PUSH
1438: LD_INT 1
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 56
1447: PUSH
1448: EMPTY
1449: LIST
1450: PUSH
1451: LD_INT 21
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL_OW 69
1470: PUSH
1471: LD_INT 0
1473: EQUAL
1474: IFFALSE 1428
// CenterOnXY ( 36 , 35 ) ;
1476: LD_INT 36
1478: PPUSH
1479: LD_INT 35
1481: PPUSH
1482: CALL_OW 84
// for i := 1 to 5 do
1486: LD_ADDR_VAR 0 2
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_INT 5
1498: PUSH
1499: FOR_TO
1500: IFFALSE 1532
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1502: LD_EXP 4
1506: PUSH
1507: LD_VAR 0 2
1511: ARRAY
1512: PPUSH
1513: LD_INT 11
1515: PPUSH
1516: LD_INT 18
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 67
// end ;
1530: GO 1499
1532: POP
1533: POP
// wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1541: LD_STRING 1
1543: PPUSH
1544: LD_STRING %_cont
1546: PPUSH
1547: CALL_OW 340
// end ;
1551: LD_VAR 0 1
1555: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1556: LD_EXP 5
1560: PUSH
1561: LD_INT 4
1563: ARRAY
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: LD_INT 40
1570: PPUSH
1571: CALL_OW 307
1575: IFFALSE 1599
1577: GO 1579
1579: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1580: LD_EXP 5
1584: PUSH
1585: LD_INT 4
1587: ARRAY
1588: PPUSH
1589: LD_INT 51
1591: PPUSH
1592: LD_INT 40
1594: PPUSH
1595: CALL_OW 118
1599: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1600: LD_EXP 5
1604: PUSH
1605: LD_INT 5
1607: ARRAY
1608: PPUSH
1609: LD_INT 49
1611: PPUSH
1612: LD_INT 59
1614: PPUSH
1615: CALL_OW 307
1619: IFFALSE 1643
1621: GO 1623
1623: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1624: LD_EXP 5
1628: PUSH
1629: LD_INT 5
1631: ARRAY
1632: PPUSH
1633: LD_INT 51
1635: PPUSH
1636: LD_INT 67
1638: PPUSH
1639: CALL_OW 118
1643: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1644: LD_STRING 1
1646: PPUSH
1647: LD_STRING %_cont
1649: PPUSH
1650: CALL_OW 340
// end ; end_of_file
1654: PPOPN 1
1656: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1657: LD_INT 0
1659: PPUSH
1660: PPUSH
// if exist_mode then
1661: LD_VAR 0 2
1665: IFFALSE 1690
// unit := CreateCharacter ( prefix & ident ) else
1667: LD_ADDR_VAR 0 5
1671: PUSH
1672: LD_VAR 0 3
1676: PUSH
1677: LD_VAR 0 1
1681: STR
1682: PPUSH
1683: CALL_OW 34
1687: ST_TO_ADDR
1688: GO 1705
// unit := NewCharacter ( ident ) ;
1690: LD_ADDR_VAR 0 5
1694: PUSH
1695: LD_VAR 0 1
1699: PPUSH
1700: CALL_OW 25
1704: ST_TO_ADDR
// result := unit ;
1705: LD_ADDR_VAR 0 4
1709: PUSH
1710: LD_VAR 0 5
1714: ST_TO_ADDR
// end ;
1715: LD_VAR 0 4
1719: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1720: LD_INT 0
1722: PPUSH
1723: PPUSH
// if not side or not nation then
1724: LD_VAR 0 1
1728: NOT
1729: PUSH
1730: LD_VAR 0 2
1734: NOT
1735: OR
1736: IFFALSE 1740
// exit ;
1738: GO 2508
// case nation of nation_american :
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 1
1747: DOUBLE
1748: EQUAL
1749: IFTRUE 1753
1751: GO 1967
1753: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1754: LD_ADDR_VAR 0 4
1758: PUSH
1759: LD_INT 35
1761: PUSH
1762: LD_INT 45
1764: PUSH
1765: LD_INT 46
1767: PUSH
1768: LD_INT 47
1770: PUSH
1771: LD_INT 82
1773: PUSH
1774: LD_INT 83
1776: PUSH
1777: LD_INT 84
1779: PUSH
1780: LD_INT 85
1782: PUSH
1783: LD_INT 86
1785: PUSH
1786: LD_INT 1
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 6
1794: PUSH
1795: LD_INT 15
1797: PUSH
1798: LD_INT 16
1800: PUSH
1801: LD_INT 7
1803: PUSH
1804: LD_INT 12
1806: PUSH
1807: LD_INT 13
1809: PUSH
1810: LD_INT 10
1812: PUSH
1813: LD_INT 14
1815: PUSH
1816: LD_INT 20
1818: PUSH
1819: LD_INT 21
1821: PUSH
1822: LD_INT 22
1824: PUSH
1825: LD_INT 25
1827: PUSH
1828: LD_INT 32
1830: PUSH
1831: LD_INT 27
1833: PUSH
1834: LD_INT 36
1836: PUSH
1837: LD_INT 69
1839: PUSH
1840: LD_INT 39
1842: PUSH
1843: LD_INT 34
1845: PUSH
1846: LD_INT 40
1848: PUSH
1849: LD_INT 48
1851: PUSH
1852: LD_INT 49
1854: PUSH
1855: LD_INT 50
1857: PUSH
1858: LD_INT 51
1860: PUSH
1861: LD_INT 52
1863: PUSH
1864: LD_INT 53
1866: PUSH
1867: LD_INT 54
1869: PUSH
1870: LD_INT 55
1872: PUSH
1873: LD_INT 56
1875: PUSH
1876: LD_INT 57
1878: PUSH
1879: LD_INT 58
1881: PUSH
1882: LD_INT 59
1884: PUSH
1885: LD_INT 60
1887: PUSH
1888: LD_INT 61
1890: PUSH
1891: LD_INT 62
1893: PUSH
1894: LD_INT 80
1896: PUSH
1897: LD_INT 82
1899: PUSH
1900: LD_INT 83
1902: PUSH
1903: LD_INT 84
1905: PUSH
1906: LD_INT 85
1908: PUSH
1909: LD_INT 86
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: ST_TO_ADDR
1965: GO 2432
1967: LD_INT 2
1969: DOUBLE
1970: EQUAL
1971: IFTRUE 1975
1973: GO 2201
1975: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1976: LD_ADDR_VAR 0 4
1980: PUSH
1981: LD_INT 35
1983: PUSH
1984: LD_INT 45
1986: PUSH
1987: LD_INT 46
1989: PUSH
1990: LD_INT 47
1992: PUSH
1993: LD_INT 82
1995: PUSH
1996: LD_INT 83
1998: PUSH
1999: LD_INT 84
2001: PUSH
2002: LD_INT 85
2004: PUSH
2005: LD_INT 87
2007: PUSH
2008: LD_INT 70
2010: PUSH
2011: LD_INT 1
2013: PUSH
2014: LD_INT 11
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: LD_INT 4
2022: PUSH
2023: LD_INT 5
2025: PUSH
2026: LD_INT 6
2028: PUSH
2029: LD_INT 15
2031: PUSH
2032: LD_INT 18
2034: PUSH
2035: LD_INT 7
2037: PUSH
2038: LD_INT 17
2040: PUSH
2041: LD_INT 8
2043: PUSH
2044: LD_INT 20
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 22
2052: PUSH
2053: LD_INT 72
2055: PUSH
2056: LD_INT 26
2058: PUSH
2059: LD_INT 69
2061: PUSH
2062: LD_INT 39
2064: PUSH
2065: LD_INT 40
2067: PUSH
2068: LD_INT 41
2070: PUSH
2071: LD_INT 42
2073: PUSH
2074: LD_INT 43
2076: PUSH
2077: LD_INT 48
2079: PUSH
2080: LD_INT 49
2082: PUSH
2083: LD_INT 50
2085: PUSH
2086: LD_INT 51
2088: PUSH
2089: LD_INT 52
2091: PUSH
2092: LD_INT 53
2094: PUSH
2095: LD_INT 54
2097: PUSH
2098: LD_INT 55
2100: PUSH
2101: LD_INT 56
2103: PUSH
2104: LD_INT 60
2106: PUSH
2107: LD_INT 61
2109: PUSH
2110: LD_INT 62
2112: PUSH
2113: LD_INT 66
2115: PUSH
2116: LD_INT 67
2118: PUSH
2119: LD_INT 68
2121: PUSH
2122: LD_INT 81
2124: PUSH
2125: LD_INT 82
2127: PUSH
2128: LD_INT 83
2130: PUSH
2131: LD_INT 84
2133: PUSH
2134: LD_INT 85
2136: PUSH
2137: LD_INT 87
2139: PUSH
2140: LD_INT 88
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
2199: GO 2432
2201: LD_INT 3
2203: DOUBLE
2204: EQUAL
2205: IFTRUE 2209
2207: GO 2431
2209: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2210: LD_ADDR_VAR 0 4
2214: PUSH
2215: LD_INT 46
2217: PUSH
2218: LD_INT 47
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 2
2226: PUSH
2227: LD_INT 82
2229: PUSH
2230: LD_INT 83
2232: PUSH
2233: LD_INT 84
2235: PUSH
2236: LD_INT 85
2238: PUSH
2239: LD_INT 86
2241: PUSH
2242: LD_INT 11
2244: PUSH
2245: LD_INT 9
2247: PUSH
2248: LD_INT 20
2250: PUSH
2251: LD_INT 19
2253: PUSH
2254: LD_INT 21
2256: PUSH
2257: LD_INT 24
2259: PUSH
2260: LD_INT 22
2262: PUSH
2263: LD_INT 25
2265: PUSH
2266: LD_INT 28
2268: PUSH
2269: LD_INT 29
2271: PUSH
2272: LD_INT 30
2274: PUSH
2275: LD_INT 31
2277: PUSH
2278: LD_INT 37
2280: PUSH
2281: LD_INT 38
2283: PUSH
2284: LD_INT 32
2286: PUSH
2287: LD_INT 27
2289: PUSH
2290: LD_INT 33
2292: PUSH
2293: LD_INT 69
2295: PUSH
2296: LD_INT 39
2298: PUSH
2299: LD_INT 34
2301: PUSH
2302: LD_INT 40
2304: PUSH
2305: LD_INT 71
2307: PUSH
2308: LD_INT 23
2310: PUSH
2311: LD_INT 44
2313: PUSH
2314: LD_INT 48
2316: PUSH
2317: LD_INT 49
2319: PUSH
2320: LD_INT 50
2322: PUSH
2323: LD_INT 51
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 53
2331: PUSH
2332: LD_INT 54
2334: PUSH
2335: LD_INT 55
2337: PUSH
2338: LD_INT 56
2340: PUSH
2341: LD_INT 57
2343: PUSH
2344: LD_INT 58
2346: PUSH
2347: LD_INT 59
2349: PUSH
2350: LD_INT 63
2352: PUSH
2353: LD_INT 64
2355: PUSH
2356: LD_INT 65
2358: PUSH
2359: LD_INT 82
2361: PUSH
2362: LD_INT 83
2364: PUSH
2365: LD_INT 84
2367: PUSH
2368: LD_INT 85
2370: PUSH
2371: LD_INT 86
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
2429: GO 2432
2431: POP
// if state > - 1 and state < 3 then
2432: LD_VAR 0 3
2436: PUSH
2437: LD_INT 1
2439: NEG
2440: GREATER
2441: PUSH
2442: LD_VAR 0 3
2446: PUSH
2447: LD_INT 3
2449: LESS
2450: AND
2451: IFFALSE 2508
// for i in result do
2453: LD_ADDR_VAR 0 5
2457: PUSH
2458: LD_VAR 0 4
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2506
// if GetTech ( i , side ) <> state then
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_VAR 0 1
2475: PPUSH
2476: CALL_OW 321
2480: PUSH
2481: LD_VAR 0 3
2485: NONEQUAL
2486: IFFALSE 2504
// result := result diff i ;
2488: LD_ADDR_VAR 0 4
2492: PUSH
2493: LD_VAR 0 4
2497: PUSH
2498: LD_VAR 0 5
2502: DIFF
2503: ST_TO_ADDR
2504: GO 2463
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 4
2512: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// result := true ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2526: LD_ADDR_VAR 0 5
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 480
2540: ST_TO_ADDR
// if not tmp then
2541: LD_VAR 0 5
2545: NOT
2546: IFFALSE 2550
// exit ;
2548: GO 2599
// for i in tmp do
2550: LD_ADDR_VAR 0 4
2554: PUSH
2555: LD_VAR 0 5
2559: PUSH
2560: FOR_IN
2561: IFFALSE 2597
// if GetTech ( i , side ) <> state_researched then
2563: LD_VAR 0 4
2567: PPUSH
2568: LD_VAR 0 1
2572: PPUSH
2573: CALL_OW 321
2577: PUSH
2578: LD_INT 2
2580: NONEQUAL
2581: IFFALSE 2595
// begin result := false ;
2583: LD_ADDR_VAR 0 3
2587: PUSH
2588: LD_INT 0
2590: ST_TO_ADDR
// exit ;
2591: POP
2592: POP
2593: GO 2599
// end ;
2595: GO 2560
2597: POP
2598: POP
// end ;
2599: LD_VAR 0 3
2603: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2604: LD_INT 0
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
2618: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2619: LD_VAR 0 1
2623: NOT
2624: PUSH
2625: LD_VAR 0 1
2629: PPUSH
2630: CALL_OW 257
2634: PUSH
2635: LD_INT 9
2637: NONEQUAL
2638: OR
2639: IFFALSE 2643
// exit ;
2641: GO 3216
// side := GetSide ( unit ) ;
2643: LD_ADDR_VAR 0 9
2647: PUSH
2648: LD_VAR 0 1
2652: PPUSH
2653: CALL_OW 255
2657: ST_TO_ADDR
// tech_space := tech_spacanom ;
2658: LD_ADDR_VAR 0 12
2662: PUSH
2663: LD_INT 29
2665: ST_TO_ADDR
// tech_time := tech_taurad ;
2666: LD_ADDR_VAR 0 13
2670: PUSH
2671: LD_INT 28
2673: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2674: LD_ADDR_VAR 0 11
2678: PUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 310
2688: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2689: LD_VAR 0 11
2693: PPUSH
2694: CALL_OW 247
2698: PUSH
2699: LD_INT 2
2701: EQUAL
2702: IFFALSE 2706
// exit ;
2704: GO 3216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2706: LD_ADDR_VAR 0 8
2710: PUSH
2711: LD_INT 81
2713: PUSH
2714: LD_VAR 0 9
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: LD_INT 21
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: ST_TO_ADDR
// if not tmp then
2749: LD_VAR 0 8
2753: NOT
2754: IFFALSE 2758
// exit ;
2756: GO 3216
// if in_unit then
2758: LD_VAR 0 11
2762: IFFALSE 2786
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2764: LD_ADDR_VAR 0 10
2768: PUSH
2769: LD_VAR 0 8
2773: PPUSH
2774: LD_VAR 0 11
2778: PPUSH
2779: CALL_OW 74
2783: ST_TO_ADDR
2784: GO 2806
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2786: LD_ADDR_VAR 0 10
2790: PUSH
2791: LD_VAR 0 8
2795: PPUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 74
2805: ST_TO_ADDR
// if not enemy then
2806: LD_VAR 0 10
2810: NOT
2811: IFFALSE 2815
// exit ;
2813: GO 3216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2815: LD_VAR 0 11
2819: PUSH
2820: LD_VAR 0 11
2824: PPUSH
2825: LD_VAR 0 10
2829: PPUSH
2830: CALL_OW 296
2834: PUSH
2835: LD_INT 13
2837: GREATER
2838: AND
2839: PUSH
2840: LD_VAR 0 1
2844: PPUSH
2845: LD_VAR 0 10
2849: PPUSH
2850: CALL_OW 296
2854: PUSH
2855: LD_INT 12
2857: GREATER
2858: OR
2859: IFFALSE 2863
// exit ;
2861: GO 3216
// missile := [ 1 ] ;
2863: LD_ADDR_VAR 0 14
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2874: LD_VAR 0 9
2878: PPUSH
2879: LD_VAR 0 12
2883: PPUSH
2884: CALL_OW 325
2888: IFFALSE 2917
// missile := Replace ( missile , missile + 1 , 2 ) ;
2890: LD_ADDR_VAR 0 14
2894: PUSH
2895: LD_VAR 0 14
2899: PPUSH
2900: LD_VAR 0 14
2904: PUSH
2905: LD_INT 1
2907: PLUS
2908: PPUSH
2909: LD_INT 2
2911: PPUSH
2912: CALL_OW 1
2916: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2917: LD_VAR 0 9
2921: PPUSH
2922: LD_VAR 0 13
2926: PPUSH
2927: CALL_OW 325
2931: PUSH
2932: LD_VAR 0 10
2936: PPUSH
2937: CALL_OW 255
2941: PPUSH
2942: LD_VAR 0 13
2946: PPUSH
2947: CALL_OW 325
2951: NOT
2952: AND
2953: IFFALSE 2982
// missile := Replace ( missile , missile + 1 , 3 ) ;
2955: LD_ADDR_VAR 0 14
2959: PUSH
2960: LD_VAR 0 14
2964: PPUSH
2965: LD_VAR 0 14
2969: PUSH
2970: LD_INT 1
2972: PLUS
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 1
2981: ST_TO_ADDR
// if missile < 2 then
2982: LD_VAR 0 14
2986: PUSH
2987: LD_INT 2
2989: LESS
2990: IFFALSE 2994
// exit ;
2992: GO 3216
// x := GetX ( enemy ) ;
2994: LD_ADDR_VAR 0 4
2998: PUSH
2999: LD_VAR 0 10
3003: PPUSH
3004: CALL_OW 250
3008: ST_TO_ADDR
// y := GetY ( enemy ) ;
3009: LD_ADDR_VAR 0 5
3013: PUSH
3014: LD_VAR 0 10
3018: PPUSH
3019: CALL_OW 251
3023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3024: LD_ADDR_VAR 0 6
3028: PUSH
3029: LD_VAR 0 4
3033: PUSH
3034: LD_INT 1
3036: NEG
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: CALL_OW 12
3045: PLUS
3046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3047: LD_ADDR_VAR 0 7
3051: PUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: NEG
3060: PPUSH
3061: LD_INT 1
3063: PPUSH
3064: CALL_OW 12
3068: PLUS
3069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3070: LD_VAR 0 6
3074: PPUSH
3075: LD_VAR 0 7
3079: PPUSH
3080: CALL_OW 488
3084: NOT
3085: IFFALSE 3107
// begin _x := x ;
3087: LD_ADDR_VAR 0 6
3091: PUSH
3092: LD_VAR 0 4
3096: ST_TO_ADDR
// _y := y ;
3097: LD_ADDR_VAR 0 7
3101: PUSH
3102: LD_VAR 0 5
3106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_VAR 0 14
3119: PPUSH
3120: CALL_OW 12
3124: ST_TO_ADDR
// case i of 1 :
3125: LD_VAR 0 3
3129: PUSH
3130: LD_INT 1
3132: DOUBLE
3133: EQUAL
3134: IFTRUE 3138
3136: GO 3155
3138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3139: LD_VAR 0 1
3143: PPUSH
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 115
3153: GO 3216
3155: LD_INT 2
3157: DOUBLE
3158: EQUAL
3159: IFTRUE 3163
3161: GO 3185
3163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: LD_VAR 0 7
3178: PPUSH
3179: CALL_OW 153
3183: GO 3216
3185: LD_INT 3
3187: DOUBLE
3188: EQUAL
3189: IFTRUE 3193
3191: GO 3215
3193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3194: LD_VAR 0 1
3198: PPUSH
3199: LD_VAR 0 6
3203: PPUSH
3204: LD_VAR 0 7
3208: PPUSH
3209: CALL_OW 154
3213: GO 3216
3215: POP
// end ;
3216: LD_VAR 0 2
3220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
// if not unit or not building then
3229: LD_VAR 0 1
3233: NOT
3234: PUSH
3235: LD_VAR 0 2
3239: NOT
3240: OR
3241: IFFALSE 3245
// exit ;
3243: GO 3403
// x := GetX ( building ) ;
3245: LD_ADDR_VAR 0 5
3249: PUSH
3250: LD_VAR 0 2
3254: PPUSH
3255: CALL_OW 250
3259: ST_TO_ADDR
// y := GetY ( building ) ;
3260: LD_ADDR_VAR 0 6
3264: PUSH
3265: LD_VAR 0 2
3269: PPUSH
3270: CALL_OW 251
3274: ST_TO_ADDR
// for i = 0 to 5 do
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: DOUBLE
3281: LD_INT 0
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3401
// begin _x := ShiftX ( x , i , 3 ) ;
3291: LD_ADDR_VAR 0 7
3295: PUSH
3296: LD_VAR 0 5
3300: PPUSH
3301: LD_VAR 0 4
3305: PPUSH
3306: LD_INT 3
3308: PPUSH
3309: CALL_OW 272
3313: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3314: LD_ADDR_VAR 0 8
3318: PUSH
3319: LD_VAR 0 6
3323: PPUSH
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: CALL_OW 273
3336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3337: LD_VAR 0 7
3341: PPUSH
3342: LD_VAR 0 8
3346: PPUSH
3347: CALL_OW 488
3351: NOT
3352: IFFALSE 3356
// continue ;
3354: GO 3288
// if HexInfo ( _x , _y ) = 0 then
3356: LD_VAR 0 7
3360: PPUSH
3361: LD_VAR 0 8
3365: PPUSH
3366: CALL_OW 428
3370: PUSH
3371: LD_INT 0
3373: EQUAL
3374: IFFALSE 3399
// begin ComMoveXY ( unit , _x , _y ) ;
3376: LD_VAR 0 1
3380: PPUSH
3381: LD_VAR 0 7
3385: PPUSH
3386: LD_VAR 0 8
3390: PPUSH
3391: CALL_OW 111
// exit ;
3395: POP
3396: POP
3397: GO 3403
// end ; end ;
3399: GO 3288
3401: POP
3402: POP
// end ;
3403: LD_VAR 0 3
3407: RET
// export function ScanBase ( side , base_area ) ; begin
3408: LD_INT 0
3410: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: LD_VAR 0 2
3420: PPUSH
3421: LD_INT 81
3423: PUSH
3424: LD_VAR 0 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PPUSH
3433: CALL_OW 70
3437: ST_TO_ADDR
// end ;
3438: LD_VAR 0 3
3442: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3443: LD_INT 0
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
// result := false ;
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// side := GetSide ( unit ) ;
3457: LD_ADDR_VAR 0 3
3461: PUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 255
3471: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3472: LD_ADDR_VAR 0 4
3476: PUSH
3477: LD_VAR 0 1
3481: PPUSH
3482: CALL_OW 248
3486: ST_TO_ADDR
// case nat of 1 :
3487: LD_VAR 0 4
3491: PUSH
3492: LD_INT 1
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3500
3498: GO 3511
3500: POP
// tech := tech_lassight ; 2 :
3501: LD_ADDR_VAR 0 5
3505: PUSH
3506: LD_INT 12
3508: ST_TO_ADDR
3509: GO 3550
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3530
3519: POP
// tech := tech_mortar ; 3 :
3520: LD_ADDR_VAR 0 5
3524: PUSH
3525: LD_INT 41
3527: ST_TO_ADDR
3528: GO 3550
3530: LD_INT 3
3532: DOUBLE
3533: EQUAL
3534: IFTRUE 3538
3536: GO 3549
3538: POP
// tech := tech_bazooka ; end ;
3539: LD_ADDR_VAR 0 5
3543: PUSH
3544: LD_INT 44
3546: ST_TO_ADDR
3547: GO 3550
3549: POP
// if Researched ( side , tech ) then
3550: LD_VAR 0 3
3554: PPUSH
3555: LD_VAR 0 5
3559: PPUSH
3560: CALL_OW 325
3564: IFFALSE 3591
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3566: LD_ADDR_VAR 0 2
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: LD_INT 8
3576: PUSH
3577: LD_INT 9
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: PUSH
3585: LD_VAR 0 4
3589: ARRAY
3590: ST_TO_ADDR
// end ;
3591: LD_VAR 0 2
3595: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3596: LD_INT 0
3598: PPUSH
3599: PPUSH
3600: PPUSH
// if not mines then
3601: LD_VAR 0 2
3605: NOT
3606: IFFALSE 3610
// exit ;
3608: GO 3754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3610: LD_ADDR_VAR 0 5
3614: PUSH
3615: LD_INT 81
3617: PUSH
3618: LD_VAR 0 1
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 3
3629: PUSH
3630: LD_INT 21
3632: PUSH
3633: LD_INT 3
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 69
3652: ST_TO_ADDR
// for i in mines do
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: LD_VAR 0 2
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3752
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3666: LD_VAR 0 4
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 2
3682: ARRAY
3683: PPUSH
3684: CALL_OW 458
3688: NOT
3689: IFFALSE 3693
// continue ;
3691: GO 3663
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: LD_VAR 0 4
3706: PUSH
3707: LD_INT 2
3709: ARRAY
3710: PPUSH
3711: CALL_OW 428
3715: PUSH
3716: LD_VAR 0 5
3720: IN
3721: IFFALSE 3750
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3723: LD_VAR 0 4
3727: PUSH
3728: LD_INT 1
3730: ARRAY
3731: PPUSH
3732: LD_VAR 0 4
3736: PUSH
3737: LD_INT 2
3739: ARRAY
3740: PPUSH
3741: LD_VAR 0 1
3745: PPUSH
3746: CALL_OW 456
// end ;
3750: GO 3663
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 3
3758: RET
// export function Count ( array ) ; begin
3759: LD_INT 0
3761: PPUSH
// result := array + 0 ;
3762: LD_ADDR_VAR 0 2
3766: PUSH
3767: LD_VAR 0 1
3771: PUSH
3772: LD_INT 0
3774: PLUS
3775: ST_TO_ADDR
// end ;
3776: LD_VAR 0 2
3780: RET
// export function IsEmpty ( building ) ; begin
3781: LD_INT 0
3783: PPUSH
// if not building then
3784: LD_VAR 0 1
3788: NOT
3789: IFFALSE 3793
// exit ;
3791: GO 3836
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_VAR 0 1
3802: PUSH
3803: LD_INT 22
3805: PUSH
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 255
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 58
3822: PUSH
3823: EMPTY
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PPUSH
3830: CALL_OW 69
3834: IN
3835: ST_TO_ADDR
// end ;
3836: LD_VAR 0 2
3840: RET
// export function IsNotFull ( building ) ; var places ; begin
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// if not building then
3845: LD_VAR 0 1
3849: NOT
3850: IFFALSE 3854
// exit ;
3852: GO 3882
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3854: LD_ADDR_VAR 0 2
3858: PUSH
3859: LD_VAR 0 1
3863: PPUSH
3864: LD_INT 3
3866: PUSH
3867: LD_INT 62
3869: PUSH
3870: EMPTY
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 72
3881: ST_TO_ADDR
// end ;
3882: LD_VAR 0 2
3886: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3887: LD_INT 0
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
// tmp := [ ] ;
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: EMPTY
3899: ST_TO_ADDR
// list := [ ] ;
3900: LD_ADDR_VAR 0 5
3904: PUSH
3905: EMPTY
3906: ST_TO_ADDR
// for i = 16 to 25 do
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: DOUBLE
3913: LD_INT 16
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 25
3919: PUSH
3920: FOR_TO
3921: IFFALSE 3994
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_INT 22
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 255
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 91
3952: PUSH
3953: LD_VAR 0 1
3957: PUSH
3958: LD_INT 6
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 30
3968: PUSH
3969: LD_VAR 0 4
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: EMPTY
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: ADD
3991: ST_TO_ADDR
3992: GO 3920
3994: POP
3995: POP
// for i = 1 to tmp do
3996: LD_ADDR_VAR 0 4
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_VAR 0 3
4010: PUSH
4011: FOR_TO
4012: IFFALSE 4100
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_VAR 0 5
4023: PUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_VAR 0 4
4033: ARRAY
4034: PPUSH
4035: CALL_OW 266
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: LD_VAR 0 4
4049: ARRAY
4050: PPUSH
4051: CALL_OW 250
4055: PUSH
4056: LD_VAR 0 3
4060: PUSH
4061: LD_VAR 0 4
4065: ARRAY
4066: PPUSH
4067: CALL_OW 251
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: ARRAY
4082: PPUSH
4083: CALL_OW 254
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: PUSH
4094: EMPTY
4095: LIST
4096: ADD
4097: ST_TO_ADDR
4098: GO 4011
4100: POP
4101: POP
// result := list ;
4102: LD_ADDR_VAR 0 2
4106: PUSH
4107: LD_VAR 0 5
4111: ST_TO_ADDR
// end ;
4112: LD_VAR 0 2
4116: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
// if not factory then
4126: LD_VAR 0 1
4130: NOT
4131: IFFALSE 4135
// exit ;
4133: GO 4728
// if control = control_apeman then
4135: LD_VAR 0 4
4139: PUSH
4140: LD_INT 5
4142: EQUAL
4143: IFFALSE 4252
// begin tmp := UnitsInside ( factory ) ;
4145: LD_ADDR_VAR 0 8
4149: PUSH
4150: LD_VAR 0 1
4154: PPUSH
4155: CALL_OW 313
4159: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4160: LD_VAR 0 8
4164: PPUSH
4165: LD_INT 25
4167: PUSH
4168: LD_INT 12
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 72
4179: NOT
4180: IFFALSE 4190
// control := control_manual ;
4182: LD_ADDR_VAR 0 4
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4190: LD_ADDR_VAR 0 8
4194: PUSH
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL 3887 0 1
4204: ST_TO_ADDR
// if tmp then
4205: LD_VAR 0 8
4209: IFFALSE 4252
// begin for i in tmp do
4211: LD_ADDR_VAR 0 7
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: FOR_IN
4222: IFFALSE 4250
// if i [ 1 ] = b_ext_radio then
4224: LD_VAR 0 7
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PUSH
4233: LD_INT 22
4235: EQUAL
4236: IFFALSE 4248
// begin control := control_remote ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_INT 2
4245: ST_TO_ADDR
// break ;
4246: GO 4250
// end ;
4248: GO 4221
4250: POP
4251: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 2
4261: PPUSH
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_VAR 0 4
4271: PPUSH
4272: LD_VAR 0 5
4276: PPUSH
4277: CALL_OW 448
4281: IFFALSE 4316
// begin result := [ chassis , engine , control , weapon ] ;
4283: LD_ADDR_VAR 0 6
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_VAR 0 3
4297: PUSH
4298: LD_VAR 0 4
4302: PUSH
4303: LD_VAR 0 5
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: ST_TO_ADDR
// exit ;
4314: GO 4728
// end ; _chassis := AvailableChassisList ( factory ) ;
4316: LD_ADDR_VAR 0 9
4320: PUSH
4321: LD_VAR 0 1
4325: PPUSH
4326: CALL_OW 475
4330: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4331: LD_ADDR_VAR 0 11
4335: PUSH
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 476
4345: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4346: LD_ADDR_VAR 0 12
4350: PUSH
4351: LD_VAR 0 1
4355: PPUSH
4356: CALL_OW 477
4360: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4361: LD_ADDR_VAR 0 10
4365: PUSH
4366: LD_VAR 0 1
4370: PPUSH
4371: CALL_OW 478
4375: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4376: LD_VAR 0 9
4380: NOT
4381: PUSH
4382: LD_VAR 0 11
4386: NOT
4387: OR
4388: PUSH
4389: LD_VAR 0 12
4393: NOT
4394: OR
4395: PUSH
4396: LD_VAR 0 10
4400: NOT
4401: OR
4402: IFFALSE 4437
// begin result := [ chassis , engine , control , weapon ] ;
4404: LD_ADDR_VAR 0 6
4408: PUSH
4409: LD_VAR 0 2
4413: PUSH
4414: LD_VAR 0 3
4418: PUSH
4419: LD_VAR 0 4
4423: PUSH
4424: LD_VAR 0 5
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// exit ;
4435: GO 4728
// end ; if not chassis in _chassis then
4437: LD_VAR 0 2
4441: PUSH
4442: LD_VAR 0 9
4446: IN
4447: NOT
4448: IFFALSE 4474
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4450: LD_ADDR_VAR 0 2
4454: PUSH
4455: LD_VAR 0 9
4459: PUSH
4460: LD_INT 1
4462: PPUSH
4463: LD_VAR 0 9
4467: PPUSH
4468: CALL_OW 12
4472: ARRAY
4473: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4474: LD_VAR 0 2
4478: PPUSH
4479: LD_VAR 0 3
4483: PPUSH
4484: CALL 4733 0 2
4488: NOT
4489: IFFALSE 4548
// repeat engine := _engine [ 1 ] ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_VAR 0 11
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4505: LD_ADDR_VAR 0 11
4509: PUSH
4510: LD_VAR 0 11
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: CALL_OW 3
4522: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4523: LD_VAR 0 2
4527: PPUSH
4528: LD_VAR 0 3
4532: PPUSH
4533: CALL 4733 0 2
4537: PUSH
4538: LD_VAR 0 11
4542: PUSH
4543: EMPTY
4544: EQUAL
4545: OR
4546: IFFALSE 4491
// if not control in _control then
4548: LD_VAR 0 4
4552: PUSH
4553: LD_VAR 0 12
4557: IN
4558: NOT
4559: IFFALSE 4585
// control := _control [ rand ( 1 , _control ) ] ;
4561: LD_ADDR_VAR 0 4
4565: PUSH
4566: LD_VAR 0 12
4570: PUSH
4571: LD_INT 1
4573: PPUSH
4574: LD_VAR 0 12
4578: PPUSH
4579: CALL_OW 12
4583: ARRAY
4584: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4585: LD_VAR 0 2
4589: PPUSH
4590: LD_VAR 0 5
4594: PPUSH
4595: CALL 4953 0 2
4599: NOT
4600: IFFALSE 4659
// repeat weapon := _weapon [ 1 ] ;
4602: LD_ADDR_VAR 0 5
4606: PUSH
4607: LD_VAR 0 10
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4616: LD_ADDR_VAR 0 10
4620: PUSH
4621: LD_VAR 0 10
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: CALL_OW 3
4633: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4634: LD_VAR 0 2
4638: PPUSH
4639: LD_VAR 0 5
4643: PPUSH
4644: CALL 4953 0 2
4648: PUSH
4649: LD_VAR 0 10
4653: PUSH
4654: EMPTY
4655: EQUAL
4656: OR
4657: IFFALSE 4602
// result := [ ] ;
4659: LD_ADDR_VAR 0 6
4663: PUSH
4664: EMPTY
4665: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 2
4675: PPUSH
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: LD_VAR 0 5
4690: PPUSH
4691: CALL_OW 448
4695: IFFALSE 4728
// result := [ chassis , engine , control , weapon ] ;
4697: LD_ADDR_VAR 0 6
4701: PUSH
4702: LD_VAR 0 2
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_VAR 0 4
4716: PUSH
4717: LD_VAR 0 5
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
// end ;
4728: LD_VAR 0 6
4732: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4733: LD_INT 0
4735: PPUSH
// if not chassis or not engine then
4736: LD_VAR 0 1
4740: NOT
4741: PUSH
4742: LD_VAR 0 2
4746: NOT
4747: OR
4748: IFFALSE 4752
// exit ;
4750: GO 4948
// case engine of engine_solar :
4752: LD_VAR 0 2
4756: PUSH
4757: LD_INT 2
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4803
4765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_INT 11
4773: PUSH
4774: LD_INT 12
4776: PUSH
4777: LD_INT 13
4779: PUSH
4780: LD_INT 14
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: LD_INT 3
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 4932
4803: LD_INT 1
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4873
4811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 11
4819: PUSH
4820: LD_INT 12
4822: PUSH
4823: LD_INT 13
4825: PUSH
4826: LD_INT 14
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: LD_INT 2
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: LD_INT 4
4840: PUSH
4841: LD_INT 5
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 23
4849: PUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 24
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
4871: GO 4932
4873: LD_INT 3
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4931
4881: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: LD_INT 13
4889: PUSH
4890: LD_INT 14
4892: PUSH
4893: LD_INT 2
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: LD_INT 5
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: LD_INT 22
4910: PUSH
4911: LD_INT 23
4913: PUSH
4914: LD_INT 24
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: ST_TO_ADDR
4929: GO 4932
4931: POP
// result := ( chassis in result ) ;
4932: LD_ADDR_VAR 0 3
4936: PUSH
4937: LD_VAR 0 1
4941: PUSH
4942: LD_VAR 0 3
4946: IN
4947: ST_TO_ADDR
// end ;
4948: LD_VAR 0 3
4952: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4953: LD_INT 0
4955: PPUSH
// if not chassis or not weapon then
4956: LD_VAR 0 1
4960: NOT
4961: PUSH
4962: LD_VAR 0 2
4966: NOT
4967: OR
4968: IFFALSE 4972
// exit ;
4970: GO 6032
// case weapon of us_machine_gun :
4972: LD_VAR 0 2
4976: PUSH
4977: LD_INT 2
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 5015
4985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4986: LD_ADDR_VAR 0 3
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 2
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: LD_INT 4
5002: PUSH
5003: LD_INT 5
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: ST_TO_ADDR
5013: GO 6016
5015: LD_INT 3
5017: DOUBLE
5018: EQUAL
5019: IFTRUE 5023
5021: GO 5053
5023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5024: LD_ADDR_VAR 0 3
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 2
5034: PUSH
5035: LD_INT 3
5037: PUSH
5038: LD_INT 4
5040: PUSH
5041: LD_INT 5
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
5051: GO 6016
5053: LD_INT 11
5055: DOUBLE
5056: EQUAL
5057: IFTRUE 5061
5059: GO 5091
5061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: LD_INT 1
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: LD_INT 4
5078: PUSH
5079: LD_INT 5
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: ST_TO_ADDR
5089: GO 6016
5091: LD_INT 4
5093: DOUBLE
5094: EQUAL
5095: IFTRUE 5099
5097: GO 5125
5099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 2
5107: PUSH
5108: LD_INT 3
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: LD_INT 5
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: ST_TO_ADDR
5123: GO 6016
5125: LD_INT 5
5127: DOUBLE
5128: EQUAL
5129: IFTRUE 5133
5131: GO 5159
5133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 4
5147: PUSH
5148: LD_INT 5
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
5157: GO 6016
5159: LD_INT 9
5161: DOUBLE
5162: EQUAL
5163: IFTRUE 5167
5165: GO 5193
5167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_INT 2
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: LD_INT 4
5181: PUSH
5182: LD_INT 5
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: ST_TO_ADDR
5191: GO 6016
5193: LD_INT 7
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5227
5201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: LD_INT 5
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: ST_TO_ADDR
5225: GO 6016
5227: LD_INT 12
5229: DOUBLE
5230: EQUAL
5231: IFTRUE 5235
5233: GO 5261
5235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 4
5249: PUSH
5250: LD_INT 5
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
5259: GO 6016
5261: LD_INT 13
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5295
5269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: LD_INT 3
5280: PUSH
5281: LD_INT 4
5283: PUSH
5284: LD_INT 5
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: ST_TO_ADDR
5293: GO 6016
5295: LD_INT 14
5297: DOUBLE
5298: EQUAL
5299: IFTRUE 5303
5301: GO 5321
5303: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5304: LD_ADDR_VAR 0 3
5308: PUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: ST_TO_ADDR
5319: GO 6016
5321: LD_INT 6
5323: DOUBLE
5324: EQUAL
5325: IFTRUE 5329
5327: GO 5347
5329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5330: LD_ADDR_VAR 0 3
5334: PUSH
5335: LD_INT 4
5337: PUSH
5338: LD_INT 5
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: ST_TO_ADDR
5345: GO 6016
5347: LD_INT 10
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5373
5355: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5356: LD_ADDR_VAR 0 3
5360: PUSH
5361: LD_INT 4
5363: PUSH
5364: LD_INT 5
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: ST_TO_ADDR
5371: GO 6016
5373: LD_INT 22
5375: DOUBLE
5376: EQUAL
5377: IFTRUE 5381
5379: GO 5407
5381: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5382: LD_ADDR_VAR 0 3
5386: PUSH
5387: LD_INT 11
5389: PUSH
5390: LD_INT 12
5392: PUSH
5393: LD_INT 13
5395: PUSH
5396: LD_INT 14
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: ST_TO_ADDR
5405: GO 6016
5407: LD_INT 23
5409: DOUBLE
5410: EQUAL
5411: IFTRUE 5415
5413: GO 5441
5415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5416: LD_ADDR_VAR 0 3
5420: PUSH
5421: LD_INT 11
5423: PUSH
5424: LD_INT 12
5426: PUSH
5427: LD_INT 13
5429: PUSH
5430: LD_INT 14
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
5439: GO 6016
5441: LD_INT 24
5443: DOUBLE
5444: EQUAL
5445: IFTRUE 5449
5447: GO 5475
5449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_INT 11
5457: PUSH
5458: LD_INT 12
5460: PUSH
5461: LD_INT 13
5463: PUSH
5464: LD_INT 14
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 6016
5475: LD_INT 30
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5483
5481: GO 5509
5483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5484: LD_ADDR_VAR 0 3
5488: PUSH
5489: LD_INT 11
5491: PUSH
5492: LD_INT 12
5494: PUSH
5495: LD_INT 13
5497: PUSH
5498: LD_INT 14
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: ST_TO_ADDR
5507: GO 6016
5509: LD_INT 25
5511: DOUBLE
5512: EQUAL
5513: IFTRUE 5517
5515: GO 5535
5517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5518: LD_ADDR_VAR 0 3
5522: PUSH
5523: LD_INT 13
5525: PUSH
5526: LD_INT 14
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: ST_TO_ADDR
5533: GO 6016
5535: LD_INT 27
5537: DOUBLE
5538: EQUAL
5539: IFTRUE 5543
5541: GO 5561
5543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5544: LD_ADDR_VAR 0 3
5548: PUSH
5549: LD_INT 13
5551: PUSH
5552: LD_INT 14
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 6016
5561: LD_INT 92
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5595
5569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 11
5577: PUSH
5578: LD_INT 12
5580: PUSH
5581: LD_INT 13
5583: PUSH
5584: LD_INT 14
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
5593: GO 6016
5595: LD_INT 28
5597: DOUBLE
5598: EQUAL
5599: IFTRUE 5603
5601: GO 5621
5603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_INT 13
5611: PUSH
5612: LD_INT 14
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 6016
5621: LD_INT 29
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5647
5629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 13
5637: PUSH
5638: LD_INT 14
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
5645: GO 6016
5647: LD_INT 31
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5655
5653: GO 5673
5655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_INT 13
5663: PUSH
5664: LD_INT 14
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 6016
5673: LD_INT 26
5675: DOUBLE
5676: EQUAL
5677: IFTRUE 5681
5679: GO 5699
5681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: LD_INT 13
5689: PUSH
5690: LD_INT 14
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: ST_TO_ADDR
5697: GO 6016
5699: LD_INT 42
5701: DOUBLE
5702: EQUAL
5703: IFTRUE 5707
5705: GO 5733
5707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5708: LD_ADDR_VAR 0 3
5712: PUSH
5713: LD_INT 21
5715: PUSH
5716: LD_INT 22
5718: PUSH
5719: LD_INT 23
5721: PUSH
5722: LD_INT 24
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: ST_TO_ADDR
5731: GO 6016
5733: LD_INT 43
5735: DOUBLE
5736: EQUAL
5737: IFTRUE 5741
5739: GO 5767
5741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5742: LD_ADDR_VAR 0 3
5746: PUSH
5747: LD_INT 21
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 23
5755: PUSH
5756: LD_INT 24
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: ST_TO_ADDR
5765: GO 6016
5767: LD_INT 44
5769: DOUBLE
5770: EQUAL
5771: IFTRUE 5775
5773: GO 5801
5775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: LD_INT 21
5783: PUSH
5784: LD_INT 22
5786: PUSH
5787: LD_INT 23
5789: PUSH
5790: LD_INT 24
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: ST_TO_ADDR
5799: GO 6016
5801: LD_INT 45
5803: DOUBLE
5804: EQUAL
5805: IFTRUE 5809
5807: GO 5835
5809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: LD_INT 21
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_INT 23
5823: PUSH
5824: LD_INT 24
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: ST_TO_ADDR
5833: GO 6016
5835: LD_INT 49
5837: DOUBLE
5838: EQUAL
5839: IFTRUE 5843
5841: GO 5869
5843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5844: LD_ADDR_VAR 0 3
5848: PUSH
5849: LD_INT 21
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_INT 23
5857: PUSH
5858: LD_INT 24
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: ST_TO_ADDR
5867: GO 6016
5869: LD_INT 51
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5903
5877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5878: LD_ADDR_VAR 0 3
5882: PUSH
5883: LD_INT 21
5885: PUSH
5886: LD_INT 22
5888: PUSH
5889: LD_INT 23
5891: PUSH
5892: LD_INT 24
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: ST_TO_ADDR
5901: GO 6016
5903: LD_INT 52
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5937
5911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5912: LD_ADDR_VAR 0 3
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: LD_INT 22
5922: PUSH
5923: LD_INT 23
5925: PUSH
5926: LD_INT 24
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: ST_TO_ADDR
5935: GO 6016
5937: LD_INT 53
5939: DOUBLE
5940: EQUAL
5941: IFTRUE 5945
5943: GO 5963
5945: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5946: LD_ADDR_VAR 0 3
5950: PUSH
5951: LD_INT 23
5953: PUSH
5954: LD_INT 24
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: ST_TO_ADDR
5961: GO 6016
5963: LD_INT 46
5965: DOUBLE
5966: EQUAL
5967: IFTRUE 5971
5969: GO 5989
5971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5972: LD_ADDR_VAR 0 3
5976: PUSH
5977: LD_INT 23
5979: PUSH
5980: LD_INT 24
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: ST_TO_ADDR
5987: GO 6016
5989: LD_INT 47
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6015
5997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5998: LD_ADDR_VAR 0 3
6002: PUSH
6003: LD_INT 23
6005: PUSH
6006: LD_INT 24
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 6016
6015: POP
// result := ( chassis in result ) ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_VAR 0 1
6025: PUSH
6026: LD_VAR 0 3
6030: IN
6031: ST_TO_ADDR
// end ;
6032: LD_VAR 0 3
6036: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6037: LD_INT 0
6039: PPUSH
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
6045: PPUSH
// result := array ;
6046: LD_ADDR_VAR 0 5
6050: PUSH
6051: LD_VAR 0 1
6055: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6056: LD_VAR 0 1
6060: NOT
6061: PUSH
6062: LD_VAR 0 2
6066: NOT
6067: OR
6068: PUSH
6069: LD_VAR 0 3
6073: NOT
6074: OR
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_VAR 0 1
6085: GREATER
6086: OR
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 1
6097: GREATER
6098: OR
6099: IFFALSE 6103
// exit ;
6101: GO 6399
// if direction then
6103: LD_VAR 0 4
6107: IFFALSE 6171
// begin d := 1 ;
6109: LD_ADDR_VAR 0 9
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// if i_from > i_to then
6117: LD_VAR 0 2
6121: PUSH
6122: LD_VAR 0 3
6126: GREATER
6127: IFFALSE 6153
// length := ( array - i_from ) + i_to else
6129: LD_ADDR_VAR 0 11
6133: PUSH
6134: LD_VAR 0 1
6138: PUSH
6139: LD_VAR 0 2
6143: MINUS
6144: PUSH
6145: LD_VAR 0 3
6149: PLUS
6150: ST_TO_ADDR
6151: GO 6169
// length := i_to - i_from ;
6153: LD_ADDR_VAR 0 11
6157: PUSH
6158: LD_VAR 0 3
6162: PUSH
6163: LD_VAR 0 2
6167: MINUS
6168: ST_TO_ADDR
// end else
6169: GO 6232
// begin d := - 1 ;
6171: LD_ADDR_VAR 0 9
6175: PUSH
6176: LD_INT 1
6178: NEG
6179: ST_TO_ADDR
// if i_from > i_to then
6180: LD_VAR 0 2
6184: PUSH
6185: LD_VAR 0 3
6189: GREATER
6190: IFFALSE 6210
// length := i_from - i_to else
6192: LD_ADDR_VAR 0 11
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: MINUS
6207: ST_TO_ADDR
6208: GO 6232
// length := ( array - i_to ) + i_from ;
6210: LD_ADDR_VAR 0 11
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: LD_VAR 0 3
6224: MINUS
6225: PUSH
6226: LD_VAR 0 2
6230: PLUS
6231: ST_TO_ADDR
// end ; if not length then
6232: LD_VAR 0 11
6236: NOT
6237: IFFALSE 6241
// exit ;
6239: GO 6399
// tmp := array ;
6241: LD_ADDR_VAR 0 10
6245: PUSH
6246: LD_VAR 0 1
6250: ST_TO_ADDR
// for i = 1 to length do
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: DOUBLE
6257: LD_INT 1
6259: DEC
6260: ST_TO_ADDR
6261: LD_VAR 0 11
6265: PUSH
6266: FOR_TO
6267: IFFALSE 6387
// begin for j = 1 to array do
6269: LD_ADDR_VAR 0 7
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_VAR 0 1
6283: PUSH
6284: FOR_TO
6285: IFFALSE 6373
// begin k := j + d ;
6287: LD_ADDR_VAR 0 8
6291: PUSH
6292: LD_VAR 0 7
6296: PUSH
6297: LD_VAR 0 9
6301: PLUS
6302: ST_TO_ADDR
// if k > array then
6303: LD_VAR 0 8
6307: PUSH
6308: LD_VAR 0 1
6312: GREATER
6313: IFFALSE 6323
// k := 1 ;
6315: LD_ADDR_VAR 0 8
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if not k then
6323: LD_VAR 0 8
6327: NOT
6328: IFFALSE 6340
// k := array ;
6330: LD_ADDR_VAR 0 8
6334: PUSH
6335: LD_VAR 0 1
6339: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6340: LD_ADDR_VAR 0 10
6344: PUSH
6345: LD_VAR 0 10
6349: PPUSH
6350: LD_VAR 0 8
6354: PPUSH
6355: LD_VAR 0 1
6359: PUSH
6360: LD_VAR 0 7
6364: ARRAY
6365: PPUSH
6366: CALL_OW 1
6370: ST_TO_ADDR
// end ;
6371: GO 6284
6373: POP
6374: POP
// array := tmp ;
6375: LD_ADDR_VAR 0 1
6379: PUSH
6380: LD_VAR 0 10
6384: ST_TO_ADDR
// end ;
6385: GO 6266
6387: POP
6388: POP
// result := array ;
6389: LD_ADDR_VAR 0 5
6393: PUSH
6394: LD_VAR 0 1
6398: ST_TO_ADDR
// end ;
6399: LD_VAR 0 5
6403: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6404: LD_INT 0
6406: PPUSH
6407: PPUSH
// result := 0 ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 0
6415: ST_TO_ADDR
// if not array or not value in array then
6416: LD_VAR 0 1
6420: NOT
6421: PUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_VAR 0 1
6431: IN
6432: NOT
6433: OR
6434: IFFALSE 6438
// exit ;
6436: GO 6492
// for i = 1 to array do
6438: LD_ADDR_VAR 0 4
6442: PUSH
6443: DOUBLE
6444: LD_INT 1
6446: DEC
6447: ST_TO_ADDR
6448: LD_VAR 0 1
6452: PUSH
6453: FOR_TO
6454: IFFALSE 6490
// if value = array [ i ] then
6456: LD_VAR 0 2
6460: PUSH
6461: LD_VAR 0 1
6465: PUSH
6466: LD_VAR 0 4
6470: ARRAY
6471: EQUAL
6472: IFFALSE 6488
// begin result := i ;
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_VAR 0 4
6483: ST_TO_ADDR
// exit ;
6484: POP
6485: POP
6486: GO 6492
// end ;
6488: GO 6453
6490: POP
6491: POP
// end ;
6492: LD_VAR 0 3
6496: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6497: LD_INT 0
6499: PPUSH
// vc_chassis := chassis ;
6500: LD_ADDR_OWVAR 37
6504: PUSH
6505: LD_VAR 0 1
6509: ST_TO_ADDR
// vc_engine := engine ;
6510: LD_ADDR_OWVAR 39
6514: PUSH
6515: LD_VAR 0 2
6519: ST_TO_ADDR
// vc_control := control ;
6520: LD_ADDR_OWVAR 38
6524: PUSH
6525: LD_VAR 0 3
6529: ST_TO_ADDR
// vc_weapon := weapon ;
6530: LD_ADDR_OWVAR 40
6534: PUSH
6535: LD_VAR 0 4
6539: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6540: LD_ADDR_OWVAR 41
6544: PUSH
6545: LD_VAR 0 5
6549: ST_TO_ADDR
// end ;
6550: LD_VAR 0 6
6554: RET
// export function WantPlant ( unit ) ; var task ; begin
6555: LD_INT 0
6557: PPUSH
6558: PPUSH
// result := false ;
6559: LD_ADDR_VAR 0 2
6563: PUSH
6564: LD_INT 0
6566: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_VAR 0 1
6576: PPUSH
6577: CALL_OW 437
6581: ST_TO_ADDR
// if task then
6582: LD_VAR 0 3
6586: IFFALSE 6614
// if task [ 1 ] [ 1 ] = p then
6588: LD_VAR 0 3
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PUSH
6597: LD_INT 1
6599: ARRAY
6600: PUSH
6601: LD_STRING p
6603: EQUAL
6604: IFFALSE 6614
// result := true ;
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: LD_INT 1
6613: ST_TO_ADDR
// end ;
6614: LD_VAR 0 2
6618: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
6623: PPUSH
6624: PPUSH
// if pos < 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: LESS
6633: IFFALSE 6637
// exit ;
6635: GO 6940
// if pos = 1 then
6637: LD_VAR 0 2
6641: PUSH
6642: LD_INT 1
6644: EQUAL
6645: IFFALSE 6678
// result := Replace ( arr , pos [ 1 ] , value ) else
6647: LD_ADDR_VAR 0 4
6651: PUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: LD_VAR 0 2
6661: PUSH
6662: LD_INT 1
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: CALL_OW 1
6675: ST_TO_ADDR
6676: GO 6940
// begin tmp := arr ;
6678: LD_ADDR_VAR 0 6
6682: PUSH
6683: LD_VAR 0 1
6687: ST_TO_ADDR
// s_arr := [ tmp ] ;
6688: LD_ADDR_VAR 0 7
6692: PUSH
6693: LD_VAR 0 6
6697: PUSH
6698: EMPTY
6699: LIST
6700: ST_TO_ADDR
// for i = 1 to pos - 1 do
6701: LD_ADDR_VAR 0 5
6705: PUSH
6706: DOUBLE
6707: LD_INT 1
6709: DEC
6710: ST_TO_ADDR
6711: LD_VAR 0 2
6715: PUSH
6716: LD_INT 1
6718: MINUS
6719: PUSH
6720: FOR_TO
6721: IFFALSE 6766
// begin tmp := tmp [ pos [ i ] ] ;
6723: LD_ADDR_VAR 0 6
6727: PUSH
6728: LD_VAR 0 6
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 5
6742: ARRAY
6743: ARRAY
6744: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6745: LD_ADDR_VAR 0 7
6749: PUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 6
6759: PUSH
6760: EMPTY
6761: LIST
6762: ADD
6763: ST_TO_ADDR
// end ;
6764: GO 6720
6766: POP
6767: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6768: LD_ADDR_VAR 0 6
6772: PUSH
6773: LD_VAR 0 6
6777: PPUSH
6778: LD_VAR 0 2
6782: PUSH
6783: LD_VAR 0 2
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PPUSH
6794: CALL_OW 1
6798: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6799: LD_ADDR_VAR 0 7
6803: PUSH
6804: LD_VAR 0 7
6808: PPUSH
6809: LD_VAR 0 7
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 1
6823: ST_TO_ADDR
// for i = s_arr downto 2 do
6824: LD_ADDR_VAR 0 5
6828: PUSH
6829: DOUBLE
6830: LD_VAR 0 7
6834: INC
6835: ST_TO_ADDR
6836: LD_INT 2
6838: PUSH
6839: FOR_DOWNTO
6840: IFFALSE 6924
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: LD_VAR 0 7
6851: PUSH
6852: LD_VAR 0 5
6856: PUSH
6857: LD_INT 1
6859: MINUS
6860: ARRAY
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_VAR 0 5
6871: PUSH
6872: LD_INT 1
6874: MINUS
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 7
6881: PUSH
6882: LD_VAR 0 5
6886: ARRAY
6887: PPUSH
6888: CALL_OW 1
6892: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6893: LD_ADDR_VAR 0 7
6897: PUSH
6898: LD_VAR 0 7
6902: PPUSH
6903: LD_VAR 0 5
6907: PUSH
6908: LD_INT 1
6910: MINUS
6911: PPUSH
6912: LD_VAR 0 6
6916: PPUSH
6917: CALL_OW 1
6921: ST_TO_ADDR
// end ;
6922: GO 6839
6924: POP
6925: POP
// result := s_arr [ 1 ] ;
6926: LD_ADDR_VAR 0 4
6930: PUSH
6931: LD_VAR 0 7
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: ST_TO_ADDR
// end ; end ;
6940: LD_VAR 0 4
6944: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
// if not list then
6949: LD_VAR 0 1
6953: NOT
6954: IFFALSE 6958
// exit ;
6956: GO 7049
// i := list [ pos1 ] ;
6958: LD_ADDR_VAR 0 5
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: LD_VAR 0 2
6972: ARRAY
6973: ST_TO_ADDR
// if not i then
6974: LD_VAR 0 5
6978: NOT
6979: IFFALSE 6983
// exit ;
6981: GO 7049
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_VAR 0 2
6997: PPUSH
6998: LD_VAR 0 1
7002: PUSH
7003: LD_VAR 0 3
7007: ARRAY
7008: PPUSH
7009: CALL_OW 1
7013: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7014: LD_ADDR_VAR 0 1
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: LD_VAR 0 5
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// result := list ;
7039: LD_ADDR_VAR 0 4
7043: PUSH
7044: LD_VAR 0 1
7048: ST_TO_ADDR
// end ;
7049: LD_VAR 0 4
7053: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7054: LD_INT 0
7056: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7057: LD_ADDR_VAR 0 5
7061: PUSH
7062: LD_VAR 0 1
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_VAR 0 2
7086: PPUSH
7087: LD_VAR 0 3
7091: PPUSH
7092: LD_VAR 0 4
7096: PPUSH
7097: CALL 7107 0 5
7101: ST_TO_ADDR
// end ;
7102: LD_VAR 0 5
7106: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7107: LD_INT 0
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
// if not list then
7113: LD_VAR 0 3
7117: NOT
7118: IFFALSE 7122
// exit ;
7120: GO 7510
// result := [ ] ;
7122: LD_ADDR_VAR 0 6
7126: PUSH
7127: EMPTY
7128: ST_TO_ADDR
// for i in list do
7129: LD_ADDR_VAR 0 7
7133: PUSH
7134: LD_VAR 0 3
7138: PUSH
7139: FOR_IN
7140: IFFALSE 7342
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7142: LD_ADDR_VAR 0 9
7146: PUSH
7147: LD_VAR 0 7
7151: PPUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: CALL_OW 297
7166: ST_TO_ADDR
// if not result then
7167: LD_VAR 0 6
7171: NOT
7172: IFFALSE 7198
// result := [ [ i , tmp ] ] else
7174: LD_ADDR_VAR 0 6
7178: PUSH
7179: LD_VAR 0 7
7183: PUSH
7184: LD_VAR 0 9
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: ST_TO_ADDR
7196: GO 7340
// begin if result [ result ] [ 2 ] < tmp then
7198: LD_VAR 0 6
7202: PUSH
7203: LD_VAR 0 6
7207: ARRAY
7208: PUSH
7209: LD_INT 2
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 9
7217: LESS
7218: IFFALSE 7260
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7220: LD_ADDR_VAR 0 6
7224: PUSH
7225: LD_VAR 0 6
7229: PPUSH
7230: LD_VAR 0 6
7234: PUSH
7235: LD_INT 1
7237: PLUS
7238: PPUSH
7239: LD_VAR 0 7
7243: PUSH
7244: LD_VAR 0 9
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PPUSH
7253: CALL_OW 2
7257: ST_TO_ADDR
7258: GO 7340
// for j = 1 to result do
7260: LD_ADDR_VAR 0 8
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_VAR 0 6
7274: PUSH
7275: FOR_TO
7276: IFFALSE 7338
// begin if tmp < result [ j ] [ 2 ] then
7278: LD_VAR 0 9
7282: PUSH
7283: LD_VAR 0 6
7287: PUSH
7288: LD_VAR 0 8
7292: ARRAY
7293: PUSH
7294: LD_INT 2
7296: ARRAY
7297: LESS
7298: IFFALSE 7336
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7300: LD_ADDR_VAR 0 6
7304: PUSH
7305: LD_VAR 0 6
7309: PPUSH
7310: LD_VAR 0 8
7314: PPUSH
7315: LD_VAR 0 7
7319: PUSH
7320: LD_VAR 0 9
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PPUSH
7329: CALL_OW 2
7333: ST_TO_ADDR
// break ;
7334: GO 7338
// end ; end ;
7336: GO 7275
7338: POP
7339: POP
// end ; end ;
7340: GO 7139
7342: POP
7343: POP
// if result and not asc then
7344: LD_VAR 0 6
7348: PUSH
7349: LD_VAR 0 4
7353: NOT
7354: AND
7355: IFFALSE 7430
// begin tmp := result ;
7357: LD_ADDR_VAR 0 9
7361: PUSH
7362: LD_VAR 0 6
7366: ST_TO_ADDR
// for i = tmp downto 1 do
7367: LD_ADDR_VAR 0 7
7371: PUSH
7372: DOUBLE
7373: LD_VAR 0 9
7377: INC
7378: ST_TO_ADDR
7379: LD_INT 1
7381: PUSH
7382: FOR_DOWNTO
7383: IFFALSE 7428
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7385: LD_ADDR_VAR 0 6
7389: PUSH
7390: LD_VAR 0 6
7394: PPUSH
7395: LD_VAR 0 9
7399: PUSH
7400: LD_VAR 0 7
7404: MINUS
7405: PUSH
7406: LD_INT 1
7408: PLUS
7409: PPUSH
7410: LD_VAR 0 9
7414: PUSH
7415: LD_VAR 0 7
7419: ARRAY
7420: PPUSH
7421: CALL_OW 1
7425: ST_TO_ADDR
7426: GO 7382
7428: POP
7429: POP
// end ; tmp := [ ] ;
7430: LD_ADDR_VAR 0 9
7434: PUSH
7435: EMPTY
7436: ST_TO_ADDR
// if mode then
7437: LD_VAR 0 5
7441: IFFALSE 7510
// begin for i = 1 to result do
7443: LD_ADDR_VAR 0 7
7447: PUSH
7448: DOUBLE
7449: LD_INT 1
7451: DEC
7452: ST_TO_ADDR
7453: LD_VAR 0 6
7457: PUSH
7458: FOR_TO
7459: IFFALSE 7498
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7461: LD_ADDR_VAR 0 9
7465: PUSH
7466: LD_VAR 0 9
7470: PPUSH
7471: LD_VAR 0 7
7475: PPUSH
7476: LD_VAR 0 6
7480: PUSH
7481: LD_VAR 0 7
7485: ARRAY
7486: PUSH
7487: LD_INT 1
7489: ARRAY
7490: PPUSH
7491: CALL_OW 1
7495: ST_TO_ADDR
7496: GO 7458
7498: POP
7499: POP
// result := tmp ;
7500: LD_ADDR_VAR 0 6
7504: PUSH
7505: LD_VAR 0 9
7509: ST_TO_ADDR
// end ; end ;
7510: LD_VAR 0 6
7514: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7515: LD_INT 0
7517: PPUSH
7518: PPUSH
7519: PPUSH
7520: PPUSH
7521: PPUSH
7522: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7523: LD_ADDR_VAR 0 5
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: LD_INT 0
7533: PUSH
7534: LD_INT 0
7536: PUSH
7537: EMPTY
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// if not x or not y then
7545: LD_VAR 0 2
7549: NOT
7550: PUSH
7551: LD_VAR 0 3
7555: NOT
7556: OR
7557: IFFALSE 7561
// exit ;
7559: GO 9211
// if not range then
7561: LD_VAR 0 4
7565: NOT
7566: IFFALSE 7576
// range := 10 ;
7568: LD_ADDR_VAR 0 4
7572: PUSH
7573: LD_INT 10
7575: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7576: LD_ADDR_VAR 0 8
7580: PUSH
7581: LD_INT 81
7583: PUSH
7584: LD_VAR 0 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 92
7595: PUSH
7596: LD_VAR 0 2
7600: PUSH
7601: LD_VAR 0 3
7605: PUSH
7606: LD_VAR 0 4
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 21
7622: PUSH
7623: LD_INT 3
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: ST_TO_ADDR
// if not tmp then
7644: LD_VAR 0 8
7648: NOT
7649: IFFALSE 7653
// exit ;
7651: GO 9211
// for i in tmp do
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_VAR 0 8
7662: PUSH
7663: FOR_IN
7664: IFFALSE 9186
// begin points := [ 0 , 0 , 0 ] ;
7666: LD_ADDR_VAR 0 9
7670: PUSH
7671: LD_INT 0
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: ST_TO_ADDR
// bpoints := 1 ;
7685: LD_ADDR_VAR 0 10
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7693: LD_VAR 0 6
7697: PPUSH
7698: CALL_OW 247
7702: PUSH
7703: LD_INT 1
7705: DOUBLE
7706: EQUAL
7707: IFTRUE 7711
7709: GO 8289
7711: POP
// begin if GetClass ( i ) = 1 then
7712: LD_VAR 0 6
7716: PPUSH
7717: CALL_OW 257
7721: PUSH
7722: LD_INT 1
7724: EQUAL
7725: IFFALSE 7746
// points := [ 10 , 5 , 3 ] ;
7727: LD_ADDR_VAR 0 9
7731: PUSH
7732: LD_INT 10
7734: PUSH
7735: LD_INT 5
7737: PUSH
7738: LD_INT 3
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7746: LD_VAR 0 6
7750: PPUSH
7751: CALL_OW 257
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: LD_INT 3
7761: PUSH
7762: LD_INT 4
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: LIST
7769: IN
7770: IFFALSE 7791
// points := [ 3 , 2 , 1 ] ;
7772: LD_ADDR_VAR 0 9
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 1
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7791: LD_VAR 0 6
7795: PPUSH
7796: CALL_OW 257
7800: PUSH
7801: LD_INT 5
7803: EQUAL
7804: IFFALSE 7825
// points := [ 130 , 5 , 2 ] ;
7806: LD_ADDR_VAR 0 9
7810: PUSH
7811: LD_INT 130
7813: PUSH
7814: LD_INT 5
7816: PUSH
7817: LD_INT 2
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7825: LD_VAR 0 6
7829: PPUSH
7830: CALL_OW 257
7834: PUSH
7835: LD_INT 8
7837: EQUAL
7838: IFFALSE 7859
// points := [ 35 , 35 , 30 ] ;
7840: LD_ADDR_VAR 0 9
7844: PUSH
7845: LD_INT 35
7847: PUSH
7848: LD_INT 35
7850: PUSH
7851: LD_INT 30
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7859: LD_VAR 0 6
7863: PPUSH
7864: CALL_OW 257
7868: PUSH
7869: LD_INT 9
7871: EQUAL
7872: IFFALSE 7893
// points := [ 20 , 55 , 40 ] ;
7874: LD_ADDR_VAR 0 9
7878: PUSH
7879: LD_INT 20
7881: PUSH
7882: LD_INT 55
7884: PUSH
7885: LD_INT 40
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7893: LD_VAR 0 6
7897: PPUSH
7898: CALL_OW 257
7902: PUSH
7903: LD_INT 12
7905: PUSH
7906: LD_INT 16
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: IN
7913: IFFALSE 7934
// points := [ 5 , 3 , 2 ] ;
7915: LD_ADDR_VAR 0 9
7919: PUSH
7920: LD_INT 5
7922: PUSH
7923: LD_INT 3
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7934: LD_VAR 0 6
7938: PPUSH
7939: CALL_OW 257
7943: PUSH
7944: LD_INT 17
7946: EQUAL
7947: IFFALSE 7968
// points := [ 100 , 50 , 75 ] ;
7949: LD_ADDR_VAR 0 9
7953: PUSH
7954: LD_INT 100
7956: PUSH
7957: LD_INT 50
7959: PUSH
7960: LD_INT 75
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7968: LD_VAR 0 6
7972: PPUSH
7973: CALL_OW 257
7977: PUSH
7978: LD_INT 15
7980: EQUAL
7981: IFFALSE 8002
// points := [ 10 , 5 , 3 ] ;
7983: LD_ADDR_VAR 0 9
7987: PUSH
7988: LD_INT 10
7990: PUSH
7991: LD_INT 5
7993: PUSH
7994: LD_INT 3
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8002: LD_VAR 0 6
8006: PPUSH
8007: CALL_OW 257
8011: PUSH
8012: LD_INT 14
8014: EQUAL
8015: IFFALSE 8036
// points := [ 10 , 0 , 0 ] ;
8017: LD_ADDR_VAR 0 9
8021: PUSH
8022: LD_INT 10
8024: PUSH
8025: LD_INT 0
8027: PUSH
8028: LD_INT 0
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8036: LD_VAR 0 6
8040: PPUSH
8041: CALL_OW 257
8045: PUSH
8046: LD_INT 11
8048: EQUAL
8049: IFFALSE 8070
// points := [ 30 , 10 , 5 ] ;
8051: LD_ADDR_VAR 0 9
8055: PUSH
8056: LD_INT 30
8058: PUSH
8059: LD_INT 10
8061: PUSH
8062: LD_INT 5
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8070: LD_VAR 0 1
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: CALL_OW 321
8082: PUSH
8083: LD_INT 2
8085: EQUAL
8086: IFFALSE 8103
// bpoints := bpoints * 1.8 ;
8088: LD_ADDR_VAR 0 10
8092: PUSH
8093: LD_VAR 0 10
8097: PUSH
8098: LD_REAL  1.80000000000000E+0000
8101: MUL
8102: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8103: LD_VAR 0 6
8107: PPUSH
8108: CALL_OW 257
8112: PUSH
8113: LD_INT 1
8115: PUSH
8116: LD_INT 2
8118: PUSH
8119: LD_INT 3
8121: PUSH
8122: LD_INT 4
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: IN
8131: PUSH
8132: LD_VAR 0 1
8136: PPUSH
8137: LD_INT 51
8139: PPUSH
8140: CALL_OW 321
8144: PUSH
8145: LD_INT 2
8147: EQUAL
8148: AND
8149: IFFALSE 8166
// bpoints := bpoints * 1.2 ;
8151: LD_ADDR_VAR 0 10
8155: PUSH
8156: LD_VAR 0 10
8160: PUSH
8161: LD_REAL  1.20000000000000E+0000
8164: MUL
8165: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8166: LD_VAR 0 6
8170: PPUSH
8171: CALL_OW 257
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: LD_INT 7
8181: PUSH
8182: LD_INT 9
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: IN
8190: PUSH
8191: LD_VAR 0 1
8195: PPUSH
8196: LD_INT 52
8198: PPUSH
8199: CALL_OW 321
8203: PUSH
8204: LD_INT 2
8206: EQUAL
8207: AND
8208: IFFALSE 8225
// bpoints := bpoints * 1.5 ;
8210: LD_ADDR_VAR 0 10
8214: PUSH
8215: LD_VAR 0 10
8219: PUSH
8220: LD_REAL  1.50000000000000E+0000
8223: MUL
8224: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8225: LD_VAR 0 1
8229: PPUSH
8230: LD_INT 66
8232: PPUSH
8233: CALL_OW 321
8237: PUSH
8238: LD_INT 2
8240: EQUAL
8241: IFFALSE 8258
// bpoints := bpoints * 1.1 ;
8243: LD_ADDR_VAR 0 10
8247: PUSH
8248: LD_VAR 0 10
8252: PUSH
8253: LD_REAL  1.10000000000000E+0000
8256: MUL
8257: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8258: LD_ADDR_VAR 0 10
8262: PUSH
8263: LD_VAR 0 10
8267: PUSH
8268: LD_VAR 0 6
8272: PPUSH
8273: LD_INT 1
8275: PPUSH
8276: CALL_OW 259
8280: PUSH
8281: LD_REAL  1.15000000000000E+0000
8284: MUL
8285: MUL
8286: ST_TO_ADDR
// end ; unit_vehicle :
8287: GO 9115
8289: LD_INT 2
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 9103
8297: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8298: LD_VAR 0 6
8302: PPUSH
8303: CALL_OW 264
8307: PUSH
8308: LD_INT 2
8310: PUSH
8311: LD_INT 42
8313: PUSH
8314: LD_INT 24
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: IN
8322: IFFALSE 8343
// points := [ 25 , 5 , 3 ] ;
8324: LD_ADDR_VAR 0 9
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 5
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8343: LD_VAR 0 6
8347: PPUSH
8348: CALL_OW 264
8352: PUSH
8353: LD_INT 4
8355: PUSH
8356: LD_INT 43
8358: PUSH
8359: LD_INT 25
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: IN
8367: IFFALSE 8388
// points := [ 40 , 15 , 5 ] ;
8369: LD_ADDR_VAR 0 9
8373: PUSH
8374: LD_INT 40
8376: PUSH
8377: LD_INT 15
8379: PUSH
8380: LD_INT 5
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8388: LD_VAR 0 6
8392: PPUSH
8393: CALL_OW 264
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: LD_INT 23
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: IN
8408: IFFALSE 8429
// points := [ 7 , 25 , 8 ] ;
8410: LD_ADDR_VAR 0 9
8414: PUSH
8415: LD_INT 7
8417: PUSH
8418: LD_INT 25
8420: PUSH
8421: LD_INT 8
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8429: LD_VAR 0 6
8433: PPUSH
8434: CALL_OW 264
8438: PUSH
8439: LD_INT 5
8441: PUSH
8442: LD_INT 27
8444: PUSH
8445: LD_INT 44
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: IN
8453: IFFALSE 8474
// points := [ 14 , 50 , 16 ] ;
8455: LD_ADDR_VAR 0 9
8459: PUSH
8460: LD_INT 14
8462: PUSH
8463: LD_INT 50
8465: PUSH
8466: LD_INT 16
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: LIST
8473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8474: LD_VAR 0 6
8478: PPUSH
8479: CALL_OW 264
8483: PUSH
8484: LD_INT 6
8486: PUSH
8487: LD_INT 46
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: IN
8494: IFFALSE 8515
// points := [ 32 , 120 , 70 ] ;
8496: LD_ADDR_VAR 0 9
8500: PUSH
8501: LD_INT 32
8503: PUSH
8504: LD_INT 120
8506: PUSH
8507: LD_INT 70
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8515: LD_VAR 0 6
8519: PPUSH
8520: CALL_OW 264
8524: PUSH
8525: LD_INT 7
8527: PUSH
8528: LD_INT 28
8530: PUSH
8531: LD_INT 45
8533: PUSH
8534: LD_INT 92
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: IN
8543: IFFALSE 8564
// points := [ 35 , 20 , 45 ] ;
8545: LD_ADDR_VAR 0 9
8549: PUSH
8550: LD_INT 35
8552: PUSH
8553: LD_INT 20
8555: PUSH
8556: LD_INT 45
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8564: LD_VAR 0 6
8568: PPUSH
8569: CALL_OW 264
8573: PUSH
8574: LD_INT 47
8576: PUSH
8577: EMPTY
8578: LIST
8579: IN
8580: IFFALSE 8601
// points := [ 67 , 45 , 75 ] ;
8582: LD_ADDR_VAR 0 9
8586: PUSH
8587: LD_INT 67
8589: PUSH
8590: LD_INT 45
8592: PUSH
8593: LD_INT 75
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8601: LD_VAR 0 6
8605: PPUSH
8606: CALL_OW 264
8610: PUSH
8611: LD_INT 26
8613: PUSH
8614: EMPTY
8615: LIST
8616: IN
8617: IFFALSE 8638
// points := [ 120 , 30 , 80 ] ;
8619: LD_ADDR_VAR 0 9
8623: PUSH
8624: LD_INT 120
8626: PUSH
8627: LD_INT 30
8629: PUSH
8630: LD_INT 80
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8638: LD_VAR 0 6
8642: PPUSH
8643: CALL_OW 264
8647: PUSH
8648: LD_INT 22
8650: PUSH
8651: EMPTY
8652: LIST
8653: IN
8654: IFFALSE 8675
// points := [ 40 , 1 , 1 ] ;
8656: LD_ADDR_VAR 0 9
8660: PUSH
8661: LD_INT 40
8663: PUSH
8664: LD_INT 1
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: LIST
8674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 264
8684: PUSH
8685: LD_INT 29
8687: PUSH
8688: EMPTY
8689: LIST
8690: IN
8691: IFFALSE 8712
// points := [ 70 , 200 , 400 ] ;
8693: LD_ADDR_VAR 0 9
8697: PUSH
8698: LD_INT 70
8700: PUSH
8701: LD_INT 200
8703: PUSH
8704: LD_INT 400
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8712: LD_VAR 0 6
8716: PPUSH
8717: CALL_OW 264
8721: PUSH
8722: LD_INT 14
8724: PUSH
8725: LD_INT 53
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: IN
8732: IFFALSE 8753
// points := [ 40 , 10 , 20 ] ;
8734: LD_ADDR_VAR 0 9
8738: PUSH
8739: LD_INT 40
8741: PUSH
8742: LD_INT 10
8744: PUSH
8745: LD_INT 20
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8753: LD_VAR 0 6
8757: PPUSH
8758: CALL_OW 264
8762: PUSH
8763: LD_INT 9
8765: PUSH
8766: EMPTY
8767: LIST
8768: IN
8769: IFFALSE 8790
// points := [ 5 , 70 , 20 ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 5
8778: PUSH
8779: LD_INT 70
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8790: LD_VAR 0 6
8794: PPUSH
8795: CALL_OW 264
8799: PUSH
8800: LD_INT 10
8802: PUSH
8803: EMPTY
8804: LIST
8805: IN
8806: IFFALSE 8827
// points := [ 35 , 110 , 70 ] ;
8808: LD_ADDR_VAR 0 9
8812: PUSH
8813: LD_INT 35
8815: PUSH
8816: LD_INT 110
8818: PUSH
8819: LD_INT 70
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8827: LD_VAR 0 6
8831: PPUSH
8832: CALL_OW 265
8836: PUSH
8837: LD_INT 25
8839: EQUAL
8840: IFFALSE 8861
// points := [ 80 , 65 , 100 ] ;
8842: LD_ADDR_VAR 0 9
8846: PUSH
8847: LD_INT 80
8849: PUSH
8850: LD_INT 65
8852: PUSH
8853: LD_INT 100
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8861: LD_VAR 0 6
8865: PPUSH
8866: CALL_OW 263
8870: PUSH
8871: LD_INT 1
8873: EQUAL
8874: IFFALSE 8909
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8876: LD_ADDR_VAR 0 10
8880: PUSH
8881: LD_VAR 0 10
8885: PUSH
8886: LD_VAR 0 6
8890: PPUSH
8891: CALL_OW 311
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: CALL_OW 259
8903: PUSH
8904: LD_INT 4
8906: MUL
8907: MUL
8908: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8909: LD_VAR 0 6
8913: PPUSH
8914: CALL_OW 263
8918: PUSH
8919: LD_INT 2
8921: EQUAL
8922: IFFALSE 8973
// begin j := IsControledBy ( i ) ;
8924: LD_ADDR_VAR 0 7
8928: PUSH
8929: LD_VAR 0 6
8933: PPUSH
8934: CALL_OW 312
8938: ST_TO_ADDR
// if j then
8939: LD_VAR 0 7
8943: IFFALSE 8973
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8945: LD_ADDR_VAR 0 10
8949: PUSH
8950: LD_VAR 0 10
8954: PUSH
8955: LD_VAR 0 7
8959: PPUSH
8960: LD_INT 3
8962: PPUSH
8963: CALL_OW 259
8967: PUSH
8968: LD_INT 3
8970: MUL
8971: MUL
8972: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8973: LD_VAR 0 6
8977: PPUSH
8978: CALL_OW 264
8982: PUSH
8983: LD_INT 5
8985: PUSH
8986: LD_INT 6
8988: PUSH
8989: LD_INT 46
8991: PUSH
8992: LD_INT 44
8994: PUSH
8995: LD_INT 47
8997: PUSH
8998: LD_INT 45
9000: PUSH
9001: LD_INT 28
9003: PUSH
9004: LD_INT 7
9006: PUSH
9007: LD_INT 27
9009: PUSH
9010: LD_INT 29
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: IN
9025: PUSH
9026: LD_VAR 0 1
9030: PPUSH
9031: LD_INT 52
9033: PPUSH
9034: CALL_OW 321
9038: PUSH
9039: LD_INT 2
9041: EQUAL
9042: AND
9043: IFFALSE 9060
// bpoints := bpoints * 1.2 ;
9045: LD_ADDR_VAR 0 10
9049: PUSH
9050: LD_VAR 0 10
9054: PUSH
9055: LD_REAL  1.20000000000000E+0000
9058: MUL
9059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9060: LD_VAR 0 6
9064: PPUSH
9065: CALL_OW 264
9069: PUSH
9070: LD_INT 6
9072: PUSH
9073: LD_INT 46
9075: PUSH
9076: LD_INT 47
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: IN
9084: IFFALSE 9101
// bpoints := bpoints * 1.2 ;
9086: LD_ADDR_VAR 0 10
9090: PUSH
9091: LD_VAR 0 10
9095: PUSH
9096: LD_REAL  1.20000000000000E+0000
9099: MUL
9100: ST_TO_ADDR
// end ; unit_building :
9101: GO 9115
9103: LD_INT 3
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9114
9111: POP
// ; end ;
9112: GO 9115
9114: POP
// for j = 1 to 3 do
9115: LD_ADDR_VAR 0 7
9119: PUSH
9120: DOUBLE
9121: LD_INT 1
9123: DEC
9124: ST_TO_ADDR
9125: LD_INT 3
9127: PUSH
9128: FOR_TO
9129: IFFALSE 9182
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9131: LD_ADDR_VAR 0 5
9135: PUSH
9136: LD_VAR 0 5
9140: PPUSH
9141: LD_VAR 0 7
9145: PPUSH
9146: LD_VAR 0 5
9150: PUSH
9151: LD_VAR 0 7
9155: ARRAY
9156: PUSH
9157: LD_VAR 0 9
9161: PUSH
9162: LD_VAR 0 7
9166: ARRAY
9167: PUSH
9168: LD_VAR 0 10
9172: MUL
9173: PLUS
9174: PPUSH
9175: CALL_OW 1
9179: ST_TO_ADDR
9180: GO 9128
9182: POP
9183: POP
// end ;
9184: GO 7663
9186: POP
9187: POP
// result := Replace ( result , 4 , tmp ) ;
9188: LD_ADDR_VAR 0 5
9192: PUSH
9193: LD_VAR 0 5
9197: PPUSH
9198: LD_INT 4
9200: PPUSH
9201: LD_VAR 0 8
9205: PPUSH
9206: CALL_OW 1
9210: ST_TO_ADDR
// end ;
9211: LD_VAR 0 5
9215: RET
// export function DangerAtRange ( unit , range ) ; begin
9216: LD_INT 0
9218: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9219: LD_ADDR_VAR 0 3
9223: PUSH
9224: LD_VAR 0 1
9228: PPUSH
9229: CALL_OW 255
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 250
9243: PPUSH
9244: LD_VAR 0 1
9248: PPUSH
9249: CALL_OW 251
9253: PPUSH
9254: LD_VAR 0 2
9258: PPUSH
9259: CALL 7515 0 4
9263: ST_TO_ADDR
// end ;
9264: LD_VAR 0 3
9268: RET
// export function DangerInArea ( side , area ) ; begin
9269: LD_INT 0
9271: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9272: LD_ADDR_VAR 0 3
9276: PUSH
9277: LD_VAR 0 2
9281: PPUSH
9282: LD_INT 81
9284: PUSH
9285: LD_VAR 0 1
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 70
9298: ST_TO_ADDR
// end ;
9299: LD_VAR 0 3
9303: RET
// export function IsExtension ( b ) ; begin
9304: LD_INT 0
9306: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9307: LD_ADDR_VAR 0 2
9311: PUSH
9312: LD_VAR 0 1
9316: PUSH
9317: LD_INT 23
9319: PUSH
9320: LD_INT 20
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 17
9328: PUSH
9329: LD_INT 24
9331: PUSH
9332: LD_INT 21
9334: PUSH
9335: LD_INT 19
9337: PUSH
9338: LD_INT 16
9340: PUSH
9341: LD_INT 25
9343: PUSH
9344: LD_INT 18
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: IN
9359: ST_TO_ADDR
// end ;
9360: LD_VAR 0 2
9364: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9365: LD_INT 0
9367: PPUSH
9368: PPUSH
9369: PPUSH
// result := [ ] ;
9370: LD_ADDR_VAR 0 4
9374: PUSH
9375: EMPTY
9376: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9377: LD_ADDR_VAR 0 5
9381: PUSH
9382: LD_VAR 0 2
9386: PPUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 3
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PPUSH
9397: CALL_OW 70
9401: ST_TO_ADDR
// if not tmp then
9402: LD_VAR 0 5
9406: NOT
9407: IFFALSE 9411
// exit ;
9409: GO 9475
// if checkLink then
9411: LD_VAR 0 3
9415: IFFALSE 9465
// begin for i in tmp do
9417: LD_ADDR_VAR 0 6
9421: PUSH
9422: LD_VAR 0 5
9426: PUSH
9427: FOR_IN
9428: IFFALSE 9463
// if GetBase ( i ) <> base then
9430: LD_VAR 0 6
9434: PPUSH
9435: CALL_OW 274
9439: PUSH
9440: LD_VAR 0 1
9444: NONEQUAL
9445: IFFALSE 9461
// ComLinkToBase ( base , i ) ;
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_VAR 0 6
9456: PPUSH
9457: CALL_OW 169
9461: GO 9427
9463: POP
9464: POP
// end ; result := tmp ;
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_VAR 0 5
9474: ST_TO_ADDR
// end ;
9475: LD_VAR 0 4
9479: RET
// export function ComComplete ( units , b ) ; var i ; begin
9480: LD_INT 0
9482: PPUSH
9483: PPUSH
// if not units then
9484: LD_VAR 0 1
9488: NOT
9489: IFFALSE 9493
// exit ;
9491: GO 9583
// for i in units do
9493: LD_ADDR_VAR 0 4
9497: PUSH
9498: LD_VAR 0 1
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9581
// if BuildingStatus ( b ) = bs_build then
9506: LD_VAR 0 2
9510: PPUSH
9511: CALL_OW 461
9515: PUSH
9516: LD_INT 1
9518: EQUAL
9519: IFFALSE 9579
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9521: LD_VAR 0 4
9525: PPUSH
9526: LD_STRING h
9528: PUSH
9529: LD_VAR 0 2
9533: PPUSH
9534: CALL_OW 250
9538: PUSH
9539: LD_VAR 0 2
9543: PPUSH
9544: CALL_OW 251
9548: PUSH
9549: LD_VAR 0 2
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: LD_INT 0
9559: PUSH
9560: LD_INT 0
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: PPUSH
9575: CALL_OW 446
9579: GO 9503
9581: POP
9582: POP
// end ;
9583: LD_VAR 0 3
9587: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9588: LD_INT 0
9590: PPUSH
9591: PPUSH
9592: PPUSH
9593: PPUSH
9594: PPUSH
9595: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9596: LD_VAR 0 1
9600: NOT
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: LD_INT 2
9614: NONEQUAL
9615: OR
9616: IFFALSE 9620
// exit ;
9618: GO 9936
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9620: LD_ADDR_VAR 0 6
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_VAR 0 1
9632: PPUSH
9633: CALL_OW 255
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 2
9644: PUSH
9645: LD_INT 30
9647: PUSH
9648: LD_INT 36
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 34
9657: PUSH
9658: LD_INT 31
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 69
9678: ST_TO_ADDR
// if not tmp then
9679: LD_VAR 0 6
9683: NOT
9684: IFFALSE 9688
// exit ;
9686: GO 9936
// result := [ ] ;
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: EMPTY
9694: ST_TO_ADDR
// for i in tmp do
9695: LD_ADDR_VAR 0 3
9699: PUSH
9700: LD_VAR 0 6
9704: PUSH
9705: FOR_IN
9706: IFFALSE 9777
// begin t := UnitsInside ( i ) ;
9708: LD_ADDR_VAR 0 4
9712: PUSH
9713: LD_VAR 0 3
9717: PPUSH
9718: CALL_OW 313
9722: ST_TO_ADDR
// if t then
9723: LD_VAR 0 4
9727: IFFALSE 9775
// for j in t do
9729: LD_ADDR_VAR 0 7
9733: PUSH
9734: LD_VAR 0 4
9738: PUSH
9739: FOR_IN
9740: IFFALSE 9773
// result := Replace ( result , result + 1 , j ) ;
9742: LD_ADDR_VAR 0 2
9746: PUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 2
9756: PUSH
9757: LD_INT 1
9759: PLUS
9760: PPUSH
9761: LD_VAR 0 7
9765: PPUSH
9766: CALL_OW 1
9770: ST_TO_ADDR
9771: GO 9739
9773: POP
9774: POP
// end ;
9775: GO 9705
9777: POP
9778: POP
// if not result then
9779: LD_VAR 0 2
9783: NOT
9784: IFFALSE 9788
// exit ;
9786: GO 9936
// mech := result [ 1 ] ;
9788: LD_ADDR_VAR 0 5
9792: PUSH
9793: LD_VAR 0 2
9797: PUSH
9798: LD_INT 1
9800: ARRAY
9801: ST_TO_ADDR
// if result > 1 then
9802: LD_VAR 0 2
9806: PUSH
9807: LD_INT 1
9809: GREATER
9810: IFFALSE 9922
// begin for i = 2 to result do
9812: LD_ADDR_VAR 0 3
9816: PUSH
9817: DOUBLE
9818: LD_INT 2
9820: DEC
9821: ST_TO_ADDR
9822: LD_VAR 0 2
9826: PUSH
9827: FOR_TO
9828: IFFALSE 9920
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9830: LD_ADDR_VAR 0 4
9834: PUSH
9835: LD_VAR 0 2
9839: PUSH
9840: LD_VAR 0 3
9844: ARRAY
9845: PPUSH
9846: LD_INT 3
9848: PPUSH
9849: CALL_OW 259
9853: PUSH
9854: LD_VAR 0 2
9858: PUSH
9859: LD_VAR 0 3
9863: ARRAY
9864: PPUSH
9865: CALL_OW 432
9869: MINUS
9870: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9871: LD_VAR 0 4
9875: PUSH
9876: LD_VAR 0 5
9880: PPUSH
9881: LD_INT 3
9883: PPUSH
9884: CALL_OW 259
9888: PUSH
9889: LD_VAR 0 5
9893: PPUSH
9894: CALL_OW 432
9898: MINUS
9899: GREATEREQUAL
9900: IFFALSE 9918
// mech := result [ i ] ;
9902: LD_ADDR_VAR 0 5
9906: PUSH
9907: LD_VAR 0 2
9911: PUSH
9912: LD_VAR 0 3
9916: ARRAY
9917: ST_TO_ADDR
// end ;
9918: GO 9827
9920: POP
9921: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9922: LD_VAR 0 1
9926: PPUSH
9927: LD_VAR 0 5
9931: PPUSH
9932: CALL_OW 135
// end ;
9936: LD_VAR 0 2
9940: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9941: LD_INT 0
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
9947: PPUSH
9948: PPUSH
9949: PPUSH
9950: PPUSH
9951: PPUSH
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
// result := [ ] ;
9956: LD_ADDR_VAR 0 7
9960: PUSH
9961: EMPTY
9962: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 266
9972: PUSH
9973: LD_INT 0
9975: PUSH
9976: LD_INT 1
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: IN
9983: NOT
9984: IFFALSE 9988
// exit ;
9986: GO 11622
// if name then
9988: LD_VAR 0 3
9992: IFFALSE 10008
// SetBName ( base_dep , name ) ;
9994: LD_VAR 0 1
9998: PPUSH
9999: LD_VAR 0 3
10003: PPUSH
10004: CALL_OW 500
// base := GetBase ( base_dep ) ;
10008: LD_ADDR_VAR 0 15
10012: PUSH
10013: LD_VAR 0 1
10017: PPUSH
10018: CALL_OW 274
10022: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10023: LD_ADDR_VAR 0 16
10027: PUSH
10028: LD_VAR 0 1
10032: PPUSH
10033: CALL_OW 255
10037: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10038: LD_ADDR_VAR 0 17
10042: PUSH
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 248
10052: ST_TO_ADDR
// if sources then
10053: LD_VAR 0 5
10057: IFFALSE 10104
// for i = 1 to 3 do
10059: LD_ADDR_VAR 0 8
10063: PUSH
10064: DOUBLE
10065: LD_INT 1
10067: DEC
10068: ST_TO_ADDR
10069: LD_INT 3
10071: PUSH
10072: FOR_TO
10073: IFFALSE 10102
// AddResourceType ( base , i , sources [ i ] ) ;
10075: LD_VAR 0 15
10079: PPUSH
10080: LD_VAR 0 8
10084: PPUSH
10085: LD_VAR 0 5
10089: PUSH
10090: LD_VAR 0 8
10094: ARRAY
10095: PPUSH
10096: CALL_OW 276
10100: GO 10072
10102: POP
10103: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10104: LD_ADDR_VAR 0 18
10108: PUSH
10109: LD_VAR 0 15
10113: PPUSH
10114: LD_VAR 0 2
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL 9365 0 3
10126: ST_TO_ADDR
// InitHc ;
10127: CALL_OW 19
// InitUc ;
10131: CALL_OW 18
// uc_side := side ;
10135: LD_ADDR_OWVAR 20
10139: PUSH
10140: LD_VAR 0 16
10144: ST_TO_ADDR
// uc_nation := nation ;
10145: LD_ADDR_OWVAR 21
10149: PUSH
10150: LD_VAR 0 17
10154: ST_TO_ADDR
// if buildings then
10155: LD_VAR 0 18
10159: IFFALSE 11481
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10161: LD_ADDR_VAR 0 19
10165: PUSH
10166: LD_VAR 0 18
10170: PPUSH
10171: LD_INT 2
10173: PUSH
10174: LD_INT 30
10176: PUSH
10177: LD_INT 29
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 30
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: ST_TO_ADDR
// if tmp then
10204: LD_VAR 0 19
10208: IFFALSE 10256
// for i in tmp do
10210: LD_ADDR_VAR 0 8
10214: PUSH
10215: LD_VAR 0 19
10219: PUSH
10220: FOR_IN
10221: IFFALSE 10254
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10223: LD_VAR 0 8
10227: PPUSH
10228: CALL_OW 250
10232: PPUSH
10233: LD_VAR 0 8
10237: PPUSH
10238: CALL_OW 251
10242: PPUSH
10243: LD_VAR 0 16
10247: PPUSH
10248: CALL_OW 441
10252: GO 10220
10254: POP
10255: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10256: LD_VAR 0 18
10260: PPUSH
10261: LD_INT 2
10263: PUSH
10264: LD_INT 30
10266: PUSH
10267: LD_INT 32
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 30
10276: PUSH
10277: LD_INT 33
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: LIST
10288: PPUSH
10289: CALL_OW 72
10293: IFFALSE 10381
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10295: LD_ADDR_VAR 0 8
10299: PUSH
10300: LD_VAR 0 18
10304: PPUSH
10305: LD_INT 2
10307: PUSH
10308: LD_INT 30
10310: PUSH
10311: LD_INT 32
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 30
10320: PUSH
10321: LD_INT 33
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: PPUSH
10333: CALL_OW 72
10337: PUSH
10338: FOR_IN
10339: IFFALSE 10379
// begin if not GetBWeapon ( i ) then
10341: LD_VAR 0 8
10345: PPUSH
10346: CALL_OW 269
10350: NOT
10351: IFFALSE 10377
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10353: LD_VAR 0 8
10357: PPUSH
10358: LD_VAR 0 8
10362: PPUSH
10363: LD_VAR 0 2
10367: PPUSH
10368: CALL 11627 0 2
10372: PPUSH
10373: CALL_OW 431
// end ;
10377: GO 10338
10379: POP
10380: POP
// end ; for i = 1 to personel do
10381: LD_ADDR_VAR 0 8
10385: PUSH
10386: DOUBLE
10387: LD_INT 1
10389: DEC
10390: ST_TO_ADDR
10391: LD_VAR 0 6
10395: PUSH
10396: FOR_TO
10397: IFFALSE 11461
// begin if i > 4 then
10399: LD_VAR 0 8
10403: PUSH
10404: LD_INT 4
10406: GREATER
10407: IFFALSE 10411
// break ;
10409: GO 11461
// case i of 1 :
10411: LD_VAR 0 8
10415: PUSH
10416: LD_INT 1
10418: DOUBLE
10419: EQUAL
10420: IFTRUE 10424
10422: GO 10504
10424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10425: LD_ADDR_VAR 0 12
10429: PUSH
10430: LD_VAR 0 18
10434: PPUSH
10435: LD_INT 22
10437: PUSH
10438: LD_VAR 0 16
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: LD_INT 58
10449: PUSH
10450: EMPTY
10451: LIST
10452: PUSH
10453: LD_INT 2
10455: PUSH
10456: LD_INT 30
10458: PUSH
10459: LD_INT 32
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 30
10468: PUSH
10469: LD_INT 4
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 30
10478: PUSH
10479: LD_INT 5
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: PPUSH
10497: CALL_OW 72
10501: ST_TO_ADDR
10502: GO 10726
10504: LD_INT 2
10506: DOUBLE
10507: EQUAL
10508: IFTRUE 10512
10510: GO 10574
10512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10513: LD_ADDR_VAR 0 12
10517: PUSH
10518: LD_VAR 0 18
10522: PPUSH
10523: LD_INT 22
10525: PUSH
10526: LD_VAR 0 16
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 0
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 30
10550: PUSH
10551: LD_INT 1
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL_OW 72
10571: ST_TO_ADDR
10572: GO 10726
10574: LD_INT 3
10576: DOUBLE
10577: EQUAL
10578: IFTRUE 10582
10580: GO 10644
10582: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10583: LD_ADDR_VAR 0 12
10587: PUSH
10588: LD_VAR 0 18
10592: PPUSH
10593: LD_INT 22
10595: PUSH
10596: LD_VAR 0 16
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 30
10610: PUSH
10611: LD_INT 2
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 30
10620: PUSH
10621: LD_INT 3
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: ST_TO_ADDR
10642: GO 10726
10644: LD_INT 4
10646: DOUBLE
10647: EQUAL
10648: IFTRUE 10652
10650: GO 10725
10652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10653: LD_ADDR_VAR 0 12
10657: PUSH
10658: LD_VAR 0 18
10662: PPUSH
10663: LD_INT 22
10665: PUSH
10666: LD_VAR 0 16
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 30
10680: PUSH
10681: LD_INT 6
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 30
10690: PUSH
10691: LD_INT 7
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 30
10700: PUSH
10701: LD_INT 8
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 72
10722: ST_TO_ADDR
10723: GO 10726
10725: POP
// if i = 1 then
10726: LD_VAR 0 8
10730: PUSH
10731: LD_INT 1
10733: EQUAL
10734: IFFALSE 10845
// begin tmp := [ ] ;
10736: LD_ADDR_VAR 0 19
10740: PUSH
10741: EMPTY
10742: ST_TO_ADDR
// for j in f do
10743: LD_ADDR_VAR 0 9
10747: PUSH
10748: LD_VAR 0 12
10752: PUSH
10753: FOR_IN
10754: IFFALSE 10827
// if GetBType ( j ) = b_bunker then
10756: LD_VAR 0 9
10760: PPUSH
10761: CALL_OW 266
10765: PUSH
10766: LD_INT 32
10768: EQUAL
10769: IFFALSE 10796
// tmp := Insert ( tmp , 1 , j ) else
10771: LD_ADDR_VAR 0 19
10775: PUSH
10776: LD_VAR 0 19
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: LD_VAR 0 9
10788: PPUSH
10789: CALL_OW 2
10793: ST_TO_ADDR
10794: GO 10825
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10796: LD_ADDR_VAR 0 19
10800: PUSH
10801: LD_VAR 0 19
10805: PPUSH
10806: LD_VAR 0 19
10810: PUSH
10811: LD_INT 1
10813: PLUS
10814: PPUSH
10815: LD_VAR 0 9
10819: PPUSH
10820: CALL_OW 2
10824: ST_TO_ADDR
10825: GO 10753
10827: POP
10828: POP
// if tmp then
10829: LD_VAR 0 19
10833: IFFALSE 10845
// f := tmp ;
10835: LD_ADDR_VAR 0 12
10839: PUSH
10840: LD_VAR 0 19
10844: ST_TO_ADDR
// end ; x := personel [ i ] ;
10845: LD_ADDR_VAR 0 13
10849: PUSH
10850: LD_VAR 0 6
10854: PUSH
10855: LD_VAR 0 8
10859: ARRAY
10860: ST_TO_ADDR
// if x = - 1 then
10861: LD_VAR 0 13
10865: PUSH
10866: LD_INT 1
10868: NEG
10869: EQUAL
10870: IFFALSE 11079
// begin for j in f do
10872: LD_ADDR_VAR 0 9
10876: PUSH
10877: LD_VAR 0 12
10881: PUSH
10882: FOR_IN
10883: IFFALSE 11075
// repeat InitHc ;
10885: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10889: LD_VAR 0 9
10893: PPUSH
10894: CALL_OW 266
10898: PUSH
10899: LD_INT 5
10901: EQUAL
10902: IFFALSE 10972
// begin if UnitsInside ( j ) < 3 then
10904: LD_VAR 0 9
10908: PPUSH
10909: CALL_OW 313
10913: PUSH
10914: LD_INT 3
10916: LESS
10917: IFFALSE 10953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10919: LD_INT 0
10921: PPUSH
10922: LD_INT 5
10924: PUSH
10925: LD_INT 8
10927: PUSH
10928: LD_INT 9
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: PUSH
10936: LD_VAR 0 17
10940: ARRAY
10941: PPUSH
10942: LD_VAR 0 4
10946: PPUSH
10947: CALL_OW 380
10951: GO 10970
// PrepareHuman ( false , i , skill ) ;
10953: LD_INT 0
10955: PPUSH
10956: LD_VAR 0 8
10960: PPUSH
10961: LD_VAR 0 4
10965: PPUSH
10966: CALL_OW 380
// end else
10970: GO 10989
// PrepareHuman ( false , i , skill ) ;
10972: LD_INT 0
10974: PPUSH
10975: LD_VAR 0 8
10979: PPUSH
10980: LD_VAR 0 4
10984: PPUSH
10985: CALL_OW 380
// un := CreateHuman ;
10989: LD_ADDR_VAR 0 14
10993: PUSH
10994: CALL_OW 44
10998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10999: LD_ADDR_VAR 0 7
11003: PUSH
11004: LD_VAR 0 7
11008: PPUSH
11009: LD_INT 1
11011: PPUSH
11012: LD_VAR 0 14
11016: PPUSH
11017: CALL_OW 2
11021: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11022: LD_VAR 0 14
11026: PPUSH
11027: LD_VAR 0 9
11031: PPUSH
11032: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11036: LD_VAR 0 9
11040: PPUSH
11041: CALL_OW 313
11045: PUSH
11046: LD_INT 6
11048: EQUAL
11049: PUSH
11050: LD_VAR 0 9
11054: PPUSH
11055: CALL_OW 266
11059: PUSH
11060: LD_INT 32
11062: PUSH
11063: LD_INT 31
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: IN
11070: OR
11071: IFFALSE 10885
11073: GO 10882
11075: POP
11076: POP
// end else
11077: GO 11459
// for j = 1 to x do
11079: LD_ADDR_VAR 0 9
11083: PUSH
11084: DOUBLE
11085: LD_INT 1
11087: DEC
11088: ST_TO_ADDR
11089: LD_VAR 0 13
11093: PUSH
11094: FOR_TO
11095: IFFALSE 11457
// begin InitHc ;
11097: CALL_OW 19
// if not f then
11101: LD_VAR 0 12
11105: NOT
11106: IFFALSE 11195
// begin PrepareHuman ( false , i , skill ) ;
11108: LD_INT 0
11110: PPUSH
11111: LD_VAR 0 8
11115: PPUSH
11116: LD_VAR 0 4
11120: PPUSH
11121: CALL_OW 380
// un := CreateHuman ;
11125: LD_ADDR_VAR 0 14
11129: PUSH
11130: CALL_OW 44
11134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11135: LD_ADDR_VAR 0 7
11139: PUSH
11140: LD_VAR 0 7
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: LD_VAR 0 14
11152: PPUSH
11153: CALL_OW 2
11157: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11158: LD_VAR 0 14
11162: PPUSH
11163: LD_VAR 0 1
11167: PPUSH
11168: CALL_OW 250
11172: PPUSH
11173: LD_VAR 0 1
11177: PPUSH
11178: CALL_OW 251
11182: PPUSH
11183: LD_INT 10
11185: PPUSH
11186: LD_INT 0
11188: PPUSH
11189: CALL_OW 50
// continue ;
11193: GO 11094
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11195: LD_VAR 0 12
11199: PUSH
11200: LD_INT 1
11202: ARRAY
11203: PPUSH
11204: CALL_OW 313
11208: PUSH
11209: LD_VAR 0 12
11213: PUSH
11214: LD_INT 1
11216: ARRAY
11217: PPUSH
11218: CALL_OW 266
11222: PUSH
11223: LD_INT 32
11225: PUSH
11226: LD_INT 31
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: IN
11233: AND
11234: PUSH
11235: LD_VAR 0 12
11239: PUSH
11240: LD_INT 1
11242: ARRAY
11243: PPUSH
11244: CALL_OW 313
11248: PUSH
11249: LD_INT 6
11251: EQUAL
11252: OR
11253: IFFALSE 11273
// f := Delete ( f , 1 ) ;
11255: LD_ADDR_VAR 0 12
11259: PUSH
11260: LD_VAR 0 12
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 3
11272: ST_TO_ADDR
// if not f then
11273: LD_VAR 0 12
11277: NOT
11278: IFFALSE 11296
// begin x := x + 2 ;
11280: LD_ADDR_VAR 0 13
11284: PUSH
11285: LD_VAR 0 13
11289: PUSH
11290: LD_INT 2
11292: PLUS
11293: ST_TO_ADDR
// continue ;
11294: GO 11094
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11296: LD_VAR 0 12
11300: PUSH
11301: LD_INT 1
11303: ARRAY
11304: PPUSH
11305: CALL_OW 266
11309: PUSH
11310: LD_INT 5
11312: EQUAL
11313: IFFALSE 11387
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11315: LD_VAR 0 12
11319: PUSH
11320: LD_INT 1
11322: ARRAY
11323: PPUSH
11324: CALL_OW 313
11328: PUSH
11329: LD_INT 3
11331: LESS
11332: IFFALSE 11368
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11334: LD_INT 0
11336: PPUSH
11337: LD_INT 5
11339: PUSH
11340: LD_INT 8
11342: PUSH
11343: LD_INT 9
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: LD_VAR 0 17
11355: ARRAY
11356: PPUSH
11357: LD_VAR 0 4
11361: PPUSH
11362: CALL_OW 380
11366: GO 11385
// PrepareHuman ( false , i , skill ) ;
11368: LD_INT 0
11370: PPUSH
11371: LD_VAR 0 8
11375: PPUSH
11376: LD_VAR 0 4
11380: PPUSH
11381: CALL_OW 380
// end else
11385: GO 11404
// PrepareHuman ( false , i , skill ) ;
11387: LD_INT 0
11389: PPUSH
11390: LD_VAR 0 8
11394: PPUSH
11395: LD_VAR 0 4
11399: PPUSH
11400: CALL_OW 380
// un := CreateHuman ;
11404: LD_ADDR_VAR 0 14
11408: PUSH
11409: CALL_OW 44
11413: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11414: LD_ADDR_VAR 0 7
11418: PUSH
11419: LD_VAR 0 7
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: LD_VAR 0 14
11431: PPUSH
11432: CALL_OW 2
11436: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11437: LD_VAR 0 14
11441: PPUSH
11442: LD_VAR 0 12
11446: PUSH
11447: LD_INT 1
11449: ARRAY
11450: PPUSH
11451: CALL_OW 52
// end ;
11455: GO 11094
11457: POP
11458: POP
// end ;
11459: GO 10396
11461: POP
11462: POP
// result := result ^ buildings ;
11463: LD_ADDR_VAR 0 7
11467: PUSH
11468: LD_VAR 0 7
11472: PUSH
11473: LD_VAR 0 18
11477: ADD
11478: ST_TO_ADDR
// end else
11479: GO 11622
// begin for i = 1 to personel do
11481: LD_ADDR_VAR 0 8
11485: PUSH
11486: DOUBLE
11487: LD_INT 1
11489: DEC
11490: ST_TO_ADDR
11491: LD_VAR 0 6
11495: PUSH
11496: FOR_TO
11497: IFFALSE 11620
// begin if i > 4 then
11499: LD_VAR 0 8
11503: PUSH
11504: LD_INT 4
11506: GREATER
11507: IFFALSE 11511
// break ;
11509: GO 11620
// x := personel [ i ] ;
11511: LD_ADDR_VAR 0 13
11515: PUSH
11516: LD_VAR 0 6
11520: PUSH
11521: LD_VAR 0 8
11525: ARRAY
11526: ST_TO_ADDR
// if x = - 1 then
11527: LD_VAR 0 13
11531: PUSH
11532: LD_INT 1
11534: NEG
11535: EQUAL
11536: IFFALSE 11540
// continue ;
11538: GO 11496
// PrepareHuman ( false , i , skill ) ;
11540: LD_INT 0
11542: PPUSH
11543: LD_VAR 0 8
11547: PPUSH
11548: LD_VAR 0 4
11552: PPUSH
11553: CALL_OW 380
// un := CreateHuman ;
11557: LD_ADDR_VAR 0 14
11561: PUSH
11562: CALL_OW 44
11566: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11567: LD_VAR 0 14
11571: PPUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 250
11581: PPUSH
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 251
11591: PPUSH
11592: LD_INT 10
11594: PPUSH
11595: LD_INT 0
11597: PPUSH
11598: CALL_OW 50
// result := result ^ un ;
11602: LD_ADDR_VAR 0 7
11606: PUSH
11607: LD_VAR 0 7
11611: PUSH
11612: LD_VAR 0 14
11616: ADD
11617: ST_TO_ADDR
// end ;
11618: GO 11496
11620: POP
11621: POP
// end ; end ;
11622: LD_VAR 0 7
11626: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
11631: PPUSH
11632: PPUSH
11633: PPUSH
11634: PPUSH
11635: PPUSH
11636: PPUSH
11637: PPUSH
11638: PPUSH
11639: PPUSH
11640: PPUSH
11641: PPUSH
11642: PPUSH
11643: PPUSH
11644: PPUSH
// result := false ;
11645: LD_ADDR_VAR 0 3
11649: PUSH
11650: LD_INT 0
11652: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11653: LD_VAR 0 1
11657: NOT
11658: PUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: CALL_OW 266
11668: PUSH
11669: LD_INT 32
11671: PUSH
11672: LD_INT 33
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: IN
11679: NOT
11680: OR
11681: IFFALSE 11685
// exit ;
11683: GO 12794
// nat := GetNation ( tower ) ;
11685: LD_ADDR_VAR 0 12
11689: PUSH
11690: LD_VAR 0 1
11694: PPUSH
11695: CALL_OW 248
11699: ST_TO_ADDR
// side := GetSide ( tower ) ;
11700: LD_ADDR_VAR 0 16
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 255
11714: ST_TO_ADDR
// x := GetX ( tower ) ;
11715: LD_ADDR_VAR 0 10
11719: PUSH
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 250
11729: ST_TO_ADDR
// y := GetY ( tower ) ;
11730: LD_ADDR_VAR 0 11
11734: PUSH
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 251
11744: ST_TO_ADDR
// if not x or not y then
11745: LD_VAR 0 10
11749: NOT
11750: PUSH
11751: LD_VAR 0 11
11755: NOT
11756: OR
11757: IFFALSE 11761
// exit ;
11759: GO 12794
// weapon := 0 ;
11761: LD_ADDR_VAR 0 18
11765: PUSH
11766: LD_INT 0
11768: ST_TO_ADDR
// fac_list := [ ] ;
11769: LD_ADDR_VAR 0 17
11773: PUSH
11774: EMPTY
11775: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11776: LD_ADDR_VAR 0 6
11780: PUSH
11781: LD_VAR 0 1
11785: PPUSH
11786: CALL_OW 274
11790: PPUSH
11791: LD_VAR 0 2
11795: PPUSH
11796: LD_INT 0
11798: PPUSH
11799: CALL 9365 0 3
11803: PPUSH
11804: LD_INT 30
11806: PUSH
11807: LD_INT 3
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PPUSH
11814: CALL_OW 72
11818: ST_TO_ADDR
// if not factories then
11819: LD_VAR 0 6
11823: NOT
11824: IFFALSE 11828
// exit ;
11826: GO 12794
// for i in factories do
11828: LD_ADDR_VAR 0 8
11832: PUSH
11833: LD_VAR 0 6
11837: PUSH
11838: FOR_IN
11839: IFFALSE 11864
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11841: LD_ADDR_VAR 0 17
11845: PUSH
11846: LD_VAR 0 17
11850: PUSH
11851: LD_VAR 0 8
11855: PPUSH
11856: CALL_OW 478
11860: UNION
11861: ST_TO_ADDR
11862: GO 11838
11864: POP
11865: POP
// if not fac_list then
11866: LD_VAR 0 17
11870: NOT
11871: IFFALSE 11875
// exit ;
11873: GO 12794
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11875: LD_ADDR_VAR 0 5
11879: PUSH
11880: LD_INT 4
11882: PUSH
11883: LD_INT 5
11885: PUSH
11886: LD_INT 9
11888: PUSH
11889: LD_INT 10
11891: PUSH
11892: LD_INT 6
11894: PUSH
11895: LD_INT 7
11897: PUSH
11898: LD_INT 11
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 27
11912: PUSH
11913: LD_INT 28
11915: PUSH
11916: LD_INT 26
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 43
11930: PUSH
11931: LD_INT 44
11933: PUSH
11934: LD_INT 46
11936: PUSH
11937: LD_INT 45
11939: PUSH
11940: LD_INT 47
11942: PUSH
11943: LD_INT 49
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_VAR 0 12
11963: ARRAY
11964: ST_TO_ADDR
// list := list isect fac_list ;
11965: LD_ADDR_VAR 0 5
11969: PUSH
11970: LD_VAR 0 5
11974: PUSH
11975: LD_VAR 0 17
11979: ISECT
11980: ST_TO_ADDR
// if not list then
11981: LD_VAR 0 5
11985: NOT
11986: IFFALSE 11990
// exit ;
11988: GO 12794
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11990: LD_VAR 0 12
11994: PUSH
11995: LD_INT 3
11997: EQUAL
11998: PUSH
11999: LD_INT 49
12001: PUSH
12002: LD_VAR 0 5
12006: IN
12007: AND
12008: PUSH
12009: LD_INT 31
12011: PPUSH
12012: LD_VAR 0 16
12016: PPUSH
12017: CALL_OW 321
12021: PUSH
12022: LD_INT 2
12024: EQUAL
12025: AND
12026: IFFALSE 12086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12028: LD_INT 22
12030: PUSH
12031: LD_VAR 0 16
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 35
12042: PUSH
12043: LD_INT 49
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 91
12052: PUSH
12053: LD_VAR 0 1
12057: PUSH
12058: LD_INT 10
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: NOT
12076: IFFALSE 12086
// weapon := ru_time_lapser ;
12078: LD_ADDR_VAR 0 18
12082: PUSH
12083: LD_INT 49
12085: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12086: LD_VAR 0 12
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: IN
12101: PUSH
12102: LD_INT 11
12104: PUSH
12105: LD_VAR 0 5
12109: IN
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_VAR 0 5
12118: IN
12119: OR
12120: AND
12121: PUSH
12122: LD_INT 6
12124: PPUSH
12125: LD_VAR 0 16
12129: PPUSH
12130: CALL_OW 321
12134: PUSH
12135: LD_INT 2
12137: EQUAL
12138: AND
12139: IFFALSE 12304
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12141: LD_INT 22
12143: PUSH
12144: LD_VAR 0 16
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: LD_INT 35
12158: PUSH
12159: LD_INT 11
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 35
12168: PUSH
12169: LD_INT 30
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 91
12183: PUSH
12184: LD_VAR 0 1
12188: PUSH
12189: LD_INT 18
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 69
12206: NOT
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_VAR 0 16
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 2
12222: PUSH
12223: LD_INT 30
12225: PUSH
12226: LD_INT 32
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: LD_INT 33
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 91
12250: PUSH
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 12
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: PPUSH
12272: CALL_OW 69
12276: PUSH
12277: LD_INT 2
12279: GREATER
12280: AND
12281: IFFALSE 12304
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12283: LD_ADDR_VAR 0 18
12287: PUSH
12288: LD_INT 11
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_VAR 0 12
12302: ARRAY
12303: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12304: LD_VAR 0 18
12308: NOT
12309: PUSH
12310: LD_INT 40
12312: PPUSH
12313: LD_VAR 0 16
12317: PPUSH
12318: CALL_OW 321
12322: PUSH
12323: LD_INT 2
12325: EQUAL
12326: AND
12327: PUSH
12328: LD_INT 7
12330: PUSH
12331: LD_VAR 0 5
12335: IN
12336: PUSH
12337: LD_INT 28
12339: PUSH
12340: LD_VAR 0 5
12344: IN
12345: OR
12346: PUSH
12347: LD_INT 45
12349: PUSH
12350: LD_VAR 0 5
12354: IN
12355: OR
12356: AND
12357: IFFALSE 12611
// begin hex := GetHexInfo ( x , y ) ;
12359: LD_ADDR_VAR 0 4
12363: PUSH
12364: LD_VAR 0 10
12368: PPUSH
12369: LD_VAR 0 11
12373: PPUSH
12374: CALL_OW 546
12378: ST_TO_ADDR
// if hex [ 1 ] then
12379: LD_VAR 0 4
12383: PUSH
12384: LD_INT 1
12386: ARRAY
12387: IFFALSE 12391
// exit ;
12389: GO 12794
// height := hex [ 2 ] ;
12391: LD_ADDR_VAR 0 15
12395: PUSH
12396: LD_VAR 0 4
12400: PUSH
12401: LD_INT 2
12403: ARRAY
12404: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12405: LD_ADDR_VAR 0 14
12409: PUSH
12410: LD_INT 0
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: LD_INT 3
12418: PUSH
12419: LD_INT 5
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: ST_TO_ADDR
// for i in tmp do
12428: LD_ADDR_VAR 0 8
12432: PUSH
12433: LD_VAR 0 14
12437: PUSH
12438: FOR_IN
12439: IFFALSE 12609
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12441: LD_ADDR_VAR 0 9
12445: PUSH
12446: LD_VAR 0 10
12450: PPUSH
12451: LD_VAR 0 8
12455: PPUSH
12456: LD_INT 5
12458: PPUSH
12459: CALL_OW 272
12463: PUSH
12464: LD_VAR 0 11
12468: PPUSH
12469: LD_VAR 0 8
12473: PPUSH
12474: LD_INT 5
12476: PPUSH
12477: CALL_OW 273
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12486: LD_VAR 0 9
12490: PUSH
12491: LD_INT 1
12493: ARRAY
12494: PPUSH
12495: LD_VAR 0 9
12499: PUSH
12500: LD_INT 2
12502: ARRAY
12503: PPUSH
12504: CALL_OW 488
12508: IFFALSE 12607
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12510: LD_ADDR_VAR 0 4
12514: PUSH
12515: LD_VAR 0 9
12519: PUSH
12520: LD_INT 1
12522: ARRAY
12523: PPUSH
12524: LD_VAR 0 9
12528: PUSH
12529: LD_INT 2
12531: ARRAY
12532: PPUSH
12533: CALL_OW 546
12537: ST_TO_ADDR
// if hex [ 1 ] then
12538: LD_VAR 0 4
12542: PUSH
12543: LD_INT 1
12545: ARRAY
12546: IFFALSE 12550
// continue ;
12548: GO 12438
// h := hex [ 2 ] ;
12550: LD_ADDR_VAR 0 13
12554: PUSH
12555: LD_VAR 0 4
12559: PUSH
12560: LD_INT 2
12562: ARRAY
12563: ST_TO_ADDR
// if h + 7 < height then
12564: LD_VAR 0 13
12568: PUSH
12569: LD_INT 7
12571: PLUS
12572: PUSH
12573: LD_VAR 0 15
12577: LESS
12578: IFFALSE 12607
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12580: LD_ADDR_VAR 0 18
12584: PUSH
12585: LD_INT 7
12587: PUSH
12588: LD_INT 28
12590: PUSH
12591: LD_INT 45
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: PUSH
12599: LD_VAR 0 12
12603: ARRAY
12604: ST_TO_ADDR
// break ;
12605: GO 12609
// end ; end ; end ;
12607: GO 12438
12609: POP
12610: POP
// end ; if not weapon then
12611: LD_VAR 0 18
12615: NOT
12616: IFFALSE 12676
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12618: LD_ADDR_VAR 0 5
12622: PUSH
12623: LD_VAR 0 5
12627: PUSH
12628: LD_INT 11
12630: PUSH
12631: LD_INT 30
12633: PUSH
12634: LD_INT 49
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: DIFF
12642: ST_TO_ADDR
// if not list then
12643: LD_VAR 0 5
12647: NOT
12648: IFFALSE 12652
// exit ;
12650: GO 12794
// weapon := list [ rand ( 1 , list ) ] ;
12652: LD_ADDR_VAR 0 18
12656: PUSH
12657: LD_VAR 0 5
12661: PUSH
12662: LD_INT 1
12664: PPUSH
12665: LD_VAR 0 5
12669: PPUSH
12670: CALL_OW 12
12674: ARRAY
12675: ST_TO_ADDR
// end ; if weapon then
12676: LD_VAR 0 18
12680: IFFALSE 12794
// begin tmp := CostOfWeapon ( weapon ) ;
12682: LD_ADDR_VAR 0 14
12686: PUSH
12687: LD_VAR 0 18
12691: PPUSH
12692: CALL_OW 451
12696: ST_TO_ADDR
// j := GetBase ( tower ) ;
12697: LD_ADDR_VAR 0 9
12701: PUSH
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 274
12711: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12712: LD_VAR 0 9
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 275
12724: PUSH
12725: LD_VAR 0 14
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: GREATEREQUAL
12734: PUSH
12735: LD_VAR 0 9
12739: PPUSH
12740: LD_INT 2
12742: PPUSH
12743: CALL_OW 275
12747: PUSH
12748: LD_VAR 0 14
12752: PUSH
12753: LD_INT 2
12755: ARRAY
12756: GREATEREQUAL
12757: AND
12758: PUSH
12759: LD_VAR 0 9
12763: PPUSH
12764: LD_INT 3
12766: PPUSH
12767: CALL_OW 275
12771: PUSH
12772: LD_VAR 0 14
12776: PUSH
12777: LD_INT 3
12779: ARRAY
12780: GREATEREQUAL
12781: AND
12782: IFFALSE 12794
// result := weapon ;
12784: LD_ADDR_VAR 0 3
12788: PUSH
12789: LD_VAR 0 18
12793: ST_TO_ADDR
// end ; end ;
12794: LD_VAR 0 3
12798: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12799: LD_INT 0
12801: PPUSH
12802: PPUSH
// result := true ;
12803: LD_ADDR_VAR 0 3
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// if array1 = array2 then
12811: LD_VAR 0 1
12815: PUSH
12816: LD_VAR 0 2
12820: EQUAL
12821: IFFALSE 12881
// begin for i = 1 to array1 do
12823: LD_ADDR_VAR 0 4
12827: PUSH
12828: DOUBLE
12829: LD_INT 1
12831: DEC
12832: ST_TO_ADDR
12833: LD_VAR 0 1
12837: PUSH
12838: FOR_TO
12839: IFFALSE 12877
// if array1 [ i ] <> array2 [ i ] then
12841: LD_VAR 0 1
12845: PUSH
12846: LD_VAR 0 4
12850: ARRAY
12851: PUSH
12852: LD_VAR 0 2
12856: PUSH
12857: LD_VAR 0 4
12861: ARRAY
12862: NONEQUAL
12863: IFFALSE 12875
// begin result := false ;
12865: LD_ADDR_VAR 0 3
12869: PUSH
12870: LD_INT 0
12872: ST_TO_ADDR
// break ;
12873: GO 12877
// end ;
12875: GO 12838
12877: POP
12878: POP
// end else
12879: GO 12889
// result := false ;
12881: LD_ADDR_VAR 0 3
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// end ;
12889: LD_VAR 0 3
12893: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12894: LD_INT 0
12896: PPUSH
12897: PPUSH
// if not array1 or not array2 then
12898: LD_VAR 0 1
12902: NOT
12903: PUSH
12904: LD_VAR 0 2
12908: NOT
12909: OR
12910: IFFALSE 12914
// exit ;
12912: GO 12978
// result := true ;
12914: LD_ADDR_VAR 0 3
12918: PUSH
12919: LD_INT 1
12921: ST_TO_ADDR
// for i = 1 to array1 do
12922: LD_ADDR_VAR 0 4
12926: PUSH
12927: DOUBLE
12928: LD_INT 1
12930: DEC
12931: ST_TO_ADDR
12932: LD_VAR 0 1
12936: PUSH
12937: FOR_TO
12938: IFFALSE 12976
// if array1 [ i ] <> array2 [ i ] then
12940: LD_VAR 0 1
12944: PUSH
12945: LD_VAR 0 4
12949: ARRAY
12950: PUSH
12951: LD_VAR 0 2
12955: PUSH
12956: LD_VAR 0 4
12960: ARRAY
12961: NONEQUAL
12962: IFFALSE 12974
// begin result := false ;
12964: LD_ADDR_VAR 0 3
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// break ;
12972: GO 12976
// end ;
12974: GO 12937
12976: POP
12977: POP
// end ;
12978: LD_VAR 0 3
12982: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12983: LD_INT 0
12985: PPUSH
12986: PPUSH
12987: PPUSH
// pom := GetBase ( fac ) ;
12988: LD_ADDR_VAR 0 5
12992: PUSH
12993: LD_VAR 0 1
12997: PPUSH
12998: CALL_OW 274
13002: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13003: LD_ADDR_VAR 0 4
13007: PUSH
13008: LD_VAR 0 2
13012: PUSH
13013: LD_INT 1
13015: ARRAY
13016: PPUSH
13017: LD_VAR 0 2
13021: PUSH
13022: LD_INT 2
13024: ARRAY
13025: PPUSH
13026: LD_VAR 0 2
13030: PUSH
13031: LD_INT 3
13033: ARRAY
13034: PPUSH
13035: LD_VAR 0 2
13039: PUSH
13040: LD_INT 4
13042: ARRAY
13043: PPUSH
13044: CALL_OW 449
13048: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13049: LD_ADDR_VAR 0 3
13053: PUSH
13054: LD_VAR 0 5
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: CALL_OW 275
13066: PUSH
13067: LD_VAR 0 4
13071: PUSH
13072: LD_INT 1
13074: ARRAY
13075: GREATEREQUAL
13076: PUSH
13077: LD_VAR 0 5
13081: PPUSH
13082: LD_INT 2
13084: PPUSH
13085: CALL_OW 275
13089: PUSH
13090: LD_VAR 0 4
13094: PUSH
13095: LD_INT 2
13097: ARRAY
13098: GREATEREQUAL
13099: AND
13100: PUSH
13101: LD_VAR 0 5
13105: PPUSH
13106: LD_INT 3
13108: PPUSH
13109: CALL_OW 275
13113: PUSH
13114: LD_VAR 0 4
13118: PUSH
13119: LD_INT 3
13121: ARRAY
13122: GREATEREQUAL
13123: AND
13124: ST_TO_ADDR
// end ;
13125: LD_VAR 0 3
13129: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13130: LD_INT 0
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
// pom := GetBase ( building ) ;
13136: LD_ADDR_VAR 0 3
13140: PUSH
13141: LD_VAR 0 1
13145: PPUSH
13146: CALL_OW 274
13150: ST_TO_ADDR
// if not pom then
13151: LD_VAR 0 3
13155: NOT
13156: IFFALSE 13160
// exit ;
13158: GO 13330
// btype := GetBType ( building ) ;
13160: LD_ADDR_VAR 0 5
13164: PUSH
13165: LD_VAR 0 1
13169: PPUSH
13170: CALL_OW 266
13174: ST_TO_ADDR
// if btype = b_armoury then
13175: LD_VAR 0 5
13179: PUSH
13180: LD_INT 4
13182: EQUAL
13183: IFFALSE 13193
// btype := b_barracks ;
13185: LD_ADDR_VAR 0 5
13189: PUSH
13190: LD_INT 5
13192: ST_TO_ADDR
// if btype = b_depot then
13193: LD_VAR 0 5
13197: PUSH
13198: LD_INT 0
13200: EQUAL
13201: IFFALSE 13211
// btype := b_warehouse ;
13203: LD_ADDR_VAR 0 5
13207: PUSH
13208: LD_INT 1
13210: ST_TO_ADDR
// if btype = b_workshop then
13211: LD_VAR 0 5
13215: PUSH
13216: LD_INT 2
13218: EQUAL
13219: IFFALSE 13229
// btype := b_factory ;
13221: LD_ADDR_VAR 0 5
13225: PUSH
13226: LD_INT 3
13228: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13229: LD_ADDR_VAR 0 4
13233: PUSH
13234: LD_VAR 0 5
13238: PPUSH
13239: LD_VAR 0 1
13243: PPUSH
13244: CALL_OW 248
13248: PPUSH
13249: CALL_OW 450
13253: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_VAR 0 3
13263: PPUSH
13264: LD_INT 1
13266: PPUSH
13267: CALL_OW 275
13271: PUSH
13272: LD_VAR 0 4
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: GREATEREQUAL
13281: PUSH
13282: LD_VAR 0 3
13286: PPUSH
13287: LD_INT 2
13289: PPUSH
13290: CALL_OW 275
13294: PUSH
13295: LD_VAR 0 4
13299: PUSH
13300: LD_INT 2
13302: ARRAY
13303: GREATEREQUAL
13304: AND
13305: PUSH
13306: LD_VAR 0 3
13310: PPUSH
13311: LD_INT 3
13313: PPUSH
13314: CALL_OW 275
13318: PUSH
13319: LD_VAR 0 4
13323: PUSH
13324: LD_INT 3
13326: ARRAY
13327: GREATEREQUAL
13328: AND
13329: ST_TO_ADDR
// end ;
13330: LD_VAR 0 2
13334: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13335: LD_INT 0
13337: PPUSH
13338: PPUSH
13339: PPUSH
// pom := GetBase ( building ) ;
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 274
13354: ST_TO_ADDR
// if not pom then
13355: LD_VAR 0 4
13359: NOT
13360: IFFALSE 13364
// exit ;
13362: GO 13465
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13364: LD_ADDR_VAR 0 5
13368: PUSH
13369: LD_VAR 0 2
13373: PPUSH
13374: LD_VAR 0 1
13378: PPUSH
13379: CALL_OW 248
13383: PPUSH
13384: CALL_OW 450
13388: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13389: LD_ADDR_VAR 0 3
13393: PUSH
13394: LD_VAR 0 4
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: CALL_OW 275
13406: PUSH
13407: LD_VAR 0 5
13411: PUSH
13412: LD_INT 1
13414: ARRAY
13415: GREATEREQUAL
13416: PUSH
13417: LD_VAR 0 4
13421: PPUSH
13422: LD_INT 2
13424: PPUSH
13425: CALL_OW 275
13429: PUSH
13430: LD_VAR 0 5
13434: PUSH
13435: LD_INT 2
13437: ARRAY
13438: GREATEREQUAL
13439: AND
13440: PUSH
13441: LD_VAR 0 4
13445: PPUSH
13446: LD_INT 3
13448: PPUSH
13449: CALL_OW 275
13453: PUSH
13454: LD_VAR 0 5
13458: PUSH
13459: LD_INT 3
13461: ARRAY
13462: GREATEREQUAL
13463: AND
13464: ST_TO_ADDR
// end ;
13465: LD_VAR 0 3
13469: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13470: LD_INT 0
13472: PPUSH
13473: PPUSH
13474: PPUSH
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
// result := false ;
13483: LD_ADDR_VAR 0 8
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13491: LD_VAR 0 5
13495: NOT
13496: PUSH
13497: LD_VAR 0 1
13501: NOT
13502: OR
13503: PUSH
13504: LD_VAR 0 2
13508: NOT
13509: OR
13510: PUSH
13511: LD_VAR 0 3
13515: NOT
13516: OR
13517: IFFALSE 13521
// exit ;
13519: GO 14335
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13521: LD_ADDR_VAR 0 14
13525: PUSH
13526: LD_VAR 0 1
13530: PPUSH
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_VAR 0 4
13545: PPUSH
13546: LD_VAR 0 5
13550: PUSH
13551: LD_INT 1
13553: ARRAY
13554: PPUSH
13555: CALL_OW 248
13559: PPUSH
13560: LD_INT 0
13562: PPUSH
13563: CALL 15568 0 6
13567: ST_TO_ADDR
// if not hexes then
13568: LD_VAR 0 14
13572: NOT
13573: IFFALSE 13577
// exit ;
13575: GO 14335
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13577: LD_ADDR_VAR 0 17
13581: PUSH
13582: LD_VAR 0 5
13586: PPUSH
13587: LD_INT 22
13589: PUSH
13590: LD_VAR 0 13
13594: PPUSH
13595: CALL_OW 255
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 30
13609: PUSH
13610: LD_INT 0
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 30
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PPUSH
13636: CALL_OW 72
13640: ST_TO_ADDR
// for i = 1 to hexes do
13641: LD_ADDR_VAR 0 9
13645: PUSH
13646: DOUBLE
13647: LD_INT 1
13649: DEC
13650: ST_TO_ADDR
13651: LD_VAR 0 14
13655: PUSH
13656: FOR_TO
13657: IFFALSE 14333
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13659: LD_ADDR_VAR 0 13
13663: PUSH
13664: LD_VAR 0 14
13668: PUSH
13669: LD_VAR 0 9
13673: ARRAY
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: LD_VAR 0 14
13683: PUSH
13684: LD_VAR 0 9
13688: ARRAY
13689: PUSH
13690: LD_INT 2
13692: ARRAY
13693: PPUSH
13694: CALL_OW 428
13698: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13699: LD_VAR 0 14
13703: PUSH
13704: LD_VAR 0 9
13708: ARRAY
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 14
13718: PUSH
13719: LD_VAR 0 9
13723: ARRAY
13724: PUSH
13725: LD_INT 2
13727: ARRAY
13728: PPUSH
13729: CALL_OW 351
13733: PUSH
13734: LD_VAR 0 14
13738: PUSH
13739: LD_VAR 0 9
13743: ARRAY
13744: PUSH
13745: LD_INT 1
13747: ARRAY
13748: PPUSH
13749: LD_VAR 0 14
13753: PUSH
13754: LD_VAR 0 9
13758: ARRAY
13759: PUSH
13760: LD_INT 2
13762: ARRAY
13763: PPUSH
13764: CALL_OW 488
13768: NOT
13769: OR
13770: PUSH
13771: LD_VAR 0 13
13775: PPUSH
13776: CALL_OW 247
13780: PUSH
13781: LD_INT 3
13783: EQUAL
13784: OR
13785: IFFALSE 13791
// exit ;
13787: POP
13788: POP
13789: GO 14335
// if not tmp then
13791: LD_VAR 0 13
13795: NOT
13796: IFFALSE 13800
// continue ;
13798: GO 13656
// result := true ;
13800: LD_ADDR_VAR 0 8
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13808: LD_VAR 0 6
13812: PUSH
13813: LD_VAR 0 13
13817: PPUSH
13818: CALL_OW 247
13822: PUSH
13823: LD_INT 2
13825: EQUAL
13826: AND
13827: PUSH
13828: LD_VAR 0 13
13832: PPUSH
13833: CALL_OW 263
13837: PUSH
13838: LD_INT 1
13840: EQUAL
13841: AND
13842: IFFALSE 14006
// begin if IsDrivenBy ( tmp ) then
13844: LD_VAR 0 13
13848: PPUSH
13849: CALL_OW 311
13853: IFFALSE 13857
// continue ;
13855: GO 13656
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13857: LD_VAR 0 6
13861: PPUSH
13862: LD_INT 3
13864: PUSH
13865: LD_INT 60
13867: PUSH
13868: EMPTY
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: LD_INT 55
13880: PUSH
13881: EMPTY
13882: LIST
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PPUSH
13892: CALL_OW 72
13896: IFFALSE 14004
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13898: LD_ADDR_VAR 0 18
13902: PUSH
13903: LD_VAR 0 6
13907: PPUSH
13908: LD_INT 3
13910: PUSH
13911: LD_INT 60
13913: PUSH
13914: EMPTY
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 3
13923: PUSH
13924: LD_INT 55
13926: PUSH
13927: EMPTY
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 72
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: ST_TO_ADDR
// if IsInUnit ( driver ) then
13947: LD_VAR 0 18
13951: PPUSH
13952: CALL_OW 310
13956: IFFALSE 13967
// ComExit ( driver ) ;
13958: LD_VAR 0 18
13962: PPUSH
13963: CALL 39347 0 1
// AddComEnterUnit ( driver , tmp ) ;
13967: LD_VAR 0 18
13971: PPUSH
13972: LD_VAR 0 13
13976: PPUSH
13977: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13981: LD_VAR 0 18
13985: PPUSH
13986: LD_VAR 0 7
13990: PPUSH
13991: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13995: LD_VAR 0 18
13999: PPUSH
14000: CALL_OW 181
// end ; continue ;
14004: GO 13656
// end ; if not cleaners or not tmp in cleaners then
14006: LD_VAR 0 6
14010: NOT
14011: PUSH
14012: LD_VAR 0 13
14016: PUSH
14017: LD_VAR 0 6
14021: IN
14022: NOT
14023: OR
14024: IFFALSE 14331
// begin if dep then
14026: LD_VAR 0 17
14030: IFFALSE 14166
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14032: LD_ADDR_VAR 0 16
14036: PUSH
14037: LD_VAR 0 17
14041: PUSH
14042: LD_INT 1
14044: ARRAY
14045: PPUSH
14046: CALL_OW 250
14050: PPUSH
14051: LD_VAR 0 17
14055: PUSH
14056: LD_INT 1
14058: ARRAY
14059: PPUSH
14060: CALL_OW 254
14064: PPUSH
14065: LD_INT 5
14067: PPUSH
14068: CALL_OW 272
14072: PUSH
14073: LD_VAR 0 17
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 251
14086: PPUSH
14087: LD_VAR 0 17
14091: PUSH
14092: LD_INT 1
14094: ARRAY
14095: PPUSH
14096: CALL_OW 254
14100: PPUSH
14101: LD_INT 5
14103: PPUSH
14104: CALL_OW 273
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14113: LD_VAR 0 16
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: LD_VAR 0 16
14126: PUSH
14127: LD_INT 2
14129: ARRAY
14130: PPUSH
14131: CALL_OW 488
14135: IFFALSE 14166
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14137: LD_VAR 0 13
14141: PPUSH
14142: LD_VAR 0 16
14146: PUSH
14147: LD_INT 1
14149: ARRAY
14150: PPUSH
14151: LD_VAR 0 16
14155: PUSH
14156: LD_INT 2
14158: ARRAY
14159: PPUSH
14160: CALL_OW 111
// continue ;
14164: GO 13656
// end ; end ; r := GetDir ( tmp ) ;
14166: LD_ADDR_VAR 0 15
14170: PUSH
14171: LD_VAR 0 13
14175: PPUSH
14176: CALL_OW 254
14180: ST_TO_ADDR
// if r = 5 then
14181: LD_VAR 0 15
14185: PUSH
14186: LD_INT 5
14188: EQUAL
14189: IFFALSE 14199
// r := 0 ;
14191: LD_ADDR_VAR 0 15
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// for j = r to 5 do
14199: LD_ADDR_VAR 0 10
14203: PUSH
14204: DOUBLE
14205: LD_VAR 0 15
14209: DEC
14210: ST_TO_ADDR
14211: LD_INT 5
14213: PUSH
14214: FOR_TO
14215: IFFALSE 14329
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14217: LD_ADDR_VAR 0 11
14221: PUSH
14222: LD_VAR 0 13
14226: PPUSH
14227: CALL_OW 250
14231: PPUSH
14232: LD_VAR 0 10
14236: PPUSH
14237: LD_INT 2
14239: PPUSH
14240: CALL_OW 272
14244: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14245: LD_ADDR_VAR 0 12
14249: PUSH
14250: LD_VAR 0 13
14254: PPUSH
14255: CALL_OW 251
14259: PPUSH
14260: LD_VAR 0 10
14264: PPUSH
14265: LD_INT 2
14267: PPUSH
14268: CALL_OW 273
14272: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14273: LD_VAR 0 11
14277: PPUSH
14278: LD_VAR 0 12
14282: PPUSH
14283: CALL_OW 488
14287: PUSH
14288: LD_VAR 0 11
14292: PPUSH
14293: LD_VAR 0 12
14297: PPUSH
14298: CALL_OW 428
14302: NOT
14303: AND
14304: IFFALSE 14327
// begin ComMoveXY ( tmp , _x , _y ) ;
14306: LD_VAR 0 13
14310: PPUSH
14311: LD_VAR 0 11
14315: PPUSH
14316: LD_VAR 0 12
14320: PPUSH
14321: CALL_OW 111
// break ;
14325: GO 14329
// end ; end ;
14327: GO 14214
14329: POP
14330: POP
// end ; end ;
14331: GO 13656
14333: POP
14334: POP
// end ;
14335: LD_VAR 0 8
14339: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14340: LD_INT 0
14342: PPUSH
// result := true ;
14343: LD_ADDR_VAR 0 3
14347: PUSH
14348: LD_INT 1
14350: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14351: LD_VAR 0 2
14355: PUSH
14356: LD_INT 24
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14370
14362: LD_INT 33
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14395
14370: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14371: LD_ADDR_VAR 0 3
14375: PUSH
14376: LD_INT 32
14378: PPUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 321
14388: PUSH
14389: LD_INT 2
14391: EQUAL
14392: ST_TO_ADDR
14393: GO 14711
14395: LD_INT 20
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14428
14403: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: LD_INT 6
14411: PPUSH
14412: LD_VAR 0 1
14416: PPUSH
14417: CALL_OW 321
14421: PUSH
14422: LD_INT 2
14424: EQUAL
14425: ST_TO_ADDR
14426: GO 14711
14428: LD_INT 22
14430: DOUBLE
14431: EQUAL
14432: IFTRUE 14442
14434: LD_INT 36
14436: DOUBLE
14437: EQUAL
14438: IFTRUE 14442
14440: GO 14467
14442: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14443: LD_ADDR_VAR 0 3
14447: PUSH
14448: LD_INT 15
14450: PPUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 321
14460: PUSH
14461: LD_INT 2
14463: EQUAL
14464: ST_TO_ADDR
14465: GO 14711
14467: LD_INT 30
14469: DOUBLE
14470: EQUAL
14471: IFTRUE 14475
14473: GO 14500
14475: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14476: LD_ADDR_VAR 0 3
14480: PUSH
14481: LD_INT 20
14483: PPUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 321
14493: PUSH
14494: LD_INT 2
14496: EQUAL
14497: ST_TO_ADDR
14498: GO 14711
14500: LD_INT 28
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14514
14506: LD_INT 21
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14514
14512: GO 14539
14514: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14515: LD_ADDR_VAR 0 3
14519: PUSH
14520: LD_INT 21
14522: PPUSH
14523: LD_VAR 0 1
14527: PPUSH
14528: CALL_OW 321
14532: PUSH
14533: LD_INT 2
14535: EQUAL
14536: ST_TO_ADDR
14537: GO 14711
14539: LD_INT 16
14541: DOUBLE
14542: EQUAL
14543: IFTRUE 14547
14545: GO 14572
14547: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14548: LD_ADDR_VAR 0 3
14552: PUSH
14553: LD_INT 84
14555: PPUSH
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 321
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: ST_TO_ADDR
14570: GO 14711
14572: LD_INT 19
14574: DOUBLE
14575: EQUAL
14576: IFTRUE 14586
14578: LD_INT 23
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14611
14586: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14587: LD_ADDR_VAR 0 3
14591: PUSH
14592: LD_INT 83
14594: PPUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 321
14604: PUSH
14605: LD_INT 2
14607: EQUAL
14608: ST_TO_ADDR
14609: GO 14711
14611: LD_INT 17
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14644
14619: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14620: LD_ADDR_VAR 0 3
14624: PUSH
14625: LD_INT 39
14627: PPUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 321
14637: PUSH
14638: LD_INT 2
14640: EQUAL
14641: ST_TO_ADDR
14642: GO 14711
14644: LD_INT 18
14646: DOUBLE
14647: EQUAL
14648: IFTRUE 14652
14650: GO 14677
14652: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14653: LD_ADDR_VAR 0 3
14657: PUSH
14658: LD_INT 40
14660: PPUSH
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL_OW 321
14670: PUSH
14671: LD_INT 2
14673: EQUAL
14674: ST_TO_ADDR
14675: GO 14711
14677: LD_INT 27
14679: DOUBLE
14680: EQUAL
14681: IFTRUE 14685
14683: GO 14710
14685: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14686: LD_ADDR_VAR 0 3
14690: PUSH
14691: LD_INT 35
14693: PPUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 321
14703: PUSH
14704: LD_INT 2
14706: EQUAL
14707: ST_TO_ADDR
14708: GO 14711
14710: POP
// end ;
14711: LD_VAR 0 3
14715: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14716: LD_INT 0
14718: PPUSH
14719: PPUSH
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
14725: PPUSH
14726: PPUSH
14727: PPUSH
14728: PPUSH
// result := false ;
14729: LD_ADDR_VAR 0 6
14733: PUSH
14734: LD_INT 0
14736: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14737: LD_VAR 0 1
14741: NOT
14742: PUSH
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 266
14752: PUSH
14753: LD_INT 0
14755: PUSH
14756: LD_INT 1
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: IN
14763: NOT
14764: OR
14765: PUSH
14766: LD_VAR 0 2
14770: NOT
14771: OR
14772: PUSH
14773: LD_VAR 0 5
14777: PUSH
14778: LD_INT 0
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 5
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: IN
14804: NOT
14805: OR
14806: PUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_VAR 0 4
14816: PPUSH
14817: CALL_OW 488
14821: NOT
14822: OR
14823: IFFALSE 14827
// exit ;
14825: GO 15563
// side := GetSide ( depot ) ;
14827: LD_ADDR_VAR 0 9
14831: PUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: CALL_OW 255
14841: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14842: LD_VAR 0 9
14846: PPUSH
14847: LD_VAR 0 2
14851: PPUSH
14852: CALL 14340 0 2
14856: NOT
14857: IFFALSE 14861
// exit ;
14859: GO 15563
// pom := GetBase ( depot ) ;
14861: LD_ADDR_VAR 0 10
14865: PUSH
14866: LD_VAR 0 1
14870: PPUSH
14871: CALL_OW 274
14875: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14876: LD_ADDR_VAR 0 11
14880: PUSH
14881: LD_VAR 0 2
14885: PPUSH
14886: LD_VAR 0 1
14890: PPUSH
14891: CALL_OW 248
14895: PPUSH
14896: CALL_OW 450
14900: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14901: LD_VAR 0 10
14905: PPUSH
14906: LD_INT 1
14908: PPUSH
14909: CALL_OW 275
14913: PUSH
14914: LD_VAR 0 11
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: GREATEREQUAL
14923: PUSH
14924: LD_VAR 0 10
14928: PPUSH
14929: LD_INT 2
14931: PPUSH
14932: CALL_OW 275
14936: PUSH
14937: LD_VAR 0 11
14941: PUSH
14942: LD_INT 2
14944: ARRAY
14945: GREATEREQUAL
14946: AND
14947: PUSH
14948: LD_VAR 0 10
14952: PPUSH
14953: LD_INT 3
14955: PPUSH
14956: CALL_OW 275
14960: PUSH
14961: LD_VAR 0 11
14965: PUSH
14966: LD_INT 3
14968: ARRAY
14969: GREATEREQUAL
14970: AND
14971: NOT
14972: IFFALSE 14976
// exit ;
14974: GO 15563
// if GetBType ( depot ) = b_depot then
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 266
14985: PUSH
14986: LD_INT 0
14988: EQUAL
14989: IFFALSE 15001
// dist := 28 else
14991: LD_ADDR_VAR 0 14
14995: PUSH
14996: LD_INT 28
14998: ST_TO_ADDR
14999: GO 15009
// dist := 36 ;
15001: LD_ADDR_VAR 0 14
15005: PUSH
15006: LD_INT 36
15008: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: LD_VAR 0 4
15023: PPUSH
15024: CALL_OW 297
15028: PUSH
15029: LD_VAR 0 14
15033: GREATER
15034: IFFALSE 15038
// exit ;
15036: GO 15563
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15038: LD_ADDR_VAR 0 12
15042: PUSH
15043: LD_VAR 0 2
15047: PPUSH
15048: LD_VAR 0 3
15052: PPUSH
15053: LD_VAR 0 4
15057: PPUSH
15058: LD_VAR 0 5
15062: PPUSH
15063: LD_VAR 0 1
15067: PPUSH
15068: CALL_OW 248
15072: PPUSH
15073: LD_INT 0
15075: PPUSH
15076: CALL 15568 0 6
15080: ST_TO_ADDR
// if not hexes then
15081: LD_VAR 0 12
15085: NOT
15086: IFFALSE 15090
// exit ;
15088: GO 15563
// hex := GetHexInfo ( x , y ) ;
15090: LD_ADDR_VAR 0 15
15094: PUSH
15095: LD_VAR 0 3
15099: PPUSH
15100: LD_VAR 0 4
15104: PPUSH
15105: CALL_OW 546
15109: ST_TO_ADDR
// if hex [ 1 ] then
15110: LD_VAR 0 15
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: IFFALSE 15122
// exit ;
15120: GO 15563
// height := hex [ 2 ] ;
15122: LD_ADDR_VAR 0 13
15126: PUSH
15127: LD_VAR 0 15
15131: PUSH
15132: LD_INT 2
15134: ARRAY
15135: ST_TO_ADDR
// for i = 1 to hexes do
15136: LD_ADDR_VAR 0 7
15140: PUSH
15141: DOUBLE
15142: LD_INT 1
15144: DEC
15145: ST_TO_ADDR
15146: LD_VAR 0 12
15150: PUSH
15151: FOR_TO
15152: IFFALSE 15482
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15154: LD_VAR 0 12
15158: PUSH
15159: LD_VAR 0 7
15163: ARRAY
15164: PUSH
15165: LD_INT 1
15167: ARRAY
15168: PPUSH
15169: LD_VAR 0 12
15173: PUSH
15174: LD_VAR 0 7
15178: ARRAY
15179: PUSH
15180: LD_INT 2
15182: ARRAY
15183: PPUSH
15184: CALL_OW 488
15188: NOT
15189: PUSH
15190: LD_VAR 0 12
15194: PUSH
15195: LD_VAR 0 7
15199: ARRAY
15200: PUSH
15201: LD_INT 1
15203: ARRAY
15204: PPUSH
15205: LD_VAR 0 12
15209: PUSH
15210: LD_VAR 0 7
15214: ARRAY
15215: PUSH
15216: LD_INT 2
15218: ARRAY
15219: PPUSH
15220: CALL_OW 428
15224: PUSH
15225: LD_INT 0
15227: GREATER
15228: OR
15229: PUSH
15230: LD_VAR 0 12
15234: PUSH
15235: LD_VAR 0 7
15239: ARRAY
15240: PUSH
15241: LD_INT 1
15243: ARRAY
15244: PPUSH
15245: LD_VAR 0 12
15249: PUSH
15250: LD_VAR 0 7
15254: ARRAY
15255: PUSH
15256: LD_INT 2
15258: ARRAY
15259: PPUSH
15260: CALL_OW 351
15264: OR
15265: IFFALSE 15271
// exit ;
15267: POP
15268: POP
15269: GO 15563
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15271: LD_ADDR_VAR 0 8
15275: PUSH
15276: LD_VAR 0 12
15280: PUSH
15281: LD_VAR 0 7
15285: ARRAY
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_VAR 0 12
15295: PUSH
15296: LD_VAR 0 7
15300: ARRAY
15301: PUSH
15302: LD_INT 2
15304: ARRAY
15305: PPUSH
15306: CALL_OW 546
15310: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15311: LD_VAR 0 8
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PUSH
15320: LD_VAR 0 8
15324: PUSH
15325: LD_INT 2
15327: ARRAY
15328: PUSH
15329: LD_VAR 0 13
15333: PUSH
15334: LD_INT 2
15336: PLUS
15337: GREATER
15338: OR
15339: PUSH
15340: LD_VAR 0 8
15344: PUSH
15345: LD_INT 2
15347: ARRAY
15348: PUSH
15349: LD_VAR 0 13
15353: PUSH
15354: LD_INT 2
15356: MINUS
15357: LESS
15358: OR
15359: PUSH
15360: LD_VAR 0 8
15364: PUSH
15365: LD_INT 3
15367: ARRAY
15368: PUSH
15369: LD_INT 0
15371: PUSH
15372: LD_INT 8
15374: PUSH
15375: LD_INT 9
15377: PUSH
15378: LD_INT 10
15380: PUSH
15381: LD_INT 11
15383: PUSH
15384: LD_INT 12
15386: PUSH
15387: LD_INT 13
15389: PUSH
15390: LD_INT 16
15392: PUSH
15393: LD_INT 17
15395: PUSH
15396: LD_INT 18
15398: PUSH
15399: LD_INT 19
15401: PUSH
15402: LD_INT 20
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: IN
15423: NOT
15424: OR
15425: PUSH
15426: LD_VAR 0 8
15430: PUSH
15431: LD_INT 5
15433: ARRAY
15434: NOT
15435: OR
15436: PUSH
15437: LD_VAR 0 8
15441: PUSH
15442: LD_INT 6
15444: ARRAY
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: LD_INT 7
15454: PUSH
15455: LD_INT 9
15457: PUSH
15458: LD_INT 10
15460: PUSH
15461: LD_INT 11
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: IN
15472: NOT
15473: OR
15474: IFFALSE 15480
// exit ;
15476: POP
15477: POP
15478: GO 15563
// end ;
15480: GO 15151
15482: POP
15483: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15484: LD_VAR 0 9
15488: PPUSH
15489: LD_VAR 0 3
15493: PPUSH
15494: LD_VAR 0 4
15498: PPUSH
15499: LD_INT 20
15501: PPUSH
15502: CALL 7515 0 4
15506: PUSH
15507: LD_INT 4
15509: ARRAY
15510: IFFALSE 15514
// exit ;
15512: GO 15563
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15514: LD_VAR 0 2
15518: PUSH
15519: LD_INT 29
15521: PUSH
15522: LD_INT 30
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: IN
15529: PUSH
15530: LD_VAR 0 3
15534: PPUSH
15535: LD_VAR 0 4
15539: PPUSH
15540: LD_VAR 0 9
15544: PPUSH
15545: CALL_OW 440
15549: NOT
15550: AND
15551: IFFALSE 15555
// exit ;
15553: GO 15563
// result := true ;
15555: LD_ADDR_VAR 0 6
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// end ;
15563: LD_VAR 0 6
15567: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
15575: PPUSH
15576: PPUSH
15577: PPUSH
15578: PPUSH
15579: PPUSH
15580: PPUSH
15581: PPUSH
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
15587: PPUSH
15588: PPUSH
15589: PPUSH
15590: PPUSH
15591: PPUSH
15592: PPUSH
15593: PPUSH
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// result = [ ] ;
15628: LD_ADDR_VAR 0 7
15632: PUSH
15633: EMPTY
15634: ST_TO_ADDR
// temp_list = [ ] ;
15635: LD_ADDR_VAR 0 9
15639: PUSH
15640: EMPTY
15641: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15642: LD_VAR 0 4
15646: PUSH
15647: LD_INT 0
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: LD_INT 4
15661: PUSH
15662: LD_INT 5
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: IN
15673: NOT
15674: PUSH
15675: LD_VAR 0 1
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: IN
15690: PUSH
15691: LD_VAR 0 5
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: LD_INT 3
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: IN
15710: NOT
15711: AND
15712: OR
15713: IFFALSE 15717
// exit ;
15715: GO 34108
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15717: LD_VAR 0 1
15721: PUSH
15722: LD_INT 6
15724: PUSH
15725: LD_INT 7
15727: PUSH
15728: LD_INT 8
15730: PUSH
15731: LD_INT 13
15733: PUSH
15734: LD_INT 12
15736: PUSH
15737: LD_INT 15
15739: PUSH
15740: LD_INT 11
15742: PUSH
15743: LD_INT 14
15745: PUSH
15746: LD_INT 10
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: IN
15760: IFFALSE 15770
// btype = b_lab ;
15762: LD_ADDR_VAR 0 1
15766: PUSH
15767: LD_INT 6
15769: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15770: LD_VAR 0 6
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: LD_INT 2
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: LIST
15788: IN
15789: NOT
15790: PUSH
15791: LD_VAR 0 1
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: LD_INT 6
15810: PUSH
15811: LD_INT 36
15813: PUSH
15814: LD_INT 4
15816: PUSH
15817: LD_INT 5
15819: PUSH
15820: LD_INT 31
15822: PUSH
15823: LD_INT 32
15825: PUSH
15826: LD_INT 33
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: IN
15842: NOT
15843: PUSH
15844: LD_VAR 0 6
15848: PUSH
15849: LD_INT 1
15851: EQUAL
15852: AND
15853: OR
15854: PUSH
15855: LD_VAR 0 1
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: LD_INT 3
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: IN
15870: NOT
15871: PUSH
15872: LD_VAR 0 6
15876: PUSH
15877: LD_INT 2
15879: EQUAL
15880: AND
15881: OR
15882: IFFALSE 15892
// mode = 0 ;
15884: LD_ADDR_VAR 0 6
15888: PUSH
15889: LD_INT 0
15891: ST_TO_ADDR
// case mode of 0 :
15892: LD_VAR 0 6
15896: PUSH
15897: LD_INT 0
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 27358
15905: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15906: LD_ADDR_VAR 0 11
15910: PUSH
15911: LD_INT 0
15913: PUSH
15914: LD_INT 0
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 0
15923: PUSH
15924: LD_INT 1
15926: NEG
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: LD_INT 1
15934: PUSH
15935: LD_INT 0
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: LD_INT 1
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 0
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 1
15964: NEG
15965: PUSH
15966: LD_INT 0
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 1
15975: NEG
15976: PUSH
15977: LD_INT 1
15979: NEG
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: NEG
15988: PUSH
15989: LD_INT 2
15991: NEG
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 0
15999: PUSH
16000: LD_INT 2
16002: NEG
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: LD_INT 1
16013: NEG
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 1
16041: NEG
16042: PUSH
16043: LD_INT 1
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: LD_INT 3
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 0
16062: PUSH
16063: LD_INT 3
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 1
16072: NEG
16073: PUSH
16074: LD_INT 2
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16099: LD_ADDR_VAR 0 12
16103: PUSH
16104: LD_INT 0
16106: PUSH
16107: LD_INT 0
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: LD_INT 1
16119: NEG
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: LD_INT 0
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: LD_INT 1
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 1
16157: NEG
16158: PUSH
16159: LD_INT 0
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 1
16168: NEG
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: LD_INT 1
16183: NEG
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 1
16211: NEG
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 2
16222: NEG
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 2
16233: NEG
16234: PUSH
16235: LD_INT 1
16237: NEG
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 2
16245: NEG
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 3
16256: NEG
16257: PUSH
16258: LD_INT 0
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 3
16267: NEG
16268: PUSH
16269: LD_INT 1
16271: NEG
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16295: LD_ADDR_VAR 0 13
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: LD_INT 1
16315: NEG
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: LD_INT 0
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 1
16333: PUSH
16334: LD_INT 1
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 1
16364: NEG
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: PUSH
16378: LD_INT 2
16380: NEG
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 2
16398: PUSH
16399: LD_INT 2
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 1
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: NEG
16419: PUSH
16420: LD_INT 1
16422: NEG
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 2
16430: NEG
16431: PUSH
16432: LD_INT 2
16434: NEG
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 2
16442: NEG
16443: PUSH
16444: LD_INT 3
16446: NEG
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 3
16454: NEG
16455: PUSH
16456: LD_INT 2
16458: NEG
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 3
16466: NEG
16467: PUSH
16468: LD_INT 3
16470: NEG
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16494: LD_ADDR_VAR 0 14
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: LD_INT 0
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 0
16511: PUSH
16512: LD_INT 1
16514: NEG
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: LD_INT 1
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: LD_INT 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 1
16552: NEG
16553: PUSH
16554: LD_INT 0
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: NEG
16564: PUSH
16565: LD_INT 1
16567: NEG
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 1
16575: NEG
16576: PUSH
16577: LD_INT 2
16579: NEG
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: LD_INT 2
16590: NEG
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 1
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 1
16609: PUSH
16610: LD_INT 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 0
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 1
16629: NEG
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 1
16640: NEG
16641: PUSH
16642: LD_INT 3
16644: NEG
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: LD_INT 3
16655: NEG
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: LD_INT 2
16666: NEG
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16690: LD_ADDR_VAR 0 15
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: LD_INT 0
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 0
16707: PUSH
16708: LD_INT 1
16710: NEG
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 1
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 1
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 0
16738: PUSH
16739: LD_INT 1
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 1
16748: NEG
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 1
16759: NEG
16760: PUSH
16761: LD_INT 1
16763: NEG
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: LD_INT 1
16774: NEG
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 2
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 1
16802: NEG
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 2
16813: NEG
16814: PUSH
16815: LD_INT 0
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 2
16824: NEG
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: LD_INT 1
16839: NEG
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 3
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 3
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16883: LD_ADDR_VAR 0 16
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: LD_INT 0
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 0
16900: PUSH
16901: LD_INT 1
16903: NEG
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 1
16921: PUSH
16922: LD_INT 1
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 1
16941: NEG
16942: PUSH
16943: LD_INT 0
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 1
16952: NEG
16953: PUSH
16954: LD_INT 1
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 1
16964: NEG
16965: PUSH
16966: LD_INT 2
16968: NEG
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 2
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: NEG
17007: PUSH
17008: LD_INT 1
17010: NEG
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 2
17018: NEG
17019: PUSH
17020: LD_INT 2
17022: NEG
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: LD_INT 2
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 3
17040: PUSH
17041: LD_INT 3
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 3
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17076: LD_ADDR_VAR 0 17
17080: PUSH
17081: LD_INT 0
17083: PUSH
17084: LD_INT 0
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: LD_INT 1
17096: NEG
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: LD_INT 0
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: LD_INT 1
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 0
17124: PUSH
17125: LD_INT 1
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 1
17134: NEG
17135: PUSH
17136: LD_INT 0
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 1
17145: NEG
17146: PUSH
17147: LD_INT 1
17149: NEG
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 1
17157: NEG
17158: PUSH
17159: LD_INT 2
17161: NEG
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: LD_INT 2
17172: NEG
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 1
17180: PUSH
17181: LD_INT 1
17183: NEG
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 1
17241: NEG
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 2
17252: NEG
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 2
17263: NEG
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 2
17275: NEG
17276: PUSH
17277: LD_INT 2
17279: NEG
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17306: LD_ADDR_VAR 0 18
17310: PUSH
17311: LD_INT 0
17313: PUSH
17314: LD_INT 0
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: LD_INT 1
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 0
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 1
17364: NEG
17365: PUSH
17366: LD_INT 0
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 1
17375: NEG
17376: PUSH
17377: LD_INT 1
17379: NEG
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 1
17387: NEG
17388: PUSH
17389: LD_INT 2
17391: NEG
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 2
17402: NEG
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 1
17413: NEG
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 2
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 2
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 1
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 1
17471: NEG
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 2
17482: NEG
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 2
17493: NEG
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 2
17505: NEG
17506: PUSH
17507: LD_INT 2
17509: NEG
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17536: LD_ADDR_VAR 0 19
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 0
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 0
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: LD_INT 1
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: NEG
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 1
17605: NEG
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 1
17617: NEG
17618: PUSH
17619: LD_INT 2
17621: NEG
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 0
17629: PUSH
17630: LD_INT 2
17632: NEG
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 1
17643: NEG
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 1
17701: NEG
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: NEG
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 2
17723: NEG
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 2
17735: NEG
17736: PUSH
17737: LD_INT 2
17739: NEG
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17766: LD_ADDR_VAR 0 20
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: LD_INT 1
17786: NEG
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: LD_INT 0
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: LD_INT 1
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 1
17847: NEG
17848: PUSH
17849: LD_INT 2
17851: NEG
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: LD_INT 2
17862: NEG
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 2
17881: PUSH
17882: LD_INT 0
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 1
17931: NEG
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: NEG
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 2
17953: NEG
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 2
17965: NEG
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17996: LD_ADDR_VAR 0 21
18000: PUSH
18001: LD_INT 0
18003: PUSH
18004: LD_INT 0
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: LD_INT 1
18016: NEG
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: LD_INT 0
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: LD_INT 2
18081: NEG
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: LD_INT 2
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 2
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: NEG
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 2
18172: NEG
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 2
18183: NEG
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 2
18195: NEG
18196: PUSH
18197: LD_INT 2
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18226: LD_ADDR_VAR 0 22
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: LD_INT 0
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 1
18295: NEG
18296: PUSH
18297: LD_INT 1
18299: NEG
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 2
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 2
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: LD_INT 1
18333: NEG
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 2
18341: PUSH
18342: LD_INT 0
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 2
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: LD_INT 2
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 2
18402: NEG
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: NEG
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: NEG
18426: PUSH
18427: LD_INT 2
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18456: LD_ADDR_VAR 0 23
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 1
18537: NEG
18538: PUSH
18539: LD_INT 2
18541: NEG
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 2
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 2
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: LD_INT 2
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 2
18632: NEG
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: NEG
18644: PUSH
18645: LD_INT 1
18647: NEG
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: NEG
18656: PUSH
18657: LD_INT 2
18659: NEG
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 2
18667: NEG
18668: PUSH
18669: LD_INT 3
18671: NEG
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: NEG
18680: PUSH
18681: LD_INT 3
18683: NEG
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: LD_INT 2
18694: NEG
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18736: LD_ADDR_VAR 0 24
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: LD_INT 2
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: LD_INT 2
18832: NEG
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 1
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 1
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 3
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19012: LD_ADDR_VAR 0 25
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 1
19070: NEG
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: LD_INT 2
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 2
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: LD_INT 1
19203: NEG
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 2
19211: NEG
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 3
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 3
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 3
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19286: LD_ADDR_VAR 0 26
19290: PUSH
19291: LD_INT 0
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 0
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: LD_INT 2
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: LD_INT 2
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 1
19451: NEG
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 2
19462: NEG
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: LD_INT 2
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: LD_INT 3
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 3
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: NEG
19518: PUSH
19519: LD_INT 2
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 2
19528: NEG
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19562: LD_ADDR_VAR 0 27
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: LD_INT 1
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: NEG
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: NEG
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 3
19795: NEG
19796: PUSH
19797: LD_INT 1
19799: NEG
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 3
19807: NEG
19808: PUSH
19809: LD_INT 2
19811: NEG
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19842: LD_ADDR_VAR 0 28
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: NEG
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 2
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: NEG
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: NEG
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 2
20053: NEG
20054: PUSH
20055: LD_INT 3
20057: NEG
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: LD_INT 3
20069: NEG
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 3
20077: NEG
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 3
20089: NEG
20090: PUSH
20091: LD_INT 2
20093: NEG
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20124: LD_ADDR_VAR 0 29
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: LD_INT 0
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 0
20269: PUSH
20270: LD_INT 2
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 1
20279: NEG
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 2
20290: NEG
20291: PUSH
20292: LD_INT 1
20294: NEG
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: LD_INT 2
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: LD_INT 3
20318: NEG
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 3
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 3
20368: NEG
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20403: LD_ADDR_VAR 0 30
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 0
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: NEG
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: NEG
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: NEG
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: LD_INT 3
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: LD_INT 2
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 3
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: LD_INT 3
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 3
20646: NEG
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20681: LD_ADDR_VAR 0 31
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 0
20698: PUSH
20699: LD_INT 1
20701: NEG
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: LD_INT 1
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 1
20750: NEG
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: LD_INT 2
20766: NEG
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 2
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 2
20846: NEG
20847: PUSH
20848: LD_INT 1
20850: NEG
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 2
20858: NEG
20859: PUSH
20860: LD_INT 2
20862: NEG
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: LD_INT 3
20874: NEG
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: LD_INT 3
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: LD_INT 2
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 3
20924: NEG
20925: PUSH
20926: LD_INT 2
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20959: LD_ADDR_VAR 0 32
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: LD_INT 0
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 0
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: PUSH
21019: LD_INT 0
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: LD_INT 2
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 2
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 2
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: NEG
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 2
21136: NEG
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: NEG
21149: PUSH
21150: LD_INT 3
21152: NEG
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: LD_INT 2
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 3
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: LD_INT 3
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 3
21202: NEG
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21237: LD_ADDR_VAR 0 33
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: LD_INT 1
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: NEG
21296: PUSH
21297: LD_INT 0
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 1
21306: NEG
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 1
21318: NEG
21319: PUSH
21320: LD_INT 2
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 1
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: LD_INT 1
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 2
21392: NEG
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: NEG
21404: PUSH
21405: LD_INT 1
21407: NEG
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: LD_INT 2
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: NEG
21428: PUSH
21429: LD_INT 3
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: LD_INT 3
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 3
21481: NEG
21482: PUSH
21483: LD_INT 2
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21516: LD_ADDR_VAR 0 34
21520: PUSH
21521: LD_INT 0
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: NEG
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: LD_INT 2
21601: NEG
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: LD_INT 2
21612: NEG
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 1
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: NEG
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: NEG
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 2
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 3
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: LD_INT 3
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 2
21750: NEG
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 3
21761: NEG
21762: PUSH
21763: LD_INT 1
21765: NEG
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21796: LD_ADDR_VAR 0 35
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 1
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 2
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: NEG
21888: PUSH
21889: LD_INT 1
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21908: LD_ADDR_VAR 0 36
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 2
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22020: LD_ADDR_VAR 0 37
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: LD_INT 0
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: LD_INT 1
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22132: LD_ADDR_VAR 0 38
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: LD_INT 1
22152: NEG
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 0
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22244: LD_ADDR_VAR 0 39
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: LD_INT 2
22329: NEG
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22356: LD_ADDR_VAR 0 40
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 0
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: NEG
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: NEG
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22468: LD_ADDR_VAR 0 41
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: LD_INT 2
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: LD_INT 2
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: NEG
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 2
22634: NEG
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: NEG
22647: PUSH
22648: LD_INT 2
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: LD_INT 3
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 3
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 3
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 3
22711: PUSH
22712: LD_INT 3
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 3
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 3
22742: NEG
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 3
22753: NEG
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 3
22765: NEG
22766: PUSH
22767: LD_INT 2
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 3
22777: NEG
22778: PUSH
22779: LD_INT 3
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22818: LD_ADDR_VAR 0 42
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: LD_INT 1
22891: NEG
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: LD_INT 2
22903: NEG
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: LD_INT 2
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: LD_INT 2
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: NEG
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: LD_INT 2
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: LD_INT 3
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: LD_INT 3
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: LD_INT 3
23035: NEG
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 3
23064: PUSH
23065: LD_INT 3
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 2
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 3
23115: NEG
23116: PUSH
23117: LD_INT 2
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 3
23127: NEG
23128: PUSH
23129: LD_INT 3
23131: NEG
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23168: LD_ADDR_VAR 0 43
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 0
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: NEG
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 1
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 1
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: NEG
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 2
23345: NEG
23346: PUSH
23347: LD_INT 1
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: LD_INT 3
23361: NEG
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: LD_INT 3
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 2
23383: NEG
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 3
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: LD_INT 3
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: NEG
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 3
23464: NEG
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 3
23475: NEG
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23516: LD_ADDR_VAR 0 44
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: NEG
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: LD_INT 1
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 2
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: NEG
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 2
23682: NEG
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 2
23694: NEG
23695: PUSH
23696: LD_INT 2
23698: NEG
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: LD_INT 3
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 3
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 3
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 3
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 2
23769: PUSH
23770: LD_INT 3
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 2
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 3
23790: NEG
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 3
23801: NEG
23802: PUSH
23803: LD_INT 1
23805: NEG
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 3
23813: NEG
23814: PUSH
23815: LD_INT 2
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 3
23825: NEG
23826: PUSH
23827: LD_INT 3
23829: NEG
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23866: LD_ADDR_VAR 0 45
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 2
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 2
23991: PUSH
23992: LD_INT 2
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 0
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: NEG
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 2
24044: NEG
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: LD_INT 3
24060: NEG
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 3
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 3
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 3
24112: PUSH
24113: LD_INT 3
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: LD_INT 3
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: NEG
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 3
24163: NEG
24164: PUSH
24165: LD_INT 2
24167: NEG
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 3
24175: NEG
24176: PUSH
24177: LD_INT 3
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24216: LD_ADDR_VAR 0 46
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: NEG
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 1
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: LD_INT 1
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: LD_INT 1
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 2
24382: NEG
24383: PUSH
24384: LD_INT 0
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: NEG
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: NEG
24406: PUSH
24407: LD_INT 3
24409: NEG
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: LD_INT 3
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 2
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 3
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 3
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: NEG
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 3
24512: NEG
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 3
24523: NEG
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24564: LD_ADDR_VAR 0 47
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24715: LD_ADDR_VAR 0 48
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 2
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 2
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24862: LD_ADDR_VAR 0 49
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25006: LD_ADDR_VAR 0 50
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 2
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25150: LD_ADDR_VAR 0 51
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: NEG
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 2
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25297: LD_ADDR_VAR 0 52
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: LD_INT 1
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 2
25412: NEG
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: LD_INT 2
25428: NEG
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25448: LD_ADDR_VAR 0 53
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: LD_INT 2
25544: NEG
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 2
25624: NEG
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: NEG
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25678: LD_ADDR_VAR 0 54
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 1
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: NEG
25760: PUSH
25761: LD_INT 2
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 2
25877: NEG
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25908: LD_ADDR_VAR 0 55
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: LD_INT 2
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: NEG
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26138: LD_ADDR_VAR 0 56
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 2
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 2
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 2
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 2
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 2
26337: NEG
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26368: LD_ADDR_VAR 0 57
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: LD_INT 2
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 2
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26598: LD_ADDR_VAR 0 58
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: LD_INT 2
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 2
26774: NEG
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 2
26797: NEG
26798: PUSH
26799: LD_INT 2
26801: NEG
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26828: LD_ADDR_VAR 0 59
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: LD_INT 0
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26916: LD_ADDR_VAR 0 60
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27004: LD_ADDR_VAR 0 61
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27092: LD_ADDR_VAR 0 62
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27180: LD_ADDR_VAR 0 63
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27268: LD_ADDR_VAR 0 64
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
// end ; 1 :
27356: GO 33253
27358: LD_INT 1
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 29989
27366: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27367: LD_ADDR_VAR 0 11
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: LD_INT 3
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: LD_INT 3
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: LD_INT 2
27400: NEG
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27411: LD_ADDR_VAR 0 12
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 3
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 3
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27452: LD_ADDR_VAR 0 13
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 3
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: LD_INT 3
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27492: LD_ADDR_VAR 0 14
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 3
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: LD_INT 3
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27533: LD_ADDR_VAR 0 15
27537: PUSH
27538: LD_INT 2
27540: NEG
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 3
27551: NEG
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 3
27562: NEG
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27577: LD_ADDR_VAR 0 16
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: LD_INT 3
27588: NEG
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 3
27596: NEG
27597: PUSH
27598: LD_INT 2
27600: NEG
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 3
27608: NEG
27609: PUSH
27610: LD_INT 3
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27623: LD_ADDR_VAR 0 17
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 3
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 3
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27667: LD_ADDR_VAR 0 18
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 3
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27708: LD_ADDR_VAR 0 19
27712: PUSH
27713: LD_INT 3
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 3
27725: PUSH
27726: LD_INT 3
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27748: LD_ADDR_VAR 0 20
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 3
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27789: LD_ADDR_VAR 0 21
27793: PUSH
27794: LD_INT 2
27796: NEG
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 3
27807: NEG
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 3
27818: NEG
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27833: LD_ADDR_VAR 0 22
27837: PUSH
27838: LD_INT 2
27840: NEG
27841: PUSH
27842: LD_INT 3
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 3
27852: NEG
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 3
27864: NEG
27865: PUSH
27866: LD_INT 3
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27879: LD_ADDR_VAR 0 23
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 3
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: LD_INT 4
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: LD_INT 3
27912: NEG
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27923: LD_ADDR_VAR 0 24
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 4
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27964: LD_ADDR_VAR 0 25
27968: PUSH
27969: LD_INT 3
27971: PUSH
27972: LD_INT 3
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 4
27981: PUSH
27982: LD_INT 3
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 3
27991: PUSH
27992: LD_INT 4
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28004: LD_ADDR_VAR 0 26
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 3
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 4
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28045: LD_ADDR_VAR 0 27
28049: PUSH
28050: LD_INT 3
28052: NEG
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 3
28063: NEG
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 4
28074: NEG
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28089: LD_ADDR_VAR 0 28
28093: PUSH
28094: LD_INT 3
28096: NEG
28097: PUSH
28098: LD_INT 3
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 3
28108: NEG
28109: PUSH
28110: LD_INT 4
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 4
28120: NEG
28121: PUSH
28122: LD_INT 3
28124: NEG
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28135: LD_ADDR_VAR 0 29
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 3
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: LD_INT 3
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: LD_INT 2
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: LD_INT 4
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: LD_INT 4
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: LD_INT 3
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 5
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 5
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 4
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 6
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: LD_INT 6
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: LD_INT 5
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28290: LD_ADDR_VAR 0 30
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 3
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 3
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 4
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 4
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 4
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 5
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 5
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 6
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 6
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28433: LD_ADDR_VAR 0 31
28437: PUSH
28438: LD_INT 3
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 3
28450: PUSH
28451: LD_INT 3
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: LD_INT 3
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 4
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 4
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 3
28490: PUSH
28491: LD_INT 4
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 5
28500: PUSH
28501: LD_INT 4
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 5
28510: PUSH
28511: LD_INT 5
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 4
28520: PUSH
28521: LD_INT 5
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 6
28530: PUSH
28531: LD_INT 5
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 6
28540: PUSH
28541: LD_INT 6
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 5
28550: PUSH
28551: LD_INT 6
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28572: LD_ADDR_VAR 0 32
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: LD_INT 3
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 3
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 4
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 4
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 3
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 5
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 5
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 4
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 6
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 6
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 5
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28715: LD_ADDR_VAR 0 33
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 3
28733: NEG
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 3
28744: NEG
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 3
28756: NEG
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 4
28767: NEG
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 4
28778: NEG
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 4
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 5
28801: NEG
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 5
28812: NEG
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 5
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 6
28835: NEG
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 6
28846: NEG
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28870: LD_ADDR_VAR 0 34
28874: PUSH
28875: LD_INT 2
28877: NEG
28878: PUSH
28879: LD_INT 3
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 3
28889: NEG
28890: PUSH
28891: LD_INT 2
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 3
28901: NEG
28902: PUSH
28903: LD_INT 3
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 3
28913: NEG
28914: PUSH
28915: LD_INT 4
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 4
28925: NEG
28926: PUSH
28927: LD_INT 3
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 4
28937: NEG
28938: PUSH
28939: LD_INT 4
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 4
28949: NEG
28950: PUSH
28951: LD_INT 5
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 5
28961: NEG
28962: PUSH
28963: LD_INT 4
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 5
28973: NEG
28974: PUSH
28975: LD_INT 5
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 5
28985: NEG
28986: PUSH
28987: LD_INT 6
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 6
28997: NEG
28998: PUSH
28999: LD_INT 5
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 6
29009: NEG
29010: PUSH
29011: LD_INT 6
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29033: LD_ADDR_VAR 0 41
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 3
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29077: LD_ADDR_VAR 0 42
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29118: LD_ADDR_VAR 0 43
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 3
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29158: LD_ADDR_VAR 0 44
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29199: LD_ADDR_VAR 0 45
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 2
29217: NEG
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29243: LD_ADDR_VAR 0 46
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: LD_INT 2
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: NEG
29263: PUSH
29264: LD_INT 3
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 3
29274: NEG
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29289: LD_ADDR_VAR 0 47
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: LD_INT 3
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29322: LD_ADDR_VAR 0 48
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29353: LD_ADDR_VAR 0 49
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29382: LD_ADDR_VAR 0 50
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: LD_INT 3
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29411: LD_ADDR_VAR 0 51
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29442: LD_ADDR_VAR 0 52
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 3
29461: NEG
29462: PUSH
29463: LD_INT 2
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29475: LD_ADDR_VAR 0 53
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 3
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29519: LD_ADDR_VAR 0 54
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29560: LD_ADDR_VAR 0 55
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: LD_INT 3
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: LD_INT 3
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29600: LD_ADDR_VAR 0 56
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: LD_INT 3
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29641: LD_ADDR_VAR 0 57
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 3
29670: NEG
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29685: LD_ADDR_VAR 0 58
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 3
29704: NEG
29705: PUSH
29706: LD_INT 2
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 3
29716: NEG
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29731: LD_ADDR_VAR 0 59
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29775: LD_ADDR_VAR 0 60
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29816: LD_ADDR_VAR 0 61
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 2
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29856: LD_ADDR_VAR 0 62
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: LD_INT 2
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29897: LD_ADDR_VAR 0 63
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29941: LD_ADDR_VAR 0 64
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: ST_TO_ADDR
// end ; 2 :
29987: GO 33253
29989: LD_INT 2
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 33252
29997: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29998: LD_ADDR_VAR 0 29
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 4
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 5
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 5
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 4
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 3
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: PUSH
30078: LD_INT 2
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 5
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: LD_INT 3
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 4
30118: PUSH
30119: LD_INT 3
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 4
30128: PUSH
30129: LD_INT 4
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: PUSH
30139: LD_INT 4
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 3
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 4
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 2
30178: PUSH
30179: LD_INT 4
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 4
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: LD_INT 5
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: LD_INT 4
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: LD_INT 3
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 5
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: NEG
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 2
30315: NEG
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: NEG
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 4
30337: NEG
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 4
30348: NEG
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 4
30360: NEG
30361: PUSH
30362: LD_INT 2
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 4
30383: NEG
30384: PUSH
30385: LD_INT 4
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 4
30395: NEG
30396: PUSH
30397: LD_INT 5
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 4
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: LD_INT 3
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 4
30431: NEG
30432: PUSH
30433: LD_INT 3
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 5
30443: NEG
30444: PUSH
30445: LD_INT 4
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 5
30455: NEG
30456: PUSH
30457: LD_INT 5
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: LD_INT 5
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 5
30479: NEG
30480: PUSH
30481: LD_INT 3
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30536: LD_ADDR_VAR 0 30
30540: PUSH
30541: LD_INT 4
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 4
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 5
30563: PUSH
30564: LD_INT 4
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 5
30573: PUSH
30574: LD_INT 5
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 4
30583: PUSH
30584: LD_INT 5
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: LD_INT 3
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: LD_INT 5
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 4
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: LD_INT 4
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: LD_INT 3
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: LD_INT 4
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 4
30726: NEG
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 4
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 3
30760: NEG
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 4
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 5
30782: NEG
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 5
30793: NEG
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 5
30805: NEG
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 3
30817: NEG
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 3
30828: NEG
30829: PUSH
30830: LD_INT 3
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 3
30840: NEG
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 3
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 3
30876: NEG
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 4
30888: NEG
30889: PUSH
30890: LD_INT 3
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 4
30900: NEG
30901: PUSH
30902: LD_INT 4
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: LD_INT 4
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 4
30924: NEG
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: LD_INT 5
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: LD_INT 4
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 3
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: LD_INT 4
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: LD_INT 5
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: LD_INT 5
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31083: LD_ADDR_VAR 0 31
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 4
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: LD_INT 4
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 5
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 5
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: LD_INT 4
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: LD_INT 3
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: LD_INT 5
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 2
31172: NEG
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 4
31239: NEG
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 4
31250: NEG
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 4
31262: NEG
31263: PUSH
31264: LD_INT 2
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 2
31274: NEG
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 4
31285: NEG
31286: PUSH
31287: LD_INT 4
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 4
31297: NEG
31298: PUSH
31299: LD_INT 5
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 3
31309: NEG
31310: PUSH
31311: LD_INT 4
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 4
31333: NEG
31334: PUSH
31335: LD_INT 3
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 5
31345: NEG
31346: PUSH
31347: LD_INT 4
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 5
31357: NEG
31358: PUSH
31359: LD_INT 5
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: LD_INT 5
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 5
31381: NEG
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: LD_INT 3
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 4
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: LD_INT 3
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: LD_INT 2
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 3
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: LD_INT 4
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: LD_INT 4
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 4
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 4
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 5
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 5
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 4
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 3
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 2
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 5
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31633: LD_ADDR_VAR 0 32
31637: PUSH
31638: LD_INT 4
31640: NEG
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 4
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 3
31663: NEG
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: NEG
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 4
31685: NEG
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 5
31696: NEG
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 5
31707: NEG
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 5
31719: NEG
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: NEG
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 3
31742: NEG
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: LD_INT 4
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 2
31778: NEG
31779: PUSH
31780: LD_INT 2
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: NEG
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 4
31802: NEG
31803: PUSH
31804: LD_INT 3
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 4
31814: NEG
31815: PUSH
31816: LD_INT 4
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: LD_INT 4
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 4
31838: NEG
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: LD_INT 4
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: LD_INT 5
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 4
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: LD_INT 3
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: LD_INT 4
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: LD_INT 5
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 3
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: NEG
31941: PUSH
31942: LD_INT 5
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 3
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 4
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 4
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: LD_INT 2
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 4
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 4
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 5
32065: PUSH
32066: LD_INT 4
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 5
32075: PUSH
32076: LD_INT 5
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 4
32085: PUSH
32086: LD_INT 5
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: LD_INT 4
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: LD_INT 3
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: LD_INT 5
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32180: LD_ADDR_VAR 0 33
32184: PUSH
32185: LD_INT 4
32187: NEG
32188: PUSH
32189: LD_INT 4
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 4
32199: NEG
32200: PUSH
32201: LD_INT 5
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 3
32223: NEG
32224: PUSH
32225: LD_INT 3
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 4
32235: NEG
32236: PUSH
32237: LD_INT 3
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 5
32247: NEG
32248: PUSH
32249: LD_INT 4
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 5
32259: NEG
32260: PUSH
32261: LD_INT 5
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 3
32271: NEG
32272: PUSH
32273: LD_INT 5
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 5
32283: NEG
32284: PUSH
32285: LD_INT 3
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 3
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 4
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: LD_INT 3
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: LD_INT 4
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: LD_INT 4
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 4
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 4
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 4
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: LD_INT 0
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: LD_INT 2
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 5
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 4
32510: PUSH
32511: LD_INT 3
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 4
32520: PUSH
32521: LD_INT 4
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 3
32530: PUSH
32531: LD_INT 4
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 3
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 2
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 4
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 4
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: LD_INT 5
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: LD_INT 5
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32718: LD_ADDR_VAR 0 34
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 4
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 5
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: LD_INT 4
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: LD_INT 3
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 3
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: LD_INT 4
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 5
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 3
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 5
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 4
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 4
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 4
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 4
32920: PUSH
32921: LD_INT 4
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 4
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 5
32940: PUSH
32941: LD_INT 4
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 5
32950: PUSH
32951: LD_INT 5
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 4
32960: PUSH
32961: LD_INT 5
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 3
32970: PUSH
32971: LD_INT 4
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 5
32990: PUSH
32991: LD_INT 3
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: LD_INT 5
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 3
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 4
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: LD_INT 4
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 4
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 4
33103: NEG
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 4
33114: NEG
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: NEG
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 3
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 4
33148: NEG
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 5
33159: NEG
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 5
33170: NEG
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 5
33182: NEG
33183: PUSH
33184: LD_INT 2
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 3
33194: NEG
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: ST_TO_ADDR
// end ; end ;
33250: GO 33253
33252: POP
// case btype of b_depot , b_warehouse :
33253: LD_VAR 0 1
33257: PUSH
33258: LD_INT 0
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33272
33264: LD_INT 1
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33272
33270: GO 33473
33272: POP
// case nation of nation_american :
33273: LD_VAR 0 5
33277: PUSH
33278: LD_INT 1
33280: DOUBLE
33281: EQUAL
33282: IFTRUE 33286
33284: GO 33342
33286: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33287: LD_ADDR_VAR 0 9
33291: PUSH
33292: LD_VAR 0 11
33296: PUSH
33297: LD_VAR 0 12
33301: PUSH
33302: LD_VAR 0 13
33306: PUSH
33307: LD_VAR 0 14
33311: PUSH
33312: LD_VAR 0 15
33316: PUSH
33317: LD_VAR 0 16
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: PUSH
33330: LD_VAR 0 4
33334: PUSH
33335: LD_INT 1
33337: PLUS
33338: ARRAY
33339: ST_TO_ADDR
33340: GO 33471
33342: LD_INT 2
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33406
33350: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33351: LD_ADDR_VAR 0 9
33355: PUSH
33356: LD_VAR 0 17
33360: PUSH
33361: LD_VAR 0 18
33365: PUSH
33366: LD_VAR 0 19
33370: PUSH
33371: LD_VAR 0 20
33375: PUSH
33376: LD_VAR 0 21
33380: PUSH
33381: LD_VAR 0 22
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: PUSH
33394: LD_VAR 0 4
33398: PUSH
33399: LD_INT 1
33401: PLUS
33402: ARRAY
33403: ST_TO_ADDR
33404: GO 33471
33406: LD_INT 3
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33414
33412: GO 33470
33414: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33415: LD_ADDR_VAR 0 9
33419: PUSH
33420: LD_VAR 0 23
33424: PUSH
33425: LD_VAR 0 24
33429: PUSH
33430: LD_VAR 0 25
33434: PUSH
33435: LD_VAR 0 26
33439: PUSH
33440: LD_VAR 0 27
33444: PUSH
33445: LD_VAR 0 28
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: PUSH
33458: LD_VAR 0 4
33462: PUSH
33463: LD_INT 1
33465: PLUS
33466: ARRAY
33467: ST_TO_ADDR
33468: GO 33471
33470: POP
33471: GO 34026
33473: LD_INT 2
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33487
33479: LD_INT 3
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 33543
33487: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33488: LD_ADDR_VAR 0 9
33492: PUSH
33493: LD_VAR 0 29
33497: PUSH
33498: LD_VAR 0 30
33502: PUSH
33503: LD_VAR 0 31
33507: PUSH
33508: LD_VAR 0 32
33512: PUSH
33513: LD_VAR 0 33
33517: PUSH
33518: LD_VAR 0 34
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: PUSH
33531: LD_VAR 0 4
33535: PUSH
33536: LD_INT 1
33538: PLUS
33539: ARRAY
33540: ST_TO_ADDR
33541: GO 34026
33543: LD_INT 16
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33605
33549: LD_INT 17
33551: DOUBLE
33552: EQUAL
33553: IFTRUE 33605
33555: LD_INT 18
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33605
33561: LD_INT 19
33563: DOUBLE
33564: EQUAL
33565: IFTRUE 33605
33567: LD_INT 22
33569: DOUBLE
33570: EQUAL
33571: IFTRUE 33605
33573: LD_INT 20
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33605
33579: LD_INT 21
33581: DOUBLE
33582: EQUAL
33583: IFTRUE 33605
33585: LD_INT 23
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33605
33591: LD_INT 24
33593: DOUBLE
33594: EQUAL
33595: IFTRUE 33605
33597: LD_INT 25
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33661
33605: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33606: LD_ADDR_VAR 0 9
33610: PUSH
33611: LD_VAR 0 35
33615: PUSH
33616: LD_VAR 0 36
33620: PUSH
33621: LD_VAR 0 37
33625: PUSH
33626: LD_VAR 0 38
33630: PUSH
33631: LD_VAR 0 39
33635: PUSH
33636: LD_VAR 0 40
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: PUSH
33649: LD_VAR 0 4
33653: PUSH
33654: LD_INT 1
33656: PLUS
33657: ARRAY
33658: ST_TO_ADDR
33659: GO 34026
33661: LD_INT 6
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33717
33667: LD_INT 7
33669: DOUBLE
33670: EQUAL
33671: IFTRUE 33717
33673: LD_INT 8
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33717
33679: LD_INT 13
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33717
33685: LD_INT 12
33687: DOUBLE
33688: EQUAL
33689: IFTRUE 33717
33691: LD_INT 15
33693: DOUBLE
33694: EQUAL
33695: IFTRUE 33717
33697: LD_INT 11
33699: DOUBLE
33700: EQUAL
33701: IFTRUE 33717
33703: LD_INT 14
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33717
33709: LD_INT 10
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33717
33715: GO 33773
33717: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33718: LD_ADDR_VAR 0 9
33722: PUSH
33723: LD_VAR 0 41
33727: PUSH
33728: LD_VAR 0 42
33732: PUSH
33733: LD_VAR 0 43
33737: PUSH
33738: LD_VAR 0 44
33742: PUSH
33743: LD_VAR 0 45
33747: PUSH
33748: LD_VAR 0 46
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: PUSH
33761: LD_VAR 0 4
33765: PUSH
33766: LD_INT 1
33768: PLUS
33769: ARRAY
33770: ST_TO_ADDR
33771: GO 34026
33773: LD_INT 36
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33781
33779: GO 33837
33781: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33782: LD_ADDR_VAR 0 9
33786: PUSH
33787: LD_VAR 0 47
33791: PUSH
33792: LD_VAR 0 48
33796: PUSH
33797: LD_VAR 0 49
33801: PUSH
33802: LD_VAR 0 50
33806: PUSH
33807: LD_VAR 0 51
33811: PUSH
33812: LD_VAR 0 52
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: PUSH
33825: LD_VAR 0 4
33829: PUSH
33830: LD_INT 1
33832: PLUS
33833: ARRAY
33834: ST_TO_ADDR
33835: GO 34026
33837: LD_INT 4
33839: DOUBLE
33840: EQUAL
33841: IFTRUE 33863
33843: LD_INT 5
33845: DOUBLE
33846: EQUAL
33847: IFTRUE 33863
33849: LD_INT 34
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33863
33855: LD_INT 37
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33863
33861: GO 33919
33863: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33864: LD_ADDR_VAR 0 9
33868: PUSH
33869: LD_VAR 0 53
33873: PUSH
33874: LD_VAR 0 54
33878: PUSH
33879: LD_VAR 0 55
33883: PUSH
33884: LD_VAR 0 56
33888: PUSH
33889: LD_VAR 0 57
33893: PUSH
33894: LD_VAR 0 58
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: PUSH
33907: LD_VAR 0 4
33911: PUSH
33912: LD_INT 1
33914: PLUS
33915: ARRAY
33916: ST_TO_ADDR
33917: GO 34026
33919: LD_INT 31
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33969
33925: LD_INT 32
33927: DOUBLE
33928: EQUAL
33929: IFTRUE 33969
33931: LD_INT 33
33933: DOUBLE
33934: EQUAL
33935: IFTRUE 33969
33937: LD_INT 27
33939: DOUBLE
33940: EQUAL
33941: IFTRUE 33969
33943: LD_INT 26
33945: DOUBLE
33946: EQUAL
33947: IFTRUE 33969
33949: LD_INT 28
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33969
33955: LD_INT 29
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33969
33961: LD_INT 30
33963: DOUBLE
33964: EQUAL
33965: IFTRUE 33969
33967: GO 34025
33969: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33970: LD_ADDR_VAR 0 9
33974: PUSH
33975: LD_VAR 0 59
33979: PUSH
33980: LD_VAR 0 60
33984: PUSH
33985: LD_VAR 0 61
33989: PUSH
33990: LD_VAR 0 62
33994: PUSH
33995: LD_VAR 0 63
33999: PUSH
34000: LD_VAR 0 64
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: PUSH
34013: LD_VAR 0 4
34017: PUSH
34018: LD_INT 1
34020: PLUS
34021: ARRAY
34022: ST_TO_ADDR
34023: GO 34026
34025: POP
// temp_list2 = [ ] ;
34026: LD_ADDR_VAR 0 10
34030: PUSH
34031: EMPTY
34032: ST_TO_ADDR
// for i in temp_list do
34033: LD_ADDR_VAR 0 8
34037: PUSH
34038: LD_VAR 0 9
34042: PUSH
34043: FOR_IN
34044: IFFALSE 34096
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34046: LD_ADDR_VAR 0 10
34050: PUSH
34051: LD_VAR 0 10
34055: PUSH
34056: LD_VAR 0 8
34060: PUSH
34061: LD_INT 1
34063: ARRAY
34064: PUSH
34065: LD_VAR 0 2
34069: PLUS
34070: PUSH
34071: LD_VAR 0 8
34075: PUSH
34076: LD_INT 2
34078: ARRAY
34079: PUSH
34080: LD_VAR 0 3
34084: PLUS
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: EMPTY
34091: LIST
34092: ADD
34093: ST_TO_ADDR
34094: GO 34043
34096: POP
34097: POP
// result = temp_list2 ;
34098: LD_ADDR_VAR 0 7
34102: PUSH
34103: LD_VAR 0 10
34107: ST_TO_ADDR
// end ;
34108: LD_VAR 0 7
34112: RET
// export function EnemyInRange ( unit , dist ) ; begin
34113: LD_INT 0
34115: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34116: LD_ADDR_VAR 0 3
34120: PUSH
34121: LD_VAR 0 1
34125: PPUSH
34126: CALL_OW 255
34130: PPUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 250
34140: PPUSH
34141: LD_VAR 0 1
34145: PPUSH
34146: CALL_OW 251
34150: PPUSH
34151: LD_VAR 0 2
34155: PPUSH
34156: CALL 7515 0 4
34160: PUSH
34161: LD_INT 4
34163: ARRAY
34164: ST_TO_ADDR
// end ;
34165: LD_VAR 0 3
34169: RET
// export function PlayerSeeMe ( unit ) ; begin
34170: LD_INT 0
34172: PPUSH
// result := See ( your_side , unit ) ;
34173: LD_ADDR_VAR 0 2
34177: PUSH
34178: LD_OWVAR 2
34182: PPUSH
34183: LD_VAR 0 1
34187: PPUSH
34188: CALL_OW 292
34192: ST_TO_ADDR
// end ;
34193: LD_VAR 0 2
34197: RET
// export function ReverseDir ( unit ) ; begin
34198: LD_INT 0
34200: PPUSH
// if not unit then
34201: LD_VAR 0 1
34205: NOT
34206: IFFALSE 34210
// exit ;
34208: GO 34233
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34210: LD_ADDR_VAR 0 2
34214: PUSH
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 254
34224: PUSH
34225: LD_INT 3
34227: PLUS
34228: PUSH
34229: LD_INT 6
34231: MOD
34232: ST_TO_ADDR
// end ;
34233: LD_VAR 0 2
34237: RET
// export function ReverseArray ( array ) ; var i ; begin
34238: LD_INT 0
34240: PPUSH
34241: PPUSH
// if not array then
34242: LD_VAR 0 1
34246: NOT
34247: IFFALSE 34251
// exit ;
34249: GO 34306
// result := [ ] ;
34251: LD_ADDR_VAR 0 2
34255: PUSH
34256: EMPTY
34257: ST_TO_ADDR
// for i := array downto 1 do
34258: LD_ADDR_VAR 0 3
34262: PUSH
34263: DOUBLE
34264: LD_VAR 0 1
34268: INC
34269: ST_TO_ADDR
34270: LD_INT 1
34272: PUSH
34273: FOR_DOWNTO
34274: IFFALSE 34304
// result := Join ( result , array [ i ] ) ;
34276: LD_ADDR_VAR 0 2
34280: PUSH
34281: LD_VAR 0 2
34285: PPUSH
34286: LD_VAR 0 1
34290: PUSH
34291: LD_VAR 0 3
34295: ARRAY
34296: PPUSH
34297: CALL 38949 0 2
34301: ST_TO_ADDR
34302: GO 34273
34304: POP
34305: POP
// end ;
34306: LD_VAR 0 2
34310: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34311: LD_INT 0
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
// if not unit or not hexes then
34319: LD_VAR 0 1
34323: NOT
34324: PUSH
34325: LD_VAR 0 2
34329: NOT
34330: OR
34331: IFFALSE 34335
// exit ;
34333: GO 34458
// dist := 9999 ;
34335: LD_ADDR_VAR 0 5
34339: PUSH
34340: LD_INT 9999
34342: ST_TO_ADDR
// for i = 1 to hexes do
34343: LD_ADDR_VAR 0 4
34347: PUSH
34348: DOUBLE
34349: LD_INT 1
34351: DEC
34352: ST_TO_ADDR
34353: LD_VAR 0 2
34357: PUSH
34358: FOR_TO
34359: IFFALSE 34446
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34361: LD_ADDR_VAR 0 6
34365: PUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: LD_VAR 0 2
34375: PUSH
34376: LD_VAR 0 4
34380: ARRAY
34381: PUSH
34382: LD_INT 1
34384: ARRAY
34385: PPUSH
34386: LD_VAR 0 2
34390: PUSH
34391: LD_VAR 0 4
34395: ARRAY
34396: PUSH
34397: LD_INT 2
34399: ARRAY
34400: PPUSH
34401: CALL_OW 297
34405: ST_TO_ADDR
// if tdist < dist then
34406: LD_VAR 0 6
34410: PUSH
34411: LD_VAR 0 5
34415: LESS
34416: IFFALSE 34444
// begin hex := hexes [ i ] ;
34418: LD_ADDR_VAR 0 8
34422: PUSH
34423: LD_VAR 0 2
34427: PUSH
34428: LD_VAR 0 4
34432: ARRAY
34433: ST_TO_ADDR
// dist := tdist ;
34434: LD_ADDR_VAR 0 5
34438: PUSH
34439: LD_VAR 0 6
34443: ST_TO_ADDR
// end ; end ;
34444: GO 34358
34446: POP
34447: POP
// result := hex ;
34448: LD_ADDR_VAR 0 3
34452: PUSH
34453: LD_VAR 0 8
34457: ST_TO_ADDR
// end ;
34458: LD_VAR 0 3
34462: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34467: LD_VAR 0 1
34471: NOT
34472: PUSH
34473: LD_VAR 0 1
34477: PUSH
34478: LD_INT 21
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 23
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PPUSH
34502: CALL_OW 69
34506: IN
34507: NOT
34508: OR
34509: IFFALSE 34513
// exit ;
34511: GO 34560
// for i = 1 to 3 do
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: DOUBLE
34519: LD_INT 1
34521: DEC
34522: ST_TO_ADDR
34523: LD_INT 3
34525: PUSH
34526: FOR_TO
34527: IFFALSE 34558
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34529: LD_VAR 0 1
34533: PPUSH
34534: CALL_OW 250
34538: PPUSH
34539: LD_VAR 0 1
34543: PPUSH
34544: CALL_OW 251
34548: PPUSH
34549: LD_INT 1
34551: PPUSH
34552: CALL_OW 453
34556: GO 34526
34558: POP
34559: POP
// end ;
34560: LD_VAR 0 2
34564: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34565: LD_INT 0
34567: PPUSH
34568: PPUSH
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34573: LD_VAR 0 1
34577: NOT
34578: PUSH
34579: LD_VAR 0 2
34583: NOT
34584: OR
34585: PUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL_OW 314
34595: OR
34596: IFFALSE 34600
// exit ;
34598: GO 35067
// if GetLives ( i ) < 250 then
34600: LD_VAR 0 4
34604: PPUSH
34605: CALL_OW 256
34609: PUSH
34610: LD_INT 250
34612: LESS
34613: IFFALSE 34626
// begin ComAutodestruct ( i ) ;
34615: LD_VAR 0 4
34619: PPUSH
34620: CALL 34463 0 1
// exit ;
34624: GO 35067
// end ; x := GetX ( enemy_unit ) ;
34626: LD_ADDR_VAR 0 7
34630: PUSH
34631: LD_VAR 0 2
34635: PPUSH
34636: CALL_OW 250
34640: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34641: LD_ADDR_VAR 0 8
34645: PUSH
34646: LD_VAR 0 2
34650: PPUSH
34651: CALL_OW 251
34655: ST_TO_ADDR
// if not x or not y then
34656: LD_VAR 0 7
34660: NOT
34661: PUSH
34662: LD_VAR 0 8
34666: NOT
34667: OR
34668: IFFALSE 34672
// exit ;
34670: GO 35067
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34672: LD_ADDR_VAR 0 6
34676: PUSH
34677: LD_VAR 0 7
34681: PPUSH
34682: LD_INT 0
34684: PPUSH
34685: LD_INT 4
34687: PPUSH
34688: CALL_OW 272
34692: PUSH
34693: LD_VAR 0 8
34697: PPUSH
34698: LD_INT 0
34700: PPUSH
34701: LD_INT 4
34703: PPUSH
34704: CALL_OW 273
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_VAR 0 7
34717: PPUSH
34718: LD_INT 1
34720: PPUSH
34721: LD_INT 4
34723: PPUSH
34724: CALL_OW 272
34728: PUSH
34729: LD_VAR 0 8
34733: PPUSH
34734: LD_INT 1
34736: PPUSH
34737: LD_INT 4
34739: PPUSH
34740: CALL_OW 273
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_VAR 0 7
34753: PPUSH
34754: LD_INT 2
34756: PPUSH
34757: LD_INT 4
34759: PPUSH
34760: CALL_OW 272
34764: PUSH
34765: LD_VAR 0 8
34769: PPUSH
34770: LD_INT 2
34772: PPUSH
34773: LD_INT 4
34775: PPUSH
34776: CALL_OW 273
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_VAR 0 7
34789: PPUSH
34790: LD_INT 3
34792: PPUSH
34793: LD_INT 4
34795: PPUSH
34796: CALL_OW 272
34800: PUSH
34801: LD_VAR 0 8
34805: PPUSH
34806: LD_INT 3
34808: PPUSH
34809: LD_INT 4
34811: PPUSH
34812: CALL_OW 273
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_VAR 0 7
34825: PPUSH
34826: LD_INT 4
34828: PPUSH
34829: LD_INT 4
34831: PPUSH
34832: CALL_OW 272
34836: PUSH
34837: LD_VAR 0 8
34841: PPUSH
34842: LD_INT 4
34844: PPUSH
34845: LD_INT 4
34847: PPUSH
34848: CALL_OW 273
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_VAR 0 7
34861: PPUSH
34862: LD_INT 5
34864: PPUSH
34865: LD_INT 4
34867: PPUSH
34868: CALL_OW 272
34872: PUSH
34873: LD_VAR 0 8
34877: PPUSH
34878: LD_INT 5
34880: PPUSH
34881: LD_INT 4
34883: PPUSH
34884: CALL_OW 273
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// for i = tmp downto 1 do
34901: LD_ADDR_VAR 0 4
34905: PUSH
34906: DOUBLE
34907: LD_VAR 0 6
34911: INC
34912: ST_TO_ADDR
34913: LD_INT 1
34915: PUSH
34916: FOR_DOWNTO
34917: IFFALSE 35018
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34919: LD_VAR 0 6
34923: PUSH
34924: LD_VAR 0 4
34928: ARRAY
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: PPUSH
34934: LD_VAR 0 6
34938: PUSH
34939: LD_VAR 0 4
34943: ARRAY
34944: PUSH
34945: LD_INT 2
34947: ARRAY
34948: PPUSH
34949: CALL_OW 488
34953: NOT
34954: PUSH
34955: LD_VAR 0 6
34959: PUSH
34960: LD_VAR 0 4
34964: ARRAY
34965: PUSH
34966: LD_INT 1
34968: ARRAY
34969: PPUSH
34970: LD_VAR 0 6
34974: PUSH
34975: LD_VAR 0 4
34979: ARRAY
34980: PUSH
34981: LD_INT 2
34983: ARRAY
34984: PPUSH
34985: CALL_OW 428
34989: PUSH
34990: LD_INT 0
34992: NONEQUAL
34993: OR
34994: IFFALSE 35016
// tmp := Delete ( tmp , i ) ;
34996: LD_ADDR_VAR 0 6
35000: PUSH
35001: LD_VAR 0 6
35005: PPUSH
35006: LD_VAR 0 4
35010: PPUSH
35011: CALL_OW 3
35015: ST_TO_ADDR
35016: GO 34916
35018: POP
35019: POP
// j := GetClosestHex ( unit , tmp ) ;
35020: LD_ADDR_VAR 0 5
35024: PUSH
35025: LD_VAR 0 1
35029: PPUSH
35030: LD_VAR 0 6
35034: PPUSH
35035: CALL 34311 0 2
35039: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35040: LD_VAR 0 1
35044: PPUSH
35045: LD_VAR 0 5
35049: PUSH
35050: LD_INT 1
35052: ARRAY
35053: PPUSH
35054: LD_VAR 0 5
35058: PUSH
35059: LD_INT 2
35061: ARRAY
35062: PPUSH
35063: CALL_OW 111
// end ;
35067: LD_VAR 0 3
35071: RET
// export function PrepareApemanSoldier ( ) ; begin
35072: LD_INT 0
35074: PPUSH
// uc_nation := 0 ;
35075: LD_ADDR_OWVAR 21
35079: PUSH
35080: LD_INT 0
35082: ST_TO_ADDR
// hc_sex := sex_male ;
35083: LD_ADDR_OWVAR 27
35087: PUSH
35088: LD_INT 1
35090: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35091: LD_ADDR_OWVAR 28
35095: PUSH
35096: LD_INT 15
35098: ST_TO_ADDR
// hc_gallery :=  ;
35099: LD_ADDR_OWVAR 33
35103: PUSH
35104: LD_STRING 
35106: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35107: LD_ADDR_OWVAR 31
35111: PUSH
35112: LD_INT 0
35114: PPUSH
35115: LD_INT 3
35117: PPUSH
35118: CALL_OW 12
35122: PUSH
35123: LD_INT 0
35125: PPUSH
35126: LD_INT 3
35128: PPUSH
35129: CALL_OW 12
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: ST_TO_ADDR
// end ;
35146: LD_VAR 0 1
35150: RET
// export function PrepareApemanEngineer ( ) ; begin
35151: LD_INT 0
35153: PPUSH
// uc_nation := 0 ;
35154: LD_ADDR_OWVAR 21
35158: PUSH
35159: LD_INT 0
35161: ST_TO_ADDR
// hc_sex := sex_male ;
35162: LD_ADDR_OWVAR 27
35166: PUSH
35167: LD_INT 1
35169: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35170: LD_ADDR_OWVAR 28
35174: PUSH
35175: LD_INT 16
35177: ST_TO_ADDR
// hc_gallery :=  ;
35178: LD_ADDR_OWVAR 33
35182: PUSH
35183: LD_STRING 
35185: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35186: LD_ADDR_OWVAR 31
35190: PUSH
35191: LD_INT 0
35193: PPUSH
35194: LD_INT 3
35196: PPUSH
35197: CALL_OW 12
35201: PUSH
35202: LD_INT 0
35204: PPUSH
35205: LD_INT 3
35207: PPUSH
35208: CALL_OW 12
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
// end ;
35225: LD_VAR 0 1
35229: RET
// export function PrepareApeman ( agressivity ) ; begin
35230: LD_INT 0
35232: PPUSH
// uc_side := 0 ;
35233: LD_ADDR_OWVAR 20
35237: PUSH
35238: LD_INT 0
35240: ST_TO_ADDR
// uc_nation := 0 ;
35241: LD_ADDR_OWVAR 21
35245: PUSH
35246: LD_INT 0
35248: ST_TO_ADDR
// hc_sex := sex_male ;
35249: LD_ADDR_OWVAR 27
35253: PUSH
35254: LD_INT 1
35256: ST_TO_ADDR
// hc_class := class_apeman ;
35257: LD_ADDR_OWVAR 28
35261: PUSH
35262: LD_INT 12
35264: ST_TO_ADDR
// hc_gallery :=  ;
35265: LD_ADDR_OWVAR 33
35269: PUSH
35270: LD_STRING 
35272: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35273: LD_ADDR_OWVAR 35
35277: PUSH
35278: LD_VAR 0 1
35282: NEG
35283: PPUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 12
35293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35294: LD_ADDR_OWVAR 31
35298: PUSH
35299: LD_INT 0
35301: PPUSH
35302: LD_INT 3
35304: PPUSH
35305: CALL_OW 12
35309: PUSH
35310: LD_INT 0
35312: PPUSH
35313: LD_INT 3
35315: PPUSH
35316: CALL_OW 12
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// end ;
35333: LD_VAR 0 2
35337: RET
// export function PrepareTiger ( agressivity ) ; begin
35338: LD_INT 0
35340: PPUSH
// uc_side := 0 ;
35341: LD_ADDR_OWVAR 20
35345: PUSH
35346: LD_INT 0
35348: ST_TO_ADDR
// uc_nation := 0 ;
35349: LD_ADDR_OWVAR 21
35353: PUSH
35354: LD_INT 0
35356: ST_TO_ADDR
// hc_class := class_tiger ;
35357: LD_ADDR_OWVAR 28
35361: PUSH
35362: LD_INT 14
35364: ST_TO_ADDR
// hc_gallery :=  ;
35365: LD_ADDR_OWVAR 33
35369: PUSH
35370: LD_STRING 
35372: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35373: LD_ADDR_OWVAR 35
35377: PUSH
35378: LD_VAR 0 1
35382: NEG
35383: PPUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL_OW 12
35393: ST_TO_ADDR
// end ;
35394: LD_VAR 0 2
35398: RET
// export function PrepareEnchidna ( ) ; begin
35399: LD_INT 0
35401: PPUSH
// uc_side := 0 ;
35402: LD_ADDR_OWVAR 20
35406: PUSH
35407: LD_INT 0
35409: ST_TO_ADDR
// uc_nation := 0 ;
35410: LD_ADDR_OWVAR 21
35414: PUSH
35415: LD_INT 0
35417: ST_TO_ADDR
// hc_class := class_baggie ;
35418: LD_ADDR_OWVAR 28
35422: PUSH
35423: LD_INT 13
35425: ST_TO_ADDR
// hc_gallery :=  ;
35426: LD_ADDR_OWVAR 33
35430: PUSH
35431: LD_STRING 
35433: ST_TO_ADDR
// end ;
35434: LD_VAR 0 1
35438: RET
// export function PrepareFrog ( ) ; begin
35439: LD_INT 0
35441: PPUSH
// uc_side := 0 ;
35442: LD_ADDR_OWVAR 20
35446: PUSH
35447: LD_INT 0
35449: ST_TO_ADDR
// uc_nation := 0 ;
35450: LD_ADDR_OWVAR 21
35454: PUSH
35455: LD_INT 0
35457: ST_TO_ADDR
// hc_class := class_frog ;
35458: LD_ADDR_OWVAR 28
35462: PUSH
35463: LD_INT 19
35465: ST_TO_ADDR
// hc_gallery :=  ;
35466: LD_ADDR_OWVAR 33
35470: PUSH
35471: LD_STRING 
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 1
35478: RET
// export function PrepareFish ( ) ; begin
35479: LD_INT 0
35481: PPUSH
// uc_side := 0 ;
35482: LD_ADDR_OWVAR 20
35486: PUSH
35487: LD_INT 0
35489: ST_TO_ADDR
// uc_nation := 0 ;
35490: LD_ADDR_OWVAR 21
35494: PUSH
35495: LD_INT 0
35497: ST_TO_ADDR
// hc_class := class_fish ;
35498: LD_ADDR_OWVAR 28
35502: PUSH
35503: LD_INT 20
35505: ST_TO_ADDR
// hc_gallery :=  ;
35506: LD_ADDR_OWVAR 33
35510: PUSH
35511: LD_STRING 
35513: ST_TO_ADDR
// end ;
35514: LD_VAR 0 1
35518: RET
// export function PrepareBird ( ) ; begin
35519: LD_INT 0
35521: PPUSH
// uc_side := 0 ;
35522: LD_ADDR_OWVAR 20
35526: PUSH
35527: LD_INT 0
35529: ST_TO_ADDR
// uc_nation := 0 ;
35530: LD_ADDR_OWVAR 21
35534: PUSH
35535: LD_INT 0
35537: ST_TO_ADDR
// hc_class := class_phororhacos ;
35538: LD_ADDR_OWVAR 28
35542: PUSH
35543: LD_INT 18
35545: ST_TO_ADDR
// hc_gallery :=  ;
35546: LD_ADDR_OWVAR 33
35550: PUSH
35551: LD_STRING 
35553: ST_TO_ADDR
// end ;
35554: LD_VAR 0 1
35558: RET
// export function PrepareHorse ( ) ; begin
35559: LD_INT 0
35561: PPUSH
// uc_side := 0 ;
35562: LD_ADDR_OWVAR 20
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// uc_nation := 0 ;
35570: LD_ADDR_OWVAR 21
35574: PUSH
35575: LD_INT 0
35577: ST_TO_ADDR
// hc_class := class_horse ;
35578: LD_ADDR_OWVAR 28
35582: PUSH
35583: LD_INT 21
35585: ST_TO_ADDR
// hc_gallery :=  ;
35586: LD_ADDR_OWVAR 33
35590: PUSH
35591: LD_STRING 
35593: ST_TO_ADDR
// end ;
35594: LD_VAR 0 1
35598: RET
// export function PrepareMastodont ( ) ; begin
35599: LD_INT 0
35601: PPUSH
// uc_side := 0 ;
35602: LD_ADDR_OWVAR 20
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// uc_nation := 0 ;
35610: LD_ADDR_OWVAR 21
35614: PUSH
35615: LD_INT 0
35617: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35618: LD_ADDR_OWVAR 37
35622: PUSH
35623: LD_INT 31
35625: ST_TO_ADDR
// vc_control := control_rider ;
35626: LD_ADDR_OWVAR 38
35630: PUSH
35631: LD_INT 4
35633: ST_TO_ADDR
// end ;
35634: LD_VAR 0 1
35638: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
// uc_side = 0 ;
35644: LD_ADDR_OWVAR 20
35648: PUSH
35649: LD_INT 0
35651: ST_TO_ADDR
// uc_nation = 0 ;
35652: LD_ADDR_OWVAR 21
35656: PUSH
35657: LD_INT 0
35659: ST_TO_ADDR
// InitHc_All ( ) ;
35660: CALL_OW 584
// InitVc ;
35664: CALL_OW 20
// if mastodonts then
35668: LD_VAR 0 6
35672: IFFALSE 35739
// for i = 1 to mastodonts do
35674: LD_ADDR_VAR 0 11
35678: PUSH
35679: DOUBLE
35680: LD_INT 1
35682: DEC
35683: ST_TO_ADDR
35684: LD_VAR 0 6
35688: PUSH
35689: FOR_TO
35690: IFFALSE 35737
// begin vc_chassis := 31 ;
35692: LD_ADDR_OWVAR 37
35696: PUSH
35697: LD_INT 31
35699: ST_TO_ADDR
// vc_control := control_rider ;
35700: LD_ADDR_OWVAR 38
35704: PUSH
35705: LD_INT 4
35707: ST_TO_ADDR
// animal := CreateVehicle ;
35708: LD_ADDR_VAR 0 12
35712: PUSH
35713: CALL_OW 45
35717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35718: LD_VAR 0 12
35722: PPUSH
35723: LD_VAR 0 8
35727: PPUSH
35728: LD_INT 0
35730: PPUSH
35731: CALL 37867 0 3
// end ;
35735: GO 35689
35737: POP
35738: POP
// if horses then
35739: LD_VAR 0 5
35743: IFFALSE 35810
// for i = 1 to horses do
35745: LD_ADDR_VAR 0 11
35749: PUSH
35750: DOUBLE
35751: LD_INT 1
35753: DEC
35754: ST_TO_ADDR
35755: LD_VAR 0 5
35759: PUSH
35760: FOR_TO
35761: IFFALSE 35808
// begin hc_class := 21 ;
35763: LD_ADDR_OWVAR 28
35767: PUSH
35768: LD_INT 21
35770: ST_TO_ADDR
// hc_gallery :=  ;
35771: LD_ADDR_OWVAR 33
35775: PUSH
35776: LD_STRING 
35778: ST_TO_ADDR
// animal := CreateHuman ;
35779: LD_ADDR_VAR 0 12
35783: PUSH
35784: CALL_OW 44
35788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35789: LD_VAR 0 12
35793: PPUSH
35794: LD_VAR 0 8
35798: PPUSH
35799: LD_INT 0
35801: PPUSH
35802: CALL 37867 0 3
// end ;
35806: GO 35760
35808: POP
35809: POP
// if birds then
35810: LD_VAR 0 1
35814: IFFALSE 35881
// for i = 1 to birds do
35816: LD_ADDR_VAR 0 11
35820: PUSH
35821: DOUBLE
35822: LD_INT 1
35824: DEC
35825: ST_TO_ADDR
35826: LD_VAR 0 1
35830: PUSH
35831: FOR_TO
35832: IFFALSE 35879
// begin hc_class = 18 ;
35834: LD_ADDR_OWVAR 28
35838: PUSH
35839: LD_INT 18
35841: ST_TO_ADDR
// hc_gallery =  ;
35842: LD_ADDR_OWVAR 33
35846: PUSH
35847: LD_STRING 
35849: ST_TO_ADDR
// animal := CreateHuman ;
35850: LD_ADDR_VAR 0 12
35854: PUSH
35855: CALL_OW 44
35859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35860: LD_VAR 0 12
35864: PPUSH
35865: LD_VAR 0 8
35869: PPUSH
35870: LD_INT 0
35872: PPUSH
35873: CALL 37867 0 3
// end ;
35877: GO 35831
35879: POP
35880: POP
// if tigers then
35881: LD_VAR 0 2
35885: IFFALSE 35969
// for i = 1 to tigers do
35887: LD_ADDR_VAR 0 11
35891: PUSH
35892: DOUBLE
35893: LD_INT 1
35895: DEC
35896: ST_TO_ADDR
35897: LD_VAR 0 2
35901: PUSH
35902: FOR_TO
35903: IFFALSE 35967
// begin hc_class = class_tiger ;
35905: LD_ADDR_OWVAR 28
35909: PUSH
35910: LD_INT 14
35912: ST_TO_ADDR
// hc_gallery =  ;
35913: LD_ADDR_OWVAR 33
35917: PUSH
35918: LD_STRING 
35920: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35921: LD_ADDR_OWVAR 35
35925: PUSH
35926: LD_INT 7
35928: NEG
35929: PPUSH
35930: LD_INT 7
35932: PPUSH
35933: CALL_OW 12
35937: ST_TO_ADDR
// animal := CreateHuman ;
35938: LD_ADDR_VAR 0 12
35942: PUSH
35943: CALL_OW 44
35947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35948: LD_VAR 0 12
35952: PPUSH
35953: LD_VAR 0 8
35957: PPUSH
35958: LD_INT 0
35960: PPUSH
35961: CALL 37867 0 3
// end ;
35965: GO 35902
35967: POP
35968: POP
// if apemans then
35969: LD_VAR 0 3
35973: IFFALSE 36096
// for i = 1 to apemans do
35975: LD_ADDR_VAR 0 11
35979: PUSH
35980: DOUBLE
35981: LD_INT 1
35983: DEC
35984: ST_TO_ADDR
35985: LD_VAR 0 3
35989: PUSH
35990: FOR_TO
35991: IFFALSE 36094
// begin hc_class = class_apeman ;
35993: LD_ADDR_OWVAR 28
35997: PUSH
35998: LD_INT 12
36000: ST_TO_ADDR
// hc_gallery =  ;
36001: LD_ADDR_OWVAR 33
36005: PUSH
36006: LD_STRING 
36008: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36009: LD_ADDR_OWVAR 35
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PPUSH
36018: LD_INT 2
36020: PPUSH
36021: CALL_OW 12
36025: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36026: LD_ADDR_OWVAR 31
36030: PUSH
36031: LD_INT 1
36033: PPUSH
36034: LD_INT 3
36036: PPUSH
36037: CALL_OW 12
36041: PUSH
36042: LD_INT 1
36044: PPUSH
36045: LD_INT 3
36047: PPUSH
36048: CALL_OW 12
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
// animal := CreateHuman ;
36065: LD_ADDR_VAR 0 12
36069: PUSH
36070: CALL_OW 44
36074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36075: LD_VAR 0 12
36079: PPUSH
36080: LD_VAR 0 8
36084: PPUSH
36085: LD_INT 0
36087: PPUSH
36088: CALL 37867 0 3
// end ;
36092: GO 35990
36094: POP
36095: POP
// if enchidnas then
36096: LD_VAR 0 4
36100: IFFALSE 36167
// for i = 1 to enchidnas do
36102: LD_ADDR_VAR 0 11
36106: PUSH
36107: DOUBLE
36108: LD_INT 1
36110: DEC
36111: ST_TO_ADDR
36112: LD_VAR 0 4
36116: PUSH
36117: FOR_TO
36118: IFFALSE 36165
// begin hc_class = 13 ;
36120: LD_ADDR_OWVAR 28
36124: PUSH
36125: LD_INT 13
36127: ST_TO_ADDR
// hc_gallery =  ;
36128: LD_ADDR_OWVAR 33
36132: PUSH
36133: LD_STRING 
36135: ST_TO_ADDR
// animal := CreateHuman ;
36136: LD_ADDR_VAR 0 12
36140: PUSH
36141: CALL_OW 44
36145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36146: LD_VAR 0 12
36150: PPUSH
36151: LD_VAR 0 8
36155: PPUSH
36156: LD_INT 0
36158: PPUSH
36159: CALL 37867 0 3
// end ;
36163: GO 36117
36165: POP
36166: POP
// if fishes then
36167: LD_VAR 0 7
36171: IFFALSE 36238
// for i = 1 to fishes do
36173: LD_ADDR_VAR 0 11
36177: PUSH
36178: DOUBLE
36179: LD_INT 1
36181: DEC
36182: ST_TO_ADDR
36183: LD_VAR 0 7
36187: PUSH
36188: FOR_TO
36189: IFFALSE 36236
// begin hc_class = 20 ;
36191: LD_ADDR_OWVAR 28
36195: PUSH
36196: LD_INT 20
36198: ST_TO_ADDR
// hc_gallery =  ;
36199: LD_ADDR_OWVAR 33
36203: PUSH
36204: LD_STRING 
36206: ST_TO_ADDR
// animal := CreateHuman ;
36207: LD_ADDR_VAR 0 12
36211: PUSH
36212: CALL_OW 44
36216: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36217: LD_VAR 0 12
36221: PPUSH
36222: LD_VAR 0 9
36226: PPUSH
36227: LD_INT 0
36229: PPUSH
36230: CALL 37867 0 3
// end ;
36234: GO 36188
36236: POP
36237: POP
// end ;
36238: LD_VAR 0 10
36242: RET
// export function WantHeal ( sci , unit ) ; begin
36243: LD_INT 0
36245: PPUSH
// if GetTaskList ( sci ) > 0 then
36246: LD_VAR 0 1
36250: PPUSH
36251: CALL_OW 437
36255: PUSH
36256: LD_INT 0
36258: GREATER
36259: IFFALSE 36329
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36261: LD_VAR 0 1
36265: PPUSH
36266: CALL_OW 437
36270: PUSH
36271: LD_INT 1
36273: ARRAY
36274: PUSH
36275: LD_INT 1
36277: ARRAY
36278: PUSH
36279: LD_STRING l
36281: EQUAL
36282: PUSH
36283: LD_VAR 0 1
36287: PPUSH
36288: CALL_OW 437
36292: PUSH
36293: LD_INT 1
36295: ARRAY
36296: PUSH
36297: LD_INT 4
36299: ARRAY
36300: PUSH
36301: LD_VAR 0 2
36305: EQUAL
36306: AND
36307: IFFALSE 36319
// result := true else
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: LD_INT 1
36316: ST_TO_ADDR
36317: GO 36327
// result := false ;
36319: LD_ADDR_VAR 0 3
36323: PUSH
36324: LD_INT 0
36326: ST_TO_ADDR
// end else
36327: GO 36337
// result := false ;
36329: LD_ADDR_VAR 0 3
36333: PUSH
36334: LD_INT 0
36336: ST_TO_ADDR
// end ;
36337: LD_VAR 0 3
36341: RET
// export function HealTarget ( sci ) ; begin
36342: LD_INT 0
36344: PPUSH
// if not sci then
36345: LD_VAR 0 1
36349: NOT
36350: IFFALSE 36354
// exit ;
36352: GO 36419
// result := 0 ;
36354: LD_ADDR_VAR 0 2
36358: PUSH
36359: LD_INT 0
36361: ST_TO_ADDR
// if GetTaskList ( sci ) then
36362: LD_VAR 0 1
36366: PPUSH
36367: CALL_OW 437
36371: IFFALSE 36419
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 437
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PUSH
36387: LD_INT 1
36389: ARRAY
36390: PUSH
36391: LD_STRING l
36393: EQUAL
36394: IFFALSE 36419
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36396: LD_ADDR_VAR 0 2
36400: PUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL_OW 437
36410: PUSH
36411: LD_INT 1
36413: ARRAY
36414: PUSH
36415: LD_INT 4
36417: ARRAY
36418: ST_TO_ADDR
// end ;
36419: LD_VAR 0 2
36423: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36424: LD_INT 0
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
// if not base_units then
36430: LD_VAR 0 1
36434: NOT
36435: IFFALSE 36439
// exit ;
36437: GO 36526
// result := false ;
36439: LD_ADDR_VAR 0 2
36443: PUSH
36444: LD_INT 0
36446: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36447: LD_ADDR_VAR 0 5
36451: PUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: LD_INT 21
36459: PUSH
36460: LD_INT 3
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PPUSH
36467: CALL_OW 72
36471: ST_TO_ADDR
// if not tmp then
36472: LD_VAR 0 5
36476: NOT
36477: IFFALSE 36481
// exit ;
36479: GO 36526
// for i in tmp do
36481: LD_ADDR_VAR 0 3
36485: PUSH
36486: LD_VAR 0 5
36490: PUSH
36491: FOR_IN
36492: IFFALSE 36524
// begin result := EnemyInRange ( i , 22 ) ;
36494: LD_ADDR_VAR 0 2
36498: PUSH
36499: LD_VAR 0 3
36503: PPUSH
36504: LD_INT 22
36506: PPUSH
36507: CALL 34113 0 2
36511: ST_TO_ADDR
// if result then
36512: LD_VAR 0 2
36516: IFFALSE 36522
// exit ;
36518: POP
36519: POP
36520: GO 36526
// end ;
36522: GO 36491
36524: POP
36525: POP
// end ;
36526: LD_VAR 0 2
36530: RET
// export function FilterByTag ( units , tag ) ; begin
36531: LD_INT 0
36533: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_VAR 0 1
36543: PPUSH
36544: LD_INT 120
36546: PUSH
36547: LD_VAR 0 2
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PPUSH
36556: CALL_OW 72
36560: ST_TO_ADDR
// end ;
36561: LD_VAR 0 3
36565: RET
// export function IsDriver ( un ) ; begin
36566: LD_INT 0
36568: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36569: LD_ADDR_VAR 0 2
36573: PUSH
36574: LD_VAR 0 1
36578: PUSH
36579: LD_INT 55
36581: PUSH
36582: EMPTY
36583: LIST
36584: PPUSH
36585: CALL_OW 69
36589: IN
36590: ST_TO_ADDR
// end ;
36591: LD_VAR 0 2
36595: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36596: LD_INT 0
36598: PPUSH
36599: PPUSH
// list := [ ] ;
36600: LD_ADDR_VAR 0 5
36604: PUSH
36605: EMPTY
36606: ST_TO_ADDR
// case d of 0 :
36607: LD_VAR 0 3
36611: PUSH
36612: LD_INT 0
36614: DOUBLE
36615: EQUAL
36616: IFTRUE 36620
36618: GO 36753
36620: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36621: LD_ADDR_VAR 0 5
36625: PUSH
36626: LD_VAR 0 1
36630: PUSH
36631: LD_INT 4
36633: MINUS
36634: PUSH
36635: LD_VAR 0 2
36639: PUSH
36640: LD_INT 4
36642: MINUS
36643: PUSH
36644: LD_INT 2
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: LIST
36651: PUSH
36652: LD_VAR 0 1
36656: PUSH
36657: LD_INT 3
36659: MINUS
36660: PUSH
36661: LD_VAR 0 2
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PUSH
36674: LD_VAR 0 1
36678: PUSH
36679: LD_INT 4
36681: PLUS
36682: PUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_INT 4
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: PUSH
36696: LD_VAR 0 1
36700: PUSH
36701: LD_INT 3
36703: PLUS
36704: PUSH
36705: LD_VAR 0 2
36709: PUSH
36710: LD_INT 3
36712: PLUS
36713: PUSH
36714: LD_INT 5
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: PUSH
36722: LD_VAR 0 1
36726: PUSH
36727: LD_VAR 0 2
36731: PUSH
36732: LD_INT 4
36734: PLUS
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: ST_TO_ADDR
// end ; 1 :
36751: GO 37451
36753: LD_INT 1
36755: DOUBLE
36756: EQUAL
36757: IFTRUE 36761
36759: GO 36894
36761: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36762: LD_ADDR_VAR 0 5
36766: PUSH
36767: LD_VAR 0 1
36771: PUSH
36772: LD_VAR 0 2
36776: PUSH
36777: LD_INT 4
36779: MINUS
36780: PUSH
36781: LD_INT 3
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: LD_VAR 0 1
36793: PUSH
36794: LD_INT 3
36796: MINUS
36797: PUSH
36798: LD_VAR 0 2
36802: PUSH
36803: LD_INT 3
36805: MINUS
36806: PUSH
36807: LD_INT 2
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: PUSH
36815: LD_VAR 0 1
36819: PUSH
36820: LD_INT 4
36822: MINUS
36823: PUSH
36824: LD_VAR 0 2
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: PUSH
36837: LD_VAR 0 1
36841: PUSH
36842: LD_VAR 0 2
36846: PUSH
36847: LD_INT 3
36849: PLUS
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: PUSH
36859: LD_VAR 0 1
36863: PUSH
36864: LD_INT 4
36866: PLUS
36867: PUSH
36868: LD_VAR 0 2
36872: PUSH
36873: LD_INT 4
36875: PLUS
36876: PUSH
36877: LD_INT 5
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// end ; 2 :
36892: GO 37451
36894: LD_INT 2
36896: DOUBLE
36897: EQUAL
36898: IFTRUE 36902
36900: GO 37031
36902: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36903: LD_ADDR_VAR 0 5
36907: PUSH
36908: LD_VAR 0 1
36912: PUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_INT 3
36920: MINUS
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: PUSH
36930: LD_VAR 0 1
36934: PUSH
36935: LD_INT 4
36937: PLUS
36938: PUSH
36939: LD_VAR 0 2
36943: PUSH
36944: LD_INT 4
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: PUSH
36952: LD_VAR 0 1
36956: PUSH
36957: LD_VAR 0 2
36961: PUSH
36962: LD_INT 4
36964: PLUS
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: PUSH
36974: LD_VAR 0 1
36978: PUSH
36979: LD_INT 3
36981: MINUS
36982: PUSH
36983: LD_VAR 0 2
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: PUSH
36996: LD_VAR 0 1
37000: PUSH
37001: LD_INT 4
37003: MINUS
37004: PUSH
37005: LD_VAR 0 2
37009: PUSH
37010: LD_INT 4
37012: MINUS
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// end ; 3 :
37029: GO 37451
37031: LD_INT 3
37033: DOUBLE
37034: EQUAL
37035: IFTRUE 37039
37037: GO 37172
37039: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37040: LD_ADDR_VAR 0 5
37044: PUSH
37045: LD_VAR 0 1
37049: PUSH
37050: LD_INT 3
37052: PLUS
37053: PUSH
37054: LD_VAR 0 2
37058: PUSH
37059: LD_INT 4
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: PUSH
37067: LD_VAR 0 1
37071: PUSH
37072: LD_INT 4
37074: PLUS
37075: PUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_INT 4
37083: PLUS
37084: PUSH
37085: LD_INT 5
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: PUSH
37093: LD_VAR 0 1
37097: PUSH
37098: LD_INT 4
37100: MINUS
37101: PUSH
37102: LD_VAR 0 2
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: PUSH
37115: LD_VAR 0 1
37119: PUSH
37120: LD_VAR 0 2
37124: PUSH
37125: LD_INT 4
37127: MINUS
37128: PUSH
37129: LD_INT 3
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: PUSH
37137: LD_VAR 0 1
37141: PUSH
37142: LD_INT 3
37144: MINUS
37145: PUSH
37146: LD_VAR 0 2
37150: PUSH
37151: LD_INT 3
37153: MINUS
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: ST_TO_ADDR
// end ; 4 :
37170: GO 37451
37172: LD_INT 4
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37180
37178: GO 37313
37180: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37181: LD_ADDR_VAR 0 5
37185: PUSH
37186: LD_VAR 0 1
37190: PUSH
37191: LD_VAR 0 2
37195: PUSH
37196: LD_INT 4
37198: PLUS
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: PUSH
37208: LD_VAR 0 1
37212: PUSH
37213: LD_INT 3
37215: PLUS
37216: PUSH
37217: LD_VAR 0 2
37221: PUSH
37222: LD_INT 3
37224: PLUS
37225: PUSH
37226: LD_INT 5
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: PUSH
37234: LD_VAR 0 1
37238: PUSH
37239: LD_INT 4
37241: PLUS
37242: PUSH
37243: LD_VAR 0 2
37247: PUSH
37248: LD_INT 4
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: PUSH
37256: LD_VAR 0 1
37260: PUSH
37261: LD_VAR 0 2
37265: PUSH
37266: LD_INT 3
37268: MINUS
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: PUSH
37278: LD_VAR 0 1
37282: PUSH
37283: LD_INT 4
37285: MINUS
37286: PUSH
37287: LD_VAR 0 2
37291: PUSH
37292: LD_INT 4
37294: MINUS
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: ST_TO_ADDR
// end ; 5 :
37311: GO 37451
37313: LD_INT 5
37315: DOUBLE
37316: EQUAL
37317: IFTRUE 37321
37319: GO 37450
37321: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37322: LD_ADDR_VAR 0 5
37326: PUSH
37327: LD_VAR 0 1
37331: PUSH
37332: LD_INT 4
37334: MINUS
37335: PUSH
37336: LD_VAR 0 2
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: PUSH
37349: LD_VAR 0 1
37353: PUSH
37354: LD_VAR 0 2
37358: PUSH
37359: LD_INT 4
37361: MINUS
37362: PUSH
37363: LD_INT 3
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: PUSH
37371: LD_VAR 0 1
37375: PUSH
37376: LD_INT 4
37378: PLUS
37379: PUSH
37380: LD_VAR 0 2
37384: PUSH
37385: LD_INT 4
37387: PLUS
37388: PUSH
37389: LD_INT 5
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: PUSH
37397: LD_VAR 0 1
37401: PUSH
37402: LD_INT 3
37404: PLUS
37405: PUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_INT 4
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: PUSH
37419: LD_VAR 0 1
37423: PUSH
37424: LD_VAR 0 2
37428: PUSH
37429: LD_INT 3
37431: PLUS
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
// end ; end ;
37448: GO 37451
37450: POP
// result := list ;
37451: LD_ADDR_VAR 0 4
37455: PUSH
37456: LD_VAR 0 5
37460: ST_TO_ADDR
// end ;
37461: LD_VAR 0 4
37465: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37466: LD_INT 0
37468: PPUSH
37469: PPUSH
37470: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37471: LD_VAR 0 1
37475: NOT
37476: PUSH
37477: LD_VAR 0 2
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: LD_INT 4
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: IN
37500: NOT
37501: OR
37502: IFFALSE 37506
// exit ;
37504: GO 37589
// tmp := [ ] ;
37506: LD_ADDR_VAR 0 5
37510: PUSH
37511: EMPTY
37512: ST_TO_ADDR
// for i in units do
37513: LD_ADDR_VAR 0 4
37517: PUSH
37518: LD_VAR 0 1
37522: PUSH
37523: FOR_IN
37524: IFFALSE 37558
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37526: LD_ADDR_VAR 0 5
37530: PUSH
37531: LD_VAR 0 5
37535: PPUSH
37536: LD_VAR 0 4
37540: PPUSH
37541: LD_VAR 0 2
37545: PPUSH
37546: CALL_OW 259
37550: PPUSH
37551: CALL 38949 0 2
37555: ST_TO_ADDR
37556: GO 37523
37558: POP
37559: POP
// if not tmp then
37560: LD_VAR 0 5
37564: NOT
37565: IFFALSE 37569
// exit ;
37567: GO 37589
// result := SortListByListDesc ( units , tmp ) ;
37569: LD_ADDR_VAR 0 3
37573: PUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: LD_VAR 0 5
37583: PPUSH
37584: CALL_OW 77
37588: ST_TO_ADDR
// end ;
37589: LD_VAR 0 3
37593: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37594: LD_INT 0
37596: PPUSH
37597: PPUSH
37598: PPUSH
// result := false ;
37599: LD_ADDR_VAR 0 3
37603: PUSH
37604: LD_INT 0
37606: ST_TO_ADDR
// if not building then
37607: LD_VAR 0 2
37611: NOT
37612: IFFALSE 37616
// exit ;
37614: GO 37754
// x := GetX ( building ) ;
37616: LD_ADDR_VAR 0 4
37620: PUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: CALL_OW 250
37630: ST_TO_ADDR
// y := GetY ( building ) ;
37631: LD_ADDR_VAR 0 5
37635: PUSH
37636: LD_VAR 0 2
37640: PPUSH
37641: CALL_OW 251
37645: ST_TO_ADDR
// if not x or not y then
37646: LD_VAR 0 4
37650: NOT
37651: PUSH
37652: LD_VAR 0 5
37656: NOT
37657: OR
37658: IFFALSE 37662
// exit ;
37660: GO 37754
// if GetTaskList ( unit ) then
37662: LD_VAR 0 1
37666: PPUSH
37667: CALL_OW 437
37671: IFFALSE 37754
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37673: LD_STRING e
37675: PUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL_OW 437
37685: PUSH
37686: LD_INT 1
37688: ARRAY
37689: PUSH
37690: LD_INT 1
37692: ARRAY
37693: EQUAL
37694: PUSH
37695: LD_VAR 0 4
37699: PUSH
37700: LD_VAR 0 1
37704: PPUSH
37705: CALL_OW 437
37709: PUSH
37710: LD_INT 1
37712: ARRAY
37713: PUSH
37714: LD_INT 2
37716: ARRAY
37717: EQUAL
37718: AND
37719: PUSH
37720: LD_VAR 0 5
37724: PUSH
37725: LD_VAR 0 1
37729: PPUSH
37730: CALL_OW 437
37734: PUSH
37735: LD_INT 1
37737: ARRAY
37738: PUSH
37739: LD_INT 3
37741: ARRAY
37742: EQUAL
37743: AND
37744: IFFALSE 37754
// result := true end ;
37746: LD_ADDR_VAR 0 3
37750: PUSH
37751: LD_INT 1
37753: ST_TO_ADDR
// end ;
37754: LD_VAR 0 3
37758: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37759: LD_INT 0
37761: PPUSH
// result := false ;
37762: LD_ADDR_VAR 0 4
37766: PUSH
37767: LD_INT 0
37769: ST_TO_ADDR
// if GetTaskList ( unit ) then
37770: LD_VAR 0 1
37774: PPUSH
37775: CALL_OW 437
37779: IFFALSE 37862
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37781: LD_STRING M
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 437
37793: PUSH
37794: LD_INT 1
37796: ARRAY
37797: PUSH
37798: LD_INT 1
37800: ARRAY
37801: EQUAL
37802: PUSH
37803: LD_VAR 0 2
37807: PUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 437
37817: PUSH
37818: LD_INT 1
37820: ARRAY
37821: PUSH
37822: LD_INT 2
37824: ARRAY
37825: EQUAL
37826: AND
37827: PUSH
37828: LD_VAR 0 3
37832: PUSH
37833: LD_VAR 0 1
37837: PPUSH
37838: CALL_OW 437
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PUSH
37847: LD_INT 3
37849: ARRAY
37850: EQUAL
37851: AND
37852: IFFALSE 37862
// result := true ;
37854: LD_ADDR_VAR 0 4
37858: PUSH
37859: LD_INT 1
37861: ST_TO_ADDR
// end ; end ;
37862: LD_VAR 0 4
37866: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37867: LD_INT 0
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
// if not unit or not area then
37873: LD_VAR 0 1
37877: NOT
37878: PUSH
37879: LD_VAR 0 2
37883: NOT
37884: OR
37885: IFFALSE 37889
// exit ;
37887: GO 38052
// tmp := AreaToList ( area , i ) ;
37889: LD_ADDR_VAR 0 6
37893: PUSH
37894: LD_VAR 0 2
37898: PPUSH
37899: LD_VAR 0 5
37903: PPUSH
37904: CALL_OW 517
37908: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37909: LD_ADDR_VAR 0 5
37913: PUSH
37914: DOUBLE
37915: LD_INT 1
37917: DEC
37918: ST_TO_ADDR
37919: LD_VAR 0 6
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PUSH
37928: FOR_TO
37929: IFFALSE 38050
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37931: LD_ADDR_VAR 0 7
37935: PUSH
37936: LD_VAR 0 6
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: PUSH
37945: LD_VAR 0 5
37949: ARRAY
37950: PUSH
37951: LD_VAR 0 6
37955: PUSH
37956: LD_INT 2
37958: ARRAY
37959: PUSH
37960: LD_VAR 0 5
37964: ARRAY
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37970: LD_INT 92
37972: PUSH
37973: LD_VAR 0 7
37977: PUSH
37978: LD_INT 1
37980: ARRAY
37981: PUSH
37982: LD_VAR 0 7
37986: PUSH
37987: LD_INT 2
37989: ARRAY
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: PPUSH
38000: CALL_OW 69
38004: PUSH
38005: LD_INT 0
38007: EQUAL
38008: IFFALSE 38048
// begin PlaceUnitArea ( unit , area , mode ) ;
38010: LD_VAR 0 1
38014: PPUSH
38015: LD_VAR 0 2
38019: PPUSH
38020: LD_VAR 0 3
38024: PPUSH
38025: CALL_OW 49
// result := IsPlaced ( unit ) ;
38029: LD_ADDR_VAR 0 4
38033: PUSH
38034: LD_VAR 0 1
38038: PPUSH
38039: CALL_OW 305
38043: ST_TO_ADDR
// exit ;
38044: POP
38045: POP
38046: GO 38052
// end ; end ;
38048: GO 37928
38050: POP
38051: POP
// end ;
38052: LD_VAR 0 4
38056: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38057: LD_INT 0
38059: PPUSH
38060: PPUSH
38061: PPUSH
// if not side or side > 8 then
38062: LD_VAR 0 1
38066: NOT
38067: PUSH
38068: LD_VAR 0 1
38072: PUSH
38073: LD_INT 8
38075: GREATER
38076: OR
38077: IFFALSE 38081
// exit ;
38079: GO 38268
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38081: LD_ADDR_VAR 0 4
38085: PUSH
38086: LD_INT 22
38088: PUSH
38089: LD_VAR 0 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 21
38100: PUSH
38101: LD_INT 3
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PPUSH
38112: CALL_OW 69
38116: ST_TO_ADDR
// if not tmp then
38117: LD_VAR 0 4
38121: NOT
38122: IFFALSE 38126
// exit ;
38124: GO 38268
// enable_addtolog := true ;
38126: LD_ADDR_OWVAR 81
38130: PUSH
38131: LD_INT 1
38133: ST_TO_ADDR
// AddToLog ( [ ) ;
38134: LD_STRING [
38136: PPUSH
38137: CALL_OW 561
// for i in tmp do
38141: LD_ADDR_VAR 0 3
38145: PUSH
38146: LD_VAR 0 4
38150: PUSH
38151: FOR_IN
38152: IFFALSE 38259
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38154: LD_STRING [
38156: PUSH
38157: LD_VAR 0 3
38161: PPUSH
38162: CALL_OW 266
38166: STR
38167: PUSH
38168: LD_STRING , 
38170: STR
38171: PUSH
38172: LD_VAR 0 3
38176: PPUSH
38177: CALL_OW 250
38181: STR
38182: PUSH
38183: LD_STRING , 
38185: STR
38186: PUSH
38187: LD_VAR 0 3
38191: PPUSH
38192: CALL_OW 251
38196: STR
38197: PUSH
38198: LD_STRING , 
38200: STR
38201: PUSH
38202: LD_VAR 0 3
38206: PPUSH
38207: CALL_OW 254
38211: STR
38212: PUSH
38213: LD_STRING , 
38215: STR
38216: PUSH
38217: LD_VAR 0 3
38221: PPUSH
38222: LD_INT 1
38224: PPUSH
38225: CALL_OW 268
38229: STR
38230: PUSH
38231: LD_STRING , 
38233: STR
38234: PUSH
38235: LD_VAR 0 3
38239: PPUSH
38240: LD_INT 2
38242: PPUSH
38243: CALL_OW 268
38247: STR
38248: PUSH
38249: LD_STRING ],
38251: STR
38252: PPUSH
38253: CALL_OW 561
// end ;
38257: GO 38151
38259: POP
38260: POP
// AddToLog ( ]; ) ;
38261: LD_STRING ];
38263: PPUSH
38264: CALL_OW 561
// end ;
38268: LD_VAR 0 2
38272: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38273: LD_INT 0
38275: PPUSH
38276: PPUSH
38277: PPUSH
38278: PPUSH
38279: PPUSH
// if not area or not rate or not max then
38280: LD_VAR 0 1
38284: NOT
38285: PUSH
38286: LD_VAR 0 2
38290: NOT
38291: OR
38292: PUSH
38293: LD_VAR 0 4
38297: NOT
38298: OR
38299: IFFALSE 38303
// exit ;
38301: GO 38492
// while 1 do
38303: LD_INT 1
38305: IFFALSE 38492
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38307: LD_ADDR_VAR 0 9
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_INT 1
38319: PPUSH
38320: CALL_OW 287
38324: PUSH
38325: LD_INT 10
38327: MUL
38328: ST_TO_ADDR
// r := rate / 10 ;
38329: LD_ADDR_VAR 0 7
38333: PUSH
38334: LD_VAR 0 2
38338: PUSH
38339: LD_INT 10
38341: DIVREAL
38342: ST_TO_ADDR
// time := 1 1$00 ;
38343: LD_ADDR_VAR 0 8
38347: PUSH
38348: LD_INT 2100
38350: ST_TO_ADDR
// if amount < min then
38351: LD_VAR 0 9
38355: PUSH
38356: LD_VAR 0 3
38360: LESS
38361: IFFALSE 38379
// r := r * 2 else
38363: LD_ADDR_VAR 0 7
38367: PUSH
38368: LD_VAR 0 7
38372: PUSH
38373: LD_INT 2
38375: MUL
38376: ST_TO_ADDR
38377: GO 38405
// if amount > max then
38379: LD_VAR 0 9
38383: PUSH
38384: LD_VAR 0 4
38388: GREATER
38389: IFFALSE 38405
// r := r / 2 ;
38391: LD_ADDR_VAR 0 7
38395: PUSH
38396: LD_VAR 0 7
38400: PUSH
38401: LD_INT 2
38403: DIVREAL
38404: ST_TO_ADDR
// time := time / r ;
38405: LD_ADDR_VAR 0 8
38409: PUSH
38410: LD_VAR 0 8
38414: PUSH
38415: LD_VAR 0 7
38419: DIVREAL
38420: ST_TO_ADDR
// if time < 0 then
38421: LD_VAR 0 8
38425: PUSH
38426: LD_INT 0
38428: LESS
38429: IFFALSE 38446
// time := time * - 1 ;
38431: LD_ADDR_VAR 0 8
38435: PUSH
38436: LD_VAR 0 8
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: MUL
38445: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38446: LD_VAR 0 8
38450: PUSH
38451: LD_INT 35
38453: PPUSH
38454: LD_INT 875
38456: PPUSH
38457: CALL_OW 12
38461: PLUS
38462: PPUSH
38463: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38467: LD_INT 1
38469: PPUSH
38470: LD_INT 5
38472: PPUSH
38473: CALL_OW 12
38477: PPUSH
38478: LD_VAR 0 1
38482: PPUSH
38483: LD_INT 1
38485: PPUSH
38486: CALL_OW 55
// end ;
38490: GO 38303
// end ;
38492: LD_VAR 0 5
38496: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38497: LD_INT 0
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
// if not turrets or not factories then
38507: LD_VAR 0 1
38511: NOT
38512: PUSH
38513: LD_VAR 0 2
38517: NOT
38518: OR
38519: IFFALSE 38523
// exit ;
38521: GO 38830
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38523: LD_ADDR_VAR 0 10
38527: PUSH
38528: LD_INT 5
38530: PUSH
38531: LD_INT 6
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: LD_INT 4
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: LD_INT 5
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 24
38565: PUSH
38566: LD_INT 25
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 23
38575: PUSH
38576: LD_INT 27
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 42
38589: PUSH
38590: LD_INT 43
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 44
38599: PUSH
38600: LD_INT 46
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 45
38609: PUSH
38610: LD_INT 47
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: ST_TO_ADDR
// result := [ ] ;
38627: LD_ADDR_VAR 0 3
38631: PUSH
38632: EMPTY
38633: ST_TO_ADDR
// for i in turrets do
38634: LD_ADDR_VAR 0 4
38638: PUSH
38639: LD_VAR 0 1
38643: PUSH
38644: FOR_IN
38645: IFFALSE 38828
// begin nat := GetNation ( i ) ;
38647: LD_ADDR_VAR 0 7
38651: PUSH
38652: LD_VAR 0 4
38656: PPUSH
38657: CALL_OW 248
38661: ST_TO_ADDR
// weapon := 0 ;
38662: LD_ADDR_VAR 0 8
38666: PUSH
38667: LD_INT 0
38669: ST_TO_ADDR
// if not nat then
38670: LD_VAR 0 7
38674: NOT
38675: IFFALSE 38679
// continue ;
38677: GO 38644
// for j in list [ nat ] do
38679: LD_ADDR_VAR 0 5
38683: PUSH
38684: LD_VAR 0 10
38688: PUSH
38689: LD_VAR 0 7
38693: ARRAY
38694: PUSH
38695: FOR_IN
38696: IFFALSE 38737
// if GetBWeapon ( i ) = j [ 1 ] then
38698: LD_VAR 0 4
38702: PPUSH
38703: CALL_OW 269
38707: PUSH
38708: LD_VAR 0 5
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: EQUAL
38717: IFFALSE 38735
// begin weapon := j [ 2 ] ;
38719: LD_ADDR_VAR 0 8
38723: PUSH
38724: LD_VAR 0 5
38728: PUSH
38729: LD_INT 2
38731: ARRAY
38732: ST_TO_ADDR
// break ;
38733: GO 38737
// end ;
38735: GO 38695
38737: POP
38738: POP
// if not weapon then
38739: LD_VAR 0 8
38743: NOT
38744: IFFALSE 38748
// continue ;
38746: GO 38644
// for k in factories do
38748: LD_ADDR_VAR 0 6
38752: PUSH
38753: LD_VAR 0 2
38757: PUSH
38758: FOR_IN
38759: IFFALSE 38824
// begin weapons := AvailableWeaponList ( k ) ;
38761: LD_ADDR_VAR 0 9
38765: PUSH
38766: LD_VAR 0 6
38770: PPUSH
38771: CALL_OW 478
38775: ST_TO_ADDR
// if not weapons then
38776: LD_VAR 0 9
38780: NOT
38781: IFFALSE 38785
// continue ;
38783: GO 38758
// if weapon in weapons then
38785: LD_VAR 0 8
38789: PUSH
38790: LD_VAR 0 9
38794: IN
38795: IFFALSE 38822
// begin result := [ i , weapon ] ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_VAR 0 4
38806: PUSH
38807: LD_VAR 0 8
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// exit ;
38816: POP
38817: POP
38818: POP
38819: POP
38820: GO 38830
// end ; end ;
38822: GO 38758
38824: POP
38825: POP
// end ;
38826: GO 38644
38828: POP
38829: POP
// end ;
38830: LD_VAR 0 3
38834: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38835: LD_INT 0
38837: PPUSH
// if not side or side > 8 then
38838: LD_VAR 0 3
38842: NOT
38843: PUSH
38844: LD_VAR 0 3
38848: PUSH
38849: LD_INT 8
38851: GREATER
38852: OR
38853: IFFALSE 38857
// exit ;
38855: GO 38916
// if not range then
38857: LD_VAR 0 4
38861: NOT
38862: IFFALSE 38873
// range := - 12 ;
38864: LD_ADDR_VAR 0 4
38868: PUSH
38869: LD_INT 12
38871: NEG
38872: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38873: LD_VAR 0 1
38877: PPUSH
38878: LD_VAR 0 2
38882: PPUSH
38883: LD_VAR 0 3
38887: PPUSH
38888: LD_VAR 0 4
38892: PPUSH
38893: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38897: LD_VAR 0 1
38901: PPUSH
38902: LD_VAR 0 2
38906: PPUSH
38907: LD_VAR 0 3
38911: PPUSH
38912: CALL_OW 331
// end ;
38916: LD_VAR 0 5
38920: RET
// export function Video ( mode ) ; begin
38921: LD_INT 0
38923: PPUSH
// ingame_video = mode ;
38924: LD_ADDR_OWVAR 52
38928: PUSH
38929: LD_VAR 0 1
38933: ST_TO_ADDR
// interface_hidden = mode ;
38934: LD_ADDR_OWVAR 54
38938: PUSH
38939: LD_VAR 0 1
38943: ST_TO_ADDR
// end ;
38944: LD_VAR 0 2
38948: RET
// export function Join ( array , element ) ; begin
38949: LD_INT 0
38951: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38952: LD_ADDR_VAR 0 3
38956: PUSH
38957: LD_VAR 0 1
38961: PPUSH
38962: LD_VAR 0 1
38966: PUSH
38967: LD_INT 1
38969: PLUS
38970: PPUSH
38971: LD_VAR 0 2
38975: PPUSH
38976: CALL_OW 1
38980: ST_TO_ADDR
// end ;
38981: LD_VAR 0 3
38985: RET
// export function JoinUnion ( array , element ) ; begin
38986: LD_INT 0
38988: PPUSH
// result := array union element ;
38989: LD_ADDR_VAR 0 3
38993: PUSH
38994: LD_VAR 0 1
38998: PUSH
38999: LD_VAR 0 2
39003: UNION
39004: ST_TO_ADDR
// end ;
39005: LD_VAR 0 3
39009: RET
// export function GetBehemoths ( side ) ; begin
39010: LD_INT 0
39012: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39013: LD_ADDR_VAR 0 2
39017: PUSH
39018: LD_INT 22
39020: PUSH
39021: LD_VAR 0 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 31
39032: PUSH
39033: LD_INT 25
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PPUSH
39044: CALL_OW 69
39048: ST_TO_ADDR
// end ;
39049: LD_VAR 0 2
39053: RET
// export function Shuffle ( array ) ; var i , index ; begin
39054: LD_INT 0
39056: PPUSH
39057: PPUSH
39058: PPUSH
// result := [ ] ;
39059: LD_ADDR_VAR 0 2
39063: PUSH
39064: EMPTY
39065: ST_TO_ADDR
// if not array then
39066: LD_VAR 0 1
39070: NOT
39071: IFFALSE 39075
// exit ;
39073: GO 39174
// Randomize ;
39075: CALL_OW 10
// for i = array downto 1 do
39079: LD_ADDR_VAR 0 3
39083: PUSH
39084: DOUBLE
39085: LD_VAR 0 1
39089: INC
39090: ST_TO_ADDR
39091: LD_INT 1
39093: PUSH
39094: FOR_DOWNTO
39095: IFFALSE 39172
// begin index := rand ( 1 , array ) ;
39097: LD_ADDR_VAR 0 4
39101: PUSH
39102: LD_INT 1
39104: PPUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 12
39114: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39115: LD_ADDR_VAR 0 2
39119: PUSH
39120: LD_VAR 0 2
39124: PPUSH
39125: LD_VAR 0 2
39129: PUSH
39130: LD_INT 1
39132: PLUS
39133: PPUSH
39134: LD_VAR 0 1
39138: PUSH
39139: LD_VAR 0 4
39143: ARRAY
39144: PPUSH
39145: CALL_OW 2
39149: ST_TO_ADDR
// array := Delete ( array , index ) ;
39150: LD_ADDR_VAR 0 1
39154: PUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: LD_VAR 0 4
39164: PPUSH
39165: CALL_OW 3
39169: ST_TO_ADDR
// end ;
39170: GO 39094
39172: POP
39173: POP
// end ;
39174: LD_VAR 0 2
39178: RET
// export function GetBaseMaterials ( base ) ; begin
39179: LD_INT 0
39181: PPUSH
// result := [ 0 , 0 , 0 ] ;
39182: LD_ADDR_VAR 0 2
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: ST_TO_ADDR
// if not base then
39201: LD_VAR 0 1
39205: NOT
39206: IFFALSE 39210
// exit ;
39208: GO 39259
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39210: LD_ADDR_VAR 0 2
39214: PUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: LD_INT 1
39222: PPUSH
39223: CALL_OW 275
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: LD_INT 2
39235: PPUSH
39236: CALL_OW 275
39240: PUSH
39241: LD_VAR 0 1
39245: PPUSH
39246: LD_INT 3
39248: PPUSH
39249: CALL_OW 275
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: ST_TO_ADDR
// end ;
39259: LD_VAR 0 2
39263: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39264: LD_INT 0
39266: PPUSH
39267: PPUSH
// result := array ;
39268: LD_ADDR_VAR 0 3
39272: PUSH
39273: LD_VAR 0 1
39277: ST_TO_ADDR
// if size >= result then
39278: LD_VAR 0 2
39282: PUSH
39283: LD_VAR 0 3
39287: GREATEREQUAL
39288: IFFALSE 39292
// exit ;
39290: GO 39342
// if size then
39292: LD_VAR 0 2
39296: IFFALSE 39342
// for i := array downto size do
39298: LD_ADDR_VAR 0 4
39302: PUSH
39303: DOUBLE
39304: LD_VAR 0 1
39308: INC
39309: ST_TO_ADDR
39310: LD_VAR 0 2
39314: PUSH
39315: FOR_DOWNTO
39316: IFFALSE 39340
// result := Delete ( result , result ) ;
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_VAR 0 3
39327: PPUSH
39328: LD_VAR 0 3
39332: PPUSH
39333: CALL_OW 3
39337: ST_TO_ADDR
39338: GO 39315
39340: POP
39341: POP
// end ;
39342: LD_VAR 0 3
39346: RET
// export function ComExit ( unit ) ; var tmp ; begin
39347: LD_INT 0
39349: PPUSH
39350: PPUSH
// if not IsInUnit ( unit ) then
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 310
39360: NOT
39361: IFFALSE 39365
// exit ;
39363: GO 39425
// tmp := IsInUnit ( unit ) ;
39365: LD_ADDR_VAR 0 3
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: CALL_OW 310
39379: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39380: LD_VAR 0 3
39384: PPUSH
39385: CALL_OW 247
39389: PUSH
39390: LD_INT 2
39392: EQUAL
39393: IFFALSE 39406
// ComExitVehicle ( unit ) else
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 121
39404: GO 39415
// ComExitBuilding ( unit ) ;
39406: LD_VAR 0 1
39410: PPUSH
39411: CALL_OW 122
// result := tmp ;
39415: LD_ADDR_VAR 0 2
39419: PUSH
39420: LD_VAR 0 3
39424: ST_TO_ADDR
// end ;
39425: LD_VAR 0 2
39429: RET
// export function ComExitAll ( units ) ; var i ; begin
39430: LD_INT 0
39432: PPUSH
39433: PPUSH
// if not units then
39434: LD_VAR 0 1
39438: NOT
39439: IFFALSE 39443
// exit ;
39441: GO 39469
// for i in units do
39443: LD_ADDR_VAR 0 3
39447: PUSH
39448: LD_VAR 0 1
39452: PUSH
39453: FOR_IN
39454: IFFALSE 39467
// ComExit ( i ) ;
39456: LD_VAR 0 3
39460: PPUSH
39461: CALL 39347 0 1
39465: GO 39453
39467: POP
39468: POP
// end ;
39469: LD_VAR 0 2
39473: RET
// export function ResetHc ; begin
39474: LD_INT 0
39476: PPUSH
// InitHc ;
39477: CALL_OW 19
// hc_importance := 0 ;
39481: LD_ADDR_OWVAR 32
39485: PUSH
39486: LD_INT 0
39488: ST_TO_ADDR
// end ;
39489: LD_VAR 0 1
39493: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39494: LD_INT 0
39496: PPUSH
39497: PPUSH
39498: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39499: LD_ADDR_VAR 0 6
39503: PUSH
39504: LD_VAR 0 1
39508: PUSH
39509: LD_VAR 0 3
39513: PLUS
39514: PUSH
39515: LD_INT 2
39517: DIV
39518: ST_TO_ADDR
// if _x < 0 then
39519: LD_VAR 0 6
39523: PUSH
39524: LD_INT 0
39526: LESS
39527: IFFALSE 39544
// _x := _x * - 1 ;
39529: LD_ADDR_VAR 0 6
39533: PUSH
39534: LD_VAR 0 6
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: MUL
39543: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39544: LD_ADDR_VAR 0 7
39548: PUSH
39549: LD_VAR 0 2
39553: PUSH
39554: LD_VAR 0 4
39558: PLUS
39559: PUSH
39560: LD_INT 2
39562: DIV
39563: ST_TO_ADDR
// if _y < 0 then
39564: LD_VAR 0 7
39568: PUSH
39569: LD_INT 0
39571: LESS
39572: IFFALSE 39589
// _y := _y * - 1 ;
39574: LD_ADDR_VAR 0 7
39578: PUSH
39579: LD_VAR 0 7
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: MUL
39588: ST_TO_ADDR
// result := [ _x , _y ] ;
39589: LD_ADDR_VAR 0 5
39593: PUSH
39594: LD_VAR 0 6
39598: PUSH
39599: LD_VAR 0 7
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: ST_TO_ADDR
// end ;
39608: LD_VAR 0 5
39612: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39613: LD_INT 0
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
// task := GetTaskList ( unit ) ;
39619: LD_ADDR_VAR 0 7
39623: PUSH
39624: LD_VAR 0 1
39628: PPUSH
39629: CALL_OW 437
39633: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39634: LD_VAR 0 7
39638: NOT
39639: PUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: LD_VAR 0 2
39649: PPUSH
39650: CALL_OW 308
39654: NOT
39655: AND
39656: IFFALSE 39660
// exit ;
39658: GO 39778
// if IsInArea ( unit , area ) then
39660: LD_VAR 0 1
39664: PPUSH
39665: LD_VAR 0 2
39669: PPUSH
39670: CALL_OW 308
39674: IFFALSE 39692
// begin ComMoveToArea ( unit , goAway ) ;
39676: LD_VAR 0 1
39680: PPUSH
39681: LD_VAR 0 3
39685: PPUSH
39686: CALL_OW 113
// exit ;
39690: GO 39778
// end ; if task [ 1 ] [ 1 ] <> M then
39692: LD_VAR 0 7
39696: PUSH
39697: LD_INT 1
39699: ARRAY
39700: PUSH
39701: LD_INT 1
39703: ARRAY
39704: PUSH
39705: LD_STRING M
39707: NONEQUAL
39708: IFFALSE 39712
// exit ;
39710: GO 39778
// x := task [ 1 ] [ 2 ] ;
39712: LD_ADDR_VAR 0 5
39716: PUSH
39717: LD_VAR 0 7
39721: PUSH
39722: LD_INT 1
39724: ARRAY
39725: PUSH
39726: LD_INT 2
39728: ARRAY
39729: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39730: LD_ADDR_VAR 0 6
39734: PUSH
39735: LD_VAR 0 7
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PUSH
39744: LD_INT 3
39746: ARRAY
39747: ST_TO_ADDR
// if InArea ( x , y , area ) then
39748: LD_VAR 0 5
39752: PPUSH
39753: LD_VAR 0 6
39757: PPUSH
39758: LD_VAR 0 2
39762: PPUSH
39763: CALL_OW 309
39767: IFFALSE 39778
// ComStop ( unit ) ;
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 141
// end ;
39778: LD_VAR 0 4
39782: RET
// export function Abs ( value ) ; begin
39783: LD_INT 0
39785: PPUSH
// result := value ;
39786: LD_ADDR_VAR 0 2
39790: PUSH
39791: LD_VAR 0 1
39795: ST_TO_ADDR
// if value < 0 then
39796: LD_VAR 0 1
39800: PUSH
39801: LD_INT 0
39803: LESS
39804: IFFALSE 39821
// result := value * - 1 ;
39806: LD_ADDR_VAR 0 2
39810: PUSH
39811: LD_VAR 0 1
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: MUL
39820: ST_TO_ADDR
// end ;
39821: LD_VAR 0 2
39825: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39826: LD_INT 0
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
// if not unit or not building then
39836: LD_VAR 0 1
39840: NOT
39841: PUSH
39842: LD_VAR 0 2
39846: NOT
39847: OR
39848: IFFALSE 39852
// exit ;
39850: GO 40078
// x := GetX ( building ) ;
39852: LD_ADDR_VAR 0 4
39856: PUSH
39857: LD_VAR 0 2
39861: PPUSH
39862: CALL_OW 250
39866: ST_TO_ADDR
// y := GetY ( building ) ;
39867: LD_ADDR_VAR 0 6
39871: PUSH
39872: LD_VAR 0 2
39876: PPUSH
39877: CALL_OW 251
39881: ST_TO_ADDR
// d := GetDir ( building ) ;
39882: LD_ADDR_VAR 0 8
39886: PUSH
39887: LD_VAR 0 2
39891: PPUSH
39892: CALL_OW 254
39896: ST_TO_ADDR
// r := 4 ;
39897: LD_ADDR_VAR 0 9
39901: PUSH
39902: LD_INT 4
39904: ST_TO_ADDR
// for i := 1 to 5 do
39905: LD_ADDR_VAR 0 10
39909: PUSH
39910: DOUBLE
39911: LD_INT 1
39913: DEC
39914: ST_TO_ADDR
39915: LD_INT 5
39917: PUSH
39918: FOR_TO
39919: IFFALSE 40076
// begin _x := ShiftX ( x , d , r + i ) ;
39921: LD_ADDR_VAR 0 5
39925: PUSH
39926: LD_VAR 0 4
39930: PPUSH
39931: LD_VAR 0 8
39935: PPUSH
39936: LD_VAR 0 9
39940: PUSH
39941: LD_VAR 0 10
39945: PLUS
39946: PPUSH
39947: CALL_OW 272
39951: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39952: LD_ADDR_VAR 0 7
39956: PUSH
39957: LD_VAR 0 6
39961: PPUSH
39962: LD_VAR 0 8
39966: PPUSH
39967: LD_VAR 0 9
39971: PUSH
39972: LD_VAR 0 10
39976: PLUS
39977: PPUSH
39978: CALL_OW 273
39982: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39983: LD_VAR 0 5
39987: PPUSH
39988: LD_VAR 0 7
39992: PPUSH
39993: CALL_OW 488
39997: PUSH
39998: LD_VAR 0 5
40002: PPUSH
40003: LD_VAR 0 7
40007: PPUSH
40008: CALL_OW 428
40012: PPUSH
40013: CALL_OW 247
40017: PUSH
40018: LD_INT 3
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: IN
40028: NOT
40029: AND
40030: IFFALSE 40074
// begin ComMoveXY ( unit , _x , _y ) ;
40032: LD_VAR 0 1
40036: PPUSH
40037: LD_VAR 0 5
40041: PPUSH
40042: LD_VAR 0 7
40046: PPUSH
40047: CALL_OW 111
// result := [ _x , _y ] ;
40051: LD_ADDR_VAR 0 3
40055: PUSH
40056: LD_VAR 0 5
40060: PUSH
40061: LD_VAR 0 7
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: ST_TO_ADDR
// exit ;
40070: POP
40071: POP
40072: GO 40078
// end ; end ;
40074: GO 39918
40076: POP
40077: POP
// end ;
40078: LD_VAR 0 3
40082: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40083: LD_INT 0
40085: PPUSH
40086: PPUSH
40087: PPUSH
// result := 0 ;
40088: LD_ADDR_VAR 0 3
40092: PUSH
40093: LD_INT 0
40095: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40096: LD_VAR 0 1
40100: PUSH
40101: LD_INT 0
40103: LESS
40104: PUSH
40105: LD_VAR 0 1
40109: PUSH
40110: LD_INT 8
40112: GREATER
40113: OR
40114: PUSH
40115: LD_VAR 0 2
40119: PUSH
40120: LD_INT 0
40122: LESS
40123: OR
40124: PUSH
40125: LD_VAR 0 2
40129: PUSH
40130: LD_INT 8
40132: GREATER
40133: OR
40134: IFFALSE 40138
// exit ;
40136: GO 40213
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40138: LD_ADDR_VAR 0 4
40142: PUSH
40143: LD_INT 22
40145: PUSH
40146: LD_VAR 0 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PPUSH
40155: CALL_OW 69
40159: PUSH
40160: FOR_IN
40161: IFFALSE 40211
// begin un := UnitShoot ( i ) ;
40163: LD_ADDR_VAR 0 5
40167: PUSH
40168: LD_VAR 0 4
40172: PPUSH
40173: CALL_OW 504
40177: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40178: LD_VAR 0 5
40182: PPUSH
40183: CALL_OW 255
40187: PUSH
40188: LD_VAR 0 1
40192: EQUAL
40193: IFFALSE 40209
// begin result := un ;
40195: LD_ADDR_VAR 0 3
40199: PUSH
40200: LD_VAR 0 5
40204: ST_TO_ADDR
// exit ;
40205: POP
40206: POP
40207: GO 40213
// end ; end ;
40209: GO 40160
40211: POP
40212: POP
// end ;
40213: LD_VAR 0 3
40217: RET
// export function GetCargoBay ( units ) ; begin
40218: LD_INT 0
40220: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40221: LD_ADDR_VAR 0 2
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 34
40236: PUSH
40237: LD_INT 12
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 34
40246: PUSH
40247: LD_INT 51
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 34
40256: PUSH
40257: LD_INT 32
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 34
40266: PUSH
40267: LD_INT 89
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: PPUSH
40281: CALL_OW 72
40285: ST_TO_ADDR
// end ;
40286: LD_VAR 0 2
40290: RET
// export function Negate ( value ) ; begin
40291: LD_INT 0
40293: PPUSH
// result := not value ;
40294: LD_ADDR_VAR 0 2
40298: PUSH
40299: LD_VAR 0 1
40303: NOT
40304: ST_TO_ADDR
// end ;
40305: LD_VAR 0 2
40309: RET
// export function Inc ( value ) ; begin
40310: LD_INT 0
40312: PPUSH
// result := value + 1 ;
40313: LD_ADDR_VAR 0 2
40317: PUSH
40318: LD_VAR 0 1
40322: PUSH
40323: LD_INT 1
40325: PLUS
40326: ST_TO_ADDR
// end ;
40327: LD_VAR 0 2
40331: RET
// export function Dec ( value ) ; begin
40332: LD_INT 0
40334: PPUSH
// result := value - 1 ;
40335: LD_ADDR_VAR 0 2
40339: PUSH
40340: LD_VAR 0 1
40344: PUSH
40345: LD_INT 1
40347: MINUS
40348: ST_TO_ADDR
// end ;
40349: LD_VAR 0 2
40353: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40354: LD_INT 0
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
40363: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40364: LD_VAR 0 1
40368: PPUSH
40369: LD_VAR 0 2
40373: PPUSH
40374: CALL_OW 488
40378: NOT
40379: PUSH
40380: LD_VAR 0 3
40384: PPUSH
40385: LD_VAR 0 4
40389: PPUSH
40390: CALL_OW 488
40394: NOT
40395: OR
40396: IFFALSE 40409
// begin result := - 1 ;
40398: LD_ADDR_VAR 0 5
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: ST_TO_ADDR
// exit ;
40407: GO 40644
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40409: LD_ADDR_VAR 0 12
40413: PUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: LD_VAR 0 2
40423: PPUSH
40424: LD_VAR 0 3
40428: PPUSH
40429: LD_VAR 0 4
40433: PPUSH
40434: CALL 39494 0 4
40438: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40439: LD_ADDR_VAR 0 11
40443: PUSH
40444: LD_VAR 0 1
40448: PPUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: LD_VAR 0 12
40458: PUSH
40459: LD_INT 1
40461: ARRAY
40462: PPUSH
40463: LD_VAR 0 12
40467: PUSH
40468: LD_INT 2
40470: ARRAY
40471: PPUSH
40472: CALL_OW 298
40476: ST_TO_ADDR
// distance := 9999 ;
40477: LD_ADDR_VAR 0 10
40481: PUSH
40482: LD_INT 9999
40484: ST_TO_ADDR
// for i := 0 to 5 do
40485: LD_ADDR_VAR 0 6
40489: PUSH
40490: DOUBLE
40491: LD_INT 0
40493: DEC
40494: ST_TO_ADDR
40495: LD_INT 5
40497: PUSH
40498: FOR_TO
40499: IFFALSE 40642
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40501: LD_ADDR_VAR 0 7
40505: PUSH
40506: LD_VAR 0 1
40510: PPUSH
40511: LD_VAR 0 6
40515: PPUSH
40516: LD_VAR 0 11
40520: PPUSH
40521: CALL_OW 272
40525: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40526: LD_ADDR_VAR 0 8
40530: PUSH
40531: LD_VAR 0 2
40535: PPUSH
40536: LD_VAR 0 6
40540: PPUSH
40541: LD_VAR 0 11
40545: PPUSH
40546: CALL_OW 273
40550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40551: LD_VAR 0 7
40555: PPUSH
40556: LD_VAR 0 8
40560: PPUSH
40561: CALL_OW 488
40565: NOT
40566: IFFALSE 40570
// continue ;
40568: GO 40498
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40570: LD_ADDR_VAR 0 9
40574: PUSH
40575: LD_VAR 0 12
40579: PUSH
40580: LD_INT 1
40582: ARRAY
40583: PPUSH
40584: LD_VAR 0 12
40588: PUSH
40589: LD_INT 2
40591: ARRAY
40592: PPUSH
40593: LD_VAR 0 7
40597: PPUSH
40598: LD_VAR 0 8
40602: PPUSH
40603: CALL_OW 298
40607: ST_TO_ADDR
// if tmp < distance then
40608: LD_VAR 0 9
40612: PUSH
40613: LD_VAR 0 10
40617: LESS
40618: IFFALSE 40640
// begin result := i ;
40620: LD_ADDR_VAR 0 5
40624: PUSH
40625: LD_VAR 0 6
40629: ST_TO_ADDR
// distance := tmp ;
40630: LD_ADDR_VAR 0 10
40634: PUSH
40635: LD_VAR 0 9
40639: ST_TO_ADDR
// end ; end ;
40640: GO 40498
40642: POP
40643: POP
// end ;
40644: LD_VAR 0 5
40648: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40649: LD_INT 0
40651: PPUSH
40652: PPUSH
// if not driver or not IsInUnit ( driver ) then
40653: LD_VAR 0 1
40657: NOT
40658: PUSH
40659: LD_VAR 0 1
40663: PPUSH
40664: CALL_OW 310
40668: NOT
40669: OR
40670: IFFALSE 40674
// exit ;
40672: GO 40764
// vehicle := IsInUnit ( driver ) ;
40674: LD_ADDR_VAR 0 3
40678: PUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 310
40688: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40689: LD_VAR 0 1
40693: PPUSH
40694: LD_STRING \
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: PUSH
40724: LD_STRING E
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_VAR 0 3
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PPUSH
40760: CALL_OW 446
// end ;
40764: LD_VAR 0 2
40768: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40769: LD_INT 0
40771: PPUSH
40772: PPUSH
// if not driver or not IsInUnit ( driver ) then
40773: LD_VAR 0 1
40777: NOT
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 310
40788: NOT
40789: OR
40790: IFFALSE 40794
// exit ;
40792: GO 40884
// vehicle := IsInUnit ( driver ) ;
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: LD_VAR 0 1
40803: PPUSH
40804: CALL_OW 310
40808: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40809: LD_VAR 0 1
40813: PPUSH
40814: LD_STRING \
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: PUSH
40844: LD_STRING E
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_VAR 0 3
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PPUSH
40880: CALL_OW 447
// end ;
40884: LD_VAR 0 2
40888: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40889: LD_INT 0
40891: PPUSH
40892: PPUSH
40893: PPUSH
// tmp := [ ] ;
40894: LD_ADDR_VAR 0 5
40898: PUSH
40899: EMPTY
40900: ST_TO_ADDR
// for i in units do
40901: LD_ADDR_VAR 0 4
40905: PUSH
40906: LD_VAR 0 1
40910: PUSH
40911: FOR_IN
40912: IFFALSE 40950
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40914: LD_ADDR_VAR 0 5
40918: PUSH
40919: LD_VAR 0 5
40923: PPUSH
40924: LD_VAR 0 5
40928: PUSH
40929: LD_INT 1
40931: PLUS
40932: PPUSH
40933: LD_VAR 0 4
40937: PPUSH
40938: CALL_OW 256
40942: PPUSH
40943: CALL_OW 2
40947: ST_TO_ADDR
40948: GO 40911
40950: POP
40951: POP
// if not tmp then
40952: LD_VAR 0 5
40956: NOT
40957: IFFALSE 40961
// exit ;
40959: GO 41009
// if asc then
40961: LD_VAR 0 2
40965: IFFALSE 40989
// result := SortListByListAsc ( units , tmp ) else
40967: LD_ADDR_VAR 0 3
40971: PUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: LD_VAR 0 5
40981: PPUSH
40982: CALL_OW 76
40986: ST_TO_ADDR
40987: GO 41009
// result := SortListByListDesc ( units , tmp ) ;
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: LD_VAR 0 5
41003: PPUSH
41004: CALL_OW 77
41008: ST_TO_ADDR
// end ;
41009: LD_VAR 0 3
41013: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41014: LD_INT 0
41016: PPUSH
41017: PPUSH
// task := GetTaskList ( mech ) ;
41018: LD_ADDR_VAR 0 4
41022: PUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 437
41032: ST_TO_ADDR
// if not task then
41033: LD_VAR 0 4
41037: NOT
41038: IFFALSE 41042
// exit ;
41040: GO 41084
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41042: LD_ADDR_VAR 0 3
41046: PUSH
41047: LD_VAR 0 4
41051: PUSH
41052: LD_INT 1
41054: ARRAY
41055: PUSH
41056: LD_INT 1
41058: ARRAY
41059: PUSH
41060: LD_STRING r
41062: EQUAL
41063: PUSH
41064: LD_VAR 0 4
41068: PUSH
41069: LD_INT 1
41071: ARRAY
41072: PUSH
41073: LD_INT 4
41075: ARRAY
41076: PUSH
41077: LD_VAR 0 2
41081: EQUAL
41082: AND
41083: ST_TO_ADDR
// end ;
41084: LD_VAR 0 3
41088: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41089: LD_INT 0
41091: PPUSH
// SetDir ( unit , d ) ;
41092: LD_VAR 0 1
41096: PPUSH
41097: LD_VAR 0 4
41101: PPUSH
41102: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41106: LD_VAR 0 1
41110: PPUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: LD_VAR 0 5
41125: PPUSH
41126: CALL_OW 48
// end ;
41130: LD_VAR 0 6
41134: RET
// export function ToNaturalNumber ( number ) ; begin
41135: LD_INT 0
41137: PPUSH
// result := number div 1 ;
41138: LD_ADDR_VAR 0 2
41142: PUSH
41143: LD_VAR 0 1
41147: PUSH
41148: LD_INT 1
41150: DIV
41151: ST_TO_ADDR
// if number < 0 then
41152: LD_VAR 0 1
41156: PUSH
41157: LD_INT 0
41159: LESS
41160: IFFALSE 41170
// result := 0 ;
41162: LD_ADDR_VAR 0 2
41166: PUSH
41167: LD_INT 0
41169: ST_TO_ADDR
// end ;
41170: LD_VAR 0 2
41174: RET
// export function SortByClass ( units , class ) ; var un ; begin
41175: LD_INT 0
41177: PPUSH
41178: PPUSH
// if not units or not class then
41179: LD_VAR 0 1
41183: NOT
41184: PUSH
41185: LD_VAR 0 2
41189: NOT
41190: OR
41191: IFFALSE 41195
// exit ;
41193: GO 41290
// result := [ ] ;
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: EMPTY
41201: ST_TO_ADDR
// for un in units do
41202: LD_ADDR_VAR 0 4
41206: PUSH
41207: LD_VAR 0 1
41211: PUSH
41212: FOR_IN
41213: IFFALSE 41288
// if GetClass ( un ) = class then
41215: LD_VAR 0 4
41219: PPUSH
41220: CALL_OW 257
41224: PUSH
41225: LD_VAR 0 2
41229: EQUAL
41230: IFFALSE 41257
// result := Insert ( result , 1 , un ) else
41232: LD_ADDR_VAR 0 3
41236: PUSH
41237: LD_VAR 0 3
41241: PPUSH
41242: LD_INT 1
41244: PPUSH
41245: LD_VAR 0 4
41249: PPUSH
41250: CALL_OW 2
41254: ST_TO_ADDR
41255: GO 41286
// result := Replace ( result , result + 1 , un ) ;
41257: LD_ADDR_VAR 0 3
41261: PUSH
41262: LD_VAR 0 3
41266: PPUSH
41267: LD_VAR 0 3
41271: PUSH
41272: LD_INT 1
41274: PLUS
41275: PPUSH
41276: LD_VAR 0 4
41280: PPUSH
41281: CALL_OW 1
41285: ST_TO_ADDR
41286: GO 41212
41288: POP
41289: POP
// end ;
41290: LD_VAR 0 3
41294: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41295: LD_INT 0
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
// result := [ ] ;
41304: LD_ADDR_VAR 0 4
41308: PUSH
41309: EMPTY
41310: ST_TO_ADDR
// if x - r < 0 then
41311: LD_VAR 0 1
41315: PUSH
41316: LD_VAR 0 3
41320: MINUS
41321: PUSH
41322: LD_INT 0
41324: LESS
41325: IFFALSE 41337
// min_x := 0 else
41327: LD_ADDR_VAR 0 8
41331: PUSH
41332: LD_INT 0
41334: ST_TO_ADDR
41335: GO 41353
// min_x := x - r ;
41337: LD_ADDR_VAR 0 8
41341: PUSH
41342: LD_VAR 0 1
41346: PUSH
41347: LD_VAR 0 3
41351: MINUS
41352: ST_TO_ADDR
// if y - r < 0 then
41353: LD_VAR 0 2
41357: PUSH
41358: LD_VAR 0 3
41362: MINUS
41363: PUSH
41364: LD_INT 0
41366: LESS
41367: IFFALSE 41379
// min_y := 0 else
41369: LD_ADDR_VAR 0 7
41373: PUSH
41374: LD_INT 0
41376: ST_TO_ADDR
41377: GO 41395
// min_y := y - r ;
41379: LD_ADDR_VAR 0 7
41383: PUSH
41384: LD_VAR 0 2
41388: PUSH
41389: LD_VAR 0 3
41393: MINUS
41394: ST_TO_ADDR
// max_x := x + r ;
41395: LD_ADDR_VAR 0 9
41399: PUSH
41400: LD_VAR 0 1
41404: PUSH
41405: LD_VAR 0 3
41409: PLUS
41410: ST_TO_ADDR
// max_y := y + r ;
41411: LD_ADDR_VAR 0 10
41415: PUSH
41416: LD_VAR 0 2
41420: PUSH
41421: LD_VAR 0 3
41425: PLUS
41426: ST_TO_ADDR
// for _x = min_x to max_x do
41427: LD_ADDR_VAR 0 5
41431: PUSH
41432: DOUBLE
41433: LD_VAR 0 8
41437: DEC
41438: ST_TO_ADDR
41439: LD_VAR 0 9
41443: PUSH
41444: FOR_TO
41445: IFFALSE 41546
// for _y = min_y to max_y do
41447: LD_ADDR_VAR 0 6
41451: PUSH
41452: DOUBLE
41453: LD_VAR 0 7
41457: DEC
41458: ST_TO_ADDR
41459: LD_VAR 0 10
41463: PUSH
41464: FOR_TO
41465: IFFALSE 41542
// begin if not ValidHex ( _x , _y ) then
41467: LD_VAR 0 5
41471: PPUSH
41472: LD_VAR 0 6
41476: PPUSH
41477: CALL_OW 488
41481: NOT
41482: IFFALSE 41486
// continue ;
41484: GO 41464
// if GetResourceTypeXY ( _x , _y ) then
41486: LD_VAR 0 5
41490: PPUSH
41491: LD_VAR 0 6
41495: PPUSH
41496: CALL_OW 283
41500: IFFALSE 41540
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41502: LD_ADDR_VAR 0 4
41506: PUSH
41507: LD_VAR 0 4
41511: PPUSH
41512: LD_VAR 0 4
41516: PUSH
41517: LD_INT 1
41519: PLUS
41520: PPUSH
41521: LD_VAR 0 5
41525: PUSH
41526: LD_VAR 0 6
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PPUSH
41535: CALL_OW 1
41539: ST_TO_ADDR
// end ;
41540: GO 41464
41542: POP
41543: POP
41544: GO 41444
41546: POP
41547: POP
// end ;
41548: LD_VAR 0 4
41552: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41553: LD_INT 0
41555: PPUSH
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
// if not units then
41563: LD_VAR 0 1
41567: NOT
41568: IFFALSE 41572
// exit ;
41570: GO 42096
// result := UnitFilter ( units , [ f_ok ] ) ;
41572: LD_ADDR_VAR 0 3
41576: PUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: LD_INT 50
41584: PUSH
41585: EMPTY
41586: LIST
41587: PPUSH
41588: CALL_OW 72
41592: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41593: LD_ADDR_VAR 0 8
41597: PUSH
41598: LD_VAR 0 1
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: PPUSH
41607: CALL_OW 255
41611: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41612: LD_ADDR_VAR 0 10
41616: PUSH
41617: LD_INT 29
41619: PUSH
41620: LD_INT 91
41622: PUSH
41623: LD_INT 49
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: ST_TO_ADDR
// if not result then
41631: LD_VAR 0 3
41635: NOT
41636: IFFALSE 41640
// exit ;
41638: GO 42096
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_INT 81
41647: PUSH
41648: LD_VAR 0 8
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PPUSH
41657: CALL_OW 69
41661: ST_TO_ADDR
// for i in result do
41662: LD_ADDR_VAR 0 4
41666: PUSH
41667: LD_VAR 0 3
41671: PUSH
41672: FOR_IN
41673: IFFALSE 42094
// begin tag := GetTag ( i ) + 1 ;
41675: LD_ADDR_VAR 0 9
41679: PUSH
41680: LD_VAR 0 4
41684: PPUSH
41685: CALL_OW 110
41689: PUSH
41690: LD_INT 1
41692: PLUS
41693: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41694: LD_ADDR_VAR 0 7
41698: PUSH
41699: LD_VAR 0 4
41703: PPUSH
41704: CALL_OW 250
41708: PPUSH
41709: LD_VAR 0 4
41713: PPUSH
41714: CALL_OW 251
41718: PPUSH
41719: LD_INT 6
41721: PPUSH
41722: CALL 41295 0 3
41726: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41727: LD_VAR 0 4
41731: PPUSH
41732: CALL_OW 247
41736: PUSH
41737: LD_INT 2
41739: EQUAL
41740: PUSH
41741: LD_VAR 0 7
41745: AND
41746: PUSH
41747: LD_VAR 0 4
41751: PPUSH
41752: CALL_OW 264
41756: PUSH
41757: LD_VAR 0 10
41761: IN
41762: NOT
41763: AND
41764: IFFALSE 41803
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41766: LD_VAR 0 4
41770: PPUSH
41771: LD_VAR 0 7
41775: PUSH
41776: LD_INT 1
41778: ARRAY
41779: PUSH
41780: LD_INT 1
41782: ARRAY
41783: PPUSH
41784: LD_VAR 0 7
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: PUSH
41793: LD_INT 2
41795: ARRAY
41796: PPUSH
41797: CALL_OW 116
41801: GO 42092
// if path > tag then
41803: LD_VAR 0 2
41807: PUSH
41808: LD_VAR 0 9
41812: GREATER
41813: IFFALSE 42021
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41815: LD_ADDR_VAR 0 6
41819: PUSH
41820: LD_VAR 0 5
41824: PPUSH
41825: LD_INT 91
41827: PUSH
41828: LD_VAR 0 4
41832: PUSH
41833: LD_INT 8
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: PPUSH
41841: CALL_OW 72
41845: ST_TO_ADDR
// if nearEnemy then
41846: LD_VAR 0 6
41850: IFFALSE 41919
// begin if GetWeapon ( i ) = ru_time_lapser then
41852: LD_VAR 0 4
41856: PPUSH
41857: CALL_OW 264
41861: PUSH
41862: LD_INT 49
41864: EQUAL
41865: IFFALSE 41893
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41867: LD_VAR 0 4
41871: PPUSH
41872: LD_VAR 0 6
41876: PPUSH
41877: LD_VAR 0 4
41881: PPUSH
41882: CALL_OW 74
41886: PPUSH
41887: CALL_OW 112
41891: GO 41917
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41893: LD_VAR 0 4
41897: PPUSH
41898: LD_VAR 0 6
41902: PPUSH
41903: LD_VAR 0 4
41907: PPUSH
41908: CALL_OW 74
41912: PPUSH
41913: CALL_OW 115
// end else
41917: GO 42019
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41919: LD_VAR 0 4
41923: PPUSH
41924: LD_VAR 0 2
41928: PUSH
41929: LD_VAR 0 9
41933: ARRAY
41934: PUSH
41935: LD_INT 1
41937: ARRAY
41938: PPUSH
41939: LD_VAR 0 2
41943: PUSH
41944: LD_VAR 0 9
41948: ARRAY
41949: PUSH
41950: LD_INT 2
41952: ARRAY
41953: PPUSH
41954: CALL_OW 297
41958: PUSH
41959: LD_INT 6
41961: GREATER
41962: IFFALSE 42005
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41964: LD_VAR 0 4
41968: PPUSH
41969: LD_VAR 0 2
41973: PUSH
41974: LD_VAR 0 9
41978: ARRAY
41979: PUSH
41980: LD_INT 1
41982: ARRAY
41983: PPUSH
41984: LD_VAR 0 2
41988: PUSH
41989: LD_VAR 0 9
41993: ARRAY
41994: PUSH
41995: LD_INT 2
41997: ARRAY
41998: PPUSH
41999: CALL_OW 114
42003: GO 42019
// SetTag ( i , tag ) ;
42005: LD_VAR 0 4
42009: PPUSH
42010: LD_VAR 0 9
42014: PPUSH
42015: CALL_OW 109
// end else
42019: GO 42092
// if enemy then
42021: LD_VAR 0 5
42025: IFFALSE 42092
// begin if GetWeapon ( i ) = ru_time_lapser then
42027: LD_VAR 0 4
42031: PPUSH
42032: CALL_OW 264
42036: PUSH
42037: LD_INT 49
42039: EQUAL
42040: IFFALSE 42068
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42042: LD_VAR 0 4
42046: PPUSH
42047: LD_VAR 0 5
42051: PPUSH
42052: LD_VAR 0 4
42056: PPUSH
42057: CALL_OW 74
42061: PPUSH
42062: CALL_OW 112
42066: GO 42092
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42068: LD_VAR 0 4
42072: PPUSH
42073: LD_VAR 0 5
42077: PPUSH
42078: LD_VAR 0 4
42082: PPUSH
42083: CALL_OW 74
42087: PPUSH
42088: CALL_OW 115
// end ; end ;
42092: GO 41672
42094: POP
42095: POP
// end ;
42096: LD_VAR 0 3
42100: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42101: LD_INT 0
42103: PPUSH
42104: PPUSH
42105: PPUSH
// if not unit or IsInUnit ( unit ) then
42106: LD_VAR 0 1
42110: NOT
42111: PUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: CALL_OW 310
42121: OR
42122: IFFALSE 42126
// exit ;
42124: GO 42217
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42126: LD_ADDR_VAR 0 4
42130: PUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: CALL_OW 250
42140: PPUSH
42141: LD_VAR 0 2
42145: PPUSH
42146: LD_INT 1
42148: PPUSH
42149: CALL_OW 272
42153: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42154: LD_ADDR_VAR 0 5
42158: PUSH
42159: LD_VAR 0 1
42163: PPUSH
42164: CALL_OW 251
42168: PPUSH
42169: LD_VAR 0 2
42173: PPUSH
42174: LD_INT 1
42176: PPUSH
42177: CALL_OW 273
42181: ST_TO_ADDR
// if ValidHex ( x , y ) then
42182: LD_VAR 0 4
42186: PPUSH
42187: LD_VAR 0 5
42191: PPUSH
42192: CALL_OW 488
42196: IFFALSE 42217
// ComTurnXY ( unit , x , y ) ;
42198: LD_VAR 0 1
42202: PPUSH
42203: LD_VAR 0 4
42207: PPUSH
42208: LD_VAR 0 5
42212: PPUSH
42213: CALL_OW 118
// end ;
42217: LD_VAR 0 3
42221: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42222: LD_INT 0
42224: PPUSH
42225: PPUSH
// result := false ;
42226: LD_ADDR_VAR 0 3
42230: PUSH
42231: LD_INT 0
42233: ST_TO_ADDR
// if not units then
42234: LD_VAR 0 2
42238: NOT
42239: IFFALSE 42243
// exit ;
42241: GO 42288
// for i in units do
42243: LD_ADDR_VAR 0 4
42247: PUSH
42248: LD_VAR 0 2
42252: PUSH
42253: FOR_IN
42254: IFFALSE 42286
// if See ( side , i ) then
42256: LD_VAR 0 1
42260: PPUSH
42261: LD_VAR 0 4
42265: PPUSH
42266: CALL_OW 292
42270: IFFALSE 42284
// begin result := true ;
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_INT 1
42279: ST_TO_ADDR
// exit ;
42280: POP
42281: POP
42282: GO 42288
// end ;
42284: GO 42253
42286: POP
42287: POP
// end ;
42288: LD_VAR 0 3
42292: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42293: LD_INT 0
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
// if not unit or not points then
42299: LD_VAR 0 1
42303: NOT
42304: PUSH
42305: LD_VAR 0 2
42309: NOT
42310: OR
42311: IFFALSE 42315
// exit ;
42313: GO 42405
// dist := 99999 ;
42315: LD_ADDR_VAR 0 5
42319: PUSH
42320: LD_INT 99999
42322: ST_TO_ADDR
// for i in points do
42323: LD_ADDR_VAR 0 4
42327: PUSH
42328: LD_VAR 0 2
42332: PUSH
42333: FOR_IN
42334: IFFALSE 42403
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42336: LD_ADDR_VAR 0 6
42340: PUSH
42341: LD_VAR 0 1
42345: PPUSH
42346: LD_VAR 0 4
42350: PUSH
42351: LD_INT 1
42353: ARRAY
42354: PPUSH
42355: LD_VAR 0 4
42359: PUSH
42360: LD_INT 2
42362: ARRAY
42363: PPUSH
42364: CALL_OW 297
42368: ST_TO_ADDR
// if tmpDist < dist then
42369: LD_VAR 0 6
42373: PUSH
42374: LD_VAR 0 5
42378: LESS
42379: IFFALSE 42401
// begin result := i ;
42381: LD_ADDR_VAR 0 3
42385: PUSH
42386: LD_VAR 0 4
42390: ST_TO_ADDR
// dist := tmpDist ;
42391: LD_ADDR_VAR 0 5
42395: PUSH
42396: LD_VAR 0 6
42400: ST_TO_ADDR
// end ; end ;
42401: GO 42333
42403: POP
42404: POP
// end ;
42405: LD_VAR 0 3
42409: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42410: LD_INT 0
42412: PPUSH
// uc_side := side ;
42413: LD_ADDR_OWVAR 20
42417: PUSH
42418: LD_VAR 0 1
42422: ST_TO_ADDR
// uc_nation := 3 ;
42423: LD_ADDR_OWVAR 21
42427: PUSH
42428: LD_INT 3
42430: ST_TO_ADDR
// vc_chassis := 25 ;
42431: LD_ADDR_OWVAR 37
42435: PUSH
42436: LD_INT 25
42438: ST_TO_ADDR
// vc_engine := engine_siberite ;
42439: LD_ADDR_OWVAR 39
42443: PUSH
42444: LD_INT 3
42446: ST_TO_ADDR
// vc_control := control_computer ;
42447: LD_ADDR_OWVAR 38
42451: PUSH
42452: LD_INT 3
42454: ST_TO_ADDR
// vc_weapon := 59 ;
42455: LD_ADDR_OWVAR 40
42459: PUSH
42460: LD_INT 59
42462: ST_TO_ADDR
// result := CreateVehicle ;
42463: LD_ADDR_VAR 0 5
42467: PUSH
42468: CALL_OW 45
42472: ST_TO_ADDR
// SetDir ( result , d ) ;
42473: LD_VAR 0 5
42477: PPUSH
42478: LD_VAR 0 4
42482: PPUSH
42483: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42487: LD_VAR 0 5
42491: PPUSH
42492: LD_VAR 0 2
42496: PPUSH
42497: LD_VAR 0 3
42501: PPUSH
42502: LD_INT 0
42504: PPUSH
42505: CALL_OW 48
// end ;
42509: LD_VAR 0 5
42513: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42514: LD_INT 0
42516: PPUSH
42517: PPUSH
42518: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42519: LD_ADDR_VAR 0 2
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42542: LD_VAR 0 1
42546: NOT
42547: PUSH
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 264
42557: PUSH
42558: LD_INT 12
42560: PUSH
42561: LD_INT 51
42563: PUSH
42564: LD_INT 32
42566: PUSH
42567: LD_INT 89
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: IN
42576: NOT
42577: OR
42578: IFFALSE 42582
// exit ;
42580: GO 42680
// for i := 1 to 3 do
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: DOUBLE
42588: LD_INT 1
42590: DEC
42591: ST_TO_ADDR
42592: LD_INT 3
42594: PUSH
42595: FOR_TO
42596: IFFALSE 42678
// begin tmp := GetCargo ( cargo , i ) ;
42598: LD_ADDR_VAR 0 4
42602: PUSH
42603: LD_VAR 0 1
42607: PPUSH
42608: LD_VAR 0 3
42612: PPUSH
42613: CALL_OW 289
42617: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42618: LD_ADDR_VAR 0 2
42622: PUSH
42623: LD_VAR 0 2
42627: PPUSH
42628: LD_VAR 0 3
42632: PPUSH
42633: LD_VAR 0 4
42637: PPUSH
42638: CALL_OW 1
42642: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42643: LD_ADDR_VAR 0 2
42647: PUSH
42648: LD_VAR 0 2
42652: PPUSH
42653: LD_INT 4
42655: PPUSH
42656: LD_VAR 0 2
42660: PUSH
42661: LD_INT 4
42663: ARRAY
42664: PUSH
42665: LD_VAR 0 4
42669: PLUS
42670: PPUSH
42671: CALL_OW 1
42675: ST_TO_ADDR
// end ;
42676: GO 42595
42678: POP
42679: POP
// end ;
42680: LD_VAR 0 2
42684: RET
// export function Length ( array ) ; begin
42685: LD_INT 0
42687: PPUSH
// result := array + 0 ;
42688: LD_ADDR_VAR 0 2
42692: PUSH
42693: LD_VAR 0 1
42697: PUSH
42698: LD_INT 0
42700: PLUS
42701: ST_TO_ADDR
// end ;
42702: LD_VAR 0 2
42706: RET
// export function PrepareArray ( array ) ; begin
42707: LD_INT 0
42709: PPUSH
// result := array diff 0 ;
42710: LD_ADDR_VAR 0 2
42714: PUSH
42715: LD_VAR 0 1
42719: PUSH
42720: LD_INT 0
42722: DIFF
42723: ST_TO_ADDR
// if not result [ 1 ] then
42724: LD_VAR 0 2
42728: PUSH
42729: LD_INT 1
42731: ARRAY
42732: NOT
42733: IFFALSE 42753
// result := Delete ( result , 1 ) ;
42735: LD_ADDR_VAR 0 2
42739: PUSH
42740: LD_VAR 0 2
42744: PPUSH
42745: LD_INT 1
42747: PPUSH
42748: CALL_OW 3
42752: ST_TO_ADDR
// end ;
42753: LD_VAR 0 2
42757: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42758: LD_INT 0
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
// sibRocketRange := 25 ;
42764: LD_ADDR_VAR 0 6
42768: PUSH
42769: LD_INT 25
42771: ST_TO_ADDR
// result := false ;
42772: LD_ADDR_VAR 0 4
42776: PUSH
42777: LD_INT 0
42779: ST_TO_ADDR
// for i := 0 to 5 do
42780: LD_ADDR_VAR 0 5
42784: PUSH
42785: DOUBLE
42786: LD_INT 0
42788: DEC
42789: ST_TO_ADDR
42790: LD_INT 5
42792: PUSH
42793: FOR_TO
42794: IFFALSE 42861
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42796: LD_VAR 0 1
42800: PPUSH
42801: LD_VAR 0 5
42805: PPUSH
42806: LD_VAR 0 6
42810: PPUSH
42811: CALL_OW 272
42815: PPUSH
42816: LD_VAR 0 2
42820: PPUSH
42821: LD_VAR 0 5
42825: PPUSH
42826: LD_VAR 0 6
42830: PPUSH
42831: CALL_OW 273
42835: PPUSH
42836: LD_VAR 0 3
42840: PPUSH
42841: CALL_OW 309
42845: IFFALSE 42859
// begin result := true ;
42847: LD_ADDR_VAR 0 4
42851: PUSH
42852: LD_INT 1
42854: ST_TO_ADDR
// exit ;
42855: POP
42856: POP
42857: GO 42863
// end ;
42859: GO 42793
42861: POP
42862: POP
// end ;
42863: LD_VAR 0 4
42867: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42868: LD_INT 0
42870: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42871: LD_VAR 0 1
42875: PPUSH
42876: LD_VAR 0 2
42880: PPUSH
42881: LD_INT 0
42883: PPUSH
42884: LD_INT 0
42886: PPUSH
42887: LD_INT 1
42889: PPUSH
42890: LD_INT 0
42892: PPUSH
42893: CALL_OW 587
// end ;
42897: LD_VAR 0 3
42901: RET
// export function CenterOnNow ( unit ) ; begin
42902: LD_INT 0
42904: PPUSH
// result := IsInUnit ( unit ) ;
42905: LD_ADDR_VAR 0 2
42909: PUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: CALL_OW 310
42919: ST_TO_ADDR
// if not result then
42920: LD_VAR 0 2
42924: NOT
42925: IFFALSE 42937
// result := unit ;
42927: LD_ADDR_VAR 0 2
42931: PUSH
42932: LD_VAR 0 1
42936: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 87
// end ;
42946: LD_VAR 0 2
42950: RET
// export function ComMoveHex ( unit , hex ) ; begin
42951: LD_INT 0
42953: PPUSH
// if not hex then
42954: LD_VAR 0 2
42958: NOT
42959: IFFALSE 42963
// exit ;
42961: GO 43016
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42963: LD_VAR 0 2
42967: PUSH
42968: LD_INT 1
42970: ARRAY
42971: PPUSH
42972: LD_VAR 0 2
42976: PUSH
42977: LD_INT 2
42979: ARRAY
42980: PPUSH
42981: CALL_OW 428
42985: IFFALSE 42989
// exit ;
42987: GO 43016
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42989: LD_VAR 0 1
42993: PPUSH
42994: LD_VAR 0 2
42998: PUSH
42999: LD_INT 1
43001: ARRAY
43002: PPUSH
43003: LD_VAR 0 2
43007: PUSH
43008: LD_INT 2
43010: ARRAY
43011: PPUSH
43012: CALL_OW 111
// end ;
43016: LD_VAR 0 3
43020: RET
