// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 39548 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnitForce ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1865 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 39576 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6705 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 39576 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i , p ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
// p := 0 ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_INT 0
 517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 518: LD_INT 35
 520: PPUSH
 521: CALL_OW 67
// p := Inc ( p ) ;
 525: LD_ADDR_VAR 0 3
 529: PUSH
 530: LD_VAR 0 3
 534: PPUSH
 535: CALL 40937 0 1
 539: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 or p > 20 ;
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 95
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 60
 565: PUSH
 566: EMPTY
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: PUSH
 583: LD_INT 5
 585: GREATEREQUAL
 586: PUSH
 587: LD_VAR 0 3
 591: PUSH
 592: LD_INT 20
 594: GREATER
 595: OR
 596: IFFALSE 518
// wait ( 0 0$1 ) ;
 598: LD_INT 35
 600: PPUSH
 601: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 605: LD_EXP 2
 609: PPUSH
 610: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 614: LD_EXP 3
 618: PPUSH
 619: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 623: LD_INT 10
 625: PPUSH
 626: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 630: LD_EXP 3
 634: PPUSH
 635: LD_INT 52
 637: PPUSH
 638: LD_INT 42
 640: PPUSH
 641: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 645: LD_EXP 2
 649: PPUSH
 650: LD_INT 52
 652: PPUSH
 653: LD_INT 42
 655: PPUSH
 656: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 660: LD_EXP 3
 664: PPUSH
 665: LD_INT 68
 667: PPUSH
 668: LD_INT 55
 670: PPUSH
 671: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 675: LD_EXP 2
 679: PPUSH
 680: LD_INT 68
 682: PPUSH
 683: LD_INT 58
 685: PPUSH
 686: CALL_OW 171
// ComExitVehicle ( people [ 4 ] ) ;
 690: LD_EXP 5
 694: PUSH
 695: LD_INT 4
 697: ARRAY
 698: PPUSH
 699: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 703: LD_EXP 5
 707: PUSH
 708: LD_INT 5
 710: ARRAY
 711: PPUSH
 712: CALL_OW 121
// wait ( 0 0$02 ) ;
 716: LD_INT 70
 718: PPUSH
 719: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 723: LD_EXP 5
 727: PUSH
 728: LD_INT 4
 730: ARRAY
 731: PPUSH
 732: LD_INT 50
 734: PPUSH
 735: LD_INT 40
 737: PPUSH
 738: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 742: LD_EXP 5
 746: PUSH
 747: LD_INT 5
 749: ARRAY
 750: PPUSH
 751: LD_INT 49
 753: PPUSH
 754: LD_INT 59
 756: PPUSH
 757: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 761: LD_INT 35
 763: PPUSH
 764: CALL_OW 67
// if not IsAt ( JMM , 68 , 58 ) and not HasTask ( JMM ) then
 768: LD_EXP 2
 772: PPUSH
 773: LD_INT 68
 775: PPUSH
 776: LD_INT 58
 778: PPUSH
 779: CALL_OW 307
 783: NOT
 784: PUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL_OW 314
 794: NOT
 795: AND
 796: IFFALSE 813
// ComMoveXY ( JMM , 68 , 58 ) ;
 798: LD_EXP 2
 802: PPUSH
 803: LD_INT 68
 805: PPUSH
 806: LD_INT 58
 808: PPUSH
 809: CALL_OW 111
// if not IsAt ( Powell , 68 , 55 ) and not HasTask ( Powell ) then
 813: LD_EXP 3
 817: PPUSH
 818: LD_INT 68
 820: PPUSH
 821: LD_INT 55
 823: PPUSH
 824: CALL_OW 307
 828: NOT
 829: PUSH
 830: LD_EXP 3
 834: PPUSH
 835: CALL_OW 314
 839: NOT
 840: AND
 841: IFFALSE 858
// ComMoveXY ( Powell , 68 , 55 ) ;
 843: LD_EXP 3
 847: PPUSH
 848: LD_INT 68
 850: PPUSH
 851: LD_INT 55
 853: PPUSH
 854: CALL_OW 111
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 858: LD_EXP 3
 862: PPUSH
 863: LD_INT 68
 865: PPUSH
 866: LD_INT 55
 868: PPUSH
 869: CALL_OW 307
 873: PUSH
 874: LD_EXP 2
 878: PPUSH
 879: LD_INT 68
 881: PPUSH
 882: LD_INT 58
 884: PPUSH
 885: CALL_OW 307
 889: AND
 890: IFFALSE 761
// AddComTurnXY ( Powell , 73 , 54 ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_INT 73
 899: PPUSH
 900: LD_INT 54
 902: PPUSH
 903: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 907: LD_EXP 2
 911: PPUSH
 912: LD_INT 74
 914: PPUSH
 915: LD_INT 58
 917: PPUSH
 918: CALL_OW 178
// CenterNowOnUnits ( JMM ) ;
 922: LD_EXP 2
 926: PPUSH
 927: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 931: LD_EXP 3
 935: PPUSH
 936: LD_STRING D1-Pow-1
 938: PPUSH
 939: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 943: LD_EXP 2
 947: PPUSH
 948: LD_STRING D1-JMM-1
 950: PPUSH
 951: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 955: LD_EXP 3
 959: PPUSH
 960: LD_STRING D1-Pow-2
 962: PPUSH
 963: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 967: LD_EXP 2
 971: PPUSH
 972: LD_EXP 3
 976: PPUSH
 977: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 981: LD_EXP 2
 985: PPUSH
 986: LD_STRING D1-JMM-2
 988: PPUSH
 989: CALL_OW 88
// wait ( 0 0$01 ) ;
 993: LD_INT 35
 995: PPUSH
 996: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
1000: LD_EXP 3
1004: PPUSH
1005: LD_EXP 2
1009: PPUSH
1010: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
1014: LD_EXP 3
1018: PPUSH
1019: LD_STRING D1-Pow-3
1021: PPUSH
1022: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_STRING D1-JMM-3
1033: PPUSH
1034: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
1038: LD_EXP 3
1042: PPUSH
1043: LD_STRING D1-Pow-4
1045: PPUSH
1046: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
1050: LD_EXP 2
1054: PPUSH
1055: LD_STRING D1-JMM-4
1057: PPUSH
1058: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
1062: LD_EXP 3
1066: PPUSH
1067: LD_STRING D1-Pow-5
1069: PPUSH
1070: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1074: LD_EXP 2
1078: PPUSH
1079: LD_STRING D1-JMM-5
1081: PPUSH
1082: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
1086: LD_EXP 3
1090: PPUSH
1091: LD_STRING D1-Pow-6
1093: PPUSH
1094: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
1098: LD_EXP 2
1102: PPUSH
1103: LD_STRING D1-JMM-6
1105: PPUSH
1106: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
1110: LD_EXP 3
1114: PPUSH
1115: LD_STRING D1-Pow-7
1117: PPUSH
1118: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
1122: LD_EXP 2
1126: PPUSH
1127: LD_STRING D1-JMM-7
1129: PPUSH
1130: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1134: LD_EXP 3
1138: PPUSH
1139: LD_INT 68
1141: PPUSH
1142: LD_INT 57
1144: PPUSH
1145: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1156: LD_EXP 3
1160: PPUSH
1161: LD_INT 68
1163: PPUSH
1164: LD_INT 57
1166: PPUSH
1167: CALL_OW 307
1171: IFFALSE 1149
// ComTurnUnit ( Powell , JMM ) ;
1173: LD_EXP 3
1177: PPUSH
1178: LD_EXP 2
1182: PPUSH
1183: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1187: LD_EXP 3
1191: PPUSH
1192: LD_STRING D1-Pow-8
1194: PPUSH
1195: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1199: LD_INT 18
1201: PPUSH
1202: CALL_OW 67
// Query ( QLetter ) ;
1206: LD_STRING QLetter
1208: PPUSH
1209: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1213: LD_EXP 3
1217: PPUSH
1218: LD_STRING D1aa-Pow-1
1220: PPUSH
1221: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1225: LD_EXP 2
1229: PPUSH
1230: LD_STRING D1aa-JMM-1
1232: PPUSH
1233: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1237: LD_EXP 3
1241: PPUSH
1242: LD_STRING D1aa-Pow-2
1244: PPUSH
1245: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1249: LD_EXP 2
1253: PPUSH
1254: LD_STRING D1aa-JMM-2
1256: PPUSH
1257: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1261: LD_EXP 3
1265: PPUSH
1266: LD_STRING D1aa-Pow-3
1268: PPUSH
1269: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1273: LD_EXP 2
1277: PPUSH
1278: LD_STRING D1aa-JMM-3
1280: PPUSH
1281: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1285: LD_EXP 3
1289: PPUSH
1290: LD_INT 69
1292: PPUSH
1293: LD_INT 55
1295: PPUSH
1296: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1300: LD_INT 35
1302: PPUSH
1303: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1307: LD_EXP 3
1311: PPUSH
1312: LD_INT 69
1314: PPUSH
1315: LD_INT 55
1317: PPUSH
1318: CALL_OW 307
1322: IFFALSE 1300
// ComTurnXY ( Powell , 71 , 55 ) ;
1324: LD_EXP 3
1328: PPUSH
1329: LD_INT 71
1331: PPUSH
1332: LD_INT 55
1334: PPUSH
1335: CALL_OW 118
// wait ( 0 0$2 ) ;
1339: LD_INT 70
1341: PPUSH
1342: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1346: LD_EXP 3
1350: PPUSH
1351: LD_STRING D1aa-Pow-4
1353: PPUSH
1354: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1358: LD_EXP 2
1362: PPUSH
1363: LD_STRING D1aa-JMM-4
1365: PPUSH
1366: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1370: LD_EXP 3
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1391: LD_EXP 3
1395: PPUSH
1396: LD_STRING D1aa-Pow-5
1398: PPUSH
1399: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1403: LD_EXP 2
1407: PPUSH
1408: LD_STRING D1aa-JMM-5
1410: PPUSH
1411: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1415: LD_EXP 3
1419: PPUSH
1420: LD_STRING D1aa-Pow-6
1422: PPUSH
1423: CALL_OW 88
// wait ( 0 0$1 ) ;
1427: LD_INT 35
1429: PPUSH
1430: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1434: LD_EXP 2
1438: PPUSH
1439: LD_EXP 4
1443: PUSH
1444: LD_INT 3
1446: ARRAY
1447: PPUSH
1448: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1452: LD_INT 18
1454: PPUSH
1455: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1459: LD_EXP 3
1463: PPUSH
1464: LD_EXP 4
1468: PUSH
1469: LD_INT 2
1471: ARRAY
1472: PPUSH
1473: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1477: LD_INT 35
1479: PPUSH
1480: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1484: LD_EXP 3
1488: PPUSH
1489: LD_INT 3
1491: PPUSH
1492: CALL_OW 308
1496: IFFALSE 1477
// CenterOnXY ( 42 , 40 ) ;
1498: LD_INT 42
1500: PPUSH
1501: LD_INT 40
1503: PPUSH
1504: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1508: LD_EXP 5
1512: PUSH
1513: LD_INT 4
1515: ARRAY
1516: PPUSH
1517: LD_EXP 4
1521: PUSH
1522: LD_INT 4
1524: ARRAY
1525: PPUSH
1526: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 5
1537: ARRAY
1538: PPUSH
1539: LD_EXP 4
1543: PUSH
1544: LD_INT 5
1546: ARRAY
1547: PPUSH
1548: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1552: LD_INT 35
1554: PPUSH
1555: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1559: LD_INT 22
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 56
1571: PUSH
1572: EMPTY
1573: LIST
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: PPUSH
1590: CALL_OW 69
1594: PUSH
1595: LD_INT 0
1597: EQUAL
1598: IFFALSE 1552
// CenterOnXY ( 36 , 35 ) ;
1600: LD_INT 36
1602: PPUSH
1603: LD_INT 35
1605: PPUSH
1606: CALL_OW 84
// for i := 1 to 5 do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: DOUBLE
1616: LD_INT 1
1618: DEC
1619: ST_TO_ADDR
1620: LD_INT 5
1622: PUSH
1623: FOR_TO
1624: IFFALSE 1656
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1626: LD_EXP 4
1630: PUSH
1631: LD_VAR 0 2
1635: ARRAY
1636: PPUSH
1637: LD_INT 11
1639: PPUSH
1640: LD_INT 18
1642: PPUSH
1643: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1647: LD_INT 10
1649: PPUSH
1650: CALL_OW 67
// end ;
1654: GO 1623
1656: POP
1657: POP
// wait ( 0 0$2 ) ;
1658: LD_INT 70
1660: PPUSH
1661: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1665: LD_STRING 1
1667: PPUSH
1668: LD_STRING %_cont
1670: PPUSH
1671: CALL_OW 340
// end ;
1675: LD_VAR 0 1
1679: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1680: LD_EXP 5
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: PPUSH
1689: LD_INT 50
1691: PPUSH
1692: LD_INT 40
1694: PPUSH
1695: CALL_OW 307
1699: IFFALSE 1723
1701: GO 1703
1703: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1704: LD_EXP 5
1708: PUSH
1709: LD_INT 4
1711: ARRAY
1712: PPUSH
1713: LD_INT 51
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: CALL_OW 118
1723: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1724: LD_EXP 5
1728: PUSH
1729: LD_INT 5
1731: ARRAY
1732: PPUSH
1733: LD_INT 49
1735: PPUSH
1736: LD_INT 59
1738: PPUSH
1739: CALL_OW 307
1743: IFFALSE 1767
1745: GO 1747
1747: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1748: LD_EXP 5
1752: PUSH
1753: LD_INT 5
1755: ARRAY
1756: PPUSH
1757: LD_INT 51
1759: PPUSH
1760: LD_INT 67
1762: PPUSH
1763: CALL_OW 118
1767: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1768: LD_STRING 1
1770: PPUSH
1771: LD_STRING %_cont
1773: PPUSH
1774: CALL_OW 340
// end ; end_of_file
1778: PPOPN 1
1780: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1781: LD_INT 0
1783: PPUSH
1784: PPUSH
// if exist_mode then
1785: LD_VAR 0 2
1789: IFFALSE 1835
// begin unit := CreateCharacter ( prefix & ident ) ;
1791: LD_ADDR_VAR 0 5
1795: PUSH
1796: LD_VAR 0 3
1800: PUSH
1801: LD_VAR 0 1
1805: STR
1806: PPUSH
1807: CALL_OW 34
1811: ST_TO_ADDR
// if unit then
1812: LD_VAR 0 5
1816: IFFALSE 1833
// DeleteCharacters ( prefix & ident ) ;
1818: LD_VAR 0 3
1822: PUSH
1823: LD_VAR 0 1
1827: STR
1828: PPUSH
1829: CALL_OW 40
// end else
1833: GO 1850
// unit := NewCharacter ( ident ) ;
1835: LD_ADDR_VAR 0 5
1839: PUSH
1840: LD_VAR 0 1
1844: PPUSH
1845: CALL_OW 25
1849: ST_TO_ADDR
// result := unit ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: LD_VAR 0 5
1859: ST_TO_ADDR
// end ;
1860: LD_VAR 0 4
1864: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1865: LD_INT 0
1867: PPUSH
1868: PPUSH
// if exist_mode then
1869: LD_VAR 0 2
1873: IFFALSE 1898
// unit := CreateCharacter ( prefix & ident ) else
1875: LD_ADDR_VAR 0 5
1879: PUSH
1880: LD_VAR 0 3
1884: PUSH
1885: LD_VAR 0 1
1889: STR
1890: PPUSH
1891: CALL_OW 34
1895: ST_TO_ADDR
1896: GO 1913
// unit := NewCharacter ( ident ) ;
1898: LD_ADDR_VAR 0 5
1902: PUSH
1903: LD_VAR 0 1
1907: PPUSH
1908: CALL_OW 25
1912: ST_TO_ADDR
// result := unit ;
1913: LD_ADDR_VAR 0 4
1917: PUSH
1918: LD_VAR 0 5
1922: ST_TO_ADDR
// end ;
1923: LD_VAR 0 4
1927: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1928: LD_INT 0
1930: PPUSH
1931: PPUSH
// if not side or not nation then
1932: LD_VAR 0 1
1936: NOT
1937: PUSH
1938: LD_VAR 0 2
1942: NOT
1943: OR
1944: IFFALSE 1948
// exit ;
1946: GO 2716
// case nation of nation_american :
1948: LD_VAR 0 2
1952: PUSH
1953: LD_INT 1
1955: DOUBLE
1956: EQUAL
1957: IFTRUE 1961
1959: GO 2175
1961: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1962: LD_ADDR_VAR 0 4
1966: PUSH
1967: LD_INT 35
1969: PUSH
1970: LD_INT 45
1972: PUSH
1973: LD_INT 46
1975: PUSH
1976: LD_INT 47
1978: PUSH
1979: LD_INT 82
1981: PUSH
1982: LD_INT 83
1984: PUSH
1985: LD_INT 84
1987: PUSH
1988: LD_INT 85
1990: PUSH
1991: LD_INT 86
1993: PUSH
1994: LD_INT 1
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 6
2002: PUSH
2003: LD_INT 15
2005: PUSH
2006: LD_INT 16
2008: PUSH
2009: LD_INT 7
2011: PUSH
2012: LD_INT 12
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 10
2020: PUSH
2021: LD_INT 14
2023: PUSH
2024: LD_INT 20
2026: PUSH
2027: LD_INT 21
2029: PUSH
2030: LD_INT 22
2032: PUSH
2033: LD_INT 25
2035: PUSH
2036: LD_INT 32
2038: PUSH
2039: LD_INT 27
2041: PUSH
2042: LD_INT 36
2044: PUSH
2045: LD_INT 69
2047: PUSH
2048: LD_INT 39
2050: PUSH
2051: LD_INT 34
2053: PUSH
2054: LD_INT 40
2056: PUSH
2057: LD_INT 48
2059: PUSH
2060: LD_INT 49
2062: PUSH
2063: LD_INT 50
2065: PUSH
2066: LD_INT 51
2068: PUSH
2069: LD_INT 52
2071: PUSH
2072: LD_INT 53
2074: PUSH
2075: LD_INT 54
2077: PUSH
2078: LD_INT 55
2080: PUSH
2081: LD_INT 56
2083: PUSH
2084: LD_INT 57
2086: PUSH
2087: LD_INT 58
2089: PUSH
2090: LD_INT 59
2092: PUSH
2093: LD_INT 60
2095: PUSH
2096: LD_INT 61
2098: PUSH
2099: LD_INT 62
2101: PUSH
2102: LD_INT 80
2104: PUSH
2105: LD_INT 82
2107: PUSH
2108: LD_INT 83
2110: PUSH
2111: LD_INT 84
2113: PUSH
2114: LD_INT 85
2116: PUSH
2117: LD_INT 86
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: ST_TO_ADDR
2173: GO 2640
2175: LD_INT 2
2177: DOUBLE
2178: EQUAL
2179: IFTRUE 2183
2181: GO 2409
2183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2184: LD_ADDR_VAR 0 4
2188: PUSH
2189: LD_INT 35
2191: PUSH
2192: LD_INT 45
2194: PUSH
2195: LD_INT 46
2197: PUSH
2198: LD_INT 47
2200: PUSH
2201: LD_INT 82
2203: PUSH
2204: LD_INT 83
2206: PUSH
2207: LD_INT 84
2209: PUSH
2210: LD_INT 85
2212: PUSH
2213: LD_INT 87
2215: PUSH
2216: LD_INT 70
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 11
2224: PUSH
2225: LD_INT 3
2227: PUSH
2228: LD_INT 4
2230: PUSH
2231: LD_INT 5
2233: PUSH
2234: LD_INT 6
2236: PUSH
2237: LD_INT 15
2239: PUSH
2240: LD_INT 18
2242: PUSH
2243: LD_INT 7
2245: PUSH
2246: LD_INT 17
2248: PUSH
2249: LD_INT 8
2251: PUSH
2252: LD_INT 20
2254: PUSH
2255: LD_INT 21
2257: PUSH
2258: LD_INT 22
2260: PUSH
2261: LD_INT 72
2263: PUSH
2264: LD_INT 26
2266: PUSH
2267: LD_INT 69
2269: PUSH
2270: LD_INT 39
2272: PUSH
2273: LD_INT 40
2275: PUSH
2276: LD_INT 41
2278: PUSH
2279: LD_INT 42
2281: PUSH
2282: LD_INT 43
2284: PUSH
2285: LD_INT 48
2287: PUSH
2288: LD_INT 49
2290: PUSH
2291: LD_INT 50
2293: PUSH
2294: LD_INT 51
2296: PUSH
2297: LD_INT 52
2299: PUSH
2300: LD_INT 53
2302: PUSH
2303: LD_INT 54
2305: PUSH
2306: LD_INT 55
2308: PUSH
2309: LD_INT 56
2311: PUSH
2312: LD_INT 60
2314: PUSH
2315: LD_INT 61
2317: PUSH
2318: LD_INT 62
2320: PUSH
2321: LD_INT 66
2323: PUSH
2324: LD_INT 67
2326: PUSH
2327: LD_INT 68
2329: PUSH
2330: LD_INT 81
2332: PUSH
2333: LD_INT 82
2335: PUSH
2336: LD_INT 83
2338: PUSH
2339: LD_INT 84
2341: PUSH
2342: LD_INT 85
2344: PUSH
2345: LD_INT 87
2347: PUSH
2348: LD_INT 88
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: ST_TO_ADDR
2407: GO 2640
2409: LD_INT 3
2411: DOUBLE
2412: EQUAL
2413: IFTRUE 2417
2415: GO 2639
2417: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_INT 46
2425: PUSH
2426: LD_INT 47
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: LD_INT 2
2434: PUSH
2435: LD_INT 82
2437: PUSH
2438: LD_INT 83
2440: PUSH
2441: LD_INT 84
2443: PUSH
2444: LD_INT 85
2446: PUSH
2447: LD_INT 86
2449: PUSH
2450: LD_INT 11
2452: PUSH
2453: LD_INT 9
2455: PUSH
2456: LD_INT 20
2458: PUSH
2459: LD_INT 19
2461: PUSH
2462: LD_INT 21
2464: PUSH
2465: LD_INT 24
2467: PUSH
2468: LD_INT 22
2470: PUSH
2471: LD_INT 25
2473: PUSH
2474: LD_INT 28
2476: PUSH
2477: LD_INT 29
2479: PUSH
2480: LD_INT 30
2482: PUSH
2483: LD_INT 31
2485: PUSH
2486: LD_INT 37
2488: PUSH
2489: LD_INT 38
2491: PUSH
2492: LD_INT 32
2494: PUSH
2495: LD_INT 27
2497: PUSH
2498: LD_INT 33
2500: PUSH
2501: LD_INT 69
2503: PUSH
2504: LD_INT 39
2506: PUSH
2507: LD_INT 34
2509: PUSH
2510: LD_INT 40
2512: PUSH
2513: LD_INT 71
2515: PUSH
2516: LD_INT 23
2518: PUSH
2519: LD_INT 44
2521: PUSH
2522: LD_INT 48
2524: PUSH
2525: LD_INT 49
2527: PUSH
2528: LD_INT 50
2530: PUSH
2531: LD_INT 51
2533: PUSH
2534: LD_INT 52
2536: PUSH
2537: LD_INT 53
2539: PUSH
2540: LD_INT 54
2542: PUSH
2543: LD_INT 55
2545: PUSH
2546: LD_INT 56
2548: PUSH
2549: LD_INT 57
2551: PUSH
2552: LD_INT 58
2554: PUSH
2555: LD_INT 59
2557: PUSH
2558: LD_INT 63
2560: PUSH
2561: LD_INT 64
2563: PUSH
2564: LD_INT 65
2566: PUSH
2567: LD_INT 82
2569: PUSH
2570: LD_INT 83
2572: PUSH
2573: LD_INT 84
2575: PUSH
2576: LD_INT 85
2578: PUSH
2579: LD_INT 86
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: ST_TO_ADDR
2637: GO 2640
2639: POP
// if state > - 1 and state < 3 then
2640: LD_VAR 0 3
2644: PUSH
2645: LD_INT 1
2647: NEG
2648: GREATER
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 3
2657: LESS
2658: AND
2659: IFFALSE 2716
// for i in result do
2661: LD_ADDR_VAR 0 5
2665: PUSH
2666: LD_VAR 0 4
2670: PUSH
2671: FOR_IN
2672: IFFALSE 2714
// if GetTech ( i , side ) <> state then
2674: LD_VAR 0 5
2678: PPUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_VAR 0 3
2693: NONEQUAL
2694: IFFALSE 2712
// result := result diff i ;
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: LD_VAR 0 4
2705: PUSH
2706: LD_VAR 0 5
2710: DIFF
2711: ST_TO_ADDR
2712: GO 2671
2714: POP
2715: POP
// end ;
2716: LD_VAR 0 4
2720: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
// result := true ;
2726: LD_ADDR_VAR 0 3
2730: PUSH
2731: LD_INT 1
2733: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2734: LD_ADDR_VAR 0 5
2738: PUSH
2739: LD_VAR 0 2
2743: PPUSH
2744: CALL_OW 480
2748: ST_TO_ADDR
// if not tmp then
2749: LD_VAR 0 5
2753: NOT
2754: IFFALSE 2758
// exit ;
2756: GO 2807
// for i in tmp do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 5
2767: PUSH
2768: FOR_IN
2769: IFFALSE 2805
// if GetTech ( i , side ) <> state_researched then
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 321
2785: PUSH
2786: LD_INT 2
2788: NONEQUAL
2789: IFFALSE 2803
// begin result := false ;
2791: LD_ADDR_VAR 0 3
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// exit ;
2799: POP
2800: POP
2801: GO 2807
// end ;
2803: GO 2768
2805: POP
2806: POP
// end ;
2807: LD_VAR 0 3
2811: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2812: LD_INT 0
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
2819: PPUSH
2820: PPUSH
2821: PPUSH
2822: PPUSH
2823: PPUSH
2824: PPUSH
2825: PPUSH
2826: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2827: LD_VAR 0 1
2831: NOT
2832: PUSH
2833: LD_VAR 0 1
2837: PPUSH
2838: CALL_OW 257
2842: PUSH
2843: LD_INT 9
2845: NONEQUAL
2846: OR
2847: IFFALSE 2851
// exit ;
2849: GO 3424
// side := GetSide ( unit ) ;
2851: LD_ADDR_VAR 0 9
2855: PUSH
2856: LD_VAR 0 1
2860: PPUSH
2861: CALL_OW 255
2865: ST_TO_ADDR
// tech_space := tech_spacanom ;
2866: LD_ADDR_VAR 0 12
2870: PUSH
2871: LD_INT 29
2873: ST_TO_ADDR
// tech_time := tech_taurad ;
2874: LD_ADDR_VAR 0 13
2878: PUSH
2879: LD_INT 28
2881: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2882: LD_ADDR_VAR 0 11
2886: PUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 310
2896: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2897: LD_VAR 0 11
2901: PPUSH
2902: CALL_OW 247
2906: PUSH
2907: LD_INT 2
2909: EQUAL
2910: IFFALSE 2914
// exit ;
2912: GO 3424
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2914: LD_ADDR_VAR 0 8
2918: PUSH
2919: LD_INT 81
2921: PUSH
2922: LD_VAR 0 9
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 3
2933: PUSH
2934: LD_INT 21
2936: PUSH
2937: LD_INT 3
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 69
2956: ST_TO_ADDR
// if not tmp then
2957: LD_VAR 0 8
2961: NOT
2962: IFFALSE 2966
// exit ;
2964: GO 3424
// if in_unit then
2966: LD_VAR 0 11
2970: IFFALSE 2994
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2972: LD_ADDR_VAR 0 10
2976: PUSH
2977: LD_VAR 0 8
2981: PPUSH
2982: LD_VAR 0 11
2986: PPUSH
2987: CALL_OW 74
2991: ST_TO_ADDR
2992: GO 3014
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2994: LD_ADDR_VAR 0 10
2998: PUSH
2999: LD_VAR 0 8
3003: PPUSH
3004: LD_VAR 0 1
3008: PPUSH
3009: CALL_OW 74
3013: ST_TO_ADDR
// if not enemy then
3014: LD_VAR 0 10
3018: NOT
3019: IFFALSE 3023
// exit ;
3021: GO 3424
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3023: LD_VAR 0 11
3027: PUSH
3028: LD_VAR 0 11
3032: PPUSH
3033: LD_VAR 0 10
3037: PPUSH
3038: CALL_OW 296
3042: PUSH
3043: LD_INT 13
3045: GREATER
3046: AND
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: LD_VAR 0 10
3057: PPUSH
3058: CALL_OW 296
3062: PUSH
3063: LD_INT 12
3065: GREATER
3066: OR
3067: IFFALSE 3071
// exit ;
3069: GO 3424
// missile := [ 1 ] ;
3071: LD_ADDR_VAR 0 14
3075: PUSH
3076: LD_INT 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3082: LD_VAR 0 9
3086: PPUSH
3087: LD_VAR 0 12
3091: PPUSH
3092: CALL_OW 325
3096: IFFALSE 3125
// missile := Replace ( missile , missile + 1 , 2 ) ;
3098: LD_ADDR_VAR 0 14
3102: PUSH
3103: LD_VAR 0 14
3107: PPUSH
3108: LD_VAR 0 14
3112: PUSH
3113: LD_INT 1
3115: PLUS
3116: PPUSH
3117: LD_INT 2
3119: PPUSH
3120: CALL_OW 1
3124: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3125: LD_VAR 0 9
3129: PPUSH
3130: LD_VAR 0 13
3134: PPUSH
3135: CALL_OW 325
3139: PUSH
3140: LD_VAR 0 10
3144: PPUSH
3145: CALL_OW 255
3149: PPUSH
3150: LD_VAR 0 13
3154: PPUSH
3155: CALL_OW 325
3159: NOT
3160: AND
3161: IFFALSE 3190
// missile := Replace ( missile , missile + 1 , 3 ) ;
3163: LD_ADDR_VAR 0 14
3167: PUSH
3168: LD_VAR 0 14
3172: PPUSH
3173: LD_VAR 0 14
3177: PUSH
3178: LD_INT 1
3180: PLUS
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL_OW 1
3189: ST_TO_ADDR
// if missile < 2 then
3190: LD_VAR 0 14
3194: PUSH
3195: LD_INT 2
3197: LESS
3198: IFFALSE 3202
// exit ;
3200: GO 3424
// x := GetX ( enemy ) ;
3202: LD_ADDR_VAR 0 4
3206: PUSH
3207: LD_VAR 0 10
3211: PPUSH
3212: CALL_OW 250
3216: ST_TO_ADDR
// y := GetY ( enemy ) ;
3217: LD_ADDR_VAR 0 5
3221: PUSH
3222: LD_VAR 0 10
3226: PPUSH
3227: CALL_OW 251
3231: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3232: LD_ADDR_VAR 0 6
3236: PUSH
3237: LD_VAR 0 4
3241: PUSH
3242: LD_INT 1
3244: NEG
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: CALL_OW 12
3253: PLUS
3254: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3255: LD_ADDR_VAR 0 7
3259: PUSH
3260: LD_VAR 0 5
3264: PUSH
3265: LD_INT 1
3267: NEG
3268: PPUSH
3269: LD_INT 1
3271: PPUSH
3272: CALL_OW 12
3276: PLUS
3277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3278: LD_VAR 0 6
3282: PPUSH
3283: LD_VAR 0 7
3287: PPUSH
3288: CALL_OW 488
3292: NOT
3293: IFFALSE 3315
// begin _x := x ;
3295: LD_ADDR_VAR 0 6
3299: PUSH
3300: LD_VAR 0 4
3304: ST_TO_ADDR
// _y := y ;
3305: LD_ADDR_VAR 0 7
3309: PUSH
3310: LD_VAR 0 5
3314: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3315: LD_ADDR_VAR 0 3
3319: PUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_VAR 0 14
3327: PPUSH
3328: CALL_OW 12
3332: ST_TO_ADDR
// case i of 1 :
3333: LD_VAR 0 3
3337: PUSH
3338: LD_INT 1
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3346
3344: GO 3363
3346: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3347: LD_VAR 0 1
3351: PPUSH
3352: LD_VAR 0 10
3356: PPUSH
3357: CALL_OW 115
3361: GO 3424
3363: LD_INT 2
3365: DOUBLE
3366: EQUAL
3367: IFTRUE 3371
3369: GO 3393
3371: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3372: LD_VAR 0 1
3376: PPUSH
3377: LD_VAR 0 6
3381: PPUSH
3382: LD_VAR 0 7
3386: PPUSH
3387: CALL_OW 153
3391: GO 3424
3393: LD_INT 3
3395: DOUBLE
3396: EQUAL
3397: IFTRUE 3401
3399: GO 3423
3401: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3402: LD_VAR 0 1
3406: PPUSH
3407: LD_VAR 0 6
3411: PPUSH
3412: LD_VAR 0 7
3416: PPUSH
3417: CALL_OW 154
3421: GO 3424
3423: POP
// end ;
3424: LD_VAR 0 2
3428: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3429: LD_INT 0
3431: PPUSH
3432: PPUSH
3433: PPUSH
3434: PPUSH
3435: PPUSH
3436: PPUSH
// if not unit or not building then
3437: LD_VAR 0 1
3441: NOT
3442: PUSH
3443: LD_VAR 0 2
3447: NOT
3448: OR
3449: IFFALSE 3453
// exit ;
3451: GO 3611
// x := GetX ( building ) ;
3453: LD_ADDR_VAR 0 5
3457: PUSH
3458: LD_VAR 0 2
3462: PPUSH
3463: CALL_OW 250
3467: ST_TO_ADDR
// y := GetY ( building ) ;
3468: LD_ADDR_VAR 0 6
3472: PUSH
3473: LD_VAR 0 2
3477: PPUSH
3478: CALL_OW 251
3482: ST_TO_ADDR
// for i = 0 to 5 do
3483: LD_ADDR_VAR 0 4
3487: PUSH
3488: DOUBLE
3489: LD_INT 0
3491: DEC
3492: ST_TO_ADDR
3493: LD_INT 5
3495: PUSH
3496: FOR_TO
3497: IFFALSE 3609
// begin _x := ShiftX ( x , i , 3 ) ;
3499: LD_ADDR_VAR 0 7
3503: PUSH
3504: LD_VAR 0 5
3508: PPUSH
3509: LD_VAR 0 4
3513: PPUSH
3514: LD_INT 3
3516: PPUSH
3517: CALL_OW 272
3521: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3522: LD_ADDR_VAR 0 8
3526: PUSH
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 4
3536: PPUSH
3537: LD_INT 3
3539: PPUSH
3540: CALL_OW 273
3544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3545: LD_VAR 0 7
3549: PPUSH
3550: LD_VAR 0 8
3554: PPUSH
3555: CALL_OW 488
3559: NOT
3560: IFFALSE 3564
// continue ;
3562: GO 3496
// if HexInfo ( _x , _y ) = 0 then
3564: LD_VAR 0 7
3568: PPUSH
3569: LD_VAR 0 8
3573: PPUSH
3574: CALL_OW 428
3578: PUSH
3579: LD_INT 0
3581: EQUAL
3582: IFFALSE 3607
// begin ComMoveXY ( unit , _x , _y ) ;
3584: LD_VAR 0 1
3588: PPUSH
3589: LD_VAR 0 7
3593: PPUSH
3594: LD_VAR 0 8
3598: PPUSH
3599: CALL_OW 111
// exit ;
3603: POP
3604: POP
3605: GO 3611
// end ; end ;
3607: GO 3496
3609: POP
3610: POP
// end ;
3611: LD_VAR 0 3
3615: RET
// export function ScanBase ( side , base_area ) ; begin
3616: LD_INT 0
3618: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3619: LD_ADDR_VAR 0 3
3623: PUSH
3624: LD_VAR 0 2
3628: PPUSH
3629: LD_INT 81
3631: PUSH
3632: LD_VAR 0 1
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: PPUSH
3641: CALL_OW 70
3645: ST_TO_ADDR
// end ;
3646: LD_VAR 0 3
3650: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3651: LD_INT 0
3653: PPUSH
3654: PPUSH
3655: PPUSH
3656: PPUSH
// result := false ;
3657: LD_ADDR_VAR 0 2
3661: PUSH
3662: LD_INT 0
3664: ST_TO_ADDR
// side := GetSide ( unit ) ;
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: LD_VAR 0 1
3674: PPUSH
3675: CALL_OW 255
3679: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3680: LD_ADDR_VAR 0 4
3684: PUSH
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 248
3694: ST_TO_ADDR
// case nat of 1 :
3695: LD_VAR 0 4
3699: PUSH
3700: LD_INT 1
3702: DOUBLE
3703: EQUAL
3704: IFTRUE 3708
3706: GO 3719
3708: POP
// tech := tech_lassight ; 2 :
3709: LD_ADDR_VAR 0 5
3713: PUSH
3714: LD_INT 12
3716: ST_TO_ADDR
3717: GO 3758
3719: LD_INT 2
3721: DOUBLE
3722: EQUAL
3723: IFTRUE 3727
3725: GO 3738
3727: POP
// tech := tech_mortar ; 3 :
3728: LD_ADDR_VAR 0 5
3732: PUSH
3733: LD_INT 41
3735: ST_TO_ADDR
3736: GO 3758
3738: LD_INT 3
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3757
3746: POP
// tech := tech_bazooka ; end ;
3747: LD_ADDR_VAR 0 5
3751: PUSH
3752: LD_INT 44
3754: ST_TO_ADDR
3755: GO 3758
3757: POP
// if Researched ( side , tech ) then
3758: LD_VAR 0 3
3762: PPUSH
3763: LD_VAR 0 5
3767: PPUSH
3768: CALL_OW 325
3772: IFFALSE 3799
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3774: LD_ADDR_VAR 0 2
3778: PUSH
3779: LD_INT 5
3781: PUSH
3782: LD_INT 8
3784: PUSH
3785: LD_INT 9
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_VAR 0 4
3797: ARRAY
3798: ST_TO_ADDR
// end ;
3799: LD_VAR 0 2
3803: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
// if not mines then
3809: LD_VAR 0 2
3813: NOT
3814: IFFALSE 3818
// exit ;
3816: GO 3962
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3818: LD_ADDR_VAR 0 5
3822: PUSH
3823: LD_INT 81
3825: PUSH
3826: LD_VAR 0 1
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 3
3837: PUSH
3838: LD_INT 21
3840: PUSH
3841: LD_INT 3
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 69
3860: ST_TO_ADDR
// for i in mines do
3861: LD_ADDR_VAR 0 4
3865: PUSH
3866: LD_VAR 0 2
3870: PUSH
3871: FOR_IN
3872: IFFALSE 3960
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3874: LD_VAR 0 4
3878: PUSH
3879: LD_INT 1
3881: ARRAY
3882: PPUSH
3883: LD_VAR 0 4
3887: PUSH
3888: LD_INT 2
3890: ARRAY
3891: PPUSH
3892: CALL_OW 458
3896: NOT
3897: IFFALSE 3901
// continue ;
3899: GO 3871
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3901: LD_VAR 0 4
3905: PUSH
3906: LD_INT 1
3908: ARRAY
3909: PPUSH
3910: LD_VAR 0 4
3914: PUSH
3915: LD_INT 2
3917: ARRAY
3918: PPUSH
3919: CALL_OW 428
3923: PUSH
3924: LD_VAR 0 5
3928: IN
3929: IFFALSE 3958
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3931: LD_VAR 0 4
3935: PUSH
3936: LD_INT 1
3938: ARRAY
3939: PPUSH
3940: LD_VAR 0 4
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PPUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: CALL_OW 456
// end ;
3958: GO 3871
3960: POP
3961: POP
// end ;
3962: LD_VAR 0 3
3966: RET
// export function Count ( array ) ; begin
3967: LD_INT 0
3969: PPUSH
// result := array + 0 ;
3970: LD_ADDR_VAR 0 2
3974: PUSH
3975: LD_VAR 0 1
3979: PUSH
3980: LD_INT 0
3982: PLUS
3983: ST_TO_ADDR
// end ;
3984: LD_VAR 0 2
3988: RET
// export function IsEmpty ( building ) ; begin
3989: LD_INT 0
3991: PPUSH
// if not building then
3992: LD_VAR 0 1
3996: NOT
3997: IFFALSE 4001
// exit ;
3999: GO 4044
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4001: LD_ADDR_VAR 0 2
4005: PUSH
4006: LD_VAR 0 1
4010: PUSH
4011: LD_INT 22
4013: PUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 255
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 58
4030: PUSH
4031: EMPTY
4032: LIST
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 69
4042: IN
4043: ST_TO_ADDR
// end ;
4044: LD_VAR 0 2
4048: RET
// export function IsNotFull ( building ) ; var places ; begin
4049: LD_INT 0
4051: PPUSH
4052: PPUSH
// if not building then
4053: LD_VAR 0 1
4057: NOT
4058: IFFALSE 4062
// exit ;
4060: GO 4090
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: LD_VAR 0 1
4071: PPUSH
4072: LD_INT 3
4074: PUSH
4075: LD_INT 62
4077: PUSH
4078: EMPTY
4079: LIST
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 72
4089: ST_TO_ADDR
// end ;
4090: LD_VAR 0 2
4094: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4095: LD_INT 0
4097: PPUSH
4098: PPUSH
4099: PPUSH
4100: PPUSH
// tmp := [ ] ;
4101: LD_ADDR_VAR 0 3
4105: PUSH
4106: EMPTY
4107: ST_TO_ADDR
// list := [ ] ;
4108: LD_ADDR_VAR 0 5
4112: PUSH
4113: EMPTY
4114: ST_TO_ADDR
// for i = 16 to 25 do
4115: LD_ADDR_VAR 0 4
4119: PUSH
4120: DOUBLE
4121: LD_INT 16
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 25
4127: PUSH
4128: FOR_TO
4129: IFFALSE 4202
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4131: LD_ADDR_VAR 0 3
4135: PUSH
4136: LD_VAR 0 3
4140: PUSH
4141: LD_INT 22
4143: PUSH
4144: LD_VAR 0 1
4148: PPUSH
4149: CALL_OW 255
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PUSH
4158: LD_INT 91
4160: PUSH
4161: LD_VAR 0 1
4165: PUSH
4166: LD_INT 6
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: PUSH
4174: LD_INT 30
4176: PUSH
4177: LD_VAR 0 4
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: PPUSH
4194: CALL_OW 69
4198: ADD
4199: ST_TO_ADDR
4200: GO 4128
4202: POP
4203: POP
// for i = 1 to tmp do
4204: LD_ADDR_VAR 0 4
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_VAR 0 3
4218: PUSH
4219: FOR_TO
4220: IFFALSE 4308
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_VAR 0 5
4231: PUSH
4232: LD_VAR 0 3
4236: PUSH
4237: LD_VAR 0 4
4241: ARRAY
4242: PPUSH
4243: CALL_OW 266
4247: PUSH
4248: LD_VAR 0 3
4252: PUSH
4253: LD_VAR 0 4
4257: ARRAY
4258: PPUSH
4259: CALL_OW 250
4263: PUSH
4264: LD_VAR 0 3
4268: PUSH
4269: LD_VAR 0 4
4273: ARRAY
4274: PPUSH
4275: CALL_OW 251
4279: PUSH
4280: LD_VAR 0 3
4284: PUSH
4285: LD_VAR 0 4
4289: ARRAY
4290: PPUSH
4291: CALL_OW 254
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: EMPTY
4303: LIST
4304: ADD
4305: ST_TO_ADDR
4306: GO 4219
4308: POP
4309: POP
// result := list ;
4310: LD_ADDR_VAR 0 2
4314: PUSH
4315: LD_VAR 0 5
4319: ST_TO_ADDR
// end ;
4320: LD_VAR 0 2
4324: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
4329: PPUSH
4330: PPUSH
4331: PPUSH
4332: PPUSH
4333: PPUSH
// if not factory then
4334: LD_VAR 0 1
4338: NOT
4339: IFFALSE 4343
// exit ;
4341: GO 4936
// if control = control_apeman then
4343: LD_VAR 0 4
4347: PUSH
4348: LD_INT 5
4350: EQUAL
4351: IFFALSE 4460
// begin tmp := UnitsInside ( factory ) ;
4353: LD_ADDR_VAR 0 8
4357: PUSH
4358: LD_VAR 0 1
4362: PPUSH
4363: CALL_OW 313
4367: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4368: LD_VAR 0 8
4372: PPUSH
4373: LD_INT 25
4375: PUSH
4376: LD_INT 12
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PPUSH
4383: CALL_OW 72
4387: NOT
4388: IFFALSE 4398
// control := control_manual ;
4390: LD_ADDR_VAR 0 4
4394: PUSH
4395: LD_INT 1
4397: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4398: LD_ADDR_VAR 0 8
4402: PUSH
4403: LD_VAR 0 1
4407: PPUSH
4408: CALL 4095 0 1
4412: ST_TO_ADDR
// if tmp then
4413: LD_VAR 0 8
4417: IFFALSE 4460
// begin for i in tmp do
4419: LD_ADDR_VAR 0 7
4423: PUSH
4424: LD_VAR 0 8
4428: PUSH
4429: FOR_IN
4430: IFFALSE 4458
// if i [ 1 ] = b_ext_radio then
4432: LD_VAR 0 7
4436: PUSH
4437: LD_INT 1
4439: ARRAY
4440: PUSH
4441: LD_INT 22
4443: EQUAL
4444: IFFALSE 4456
// begin control := control_remote ;
4446: LD_ADDR_VAR 0 4
4450: PUSH
4451: LD_INT 2
4453: ST_TO_ADDR
// break ;
4454: GO 4458
// end ;
4456: GO 4429
4458: POP
4459: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4460: LD_VAR 0 1
4464: PPUSH
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_VAR 0 5
4484: PPUSH
4485: CALL_OW 448
4489: IFFALSE 4524
// begin result := [ chassis , engine , control , weapon ] ;
4491: LD_ADDR_VAR 0 6
4495: PUSH
4496: LD_VAR 0 2
4500: PUSH
4501: LD_VAR 0 3
4505: PUSH
4506: LD_VAR 0 4
4510: PUSH
4511: LD_VAR 0 5
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// exit ;
4522: GO 4936
// end ; _chassis := AvailableChassisList ( factory ) ;
4524: LD_ADDR_VAR 0 9
4528: PUSH
4529: LD_VAR 0 1
4533: PPUSH
4534: CALL_OW 475
4538: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4539: LD_ADDR_VAR 0 11
4543: PUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 476
4553: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4554: LD_ADDR_VAR 0 12
4558: PUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: CALL_OW 477
4568: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4569: LD_ADDR_VAR 0 10
4573: PUSH
4574: LD_VAR 0 1
4578: PPUSH
4579: CALL_OW 478
4583: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4584: LD_VAR 0 9
4588: NOT
4589: PUSH
4590: LD_VAR 0 11
4594: NOT
4595: OR
4596: PUSH
4597: LD_VAR 0 12
4601: NOT
4602: OR
4603: PUSH
4604: LD_VAR 0 10
4608: NOT
4609: OR
4610: IFFALSE 4645
// begin result := [ chassis , engine , control , weapon ] ;
4612: LD_ADDR_VAR 0 6
4616: PUSH
4617: LD_VAR 0 2
4621: PUSH
4622: LD_VAR 0 3
4626: PUSH
4627: LD_VAR 0 4
4631: PUSH
4632: LD_VAR 0 5
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: ST_TO_ADDR
// exit ;
4643: GO 4936
// end ; if not chassis in _chassis then
4645: LD_VAR 0 2
4649: PUSH
4650: LD_VAR 0 9
4654: IN
4655: NOT
4656: IFFALSE 4682
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: LD_VAR 0 9
4667: PUSH
4668: LD_INT 1
4670: PPUSH
4671: LD_VAR 0 9
4675: PPUSH
4676: CALL_OW 12
4680: ARRAY
4681: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4682: LD_VAR 0 2
4686: PPUSH
4687: LD_VAR 0 3
4691: PPUSH
4692: CALL 4941 0 2
4696: NOT
4697: IFFALSE 4756
// repeat engine := _engine [ 1 ] ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: LD_VAR 0 11
4708: PUSH
4709: LD_INT 1
4711: ARRAY
4712: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4713: LD_ADDR_VAR 0 11
4717: PUSH
4718: LD_VAR 0 11
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 3
4730: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4731: LD_VAR 0 2
4735: PPUSH
4736: LD_VAR 0 3
4740: PPUSH
4741: CALL 4941 0 2
4745: PUSH
4746: LD_VAR 0 11
4750: PUSH
4751: EMPTY
4752: EQUAL
4753: OR
4754: IFFALSE 4699
// if not control in _control then
4756: LD_VAR 0 4
4760: PUSH
4761: LD_VAR 0 12
4765: IN
4766: NOT
4767: IFFALSE 4793
// control := _control [ rand ( 1 , _control ) ] ;
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_VAR 0 12
4778: PUSH
4779: LD_INT 1
4781: PPUSH
4782: LD_VAR 0 12
4786: PPUSH
4787: CALL_OW 12
4791: ARRAY
4792: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4793: LD_VAR 0 2
4797: PPUSH
4798: LD_VAR 0 5
4802: PPUSH
4803: CALL 5161 0 2
4807: NOT
4808: IFFALSE 4867
// repeat weapon := _weapon [ 1 ] ;
4810: LD_ADDR_VAR 0 5
4814: PUSH
4815: LD_VAR 0 10
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4824: LD_ADDR_VAR 0 10
4828: PUSH
4829: LD_VAR 0 10
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: CALL_OW 3
4841: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4842: LD_VAR 0 2
4846: PPUSH
4847: LD_VAR 0 5
4851: PPUSH
4852: CALL 5161 0 2
4856: PUSH
4857: LD_VAR 0 10
4861: PUSH
4862: EMPTY
4863: EQUAL
4864: OR
4865: IFFALSE 4810
// result := [ ] ;
4867: LD_ADDR_VAR 0 6
4871: PUSH
4872: EMPTY
4873: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_VAR 0 2
4883: PPUSH
4884: LD_VAR 0 3
4888: PPUSH
4889: LD_VAR 0 4
4893: PPUSH
4894: LD_VAR 0 5
4898: PPUSH
4899: CALL_OW 448
4903: IFFALSE 4936
// result := [ chassis , engine , control , weapon ] ;
4905: LD_ADDR_VAR 0 6
4909: PUSH
4910: LD_VAR 0 2
4914: PUSH
4915: LD_VAR 0 3
4919: PUSH
4920: LD_VAR 0 4
4924: PUSH
4925: LD_VAR 0 5
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: ST_TO_ADDR
// end ;
4936: LD_VAR 0 6
4940: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4941: LD_INT 0
4943: PPUSH
// if not chassis or not engine then
4944: LD_VAR 0 1
4948: NOT
4949: PUSH
4950: LD_VAR 0 2
4954: NOT
4955: OR
4956: IFFALSE 4960
// exit ;
4958: GO 5156
// case engine of engine_solar :
4960: LD_VAR 0 2
4964: PUSH
4965: LD_INT 2
4967: DOUBLE
4968: EQUAL
4969: IFTRUE 4973
4971: GO 5011
4973: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4974: LD_ADDR_VAR 0 3
4978: PUSH
4979: LD_INT 11
4981: PUSH
4982: LD_INT 12
4984: PUSH
4985: LD_INT 13
4987: PUSH
4988: LD_INT 14
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 2
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
5009: GO 5140
5011: LD_INT 1
5013: DOUBLE
5014: EQUAL
5015: IFTRUE 5019
5017: GO 5081
5019: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5020: LD_ADDR_VAR 0 3
5024: PUSH
5025: LD_INT 11
5027: PUSH
5028: LD_INT 12
5030: PUSH
5031: LD_INT 13
5033: PUSH
5034: LD_INT 14
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: LD_INT 3
5045: PUSH
5046: LD_INT 4
5048: PUSH
5049: LD_INT 5
5051: PUSH
5052: LD_INT 21
5054: PUSH
5055: LD_INT 23
5057: PUSH
5058: LD_INT 22
5060: PUSH
5061: LD_INT 24
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: ST_TO_ADDR
5079: GO 5140
5081: LD_INT 3
5083: DOUBLE
5084: EQUAL
5085: IFTRUE 5089
5087: GO 5139
5089: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5090: LD_ADDR_VAR 0 3
5094: PUSH
5095: LD_INT 13
5097: PUSH
5098: LD_INT 14
5100: PUSH
5101: LD_INT 2
5103: PUSH
5104: LD_INT 3
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 22
5118: PUSH
5119: LD_INT 23
5121: PUSH
5122: LD_INT 24
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: ST_TO_ADDR
5137: GO 5140
5139: POP
// result := ( chassis in result ) ;
5140: LD_ADDR_VAR 0 3
5144: PUSH
5145: LD_VAR 0 1
5149: PUSH
5150: LD_VAR 0 3
5154: IN
5155: ST_TO_ADDR
// end ;
5156: LD_VAR 0 3
5160: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5161: LD_INT 0
5163: PPUSH
// if not chassis or not weapon then
5164: LD_VAR 0 1
5168: NOT
5169: PUSH
5170: LD_VAR 0 2
5174: NOT
5175: OR
5176: IFFALSE 5180
// exit ;
5178: GO 6240
// case weapon of us_machine_gun :
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 2
5187: DOUBLE
5188: EQUAL
5189: IFTRUE 5193
5191: GO 5223
5193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 3
5207: PUSH
5208: LD_INT 4
5210: PUSH
5211: LD_INT 5
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: ST_TO_ADDR
5221: GO 6224
5223: LD_INT 3
5225: DOUBLE
5226: EQUAL
5227: IFTRUE 5231
5229: GO 5261
5231: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5232: LD_ADDR_VAR 0 3
5236: PUSH
5237: LD_INT 1
5239: PUSH
5240: LD_INT 2
5242: PUSH
5243: LD_INT 3
5245: PUSH
5246: LD_INT 4
5248: PUSH
5249: LD_INT 5
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
5259: GO 6224
5261: LD_INT 11
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5299
5269: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: LD_INT 2
5280: PUSH
5281: LD_INT 3
5283: PUSH
5284: LD_INT 4
5286: PUSH
5287: LD_INT 5
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: ST_TO_ADDR
5297: GO 6224
5299: LD_INT 4
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5307
5305: GO 5333
5307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: LD_INT 2
5315: PUSH
5316: LD_INT 3
5318: PUSH
5319: LD_INT 4
5321: PUSH
5322: LD_INT 5
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: ST_TO_ADDR
5331: GO 6224
5333: LD_INT 5
5335: DOUBLE
5336: EQUAL
5337: IFTRUE 5341
5339: GO 5367
5341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5342: LD_ADDR_VAR 0 3
5346: PUSH
5347: LD_INT 2
5349: PUSH
5350: LD_INT 3
5352: PUSH
5353: LD_INT 4
5355: PUSH
5356: LD_INT 5
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: ST_TO_ADDR
5365: GO 6224
5367: LD_INT 9
5369: DOUBLE
5370: EQUAL
5371: IFTRUE 5375
5373: GO 5401
5375: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5376: LD_ADDR_VAR 0 3
5380: PUSH
5381: LD_INT 2
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 4
5389: PUSH
5390: LD_INT 5
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: ST_TO_ADDR
5399: GO 6224
5401: LD_INT 7
5403: DOUBLE
5404: EQUAL
5405: IFTRUE 5409
5407: GO 5435
5409: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 4
5423: PUSH
5424: LD_INT 5
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: ST_TO_ADDR
5433: GO 6224
5435: LD_INT 12
5437: DOUBLE
5438: EQUAL
5439: IFTRUE 5443
5441: GO 5469
5443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 3
5454: PUSH
5455: LD_INT 4
5457: PUSH
5458: LD_INT 5
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: ST_TO_ADDR
5467: GO 6224
5469: LD_INT 13
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5477
5475: GO 5503
5477: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5478: LD_ADDR_VAR 0 3
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: LD_INT 3
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: LD_INT 5
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: ST_TO_ADDR
5501: GO 6224
5503: LD_INT 14
5505: DOUBLE
5506: EQUAL
5507: IFTRUE 5511
5509: GO 5529
5511: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5512: LD_ADDR_VAR 0 3
5516: PUSH
5517: LD_INT 4
5519: PUSH
5520: LD_INT 5
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: ST_TO_ADDR
5527: GO 6224
5529: LD_INT 6
5531: DOUBLE
5532: EQUAL
5533: IFTRUE 5537
5535: GO 5555
5537: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5538: LD_ADDR_VAR 0 3
5542: PUSH
5543: LD_INT 4
5545: PUSH
5546: LD_INT 5
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: ST_TO_ADDR
5553: GO 6224
5555: LD_INT 10
5557: DOUBLE
5558: EQUAL
5559: IFTRUE 5563
5561: GO 5581
5563: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5564: LD_ADDR_VAR 0 3
5568: PUSH
5569: LD_INT 4
5571: PUSH
5572: LD_INT 5
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: ST_TO_ADDR
5579: GO 6224
5581: LD_INT 22
5583: DOUBLE
5584: EQUAL
5585: IFTRUE 5589
5587: GO 5615
5589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: LD_INT 11
5597: PUSH
5598: LD_INT 12
5600: PUSH
5601: LD_INT 13
5603: PUSH
5604: LD_INT 14
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: ST_TO_ADDR
5613: GO 6224
5615: LD_INT 23
5617: DOUBLE
5618: EQUAL
5619: IFTRUE 5623
5621: GO 5649
5623: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5624: LD_ADDR_VAR 0 3
5628: PUSH
5629: LD_INT 11
5631: PUSH
5632: LD_INT 12
5634: PUSH
5635: LD_INT 13
5637: PUSH
5638: LD_INT 14
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: ST_TO_ADDR
5647: GO 6224
5649: LD_INT 24
5651: DOUBLE
5652: EQUAL
5653: IFTRUE 5657
5655: GO 5683
5657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5658: LD_ADDR_VAR 0 3
5662: PUSH
5663: LD_INT 11
5665: PUSH
5666: LD_INT 12
5668: PUSH
5669: LD_INT 13
5671: PUSH
5672: LD_INT 14
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: ST_TO_ADDR
5681: GO 6224
5683: LD_INT 30
5685: DOUBLE
5686: EQUAL
5687: IFTRUE 5691
5689: GO 5717
5691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5692: LD_ADDR_VAR 0 3
5696: PUSH
5697: LD_INT 11
5699: PUSH
5700: LD_INT 12
5702: PUSH
5703: LD_INT 13
5705: PUSH
5706: LD_INT 14
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: ST_TO_ADDR
5715: GO 6224
5717: LD_INT 25
5719: DOUBLE
5720: EQUAL
5721: IFTRUE 5725
5723: GO 5743
5725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5726: LD_ADDR_VAR 0 3
5730: PUSH
5731: LD_INT 13
5733: PUSH
5734: LD_INT 14
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 6224
5743: LD_INT 27
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5769
5751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5752: LD_ADDR_VAR 0 3
5756: PUSH
5757: LD_INT 13
5759: PUSH
5760: LD_INT 14
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: ST_TO_ADDR
5767: GO 6224
5769: LD_INT 92
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5777
5775: GO 5803
5777: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5778: LD_ADDR_VAR 0 3
5782: PUSH
5783: LD_INT 11
5785: PUSH
5786: LD_INT 12
5788: PUSH
5789: LD_INT 13
5791: PUSH
5792: LD_INT 14
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: ST_TO_ADDR
5801: GO 6224
5803: LD_INT 28
5805: DOUBLE
5806: EQUAL
5807: IFTRUE 5811
5809: GO 5829
5811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5812: LD_ADDR_VAR 0 3
5816: PUSH
5817: LD_INT 13
5819: PUSH
5820: LD_INT 14
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: ST_TO_ADDR
5827: GO 6224
5829: LD_INT 29
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 5855
5837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5838: LD_ADDR_VAR 0 3
5842: PUSH
5843: LD_INT 13
5845: PUSH
5846: LD_INT 14
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: ST_TO_ADDR
5853: GO 6224
5855: LD_INT 31
5857: DOUBLE
5858: EQUAL
5859: IFTRUE 5863
5861: GO 5881
5863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_INT 13
5871: PUSH
5872: LD_INT 14
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: ST_TO_ADDR
5879: GO 6224
5881: LD_INT 26
5883: DOUBLE
5884: EQUAL
5885: IFTRUE 5889
5887: GO 5907
5889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5890: LD_ADDR_VAR 0 3
5894: PUSH
5895: LD_INT 13
5897: PUSH
5898: LD_INT 14
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: ST_TO_ADDR
5905: GO 6224
5907: LD_INT 42
5909: DOUBLE
5910: EQUAL
5911: IFTRUE 5915
5913: GO 5941
5915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5916: LD_ADDR_VAR 0 3
5920: PUSH
5921: LD_INT 21
5923: PUSH
5924: LD_INT 22
5926: PUSH
5927: LD_INT 23
5929: PUSH
5930: LD_INT 24
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: ST_TO_ADDR
5939: GO 6224
5941: LD_INT 43
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5949
5947: GO 5975
5949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5950: LD_ADDR_VAR 0 3
5954: PUSH
5955: LD_INT 21
5957: PUSH
5958: LD_INT 22
5960: PUSH
5961: LD_INT 23
5963: PUSH
5964: LD_INT 24
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: ST_TO_ADDR
5973: GO 6224
5975: LD_INT 44
5977: DOUBLE
5978: EQUAL
5979: IFTRUE 5983
5981: GO 6009
5983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5984: LD_ADDR_VAR 0 3
5988: PUSH
5989: LD_INT 21
5991: PUSH
5992: LD_INT 22
5994: PUSH
5995: LD_INT 23
5997: PUSH
5998: LD_INT 24
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: ST_TO_ADDR
6007: GO 6224
6009: LD_INT 45
6011: DOUBLE
6012: EQUAL
6013: IFTRUE 6017
6015: GO 6043
6017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6018: LD_ADDR_VAR 0 3
6022: PUSH
6023: LD_INT 21
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 23
6031: PUSH
6032: LD_INT 24
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: ST_TO_ADDR
6041: GO 6224
6043: LD_INT 49
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6077
6051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6052: LD_ADDR_VAR 0 3
6056: PUSH
6057: LD_INT 21
6059: PUSH
6060: LD_INT 22
6062: PUSH
6063: LD_INT 23
6065: PUSH
6066: LD_INT 24
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: ST_TO_ADDR
6075: GO 6224
6077: LD_INT 51
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6111
6085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6086: LD_ADDR_VAR 0 3
6090: PUSH
6091: LD_INT 21
6093: PUSH
6094: LD_INT 22
6096: PUSH
6097: LD_INT 23
6099: PUSH
6100: LD_INT 24
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: ST_TO_ADDR
6109: GO 6224
6111: LD_INT 52
6113: DOUBLE
6114: EQUAL
6115: IFTRUE 6119
6117: GO 6145
6119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6120: LD_ADDR_VAR 0 3
6124: PUSH
6125: LD_INT 21
6127: PUSH
6128: LD_INT 22
6130: PUSH
6131: LD_INT 23
6133: PUSH
6134: LD_INT 24
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: ST_TO_ADDR
6143: GO 6224
6145: LD_INT 53
6147: DOUBLE
6148: EQUAL
6149: IFTRUE 6153
6151: GO 6171
6153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6154: LD_ADDR_VAR 0 3
6158: PUSH
6159: LD_INT 23
6161: PUSH
6162: LD_INT 24
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: ST_TO_ADDR
6169: GO 6224
6171: LD_INT 46
6173: DOUBLE
6174: EQUAL
6175: IFTRUE 6179
6177: GO 6197
6179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: LD_INT 23
6187: PUSH
6188: LD_INT 24
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: ST_TO_ADDR
6195: GO 6224
6197: LD_INT 47
6199: DOUBLE
6200: EQUAL
6201: IFTRUE 6205
6203: GO 6223
6205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6206: LD_ADDR_VAR 0 3
6210: PUSH
6211: LD_INT 23
6213: PUSH
6214: LD_INT 24
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: ST_TO_ADDR
6221: GO 6224
6223: POP
// result := ( chassis in result ) ;
6224: LD_ADDR_VAR 0 3
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: LD_VAR 0 3
6238: IN
6239: ST_TO_ADDR
// end ;
6240: LD_VAR 0 3
6244: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6245: LD_INT 0
6247: PPUSH
6248: PPUSH
6249: PPUSH
6250: PPUSH
6251: PPUSH
6252: PPUSH
6253: PPUSH
// result := array ;
6254: LD_ADDR_VAR 0 5
6258: PUSH
6259: LD_VAR 0 1
6263: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6264: LD_VAR 0 1
6268: NOT
6269: PUSH
6270: LD_VAR 0 2
6274: NOT
6275: OR
6276: PUSH
6277: LD_VAR 0 3
6281: NOT
6282: OR
6283: PUSH
6284: LD_VAR 0 2
6288: PUSH
6289: LD_VAR 0 1
6293: GREATER
6294: OR
6295: PUSH
6296: LD_VAR 0 3
6300: PUSH
6301: LD_VAR 0 1
6305: GREATER
6306: OR
6307: IFFALSE 6311
// exit ;
6309: GO 6607
// if direction then
6311: LD_VAR 0 4
6315: IFFALSE 6379
// begin d := 1 ;
6317: LD_ADDR_VAR 0 9
6321: PUSH
6322: LD_INT 1
6324: ST_TO_ADDR
// if i_from > i_to then
6325: LD_VAR 0 2
6329: PUSH
6330: LD_VAR 0 3
6334: GREATER
6335: IFFALSE 6361
// length := ( array - i_from ) + i_to else
6337: LD_ADDR_VAR 0 11
6341: PUSH
6342: LD_VAR 0 1
6346: PUSH
6347: LD_VAR 0 2
6351: MINUS
6352: PUSH
6353: LD_VAR 0 3
6357: PLUS
6358: ST_TO_ADDR
6359: GO 6377
// length := i_to - i_from ;
6361: LD_ADDR_VAR 0 11
6365: PUSH
6366: LD_VAR 0 3
6370: PUSH
6371: LD_VAR 0 2
6375: MINUS
6376: ST_TO_ADDR
// end else
6377: GO 6440
// begin d := - 1 ;
6379: LD_ADDR_VAR 0 9
6383: PUSH
6384: LD_INT 1
6386: NEG
6387: ST_TO_ADDR
// if i_from > i_to then
6388: LD_VAR 0 2
6392: PUSH
6393: LD_VAR 0 3
6397: GREATER
6398: IFFALSE 6418
// length := i_from - i_to else
6400: LD_ADDR_VAR 0 11
6404: PUSH
6405: LD_VAR 0 2
6409: PUSH
6410: LD_VAR 0 3
6414: MINUS
6415: ST_TO_ADDR
6416: GO 6440
// length := ( array - i_to ) + i_from ;
6418: LD_ADDR_VAR 0 11
6422: PUSH
6423: LD_VAR 0 1
6427: PUSH
6428: LD_VAR 0 3
6432: MINUS
6433: PUSH
6434: LD_VAR 0 2
6438: PLUS
6439: ST_TO_ADDR
// end ; if not length then
6440: LD_VAR 0 11
6444: NOT
6445: IFFALSE 6449
// exit ;
6447: GO 6607
// tmp := array ;
6449: LD_ADDR_VAR 0 10
6453: PUSH
6454: LD_VAR 0 1
6458: ST_TO_ADDR
// for i = 1 to length do
6459: LD_ADDR_VAR 0 6
6463: PUSH
6464: DOUBLE
6465: LD_INT 1
6467: DEC
6468: ST_TO_ADDR
6469: LD_VAR 0 11
6473: PUSH
6474: FOR_TO
6475: IFFALSE 6595
// begin for j = 1 to array do
6477: LD_ADDR_VAR 0 7
6481: PUSH
6482: DOUBLE
6483: LD_INT 1
6485: DEC
6486: ST_TO_ADDR
6487: LD_VAR 0 1
6491: PUSH
6492: FOR_TO
6493: IFFALSE 6581
// begin k := j + d ;
6495: LD_ADDR_VAR 0 8
6499: PUSH
6500: LD_VAR 0 7
6504: PUSH
6505: LD_VAR 0 9
6509: PLUS
6510: ST_TO_ADDR
// if k > array then
6511: LD_VAR 0 8
6515: PUSH
6516: LD_VAR 0 1
6520: GREATER
6521: IFFALSE 6531
// k := 1 ;
6523: LD_ADDR_VAR 0 8
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// if not k then
6531: LD_VAR 0 8
6535: NOT
6536: IFFALSE 6548
// k := array ;
6538: LD_ADDR_VAR 0 8
6542: PUSH
6543: LD_VAR 0 1
6547: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6548: LD_ADDR_VAR 0 10
6552: PUSH
6553: LD_VAR 0 10
6557: PPUSH
6558: LD_VAR 0 8
6562: PPUSH
6563: LD_VAR 0 1
6567: PUSH
6568: LD_VAR 0 7
6572: ARRAY
6573: PPUSH
6574: CALL_OW 1
6578: ST_TO_ADDR
// end ;
6579: GO 6492
6581: POP
6582: POP
// array := tmp ;
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: LD_VAR 0 10
6592: ST_TO_ADDR
// end ;
6593: GO 6474
6595: POP
6596: POP
// result := array ;
6597: LD_ADDR_VAR 0 5
6601: PUSH
6602: LD_VAR 0 1
6606: ST_TO_ADDR
// end ;
6607: LD_VAR 0 5
6611: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6612: LD_INT 0
6614: PPUSH
6615: PPUSH
// result := 0 ;
6616: LD_ADDR_VAR 0 3
6620: PUSH
6621: LD_INT 0
6623: ST_TO_ADDR
// if not array or not value in array then
6624: LD_VAR 0 1
6628: NOT
6629: PUSH
6630: LD_VAR 0 2
6634: PUSH
6635: LD_VAR 0 1
6639: IN
6640: NOT
6641: OR
6642: IFFALSE 6646
// exit ;
6644: GO 6700
// for i = 1 to array do
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: DOUBLE
6652: LD_INT 1
6654: DEC
6655: ST_TO_ADDR
6656: LD_VAR 0 1
6660: PUSH
6661: FOR_TO
6662: IFFALSE 6698
// if value = array [ i ] then
6664: LD_VAR 0 2
6668: PUSH
6669: LD_VAR 0 1
6673: PUSH
6674: LD_VAR 0 4
6678: ARRAY
6679: EQUAL
6680: IFFALSE 6696
// begin result := i ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_VAR 0 4
6691: ST_TO_ADDR
// exit ;
6692: POP
6693: POP
6694: GO 6700
// end ;
6696: GO 6661
6698: POP
6699: POP
// end ;
6700: LD_VAR 0 3
6704: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6705: LD_INT 0
6707: PPUSH
// vc_chassis := chassis ;
6708: LD_ADDR_OWVAR 37
6712: PUSH
6713: LD_VAR 0 1
6717: ST_TO_ADDR
// vc_engine := engine ;
6718: LD_ADDR_OWVAR 39
6722: PUSH
6723: LD_VAR 0 2
6727: ST_TO_ADDR
// vc_control := control ;
6728: LD_ADDR_OWVAR 38
6732: PUSH
6733: LD_VAR 0 3
6737: ST_TO_ADDR
// vc_weapon := weapon ;
6738: LD_ADDR_OWVAR 40
6742: PUSH
6743: LD_VAR 0 4
6747: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6748: LD_ADDR_OWVAR 41
6752: PUSH
6753: LD_VAR 0 5
6757: ST_TO_ADDR
// end ;
6758: LD_VAR 0 6
6762: RET
// export function WantPlant ( unit ) ; var task ; begin
6763: LD_INT 0
6765: PPUSH
6766: PPUSH
// result := false ;
6767: LD_ADDR_VAR 0 2
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: LD_VAR 0 1
6784: PPUSH
6785: CALL_OW 437
6789: ST_TO_ADDR
// if task then
6790: LD_VAR 0 3
6794: IFFALSE 6822
// if task [ 1 ] [ 1 ] = p then
6796: LD_VAR 0 3
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PUSH
6805: LD_INT 1
6807: ARRAY
6808: PUSH
6809: LD_STRING p
6811: EQUAL
6812: IFFALSE 6822
// result := true ;
6814: LD_ADDR_VAR 0 2
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// end ;
6822: LD_VAR 0 2
6826: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6827: LD_INT 0
6829: PPUSH
6830: PPUSH
6831: PPUSH
6832: PPUSH
// if pos < 1 then
6833: LD_VAR 0 2
6837: PUSH
6838: LD_INT 1
6840: LESS
6841: IFFALSE 6845
// exit ;
6843: GO 7148
// if pos = 1 then
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 1
6852: EQUAL
6853: IFFALSE 6886
// result := Replace ( arr , pos [ 1 ] , value ) else
6855: LD_ADDR_VAR 0 4
6859: PUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: LD_VAR 0 2
6869: PUSH
6870: LD_INT 1
6872: ARRAY
6873: PPUSH
6874: LD_VAR 0 3
6878: PPUSH
6879: CALL_OW 1
6883: ST_TO_ADDR
6884: GO 7148
// begin tmp := arr ;
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_VAR 0 1
6895: ST_TO_ADDR
// s_arr := [ tmp ] ;
6896: LD_ADDR_VAR 0 7
6900: PUSH
6901: LD_VAR 0 6
6905: PUSH
6906: EMPTY
6907: LIST
6908: ST_TO_ADDR
// for i = 1 to pos - 1 do
6909: LD_ADDR_VAR 0 5
6913: PUSH
6914: DOUBLE
6915: LD_INT 1
6917: DEC
6918: ST_TO_ADDR
6919: LD_VAR 0 2
6923: PUSH
6924: LD_INT 1
6926: MINUS
6927: PUSH
6928: FOR_TO
6929: IFFALSE 6974
// begin tmp := tmp [ pos [ i ] ] ;
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_VAR 0 6
6940: PUSH
6941: LD_VAR 0 2
6945: PUSH
6946: LD_VAR 0 5
6950: ARRAY
6951: ARRAY
6952: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6953: LD_ADDR_VAR 0 7
6957: PUSH
6958: LD_VAR 0 7
6962: PUSH
6963: LD_VAR 0 6
6967: PUSH
6968: EMPTY
6969: LIST
6970: ADD
6971: ST_TO_ADDR
// end ;
6972: GO 6928
6974: POP
6975: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6976: LD_ADDR_VAR 0 6
6980: PUSH
6981: LD_VAR 0 6
6985: PPUSH
6986: LD_VAR 0 2
6990: PUSH
6991: LD_VAR 0 2
6995: ARRAY
6996: PPUSH
6997: LD_VAR 0 3
7001: PPUSH
7002: CALL_OW 1
7006: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7007: LD_ADDR_VAR 0 7
7011: PUSH
7012: LD_VAR 0 7
7016: PPUSH
7017: LD_VAR 0 7
7021: PPUSH
7022: LD_VAR 0 6
7026: PPUSH
7027: CALL_OW 1
7031: ST_TO_ADDR
// for i = s_arr downto 2 do
7032: LD_ADDR_VAR 0 5
7036: PUSH
7037: DOUBLE
7038: LD_VAR 0 7
7042: INC
7043: ST_TO_ADDR
7044: LD_INT 2
7046: PUSH
7047: FOR_DOWNTO
7048: IFFALSE 7132
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7050: LD_ADDR_VAR 0 6
7054: PUSH
7055: LD_VAR 0 7
7059: PUSH
7060: LD_VAR 0 5
7064: PUSH
7065: LD_INT 1
7067: MINUS
7068: ARRAY
7069: PPUSH
7070: LD_VAR 0 2
7074: PUSH
7075: LD_VAR 0 5
7079: PUSH
7080: LD_INT 1
7082: MINUS
7083: ARRAY
7084: PPUSH
7085: LD_VAR 0 7
7089: PUSH
7090: LD_VAR 0 5
7094: ARRAY
7095: PPUSH
7096: CALL_OW 1
7100: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7101: LD_ADDR_VAR 0 7
7105: PUSH
7106: LD_VAR 0 7
7110: PPUSH
7111: LD_VAR 0 5
7115: PUSH
7116: LD_INT 1
7118: MINUS
7119: PPUSH
7120: LD_VAR 0 6
7124: PPUSH
7125: CALL_OW 1
7129: ST_TO_ADDR
// end ;
7130: GO 7047
7132: POP
7133: POP
// result := s_arr [ 1 ] ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_VAR 0 7
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: ST_TO_ADDR
// end ; end ;
7148: LD_VAR 0 4
7152: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7153: LD_INT 0
7155: PPUSH
7156: PPUSH
// if not list then
7157: LD_VAR 0 1
7161: NOT
7162: IFFALSE 7166
// exit ;
7164: GO 7257
// i := list [ pos1 ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_VAR 0 1
7175: PUSH
7176: LD_VAR 0 2
7180: ARRAY
7181: ST_TO_ADDR
// if not i then
7182: LD_VAR 0 5
7186: NOT
7187: IFFALSE 7191
// exit ;
7189: GO 7257
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7191: LD_ADDR_VAR 0 1
7195: PUSH
7196: LD_VAR 0 1
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_VAR 0 1
7210: PUSH
7211: LD_VAR 0 3
7215: ARRAY
7216: PPUSH
7217: CALL_OW 1
7221: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7222: LD_ADDR_VAR 0 1
7226: PUSH
7227: LD_VAR 0 1
7231: PPUSH
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_VAR 0 5
7241: PPUSH
7242: CALL_OW 1
7246: ST_TO_ADDR
// result := list ;
7247: LD_ADDR_VAR 0 4
7251: PUSH
7252: LD_VAR 0 1
7256: ST_TO_ADDR
// end ;
7257: LD_VAR 0 4
7261: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7262: LD_INT 0
7264: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7265: LD_ADDR_VAR 0 5
7269: PUSH
7270: LD_VAR 0 1
7274: PPUSH
7275: CALL_OW 250
7279: PPUSH
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 251
7289: PPUSH
7290: LD_VAR 0 2
7294: PPUSH
7295: LD_VAR 0 3
7299: PPUSH
7300: LD_VAR 0 4
7304: PPUSH
7305: CALL 7683 0 5
7309: ST_TO_ADDR
// end ;
7310: LD_VAR 0 5
7314: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7315: LD_INT 0
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
// if not list or not unit then
7321: LD_VAR 0 2
7325: NOT
7326: PUSH
7327: LD_VAR 0 1
7331: NOT
7332: OR
7333: IFFALSE 7337
// exit ;
7335: GO 7678
// result := [ ] ;
7337: LD_ADDR_VAR 0 5
7341: PUSH
7342: EMPTY
7343: ST_TO_ADDR
// for i in list do
7344: LD_ADDR_VAR 0 6
7348: PUSH
7349: LD_VAR 0 2
7353: PUSH
7354: FOR_IN
7355: IFFALSE 7573
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7357: LD_ADDR_VAR 0 8
7361: PUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: LD_VAR 0 6
7371: PUSH
7372: LD_INT 1
7374: ARRAY
7375: PPUSH
7376: LD_VAR 0 6
7380: PUSH
7381: LD_INT 2
7383: ARRAY
7384: PPUSH
7385: CALL_OW 297
7389: ST_TO_ADDR
// if not Count ( result ) then
7390: LD_VAR 0 5
7394: PPUSH
7395: CALL 3967 0 1
7399: NOT
7400: IFFALSE 7433
// begin result := Join ( result , [ i , tmp ] ) ;
7402: LD_ADDR_VAR 0 5
7406: PUSH
7407: LD_VAR 0 5
7411: PPUSH
7412: LD_VAR 0 6
7416: PUSH
7417: LD_VAR 0 8
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL 39576 0 2
7430: ST_TO_ADDR
// continue ;
7431: GO 7354
// end ; if result [ result ] [ 2 ] <= tmp then
7433: LD_VAR 0 5
7437: PUSH
7438: LD_VAR 0 5
7442: ARRAY
7443: PUSH
7444: LD_INT 2
7446: ARRAY
7447: PUSH
7448: LD_VAR 0 8
7452: LESSEQUAL
7453: IFFALSE 7486
// result := Join ( result , [ i , tmp ] ) else
7455: LD_ADDR_VAR 0 5
7459: PUSH
7460: LD_VAR 0 5
7464: PPUSH
7465: LD_VAR 0 6
7469: PUSH
7470: LD_VAR 0 8
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL 39576 0 2
7483: ST_TO_ADDR
7484: GO 7571
// begin for j := 1 to Count ( result ) do
7486: LD_ADDR_VAR 0 7
7490: PUSH
7491: DOUBLE
7492: LD_INT 1
7494: DEC
7495: ST_TO_ADDR
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL 3967 0 1
7505: PUSH
7506: FOR_TO
7507: IFFALSE 7569
// begin if tmp < result [ j ] [ 2 ] then
7509: LD_VAR 0 8
7513: PUSH
7514: LD_VAR 0 5
7518: PUSH
7519: LD_VAR 0 7
7523: ARRAY
7524: PUSH
7525: LD_INT 2
7527: ARRAY
7528: LESS
7529: IFFALSE 7567
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7531: LD_ADDR_VAR 0 5
7535: PUSH
7536: LD_VAR 0 5
7540: PPUSH
7541: LD_VAR 0 7
7545: PPUSH
7546: LD_VAR 0 6
7550: PUSH
7551: LD_VAR 0 8
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 2
7564: ST_TO_ADDR
// break ;
7565: GO 7569
// end ; end ;
7567: GO 7506
7569: POP
7570: POP
// end ; end ;
7571: GO 7354
7573: POP
7574: POP
// if result and not asc then
7575: LD_VAR 0 5
7579: PUSH
7580: LD_VAR 0 3
7584: NOT
7585: AND
7586: IFFALSE 7603
// result := ReverseArray ( result ) ;
7588: LD_ADDR_VAR 0 5
7592: PUSH
7593: LD_VAR 0 5
7597: PPUSH
7598: CALL 34843 0 1
7602: ST_TO_ADDR
// tmp := [ ] ;
7603: LD_ADDR_VAR 0 8
7607: PUSH
7608: EMPTY
7609: ST_TO_ADDR
// if mode then
7610: LD_VAR 0 4
7614: IFFALSE 7678
// begin for i := 1 to result do
7616: LD_ADDR_VAR 0 6
7620: PUSH
7621: DOUBLE
7622: LD_INT 1
7624: DEC
7625: ST_TO_ADDR
7626: LD_VAR 0 5
7630: PUSH
7631: FOR_TO
7632: IFFALSE 7666
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7634: LD_ADDR_VAR 0 8
7638: PUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: LD_VAR 0 5
7648: PUSH
7649: LD_VAR 0 6
7653: ARRAY
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: CALL 39576 0 2
7663: ST_TO_ADDR
7664: GO 7631
7666: POP
7667: POP
// result := tmp ;
7668: LD_ADDR_VAR 0 5
7672: PUSH
7673: LD_VAR 0 8
7677: ST_TO_ADDR
// end ; end ;
7678: LD_VAR 0 5
7682: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7683: LD_INT 0
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
// if not list then
7689: LD_VAR 0 3
7693: NOT
7694: IFFALSE 7698
// exit ;
7696: GO 8086
// result := [ ] ;
7698: LD_ADDR_VAR 0 6
7702: PUSH
7703: EMPTY
7704: ST_TO_ADDR
// for i in list do
7705: LD_ADDR_VAR 0 7
7709: PUSH
7710: LD_VAR 0 3
7714: PUSH
7715: FOR_IN
7716: IFFALSE 7918
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7718: LD_ADDR_VAR 0 9
7722: PUSH
7723: LD_VAR 0 7
7727: PPUSH
7728: LD_VAR 0 1
7732: PPUSH
7733: LD_VAR 0 2
7737: PPUSH
7738: CALL_OW 297
7742: ST_TO_ADDR
// if not result then
7743: LD_VAR 0 6
7747: NOT
7748: IFFALSE 7774
// result := [ [ i , tmp ] ] else
7750: LD_ADDR_VAR 0 6
7754: PUSH
7755: LD_VAR 0 7
7759: PUSH
7760: LD_VAR 0 9
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: EMPTY
7770: LIST
7771: ST_TO_ADDR
7772: GO 7916
// begin if result [ result ] [ 2 ] <= tmp then
7774: LD_VAR 0 6
7778: PUSH
7779: LD_VAR 0 6
7783: ARRAY
7784: PUSH
7785: LD_INT 2
7787: ARRAY
7788: PUSH
7789: LD_VAR 0 9
7793: LESSEQUAL
7794: IFFALSE 7836
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7796: LD_ADDR_VAR 0 6
7800: PUSH
7801: LD_VAR 0 6
7805: PPUSH
7806: LD_VAR 0 6
7810: PUSH
7811: LD_INT 1
7813: PLUS
7814: PPUSH
7815: LD_VAR 0 7
7819: PUSH
7820: LD_VAR 0 9
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PPUSH
7829: CALL_OW 2
7833: ST_TO_ADDR
7834: GO 7916
// for j := 1 to result do
7836: LD_ADDR_VAR 0 8
7840: PUSH
7841: DOUBLE
7842: LD_INT 1
7844: DEC
7845: ST_TO_ADDR
7846: LD_VAR 0 6
7850: PUSH
7851: FOR_TO
7852: IFFALSE 7914
// begin if tmp < result [ j ] [ 2 ] then
7854: LD_VAR 0 9
7858: PUSH
7859: LD_VAR 0 6
7863: PUSH
7864: LD_VAR 0 8
7868: ARRAY
7869: PUSH
7870: LD_INT 2
7872: ARRAY
7873: LESS
7874: IFFALSE 7912
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7876: LD_ADDR_VAR 0 6
7880: PUSH
7881: LD_VAR 0 6
7885: PPUSH
7886: LD_VAR 0 8
7890: PPUSH
7891: LD_VAR 0 7
7895: PUSH
7896: LD_VAR 0 9
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 2
7909: ST_TO_ADDR
// break ;
7910: GO 7914
// end ; end ;
7912: GO 7851
7914: POP
7915: POP
// end ; end ;
7916: GO 7715
7918: POP
7919: POP
// if result and not asc then
7920: LD_VAR 0 6
7924: PUSH
7925: LD_VAR 0 4
7929: NOT
7930: AND
7931: IFFALSE 8006
// begin tmp := result ;
7933: LD_ADDR_VAR 0 9
7937: PUSH
7938: LD_VAR 0 6
7942: ST_TO_ADDR
// for i = tmp downto 1 do
7943: LD_ADDR_VAR 0 7
7947: PUSH
7948: DOUBLE
7949: LD_VAR 0 9
7953: INC
7954: ST_TO_ADDR
7955: LD_INT 1
7957: PUSH
7958: FOR_DOWNTO
7959: IFFALSE 8004
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7961: LD_ADDR_VAR 0 6
7965: PUSH
7966: LD_VAR 0 6
7970: PPUSH
7971: LD_VAR 0 9
7975: PUSH
7976: LD_VAR 0 7
7980: MINUS
7981: PUSH
7982: LD_INT 1
7984: PLUS
7985: PPUSH
7986: LD_VAR 0 9
7990: PUSH
7991: LD_VAR 0 7
7995: ARRAY
7996: PPUSH
7997: CALL_OW 1
8001: ST_TO_ADDR
8002: GO 7958
8004: POP
8005: POP
// end ; tmp := [ ] ;
8006: LD_ADDR_VAR 0 9
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// if mode then
8013: LD_VAR 0 5
8017: IFFALSE 8086
// begin for i = 1 to result do
8019: LD_ADDR_VAR 0 7
8023: PUSH
8024: DOUBLE
8025: LD_INT 1
8027: DEC
8028: ST_TO_ADDR
8029: LD_VAR 0 6
8033: PUSH
8034: FOR_TO
8035: IFFALSE 8074
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8037: LD_ADDR_VAR 0 9
8041: PUSH
8042: LD_VAR 0 9
8046: PPUSH
8047: LD_VAR 0 7
8051: PPUSH
8052: LD_VAR 0 6
8056: PUSH
8057: LD_VAR 0 7
8061: ARRAY
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: CALL_OW 1
8071: ST_TO_ADDR
8072: GO 8034
8074: POP
8075: POP
// result := tmp ;
8076: LD_ADDR_VAR 0 6
8080: PUSH
8081: LD_VAR 0 9
8085: ST_TO_ADDR
// end ; end ;
8086: LD_VAR 0 6
8090: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
8095: PPUSH
8096: PPUSH
8097: PPUSH
8098: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8099: LD_ADDR_VAR 0 5
8103: PUSH
8104: LD_INT 0
8106: PUSH
8107: LD_INT 0
8109: PUSH
8110: LD_INT 0
8112: PUSH
8113: EMPTY
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: ST_TO_ADDR
// if not x or not y then
8121: LD_VAR 0 2
8125: NOT
8126: PUSH
8127: LD_VAR 0 3
8131: NOT
8132: OR
8133: IFFALSE 8137
// exit ;
8135: GO 9787
// if not range then
8137: LD_VAR 0 4
8141: NOT
8142: IFFALSE 8152
// range := 10 ;
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: LD_INT 10
8151: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8152: LD_ADDR_VAR 0 8
8156: PUSH
8157: LD_INT 81
8159: PUSH
8160: LD_VAR 0 1
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: LD_INT 92
8171: PUSH
8172: LD_VAR 0 2
8176: PUSH
8177: LD_VAR 0 3
8181: PUSH
8182: LD_VAR 0 4
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: LD_INT 21
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PPUSH
8215: CALL_OW 69
8219: ST_TO_ADDR
// if not tmp then
8220: LD_VAR 0 8
8224: NOT
8225: IFFALSE 8229
// exit ;
8227: GO 9787
// for i in tmp do
8229: LD_ADDR_VAR 0 6
8233: PUSH
8234: LD_VAR 0 8
8238: PUSH
8239: FOR_IN
8240: IFFALSE 9762
// begin points := [ 0 , 0 , 0 ] ;
8242: LD_ADDR_VAR 0 9
8246: PUSH
8247: LD_INT 0
8249: PUSH
8250: LD_INT 0
8252: PUSH
8253: LD_INT 0
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: ST_TO_ADDR
// bpoints := 1 ;
8261: LD_ADDR_VAR 0 10
8265: PUSH
8266: LD_INT 1
8268: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8269: LD_VAR 0 6
8273: PPUSH
8274: CALL_OW 247
8278: PUSH
8279: LD_INT 1
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8865
8287: POP
// begin if GetClass ( i ) = 1 then
8288: LD_VAR 0 6
8292: PPUSH
8293: CALL_OW 257
8297: PUSH
8298: LD_INT 1
8300: EQUAL
8301: IFFALSE 8322
// points := [ 10 , 5 , 3 ] ;
8303: LD_ADDR_VAR 0 9
8307: PUSH
8308: LD_INT 10
8310: PUSH
8311: LD_INT 5
8313: PUSH
8314: LD_INT 3
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8322: LD_VAR 0 6
8326: PPUSH
8327: CALL_OW 257
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: LD_INT 4
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: IN
8346: IFFALSE 8367
// points := [ 3 , 2 , 1 ] ;
8348: LD_ADDR_VAR 0 9
8352: PUSH
8353: LD_INT 3
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: LD_INT 1
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8367: LD_VAR 0 6
8371: PPUSH
8372: CALL_OW 257
8376: PUSH
8377: LD_INT 5
8379: EQUAL
8380: IFFALSE 8401
// points := [ 130 , 5 , 2 ] ;
8382: LD_ADDR_VAR 0 9
8386: PUSH
8387: LD_INT 130
8389: PUSH
8390: LD_INT 5
8392: PUSH
8393: LD_INT 2
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8401: LD_VAR 0 6
8405: PPUSH
8406: CALL_OW 257
8410: PUSH
8411: LD_INT 8
8413: EQUAL
8414: IFFALSE 8435
// points := [ 35 , 35 , 30 ] ;
8416: LD_ADDR_VAR 0 9
8420: PUSH
8421: LD_INT 35
8423: PUSH
8424: LD_INT 35
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8435: LD_VAR 0 6
8439: PPUSH
8440: CALL_OW 257
8444: PUSH
8445: LD_INT 9
8447: EQUAL
8448: IFFALSE 8469
// points := [ 20 , 55 , 40 ] ;
8450: LD_ADDR_VAR 0 9
8454: PUSH
8455: LD_INT 20
8457: PUSH
8458: LD_INT 55
8460: PUSH
8461: LD_INT 40
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8469: LD_VAR 0 6
8473: PPUSH
8474: CALL_OW 257
8478: PUSH
8479: LD_INT 12
8481: PUSH
8482: LD_INT 16
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: IN
8489: IFFALSE 8510
// points := [ 5 , 3 , 2 ] ;
8491: LD_ADDR_VAR 0 9
8495: PUSH
8496: LD_INT 5
8498: PUSH
8499: LD_INT 3
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8510: LD_VAR 0 6
8514: PPUSH
8515: CALL_OW 257
8519: PUSH
8520: LD_INT 17
8522: EQUAL
8523: IFFALSE 8544
// points := [ 100 , 50 , 75 ] ;
8525: LD_ADDR_VAR 0 9
8529: PUSH
8530: LD_INT 100
8532: PUSH
8533: LD_INT 50
8535: PUSH
8536: LD_INT 75
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8544: LD_VAR 0 6
8548: PPUSH
8549: CALL_OW 257
8553: PUSH
8554: LD_INT 15
8556: EQUAL
8557: IFFALSE 8578
// points := [ 10 , 5 , 3 ] ;
8559: LD_ADDR_VAR 0 9
8563: PUSH
8564: LD_INT 10
8566: PUSH
8567: LD_INT 5
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8578: LD_VAR 0 6
8582: PPUSH
8583: CALL_OW 257
8587: PUSH
8588: LD_INT 14
8590: EQUAL
8591: IFFALSE 8612
// points := [ 10 , 0 , 0 ] ;
8593: LD_ADDR_VAR 0 9
8597: PUSH
8598: LD_INT 10
8600: PUSH
8601: LD_INT 0
8603: PUSH
8604: LD_INT 0
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8612: LD_VAR 0 6
8616: PPUSH
8617: CALL_OW 257
8621: PUSH
8622: LD_INT 11
8624: EQUAL
8625: IFFALSE 8646
// points := [ 30 , 10 , 5 ] ;
8627: LD_ADDR_VAR 0 9
8631: PUSH
8632: LD_INT 30
8634: PUSH
8635: LD_INT 10
8637: PUSH
8638: LD_INT 5
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8646: LD_VAR 0 1
8650: PPUSH
8651: LD_INT 5
8653: PPUSH
8654: CALL_OW 321
8658: PUSH
8659: LD_INT 2
8661: EQUAL
8662: IFFALSE 8679
// bpoints := bpoints * 1.8 ;
8664: LD_ADDR_VAR 0 10
8668: PUSH
8669: LD_VAR 0 10
8673: PUSH
8674: LD_REAL  1.80000000000000E+0000
8677: MUL
8678: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8679: LD_VAR 0 6
8683: PPUSH
8684: CALL_OW 257
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: LD_INT 2
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 4
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: IN
8707: PUSH
8708: LD_VAR 0 1
8712: PPUSH
8713: LD_INT 51
8715: PPUSH
8716: CALL_OW 321
8720: PUSH
8721: LD_INT 2
8723: EQUAL
8724: AND
8725: IFFALSE 8742
// bpoints := bpoints * 1.2 ;
8727: LD_ADDR_VAR 0 10
8731: PUSH
8732: LD_VAR 0 10
8736: PUSH
8737: LD_REAL  1.20000000000000E+0000
8740: MUL
8741: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8742: LD_VAR 0 6
8746: PPUSH
8747: CALL_OW 257
8751: PUSH
8752: LD_INT 5
8754: PUSH
8755: LD_INT 7
8757: PUSH
8758: LD_INT 9
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: IN
8766: PUSH
8767: LD_VAR 0 1
8771: PPUSH
8772: LD_INT 52
8774: PPUSH
8775: CALL_OW 321
8779: PUSH
8780: LD_INT 2
8782: EQUAL
8783: AND
8784: IFFALSE 8801
// bpoints := bpoints * 1.5 ;
8786: LD_ADDR_VAR 0 10
8790: PUSH
8791: LD_VAR 0 10
8795: PUSH
8796: LD_REAL  1.50000000000000E+0000
8799: MUL
8800: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_INT 66
8808: PPUSH
8809: CALL_OW 321
8813: PUSH
8814: LD_INT 2
8816: EQUAL
8817: IFFALSE 8834
// bpoints := bpoints * 1.1 ;
8819: LD_ADDR_VAR 0 10
8823: PUSH
8824: LD_VAR 0 10
8828: PUSH
8829: LD_REAL  1.10000000000000E+0000
8832: MUL
8833: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8834: LD_ADDR_VAR 0 10
8838: PUSH
8839: LD_VAR 0 10
8843: PUSH
8844: LD_VAR 0 6
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: CALL_OW 259
8856: PUSH
8857: LD_REAL  1.15000000000000E+0000
8860: MUL
8861: MUL
8862: ST_TO_ADDR
// end ; unit_vehicle :
8863: GO 9691
8865: LD_INT 2
8867: DOUBLE
8868: EQUAL
8869: IFTRUE 8873
8871: GO 9679
8873: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8874: LD_VAR 0 6
8878: PPUSH
8879: CALL_OW 264
8883: PUSH
8884: LD_INT 2
8886: PUSH
8887: LD_INT 42
8889: PUSH
8890: LD_INT 24
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: IN
8898: IFFALSE 8919
// points := [ 25 , 5 , 3 ] ;
8900: LD_ADDR_VAR 0 9
8904: PUSH
8905: LD_INT 25
8907: PUSH
8908: LD_INT 5
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8919: LD_VAR 0 6
8923: PPUSH
8924: CALL_OW 264
8928: PUSH
8929: LD_INT 4
8931: PUSH
8932: LD_INT 43
8934: PUSH
8935: LD_INT 25
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: IN
8943: IFFALSE 8964
// points := [ 40 , 15 , 5 ] ;
8945: LD_ADDR_VAR 0 9
8949: PUSH
8950: LD_INT 40
8952: PUSH
8953: LD_INT 15
8955: PUSH
8956: LD_INT 5
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: LIST
8963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8964: LD_VAR 0 6
8968: PPUSH
8969: CALL_OW 264
8973: PUSH
8974: LD_INT 3
8976: PUSH
8977: LD_INT 23
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: IN
8984: IFFALSE 9005
// points := [ 7 , 25 , 8 ] ;
8986: LD_ADDR_VAR 0 9
8990: PUSH
8991: LD_INT 7
8993: PUSH
8994: LD_INT 25
8996: PUSH
8997: LD_INT 8
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9005: LD_VAR 0 6
9009: PPUSH
9010: CALL_OW 264
9014: PUSH
9015: LD_INT 5
9017: PUSH
9018: LD_INT 27
9020: PUSH
9021: LD_INT 44
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: IN
9029: IFFALSE 9050
// points := [ 14 , 50 , 16 ] ;
9031: LD_ADDR_VAR 0 9
9035: PUSH
9036: LD_INT 14
9038: PUSH
9039: LD_INT 50
9041: PUSH
9042: LD_INT 16
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9050: LD_VAR 0 6
9054: PPUSH
9055: CALL_OW 264
9059: PUSH
9060: LD_INT 6
9062: PUSH
9063: LD_INT 46
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: IN
9070: IFFALSE 9091
// points := [ 32 , 120 , 70 ] ;
9072: LD_ADDR_VAR 0 9
9076: PUSH
9077: LD_INT 32
9079: PUSH
9080: LD_INT 120
9082: PUSH
9083: LD_INT 70
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9091: LD_VAR 0 6
9095: PPUSH
9096: CALL_OW 264
9100: PUSH
9101: LD_INT 7
9103: PUSH
9104: LD_INT 28
9106: PUSH
9107: LD_INT 45
9109: PUSH
9110: LD_INT 92
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: IN
9119: IFFALSE 9140
// points := [ 35 , 20 , 45 ] ;
9121: LD_ADDR_VAR 0 9
9125: PUSH
9126: LD_INT 35
9128: PUSH
9129: LD_INT 20
9131: PUSH
9132: LD_INT 45
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: LIST
9139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9140: LD_VAR 0 6
9144: PPUSH
9145: CALL_OW 264
9149: PUSH
9150: LD_INT 47
9152: PUSH
9153: EMPTY
9154: LIST
9155: IN
9156: IFFALSE 9177
// points := [ 67 , 45 , 75 ] ;
9158: LD_ADDR_VAR 0 9
9162: PUSH
9163: LD_INT 67
9165: PUSH
9166: LD_INT 45
9168: PUSH
9169: LD_INT 75
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9177: LD_VAR 0 6
9181: PPUSH
9182: CALL_OW 264
9186: PUSH
9187: LD_INT 26
9189: PUSH
9190: EMPTY
9191: LIST
9192: IN
9193: IFFALSE 9214
// points := [ 120 , 30 , 80 ] ;
9195: LD_ADDR_VAR 0 9
9199: PUSH
9200: LD_INT 120
9202: PUSH
9203: LD_INT 30
9205: PUSH
9206: LD_INT 80
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9214: LD_VAR 0 6
9218: PPUSH
9219: CALL_OW 264
9223: PUSH
9224: LD_INT 22
9226: PUSH
9227: EMPTY
9228: LIST
9229: IN
9230: IFFALSE 9251
// points := [ 40 , 1 , 1 ] ;
9232: LD_ADDR_VAR 0 9
9236: PUSH
9237: LD_INT 40
9239: PUSH
9240: LD_INT 1
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9251: LD_VAR 0 6
9255: PPUSH
9256: CALL_OW 264
9260: PUSH
9261: LD_INT 29
9263: PUSH
9264: EMPTY
9265: LIST
9266: IN
9267: IFFALSE 9288
// points := [ 70 , 200 , 400 ] ;
9269: LD_ADDR_VAR 0 9
9273: PUSH
9274: LD_INT 70
9276: PUSH
9277: LD_INT 200
9279: PUSH
9280: LD_INT 400
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9288: LD_VAR 0 6
9292: PPUSH
9293: CALL_OW 264
9297: PUSH
9298: LD_INT 14
9300: PUSH
9301: LD_INT 53
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: IN
9308: IFFALSE 9329
// points := [ 40 , 10 , 20 ] ;
9310: LD_ADDR_VAR 0 9
9314: PUSH
9315: LD_INT 40
9317: PUSH
9318: LD_INT 10
9320: PUSH
9321: LD_INT 20
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9329: LD_VAR 0 6
9333: PPUSH
9334: CALL_OW 264
9338: PUSH
9339: LD_INT 9
9341: PUSH
9342: EMPTY
9343: LIST
9344: IN
9345: IFFALSE 9366
// points := [ 5 , 70 , 20 ] ;
9347: LD_ADDR_VAR 0 9
9351: PUSH
9352: LD_INT 5
9354: PUSH
9355: LD_INT 70
9357: PUSH
9358: LD_INT 20
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9366: LD_VAR 0 6
9370: PPUSH
9371: CALL_OW 264
9375: PUSH
9376: LD_INT 10
9378: PUSH
9379: EMPTY
9380: LIST
9381: IN
9382: IFFALSE 9403
// points := [ 35 , 110 , 70 ] ;
9384: LD_ADDR_VAR 0 9
9388: PUSH
9389: LD_INT 35
9391: PUSH
9392: LD_INT 110
9394: PUSH
9395: LD_INT 70
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9403: LD_VAR 0 6
9407: PPUSH
9408: CALL_OW 265
9412: PUSH
9413: LD_INT 25
9415: EQUAL
9416: IFFALSE 9437
// points := [ 80 , 65 , 100 ] ;
9418: LD_ADDR_VAR 0 9
9422: PUSH
9423: LD_INT 80
9425: PUSH
9426: LD_INT 65
9428: PUSH
9429: LD_INT 100
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9437: LD_VAR 0 6
9441: PPUSH
9442: CALL_OW 263
9446: PUSH
9447: LD_INT 1
9449: EQUAL
9450: IFFALSE 9485
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9452: LD_ADDR_VAR 0 10
9456: PUSH
9457: LD_VAR 0 10
9461: PUSH
9462: LD_VAR 0 6
9466: PPUSH
9467: CALL_OW 311
9471: PPUSH
9472: LD_INT 3
9474: PPUSH
9475: CALL_OW 259
9479: PUSH
9480: LD_INT 4
9482: MUL
9483: MUL
9484: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9485: LD_VAR 0 6
9489: PPUSH
9490: CALL_OW 263
9494: PUSH
9495: LD_INT 2
9497: EQUAL
9498: IFFALSE 9549
// begin j := IsControledBy ( i ) ;
9500: LD_ADDR_VAR 0 7
9504: PUSH
9505: LD_VAR 0 6
9509: PPUSH
9510: CALL_OW 312
9514: ST_TO_ADDR
// if j then
9515: LD_VAR 0 7
9519: IFFALSE 9549
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9521: LD_ADDR_VAR 0 10
9525: PUSH
9526: LD_VAR 0 10
9530: PUSH
9531: LD_VAR 0 7
9535: PPUSH
9536: LD_INT 3
9538: PPUSH
9539: CALL_OW 259
9543: PUSH
9544: LD_INT 3
9546: MUL
9547: MUL
9548: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9549: LD_VAR 0 6
9553: PPUSH
9554: CALL_OW 264
9558: PUSH
9559: LD_INT 5
9561: PUSH
9562: LD_INT 6
9564: PUSH
9565: LD_INT 46
9567: PUSH
9568: LD_INT 44
9570: PUSH
9571: LD_INT 47
9573: PUSH
9574: LD_INT 45
9576: PUSH
9577: LD_INT 28
9579: PUSH
9580: LD_INT 7
9582: PUSH
9583: LD_INT 27
9585: PUSH
9586: LD_INT 29
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: IN
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: LD_INT 52
9609: PPUSH
9610: CALL_OW 321
9614: PUSH
9615: LD_INT 2
9617: EQUAL
9618: AND
9619: IFFALSE 9636
// bpoints := bpoints * 1.2 ;
9621: LD_ADDR_VAR 0 10
9625: PUSH
9626: LD_VAR 0 10
9630: PUSH
9631: LD_REAL  1.20000000000000E+0000
9634: MUL
9635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9636: LD_VAR 0 6
9640: PPUSH
9641: CALL_OW 264
9645: PUSH
9646: LD_INT 6
9648: PUSH
9649: LD_INT 46
9651: PUSH
9652: LD_INT 47
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: LIST
9659: IN
9660: IFFALSE 9677
// bpoints := bpoints * 1.2 ;
9662: LD_ADDR_VAR 0 10
9666: PUSH
9667: LD_VAR 0 10
9671: PUSH
9672: LD_REAL  1.20000000000000E+0000
9675: MUL
9676: ST_TO_ADDR
// end ; unit_building :
9677: GO 9691
9679: LD_INT 3
9681: DOUBLE
9682: EQUAL
9683: IFTRUE 9687
9685: GO 9690
9687: POP
// ; end ;
9688: GO 9691
9690: POP
// for j = 1 to 3 do
9691: LD_ADDR_VAR 0 7
9695: PUSH
9696: DOUBLE
9697: LD_INT 1
9699: DEC
9700: ST_TO_ADDR
9701: LD_INT 3
9703: PUSH
9704: FOR_TO
9705: IFFALSE 9758
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9707: LD_ADDR_VAR 0 5
9711: PUSH
9712: LD_VAR 0 5
9716: PPUSH
9717: LD_VAR 0 7
9721: PPUSH
9722: LD_VAR 0 5
9726: PUSH
9727: LD_VAR 0 7
9731: ARRAY
9732: PUSH
9733: LD_VAR 0 9
9737: PUSH
9738: LD_VAR 0 7
9742: ARRAY
9743: PUSH
9744: LD_VAR 0 10
9748: MUL
9749: PLUS
9750: PPUSH
9751: CALL_OW 1
9755: ST_TO_ADDR
9756: GO 9704
9758: POP
9759: POP
// end ;
9760: GO 8239
9762: POP
9763: POP
// result := Replace ( result , 4 , tmp ) ;
9764: LD_ADDR_VAR 0 5
9768: PUSH
9769: LD_VAR 0 5
9773: PPUSH
9774: LD_INT 4
9776: PPUSH
9777: LD_VAR 0 8
9781: PPUSH
9782: CALL_OW 1
9786: ST_TO_ADDR
// end ;
9787: LD_VAR 0 5
9791: RET
// export function DangerAtRange ( unit , range ) ; begin
9792: LD_INT 0
9794: PPUSH
// if not unit then
9795: LD_VAR 0 1
9799: NOT
9800: IFFALSE 9804
// exit ;
9802: GO 9849
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9804: LD_ADDR_VAR 0 3
9808: PUSH
9809: LD_VAR 0 1
9813: PPUSH
9814: CALL_OW 255
9818: PPUSH
9819: LD_VAR 0 1
9823: PPUSH
9824: CALL_OW 250
9828: PPUSH
9829: LD_VAR 0 1
9833: PPUSH
9834: CALL_OW 251
9838: PPUSH
9839: LD_VAR 0 2
9843: PPUSH
9844: CALL 8091 0 4
9848: ST_TO_ADDR
// end ;
9849: LD_VAR 0 3
9853: RET
// export function DangerInArea ( side , area ) ; begin
9854: LD_INT 0
9856: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9857: LD_ADDR_VAR 0 3
9861: PUSH
9862: LD_VAR 0 2
9866: PPUSH
9867: LD_INT 81
9869: PUSH
9870: LD_VAR 0 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 70
9883: ST_TO_ADDR
// end ;
9884: LD_VAR 0 3
9888: RET
// export function IsExtension ( b ) ; begin
9889: LD_INT 0
9891: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9892: LD_ADDR_VAR 0 2
9896: PUSH
9897: LD_VAR 0 1
9901: PUSH
9902: LD_INT 23
9904: PUSH
9905: LD_INT 20
9907: PUSH
9908: LD_INT 22
9910: PUSH
9911: LD_INT 17
9913: PUSH
9914: LD_INT 24
9916: PUSH
9917: LD_INT 21
9919: PUSH
9920: LD_INT 19
9922: PUSH
9923: LD_INT 16
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 18
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: IN
9944: ST_TO_ADDR
// end ;
9945: LD_VAR 0 2
9949: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9950: LD_INT 0
9952: PPUSH
9953: PPUSH
9954: PPUSH
// result := [ ] ;
9955: LD_ADDR_VAR 0 4
9959: PUSH
9960: EMPTY
9961: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9962: LD_ADDR_VAR 0 5
9966: PUSH
9967: LD_VAR 0 2
9971: PPUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PPUSH
9982: CALL_OW 70
9986: ST_TO_ADDR
// if not tmp then
9987: LD_VAR 0 5
9991: NOT
9992: IFFALSE 9996
// exit ;
9994: GO 10060
// if checkLink then
9996: LD_VAR 0 3
10000: IFFALSE 10050
// begin for i in tmp do
10002: LD_ADDR_VAR 0 6
10006: PUSH
10007: LD_VAR 0 5
10011: PUSH
10012: FOR_IN
10013: IFFALSE 10048
// if GetBase ( i ) <> base then
10015: LD_VAR 0 6
10019: PPUSH
10020: CALL_OW 274
10024: PUSH
10025: LD_VAR 0 1
10029: NONEQUAL
10030: IFFALSE 10046
// ComLinkToBase ( base , i ) ;
10032: LD_VAR 0 1
10036: PPUSH
10037: LD_VAR 0 6
10041: PPUSH
10042: CALL_OW 169
10046: GO 10012
10048: POP
10049: POP
// end ; result := tmp ;
10050: LD_ADDR_VAR 0 4
10054: PUSH
10055: LD_VAR 0 5
10059: ST_TO_ADDR
// end ;
10060: LD_VAR 0 4
10064: RET
// export function ComComplete ( units , b ) ; var i ; begin
10065: LD_INT 0
10067: PPUSH
10068: PPUSH
// if not units then
10069: LD_VAR 0 1
10073: NOT
10074: IFFALSE 10078
// exit ;
10076: GO 10168
// for i in units do
10078: LD_ADDR_VAR 0 4
10082: PUSH
10083: LD_VAR 0 1
10087: PUSH
10088: FOR_IN
10089: IFFALSE 10166
// if BuildingStatus ( b ) = bs_build then
10091: LD_VAR 0 2
10095: PPUSH
10096: CALL_OW 461
10100: PUSH
10101: LD_INT 1
10103: EQUAL
10104: IFFALSE 10164
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10106: LD_VAR 0 4
10110: PPUSH
10111: LD_STRING h
10113: PUSH
10114: LD_VAR 0 2
10118: PPUSH
10119: CALL_OW 250
10123: PUSH
10124: LD_VAR 0 2
10128: PPUSH
10129: CALL_OW 251
10133: PUSH
10134: LD_VAR 0 2
10138: PUSH
10139: LD_INT 0
10141: PUSH
10142: LD_INT 0
10144: PUSH
10145: LD_INT 0
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: PUSH
10157: EMPTY
10158: LIST
10159: PPUSH
10160: CALL_OW 446
10164: GO 10088
10166: POP
10167: POP
// end ;
10168: LD_VAR 0 3
10172: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10173: LD_INT 0
10175: PPUSH
10176: PPUSH
10177: PPUSH
10178: PPUSH
10179: PPUSH
10180: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10181: LD_VAR 0 1
10185: NOT
10186: PUSH
10187: LD_VAR 0 1
10191: PPUSH
10192: CALL_OW 263
10196: PUSH
10197: LD_INT 2
10199: NONEQUAL
10200: OR
10201: IFFALSE 10205
// exit ;
10203: GO 10521
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10205: LD_ADDR_VAR 0 6
10209: PUSH
10210: LD_INT 22
10212: PUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 255
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 2
10229: PUSH
10230: LD_INT 30
10232: PUSH
10233: LD_INT 36
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 34
10242: PUSH
10243: LD_INT 31
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// if not tmp then
10264: LD_VAR 0 6
10268: NOT
10269: IFFALSE 10273
// exit ;
10271: GO 10521
// result := [ ] ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: EMPTY
10279: ST_TO_ADDR
// for i in tmp do
10280: LD_ADDR_VAR 0 3
10284: PUSH
10285: LD_VAR 0 6
10289: PUSH
10290: FOR_IN
10291: IFFALSE 10362
// begin t := UnitsInside ( i ) ;
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: LD_VAR 0 3
10302: PPUSH
10303: CALL_OW 313
10307: ST_TO_ADDR
// if t then
10308: LD_VAR 0 4
10312: IFFALSE 10360
// for j in t do
10314: LD_ADDR_VAR 0 7
10318: PUSH
10319: LD_VAR 0 4
10323: PUSH
10324: FOR_IN
10325: IFFALSE 10358
// result := Replace ( result , result + 1 , j ) ;
10327: LD_ADDR_VAR 0 2
10331: PUSH
10332: LD_VAR 0 2
10336: PPUSH
10337: LD_VAR 0 2
10341: PUSH
10342: LD_INT 1
10344: PLUS
10345: PPUSH
10346: LD_VAR 0 7
10350: PPUSH
10351: CALL_OW 1
10355: ST_TO_ADDR
10356: GO 10324
10358: POP
10359: POP
// end ;
10360: GO 10290
10362: POP
10363: POP
// if not result then
10364: LD_VAR 0 2
10368: NOT
10369: IFFALSE 10373
// exit ;
10371: GO 10521
// mech := result [ 1 ] ;
10373: LD_ADDR_VAR 0 5
10377: PUSH
10378: LD_VAR 0 2
10382: PUSH
10383: LD_INT 1
10385: ARRAY
10386: ST_TO_ADDR
// if result > 1 then
10387: LD_VAR 0 2
10391: PUSH
10392: LD_INT 1
10394: GREATER
10395: IFFALSE 10507
// begin for i = 2 to result do
10397: LD_ADDR_VAR 0 3
10401: PUSH
10402: DOUBLE
10403: LD_INT 2
10405: DEC
10406: ST_TO_ADDR
10407: LD_VAR 0 2
10411: PUSH
10412: FOR_TO
10413: IFFALSE 10505
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10415: LD_ADDR_VAR 0 4
10419: PUSH
10420: LD_VAR 0 2
10424: PUSH
10425: LD_VAR 0 3
10429: ARRAY
10430: PPUSH
10431: LD_INT 3
10433: PPUSH
10434: CALL_OW 259
10438: PUSH
10439: LD_VAR 0 2
10443: PUSH
10444: LD_VAR 0 3
10448: ARRAY
10449: PPUSH
10450: CALL_OW 432
10454: MINUS
10455: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10456: LD_VAR 0 4
10460: PUSH
10461: LD_VAR 0 5
10465: PPUSH
10466: LD_INT 3
10468: PPUSH
10469: CALL_OW 259
10473: PUSH
10474: LD_VAR 0 5
10478: PPUSH
10479: CALL_OW 432
10483: MINUS
10484: GREATEREQUAL
10485: IFFALSE 10503
// mech := result [ i ] ;
10487: LD_ADDR_VAR 0 5
10491: PUSH
10492: LD_VAR 0 2
10496: PUSH
10497: LD_VAR 0 3
10501: ARRAY
10502: ST_TO_ADDR
// end ;
10503: GO 10412
10505: POP
10506: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_VAR 0 5
10516: PPUSH
10517: CALL_OW 135
// end ;
10521: LD_VAR 0 2
10525: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10526: LD_INT 0
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
10533: PPUSH
10534: PPUSH
10535: PPUSH
10536: PPUSH
10537: PPUSH
10538: PPUSH
10539: PPUSH
10540: PPUSH
// result := [ ] ;
10541: LD_ADDR_VAR 0 7
10545: PUSH
10546: EMPTY
10547: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10548: LD_VAR 0 1
10552: PPUSH
10553: CALL_OW 266
10557: PUSH
10558: LD_INT 0
10560: PUSH
10561: LD_INT 1
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: IN
10568: NOT
10569: IFFALSE 10573
// exit ;
10571: GO 12207
// if name then
10573: LD_VAR 0 3
10577: IFFALSE 10593
// SetBName ( base_dep , name ) ;
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: CALL_OW 500
// base := GetBase ( base_dep ) ;
10593: LD_ADDR_VAR 0 15
10597: PUSH
10598: LD_VAR 0 1
10602: PPUSH
10603: CALL_OW 274
10607: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10608: LD_ADDR_VAR 0 16
10612: PUSH
10613: LD_VAR 0 1
10617: PPUSH
10618: CALL_OW 255
10622: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10623: LD_ADDR_VAR 0 17
10627: PUSH
10628: LD_VAR 0 1
10632: PPUSH
10633: CALL_OW 248
10637: ST_TO_ADDR
// if sources then
10638: LD_VAR 0 5
10642: IFFALSE 10689
// for i = 1 to 3 do
10644: LD_ADDR_VAR 0 8
10648: PUSH
10649: DOUBLE
10650: LD_INT 1
10652: DEC
10653: ST_TO_ADDR
10654: LD_INT 3
10656: PUSH
10657: FOR_TO
10658: IFFALSE 10687
// AddResourceType ( base , i , sources [ i ] ) ;
10660: LD_VAR 0 15
10664: PPUSH
10665: LD_VAR 0 8
10669: PPUSH
10670: LD_VAR 0 5
10674: PUSH
10675: LD_VAR 0 8
10679: ARRAY
10680: PPUSH
10681: CALL_OW 276
10685: GO 10657
10687: POP
10688: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10689: LD_ADDR_VAR 0 18
10693: PUSH
10694: LD_VAR 0 15
10698: PPUSH
10699: LD_VAR 0 2
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL 9950 0 3
10711: ST_TO_ADDR
// InitHc ;
10712: CALL_OW 19
// InitUc ;
10716: CALL_OW 18
// uc_side := side ;
10720: LD_ADDR_OWVAR 20
10724: PUSH
10725: LD_VAR 0 16
10729: ST_TO_ADDR
// uc_nation := nation ;
10730: LD_ADDR_OWVAR 21
10734: PUSH
10735: LD_VAR 0 17
10739: ST_TO_ADDR
// if buildings then
10740: LD_VAR 0 18
10744: IFFALSE 12066
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10746: LD_ADDR_VAR 0 19
10750: PUSH
10751: LD_VAR 0 18
10755: PPUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 30
10761: PUSH
10762: LD_INT 29
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 30
10771: PUSH
10772: LD_INT 30
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 72
10788: ST_TO_ADDR
// if tmp then
10789: LD_VAR 0 19
10793: IFFALSE 10841
// for i in tmp do
10795: LD_ADDR_VAR 0 8
10799: PUSH
10800: LD_VAR 0 19
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10839
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10808: LD_VAR 0 8
10812: PPUSH
10813: CALL_OW 250
10817: PPUSH
10818: LD_VAR 0 8
10822: PPUSH
10823: CALL_OW 251
10827: PPUSH
10828: LD_VAR 0 16
10832: PPUSH
10833: CALL_OW 441
10837: GO 10805
10839: POP
10840: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10841: LD_VAR 0 18
10845: PPUSH
10846: LD_INT 2
10848: PUSH
10849: LD_INT 30
10851: PUSH
10852: LD_INT 32
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 30
10861: PUSH
10862: LD_INT 33
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: PPUSH
10874: CALL_OW 72
10878: IFFALSE 10966
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10880: LD_ADDR_VAR 0 8
10884: PUSH
10885: LD_VAR 0 18
10889: PPUSH
10890: LD_INT 2
10892: PUSH
10893: LD_INT 30
10895: PUSH
10896: LD_INT 32
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 30
10905: PUSH
10906: LD_INT 33
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 72
10922: PUSH
10923: FOR_IN
10924: IFFALSE 10964
// begin if not GetBWeapon ( i ) then
10926: LD_VAR 0 8
10930: PPUSH
10931: CALL_OW 269
10935: NOT
10936: IFFALSE 10962
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10938: LD_VAR 0 8
10942: PPUSH
10943: LD_VAR 0 8
10947: PPUSH
10948: LD_VAR 0 2
10952: PPUSH
10953: CALL 12212 0 2
10957: PPUSH
10958: CALL_OW 431
// end ;
10962: GO 10923
10964: POP
10965: POP
// end ; for i = 1 to personel do
10966: LD_ADDR_VAR 0 8
10970: PUSH
10971: DOUBLE
10972: LD_INT 1
10974: DEC
10975: ST_TO_ADDR
10976: LD_VAR 0 6
10980: PUSH
10981: FOR_TO
10982: IFFALSE 12046
// begin if i > 4 then
10984: LD_VAR 0 8
10988: PUSH
10989: LD_INT 4
10991: GREATER
10992: IFFALSE 10996
// break ;
10994: GO 12046
// case i of 1 :
10996: LD_VAR 0 8
11000: PUSH
11001: LD_INT 1
11003: DOUBLE
11004: EQUAL
11005: IFTRUE 11009
11007: GO 11089
11009: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11010: LD_ADDR_VAR 0 12
11014: PUSH
11015: LD_VAR 0 18
11019: PPUSH
11020: LD_INT 22
11022: PUSH
11023: LD_VAR 0 16
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 58
11034: PUSH
11035: EMPTY
11036: LIST
11037: PUSH
11038: LD_INT 2
11040: PUSH
11041: LD_INT 30
11043: PUSH
11044: LD_INT 32
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 30
11053: PUSH
11054: LD_INT 4
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 30
11063: PUSH
11064: LD_INT 5
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 72
11086: ST_TO_ADDR
11087: GO 11311
11089: LD_INT 2
11091: DOUBLE
11092: EQUAL
11093: IFTRUE 11097
11095: GO 11159
11097: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11098: LD_ADDR_VAR 0 12
11102: PUSH
11103: LD_VAR 0 18
11107: PPUSH
11108: LD_INT 22
11110: PUSH
11111: LD_VAR 0 16
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 2
11122: PUSH
11123: LD_INT 30
11125: PUSH
11126: LD_INT 0
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 30
11135: PUSH
11136: LD_INT 1
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PPUSH
11152: CALL_OW 72
11156: ST_TO_ADDR
11157: GO 11311
11159: LD_INT 3
11161: DOUBLE
11162: EQUAL
11163: IFTRUE 11167
11165: GO 11229
11167: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11168: LD_ADDR_VAR 0 12
11172: PUSH
11173: LD_VAR 0 18
11177: PPUSH
11178: LD_INT 22
11180: PUSH
11181: LD_VAR 0 16
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: LD_INT 30
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 30
11205: PUSH
11206: LD_INT 3
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PPUSH
11222: CALL_OW 72
11226: ST_TO_ADDR
11227: GO 11311
11229: LD_INT 4
11231: DOUBLE
11232: EQUAL
11233: IFTRUE 11237
11235: GO 11310
11237: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11238: LD_ADDR_VAR 0 12
11242: PUSH
11243: LD_VAR 0 18
11247: PPUSH
11248: LD_INT 22
11250: PUSH
11251: LD_VAR 0 16
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 2
11262: PUSH
11263: LD_INT 30
11265: PUSH
11266: LD_INT 6
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 30
11275: PUSH
11276: LD_INT 7
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 30
11285: PUSH
11286: LD_INT 8
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: CALL_OW 72
11307: ST_TO_ADDR
11308: GO 11311
11310: POP
// if i = 1 then
11311: LD_VAR 0 8
11315: PUSH
11316: LD_INT 1
11318: EQUAL
11319: IFFALSE 11430
// begin tmp := [ ] ;
11321: LD_ADDR_VAR 0 19
11325: PUSH
11326: EMPTY
11327: ST_TO_ADDR
// for j in f do
11328: LD_ADDR_VAR 0 9
11332: PUSH
11333: LD_VAR 0 12
11337: PUSH
11338: FOR_IN
11339: IFFALSE 11412
// if GetBType ( j ) = b_bunker then
11341: LD_VAR 0 9
11345: PPUSH
11346: CALL_OW 266
11350: PUSH
11351: LD_INT 32
11353: EQUAL
11354: IFFALSE 11381
// tmp := Insert ( tmp , 1 , j ) else
11356: LD_ADDR_VAR 0 19
11360: PUSH
11361: LD_VAR 0 19
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: LD_VAR 0 9
11373: PPUSH
11374: CALL_OW 2
11378: ST_TO_ADDR
11379: GO 11410
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11381: LD_ADDR_VAR 0 19
11385: PUSH
11386: LD_VAR 0 19
11390: PPUSH
11391: LD_VAR 0 19
11395: PUSH
11396: LD_INT 1
11398: PLUS
11399: PPUSH
11400: LD_VAR 0 9
11404: PPUSH
11405: CALL_OW 2
11409: ST_TO_ADDR
11410: GO 11338
11412: POP
11413: POP
// if tmp then
11414: LD_VAR 0 19
11418: IFFALSE 11430
// f := tmp ;
11420: LD_ADDR_VAR 0 12
11424: PUSH
11425: LD_VAR 0 19
11429: ST_TO_ADDR
// end ; x := personel [ i ] ;
11430: LD_ADDR_VAR 0 13
11434: PUSH
11435: LD_VAR 0 6
11439: PUSH
11440: LD_VAR 0 8
11444: ARRAY
11445: ST_TO_ADDR
// if x = - 1 then
11446: LD_VAR 0 13
11450: PUSH
11451: LD_INT 1
11453: NEG
11454: EQUAL
11455: IFFALSE 11664
// begin for j in f do
11457: LD_ADDR_VAR 0 9
11461: PUSH
11462: LD_VAR 0 12
11466: PUSH
11467: FOR_IN
11468: IFFALSE 11660
// repeat InitHc ;
11470: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11474: LD_VAR 0 9
11478: PPUSH
11479: CALL_OW 266
11483: PUSH
11484: LD_INT 5
11486: EQUAL
11487: IFFALSE 11557
// begin if UnitsInside ( j ) < 3 then
11489: LD_VAR 0 9
11493: PPUSH
11494: CALL_OW 313
11498: PUSH
11499: LD_INT 3
11501: LESS
11502: IFFALSE 11538
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11504: LD_INT 0
11506: PPUSH
11507: LD_INT 5
11509: PUSH
11510: LD_INT 8
11512: PUSH
11513: LD_INT 9
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: PUSH
11521: LD_VAR 0 17
11525: ARRAY
11526: PPUSH
11527: LD_VAR 0 4
11531: PPUSH
11532: CALL_OW 380
11536: GO 11555
// PrepareHuman ( false , i , skill ) ;
11538: LD_INT 0
11540: PPUSH
11541: LD_VAR 0 8
11545: PPUSH
11546: LD_VAR 0 4
11550: PPUSH
11551: CALL_OW 380
// end else
11555: GO 11574
// PrepareHuman ( false , i , skill ) ;
11557: LD_INT 0
11559: PPUSH
11560: LD_VAR 0 8
11564: PPUSH
11565: LD_VAR 0 4
11569: PPUSH
11570: CALL_OW 380
// un := CreateHuman ;
11574: LD_ADDR_VAR 0 14
11578: PUSH
11579: CALL_OW 44
11583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11584: LD_ADDR_VAR 0 7
11588: PUSH
11589: LD_VAR 0 7
11593: PPUSH
11594: LD_INT 1
11596: PPUSH
11597: LD_VAR 0 14
11601: PPUSH
11602: CALL_OW 2
11606: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11607: LD_VAR 0 14
11611: PPUSH
11612: LD_VAR 0 9
11616: PPUSH
11617: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11621: LD_VAR 0 9
11625: PPUSH
11626: CALL_OW 313
11630: PUSH
11631: LD_INT 6
11633: EQUAL
11634: PUSH
11635: LD_VAR 0 9
11639: PPUSH
11640: CALL_OW 266
11644: PUSH
11645: LD_INT 32
11647: PUSH
11648: LD_INT 31
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: IN
11655: OR
11656: IFFALSE 11470
11658: GO 11467
11660: POP
11661: POP
// end else
11662: GO 12044
// for j = 1 to x do
11664: LD_ADDR_VAR 0 9
11668: PUSH
11669: DOUBLE
11670: LD_INT 1
11672: DEC
11673: ST_TO_ADDR
11674: LD_VAR 0 13
11678: PUSH
11679: FOR_TO
11680: IFFALSE 12042
// begin InitHc ;
11682: CALL_OW 19
// if not f then
11686: LD_VAR 0 12
11690: NOT
11691: IFFALSE 11780
// begin PrepareHuman ( false , i , skill ) ;
11693: LD_INT 0
11695: PPUSH
11696: LD_VAR 0 8
11700: PPUSH
11701: LD_VAR 0 4
11705: PPUSH
11706: CALL_OW 380
// un := CreateHuman ;
11710: LD_ADDR_VAR 0 14
11714: PUSH
11715: CALL_OW 44
11719: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11720: LD_ADDR_VAR 0 7
11724: PUSH
11725: LD_VAR 0 7
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: LD_VAR 0 14
11737: PPUSH
11738: CALL_OW 2
11742: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11743: LD_VAR 0 14
11747: PPUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 250
11757: PPUSH
11758: LD_VAR 0 1
11762: PPUSH
11763: CALL_OW 251
11767: PPUSH
11768: LD_INT 10
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 50
// continue ;
11778: GO 11679
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11780: LD_VAR 0 12
11784: PUSH
11785: LD_INT 1
11787: ARRAY
11788: PPUSH
11789: CALL_OW 313
11793: PUSH
11794: LD_VAR 0 12
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 266
11807: PUSH
11808: LD_INT 32
11810: PUSH
11811: LD_INT 31
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: IN
11818: AND
11819: PUSH
11820: LD_VAR 0 12
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: CALL_OW 313
11833: PUSH
11834: LD_INT 6
11836: EQUAL
11837: OR
11838: IFFALSE 11858
// f := Delete ( f , 1 ) ;
11840: LD_ADDR_VAR 0 12
11844: PUSH
11845: LD_VAR 0 12
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 3
11857: ST_TO_ADDR
// if not f then
11858: LD_VAR 0 12
11862: NOT
11863: IFFALSE 11881
// begin x := x + 2 ;
11865: LD_ADDR_VAR 0 13
11869: PUSH
11870: LD_VAR 0 13
11874: PUSH
11875: LD_INT 2
11877: PLUS
11878: ST_TO_ADDR
// continue ;
11879: GO 11679
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11881: LD_VAR 0 12
11885: PUSH
11886: LD_INT 1
11888: ARRAY
11889: PPUSH
11890: CALL_OW 266
11894: PUSH
11895: LD_INT 5
11897: EQUAL
11898: IFFALSE 11972
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11900: LD_VAR 0 12
11904: PUSH
11905: LD_INT 1
11907: ARRAY
11908: PPUSH
11909: CALL_OW 313
11913: PUSH
11914: LD_INT 3
11916: LESS
11917: IFFALSE 11953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11919: LD_INT 0
11921: PPUSH
11922: LD_INT 5
11924: PUSH
11925: LD_INT 8
11927: PUSH
11928: LD_INT 9
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: PUSH
11936: LD_VAR 0 17
11940: ARRAY
11941: PPUSH
11942: LD_VAR 0 4
11946: PPUSH
11947: CALL_OW 380
11951: GO 11970
// PrepareHuman ( false , i , skill ) ;
11953: LD_INT 0
11955: PPUSH
11956: LD_VAR 0 8
11960: PPUSH
11961: LD_VAR 0 4
11965: PPUSH
11966: CALL_OW 380
// end else
11970: GO 11989
// PrepareHuman ( false , i , skill ) ;
11972: LD_INT 0
11974: PPUSH
11975: LD_VAR 0 8
11979: PPUSH
11980: LD_VAR 0 4
11984: PPUSH
11985: CALL_OW 380
// un := CreateHuman ;
11989: LD_ADDR_VAR 0 14
11993: PUSH
11994: CALL_OW 44
11998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11999: LD_ADDR_VAR 0 7
12003: PUSH
12004: LD_VAR 0 7
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: LD_VAR 0 14
12016: PPUSH
12017: CALL_OW 2
12021: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12022: LD_VAR 0 14
12026: PPUSH
12027: LD_VAR 0 12
12031: PUSH
12032: LD_INT 1
12034: ARRAY
12035: PPUSH
12036: CALL_OW 52
// end ;
12040: GO 11679
12042: POP
12043: POP
// end ;
12044: GO 10981
12046: POP
12047: POP
// result := result ^ buildings ;
12048: LD_ADDR_VAR 0 7
12052: PUSH
12053: LD_VAR 0 7
12057: PUSH
12058: LD_VAR 0 18
12062: ADD
12063: ST_TO_ADDR
// end else
12064: GO 12207
// begin for i = 1 to personel do
12066: LD_ADDR_VAR 0 8
12070: PUSH
12071: DOUBLE
12072: LD_INT 1
12074: DEC
12075: ST_TO_ADDR
12076: LD_VAR 0 6
12080: PUSH
12081: FOR_TO
12082: IFFALSE 12205
// begin if i > 4 then
12084: LD_VAR 0 8
12088: PUSH
12089: LD_INT 4
12091: GREATER
12092: IFFALSE 12096
// break ;
12094: GO 12205
// x := personel [ i ] ;
12096: LD_ADDR_VAR 0 13
12100: PUSH
12101: LD_VAR 0 6
12105: PUSH
12106: LD_VAR 0 8
12110: ARRAY
12111: ST_TO_ADDR
// if x = - 1 then
12112: LD_VAR 0 13
12116: PUSH
12117: LD_INT 1
12119: NEG
12120: EQUAL
12121: IFFALSE 12125
// continue ;
12123: GO 12081
// PrepareHuman ( false , i , skill ) ;
12125: LD_INT 0
12127: PPUSH
12128: LD_VAR 0 8
12132: PPUSH
12133: LD_VAR 0 4
12137: PPUSH
12138: CALL_OW 380
// un := CreateHuman ;
12142: LD_ADDR_VAR 0 14
12146: PUSH
12147: CALL_OW 44
12151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12152: LD_VAR 0 14
12156: PPUSH
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 250
12166: PPUSH
12167: LD_VAR 0 1
12171: PPUSH
12172: CALL_OW 251
12176: PPUSH
12177: LD_INT 10
12179: PPUSH
12180: LD_INT 0
12182: PPUSH
12183: CALL_OW 50
// result := result ^ un ;
12187: LD_ADDR_VAR 0 7
12191: PUSH
12192: LD_VAR 0 7
12196: PUSH
12197: LD_VAR 0 14
12201: ADD
12202: ST_TO_ADDR
// end ;
12203: GO 12081
12205: POP
12206: POP
// end ; end ;
12207: LD_VAR 0 7
12211: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
12218: PPUSH
12219: PPUSH
12220: PPUSH
12221: PPUSH
12222: PPUSH
12223: PPUSH
12224: PPUSH
12225: PPUSH
12226: PPUSH
12227: PPUSH
12228: PPUSH
12229: PPUSH
// result := false ;
12230: LD_ADDR_VAR 0 3
12234: PUSH
12235: LD_INT 0
12237: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12238: LD_VAR 0 1
12242: NOT
12243: PUSH
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 266
12253: PUSH
12254: LD_INT 32
12256: PUSH
12257: LD_INT 33
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: IN
12264: NOT
12265: OR
12266: IFFALSE 12270
// exit ;
12268: GO 13379
// nat := GetNation ( tower ) ;
12270: LD_ADDR_VAR 0 12
12274: PUSH
12275: LD_VAR 0 1
12279: PPUSH
12280: CALL_OW 248
12284: ST_TO_ADDR
// side := GetSide ( tower ) ;
12285: LD_ADDR_VAR 0 16
12289: PUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 255
12299: ST_TO_ADDR
// x := GetX ( tower ) ;
12300: LD_ADDR_VAR 0 10
12304: PUSH
12305: LD_VAR 0 1
12309: PPUSH
12310: CALL_OW 250
12314: ST_TO_ADDR
// y := GetY ( tower ) ;
12315: LD_ADDR_VAR 0 11
12319: PUSH
12320: LD_VAR 0 1
12324: PPUSH
12325: CALL_OW 251
12329: ST_TO_ADDR
// if not x or not y then
12330: LD_VAR 0 10
12334: NOT
12335: PUSH
12336: LD_VAR 0 11
12340: NOT
12341: OR
12342: IFFALSE 12346
// exit ;
12344: GO 13379
// weapon := 0 ;
12346: LD_ADDR_VAR 0 18
12350: PUSH
12351: LD_INT 0
12353: ST_TO_ADDR
// fac_list := [ ] ;
12354: LD_ADDR_VAR 0 17
12358: PUSH
12359: EMPTY
12360: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12361: LD_ADDR_VAR 0 6
12365: PUSH
12366: LD_VAR 0 1
12370: PPUSH
12371: CALL_OW 274
12375: PPUSH
12376: LD_VAR 0 2
12380: PPUSH
12381: LD_INT 0
12383: PPUSH
12384: CALL 9950 0 3
12388: PPUSH
12389: LD_INT 30
12391: PUSH
12392: LD_INT 3
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 72
12403: ST_TO_ADDR
// if not factories then
12404: LD_VAR 0 6
12408: NOT
12409: IFFALSE 12413
// exit ;
12411: GO 13379
// for i in factories do
12413: LD_ADDR_VAR 0 8
12417: PUSH
12418: LD_VAR 0 6
12422: PUSH
12423: FOR_IN
12424: IFFALSE 12449
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12426: LD_ADDR_VAR 0 17
12430: PUSH
12431: LD_VAR 0 17
12435: PUSH
12436: LD_VAR 0 8
12440: PPUSH
12441: CALL_OW 478
12445: UNION
12446: ST_TO_ADDR
12447: GO 12423
12449: POP
12450: POP
// if not fac_list then
12451: LD_VAR 0 17
12455: NOT
12456: IFFALSE 12460
// exit ;
12458: GO 13379
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12460: LD_ADDR_VAR 0 5
12464: PUSH
12465: LD_INT 4
12467: PUSH
12468: LD_INT 5
12470: PUSH
12471: LD_INT 9
12473: PUSH
12474: LD_INT 10
12476: PUSH
12477: LD_INT 6
12479: PUSH
12480: LD_INT 7
12482: PUSH
12483: LD_INT 11
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 27
12497: PUSH
12498: LD_INT 28
12500: PUSH
12501: LD_INT 26
12503: PUSH
12504: LD_INT 30
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 43
12515: PUSH
12516: LD_INT 44
12518: PUSH
12519: LD_INT 46
12521: PUSH
12522: LD_INT 45
12524: PUSH
12525: LD_INT 47
12527: PUSH
12528: LD_INT 49
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: LD_VAR 0 12
12548: ARRAY
12549: ST_TO_ADDR
// list := list isect fac_list ;
12550: LD_ADDR_VAR 0 5
12554: PUSH
12555: LD_VAR 0 5
12559: PUSH
12560: LD_VAR 0 17
12564: ISECT
12565: ST_TO_ADDR
// if not list then
12566: LD_VAR 0 5
12570: NOT
12571: IFFALSE 12575
// exit ;
12573: GO 13379
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12575: LD_VAR 0 12
12579: PUSH
12580: LD_INT 3
12582: EQUAL
12583: PUSH
12584: LD_INT 49
12586: PUSH
12587: LD_VAR 0 5
12591: IN
12592: AND
12593: PUSH
12594: LD_INT 31
12596: PPUSH
12597: LD_VAR 0 16
12601: PPUSH
12602: CALL_OW 321
12606: PUSH
12607: LD_INT 2
12609: EQUAL
12610: AND
12611: IFFALSE 12671
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12613: LD_INT 22
12615: PUSH
12616: LD_VAR 0 16
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 35
12627: PUSH
12628: LD_INT 49
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 91
12637: PUSH
12638: LD_VAR 0 1
12642: PUSH
12643: LD_INT 10
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: LIST
12655: PPUSH
12656: CALL_OW 69
12660: NOT
12661: IFFALSE 12671
// weapon := ru_time_lapser ;
12663: LD_ADDR_VAR 0 18
12667: PUSH
12668: LD_INT 49
12670: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12671: LD_VAR 0 12
12675: PUSH
12676: LD_INT 1
12678: PUSH
12679: LD_INT 2
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: IN
12686: PUSH
12687: LD_INT 11
12689: PUSH
12690: LD_VAR 0 5
12694: IN
12695: PUSH
12696: LD_INT 30
12698: PUSH
12699: LD_VAR 0 5
12703: IN
12704: OR
12705: AND
12706: PUSH
12707: LD_INT 6
12709: PPUSH
12710: LD_VAR 0 16
12714: PPUSH
12715: CALL_OW 321
12719: PUSH
12720: LD_INT 2
12722: EQUAL
12723: AND
12724: IFFALSE 12889
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12726: LD_INT 22
12728: PUSH
12729: LD_VAR 0 16
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 2
12740: PUSH
12741: LD_INT 35
12743: PUSH
12744: LD_INT 11
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 35
12753: PUSH
12754: LD_INT 30
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 91
12768: PUSH
12769: LD_VAR 0 1
12773: PUSH
12774: LD_INT 18
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: NOT
12792: PUSH
12793: LD_INT 22
12795: PUSH
12796: LD_VAR 0 16
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 2
12807: PUSH
12808: LD_INT 30
12810: PUSH
12811: LD_INT 32
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 30
12820: PUSH
12821: LD_INT 33
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 91
12835: PUSH
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 12
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: PPUSH
12857: CALL_OW 69
12861: PUSH
12862: LD_INT 2
12864: GREATER
12865: AND
12866: IFFALSE 12889
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12868: LD_ADDR_VAR 0 18
12872: PUSH
12873: LD_INT 11
12875: PUSH
12876: LD_INT 30
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_VAR 0 12
12887: ARRAY
12888: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12889: LD_VAR 0 18
12893: NOT
12894: PUSH
12895: LD_INT 40
12897: PPUSH
12898: LD_VAR 0 16
12902: PPUSH
12903: CALL_OW 321
12907: PUSH
12908: LD_INT 2
12910: EQUAL
12911: AND
12912: PUSH
12913: LD_INT 7
12915: PUSH
12916: LD_VAR 0 5
12920: IN
12921: PUSH
12922: LD_INT 28
12924: PUSH
12925: LD_VAR 0 5
12929: IN
12930: OR
12931: PUSH
12932: LD_INT 45
12934: PUSH
12935: LD_VAR 0 5
12939: IN
12940: OR
12941: AND
12942: IFFALSE 13196
// begin hex := GetHexInfo ( x , y ) ;
12944: LD_ADDR_VAR 0 4
12948: PUSH
12949: LD_VAR 0 10
12953: PPUSH
12954: LD_VAR 0 11
12958: PPUSH
12959: CALL_OW 546
12963: ST_TO_ADDR
// if hex [ 1 ] then
12964: LD_VAR 0 4
12968: PUSH
12969: LD_INT 1
12971: ARRAY
12972: IFFALSE 12976
// exit ;
12974: GO 13379
// height := hex [ 2 ] ;
12976: LD_ADDR_VAR 0 15
12980: PUSH
12981: LD_VAR 0 4
12985: PUSH
12986: LD_INT 2
12988: ARRAY
12989: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12990: LD_ADDR_VAR 0 14
12994: PUSH
12995: LD_INT 0
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: LD_INT 5
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: ST_TO_ADDR
// for i in tmp do
13013: LD_ADDR_VAR 0 8
13017: PUSH
13018: LD_VAR 0 14
13022: PUSH
13023: FOR_IN
13024: IFFALSE 13194
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13026: LD_ADDR_VAR 0 9
13030: PUSH
13031: LD_VAR 0 10
13035: PPUSH
13036: LD_VAR 0 8
13040: PPUSH
13041: LD_INT 5
13043: PPUSH
13044: CALL_OW 272
13048: PUSH
13049: LD_VAR 0 11
13053: PPUSH
13054: LD_VAR 0 8
13058: PPUSH
13059: LD_INT 5
13061: PPUSH
13062: CALL_OW 273
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13071: LD_VAR 0 9
13075: PUSH
13076: LD_INT 1
13078: ARRAY
13079: PPUSH
13080: LD_VAR 0 9
13084: PUSH
13085: LD_INT 2
13087: ARRAY
13088: PPUSH
13089: CALL_OW 488
13093: IFFALSE 13192
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13095: LD_ADDR_VAR 0 4
13099: PUSH
13100: LD_VAR 0 9
13104: PUSH
13105: LD_INT 1
13107: ARRAY
13108: PPUSH
13109: LD_VAR 0 9
13113: PUSH
13114: LD_INT 2
13116: ARRAY
13117: PPUSH
13118: CALL_OW 546
13122: ST_TO_ADDR
// if hex [ 1 ] then
13123: LD_VAR 0 4
13127: PUSH
13128: LD_INT 1
13130: ARRAY
13131: IFFALSE 13135
// continue ;
13133: GO 13023
// h := hex [ 2 ] ;
13135: LD_ADDR_VAR 0 13
13139: PUSH
13140: LD_VAR 0 4
13144: PUSH
13145: LD_INT 2
13147: ARRAY
13148: ST_TO_ADDR
// if h + 7 < height then
13149: LD_VAR 0 13
13153: PUSH
13154: LD_INT 7
13156: PLUS
13157: PUSH
13158: LD_VAR 0 15
13162: LESS
13163: IFFALSE 13192
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13165: LD_ADDR_VAR 0 18
13169: PUSH
13170: LD_INT 7
13172: PUSH
13173: LD_INT 28
13175: PUSH
13176: LD_INT 45
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: PUSH
13184: LD_VAR 0 12
13188: ARRAY
13189: ST_TO_ADDR
// break ;
13190: GO 13194
// end ; end ; end ;
13192: GO 13023
13194: POP
13195: POP
// end ; if not weapon then
13196: LD_VAR 0 18
13200: NOT
13201: IFFALSE 13261
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13203: LD_ADDR_VAR 0 5
13207: PUSH
13208: LD_VAR 0 5
13212: PUSH
13213: LD_INT 11
13215: PUSH
13216: LD_INT 30
13218: PUSH
13219: LD_INT 49
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: DIFF
13227: ST_TO_ADDR
// if not list then
13228: LD_VAR 0 5
13232: NOT
13233: IFFALSE 13237
// exit ;
13235: GO 13379
// weapon := list [ rand ( 1 , list ) ] ;
13237: LD_ADDR_VAR 0 18
13241: PUSH
13242: LD_VAR 0 5
13246: PUSH
13247: LD_INT 1
13249: PPUSH
13250: LD_VAR 0 5
13254: PPUSH
13255: CALL_OW 12
13259: ARRAY
13260: ST_TO_ADDR
// end ; if weapon then
13261: LD_VAR 0 18
13265: IFFALSE 13379
// begin tmp := CostOfWeapon ( weapon ) ;
13267: LD_ADDR_VAR 0 14
13271: PUSH
13272: LD_VAR 0 18
13276: PPUSH
13277: CALL_OW 451
13281: ST_TO_ADDR
// j := GetBase ( tower ) ;
13282: LD_ADDR_VAR 0 9
13286: PUSH
13287: LD_VAR 0 1
13291: PPUSH
13292: CALL_OW 274
13296: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13297: LD_VAR 0 9
13301: PPUSH
13302: LD_INT 1
13304: PPUSH
13305: CALL_OW 275
13309: PUSH
13310: LD_VAR 0 14
13314: PUSH
13315: LD_INT 1
13317: ARRAY
13318: GREATEREQUAL
13319: PUSH
13320: LD_VAR 0 9
13324: PPUSH
13325: LD_INT 2
13327: PPUSH
13328: CALL_OW 275
13332: PUSH
13333: LD_VAR 0 14
13337: PUSH
13338: LD_INT 2
13340: ARRAY
13341: GREATEREQUAL
13342: AND
13343: PUSH
13344: LD_VAR 0 9
13348: PPUSH
13349: LD_INT 3
13351: PPUSH
13352: CALL_OW 275
13356: PUSH
13357: LD_VAR 0 14
13361: PUSH
13362: LD_INT 3
13364: ARRAY
13365: GREATEREQUAL
13366: AND
13367: IFFALSE 13379
// result := weapon ;
13369: LD_ADDR_VAR 0 3
13373: PUSH
13374: LD_VAR 0 18
13378: ST_TO_ADDR
// end ; end ;
13379: LD_VAR 0 3
13383: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13384: LD_INT 0
13386: PPUSH
13387: PPUSH
// result := true ;
13388: LD_ADDR_VAR 0 3
13392: PUSH
13393: LD_INT 1
13395: ST_TO_ADDR
// if array1 = array2 then
13396: LD_VAR 0 1
13400: PUSH
13401: LD_VAR 0 2
13405: EQUAL
13406: IFFALSE 13466
// begin for i = 1 to array1 do
13408: LD_ADDR_VAR 0 4
13412: PUSH
13413: DOUBLE
13414: LD_INT 1
13416: DEC
13417: ST_TO_ADDR
13418: LD_VAR 0 1
13422: PUSH
13423: FOR_TO
13424: IFFALSE 13462
// if array1 [ i ] <> array2 [ i ] then
13426: LD_VAR 0 1
13430: PUSH
13431: LD_VAR 0 4
13435: ARRAY
13436: PUSH
13437: LD_VAR 0 2
13441: PUSH
13442: LD_VAR 0 4
13446: ARRAY
13447: NONEQUAL
13448: IFFALSE 13460
// begin result := false ;
13450: LD_ADDR_VAR 0 3
13454: PUSH
13455: LD_INT 0
13457: ST_TO_ADDR
// break ;
13458: GO 13462
// end ;
13460: GO 13423
13462: POP
13463: POP
// end else
13464: GO 13474
// result := false ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_INT 0
13473: ST_TO_ADDR
// end ;
13474: LD_VAR 0 3
13478: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13479: LD_INT 0
13481: PPUSH
13482: PPUSH
// if not array1 or not array2 then
13483: LD_VAR 0 1
13487: NOT
13488: PUSH
13489: LD_VAR 0 2
13493: NOT
13494: OR
13495: IFFALSE 13499
// exit ;
13497: GO 13563
// result := true ;
13499: LD_ADDR_VAR 0 3
13503: PUSH
13504: LD_INT 1
13506: ST_TO_ADDR
// for i = 1 to array1 do
13507: LD_ADDR_VAR 0 4
13511: PUSH
13512: DOUBLE
13513: LD_INT 1
13515: DEC
13516: ST_TO_ADDR
13517: LD_VAR 0 1
13521: PUSH
13522: FOR_TO
13523: IFFALSE 13561
// if array1 [ i ] <> array2 [ i ] then
13525: LD_VAR 0 1
13529: PUSH
13530: LD_VAR 0 4
13534: ARRAY
13535: PUSH
13536: LD_VAR 0 2
13540: PUSH
13541: LD_VAR 0 4
13545: ARRAY
13546: NONEQUAL
13547: IFFALSE 13559
// begin result := false ;
13549: LD_ADDR_VAR 0 3
13553: PUSH
13554: LD_INT 0
13556: ST_TO_ADDR
// break ;
13557: GO 13561
// end ;
13559: GO 13522
13561: POP
13562: POP
// end ;
13563: LD_VAR 0 3
13567: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13568: LD_INT 0
13570: PPUSH
13571: PPUSH
13572: PPUSH
// pom := GetBase ( fac ) ;
13573: LD_ADDR_VAR 0 5
13577: PUSH
13578: LD_VAR 0 1
13582: PPUSH
13583: CALL_OW 274
13587: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13588: LD_ADDR_VAR 0 4
13592: PUSH
13593: LD_VAR 0 2
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PPUSH
13602: LD_VAR 0 2
13606: PUSH
13607: LD_INT 2
13609: ARRAY
13610: PPUSH
13611: LD_VAR 0 2
13615: PUSH
13616: LD_INT 3
13618: ARRAY
13619: PPUSH
13620: LD_VAR 0 2
13624: PUSH
13625: LD_INT 4
13627: ARRAY
13628: PPUSH
13629: CALL_OW 449
13633: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13634: LD_ADDR_VAR 0 3
13638: PUSH
13639: LD_VAR 0 5
13643: PPUSH
13644: LD_INT 1
13646: PPUSH
13647: CALL_OW 275
13651: PUSH
13652: LD_VAR 0 4
13656: PUSH
13657: LD_INT 1
13659: ARRAY
13660: GREATEREQUAL
13661: PUSH
13662: LD_VAR 0 5
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 275
13674: PUSH
13675: LD_VAR 0 4
13679: PUSH
13680: LD_INT 2
13682: ARRAY
13683: GREATEREQUAL
13684: AND
13685: PUSH
13686: LD_VAR 0 5
13690: PPUSH
13691: LD_INT 3
13693: PPUSH
13694: CALL_OW 275
13698: PUSH
13699: LD_VAR 0 4
13703: PUSH
13704: LD_INT 3
13706: ARRAY
13707: GREATEREQUAL
13708: AND
13709: ST_TO_ADDR
// end ;
13710: LD_VAR 0 3
13714: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13715: LD_INT 0
13717: PPUSH
13718: PPUSH
13719: PPUSH
13720: PPUSH
// pom := GetBase ( building ) ;
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 274
13735: ST_TO_ADDR
// if not pom then
13736: LD_VAR 0 3
13740: NOT
13741: IFFALSE 13745
// exit ;
13743: GO 13915
// btype := GetBType ( building ) ;
13745: LD_ADDR_VAR 0 5
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 266
13759: ST_TO_ADDR
// if btype = b_armoury then
13760: LD_VAR 0 5
13764: PUSH
13765: LD_INT 4
13767: EQUAL
13768: IFFALSE 13778
// btype := b_barracks ;
13770: LD_ADDR_VAR 0 5
13774: PUSH
13775: LD_INT 5
13777: ST_TO_ADDR
// if btype = b_depot then
13778: LD_VAR 0 5
13782: PUSH
13783: LD_INT 0
13785: EQUAL
13786: IFFALSE 13796
// btype := b_warehouse ;
13788: LD_ADDR_VAR 0 5
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// if btype = b_workshop then
13796: LD_VAR 0 5
13800: PUSH
13801: LD_INT 2
13803: EQUAL
13804: IFFALSE 13814
// btype := b_factory ;
13806: LD_ADDR_VAR 0 5
13810: PUSH
13811: LD_INT 3
13813: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13814: LD_ADDR_VAR 0 4
13818: PUSH
13819: LD_VAR 0 5
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 248
13833: PPUSH
13834: CALL_OW 450
13838: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13839: LD_ADDR_VAR 0 2
13843: PUSH
13844: LD_VAR 0 3
13848: PPUSH
13849: LD_INT 1
13851: PPUSH
13852: CALL_OW 275
13856: PUSH
13857: LD_VAR 0 4
13861: PUSH
13862: LD_INT 1
13864: ARRAY
13865: GREATEREQUAL
13866: PUSH
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_INT 2
13874: PPUSH
13875: CALL_OW 275
13879: PUSH
13880: LD_VAR 0 4
13884: PUSH
13885: LD_INT 2
13887: ARRAY
13888: GREATEREQUAL
13889: AND
13890: PUSH
13891: LD_VAR 0 3
13895: PPUSH
13896: LD_INT 3
13898: PPUSH
13899: CALL_OW 275
13903: PUSH
13904: LD_VAR 0 4
13908: PUSH
13909: LD_INT 3
13911: ARRAY
13912: GREATEREQUAL
13913: AND
13914: ST_TO_ADDR
// end ;
13915: LD_VAR 0 2
13919: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13920: LD_INT 0
13922: PPUSH
13923: PPUSH
13924: PPUSH
// pom := GetBase ( building ) ;
13925: LD_ADDR_VAR 0 4
13929: PUSH
13930: LD_VAR 0 1
13934: PPUSH
13935: CALL_OW 274
13939: ST_TO_ADDR
// if not pom then
13940: LD_VAR 0 4
13944: NOT
13945: IFFALSE 13949
// exit ;
13947: GO 14050
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13949: LD_ADDR_VAR 0 5
13953: PUSH
13954: LD_VAR 0 2
13958: PPUSH
13959: LD_VAR 0 1
13963: PPUSH
13964: CALL_OW 248
13968: PPUSH
13969: CALL_OW 450
13973: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: LD_VAR 0 4
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 275
13991: PUSH
13992: LD_VAR 0 5
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: GREATEREQUAL
14001: PUSH
14002: LD_VAR 0 4
14006: PPUSH
14007: LD_INT 2
14009: PPUSH
14010: CALL_OW 275
14014: PUSH
14015: LD_VAR 0 5
14019: PUSH
14020: LD_INT 2
14022: ARRAY
14023: GREATEREQUAL
14024: AND
14025: PUSH
14026: LD_VAR 0 4
14030: PPUSH
14031: LD_INT 3
14033: PPUSH
14034: CALL_OW 275
14038: PUSH
14039: LD_VAR 0 5
14043: PUSH
14044: LD_INT 3
14046: ARRAY
14047: GREATEREQUAL
14048: AND
14049: ST_TO_ADDR
// end ;
14050: LD_VAR 0 3
14054: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14055: LD_INT 0
14057: PPUSH
14058: PPUSH
14059: PPUSH
14060: PPUSH
14061: PPUSH
14062: PPUSH
14063: PPUSH
14064: PPUSH
14065: PPUSH
14066: PPUSH
14067: PPUSH
// result := false ;
14068: LD_ADDR_VAR 0 8
14072: PUSH
14073: LD_INT 0
14075: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14076: LD_VAR 0 5
14080: NOT
14081: PUSH
14082: LD_VAR 0 1
14086: NOT
14087: OR
14088: PUSH
14089: LD_VAR 0 2
14093: NOT
14094: OR
14095: PUSH
14096: LD_VAR 0 3
14100: NOT
14101: OR
14102: IFFALSE 14106
// exit ;
14104: GO 14920
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14106: LD_ADDR_VAR 0 14
14110: PUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: LD_VAR 0 2
14120: PPUSH
14121: LD_VAR 0 3
14125: PPUSH
14126: LD_VAR 0 4
14130: PPUSH
14131: LD_VAR 0 5
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PPUSH
14140: CALL_OW 248
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL 16173 0 6
14152: ST_TO_ADDR
// if not hexes then
14153: LD_VAR 0 14
14157: NOT
14158: IFFALSE 14162
// exit ;
14160: GO 14920
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14162: LD_ADDR_VAR 0 17
14166: PUSH
14167: LD_VAR 0 5
14171: PPUSH
14172: LD_INT 22
14174: PUSH
14175: LD_VAR 0 13
14179: PPUSH
14180: CALL_OW 255
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 30
14194: PUSH
14195: LD_INT 0
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 30
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 72
14225: ST_TO_ADDR
// for i = 1 to hexes do
14226: LD_ADDR_VAR 0 9
14230: PUSH
14231: DOUBLE
14232: LD_INT 1
14234: DEC
14235: ST_TO_ADDR
14236: LD_VAR 0 14
14240: PUSH
14241: FOR_TO
14242: IFFALSE 14918
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14244: LD_ADDR_VAR 0 13
14248: PUSH
14249: LD_VAR 0 14
14253: PUSH
14254: LD_VAR 0 9
14258: ARRAY
14259: PUSH
14260: LD_INT 1
14262: ARRAY
14263: PPUSH
14264: LD_VAR 0 14
14268: PUSH
14269: LD_VAR 0 9
14273: ARRAY
14274: PUSH
14275: LD_INT 2
14277: ARRAY
14278: PPUSH
14279: CALL_OW 428
14283: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14284: LD_VAR 0 14
14288: PUSH
14289: LD_VAR 0 9
14293: ARRAY
14294: PUSH
14295: LD_INT 1
14297: ARRAY
14298: PPUSH
14299: LD_VAR 0 14
14303: PUSH
14304: LD_VAR 0 9
14308: ARRAY
14309: PUSH
14310: LD_INT 2
14312: ARRAY
14313: PPUSH
14314: CALL_OW 351
14318: PUSH
14319: LD_VAR 0 14
14323: PUSH
14324: LD_VAR 0 9
14328: ARRAY
14329: PUSH
14330: LD_INT 1
14332: ARRAY
14333: PPUSH
14334: LD_VAR 0 14
14338: PUSH
14339: LD_VAR 0 9
14343: ARRAY
14344: PUSH
14345: LD_INT 2
14347: ARRAY
14348: PPUSH
14349: CALL_OW 488
14353: NOT
14354: OR
14355: PUSH
14356: LD_VAR 0 13
14360: PPUSH
14361: CALL_OW 247
14365: PUSH
14366: LD_INT 3
14368: EQUAL
14369: OR
14370: IFFALSE 14376
// exit ;
14372: POP
14373: POP
14374: GO 14920
// if not tmp then
14376: LD_VAR 0 13
14380: NOT
14381: IFFALSE 14385
// continue ;
14383: GO 14241
// result := true ;
14385: LD_ADDR_VAR 0 8
14389: PUSH
14390: LD_INT 1
14392: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14393: LD_VAR 0 6
14397: PUSH
14398: LD_VAR 0 13
14402: PPUSH
14403: CALL_OW 247
14407: PUSH
14408: LD_INT 2
14410: EQUAL
14411: AND
14412: PUSH
14413: LD_VAR 0 13
14417: PPUSH
14418: CALL_OW 263
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: AND
14427: IFFALSE 14591
// begin if IsDrivenBy ( tmp ) then
14429: LD_VAR 0 13
14433: PPUSH
14434: CALL_OW 311
14438: IFFALSE 14442
// continue ;
14440: GO 14241
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14442: LD_VAR 0 6
14446: PPUSH
14447: LD_INT 3
14449: PUSH
14450: LD_INT 60
14452: PUSH
14453: EMPTY
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 3
14462: PUSH
14463: LD_INT 55
14465: PUSH
14466: EMPTY
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 72
14481: IFFALSE 14589
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14483: LD_ADDR_VAR 0 18
14487: PUSH
14488: LD_VAR 0 6
14492: PPUSH
14493: LD_INT 3
14495: PUSH
14496: LD_INT 60
14498: PUSH
14499: EMPTY
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 3
14508: PUSH
14509: LD_INT 55
14511: PUSH
14512: EMPTY
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 72
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: ST_TO_ADDR
// if IsInUnit ( driver ) then
14532: LD_VAR 0 18
14536: PPUSH
14537: CALL_OW 310
14541: IFFALSE 14552
// ComExit ( driver ) ;
14543: LD_VAR 0 18
14547: PPUSH
14548: CALL 39974 0 1
// AddComEnterUnit ( driver , tmp ) ;
14552: LD_VAR 0 18
14556: PPUSH
14557: LD_VAR 0 13
14561: PPUSH
14562: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14566: LD_VAR 0 18
14570: PPUSH
14571: LD_VAR 0 7
14575: PPUSH
14576: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14580: LD_VAR 0 18
14584: PPUSH
14585: CALL_OW 181
// end ; continue ;
14589: GO 14241
// end ; if not cleaners or not tmp in cleaners then
14591: LD_VAR 0 6
14595: NOT
14596: PUSH
14597: LD_VAR 0 13
14601: PUSH
14602: LD_VAR 0 6
14606: IN
14607: NOT
14608: OR
14609: IFFALSE 14916
// begin if dep then
14611: LD_VAR 0 17
14615: IFFALSE 14751
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14617: LD_ADDR_VAR 0 16
14621: PUSH
14622: LD_VAR 0 17
14626: PUSH
14627: LD_INT 1
14629: ARRAY
14630: PPUSH
14631: CALL_OW 250
14635: PPUSH
14636: LD_VAR 0 17
14640: PUSH
14641: LD_INT 1
14643: ARRAY
14644: PPUSH
14645: CALL_OW 254
14649: PPUSH
14650: LD_INT 5
14652: PPUSH
14653: CALL_OW 272
14657: PUSH
14658: LD_VAR 0 17
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: PPUSH
14667: CALL_OW 251
14671: PPUSH
14672: LD_VAR 0 17
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: CALL_OW 254
14685: PPUSH
14686: LD_INT 5
14688: PPUSH
14689: CALL_OW 273
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14698: LD_VAR 0 16
14702: PUSH
14703: LD_INT 1
14705: ARRAY
14706: PPUSH
14707: LD_VAR 0 16
14711: PUSH
14712: LD_INT 2
14714: ARRAY
14715: PPUSH
14716: CALL_OW 488
14720: IFFALSE 14751
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14722: LD_VAR 0 13
14726: PPUSH
14727: LD_VAR 0 16
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: PPUSH
14736: LD_VAR 0 16
14740: PUSH
14741: LD_INT 2
14743: ARRAY
14744: PPUSH
14745: CALL_OW 111
// continue ;
14749: GO 14241
// end ; end ; r := GetDir ( tmp ) ;
14751: LD_ADDR_VAR 0 15
14755: PUSH
14756: LD_VAR 0 13
14760: PPUSH
14761: CALL_OW 254
14765: ST_TO_ADDR
// if r = 5 then
14766: LD_VAR 0 15
14770: PUSH
14771: LD_INT 5
14773: EQUAL
14774: IFFALSE 14784
// r := 0 ;
14776: LD_ADDR_VAR 0 15
14780: PUSH
14781: LD_INT 0
14783: ST_TO_ADDR
// for j = r to 5 do
14784: LD_ADDR_VAR 0 10
14788: PUSH
14789: DOUBLE
14790: LD_VAR 0 15
14794: DEC
14795: ST_TO_ADDR
14796: LD_INT 5
14798: PUSH
14799: FOR_TO
14800: IFFALSE 14914
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14802: LD_ADDR_VAR 0 11
14806: PUSH
14807: LD_VAR 0 13
14811: PPUSH
14812: CALL_OW 250
14816: PPUSH
14817: LD_VAR 0 10
14821: PPUSH
14822: LD_INT 2
14824: PPUSH
14825: CALL_OW 272
14829: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14830: LD_ADDR_VAR 0 12
14834: PUSH
14835: LD_VAR 0 13
14839: PPUSH
14840: CALL_OW 251
14844: PPUSH
14845: LD_VAR 0 10
14849: PPUSH
14850: LD_INT 2
14852: PPUSH
14853: CALL_OW 273
14857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14858: LD_VAR 0 11
14862: PPUSH
14863: LD_VAR 0 12
14867: PPUSH
14868: CALL_OW 488
14872: PUSH
14873: LD_VAR 0 11
14877: PPUSH
14878: LD_VAR 0 12
14882: PPUSH
14883: CALL_OW 428
14887: NOT
14888: AND
14889: IFFALSE 14912
// begin ComMoveXY ( tmp , _x , _y ) ;
14891: LD_VAR 0 13
14895: PPUSH
14896: LD_VAR 0 11
14900: PPUSH
14901: LD_VAR 0 12
14905: PPUSH
14906: CALL_OW 111
// break ;
14910: GO 14914
// end ; end ;
14912: GO 14799
14914: POP
14915: POP
// end ; end ;
14916: GO 14241
14918: POP
14919: POP
// end ;
14920: LD_VAR 0 8
14924: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14925: LD_INT 0
14927: PPUSH
// result := true ;
14928: LD_ADDR_VAR 0 3
14932: PUSH
14933: LD_INT 1
14935: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14936: LD_VAR 0 2
14940: PUSH
14941: LD_INT 24
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14955
14947: LD_INT 33
14949: DOUBLE
14950: EQUAL
14951: IFTRUE 14955
14953: GO 14980
14955: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14956: LD_ADDR_VAR 0 3
14960: PUSH
14961: LD_INT 32
14963: PPUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 321
14973: PUSH
14974: LD_INT 2
14976: EQUAL
14977: ST_TO_ADDR
14978: GO 15296
14980: LD_INT 20
14982: DOUBLE
14983: EQUAL
14984: IFTRUE 14988
14986: GO 15013
14988: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14989: LD_ADDR_VAR 0 3
14993: PUSH
14994: LD_INT 6
14996: PPUSH
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 321
15006: PUSH
15007: LD_INT 2
15009: EQUAL
15010: ST_TO_ADDR
15011: GO 15296
15013: LD_INT 22
15015: DOUBLE
15016: EQUAL
15017: IFTRUE 15027
15019: LD_INT 36
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15052
15027: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_INT 15
15035: PPUSH
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 321
15045: PUSH
15046: LD_INT 2
15048: EQUAL
15049: ST_TO_ADDR
15050: GO 15296
15052: LD_INT 30
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15085
15060: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_INT 20
15068: PPUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 321
15078: PUSH
15079: LD_INT 2
15081: EQUAL
15082: ST_TO_ADDR
15083: GO 15296
15085: LD_INT 28
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15099
15091: LD_INT 21
15093: DOUBLE
15094: EQUAL
15095: IFTRUE 15099
15097: GO 15124
15099: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15100: LD_ADDR_VAR 0 3
15104: PUSH
15105: LD_INT 21
15107: PPUSH
15108: LD_VAR 0 1
15112: PPUSH
15113: CALL_OW 321
15117: PUSH
15118: LD_INT 2
15120: EQUAL
15121: ST_TO_ADDR
15122: GO 15296
15124: LD_INT 16
15126: DOUBLE
15127: EQUAL
15128: IFTRUE 15132
15130: GO 15157
15132: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15133: LD_ADDR_VAR 0 3
15137: PUSH
15138: LD_INT 84
15140: PPUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 321
15150: PUSH
15151: LD_INT 2
15153: EQUAL
15154: ST_TO_ADDR
15155: GO 15296
15157: LD_INT 19
15159: DOUBLE
15160: EQUAL
15161: IFTRUE 15171
15163: LD_INT 23
15165: DOUBLE
15166: EQUAL
15167: IFTRUE 15171
15169: GO 15196
15171: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15172: LD_ADDR_VAR 0 3
15176: PUSH
15177: LD_INT 83
15179: PPUSH
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 321
15189: PUSH
15190: LD_INT 2
15192: EQUAL
15193: ST_TO_ADDR
15194: GO 15296
15196: LD_INT 17
15198: DOUBLE
15199: EQUAL
15200: IFTRUE 15204
15202: GO 15229
15204: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15205: LD_ADDR_VAR 0 3
15209: PUSH
15210: LD_INT 39
15212: PPUSH
15213: LD_VAR 0 1
15217: PPUSH
15218: CALL_OW 321
15222: PUSH
15223: LD_INT 2
15225: EQUAL
15226: ST_TO_ADDR
15227: GO 15296
15229: LD_INT 18
15231: DOUBLE
15232: EQUAL
15233: IFTRUE 15237
15235: GO 15262
15237: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15238: LD_ADDR_VAR 0 3
15242: PUSH
15243: LD_INT 40
15245: PPUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 321
15255: PUSH
15256: LD_INT 2
15258: EQUAL
15259: ST_TO_ADDR
15260: GO 15296
15262: LD_INT 27
15264: DOUBLE
15265: EQUAL
15266: IFTRUE 15270
15268: GO 15295
15270: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15271: LD_ADDR_VAR 0 3
15275: PUSH
15276: LD_INT 35
15278: PPUSH
15279: LD_VAR 0 1
15283: PPUSH
15284: CALL_OW 321
15288: PUSH
15289: LD_INT 2
15291: EQUAL
15292: ST_TO_ADDR
15293: GO 15296
15295: POP
// end ;
15296: LD_VAR 0 3
15300: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15301: LD_INT 0
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
// result := false ;
15314: LD_ADDR_VAR 0 6
15318: PUSH
15319: LD_INT 0
15321: ST_TO_ADDR
// if btype = b_depot then
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 0
15329: EQUAL
15330: IFFALSE 15342
// begin result := true ;
15332: LD_ADDR_VAR 0 6
15336: PUSH
15337: LD_INT 1
15339: ST_TO_ADDR
// exit ;
15340: GO 16168
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15342: LD_VAR 0 1
15346: NOT
15347: PUSH
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 266
15357: PUSH
15358: LD_INT 0
15360: PUSH
15361: LD_INT 1
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: IN
15368: NOT
15369: OR
15370: PUSH
15371: LD_VAR 0 2
15375: NOT
15376: OR
15377: PUSH
15378: LD_VAR 0 5
15382: PUSH
15383: LD_INT 0
15385: PUSH
15386: LD_INT 1
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 3
15394: PUSH
15395: LD_INT 4
15397: PUSH
15398: LD_INT 5
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: IN
15409: NOT
15410: OR
15411: PUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: LD_VAR 0 4
15421: PPUSH
15422: CALL_OW 488
15426: NOT
15427: OR
15428: IFFALSE 15432
// exit ;
15430: GO 16168
// side := GetSide ( depot ) ;
15432: LD_ADDR_VAR 0 9
15436: PUSH
15437: LD_VAR 0 1
15441: PPUSH
15442: CALL_OW 255
15446: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15447: LD_VAR 0 9
15451: PPUSH
15452: LD_VAR 0 2
15456: PPUSH
15457: CALL 14925 0 2
15461: NOT
15462: IFFALSE 15466
// exit ;
15464: GO 16168
// pom := GetBase ( depot ) ;
15466: LD_ADDR_VAR 0 10
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 274
15480: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15481: LD_ADDR_VAR 0 11
15485: PUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_VAR 0 1
15495: PPUSH
15496: CALL_OW 248
15500: PPUSH
15501: CALL_OW 450
15505: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15506: LD_VAR 0 10
15510: PPUSH
15511: LD_INT 1
15513: PPUSH
15514: CALL_OW 275
15518: PUSH
15519: LD_VAR 0 11
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: GREATEREQUAL
15528: PUSH
15529: LD_VAR 0 10
15533: PPUSH
15534: LD_INT 2
15536: PPUSH
15537: CALL_OW 275
15541: PUSH
15542: LD_VAR 0 11
15546: PUSH
15547: LD_INT 2
15549: ARRAY
15550: GREATEREQUAL
15551: AND
15552: PUSH
15553: LD_VAR 0 10
15557: PPUSH
15558: LD_INT 3
15560: PPUSH
15561: CALL_OW 275
15565: PUSH
15566: LD_VAR 0 11
15570: PUSH
15571: LD_INT 3
15573: ARRAY
15574: GREATEREQUAL
15575: AND
15576: NOT
15577: IFFALSE 15581
// exit ;
15579: GO 16168
// if GetBType ( depot ) = b_depot then
15581: LD_VAR 0 1
15585: PPUSH
15586: CALL_OW 266
15590: PUSH
15591: LD_INT 0
15593: EQUAL
15594: IFFALSE 15606
// dist := 28 else
15596: LD_ADDR_VAR 0 14
15600: PUSH
15601: LD_INT 28
15603: ST_TO_ADDR
15604: GO 15614
// dist := 36 ;
15606: LD_ADDR_VAR 0 14
15610: PUSH
15611: LD_INT 36
15613: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15614: LD_VAR 0 1
15618: PPUSH
15619: LD_VAR 0 3
15623: PPUSH
15624: LD_VAR 0 4
15628: PPUSH
15629: CALL_OW 297
15633: PUSH
15634: LD_VAR 0 14
15638: GREATER
15639: IFFALSE 15643
// exit ;
15641: GO 16168
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15643: LD_ADDR_VAR 0 12
15647: PUSH
15648: LD_VAR 0 2
15652: PPUSH
15653: LD_VAR 0 3
15657: PPUSH
15658: LD_VAR 0 4
15662: PPUSH
15663: LD_VAR 0 5
15667: PPUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 248
15677: PPUSH
15678: LD_INT 0
15680: PPUSH
15681: CALL 16173 0 6
15685: ST_TO_ADDR
// if not hexes then
15686: LD_VAR 0 12
15690: NOT
15691: IFFALSE 15695
// exit ;
15693: GO 16168
// hex := GetHexInfo ( x , y ) ;
15695: LD_ADDR_VAR 0 15
15699: PUSH
15700: LD_VAR 0 3
15704: PPUSH
15705: LD_VAR 0 4
15709: PPUSH
15710: CALL_OW 546
15714: ST_TO_ADDR
// if hex [ 1 ] then
15715: LD_VAR 0 15
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: IFFALSE 15727
// exit ;
15725: GO 16168
// height := hex [ 2 ] ;
15727: LD_ADDR_VAR 0 13
15731: PUSH
15732: LD_VAR 0 15
15736: PUSH
15737: LD_INT 2
15739: ARRAY
15740: ST_TO_ADDR
// for i = 1 to hexes do
15741: LD_ADDR_VAR 0 7
15745: PUSH
15746: DOUBLE
15747: LD_INT 1
15749: DEC
15750: ST_TO_ADDR
15751: LD_VAR 0 12
15755: PUSH
15756: FOR_TO
15757: IFFALSE 16087
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15759: LD_VAR 0 12
15763: PUSH
15764: LD_VAR 0 7
15768: ARRAY
15769: PUSH
15770: LD_INT 1
15772: ARRAY
15773: PPUSH
15774: LD_VAR 0 12
15778: PUSH
15779: LD_VAR 0 7
15783: ARRAY
15784: PUSH
15785: LD_INT 2
15787: ARRAY
15788: PPUSH
15789: CALL_OW 488
15793: NOT
15794: PUSH
15795: LD_VAR 0 12
15799: PUSH
15800: LD_VAR 0 7
15804: ARRAY
15805: PUSH
15806: LD_INT 1
15808: ARRAY
15809: PPUSH
15810: LD_VAR 0 12
15814: PUSH
15815: LD_VAR 0 7
15819: ARRAY
15820: PUSH
15821: LD_INT 2
15823: ARRAY
15824: PPUSH
15825: CALL_OW 428
15829: PUSH
15830: LD_INT 0
15832: GREATER
15833: OR
15834: PUSH
15835: LD_VAR 0 12
15839: PUSH
15840: LD_VAR 0 7
15844: ARRAY
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: PPUSH
15850: LD_VAR 0 12
15854: PUSH
15855: LD_VAR 0 7
15859: ARRAY
15860: PUSH
15861: LD_INT 2
15863: ARRAY
15864: PPUSH
15865: CALL_OW 351
15869: OR
15870: IFFALSE 15876
// exit ;
15872: POP
15873: POP
15874: GO 16168
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15876: LD_ADDR_VAR 0 8
15880: PUSH
15881: LD_VAR 0 12
15885: PUSH
15886: LD_VAR 0 7
15890: ARRAY
15891: PUSH
15892: LD_INT 1
15894: ARRAY
15895: PPUSH
15896: LD_VAR 0 12
15900: PUSH
15901: LD_VAR 0 7
15905: ARRAY
15906: PUSH
15907: LD_INT 2
15909: ARRAY
15910: PPUSH
15911: CALL_OW 546
15915: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15916: LD_VAR 0 8
15920: PUSH
15921: LD_INT 1
15923: ARRAY
15924: PUSH
15925: LD_VAR 0 8
15929: PUSH
15930: LD_INT 2
15932: ARRAY
15933: PUSH
15934: LD_VAR 0 13
15938: PUSH
15939: LD_INT 2
15941: PLUS
15942: GREATER
15943: OR
15944: PUSH
15945: LD_VAR 0 8
15949: PUSH
15950: LD_INT 2
15952: ARRAY
15953: PUSH
15954: LD_VAR 0 13
15958: PUSH
15959: LD_INT 2
15961: MINUS
15962: LESS
15963: OR
15964: PUSH
15965: LD_VAR 0 8
15969: PUSH
15970: LD_INT 3
15972: ARRAY
15973: PUSH
15974: LD_INT 0
15976: PUSH
15977: LD_INT 8
15979: PUSH
15980: LD_INT 9
15982: PUSH
15983: LD_INT 10
15985: PUSH
15986: LD_INT 11
15988: PUSH
15989: LD_INT 12
15991: PUSH
15992: LD_INT 13
15994: PUSH
15995: LD_INT 16
15997: PUSH
15998: LD_INT 17
16000: PUSH
16001: LD_INT 18
16003: PUSH
16004: LD_INT 19
16006: PUSH
16007: LD_INT 20
16009: PUSH
16010: LD_INT 21
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: IN
16028: NOT
16029: OR
16030: PUSH
16031: LD_VAR 0 8
16035: PUSH
16036: LD_INT 5
16038: ARRAY
16039: NOT
16040: OR
16041: PUSH
16042: LD_VAR 0 8
16046: PUSH
16047: LD_INT 6
16049: ARRAY
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 7
16059: PUSH
16060: LD_INT 9
16062: PUSH
16063: LD_INT 10
16065: PUSH
16066: LD_INT 11
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: IN
16077: NOT
16078: OR
16079: IFFALSE 16085
// exit ;
16081: POP
16082: POP
16083: GO 16168
// end ;
16085: GO 15756
16087: POP
16088: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16089: LD_VAR 0 9
16093: PPUSH
16094: LD_VAR 0 3
16098: PPUSH
16099: LD_VAR 0 4
16103: PPUSH
16104: LD_INT 20
16106: PPUSH
16107: CALL 8091 0 4
16111: PUSH
16112: LD_INT 4
16114: ARRAY
16115: IFFALSE 16119
// exit ;
16117: GO 16168
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16119: LD_VAR 0 2
16123: PUSH
16124: LD_INT 29
16126: PUSH
16127: LD_INT 30
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: IN
16134: PUSH
16135: LD_VAR 0 3
16139: PPUSH
16140: LD_VAR 0 4
16144: PPUSH
16145: LD_VAR 0 9
16149: PPUSH
16150: CALL_OW 440
16154: NOT
16155: AND
16156: IFFALSE 16160
// exit ;
16158: GO 16168
// result := true ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_INT 1
16167: ST_TO_ADDR
// end ;
16168: LD_VAR 0 6
16172: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16173: LD_INT 0
16175: PPUSH
16176: PPUSH
16177: PPUSH
16178: PPUSH
16179: PPUSH
16180: PPUSH
16181: PPUSH
16182: PPUSH
16183: PPUSH
16184: PPUSH
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
16189: PPUSH
16190: PPUSH
16191: PPUSH
16192: PPUSH
16193: PPUSH
16194: PPUSH
16195: PPUSH
16196: PPUSH
16197: PPUSH
16198: PPUSH
16199: PPUSH
16200: PPUSH
16201: PPUSH
16202: PPUSH
16203: PPUSH
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
16231: PPUSH
16232: PPUSH
// result = [ ] ;
16233: LD_ADDR_VAR 0 7
16237: PUSH
16238: EMPTY
16239: ST_TO_ADDR
// temp_list = [ ] ;
16240: LD_ADDR_VAR 0 9
16244: PUSH
16245: EMPTY
16246: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16247: LD_VAR 0 4
16251: PUSH
16252: LD_INT 0
16254: PUSH
16255: LD_INT 1
16257: PUSH
16258: LD_INT 2
16260: PUSH
16261: LD_INT 3
16263: PUSH
16264: LD_INT 4
16266: PUSH
16267: LD_INT 5
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: IN
16278: NOT
16279: PUSH
16280: LD_VAR 0 1
16284: PUSH
16285: LD_INT 0
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: IN
16295: PUSH
16296: LD_VAR 0 5
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: IN
16315: NOT
16316: AND
16317: OR
16318: IFFALSE 16322
// exit ;
16320: GO 34713
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16322: LD_VAR 0 1
16326: PUSH
16327: LD_INT 6
16329: PUSH
16330: LD_INT 7
16332: PUSH
16333: LD_INT 8
16335: PUSH
16336: LD_INT 13
16338: PUSH
16339: LD_INT 12
16341: PUSH
16342: LD_INT 15
16344: PUSH
16345: LD_INT 11
16347: PUSH
16348: LD_INT 14
16350: PUSH
16351: LD_INT 10
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: IN
16365: IFFALSE 16375
// btype = b_lab ;
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_INT 6
16374: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16375: LD_VAR 0 6
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: IN
16394: NOT
16395: PUSH
16396: LD_VAR 0 1
16400: PUSH
16401: LD_INT 0
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: LD_INT 6
16415: PUSH
16416: LD_INT 36
16418: PUSH
16419: LD_INT 4
16421: PUSH
16422: LD_INT 5
16424: PUSH
16425: LD_INT 31
16427: PUSH
16428: LD_INT 32
16430: PUSH
16431: LD_INT 33
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: IN
16447: NOT
16448: PUSH
16449: LD_VAR 0 6
16453: PUSH
16454: LD_INT 1
16456: EQUAL
16457: AND
16458: OR
16459: PUSH
16460: LD_VAR 0 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 3
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: IN
16475: NOT
16476: PUSH
16477: LD_VAR 0 6
16481: PUSH
16482: LD_INT 2
16484: EQUAL
16485: AND
16486: OR
16487: IFFALSE 16497
// mode = 0 ;
16489: LD_ADDR_VAR 0 6
16493: PUSH
16494: LD_INT 0
16496: ST_TO_ADDR
// case mode of 0 :
16497: LD_VAR 0 6
16501: PUSH
16502: LD_INT 0
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16510
16508: GO 27963
16510: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16511: LD_ADDR_VAR 0 11
16515: PUSH
16516: LD_INT 0
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 0
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 0
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: NEG
16570: PUSH
16571: LD_INT 0
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 1
16580: NEG
16581: PUSH
16582: LD_INT 1
16584: NEG
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 1
16592: NEG
16593: PUSH
16594: LD_INT 2
16596: NEG
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 0
16604: PUSH
16605: LD_INT 2
16607: NEG
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: LD_INT 1
16618: NEG
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 1
16646: NEG
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 0
16667: PUSH
16668: LD_INT 3
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 1
16677: NEG
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16704: LD_ADDR_VAR 0 12
16708: PUSH
16709: LD_INT 0
16711: PUSH
16712: LD_INT 0
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: LD_INT 1
16724: NEG
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: LD_INT 0
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: LD_INT 1
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: NEG
16763: PUSH
16764: LD_INT 0
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 1
16773: NEG
16774: PUSH
16775: LD_INT 1
16777: NEG
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: LD_INT 1
16788: NEG
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: LD_INT 0
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 1
16816: NEG
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 2
16827: NEG
16828: PUSH
16829: LD_INT 0
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 2
16838: NEG
16839: PUSH
16840: LD_INT 1
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 2
16850: NEG
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 3
16861: NEG
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: NEG
16873: PUSH
16874: LD_INT 1
16876: NEG
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16900: LD_ADDR_VAR 0 13
16904: PUSH
16905: LD_INT 0
16907: PUSH
16908: LD_INT 0
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 0
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 1
16938: PUSH
16939: LD_INT 1
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 0
16948: PUSH
16949: LD_INT 1
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 1
16958: NEG
16959: PUSH
16960: LD_INT 0
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 1
16969: NEG
16970: PUSH
16971: LD_INT 1
16973: NEG
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 1
16981: NEG
16982: PUSH
16983: LD_INT 2
16985: NEG
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 2
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 2
17023: NEG
17024: PUSH
17025: LD_INT 1
17027: NEG
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 2
17035: NEG
17036: PUSH
17037: LD_INT 2
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 2
17047: NEG
17048: PUSH
17049: LD_INT 3
17051: NEG
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 3
17059: NEG
17060: PUSH
17061: LD_INT 2
17063: NEG
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 3
17071: NEG
17072: PUSH
17073: LD_INT 3
17075: NEG
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17099: LD_ADDR_VAR 0 14
17103: PUSH
17104: LD_INT 0
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 0
17116: PUSH
17117: LD_INT 1
17119: NEG
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 1
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 0
17147: PUSH
17148: LD_INT 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 1
17157: NEG
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 1
17168: NEG
17169: PUSH
17170: LD_INT 1
17172: NEG
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 1
17180: NEG
17181: PUSH
17182: LD_INT 2
17184: NEG
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 0
17192: PUSH
17193: LD_INT 2
17195: NEG
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: LD_INT 1
17206: NEG
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 2
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 1
17245: NEG
17246: PUSH
17247: LD_INT 3
17249: NEG
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: LD_INT 3
17260: NEG
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 1
17268: PUSH
17269: LD_INT 2
17271: NEG
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17295: LD_ADDR_VAR 0 15
17299: PUSH
17300: LD_INT 0
17302: PUSH
17303: LD_INT 0
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: LD_INT 1
17315: NEG
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: LD_INT 0
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 0
17343: PUSH
17344: LD_INT 1
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 1
17353: NEG
17354: PUSH
17355: LD_INT 0
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 1
17364: NEG
17365: PUSH
17366: LD_INT 1
17368: NEG
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 1
17379: NEG
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 0
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: LD_INT 1
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: LD_INT 1
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 2
17418: NEG
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 2
17429: NEG
17430: PUSH
17431: LD_INT 1
17433: NEG
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 2
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 3
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 3
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17488: LD_ADDR_VAR 0 16
17492: PUSH
17493: LD_INT 0
17495: PUSH
17496: LD_INT 0
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: LD_INT 1
17508: NEG
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: LD_INT 0
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: NEG
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: NEG
17570: PUSH
17571: LD_INT 2
17573: NEG
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 2
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: LD_INT 2
17627: NEG
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 3
17635: PUSH
17636: LD_INT 2
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: LD_INT 3
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17681: LD_ADDR_VAR 0 17
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: LD_INT 1
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 1
17739: NEG
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 1
17750: NEG
17751: PUSH
17752: LD_INT 1
17754: NEG
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 1
17762: NEG
17763: PUSH
17764: LD_INT 2
17766: NEG
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: LD_INT 2
17777: NEG
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: LD_INT 1
17788: NEG
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 2
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: LD_INT 2
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: PUSH
17827: LD_INT 2
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: LD_INT 2
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: NEG
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: NEG
17858: PUSH
17859: LD_INT 0
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 2
17868: NEG
17869: PUSH
17870: LD_INT 1
17872: NEG
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 2
17880: NEG
17881: PUSH
17882: LD_INT 2
17884: NEG
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17911: LD_ADDR_VAR 0 18
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 0
17928: PUSH
17929: LD_INT 1
17931: NEG
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 1
17969: NEG
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: LD_INT 1
17984: NEG
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 1
17992: NEG
17993: PUSH
17994: LD_INT 2
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: LD_INT 1
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: LD_INT 1
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 2
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 1
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: LD_INT 2
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 1
18076: NEG
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 2
18087: NEG
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 2
18098: NEG
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 2
18110: NEG
18111: PUSH
18112: LD_INT 2
18114: NEG
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18141: LD_ADDR_VAR 0 19
18145: PUSH
18146: LD_INT 0
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 0
18158: PUSH
18159: LD_INT 1
18161: NEG
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: LD_INT 1
18214: NEG
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 1
18222: NEG
18223: PUSH
18224: LD_INT 2
18226: NEG
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: LD_INT 1
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: LD_INT 2
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 2
18317: NEG
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 2
18328: NEG
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18371: LD_ADDR_VAR 0 20
18375: PUSH
18376: LD_INT 0
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: LD_INT 1
18444: NEG
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 2
18456: NEG
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: LD_INT 1
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 1
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 1
18536: NEG
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: NEG
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: NEG
18559: PUSH
18560: LD_INT 1
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: LD_INT 2
18574: NEG
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18601: LD_ADDR_VAR 0 21
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 2
18686: NEG
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: LD_INT 2
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 2
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: LD_INT 2
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 2
18777: NEG
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: NEG
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: LD_INT 2
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18831: LD_ADDR_VAR 0 22
18835: PUSH
18836: LD_INT 0
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: LD_INT 1
18904: NEG
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: NEG
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: LD_INT 2
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19061: LD_ADDR_VAR 0 23
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: LD_INT 0
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: LD_INT 1
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: LD_INT 2
19146: NEG
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 0
19154: PUSH
19155: LD_INT 2
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 1
19168: NEG
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 2
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: LD_INT 2
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: NEG
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: NEG
19261: PUSH
19262: LD_INT 2
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 2
19272: NEG
19273: PUSH
19274: LD_INT 3
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 3
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 2
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19341: LD_ADDR_VAR 0 24
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: LD_INT 1
19361: NEG
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: LD_INT 0
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 0
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 1
19399: NEG
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 1
19410: NEG
19411: PUSH
19412: LD_INT 1
19414: NEG
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: LD_INT 2
19426: NEG
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 0
19434: PUSH
19435: LD_INT 2
19437: NEG
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: LD_INT 1
19448: NEG
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 2
19528: NEG
19529: PUSH
19530: LD_INT 1
19532: NEG
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 2
19540: NEG
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: LD_INT 1
19566: NEG
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 3
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19617: LD_ADDR_VAR 0 25
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: LD_INT 1
19690: NEG
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: LD_INT 2
19702: NEG
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: LD_INT 2
19713: NEG
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: LD_INT 1
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: NEG
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 2
19804: NEG
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: LD_INT 2
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 3
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 3
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 3
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: LD_INT 3
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19891: LD_ADDR_VAR 0 26
19895: PUSH
19896: LD_INT 0
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: LD_INT 1
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: NEG
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: LD_INT 2
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: LD_INT 1
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 2
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 2
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: NEG
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 2
20067: NEG
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: NEG
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: NEG
20091: PUSH
20092: LD_INT 2
20094: NEG
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: LD_INT 3
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: LD_INT 3
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: NEG
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 2
20133: NEG
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20167: LD_ADDR_VAR 0 27
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: LD_INT 1
20187: NEG
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 1
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 1
20225: NEG
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: LD_INT 1
20240: NEG
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: LD_INT 2
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: LD_INT 2
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: LD_INT 2
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 2
20366: NEG
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 2
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 3
20400: NEG
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 3
20412: NEG
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20447: LD_ADDR_VAR 0 28
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: LD_INT 1
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PUSH
20530: LD_INT 2
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 0
20540: PUSH
20541: LD_INT 2
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: LD_INT 2
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 2
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: LD_INT 2
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: LD_INT 2
20650: NEG
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 2
20658: NEG
20659: PUSH
20660: LD_INT 3
20662: NEG
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 3
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 3
20682: NEG
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 3
20694: NEG
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20729: LD_ADDR_VAR 0 29
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 1
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: LD_INT 0
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: NEG
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 2
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: LD_INT 2
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: NEG
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: NEG
20896: PUSH
20897: LD_INT 1
20899: NEG
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: LD_INT 2
20911: NEG
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 2
20919: NEG
20920: PUSH
20921: LD_INT 3
20923: NEG
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 1
20934: NEG
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 3
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 3
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: NEG
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 3
20973: NEG
20974: PUSH
20975: LD_INT 2
20977: NEG
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21008: LD_ADDR_VAR 0 30
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: NEG
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 2
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 2
21104: NEG
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 2
21174: NEG
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: LD_INT 3
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: LD_INT 2
21212: NEG
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 3
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: LD_INT 3
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: NEG
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 3
21251: NEG
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21286: LD_ADDR_VAR 0 31
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: LD_INT 1
21306: NEG
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: NEG
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: LD_INT 0
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 2
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: LD_INT 1
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: NEG
21464: PUSH
21465: LD_INT 2
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: LD_INT 3
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 3
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 1
21508: PUSH
21509: LD_INT 3
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 3
21529: NEG
21530: PUSH
21531: LD_INT 2
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21564: LD_ADDR_VAR 0 32
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 1
21584: NEG
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 1
21622: NEG
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: LD_INT 1
21637: NEG
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: LD_INT 2
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 2
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: LD_INT 2
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 2
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: LD_INT 3
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: LD_INT 3
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 3
21807: NEG
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21842: LD_ADDR_VAR 0 33
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 0
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 1
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 0
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: NEG
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: LD_INT 2
21927: NEG
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: NEG
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 2
21997: NEG
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: NEG
22009: PUSH
22010: LD_INT 1
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 2
22020: NEG
22021: PUSH
22022: LD_INT 2
22024: NEG
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: NEG
22033: PUSH
22034: LD_INT 3
22036: NEG
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 2
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 3
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 3
22086: NEG
22087: PUSH
22088: LD_INT 2
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22121: LD_ADDR_VAR 0 34
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: LD_INT 0
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 0
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: LD_INT 0
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 1
22202: NEG
22203: PUSH
22204: LD_INT 2
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: LD_INT 2
22217: NEG
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: NEG
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 2
22288: NEG
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: NEG
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: LD_INT 3
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: LD_INT 2
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 3
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: LD_INT 3
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 3
22366: NEG
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22401: LD_ADDR_VAR 0 35
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 2
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22513: LD_ADDR_VAR 0 36
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: LD_INT 1
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 0
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: LD_INT 1
22586: NEG
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: NEG
22595: PUSH
22596: LD_INT 2
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22625: LD_ADDR_VAR 0 37
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22737: LD_ADDR_VAR 0 38
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: LD_INT 1
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: NEG
22829: PUSH
22830: LD_INT 1
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22849: LD_ADDR_VAR 0 39
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: LD_INT 1
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: NEG
22931: PUSH
22932: LD_INT 2
22934: NEG
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22961: LD_ADDR_VAR 0 40
22965: PUSH
22966: LD_INT 0
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23073: LD_ADDR_VAR 0 41
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: LD_INT 1
23093: NEG
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 0
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 0
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 1
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: LD_INT 2
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: LD_INT 2
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: NEG
23264: PUSH
23265: LD_INT 3
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 3
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 3
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 3
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 3
23316: PUSH
23317: LD_INT 3
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: LD_INT 3
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 3
23347: NEG
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 3
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 3
23370: NEG
23371: PUSH
23372: LD_INT 2
23374: NEG
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 3
23382: NEG
23383: PUSH
23384: LD_INT 3
23386: NEG
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23423: LD_ADDR_VAR 0 42
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 1
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: LD_INT 2
23508: NEG
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 2
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 2
23613: NEG
23614: PUSH
23615: LD_INT 3
23617: NEG
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 3
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: LD_INT 3
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 2
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 3
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 3
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: LD_INT 3
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 3
23720: NEG
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 3
23732: NEG
23733: PUSH
23734: LD_INT 3
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23773: LD_ADDR_VAR 0 43
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 2
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 1
23928: NEG
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 2
23939: NEG
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 2
23950: NEG
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: LD_INT 3
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 0
23974: PUSH
23975: LD_INT 3
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: LD_INT 2
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 2
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 3
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: NEG
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 3
24069: NEG
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 3
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24121: LD_ADDR_VAR 0 44
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 1
24141: NEG
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: LD_INT 2
24206: NEG
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 2
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 1
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 2
24287: NEG
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: NEG
24300: PUSH
24301: LD_INT 2
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 2
24311: NEG
24312: PUSH
24313: LD_INT 3
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 3
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 3
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 3
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 3
24364: PUSH
24365: LD_INT 3
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 3
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: NEG
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 3
24395: NEG
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 3
24406: NEG
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: NEG
24419: PUSH
24420: LD_INT 2
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 3
24430: NEG
24431: PUSH
24432: LD_INT 3
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24471: LD_ADDR_VAR 0 45
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: NEG
24662: PUSH
24663: LD_INT 3
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: LD_INT 3
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: LD_INT 3
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 3
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 3
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 3
24768: NEG
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 3
24780: NEG
24781: PUSH
24782: LD_INT 3
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24821: LD_ADDR_VAR 0 46
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: NEG
24903: PUSH
24904: LD_INT 2
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 2
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 2
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: LD_INT 2
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 3
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 3
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 2
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 2
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 3
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 3
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 2
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 3
25117: NEG
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 3
25128: NEG
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25169: LD_ADDR_VAR 0 47
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 2
25284: NEG
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25320: LD_ADDR_VAR 0 48
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: LD_INT 2
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 2
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25467: LD_ADDR_VAR 0 49
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: NEG
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25611: LD_ADDR_VAR 0 50
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: LD_INT 2
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25755: LD_ADDR_VAR 0 51
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: LD_INT 2
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25902: LD_ADDR_VAR 0 52
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: LD_INT 1
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: NEG
25984: PUSH
25985: LD_INT 2
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 2
26006: NEG
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 2
26017: NEG
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: NEG
26030: PUSH
26031: LD_INT 2
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26053: LD_ADDR_VAR 0 53
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: LD_INT 1
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: LD_INT 2
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 2
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 2
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 2
26240: NEG
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: NEG
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26283: LD_ADDR_VAR 0 54
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: PUSH
26429: LD_INT 2
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: LD_INT 2
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 2
26470: NEG
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: LD_INT 2
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26513: LD_ADDR_VAR 0 55
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 1
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: LD_INT 2
26598: NEG
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 2
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 2
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: NEG
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: LD_INT 2
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26743: LD_ADDR_VAR 0 56
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 1
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: NEG
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 2
26919: NEG
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 2
26930: NEG
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 2
26942: NEG
26943: PUSH
26944: LD_INT 2
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26973: LD_ADDR_VAR 0 57
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 2
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27203: LD_ADDR_VAR 0 58
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 2
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: NEG
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: NEG
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27433: LD_ADDR_VAR 0 59
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27521: LD_ADDR_VAR 0 60
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27609: LD_ADDR_VAR 0 61
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27697: LD_ADDR_VAR 0 62
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27785: LD_ADDR_VAR 0 63
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27873: LD_ADDR_VAR 0 64
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: ST_TO_ADDR
// end ; 1 :
27961: GO 33858
27963: LD_INT 1
27965: DOUBLE
27966: EQUAL
27967: IFTRUE 27971
27969: GO 30594
27971: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27972: LD_ADDR_VAR 0 11
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: LD_INT 3
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 3
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28016: LD_ADDR_VAR 0 12
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 3
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28057: LD_ADDR_VAR 0 13
28061: PUSH
28062: LD_INT 3
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 3
28074: PUSH
28075: LD_INT 3
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: LD_INT 3
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28097: LD_ADDR_VAR 0 14
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 3
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 3
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28138: LD_ADDR_VAR 0 15
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 3
28156: NEG
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 3
28167: NEG
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28182: LD_ADDR_VAR 0 16
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: LD_INT 3
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: NEG
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 3
28213: NEG
28214: PUSH
28215: LD_INT 3
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28228: LD_ADDR_VAR 0 17
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 3
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 3
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: LIST
28271: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28272: LD_ADDR_VAR 0 18
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 3
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28313: LD_ADDR_VAR 0 19
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28353: LD_ADDR_VAR 0 20
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 3
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28394: LD_ADDR_VAR 0 21
28398: PUSH
28399: LD_INT 2
28401: NEG
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 3
28412: NEG
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 3
28423: NEG
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28438: LD_ADDR_VAR 0 22
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: LD_INT 3
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 3
28457: NEG
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 3
28469: NEG
28470: PUSH
28471: LD_INT 3
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28484: LD_ADDR_VAR 0 23
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: NEG
28503: PUSH
28504: LD_INT 4
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 3
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28528: LD_ADDR_VAR 0 24
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 3
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 4
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28569: LD_ADDR_VAR 0 25
28573: PUSH
28574: LD_INT 3
28576: PUSH
28577: LD_INT 3
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 4
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 3
28596: PUSH
28597: LD_INT 4
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28609: LD_ADDR_VAR 0 26
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: LD_INT 3
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 4
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: LD_INT 3
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28650: LD_ADDR_VAR 0 27
28654: PUSH
28655: LD_INT 3
28657: NEG
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 3
28668: NEG
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 4
28679: NEG
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28694: LD_ADDR_VAR 0 28
28698: PUSH
28699: LD_INT 3
28701: NEG
28702: PUSH
28703: LD_INT 3
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 3
28713: NEG
28714: PUSH
28715: LD_INT 4
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 4
28725: NEG
28726: PUSH
28727: LD_INT 3
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28740: LD_ADDR_VAR 0 29
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: LD_INT 3
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: LD_INT 3
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 2
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 4
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 4
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 5
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 5
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: LD_INT 4
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: LD_INT 6
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: LD_INT 6
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 5
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28895: LD_ADDR_VAR 0 30
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 3
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 3
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 4
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 4
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 4
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 5
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 5
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 5
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 6
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 6
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29038: LD_ADDR_VAR 0 31
29042: PUSH
29043: LD_INT 3
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 3
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: LD_INT 3
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 4
29075: PUSH
29076: LD_INT 3
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 4
29085: PUSH
29086: LD_INT 4
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 4
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: LD_INT 4
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: LD_INT 5
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 4
29125: PUSH
29126: LD_INT 5
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 6
29135: PUSH
29136: LD_INT 5
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 6
29145: PUSH
29146: LD_INT 6
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 5
29155: PUSH
29156: LD_INT 6
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29177: LD_ADDR_VAR 0 32
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 3
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: LD_INT 4
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 4
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: LD_INT 5
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 5
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: LD_INT 4
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: LD_INT 6
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 6
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 5
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29320: LD_ADDR_VAR 0 33
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 3
29338: NEG
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 3
29349: NEG
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 4
29372: NEG
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 4
29383: NEG
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 4
29395: NEG
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 5
29406: NEG
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 5
29417: NEG
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 5
29429: NEG
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 6
29440: NEG
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 6
29451: NEG
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29475: LD_ADDR_VAR 0 34
29479: PUSH
29480: LD_INT 2
29482: NEG
29483: PUSH
29484: LD_INT 3
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 3
29494: NEG
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 3
29506: NEG
29507: PUSH
29508: LD_INT 3
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: LD_INT 4
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 4
29530: NEG
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 4
29542: NEG
29543: PUSH
29544: LD_INT 4
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 4
29554: NEG
29555: PUSH
29556: LD_INT 5
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 5
29566: NEG
29567: PUSH
29568: LD_INT 4
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 5
29578: NEG
29579: PUSH
29580: LD_INT 5
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 5
29590: NEG
29591: PUSH
29592: LD_INT 6
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 6
29602: NEG
29603: PUSH
29604: LD_INT 5
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 6
29614: NEG
29615: PUSH
29616: LD_INT 6
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29638: LD_ADDR_VAR 0 41
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: LD_INT 3
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29682: LD_ADDR_VAR 0 42
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 2
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 3
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29723: LD_ADDR_VAR 0 43
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: LD_INT 3
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29763: LD_ADDR_VAR 0 44
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 2
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29804: LD_ADDR_VAR 0 45
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: NEG
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 3
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29848: LD_ADDR_VAR 0 46
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: LD_INT 2
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 3
29879: NEG
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29894: LD_ADDR_VAR 0 47
29898: PUSH
29899: LD_INT 2
29901: NEG
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 3
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29927: LD_ADDR_VAR 0 48
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 2
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29958: LD_ADDR_VAR 0 49
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 3
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29987: LD_ADDR_VAR 0 50
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30016: LD_ADDR_VAR 0 51
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30047: LD_ADDR_VAR 0 52
30051: PUSH
30052: LD_INT 3
30054: NEG
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: NEG
30067: PUSH
30068: LD_INT 2
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30080: LD_ADDR_VAR 0 53
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: LD_INT 3
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 3
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: LD_INT 2
30113: NEG
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30124: LD_ADDR_VAR 0 54
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30165: LD_ADDR_VAR 0 55
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30205: LD_ADDR_VAR 0 56
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30246: LD_ADDR_VAR 0 57
30250: PUSH
30251: LD_INT 2
30253: NEG
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 3
30264: NEG
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30290: LD_ADDR_VAR 0 58
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: LD_INT 3
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 3
30309: NEG
30310: PUSH
30311: LD_INT 2
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: NEG
30322: PUSH
30323: LD_INT 3
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30336: LD_ADDR_VAR 0 59
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 2
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 2
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 1
30369: NEG
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30380: LD_ADDR_VAR 0 60
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 1
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30421: LD_ADDR_VAR 0 61
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30461: LD_ADDR_VAR 0 62
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30502: LD_ADDR_VAR 0 63
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 2
30531: NEG
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30546: LD_ADDR_VAR 0 64
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: NEG
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 2
30577: NEG
30578: PUSH
30579: LD_INT 2
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: ST_TO_ADDR
// end ; 2 :
30592: GO 33858
30594: LD_INT 2
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 33857
30602: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30603: LD_ADDR_VAR 0 29
30607: PUSH
30608: LD_INT 4
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 4
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 5
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 5
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 4
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 5
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 4
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 4
30733: PUSH
30734: LD_INT 4
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 3
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: LD_INT 3
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 4
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 4
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 4
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 3
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: LD_INT 4
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: LD_INT 5
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: LD_INT 5
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 4
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 2
30865: PUSH
30866: LD_INT 5
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: NEG
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 3
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 4
30942: NEG
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 4
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 4
30965: NEG
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 4
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: NEG
31001: PUSH
31002: LD_INT 5
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 3
31012: NEG
31013: PUSH
31014: LD_INT 4
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: NEG
31025: PUSH
31026: LD_INT 3
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 4
31036: NEG
31037: PUSH
31038: LD_INT 3
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 5
31048: NEG
31049: PUSH
31050: LD_INT 4
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 5
31060: NEG
31061: PUSH
31062: LD_INT 5
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 3
31072: NEG
31073: PUSH
31074: LD_INT 5
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 5
31084: NEG
31085: PUSH
31086: LD_INT 3
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31141: LD_ADDR_VAR 0 30
31145: PUSH
31146: LD_INT 4
31148: PUSH
31149: LD_INT 4
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 4
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 4
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 5
31178: PUSH
31179: LD_INT 5
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: LD_INT 5
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 4
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 3
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 5
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: PUSH
31229: LD_INT 5
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 3
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: LD_INT 4
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 4
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 4
31331: NEG
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 4
31342: NEG
31343: PUSH
31344: LD_INT 1
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 4
31376: NEG
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 5
31387: NEG
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 5
31398: NEG
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 5
31410: NEG
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 3
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 3
31433: NEG
31434: PUSH
31435: LD_INT 3
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 3
31445: NEG
31446: PUSH
31447: LD_INT 4
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: NEG
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 4
31493: NEG
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 4
31505: NEG
31506: PUSH
31507: LD_INT 4
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 2
31517: NEG
31518: PUSH
31519: LD_INT 4
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 4
31529: NEG
31530: PUSH
31531: LD_INT 2
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 4
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 5
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: LD_INT 4
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: LD_INT 4
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: LD_INT 5
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 3
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 5
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31688: LD_ADDR_VAR 0 31
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: LD_INT 4
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: LD_INT 3
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: LD_INT 5
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: LD_INT 5
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: LD_INT 4
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: NEG
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: NEG
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 3
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 4
31844: NEG
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 4
31855: NEG
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 4
31890: NEG
31891: PUSH
31892: LD_INT 4
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 4
31902: NEG
31903: PUSH
31904: LD_INT 5
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: LD_INT 4
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 4
31938: NEG
31939: PUSH
31940: LD_INT 3
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 5
31950: NEG
31951: PUSH
31952: LD_INT 4
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 5
31962: NEG
31963: PUSH
31964: LD_INT 5
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: LD_INT 5
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 5
31986: NEG
31987: PUSH
31988: LD_INT 3
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 3
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 4
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 3
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 3
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 4
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 2
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: LD_INT 4
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 4
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 4
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 4
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 3
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32238: LD_ADDR_VAR 0 32
32242: PUSH
32243: LD_INT 4
32245: NEG
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 4
32256: NEG
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 4
32290: NEG
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 5
32301: NEG
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 5
32312: NEG
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 5
32324: NEG
32325: PUSH
32326: LD_INT 2
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: LD_INT 4
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: LD_INT 3
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 2
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 3
32395: NEG
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 4
32407: NEG
32408: PUSH
32409: LD_INT 3
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 4
32419: NEG
32420: PUSH
32421: LD_INT 4
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: LD_INT 4
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 4
32443: NEG
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 4
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 5
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: LD_INT 4
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 3
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 4
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: LD_INT 5
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 3
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: LD_INT 5
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 3
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 4
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 4
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: LD_INT 2
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 4
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 4
32650: PUSH
32651: LD_INT 4
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 5
32670: PUSH
32671: LD_INT 4
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 5
32680: PUSH
32681: LD_INT 5
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 4
32690: PUSH
32691: LD_INT 5
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: LD_INT 4
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 3
32710: PUSH
32711: LD_INT 3
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 5
32720: PUSH
32721: LD_INT 3
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 3
32730: PUSH
32731: LD_INT 5
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32785: LD_ADDR_VAR 0 33
32789: PUSH
32790: LD_INT 4
32792: NEG
32793: PUSH
32794: LD_INT 4
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 4
32804: NEG
32805: PUSH
32806: LD_INT 5
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 3
32816: NEG
32817: PUSH
32818: LD_INT 4
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 3
32828: NEG
32829: PUSH
32830: LD_INT 3
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 4
32840: NEG
32841: PUSH
32842: LD_INT 3
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 5
32852: NEG
32853: PUSH
32854: LD_INT 4
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 5
32864: NEG
32865: PUSH
32866: LD_INT 5
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: LD_INT 5
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 5
32888: NEG
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 3
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 4
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 3
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: LD_INT 2
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 3
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 4
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: LD_INT 4
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 4
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 4
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 5
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 5
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 4
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 3
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 3
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 5
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 3
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 4
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 4
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 2
33145: PUSH
33146: LD_INT 3
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 4
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 4
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 4
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 5
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 5
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 3
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33323: LD_ADDR_VAR 0 34
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 5
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 4
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 3
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: LD_INT 4
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 5
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 5
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 3
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 4
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 4
33525: PUSH
33526: LD_INT 4
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 4
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 5
33545: PUSH
33546: LD_INT 4
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 5
33555: PUSH
33556: LD_INT 5
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 5
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 5
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 5
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 4
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 3
33731: NEG
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 3
33742: NEG
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 4
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 5
33764: NEG
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 5
33775: NEG
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 5
33787: NEG
33788: PUSH
33789: LD_INT 2
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
// end ; end ;
33855: GO 33858
33857: POP
// case btype of b_depot , b_warehouse :
33858: LD_VAR 0 1
33862: PUSH
33863: LD_INT 0
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33877
33869: LD_INT 1
33871: DOUBLE
33872: EQUAL
33873: IFTRUE 33877
33875: GO 34078
33877: POP
// case nation of nation_american :
33878: LD_VAR 0 5
33882: PUSH
33883: LD_INT 1
33885: DOUBLE
33886: EQUAL
33887: IFTRUE 33891
33889: GO 33947
33891: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33892: LD_ADDR_VAR 0 9
33896: PUSH
33897: LD_VAR 0 11
33901: PUSH
33902: LD_VAR 0 12
33906: PUSH
33907: LD_VAR 0 13
33911: PUSH
33912: LD_VAR 0 14
33916: PUSH
33917: LD_VAR 0 15
33921: PUSH
33922: LD_VAR 0 16
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: PUSH
33935: LD_VAR 0 4
33939: PUSH
33940: LD_INT 1
33942: PLUS
33943: ARRAY
33944: ST_TO_ADDR
33945: GO 34076
33947: LD_INT 2
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 34011
33955: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33956: LD_ADDR_VAR 0 9
33960: PUSH
33961: LD_VAR 0 17
33965: PUSH
33966: LD_VAR 0 18
33970: PUSH
33971: LD_VAR 0 19
33975: PUSH
33976: LD_VAR 0 20
33980: PUSH
33981: LD_VAR 0 21
33985: PUSH
33986: LD_VAR 0 22
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: PUSH
33999: LD_VAR 0 4
34003: PUSH
34004: LD_INT 1
34006: PLUS
34007: ARRAY
34008: ST_TO_ADDR
34009: GO 34076
34011: LD_INT 3
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34019
34017: GO 34075
34019: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34020: LD_ADDR_VAR 0 9
34024: PUSH
34025: LD_VAR 0 23
34029: PUSH
34030: LD_VAR 0 24
34034: PUSH
34035: LD_VAR 0 25
34039: PUSH
34040: LD_VAR 0 26
34044: PUSH
34045: LD_VAR 0 27
34049: PUSH
34050: LD_VAR 0 28
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: PUSH
34063: LD_VAR 0 4
34067: PUSH
34068: LD_INT 1
34070: PLUS
34071: ARRAY
34072: ST_TO_ADDR
34073: GO 34076
34075: POP
34076: GO 34631
34078: LD_INT 2
34080: DOUBLE
34081: EQUAL
34082: IFTRUE 34092
34084: LD_INT 3
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34148
34092: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34093: LD_ADDR_VAR 0 9
34097: PUSH
34098: LD_VAR 0 29
34102: PUSH
34103: LD_VAR 0 30
34107: PUSH
34108: LD_VAR 0 31
34112: PUSH
34113: LD_VAR 0 32
34117: PUSH
34118: LD_VAR 0 33
34122: PUSH
34123: LD_VAR 0 34
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: PUSH
34136: LD_VAR 0 4
34140: PUSH
34141: LD_INT 1
34143: PLUS
34144: ARRAY
34145: ST_TO_ADDR
34146: GO 34631
34148: LD_INT 16
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34210
34154: LD_INT 17
34156: DOUBLE
34157: EQUAL
34158: IFTRUE 34210
34160: LD_INT 18
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34210
34166: LD_INT 19
34168: DOUBLE
34169: EQUAL
34170: IFTRUE 34210
34172: LD_INT 22
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34210
34178: LD_INT 20
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34210
34184: LD_INT 21
34186: DOUBLE
34187: EQUAL
34188: IFTRUE 34210
34190: LD_INT 23
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34210
34196: LD_INT 24
34198: DOUBLE
34199: EQUAL
34200: IFTRUE 34210
34202: LD_INT 25
34204: DOUBLE
34205: EQUAL
34206: IFTRUE 34210
34208: GO 34266
34210: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34211: LD_ADDR_VAR 0 9
34215: PUSH
34216: LD_VAR 0 35
34220: PUSH
34221: LD_VAR 0 36
34225: PUSH
34226: LD_VAR 0 37
34230: PUSH
34231: LD_VAR 0 38
34235: PUSH
34236: LD_VAR 0 39
34240: PUSH
34241: LD_VAR 0 40
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: PUSH
34254: LD_VAR 0 4
34258: PUSH
34259: LD_INT 1
34261: PLUS
34262: ARRAY
34263: ST_TO_ADDR
34264: GO 34631
34266: LD_INT 6
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34322
34272: LD_INT 7
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34322
34278: LD_INT 8
34280: DOUBLE
34281: EQUAL
34282: IFTRUE 34322
34284: LD_INT 13
34286: DOUBLE
34287: EQUAL
34288: IFTRUE 34322
34290: LD_INT 12
34292: DOUBLE
34293: EQUAL
34294: IFTRUE 34322
34296: LD_INT 15
34298: DOUBLE
34299: EQUAL
34300: IFTRUE 34322
34302: LD_INT 11
34304: DOUBLE
34305: EQUAL
34306: IFTRUE 34322
34308: LD_INT 14
34310: DOUBLE
34311: EQUAL
34312: IFTRUE 34322
34314: LD_INT 10
34316: DOUBLE
34317: EQUAL
34318: IFTRUE 34322
34320: GO 34378
34322: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34323: LD_ADDR_VAR 0 9
34327: PUSH
34328: LD_VAR 0 41
34332: PUSH
34333: LD_VAR 0 42
34337: PUSH
34338: LD_VAR 0 43
34342: PUSH
34343: LD_VAR 0 44
34347: PUSH
34348: LD_VAR 0 45
34352: PUSH
34353: LD_VAR 0 46
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: PUSH
34366: LD_VAR 0 4
34370: PUSH
34371: LD_INT 1
34373: PLUS
34374: ARRAY
34375: ST_TO_ADDR
34376: GO 34631
34378: LD_INT 36
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34386
34384: GO 34442
34386: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34387: LD_ADDR_VAR 0 9
34391: PUSH
34392: LD_VAR 0 47
34396: PUSH
34397: LD_VAR 0 48
34401: PUSH
34402: LD_VAR 0 49
34406: PUSH
34407: LD_VAR 0 50
34411: PUSH
34412: LD_VAR 0 51
34416: PUSH
34417: LD_VAR 0 52
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: PUSH
34430: LD_VAR 0 4
34434: PUSH
34435: LD_INT 1
34437: PLUS
34438: ARRAY
34439: ST_TO_ADDR
34440: GO 34631
34442: LD_INT 4
34444: DOUBLE
34445: EQUAL
34446: IFTRUE 34468
34448: LD_INT 5
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34468
34454: LD_INT 34
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34468
34460: LD_INT 37
34462: DOUBLE
34463: EQUAL
34464: IFTRUE 34468
34466: GO 34524
34468: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34469: LD_ADDR_VAR 0 9
34473: PUSH
34474: LD_VAR 0 53
34478: PUSH
34479: LD_VAR 0 54
34483: PUSH
34484: LD_VAR 0 55
34488: PUSH
34489: LD_VAR 0 56
34493: PUSH
34494: LD_VAR 0 57
34498: PUSH
34499: LD_VAR 0 58
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: PUSH
34512: LD_VAR 0 4
34516: PUSH
34517: LD_INT 1
34519: PLUS
34520: ARRAY
34521: ST_TO_ADDR
34522: GO 34631
34524: LD_INT 31
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34574
34530: LD_INT 32
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34574
34536: LD_INT 33
34538: DOUBLE
34539: EQUAL
34540: IFTRUE 34574
34542: LD_INT 27
34544: DOUBLE
34545: EQUAL
34546: IFTRUE 34574
34548: LD_INT 26
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34574
34554: LD_INT 28
34556: DOUBLE
34557: EQUAL
34558: IFTRUE 34574
34560: LD_INT 29
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34574
34566: LD_INT 30
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34630
34574: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34575: LD_ADDR_VAR 0 9
34579: PUSH
34580: LD_VAR 0 59
34584: PUSH
34585: LD_VAR 0 60
34589: PUSH
34590: LD_VAR 0 61
34594: PUSH
34595: LD_VAR 0 62
34599: PUSH
34600: LD_VAR 0 63
34604: PUSH
34605: LD_VAR 0 64
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: PUSH
34618: LD_VAR 0 4
34622: PUSH
34623: LD_INT 1
34625: PLUS
34626: ARRAY
34627: ST_TO_ADDR
34628: GO 34631
34630: POP
// temp_list2 = [ ] ;
34631: LD_ADDR_VAR 0 10
34635: PUSH
34636: EMPTY
34637: ST_TO_ADDR
// for i in temp_list do
34638: LD_ADDR_VAR 0 8
34642: PUSH
34643: LD_VAR 0 9
34647: PUSH
34648: FOR_IN
34649: IFFALSE 34701
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34651: LD_ADDR_VAR 0 10
34655: PUSH
34656: LD_VAR 0 10
34660: PUSH
34661: LD_VAR 0 8
34665: PUSH
34666: LD_INT 1
34668: ARRAY
34669: PUSH
34670: LD_VAR 0 2
34674: PLUS
34675: PUSH
34676: LD_VAR 0 8
34680: PUSH
34681: LD_INT 2
34683: ARRAY
34684: PUSH
34685: LD_VAR 0 3
34689: PLUS
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: ADD
34698: ST_TO_ADDR
34699: GO 34648
34701: POP
34702: POP
// result = temp_list2 ;
34703: LD_ADDR_VAR 0 7
34707: PUSH
34708: LD_VAR 0 10
34712: ST_TO_ADDR
// end ;
34713: LD_VAR 0 7
34717: RET
// export function EnemyInRange ( unit , dist ) ; begin
34718: LD_INT 0
34720: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34721: LD_ADDR_VAR 0 3
34725: PUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 255
34735: PPUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 250
34745: PPUSH
34746: LD_VAR 0 1
34750: PPUSH
34751: CALL_OW 251
34755: PPUSH
34756: LD_VAR 0 2
34760: PPUSH
34761: CALL 8091 0 4
34765: PUSH
34766: LD_INT 4
34768: ARRAY
34769: ST_TO_ADDR
// end ;
34770: LD_VAR 0 3
34774: RET
// export function PlayerSeeMe ( unit ) ; begin
34775: LD_INT 0
34777: PPUSH
// result := See ( your_side , unit ) ;
34778: LD_ADDR_VAR 0 2
34782: PUSH
34783: LD_OWVAR 2
34787: PPUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 292
34797: ST_TO_ADDR
// end ;
34798: LD_VAR 0 2
34802: RET
// export function ReverseDir ( unit ) ; begin
34803: LD_INT 0
34805: PPUSH
// if not unit then
34806: LD_VAR 0 1
34810: NOT
34811: IFFALSE 34815
// exit ;
34813: GO 34838
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34815: LD_ADDR_VAR 0 2
34819: PUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 254
34829: PUSH
34830: LD_INT 3
34832: PLUS
34833: PUSH
34834: LD_INT 6
34836: MOD
34837: ST_TO_ADDR
// end ;
34838: LD_VAR 0 2
34842: RET
// export function ReverseArray ( array ) ; var i ; begin
34843: LD_INT 0
34845: PPUSH
34846: PPUSH
// if not array then
34847: LD_VAR 0 1
34851: NOT
34852: IFFALSE 34856
// exit ;
34854: GO 34911
// result := [ ] ;
34856: LD_ADDR_VAR 0 2
34860: PUSH
34861: EMPTY
34862: ST_TO_ADDR
// for i := array downto 1 do
34863: LD_ADDR_VAR 0 3
34867: PUSH
34868: DOUBLE
34869: LD_VAR 0 1
34873: INC
34874: ST_TO_ADDR
34875: LD_INT 1
34877: PUSH
34878: FOR_DOWNTO
34879: IFFALSE 34909
// result := Join ( result , array [ i ] ) ;
34881: LD_ADDR_VAR 0 2
34885: PUSH
34886: LD_VAR 0 2
34890: PPUSH
34891: LD_VAR 0 1
34895: PUSH
34896: LD_VAR 0 3
34900: ARRAY
34901: PPUSH
34902: CALL 39576 0 2
34906: ST_TO_ADDR
34907: GO 34878
34909: POP
34910: POP
// end ;
34911: LD_VAR 0 2
34915: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34916: LD_INT 0
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
// if not unit or not hexes then
34924: LD_VAR 0 1
34928: NOT
34929: PUSH
34930: LD_VAR 0 2
34934: NOT
34935: OR
34936: IFFALSE 34940
// exit ;
34938: GO 35063
// dist := 9999 ;
34940: LD_ADDR_VAR 0 5
34944: PUSH
34945: LD_INT 9999
34947: ST_TO_ADDR
// for i = 1 to hexes do
34948: LD_ADDR_VAR 0 4
34952: PUSH
34953: DOUBLE
34954: LD_INT 1
34956: DEC
34957: ST_TO_ADDR
34958: LD_VAR 0 2
34962: PUSH
34963: FOR_TO
34964: IFFALSE 35051
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34966: LD_ADDR_VAR 0 6
34970: PUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: LD_VAR 0 2
34980: PUSH
34981: LD_VAR 0 4
34985: ARRAY
34986: PUSH
34987: LD_INT 1
34989: ARRAY
34990: PPUSH
34991: LD_VAR 0 2
34995: PUSH
34996: LD_VAR 0 4
35000: ARRAY
35001: PUSH
35002: LD_INT 2
35004: ARRAY
35005: PPUSH
35006: CALL_OW 297
35010: ST_TO_ADDR
// if tdist < dist then
35011: LD_VAR 0 6
35015: PUSH
35016: LD_VAR 0 5
35020: LESS
35021: IFFALSE 35049
// begin hex := hexes [ i ] ;
35023: LD_ADDR_VAR 0 8
35027: PUSH
35028: LD_VAR 0 2
35032: PUSH
35033: LD_VAR 0 4
35037: ARRAY
35038: ST_TO_ADDR
// dist := tdist ;
35039: LD_ADDR_VAR 0 5
35043: PUSH
35044: LD_VAR 0 6
35048: ST_TO_ADDR
// end ; end ;
35049: GO 34963
35051: POP
35052: POP
// result := hex ;
35053: LD_ADDR_VAR 0 3
35057: PUSH
35058: LD_VAR 0 8
35062: ST_TO_ADDR
// end ;
35063: LD_VAR 0 3
35067: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35068: LD_INT 0
35070: PPUSH
35071: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35072: LD_VAR 0 1
35076: NOT
35077: PUSH
35078: LD_VAR 0 1
35082: PUSH
35083: LD_INT 21
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 23
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PPUSH
35107: CALL_OW 69
35111: IN
35112: NOT
35113: OR
35114: IFFALSE 35118
// exit ;
35116: GO 35165
// for i = 1 to 3 do
35118: LD_ADDR_VAR 0 3
35122: PUSH
35123: DOUBLE
35124: LD_INT 1
35126: DEC
35127: ST_TO_ADDR
35128: LD_INT 3
35130: PUSH
35131: FOR_TO
35132: IFFALSE 35163
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 250
35143: PPUSH
35144: LD_VAR 0 1
35148: PPUSH
35149: CALL_OW 251
35153: PPUSH
35154: LD_INT 1
35156: PPUSH
35157: CALL_OW 453
35161: GO 35131
35163: POP
35164: POP
// end ;
35165: LD_VAR 0 2
35169: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35170: LD_INT 0
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
// if not unit or not enemy_unit then
35178: LD_VAR 0 1
35182: NOT
35183: PUSH
35184: LD_VAR 0 2
35188: NOT
35189: OR
35190: IFFALSE 35194
// exit ;
35192: GO 35661
// if GetLives ( i ) < 250 then
35194: LD_VAR 0 4
35198: PPUSH
35199: CALL_OW 256
35203: PUSH
35204: LD_INT 250
35206: LESS
35207: IFFALSE 35220
// begin ComAutodestruct ( i ) ;
35209: LD_VAR 0 4
35213: PPUSH
35214: CALL 35068 0 1
// exit ;
35218: GO 35661
// end ; x := GetX ( enemy_unit ) ;
35220: LD_ADDR_VAR 0 7
35224: PUSH
35225: LD_VAR 0 2
35229: PPUSH
35230: CALL_OW 250
35234: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35235: LD_ADDR_VAR 0 8
35239: PUSH
35240: LD_VAR 0 2
35244: PPUSH
35245: CALL_OW 251
35249: ST_TO_ADDR
// if not x or not y then
35250: LD_VAR 0 7
35254: NOT
35255: PUSH
35256: LD_VAR 0 8
35260: NOT
35261: OR
35262: IFFALSE 35266
// exit ;
35264: GO 35661
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35266: LD_ADDR_VAR 0 6
35270: PUSH
35271: LD_VAR 0 7
35275: PPUSH
35276: LD_INT 0
35278: PPUSH
35279: LD_INT 4
35281: PPUSH
35282: CALL_OW 272
35286: PUSH
35287: LD_VAR 0 8
35291: PPUSH
35292: LD_INT 0
35294: PPUSH
35295: LD_INT 4
35297: PPUSH
35298: CALL_OW 273
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_VAR 0 7
35311: PPUSH
35312: LD_INT 1
35314: PPUSH
35315: LD_INT 4
35317: PPUSH
35318: CALL_OW 272
35322: PUSH
35323: LD_VAR 0 8
35327: PPUSH
35328: LD_INT 1
35330: PPUSH
35331: LD_INT 4
35333: PPUSH
35334: CALL_OW 273
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_VAR 0 7
35347: PPUSH
35348: LD_INT 2
35350: PPUSH
35351: LD_INT 4
35353: PPUSH
35354: CALL_OW 272
35358: PUSH
35359: LD_VAR 0 8
35363: PPUSH
35364: LD_INT 2
35366: PPUSH
35367: LD_INT 4
35369: PPUSH
35370: CALL_OW 273
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_VAR 0 7
35383: PPUSH
35384: LD_INT 3
35386: PPUSH
35387: LD_INT 4
35389: PPUSH
35390: CALL_OW 272
35394: PUSH
35395: LD_VAR 0 8
35399: PPUSH
35400: LD_INT 3
35402: PPUSH
35403: LD_INT 4
35405: PPUSH
35406: CALL_OW 273
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_VAR 0 7
35419: PPUSH
35420: LD_INT 4
35422: PPUSH
35423: LD_INT 4
35425: PPUSH
35426: CALL_OW 272
35430: PUSH
35431: LD_VAR 0 8
35435: PPUSH
35436: LD_INT 4
35438: PPUSH
35439: LD_INT 4
35441: PPUSH
35442: CALL_OW 273
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_VAR 0 7
35455: PPUSH
35456: LD_INT 5
35458: PPUSH
35459: LD_INT 4
35461: PPUSH
35462: CALL_OW 272
35466: PUSH
35467: LD_VAR 0 8
35471: PPUSH
35472: LD_INT 5
35474: PPUSH
35475: LD_INT 4
35477: PPUSH
35478: CALL_OW 273
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: ST_TO_ADDR
// for i = tmp downto 1 do
35495: LD_ADDR_VAR 0 4
35499: PUSH
35500: DOUBLE
35501: LD_VAR 0 6
35505: INC
35506: ST_TO_ADDR
35507: LD_INT 1
35509: PUSH
35510: FOR_DOWNTO
35511: IFFALSE 35612
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35513: LD_VAR 0 6
35517: PUSH
35518: LD_VAR 0 4
35522: ARRAY
35523: PUSH
35524: LD_INT 1
35526: ARRAY
35527: PPUSH
35528: LD_VAR 0 6
35532: PUSH
35533: LD_VAR 0 4
35537: ARRAY
35538: PUSH
35539: LD_INT 2
35541: ARRAY
35542: PPUSH
35543: CALL_OW 488
35547: NOT
35548: PUSH
35549: LD_VAR 0 6
35553: PUSH
35554: LD_VAR 0 4
35558: ARRAY
35559: PUSH
35560: LD_INT 1
35562: ARRAY
35563: PPUSH
35564: LD_VAR 0 6
35568: PUSH
35569: LD_VAR 0 4
35573: ARRAY
35574: PUSH
35575: LD_INT 2
35577: ARRAY
35578: PPUSH
35579: CALL_OW 428
35583: PUSH
35584: LD_INT 0
35586: NONEQUAL
35587: OR
35588: IFFALSE 35610
// tmp := Delete ( tmp , i ) ;
35590: LD_ADDR_VAR 0 6
35594: PUSH
35595: LD_VAR 0 6
35599: PPUSH
35600: LD_VAR 0 4
35604: PPUSH
35605: CALL_OW 3
35609: ST_TO_ADDR
35610: GO 35510
35612: POP
35613: POP
// j := GetClosestHex ( unit , tmp ) ;
35614: LD_ADDR_VAR 0 5
35618: PUSH
35619: LD_VAR 0 1
35623: PPUSH
35624: LD_VAR 0 6
35628: PPUSH
35629: CALL 34916 0 2
35633: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35634: LD_VAR 0 1
35638: PPUSH
35639: LD_VAR 0 5
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: PPUSH
35648: LD_VAR 0 5
35652: PUSH
35653: LD_INT 2
35655: ARRAY
35656: PPUSH
35657: CALL_OW 111
// end ;
35661: LD_VAR 0 3
35665: RET
// export function PrepareApemanSoldier ( ) ; begin
35666: LD_INT 0
35668: PPUSH
// uc_nation := 0 ;
35669: LD_ADDR_OWVAR 21
35673: PUSH
35674: LD_INT 0
35676: ST_TO_ADDR
// hc_sex := sex_male ;
35677: LD_ADDR_OWVAR 27
35681: PUSH
35682: LD_INT 1
35684: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35685: LD_ADDR_OWVAR 28
35689: PUSH
35690: LD_INT 15
35692: ST_TO_ADDR
// hc_gallery :=  ;
35693: LD_ADDR_OWVAR 33
35697: PUSH
35698: LD_STRING 
35700: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35701: LD_ADDR_OWVAR 31
35705: PUSH
35706: LD_INT 0
35708: PPUSH
35709: LD_INT 3
35711: PPUSH
35712: CALL_OW 12
35716: PUSH
35717: LD_INT 0
35719: PPUSH
35720: LD_INT 3
35722: PPUSH
35723: CALL_OW 12
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: ST_TO_ADDR
// end ;
35740: LD_VAR 0 1
35744: RET
// export function PrepareApemanEngineer ( ) ; begin
35745: LD_INT 0
35747: PPUSH
// uc_nation := 0 ;
35748: LD_ADDR_OWVAR 21
35752: PUSH
35753: LD_INT 0
35755: ST_TO_ADDR
// hc_sex := sex_male ;
35756: LD_ADDR_OWVAR 27
35760: PUSH
35761: LD_INT 1
35763: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35764: LD_ADDR_OWVAR 28
35768: PUSH
35769: LD_INT 16
35771: ST_TO_ADDR
// hc_gallery :=  ;
35772: LD_ADDR_OWVAR 33
35776: PUSH
35777: LD_STRING 
35779: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35780: LD_ADDR_OWVAR 31
35784: PUSH
35785: LD_INT 0
35787: PPUSH
35788: LD_INT 3
35790: PPUSH
35791: CALL_OW 12
35795: PUSH
35796: LD_INT 0
35798: PPUSH
35799: LD_INT 3
35801: PPUSH
35802: CALL_OW 12
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: ST_TO_ADDR
// end ;
35819: LD_VAR 0 1
35823: RET
// export function PrepareApeman ( agressivity ) ; begin
35824: LD_INT 0
35826: PPUSH
// uc_side := 0 ;
35827: LD_ADDR_OWVAR 20
35831: PUSH
35832: LD_INT 0
35834: ST_TO_ADDR
// uc_nation := 0 ;
35835: LD_ADDR_OWVAR 21
35839: PUSH
35840: LD_INT 0
35842: ST_TO_ADDR
// hc_sex := sex_male ;
35843: LD_ADDR_OWVAR 27
35847: PUSH
35848: LD_INT 1
35850: ST_TO_ADDR
// hc_class := class_apeman ;
35851: LD_ADDR_OWVAR 28
35855: PUSH
35856: LD_INT 12
35858: ST_TO_ADDR
// hc_gallery :=  ;
35859: LD_ADDR_OWVAR 33
35863: PUSH
35864: LD_STRING 
35866: ST_TO_ADDR
// if agressivity = 0 then
35867: LD_VAR 0 1
35871: PUSH
35872: LD_INT 0
35874: EQUAL
35875: IFFALSE 35887
// hc_agressivity := 0 else
35877: LD_ADDR_OWVAR 35
35881: PUSH
35882: LD_INT 0
35884: ST_TO_ADDR
35885: GO 35908
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35887: LD_ADDR_OWVAR 35
35891: PUSH
35892: LD_VAR 0 1
35896: NEG
35897: PPUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL_OW 12
35907: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35908: LD_ADDR_OWVAR 31
35912: PUSH
35913: LD_INT 0
35915: PPUSH
35916: LD_INT 3
35918: PPUSH
35919: CALL_OW 12
35923: PUSH
35924: LD_INT 0
35926: PPUSH
35927: LD_INT 3
35929: PPUSH
35930: CALL_OW 12
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: ST_TO_ADDR
// end ;
35947: LD_VAR 0 2
35951: RET
// export function PrepareTiger ( agressivity ) ; begin
35952: LD_INT 0
35954: PPUSH
// uc_side := 0 ;
35955: LD_ADDR_OWVAR 20
35959: PUSH
35960: LD_INT 0
35962: ST_TO_ADDR
// uc_nation := 0 ;
35963: LD_ADDR_OWVAR 21
35967: PUSH
35968: LD_INT 0
35970: ST_TO_ADDR
// hc_class := class_tiger ;
35971: LD_ADDR_OWVAR 28
35975: PUSH
35976: LD_INT 14
35978: ST_TO_ADDR
// hc_gallery :=  ;
35979: LD_ADDR_OWVAR 33
35983: PUSH
35984: LD_STRING 
35986: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35987: LD_ADDR_OWVAR 35
35991: PUSH
35992: LD_VAR 0 1
35996: NEG
35997: PPUSH
35998: LD_VAR 0 1
36002: PPUSH
36003: CALL_OW 12
36007: ST_TO_ADDR
// end ;
36008: LD_VAR 0 2
36012: RET
// export function PrepareEnchidna ( ) ; begin
36013: LD_INT 0
36015: PPUSH
// uc_side := 0 ;
36016: LD_ADDR_OWVAR 20
36020: PUSH
36021: LD_INT 0
36023: ST_TO_ADDR
// uc_nation := 0 ;
36024: LD_ADDR_OWVAR 21
36028: PUSH
36029: LD_INT 0
36031: ST_TO_ADDR
// hc_class := class_baggie ;
36032: LD_ADDR_OWVAR 28
36036: PUSH
36037: LD_INT 13
36039: ST_TO_ADDR
// hc_gallery :=  ;
36040: LD_ADDR_OWVAR 33
36044: PUSH
36045: LD_STRING 
36047: ST_TO_ADDR
// end ;
36048: LD_VAR 0 1
36052: RET
// export function PrepareFrog ( ) ; begin
36053: LD_INT 0
36055: PPUSH
// uc_side := 0 ;
36056: LD_ADDR_OWVAR 20
36060: PUSH
36061: LD_INT 0
36063: ST_TO_ADDR
// uc_nation := 0 ;
36064: LD_ADDR_OWVAR 21
36068: PUSH
36069: LD_INT 0
36071: ST_TO_ADDR
// hc_class := class_frog ;
36072: LD_ADDR_OWVAR 28
36076: PUSH
36077: LD_INT 19
36079: ST_TO_ADDR
// hc_gallery :=  ;
36080: LD_ADDR_OWVAR 33
36084: PUSH
36085: LD_STRING 
36087: ST_TO_ADDR
// end ;
36088: LD_VAR 0 1
36092: RET
// export function PrepareFish ( ) ; begin
36093: LD_INT 0
36095: PPUSH
// uc_side := 0 ;
36096: LD_ADDR_OWVAR 20
36100: PUSH
36101: LD_INT 0
36103: ST_TO_ADDR
// uc_nation := 0 ;
36104: LD_ADDR_OWVAR 21
36108: PUSH
36109: LD_INT 0
36111: ST_TO_ADDR
// hc_class := class_fish ;
36112: LD_ADDR_OWVAR 28
36116: PUSH
36117: LD_INT 20
36119: ST_TO_ADDR
// hc_gallery :=  ;
36120: LD_ADDR_OWVAR 33
36124: PUSH
36125: LD_STRING 
36127: ST_TO_ADDR
// end ;
36128: LD_VAR 0 1
36132: RET
// export function PrepareBird ( ) ; begin
36133: LD_INT 0
36135: PPUSH
// uc_side := 0 ;
36136: LD_ADDR_OWVAR 20
36140: PUSH
36141: LD_INT 0
36143: ST_TO_ADDR
// uc_nation := 0 ;
36144: LD_ADDR_OWVAR 21
36148: PUSH
36149: LD_INT 0
36151: ST_TO_ADDR
// hc_class := class_phororhacos ;
36152: LD_ADDR_OWVAR 28
36156: PUSH
36157: LD_INT 18
36159: ST_TO_ADDR
// hc_gallery :=  ;
36160: LD_ADDR_OWVAR 33
36164: PUSH
36165: LD_STRING 
36167: ST_TO_ADDR
// end ;
36168: LD_VAR 0 1
36172: RET
// export function PrepareHorse ( ) ; begin
36173: LD_INT 0
36175: PPUSH
// uc_side := 0 ;
36176: LD_ADDR_OWVAR 20
36180: PUSH
36181: LD_INT 0
36183: ST_TO_ADDR
// uc_nation := 0 ;
36184: LD_ADDR_OWVAR 21
36188: PUSH
36189: LD_INT 0
36191: ST_TO_ADDR
// hc_class := class_horse ;
36192: LD_ADDR_OWVAR 28
36196: PUSH
36197: LD_INT 21
36199: ST_TO_ADDR
// hc_gallery :=  ;
36200: LD_ADDR_OWVAR 33
36204: PUSH
36205: LD_STRING 
36207: ST_TO_ADDR
// end ;
36208: LD_VAR 0 1
36212: RET
// export function PrepareMastodont ( ) ; begin
36213: LD_INT 0
36215: PPUSH
// uc_side := 0 ;
36216: LD_ADDR_OWVAR 20
36220: PUSH
36221: LD_INT 0
36223: ST_TO_ADDR
// uc_nation := 0 ;
36224: LD_ADDR_OWVAR 21
36228: PUSH
36229: LD_INT 0
36231: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36232: LD_ADDR_OWVAR 37
36236: PUSH
36237: LD_INT 31
36239: ST_TO_ADDR
// vc_control := control_rider ;
36240: LD_ADDR_OWVAR 38
36244: PUSH
36245: LD_INT 4
36247: ST_TO_ADDR
// end ;
36248: LD_VAR 0 1
36252: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36253: LD_INT 0
36255: PPUSH
36256: PPUSH
36257: PPUSH
// uc_side = 0 ;
36258: LD_ADDR_OWVAR 20
36262: PUSH
36263: LD_INT 0
36265: ST_TO_ADDR
// uc_nation = 0 ;
36266: LD_ADDR_OWVAR 21
36270: PUSH
36271: LD_INT 0
36273: ST_TO_ADDR
// InitHc_All ( ) ;
36274: CALL_OW 584
// InitVc ;
36278: CALL_OW 20
// if mastodonts then
36282: LD_VAR 0 6
36286: IFFALSE 36353
// for i = 1 to mastodonts do
36288: LD_ADDR_VAR 0 11
36292: PUSH
36293: DOUBLE
36294: LD_INT 1
36296: DEC
36297: ST_TO_ADDR
36298: LD_VAR 0 6
36302: PUSH
36303: FOR_TO
36304: IFFALSE 36351
// begin vc_chassis := 31 ;
36306: LD_ADDR_OWVAR 37
36310: PUSH
36311: LD_INT 31
36313: ST_TO_ADDR
// vc_control := control_rider ;
36314: LD_ADDR_OWVAR 38
36318: PUSH
36319: LD_INT 4
36321: ST_TO_ADDR
// animal := CreateVehicle ;
36322: LD_ADDR_VAR 0 12
36326: PUSH
36327: CALL_OW 45
36331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36332: LD_VAR 0 12
36336: PPUSH
36337: LD_VAR 0 8
36341: PPUSH
36342: LD_INT 0
36344: PPUSH
36345: CALL 38481 0 3
// end ;
36349: GO 36303
36351: POP
36352: POP
// if horses then
36353: LD_VAR 0 5
36357: IFFALSE 36424
// for i = 1 to horses do
36359: LD_ADDR_VAR 0 11
36363: PUSH
36364: DOUBLE
36365: LD_INT 1
36367: DEC
36368: ST_TO_ADDR
36369: LD_VAR 0 5
36373: PUSH
36374: FOR_TO
36375: IFFALSE 36422
// begin hc_class := 21 ;
36377: LD_ADDR_OWVAR 28
36381: PUSH
36382: LD_INT 21
36384: ST_TO_ADDR
// hc_gallery :=  ;
36385: LD_ADDR_OWVAR 33
36389: PUSH
36390: LD_STRING 
36392: ST_TO_ADDR
// animal := CreateHuman ;
36393: LD_ADDR_VAR 0 12
36397: PUSH
36398: CALL_OW 44
36402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36403: LD_VAR 0 12
36407: PPUSH
36408: LD_VAR 0 8
36412: PPUSH
36413: LD_INT 0
36415: PPUSH
36416: CALL 38481 0 3
// end ;
36420: GO 36374
36422: POP
36423: POP
// if birds then
36424: LD_VAR 0 1
36428: IFFALSE 36495
// for i = 1 to birds do
36430: LD_ADDR_VAR 0 11
36434: PUSH
36435: DOUBLE
36436: LD_INT 1
36438: DEC
36439: ST_TO_ADDR
36440: LD_VAR 0 1
36444: PUSH
36445: FOR_TO
36446: IFFALSE 36493
// begin hc_class := 18 ;
36448: LD_ADDR_OWVAR 28
36452: PUSH
36453: LD_INT 18
36455: ST_TO_ADDR
// hc_gallery =  ;
36456: LD_ADDR_OWVAR 33
36460: PUSH
36461: LD_STRING 
36463: ST_TO_ADDR
// animal := CreateHuman ;
36464: LD_ADDR_VAR 0 12
36468: PUSH
36469: CALL_OW 44
36473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36474: LD_VAR 0 12
36478: PPUSH
36479: LD_VAR 0 8
36483: PPUSH
36484: LD_INT 0
36486: PPUSH
36487: CALL 38481 0 3
// end ;
36491: GO 36445
36493: POP
36494: POP
// if tigers then
36495: LD_VAR 0 2
36499: IFFALSE 36583
// for i = 1 to tigers do
36501: LD_ADDR_VAR 0 11
36505: PUSH
36506: DOUBLE
36507: LD_INT 1
36509: DEC
36510: ST_TO_ADDR
36511: LD_VAR 0 2
36515: PUSH
36516: FOR_TO
36517: IFFALSE 36581
// begin hc_class = class_tiger ;
36519: LD_ADDR_OWVAR 28
36523: PUSH
36524: LD_INT 14
36526: ST_TO_ADDR
// hc_gallery =  ;
36527: LD_ADDR_OWVAR 33
36531: PUSH
36532: LD_STRING 
36534: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36535: LD_ADDR_OWVAR 35
36539: PUSH
36540: LD_INT 7
36542: NEG
36543: PPUSH
36544: LD_INT 7
36546: PPUSH
36547: CALL_OW 12
36551: ST_TO_ADDR
// animal := CreateHuman ;
36552: LD_ADDR_VAR 0 12
36556: PUSH
36557: CALL_OW 44
36561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36562: LD_VAR 0 12
36566: PPUSH
36567: LD_VAR 0 8
36571: PPUSH
36572: LD_INT 0
36574: PPUSH
36575: CALL 38481 0 3
// end ;
36579: GO 36516
36581: POP
36582: POP
// if apemans then
36583: LD_VAR 0 3
36587: IFFALSE 36710
// for i = 1 to apemans do
36589: LD_ADDR_VAR 0 11
36593: PUSH
36594: DOUBLE
36595: LD_INT 1
36597: DEC
36598: ST_TO_ADDR
36599: LD_VAR 0 3
36603: PUSH
36604: FOR_TO
36605: IFFALSE 36708
// begin hc_class = class_apeman ;
36607: LD_ADDR_OWVAR 28
36611: PUSH
36612: LD_INT 12
36614: ST_TO_ADDR
// hc_gallery =  ;
36615: LD_ADDR_OWVAR 33
36619: PUSH
36620: LD_STRING 
36622: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36623: LD_ADDR_OWVAR 35
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PPUSH
36632: LD_INT 2
36634: PPUSH
36635: CALL_OW 12
36639: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36640: LD_ADDR_OWVAR 31
36644: PUSH
36645: LD_INT 1
36647: PPUSH
36648: LD_INT 3
36650: PPUSH
36651: CALL_OW 12
36655: PUSH
36656: LD_INT 1
36658: PPUSH
36659: LD_INT 3
36661: PPUSH
36662: CALL_OW 12
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: ST_TO_ADDR
// animal := CreateHuman ;
36679: LD_ADDR_VAR 0 12
36683: PUSH
36684: CALL_OW 44
36688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36689: LD_VAR 0 12
36693: PPUSH
36694: LD_VAR 0 8
36698: PPUSH
36699: LD_INT 0
36701: PPUSH
36702: CALL 38481 0 3
// end ;
36706: GO 36604
36708: POP
36709: POP
// if enchidnas then
36710: LD_VAR 0 4
36714: IFFALSE 36781
// for i = 1 to enchidnas do
36716: LD_ADDR_VAR 0 11
36720: PUSH
36721: DOUBLE
36722: LD_INT 1
36724: DEC
36725: ST_TO_ADDR
36726: LD_VAR 0 4
36730: PUSH
36731: FOR_TO
36732: IFFALSE 36779
// begin hc_class = 13 ;
36734: LD_ADDR_OWVAR 28
36738: PUSH
36739: LD_INT 13
36741: ST_TO_ADDR
// hc_gallery =  ;
36742: LD_ADDR_OWVAR 33
36746: PUSH
36747: LD_STRING 
36749: ST_TO_ADDR
// animal := CreateHuman ;
36750: LD_ADDR_VAR 0 12
36754: PUSH
36755: CALL_OW 44
36759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36760: LD_VAR 0 12
36764: PPUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: LD_INT 0
36772: PPUSH
36773: CALL 38481 0 3
// end ;
36777: GO 36731
36779: POP
36780: POP
// if fishes then
36781: LD_VAR 0 7
36785: IFFALSE 36852
// for i = 1 to fishes do
36787: LD_ADDR_VAR 0 11
36791: PUSH
36792: DOUBLE
36793: LD_INT 1
36795: DEC
36796: ST_TO_ADDR
36797: LD_VAR 0 7
36801: PUSH
36802: FOR_TO
36803: IFFALSE 36850
// begin hc_class = 20 ;
36805: LD_ADDR_OWVAR 28
36809: PUSH
36810: LD_INT 20
36812: ST_TO_ADDR
// hc_gallery =  ;
36813: LD_ADDR_OWVAR 33
36817: PUSH
36818: LD_STRING 
36820: ST_TO_ADDR
// animal := CreateHuman ;
36821: LD_ADDR_VAR 0 12
36825: PUSH
36826: CALL_OW 44
36830: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36831: LD_VAR 0 12
36835: PPUSH
36836: LD_VAR 0 9
36840: PPUSH
36841: LD_INT 0
36843: PPUSH
36844: CALL 38481 0 3
// end ;
36848: GO 36802
36850: POP
36851: POP
// end ;
36852: LD_VAR 0 10
36856: RET
// export function WantHeal ( sci , unit ) ; begin
36857: LD_INT 0
36859: PPUSH
// if GetTaskList ( sci ) > 0 then
36860: LD_VAR 0 1
36864: PPUSH
36865: CALL_OW 437
36869: PUSH
36870: LD_INT 0
36872: GREATER
36873: IFFALSE 36943
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36875: LD_VAR 0 1
36879: PPUSH
36880: CALL_OW 437
36884: PUSH
36885: LD_INT 1
36887: ARRAY
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: PUSH
36893: LD_STRING l
36895: EQUAL
36896: PUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 437
36906: PUSH
36907: LD_INT 1
36909: ARRAY
36910: PUSH
36911: LD_INT 4
36913: ARRAY
36914: PUSH
36915: LD_VAR 0 2
36919: EQUAL
36920: AND
36921: IFFALSE 36933
// result := true else
36923: LD_ADDR_VAR 0 3
36927: PUSH
36928: LD_INT 1
36930: ST_TO_ADDR
36931: GO 36941
// result := false ;
36933: LD_ADDR_VAR 0 3
36937: PUSH
36938: LD_INT 0
36940: ST_TO_ADDR
// end else
36941: GO 36951
// result := false ;
36943: LD_ADDR_VAR 0 3
36947: PUSH
36948: LD_INT 0
36950: ST_TO_ADDR
// end ;
36951: LD_VAR 0 3
36955: RET
// export function HealTarget ( sci ) ; begin
36956: LD_INT 0
36958: PPUSH
// if not sci then
36959: LD_VAR 0 1
36963: NOT
36964: IFFALSE 36968
// exit ;
36966: GO 37033
// result := 0 ;
36968: LD_ADDR_VAR 0 2
36972: PUSH
36973: LD_INT 0
36975: ST_TO_ADDR
// if GetTaskList ( sci ) then
36976: LD_VAR 0 1
36980: PPUSH
36981: CALL_OW 437
36985: IFFALSE 37033
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL_OW 437
36996: PUSH
36997: LD_INT 1
36999: ARRAY
37000: PUSH
37001: LD_INT 1
37003: ARRAY
37004: PUSH
37005: LD_STRING l
37007: EQUAL
37008: IFFALSE 37033
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37010: LD_ADDR_VAR 0 2
37014: PUSH
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL_OW 437
37024: PUSH
37025: LD_INT 1
37027: ARRAY
37028: PUSH
37029: LD_INT 4
37031: ARRAY
37032: ST_TO_ADDR
// end ;
37033: LD_VAR 0 2
37037: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37038: LD_INT 0
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
// if not base_units then
37044: LD_VAR 0 1
37048: NOT
37049: IFFALSE 37053
// exit ;
37051: GO 37140
// result := false ;
37053: LD_ADDR_VAR 0 2
37057: PUSH
37058: LD_INT 0
37060: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37061: LD_ADDR_VAR 0 5
37065: PUSH
37066: LD_VAR 0 1
37070: PPUSH
37071: LD_INT 21
37073: PUSH
37074: LD_INT 3
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PPUSH
37081: CALL_OW 72
37085: ST_TO_ADDR
// if not tmp then
37086: LD_VAR 0 5
37090: NOT
37091: IFFALSE 37095
// exit ;
37093: GO 37140
// for i in tmp do
37095: LD_ADDR_VAR 0 3
37099: PUSH
37100: LD_VAR 0 5
37104: PUSH
37105: FOR_IN
37106: IFFALSE 37138
// begin result := EnemyInRange ( i , 22 ) ;
37108: LD_ADDR_VAR 0 2
37112: PUSH
37113: LD_VAR 0 3
37117: PPUSH
37118: LD_INT 22
37120: PPUSH
37121: CALL 34718 0 2
37125: ST_TO_ADDR
// if result then
37126: LD_VAR 0 2
37130: IFFALSE 37136
// exit ;
37132: POP
37133: POP
37134: GO 37140
// end ;
37136: GO 37105
37138: POP
37139: POP
// end ;
37140: LD_VAR 0 2
37144: RET
// export function FilterByTag ( units , tag ) ; begin
37145: LD_INT 0
37147: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37148: LD_ADDR_VAR 0 3
37152: PUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: LD_INT 120
37160: PUSH
37161: LD_VAR 0 2
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PPUSH
37170: CALL_OW 72
37174: ST_TO_ADDR
// end ;
37175: LD_VAR 0 3
37179: RET
// export function IsDriver ( un ) ; begin
37180: LD_INT 0
37182: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37183: LD_ADDR_VAR 0 2
37187: PUSH
37188: LD_VAR 0 1
37192: PUSH
37193: LD_INT 55
37195: PUSH
37196: EMPTY
37197: LIST
37198: PPUSH
37199: CALL_OW 69
37203: IN
37204: ST_TO_ADDR
// end ;
37205: LD_VAR 0 2
37209: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37210: LD_INT 0
37212: PPUSH
37213: PPUSH
// list := [ ] ;
37214: LD_ADDR_VAR 0 5
37218: PUSH
37219: EMPTY
37220: ST_TO_ADDR
// case d of 0 :
37221: LD_VAR 0 3
37225: PUSH
37226: LD_INT 0
37228: DOUBLE
37229: EQUAL
37230: IFTRUE 37234
37232: GO 37367
37234: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37235: LD_ADDR_VAR 0 5
37239: PUSH
37240: LD_VAR 0 1
37244: PUSH
37245: LD_INT 4
37247: MINUS
37248: PUSH
37249: LD_VAR 0 2
37253: PUSH
37254: LD_INT 4
37256: MINUS
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: PUSH
37266: LD_VAR 0 1
37270: PUSH
37271: LD_INT 3
37273: MINUS
37274: PUSH
37275: LD_VAR 0 2
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: PUSH
37288: LD_VAR 0 1
37292: PUSH
37293: LD_INT 4
37295: PLUS
37296: PUSH
37297: LD_VAR 0 2
37301: PUSH
37302: LD_INT 4
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: PUSH
37310: LD_VAR 0 1
37314: PUSH
37315: LD_INT 3
37317: PLUS
37318: PUSH
37319: LD_VAR 0 2
37323: PUSH
37324: LD_INT 3
37326: PLUS
37327: PUSH
37328: LD_INT 5
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: PUSH
37336: LD_VAR 0 1
37340: PUSH
37341: LD_VAR 0 2
37345: PUSH
37346: LD_INT 4
37348: PLUS
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: ST_TO_ADDR
// end ; 1 :
37365: GO 38065
37367: LD_INT 1
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37375
37373: GO 37508
37375: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37376: LD_ADDR_VAR 0 5
37380: PUSH
37381: LD_VAR 0 1
37385: PUSH
37386: LD_VAR 0 2
37390: PUSH
37391: LD_INT 4
37393: MINUS
37394: PUSH
37395: LD_INT 3
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: PUSH
37403: LD_VAR 0 1
37407: PUSH
37408: LD_INT 3
37410: MINUS
37411: PUSH
37412: LD_VAR 0 2
37416: PUSH
37417: LD_INT 3
37419: MINUS
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: PUSH
37429: LD_VAR 0 1
37433: PUSH
37434: LD_INT 4
37436: MINUS
37437: PUSH
37438: LD_VAR 0 2
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PUSH
37451: LD_VAR 0 1
37455: PUSH
37456: LD_VAR 0 2
37460: PUSH
37461: LD_INT 3
37463: PLUS
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PUSH
37473: LD_VAR 0 1
37477: PUSH
37478: LD_INT 4
37480: PLUS
37481: PUSH
37482: LD_VAR 0 2
37486: PUSH
37487: LD_INT 4
37489: PLUS
37490: PUSH
37491: LD_INT 5
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: ST_TO_ADDR
// end ; 2 :
37506: GO 38065
37508: LD_INT 2
37510: DOUBLE
37511: EQUAL
37512: IFTRUE 37516
37514: GO 37645
37516: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37517: LD_ADDR_VAR 0 5
37521: PUSH
37522: LD_VAR 0 1
37526: PUSH
37527: LD_VAR 0 2
37531: PUSH
37532: LD_INT 3
37534: MINUS
37535: PUSH
37536: LD_INT 3
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: PUSH
37544: LD_VAR 0 1
37548: PUSH
37549: LD_INT 4
37551: PLUS
37552: PUSH
37553: LD_VAR 0 2
37557: PUSH
37558: LD_INT 4
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: PUSH
37566: LD_VAR 0 1
37570: PUSH
37571: LD_VAR 0 2
37575: PUSH
37576: LD_INT 4
37578: PLUS
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: LD_INT 3
37595: MINUS
37596: PUSH
37597: LD_VAR 0 2
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: PUSH
37610: LD_VAR 0 1
37614: PUSH
37615: LD_INT 4
37617: MINUS
37618: PUSH
37619: LD_VAR 0 2
37623: PUSH
37624: LD_INT 4
37626: MINUS
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: ST_TO_ADDR
// end ; 3 :
37643: GO 38065
37645: LD_INT 3
37647: DOUBLE
37648: EQUAL
37649: IFTRUE 37653
37651: GO 37786
37653: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37654: LD_ADDR_VAR 0 5
37658: PUSH
37659: LD_VAR 0 1
37663: PUSH
37664: LD_INT 3
37666: PLUS
37667: PUSH
37668: LD_VAR 0 2
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_INT 4
37688: PLUS
37689: PUSH
37690: LD_VAR 0 2
37694: PUSH
37695: LD_INT 4
37697: PLUS
37698: PUSH
37699: LD_INT 5
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: PUSH
37707: LD_VAR 0 1
37711: PUSH
37712: LD_INT 4
37714: MINUS
37715: PUSH
37716: LD_VAR 0 2
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: PUSH
37729: LD_VAR 0 1
37733: PUSH
37734: LD_VAR 0 2
37738: PUSH
37739: LD_INT 4
37741: MINUS
37742: PUSH
37743: LD_INT 3
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: PUSH
37751: LD_VAR 0 1
37755: PUSH
37756: LD_INT 3
37758: MINUS
37759: PUSH
37760: LD_VAR 0 2
37764: PUSH
37765: LD_INT 3
37767: MINUS
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: ST_TO_ADDR
// end ; 4 :
37784: GO 38065
37786: LD_INT 4
37788: DOUBLE
37789: EQUAL
37790: IFTRUE 37794
37792: GO 37927
37794: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37795: LD_ADDR_VAR 0 5
37799: PUSH
37800: LD_VAR 0 1
37804: PUSH
37805: LD_VAR 0 2
37809: PUSH
37810: LD_INT 4
37812: PLUS
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: PUSH
37822: LD_VAR 0 1
37826: PUSH
37827: LD_INT 3
37829: PLUS
37830: PUSH
37831: LD_VAR 0 2
37835: PUSH
37836: LD_INT 3
37838: PLUS
37839: PUSH
37840: LD_INT 5
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: PUSH
37848: LD_VAR 0 1
37852: PUSH
37853: LD_INT 4
37855: PLUS
37856: PUSH
37857: LD_VAR 0 2
37861: PUSH
37862: LD_INT 4
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: PUSH
37870: LD_VAR 0 1
37874: PUSH
37875: LD_VAR 0 2
37879: PUSH
37880: LD_INT 3
37882: MINUS
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: PUSH
37892: LD_VAR 0 1
37896: PUSH
37897: LD_INT 4
37899: MINUS
37900: PUSH
37901: LD_VAR 0 2
37905: PUSH
37906: LD_INT 4
37908: MINUS
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// end ; 5 :
37925: GO 38065
37927: LD_INT 5
37929: DOUBLE
37930: EQUAL
37931: IFTRUE 37935
37933: GO 38064
37935: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37936: LD_ADDR_VAR 0 5
37940: PUSH
37941: LD_VAR 0 1
37945: PUSH
37946: LD_INT 4
37948: MINUS
37949: PUSH
37950: LD_VAR 0 2
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: PUSH
37963: LD_VAR 0 1
37967: PUSH
37968: LD_VAR 0 2
37972: PUSH
37973: LD_INT 4
37975: MINUS
37976: PUSH
37977: LD_INT 3
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: PUSH
37985: LD_VAR 0 1
37989: PUSH
37990: LD_INT 4
37992: PLUS
37993: PUSH
37994: LD_VAR 0 2
37998: PUSH
37999: LD_INT 4
38001: PLUS
38002: PUSH
38003: LD_INT 5
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: PUSH
38011: LD_VAR 0 1
38015: PUSH
38016: LD_INT 3
38018: PLUS
38019: PUSH
38020: LD_VAR 0 2
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: PUSH
38033: LD_VAR 0 1
38037: PUSH
38038: LD_VAR 0 2
38042: PUSH
38043: LD_INT 3
38045: PLUS
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
// end ; end ;
38062: GO 38065
38064: POP
// result := list ;
38065: LD_ADDR_VAR 0 4
38069: PUSH
38070: LD_VAR 0 5
38074: ST_TO_ADDR
// end ;
38075: LD_VAR 0 4
38079: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38080: LD_INT 0
38082: PPUSH
38083: PPUSH
38084: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38085: LD_VAR 0 1
38089: NOT
38090: PUSH
38091: LD_VAR 0 2
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: LD_INT 4
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: IN
38114: NOT
38115: OR
38116: IFFALSE 38120
// exit ;
38118: GO 38203
// tmp := [ ] ;
38120: LD_ADDR_VAR 0 5
38124: PUSH
38125: EMPTY
38126: ST_TO_ADDR
// for i in units do
38127: LD_ADDR_VAR 0 4
38131: PUSH
38132: LD_VAR 0 1
38136: PUSH
38137: FOR_IN
38138: IFFALSE 38172
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_VAR 0 5
38149: PPUSH
38150: LD_VAR 0 4
38154: PPUSH
38155: LD_VAR 0 2
38159: PPUSH
38160: CALL_OW 259
38164: PPUSH
38165: CALL 39576 0 2
38169: ST_TO_ADDR
38170: GO 38137
38172: POP
38173: POP
// if not tmp then
38174: LD_VAR 0 5
38178: NOT
38179: IFFALSE 38183
// exit ;
38181: GO 38203
// result := SortListByListDesc ( units , tmp ) ;
38183: LD_ADDR_VAR 0 3
38187: PUSH
38188: LD_VAR 0 1
38192: PPUSH
38193: LD_VAR 0 5
38197: PPUSH
38198: CALL_OW 77
38202: ST_TO_ADDR
// end ;
38203: LD_VAR 0 3
38207: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38208: LD_INT 0
38210: PPUSH
38211: PPUSH
38212: PPUSH
// result := false ;
38213: LD_ADDR_VAR 0 3
38217: PUSH
38218: LD_INT 0
38220: ST_TO_ADDR
// if not building then
38221: LD_VAR 0 2
38225: NOT
38226: IFFALSE 38230
// exit ;
38228: GO 38368
// x := GetX ( building ) ;
38230: LD_ADDR_VAR 0 4
38234: PUSH
38235: LD_VAR 0 2
38239: PPUSH
38240: CALL_OW 250
38244: ST_TO_ADDR
// y := GetY ( building ) ;
38245: LD_ADDR_VAR 0 5
38249: PUSH
38250: LD_VAR 0 2
38254: PPUSH
38255: CALL_OW 251
38259: ST_TO_ADDR
// if not x or not y then
38260: LD_VAR 0 4
38264: NOT
38265: PUSH
38266: LD_VAR 0 5
38270: NOT
38271: OR
38272: IFFALSE 38276
// exit ;
38274: GO 38368
// if GetTaskList ( unit ) then
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 437
38285: IFFALSE 38368
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38287: LD_STRING e
38289: PUSH
38290: LD_VAR 0 1
38294: PPUSH
38295: CALL_OW 437
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: PUSH
38304: LD_INT 1
38306: ARRAY
38307: EQUAL
38308: PUSH
38309: LD_VAR 0 4
38313: PUSH
38314: LD_VAR 0 1
38318: PPUSH
38319: CALL_OW 437
38323: PUSH
38324: LD_INT 1
38326: ARRAY
38327: PUSH
38328: LD_INT 2
38330: ARRAY
38331: EQUAL
38332: AND
38333: PUSH
38334: LD_VAR 0 5
38338: PUSH
38339: LD_VAR 0 1
38343: PPUSH
38344: CALL_OW 437
38348: PUSH
38349: LD_INT 1
38351: ARRAY
38352: PUSH
38353: LD_INT 3
38355: ARRAY
38356: EQUAL
38357: AND
38358: IFFALSE 38368
// result := true end ;
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: LD_INT 1
38367: ST_TO_ADDR
// end ;
38368: LD_VAR 0 3
38372: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38373: LD_INT 0
38375: PPUSH
// result := false ;
38376: LD_ADDR_VAR 0 4
38380: PUSH
38381: LD_INT 0
38383: ST_TO_ADDR
// if GetTaskList ( unit ) then
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 437
38393: IFFALSE 38476
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38395: LD_STRING M
38397: PUSH
38398: LD_VAR 0 1
38402: PPUSH
38403: CALL_OW 437
38407: PUSH
38408: LD_INT 1
38410: ARRAY
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: EQUAL
38416: PUSH
38417: LD_VAR 0 2
38421: PUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 437
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PUSH
38436: LD_INT 2
38438: ARRAY
38439: EQUAL
38440: AND
38441: PUSH
38442: LD_VAR 0 3
38446: PUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 437
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: PUSH
38461: LD_INT 3
38463: ARRAY
38464: EQUAL
38465: AND
38466: IFFALSE 38476
// result := true ;
38468: LD_ADDR_VAR 0 4
38472: PUSH
38473: LD_INT 1
38475: ST_TO_ADDR
// end ; end ;
38476: LD_VAR 0 4
38480: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38481: LD_INT 0
38483: PPUSH
38484: PPUSH
38485: PPUSH
38486: PPUSH
// if not unit or not area then
38487: LD_VAR 0 1
38491: NOT
38492: PUSH
38493: LD_VAR 0 2
38497: NOT
38498: OR
38499: IFFALSE 38503
// exit ;
38501: GO 38679
// tmp := AreaToList ( area , i ) ;
38503: LD_ADDR_VAR 0 6
38507: PUSH
38508: LD_VAR 0 2
38512: PPUSH
38513: LD_VAR 0 5
38517: PPUSH
38518: CALL_OW 517
38522: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38523: LD_ADDR_VAR 0 5
38527: PUSH
38528: DOUBLE
38529: LD_INT 1
38531: DEC
38532: ST_TO_ADDR
38533: LD_VAR 0 6
38537: PUSH
38538: LD_INT 1
38540: ARRAY
38541: PUSH
38542: FOR_TO
38543: IFFALSE 38677
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38545: LD_ADDR_VAR 0 7
38549: PUSH
38550: LD_VAR 0 6
38554: PUSH
38555: LD_INT 1
38557: ARRAY
38558: PUSH
38559: LD_VAR 0 5
38563: ARRAY
38564: PUSH
38565: LD_VAR 0 6
38569: PUSH
38570: LD_INT 2
38572: ARRAY
38573: PUSH
38574: LD_VAR 0 5
38578: ARRAY
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38584: LD_INT 92
38586: PUSH
38587: LD_VAR 0 7
38591: PUSH
38592: LD_INT 1
38594: ARRAY
38595: PUSH
38596: LD_VAR 0 7
38600: PUSH
38601: LD_INT 2
38603: ARRAY
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: PPUSH
38614: CALL_OW 69
38618: PUSH
38619: LD_INT 0
38621: EQUAL
38622: IFFALSE 38675
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_VAR 0 7
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: PPUSH
38638: LD_VAR 0 7
38642: PUSH
38643: LD_INT 2
38645: ARRAY
38646: PPUSH
38647: LD_VAR 0 3
38651: PPUSH
38652: CALL_OW 48
// result := IsPlaced ( unit ) ;
38656: LD_ADDR_VAR 0 4
38660: PUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 305
38670: ST_TO_ADDR
// exit ;
38671: POP
38672: POP
38673: GO 38679
// end ; end ;
38675: GO 38542
38677: POP
38678: POP
// end ;
38679: LD_VAR 0 4
38683: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38684: LD_INT 0
38686: PPUSH
38687: PPUSH
38688: PPUSH
// if not side or side > 8 then
38689: LD_VAR 0 1
38693: NOT
38694: PUSH
38695: LD_VAR 0 1
38699: PUSH
38700: LD_INT 8
38702: GREATER
38703: OR
38704: IFFALSE 38708
// exit ;
38706: GO 38895
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38708: LD_ADDR_VAR 0 4
38712: PUSH
38713: LD_INT 22
38715: PUSH
38716: LD_VAR 0 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 21
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PPUSH
38739: CALL_OW 69
38743: ST_TO_ADDR
// if not tmp then
38744: LD_VAR 0 4
38748: NOT
38749: IFFALSE 38753
// exit ;
38751: GO 38895
// enable_addtolog := true ;
38753: LD_ADDR_OWVAR 81
38757: PUSH
38758: LD_INT 1
38760: ST_TO_ADDR
// AddToLog ( [ ) ;
38761: LD_STRING [
38763: PPUSH
38764: CALL_OW 561
// for i in tmp do
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_VAR 0 4
38777: PUSH
38778: FOR_IN
38779: IFFALSE 38886
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38781: LD_STRING [
38783: PUSH
38784: LD_VAR 0 3
38788: PPUSH
38789: CALL_OW 266
38793: STR
38794: PUSH
38795: LD_STRING , 
38797: STR
38798: PUSH
38799: LD_VAR 0 3
38803: PPUSH
38804: CALL_OW 250
38808: STR
38809: PUSH
38810: LD_STRING , 
38812: STR
38813: PUSH
38814: LD_VAR 0 3
38818: PPUSH
38819: CALL_OW 251
38823: STR
38824: PUSH
38825: LD_STRING , 
38827: STR
38828: PUSH
38829: LD_VAR 0 3
38833: PPUSH
38834: CALL_OW 254
38838: STR
38839: PUSH
38840: LD_STRING , 
38842: STR
38843: PUSH
38844: LD_VAR 0 3
38848: PPUSH
38849: LD_INT 1
38851: PPUSH
38852: CALL_OW 268
38856: STR
38857: PUSH
38858: LD_STRING , 
38860: STR
38861: PUSH
38862: LD_VAR 0 3
38866: PPUSH
38867: LD_INT 2
38869: PPUSH
38870: CALL_OW 268
38874: STR
38875: PUSH
38876: LD_STRING ],
38878: STR
38879: PPUSH
38880: CALL_OW 561
// end ;
38884: GO 38778
38886: POP
38887: POP
// AddToLog ( ]; ) ;
38888: LD_STRING ];
38890: PPUSH
38891: CALL_OW 561
// end ;
38895: LD_VAR 0 2
38899: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38900: LD_INT 0
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
// if not area or not rate or not max then
38907: LD_VAR 0 1
38911: NOT
38912: PUSH
38913: LD_VAR 0 2
38917: NOT
38918: OR
38919: PUSH
38920: LD_VAR 0 4
38924: NOT
38925: OR
38926: IFFALSE 38930
// exit ;
38928: GO 39119
// while 1 do
38930: LD_INT 1
38932: IFFALSE 39119
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38934: LD_ADDR_VAR 0 9
38938: PUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: LD_INT 1
38946: PPUSH
38947: CALL_OW 287
38951: PUSH
38952: LD_INT 10
38954: MUL
38955: ST_TO_ADDR
// r := rate / 10 ;
38956: LD_ADDR_VAR 0 7
38960: PUSH
38961: LD_VAR 0 2
38965: PUSH
38966: LD_INT 10
38968: DIVREAL
38969: ST_TO_ADDR
// time := 1 1$00 ;
38970: LD_ADDR_VAR 0 8
38974: PUSH
38975: LD_INT 2100
38977: ST_TO_ADDR
// if amount < min then
38978: LD_VAR 0 9
38982: PUSH
38983: LD_VAR 0 3
38987: LESS
38988: IFFALSE 39006
// r := r * 2 else
38990: LD_ADDR_VAR 0 7
38994: PUSH
38995: LD_VAR 0 7
38999: PUSH
39000: LD_INT 2
39002: MUL
39003: ST_TO_ADDR
39004: GO 39032
// if amount > max then
39006: LD_VAR 0 9
39010: PUSH
39011: LD_VAR 0 4
39015: GREATER
39016: IFFALSE 39032
// r := r / 2 ;
39018: LD_ADDR_VAR 0 7
39022: PUSH
39023: LD_VAR 0 7
39027: PUSH
39028: LD_INT 2
39030: DIVREAL
39031: ST_TO_ADDR
// time := time / r ;
39032: LD_ADDR_VAR 0 8
39036: PUSH
39037: LD_VAR 0 8
39041: PUSH
39042: LD_VAR 0 7
39046: DIVREAL
39047: ST_TO_ADDR
// if time < 0 then
39048: LD_VAR 0 8
39052: PUSH
39053: LD_INT 0
39055: LESS
39056: IFFALSE 39073
// time := time * - 1 ;
39058: LD_ADDR_VAR 0 8
39062: PUSH
39063: LD_VAR 0 8
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: MUL
39072: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39073: LD_VAR 0 8
39077: PUSH
39078: LD_INT 35
39080: PPUSH
39081: LD_INT 875
39083: PPUSH
39084: CALL_OW 12
39088: PLUS
39089: PPUSH
39090: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39094: LD_INT 1
39096: PPUSH
39097: LD_INT 5
39099: PPUSH
39100: CALL_OW 12
39104: PPUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: LD_INT 1
39112: PPUSH
39113: CALL_OW 55
// end ;
39117: GO 38930
// end ;
39119: LD_VAR 0 5
39123: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39124: LD_INT 0
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
39132: PPUSH
39133: PPUSH
// if not turrets or not factories then
39134: LD_VAR 0 1
39138: NOT
39139: PUSH
39140: LD_VAR 0 2
39144: NOT
39145: OR
39146: IFFALSE 39150
// exit ;
39148: GO 39457
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39150: LD_ADDR_VAR 0 10
39154: PUSH
39155: LD_INT 5
39157: PUSH
39158: LD_INT 6
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: LD_INT 4
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 3
39177: PUSH
39178: LD_INT 5
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 24
39192: PUSH
39193: LD_INT 25
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 23
39202: PUSH
39203: LD_INT 27
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 42
39216: PUSH
39217: LD_INT 43
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 44
39226: PUSH
39227: LD_INT 46
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 45
39236: PUSH
39237: LD_INT 47
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: ST_TO_ADDR
// result := [ ] ;
39254: LD_ADDR_VAR 0 3
39258: PUSH
39259: EMPTY
39260: ST_TO_ADDR
// for i in turrets do
39261: LD_ADDR_VAR 0 4
39265: PUSH
39266: LD_VAR 0 1
39270: PUSH
39271: FOR_IN
39272: IFFALSE 39455
// begin nat := GetNation ( i ) ;
39274: LD_ADDR_VAR 0 7
39278: PUSH
39279: LD_VAR 0 4
39283: PPUSH
39284: CALL_OW 248
39288: ST_TO_ADDR
// weapon := 0 ;
39289: LD_ADDR_VAR 0 8
39293: PUSH
39294: LD_INT 0
39296: ST_TO_ADDR
// if not nat then
39297: LD_VAR 0 7
39301: NOT
39302: IFFALSE 39306
// continue ;
39304: GO 39271
// for j in list [ nat ] do
39306: LD_ADDR_VAR 0 5
39310: PUSH
39311: LD_VAR 0 10
39315: PUSH
39316: LD_VAR 0 7
39320: ARRAY
39321: PUSH
39322: FOR_IN
39323: IFFALSE 39364
// if GetBWeapon ( i ) = j [ 1 ] then
39325: LD_VAR 0 4
39329: PPUSH
39330: CALL_OW 269
39334: PUSH
39335: LD_VAR 0 5
39339: PUSH
39340: LD_INT 1
39342: ARRAY
39343: EQUAL
39344: IFFALSE 39362
// begin weapon := j [ 2 ] ;
39346: LD_ADDR_VAR 0 8
39350: PUSH
39351: LD_VAR 0 5
39355: PUSH
39356: LD_INT 2
39358: ARRAY
39359: ST_TO_ADDR
// break ;
39360: GO 39364
// end ;
39362: GO 39322
39364: POP
39365: POP
// if not weapon then
39366: LD_VAR 0 8
39370: NOT
39371: IFFALSE 39375
// continue ;
39373: GO 39271
// for k in factories do
39375: LD_ADDR_VAR 0 6
39379: PUSH
39380: LD_VAR 0 2
39384: PUSH
39385: FOR_IN
39386: IFFALSE 39451
// begin weapons := AvailableWeaponList ( k ) ;
39388: LD_ADDR_VAR 0 9
39392: PUSH
39393: LD_VAR 0 6
39397: PPUSH
39398: CALL_OW 478
39402: ST_TO_ADDR
// if not weapons then
39403: LD_VAR 0 9
39407: NOT
39408: IFFALSE 39412
// continue ;
39410: GO 39385
// if weapon in weapons then
39412: LD_VAR 0 8
39416: PUSH
39417: LD_VAR 0 9
39421: IN
39422: IFFALSE 39449
// begin result := [ i , weapon ] ;
39424: LD_ADDR_VAR 0 3
39428: PUSH
39429: LD_VAR 0 4
39433: PUSH
39434: LD_VAR 0 8
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: ST_TO_ADDR
// exit ;
39443: POP
39444: POP
39445: POP
39446: POP
39447: GO 39457
// end ; end ;
39449: GO 39385
39451: POP
39452: POP
// end ;
39453: GO 39271
39455: POP
39456: POP
// end ;
39457: LD_VAR 0 3
39461: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39462: LD_INT 0
39464: PPUSH
// if not side or side > 8 then
39465: LD_VAR 0 3
39469: NOT
39470: PUSH
39471: LD_VAR 0 3
39475: PUSH
39476: LD_INT 8
39478: GREATER
39479: OR
39480: IFFALSE 39484
// exit ;
39482: GO 39543
// if not range then
39484: LD_VAR 0 4
39488: NOT
39489: IFFALSE 39500
// range := - 12 ;
39491: LD_ADDR_VAR 0 4
39495: PUSH
39496: LD_INT 12
39498: NEG
39499: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39500: LD_VAR 0 1
39504: PPUSH
39505: LD_VAR 0 2
39509: PPUSH
39510: LD_VAR 0 3
39514: PPUSH
39515: LD_VAR 0 4
39519: PPUSH
39520: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_VAR 0 2
39533: PPUSH
39534: LD_VAR 0 3
39538: PPUSH
39539: CALL_OW 331
// end ;
39543: LD_VAR 0 5
39547: RET
// export function Video ( mode ) ; begin
39548: LD_INT 0
39550: PPUSH
// ingame_video = mode ;
39551: LD_ADDR_OWVAR 52
39555: PUSH
39556: LD_VAR 0 1
39560: ST_TO_ADDR
// interface_hidden = mode ;
39561: LD_ADDR_OWVAR 54
39565: PUSH
39566: LD_VAR 0 1
39570: ST_TO_ADDR
// end ;
39571: LD_VAR 0 2
39575: RET
// export function Join ( array , element ) ; begin
39576: LD_INT 0
39578: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39579: LD_ADDR_VAR 0 3
39583: PUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: LD_VAR 0 1
39593: PUSH
39594: LD_INT 1
39596: PLUS
39597: PPUSH
39598: LD_VAR 0 2
39602: PPUSH
39603: CALL_OW 1
39607: ST_TO_ADDR
// end ;
39608: LD_VAR 0 3
39612: RET
// export function JoinUnion ( array , element ) ; begin
39613: LD_INT 0
39615: PPUSH
// result := array union element ;
39616: LD_ADDR_VAR 0 3
39620: PUSH
39621: LD_VAR 0 1
39625: PUSH
39626: LD_VAR 0 2
39630: UNION
39631: ST_TO_ADDR
// end ;
39632: LD_VAR 0 3
39636: RET
// export function GetBehemoths ( side ) ; begin
39637: LD_INT 0
39639: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39640: LD_ADDR_VAR 0 2
39644: PUSH
39645: LD_INT 22
39647: PUSH
39648: LD_VAR 0 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 31
39659: PUSH
39660: LD_INT 25
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PPUSH
39671: CALL_OW 69
39675: ST_TO_ADDR
// end ;
39676: LD_VAR 0 2
39680: RET
// export function Shuffle ( array ) ; var i , index ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
39685: PPUSH
// result := [ ] ;
39686: LD_ADDR_VAR 0 2
39690: PUSH
39691: EMPTY
39692: ST_TO_ADDR
// if not array then
39693: LD_VAR 0 1
39697: NOT
39698: IFFALSE 39702
// exit ;
39700: GO 39801
// Randomize ;
39702: CALL_OW 10
// for i = array downto 1 do
39706: LD_ADDR_VAR 0 3
39710: PUSH
39711: DOUBLE
39712: LD_VAR 0 1
39716: INC
39717: ST_TO_ADDR
39718: LD_INT 1
39720: PUSH
39721: FOR_DOWNTO
39722: IFFALSE 39799
// begin index := rand ( 1 , array ) ;
39724: LD_ADDR_VAR 0 4
39728: PUSH
39729: LD_INT 1
39731: PPUSH
39732: LD_VAR 0 1
39736: PPUSH
39737: CALL_OW 12
39741: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39742: LD_ADDR_VAR 0 2
39746: PUSH
39747: LD_VAR 0 2
39751: PPUSH
39752: LD_VAR 0 2
39756: PUSH
39757: LD_INT 1
39759: PLUS
39760: PPUSH
39761: LD_VAR 0 1
39765: PUSH
39766: LD_VAR 0 4
39770: ARRAY
39771: PPUSH
39772: CALL_OW 2
39776: ST_TO_ADDR
// array := Delete ( array , index ) ;
39777: LD_ADDR_VAR 0 1
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: LD_VAR 0 4
39791: PPUSH
39792: CALL_OW 3
39796: ST_TO_ADDR
// end ;
39797: GO 39721
39799: POP
39800: POP
// end ;
39801: LD_VAR 0 2
39805: RET
// export function GetBaseMaterials ( base ) ; begin
39806: LD_INT 0
39808: PPUSH
// result := [ 0 , 0 , 0 ] ;
39809: LD_ADDR_VAR 0 2
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: ST_TO_ADDR
// if not base then
39828: LD_VAR 0 1
39832: NOT
39833: IFFALSE 39837
// exit ;
39835: GO 39886
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39837: LD_ADDR_VAR 0 2
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: LD_INT 1
39849: PPUSH
39850: CALL_OW 275
39854: PUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: LD_INT 2
39862: PPUSH
39863: CALL_OW 275
39867: PUSH
39868: LD_VAR 0 1
39872: PPUSH
39873: LD_INT 3
39875: PPUSH
39876: CALL_OW 275
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// end ;
39886: LD_VAR 0 2
39890: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
// result := array ;
39895: LD_ADDR_VAR 0 3
39899: PUSH
39900: LD_VAR 0 1
39904: ST_TO_ADDR
// if size >= result then
39905: LD_VAR 0 2
39909: PUSH
39910: LD_VAR 0 3
39914: GREATEREQUAL
39915: IFFALSE 39919
// exit ;
39917: GO 39969
// if size then
39919: LD_VAR 0 2
39923: IFFALSE 39969
// for i := array downto size do
39925: LD_ADDR_VAR 0 4
39929: PUSH
39930: DOUBLE
39931: LD_VAR 0 1
39935: INC
39936: ST_TO_ADDR
39937: LD_VAR 0 2
39941: PUSH
39942: FOR_DOWNTO
39943: IFFALSE 39967
// result := Delete ( result , result ) ;
39945: LD_ADDR_VAR 0 3
39949: PUSH
39950: LD_VAR 0 3
39954: PPUSH
39955: LD_VAR 0 3
39959: PPUSH
39960: CALL_OW 3
39964: ST_TO_ADDR
39965: GO 39942
39967: POP
39968: POP
// end ;
39969: LD_VAR 0 3
39973: RET
// export function ComExit ( unit ) ; var tmp ; begin
39974: LD_INT 0
39976: PPUSH
39977: PPUSH
// if not IsInUnit ( unit ) then
39978: LD_VAR 0 1
39982: PPUSH
39983: CALL_OW 310
39987: NOT
39988: IFFALSE 39992
// exit ;
39990: GO 40052
// tmp := IsInUnit ( unit ) ;
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_VAR 0 1
40001: PPUSH
40002: CALL_OW 310
40006: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40007: LD_VAR 0 3
40011: PPUSH
40012: CALL_OW 247
40016: PUSH
40017: LD_INT 2
40019: EQUAL
40020: IFFALSE 40033
// ComExitVehicle ( unit ) else
40022: LD_VAR 0 1
40026: PPUSH
40027: CALL_OW 121
40031: GO 40042
// ComExitBuilding ( unit ) ;
40033: LD_VAR 0 1
40037: PPUSH
40038: CALL_OW 122
// result := tmp ;
40042: LD_ADDR_VAR 0 2
40046: PUSH
40047: LD_VAR 0 3
40051: ST_TO_ADDR
// end ;
40052: LD_VAR 0 2
40056: RET
// export function ComExitAll ( units ) ; var i ; begin
40057: LD_INT 0
40059: PPUSH
40060: PPUSH
// if not units then
40061: LD_VAR 0 1
40065: NOT
40066: IFFALSE 40070
// exit ;
40068: GO 40096
// for i in units do
40070: LD_ADDR_VAR 0 3
40074: PUSH
40075: LD_VAR 0 1
40079: PUSH
40080: FOR_IN
40081: IFFALSE 40094
// ComExit ( i ) ;
40083: LD_VAR 0 3
40087: PPUSH
40088: CALL 39974 0 1
40092: GO 40080
40094: POP
40095: POP
// end ;
40096: LD_VAR 0 2
40100: RET
// export function ResetHc ; begin
40101: LD_INT 0
40103: PPUSH
// InitHc ;
40104: CALL_OW 19
// hc_importance := 0 ;
40108: LD_ADDR_OWVAR 32
40112: PUSH
40113: LD_INT 0
40115: ST_TO_ADDR
// end ;
40116: LD_VAR 0 1
40120: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40121: LD_INT 0
40123: PPUSH
40124: PPUSH
40125: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40126: LD_ADDR_VAR 0 6
40130: PUSH
40131: LD_VAR 0 1
40135: PUSH
40136: LD_VAR 0 3
40140: PLUS
40141: PUSH
40142: LD_INT 2
40144: DIV
40145: ST_TO_ADDR
// if _x < 0 then
40146: LD_VAR 0 6
40150: PUSH
40151: LD_INT 0
40153: LESS
40154: IFFALSE 40171
// _x := _x * - 1 ;
40156: LD_ADDR_VAR 0 6
40160: PUSH
40161: LD_VAR 0 6
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: MUL
40170: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40171: LD_ADDR_VAR 0 7
40175: PUSH
40176: LD_VAR 0 2
40180: PUSH
40181: LD_VAR 0 4
40185: PLUS
40186: PUSH
40187: LD_INT 2
40189: DIV
40190: ST_TO_ADDR
// if _y < 0 then
40191: LD_VAR 0 7
40195: PUSH
40196: LD_INT 0
40198: LESS
40199: IFFALSE 40216
// _y := _y * - 1 ;
40201: LD_ADDR_VAR 0 7
40205: PUSH
40206: LD_VAR 0 7
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: MUL
40215: ST_TO_ADDR
// result := [ _x , _y ] ;
40216: LD_ADDR_VAR 0 5
40220: PUSH
40221: LD_VAR 0 6
40225: PUSH
40226: LD_VAR 0 7
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// end ;
40235: LD_VAR 0 5
40239: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40240: LD_INT 0
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
// task := GetTaskList ( unit ) ;
40246: LD_ADDR_VAR 0 7
40250: PUSH
40251: LD_VAR 0 1
40255: PPUSH
40256: CALL_OW 437
40260: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40261: LD_VAR 0 7
40265: NOT
40266: PUSH
40267: LD_VAR 0 1
40271: PPUSH
40272: LD_VAR 0 2
40276: PPUSH
40277: CALL_OW 308
40281: NOT
40282: AND
40283: IFFALSE 40287
// exit ;
40285: GO 40405
// if IsInArea ( unit , area ) then
40287: LD_VAR 0 1
40291: PPUSH
40292: LD_VAR 0 2
40296: PPUSH
40297: CALL_OW 308
40301: IFFALSE 40319
// begin ComMoveToArea ( unit , goAway ) ;
40303: LD_VAR 0 1
40307: PPUSH
40308: LD_VAR 0 3
40312: PPUSH
40313: CALL_OW 113
// exit ;
40317: GO 40405
// end ; if task [ 1 ] [ 1 ] <> M then
40319: LD_VAR 0 7
40323: PUSH
40324: LD_INT 1
40326: ARRAY
40327: PUSH
40328: LD_INT 1
40330: ARRAY
40331: PUSH
40332: LD_STRING M
40334: NONEQUAL
40335: IFFALSE 40339
// exit ;
40337: GO 40405
// x := task [ 1 ] [ 2 ] ;
40339: LD_ADDR_VAR 0 5
40343: PUSH
40344: LD_VAR 0 7
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: PUSH
40353: LD_INT 2
40355: ARRAY
40356: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40357: LD_ADDR_VAR 0 6
40361: PUSH
40362: LD_VAR 0 7
40366: PUSH
40367: LD_INT 1
40369: ARRAY
40370: PUSH
40371: LD_INT 3
40373: ARRAY
40374: ST_TO_ADDR
// if InArea ( x , y , area ) then
40375: LD_VAR 0 5
40379: PPUSH
40380: LD_VAR 0 6
40384: PPUSH
40385: LD_VAR 0 2
40389: PPUSH
40390: CALL_OW 309
40394: IFFALSE 40405
// ComStop ( unit ) ;
40396: LD_VAR 0 1
40400: PPUSH
40401: CALL_OW 141
// end ;
40405: LD_VAR 0 4
40409: RET
// export function Abs ( value ) ; begin
40410: LD_INT 0
40412: PPUSH
// result := value ;
40413: LD_ADDR_VAR 0 2
40417: PUSH
40418: LD_VAR 0 1
40422: ST_TO_ADDR
// if value < 0 then
40423: LD_VAR 0 1
40427: PUSH
40428: LD_INT 0
40430: LESS
40431: IFFALSE 40448
// result := value * - 1 ;
40433: LD_ADDR_VAR 0 2
40437: PUSH
40438: LD_VAR 0 1
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: MUL
40447: ST_TO_ADDR
// end ;
40448: LD_VAR 0 2
40452: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40453: LD_INT 0
40455: PPUSH
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
// if not unit or not building then
40463: LD_VAR 0 1
40467: NOT
40468: PUSH
40469: LD_VAR 0 2
40473: NOT
40474: OR
40475: IFFALSE 40479
// exit ;
40477: GO 40705
// x := GetX ( building ) ;
40479: LD_ADDR_VAR 0 4
40483: PUSH
40484: LD_VAR 0 2
40488: PPUSH
40489: CALL_OW 250
40493: ST_TO_ADDR
// y := GetY ( building ) ;
40494: LD_ADDR_VAR 0 6
40498: PUSH
40499: LD_VAR 0 2
40503: PPUSH
40504: CALL_OW 251
40508: ST_TO_ADDR
// d := GetDir ( building ) ;
40509: LD_ADDR_VAR 0 8
40513: PUSH
40514: LD_VAR 0 2
40518: PPUSH
40519: CALL_OW 254
40523: ST_TO_ADDR
// r := 4 ;
40524: LD_ADDR_VAR 0 9
40528: PUSH
40529: LD_INT 4
40531: ST_TO_ADDR
// for i := 1 to 5 do
40532: LD_ADDR_VAR 0 10
40536: PUSH
40537: DOUBLE
40538: LD_INT 1
40540: DEC
40541: ST_TO_ADDR
40542: LD_INT 5
40544: PUSH
40545: FOR_TO
40546: IFFALSE 40703
// begin _x := ShiftX ( x , d , r + i ) ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_VAR 0 4
40557: PPUSH
40558: LD_VAR 0 8
40562: PPUSH
40563: LD_VAR 0 9
40567: PUSH
40568: LD_VAR 0 10
40572: PLUS
40573: PPUSH
40574: CALL_OW 272
40578: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40579: LD_ADDR_VAR 0 7
40583: PUSH
40584: LD_VAR 0 6
40588: PPUSH
40589: LD_VAR 0 8
40593: PPUSH
40594: LD_VAR 0 9
40598: PUSH
40599: LD_VAR 0 10
40603: PLUS
40604: PPUSH
40605: CALL_OW 273
40609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40610: LD_VAR 0 5
40614: PPUSH
40615: LD_VAR 0 7
40619: PPUSH
40620: CALL_OW 488
40624: PUSH
40625: LD_VAR 0 5
40629: PPUSH
40630: LD_VAR 0 7
40634: PPUSH
40635: CALL_OW 428
40639: PPUSH
40640: CALL_OW 247
40644: PUSH
40645: LD_INT 3
40647: PUSH
40648: LD_INT 2
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: IN
40655: NOT
40656: AND
40657: IFFALSE 40701
// begin ComMoveXY ( unit , _x , _y ) ;
40659: LD_VAR 0 1
40663: PPUSH
40664: LD_VAR 0 5
40668: PPUSH
40669: LD_VAR 0 7
40673: PPUSH
40674: CALL_OW 111
// result := [ _x , _y ] ;
40678: LD_ADDR_VAR 0 3
40682: PUSH
40683: LD_VAR 0 5
40687: PUSH
40688: LD_VAR 0 7
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: ST_TO_ADDR
// exit ;
40697: POP
40698: POP
40699: GO 40705
// end ; end ;
40701: GO 40545
40703: POP
40704: POP
// end ;
40705: LD_VAR 0 3
40709: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40710: LD_INT 0
40712: PPUSH
40713: PPUSH
40714: PPUSH
// result := 0 ;
40715: LD_ADDR_VAR 0 3
40719: PUSH
40720: LD_INT 0
40722: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40723: LD_VAR 0 1
40727: PUSH
40728: LD_INT 0
40730: LESS
40731: PUSH
40732: LD_VAR 0 1
40736: PUSH
40737: LD_INT 8
40739: GREATER
40740: OR
40741: PUSH
40742: LD_VAR 0 2
40746: PUSH
40747: LD_INT 0
40749: LESS
40750: OR
40751: PUSH
40752: LD_VAR 0 2
40756: PUSH
40757: LD_INT 8
40759: GREATER
40760: OR
40761: IFFALSE 40765
// exit ;
40763: GO 40840
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40765: LD_ADDR_VAR 0 4
40769: PUSH
40770: LD_INT 22
40772: PUSH
40773: LD_VAR 0 2
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PPUSH
40782: CALL_OW 69
40786: PUSH
40787: FOR_IN
40788: IFFALSE 40838
// begin un := UnitShoot ( i ) ;
40790: LD_ADDR_VAR 0 5
40794: PUSH
40795: LD_VAR 0 4
40799: PPUSH
40800: CALL_OW 504
40804: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40805: LD_VAR 0 5
40809: PPUSH
40810: CALL_OW 255
40814: PUSH
40815: LD_VAR 0 1
40819: EQUAL
40820: IFFALSE 40836
// begin result := un ;
40822: LD_ADDR_VAR 0 3
40826: PUSH
40827: LD_VAR 0 5
40831: ST_TO_ADDR
// exit ;
40832: POP
40833: POP
40834: GO 40840
// end ; end ;
40836: GO 40787
40838: POP
40839: POP
// end ;
40840: LD_VAR 0 3
40844: RET
// export function GetCargoBay ( units ) ; begin
40845: LD_INT 0
40847: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40848: LD_ADDR_VAR 0 2
40852: PUSH
40853: LD_VAR 0 1
40857: PPUSH
40858: LD_INT 2
40860: PUSH
40861: LD_INT 34
40863: PUSH
40864: LD_INT 12
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 34
40873: PUSH
40874: LD_INT 51
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 34
40883: PUSH
40884: LD_INT 32
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 34
40893: PUSH
40894: LD_INT 89
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: PPUSH
40908: CALL_OW 72
40912: ST_TO_ADDR
// end ;
40913: LD_VAR 0 2
40917: RET
// export function Negate ( value ) ; begin
40918: LD_INT 0
40920: PPUSH
// result := not value ;
40921: LD_ADDR_VAR 0 2
40925: PUSH
40926: LD_VAR 0 1
40930: NOT
40931: ST_TO_ADDR
// end ;
40932: LD_VAR 0 2
40936: RET
// export function Inc ( value ) ; begin
40937: LD_INT 0
40939: PPUSH
// result := value + 1 ;
40940: LD_ADDR_VAR 0 2
40944: PUSH
40945: LD_VAR 0 1
40949: PUSH
40950: LD_INT 1
40952: PLUS
40953: ST_TO_ADDR
// end ;
40954: LD_VAR 0 2
40958: RET
// export function Dec ( value ) ; begin
40959: LD_INT 0
40961: PPUSH
// result := value - 1 ;
40962: LD_ADDR_VAR 0 2
40966: PUSH
40967: LD_VAR 0 1
40971: PUSH
40972: LD_INT 1
40974: MINUS
40975: ST_TO_ADDR
// end ;
40976: LD_VAR 0 2
40980: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40981: LD_INT 0
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40991: LD_VAR 0 1
40995: PPUSH
40996: LD_VAR 0 2
41000: PPUSH
41001: CALL_OW 488
41005: NOT
41006: PUSH
41007: LD_VAR 0 3
41011: PPUSH
41012: LD_VAR 0 4
41016: PPUSH
41017: CALL_OW 488
41021: NOT
41022: OR
41023: IFFALSE 41036
// begin result := - 1 ;
41025: LD_ADDR_VAR 0 5
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: ST_TO_ADDR
// exit ;
41034: GO 41271
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41036: LD_ADDR_VAR 0 12
41040: PUSH
41041: LD_VAR 0 1
41045: PPUSH
41046: LD_VAR 0 2
41050: PPUSH
41051: LD_VAR 0 3
41055: PPUSH
41056: LD_VAR 0 4
41060: PPUSH
41061: CALL 40121 0 4
41065: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41066: LD_ADDR_VAR 0 11
41070: PUSH
41071: LD_VAR 0 1
41075: PPUSH
41076: LD_VAR 0 2
41080: PPUSH
41081: LD_VAR 0 12
41085: PUSH
41086: LD_INT 1
41088: ARRAY
41089: PPUSH
41090: LD_VAR 0 12
41094: PUSH
41095: LD_INT 2
41097: ARRAY
41098: PPUSH
41099: CALL_OW 298
41103: ST_TO_ADDR
// distance := 9999 ;
41104: LD_ADDR_VAR 0 10
41108: PUSH
41109: LD_INT 9999
41111: ST_TO_ADDR
// for i := 0 to 5 do
41112: LD_ADDR_VAR 0 6
41116: PUSH
41117: DOUBLE
41118: LD_INT 0
41120: DEC
41121: ST_TO_ADDR
41122: LD_INT 5
41124: PUSH
41125: FOR_TO
41126: IFFALSE 41269
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41128: LD_ADDR_VAR 0 7
41132: PUSH
41133: LD_VAR 0 1
41137: PPUSH
41138: LD_VAR 0 6
41142: PPUSH
41143: LD_VAR 0 11
41147: PPUSH
41148: CALL_OW 272
41152: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41153: LD_ADDR_VAR 0 8
41157: PUSH
41158: LD_VAR 0 2
41162: PPUSH
41163: LD_VAR 0 6
41167: PPUSH
41168: LD_VAR 0 11
41172: PPUSH
41173: CALL_OW 273
41177: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41178: LD_VAR 0 7
41182: PPUSH
41183: LD_VAR 0 8
41187: PPUSH
41188: CALL_OW 488
41192: NOT
41193: IFFALSE 41197
// continue ;
41195: GO 41125
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41197: LD_ADDR_VAR 0 9
41201: PUSH
41202: LD_VAR 0 12
41206: PUSH
41207: LD_INT 1
41209: ARRAY
41210: PPUSH
41211: LD_VAR 0 12
41215: PUSH
41216: LD_INT 2
41218: ARRAY
41219: PPUSH
41220: LD_VAR 0 7
41224: PPUSH
41225: LD_VAR 0 8
41229: PPUSH
41230: CALL_OW 298
41234: ST_TO_ADDR
// if tmp < distance then
41235: LD_VAR 0 9
41239: PUSH
41240: LD_VAR 0 10
41244: LESS
41245: IFFALSE 41267
// begin result := i ;
41247: LD_ADDR_VAR 0 5
41251: PUSH
41252: LD_VAR 0 6
41256: ST_TO_ADDR
// distance := tmp ;
41257: LD_ADDR_VAR 0 10
41261: PUSH
41262: LD_VAR 0 9
41266: ST_TO_ADDR
// end ; end ;
41267: GO 41125
41269: POP
41270: POP
// end ;
41271: LD_VAR 0 5
41275: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41276: LD_INT 0
41278: PPUSH
41279: PPUSH
// if not driver or not IsInUnit ( driver ) then
41280: LD_VAR 0 1
41284: NOT
41285: PUSH
41286: LD_VAR 0 1
41290: PPUSH
41291: CALL_OW 310
41295: NOT
41296: OR
41297: IFFALSE 41301
// exit ;
41299: GO 41391
// vehicle := IsInUnit ( driver ) ;
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: CALL_OW 310
41315: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41316: LD_VAR 0 1
41320: PPUSH
41321: LD_STRING \
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: PUSH
41351: LD_STRING E
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_VAR 0 3
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PPUSH
41387: CALL_OW 446
// end ;
41391: LD_VAR 0 2
41395: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41396: LD_INT 0
41398: PPUSH
41399: PPUSH
// if not driver or not IsInUnit ( driver ) then
41400: LD_VAR 0 1
41404: NOT
41405: PUSH
41406: LD_VAR 0 1
41410: PPUSH
41411: CALL_OW 310
41415: NOT
41416: OR
41417: IFFALSE 41421
// exit ;
41419: GO 41511
// vehicle := IsInUnit ( driver ) ;
41421: LD_ADDR_VAR 0 3
41425: PUSH
41426: LD_VAR 0 1
41430: PPUSH
41431: CALL_OW 310
41435: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41436: LD_VAR 0 1
41440: PPUSH
41441: LD_STRING \
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: PUSH
41471: LD_STRING E
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_VAR 0 3
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PPUSH
41507: CALL_OW 447
// end ;
41511: LD_VAR 0 2
41515: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41516: LD_INT 0
41518: PPUSH
41519: PPUSH
41520: PPUSH
// tmp := [ ] ;
41521: LD_ADDR_VAR 0 5
41525: PUSH
41526: EMPTY
41527: ST_TO_ADDR
// for i in units do
41528: LD_ADDR_VAR 0 4
41532: PUSH
41533: LD_VAR 0 1
41537: PUSH
41538: FOR_IN
41539: IFFALSE 41577
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41541: LD_ADDR_VAR 0 5
41545: PUSH
41546: LD_VAR 0 5
41550: PPUSH
41551: LD_VAR 0 5
41555: PUSH
41556: LD_INT 1
41558: PLUS
41559: PPUSH
41560: LD_VAR 0 4
41564: PPUSH
41565: CALL_OW 256
41569: PPUSH
41570: CALL_OW 2
41574: ST_TO_ADDR
41575: GO 41538
41577: POP
41578: POP
// if not tmp then
41579: LD_VAR 0 5
41583: NOT
41584: IFFALSE 41588
// exit ;
41586: GO 41636
// if asc then
41588: LD_VAR 0 2
41592: IFFALSE 41616
// result := SortListByListAsc ( units , tmp ) else
41594: LD_ADDR_VAR 0 3
41598: PUSH
41599: LD_VAR 0 1
41603: PPUSH
41604: LD_VAR 0 5
41608: PPUSH
41609: CALL_OW 76
41613: ST_TO_ADDR
41614: GO 41636
// result := SortListByListDesc ( units , tmp ) ;
41616: LD_ADDR_VAR 0 3
41620: PUSH
41621: LD_VAR 0 1
41625: PPUSH
41626: LD_VAR 0 5
41630: PPUSH
41631: CALL_OW 77
41635: ST_TO_ADDR
// end ;
41636: LD_VAR 0 3
41640: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41641: LD_INT 0
41643: PPUSH
41644: PPUSH
// task := GetTaskList ( mech ) ;
41645: LD_ADDR_VAR 0 4
41649: PUSH
41650: LD_VAR 0 1
41654: PPUSH
41655: CALL_OW 437
41659: ST_TO_ADDR
// if not task then
41660: LD_VAR 0 4
41664: NOT
41665: IFFALSE 41669
// exit ;
41667: GO 41711
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41669: LD_ADDR_VAR 0 3
41673: PUSH
41674: LD_VAR 0 4
41678: PUSH
41679: LD_INT 1
41681: ARRAY
41682: PUSH
41683: LD_INT 1
41685: ARRAY
41686: PUSH
41687: LD_STRING r
41689: EQUAL
41690: PUSH
41691: LD_VAR 0 4
41695: PUSH
41696: LD_INT 1
41698: ARRAY
41699: PUSH
41700: LD_INT 4
41702: ARRAY
41703: PUSH
41704: LD_VAR 0 2
41708: EQUAL
41709: AND
41710: ST_TO_ADDR
// end ;
41711: LD_VAR 0 3
41715: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41716: LD_INT 0
41718: PPUSH
// SetDir ( unit , d ) ;
41719: LD_VAR 0 1
41723: PPUSH
41724: LD_VAR 0 4
41728: PPUSH
41729: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41733: LD_ADDR_VAR 0 6
41737: PUSH
41738: LD_VAR 0 1
41742: PPUSH
41743: LD_VAR 0 2
41747: PPUSH
41748: LD_VAR 0 3
41752: PPUSH
41753: LD_VAR 0 5
41757: PPUSH
41758: CALL_OW 48
41762: ST_TO_ADDR
// end ;
41763: LD_VAR 0 6
41767: RET
// export function ToNaturalNumber ( number ) ; begin
41768: LD_INT 0
41770: PPUSH
// result := number div 1 ;
41771: LD_ADDR_VAR 0 2
41775: PUSH
41776: LD_VAR 0 1
41780: PUSH
41781: LD_INT 1
41783: DIV
41784: ST_TO_ADDR
// if number < 0 then
41785: LD_VAR 0 1
41789: PUSH
41790: LD_INT 0
41792: LESS
41793: IFFALSE 41803
// result := 0 ;
41795: LD_ADDR_VAR 0 2
41799: PUSH
41800: LD_INT 0
41802: ST_TO_ADDR
// end ;
41803: LD_VAR 0 2
41807: RET
// export function SortByClass ( units , class ) ; var un ; begin
41808: LD_INT 0
41810: PPUSH
41811: PPUSH
// if not units or not class then
41812: LD_VAR 0 1
41816: NOT
41817: PUSH
41818: LD_VAR 0 2
41822: NOT
41823: OR
41824: IFFALSE 41828
// exit ;
41826: GO 41923
// result := [ ] ;
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: EMPTY
41834: ST_TO_ADDR
// for un in units do
41835: LD_ADDR_VAR 0 4
41839: PUSH
41840: LD_VAR 0 1
41844: PUSH
41845: FOR_IN
41846: IFFALSE 41921
// if GetClass ( un ) = class then
41848: LD_VAR 0 4
41852: PPUSH
41853: CALL_OW 257
41857: PUSH
41858: LD_VAR 0 2
41862: EQUAL
41863: IFFALSE 41890
// result := Insert ( result , 1 , un ) else
41865: LD_ADDR_VAR 0 3
41869: PUSH
41870: LD_VAR 0 3
41874: PPUSH
41875: LD_INT 1
41877: PPUSH
41878: LD_VAR 0 4
41882: PPUSH
41883: CALL_OW 2
41887: ST_TO_ADDR
41888: GO 41919
// result := Replace ( result , result + 1 , un ) ;
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_VAR 0 3
41899: PPUSH
41900: LD_VAR 0 3
41904: PUSH
41905: LD_INT 1
41907: PLUS
41908: PPUSH
41909: LD_VAR 0 4
41913: PPUSH
41914: CALL_OW 1
41918: ST_TO_ADDR
41919: GO 41845
41921: POP
41922: POP
// end ;
41923: LD_VAR 0 3
41927: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41928: LD_INT 0
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
// result := [ ] ;
41937: LD_ADDR_VAR 0 4
41941: PUSH
41942: EMPTY
41943: ST_TO_ADDR
// if x - r < 0 then
41944: LD_VAR 0 1
41948: PUSH
41949: LD_VAR 0 3
41953: MINUS
41954: PUSH
41955: LD_INT 0
41957: LESS
41958: IFFALSE 41970
// min_x := 0 else
41960: LD_ADDR_VAR 0 8
41964: PUSH
41965: LD_INT 0
41967: ST_TO_ADDR
41968: GO 41986
// min_x := x - r ;
41970: LD_ADDR_VAR 0 8
41974: PUSH
41975: LD_VAR 0 1
41979: PUSH
41980: LD_VAR 0 3
41984: MINUS
41985: ST_TO_ADDR
// if y - r < 0 then
41986: LD_VAR 0 2
41990: PUSH
41991: LD_VAR 0 3
41995: MINUS
41996: PUSH
41997: LD_INT 0
41999: LESS
42000: IFFALSE 42012
// min_y := 0 else
42002: LD_ADDR_VAR 0 7
42006: PUSH
42007: LD_INT 0
42009: ST_TO_ADDR
42010: GO 42028
// min_y := y - r ;
42012: LD_ADDR_VAR 0 7
42016: PUSH
42017: LD_VAR 0 2
42021: PUSH
42022: LD_VAR 0 3
42026: MINUS
42027: ST_TO_ADDR
// max_x := x + r ;
42028: LD_ADDR_VAR 0 9
42032: PUSH
42033: LD_VAR 0 1
42037: PUSH
42038: LD_VAR 0 3
42042: PLUS
42043: ST_TO_ADDR
// max_y := y + r ;
42044: LD_ADDR_VAR 0 10
42048: PUSH
42049: LD_VAR 0 2
42053: PUSH
42054: LD_VAR 0 3
42058: PLUS
42059: ST_TO_ADDR
// for _x = min_x to max_x do
42060: LD_ADDR_VAR 0 5
42064: PUSH
42065: DOUBLE
42066: LD_VAR 0 8
42070: DEC
42071: ST_TO_ADDR
42072: LD_VAR 0 9
42076: PUSH
42077: FOR_TO
42078: IFFALSE 42179
// for _y = min_y to max_y do
42080: LD_ADDR_VAR 0 6
42084: PUSH
42085: DOUBLE
42086: LD_VAR 0 7
42090: DEC
42091: ST_TO_ADDR
42092: LD_VAR 0 10
42096: PUSH
42097: FOR_TO
42098: IFFALSE 42175
// begin if not ValidHex ( _x , _y ) then
42100: LD_VAR 0 5
42104: PPUSH
42105: LD_VAR 0 6
42109: PPUSH
42110: CALL_OW 488
42114: NOT
42115: IFFALSE 42119
// continue ;
42117: GO 42097
// if GetResourceTypeXY ( _x , _y ) then
42119: LD_VAR 0 5
42123: PPUSH
42124: LD_VAR 0 6
42128: PPUSH
42129: CALL_OW 283
42133: IFFALSE 42173
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42135: LD_ADDR_VAR 0 4
42139: PUSH
42140: LD_VAR 0 4
42144: PPUSH
42145: LD_VAR 0 4
42149: PUSH
42150: LD_INT 1
42152: PLUS
42153: PPUSH
42154: LD_VAR 0 5
42158: PUSH
42159: LD_VAR 0 6
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PPUSH
42168: CALL_OW 1
42172: ST_TO_ADDR
// end ;
42173: GO 42097
42175: POP
42176: POP
42177: GO 42077
42179: POP
42180: POP
// end ;
42181: LD_VAR 0 4
42185: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42186: LD_INT 0
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
// if not units then
42196: LD_VAR 0 1
42200: NOT
42201: IFFALSE 42205
// exit ;
42203: GO 42733
// result := UnitFilter ( units , [ f_ok ] ) ;
42205: LD_ADDR_VAR 0 3
42209: PUSH
42210: LD_VAR 0 1
42214: PPUSH
42215: LD_INT 50
42217: PUSH
42218: EMPTY
42219: LIST
42220: PPUSH
42221: CALL_OW 72
42225: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42226: LD_ADDR_VAR 0 8
42230: PUSH
42231: LD_VAR 0 1
42235: PUSH
42236: LD_INT 1
42238: ARRAY
42239: PPUSH
42240: CALL_OW 255
42244: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42245: LD_ADDR_VAR 0 10
42249: PUSH
42250: LD_INT 29
42252: PUSH
42253: LD_INT 91
42255: PUSH
42256: LD_INT 49
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: ST_TO_ADDR
// if not result then
42264: LD_VAR 0 3
42268: NOT
42269: IFFALSE 42273
// exit ;
42271: GO 42733
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42273: LD_ADDR_VAR 0 5
42277: PUSH
42278: LD_INT 81
42280: PUSH
42281: LD_VAR 0 8
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PPUSH
42290: CALL_OW 69
42294: ST_TO_ADDR
// for i in result do
42295: LD_ADDR_VAR 0 4
42299: PUSH
42300: LD_VAR 0 3
42304: PUSH
42305: FOR_IN
42306: IFFALSE 42731
// begin tag := GetTag ( i ) + 1 ;
42308: LD_ADDR_VAR 0 9
42312: PUSH
42313: LD_VAR 0 4
42317: PPUSH
42318: CALL_OW 110
42322: PUSH
42323: LD_INT 1
42325: PLUS
42326: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42327: LD_ADDR_VAR 0 7
42331: PUSH
42332: LD_VAR 0 4
42336: PPUSH
42337: CALL_OW 250
42341: PPUSH
42342: LD_VAR 0 4
42346: PPUSH
42347: CALL_OW 251
42351: PPUSH
42352: LD_INT 4
42354: PPUSH
42355: CALL 41928 0 3
42359: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42360: LD_VAR 0 4
42364: PPUSH
42365: CALL_OW 247
42369: PUSH
42370: LD_INT 2
42372: EQUAL
42373: PUSH
42374: LD_VAR 0 7
42378: PUSH
42379: LD_INT 2
42381: GREATER
42382: AND
42383: PUSH
42384: LD_VAR 0 4
42388: PPUSH
42389: CALL_OW 264
42393: PUSH
42394: LD_VAR 0 10
42398: IN
42399: NOT
42400: AND
42401: IFFALSE 42440
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42403: LD_VAR 0 4
42407: PPUSH
42408: LD_VAR 0 7
42412: PUSH
42413: LD_INT 1
42415: ARRAY
42416: PUSH
42417: LD_INT 1
42419: ARRAY
42420: PPUSH
42421: LD_VAR 0 7
42425: PUSH
42426: LD_INT 1
42428: ARRAY
42429: PUSH
42430: LD_INT 2
42432: ARRAY
42433: PPUSH
42434: CALL_OW 116
42438: GO 42729
// if path > tag then
42440: LD_VAR 0 2
42444: PUSH
42445: LD_VAR 0 9
42449: GREATER
42450: IFFALSE 42658
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42452: LD_ADDR_VAR 0 6
42456: PUSH
42457: LD_VAR 0 5
42461: PPUSH
42462: LD_INT 91
42464: PUSH
42465: LD_VAR 0 4
42469: PUSH
42470: LD_INT 8
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: PPUSH
42478: CALL_OW 72
42482: ST_TO_ADDR
// if nearEnemy then
42483: LD_VAR 0 6
42487: IFFALSE 42556
// begin if GetWeapon ( i ) = ru_time_lapser then
42489: LD_VAR 0 4
42493: PPUSH
42494: CALL_OW 264
42498: PUSH
42499: LD_INT 49
42501: EQUAL
42502: IFFALSE 42530
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42504: LD_VAR 0 4
42508: PPUSH
42509: LD_VAR 0 6
42513: PPUSH
42514: LD_VAR 0 4
42518: PPUSH
42519: CALL_OW 74
42523: PPUSH
42524: CALL_OW 112
42528: GO 42554
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42530: LD_VAR 0 4
42534: PPUSH
42535: LD_VAR 0 6
42539: PPUSH
42540: LD_VAR 0 4
42544: PPUSH
42545: CALL_OW 74
42549: PPUSH
42550: CALL 43804 0 2
// end else
42554: GO 42656
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42556: LD_VAR 0 4
42560: PPUSH
42561: LD_VAR 0 2
42565: PUSH
42566: LD_VAR 0 9
42570: ARRAY
42571: PUSH
42572: LD_INT 1
42574: ARRAY
42575: PPUSH
42576: LD_VAR 0 2
42580: PUSH
42581: LD_VAR 0 9
42585: ARRAY
42586: PUSH
42587: LD_INT 2
42589: ARRAY
42590: PPUSH
42591: CALL_OW 297
42595: PUSH
42596: LD_INT 6
42598: GREATER
42599: IFFALSE 42642
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42601: LD_VAR 0 4
42605: PPUSH
42606: LD_VAR 0 2
42610: PUSH
42611: LD_VAR 0 9
42615: ARRAY
42616: PUSH
42617: LD_INT 1
42619: ARRAY
42620: PPUSH
42621: LD_VAR 0 2
42625: PUSH
42626: LD_VAR 0 9
42630: ARRAY
42631: PUSH
42632: LD_INT 2
42634: ARRAY
42635: PPUSH
42636: CALL_OW 114
42640: GO 42656
// SetTag ( i , tag ) ;
42642: LD_VAR 0 4
42646: PPUSH
42647: LD_VAR 0 9
42651: PPUSH
42652: CALL_OW 109
// end else
42656: GO 42729
// if enemy then
42658: LD_VAR 0 5
42662: IFFALSE 42729
// begin if GetWeapon ( i ) = ru_time_lapser then
42664: LD_VAR 0 4
42668: PPUSH
42669: CALL_OW 264
42673: PUSH
42674: LD_INT 49
42676: EQUAL
42677: IFFALSE 42705
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42679: LD_VAR 0 4
42683: PPUSH
42684: LD_VAR 0 5
42688: PPUSH
42689: LD_VAR 0 4
42693: PPUSH
42694: CALL_OW 74
42698: PPUSH
42699: CALL_OW 112
42703: GO 42729
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42705: LD_VAR 0 4
42709: PPUSH
42710: LD_VAR 0 5
42714: PPUSH
42715: LD_VAR 0 4
42719: PPUSH
42720: CALL_OW 74
42724: PPUSH
42725: CALL 43804 0 2
// end ; end ;
42729: GO 42305
42731: POP
42732: POP
// end ;
42733: LD_VAR 0 3
42737: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42738: LD_INT 0
42740: PPUSH
42741: PPUSH
42742: PPUSH
// if not unit or IsInUnit ( unit ) then
42743: LD_VAR 0 1
42747: NOT
42748: PUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: CALL_OW 310
42758: OR
42759: IFFALSE 42763
// exit ;
42761: GO 42854
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42763: LD_ADDR_VAR 0 4
42767: PUSH
42768: LD_VAR 0 1
42772: PPUSH
42773: CALL_OW 250
42777: PPUSH
42778: LD_VAR 0 2
42782: PPUSH
42783: LD_INT 1
42785: PPUSH
42786: CALL_OW 272
42790: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42791: LD_ADDR_VAR 0 5
42795: PUSH
42796: LD_VAR 0 1
42800: PPUSH
42801: CALL_OW 251
42805: PPUSH
42806: LD_VAR 0 2
42810: PPUSH
42811: LD_INT 1
42813: PPUSH
42814: CALL_OW 273
42818: ST_TO_ADDR
// if ValidHex ( x , y ) then
42819: LD_VAR 0 4
42823: PPUSH
42824: LD_VAR 0 5
42828: PPUSH
42829: CALL_OW 488
42833: IFFALSE 42854
// ComTurnXY ( unit , x , y ) ;
42835: LD_VAR 0 1
42839: PPUSH
42840: LD_VAR 0 4
42844: PPUSH
42845: LD_VAR 0 5
42849: PPUSH
42850: CALL_OW 118
// end ;
42854: LD_VAR 0 3
42858: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42859: LD_INT 0
42861: PPUSH
42862: PPUSH
// result := false ;
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: LD_INT 0
42870: ST_TO_ADDR
// if not units then
42871: LD_VAR 0 2
42875: NOT
42876: IFFALSE 42880
// exit ;
42878: GO 42925
// for i in units do
42880: LD_ADDR_VAR 0 4
42884: PUSH
42885: LD_VAR 0 2
42889: PUSH
42890: FOR_IN
42891: IFFALSE 42923
// if See ( side , i ) then
42893: LD_VAR 0 1
42897: PPUSH
42898: LD_VAR 0 4
42902: PPUSH
42903: CALL_OW 292
42907: IFFALSE 42921
// begin result := true ;
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: LD_INT 1
42916: ST_TO_ADDR
// exit ;
42917: POP
42918: POP
42919: GO 42925
// end ;
42921: GO 42890
42923: POP
42924: POP
// end ;
42925: LD_VAR 0 3
42929: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42930: LD_INT 0
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
// if not unit or not points then
42936: LD_VAR 0 1
42940: NOT
42941: PUSH
42942: LD_VAR 0 2
42946: NOT
42947: OR
42948: IFFALSE 42952
// exit ;
42950: GO 43042
// dist := 99999 ;
42952: LD_ADDR_VAR 0 5
42956: PUSH
42957: LD_INT 99999
42959: ST_TO_ADDR
// for i in points do
42960: LD_ADDR_VAR 0 4
42964: PUSH
42965: LD_VAR 0 2
42969: PUSH
42970: FOR_IN
42971: IFFALSE 43040
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42973: LD_ADDR_VAR 0 6
42977: PUSH
42978: LD_VAR 0 1
42982: PPUSH
42983: LD_VAR 0 4
42987: PUSH
42988: LD_INT 1
42990: ARRAY
42991: PPUSH
42992: LD_VAR 0 4
42996: PUSH
42997: LD_INT 2
42999: ARRAY
43000: PPUSH
43001: CALL_OW 297
43005: ST_TO_ADDR
// if tmpDist < dist then
43006: LD_VAR 0 6
43010: PUSH
43011: LD_VAR 0 5
43015: LESS
43016: IFFALSE 43038
// begin result := i ;
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_VAR 0 4
43027: ST_TO_ADDR
// dist := tmpDist ;
43028: LD_ADDR_VAR 0 5
43032: PUSH
43033: LD_VAR 0 6
43037: ST_TO_ADDR
// end ; end ;
43038: GO 42970
43040: POP
43041: POP
// end ;
43042: LD_VAR 0 3
43046: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43047: LD_INT 0
43049: PPUSH
// uc_side := side ;
43050: LD_ADDR_OWVAR 20
43054: PUSH
43055: LD_VAR 0 1
43059: ST_TO_ADDR
// uc_nation := 3 ;
43060: LD_ADDR_OWVAR 21
43064: PUSH
43065: LD_INT 3
43067: ST_TO_ADDR
// vc_chassis := 25 ;
43068: LD_ADDR_OWVAR 37
43072: PUSH
43073: LD_INT 25
43075: ST_TO_ADDR
// vc_engine := engine_siberite ;
43076: LD_ADDR_OWVAR 39
43080: PUSH
43081: LD_INT 3
43083: ST_TO_ADDR
// vc_control := control_computer ;
43084: LD_ADDR_OWVAR 38
43088: PUSH
43089: LD_INT 3
43091: ST_TO_ADDR
// vc_weapon := 59 ;
43092: LD_ADDR_OWVAR 40
43096: PUSH
43097: LD_INT 59
43099: ST_TO_ADDR
// result := CreateVehicle ;
43100: LD_ADDR_VAR 0 5
43104: PUSH
43105: CALL_OW 45
43109: ST_TO_ADDR
// SetDir ( result , d ) ;
43110: LD_VAR 0 5
43114: PPUSH
43115: LD_VAR 0 4
43119: PPUSH
43120: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43124: LD_VAR 0 5
43128: PPUSH
43129: LD_VAR 0 2
43133: PPUSH
43134: LD_VAR 0 3
43138: PPUSH
43139: LD_INT 0
43141: PPUSH
43142: CALL_OW 48
// end ;
43146: LD_VAR 0 5
43150: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43151: LD_INT 0
43153: PPUSH
43154: PPUSH
43155: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43156: LD_ADDR_VAR 0 2
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43179: LD_VAR 0 1
43183: NOT
43184: PUSH
43185: LD_VAR 0 1
43189: PPUSH
43190: CALL_OW 264
43194: PUSH
43195: LD_INT 12
43197: PUSH
43198: LD_INT 51
43200: PUSH
43201: LD_INT 32
43203: PUSH
43204: LD_INT 89
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: IN
43213: NOT
43214: OR
43215: IFFALSE 43219
// exit ;
43217: GO 43317
// for i := 1 to 3 do
43219: LD_ADDR_VAR 0 3
43223: PUSH
43224: DOUBLE
43225: LD_INT 1
43227: DEC
43228: ST_TO_ADDR
43229: LD_INT 3
43231: PUSH
43232: FOR_TO
43233: IFFALSE 43315
// begin tmp := GetCargo ( cargo , i ) ;
43235: LD_ADDR_VAR 0 4
43239: PUSH
43240: LD_VAR 0 1
43244: PPUSH
43245: LD_VAR 0 3
43249: PPUSH
43250: CALL_OW 289
43254: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43255: LD_ADDR_VAR 0 2
43259: PUSH
43260: LD_VAR 0 2
43264: PPUSH
43265: LD_VAR 0 3
43269: PPUSH
43270: LD_VAR 0 4
43274: PPUSH
43275: CALL_OW 1
43279: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43280: LD_ADDR_VAR 0 2
43284: PUSH
43285: LD_VAR 0 2
43289: PPUSH
43290: LD_INT 4
43292: PPUSH
43293: LD_VAR 0 2
43297: PUSH
43298: LD_INT 4
43300: ARRAY
43301: PUSH
43302: LD_VAR 0 4
43306: PLUS
43307: PPUSH
43308: CALL_OW 1
43312: ST_TO_ADDR
// end ;
43313: GO 43232
43315: POP
43316: POP
// end ;
43317: LD_VAR 0 2
43321: RET
// export function Length ( array ) ; begin
43322: LD_INT 0
43324: PPUSH
// result := array + 0 ;
43325: LD_ADDR_VAR 0 2
43329: PUSH
43330: LD_VAR 0 1
43334: PUSH
43335: LD_INT 0
43337: PLUS
43338: ST_TO_ADDR
// end ;
43339: LD_VAR 0 2
43343: RET
// export function PrepareArray ( array ) ; begin
43344: LD_INT 0
43346: PPUSH
// result := array diff 0 ;
43347: LD_ADDR_VAR 0 2
43351: PUSH
43352: LD_VAR 0 1
43356: PUSH
43357: LD_INT 0
43359: DIFF
43360: ST_TO_ADDR
// if not result [ 1 ] then
43361: LD_VAR 0 2
43365: PUSH
43366: LD_INT 1
43368: ARRAY
43369: NOT
43370: IFFALSE 43390
// result := Delete ( result , 1 ) ;
43372: LD_ADDR_VAR 0 2
43376: PUSH
43377: LD_VAR 0 2
43381: PPUSH
43382: LD_INT 1
43384: PPUSH
43385: CALL_OW 3
43389: ST_TO_ADDR
// end ;
43390: LD_VAR 0 2
43394: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43395: LD_INT 0
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
// sibRocketRange := 25 ;
43401: LD_ADDR_VAR 0 6
43405: PUSH
43406: LD_INT 25
43408: ST_TO_ADDR
// result := false ;
43409: LD_ADDR_VAR 0 4
43413: PUSH
43414: LD_INT 0
43416: ST_TO_ADDR
// for i := 0 to 5 do
43417: LD_ADDR_VAR 0 5
43421: PUSH
43422: DOUBLE
43423: LD_INT 0
43425: DEC
43426: ST_TO_ADDR
43427: LD_INT 5
43429: PUSH
43430: FOR_TO
43431: IFFALSE 43498
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43433: LD_VAR 0 1
43437: PPUSH
43438: LD_VAR 0 5
43442: PPUSH
43443: LD_VAR 0 6
43447: PPUSH
43448: CALL_OW 272
43452: PPUSH
43453: LD_VAR 0 2
43457: PPUSH
43458: LD_VAR 0 5
43462: PPUSH
43463: LD_VAR 0 6
43467: PPUSH
43468: CALL_OW 273
43472: PPUSH
43473: LD_VAR 0 3
43477: PPUSH
43478: CALL_OW 309
43482: IFFALSE 43496
// begin result := true ;
43484: LD_ADDR_VAR 0 4
43488: PUSH
43489: LD_INT 1
43491: ST_TO_ADDR
// exit ;
43492: POP
43493: POP
43494: GO 43500
// end ;
43496: GO 43430
43498: POP
43499: POP
// end ;
43500: LD_VAR 0 4
43504: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43505: LD_INT 0
43507: PPUSH
43508: PPUSH
43509: PPUSH
// if btype = b_depot then
43510: LD_VAR 0 2
43514: PUSH
43515: LD_INT 0
43517: EQUAL
43518: IFFALSE 43530
// begin result := true ;
43520: LD_ADDR_VAR 0 3
43524: PUSH
43525: LD_INT 1
43527: ST_TO_ADDR
// exit ;
43528: GO 43646
// end ; pom := GetBase ( depot ) ;
43530: LD_ADDR_VAR 0 4
43534: PUSH
43535: LD_VAR 0 1
43539: PPUSH
43540: CALL_OW 274
43544: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43545: LD_ADDR_VAR 0 5
43549: PUSH
43550: LD_VAR 0 2
43554: PPUSH
43555: LD_VAR 0 1
43559: PPUSH
43560: CALL_OW 248
43564: PPUSH
43565: CALL_OW 450
43569: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43570: LD_ADDR_VAR 0 3
43574: PUSH
43575: LD_VAR 0 4
43579: PPUSH
43580: LD_INT 1
43582: PPUSH
43583: CALL_OW 275
43587: PUSH
43588: LD_VAR 0 5
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: GREATEREQUAL
43597: PUSH
43598: LD_VAR 0 4
43602: PPUSH
43603: LD_INT 2
43605: PPUSH
43606: CALL_OW 275
43610: PUSH
43611: LD_VAR 0 5
43615: PUSH
43616: LD_INT 2
43618: ARRAY
43619: GREATEREQUAL
43620: AND
43621: PUSH
43622: LD_VAR 0 4
43626: PPUSH
43627: LD_INT 3
43629: PPUSH
43630: CALL_OW 275
43634: PUSH
43635: LD_VAR 0 5
43639: PUSH
43640: LD_INT 3
43642: ARRAY
43643: GREATEREQUAL
43644: AND
43645: ST_TO_ADDR
// end ;
43646: LD_VAR 0 3
43650: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43651: LD_INT 0
43653: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43654: LD_VAR 0 1
43658: PPUSH
43659: LD_VAR 0 2
43663: PPUSH
43664: LD_INT 0
43666: PPUSH
43667: LD_INT 0
43669: PPUSH
43670: LD_INT 1
43672: PPUSH
43673: LD_INT 0
43675: PPUSH
43676: CALL_OW 587
// end ;
43680: LD_VAR 0 3
43684: RET
// export function CenterOnNow ( unit ) ; begin
43685: LD_INT 0
43687: PPUSH
// result := IsInUnit ( unit ) ;
43688: LD_ADDR_VAR 0 2
43692: PUSH
43693: LD_VAR 0 1
43697: PPUSH
43698: CALL_OW 310
43702: ST_TO_ADDR
// if not result then
43703: LD_VAR 0 2
43707: NOT
43708: IFFALSE 43720
// result := unit ;
43710: LD_ADDR_VAR 0 2
43714: PUSH
43715: LD_VAR 0 1
43719: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 87
// end ;
43729: LD_VAR 0 2
43733: RET
// export function ComMoveHex ( unit , hex ) ; begin
43734: LD_INT 0
43736: PPUSH
// if not hex then
43737: LD_VAR 0 2
43741: NOT
43742: IFFALSE 43746
// exit ;
43744: GO 43799
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43746: LD_VAR 0 2
43750: PUSH
43751: LD_INT 1
43753: ARRAY
43754: PPUSH
43755: LD_VAR 0 2
43759: PUSH
43760: LD_INT 2
43762: ARRAY
43763: PPUSH
43764: CALL_OW 428
43768: IFFALSE 43772
// exit ;
43770: GO 43799
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43772: LD_VAR 0 1
43776: PPUSH
43777: LD_VAR 0 2
43781: PUSH
43782: LD_INT 1
43784: ARRAY
43785: PPUSH
43786: LD_VAR 0 2
43790: PUSH
43791: LD_INT 2
43793: ARRAY
43794: PPUSH
43795: CALL_OW 111
// end ;
43799: LD_VAR 0 3
43803: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43804: LD_INT 0
43806: PPUSH
43807: PPUSH
43808: PPUSH
// if not unit or not enemy then
43809: LD_VAR 0 1
43813: NOT
43814: PUSH
43815: LD_VAR 0 2
43819: NOT
43820: OR
43821: IFFALSE 43825
// exit ;
43823: GO 43949
// x := GetX ( enemy ) ;
43825: LD_ADDR_VAR 0 4
43829: PUSH
43830: LD_VAR 0 2
43834: PPUSH
43835: CALL_OW 250
43839: ST_TO_ADDR
// y := GetY ( enemy ) ;
43840: LD_ADDR_VAR 0 5
43844: PUSH
43845: LD_VAR 0 2
43849: PPUSH
43850: CALL_OW 251
43854: ST_TO_ADDR
// if ValidHex ( x , y ) then
43855: LD_VAR 0 4
43859: PPUSH
43860: LD_VAR 0 5
43864: PPUSH
43865: CALL_OW 488
43869: IFFALSE 43949
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43871: LD_VAR 0 2
43875: PPUSH
43876: CALL_OW 247
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: IN
43891: PUSH
43892: LD_VAR 0 1
43896: PPUSH
43897: CALL_OW 255
43901: PPUSH
43902: LD_VAR 0 2
43906: PPUSH
43907: CALL_OW 292
43911: OR
43912: IFFALSE 43930
// ComAttackUnit ( unit , enemy ) else
43914: LD_VAR 0 1
43918: PPUSH
43919: LD_VAR 0 2
43923: PPUSH
43924: CALL_OW 115
43928: GO 43949
// ComAgressiveMove ( unit , x , y ) ;
43930: LD_VAR 0 1
43934: PPUSH
43935: LD_VAR 0 4
43939: PPUSH
43940: LD_VAR 0 5
43944: PPUSH
43945: CALL_OW 114
// end ;
43949: LD_VAR 0 3
43953: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43954: LD_INT 0
43956: PPUSH
43957: PPUSH
43958: PPUSH
// list := AreaToList ( area , 0 ) ;
43959: LD_ADDR_VAR 0 5
43963: PUSH
43964: LD_VAR 0 1
43968: PPUSH
43969: LD_INT 0
43971: PPUSH
43972: CALL_OW 517
43976: ST_TO_ADDR
// if not list then
43977: LD_VAR 0 5
43981: NOT
43982: IFFALSE 43986
// exit ;
43984: GO 44116
// if all then
43986: LD_VAR 0 2
43990: IFFALSE 44078
// begin for i := 1 to list [ 1 ] do
43992: LD_ADDR_VAR 0 4
43996: PUSH
43997: DOUBLE
43998: LD_INT 1
44000: DEC
44001: ST_TO_ADDR
44002: LD_VAR 0 5
44006: PUSH
44007: LD_INT 1
44009: ARRAY
44010: PUSH
44011: FOR_TO
44012: IFFALSE 44074
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_VAR 0 3
44023: PPUSH
44024: LD_VAR 0 3
44028: PUSH
44029: LD_INT 1
44031: PLUS
44032: PPUSH
44033: LD_VAR 0 5
44037: PUSH
44038: LD_INT 1
44040: ARRAY
44041: PUSH
44042: LD_VAR 0 4
44046: ARRAY
44047: PUSH
44048: LD_VAR 0 5
44052: PUSH
44053: LD_INT 2
44055: ARRAY
44056: PUSH
44057: LD_VAR 0 4
44061: ARRAY
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PPUSH
44067: CALL_OW 1
44071: ST_TO_ADDR
44072: GO 44011
44074: POP
44075: POP
// exit ;
44076: GO 44116
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_VAR 0 5
44087: PUSH
44088: LD_INT 1
44090: ARRAY
44091: PUSH
44092: LD_INT 1
44094: ARRAY
44095: PUSH
44096: LD_VAR 0 5
44100: PUSH
44101: LD_INT 2
44103: ARRAY
44104: PUSH
44105: LD_INT 1
44107: ARRAY
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: ST_TO_ADDR
// end ;
44116: LD_VAR 0 3
44120: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44121: LD_INT 0
44123: PPUSH
44124: PPUSH
// list := AreaToList ( area , 0 ) ;
44125: LD_ADDR_VAR 0 4
44129: PUSH
44130: LD_VAR 0 1
44134: PPUSH
44135: LD_INT 0
44137: PPUSH
44138: CALL_OW 517
44142: ST_TO_ADDR
// if not list then
44143: LD_VAR 0 4
44147: NOT
44148: IFFALSE 44152
// exit ;
44150: GO 44193
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44152: LD_ADDR_VAR 0 3
44156: PUSH
44157: LD_VAR 0 4
44161: PUSH
44162: LD_INT 1
44164: ARRAY
44165: PUSH
44166: LD_INT 1
44168: ARRAY
44169: PUSH
44170: LD_VAR 0 4
44174: PUSH
44175: LD_INT 2
44177: ARRAY
44178: PUSH
44179: LD_INT 1
44181: ARRAY
44182: PUSH
44183: LD_VAR 0 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: ST_TO_ADDR
// end ;
44193: LD_VAR 0 3
44197: RET
// export function First ( array ) ; begin
44198: LD_INT 0
44200: PPUSH
// if not array then
44201: LD_VAR 0 1
44205: NOT
44206: IFFALSE 44210
// exit ;
44208: GO 44224
// result := array [ 1 ] ;
44210: LD_ADDR_VAR 0 2
44214: PUSH
44215: LD_VAR 0 1
44219: PUSH
44220: LD_INT 1
44222: ARRAY
44223: ST_TO_ADDR
// end ;
44224: LD_VAR 0 2
44228: RET
// export function Last ( array ) ; begin
44229: LD_INT 0
44231: PPUSH
// if not array then
44232: LD_VAR 0 1
44236: NOT
44237: IFFALSE 44241
// exit ;
44239: GO 44257
// result := array [ array ] ;
44241: LD_ADDR_VAR 0 2
44245: PUSH
44246: LD_VAR 0 1
44250: PUSH
44251: LD_VAR 0 1
44255: ARRAY
44256: ST_TO_ADDR
// end ;
44257: LD_VAR 0 2
44261: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44262: LD_INT 0
44264: PPUSH
44265: PPUSH
// result := [ ] ;
44266: LD_ADDR_VAR 0 5
44270: PUSH
44271: EMPTY
44272: ST_TO_ADDR
// if not array then
44273: LD_VAR 0 1
44277: NOT
44278: IFFALSE 44282
// exit ;
44280: GO 44394
// for i := 1 to array do
44282: LD_ADDR_VAR 0 6
44286: PUSH
44287: DOUBLE
44288: LD_INT 1
44290: DEC
44291: ST_TO_ADDR
44292: LD_VAR 0 1
44296: PUSH
44297: FOR_TO
44298: IFFALSE 44392
// if array [ i ] [ index ] = value then
44300: LD_VAR 0 1
44304: PUSH
44305: LD_VAR 0 6
44309: ARRAY
44310: PUSH
44311: LD_VAR 0 2
44315: ARRAY
44316: PUSH
44317: LD_VAR 0 3
44321: EQUAL
44322: IFFALSE 44390
// begin if indexColumn then
44324: LD_VAR 0 4
44328: IFFALSE 44364
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: LD_VAR 0 5
44339: PPUSH
44340: LD_VAR 0 1
44344: PUSH
44345: LD_VAR 0 6
44349: ARRAY
44350: PUSH
44351: LD_VAR 0 4
44355: ARRAY
44356: PPUSH
44357: CALL 39576 0 2
44361: ST_TO_ADDR
44362: GO 44390
// result := Join ( result , array [ i ] ) ;
44364: LD_ADDR_VAR 0 5
44368: PUSH
44369: LD_VAR 0 5
44373: PPUSH
44374: LD_VAR 0 1
44378: PUSH
44379: LD_VAR 0 6
44383: ARRAY
44384: PPUSH
44385: CALL 39576 0 2
44389: ST_TO_ADDR
// end ;
44390: GO 44297
44392: POP
44393: POP
// end ;
44394: LD_VAR 0 5
44398: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44399: LD_INT 0
44401: PPUSH
// if not vehicles or not parkingPoint then
44402: LD_VAR 0 1
44406: NOT
44407: PUSH
44408: LD_VAR 0 2
44412: NOT
44413: OR
44414: IFFALSE 44418
// exit ;
44416: GO 44516
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44418: LD_ADDR_VAR 0 1
44422: PUSH
44423: LD_VAR 0 1
44427: PPUSH
44428: LD_INT 50
44430: PUSH
44431: EMPTY
44432: LIST
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: LD_INT 92
44439: PUSH
44440: LD_VAR 0 2
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 2
44456: ARRAY
44457: PUSH
44458: LD_INT 8
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PPUSH
44475: CALL_OW 72
44479: ST_TO_ADDR
// if not vehicles then
44480: LD_VAR 0 1
44484: NOT
44485: IFFALSE 44489
// exit ;
44487: GO 44516
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44489: LD_VAR 0 1
44493: PPUSH
44494: LD_VAR 0 2
44498: PUSH
44499: LD_INT 1
44501: ARRAY
44502: PPUSH
44503: LD_VAR 0 2
44507: PUSH
44508: LD_INT 2
44510: ARRAY
44511: PPUSH
44512: CALL_OW 111
// end ;
44516: LD_VAR 0 3
44520: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44521: LD_INT 0
44523: PPUSH
44524: PPUSH
44525: PPUSH
// if not side or not area then
44526: LD_VAR 0 1
44530: NOT
44531: PUSH
44532: LD_VAR 0 2
44536: NOT
44537: OR
44538: IFFALSE 44542
// exit ;
44540: GO 44661
// tmp := AreaToList ( area , 0 ) ;
44542: LD_ADDR_VAR 0 5
44546: PUSH
44547: LD_VAR 0 2
44551: PPUSH
44552: LD_INT 0
44554: PPUSH
44555: CALL_OW 517
44559: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44560: LD_ADDR_VAR 0 4
44564: PUSH
44565: DOUBLE
44566: LD_INT 1
44568: DEC
44569: ST_TO_ADDR
44570: LD_VAR 0 5
44574: PUSH
44575: LD_INT 1
44577: ARRAY
44578: PUSH
44579: FOR_TO
44580: IFFALSE 44659
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44582: LD_VAR 0 5
44586: PUSH
44587: LD_INT 1
44589: ARRAY
44590: PUSH
44591: LD_VAR 0 4
44595: ARRAY
44596: PPUSH
44597: LD_VAR 0 5
44601: PUSH
44602: LD_INT 2
44604: ARRAY
44605: PUSH
44606: LD_VAR 0 4
44610: ARRAY
44611: PPUSH
44612: CALL_OW 351
44616: IFFALSE 44657
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44618: LD_VAR 0 5
44622: PUSH
44623: LD_INT 1
44625: ARRAY
44626: PUSH
44627: LD_VAR 0 4
44631: ARRAY
44632: PPUSH
44633: LD_VAR 0 5
44637: PUSH
44638: LD_INT 2
44640: ARRAY
44641: PUSH
44642: LD_VAR 0 4
44646: ARRAY
44647: PPUSH
44648: LD_VAR 0 1
44652: PPUSH
44653: CALL_OW 244
// end ;
44657: GO 44579
44659: POP
44660: POP
// end ;
44661: LD_VAR 0 3
44665: RET
