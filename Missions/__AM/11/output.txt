// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 39917 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnitForce ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1873 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 39945 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6775 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 39945 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i , p ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
// p := 0 ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_INT 0
 517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 518: LD_INT 35
 520: PPUSH
 521: CALL_OW 67
// p := Inc ( p ) ;
 525: LD_ADDR_VAR 0 3
 529: PUSH
 530: LD_VAR 0 3
 534: PPUSH
 535: CALL 41318 0 1
 539: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 or p > 20 ;
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 95
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 60
 565: PUSH
 566: EMPTY
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: PUSH
 583: LD_INT 5
 585: GREATEREQUAL
 586: IFTRUE 598
 588: PUSH
 589: LD_VAR 0 3
 593: PUSH
 594: LD_INT 20
 596: GREATER
 597: OR
 598: IFFALSE 518
// wait ( 0 0$1 ) ;
 600: LD_INT 35
 602: PPUSH
 603: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 607: LD_EXP 2
 611: PPUSH
 612: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 616: LD_EXP 3
 620: PPUSH
 621: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 625: LD_INT 10
 627: PPUSH
 628: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 632: LD_EXP 3
 636: PPUSH
 637: LD_INT 52
 639: PPUSH
 640: LD_INT 42
 642: PPUSH
 643: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 647: LD_EXP 2
 651: PPUSH
 652: LD_INT 52
 654: PPUSH
 655: LD_INT 42
 657: PPUSH
 658: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 662: LD_EXP 3
 666: PPUSH
 667: LD_INT 68
 669: PPUSH
 670: LD_INT 55
 672: PPUSH
 673: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 677: LD_EXP 2
 681: PPUSH
 682: LD_INT 68
 684: PPUSH
 685: LD_INT 58
 687: PPUSH
 688: CALL_OW 171
// ComExitVehicle ( people [ 4 ] ) ;
 692: LD_EXP 5
 696: PUSH
 697: LD_INT 4
 699: ARRAY
 700: PPUSH
 701: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 705: LD_EXP 5
 709: PUSH
 710: LD_INT 5
 712: ARRAY
 713: PPUSH
 714: CALL_OW 121
// wait ( 0 0$02 ) ;
 718: LD_INT 70
 720: PPUSH
 721: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 725: LD_EXP 5
 729: PUSH
 730: LD_INT 4
 732: ARRAY
 733: PPUSH
 734: LD_INT 50
 736: PPUSH
 737: LD_INT 40
 739: PPUSH
 740: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 744: LD_EXP 5
 748: PUSH
 749: LD_INT 5
 751: ARRAY
 752: PPUSH
 753: LD_INT 49
 755: PPUSH
 756: LD_INT 59
 758: PPUSH
 759: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 763: LD_INT 35
 765: PPUSH
 766: CALL_OW 67
// if not IsAt ( JMM , 68 , 58 ) and not HasTask ( JMM ) then
 770: LD_EXP 2
 774: PPUSH
 775: LD_INT 68
 777: PPUSH
 778: LD_INT 58
 780: PPUSH
 781: CALL_OW 307
 785: NOT
 786: IFFALSE 800
 788: PUSH
 789: LD_EXP 2
 793: PPUSH
 794: CALL_OW 314
 798: NOT
 799: AND
 800: IFFALSE 817
// ComMoveXY ( JMM , 68 , 58 ) ;
 802: LD_EXP 2
 806: PPUSH
 807: LD_INT 68
 809: PPUSH
 810: LD_INT 58
 812: PPUSH
 813: CALL_OW 111
// if not IsAt ( Powell , 68 , 55 ) and not HasTask ( Powell ) then
 817: LD_EXP 3
 821: PPUSH
 822: LD_INT 68
 824: PPUSH
 825: LD_INT 55
 827: PPUSH
 828: CALL_OW 307
 832: NOT
 833: IFFALSE 847
 835: PUSH
 836: LD_EXP 3
 840: PPUSH
 841: CALL_OW 314
 845: NOT
 846: AND
 847: IFFALSE 864
// ComMoveXY ( Powell , 68 , 55 ) ;
 849: LD_EXP 3
 853: PPUSH
 854: LD_INT 68
 856: PPUSH
 857: LD_INT 55
 859: PPUSH
 860: CALL_OW 111
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 68
 871: PPUSH
 872: LD_INT 55
 874: PPUSH
 875: CALL_OW 307
 879: IFFALSE 898
 881: PUSH
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 68
 889: PPUSH
 890: LD_INT 58
 892: PPUSH
 893: CALL_OW 307
 897: AND
 898: IFFALSE 763
// AddComTurnXY ( Powell , 73 , 54 ) ;
 900: LD_EXP 3
 904: PPUSH
 905: LD_INT 73
 907: PPUSH
 908: LD_INT 54
 910: PPUSH
 911: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 915: LD_EXP 2
 919: PPUSH
 920: LD_INT 74
 922: PPUSH
 923: LD_INT 58
 925: PPUSH
 926: CALL_OW 178
// CenterNowOnUnits ( JMM ) ;
 930: LD_EXP 2
 934: PPUSH
 935: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 939: LD_EXP 3
 943: PPUSH
 944: LD_STRING D1-Pow-1
 946: PPUSH
 947: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 951: LD_EXP 2
 955: PPUSH
 956: LD_STRING D1-JMM-1
 958: PPUSH
 959: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 963: LD_EXP 3
 967: PPUSH
 968: LD_STRING D1-Pow-2
 970: PPUSH
 971: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 975: LD_EXP 2
 979: PPUSH
 980: LD_EXP 3
 984: PPUSH
 985: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_STRING D1-JMM-2
 996: PPUSH
 997: CALL_OW 88
// wait ( 0 0$01 ) ;
1001: LD_INT 35
1003: PPUSH
1004: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
1008: LD_EXP 3
1012: PPUSH
1013: LD_EXP 2
1017: PPUSH
1018: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
1022: LD_EXP 3
1026: PPUSH
1027: LD_STRING D1-Pow-3
1029: PPUSH
1030: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1034: LD_EXP 2
1038: PPUSH
1039: LD_STRING D1-JMM-3
1041: PPUSH
1042: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
1046: LD_EXP 3
1050: PPUSH
1051: LD_STRING D1-Pow-4
1053: PPUSH
1054: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
1058: LD_EXP 2
1062: PPUSH
1063: LD_STRING D1-JMM-4
1065: PPUSH
1066: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
1070: LD_EXP 3
1074: PPUSH
1075: LD_STRING D1-Pow-5
1077: PPUSH
1078: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1082: LD_EXP 2
1086: PPUSH
1087: LD_STRING D1-JMM-5
1089: PPUSH
1090: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
1094: LD_EXP 3
1098: PPUSH
1099: LD_STRING D1-Pow-6
1101: PPUSH
1102: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
1106: LD_EXP 2
1110: PPUSH
1111: LD_STRING D1-JMM-6
1113: PPUSH
1114: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
1118: LD_EXP 3
1122: PPUSH
1123: LD_STRING D1-Pow-7
1125: PPUSH
1126: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
1130: LD_EXP 2
1134: PPUSH
1135: LD_STRING D1-JMM-7
1137: PPUSH
1138: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1142: LD_EXP 3
1146: PPUSH
1147: LD_INT 68
1149: PPUSH
1150: LD_INT 57
1152: PPUSH
1153: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1157: LD_INT 10
1159: PPUSH
1160: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1164: LD_EXP 3
1168: PPUSH
1169: LD_INT 68
1171: PPUSH
1172: LD_INT 57
1174: PPUSH
1175: CALL_OW 307
1179: IFFALSE 1157
// ComTurnUnit ( Powell , JMM ) ;
1181: LD_EXP 3
1185: PPUSH
1186: LD_EXP 2
1190: PPUSH
1191: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1195: LD_EXP 3
1199: PPUSH
1200: LD_STRING D1-Pow-8
1202: PPUSH
1203: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1207: LD_INT 18
1209: PPUSH
1210: CALL_OW 67
// Query ( QLetter ) ;
1214: LD_STRING QLetter
1216: PPUSH
1217: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1221: LD_EXP 3
1225: PPUSH
1226: LD_STRING D1aa-Pow-1
1228: PPUSH
1229: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1233: LD_EXP 2
1237: PPUSH
1238: LD_STRING D1aa-JMM-1
1240: PPUSH
1241: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1245: LD_EXP 3
1249: PPUSH
1250: LD_STRING D1aa-Pow-2
1252: PPUSH
1253: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1257: LD_EXP 2
1261: PPUSH
1262: LD_STRING D1aa-JMM-2
1264: PPUSH
1265: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1269: LD_EXP 3
1273: PPUSH
1274: LD_STRING D1aa-Pow-3
1276: PPUSH
1277: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1281: LD_EXP 2
1285: PPUSH
1286: LD_STRING D1aa-JMM-3
1288: PPUSH
1289: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1293: LD_EXP 3
1297: PPUSH
1298: LD_INT 69
1300: PPUSH
1301: LD_INT 55
1303: PPUSH
1304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1308: LD_INT 35
1310: PPUSH
1311: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1315: LD_EXP 3
1319: PPUSH
1320: LD_INT 69
1322: PPUSH
1323: LD_INT 55
1325: PPUSH
1326: CALL_OW 307
1330: IFFALSE 1308
// ComTurnXY ( Powell , 71 , 55 ) ;
1332: LD_EXP 3
1336: PPUSH
1337: LD_INT 71
1339: PPUSH
1340: LD_INT 55
1342: PPUSH
1343: CALL_OW 118
// wait ( 0 0$2 ) ;
1347: LD_INT 70
1349: PPUSH
1350: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1354: LD_EXP 3
1358: PPUSH
1359: LD_STRING D1aa-Pow-4
1361: PPUSH
1362: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1366: LD_EXP 2
1370: PPUSH
1371: LD_STRING D1aa-JMM-4
1373: PPUSH
1374: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_EXP 2
1387: PPUSH
1388: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1392: LD_INT 10
1394: PPUSH
1395: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1399: LD_EXP 3
1403: PPUSH
1404: LD_STRING D1aa-Pow-5
1406: PPUSH
1407: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1411: LD_EXP 2
1415: PPUSH
1416: LD_STRING D1aa-JMM-5
1418: PPUSH
1419: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1423: LD_EXP 3
1427: PPUSH
1428: LD_STRING D1aa-Pow-6
1430: PPUSH
1431: CALL_OW 88
// wait ( 0 0$1 ) ;
1435: LD_INT 35
1437: PPUSH
1438: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1442: LD_EXP 2
1446: PPUSH
1447: LD_EXP 4
1451: PUSH
1452: LD_INT 3
1454: ARRAY
1455: PPUSH
1456: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1460: LD_INT 18
1462: PPUSH
1463: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1467: LD_EXP 3
1471: PPUSH
1472: LD_EXP 4
1476: PUSH
1477: LD_INT 2
1479: ARRAY
1480: PPUSH
1481: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1485: LD_INT 35
1487: PPUSH
1488: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1492: LD_EXP 3
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: CALL_OW 308
1504: IFFALSE 1485
// CenterOnXY ( 42 , 40 ) ;
1506: LD_INT 42
1508: PPUSH
1509: LD_INT 40
1511: PPUSH
1512: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1516: LD_EXP 5
1520: PUSH
1521: LD_INT 4
1523: ARRAY
1524: PPUSH
1525: LD_EXP 4
1529: PUSH
1530: LD_INT 4
1532: ARRAY
1533: PPUSH
1534: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1538: LD_EXP 5
1542: PUSH
1543: LD_INT 5
1545: ARRAY
1546: PPUSH
1547: LD_EXP 4
1551: PUSH
1552: LD_INT 5
1554: ARRAY
1555: PPUSH
1556: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1560: LD_INT 35
1562: PPUSH
1563: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1567: LD_INT 22
1569: PUSH
1570: LD_INT 1
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 56
1579: PUSH
1580: EMPTY
1581: LIST
1582: PUSH
1583: LD_INT 21
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PPUSH
1598: CALL_OW 69
1602: PUSH
1603: LD_INT 0
1605: EQUAL
1606: IFFALSE 1560
// CenterOnXY ( 36 , 35 ) ;
1608: LD_INT 36
1610: PPUSH
1611: LD_INT 35
1613: PPUSH
1614: CALL_OW 84
// for i := 1 to 5 do
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: DOUBLE
1624: LD_INT 1
1626: DEC
1627: ST_TO_ADDR
1628: LD_INT 5
1630: PUSH
1631: FOR_TO
1632: IFFALSE 1664
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1634: LD_EXP 4
1638: PUSH
1639: LD_VAR 0 2
1643: ARRAY
1644: PPUSH
1645: LD_INT 11
1647: PPUSH
1648: LD_INT 18
1650: PPUSH
1651: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1655: LD_INT 10
1657: PPUSH
1658: CALL_OW 67
// end ;
1662: GO 1631
1664: POP
1665: POP
// wait ( 0 0$2 ) ;
1666: LD_INT 70
1668: PPUSH
1669: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1673: LD_STRING 1
1675: PPUSH
1676: LD_STRING %_cont
1678: PPUSH
1679: CALL_OW 340
// end ;
1683: LD_VAR 0 1
1687: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1688: LD_EXP 5
1692: PUSH
1693: LD_INT 4
1695: ARRAY
1696: PPUSH
1697: LD_INT 50
1699: PPUSH
1700: LD_INT 40
1702: PPUSH
1703: CALL_OW 307
1707: IFFALSE 1731
1709: GO 1711
1711: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1712: LD_EXP 5
1716: PUSH
1717: LD_INT 4
1719: ARRAY
1720: PPUSH
1721: LD_INT 51
1723: PPUSH
1724: LD_INT 40
1726: PPUSH
1727: CALL_OW 118
1731: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1732: LD_EXP 5
1736: PUSH
1737: LD_INT 5
1739: ARRAY
1740: PPUSH
1741: LD_INT 49
1743: PPUSH
1744: LD_INT 59
1746: PPUSH
1747: CALL_OW 307
1751: IFFALSE 1775
1753: GO 1755
1755: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1756: LD_EXP 5
1760: PUSH
1761: LD_INT 5
1763: ARRAY
1764: PPUSH
1765: LD_INT 51
1767: PPUSH
1768: LD_INT 67
1770: PPUSH
1771: CALL_OW 118
1775: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1776: LD_STRING 1
1778: PPUSH
1779: LD_STRING %_cont
1781: PPUSH
1782: CALL_OW 340
// end ; end_of_file
1786: PPOPN 1
1788: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1789: LD_INT 0
1791: PPUSH
1792: PPUSH
// if exist_mode then
1793: LD_VAR 0 2
1797: IFFALSE 1843
// begin unit := CreateCharacter ( prefix & ident ) ;
1799: LD_ADDR_VAR 0 5
1803: PUSH
1804: LD_VAR 0 3
1808: PUSH
1809: LD_VAR 0 1
1813: STR
1814: PPUSH
1815: CALL_OW 34
1819: ST_TO_ADDR
// if unit then
1820: LD_VAR 0 5
1824: IFFALSE 1841
// DeleteCharacters ( prefix & ident ) ;
1826: LD_VAR 0 3
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PPUSH
1837: CALL_OW 40
// end else
1841: GO 1858
// unit := NewCharacter ( ident ) ;
1843: LD_ADDR_VAR 0 5
1847: PUSH
1848: LD_VAR 0 1
1852: PPUSH
1853: CALL_OW 25
1857: ST_TO_ADDR
// result := unit ;
1858: LD_ADDR_VAR 0 4
1862: PUSH
1863: LD_VAR 0 5
1867: ST_TO_ADDR
// end ;
1868: LD_VAR 0 4
1872: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1873: LD_INT 0
1875: PPUSH
1876: PPUSH
// if exist_mode then
1877: LD_VAR 0 2
1881: IFFALSE 1906
// unit := CreateCharacter ( prefix & ident ) else
1883: LD_ADDR_VAR 0 5
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: LD_VAR 0 1
1897: STR
1898: PPUSH
1899: CALL_OW 34
1903: ST_TO_ADDR
1904: GO 1921
// unit := NewCharacter ( ident ) ;
1906: LD_ADDR_VAR 0 5
1910: PUSH
1911: LD_VAR 0 1
1915: PPUSH
1916: CALL_OW 25
1920: ST_TO_ADDR
// result := unit ;
1921: LD_ADDR_VAR 0 4
1925: PUSH
1926: LD_VAR 0 5
1930: ST_TO_ADDR
// end ;
1931: LD_VAR 0 4
1935: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1936: LD_INT 0
1938: PPUSH
1939: PPUSH
// if not side or not nation then
1940: LD_VAR 0 1
1944: NOT
1945: IFTRUE 1954
1947: PUSH
1948: LD_VAR 0 2
1952: NOT
1953: OR
1954: IFFALSE 1958
// exit ;
1956: GO 2752
// case nation of nation_american :
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 1
1965: DOUBLE
1966: EQUAL
1967: IFTRUE 1971
1969: GO 2193
1971: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1972: LD_ADDR_VAR 0 4
1976: PUSH
1977: LD_INT 35
1979: PUSH
1980: LD_INT 45
1982: PUSH
1983: LD_INT 46
1985: PUSH
1986: LD_INT 47
1988: PUSH
1989: LD_INT 82
1991: PUSH
1992: LD_INT 83
1994: PUSH
1995: LD_INT 84
1997: PUSH
1998: LD_INT 85
2000: PUSH
2001: LD_INT 86
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: LD_INT 2
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: LD_INT 15
2015: PUSH
2016: LD_INT 16
2018: PUSH
2019: LD_INT 7
2021: PUSH
2022: LD_INT 12
2024: PUSH
2025: LD_INT 13
2027: PUSH
2028: LD_INT 10
2030: PUSH
2031: LD_INT 14
2033: PUSH
2034: LD_INT 20
2036: PUSH
2037: LD_INT 21
2039: PUSH
2040: LD_INT 22
2042: PUSH
2043: LD_INT 25
2045: PUSH
2046: LD_INT 32
2048: PUSH
2049: LD_INT 27
2051: PUSH
2052: LD_INT 36
2054: PUSH
2055: LD_INT 69
2057: PUSH
2058: LD_INT 39
2060: PUSH
2061: LD_INT 34
2063: PUSH
2064: LD_INT 40
2066: PUSH
2067: LD_INT 48
2069: PUSH
2070: LD_INT 49
2072: PUSH
2073: LD_INT 50
2075: PUSH
2076: LD_INT 51
2078: PUSH
2079: LD_INT 52
2081: PUSH
2082: LD_INT 53
2084: PUSH
2085: LD_INT 54
2087: PUSH
2088: LD_INT 55
2090: PUSH
2091: LD_INT 56
2093: PUSH
2094: LD_INT 57
2096: PUSH
2097: LD_INT 58
2099: PUSH
2100: LD_INT 59
2102: PUSH
2103: LD_INT 60
2105: PUSH
2106: LD_INT 61
2108: PUSH
2109: LD_INT 62
2111: PUSH
2112: LD_INT 80
2114: PUSH
2115: LD_INT 82
2117: PUSH
2118: LD_INT 83
2120: PUSH
2121: LD_INT 84
2123: PUSH
2124: LD_INT 85
2126: PUSH
2127: LD_INT 86
2129: PUSH
2130: LD_INT 90
2132: PUSH
2133: LD_INT 93
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: ST_TO_ADDR
2191: GO 2674
2193: LD_INT 2
2195: DOUBLE
2196: EQUAL
2197: IFTRUE 2201
2199: GO 2435
2201: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
2202: LD_ADDR_VAR 0 4
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 45
2212: PUSH
2213: LD_INT 46
2215: PUSH
2216: LD_INT 47
2218: PUSH
2219: LD_INT 82
2221: PUSH
2222: LD_INT 83
2224: PUSH
2225: LD_INT 84
2227: PUSH
2228: LD_INT 85
2230: PUSH
2231: LD_INT 87
2233: PUSH
2234: LD_INT 70
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 11
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: LD_INT 4
2248: PUSH
2249: LD_INT 5
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: LD_INT 15
2257: PUSH
2258: LD_INT 18
2260: PUSH
2261: LD_INT 7
2263: PUSH
2264: LD_INT 17
2266: PUSH
2267: LD_INT 8
2269: PUSH
2270: LD_INT 20
2272: PUSH
2273: LD_INT 21
2275: PUSH
2276: LD_INT 22
2278: PUSH
2279: LD_INT 72
2281: PUSH
2282: LD_INT 26
2284: PUSH
2285: LD_INT 69
2287: PUSH
2288: LD_INT 39
2290: PUSH
2291: LD_INT 40
2293: PUSH
2294: LD_INT 41
2296: PUSH
2297: LD_INT 42
2299: PUSH
2300: LD_INT 43
2302: PUSH
2303: LD_INT 48
2305: PUSH
2306: LD_INT 49
2308: PUSH
2309: LD_INT 50
2311: PUSH
2312: LD_INT 51
2314: PUSH
2315: LD_INT 52
2317: PUSH
2318: LD_INT 53
2320: PUSH
2321: LD_INT 54
2323: PUSH
2324: LD_INT 55
2326: PUSH
2327: LD_INT 56
2329: PUSH
2330: LD_INT 60
2332: PUSH
2333: LD_INT 61
2335: PUSH
2336: LD_INT 62
2338: PUSH
2339: LD_INT 66
2341: PUSH
2342: LD_INT 67
2344: PUSH
2345: LD_INT 68
2347: PUSH
2348: LD_INT 81
2350: PUSH
2351: LD_INT 82
2353: PUSH
2354: LD_INT 83
2356: PUSH
2357: LD_INT 84
2359: PUSH
2360: LD_INT 85
2362: PUSH
2363: LD_INT 87
2365: PUSH
2366: LD_INT 88
2368: PUSH
2369: LD_INT 92
2371: PUSH
2372: LD_INT 94
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: ST_TO_ADDR
2433: GO 2674
2435: LD_INT 3
2437: DOUBLE
2438: EQUAL
2439: IFTRUE 2443
2441: GO 2673
2443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2444: LD_ADDR_VAR 0 4
2448: PUSH
2449: LD_INT 46
2451: PUSH
2452: LD_INT 47
2454: PUSH
2455: LD_INT 1
2457: PUSH
2458: LD_INT 2
2460: PUSH
2461: LD_INT 82
2463: PUSH
2464: LD_INT 83
2466: PUSH
2467: LD_INT 84
2469: PUSH
2470: LD_INT 85
2472: PUSH
2473: LD_INT 86
2475: PUSH
2476: LD_INT 11
2478: PUSH
2479: LD_INT 9
2481: PUSH
2482: LD_INT 20
2484: PUSH
2485: LD_INT 19
2487: PUSH
2488: LD_INT 21
2490: PUSH
2491: LD_INT 24
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 25
2499: PUSH
2500: LD_INT 28
2502: PUSH
2503: LD_INT 29
2505: PUSH
2506: LD_INT 30
2508: PUSH
2509: LD_INT 31
2511: PUSH
2512: LD_INT 37
2514: PUSH
2515: LD_INT 38
2517: PUSH
2518: LD_INT 32
2520: PUSH
2521: LD_INT 27
2523: PUSH
2524: LD_INT 33
2526: PUSH
2527: LD_INT 69
2529: PUSH
2530: LD_INT 39
2532: PUSH
2533: LD_INT 34
2535: PUSH
2536: LD_INT 40
2538: PUSH
2539: LD_INT 71
2541: PUSH
2542: LD_INT 23
2544: PUSH
2545: LD_INT 44
2547: PUSH
2548: LD_INT 48
2550: PUSH
2551: LD_INT 49
2553: PUSH
2554: LD_INT 50
2556: PUSH
2557: LD_INT 51
2559: PUSH
2560: LD_INT 52
2562: PUSH
2563: LD_INT 53
2565: PUSH
2566: LD_INT 54
2568: PUSH
2569: LD_INT 55
2571: PUSH
2572: LD_INT 56
2574: PUSH
2575: LD_INT 57
2577: PUSH
2578: LD_INT 58
2580: PUSH
2581: LD_INT 59
2583: PUSH
2584: LD_INT 63
2586: PUSH
2587: LD_INT 64
2589: PUSH
2590: LD_INT 65
2592: PUSH
2593: LD_INT 82
2595: PUSH
2596: LD_INT 83
2598: PUSH
2599: LD_INT 84
2601: PUSH
2602: LD_INT 85
2604: PUSH
2605: LD_INT 86
2607: PUSH
2608: LD_INT 89
2610: PUSH
2611: LD_INT 91
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: ST_TO_ADDR
2671: GO 2674
2673: POP
// if state > - 1 and state < 3 then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 1
2681: NEG
2682: GREATER
2683: IFFALSE 2695
2685: PUSH
2686: LD_VAR 0 3
2690: PUSH
2691: LD_INT 3
2693: LESS
2694: AND
2695: IFFALSE 2752
// for i in result do
2697: LD_ADDR_VAR 0 5
2701: PUSH
2702: LD_VAR 0 4
2706: PUSH
2707: FOR_IN
2708: IFFALSE 2750
// if GetTech ( i , side ) <> state then
2710: LD_VAR 0 5
2714: PPUSH
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 321
2724: PUSH
2725: LD_VAR 0 3
2729: NONEQUAL
2730: IFFALSE 2748
// result := result diff i ;
2732: LD_ADDR_VAR 0 4
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_VAR 0 5
2746: DIFF
2747: ST_TO_ADDR
2748: GO 2707
2750: POP
2751: POP
// end ;
2752: LD_VAR 0 4
2756: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2757: LD_INT 0
2759: PPUSH
2760: PPUSH
2761: PPUSH
// result := true ;
2762: LD_ADDR_VAR 0 3
2766: PUSH
2767: LD_INT 1
2769: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2770: LD_ADDR_VAR 0 5
2774: PUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 480
2784: ST_TO_ADDR
// if not tmp then
2785: LD_VAR 0 5
2789: NOT
2790: IFFALSE 2794
// exit ;
2792: GO 2843
// for i in tmp do
2794: LD_ADDR_VAR 0 4
2798: PUSH
2799: LD_VAR 0 5
2803: PUSH
2804: FOR_IN
2805: IFFALSE 2841
// if GetTech ( i , side ) <> state_researched then
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_VAR 0 1
2816: PPUSH
2817: CALL_OW 321
2821: PUSH
2822: LD_INT 2
2824: NONEQUAL
2825: IFFALSE 2839
// begin result := false ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: LD_INT 0
2834: ST_TO_ADDR
// exit ;
2835: POP
2836: POP
2837: GO 2843
// end ;
2839: GO 2804
2841: POP
2842: POP
// end ;
2843: LD_VAR 0 3
2847: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2848: LD_INT 0
2850: PPUSH
2851: PPUSH
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
2860: PPUSH
2861: PPUSH
2862: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2863: LD_VAR 0 1
2867: NOT
2868: IFTRUE 2885
2870: PUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: CALL_OW 257
2880: PUSH
2881: LD_INT 9
2883: NONEQUAL
2884: OR
2885: IFFALSE 2889
// exit ;
2887: GO 3468
// side := GetSide ( unit ) ;
2889: LD_ADDR_VAR 0 9
2893: PUSH
2894: LD_VAR 0 1
2898: PPUSH
2899: CALL_OW 255
2903: ST_TO_ADDR
// tech_space := tech_spacanom ;
2904: LD_ADDR_VAR 0 12
2908: PUSH
2909: LD_INT 29
2911: ST_TO_ADDR
// tech_time := tech_taurad ;
2912: LD_ADDR_VAR 0 13
2916: PUSH
2917: LD_INT 28
2919: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2920: LD_ADDR_VAR 0 11
2924: PUSH
2925: LD_VAR 0 1
2929: PPUSH
2930: CALL_OW 310
2934: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2935: LD_VAR 0 11
2939: PPUSH
2940: CALL_OW 247
2944: PUSH
2945: LD_INT 2
2947: EQUAL
2948: IFFALSE 2952
// exit ;
2950: GO 3468
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2952: LD_ADDR_VAR 0 8
2956: PUSH
2957: LD_INT 81
2959: PUSH
2960: LD_VAR 0 9
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 21
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// if not tmp then
2995: LD_VAR 0 8
2999: NOT
3000: IFFALSE 3004
// exit ;
3002: GO 3468
// if in_unit then
3004: LD_VAR 0 11
3008: IFFALSE 3032
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3010: LD_ADDR_VAR 0 10
3014: PUSH
3015: LD_VAR 0 8
3019: PPUSH
3020: LD_VAR 0 11
3024: PPUSH
3025: CALL_OW 74
3029: ST_TO_ADDR
3030: GO 3052
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3032: LD_ADDR_VAR 0 10
3036: PUSH
3037: LD_VAR 0 8
3041: PPUSH
3042: LD_VAR 0 1
3046: PPUSH
3047: CALL_OW 74
3051: ST_TO_ADDR
// if not enemy then
3052: LD_VAR 0 10
3056: NOT
3057: IFFALSE 3061
// exit ;
3059: GO 3468
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3061: LD_VAR 0 11
3065: IFFALSE 3087
3067: PUSH
3068: LD_VAR 0 11
3072: PPUSH
3073: LD_VAR 0 10
3077: PPUSH
3078: CALL_OW 296
3082: PUSH
3083: LD_INT 13
3085: GREATER
3086: AND
3087: IFTRUE 3109
3089: PUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 296
3104: PUSH
3105: LD_INT 12
3107: GREATER
3108: OR
3109: IFFALSE 3113
// exit ;
3111: GO 3468
// missile := [ 1 ] ;
3113: LD_ADDR_VAR 0 14
3117: PUSH
3118: LD_INT 1
3120: PUSH
3121: EMPTY
3122: LIST
3123: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3124: LD_VAR 0 9
3128: PPUSH
3129: LD_VAR 0 12
3133: PPUSH
3134: CALL_OW 325
3138: IFFALSE 3167
// missile := Replace ( missile , missile + 1 , 2 ) ;
3140: LD_ADDR_VAR 0 14
3144: PUSH
3145: LD_VAR 0 14
3149: PPUSH
3150: LD_VAR 0 14
3154: PUSH
3155: LD_INT 1
3157: PLUS
3158: PPUSH
3159: LD_INT 2
3161: PPUSH
3162: CALL_OW 1
3166: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3167: LD_VAR 0 9
3171: PPUSH
3172: LD_VAR 0 13
3176: PPUSH
3177: CALL_OW 325
3181: IFFALSE 3205
3183: PUSH
3184: LD_VAR 0 10
3188: PPUSH
3189: CALL_OW 255
3193: PPUSH
3194: LD_VAR 0 13
3198: PPUSH
3199: CALL_OW 325
3203: NOT
3204: AND
3205: IFFALSE 3234
// missile := Replace ( missile , missile + 1 , 3 ) ;
3207: LD_ADDR_VAR 0 14
3211: PUSH
3212: LD_VAR 0 14
3216: PPUSH
3217: LD_VAR 0 14
3221: PUSH
3222: LD_INT 1
3224: PLUS
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: CALL_OW 1
3233: ST_TO_ADDR
// if missile < 2 then
3234: LD_VAR 0 14
3238: PUSH
3239: LD_INT 2
3241: LESS
3242: IFFALSE 3246
// exit ;
3244: GO 3468
// x := GetX ( enemy ) ;
3246: LD_ADDR_VAR 0 4
3250: PUSH
3251: LD_VAR 0 10
3255: PPUSH
3256: CALL_OW 250
3260: ST_TO_ADDR
// y := GetY ( enemy ) ;
3261: LD_ADDR_VAR 0 5
3265: PUSH
3266: LD_VAR 0 10
3270: PPUSH
3271: CALL_OW 251
3275: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3276: LD_ADDR_VAR 0 6
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: NEG
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 12
3297: PLUS
3298: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3299: LD_ADDR_VAR 0 7
3303: PUSH
3304: LD_VAR 0 5
3308: PUSH
3309: LD_INT 1
3311: NEG
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 12
3320: PLUS
3321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3322: LD_VAR 0 6
3326: PPUSH
3327: LD_VAR 0 7
3331: PPUSH
3332: CALL_OW 488
3336: NOT
3337: IFFALSE 3359
// begin _x := x ;
3339: LD_ADDR_VAR 0 6
3343: PUSH
3344: LD_VAR 0 4
3348: ST_TO_ADDR
// _y := y ;
3349: LD_ADDR_VAR 0 7
3353: PUSH
3354: LD_VAR 0 5
3358: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 1
3366: PPUSH
3367: LD_VAR 0 14
3371: PPUSH
3372: CALL_OW 12
3376: ST_TO_ADDR
// case i of 1 :
3377: LD_VAR 0 3
3381: PUSH
3382: LD_INT 1
3384: DOUBLE
3385: EQUAL
3386: IFTRUE 3390
3388: GO 3407
3390: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3391: LD_VAR 0 1
3395: PPUSH
3396: LD_VAR 0 10
3400: PPUSH
3401: CALL_OW 115
3405: GO 3468
3407: LD_INT 2
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3415
3413: GO 3437
3415: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3416: LD_VAR 0 1
3420: PPUSH
3421: LD_VAR 0 6
3425: PPUSH
3426: LD_VAR 0 7
3430: PPUSH
3431: CALL_OW 153
3435: GO 3468
3437: LD_INT 3
3439: DOUBLE
3440: EQUAL
3441: IFTRUE 3445
3443: GO 3467
3445: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3446: LD_VAR 0 1
3450: PPUSH
3451: LD_VAR 0 6
3455: PPUSH
3456: LD_VAR 0 7
3460: PPUSH
3461: CALL_OW 154
3465: GO 3468
3467: POP
// end ;
3468: LD_VAR 0 2
3472: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3473: LD_INT 0
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
3479: PPUSH
3480: PPUSH
// if not unit or not building then
3481: LD_VAR 0 1
3485: NOT
3486: IFTRUE 3495
3488: PUSH
3489: LD_VAR 0 2
3493: NOT
3494: OR
3495: IFFALSE 3499
// exit ;
3497: GO 3657
// x := GetX ( building ) ;
3499: LD_ADDR_VAR 0 5
3503: PUSH
3504: LD_VAR 0 2
3508: PPUSH
3509: CALL_OW 250
3513: ST_TO_ADDR
// y := GetY ( building ) ;
3514: LD_ADDR_VAR 0 6
3518: PUSH
3519: LD_VAR 0 2
3523: PPUSH
3524: CALL_OW 251
3528: ST_TO_ADDR
// for i := 0 to 5 do
3529: LD_ADDR_VAR 0 4
3533: PUSH
3534: DOUBLE
3535: LD_INT 0
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 5
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3655
// begin _x := ShiftX ( x , i , 3 ) ;
3545: LD_ADDR_VAR 0 7
3549: PUSH
3550: LD_VAR 0 5
3554: PPUSH
3555: LD_VAR 0 4
3559: PPUSH
3560: LD_INT 3
3562: PPUSH
3563: CALL_OW 272
3567: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3568: LD_ADDR_VAR 0 8
3572: PUSH
3573: LD_VAR 0 6
3577: PPUSH
3578: LD_VAR 0 4
3582: PPUSH
3583: LD_INT 3
3585: PPUSH
3586: CALL_OW 273
3590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3591: LD_VAR 0 7
3595: PPUSH
3596: LD_VAR 0 8
3600: PPUSH
3601: CALL_OW 488
3605: NOT
3606: IFFALSE 3610
// continue ;
3608: GO 3542
// if HexInfo ( _x , _y ) = 0 then
3610: LD_VAR 0 7
3614: PPUSH
3615: LD_VAR 0 8
3619: PPUSH
3620: CALL_OW 428
3624: PUSH
3625: LD_INT 0
3627: EQUAL
3628: IFFALSE 3653
// begin ComMoveXY ( unit , _x , _y ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_VAR 0 7
3639: PPUSH
3640: LD_VAR 0 8
3644: PPUSH
3645: CALL_OW 111
// exit ;
3649: POP
3650: POP
3651: GO 3657
// end ; end ;
3653: GO 3542
3655: POP
3656: POP
// end ;
3657: LD_VAR 0 3
3661: RET
// export function ScanBase ( side , base_area ) ; begin
3662: LD_INT 0
3664: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: LD_VAR 0 2
3674: PPUSH
3675: LD_INT 81
3677: PUSH
3678: LD_VAR 0 1
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PPUSH
3687: CALL_OW 70
3691: ST_TO_ADDR
// end ;
3692: LD_VAR 0 3
3696: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
// result := false ;
3703: LD_ADDR_VAR 0 2
3707: PUSH
3708: LD_INT 0
3710: ST_TO_ADDR
// side := GetSide ( unit ) ;
3711: LD_ADDR_VAR 0 3
3715: PUSH
3716: LD_VAR 0 1
3720: PPUSH
3721: CALL_OW 255
3725: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3726: LD_ADDR_VAR 0 4
3730: PUSH
3731: LD_VAR 0 1
3735: PPUSH
3736: CALL_OW 248
3740: ST_TO_ADDR
// case nat of 1 :
3741: LD_VAR 0 4
3745: PUSH
3746: LD_INT 1
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3765
3754: POP
// tech := tech_lassight ; 2 :
3755: LD_ADDR_VAR 0 5
3759: PUSH
3760: LD_INT 12
3762: ST_TO_ADDR
3763: GO 3804
3765: LD_INT 2
3767: DOUBLE
3768: EQUAL
3769: IFTRUE 3773
3771: GO 3784
3773: POP
// tech := tech_mortar ; 3 :
3774: LD_ADDR_VAR 0 5
3778: PUSH
3779: LD_INT 41
3781: ST_TO_ADDR
3782: GO 3804
3784: LD_INT 3
3786: DOUBLE
3787: EQUAL
3788: IFTRUE 3792
3790: GO 3803
3792: POP
// tech := tech_bazooka ; end ;
3793: LD_ADDR_VAR 0 5
3797: PUSH
3798: LD_INT 44
3800: ST_TO_ADDR
3801: GO 3804
3803: POP
// if Researched ( side , tech ) then
3804: LD_VAR 0 3
3808: PPUSH
3809: LD_VAR 0 5
3813: PPUSH
3814: CALL_OW 325
3818: IFFALSE 3845
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3820: LD_ADDR_VAR 0 2
3824: PUSH
3825: LD_INT 5
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 9
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: PUSH
3839: LD_VAR 0 4
3843: ARRAY
3844: ST_TO_ADDR
// end ;
3845: LD_VAR 0 2
3849: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3850: LD_INT 0
3852: PPUSH
3853: PPUSH
3854: PPUSH
// if not mines then
3855: LD_VAR 0 2
3859: NOT
3860: IFFALSE 3864
// exit ;
3862: GO 4008
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: LD_INT 81
3871: PUSH
3872: LD_VAR 0 1
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 21
3886: PUSH
3887: LD_INT 3
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// for i in mines do
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: LD_VAR 0 2
3916: PUSH
3917: FOR_IN
3918: IFFALSE 4006
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3920: LD_VAR 0 4
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: PPUSH
3929: LD_VAR 0 4
3933: PUSH
3934: LD_INT 2
3936: ARRAY
3937: PPUSH
3938: CALL_OW 458
3942: NOT
3943: IFFALSE 3947
// continue ;
3945: GO 3917
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3947: LD_VAR 0 4
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_VAR 0 4
3960: PUSH
3961: LD_INT 2
3963: ARRAY
3964: PPUSH
3965: CALL_OW 428
3969: PUSH
3970: LD_VAR 0 5
3974: IN
3975: IFFALSE 4004
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3977: LD_VAR 0 4
3981: PUSH
3982: LD_INT 1
3984: ARRAY
3985: PPUSH
3986: LD_VAR 0 4
3990: PUSH
3991: LD_INT 2
3993: ARRAY
3994: PPUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 456
// end ;
4004: GO 3917
4006: POP
4007: POP
// end ;
4008: LD_VAR 0 3
4012: RET
// export function Count ( array ) ; begin
4013: LD_INT 0
4015: PPUSH
// result := array + 0 ;
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_VAR 0 1
4025: PUSH
4026: LD_INT 0
4028: PLUS
4029: ST_TO_ADDR
// end ;
4030: LD_VAR 0 2
4034: RET
// export function IsEmpty ( building ) ; begin
4035: LD_INT 0
4037: PPUSH
// if not building then
4038: LD_VAR 0 1
4042: NOT
4043: IFFALSE 4047
// exit ;
4045: GO 4090
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4047: LD_ADDR_VAR 0 2
4051: PUSH
4052: LD_VAR 0 1
4056: PUSH
4057: LD_INT 22
4059: PUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 255
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 58
4076: PUSH
4077: EMPTY
4078: LIST
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 69
4088: IN
4089: ST_TO_ADDR
// end ;
4090: LD_VAR 0 2
4094: RET
// export function IsNotFull ( building ) ; var places ; begin
4095: LD_INT 0
4097: PPUSH
4098: PPUSH
// if not building then
4099: LD_VAR 0 1
4103: NOT
4104: IFFALSE 4108
// exit ;
4106: GO 4136
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_VAR 0 1
4117: PPUSH
4118: LD_INT 3
4120: PUSH
4121: LD_INT 62
4123: PUSH
4124: EMPTY
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 72
4135: ST_TO_ADDR
// end ;
4136: LD_VAR 0 2
4140: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4141: LD_INT 0
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
// tmp := [ ] ;
4147: LD_ADDR_VAR 0 3
4151: PUSH
4152: EMPTY
4153: ST_TO_ADDR
// list := [ ] ;
4154: LD_ADDR_VAR 0 5
4158: PUSH
4159: EMPTY
4160: ST_TO_ADDR
// for i = 16 to 25 do
4161: LD_ADDR_VAR 0 4
4165: PUSH
4166: DOUBLE
4167: LD_INT 16
4169: DEC
4170: ST_TO_ADDR
4171: LD_INT 25
4173: PUSH
4174: FOR_TO
4175: IFFALSE 4248
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: LD_VAR 0 3
4186: PUSH
4187: LD_INT 22
4189: PUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 255
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 91
4206: PUSH
4207: LD_VAR 0 1
4211: PUSH
4212: LD_INT 6
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 30
4222: PUSH
4223: LD_VAR 0 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: PPUSH
4240: CALL_OW 69
4244: ADD
4245: ST_TO_ADDR
4246: GO 4174
4248: POP
4249: POP
// for i = 1 to tmp do
4250: LD_ADDR_VAR 0 4
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_VAR 0 3
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4354
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_VAR 0 5
4277: PUSH
4278: LD_VAR 0 3
4282: PUSH
4283: LD_VAR 0 4
4287: ARRAY
4288: PPUSH
4289: CALL_OW 266
4293: PUSH
4294: LD_VAR 0 3
4298: PUSH
4299: LD_VAR 0 4
4303: ARRAY
4304: PPUSH
4305: CALL_OW 250
4309: PUSH
4310: LD_VAR 0 3
4314: PUSH
4315: LD_VAR 0 4
4319: ARRAY
4320: PPUSH
4321: CALL_OW 251
4325: PUSH
4326: LD_VAR 0 3
4330: PUSH
4331: LD_VAR 0 4
4335: ARRAY
4336: PPUSH
4337: CALL_OW 254
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: ADD
4351: ST_TO_ADDR
4352: GO 4265
4354: POP
4355: POP
// result := list ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_VAR 0 5
4365: ST_TO_ADDR
// end ;
4366: LD_VAR 0 2
4370: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// if not factory then
4380: LD_VAR 0 1
4384: NOT
4385: IFFALSE 4389
// exit ;
4387: GO 4992
// if control = control_apeman then
4389: LD_VAR 0 4
4393: PUSH
4394: LD_INT 5
4396: EQUAL
4397: IFFALSE 4506
// begin tmp := UnitsInside ( factory ) ;
4399: LD_ADDR_VAR 0 8
4403: PUSH
4404: LD_VAR 0 1
4408: PPUSH
4409: CALL_OW 313
4413: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4414: LD_VAR 0 8
4418: PPUSH
4419: LD_INT 25
4421: PUSH
4422: LD_INT 12
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: NOT
4434: IFFALSE 4444
// control := control_manual ;
4436: LD_ADDR_VAR 0 4
4440: PUSH
4441: LD_INT 1
4443: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4444: LD_ADDR_VAR 0 8
4448: PUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL 4141 0 1
4458: ST_TO_ADDR
// if tmp then
4459: LD_VAR 0 8
4463: IFFALSE 4506
// begin for i in tmp do
4465: LD_ADDR_VAR 0 7
4469: PUSH
4470: LD_VAR 0 8
4474: PUSH
4475: FOR_IN
4476: IFFALSE 4504
// if i [ 1 ] = b_ext_radio then
4478: LD_VAR 0 7
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PUSH
4487: LD_INT 22
4489: EQUAL
4490: IFFALSE 4502
// begin control := control_remote ;
4492: LD_ADDR_VAR 0 4
4496: PUSH
4497: LD_INT 2
4499: ST_TO_ADDR
// break ;
4500: GO 4504
// end ;
4502: GO 4475
4504: POP
4505: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4506: LD_VAR 0 1
4510: PPUSH
4511: LD_VAR 0 2
4515: PPUSH
4516: LD_VAR 0 3
4520: PPUSH
4521: LD_VAR 0 4
4525: PPUSH
4526: LD_VAR 0 5
4530: PPUSH
4531: CALL_OW 448
4535: IFFALSE 4570
// begin result := [ chassis , engine , control , weapon ] ;
4537: LD_ADDR_VAR 0 6
4541: PUSH
4542: LD_VAR 0 2
4546: PUSH
4547: LD_VAR 0 3
4551: PUSH
4552: LD_VAR 0 4
4556: PUSH
4557: LD_VAR 0 5
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// exit ;
4568: GO 4992
// end ; _chassis := AvailableChassisList ( factory ) ;
4570: LD_ADDR_VAR 0 9
4574: PUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL_OW 475
4584: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4585: LD_ADDR_VAR 0 11
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 476
4599: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4600: LD_ADDR_VAR 0 12
4604: PUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 477
4614: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4615: LD_ADDR_VAR 0 10
4619: PUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 478
4629: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4630: LD_VAR 0 9
4634: NOT
4635: IFTRUE 4644
4637: PUSH
4638: LD_VAR 0 11
4642: NOT
4643: OR
4644: IFTRUE 4653
4646: PUSH
4647: LD_VAR 0 12
4651: NOT
4652: OR
4653: IFTRUE 4662
4655: PUSH
4656: LD_VAR 0 10
4660: NOT
4661: OR
4662: IFFALSE 4697
// begin result := [ chassis , engine , control , weapon ] ;
4664: LD_ADDR_VAR 0 6
4668: PUSH
4669: LD_VAR 0 2
4673: PUSH
4674: LD_VAR 0 3
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: LD_VAR 0 5
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: ST_TO_ADDR
// exit ;
4695: GO 4992
// end ; if not chassis in _chassis then
4697: LD_VAR 0 2
4701: PUSH
4702: LD_VAR 0 9
4706: IN
4707: NOT
4708: IFFALSE 4734
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4710: LD_ADDR_VAR 0 2
4714: PUSH
4715: LD_VAR 0 9
4719: PUSH
4720: LD_INT 1
4722: PPUSH
4723: LD_VAR 0 9
4727: PPUSH
4728: CALL_OW 12
4732: ARRAY
4733: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_VAR 0 3
4743: PPUSH
4744: CALL 4997 0 2
4748: NOT
4749: IFFALSE 4810
// repeat engine := _engine [ 1 ] ;
4751: LD_ADDR_VAR 0 3
4755: PUSH
4756: LD_VAR 0 11
4760: PUSH
4761: LD_INT 1
4763: ARRAY
4764: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4765: LD_ADDR_VAR 0 11
4769: PUSH
4770: LD_VAR 0 11
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 3
4782: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4783: LD_VAR 0 2
4787: PPUSH
4788: LD_VAR 0 3
4792: PPUSH
4793: CALL 4997 0 2
4797: IFTRUE 4808
4799: PUSH
4800: LD_VAR 0 11
4804: PUSH
4805: EMPTY
4806: EQUAL
4807: OR
4808: IFFALSE 4751
// if not control in _control then
4810: LD_VAR 0 4
4814: PUSH
4815: LD_VAR 0 12
4819: IN
4820: NOT
4821: IFFALSE 4847
// control := _control [ rand ( 1 , _control ) ] ;
4823: LD_ADDR_VAR 0 4
4827: PUSH
4828: LD_VAR 0 12
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_VAR 0 12
4840: PPUSH
4841: CALL_OW 12
4845: ARRAY
4846: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4847: LD_VAR 0 2
4851: PPUSH
4852: LD_VAR 0 5
4856: PPUSH
4857: CALL 5219 0 2
4861: NOT
4862: IFFALSE 4923
// repeat weapon := _weapon [ 1 ] ;
4864: LD_ADDR_VAR 0 5
4868: PUSH
4869: LD_VAR 0 10
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4878: LD_ADDR_VAR 0 10
4882: PUSH
4883: LD_VAR 0 10
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: CALL_OW 3
4895: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4896: LD_VAR 0 2
4900: PPUSH
4901: LD_VAR 0 5
4905: PPUSH
4906: CALL 5219 0 2
4910: IFTRUE 4921
4912: PUSH
4913: LD_VAR 0 10
4917: PUSH
4918: EMPTY
4919: EQUAL
4920: OR
4921: IFFALSE 4864
// result := [ ] ;
4923: LD_ADDR_VAR 0 6
4927: PUSH
4928: EMPTY
4929: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4930: LD_VAR 0 1
4934: PPUSH
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 3
4944: PPUSH
4945: LD_VAR 0 4
4949: PPUSH
4950: LD_VAR 0 5
4954: PPUSH
4955: CALL_OW 448
4959: IFFALSE 4992
// result := [ chassis , engine , control , weapon ] ;
4961: LD_ADDR_VAR 0 6
4965: PUSH
4966: LD_VAR 0 2
4970: PUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 4
4980: PUSH
4981: LD_VAR 0 5
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: ST_TO_ADDR
// end ;
4992: LD_VAR 0 6
4996: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4997: LD_INT 0
4999: PPUSH
// if not chassis or not engine then
5000: LD_VAR 0 1
5004: NOT
5005: IFTRUE 5014
5007: PUSH
5008: LD_VAR 0 2
5012: NOT
5013: OR
5014: IFFALSE 5018
// exit ;
5016: GO 5214
// case engine of engine_solar :
5018: LD_VAR 0 2
5022: PUSH
5023: LD_INT 2
5025: DOUBLE
5026: EQUAL
5027: IFTRUE 5031
5029: GO 5069
5031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5032: LD_ADDR_VAR 0 3
5036: PUSH
5037: LD_INT 11
5039: PUSH
5040: LD_INT 12
5042: PUSH
5043: LD_INT 13
5045: PUSH
5046: LD_INT 14
5048: PUSH
5049: LD_INT 1
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: LD_INT 3
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: ST_TO_ADDR
5067: GO 5198
5069: LD_INT 1
5071: DOUBLE
5072: EQUAL
5073: IFTRUE 5077
5075: GO 5139
5077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: LD_INT 11
5085: PUSH
5086: LD_INT 12
5088: PUSH
5089: LD_INT 13
5091: PUSH
5092: LD_INT 14
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: LD_INT 2
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 5
5109: PUSH
5110: LD_INT 21
5112: PUSH
5113: LD_INT 23
5115: PUSH
5116: LD_INT 22
5118: PUSH
5119: LD_INT 24
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: ST_TO_ADDR
5137: GO 5198
5139: LD_INT 3
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5147
5145: GO 5197
5147: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: LD_INT 14
5158: PUSH
5159: LD_INT 2
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 4
5167: PUSH
5168: LD_INT 5
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 22
5176: PUSH
5177: LD_INT 23
5179: PUSH
5180: LD_INT 24
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: ST_TO_ADDR
5195: GO 5198
5197: POP
// result := ( chassis in result ) ;
5198: LD_ADDR_VAR 0 3
5202: PUSH
5203: LD_VAR 0 1
5207: PUSH
5208: LD_VAR 0 3
5212: IN
5213: ST_TO_ADDR
// end ;
5214: LD_VAR 0 3
5218: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5219: LD_INT 0
5221: PPUSH
// if not chassis or not weapon then
5222: LD_VAR 0 1
5226: NOT
5227: IFTRUE 5236
5229: PUSH
5230: LD_VAR 0 2
5234: NOT
5235: OR
5236: IFFALSE 5240
// exit ;
5238: GO 6300
// case weapon of us_machine_gun :
5240: LD_VAR 0 2
5244: PUSH
5245: LD_INT 2
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5283
5253: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5254: LD_ADDR_VAR 0 3
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 2
5264: PUSH
5265: LD_INT 3
5267: PUSH
5268: LD_INT 4
5270: PUSH
5271: LD_INT 5
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: ST_TO_ADDR
5281: GO 6284
5283: LD_INT 3
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5291
5289: GO 5321
5291: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5292: LD_ADDR_VAR 0 3
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: LD_INT 2
5302: PUSH
5303: LD_INT 3
5305: PUSH
5306: LD_INT 4
5308: PUSH
5309: LD_INT 5
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: ST_TO_ADDR
5319: GO 6284
5321: LD_INT 11
5323: DOUBLE
5324: EQUAL
5325: IFTRUE 5329
5327: GO 5359
5329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5330: LD_ADDR_VAR 0 3
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: LD_INT 2
5340: PUSH
5341: LD_INT 3
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: LD_INT 5
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: ST_TO_ADDR
5357: GO 6284
5359: LD_INT 4
5361: DOUBLE
5362: EQUAL
5363: IFTRUE 5367
5365: GO 5393
5367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5368: LD_ADDR_VAR 0 3
5372: PUSH
5373: LD_INT 2
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 4
5381: PUSH
5382: LD_INT 5
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: ST_TO_ADDR
5391: GO 6284
5393: LD_INT 5
5395: DOUBLE
5396: EQUAL
5397: IFTRUE 5401
5399: GO 5427
5401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5402: LD_ADDR_VAR 0 3
5406: PUSH
5407: LD_INT 2
5409: PUSH
5410: LD_INT 3
5412: PUSH
5413: LD_INT 4
5415: PUSH
5416: LD_INT 5
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: ST_TO_ADDR
5425: GO 6284
5427: LD_INT 9
5429: DOUBLE
5430: EQUAL
5431: IFTRUE 5435
5433: GO 5461
5435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: LD_INT 2
5443: PUSH
5444: LD_INT 3
5446: PUSH
5447: LD_INT 4
5449: PUSH
5450: LD_INT 5
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: ST_TO_ADDR
5459: GO 6284
5461: LD_INT 7
5463: DOUBLE
5464: EQUAL
5465: IFTRUE 5469
5467: GO 5495
5469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5470: LD_ADDR_VAR 0 3
5474: PUSH
5475: LD_INT 2
5477: PUSH
5478: LD_INT 3
5480: PUSH
5481: LD_INT 4
5483: PUSH
5484: LD_INT 5
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: ST_TO_ADDR
5493: GO 6284
5495: LD_INT 12
5497: DOUBLE
5498: EQUAL
5499: IFTRUE 5503
5501: GO 5529
5503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5504: LD_ADDR_VAR 0 3
5508: PUSH
5509: LD_INT 2
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 4
5517: PUSH
5518: LD_INT 5
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: ST_TO_ADDR
5527: GO 6284
5529: LD_INT 13
5531: DOUBLE
5532: EQUAL
5533: IFTRUE 5537
5535: GO 5563
5537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5538: LD_ADDR_VAR 0 3
5542: PUSH
5543: LD_INT 2
5545: PUSH
5546: LD_INT 3
5548: PUSH
5549: LD_INT 4
5551: PUSH
5552: LD_INT 5
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: ST_TO_ADDR
5561: GO 6284
5563: LD_INT 14
5565: DOUBLE
5566: EQUAL
5567: IFTRUE 5571
5569: GO 5589
5571: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5572: LD_ADDR_VAR 0 3
5576: PUSH
5577: LD_INT 4
5579: PUSH
5580: LD_INT 5
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: ST_TO_ADDR
5587: GO 6284
5589: LD_INT 6
5591: DOUBLE
5592: EQUAL
5593: IFTRUE 5597
5595: GO 5615
5597: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5598: LD_ADDR_VAR 0 3
5602: PUSH
5603: LD_INT 4
5605: PUSH
5606: LD_INT 5
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: ST_TO_ADDR
5613: GO 6284
5615: LD_INT 10
5617: DOUBLE
5618: EQUAL
5619: IFTRUE 5623
5621: GO 5641
5623: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5624: LD_ADDR_VAR 0 3
5628: PUSH
5629: LD_INT 4
5631: PUSH
5632: LD_INT 5
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: ST_TO_ADDR
5639: GO 6284
5641: LD_INT 22
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5649
5647: GO 5675
5649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_INT 11
5657: PUSH
5658: LD_INT 12
5660: PUSH
5661: LD_INT 13
5663: PUSH
5664: LD_INT 14
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: ST_TO_ADDR
5673: GO 6284
5675: LD_INT 23
5677: DOUBLE
5678: EQUAL
5679: IFTRUE 5683
5681: GO 5709
5683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5684: LD_ADDR_VAR 0 3
5688: PUSH
5689: LD_INT 11
5691: PUSH
5692: LD_INT 12
5694: PUSH
5695: LD_INT 13
5697: PUSH
5698: LD_INT 14
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: ST_TO_ADDR
5707: GO 6284
5709: LD_INT 24
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5743
5717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5718: LD_ADDR_VAR 0 3
5722: PUSH
5723: LD_INT 11
5725: PUSH
5726: LD_INT 12
5728: PUSH
5729: LD_INT 13
5731: PUSH
5732: LD_INT 14
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 6284
5743: LD_INT 30
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5777
5751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5752: LD_ADDR_VAR 0 3
5756: PUSH
5757: LD_INT 11
5759: PUSH
5760: LD_INT 12
5762: PUSH
5763: LD_INT 13
5765: PUSH
5766: LD_INT 14
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: ST_TO_ADDR
5775: GO 6284
5777: LD_INT 25
5779: DOUBLE
5780: EQUAL
5781: IFTRUE 5785
5783: GO 5803
5785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5786: LD_ADDR_VAR 0 3
5790: PUSH
5791: LD_INT 13
5793: PUSH
5794: LD_INT 14
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: ST_TO_ADDR
5801: GO 6284
5803: LD_INT 27
5805: DOUBLE
5806: EQUAL
5807: IFTRUE 5811
5809: GO 5829
5811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5812: LD_ADDR_VAR 0 3
5816: PUSH
5817: LD_INT 13
5819: PUSH
5820: LD_INT 14
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: ST_TO_ADDR
5827: GO 6284
5829: LD_INT 92
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 5863
5837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5838: LD_ADDR_VAR 0 3
5842: PUSH
5843: LD_INT 11
5845: PUSH
5846: LD_INT 12
5848: PUSH
5849: LD_INT 13
5851: PUSH
5852: LD_INT 14
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: ST_TO_ADDR
5861: GO 6284
5863: LD_INT 28
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5889
5871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_INT 13
5879: PUSH
5880: LD_INT 14
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: ST_TO_ADDR
5887: GO 6284
5889: LD_INT 29
5891: DOUBLE
5892: EQUAL
5893: IFTRUE 5897
5895: GO 5915
5897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5898: LD_ADDR_VAR 0 3
5902: PUSH
5903: LD_INT 13
5905: PUSH
5906: LD_INT 14
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: ST_TO_ADDR
5913: GO 6284
5915: LD_INT 31
5917: DOUBLE
5918: EQUAL
5919: IFTRUE 5923
5921: GO 5941
5923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5924: LD_ADDR_VAR 0 3
5928: PUSH
5929: LD_INT 13
5931: PUSH
5932: LD_INT 14
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: ST_TO_ADDR
5939: GO 6284
5941: LD_INT 26
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5949
5947: GO 5967
5949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5950: LD_ADDR_VAR 0 3
5954: PUSH
5955: LD_INT 13
5957: PUSH
5958: LD_INT 14
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: ST_TO_ADDR
5965: GO 6284
5967: LD_INT 42
5969: DOUBLE
5970: EQUAL
5971: IFTRUE 5975
5973: GO 6001
5975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: LD_INT 21
5983: PUSH
5984: LD_INT 22
5986: PUSH
5987: LD_INT 23
5989: PUSH
5990: LD_INT 24
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: ST_TO_ADDR
5999: GO 6284
6001: LD_INT 43
6003: DOUBLE
6004: EQUAL
6005: IFTRUE 6009
6007: GO 6035
6009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6010: LD_ADDR_VAR 0 3
6014: PUSH
6015: LD_INT 21
6017: PUSH
6018: LD_INT 22
6020: PUSH
6021: LD_INT 23
6023: PUSH
6024: LD_INT 24
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: ST_TO_ADDR
6033: GO 6284
6035: LD_INT 44
6037: DOUBLE
6038: EQUAL
6039: IFTRUE 6043
6041: GO 6069
6043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: LD_INT 21
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_INT 23
6057: PUSH
6058: LD_INT 24
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: ST_TO_ADDR
6067: GO 6284
6069: LD_INT 45
6071: DOUBLE
6072: EQUAL
6073: IFTRUE 6077
6075: GO 6103
6077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_INT 21
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 23
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: ST_TO_ADDR
6101: GO 6284
6103: LD_INT 49
6105: DOUBLE
6106: EQUAL
6107: IFTRUE 6111
6109: GO 6137
6111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6112: LD_ADDR_VAR 0 3
6116: PUSH
6117: LD_INT 21
6119: PUSH
6120: LD_INT 22
6122: PUSH
6123: LD_INT 23
6125: PUSH
6126: LD_INT 24
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: ST_TO_ADDR
6135: GO 6284
6137: LD_INT 51
6139: DOUBLE
6140: EQUAL
6141: IFTRUE 6145
6143: GO 6171
6145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 21
6153: PUSH
6154: LD_INT 22
6156: PUSH
6157: LD_INT 23
6159: PUSH
6160: LD_INT 24
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: ST_TO_ADDR
6169: GO 6284
6171: LD_INT 52
6173: DOUBLE
6174: EQUAL
6175: IFTRUE 6179
6177: GO 6205
6179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: LD_INT 21
6187: PUSH
6188: LD_INT 22
6190: PUSH
6191: LD_INT 23
6193: PUSH
6194: LD_INT 24
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: ST_TO_ADDR
6203: GO 6284
6205: LD_INT 53
6207: DOUBLE
6208: EQUAL
6209: IFTRUE 6213
6211: GO 6231
6213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6214: LD_ADDR_VAR 0 3
6218: PUSH
6219: LD_INT 23
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: ST_TO_ADDR
6229: GO 6284
6231: LD_INT 46
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6239
6237: GO 6257
6239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: LD_INT 23
6247: PUSH
6248: LD_INT 24
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: ST_TO_ADDR
6255: GO 6284
6257: LD_INT 47
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6283
6265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: LD_INT 23
6273: PUSH
6274: LD_INT 24
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: ST_TO_ADDR
6281: GO 6284
6283: POP
// result := ( chassis in result ) ;
6284: LD_ADDR_VAR 0 3
6288: PUSH
6289: LD_VAR 0 1
6293: PUSH
6294: LD_VAR 0 3
6298: IN
6299: ST_TO_ADDR
// end ;
6300: LD_VAR 0 3
6304: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6305: LD_INT 0
6307: PPUSH
6308: PPUSH
6309: PPUSH
6310: PPUSH
6311: PPUSH
6312: PPUSH
6313: PPUSH
// result := array ;
6314: LD_ADDR_VAR 0 5
6318: PUSH
6319: LD_VAR 0 1
6323: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6324: LD_VAR 0 1
6328: NOT
6329: IFTRUE 6338
6331: PUSH
6332: LD_VAR 0 2
6336: NOT
6337: OR
6338: IFTRUE 6347
6340: PUSH
6341: LD_VAR 0 3
6345: NOT
6346: OR
6347: IFTRUE 6361
6349: PUSH
6350: LD_VAR 0 2
6354: PUSH
6355: LD_VAR 0 1
6359: GREATER
6360: OR
6361: IFTRUE 6375
6363: PUSH
6364: LD_VAR 0 3
6368: PUSH
6369: LD_VAR 0 1
6373: GREATER
6374: OR
6375: IFFALSE 6379
// exit ;
6377: GO 6675
// if direction then
6379: LD_VAR 0 4
6383: IFFALSE 6447
// begin d := 1 ;
6385: LD_ADDR_VAR 0 9
6389: PUSH
6390: LD_INT 1
6392: ST_TO_ADDR
// if i_from > i_to then
6393: LD_VAR 0 2
6397: PUSH
6398: LD_VAR 0 3
6402: GREATER
6403: IFFALSE 6429
// length := ( array - i_from ) + i_to else
6405: LD_ADDR_VAR 0 11
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_VAR 0 2
6419: MINUS
6420: PUSH
6421: LD_VAR 0 3
6425: PLUS
6426: ST_TO_ADDR
6427: GO 6445
// length := i_to - i_from ;
6429: LD_ADDR_VAR 0 11
6433: PUSH
6434: LD_VAR 0 3
6438: PUSH
6439: LD_VAR 0 2
6443: MINUS
6444: ST_TO_ADDR
// end else
6445: GO 6508
// begin d := - 1 ;
6447: LD_ADDR_VAR 0 9
6451: PUSH
6452: LD_INT 1
6454: NEG
6455: ST_TO_ADDR
// if i_from > i_to then
6456: LD_VAR 0 2
6460: PUSH
6461: LD_VAR 0 3
6465: GREATER
6466: IFFALSE 6486
// length := i_from - i_to else
6468: LD_ADDR_VAR 0 11
6472: PUSH
6473: LD_VAR 0 2
6477: PUSH
6478: LD_VAR 0 3
6482: MINUS
6483: ST_TO_ADDR
6484: GO 6508
// length := ( array - i_to ) + i_from ;
6486: LD_ADDR_VAR 0 11
6490: PUSH
6491: LD_VAR 0 1
6495: PUSH
6496: LD_VAR 0 3
6500: MINUS
6501: PUSH
6502: LD_VAR 0 2
6506: PLUS
6507: ST_TO_ADDR
// end ; if not length then
6508: LD_VAR 0 11
6512: NOT
6513: IFFALSE 6517
// exit ;
6515: GO 6675
// tmp := array ;
6517: LD_ADDR_VAR 0 10
6521: PUSH
6522: LD_VAR 0 1
6526: ST_TO_ADDR
// for i = 1 to length do
6527: LD_ADDR_VAR 0 6
6531: PUSH
6532: DOUBLE
6533: LD_INT 1
6535: DEC
6536: ST_TO_ADDR
6537: LD_VAR 0 11
6541: PUSH
6542: FOR_TO
6543: IFFALSE 6663
// begin for j = 1 to array do
6545: LD_ADDR_VAR 0 7
6549: PUSH
6550: DOUBLE
6551: LD_INT 1
6553: DEC
6554: ST_TO_ADDR
6555: LD_VAR 0 1
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6649
// begin k := j + d ;
6563: LD_ADDR_VAR 0 8
6567: PUSH
6568: LD_VAR 0 7
6572: PUSH
6573: LD_VAR 0 9
6577: PLUS
6578: ST_TO_ADDR
// if k > array then
6579: LD_VAR 0 8
6583: PUSH
6584: LD_VAR 0 1
6588: GREATER
6589: IFFALSE 6599
// k := 1 ;
6591: LD_ADDR_VAR 0 8
6595: PUSH
6596: LD_INT 1
6598: ST_TO_ADDR
// if not k then
6599: LD_VAR 0 8
6603: NOT
6604: IFFALSE 6616
// k := array ;
6606: LD_ADDR_VAR 0 8
6610: PUSH
6611: LD_VAR 0 1
6615: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6616: LD_ADDR_VAR 0 10
6620: PUSH
6621: LD_VAR 0 10
6625: PPUSH
6626: LD_VAR 0 8
6630: PPUSH
6631: LD_VAR 0 1
6635: PUSH
6636: LD_VAR 0 7
6640: ARRAY
6641: PPUSH
6642: CALL_OW 1
6646: ST_TO_ADDR
// end ;
6647: GO 6560
6649: POP
6650: POP
// array := tmp ;
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: LD_VAR 0 10
6660: ST_TO_ADDR
// end ;
6661: GO 6542
6663: POP
6664: POP
// result := array ;
6665: LD_ADDR_VAR 0 5
6669: PUSH
6670: LD_VAR 0 1
6674: ST_TO_ADDR
// end ;
6675: LD_VAR 0 5
6679: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6680: LD_INT 0
6682: PPUSH
6683: PPUSH
// result := 0 ;
6684: LD_ADDR_VAR 0 3
6688: PUSH
6689: LD_INT 0
6691: ST_TO_ADDR
// if not array or not value in array then
6692: LD_VAR 0 1
6696: NOT
6697: IFTRUE 6712
6699: PUSH
6700: LD_VAR 0 2
6704: PUSH
6705: LD_VAR 0 1
6709: IN
6710: NOT
6711: OR
6712: IFFALSE 6716
// exit ;
6714: GO 6770
// for i = 1 to array do
6716: LD_ADDR_VAR 0 4
6720: PUSH
6721: DOUBLE
6722: LD_INT 1
6724: DEC
6725: ST_TO_ADDR
6726: LD_VAR 0 1
6730: PUSH
6731: FOR_TO
6732: IFFALSE 6768
// if value = array [ i ] then
6734: LD_VAR 0 2
6738: PUSH
6739: LD_VAR 0 1
6743: PUSH
6744: LD_VAR 0 4
6748: ARRAY
6749: EQUAL
6750: IFFALSE 6766
// begin result := i ;
6752: LD_ADDR_VAR 0 3
6756: PUSH
6757: LD_VAR 0 4
6761: ST_TO_ADDR
// exit ;
6762: POP
6763: POP
6764: GO 6770
// end ;
6766: GO 6731
6768: POP
6769: POP
// end ;
6770: LD_VAR 0 3
6774: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6775: LD_INT 0
6777: PPUSH
// vc_chassis := chassis ;
6778: LD_ADDR_OWVAR 37
6782: PUSH
6783: LD_VAR 0 1
6787: ST_TO_ADDR
// vc_engine := engine ;
6788: LD_ADDR_OWVAR 39
6792: PUSH
6793: LD_VAR 0 2
6797: ST_TO_ADDR
// vc_control := control ;
6798: LD_ADDR_OWVAR 38
6802: PUSH
6803: LD_VAR 0 3
6807: ST_TO_ADDR
// vc_weapon := weapon ;
6808: LD_ADDR_OWVAR 40
6812: PUSH
6813: LD_VAR 0 4
6817: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6818: LD_ADDR_OWVAR 41
6822: PUSH
6823: LD_VAR 0 5
6827: ST_TO_ADDR
// end ;
6828: LD_VAR 0 6
6832: RET
// export function WantPlant ( unit ) ; var task ; begin
6833: LD_INT 0
6835: PPUSH
6836: PPUSH
// result := false ;
6837: LD_ADDR_VAR 0 2
6841: PUSH
6842: LD_INT 0
6844: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6845: LD_ADDR_VAR 0 3
6849: PUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 437
6859: ST_TO_ADDR
// if task then
6860: LD_VAR 0 3
6864: IFFALSE 6892
// if task [ 1 ] [ 1 ] = p then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 1
6873: ARRAY
6874: PUSH
6875: LD_INT 1
6877: ARRAY
6878: PUSH
6879: LD_STRING p
6881: EQUAL
6882: IFFALSE 6892
// result := true ;
6884: LD_ADDR_VAR 0 2
6888: PUSH
6889: LD_INT 1
6891: ST_TO_ADDR
// end ;
6892: LD_VAR 0 2
6896: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
// if pos < 1 then
6903: LD_VAR 0 2
6907: PUSH
6908: LD_INT 1
6910: LESS
6911: IFFALSE 6915
// exit ;
6913: GO 7218
// if pos = 1 then
6915: LD_VAR 0 2
6919: PUSH
6920: LD_INT 1
6922: EQUAL
6923: IFFALSE 6956
// result := Replace ( arr , pos [ 1 ] , value ) else
6925: LD_ADDR_VAR 0 4
6929: PUSH
6930: LD_VAR 0 1
6934: PPUSH
6935: LD_VAR 0 2
6939: PUSH
6940: LD_INT 1
6942: ARRAY
6943: PPUSH
6944: LD_VAR 0 3
6948: PPUSH
6949: CALL_OW 1
6953: ST_TO_ADDR
6954: GO 7218
// begin tmp := arr ;
6956: LD_ADDR_VAR 0 6
6960: PUSH
6961: LD_VAR 0 1
6965: ST_TO_ADDR
// s_arr := [ tmp ] ;
6966: LD_ADDR_VAR 0 7
6970: PUSH
6971: LD_VAR 0 6
6975: PUSH
6976: EMPTY
6977: LIST
6978: ST_TO_ADDR
// for i = 1 to pos - 1 do
6979: LD_ADDR_VAR 0 5
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_VAR 0 2
6993: PUSH
6994: LD_INT 1
6996: MINUS
6997: PUSH
6998: FOR_TO
6999: IFFALSE 7044
// begin tmp := tmp [ pos [ i ] ] ;
7001: LD_ADDR_VAR 0 6
7005: PUSH
7006: LD_VAR 0 6
7010: PUSH
7011: LD_VAR 0 2
7015: PUSH
7016: LD_VAR 0 5
7020: ARRAY
7021: ARRAY
7022: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7023: LD_ADDR_VAR 0 7
7027: PUSH
7028: LD_VAR 0 7
7032: PUSH
7033: LD_VAR 0 6
7037: PUSH
7038: EMPTY
7039: LIST
7040: ADD
7041: ST_TO_ADDR
// end ;
7042: GO 6998
7044: POP
7045: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7046: LD_ADDR_VAR 0 6
7050: PUSH
7051: LD_VAR 0 6
7055: PPUSH
7056: LD_VAR 0 2
7060: PUSH
7061: LD_VAR 0 2
7065: ARRAY
7066: PPUSH
7067: LD_VAR 0 3
7071: PPUSH
7072: CALL_OW 1
7076: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7077: LD_ADDR_VAR 0 7
7081: PUSH
7082: LD_VAR 0 7
7086: PPUSH
7087: LD_VAR 0 7
7091: PPUSH
7092: LD_VAR 0 6
7096: PPUSH
7097: CALL_OW 1
7101: ST_TO_ADDR
// for i = s_arr downto 2 do
7102: LD_ADDR_VAR 0 5
7106: PUSH
7107: DOUBLE
7108: LD_VAR 0 7
7112: INC
7113: ST_TO_ADDR
7114: LD_INT 2
7116: PUSH
7117: FOR_DOWNTO
7118: IFFALSE 7202
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7120: LD_ADDR_VAR 0 6
7124: PUSH
7125: LD_VAR 0 7
7129: PUSH
7130: LD_VAR 0 5
7134: PUSH
7135: LD_INT 1
7137: MINUS
7138: ARRAY
7139: PPUSH
7140: LD_VAR 0 2
7144: PUSH
7145: LD_VAR 0 5
7149: PUSH
7150: LD_INT 1
7152: MINUS
7153: ARRAY
7154: PPUSH
7155: LD_VAR 0 7
7159: PUSH
7160: LD_VAR 0 5
7164: ARRAY
7165: PPUSH
7166: CALL_OW 1
7170: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7171: LD_ADDR_VAR 0 7
7175: PUSH
7176: LD_VAR 0 7
7180: PPUSH
7181: LD_VAR 0 5
7185: PUSH
7186: LD_INT 1
7188: MINUS
7189: PPUSH
7190: LD_VAR 0 6
7194: PPUSH
7195: CALL_OW 1
7199: ST_TO_ADDR
// end ;
7200: GO 7117
7202: POP
7203: POP
// result := s_arr [ 1 ] ;
7204: LD_ADDR_VAR 0 4
7208: PUSH
7209: LD_VAR 0 7
7213: PUSH
7214: LD_INT 1
7216: ARRAY
7217: ST_TO_ADDR
// end ; end ;
7218: LD_VAR 0 4
7222: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7223: LD_INT 0
7225: PPUSH
7226: PPUSH
// if not list then
7227: LD_VAR 0 1
7231: NOT
7232: IFFALSE 7236
// exit ;
7234: GO 7327
// i := list [ pos1 ] ;
7236: LD_ADDR_VAR 0 5
7240: PUSH
7241: LD_VAR 0 1
7245: PUSH
7246: LD_VAR 0 2
7250: ARRAY
7251: ST_TO_ADDR
// if not i then
7252: LD_VAR 0 5
7256: NOT
7257: IFFALSE 7261
// exit ;
7259: GO 7327
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7261: LD_ADDR_VAR 0 1
7265: PUSH
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_VAR 0 2
7275: PPUSH
7276: LD_VAR 0 1
7280: PUSH
7281: LD_VAR 0 3
7285: ARRAY
7286: PPUSH
7287: CALL_OW 1
7291: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7292: LD_ADDR_VAR 0 1
7296: PUSH
7297: LD_VAR 0 1
7301: PPUSH
7302: LD_VAR 0 3
7306: PPUSH
7307: LD_VAR 0 5
7311: PPUSH
7312: CALL_OW 1
7316: ST_TO_ADDR
// result := list ;
7317: LD_ADDR_VAR 0 4
7321: PUSH
7322: LD_VAR 0 1
7326: ST_TO_ADDR
// end ;
7327: LD_VAR 0 4
7331: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7332: LD_INT 0
7334: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7335: LD_ADDR_VAR 0 5
7339: PUSH
7340: LD_VAR 0 1
7344: PPUSH
7345: CALL_OW 250
7349: PPUSH
7350: LD_VAR 0 1
7354: PPUSH
7355: CALL_OW 251
7359: PPUSH
7360: LD_VAR 0 2
7364: PPUSH
7365: LD_VAR 0 3
7369: PPUSH
7370: LD_VAR 0 4
7374: PPUSH
7375: CALL 7757 0 5
7379: ST_TO_ADDR
// end ;
7380: LD_VAR 0 5
7384: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7385: LD_INT 0
7387: PPUSH
7388: PPUSH
7389: PPUSH
7390: PPUSH
// if not list or not unit then
7391: LD_VAR 0 2
7395: NOT
7396: IFTRUE 7405
7398: PUSH
7399: LD_VAR 0 1
7403: NOT
7404: OR
7405: IFFALSE 7409
// exit ;
7407: GO 7752
// result := [ ] ;
7409: LD_ADDR_VAR 0 5
7413: PUSH
7414: EMPTY
7415: ST_TO_ADDR
// for i in list do
7416: LD_ADDR_VAR 0 6
7420: PUSH
7421: LD_VAR 0 2
7425: PUSH
7426: FOR_IN
7427: IFFALSE 7645
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7429: LD_ADDR_VAR 0 8
7433: PUSH
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_VAR 0 6
7443: PUSH
7444: LD_INT 1
7446: ARRAY
7447: PPUSH
7448: LD_VAR 0 6
7452: PUSH
7453: LD_INT 2
7455: ARRAY
7456: PPUSH
7457: CALL_OW 297
7461: ST_TO_ADDR
// if not Count ( result ) then
7462: LD_VAR 0 5
7466: PPUSH
7467: CALL 4013 0 1
7471: NOT
7472: IFFALSE 7505
// begin result := Join ( result , [ i , tmp ] ) ;
7474: LD_ADDR_VAR 0 5
7478: PUSH
7479: LD_VAR 0 5
7483: PPUSH
7484: LD_VAR 0 6
7488: PUSH
7489: LD_VAR 0 8
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL 39945 0 2
7502: ST_TO_ADDR
// continue ;
7503: GO 7426
// end ; if result [ result ] [ 2 ] <= tmp then
7505: LD_VAR 0 5
7509: PUSH
7510: LD_VAR 0 5
7514: ARRAY
7515: PUSH
7516: LD_INT 2
7518: ARRAY
7519: PUSH
7520: LD_VAR 0 8
7524: LESSEQUAL
7525: IFFALSE 7558
// result := Join ( result , [ i , tmp ] ) else
7527: LD_ADDR_VAR 0 5
7531: PUSH
7532: LD_VAR 0 5
7536: PPUSH
7537: LD_VAR 0 6
7541: PUSH
7542: LD_VAR 0 8
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PPUSH
7551: CALL 39945 0 2
7555: ST_TO_ADDR
7556: GO 7643
// begin for j := 1 to Count ( result ) do
7558: LD_ADDR_VAR 0 7
7562: PUSH
7563: DOUBLE
7564: LD_INT 1
7566: DEC
7567: ST_TO_ADDR
7568: LD_VAR 0 5
7572: PPUSH
7573: CALL 4013 0 1
7577: PUSH
7578: FOR_TO
7579: IFFALSE 7641
// begin if tmp < result [ j ] [ 2 ] then
7581: LD_VAR 0 8
7585: PUSH
7586: LD_VAR 0 5
7590: PUSH
7591: LD_VAR 0 7
7595: ARRAY
7596: PUSH
7597: LD_INT 2
7599: ARRAY
7600: LESS
7601: IFFALSE 7639
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7603: LD_ADDR_VAR 0 5
7607: PUSH
7608: LD_VAR 0 5
7612: PPUSH
7613: LD_VAR 0 7
7617: PPUSH
7618: LD_VAR 0 6
7622: PUSH
7623: LD_VAR 0 8
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: CALL_OW 2
7636: ST_TO_ADDR
// break ;
7637: GO 7641
// end ; end ;
7639: GO 7578
7641: POP
7642: POP
// end ; end ;
7643: GO 7426
7645: POP
7646: POP
// if result and not asc then
7647: LD_VAR 0 5
7651: IFFALSE 7660
7653: PUSH
7654: LD_VAR 0 3
7658: NOT
7659: AND
7660: IFFALSE 7677
// result := ReverseArray ( result ) ;
7662: LD_ADDR_VAR 0 5
7666: PUSH
7667: LD_VAR 0 5
7671: PPUSH
7672: CALL 35035 0 1
7676: ST_TO_ADDR
// tmp := [ ] ;
7677: LD_ADDR_VAR 0 8
7681: PUSH
7682: EMPTY
7683: ST_TO_ADDR
// if mode then
7684: LD_VAR 0 4
7688: IFFALSE 7752
// begin for i := 1 to result do
7690: LD_ADDR_VAR 0 6
7694: PUSH
7695: DOUBLE
7696: LD_INT 1
7698: DEC
7699: ST_TO_ADDR
7700: LD_VAR 0 5
7704: PUSH
7705: FOR_TO
7706: IFFALSE 7740
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7708: LD_ADDR_VAR 0 8
7712: PUSH
7713: LD_VAR 0 8
7717: PPUSH
7718: LD_VAR 0 5
7722: PUSH
7723: LD_VAR 0 6
7727: ARRAY
7728: PUSH
7729: LD_INT 1
7731: ARRAY
7732: PPUSH
7733: CALL 39945 0 2
7737: ST_TO_ADDR
7738: GO 7705
7740: POP
7741: POP
// result := tmp ;
7742: LD_ADDR_VAR 0 5
7746: PUSH
7747: LD_VAR 0 8
7751: ST_TO_ADDR
// end ; end ;
7752: LD_VAR 0 5
7756: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7757: LD_INT 0
7759: PPUSH
7760: PPUSH
7761: PPUSH
7762: PPUSH
// if not list then
7763: LD_VAR 0 3
7767: NOT
7768: IFFALSE 7772
// exit ;
7770: GO 8162
// result := [ ] ;
7772: LD_ADDR_VAR 0 6
7776: PUSH
7777: EMPTY
7778: ST_TO_ADDR
// for i in list do
7779: LD_ADDR_VAR 0 7
7783: PUSH
7784: LD_VAR 0 3
7788: PUSH
7789: FOR_IN
7790: IFFALSE 7992
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7792: LD_ADDR_VAR 0 9
7796: PUSH
7797: LD_VAR 0 7
7801: PPUSH
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_VAR 0 2
7811: PPUSH
7812: CALL_OW 297
7816: ST_TO_ADDR
// if not result then
7817: LD_VAR 0 6
7821: NOT
7822: IFFALSE 7848
// result := [ [ i , tmp ] ] else
7824: LD_ADDR_VAR 0 6
7828: PUSH
7829: LD_VAR 0 7
7833: PUSH
7834: LD_VAR 0 9
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: ST_TO_ADDR
7846: GO 7990
// begin if result [ result ] [ 2 ] <= tmp then
7848: LD_VAR 0 6
7852: PUSH
7853: LD_VAR 0 6
7857: ARRAY
7858: PUSH
7859: LD_INT 2
7861: ARRAY
7862: PUSH
7863: LD_VAR 0 9
7867: LESSEQUAL
7868: IFFALSE 7910
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7870: LD_ADDR_VAR 0 6
7874: PUSH
7875: LD_VAR 0 6
7879: PPUSH
7880: LD_VAR 0 6
7884: PUSH
7885: LD_INT 1
7887: PLUS
7888: PPUSH
7889: LD_VAR 0 7
7893: PUSH
7894: LD_VAR 0 9
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PPUSH
7903: CALL_OW 2
7907: ST_TO_ADDR
7908: GO 7990
// for j := 1 to result do
7910: LD_ADDR_VAR 0 8
7914: PUSH
7915: DOUBLE
7916: LD_INT 1
7918: DEC
7919: ST_TO_ADDR
7920: LD_VAR 0 6
7924: PUSH
7925: FOR_TO
7926: IFFALSE 7988
// begin if tmp < result [ j ] [ 2 ] then
7928: LD_VAR 0 9
7932: PUSH
7933: LD_VAR 0 6
7937: PUSH
7938: LD_VAR 0 8
7942: ARRAY
7943: PUSH
7944: LD_INT 2
7946: ARRAY
7947: LESS
7948: IFFALSE 7986
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7950: LD_ADDR_VAR 0 6
7954: PUSH
7955: LD_VAR 0 6
7959: PPUSH
7960: LD_VAR 0 8
7964: PPUSH
7965: LD_VAR 0 7
7969: PUSH
7970: LD_VAR 0 9
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 2
7983: ST_TO_ADDR
// break ;
7984: GO 7988
// end ; end ;
7986: GO 7925
7988: POP
7989: POP
// end ; end ;
7990: GO 7789
7992: POP
7993: POP
// if result and not asc then
7994: LD_VAR 0 6
7998: IFFALSE 8007
8000: PUSH
8001: LD_VAR 0 4
8005: NOT
8006: AND
8007: IFFALSE 8082
// begin tmp := result ;
8009: LD_ADDR_VAR 0 9
8013: PUSH
8014: LD_VAR 0 6
8018: ST_TO_ADDR
// for i = tmp downto 1 do
8019: LD_ADDR_VAR 0 7
8023: PUSH
8024: DOUBLE
8025: LD_VAR 0 9
8029: INC
8030: ST_TO_ADDR
8031: LD_INT 1
8033: PUSH
8034: FOR_DOWNTO
8035: IFFALSE 8080
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8037: LD_ADDR_VAR 0 6
8041: PUSH
8042: LD_VAR 0 6
8046: PPUSH
8047: LD_VAR 0 9
8051: PUSH
8052: LD_VAR 0 7
8056: MINUS
8057: PUSH
8058: LD_INT 1
8060: PLUS
8061: PPUSH
8062: LD_VAR 0 9
8066: PUSH
8067: LD_VAR 0 7
8071: ARRAY
8072: PPUSH
8073: CALL_OW 1
8077: ST_TO_ADDR
8078: GO 8034
8080: POP
8081: POP
// end ; tmp := [ ] ;
8082: LD_ADDR_VAR 0 9
8086: PUSH
8087: EMPTY
8088: ST_TO_ADDR
// if mode then
8089: LD_VAR 0 5
8093: IFFALSE 8162
// begin for i = 1 to result do
8095: LD_ADDR_VAR 0 7
8099: PUSH
8100: DOUBLE
8101: LD_INT 1
8103: DEC
8104: ST_TO_ADDR
8105: LD_VAR 0 6
8109: PUSH
8110: FOR_TO
8111: IFFALSE 8150
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8113: LD_ADDR_VAR 0 9
8117: PUSH
8118: LD_VAR 0 9
8122: PPUSH
8123: LD_VAR 0 7
8127: PPUSH
8128: LD_VAR 0 6
8132: PUSH
8133: LD_VAR 0 7
8137: ARRAY
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: CALL_OW 1
8147: ST_TO_ADDR
8148: GO 8110
8150: POP
8151: POP
// result := tmp ;
8152: LD_ADDR_VAR 0 6
8156: PUSH
8157: LD_VAR 0 9
8161: ST_TO_ADDR
// end ; end ;
8162: LD_VAR 0 6
8166: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8167: LD_INT 0
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8175: LD_ADDR_VAR 0 5
8179: PUSH
8180: LD_INT 0
8182: PUSH
8183: LD_INT 0
8185: PUSH
8186: LD_INT 0
8188: PUSH
8189: EMPTY
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: ST_TO_ADDR
// if not x or not y then
8197: LD_VAR 0 2
8201: NOT
8202: IFTRUE 8211
8204: PUSH
8205: LD_VAR 0 3
8209: NOT
8210: OR
8211: IFFALSE 8215
// exit ;
8213: GO 9871
// if not range then
8215: LD_VAR 0 4
8219: NOT
8220: IFFALSE 8230
// range := 10 ;
8222: LD_ADDR_VAR 0 4
8226: PUSH
8227: LD_INT 10
8229: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8230: LD_ADDR_VAR 0 8
8234: PUSH
8235: LD_INT 81
8237: PUSH
8238: LD_VAR 0 1
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 92
8249: PUSH
8250: LD_VAR 0 2
8254: PUSH
8255: LD_VAR 0 3
8259: PUSH
8260: LD_VAR 0 4
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 3
8273: PUSH
8274: LD_INT 21
8276: PUSH
8277: LD_INT 3
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PPUSH
8293: CALL_OW 69
8297: ST_TO_ADDR
// if not tmp then
8298: LD_VAR 0 8
8302: NOT
8303: IFFALSE 8307
// exit ;
8305: GO 9871
// for i in tmp do
8307: LD_ADDR_VAR 0 6
8311: PUSH
8312: LD_VAR 0 8
8316: PUSH
8317: FOR_IN
8318: IFFALSE 9846
// begin points := [ 0 , 0 , 0 ] ;
8320: LD_ADDR_VAR 0 9
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: LD_INT 0
8330: PUSH
8331: LD_INT 0
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: ST_TO_ADDR
// bpoints := 1 ;
8339: LD_ADDR_VAR 0 10
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8347: LD_VAR 0 6
8351: PPUSH
8352: CALL_OW 247
8356: PUSH
8357: LD_INT 1
8359: DOUBLE
8360: EQUAL
8361: IFTRUE 8365
8363: GO 8947
8365: POP
// begin if GetClass ( i ) = 1 then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 257
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8400
// points := [ 10 , 5 , 3 ] ;
8381: LD_ADDR_VAR 0 9
8385: PUSH
8386: LD_INT 10
8388: PUSH
8389: LD_INT 5
8391: PUSH
8392: LD_INT 3
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8400: LD_VAR 0 6
8404: PPUSH
8405: CALL_OW 257
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: LD_INT 3
8415: PUSH
8416: LD_INT 4
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: LIST
8423: IN
8424: IFFALSE 8445
// points := [ 3 , 2 , 1 ] ;
8426: LD_ADDR_VAR 0 9
8430: PUSH
8431: LD_INT 3
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8445: LD_VAR 0 6
8449: PPUSH
8450: CALL_OW 257
8454: PUSH
8455: LD_INT 5
8457: EQUAL
8458: IFFALSE 8479
// points := [ 130 , 5 , 2 ] ;
8460: LD_ADDR_VAR 0 9
8464: PUSH
8465: LD_INT 130
8467: PUSH
8468: LD_INT 5
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8479: LD_VAR 0 6
8483: PPUSH
8484: CALL_OW 257
8488: PUSH
8489: LD_INT 8
8491: EQUAL
8492: IFFALSE 8513
// points := [ 35 , 35 , 30 ] ;
8494: LD_ADDR_VAR 0 9
8498: PUSH
8499: LD_INT 35
8501: PUSH
8502: LD_INT 35
8504: PUSH
8505: LD_INT 30
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8513: LD_VAR 0 6
8517: PPUSH
8518: CALL_OW 257
8522: PUSH
8523: LD_INT 9
8525: EQUAL
8526: IFFALSE 8547
// points := [ 20 , 55 , 40 ] ;
8528: LD_ADDR_VAR 0 9
8532: PUSH
8533: LD_INT 20
8535: PUSH
8536: LD_INT 55
8538: PUSH
8539: LD_INT 40
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8547: LD_VAR 0 6
8551: PPUSH
8552: CALL_OW 257
8556: PUSH
8557: LD_INT 12
8559: PUSH
8560: LD_INT 16
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: IN
8567: IFFALSE 8588
// points := [ 5 , 3 , 2 ] ;
8569: LD_ADDR_VAR 0 9
8573: PUSH
8574: LD_INT 5
8576: PUSH
8577: LD_INT 3
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8588: LD_VAR 0 6
8592: PPUSH
8593: CALL_OW 257
8597: PUSH
8598: LD_INT 17
8600: EQUAL
8601: IFFALSE 8622
// points := [ 100 , 50 , 75 ] ;
8603: LD_ADDR_VAR 0 9
8607: PUSH
8608: LD_INT 100
8610: PUSH
8611: LD_INT 50
8613: PUSH
8614: LD_INT 75
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8622: LD_VAR 0 6
8626: PPUSH
8627: CALL_OW 257
8631: PUSH
8632: LD_INT 15
8634: EQUAL
8635: IFFALSE 8656
// points := [ 10 , 5 , 3 ] ;
8637: LD_ADDR_VAR 0 9
8641: PUSH
8642: LD_INT 10
8644: PUSH
8645: LD_INT 5
8647: PUSH
8648: LD_INT 3
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8656: LD_VAR 0 6
8660: PPUSH
8661: CALL_OW 257
8665: PUSH
8666: LD_INT 14
8668: EQUAL
8669: IFFALSE 8690
// points := [ 10 , 0 , 0 ] ;
8671: LD_ADDR_VAR 0 9
8675: PUSH
8676: LD_INT 10
8678: PUSH
8679: LD_INT 0
8681: PUSH
8682: LD_INT 0
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8690: LD_VAR 0 6
8694: PPUSH
8695: CALL_OW 257
8699: PUSH
8700: LD_INT 11
8702: EQUAL
8703: IFFALSE 8724
// points := [ 30 , 10 , 5 ] ;
8705: LD_ADDR_VAR 0 9
8709: PUSH
8710: LD_INT 30
8712: PUSH
8713: LD_INT 10
8715: PUSH
8716: LD_INT 5
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8724: LD_VAR 0 1
8728: PPUSH
8729: LD_INT 5
8731: PPUSH
8732: CALL_OW 321
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8757
// bpoints := bpoints * 1.8 ;
8742: LD_ADDR_VAR 0 10
8746: PUSH
8747: LD_VAR 0 10
8751: PUSH
8752: LD_REAL  1.80000000000000E+0000
8755: MUL
8756: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8757: LD_VAR 0 6
8761: PPUSH
8762: CALL_OW 257
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: LD_INT 2
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: LD_INT 4
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: IN
8785: IFFALSE 8805
8787: PUSH
8788: LD_VAR 0 1
8792: PPUSH
8793: LD_INT 51
8795: PPUSH
8796: CALL_OW 321
8800: PUSH
8801: LD_INT 2
8803: EQUAL
8804: AND
8805: IFFALSE 8822
// bpoints := bpoints * 1.2 ;
8807: LD_ADDR_VAR 0 10
8811: PUSH
8812: LD_VAR 0 10
8816: PUSH
8817: LD_REAL  1.20000000000000E+0000
8820: MUL
8821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8822: LD_VAR 0 6
8826: PPUSH
8827: CALL_OW 257
8831: PUSH
8832: LD_INT 5
8834: PUSH
8835: LD_INT 7
8837: PUSH
8838: LD_INT 9
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: IN
8846: IFFALSE 8866
8848: PUSH
8849: LD_VAR 0 1
8853: PPUSH
8854: LD_INT 52
8856: PPUSH
8857: CALL_OW 321
8861: PUSH
8862: LD_INT 2
8864: EQUAL
8865: AND
8866: IFFALSE 8883
// bpoints := bpoints * 1.5 ;
8868: LD_ADDR_VAR 0 10
8872: PUSH
8873: LD_VAR 0 10
8877: PUSH
8878: LD_REAL  1.50000000000000E+0000
8881: MUL
8882: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8883: LD_VAR 0 1
8887: PPUSH
8888: LD_INT 66
8890: PPUSH
8891: CALL_OW 321
8895: PUSH
8896: LD_INT 2
8898: EQUAL
8899: IFFALSE 8916
// bpoints := bpoints * 1.1 ;
8901: LD_ADDR_VAR 0 10
8905: PUSH
8906: LD_VAR 0 10
8910: PUSH
8911: LD_REAL  1.10000000000000E+0000
8914: MUL
8915: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8916: LD_ADDR_VAR 0 10
8920: PUSH
8921: LD_VAR 0 10
8925: PUSH
8926: LD_VAR 0 6
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 259
8938: PUSH
8939: LD_REAL  1.15000000000000E+0000
8942: MUL
8943: MUL
8944: ST_TO_ADDR
// end ; unit_vehicle :
8945: GO 9775
8947: LD_INT 2
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 9763
8955: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8956: LD_VAR 0 6
8960: PPUSH
8961: CALL_OW 264
8965: PUSH
8966: LD_INT 2
8968: PUSH
8969: LD_INT 42
8971: PUSH
8972: LD_INT 24
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: IN
8980: IFFALSE 9001
// points := [ 25 , 5 , 3 ] ;
8982: LD_ADDR_VAR 0 9
8986: PUSH
8987: LD_INT 25
8989: PUSH
8990: LD_INT 5
8992: PUSH
8993: LD_INT 3
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9001: LD_VAR 0 6
9005: PPUSH
9006: CALL_OW 264
9010: PUSH
9011: LD_INT 4
9013: PUSH
9014: LD_INT 43
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: IN
9025: IFFALSE 9046
// points := [ 40 , 15 , 5 ] ;
9027: LD_ADDR_VAR 0 9
9031: PUSH
9032: LD_INT 40
9034: PUSH
9035: LD_INT 15
9037: PUSH
9038: LD_INT 5
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9046: LD_VAR 0 6
9050: PPUSH
9051: CALL_OW 264
9055: PUSH
9056: LD_INT 3
9058: PUSH
9059: LD_INT 23
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: IN
9066: IFFALSE 9087
// points := [ 7 , 25 , 8 ] ;
9068: LD_ADDR_VAR 0 9
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: LD_INT 25
9078: PUSH
9079: LD_INT 8
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9087: LD_VAR 0 6
9091: PPUSH
9092: CALL_OW 264
9096: PUSH
9097: LD_INT 5
9099: PUSH
9100: LD_INT 27
9102: PUSH
9103: LD_INT 44
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: IN
9111: IFFALSE 9132
// points := [ 14 , 50 , 16 ] ;
9113: LD_ADDR_VAR 0 9
9117: PUSH
9118: LD_INT 14
9120: PUSH
9121: LD_INT 50
9123: PUSH
9124: LD_INT 16
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9132: LD_VAR 0 6
9136: PPUSH
9137: CALL_OW 264
9141: PUSH
9142: LD_INT 6
9144: PUSH
9145: LD_INT 46
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: IN
9152: IFFALSE 9173
// points := [ 32 , 120 , 70 ] ;
9154: LD_ADDR_VAR 0 9
9158: PUSH
9159: LD_INT 32
9161: PUSH
9162: LD_INT 120
9164: PUSH
9165: LD_INT 70
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: LIST
9172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9173: LD_VAR 0 6
9177: PPUSH
9178: CALL_OW 264
9182: PUSH
9183: LD_INT 7
9185: PUSH
9186: LD_INT 28
9188: PUSH
9189: LD_INT 45
9191: PUSH
9192: LD_INT 92
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: IN
9201: IFFALSE 9222
// points := [ 35 , 20 , 45 ] ;
9203: LD_ADDR_VAR 0 9
9207: PUSH
9208: LD_INT 35
9210: PUSH
9211: LD_INT 20
9213: PUSH
9214: LD_INT 45
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9222: LD_VAR 0 6
9226: PPUSH
9227: CALL_OW 264
9231: PUSH
9232: LD_INT 47
9234: PUSH
9235: EMPTY
9236: LIST
9237: IN
9238: IFFALSE 9259
// points := [ 67 , 45 , 75 ] ;
9240: LD_ADDR_VAR 0 9
9244: PUSH
9245: LD_INT 67
9247: PUSH
9248: LD_INT 45
9250: PUSH
9251: LD_INT 75
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: LIST
9258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9259: LD_VAR 0 6
9263: PPUSH
9264: CALL_OW 264
9268: PUSH
9269: LD_INT 26
9271: PUSH
9272: EMPTY
9273: LIST
9274: IN
9275: IFFALSE 9296
// points := [ 120 , 30 , 80 ] ;
9277: LD_ADDR_VAR 0 9
9281: PUSH
9282: LD_INT 120
9284: PUSH
9285: LD_INT 30
9287: PUSH
9288: LD_INT 80
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9296: LD_VAR 0 6
9300: PPUSH
9301: CALL_OW 264
9305: PUSH
9306: LD_INT 22
9308: PUSH
9309: EMPTY
9310: LIST
9311: IN
9312: IFFALSE 9333
// points := [ 40 , 1 , 1 ] ;
9314: LD_ADDR_VAR 0 9
9318: PUSH
9319: LD_INT 40
9321: PUSH
9322: LD_INT 1
9324: PUSH
9325: LD_INT 1
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9333: LD_VAR 0 6
9337: PPUSH
9338: CALL_OW 264
9342: PUSH
9343: LD_INT 29
9345: PUSH
9346: EMPTY
9347: LIST
9348: IN
9349: IFFALSE 9370
// points := [ 70 , 200 , 400 ] ;
9351: LD_ADDR_VAR 0 9
9355: PUSH
9356: LD_INT 70
9358: PUSH
9359: LD_INT 200
9361: PUSH
9362: LD_INT 400
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9370: LD_VAR 0 6
9374: PPUSH
9375: CALL_OW 264
9379: PUSH
9380: LD_INT 14
9382: PUSH
9383: LD_INT 53
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: IN
9390: IFFALSE 9411
// points := [ 40 , 10 , 20 ] ;
9392: LD_ADDR_VAR 0 9
9396: PUSH
9397: LD_INT 40
9399: PUSH
9400: LD_INT 10
9402: PUSH
9403: LD_INT 20
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9411: LD_VAR 0 6
9415: PPUSH
9416: CALL_OW 264
9420: PUSH
9421: LD_INT 9
9423: PUSH
9424: EMPTY
9425: LIST
9426: IN
9427: IFFALSE 9448
// points := [ 5 , 70 , 20 ] ;
9429: LD_ADDR_VAR 0 9
9433: PUSH
9434: LD_INT 5
9436: PUSH
9437: LD_INT 70
9439: PUSH
9440: LD_INT 20
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9448: LD_VAR 0 6
9452: PPUSH
9453: CALL_OW 264
9457: PUSH
9458: LD_INT 10
9460: PUSH
9461: EMPTY
9462: LIST
9463: IN
9464: IFFALSE 9485
// points := [ 35 , 110 , 70 ] ;
9466: LD_ADDR_VAR 0 9
9470: PUSH
9471: LD_INT 35
9473: PUSH
9474: LD_INT 110
9476: PUSH
9477: LD_INT 70
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9485: LD_VAR 0 6
9489: PPUSH
9490: CALL_OW 265
9494: PUSH
9495: LD_INT 25
9497: EQUAL
9498: IFFALSE 9519
// points := [ 80 , 65 , 100 ] ;
9500: LD_ADDR_VAR 0 9
9504: PUSH
9505: LD_INT 80
9507: PUSH
9508: LD_INT 65
9510: PUSH
9511: LD_INT 100
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9519: LD_VAR 0 6
9523: PPUSH
9524: CALL_OW 263
9528: PUSH
9529: LD_INT 1
9531: EQUAL
9532: IFFALSE 9567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9534: LD_ADDR_VAR 0 10
9538: PUSH
9539: LD_VAR 0 10
9543: PUSH
9544: LD_VAR 0 6
9548: PPUSH
9549: CALL_OW 311
9553: PPUSH
9554: LD_INT 3
9556: PPUSH
9557: CALL_OW 259
9561: PUSH
9562: LD_INT 4
9564: MUL
9565: MUL
9566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9567: LD_VAR 0 6
9571: PPUSH
9572: CALL_OW 263
9576: PUSH
9577: LD_INT 2
9579: EQUAL
9580: IFFALSE 9631
// begin j := IsControledBy ( i ) ;
9582: LD_ADDR_VAR 0 7
9586: PUSH
9587: LD_VAR 0 6
9591: PPUSH
9592: CALL_OW 312
9596: ST_TO_ADDR
// if j then
9597: LD_VAR 0 7
9601: IFFALSE 9631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9603: LD_ADDR_VAR 0 10
9607: PUSH
9608: LD_VAR 0 10
9612: PUSH
9613: LD_VAR 0 7
9617: PPUSH
9618: LD_INT 3
9620: PPUSH
9621: CALL_OW 259
9625: PUSH
9626: LD_INT 3
9628: MUL
9629: MUL
9630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9631: LD_VAR 0 6
9635: PPUSH
9636: CALL_OW 264
9640: PUSH
9641: LD_INT 5
9643: PUSH
9644: LD_INT 6
9646: PUSH
9647: LD_INT 46
9649: PUSH
9650: LD_INT 44
9652: PUSH
9653: LD_INT 47
9655: PUSH
9656: LD_INT 45
9658: PUSH
9659: LD_INT 28
9661: PUSH
9662: LD_INT 7
9664: PUSH
9665: LD_INT 27
9667: PUSH
9668: LD_INT 29
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: IN
9683: IFFALSE 9703
9685: PUSH
9686: LD_VAR 0 1
9690: PPUSH
9691: LD_INT 52
9693: PPUSH
9694: CALL_OW 321
9698: PUSH
9699: LD_INT 2
9701: EQUAL
9702: AND
9703: IFFALSE 9720
// bpoints := bpoints * 1.2 ;
9705: LD_ADDR_VAR 0 10
9709: PUSH
9710: LD_VAR 0 10
9714: PUSH
9715: LD_REAL  1.20000000000000E+0000
9718: MUL
9719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9720: LD_VAR 0 6
9724: PPUSH
9725: CALL_OW 264
9729: PUSH
9730: LD_INT 6
9732: PUSH
9733: LD_INT 46
9735: PUSH
9736: LD_INT 47
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: IN
9744: IFFALSE 9761
// bpoints := bpoints * 1.2 ;
9746: LD_ADDR_VAR 0 10
9750: PUSH
9751: LD_VAR 0 10
9755: PUSH
9756: LD_REAL  1.20000000000000E+0000
9759: MUL
9760: ST_TO_ADDR
// end ; unit_building :
9761: GO 9775
9763: LD_INT 3
9765: DOUBLE
9766: EQUAL
9767: IFTRUE 9771
9769: GO 9774
9771: POP
// ; end ;
9772: GO 9775
9774: POP
// for j = 1 to 3 do
9775: LD_ADDR_VAR 0 7
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 3
9787: PUSH
9788: FOR_TO
9789: IFFALSE 9842
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9791: LD_ADDR_VAR 0 5
9795: PUSH
9796: LD_VAR 0 5
9800: PPUSH
9801: LD_VAR 0 7
9805: PPUSH
9806: LD_VAR 0 5
9810: PUSH
9811: LD_VAR 0 7
9815: ARRAY
9816: PUSH
9817: LD_VAR 0 9
9821: PUSH
9822: LD_VAR 0 7
9826: ARRAY
9827: PUSH
9828: LD_VAR 0 10
9832: MUL
9833: PLUS
9834: PPUSH
9835: CALL_OW 1
9839: ST_TO_ADDR
9840: GO 9788
9842: POP
9843: POP
// end ;
9844: GO 8317
9846: POP
9847: POP
// result := Replace ( result , 4 , tmp ) ;
9848: LD_ADDR_VAR 0 5
9852: PUSH
9853: LD_VAR 0 5
9857: PPUSH
9858: LD_INT 4
9860: PPUSH
9861: LD_VAR 0 8
9865: PPUSH
9866: CALL_OW 1
9870: ST_TO_ADDR
// end ;
9871: LD_VAR 0 5
9875: RET
// export function DangerAtRange ( unit , range ) ; begin
9876: LD_INT 0
9878: PPUSH
// if not unit then
9879: LD_VAR 0 1
9883: NOT
9884: IFFALSE 9888
// exit ;
9886: GO 9933
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9888: LD_ADDR_VAR 0 3
9892: PUSH
9893: LD_VAR 0 1
9897: PPUSH
9898: CALL_OW 255
9902: PPUSH
9903: LD_VAR 0 1
9907: PPUSH
9908: CALL_OW 250
9912: PPUSH
9913: LD_VAR 0 1
9917: PPUSH
9918: CALL_OW 251
9922: PPUSH
9923: LD_VAR 0 2
9927: PPUSH
9928: CALL 8167 0 4
9932: ST_TO_ADDR
// end ;
9933: LD_VAR 0 3
9937: RET
// export function DangerInArea ( side , area ) ; begin
9938: LD_INT 0
9940: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9941: LD_ADDR_VAR 0 3
9945: PUSH
9946: LD_VAR 0 2
9950: PPUSH
9951: LD_INT 81
9953: PUSH
9954: LD_VAR 0 1
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PPUSH
9963: CALL_OW 70
9967: ST_TO_ADDR
// end ;
9968: LD_VAR 0 3
9972: RET
// export function IsExtension ( b ) ; begin
9973: LD_INT 0
9975: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_VAR 0 1
9985: PUSH
9986: LD_INT 23
9988: PUSH
9989: LD_INT 20
9991: PUSH
9992: LD_INT 22
9994: PUSH
9995: LD_INT 17
9997: PUSH
9998: LD_INT 24
10000: PUSH
10001: LD_INT 21
10003: PUSH
10004: LD_INT 19
10006: PUSH
10007: LD_INT 16
10009: PUSH
10010: LD_INT 25
10012: PUSH
10013: LD_INT 18
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: IN
10028: ST_TO_ADDR
// end ;
10029: LD_VAR 0 2
10033: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10034: LD_INT 0
10036: PPUSH
10037: PPUSH
10038: PPUSH
// result := [ ] ;
10039: LD_ADDR_VAR 0 4
10043: PUSH
10044: EMPTY
10045: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10046: LD_ADDR_VAR 0 5
10050: PUSH
10051: LD_VAR 0 2
10055: PPUSH
10056: LD_INT 21
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PPUSH
10066: CALL_OW 70
10070: ST_TO_ADDR
// if not tmp then
10071: LD_VAR 0 5
10075: NOT
10076: IFFALSE 10080
// exit ;
10078: GO 10144
// if checkLink then
10080: LD_VAR 0 3
10084: IFFALSE 10134
// begin for i in tmp do
10086: LD_ADDR_VAR 0 6
10090: PUSH
10091: LD_VAR 0 5
10095: PUSH
10096: FOR_IN
10097: IFFALSE 10132
// if GetBase ( i ) <> base then
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL_OW 274
10108: PUSH
10109: LD_VAR 0 1
10113: NONEQUAL
10114: IFFALSE 10130
// ComLinkToBase ( base , i ) ;
10116: LD_VAR 0 1
10120: PPUSH
10121: LD_VAR 0 6
10125: PPUSH
10126: CALL_OW 169
10130: GO 10096
10132: POP
10133: POP
// end ; result := tmp ;
10134: LD_ADDR_VAR 0 4
10138: PUSH
10139: LD_VAR 0 5
10143: ST_TO_ADDR
// end ;
10144: LD_VAR 0 4
10148: RET
// export function ComComplete ( units , b ) ; var i ; begin
10149: LD_INT 0
10151: PPUSH
10152: PPUSH
// if not units then
10153: LD_VAR 0 1
10157: NOT
10158: IFFALSE 10162
// exit ;
10160: GO 10252
// for i in units do
10162: LD_ADDR_VAR 0 4
10166: PUSH
10167: LD_VAR 0 1
10171: PUSH
10172: FOR_IN
10173: IFFALSE 10250
// if BuildingStatus ( b ) = bs_build then
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 461
10184: PUSH
10185: LD_INT 1
10187: EQUAL
10188: IFFALSE 10248
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10190: LD_VAR 0 4
10194: PPUSH
10195: LD_STRING h
10197: PUSH
10198: LD_VAR 0 2
10202: PPUSH
10203: CALL_OW 250
10207: PUSH
10208: LD_VAR 0 2
10212: PPUSH
10213: CALL_OW 251
10217: PUSH
10218: LD_VAR 0 2
10222: PUSH
10223: LD_INT 0
10225: PUSH
10226: LD_INT 0
10228: PUSH
10229: LD_INT 0
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: PPUSH
10244: CALL_OW 446
10248: GO 10172
10250: POP
10251: POP
// end ;
10252: LD_VAR 0 3
10256: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10257: LD_INT 0
10259: PPUSH
10260: PPUSH
10261: PPUSH
10262: PPUSH
10263: PPUSH
10264: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10265: LD_VAR 0 1
10269: NOT
10270: IFTRUE 10287
10272: PUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL_OW 263
10282: PUSH
10283: LD_INT 2
10285: NONEQUAL
10286: OR
10287: IFFALSE 10291
// exit ;
10289: GO 10607
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10291: LD_ADDR_VAR 0 6
10295: PUSH
10296: LD_INT 22
10298: PUSH
10299: LD_VAR 0 1
10303: PPUSH
10304: CALL_OW 255
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: LD_INT 30
10318: PUSH
10319: LD_INT 36
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 34
10328: PUSH
10329: LD_INT 31
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: ST_TO_ADDR
// if not tmp then
10350: LD_VAR 0 6
10354: NOT
10355: IFFALSE 10359
// exit ;
10357: GO 10607
// result := [ ] ;
10359: LD_ADDR_VAR 0 2
10363: PUSH
10364: EMPTY
10365: ST_TO_ADDR
// for i in tmp do
10366: LD_ADDR_VAR 0 3
10370: PUSH
10371: LD_VAR 0 6
10375: PUSH
10376: FOR_IN
10377: IFFALSE 10448
// begin t := UnitsInside ( i ) ;
10379: LD_ADDR_VAR 0 4
10383: PUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: CALL_OW 313
10393: ST_TO_ADDR
// if t then
10394: LD_VAR 0 4
10398: IFFALSE 10446
// for j in t do
10400: LD_ADDR_VAR 0 7
10404: PUSH
10405: LD_VAR 0 4
10409: PUSH
10410: FOR_IN
10411: IFFALSE 10444
// result := Replace ( result , result + 1 , j ) ;
10413: LD_ADDR_VAR 0 2
10417: PUSH
10418: LD_VAR 0 2
10422: PPUSH
10423: LD_VAR 0 2
10427: PUSH
10428: LD_INT 1
10430: PLUS
10431: PPUSH
10432: LD_VAR 0 7
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
10442: GO 10410
10444: POP
10445: POP
// end ;
10446: GO 10376
10448: POP
10449: POP
// if not result then
10450: LD_VAR 0 2
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 10607
// mech := result [ 1 ] ;
10459: LD_ADDR_VAR 0 5
10463: PUSH
10464: LD_VAR 0 2
10468: PUSH
10469: LD_INT 1
10471: ARRAY
10472: ST_TO_ADDR
// if result > 1 then
10473: LD_VAR 0 2
10477: PUSH
10478: LD_INT 1
10480: GREATER
10481: IFFALSE 10593
// begin for i = 2 to result do
10483: LD_ADDR_VAR 0 3
10487: PUSH
10488: DOUBLE
10489: LD_INT 2
10491: DEC
10492: ST_TO_ADDR
10493: LD_VAR 0 2
10497: PUSH
10498: FOR_TO
10499: IFFALSE 10591
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10501: LD_ADDR_VAR 0 4
10505: PUSH
10506: LD_VAR 0 2
10510: PUSH
10511: LD_VAR 0 3
10515: ARRAY
10516: PPUSH
10517: LD_INT 3
10519: PPUSH
10520: CALL_OW 259
10524: PUSH
10525: LD_VAR 0 2
10529: PUSH
10530: LD_VAR 0 3
10534: ARRAY
10535: PPUSH
10536: CALL_OW 432
10540: MINUS
10541: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10542: LD_VAR 0 4
10546: PUSH
10547: LD_VAR 0 5
10551: PPUSH
10552: LD_INT 3
10554: PPUSH
10555: CALL_OW 259
10559: PUSH
10560: LD_VAR 0 5
10564: PPUSH
10565: CALL_OW 432
10569: MINUS
10570: GREATEREQUAL
10571: IFFALSE 10589
// mech := result [ i ] ;
10573: LD_ADDR_VAR 0 5
10577: PUSH
10578: LD_VAR 0 2
10582: PUSH
10583: LD_VAR 0 3
10587: ARRAY
10588: ST_TO_ADDR
// end ;
10589: GO 10498
10591: POP
10592: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_VAR 0 5
10602: PPUSH
10603: CALL_OW 135
// end ;
10607: LD_VAR 0 2
10611: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10612: LD_INT 0
10614: PPUSH
10615: PPUSH
10616: PPUSH
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
10622: PPUSH
10623: PPUSH
10624: PPUSH
10625: PPUSH
10626: PPUSH
// result := [ ] ;
10627: LD_ADDR_VAR 0 7
10631: PUSH
10632: EMPTY
10633: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10634: LD_VAR 0 1
10638: PPUSH
10639: CALL_OW 266
10643: PUSH
10644: LD_INT 0
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: IN
10654: NOT
10655: IFFALSE 10659
// exit ;
10657: GO 12299
// if name then
10659: LD_VAR 0 3
10663: IFFALSE 10679
// SetBName ( base_dep , name ) ;
10665: LD_VAR 0 1
10669: PPUSH
10670: LD_VAR 0 3
10674: PPUSH
10675: CALL_OW 500
// base := GetBase ( base_dep ) ;
10679: LD_ADDR_VAR 0 15
10683: PUSH
10684: LD_VAR 0 1
10688: PPUSH
10689: CALL_OW 274
10693: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10694: LD_ADDR_VAR 0 16
10698: PUSH
10699: LD_VAR 0 1
10703: PPUSH
10704: CALL_OW 255
10708: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10709: LD_ADDR_VAR 0 17
10713: PUSH
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 248
10723: ST_TO_ADDR
// if sources then
10724: LD_VAR 0 5
10728: IFFALSE 10775
// for i = 1 to 3 do
10730: LD_ADDR_VAR 0 8
10734: PUSH
10735: DOUBLE
10736: LD_INT 1
10738: DEC
10739: ST_TO_ADDR
10740: LD_INT 3
10742: PUSH
10743: FOR_TO
10744: IFFALSE 10773
// AddResourceType ( base , i , sources [ i ] ) ;
10746: LD_VAR 0 15
10750: PPUSH
10751: LD_VAR 0 8
10755: PPUSH
10756: LD_VAR 0 5
10760: PUSH
10761: LD_VAR 0 8
10765: ARRAY
10766: PPUSH
10767: CALL_OW 276
10771: GO 10743
10773: POP
10774: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10775: LD_ADDR_VAR 0 18
10779: PUSH
10780: LD_VAR 0 15
10784: PPUSH
10785: LD_VAR 0 2
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: CALL 10034 0 3
10797: ST_TO_ADDR
// InitHc ;
10798: CALL_OW 19
// InitUc ;
10802: CALL_OW 18
// uc_side := side ;
10806: LD_ADDR_OWVAR 20
10810: PUSH
10811: LD_VAR 0 16
10815: ST_TO_ADDR
// uc_nation := nation ;
10816: LD_ADDR_OWVAR 21
10820: PUSH
10821: LD_VAR 0 17
10825: ST_TO_ADDR
// if buildings then
10826: LD_VAR 0 18
10830: IFFALSE 12158
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10832: LD_ADDR_VAR 0 19
10836: PUSH
10837: LD_VAR 0 18
10841: PPUSH
10842: LD_INT 2
10844: PUSH
10845: LD_INT 30
10847: PUSH
10848: LD_INT 29
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 30
10857: PUSH
10858: LD_INT 30
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: PPUSH
10870: CALL_OW 72
10874: ST_TO_ADDR
// if tmp then
10875: LD_VAR 0 19
10879: IFFALSE 10927
// for i in tmp do
10881: LD_ADDR_VAR 0 8
10885: PUSH
10886: LD_VAR 0 19
10890: PUSH
10891: FOR_IN
10892: IFFALSE 10925
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10894: LD_VAR 0 8
10898: PPUSH
10899: CALL_OW 250
10903: PPUSH
10904: LD_VAR 0 8
10908: PPUSH
10909: CALL_OW 251
10913: PPUSH
10914: LD_VAR 0 16
10918: PPUSH
10919: CALL_OW 441
10923: GO 10891
10925: POP
10926: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10927: LD_VAR 0 18
10931: PPUSH
10932: LD_INT 2
10934: PUSH
10935: LD_INT 30
10937: PUSH
10938: LD_INT 32
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 30
10947: PUSH
10948: LD_INT 33
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: PPUSH
10960: CALL_OW 72
10964: IFFALSE 11052
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10966: LD_ADDR_VAR 0 8
10970: PUSH
10971: LD_VAR 0 18
10975: PPUSH
10976: LD_INT 2
10978: PUSH
10979: LD_INT 30
10981: PUSH
10982: LD_INT 32
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 30
10991: PUSH
10992: LD_INT 33
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: PPUSH
11004: CALL_OW 72
11008: PUSH
11009: FOR_IN
11010: IFFALSE 11050
// begin if not GetBWeapon ( i ) then
11012: LD_VAR 0 8
11016: PPUSH
11017: CALL_OW 269
11021: NOT
11022: IFFALSE 11048
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11024: LD_VAR 0 8
11028: PPUSH
11029: LD_VAR 0 8
11033: PPUSH
11034: LD_VAR 0 2
11038: PPUSH
11039: CALL 12304 0 2
11043: PPUSH
11044: CALL_OW 431
// end ;
11048: GO 11009
11050: POP
11051: POP
// end ; for i = 1 to personel do
11052: LD_ADDR_VAR 0 8
11056: PUSH
11057: DOUBLE
11058: LD_INT 1
11060: DEC
11061: ST_TO_ADDR
11062: LD_VAR 0 6
11066: PUSH
11067: FOR_TO
11068: IFFALSE 12138
// begin if i > 4 then
11070: LD_VAR 0 8
11074: PUSH
11075: LD_INT 4
11077: GREATER
11078: IFFALSE 11082
// break ;
11080: GO 12138
// case i of 1 :
11082: LD_VAR 0 8
11086: PUSH
11087: LD_INT 1
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11175
11095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11096: LD_ADDR_VAR 0 12
11100: PUSH
11101: LD_VAR 0 18
11105: PPUSH
11106: LD_INT 22
11108: PUSH
11109: LD_VAR 0 16
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 58
11120: PUSH
11121: EMPTY
11122: LIST
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 32
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 4
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 30
11149: PUSH
11150: LD_INT 5
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 72
11172: ST_TO_ADDR
11173: GO 11397
11175: LD_INT 2
11177: DOUBLE
11178: EQUAL
11179: IFTRUE 11183
11181: GO 11245
11183: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11184: LD_ADDR_VAR 0 12
11188: PUSH
11189: LD_VAR 0 18
11193: PPUSH
11194: LD_INT 22
11196: PUSH
11197: LD_VAR 0 16
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 2
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 0
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 30
11221: PUSH
11222: LD_INT 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 72
11242: ST_TO_ADDR
11243: GO 11397
11245: LD_INT 3
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11315
11253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11254: LD_ADDR_VAR 0 12
11258: PUSH
11259: LD_VAR 0 18
11263: PPUSH
11264: LD_INT 22
11266: PUSH
11267: LD_VAR 0 16
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: LD_INT 30
11281: PUSH
11282: LD_INT 2
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 30
11291: PUSH
11292: LD_INT 3
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 72
11312: ST_TO_ADDR
11313: GO 11397
11315: LD_INT 4
11317: DOUBLE
11318: EQUAL
11319: IFTRUE 11323
11321: GO 11396
11323: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11324: LD_ADDR_VAR 0 12
11328: PUSH
11329: LD_VAR 0 18
11333: PPUSH
11334: LD_INT 22
11336: PUSH
11337: LD_VAR 0 16
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 2
11348: PUSH
11349: LD_INT 30
11351: PUSH
11352: LD_INT 6
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 30
11361: PUSH
11362: LD_INT 7
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 30
11371: PUSH
11372: LD_INT 8
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 72
11393: ST_TO_ADDR
11394: GO 11397
11396: POP
// if i = 1 then
11397: LD_VAR 0 8
11401: PUSH
11402: LD_INT 1
11404: EQUAL
11405: IFFALSE 11516
// begin tmp := [ ] ;
11407: LD_ADDR_VAR 0 19
11411: PUSH
11412: EMPTY
11413: ST_TO_ADDR
// for j in f do
11414: LD_ADDR_VAR 0 9
11418: PUSH
11419: LD_VAR 0 12
11423: PUSH
11424: FOR_IN
11425: IFFALSE 11498
// if GetBType ( j ) = b_bunker then
11427: LD_VAR 0 9
11431: PPUSH
11432: CALL_OW 266
11436: PUSH
11437: LD_INT 32
11439: EQUAL
11440: IFFALSE 11467
// tmp := Insert ( tmp , 1 , j ) else
11442: LD_ADDR_VAR 0 19
11446: PUSH
11447: LD_VAR 0 19
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: LD_VAR 0 9
11459: PPUSH
11460: CALL_OW 2
11464: ST_TO_ADDR
11465: GO 11496
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11467: LD_ADDR_VAR 0 19
11471: PUSH
11472: LD_VAR 0 19
11476: PPUSH
11477: LD_VAR 0 19
11481: PUSH
11482: LD_INT 1
11484: PLUS
11485: PPUSH
11486: LD_VAR 0 9
11490: PPUSH
11491: CALL_OW 2
11495: ST_TO_ADDR
11496: GO 11424
11498: POP
11499: POP
// if tmp then
11500: LD_VAR 0 19
11504: IFFALSE 11516
// f := tmp ;
11506: LD_ADDR_VAR 0 12
11510: PUSH
11511: LD_VAR 0 19
11515: ST_TO_ADDR
// end ; x := personel [ i ] ;
11516: LD_ADDR_VAR 0 13
11520: PUSH
11521: LD_VAR 0 6
11525: PUSH
11526: LD_VAR 0 8
11530: ARRAY
11531: ST_TO_ADDR
// if x = - 1 then
11532: LD_VAR 0 13
11536: PUSH
11537: LD_INT 1
11539: NEG
11540: EQUAL
11541: IFFALSE 11752
// begin for j in f do
11543: LD_ADDR_VAR 0 9
11547: PUSH
11548: LD_VAR 0 12
11552: PUSH
11553: FOR_IN
11554: IFFALSE 11748
// repeat InitHc ;
11556: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11560: LD_VAR 0 9
11564: PPUSH
11565: CALL_OW 266
11569: PUSH
11570: LD_INT 5
11572: EQUAL
11573: IFFALSE 11643
// begin if UnitsInside ( j ) < 3 then
11575: LD_VAR 0 9
11579: PPUSH
11580: CALL_OW 313
11584: PUSH
11585: LD_INT 3
11587: LESS
11588: IFFALSE 11624
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11590: LD_INT 0
11592: PPUSH
11593: LD_INT 5
11595: PUSH
11596: LD_INT 8
11598: PUSH
11599: LD_INT 9
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_VAR 0 17
11611: ARRAY
11612: PPUSH
11613: LD_VAR 0 4
11617: PPUSH
11618: CALL_OW 380
11622: GO 11641
// PrepareHuman ( false , i , skill ) ;
11624: LD_INT 0
11626: PPUSH
11627: LD_VAR 0 8
11631: PPUSH
11632: LD_VAR 0 4
11636: PPUSH
11637: CALL_OW 380
// end else
11641: GO 11660
// PrepareHuman ( false , i , skill ) ;
11643: LD_INT 0
11645: PPUSH
11646: LD_VAR 0 8
11650: PPUSH
11651: LD_VAR 0 4
11655: PPUSH
11656: CALL_OW 380
// un := CreateHuman ;
11660: LD_ADDR_VAR 0 14
11664: PUSH
11665: CALL_OW 44
11669: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11670: LD_ADDR_VAR 0 7
11674: PUSH
11675: LD_VAR 0 7
11679: PPUSH
11680: LD_INT 1
11682: PPUSH
11683: LD_VAR 0 14
11687: PPUSH
11688: CALL_OW 2
11692: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11693: LD_VAR 0 14
11697: PPUSH
11698: LD_VAR 0 9
11702: PPUSH
11703: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11707: LD_VAR 0 9
11711: PPUSH
11712: CALL_OW 313
11716: PUSH
11717: LD_INT 6
11719: EQUAL
11720: IFTRUE 11744
11722: PUSH
11723: LD_VAR 0 9
11727: PPUSH
11728: CALL_OW 266
11732: PUSH
11733: LD_INT 32
11735: PUSH
11736: LD_INT 31
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: IN
11743: OR
11744: IFFALSE 11556
11746: GO 11553
11748: POP
11749: POP
// end else
11750: GO 12136
// for j = 1 to x do
11752: LD_ADDR_VAR 0 9
11756: PUSH
11757: DOUBLE
11758: LD_INT 1
11760: DEC
11761: ST_TO_ADDR
11762: LD_VAR 0 13
11766: PUSH
11767: FOR_TO
11768: IFFALSE 12134
// begin InitHc ;
11770: CALL_OW 19
// if not f then
11774: LD_VAR 0 12
11778: NOT
11779: IFFALSE 11868
// begin PrepareHuman ( false , i , skill ) ;
11781: LD_INT 0
11783: PPUSH
11784: LD_VAR 0 8
11788: PPUSH
11789: LD_VAR 0 4
11793: PPUSH
11794: CALL_OW 380
// un := CreateHuman ;
11798: LD_ADDR_VAR 0 14
11802: PUSH
11803: CALL_OW 44
11807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11808: LD_ADDR_VAR 0 7
11812: PUSH
11813: LD_VAR 0 7
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: LD_VAR 0 14
11825: PPUSH
11826: CALL_OW 2
11830: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11831: LD_VAR 0 14
11835: PPUSH
11836: LD_VAR 0 1
11840: PPUSH
11841: CALL_OW 250
11845: PPUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 251
11855: PPUSH
11856: LD_INT 10
11858: PPUSH
11859: LD_INT 0
11861: PPUSH
11862: CALL_OW 50
// continue ;
11866: GO 11767
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11868: LD_VAR 0 12
11872: PUSH
11873: LD_INT 1
11875: ARRAY
11876: PPUSH
11877: CALL_OW 313
11881: IFFALSE 11909
11883: PUSH
11884: LD_VAR 0 12
11888: PUSH
11889: LD_INT 1
11891: ARRAY
11892: PPUSH
11893: CALL_OW 266
11897: PUSH
11898: LD_INT 32
11900: PUSH
11901: LD_INT 31
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: IN
11908: AND
11909: IFTRUE 11930
11911: PUSH
11912: LD_VAR 0 12
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: PPUSH
11921: CALL_OW 313
11925: PUSH
11926: LD_INT 6
11928: EQUAL
11929: OR
11930: IFFALSE 11950
// f := Delete ( f , 1 ) ;
11932: LD_ADDR_VAR 0 12
11936: PUSH
11937: LD_VAR 0 12
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 3
11949: ST_TO_ADDR
// if not f then
11950: LD_VAR 0 12
11954: NOT
11955: IFFALSE 11973
// begin x := x + 2 ;
11957: LD_ADDR_VAR 0 13
11961: PUSH
11962: LD_VAR 0 13
11966: PUSH
11967: LD_INT 2
11969: PLUS
11970: ST_TO_ADDR
// continue ;
11971: GO 11767
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11973: LD_VAR 0 12
11977: PUSH
11978: LD_INT 1
11980: ARRAY
11981: PPUSH
11982: CALL_OW 266
11986: PUSH
11987: LD_INT 5
11989: EQUAL
11990: IFFALSE 12064
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11992: LD_VAR 0 12
11996: PUSH
11997: LD_INT 1
11999: ARRAY
12000: PPUSH
12001: CALL_OW 313
12005: PUSH
12006: LD_INT 3
12008: LESS
12009: IFFALSE 12045
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12011: LD_INT 0
12013: PPUSH
12014: LD_INT 5
12016: PUSH
12017: LD_INT 8
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_VAR 0 17
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 4
12038: PPUSH
12039: CALL_OW 380
12043: GO 12062
// PrepareHuman ( false , i , skill ) ;
12045: LD_INT 0
12047: PPUSH
12048: LD_VAR 0 8
12052: PPUSH
12053: LD_VAR 0 4
12057: PPUSH
12058: CALL_OW 380
// end else
12062: GO 12081
// PrepareHuman ( false , i , skill ) ;
12064: LD_INT 0
12066: PPUSH
12067: LD_VAR 0 8
12071: PPUSH
12072: LD_VAR 0 4
12076: PPUSH
12077: CALL_OW 380
// un := CreateHuman ;
12081: LD_ADDR_VAR 0 14
12085: PUSH
12086: CALL_OW 44
12090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12091: LD_ADDR_VAR 0 7
12095: PUSH
12096: LD_VAR 0 7
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: LD_VAR 0 14
12108: PPUSH
12109: CALL_OW 2
12113: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12114: LD_VAR 0 14
12118: PPUSH
12119: LD_VAR 0 12
12123: PUSH
12124: LD_INT 1
12126: ARRAY
12127: PPUSH
12128: CALL_OW 52
// end ;
12132: GO 11767
12134: POP
12135: POP
// end ;
12136: GO 11067
12138: POP
12139: POP
// result := result ^ buildings ;
12140: LD_ADDR_VAR 0 7
12144: PUSH
12145: LD_VAR 0 7
12149: PUSH
12150: LD_VAR 0 18
12154: ADD
12155: ST_TO_ADDR
// end else
12156: GO 12299
// begin for i = 1 to personel do
12158: LD_ADDR_VAR 0 8
12162: PUSH
12163: DOUBLE
12164: LD_INT 1
12166: DEC
12167: ST_TO_ADDR
12168: LD_VAR 0 6
12172: PUSH
12173: FOR_TO
12174: IFFALSE 12297
// begin if i > 4 then
12176: LD_VAR 0 8
12180: PUSH
12181: LD_INT 4
12183: GREATER
12184: IFFALSE 12188
// break ;
12186: GO 12297
// x := personel [ i ] ;
12188: LD_ADDR_VAR 0 13
12192: PUSH
12193: LD_VAR 0 6
12197: PUSH
12198: LD_VAR 0 8
12202: ARRAY
12203: ST_TO_ADDR
// if x = - 1 then
12204: LD_VAR 0 13
12208: PUSH
12209: LD_INT 1
12211: NEG
12212: EQUAL
12213: IFFALSE 12217
// continue ;
12215: GO 12173
// PrepareHuman ( false , i , skill ) ;
12217: LD_INT 0
12219: PPUSH
12220: LD_VAR 0 8
12224: PPUSH
12225: LD_VAR 0 4
12229: PPUSH
12230: CALL_OW 380
// un := CreateHuman ;
12234: LD_ADDR_VAR 0 14
12238: PUSH
12239: CALL_OW 44
12243: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12244: LD_VAR 0 14
12248: PPUSH
12249: LD_VAR 0 1
12253: PPUSH
12254: CALL_OW 250
12258: PPUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: CALL_OW 251
12268: PPUSH
12269: LD_INT 10
12271: PPUSH
12272: LD_INT 0
12274: PPUSH
12275: CALL_OW 50
// result := result ^ un ;
12279: LD_ADDR_VAR 0 7
12283: PUSH
12284: LD_VAR 0 7
12288: PUSH
12289: LD_VAR 0 14
12293: ADD
12294: ST_TO_ADDR
// end ;
12295: GO 12173
12297: POP
12298: POP
// end ; end ;
12299: LD_VAR 0 7
12303: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12304: LD_INT 0
12306: PPUSH
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
12312: PPUSH
12313: PPUSH
12314: PPUSH
12315: PPUSH
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
// result := false ;
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12330: LD_VAR 0 1
12334: NOT
12335: IFTRUE 12360
12337: PUSH
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 266
12347: PUSH
12348: LD_INT 32
12350: PUSH
12351: LD_INT 33
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: IN
12358: NOT
12359: OR
12360: IFFALSE 12364
// exit ;
12362: GO 13499
// nat := GetNation ( tower ) ;
12364: LD_ADDR_VAR 0 12
12368: PUSH
12369: LD_VAR 0 1
12373: PPUSH
12374: CALL_OW 248
12378: ST_TO_ADDR
// side := GetSide ( tower ) ;
12379: LD_ADDR_VAR 0 16
12383: PUSH
12384: LD_VAR 0 1
12388: PPUSH
12389: CALL_OW 255
12393: ST_TO_ADDR
// x := GetX ( tower ) ;
12394: LD_ADDR_VAR 0 10
12398: PUSH
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 250
12408: ST_TO_ADDR
// y := GetY ( tower ) ;
12409: LD_ADDR_VAR 0 11
12413: PUSH
12414: LD_VAR 0 1
12418: PPUSH
12419: CALL_OW 251
12423: ST_TO_ADDR
// if not x or not y then
12424: LD_VAR 0 10
12428: NOT
12429: IFTRUE 12438
12431: PUSH
12432: LD_VAR 0 11
12436: NOT
12437: OR
12438: IFFALSE 12442
// exit ;
12440: GO 13499
// weapon := 0 ;
12442: LD_ADDR_VAR 0 18
12446: PUSH
12447: LD_INT 0
12449: ST_TO_ADDR
// fac_list := [ ] ;
12450: LD_ADDR_VAR 0 17
12454: PUSH
12455: EMPTY
12456: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12457: LD_ADDR_VAR 0 6
12461: PUSH
12462: LD_VAR 0 1
12466: PPUSH
12467: CALL_OW 274
12471: PPUSH
12472: LD_VAR 0 2
12476: PPUSH
12477: LD_INT 0
12479: PPUSH
12480: CALL 10034 0 3
12484: PPUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 3
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 72
12499: ST_TO_ADDR
// if not factories then
12500: LD_VAR 0 6
12504: NOT
12505: IFFALSE 12509
// exit ;
12507: GO 13499
// for i in factories do
12509: LD_ADDR_VAR 0 8
12513: PUSH
12514: LD_VAR 0 6
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12545
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12522: LD_ADDR_VAR 0 17
12526: PUSH
12527: LD_VAR 0 17
12531: PUSH
12532: LD_VAR 0 8
12536: PPUSH
12537: CALL_OW 478
12541: UNION
12542: ST_TO_ADDR
12543: GO 12519
12545: POP
12546: POP
// if not fac_list then
12547: LD_VAR 0 17
12551: NOT
12552: IFFALSE 12556
// exit ;
12554: GO 13499
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12556: LD_ADDR_VAR 0 5
12560: PUSH
12561: LD_INT 4
12563: PUSH
12564: LD_INT 5
12566: PUSH
12567: LD_INT 9
12569: PUSH
12570: LD_INT 10
12572: PUSH
12573: LD_INT 6
12575: PUSH
12576: LD_INT 7
12578: PUSH
12579: LD_INT 11
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 27
12593: PUSH
12594: LD_INT 28
12596: PUSH
12597: LD_INT 26
12599: PUSH
12600: LD_INT 30
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 43
12611: PUSH
12612: LD_INT 44
12614: PUSH
12615: LD_INT 46
12617: PUSH
12618: LD_INT 45
12620: PUSH
12621: LD_INT 47
12623: PUSH
12624: LD_INT 49
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: LIST
12639: PUSH
12640: LD_VAR 0 12
12644: ARRAY
12645: ST_TO_ADDR
// list := list isect fac_list ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: LD_VAR 0 5
12655: PUSH
12656: LD_VAR 0 17
12660: ISECT
12661: ST_TO_ADDR
// if not list then
12662: LD_VAR 0 5
12666: NOT
12667: IFFALSE 12671
// exit ;
12669: GO 13499
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12671: LD_VAR 0 12
12675: PUSH
12676: LD_INT 3
12678: EQUAL
12679: IFFALSE 12691
12681: PUSH
12682: LD_INT 49
12684: PUSH
12685: LD_VAR 0 5
12689: IN
12690: AND
12691: IFFALSE 12711
12693: PUSH
12694: LD_INT 31
12696: PPUSH
12697: LD_VAR 0 16
12701: PPUSH
12702: CALL_OW 321
12706: PUSH
12707: LD_INT 2
12709: EQUAL
12710: AND
12711: IFFALSE 12771
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12713: LD_INT 22
12715: PUSH
12716: LD_VAR 0 16
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 35
12727: PUSH
12728: LD_INT 49
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 91
12737: PUSH
12738: LD_VAR 0 1
12742: PUSH
12743: LD_INT 10
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 69
12760: NOT
12761: IFFALSE 12771
// weapon := ru_time_lapser ;
12763: LD_ADDR_VAR 0 18
12767: PUSH
12768: LD_INT 49
12770: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12771: LD_VAR 0 12
12775: PUSH
12776: LD_INT 1
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: IN
12786: IFFALSE 12810
12788: PUSH
12789: LD_INT 11
12791: PUSH
12792: LD_VAR 0 5
12796: IN
12797: IFTRUE 12809
12799: PUSH
12800: LD_INT 30
12802: PUSH
12803: LD_VAR 0 5
12807: IN
12808: OR
12809: AND
12810: IFFALSE 12830
12812: PUSH
12813: LD_INT 6
12815: PPUSH
12816: LD_VAR 0 16
12820: PPUSH
12821: CALL_OW 321
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: AND
12830: IFFALSE 12997
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12832: LD_INT 22
12834: PUSH
12835: LD_VAR 0 16
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: LD_INT 35
12849: PUSH
12850: LD_INT 11
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 35
12859: PUSH
12860: LD_INT 30
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 91
12874: PUSH
12875: LD_VAR 0 1
12879: PUSH
12880: LD_INT 18
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: NOT
12898: IFFALSE 12974
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_VAR 0 16
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 2
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 32
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 33
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 91
12943: PUSH
12944: LD_VAR 0 1
12948: PUSH
12949: LD_INT 12
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: PUSH
12970: LD_INT 2
12972: GREATER
12973: AND
12974: IFFALSE 12997
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12976: LD_ADDR_VAR 0 18
12980: PUSH
12981: LD_INT 11
12983: PUSH
12984: LD_INT 30
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: LD_VAR 0 12
12995: ARRAY
12996: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12997: LD_VAR 0 18
13001: NOT
13002: IFFALSE 13022
13004: PUSH
13005: LD_INT 40
13007: PPUSH
13008: LD_VAR 0 16
13012: PPUSH
13013: CALL_OW 321
13017: PUSH
13018: LD_INT 2
13020: EQUAL
13021: AND
13022: IFFALSE 13058
13024: PUSH
13025: LD_INT 7
13027: PUSH
13028: LD_VAR 0 5
13032: IN
13033: IFTRUE 13045
13035: PUSH
13036: LD_INT 28
13038: PUSH
13039: LD_VAR 0 5
13043: IN
13044: OR
13045: IFTRUE 13057
13047: PUSH
13048: LD_INT 45
13050: PUSH
13051: LD_VAR 0 5
13055: IN
13056: OR
13057: AND
13058: IFFALSE 13312
// begin hex := GetHexInfo ( x , y ) ;
13060: LD_ADDR_VAR 0 4
13064: PUSH
13065: LD_VAR 0 10
13069: PPUSH
13070: LD_VAR 0 11
13074: PPUSH
13075: CALL_OW 546
13079: ST_TO_ADDR
// if hex [ 1 ] then
13080: LD_VAR 0 4
13084: PUSH
13085: LD_INT 1
13087: ARRAY
13088: IFFALSE 13092
// exit ;
13090: GO 13499
// height := hex [ 2 ] ;
13092: LD_ADDR_VAR 0 15
13096: PUSH
13097: LD_VAR 0 4
13101: PUSH
13102: LD_INT 2
13104: ARRAY
13105: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13106: LD_ADDR_VAR 0 14
13110: PUSH
13111: LD_INT 0
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: LD_INT 5
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: ST_TO_ADDR
// for i in tmp do
13129: LD_ADDR_VAR 0 8
13133: PUSH
13134: LD_VAR 0 14
13138: PUSH
13139: FOR_IN
13140: IFFALSE 13310
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13142: LD_ADDR_VAR 0 9
13146: PUSH
13147: LD_VAR 0 10
13151: PPUSH
13152: LD_VAR 0 8
13156: PPUSH
13157: LD_INT 5
13159: PPUSH
13160: CALL_OW 272
13164: PUSH
13165: LD_VAR 0 11
13169: PPUSH
13170: LD_VAR 0 8
13174: PPUSH
13175: LD_INT 5
13177: PPUSH
13178: CALL_OW 273
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13187: LD_VAR 0 9
13191: PUSH
13192: LD_INT 1
13194: ARRAY
13195: PPUSH
13196: LD_VAR 0 9
13200: PUSH
13201: LD_INT 2
13203: ARRAY
13204: PPUSH
13205: CALL_OW 488
13209: IFFALSE 13308
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13211: LD_ADDR_VAR 0 4
13215: PUSH
13216: LD_VAR 0 9
13220: PUSH
13221: LD_INT 1
13223: ARRAY
13224: PPUSH
13225: LD_VAR 0 9
13229: PUSH
13230: LD_INT 2
13232: ARRAY
13233: PPUSH
13234: CALL_OW 546
13238: ST_TO_ADDR
// if hex [ 1 ] then
13239: LD_VAR 0 4
13243: PUSH
13244: LD_INT 1
13246: ARRAY
13247: IFFALSE 13251
// continue ;
13249: GO 13139
// h := hex [ 2 ] ;
13251: LD_ADDR_VAR 0 13
13255: PUSH
13256: LD_VAR 0 4
13260: PUSH
13261: LD_INT 2
13263: ARRAY
13264: ST_TO_ADDR
// if h + 7 < height then
13265: LD_VAR 0 13
13269: PUSH
13270: LD_INT 7
13272: PLUS
13273: PUSH
13274: LD_VAR 0 15
13278: LESS
13279: IFFALSE 13308
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13281: LD_ADDR_VAR 0 18
13285: PUSH
13286: LD_INT 7
13288: PUSH
13289: LD_INT 28
13291: PUSH
13292: LD_INT 45
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_VAR 0 12
13304: ARRAY
13305: ST_TO_ADDR
// break ;
13306: GO 13310
// end ; end ; end ;
13308: GO 13139
13310: POP
13311: POP
// end ; if not weapon then
13312: LD_VAR 0 18
13316: NOT
13317: IFFALSE 13377
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13319: LD_ADDR_VAR 0 5
13323: PUSH
13324: LD_VAR 0 5
13328: PUSH
13329: LD_INT 11
13331: PUSH
13332: LD_INT 30
13334: PUSH
13335: LD_INT 49
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: DIFF
13343: ST_TO_ADDR
// if not list then
13344: LD_VAR 0 5
13348: NOT
13349: IFFALSE 13353
// exit ;
13351: GO 13499
// weapon := list [ rand ( 1 , list ) ] ;
13353: LD_ADDR_VAR 0 18
13357: PUSH
13358: LD_VAR 0 5
13362: PUSH
13363: LD_INT 1
13365: PPUSH
13366: LD_VAR 0 5
13370: PPUSH
13371: CALL_OW 12
13375: ARRAY
13376: ST_TO_ADDR
// end ; if weapon then
13377: LD_VAR 0 18
13381: IFFALSE 13499
// begin tmp := CostOfWeapon ( weapon ) ;
13383: LD_ADDR_VAR 0 14
13387: PUSH
13388: LD_VAR 0 18
13392: PPUSH
13393: CALL_OW 451
13397: ST_TO_ADDR
// j := GetBase ( tower ) ;
13398: LD_ADDR_VAR 0 9
13402: PUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: CALL_OW 274
13412: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13413: LD_VAR 0 9
13417: PPUSH
13418: LD_INT 1
13420: PPUSH
13421: CALL_OW 275
13425: PUSH
13426: LD_VAR 0 14
13430: PUSH
13431: LD_INT 1
13433: ARRAY
13434: GREATEREQUAL
13435: IFFALSE 13461
13437: PUSH
13438: LD_VAR 0 9
13442: PPUSH
13443: LD_INT 2
13445: PPUSH
13446: CALL_OW 275
13450: PUSH
13451: LD_VAR 0 14
13455: PUSH
13456: LD_INT 2
13458: ARRAY
13459: GREATEREQUAL
13460: AND
13461: IFFALSE 13487
13463: PUSH
13464: LD_VAR 0 9
13468: PPUSH
13469: LD_INT 3
13471: PPUSH
13472: CALL_OW 275
13476: PUSH
13477: LD_VAR 0 14
13481: PUSH
13482: LD_INT 3
13484: ARRAY
13485: GREATEREQUAL
13486: AND
13487: IFFALSE 13499
// result := weapon ;
13489: LD_ADDR_VAR 0 3
13493: PUSH
13494: LD_VAR 0 18
13498: ST_TO_ADDR
// end ; end ;
13499: LD_VAR 0 3
13503: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13504: LD_INT 0
13506: PPUSH
13507: PPUSH
// result := true ;
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: LD_INT 1
13515: ST_TO_ADDR
// if array1 = array2 then
13516: LD_VAR 0 1
13520: PUSH
13521: LD_VAR 0 2
13525: EQUAL
13526: IFFALSE 13586
// begin for i = 1 to array1 do
13528: LD_ADDR_VAR 0 4
13532: PUSH
13533: DOUBLE
13534: LD_INT 1
13536: DEC
13537: ST_TO_ADDR
13538: LD_VAR 0 1
13542: PUSH
13543: FOR_TO
13544: IFFALSE 13582
// if array1 [ i ] <> array2 [ i ] then
13546: LD_VAR 0 1
13550: PUSH
13551: LD_VAR 0 4
13555: ARRAY
13556: PUSH
13557: LD_VAR 0 2
13561: PUSH
13562: LD_VAR 0 4
13566: ARRAY
13567: NONEQUAL
13568: IFFALSE 13580
// begin result := false ;
13570: LD_ADDR_VAR 0 3
13574: PUSH
13575: LD_INT 0
13577: ST_TO_ADDR
// break ;
13578: GO 13582
// end ;
13580: GO 13543
13582: POP
13583: POP
// end else
13584: GO 13594
// result := false ;
13586: LD_ADDR_VAR 0 3
13590: PUSH
13591: LD_INT 0
13593: ST_TO_ADDR
// end ;
13594: LD_VAR 0 3
13598: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13599: LD_INT 0
13601: PPUSH
13602: PPUSH
// if not array1 or not array2 then
13603: LD_VAR 0 1
13607: NOT
13608: IFTRUE 13617
13610: PUSH
13611: LD_VAR 0 2
13615: NOT
13616: OR
13617: IFFALSE 13621
// exit ;
13619: GO 13685
// result := true ;
13621: LD_ADDR_VAR 0 3
13625: PUSH
13626: LD_INT 1
13628: ST_TO_ADDR
// for i = 1 to array1 do
13629: LD_ADDR_VAR 0 4
13633: PUSH
13634: DOUBLE
13635: LD_INT 1
13637: DEC
13638: ST_TO_ADDR
13639: LD_VAR 0 1
13643: PUSH
13644: FOR_TO
13645: IFFALSE 13683
// if array1 [ i ] <> array2 [ i ] then
13647: LD_VAR 0 1
13651: PUSH
13652: LD_VAR 0 4
13656: ARRAY
13657: PUSH
13658: LD_VAR 0 2
13662: PUSH
13663: LD_VAR 0 4
13667: ARRAY
13668: NONEQUAL
13669: IFFALSE 13681
// begin result := false ;
13671: LD_ADDR_VAR 0 3
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// break ;
13679: GO 13683
// end ;
13681: GO 13644
13683: POP
13684: POP
// end ;
13685: LD_VAR 0 3
13689: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
// pom := GetBase ( fac ) ;
13695: LD_ADDR_VAR 0 5
13699: PUSH
13700: LD_VAR 0 1
13704: PPUSH
13705: CALL_OW 274
13709: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13710: LD_ADDR_VAR 0 4
13714: PUSH
13715: LD_VAR 0 2
13719: PUSH
13720: LD_INT 1
13722: ARRAY
13723: PPUSH
13724: LD_VAR 0 2
13728: PUSH
13729: LD_INT 2
13731: ARRAY
13732: PPUSH
13733: LD_VAR 0 2
13737: PUSH
13738: LD_INT 3
13740: ARRAY
13741: PPUSH
13742: LD_VAR 0 2
13746: PUSH
13747: LD_INT 4
13749: ARRAY
13750: PPUSH
13751: CALL_OW 449
13755: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13756: LD_ADDR_VAR 0 3
13760: PUSH
13761: LD_VAR 0 5
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 275
13773: PUSH
13774: LD_VAR 0 4
13778: PUSH
13779: LD_INT 1
13781: ARRAY
13782: GREATEREQUAL
13783: IFFALSE 13809
13785: PUSH
13786: LD_VAR 0 5
13790: PPUSH
13791: LD_INT 2
13793: PPUSH
13794: CALL_OW 275
13798: PUSH
13799: LD_VAR 0 4
13803: PUSH
13804: LD_INT 2
13806: ARRAY
13807: GREATEREQUAL
13808: AND
13809: IFFALSE 13835
13811: PUSH
13812: LD_VAR 0 5
13816: PPUSH
13817: LD_INT 3
13819: PPUSH
13820: CALL_OW 275
13824: PUSH
13825: LD_VAR 0 4
13829: PUSH
13830: LD_INT 3
13832: ARRAY
13833: GREATEREQUAL
13834: AND
13835: ST_TO_ADDR
// end ;
13836: LD_VAR 0 3
13840: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13841: LD_INT 0
13843: PPUSH
13844: PPUSH
13845: PPUSH
13846: PPUSH
// pom := GetBase ( building ) ;
13847: LD_ADDR_VAR 0 3
13851: PUSH
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 274
13861: ST_TO_ADDR
// if not pom then
13862: LD_VAR 0 3
13866: NOT
13867: IFFALSE 13871
// exit ;
13869: GO 14045
// btype := GetBType ( building ) ;
13871: LD_ADDR_VAR 0 5
13875: PUSH
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 266
13885: ST_TO_ADDR
// if btype = b_armoury then
13886: LD_VAR 0 5
13890: PUSH
13891: LD_INT 4
13893: EQUAL
13894: IFFALSE 13904
// btype := b_barracks ;
13896: LD_ADDR_VAR 0 5
13900: PUSH
13901: LD_INT 5
13903: ST_TO_ADDR
// if btype = b_depot then
13904: LD_VAR 0 5
13908: PUSH
13909: LD_INT 0
13911: EQUAL
13912: IFFALSE 13922
// btype := b_warehouse ;
13914: LD_ADDR_VAR 0 5
13918: PUSH
13919: LD_INT 1
13921: ST_TO_ADDR
// if btype = b_workshop then
13922: LD_VAR 0 5
13926: PUSH
13927: LD_INT 2
13929: EQUAL
13930: IFFALSE 13940
// btype := b_factory ;
13932: LD_ADDR_VAR 0 5
13936: PUSH
13937: LD_INT 3
13939: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13940: LD_ADDR_VAR 0 4
13944: PUSH
13945: LD_VAR 0 5
13949: PPUSH
13950: LD_VAR 0 1
13954: PPUSH
13955: CALL_OW 248
13959: PPUSH
13960: CALL_OW 450
13964: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13965: LD_ADDR_VAR 0 2
13969: PUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 275
13982: PUSH
13983: LD_VAR 0 4
13987: PUSH
13988: LD_INT 1
13990: ARRAY
13991: GREATEREQUAL
13992: IFFALSE 14018
13994: PUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_INT 2
14002: PPUSH
14003: CALL_OW 275
14007: PUSH
14008: LD_VAR 0 4
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: GREATEREQUAL
14017: AND
14018: IFFALSE 14044
14020: PUSH
14021: LD_VAR 0 3
14025: PPUSH
14026: LD_INT 3
14028: PPUSH
14029: CALL_OW 275
14033: PUSH
14034: LD_VAR 0 4
14038: PUSH
14039: LD_INT 3
14041: ARRAY
14042: GREATEREQUAL
14043: AND
14044: ST_TO_ADDR
// end ;
14045: LD_VAR 0 2
14049: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14050: LD_INT 0
14052: PPUSH
14053: PPUSH
14054: PPUSH
// pom := GetBase ( building ) ;
14055: LD_ADDR_VAR 0 4
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 274
14069: ST_TO_ADDR
// if not pom then
14070: LD_VAR 0 4
14074: NOT
14075: IFFALSE 14079
// exit ;
14077: GO 14184
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14079: LD_ADDR_VAR 0 5
14083: PUSH
14084: LD_VAR 0 2
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 248
14098: PPUSH
14099: CALL_OW 450
14103: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_VAR 0 4
14113: PPUSH
14114: LD_INT 1
14116: PPUSH
14117: CALL_OW 275
14121: PUSH
14122: LD_VAR 0 5
14126: PUSH
14127: LD_INT 1
14129: ARRAY
14130: GREATEREQUAL
14131: IFFALSE 14157
14133: PUSH
14134: LD_VAR 0 4
14138: PPUSH
14139: LD_INT 2
14141: PPUSH
14142: CALL_OW 275
14146: PUSH
14147: LD_VAR 0 5
14151: PUSH
14152: LD_INT 2
14154: ARRAY
14155: GREATEREQUAL
14156: AND
14157: IFFALSE 14183
14159: PUSH
14160: LD_VAR 0 4
14164: PPUSH
14165: LD_INT 3
14167: PPUSH
14168: CALL_OW 275
14172: PUSH
14173: LD_VAR 0 5
14177: PUSH
14178: LD_INT 3
14180: ARRAY
14181: GREATEREQUAL
14182: AND
14183: ST_TO_ADDR
// end ;
14184: LD_VAR 0 3
14188: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14189: LD_INT 0
14191: PPUSH
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
14201: PPUSH
// result := false ;
14202: LD_ADDR_VAR 0 8
14206: PUSH
14207: LD_INT 0
14209: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14210: LD_VAR 0 5
14214: NOT
14215: IFTRUE 14224
14217: PUSH
14218: LD_VAR 0 1
14222: NOT
14223: OR
14224: IFTRUE 14233
14226: PUSH
14227: LD_VAR 0 2
14231: NOT
14232: OR
14233: IFTRUE 14242
14235: PUSH
14236: LD_VAR 0 3
14240: NOT
14241: OR
14242: IFFALSE 14246
// exit ;
14244: GO 15072
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14246: LD_ADDR_VAR 0 14
14250: PUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: LD_VAR 0 2
14260: PPUSH
14261: LD_VAR 0 3
14265: PPUSH
14266: LD_VAR 0 4
14270: PPUSH
14271: LD_VAR 0 5
14275: PUSH
14276: LD_INT 1
14278: ARRAY
14279: PPUSH
14280: CALL_OW 248
14284: PPUSH
14285: LD_INT 0
14287: PPUSH
14288: CALL 16353 0 6
14292: ST_TO_ADDR
// if not hexes then
14293: LD_VAR 0 14
14297: NOT
14298: IFFALSE 14302
// exit ;
14300: GO 15072
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14302: LD_ADDR_VAR 0 17
14306: PUSH
14307: LD_VAR 0 5
14311: PPUSH
14312: LD_INT 22
14314: PUSH
14315: LD_VAR 0 13
14319: PPUSH
14320: CALL_OW 255
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 30
14334: PUSH
14335: LD_INT 0
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 30
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 72
14365: ST_TO_ADDR
// for i = 1 to hexes do
14366: LD_ADDR_VAR 0 9
14370: PUSH
14371: DOUBLE
14372: LD_INT 1
14374: DEC
14375: ST_TO_ADDR
14376: LD_VAR 0 14
14380: PUSH
14381: FOR_TO
14382: IFFALSE 15070
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14384: LD_ADDR_VAR 0 13
14388: PUSH
14389: LD_VAR 0 14
14393: PUSH
14394: LD_VAR 0 9
14398: ARRAY
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_VAR 0 14
14408: PUSH
14409: LD_VAR 0 9
14413: ARRAY
14414: PUSH
14415: LD_INT 2
14417: ARRAY
14418: PPUSH
14419: CALL_OW 428
14423: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14424: LD_VAR 0 14
14428: PUSH
14429: LD_VAR 0 9
14433: ARRAY
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: PPUSH
14439: LD_VAR 0 14
14443: PUSH
14444: LD_VAR 0 9
14448: ARRAY
14449: PUSH
14450: LD_INT 2
14452: ARRAY
14453: PPUSH
14454: CALL_OW 351
14458: IFTRUE 14497
14460: PUSH
14461: LD_VAR 0 14
14465: PUSH
14466: LD_VAR 0 9
14470: ARRAY
14471: PUSH
14472: LD_INT 1
14474: ARRAY
14475: PPUSH
14476: LD_VAR 0 14
14480: PUSH
14481: LD_VAR 0 9
14485: ARRAY
14486: PUSH
14487: LD_INT 2
14489: ARRAY
14490: PPUSH
14491: CALL_OW 488
14495: NOT
14496: OR
14497: IFTRUE 14514
14499: PUSH
14500: LD_VAR 0 13
14504: PPUSH
14505: CALL_OW 247
14509: PUSH
14510: LD_INT 3
14512: EQUAL
14513: OR
14514: IFFALSE 14520
// exit ;
14516: POP
14517: POP
14518: GO 15072
// if not tmp then
14520: LD_VAR 0 13
14524: NOT
14525: IFFALSE 14529
// continue ;
14527: GO 14381
// result := true ;
14529: LD_ADDR_VAR 0 8
14533: PUSH
14534: LD_INT 1
14536: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14537: LD_VAR 0 6
14541: IFFALSE 14558
14543: PUSH
14544: LD_VAR 0 13
14548: PPUSH
14549: CALL_OW 247
14553: PUSH
14554: LD_INT 2
14556: EQUAL
14557: AND
14558: IFFALSE 14575
14560: PUSH
14561: LD_VAR 0 13
14565: PPUSH
14566: CALL_OW 263
14570: PUSH
14571: LD_INT 1
14573: EQUAL
14574: AND
14575: IFFALSE 14739
// begin if IsDrivenBy ( tmp ) then
14577: LD_VAR 0 13
14581: PPUSH
14582: CALL_OW 311
14586: IFFALSE 14590
// continue ;
14588: GO 14381
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14590: LD_VAR 0 6
14594: PPUSH
14595: LD_INT 3
14597: PUSH
14598: LD_INT 60
14600: PUSH
14601: EMPTY
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 3
14610: PUSH
14611: LD_INT 55
14613: PUSH
14614: EMPTY
14615: LIST
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 72
14629: IFFALSE 14737
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14631: LD_ADDR_VAR 0 18
14635: PUSH
14636: LD_VAR 0 6
14640: PPUSH
14641: LD_INT 3
14643: PUSH
14644: LD_INT 60
14646: PUSH
14647: EMPTY
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 55
14659: PUSH
14660: EMPTY
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PPUSH
14671: CALL_OW 72
14675: PUSH
14676: LD_INT 1
14678: ARRAY
14679: ST_TO_ADDR
// if IsInUnit ( driver ) then
14680: LD_VAR 0 18
14684: PPUSH
14685: CALL_OW 310
14689: IFFALSE 14700
// ComExit ( driver ) ;
14691: LD_VAR 0 18
14695: PPUSH
14696: CALL 40343 0 1
// AddComEnterUnit ( driver , tmp ) ;
14700: LD_VAR 0 18
14704: PPUSH
14705: LD_VAR 0 13
14709: PPUSH
14710: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14714: LD_VAR 0 18
14718: PPUSH
14719: LD_VAR 0 7
14723: PPUSH
14724: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14728: LD_VAR 0 18
14732: PPUSH
14733: CALL_OW 181
// end ; continue ;
14737: GO 14381
// end ; if not cleaners or not tmp in cleaners then
14739: LD_VAR 0 6
14743: NOT
14744: IFTRUE 14759
14746: PUSH
14747: LD_VAR 0 13
14751: PUSH
14752: LD_VAR 0 6
14756: IN
14757: NOT
14758: OR
14759: IFFALSE 15068
// begin if dep then
14761: LD_VAR 0 17
14765: IFFALSE 14901
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14767: LD_ADDR_VAR 0 16
14771: PUSH
14772: LD_VAR 0 17
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: CALL_OW 250
14785: PPUSH
14786: LD_VAR 0 17
14790: PUSH
14791: LD_INT 1
14793: ARRAY
14794: PPUSH
14795: CALL_OW 254
14799: PPUSH
14800: LD_INT 5
14802: PPUSH
14803: CALL_OW 272
14807: PUSH
14808: LD_VAR 0 17
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PPUSH
14817: CALL_OW 251
14821: PPUSH
14822: LD_VAR 0 17
14826: PUSH
14827: LD_INT 1
14829: ARRAY
14830: PPUSH
14831: CALL_OW 254
14835: PPUSH
14836: LD_INT 5
14838: PPUSH
14839: CALL_OW 273
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14848: LD_VAR 0 16
14852: PUSH
14853: LD_INT 1
14855: ARRAY
14856: PPUSH
14857: LD_VAR 0 16
14861: PUSH
14862: LD_INT 2
14864: ARRAY
14865: PPUSH
14866: CALL_OW 488
14870: IFFALSE 14901
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14872: LD_VAR 0 13
14876: PPUSH
14877: LD_VAR 0 16
14881: PUSH
14882: LD_INT 1
14884: ARRAY
14885: PPUSH
14886: LD_VAR 0 16
14890: PUSH
14891: LD_INT 2
14893: ARRAY
14894: PPUSH
14895: CALL_OW 111
// continue ;
14899: GO 14381
// end ; end ; r := GetDir ( tmp ) ;
14901: LD_ADDR_VAR 0 15
14905: PUSH
14906: LD_VAR 0 13
14910: PPUSH
14911: CALL_OW 254
14915: ST_TO_ADDR
// if r = 5 then
14916: LD_VAR 0 15
14920: PUSH
14921: LD_INT 5
14923: EQUAL
14924: IFFALSE 14934
// r := 0 ;
14926: LD_ADDR_VAR 0 15
14930: PUSH
14931: LD_INT 0
14933: ST_TO_ADDR
// for j = r to 5 do
14934: LD_ADDR_VAR 0 10
14938: PUSH
14939: DOUBLE
14940: LD_VAR 0 15
14944: DEC
14945: ST_TO_ADDR
14946: LD_INT 5
14948: PUSH
14949: FOR_TO
14950: IFFALSE 15066
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14952: LD_ADDR_VAR 0 11
14956: PUSH
14957: LD_VAR 0 13
14961: PPUSH
14962: CALL_OW 250
14966: PPUSH
14967: LD_VAR 0 10
14971: PPUSH
14972: LD_INT 2
14974: PPUSH
14975: CALL_OW 272
14979: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14980: LD_ADDR_VAR 0 12
14984: PUSH
14985: LD_VAR 0 13
14989: PPUSH
14990: CALL_OW 251
14994: PPUSH
14995: LD_VAR 0 10
14999: PPUSH
15000: LD_INT 2
15002: PPUSH
15003: CALL_OW 273
15007: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15008: LD_VAR 0 11
15012: PPUSH
15013: LD_VAR 0 12
15017: PPUSH
15018: CALL_OW 488
15022: IFFALSE 15041
15024: PUSH
15025: LD_VAR 0 11
15029: PPUSH
15030: LD_VAR 0 12
15034: PPUSH
15035: CALL_OW 428
15039: NOT
15040: AND
15041: IFFALSE 15064
// begin ComMoveXY ( tmp , _x , _y ) ;
15043: LD_VAR 0 13
15047: PPUSH
15048: LD_VAR 0 11
15052: PPUSH
15053: LD_VAR 0 12
15057: PPUSH
15058: CALL_OW 111
// break ;
15062: GO 15066
// end ; end ;
15064: GO 14949
15066: POP
15067: POP
// end ; end ;
15068: GO 14381
15070: POP
15071: POP
// end ;
15072: LD_VAR 0 8
15076: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15077: LD_INT 0
15079: PPUSH
// result := true ;
15080: LD_ADDR_VAR 0 3
15084: PUSH
15085: LD_INT 1
15087: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15088: LD_VAR 0 2
15092: PUSH
15093: LD_INT 24
15095: DOUBLE
15096: EQUAL
15097: IFTRUE 15107
15099: LD_INT 33
15101: DOUBLE
15102: EQUAL
15103: IFTRUE 15107
15105: GO 15132
15107: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15108: LD_ADDR_VAR 0 3
15112: PUSH
15113: LD_INT 32
15115: PPUSH
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 321
15125: PUSH
15126: LD_INT 2
15128: EQUAL
15129: ST_TO_ADDR
15130: GO 15448
15132: LD_INT 20
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15165
15140: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15141: LD_ADDR_VAR 0 3
15145: PUSH
15146: LD_INT 6
15148: PPUSH
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 321
15158: PUSH
15159: LD_INT 2
15161: EQUAL
15162: ST_TO_ADDR
15163: GO 15448
15165: LD_INT 22
15167: DOUBLE
15168: EQUAL
15169: IFTRUE 15179
15171: LD_INT 36
15173: DOUBLE
15174: EQUAL
15175: IFTRUE 15179
15177: GO 15204
15179: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15180: LD_ADDR_VAR 0 3
15184: PUSH
15185: LD_INT 15
15187: PPUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 321
15197: PUSH
15198: LD_INT 2
15200: EQUAL
15201: ST_TO_ADDR
15202: GO 15448
15204: LD_INT 30
15206: DOUBLE
15207: EQUAL
15208: IFTRUE 15212
15210: GO 15237
15212: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15213: LD_ADDR_VAR 0 3
15217: PUSH
15218: LD_INT 20
15220: PPUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 321
15230: PUSH
15231: LD_INT 2
15233: EQUAL
15234: ST_TO_ADDR
15235: GO 15448
15237: LD_INT 28
15239: DOUBLE
15240: EQUAL
15241: IFTRUE 15251
15243: LD_INT 21
15245: DOUBLE
15246: EQUAL
15247: IFTRUE 15251
15249: GO 15276
15251: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15252: LD_ADDR_VAR 0 3
15256: PUSH
15257: LD_INT 21
15259: PPUSH
15260: LD_VAR 0 1
15264: PPUSH
15265: CALL_OW 321
15269: PUSH
15270: LD_INT 2
15272: EQUAL
15273: ST_TO_ADDR
15274: GO 15448
15276: LD_INT 16
15278: DOUBLE
15279: EQUAL
15280: IFTRUE 15284
15282: GO 15309
15284: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15285: LD_ADDR_VAR 0 3
15289: PUSH
15290: LD_INT 84
15292: PPUSH
15293: LD_VAR 0 1
15297: PPUSH
15298: CALL_OW 321
15302: PUSH
15303: LD_INT 2
15305: EQUAL
15306: ST_TO_ADDR
15307: GO 15448
15309: LD_INT 19
15311: DOUBLE
15312: EQUAL
15313: IFTRUE 15323
15315: LD_INT 23
15317: DOUBLE
15318: EQUAL
15319: IFTRUE 15323
15321: GO 15348
15323: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15324: LD_ADDR_VAR 0 3
15328: PUSH
15329: LD_INT 83
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 321
15341: PUSH
15342: LD_INT 2
15344: EQUAL
15345: ST_TO_ADDR
15346: GO 15448
15348: LD_INT 17
15350: DOUBLE
15351: EQUAL
15352: IFTRUE 15356
15354: GO 15381
15356: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15357: LD_ADDR_VAR 0 3
15361: PUSH
15362: LD_INT 39
15364: PPUSH
15365: LD_VAR 0 1
15369: PPUSH
15370: CALL_OW 321
15374: PUSH
15375: LD_INT 2
15377: EQUAL
15378: ST_TO_ADDR
15379: GO 15448
15381: LD_INT 18
15383: DOUBLE
15384: EQUAL
15385: IFTRUE 15389
15387: GO 15414
15389: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15390: LD_ADDR_VAR 0 3
15394: PUSH
15395: LD_INT 40
15397: PPUSH
15398: LD_VAR 0 1
15402: PPUSH
15403: CALL_OW 321
15407: PUSH
15408: LD_INT 2
15410: EQUAL
15411: ST_TO_ADDR
15412: GO 15448
15414: LD_INT 27
15416: DOUBLE
15417: EQUAL
15418: IFTRUE 15422
15420: GO 15447
15422: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15423: LD_ADDR_VAR 0 3
15427: PUSH
15428: LD_INT 35
15430: PPUSH
15431: LD_VAR 0 1
15435: PPUSH
15436: CALL_OW 321
15440: PUSH
15441: LD_INT 2
15443: EQUAL
15444: ST_TO_ADDR
15445: GO 15448
15447: POP
// end ;
15448: LD_VAR 0 3
15452: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15453: LD_INT 0
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
15465: PPUSH
// result := false ;
15466: LD_ADDR_VAR 0 6
15470: PUSH
15471: LD_INT 0
15473: ST_TO_ADDR
// if btype = b_depot then
15474: LD_VAR 0 2
15478: PUSH
15479: LD_INT 0
15481: EQUAL
15482: IFFALSE 15494
// begin result := true ;
15484: LD_ADDR_VAR 0 6
15488: PUSH
15489: LD_INT 1
15491: ST_TO_ADDR
// exit ;
15492: GO 16348
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15494: LD_VAR 0 1
15498: NOT
15499: IFTRUE 15524
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL_OW 266
15511: PUSH
15512: LD_INT 0
15514: PUSH
15515: LD_INT 1
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: IN
15522: NOT
15523: OR
15524: IFTRUE 15533
15526: PUSH
15527: LD_VAR 0 2
15531: NOT
15532: OR
15533: IFTRUE 15569
15535: PUSH
15536: LD_VAR 0 5
15540: PUSH
15541: LD_INT 0
15543: PUSH
15544: LD_INT 1
15546: PUSH
15547: LD_INT 2
15549: PUSH
15550: LD_INT 3
15552: PUSH
15553: LD_INT 4
15555: PUSH
15556: LD_INT 5
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: IN
15567: NOT
15568: OR
15569: IFTRUE 15588
15571: PUSH
15572: LD_VAR 0 3
15576: PPUSH
15577: LD_VAR 0 4
15581: PPUSH
15582: CALL_OW 488
15586: NOT
15587: OR
15588: IFFALSE 15592
// exit ;
15590: GO 16348
// side := GetSide ( depot ) ;
15592: LD_ADDR_VAR 0 9
15596: PUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 255
15606: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15607: LD_VAR 0 9
15611: PPUSH
15612: LD_VAR 0 2
15616: PPUSH
15617: CALL 15077 0 2
15621: NOT
15622: IFFALSE 15626
// exit ;
15624: GO 16348
// pom := GetBase ( depot ) ;
15626: LD_ADDR_VAR 0 10
15630: PUSH
15631: LD_VAR 0 1
15635: PPUSH
15636: CALL_OW 274
15640: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15641: LD_ADDR_VAR 0 11
15645: PUSH
15646: LD_VAR 0 2
15650: PPUSH
15651: LD_VAR 0 1
15655: PPUSH
15656: CALL_OW 248
15660: PPUSH
15661: CALL_OW 450
15665: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15666: LD_VAR 0 10
15670: PPUSH
15671: LD_INT 1
15673: PPUSH
15674: CALL_OW 275
15678: PUSH
15679: LD_VAR 0 11
15683: PUSH
15684: LD_INT 1
15686: ARRAY
15687: GREATEREQUAL
15688: IFFALSE 15714
15690: PUSH
15691: LD_VAR 0 10
15695: PPUSH
15696: LD_INT 2
15698: PPUSH
15699: CALL_OW 275
15703: PUSH
15704: LD_VAR 0 11
15708: PUSH
15709: LD_INT 2
15711: ARRAY
15712: GREATEREQUAL
15713: AND
15714: IFFALSE 15740
15716: PUSH
15717: LD_VAR 0 10
15721: PPUSH
15722: LD_INT 3
15724: PPUSH
15725: CALL_OW 275
15729: PUSH
15730: LD_VAR 0 11
15734: PUSH
15735: LD_INT 3
15737: ARRAY
15738: GREATEREQUAL
15739: AND
15740: NOT
15741: IFFALSE 15745
// exit ;
15743: GO 16348
// if GetBType ( depot ) = b_depot then
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 266
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: IFFALSE 15770
// dist := 28 else
15760: LD_ADDR_VAR 0 14
15764: PUSH
15765: LD_INT 28
15767: ST_TO_ADDR
15768: GO 15778
// dist := 36 ;
15770: LD_ADDR_VAR 0 14
15774: PUSH
15775: LD_INT 36
15777: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15778: LD_VAR 0 1
15782: PPUSH
15783: LD_VAR 0 3
15787: PPUSH
15788: LD_VAR 0 4
15792: PPUSH
15793: CALL_OW 297
15797: PUSH
15798: LD_VAR 0 14
15802: GREATER
15803: IFFALSE 15807
// exit ;
15805: GO 16348
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15807: LD_ADDR_VAR 0 12
15811: PUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: LD_VAR 0 3
15821: PPUSH
15822: LD_VAR 0 4
15826: PPUSH
15827: LD_VAR 0 5
15831: PPUSH
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL_OW 248
15841: PPUSH
15842: LD_INT 0
15844: PPUSH
15845: CALL 16353 0 6
15849: ST_TO_ADDR
// if not hexes then
15850: LD_VAR 0 12
15854: NOT
15855: IFFALSE 15859
// exit ;
15857: GO 16348
// hex := GetHexInfo ( x , y ) ;
15859: LD_ADDR_VAR 0 15
15863: PUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_VAR 0 4
15873: PPUSH
15874: CALL_OW 546
15878: ST_TO_ADDR
// if hex [ 1 ] then
15879: LD_VAR 0 15
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: IFFALSE 15891
// exit ;
15889: GO 16348
// height := hex [ 2 ] ;
15891: LD_ADDR_VAR 0 13
15895: PUSH
15896: LD_VAR 0 15
15900: PUSH
15901: LD_INT 2
15903: ARRAY
15904: ST_TO_ADDR
// for i = 1 to hexes do
15905: LD_ADDR_VAR 0 7
15909: PUSH
15910: DOUBLE
15911: LD_INT 1
15913: DEC
15914: ST_TO_ADDR
15915: LD_VAR 0 12
15919: PUSH
15920: FOR_TO
15921: IFFALSE 16265
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15923: LD_VAR 0 12
15927: PUSH
15928: LD_VAR 0 7
15932: ARRAY
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: LD_VAR 0 12
15942: PUSH
15943: LD_VAR 0 7
15947: ARRAY
15948: PUSH
15949: LD_INT 2
15951: ARRAY
15952: PPUSH
15953: CALL_OW 488
15957: NOT
15958: IFTRUE 16000
15960: PUSH
15961: LD_VAR 0 12
15965: PUSH
15966: LD_VAR 0 7
15970: ARRAY
15971: PUSH
15972: LD_INT 1
15974: ARRAY
15975: PPUSH
15976: LD_VAR 0 12
15980: PUSH
15981: LD_VAR 0 7
15985: ARRAY
15986: PUSH
15987: LD_INT 2
15989: ARRAY
15990: PPUSH
15991: CALL_OW 428
15995: PUSH
15996: LD_INT 0
15998: GREATER
15999: OR
16000: IFTRUE 16038
16002: PUSH
16003: LD_VAR 0 12
16007: PUSH
16008: LD_VAR 0 7
16012: ARRAY
16013: PUSH
16014: LD_INT 1
16016: ARRAY
16017: PPUSH
16018: LD_VAR 0 12
16022: PUSH
16023: LD_VAR 0 7
16027: ARRAY
16028: PUSH
16029: LD_INT 2
16031: ARRAY
16032: PPUSH
16033: CALL_OW 351
16037: OR
16038: IFFALSE 16044
// exit ;
16040: POP
16041: POP
16042: GO 16348
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16044: LD_ADDR_VAR 0 8
16048: PUSH
16049: LD_VAR 0 12
16053: PUSH
16054: LD_VAR 0 7
16058: ARRAY
16059: PUSH
16060: LD_INT 1
16062: ARRAY
16063: PPUSH
16064: LD_VAR 0 12
16068: PUSH
16069: LD_VAR 0 7
16073: ARRAY
16074: PUSH
16075: LD_INT 2
16077: ARRAY
16078: PPUSH
16079: CALL_OW 546
16083: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16084: LD_VAR 0 8
16088: PUSH
16089: LD_INT 1
16091: ARRAY
16092: IFTRUE 16114
16094: PUSH
16095: LD_VAR 0 8
16099: PUSH
16100: LD_INT 2
16102: ARRAY
16103: PUSH
16104: LD_VAR 0 13
16108: PUSH
16109: LD_INT 2
16111: PLUS
16112: GREATER
16113: OR
16114: IFTRUE 16136
16116: PUSH
16117: LD_VAR 0 8
16121: PUSH
16122: LD_INT 2
16124: ARRAY
16125: PUSH
16126: LD_VAR 0 13
16130: PUSH
16131: LD_INT 2
16133: MINUS
16134: LESS
16135: OR
16136: IFTRUE 16204
16138: PUSH
16139: LD_VAR 0 8
16143: PUSH
16144: LD_INT 3
16146: ARRAY
16147: PUSH
16148: LD_INT 0
16150: PUSH
16151: LD_INT 8
16153: PUSH
16154: LD_INT 9
16156: PUSH
16157: LD_INT 10
16159: PUSH
16160: LD_INT 11
16162: PUSH
16163: LD_INT 12
16165: PUSH
16166: LD_INT 13
16168: PUSH
16169: LD_INT 16
16171: PUSH
16172: LD_INT 17
16174: PUSH
16175: LD_INT 18
16177: PUSH
16178: LD_INT 19
16180: PUSH
16181: LD_INT 20
16183: PUSH
16184: LD_INT 21
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: IN
16202: NOT
16203: OR
16204: IFTRUE 16217
16206: PUSH
16207: LD_VAR 0 8
16211: PUSH
16212: LD_INT 5
16214: ARRAY
16215: NOT
16216: OR
16217: IFTRUE 16257
16219: PUSH
16220: LD_VAR 0 8
16224: PUSH
16225: LD_INT 6
16227: ARRAY
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: LD_INT 7
16237: PUSH
16238: LD_INT 9
16240: PUSH
16241: LD_INT 10
16243: PUSH
16244: LD_INT 11
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: IN
16255: NOT
16256: OR
16257: IFFALSE 16263
// exit ;
16259: POP
16260: POP
16261: GO 16348
// end ;
16263: GO 15920
16265: POP
16266: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16267: LD_VAR 0 9
16271: PPUSH
16272: LD_VAR 0 3
16276: PPUSH
16277: LD_VAR 0 4
16281: PPUSH
16282: LD_INT 20
16284: PPUSH
16285: CALL 8167 0 4
16289: PUSH
16290: LD_INT 4
16292: ARRAY
16293: IFFALSE 16297
// exit ;
16295: GO 16348
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16297: LD_VAR 0 2
16301: PUSH
16302: LD_INT 29
16304: PUSH
16305: LD_INT 30
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: IN
16312: IFFALSE 16336
16314: PUSH
16315: LD_VAR 0 3
16319: PPUSH
16320: LD_VAR 0 4
16324: PPUSH
16325: LD_VAR 0 9
16329: PPUSH
16330: CALL_OW 440
16334: NOT
16335: AND
16336: IFFALSE 16340
// exit ;
16338: GO 16348
// result := true ;
16340: LD_ADDR_VAR 0 6
16344: PUSH
16345: LD_INT 1
16347: ST_TO_ADDR
// end ;
16348: LD_VAR 0 6
16352: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16353: LD_INT 0
16355: PPUSH
16356: PPUSH
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
16370: PPUSH
16371: PPUSH
16372: PPUSH
16373: PPUSH
16374: PPUSH
16375: PPUSH
16376: PPUSH
16377: PPUSH
16378: PPUSH
16379: PPUSH
16380: PPUSH
16381: PPUSH
16382: PPUSH
16383: PPUSH
16384: PPUSH
16385: PPUSH
16386: PPUSH
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
16391: PPUSH
16392: PPUSH
16393: PPUSH
16394: PPUSH
16395: PPUSH
16396: PPUSH
16397: PPUSH
16398: PPUSH
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
// result = [ ] ;
16413: LD_ADDR_VAR 0 7
16417: PUSH
16418: EMPTY
16419: ST_TO_ADDR
// temp_list = [ ] ;
16420: LD_ADDR_VAR 0 9
16424: PUSH
16425: EMPTY
16426: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16427: LD_VAR 0 4
16431: PUSH
16432: LD_INT 0
16434: PUSH
16435: LD_INT 1
16437: PUSH
16438: LD_INT 2
16440: PUSH
16441: LD_INT 3
16443: PUSH
16444: LD_INT 4
16446: PUSH
16447: LD_INT 5
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: IN
16458: NOT
16459: IFTRUE 16502
16461: PUSH
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: LD_INT 1
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: IN
16477: IFFALSE 16501
16479: PUSH
16480: LD_VAR 0 5
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 3
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: IN
16499: NOT
16500: AND
16501: OR
16502: IFFALSE 16506
// exit ;
16504: GO 34905
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16506: LD_VAR 0 1
16510: PUSH
16511: LD_INT 6
16513: PUSH
16514: LD_INT 7
16516: PUSH
16517: LD_INT 8
16519: PUSH
16520: LD_INT 13
16522: PUSH
16523: LD_INT 12
16525: PUSH
16526: LD_INT 15
16528: PUSH
16529: LD_INT 11
16531: PUSH
16532: LD_INT 14
16534: PUSH
16535: LD_INT 10
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: IN
16549: IFFALSE 16559
// btype = b_lab ;
16551: LD_ADDR_VAR 0 1
16555: PUSH
16556: LD_INT 6
16558: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16559: LD_VAR 0 6
16563: PUSH
16564: LD_INT 0
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: IN
16578: NOT
16579: IFTRUE 16647
16581: PUSH
16582: LD_VAR 0 1
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: LD_INT 6
16601: PUSH
16602: LD_INT 36
16604: PUSH
16605: LD_INT 4
16607: PUSH
16608: LD_INT 5
16610: PUSH
16611: LD_INT 31
16613: PUSH
16614: LD_INT 32
16616: PUSH
16617: LD_INT 33
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: IN
16633: NOT
16634: IFFALSE 16646
16636: PUSH
16637: LD_VAR 0 6
16641: PUSH
16642: LD_INT 1
16644: EQUAL
16645: AND
16646: OR
16647: IFTRUE 16679
16649: PUSH
16650: LD_VAR 0 1
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: IN
16665: NOT
16666: IFFALSE 16678
16668: PUSH
16669: LD_VAR 0 6
16673: PUSH
16674: LD_INT 2
16676: EQUAL
16677: AND
16678: OR
16679: IFFALSE 16689
// mode = 0 ;
16681: LD_ADDR_VAR 0 6
16685: PUSH
16686: LD_INT 0
16688: ST_TO_ADDR
// case mode of 0 :
16689: LD_VAR 0 6
16693: PUSH
16694: LD_INT 0
16696: DOUBLE
16697: EQUAL
16698: IFTRUE 16702
16700: GO 28155
16702: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16703: LD_ADDR_VAR 0 11
16707: PUSH
16708: LD_INT 0
16710: PUSH
16711: LD_INT 0
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 0
16720: PUSH
16721: LD_INT 1
16723: NEG
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 1
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 1
16761: NEG
16762: PUSH
16763: LD_INT 0
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: NEG
16773: PUSH
16774: LD_INT 1
16776: NEG
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 1
16784: NEG
16785: PUSH
16786: LD_INT 2
16788: NEG
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 0
16796: PUSH
16797: LD_INT 2
16799: NEG
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 1
16807: PUSH
16808: LD_INT 1
16810: NEG
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 1
16818: PUSH
16819: LD_INT 2
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 0
16828: PUSH
16829: LD_INT 2
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: NEG
16839: PUSH
16840: LD_INT 1
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: LD_INT 3
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16896: LD_ADDR_VAR 0 12
16900: PUSH
16901: LD_INT 0
16903: PUSH
16904: LD_INT 0
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: LD_INT 1
16916: NEG
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 1
16924: PUSH
16925: LD_INT 0
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 0
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: LD_INT 0
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 1
16965: NEG
16966: PUSH
16967: LD_INT 1
16969: NEG
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: LD_INT 1
16980: NEG
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 2
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 1
17008: NEG
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 2
17019: NEG
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 2
17030: NEG
17031: PUSH
17032: LD_INT 1
17034: NEG
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 2
17042: NEG
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 3
17053: NEG
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 3
17064: NEG
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17092: LD_ADDR_VAR 0 13
17096: PUSH
17097: LD_INT 0
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: LD_INT 1
17112: NEG
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 1
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 0
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: LD_INT 0
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 1
17161: NEG
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: LD_INT 2
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 2
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 2
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 2
17215: NEG
17216: PUSH
17217: LD_INT 1
17219: NEG
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 2
17227: NEG
17228: PUSH
17229: LD_INT 2
17231: NEG
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 2
17239: NEG
17240: PUSH
17241: LD_INT 3
17243: NEG
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 3
17251: NEG
17252: PUSH
17253: LD_INT 2
17255: NEG
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 3
17263: NEG
17264: PUSH
17265: LD_INT 3
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17291: LD_ADDR_VAR 0 14
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: LD_INT 0
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: LD_INT 1
17311: NEG
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: LD_INT 0
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 0
17339: PUSH
17340: LD_INT 1
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 1
17349: NEG
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 1
17360: NEG
17361: PUSH
17362: LD_INT 1
17364: NEG
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 1
17372: NEG
17373: PUSH
17374: LD_INT 2
17376: NEG
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 0
17384: PUSH
17385: LD_INT 2
17387: NEG
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: LD_INT 1
17398: NEG
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 0
17416: PUSH
17417: LD_INT 2
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: NEG
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 1
17437: NEG
17438: PUSH
17439: LD_INT 3
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: LD_INT 3
17452: NEG
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: LD_INT 2
17463: NEG
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17487: LD_ADDR_VAR 0 15
17491: PUSH
17492: LD_INT 0
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: LD_INT 1
17507: NEG
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 1
17515: PUSH
17516: LD_INT 0
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 0
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 1
17545: NEG
17546: PUSH
17547: LD_INT 0
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: LD_INT 1
17560: NEG
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 1
17568: PUSH
17569: LD_INT 1
17571: NEG
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 2
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: NEG
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: NEG
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 2
17621: NEG
17622: PUSH
17623: LD_INT 1
17625: NEG
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: LD_INT 1
17636: NEG
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 3
17644: PUSH
17645: LD_INT 0
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 3
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17680: LD_ADDR_VAR 0 16
17684: PUSH
17685: LD_INT 0
17687: PUSH
17688: LD_INT 0
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 1
17700: NEG
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 1
17738: NEG
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: NEG
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: LD_INT 2
17765: NEG
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 2
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 2
17803: NEG
17804: PUSH
17805: LD_INT 1
17807: NEG
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 2
17815: NEG
17816: PUSH
17817: LD_INT 2
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 3
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 3
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 3
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17873: LD_ADDR_VAR 0 17
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 0
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: PUSH
17902: LD_INT 0
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 1
17931: NEG
17932: PUSH
17933: LD_INT 0
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 1
17942: NEG
17943: PUSH
17944: LD_INT 1
17946: NEG
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 1
17954: NEG
17955: PUSH
17956: LD_INT 2
17958: NEG
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 2
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: LD_INT 2
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 1
18038: NEG
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 2
18049: NEG
18050: PUSH
18051: LD_INT 0
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 2
18060: NEG
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 2
18072: NEG
18073: PUSH
18074: LD_INT 2
18076: NEG
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18103: LD_ADDR_VAR 0 18
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 1
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: NEG
18162: PUSH
18163: LD_INT 0
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: LD_INT 1
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: NEG
18185: PUSH
18186: LD_INT 2
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 2
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 2
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 2
18279: NEG
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: NEG
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: NEG
18303: PUSH
18304: LD_INT 2
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18333: LD_ADDR_VAR 0 19
18337: PUSH
18338: LD_INT 0
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: LD_INT 1
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: NEG
18403: PUSH
18404: LD_INT 1
18406: NEG
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 2
18418: NEG
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: LD_INT 2
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: LD_INT 2
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: NEG
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 2
18520: NEG
18521: PUSH
18522: LD_INT 1
18524: NEG
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: LD_INT 2
18536: NEG
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18563: LD_ADDR_VAR 0 20
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: NEG
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: LD_INT 2
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: LD_INT 2
18659: NEG
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: NEG
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: NEG
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: NEG
18763: PUSH
18764: LD_INT 2
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18793: LD_ADDR_VAR 0 21
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 2
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: LD_INT 2
18889: NEG
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 1
18958: NEG
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 2
18969: NEG
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: LD_INT 1
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: NEG
18993: PUSH
18994: LD_INT 2
18996: NEG
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19023: LD_ADDR_VAR 0 22
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 2
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: LD_INT 2
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 1
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: LD_INT 2
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: NEG
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 2
19210: NEG
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: NEG
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19253: LD_ADDR_VAR 0 23
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 0
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: LD_INT 1
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: NEG
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: LD_INT 1
19326: NEG
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: LD_INT 2
19338: NEG
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: LD_INT 2
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 1
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: NEG
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 2
19429: NEG
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 2
19440: NEG
19441: PUSH
19442: LD_INT 1
19444: NEG
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 2
19452: NEG
19453: PUSH
19454: LD_INT 2
19456: NEG
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: LD_INT 3
19468: NEG
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: LD_INT 3
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 1
19488: PUSH
19489: LD_INT 2
19491: NEG
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19533: LD_ADDR_VAR 0 24
19537: PUSH
19538: LD_INT 0
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 1
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: LD_INT 1
19640: NEG
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: LD_INT 1
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: LD_INT 2
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: LD_INT 1
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 2
19709: NEG
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: NEG
19721: PUSH
19722: LD_INT 1
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: NEG
19733: PUSH
19734: LD_INT 2
19736: NEG
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: LD_INT 2
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 3
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 3
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19809: LD_ADDR_VAR 0 25
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: LD_INT 2
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: LD_INT 2
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 2
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: NEG
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 2
19996: NEG
19997: PUSH
19998: LD_INT 1
20000: NEG
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: LD_INT 2
20012: NEG
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 3
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 3
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 3
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20083: LD_ADDR_VAR 0 26
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 1
20164: NEG
20165: PUSH
20166: LD_INT 2
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 2
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 2
20218: PUSH
20219: LD_INT 2
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: NEG
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: NEG
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: LD_INT 3
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: LD_INT 3
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20359: LD_ADDR_VAR 0 27
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: LD_INT 1
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: NEG
20429: PUSH
20430: LD_INT 1
20432: NEG
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 1
20440: NEG
20441: PUSH
20442: LD_INT 2
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 2
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 2
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 1
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 2
20535: NEG
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 2
20546: NEG
20547: PUSH
20548: LD_INT 1
20550: NEG
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 2
20558: NEG
20559: PUSH
20560: LD_INT 2
20562: NEG
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: LD_INT 1
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 3
20592: NEG
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 3
20604: NEG
20605: PUSH
20606: LD_INT 2
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20639: LD_ADDR_VAR 0 28
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 0
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: NEG
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: LD_INT 1
20712: NEG
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: LD_INT 2
20724: NEG
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: LD_INT 2
20735: NEG
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 1
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 2
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 1
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 1
20804: NEG
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 2
20815: NEG
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: NEG
20839: PUSH
20840: LD_INT 2
20842: NEG
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 2
20850: NEG
20851: PUSH
20852: LD_INT 3
20854: NEG
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: LD_INT 3
20866: NEG
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 3
20874: NEG
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 3
20886: NEG
20887: PUSH
20888: LD_INT 2
20890: NEG
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20921: LD_ADDR_VAR 0 29
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 2
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 0
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 1
21076: NEG
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 2
21087: NEG
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 2
21099: NEG
21100: PUSH
21101: LD_INT 2
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: LD_INT 3
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 3
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: LD_INT 3
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 3
21165: NEG
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21200: LD_ADDR_VAR 0 30
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: LD_INT 1
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: LD_INT 2
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 1
21307: NEG
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 2
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: LD_INT 2
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: NEG
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: LD_INT 3
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 3
21412: PUSH
21413: LD_INT 2
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 3
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 2
21432: NEG
21433: PUSH
21434: LD_INT 1
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 3
21443: NEG
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21478: LD_ADDR_VAR 0 31
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: PUSH
21538: LD_INT 0
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: NEG
21548: PUSH
21549: LD_INT 1
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: LD_INT 1
21574: NEG
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 2
21582: PUSH
21583: LD_INT 0
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: LD_INT 2
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: NEG
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 2
21643: NEG
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 2
21655: NEG
21656: PUSH
21657: LD_INT 2
21659: NEG
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: NEG
21668: PUSH
21669: LD_INT 3
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 2
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 3
21721: NEG
21722: PUSH
21723: LD_INT 2
21725: NEG
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21756: LD_ADDR_VAR 0 32
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 2
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 2
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 1
21911: NEG
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 2
21922: NEG
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 2
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 3
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 2
21988: NEG
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 3
21999: NEG
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22034: LD_ADDR_VAR 0 33
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 2
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: LD_INT 1
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 2
22189: NEG
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: NEG
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: NEG
22225: PUSH
22226: LD_INT 3
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 3
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 3
22278: NEG
22279: PUSH
22280: LD_INT 2
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22313: LD_ADDR_VAR 0 34
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: NEG
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 2
22469: NEG
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 2
22480: NEG
22481: PUSH
22482: LD_INT 1
22484: NEG
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: LD_INT 2
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: LD_INT 3
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 2
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 3
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 3
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 2
22547: NEG
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 3
22558: NEG
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22593: LD_ADDR_VAR 0 35
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22705: LD_ADDR_VAR 0 36
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: LD_INT 2
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22817: LD_ADDR_VAR 0 37
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22929: LD_ADDR_VAR 0 38
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 2
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 2
23020: NEG
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23041: LD_ADDR_VAR 0 39
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: LD_INT 2
23126: NEG
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23153: LD_ADDR_VAR 0 40
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: LD_INT 1
23226: NEG
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23265: LD_ADDR_VAR 0 41
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: LD_INT 1
23285: NEG
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 1
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: LD_INT 2
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: LD_INT 1
23361: NEG
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 2
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 2
23420: NEG
23421: PUSH
23422: LD_INT 0
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 2
23431: NEG
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: LD_INT 2
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: NEG
23456: PUSH
23457: LD_INT 3
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 3
23508: PUSH
23509: LD_INT 3
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 3
23539: NEG
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 3
23550: NEG
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 3
23562: NEG
23563: PUSH
23564: LD_INT 2
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 3
23574: NEG
23575: PUSH
23576: LD_INT 3
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23615: LD_ADDR_VAR 0 42
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: LD_INT 1
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 2
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: LD_INT 2
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: LD_INT 2
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 2
23781: NEG
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: NEG
23806: PUSH
23807: LD_INT 3
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 3
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: LD_INT 2
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 3
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: LD_INT 3
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 3
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 3
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 3
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 3
23912: NEG
23913: PUSH
23914: LD_INT 2
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 3
23924: NEG
23925: PUSH
23926: LD_INT 3
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23965: LD_ADDR_VAR 0 43
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: LD_INT 2
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 2
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: NEG
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 2
24142: NEG
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 3
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: LD_INT 3
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 2
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 3
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 3
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: LD_INT 3
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 3
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 2
24250: NEG
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 3
24261: NEG
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 3
24272: NEG
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24313: LD_ADDR_VAR 0 44
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: LD_INT 2
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: NEG
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: NEG
24492: PUSH
24493: LD_INT 2
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: LD_INT 3
24507: NEG
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 3
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 3
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 3
24556: PUSH
24557: LD_INT 3
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 3
24587: NEG
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 3
24598: NEG
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 3
24610: NEG
24611: PUSH
24612: LD_INT 2
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 3
24622: NEG
24623: PUSH
24624: LD_INT 3
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24663: LD_ADDR_VAR 0 45
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: LD_INT 2
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: LD_INT 2
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 2
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: NEG
24854: PUSH
24855: LD_INT 3
24857: NEG
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: LD_INT 3
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: LD_INT 3
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 2
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 3
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: PUSH
24920: LD_INT 3
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 3
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: LD_INT 2
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 3
24960: NEG
24961: PUSH
24962: LD_INT 2
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 3
24972: NEG
24973: PUSH
24974: LD_INT 3
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25013: LD_ADDR_VAR 0 46
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: LD_INT 2
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: LD_INT 2
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 2
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: LD_INT 1
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: LD_INT 3
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: LD_INT 3
25217: NEG
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: LD_INT 2
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 3
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 3
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: LD_INT 3
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: LD_INT 3
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 2
25298: NEG
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 3
25309: NEG
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 3
25320: NEG
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25361: LD_ADDR_VAR 0 47
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 2
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 2
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: NEG
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: NEG
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25512: LD_ADDR_VAR 0 48
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: LD_INT 2
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 2
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25659: LD_ADDR_VAR 0 49
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: LD_INT 1
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25803: LD_ADDR_VAR 0 50
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: LD_INT 1
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 0
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: LD_INT 1
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25947: LD_ADDR_VAR 0 51
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26094: LD_ADDR_VAR 0 52
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 1
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: NEG
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26245: LD_ADDR_VAR 0 53
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: NEG
26327: PUSH
26328: LD_INT 2
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 2
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 2
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 2
26421: NEG
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 2
26444: NEG
26445: PUSH
26446: LD_INT 2
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26475: LD_ADDR_VAR 0 54
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 2
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: LD_INT 2
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 2
26662: NEG
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: LD_INT 2
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26705: LD_ADDR_VAR 0 55
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: NEG
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: LD_INT 2
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 2
26801: NEG
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: NEG
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 2
26892: NEG
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 2
26904: NEG
26905: PUSH
26906: LD_INT 2
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26935: LD_ADDR_VAR 0 56
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 2
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 2
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 2
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: NEG
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: NEG
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 2
27122: NEG
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27165: LD_ADDR_VAR 0 57
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 2
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 2
27352: NEG
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27395: LD_ADDR_VAR 0 58
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: LD_INT 2
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: NEG
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 2
27582: NEG
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: LD_INT 2
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27625: LD_ADDR_VAR 0 59
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27713: LD_ADDR_VAR 0 60
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27801: LD_ADDR_VAR 0 61
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27889: LD_ADDR_VAR 0 62
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: NEG
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27977: LD_ADDR_VAR 0 63
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: LD_INT 0
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28065: LD_ADDR_VAR 0 64
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: ST_TO_ADDR
// end ; 1 :
28153: GO 34050
28155: LD_INT 1
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 30786
28163: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28164: LD_ADDR_VAR 0 11
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: LD_INT 3
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: LD_INT 3
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28208: LD_ADDR_VAR 0 12
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 3
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 3
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28249: LD_ADDR_VAR 0 13
28253: PUSH
28254: LD_INT 3
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 3
28266: PUSH
28267: LD_INT 3
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: LD_INT 3
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28289: LD_ADDR_VAR 0 14
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: LD_INT 3
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: LD_INT 3
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 1
28316: NEG
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28330: LD_ADDR_VAR 0 15
28334: PUSH
28335: LD_INT 2
28337: NEG
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 3
28348: NEG
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 3
28359: NEG
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28374: LD_ADDR_VAR 0 16
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: LD_INT 3
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 3
28393: NEG
28394: PUSH
28395: LD_INT 2
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 3
28405: NEG
28406: PUSH
28407: LD_INT 3
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28420: LD_ADDR_VAR 0 17
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 3
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: LD_INT 3
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 2
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28464: LD_ADDR_VAR 0 18
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 3
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28505: LD_ADDR_VAR 0 19
28509: PUSH
28510: LD_INT 3
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 3
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28545: LD_ADDR_VAR 0 20
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 3
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 3
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 2
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28586: LD_ADDR_VAR 0 21
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 3
28604: NEG
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 3
28615: NEG
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28630: LD_ADDR_VAR 0 22
28634: PUSH
28635: LD_INT 2
28637: NEG
28638: PUSH
28639: LD_INT 3
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 3
28649: NEG
28650: PUSH
28651: LD_INT 2
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 3
28661: NEG
28662: PUSH
28663: LD_INT 3
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: LIST
28675: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28676: LD_ADDR_VAR 0 23
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 3
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: LD_INT 4
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: LD_INT 3
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28720: LD_ADDR_VAR 0 24
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 4
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28761: LD_ADDR_VAR 0 25
28765: PUSH
28766: LD_INT 3
28768: PUSH
28769: LD_INT 3
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 4
28778: PUSH
28779: LD_INT 3
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: LD_INT 4
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28801: LD_ADDR_VAR 0 26
28805: PUSH
28806: LD_INT 0
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: LD_INT 4
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: LD_INT 3
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28842: LD_ADDR_VAR 0 27
28846: PUSH
28847: LD_INT 3
28849: NEG
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 3
28860: NEG
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 4
28871: NEG
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28886: LD_ADDR_VAR 0 28
28890: PUSH
28891: LD_INT 3
28893: NEG
28894: PUSH
28895: LD_INT 3
28897: NEG
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 3
28905: NEG
28906: PUSH
28907: LD_INT 4
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 4
28917: NEG
28918: PUSH
28919: LD_INT 3
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28932: LD_ADDR_VAR 0 29
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 3
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 3
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 2
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PUSH
28975: LD_INT 4
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: LD_INT 4
28988: NEG
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 3
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 5
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 5
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 4
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: LD_INT 6
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 6
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 5
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29087: LD_ADDR_VAR 0 30
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 4
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 4
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 4
29156: PUSH
29157: LD_INT 1
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 5
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 5
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 5
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 6
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 6
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29230: LD_ADDR_VAR 0 31
29234: PUSH
29235: LD_INT 3
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 3
29247: PUSH
29248: LD_INT 3
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 4
29267: PUSH
29268: LD_INT 3
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 4
29277: PUSH
29278: LD_INT 4
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 3
29287: PUSH
29288: LD_INT 4
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 5
29297: PUSH
29298: LD_INT 4
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 5
29307: PUSH
29308: LD_INT 5
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 4
29317: PUSH
29318: LD_INT 5
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 6
29327: PUSH
29328: LD_INT 5
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 6
29337: PUSH
29338: LD_INT 6
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 5
29347: PUSH
29348: LD_INT 6
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29369: LD_ADDR_VAR 0 32
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 3
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 2
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: LD_INT 4
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: LD_INT 4
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: LD_INT 5
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 5
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 4
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: LD_INT 6
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 6
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 5
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29512: LD_ADDR_VAR 0 33
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 3
29530: NEG
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 3
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 3
29553: NEG
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 4
29564: NEG
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 4
29575: NEG
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 4
29587: NEG
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 5
29598: NEG
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 5
29609: NEG
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 5
29621: NEG
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 6
29632: NEG
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 6
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29667: LD_ADDR_VAR 0 34
29671: PUSH
29672: LD_INT 2
29674: NEG
29675: PUSH
29676: LD_INT 3
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 3
29686: NEG
29687: PUSH
29688: LD_INT 2
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 3
29710: NEG
29711: PUSH
29712: LD_INT 4
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 4
29722: NEG
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 4
29734: NEG
29735: PUSH
29736: LD_INT 4
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 4
29746: NEG
29747: PUSH
29748: LD_INT 5
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 5
29758: NEG
29759: PUSH
29760: LD_INT 4
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 5
29770: NEG
29771: PUSH
29772: LD_INT 5
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 5
29782: NEG
29783: PUSH
29784: LD_INT 6
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 6
29794: NEG
29795: PUSH
29796: LD_INT 5
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 6
29806: NEG
29807: PUSH
29808: LD_INT 6
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29830: LD_ADDR_VAR 0 41
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 2
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29874: LD_ADDR_VAR 0 42
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: LIST
29914: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29915: LD_ADDR_VAR 0 43
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: LD_INT 2
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29955: LD_ADDR_VAR 0 44
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 3
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: LD_INT 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29996: LD_ADDR_VAR 0 45
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30040: LD_ADDR_VAR 0 46
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 2
30059: NEG
30060: PUSH
30061: LD_INT 3
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 3
30071: NEG
30072: PUSH
30073: LD_INT 2
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30086: LD_ADDR_VAR 0 47
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: LD_INT 3
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: LD_INT 3
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30119: LD_ADDR_VAR 0 48
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30150: LD_ADDR_VAR 0 49
30154: PUSH
30155: LD_INT 3
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 3
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30179: LD_ADDR_VAR 0 50
30183: PUSH
30184: LD_INT 2
30186: PUSH
30187: LD_INT 3
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: LD_INT 3
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30208: LD_ADDR_VAR 0 51
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30239: LD_ADDR_VAR 0 52
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 3
30258: NEG
30259: PUSH
30260: LD_INT 2
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30272: LD_ADDR_VAR 0 53
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: LD_INT 3
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 3
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: LD_INT 2
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30316: LD_ADDR_VAR 0 54
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 3
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 3
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30357: LD_ADDR_VAR 0 55
30361: PUSH
30362: LD_INT 3
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: PUSH
30385: LD_INT 3
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30397: LD_ADDR_VAR 0 56
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 0
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30438: LD_ADDR_VAR 0 57
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30482: LD_ADDR_VAR 0 58
30486: PUSH
30487: LD_INT 2
30489: NEG
30490: PUSH
30491: LD_INT 3
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 3
30513: NEG
30514: PUSH
30515: LD_INT 3
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30528: LD_ADDR_VAR 0 59
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: LD_INT 2
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30572: LD_ADDR_VAR 0 60
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 1
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30613: LD_ADDR_VAR 0 61
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30653: LD_ADDR_VAR 0 62
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30694: LD_ADDR_VAR 0 63
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 2
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30738: LD_ADDR_VAR 0 64
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: NEG
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// end ; 2 :
30784: GO 34050
30786: LD_INT 2
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 34049
30794: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30795: LD_ADDR_VAR 0 29
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 4
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 5
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 4
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: LD_INT 1
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: LD_INT 2
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 5
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 3
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 3
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 4
30915: PUSH
30916: LD_INT 3
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 4
30925: PUSH
30926: LD_INT 4
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: LD_INT 4
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 2
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 4
30965: PUSH
30966: LD_INT 2
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: LD_INT 4
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: LD_INT 4
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 4
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: LD_INT 5
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 4
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: LD_INT 3
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 5
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: LD_INT 3
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 3
31089: NEG
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: NEG
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 4
31134: NEG
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 4
31145: NEG
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 4
31157: NEG
31158: PUSH
31159: LD_INT 2
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 4
31180: NEG
31181: PUSH
31182: LD_INT 4
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 4
31192: NEG
31193: PUSH
31194: LD_INT 5
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 3
31204: NEG
31205: PUSH
31206: LD_INT 4
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 3
31216: NEG
31217: PUSH
31218: LD_INT 3
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 4
31228: NEG
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 5
31240: NEG
31241: PUSH
31242: LD_INT 4
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 5
31252: NEG
31253: PUSH
31254: LD_INT 5
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: NEG
31265: PUSH
31266: LD_INT 5
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 5
31276: NEG
31277: PUSH
31278: LD_INT 3
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31333: LD_ADDR_VAR 0 30
31337: PUSH
31338: LD_INT 4
31340: PUSH
31341: LD_INT 4
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 4
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 5
31360: PUSH
31361: LD_INT 4
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 5
31370: PUSH
31371: LD_INT 5
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 4
31380: PUSH
31381: LD_INT 5
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 3
31390: PUSH
31391: LD_INT 4
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 3
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 5
31410: PUSH
31411: LD_INT 3
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: LD_INT 5
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 3
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 4
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 4
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 2
31512: NEG
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 4
31523: NEG
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 4
31534: NEG
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 4
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 5
31579: NEG
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 5
31590: NEG
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 5
31602: NEG
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: NEG
31638: PUSH
31639: LD_INT 4
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: NEG
31650: PUSH
31651: LD_INT 3
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 3
31673: NEG
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 4
31685: NEG
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 4
31697: NEG
31698: PUSH
31699: LD_INT 4
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: LD_INT 4
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 4
31721: NEG
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 4
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: LD_INT 5
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: LD_INT 4
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 3
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 3
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 4
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 5
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: LD_INT 5
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31880: LD_ADDR_VAR 0 31
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 4
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 3
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 4
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: LD_INT 5
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 5
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: LD_INT 3
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 5
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 3
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 3
31980: NEG
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: NEG
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 3
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 4
32036: NEG
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 4
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 4
32059: NEG
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 4
32082: NEG
32083: PUSH
32084: LD_INT 4
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 4
32094: NEG
32095: PUSH
32096: LD_INT 5
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: NEG
32107: PUSH
32108: LD_INT 4
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 3
32118: NEG
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 4
32130: NEG
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 5
32142: NEG
32143: PUSH
32144: LD_INT 4
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 5
32154: NEG
32155: PUSH
32156: LD_INT 5
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: NEG
32167: PUSH
32168: LD_INT 5
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 5
32178: NEG
32179: PUSH
32180: LD_INT 3
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 3
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 4
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 3
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: LD_INT 2
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 2
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 4
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: LD_INT 4
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 4
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 5
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 5
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 4
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 3
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 3
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 5
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32430: LD_ADDR_VAR 0 32
32434: PUSH
32435: LD_INT 4
32437: NEG
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 4
32448: NEG
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: NEG
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 4
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 5
32493: NEG
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 5
32504: NEG
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 5
32516: NEG
32517: PUSH
32518: LD_INT 2
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 3
32528: NEG
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 3
32539: NEG
32540: PUSH
32541: LD_INT 3
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: NEG
32552: PUSH
32553: LD_INT 4
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 2
32575: NEG
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 3
32587: NEG
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 4
32599: NEG
32600: PUSH
32601: LD_INT 3
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 4
32611: NEG
32612: PUSH
32613: LD_INT 4
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 4
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 4
32635: NEG
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: LD_INT 4
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: LD_INT 5
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: LD_INT 4
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 3
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: LD_INT 4
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: LD_INT 5
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: LD_INT 3
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: LD_INT 5
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 4
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 2
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 4
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 4
32842: PUSH
32843: LD_INT 4
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 4
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 5
32862: PUSH
32863: LD_INT 4
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 5
32872: PUSH
32873: LD_INT 5
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 4
32882: PUSH
32883: LD_INT 5
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: LD_INT 4
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 5
32912: PUSH
32913: LD_INT 3
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32977: LD_ADDR_VAR 0 33
32981: PUSH
32982: LD_INT 4
32984: NEG
32985: PUSH
32986: LD_INT 4
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 4
32996: NEG
32997: PUSH
32998: LD_INT 5
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: NEG
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 3
33020: NEG
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 4
33032: NEG
33033: PUSH
33034: LD_INT 3
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 5
33044: NEG
33045: PUSH
33046: LD_INT 4
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 5
33056: NEG
33057: PUSH
33058: LD_INT 5
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 3
33068: NEG
33069: PUSH
33070: LD_INT 5
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 5
33080: NEG
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 4
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: LD_INT 2
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 2
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 3
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 2
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: LD_INT 4
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 5
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 5
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 4
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 3
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 3
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 5
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 3
33287: PUSH
33288: LD_INT 3
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 3
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: LD_INT 3
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 4
33317: PUSH
33318: LD_INT 4
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: LD_INT 4
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 4
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: LD_INT 4
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: LD_INT 5
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 5
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 2
33459: NEG
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33515: LD_ADDR_VAR 0 34
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 4
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 5
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: LD_INT 4
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 3
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 3
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: LD_INT 4
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: LD_INT 5
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 3
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: NEG
33613: PUSH
33614: LD_INT 5
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 3
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 3
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 2
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 4
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 4
33717: PUSH
33718: LD_INT 4
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 5
33737: PUSH
33738: LD_INT 4
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: PUSH
33748: LD_INT 5
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 4
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: LD_INT 4
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 5
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 3
33797: PUSH
33798: LD_INT 5
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 3
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 4
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 4
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 4
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 4
33900: NEG
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 4
33911: NEG
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: NEG
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 3
33934: NEG
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 4
33945: NEG
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 5
33956: NEG
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 5
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 5
33979: NEG
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 3
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// end ; end ;
34047: GO 34050
34049: POP
// case btype of b_depot , b_warehouse :
34050: LD_VAR 0 1
34054: PUSH
34055: LD_INT 0
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34069
34061: LD_INT 1
34063: DOUBLE
34064: EQUAL
34065: IFTRUE 34069
34067: GO 34270
34069: POP
// case nation of nation_american :
34070: LD_VAR 0 5
34074: PUSH
34075: LD_INT 1
34077: DOUBLE
34078: EQUAL
34079: IFTRUE 34083
34081: GO 34139
34083: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34084: LD_ADDR_VAR 0 9
34088: PUSH
34089: LD_VAR 0 11
34093: PUSH
34094: LD_VAR 0 12
34098: PUSH
34099: LD_VAR 0 13
34103: PUSH
34104: LD_VAR 0 14
34108: PUSH
34109: LD_VAR 0 15
34113: PUSH
34114: LD_VAR 0 16
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: PUSH
34127: LD_VAR 0 4
34131: PUSH
34132: LD_INT 1
34134: PLUS
34135: ARRAY
34136: ST_TO_ADDR
34137: GO 34268
34139: LD_INT 2
34141: DOUBLE
34142: EQUAL
34143: IFTRUE 34147
34145: GO 34203
34147: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34148: LD_ADDR_VAR 0 9
34152: PUSH
34153: LD_VAR 0 17
34157: PUSH
34158: LD_VAR 0 18
34162: PUSH
34163: LD_VAR 0 19
34167: PUSH
34168: LD_VAR 0 20
34172: PUSH
34173: LD_VAR 0 21
34177: PUSH
34178: LD_VAR 0 22
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: PUSH
34191: LD_VAR 0 4
34195: PUSH
34196: LD_INT 1
34198: PLUS
34199: ARRAY
34200: ST_TO_ADDR
34201: GO 34268
34203: LD_INT 3
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34211
34209: GO 34267
34211: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34212: LD_ADDR_VAR 0 9
34216: PUSH
34217: LD_VAR 0 23
34221: PUSH
34222: LD_VAR 0 24
34226: PUSH
34227: LD_VAR 0 25
34231: PUSH
34232: LD_VAR 0 26
34236: PUSH
34237: LD_VAR 0 27
34241: PUSH
34242: LD_VAR 0 28
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: PUSH
34255: LD_VAR 0 4
34259: PUSH
34260: LD_INT 1
34262: PLUS
34263: ARRAY
34264: ST_TO_ADDR
34265: GO 34268
34267: POP
34268: GO 34823
34270: LD_INT 2
34272: DOUBLE
34273: EQUAL
34274: IFTRUE 34284
34276: LD_INT 3
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34284
34282: GO 34340
34284: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34285: LD_ADDR_VAR 0 9
34289: PUSH
34290: LD_VAR 0 29
34294: PUSH
34295: LD_VAR 0 30
34299: PUSH
34300: LD_VAR 0 31
34304: PUSH
34305: LD_VAR 0 32
34309: PUSH
34310: LD_VAR 0 33
34314: PUSH
34315: LD_VAR 0 34
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: PUSH
34328: LD_VAR 0 4
34332: PUSH
34333: LD_INT 1
34335: PLUS
34336: ARRAY
34337: ST_TO_ADDR
34338: GO 34823
34340: LD_INT 16
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34402
34346: LD_INT 17
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34402
34352: LD_INT 18
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34402
34358: LD_INT 19
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34402
34364: LD_INT 22
34366: DOUBLE
34367: EQUAL
34368: IFTRUE 34402
34370: LD_INT 20
34372: DOUBLE
34373: EQUAL
34374: IFTRUE 34402
34376: LD_INT 21
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34402
34382: LD_INT 23
34384: DOUBLE
34385: EQUAL
34386: IFTRUE 34402
34388: LD_INT 24
34390: DOUBLE
34391: EQUAL
34392: IFTRUE 34402
34394: LD_INT 25
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34402
34400: GO 34458
34402: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34403: LD_ADDR_VAR 0 9
34407: PUSH
34408: LD_VAR 0 35
34412: PUSH
34413: LD_VAR 0 36
34417: PUSH
34418: LD_VAR 0 37
34422: PUSH
34423: LD_VAR 0 38
34427: PUSH
34428: LD_VAR 0 39
34432: PUSH
34433: LD_VAR 0 40
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: PUSH
34446: LD_VAR 0 4
34450: PUSH
34451: LD_INT 1
34453: PLUS
34454: ARRAY
34455: ST_TO_ADDR
34456: GO 34823
34458: LD_INT 6
34460: DOUBLE
34461: EQUAL
34462: IFTRUE 34514
34464: LD_INT 7
34466: DOUBLE
34467: EQUAL
34468: IFTRUE 34514
34470: LD_INT 8
34472: DOUBLE
34473: EQUAL
34474: IFTRUE 34514
34476: LD_INT 13
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34514
34482: LD_INT 12
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34514
34488: LD_INT 15
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34514
34494: LD_INT 11
34496: DOUBLE
34497: EQUAL
34498: IFTRUE 34514
34500: LD_INT 14
34502: DOUBLE
34503: EQUAL
34504: IFTRUE 34514
34506: LD_INT 10
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34570
34514: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34515: LD_ADDR_VAR 0 9
34519: PUSH
34520: LD_VAR 0 41
34524: PUSH
34525: LD_VAR 0 42
34529: PUSH
34530: LD_VAR 0 43
34534: PUSH
34535: LD_VAR 0 44
34539: PUSH
34540: LD_VAR 0 45
34544: PUSH
34545: LD_VAR 0 46
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: PUSH
34558: LD_VAR 0 4
34562: PUSH
34563: LD_INT 1
34565: PLUS
34566: ARRAY
34567: ST_TO_ADDR
34568: GO 34823
34570: LD_INT 36
34572: DOUBLE
34573: EQUAL
34574: IFTRUE 34578
34576: GO 34634
34578: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34579: LD_ADDR_VAR 0 9
34583: PUSH
34584: LD_VAR 0 47
34588: PUSH
34589: LD_VAR 0 48
34593: PUSH
34594: LD_VAR 0 49
34598: PUSH
34599: LD_VAR 0 50
34603: PUSH
34604: LD_VAR 0 51
34608: PUSH
34609: LD_VAR 0 52
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: PUSH
34622: LD_VAR 0 4
34626: PUSH
34627: LD_INT 1
34629: PLUS
34630: ARRAY
34631: ST_TO_ADDR
34632: GO 34823
34634: LD_INT 4
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34660
34640: LD_INT 5
34642: DOUBLE
34643: EQUAL
34644: IFTRUE 34660
34646: LD_INT 34
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34660
34652: LD_INT 37
34654: DOUBLE
34655: EQUAL
34656: IFTRUE 34660
34658: GO 34716
34660: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34661: LD_ADDR_VAR 0 9
34665: PUSH
34666: LD_VAR 0 53
34670: PUSH
34671: LD_VAR 0 54
34675: PUSH
34676: LD_VAR 0 55
34680: PUSH
34681: LD_VAR 0 56
34685: PUSH
34686: LD_VAR 0 57
34690: PUSH
34691: LD_VAR 0 58
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: PUSH
34704: LD_VAR 0 4
34708: PUSH
34709: LD_INT 1
34711: PLUS
34712: ARRAY
34713: ST_TO_ADDR
34714: GO 34823
34716: LD_INT 31
34718: DOUBLE
34719: EQUAL
34720: IFTRUE 34766
34722: LD_INT 32
34724: DOUBLE
34725: EQUAL
34726: IFTRUE 34766
34728: LD_INT 33
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34766
34734: LD_INT 27
34736: DOUBLE
34737: EQUAL
34738: IFTRUE 34766
34740: LD_INT 26
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34766
34746: LD_INT 28
34748: DOUBLE
34749: EQUAL
34750: IFTRUE 34766
34752: LD_INT 29
34754: DOUBLE
34755: EQUAL
34756: IFTRUE 34766
34758: LD_INT 30
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 34822
34766: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34767: LD_ADDR_VAR 0 9
34771: PUSH
34772: LD_VAR 0 59
34776: PUSH
34777: LD_VAR 0 60
34781: PUSH
34782: LD_VAR 0 61
34786: PUSH
34787: LD_VAR 0 62
34791: PUSH
34792: LD_VAR 0 63
34796: PUSH
34797: LD_VAR 0 64
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: PUSH
34810: LD_VAR 0 4
34814: PUSH
34815: LD_INT 1
34817: PLUS
34818: ARRAY
34819: ST_TO_ADDR
34820: GO 34823
34822: POP
// temp_list2 = [ ] ;
34823: LD_ADDR_VAR 0 10
34827: PUSH
34828: EMPTY
34829: ST_TO_ADDR
// for i in temp_list do
34830: LD_ADDR_VAR 0 8
34834: PUSH
34835: LD_VAR 0 9
34839: PUSH
34840: FOR_IN
34841: IFFALSE 34893
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34843: LD_ADDR_VAR 0 10
34847: PUSH
34848: LD_VAR 0 10
34852: PUSH
34853: LD_VAR 0 8
34857: PUSH
34858: LD_INT 1
34860: ARRAY
34861: PUSH
34862: LD_VAR 0 2
34866: PLUS
34867: PUSH
34868: LD_VAR 0 8
34872: PUSH
34873: LD_INT 2
34875: ARRAY
34876: PUSH
34877: LD_VAR 0 3
34881: PLUS
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: EMPTY
34888: LIST
34889: ADD
34890: ST_TO_ADDR
34891: GO 34840
34893: POP
34894: POP
// result = temp_list2 ;
34895: LD_ADDR_VAR 0 7
34899: PUSH
34900: LD_VAR 0 10
34904: ST_TO_ADDR
// end ;
34905: LD_VAR 0 7
34909: RET
// export function EnemyInRange ( unit , dist ) ; begin
34910: LD_INT 0
34912: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34913: LD_ADDR_VAR 0 3
34917: PUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 255
34927: PPUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL_OW 250
34937: PPUSH
34938: LD_VAR 0 1
34942: PPUSH
34943: CALL_OW 251
34947: PPUSH
34948: LD_VAR 0 2
34952: PPUSH
34953: CALL 8167 0 4
34957: PUSH
34958: LD_INT 4
34960: ARRAY
34961: ST_TO_ADDR
// end ;
34962: LD_VAR 0 3
34966: RET
// export function PlayerSeeMe ( unit ) ; begin
34967: LD_INT 0
34969: PPUSH
// result := See ( your_side , unit ) ;
34970: LD_ADDR_VAR 0 2
34974: PUSH
34975: LD_OWVAR 2
34979: PPUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 292
34989: ST_TO_ADDR
// end ;
34990: LD_VAR 0 2
34994: RET
// export function ReverseDir ( unit ) ; begin
34995: LD_INT 0
34997: PPUSH
// if not unit then
34998: LD_VAR 0 1
35002: NOT
35003: IFFALSE 35007
// exit ;
35005: GO 35030
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35007: LD_ADDR_VAR 0 2
35011: PUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: CALL_OW 254
35021: PUSH
35022: LD_INT 3
35024: PLUS
35025: PUSH
35026: LD_INT 6
35028: MOD
35029: ST_TO_ADDR
// end ;
35030: LD_VAR 0 2
35034: RET
// export function ReverseArray ( array ) ; var i ; begin
35035: LD_INT 0
35037: PPUSH
35038: PPUSH
// if not array then
35039: LD_VAR 0 1
35043: NOT
35044: IFFALSE 35048
// exit ;
35046: GO 35103
// result := [ ] ;
35048: LD_ADDR_VAR 0 2
35052: PUSH
35053: EMPTY
35054: ST_TO_ADDR
// for i := array downto 1 do
35055: LD_ADDR_VAR 0 3
35059: PUSH
35060: DOUBLE
35061: LD_VAR 0 1
35065: INC
35066: ST_TO_ADDR
35067: LD_INT 1
35069: PUSH
35070: FOR_DOWNTO
35071: IFFALSE 35101
// result := Join ( result , array [ i ] ) ;
35073: LD_ADDR_VAR 0 2
35077: PUSH
35078: LD_VAR 0 2
35082: PPUSH
35083: LD_VAR 0 1
35087: PUSH
35088: LD_VAR 0 3
35092: ARRAY
35093: PPUSH
35094: CALL 39945 0 2
35098: ST_TO_ADDR
35099: GO 35070
35101: POP
35102: POP
// end ;
35103: LD_VAR 0 2
35107: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35108: LD_INT 0
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
// if not unit or not hexes then
35116: LD_VAR 0 1
35120: NOT
35121: IFTRUE 35130
35123: PUSH
35124: LD_VAR 0 2
35128: NOT
35129: OR
35130: IFFALSE 35134
// exit ;
35132: GO 35257
// dist := 9999 ;
35134: LD_ADDR_VAR 0 5
35138: PUSH
35139: LD_INT 9999
35141: ST_TO_ADDR
// for i = 1 to hexes do
35142: LD_ADDR_VAR 0 4
35146: PUSH
35147: DOUBLE
35148: LD_INT 1
35150: DEC
35151: ST_TO_ADDR
35152: LD_VAR 0 2
35156: PUSH
35157: FOR_TO
35158: IFFALSE 35245
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35160: LD_ADDR_VAR 0 6
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: LD_VAR 0 2
35174: PUSH
35175: LD_VAR 0 4
35179: ARRAY
35180: PUSH
35181: LD_INT 1
35183: ARRAY
35184: PPUSH
35185: LD_VAR 0 2
35189: PUSH
35190: LD_VAR 0 4
35194: ARRAY
35195: PUSH
35196: LD_INT 2
35198: ARRAY
35199: PPUSH
35200: CALL_OW 297
35204: ST_TO_ADDR
// if tdist < dist then
35205: LD_VAR 0 6
35209: PUSH
35210: LD_VAR 0 5
35214: LESS
35215: IFFALSE 35243
// begin hex := hexes [ i ] ;
35217: LD_ADDR_VAR 0 8
35221: PUSH
35222: LD_VAR 0 2
35226: PUSH
35227: LD_VAR 0 4
35231: ARRAY
35232: ST_TO_ADDR
// dist := tdist ;
35233: LD_ADDR_VAR 0 5
35237: PUSH
35238: LD_VAR 0 6
35242: ST_TO_ADDR
// end ; end ;
35243: GO 35157
35245: POP
35246: POP
// result := hex ;
35247: LD_ADDR_VAR 0 3
35251: PUSH
35252: LD_VAR 0 8
35256: ST_TO_ADDR
// end ;
35257: LD_VAR 0 3
35261: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35262: LD_INT 0
35264: PPUSH
35265: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35266: LD_VAR 0 1
35270: NOT
35271: IFTRUE 35310
35273: PUSH
35274: LD_VAR 0 1
35278: PUSH
35279: LD_INT 21
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 23
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PPUSH
35303: CALL_OW 69
35307: IN
35308: NOT
35309: OR
35310: IFFALSE 35314
// exit ;
35312: GO 35361
// for i = 1 to 3 do
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: DOUBLE
35320: LD_INT 1
35322: DEC
35323: ST_TO_ADDR
35324: LD_INT 3
35326: PUSH
35327: FOR_TO
35328: IFFALSE 35359
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35330: LD_VAR 0 1
35334: PPUSH
35335: CALL_OW 250
35339: PPUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: CALL_OW 251
35349: PPUSH
35350: LD_INT 1
35352: PPUSH
35353: CALL_OW 453
35357: GO 35327
35359: POP
35360: POP
// end ;
35361: LD_VAR 0 2
35365: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35366: LD_INT 0
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
// if not unit or not enemy_unit then
35374: LD_VAR 0 1
35378: NOT
35379: IFTRUE 35388
35381: PUSH
35382: LD_VAR 0 2
35386: NOT
35387: OR
35388: IFFALSE 35392
// exit ;
35390: GO 35863
// if GetLives ( i ) < 250 then
35392: LD_VAR 0 4
35396: PPUSH
35397: CALL_OW 256
35401: PUSH
35402: LD_INT 250
35404: LESS
35405: IFFALSE 35418
// begin ComAutodestruct ( i ) ;
35407: LD_VAR 0 4
35411: PPUSH
35412: CALL 35262 0 1
// exit ;
35416: GO 35863
// end ; x := GetX ( enemy_unit ) ;
35418: LD_ADDR_VAR 0 7
35422: PUSH
35423: LD_VAR 0 2
35427: PPUSH
35428: CALL_OW 250
35432: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35433: LD_ADDR_VAR 0 8
35437: PUSH
35438: LD_VAR 0 2
35442: PPUSH
35443: CALL_OW 251
35447: ST_TO_ADDR
// if not x or not y then
35448: LD_VAR 0 7
35452: NOT
35453: IFTRUE 35462
35455: PUSH
35456: LD_VAR 0 8
35460: NOT
35461: OR
35462: IFFALSE 35466
// exit ;
35464: GO 35863
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35466: LD_ADDR_VAR 0 6
35470: PUSH
35471: LD_VAR 0 7
35475: PPUSH
35476: LD_INT 0
35478: PPUSH
35479: LD_INT 4
35481: PPUSH
35482: CALL_OW 272
35486: PUSH
35487: LD_VAR 0 8
35491: PPUSH
35492: LD_INT 0
35494: PPUSH
35495: LD_INT 4
35497: PPUSH
35498: CALL_OW 273
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_VAR 0 7
35511: PPUSH
35512: LD_INT 1
35514: PPUSH
35515: LD_INT 4
35517: PPUSH
35518: CALL_OW 272
35522: PUSH
35523: LD_VAR 0 8
35527: PPUSH
35528: LD_INT 1
35530: PPUSH
35531: LD_INT 4
35533: PPUSH
35534: CALL_OW 273
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_VAR 0 7
35547: PPUSH
35548: LD_INT 2
35550: PPUSH
35551: LD_INT 4
35553: PPUSH
35554: CALL_OW 272
35558: PUSH
35559: LD_VAR 0 8
35563: PPUSH
35564: LD_INT 2
35566: PPUSH
35567: LD_INT 4
35569: PPUSH
35570: CALL_OW 273
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_VAR 0 7
35583: PPUSH
35584: LD_INT 3
35586: PPUSH
35587: LD_INT 4
35589: PPUSH
35590: CALL_OW 272
35594: PUSH
35595: LD_VAR 0 8
35599: PPUSH
35600: LD_INT 3
35602: PPUSH
35603: LD_INT 4
35605: PPUSH
35606: CALL_OW 273
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_VAR 0 7
35619: PPUSH
35620: LD_INT 4
35622: PPUSH
35623: LD_INT 4
35625: PPUSH
35626: CALL_OW 272
35630: PUSH
35631: LD_VAR 0 8
35635: PPUSH
35636: LD_INT 4
35638: PPUSH
35639: LD_INT 4
35641: PPUSH
35642: CALL_OW 273
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_VAR 0 7
35655: PPUSH
35656: LD_INT 5
35658: PPUSH
35659: LD_INT 4
35661: PPUSH
35662: CALL_OW 272
35666: PUSH
35667: LD_VAR 0 8
35671: PPUSH
35672: LD_INT 5
35674: PPUSH
35675: LD_INT 4
35677: PPUSH
35678: CALL_OW 273
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
// for i = tmp downto 1 do
35695: LD_ADDR_VAR 0 4
35699: PUSH
35700: DOUBLE
35701: LD_VAR 0 6
35705: INC
35706: ST_TO_ADDR
35707: LD_INT 1
35709: PUSH
35710: FOR_DOWNTO
35711: IFFALSE 35814
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35713: LD_VAR 0 6
35717: PUSH
35718: LD_VAR 0 4
35722: ARRAY
35723: PUSH
35724: LD_INT 1
35726: ARRAY
35727: PPUSH
35728: LD_VAR 0 6
35732: PUSH
35733: LD_VAR 0 4
35737: ARRAY
35738: PUSH
35739: LD_INT 2
35741: ARRAY
35742: PPUSH
35743: CALL_OW 488
35747: NOT
35748: IFTRUE 35790
35750: PUSH
35751: LD_VAR 0 6
35755: PUSH
35756: LD_VAR 0 4
35760: ARRAY
35761: PUSH
35762: LD_INT 1
35764: ARRAY
35765: PPUSH
35766: LD_VAR 0 6
35770: PUSH
35771: LD_VAR 0 4
35775: ARRAY
35776: PUSH
35777: LD_INT 2
35779: ARRAY
35780: PPUSH
35781: CALL_OW 428
35785: PUSH
35786: LD_INT 0
35788: NONEQUAL
35789: OR
35790: IFFALSE 35812
// tmp := Delete ( tmp , i ) ;
35792: LD_ADDR_VAR 0 6
35796: PUSH
35797: LD_VAR 0 6
35801: PPUSH
35802: LD_VAR 0 4
35806: PPUSH
35807: CALL_OW 3
35811: ST_TO_ADDR
35812: GO 35710
35814: POP
35815: POP
// j := GetClosestHex ( unit , tmp ) ;
35816: LD_ADDR_VAR 0 5
35820: PUSH
35821: LD_VAR 0 1
35825: PPUSH
35826: LD_VAR 0 6
35830: PPUSH
35831: CALL 35108 0 2
35835: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35836: LD_VAR 0 1
35840: PPUSH
35841: LD_VAR 0 5
35845: PUSH
35846: LD_INT 1
35848: ARRAY
35849: PPUSH
35850: LD_VAR 0 5
35854: PUSH
35855: LD_INT 2
35857: ARRAY
35858: PPUSH
35859: CALL_OW 111
// end ;
35863: LD_VAR 0 3
35867: RET
// export function PrepareApemanSoldier ( ) ; begin
35868: LD_INT 0
35870: PPUSH
// uc_nation := 0 ;
35871: LD_ADDR_OWVAR 21
35875: PUSH
35876: LD_INT 0
35878: ST_TO_ADDR
// hc_sex := sex_male ;
35879: LD_ADDR_OWVAR 27
35883: PUSH
35884: LD_INT 1
35886: ST_TO_ADDR
// hc_name :=  ;
35887: LD_ADDR_OWVAR 26
35891: PUSH
35892: LD_STRING 
35894: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35895: LD_ADDR_OWVAR 28
35899: PUSH
35900: LD_INT 15
35902: ST_TO_ADDR
// hc_gallery :=  ;
35903: LD_ADDR_OWVAR 33
35907: PUSH
35908: LD_STRING 
35910: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35911: LD_ADDR_OWVAR 31
35915: PUSH
35916: LD_INT 0
35918: PPUSH
35919: LD_INT 3
35921: PPUSH
35922: CALL_OW 12
35926: PUSH
35927: LD_INT 0
35929: PPUSH
35930: LD_INT 3
35932: PPUSH
35933: CALL_OW 12
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35950: LD_ADDR_OWVAR 29
35954: PUSH
35955: LD_INT 12
35957: PUSH
35958: LD_INT 12
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: ST_TO_ADDR
// end ;
35965: LD_VAR 0 1
35969: RET
// export function PrepareApemanEngineer ( ) ; begin
35970: LD_INT 0
35972: PPUSH
// uc_nation := 0 ;
35973: LD_ADDR_OWVAR 21
35977: PUSH
35978: LD_INT 0
35980: ST_TO_ADDR
// hc_sex := sex_male ;
35981: LD_ADDR_OWVAR 27
35985: PUSH
35986: LD_INT 1
35988: ST_TO_ADDR
// hc_name :=  ;
35989: LD_ADDR_OWVAR 26
35993: PUSH
35994: LD_STRING 
35996: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35997: LD_ADDR_OWVAR 28
36001: PUSH
36002: LD_INT 16
36004: ST_TO_ADDR
// hc_gallery :=  ;
36005: LD_ADDR_OWVAR 33
36009: PUSH
36010: LD_STRING 
36012: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36013: LD_ADDR_OWVAR 31
36017: PUSH
36018: LD_INT 0
36020: PPUSH
36021: LD_INT 3
36023: PPUSH
36024: CALL_OW 12
36028: PUSH
36029: LD_INT 0
36031: PPUSH
36032: LD_INT 3
36034: PPUSH
36035: CALL_OW 12
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36052: LD_ADDR_OWVAR 29
36056: PUSH
36057: LD_INT 12
36059: PUSH
36060: LD_INT 12
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: ST_TO_ADDR
// end ;
36067: LD_VAR 0 1
36071: RET
// export function PrepareApeman ( agressivity ) ; begin
36072: LD_INT 0
36074: PPUSH
// uc_side := 0 ;
36075: LD_ADDR_OWVAR 20
36079: PUSH
36080: LD_INT 0
36082: ST_TO_ADDR
// uc_nation := 0 ;
36083: LD_ADDR_OWVAR 21
36087: PUSH
36088: LD_INT 0
36090: ST_TO_ADDR
// hc_sex := sex_male ;
36091: LD_ADDR_OWVAR 27
36095: PUSH
36096: LD_INT 1
36098: ST_TO_ADDR
// hc_class := class_apeman ;
36099: LD_ADDR_OWVAR 28
36103: PUSH
36104: LD_INT 12
36106: ST_TO_ADDR
// hc_gallery :=  ;
36107: LD_ADDR_OWVAR 33
36111: PUSH
36112: LD_STRING 
36114: ST_TO_ADDR
// hc_name :=  ;
36115: LD_ADDR_OWVAR 26
36119: PUSH
36120: LD_STRING 
36122: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36123: LD_ADDR_OWVAR 29
36127: PUSH
36128: LD_INT 12
36130: PUSH
36131: LD_INT 12
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: ST_TO_ADDR
// if agressivity = 0 then
36138: LD_VAR 0 1
36142: PUSH
36143: LD_INT 0
36145: EQUAL
36146: IFFALSE 36158
// hc_agressivity := 0 else
36148: LD_ADDR_OWVAR 35
36152: PUSH
36153: LD_INT 0
36155: ST_TO_ADDR
36156: GO 36179
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36158: LD_ADDR_OWVAR 35
36162: PUSH
36163: LD_VAR 0 1
36167: NEG
36168: PPUSH
36169: LD_VAR 0 1
36173: PPUSH
36174: CALL_OW 12
36178: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36179: LD_ADDR_OWVAR 31
36183: PUSH
36184: LD_INT 0
36186: PPUSH
36187: LD_INT 3
36189: PPUSH
36190: CALL_OW 12
36194: PUSH
36195: LD_INT 0
36197: PPUSH
36198: LD_INT 3
36200: PPUSH
36201: CALL_OW 12
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// end ;
36218: LD_VAR 0 2
36222: RET
// export function PrepareTiger ( agressivity ) ; begin
36223: LD_INT 0
36225: PPUSH
// uc_side := 0 ;
36226: LD_ADDR_OWVAR 20
36230: PUSH
36231: LD_INT 0
36233: ST_TO_ADDR
// uc_nation := 0 ;
36234: LD_ADDR_OWVAR 21
36238: PUSH
36239: LD_INT 0
36241: ST_TO_ADDR
// InitHc ;
36242: CALL_OW 19
// hc_class := class_tiger ;
36246: LD_ADDR_OWVAR 28
36250: PUSH
36251: LD_INT 14
36253: ST_TO_ADDR
// hc_gallery :=  ;
36254: LD_ADDR_OWVAR 33
36258: PUSH
36259: LD_STRING 
36261: ST_TO_ADDR
// hc_name :=  ;
36262: LD_ADDR_OWVAR 26
36266: PUSH
36267: LD_STRING 
36269: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36270: LD_ADDR_OWVAR 35
36274: PUSH
36275: LD_VAR 0 1
36279: NEG
36280: PPUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: CALL_OW 12
36290: ST_TO_ADDR
// end ;
36291: LD_VAR 0 2
36295: RET
// export function PrepareEnchidna ( ) ; begin
36296: LD_INT 0
36298: PPUSH
// uc_side := 0 ;
36299: LD_ADDR_OWVAR 20
36303: PUSH
36304: LD_INT 0
36306: ST_TO_ADDR
// uc_nation := 0 ;
36307: LD_ADDR_OWVAR 21
36311: PUSH
36312: LD_INT 0
36314: ST_TO_ADDR
// InitHc ;
36315: CALL_OW 19
// hc_class := class_baggie ;
36319: LD_ADDR_OWVAR 28
36323: PUSH
36324: LD_INT 13
36326: ST_TO_ADDR
// hc_gallery :=  ;
36327: LD_ADDR_OWVAR 33
36331: PUSH
36332: LD_STRING 
36334: ST_TO_ADDR
// hc_name :=  ;
36335: LD_ADDR_OWVAR 26
36339: PUSH
36340: LD_STRING 
36342: ST_TO_ADDR
// end ;
36343: LD_VAR 0 1
36347: RET
// export function PrepareFrog ( ) ; begin
36348: LD_INT 0
36350: PPUSH
// uc_side := 0 ;
36351: LD_ADDR_OWVAR 20
36355: PUSH
36356: LD_INT 0
36358: ST_TO_ADDR
// uc_nation := 0 ;
36359: LD_ADDR_OWVAR 21
36363: PUSH
36364: LD_INT 0
36366: ST_TO_ADDR
// InitHc ;
36367: CALL_OW 19
// hc_class := class_frog ;
36371: LD_ADDR_OWVAR 28
36375: PUSH
36376: LD_INT 19
36378: ST_TO_ADDR
// hc_gallery :=  ;
36379: LD_ADDR_OWVAR 33
36383: PUSH
36384: LD_STRING 
36386: ST_TO_ADDR
// hc_name :=  ;
36387: LD_ADDR_OWVAR 26
36391: PUSH
36392: LD_STRING 
36394: ST_TO_ADDR
// end ;
36395: LD_VAR 0 1
36399: RET
// export function PrepareFish ( ) ; begin
36400: LD_INT 0
36402: PPUSH
// uc_side := 0 ;
36403: LD_ADDR_OWVAR 20
36407: PUSH
36408: LD_INT 0
36410: ST_TO_ADDR
// uc_nation := 0 ;
36411: LD_ADDR_OWVAR 21
36415: PUSH
36416: LD_INT 0
36418: ST_TO_ADDR
// InitHc ;
36419: CALL_OW 19
// hc_class := class_fish ;
36423: LD_ADDR_OWVAR 28
36427: PUSH
36428: LD_INT 20
36430: ST_TO_ADDR
// hc_gallery :=  ;
36431: LD_ADDR_OWVAR 33
36435: PUSH
36436: LD_STRING 
36438: ST_TO_ADDR
// hc_name :=  ;
36439: LD_ADDR_OWVAR 26
36443: PUSH
36444: LD_STRING 
36446: ST_TO_ADDR
// end ;
36447: LD_VAR 0 1
36451: RET
// export function PrepareBird ( ) ; begin
36452: LD_INT 0
36454: PPUSH
// uc_side := 0 ;
36455: LD_ADDR_OWVAR 20
36459: PUSH
36460: LD_INT 0
36462: ST_TO_ADDR
// uc_nation := 0 ;
36463: LD_ADDR_OWVAR 21
36467: PUSH
36468: LD_INT 0
36470: ST_TO_ADDR
// InitHc ;
36471: CALL_OW 19
// hc_class := class_phororhacos ;
36475: LD_ADDR_OWVAR 28
36479: PUSH
36480: LD_INT 18
36482: ST_TO_ADDR
// hc_gallery :=  ;
36483: LD_ADDR_OWVAR 33
36487: PUSH
36488: LD_STRING 
36490: ST_TO_ADDR
// hc_name :=  ;
36491: LD_ADDR_OWVAR 26
36495: PUSH
36496: LD_STRING 
36498: ST_TO_ADDR
// end ;
36499: LD_VAR 0 1
36503: RET
// export function PrepareHorse ( ) ; begin
36504: LD_INT 0
36506: PPUSH
// uc_side := 0 ;
36507: LD_ADDR_OWVAR 20
36511: PUSH
36512: LD_INT 0
36514: ST_TO_ADDR
// uc_nation := 0 ;
36515: LD_ADDR_OWVAR 21
36519: PUSH
36520: LD_INT 0
36522: ST_TO_ADDR
// InitHc ;
36523: CALL_OW 19
// hc_class := class_horse ;
36527: LD_ADDR_OWVAR 28
36531: PUSH
36532: LD_INT 21
36534: ST_TO_ADDR
// hc_gallery :=  ;
36535: LD_ADDR_OWVAR 33
36539: PUSH
36540: LD_STRING 
36542: ST_TO_ADDR
// hc_name :=  ;
36543: LD_ADDR_OWVAR 26
36547: PUSH
36548: LD_STRING 
36550: ST_TO_ADDR
// end ;
36551: LD_VAR 0 1
36555: RET
// export function PrepareMastodont ( ) ; begin
36556: LD_INT 0
36558: PPUSH
// uc_side := 0 ;
36559: LD_ADDR_OWVAR 20
36563: PUSH
36564: LD_INT 0
36566: ST_TO_ADDR
// uc_nation := 0 ;
36567: LD_ADDR_OWVAR 21
36571: PUSH
36572: LD_INT 0
36574: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36575: LD_ADDR_OWVAR 37
36579: PUSH
36580: LD_INT 31
36582: ST_TO_ADDR
// vc_control := control_rider ;
36583: LD_ADDR_OWVAR 38
36587: PUSH
36588: LD_INT 4
36590: ST_TO_ADDR
// end ;
36591: LD_VAR 0 1
36595: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36596: LD_INT 0
36598: PPUSH
36599: PPUSH
36600: PPUSH
// uc_side = 0 ;
36601: LD_ADDR_OWVAR 20
36605: PUSH
36606: LD_INT 0
36608: ST_TO_ADDR
// uc_nation = 0 ;
36609: LD_ADDR_OWVAR 21
36613: PUSH
36614: LD_INT 0
36616: ST_TO_ADDR
// InitHc_All ( ) ;
36617: CALL_OW 584
// InitVc ;
36621: CALL_OW 20
// if mastodonts then
36625: LD_VAR 0 6
36629: IFFALSE 36696
// for i = 1 to mastodonts do
36631: LD_ADDR_VAR 0 11
36635: PUSH
36636: DOUBLE
36637: LD_INT 1
36639: DEC
36640: ST_TO_ADDR
36641: LD_VAR 0 6
36645: PUSH
36646: FOR_TO
36647: IFFALSE 36694
// begin vc_chassis := 31 ;
36649: LD_ADDR_OWVAR 37
36653: PUSH
36654: LD_INT 31
36656: ST_TO_ADDR
// vc_control := control_rider ;
36657: LD_ADDR_OWVAR 38
36661: PUSH
36662: LD_INT 4
36664: ST_TO_ADDR
// animal := CreateVehicle ;
36665: LD_ADDR_VAR 0 12
36669: PUSH
36670: CALL_OW 45
36674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36675: LD_VAR 0 12
36679: PPUSH
36680: LD_VAR 0 8
36684: PPUSH
36685: LD_INT 0
36687: PPUSH
36688: CALL 38838 0 3
// end ;
36692: GO 36646
36694: POP
36695: POP
// if horses then
36696: LD_VAR 0 5
36700: IFFALSE 36767
// for i = 1 to horses do
36702: LD_ADDR_VAR 0 11
36706: PUSH
36707: DOUBLE
36708: LD_INT 1
36710: DEC
36711: ST_TO_ADDR
36712: LD_VAR 0 5
36716: PUSH
36717: FOR_TO
36718: IFFALSE 36765
// begin hc_class := 21 ;
36720: LD_ADDR_OWVAR 28
36724: PUSH
36725: LD_INT 21
36727: ST_TO_ADDR
// hc_gallery :=  ;
36728: LD_ADDR_OWVAR 33
36732: PUSH
36733: LD_STRING 
36735: ST_TO_ADDR
// animal := CreateHuman ;
36736: LD_ADDR_VAR 0 12
36740: PUSH
36741: CALL_OW 44
36745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36746: LD_VAR 0 12
36750: PPUSH
36751: LD_VAR 0 8
36755: PPUSH
36756: LD_INT 0
36758: PPUSH
36759: CALL 38838 0 3
// end ;
36763: GO 36717
36765: POP
36766: POP
// if birds then
36767: LD_VAR 0 1
36771: IFFALSE 36838
// for i = 1 to birds do
36773: LD_ADDR_VAR 0 11
36777: PUSH
36778: DOUBLE
36779: LD_INT 1
36781: DEC
36782: ST_TO_ADDR
36783: LD_VAR 0 1
36787: PUSH
36788: FOR_TO
36789: IFFALSE 36836
// begin hc_class := 18 ;
36791: LD_ADDR_OWVAR 28
36795: PUSH
36796: LD_INT 18
36798: ST_TO_ADDR
// hc_gallery =  ;
36799: LD_ADDR_OWVAR 33
36803: PUSH
36804: LD_STRING 
36806: ST_TO_ADDR
// animal := CreateHuman ;
36807: LD_ADDR_VAR 0 12
36811: PUSH
36812: CALL_OW 44
36816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36817: LD_VAR 0 12
36821: PPUSH
36822: LD_VAR 0 8
36826: PPUSH
36827: LD_INT 0
36829: PPUSH
36830: CALL 38838 0 3
// end ;
36834: GO 36788
36836: POP
36837: POP
// if tigers then
36838: LD_VAR 0 2
36842: IFFALSE 36926
// for i = 1 to tigers do
36844: LD_ADDR_VAR 0 11
36848: PUSH
36849: DOUBLE
36850: LD_INT 1
36852: DEC
36853: ST_TO_ADDR
36854: LD_VAR 0 2
36858: PUSH
36859: FOR_TO
36860: IFFALSE 36924
// begin hc_class = class_tiger ;
36862: LD_ADDR_OWVAR 28
36866: PUSH
36867: LD_INT 14
36869: ST_TO_ADDR
// hc_gallery =  ;
36870: LD_ADDR_OWVAR 33
36874: PUSH
36875: LD_STRING 
36877: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36878: LD_ADDR_OWVAR 35
36882: PUSH
36883: LD_INT 7
36885: NEG
36886: PPUSH
36887: LD_INT 7
36889: PPUSH
36890: CALL_OW 12
36894: ST_TO_ADDR
// animal := CreateHuman ;
36895: LD_ADDR_VAR 0 12
36899: PUSH
36900: CALL_OW 44
36904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36905: LD_VAR 0 12
36909: PPUSH
36910: LD_VAR 0 8
36914: PPUSH
36915: LD_INT 0
36917: PPUSH
36918: CALL 38838 0 3
// end ;
36922: GO 36859
36924: POP
36925: POP
// if apemans then
36926: LD_VAR 0 3
36930: IFFALSE 37053
// for i = 1 to apemans do
36932: LD_ADDR_VAR 0 11
36936: PUSH
36937: DOUBLE
36938: LD_INT 1
36940: DEC
36941: ST_TO_ADDR
36942: LD_VAR 0 3
36946: PUSH
36947: FOR_TO
36948: IFFALSE 37051
// begin hc_class = class_apeman ;
36950: LD_ADDR_OWVAR 28
36954: PUSH
36955: LD_INT 12
36957: ST_TO_ADDR
// hc_gallery =  ;
36958: LD_ADDR_OWVAR 33
36962: PUSH
36963: LD_STRING 
36965: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36966: LD_ADDR_OWVAR 35
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PPUSH
36975: LD_INT 2
36977: PPUSH
36978: CALL_OW 12
36982: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36983: LD_ADDR_OWVAR 31
36987: PUSH
36988: LD_INT 1
36990: PPUSH
36991: LD_INT 3
36993: PPUSH
36994: CALL_OW 12
36998: PUSH
36999: LD_INT 1
37001: PPUSH
37002: LD_INT 3
37004: PPUSH
37005: CALL_OW 12
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: ST_TO_ADDR
// animal := CreateHuman ;
37022: LD_ADDR_VAR 0 12
37026: PUSH
37027: CALL_OW 44
37031: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37032: LD_VAR 0 12
37036: PPUSH
37037: LD_VAR 0 8
37041: PPUSH
37042: LD_INT 0
37044: PPUSH
37045: CALL 38838 0 3
// end ;
37049: GO 36947
37051: POP
37052: POP
// if enchidnas then
37053: LD_VAR 0 4
37057: IFFALSE 37124
// for i = 1 to enchidnas do
37059: LD_ADDR_VAR 0 11
37063: PUSH
37064: DOUBLE
37065: LD_INT 1
37067: DEC
37068: ST_TO_ADDR
37069: LD_VAR 0 4
37073: PUSH
37074: FOR_TO
37075: IFFALSE 37122
// begin hc_class = 13 ;
37077: LD_ADDR_OWVAR 28
37081: PUSH
37082: LD_INT 13
37084: ST_TO_ADDR
// hc_gallery =  ;
37085: LD_ADDR_OWVAR 33
37089: PUSH
37090: LD_STRING 
37092: ST_TO_ADDR
// animal := CreateHuman ;
37093: LD_ADDR_VAR 0 12
37097: PUSH
37098: CALL_OW 44
37102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37103: LD_VAR 0 12
37107: PPUSH
37108: LD_VAR 0 8
37112: PPUSH
37113: LD_INT 0
37115: PPUSH
37116: CALL 38838 0 3
// end ;
37120: GO 37074
37122: POP
37123: POP
// if fishes then
37124: LD_VAR 0 7
37128: IFFALSE 37195
// for i = 1 to fishes do
37130: LD_ADDR_VAR 0 11
37134: PUSH
37135: DOUBLE
37136: LD_INT 1
37138: DEC
37139: ST_TO_ADDR
37140: LD_VAR 0 7
37144: PUSH
37145: FOR_TO
37146: IFFALSE 37193
// begin hc_class = 20 ;
37148: LD_ADDR_OWVAR 28
37152: PUSH
37153: LD_INT 20
37155: ST_TO_ADDR
// hc_gallery =  ;
37156: LD_ADDR_OWVAR 33
37160: PUSH
37161: LD_STRING 
37163: ST_TO_ADDR
// animal := CreateHuman ;
37164: LD_ADDR_VAR 0 12
37168: PUSH
37169: CALL_OW 44
37173: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37174: LD_VAR 0 12
37178: PPUSH
37179: LD_VAR 0 9
37183: PPUSH
37184: LD_INT 0
37186: PPUSH
37187: CALL 38838 0 3
// end ;
37191: GO 37145
37193: POP
37194: POP
// end ;
37195: LD_VAR 0 10
37199: RET
// export function WantHeal ( sci , unit ) ; begin
37200: LD_INT 0
37202: PPUSH
// if GetTaskList ( sci ) > 0 then
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 437
37212: PUSH
37213: LD_INT 0
37215: GREATER
37216: IFFALSE 37288
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37218: LD_VAR 0 1
37222: PPUSH
37223: CALL_OW 437
37227: PUSH
37228: LD_INT 1
37230: ARRAY
37231: PUSH
37232: LD_INT 1
37234: ARRAY
37235: PUSH
37236: LD_STRING l
37238: EQUAL
37239: IFFALSE 37266
37241: PUSH
37242: LD_VAR 0 1
37246: PPUSH
37247: CALL_OW 437
37251: PUSH
37252: LD_INT 1
37254: ARRAY
37255: PUSH
37256: LD_INT 4
37258: ARRAY
37259: PUSH
37260: LD_VAR 0 2
37264: EQUAL
37265: AND
37266: IFFALSE 37278
// result := true else
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_INT 1
37275: ST_TO_ADDR
37276: GO 37286
// result := false ;
37278: LD_ADDR_VAR 0 3
37282: PUSH
37283: LD_INT 0
37285: ST_TO_ADDR
// end else
37286: GO 37296
// result := false ;
37288: LD_ADDR_VAR 0 3
37292: PUSH
37293: LD_INT 0
37295: ST_TO_ADDR
// end ;
37296: LD_VAR 0 3
37300: RET
// export function HealTarget ( sci ) ; begin
37301: LD_INT 0
37303: PPUSH
// if not sci then
37304: LD_VAR 0 1
37308: NOT
37309: IFFALSE 37313
// exit ;
37311: GO 37378
// result := 0 ;
37313: LD_ADDR_VAR 0 2
37317: PUSH
37318: LD_INT 0
37320: ST_TO_ADDR
// if GetTaskList ( sci ) then
37321: LD_VAR 0 1
37325: PPUSH
37326: CALL_OW 437
37330: IFFALSE 37378
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37332: LD_VAR 0 1
37336: PPUSH
37337: CALL_OW 437
37341: PUSH
37342: LD_INT 1
37344: ARRAY
37345: PUSH
37346: LD_INT 1
37348: ARRAY
37349: PUSH
37350: LD_STRING l
37352: EQUAL
37353: IFFALSE 37378
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37355: LD_ADDR_VAR 0 2
37359: PUSH
37360: LD_VAR 0 1
37364: PPUSH
37365: CALL_OW 437
37369: PUSH
37370: LD_INT 1
37372: ARRAY
37373: PUSH
37374: LD_INT 4
37376: ARRAY
37377: ST_TO_ADDR
// end ;
37378: LD_VAR 0 2
37382: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37383: LD_INT 0
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
// if not base_units then
37389: LD_VAR 0 1
37393: NOT
37394: IFFALSE 37398
// exit ;
37396: GO 37485
// result := false ;
37398: LD_ADDR_VAR 0 2
37402: PUSH
37403: LD_INT 0
37405: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37406: LD_ADDR_VAR 0 5
37410: PUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: LD_INT 21
37418: PUSH
37419: LD_INT 3
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PPUSH
37426: CALL_OW 72
37430: ST_TO_ADDR
// if not tmp then
37431: LD_VAR 0 5
37435: NOT
37436: IFFALSE 37440
// exit ;
37438: GO 37485
// for i in tmp do
37440: LD_ADDR_VAR 0 3
37444: PUSH
37445: LD_VAR 0 5
37449: PUSH
37450: FOR_IN
37451: IFFALSE 37483
// begin result := EnemyInRange ( i , 22 ) ;
37453: LD_ADDR_VAR 0 2
37457: PUSH
37458: LD_VAR 0 3
37462: PPUSH
37463: LD_INT 22
37465: PPUSH
37466: CALL 34910 0 2
37470: ST_TO_ADDR
// if result then
37471: LD_VAR 0 2
37475: IFFALSE 37481
// exit ;
37477: POP
37478: POP
37479: GO 37485
// end ;
37481: GO 37450
37483: POP
37484: POP
// end ;
37485: LD_VAR 0 2
37489: RET
// export function FilterByTag ( units , tag ) ; begin
37490: LD_INT 0
37492: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37493: LD_ADDR_VAR 0 3
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: LD_INT 120
37505: PUSH
37506: LD_VAR 0 2
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PPUSH
37515: CALL_OW 72
37519: ST_TO_ADDR
// end ;
37520: LD_VAR 0 3
37524: RET
// export function IsDriver ( un ) ; begin
37525: LD_INT 0
37527: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37528: LD_ADDR_VAR 0 2
37532: PUSH
37533: LD_VAR 0 1
37537: PUSH
37538: LD_INT 55
37540: PUSH
37541: EMPTY
37542: LIST
37543: PPUSH
37544: CALL_OW 69
37548: IN
37549: ST_TO_ADDR
// end ;
37550: LD_VAR 0 2
37554: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37555: LD_INT 0
37557: PPUSH
37558: PPUSH
// list := [ ] ;
37559: LD_ADDR_VAR 0 5
37563: PUSH
37564: EMPTY
37565: ST_TO_ADDR
// case d of 0 :
37566: LD_VAR 0 3
37570: PUSH
37571: LD_INT 0
37573: DOUBLE
37574: EQUAL
37575: IFTRUE 37579
37577: GO 37712
37579: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_VAR 0 1
37589: PUSH
37590: LD_INT 4
37592: MINUS
37593: PUSH
37594: LD_VAR 0 2
37598: PUSH
37599: LD_INT 4
37601: MINUS
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: PUSH
37611: LD_VAR 0 1
37615: PUSH
37616: LD_INT 3
37618: MINUS
37619: PUSH
37620: LD_VAR 0 2
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: PUSH
37633: LD_VAR 0 1
37637: PUSH
37638: LD_INT 4
37640: PLUS
37641: PUSH
37642: LD_VAR 0 2
37646: PUSH
37647: LD_INT 4
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: PUSH
37655: LD_VAR 0 1
37659: PUSH
37660: LD_INT 3
37662: PLUS
37663: PUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_INT 3
37671: PLUS
37672: PUSH
37673: LD_INT 5
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_VAR 0 2
37690: PUSH
37691: LD_INT 4
37693: PLUS
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: ST_TO_ADDR
// end ; 1 :
37710: GO 38410
37712: LD_INT 1
37714: DOUBLE
37715: EQUAL
37716: IFTRUE 37720
37718: GO 37853
37720: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37721: LD_ADDR_VAR 0 5
37725: PUSH
37726: LD_VAR 0 1
37730: PUSH
37731: LD_VAR 0 2
37735: PUSH
37736: LD_INT 4
37738: MINUS
37739: PUSH
37740: LD_INT 3
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: PUSH
37748: LD_VAR 0 1
37752: PUSH
37753: LD_INT 3
37755: MINUS
37756: PUSH
37757: LD_VAR 0 2
37761: PUSH
37762: LD_INT 3
37764: MINUS
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: PUSH
37774: LD_VAR 0 1
37778: PUSH
37779: LD_INT 4
37781: MINUS
37782: PUSH
37783: LD_VAR 0 2
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: PUSH
37796: LD_VAR 0 1
37800: PUSH
37801: LD_VAR 0 2
37805: PUSH
37806: LD_INT 3
37808: PLUS
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: PUSH
37818: LD_VAR 0 1
37822: PUSH
37823: LD_INT 4
37825: PLUS
37826: PUSH
37827: LD_VAR 0 2
37831: PUSH
37832: LD_INT 4
37834: PLUS
37835: PUSH
37836: LD_INT 5
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// end ; 2 :
37851: GO 38410
37853: LD_INT 2
37855: DOUBLE
37856: EQUAL
37857: IFTRUE 37861
37859: GO 37990
37861: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37862: LD_ADDR_VAR 0 5
37866: PUSH
37867: LD_VAR 0 1
37871: PUSH
37872: LD_VAR 0 2
37876: PUSH
37877: LD_INT 3
37879: MINUS
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: PUSH
37889: LD_VAR 0 1
37893: PUSH
37894: LD_INT 4
37896: PLUS
37897: PUSH
37898: LD_VAR 0 2
37902: PUSH
37903: LD_INT 4
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: PUSH
37911: LD_VAR 0 1
37915: PUSH
37916: LD_VAR 0 2
37920: PUSH
37921: LD_INT 4
37923: PLUS
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: LD_VAR 0 1
37937: PUSH
37938: LD_INT 3
37940: MINUS
37941: PUSH
37942: LD_VAR 0 2
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: PUSH
37955: LD_VAR 0 1
37959: PUSH
37960: LD_INT 4
37962: MINUS
37963: PUSH
37964: LD_VAR 0 2
37968: PUSH
37969: LD_INT 4
37971: MINUS
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// end ; 3 :
37988: GO 38410
37990: LD_INT 3
37992: DOUBLE
37993: EQUAL
37994: IFTRUE 37998
37996: GO 38131
37998: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37999: LD_ADDR_VAR 0 5
38003: PUSH
38004: LD_VAR 0 1
38008: PUSH
38009: LD_INT 3
38011: PLUS
38012: PUSH
38013: LD_VAR 0 2
38017: PUSH
38018: LD_INT 4
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: PUSH
38026: LD_VAR 0 1
38030: PUSH
38031: LD_INT 4
38033: PLUS
38034: PUSH
38035: LD_VAR 0 2
38039: PUSH
38040: LD_INT 4
38042: PLUS
38043: PUSH
38044: LD_INT 5
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: PUSH
38052: LD_VAR 0 1
38056: PUSH
38057: LD_INT 4
38059: MINUS
38060: PUSH
38061: LD_VAR 0 2
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: LIST
38073: PUSH
38074: LD_VAR 0 1
38078: PUSH
38079: LD_VAR 0 2
38083: PUSH
38084: LD_INT 4
38086: MINUS
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: PUSH
38096: LD_VAR 0 1
38100: PUSH
38101: LD_INT 3
38103: MINUS
38104: PUSH
38105: LD_VAR 0 2
38109: PUSH
38110: LD_INT 3
38112: MINUS
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// end ; 4 :
38129: GO 38410
38131: LD_INT 4
38133: DOUBLE
38134: EQUAL
38135: IFTRUE 38139
38137: GO 38272
38139: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_VAR 0 1
38149: PUSH
38150: LD_VAR 0 2
38154: PUSH
38155: LD_INT 4
38157: PLUS
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: PUSH
38167: LD_VAR 0 1
38171: PUSH
38172: LD_INT 3
38174: PLUS
38175: PUSH
38176: LD_VAR 0 2
38180: PUSH
38181: LD_INT 3
38183: PLUS
38184: PUSH
38185: LD_INT 5
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: PUSH
38193: LD_VAR 0 1
38197: PUSH
38198: LD_INT 4
38200: PLUS
38201: PUSH
38202: LD_VAR 0 2
38206: PUSH
38207: LD_INT 4
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: PUSH
38215: LD_VAR 0 1
38219: PUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_INT 3
38227: MINUS
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: PUSH
38237: LD_VAR 0 1
38241: PUSH
38242: LD_INT 4
38244: MINUS
38245: PUSH
38246: LD_VAR 0 2
38250: PUSH
38251: LD_INT 4
38253: MINUS
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// end ; 5 :
38270: GO 38410
38272: LD_INT 5
38274: DOUBLE
38275: EQUAL
38276: IFTRUE 38280
38278: GO 38409
38280: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38281: LD_ADDR_VAR 0 5
38285: PUSH
38286: LD_VAR 0 1
38290: PUSH
38291: LD_INT 4
38293: MINUS
38294: PUSH
38295: LD_VAR 0 2
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: PUSH
38308: LD_VAR 0 1
38312: PUSH
38313: LD_VAR 0 2
38317: PUSH
38318: LD_INT 4
38320: MINUS
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: PUSH
38330: LD_VAR 0 1
38334: PUSH
38335: LD_INT 4
38337: PLUS
38338: PUSH
38339: LD_VAR 0 2
38343: PUSH
38344: LD_INT 4
38346: PLUS
38347: PUSH
38348: LD_INT 5
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PUSH
38356: LD_VAR 0 1
38360: PUSH
38361: LD_INT 3
38363: PLUS
38364: PUSH
38365: LD_VAR 0 2
38369: PUSH
38370: LD_INT 4
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: PUSH
38378: LD_VAR 0 1
38382: PUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_INT 3
38390: PLUS
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// end ; end ;
38407: GO 38410
38409: POP
// result := list ;
38410: LD_ADDR_VAR 0 4
38414: PUSH
38415: LD_VAR 0 5
38419: ST_TO_ADDR
// end ;
38420: LD_VAR 0 4
38424: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38425: LD_INT 0
38427: PPUSH
38428: PPUSH
38429: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38430: LD_VAR 0 1
38434: NOT
38435: IFTRUE 38463
38437: PUSH
38438: LD_VAR 0 2
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: LD_INT 4
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: IN
38461: NOT
38462: OR
38463: IFFALSE 38467
// exit ;
38465: GO 38550
// tmp := [ ] ;
38467: LD_ADDR_VAR 0 5
38471: PUSH
38472: EMPTY
38473: ST_TO_ADDR
// for i in units do
38474: LD_ADDR_VAR 0 4
38478: PUSH
38479: LD_VAR 0 1
38483: PUSH
38484: FOR_IN
38485: IFFALSE 38519
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38487: LD_ADDR_VAR 0 5
38491: PUSH
38492: LD_VAR 0 5
38496: PPUSH
38497: LD_VAR 0 4
38501: PPUSH
38502: LD_VAR 0 2
38506: PPUSH
38507: CALL_OW 259
38511: PPUSH
38512: CALL 39945 0 2
38516: ST_TO_ADDR
38517: GO 38484
38519: POP
38520: POP
// if not tmp then
38521: LD_VAR 0 5
38525: NOT
38526: IFFALSE 38530
// exit ;
38528: GO 38550
// result := SortListByListDesc ( units , tmp ) ;
38530: LD_ADDR_VAR 0 3
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: LD_VAR 0 5
38544: PPUSH
38545: CALL_OW 77
38549: ST_TO_ADDR
// end ;
38550: LD_VAR 0 3
38554: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38555: LD_INT 0
38557: PPUSH
38558: PPUSH
38559: PPUSH
// result := false ;
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_INT 0
38567: ST_TO_ADDR
// if not building then
38568: LD_VAR 0 2
38572: NOT
38573: IFFALSE 38577
// exit ;
38575: GO 38721
// x := GetX ( building ) ;
38577: LD_ADDR_VAR 0 4
38581: PUSH
38582: LD_VAR 0 2
38586: PPUSH
38587: CALL_OW 250
38591: ST_TO_ADDR
// y := GetY ( building ) ;
38592: LD_ADDR_VAR 0 5
38596: PUSH
38597: LD_VAR 0 2
38601: PPUSH
38602: CALL_OW 251
38606: ST_TO_ADDR
// if not x or not y then
38607: LD_VAR 0 4
38611: NOT
38612: IFTRUE 38621
38614: PUSH
38615: LD_VAR 0 5
38619: NOT
38620: OR
38621: IFFALSE 38625
// exit ;
38623: GO 38721
// if GetTaskList ( unit ) then
38625: LD_VAR 0 1
38629: PPUSH
38630: CALL_OW 437
38634: IFFALSE 38721
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38636: LD_STRING e
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 437
38648: PUSH
38649: LD_INT 1
38651: ARRAY
38652: PUSH
38653: LD_INT 1
38655: ARRAY
38656: EQUAL
38657: IFFALSE 38684
38659: PUSH
38660: LD_VAR 0 4
38664: PUSH
38665: LD_VAR 0 1
38669: PPUSH
38670: CALL_OW 437
38674: PUSH
38675: LD_INT 1
38677: ARRAY
38678: PUSH
38679: LD_INT 2
38681: ARRAY
38682: EQUAL
38683: AND
38684: IFFALSE 38711
38686: PUSH
38687: LD_VAR 0 5
38691: PUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: CALL_OW 437
38701: PUSH
38702: LD_INT 1
38704: ARRAY
38705: PUSH
38706: LD_INT 3
38708: ARRAY
38709: EQUAL
38710: AND
38711: IFFALSE 38721
// result := true end ;
38713: LD_ADDR_VAR 0 3
38717: PUSH
38718: LD_INT 1
38720: ST_TO_ADDR
// end ;
38721: LD_VAR 0 3
38725: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38726: LD_INT 0
38728: PPUSH
// result := false ;
38729: LD_ADDR_VAR 0 4
38733: PUSH
38734: LD_INT 0
38736: ST_TO_ADDR
// if GetTaskList ( unit ) then
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL_OW 437
38746: IFFALSE 38833
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38748: LD_STRING M
38750: PUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 437
38760: PUSH
38761: LD_INT 1
38763: ARRAY
38764: PUSH
38765: LD_INT 1
38767: ARRAY
38768: EQUAL
38769: IFFALSE 38796
38771: PUSH
38772: LD_VAR 0 2
38776: PUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 437
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PUSH
38791: LD_INT 2
38793: ARRAY
38794: EQUAL
38795: AND
38796: IFFALSE 38823
38798: PUSH
38799: LD_VAR 0 3
38803: PUSH
38804: LD_VAR 0 1
38808: PPUSH
38809: CALL_OW 437
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: PUSH
38818: LD_INT 3
38820: ARRAY
38821: EQUAL
38822: AND
38823: IFFALSE 38833
// result := true ;
38825: LD_ADDR_VAR 0 4
38829: PUSH
38830: LD_INT 1
38832: ST_TO_ADDR
// end ; end ;
38833: LD_VAR 0 4
38837: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38838: LD_INT 0
38840: PPUSH
38841: PPUSH
38842: PPUSH
38843: PPUSH
// if not unit or not area then
38844: LD_VAR 0 1
38848: NOT
38849: IFTRUE 38858
38851: PUSH
38852: LD_VAR 0 2
38856: NOT
38857: OR
38858: IFFALSE 38862
// exit ;
38860: GO 39038
// tmp := AreaToList ( area , i ) ;
38862: LD_ADDR_VAR 0 6
38866: PUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: LD_VAR 0 5
38876: PPUSH
38877: CALL_OW 517
38881: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: DOUBLE
38888: LD_INT 1
38890: DEC
38891: ST_TO_ADDR
38892: LD_VAR 0 6
38896: PUSH
38897: LD_INT 1
38899: ARRAY
38900: PUSH
38901: FOR_TO
38902: IFFALSE 39036
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38904: LD_ADDR_VAR 0 7
38908: PUSH
38909: LD_VAR 0 6
38913: PUSH
38914: LD_INT 1
38916: ARRAY
38917: PUSH
38918: LD_VAR 0 5
38922: ARRAY
38923: PUSH
38924: LD_VAR 0 6
38928: PUSH
38929: LD_INT 2
38931: ARRAY
38932: PUSH
38933: LD_VAR 0 5
38937: ARRAY
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38943: LD_INT 92
38945: PUSH
38946: LD_VAR 0 7
38950: PUSH
38951: LD_INT 1
38953: ARRAY
38954: PUSH
38955: LD_VAR 0 7
38959: PUSH
38960: LD_INT 2
38962: ARRAY
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: PPUSH
38973: CALL_OW 69
38977: PUSH
38978: LD_INT 0
38980: EQUAL
38981: IFFALSE 39034
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38983: LD_VAR 0 1
38987: PPUSH
38988: LD_VAR 0 7
38992: PUSH
38993: LD_INT 1
38995: ARRAY
38996: PPUSH
38997: LD_VAR 0 7
39001: PUSH
39002: LD_INT 2
39004: ARRAY
39005: PPUSH
39006: LD_VAR 0 3
39010: PPUSH
39011: CALL_OW 48
// result := IsPlaced ( unit ) ;
39015: LD_ADDR_VAR 0 4
39019: PUSH
39020: LD_VAR 0 1
39024: PPUSH
39025: CALL_OW 305
39029: ST_TO_ADDR
// exit ;
39030: POP
39031: POP
39032: GO 39038
// end ; end ;
39034: GO 38901
39036: POP
39037: POP
// end ;
39038: LD_VAR 0 4
39042: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39043: LD_INT 0
39045: PPUSH
39046: PPUSH
39047: PPUSH
// if not side or side > 8 then
39048: LD_VAR 0 1
39052: NOT
39053: IFTRUE 39065
39055: PUSH
39056: LD_VAR 0 1
39060: PUSH
39061: LD_INT 8
39063: GREATER
39064: OR
39065: IFFALSE 39069
// exit ;
39067: GO 39256
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39069: LD_ADDR_VAR 0 4
39073: PUSH
39074: LD_INT 22
39076: PUSH
39077: LD_VAR 0 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 21
39088: PUSH
39089: LD_INT 3
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PPUSH
39100: CALL_OW 69
39104: ST_TO_ADDR
// if not tmp then
39105: LD_VAR 0 4
39109: NOT
39110: IFFALSE 39114
// exit ;
39112: GO 39256
// enable_addtolog := true ;
39114: LD_ADDR_OWVAR 81
39118: PUSH
39119: LD_INT 1
39121: ST_TO_ADDR
// AddToLog ( [ ) ;
39122: LD_STRING [
39124: PPUSH
39125: CALL_OW 561
// for i in tmp do
39129: LD_ADDR_VAR 0 3
39133: PUSH
39134: LD_VAR 0 4
39138: PUSH
39139: FOR_IN
39140: IFFALSE 39247
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39142: LD_STRING [
39144: PUSH
39145: LD_VAR 0 3
39149: PPUSH
39150: CALL_OW 266
39154: STR
39155: PUSH
39156: LD_STRING , 
39158: STR
39159: PUSH
39160: LD_VAR 0 3
39164: PPUSH
39165: CALL_OW 250
39169: STR
39170: PUSH
39171: LD_STRING , 
39173: STR
39174: PUSH
39175: LD_VAR 0 3
39179: PPUSH
39180: CALL_OW 251
39184: STR
39185: PUSH
39186: LD_STRING , 
39188: STR
39189: PUSH
39190: LD_VAR 0 3
39194: PPUSH
39195: CALL_OW 254
39199: STR
39200: PUSH
39201: LD_STRING , 
39203: STR
39204: PUSH
39205: LD_VAR 0 3
39209: PPUSH
39210: LD_INT 1
39212: PPUSH
39213: CALL_OW 268
39217: STR
39218: PUSH
39219: LD_STRING , 
39221: STR
39222: PUSH
39223: LD_VAR 0 3
39227: PPUSH
39228: LD_INT 2
39230: PPUSH
39231: CALL_OW 268
39235: STR
39236: PUSH
39237: LD_STRING ],
39239: STR
39240: PPUSH
39241: CALL_OW 561
// end ;
39245: GO 39139
39247: POP
39248: POP
// AddToLog ( ]; ) ;
39249: LD_STRING ];
39251: PPUSH
39252: CALL_OW 561
// end ;
39256: LD_VAR 0 2
39260: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39261: LD_INT 0
39263: PPUSH
39264: PPUSH
39265: PPUSH
39266: PPUSH
39267: PPUSH
// if not area or not rate or not max then
39268: LD_VAR 0 1
39272: NOT
39273: IFTRUE 39282
39275: PUSH
39276: LD_VAR 0 2
39280: NOT
39281: OR
39282: IFTRUE 39291
39284: PUSH
39285: LD_VAR 0 4
39289: NOT
39290: OR
39291: IFFALSE 39295
// exit ;
39293: GO 39484
// while 1 do
39295: LD_INT 1
39297: IFFALSE 39484
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39299: LD_ADDR_VAR 0 9
39303: PUSH
39304: LD_VAR 0 1
39308: PPUSH
39309: LD_INT 1
39311: PPUSH
39312: CALL_OW 287
39316: PUSH
39317: LD_INT 10
39319: MUL
39320: ST_TO_ADDR
// r := rate / 10 ;
39321: LD_ADDR_VAR 0 7
39325: PUSH
39326: LD_VAR 0 2
39330: PUSH
39331: LD_INT 10
39333: DIVREAL
39334: ST_TO_ADDR
// time := 1 1$00 ;
39335: LD_ADDR_VAR 0 8
39339: PUSH
39340: LD_INT 2100
39342: ST_TO_ADDR
// if amount < min then
39343: LD_VAR 0 9
39347: PUSH
39348: LD_VAR 0 3
39352: LESS
39353: IFFALSE 39371
// r := r * 2 else
39355: LD_ADDR_VAR 0 7
39359: PUSH
39360: LD_VAR 0 7
39364: PUSH
39365: LD_INT 2
39367: MUL
39368: ST_TO_ADDR
39369: GO 39397
// if amount > max then
39371: LD_VAR 0 9
39375: PUSH
39376: LD_VAR 0 4
39380: GREATER
39381: IFFALSE 39397
// r := r / 2 ;
39383: LD_ADDR_VAR 0 7
39387: PUSH
39388: LD_VAR 0 7
39392: PUSH
39393: LD_INT 2
39395: DIVREAL
39396: ST_TO_ADDR
// time := time / r ;
39397: LD_ADDR_VAR 0 8
39401: PUSH
39402: LD_VAR 0 8
39406: PUSH
39407: LD_VAR 0 7
39411: DIVREAL
39412: ST_TO_ADDR
// if time < 0 then
39413: LD_VAR 0 8
39417: PUSH
39418: LD_INT 0
39420: LESS
39421: IFFALSE 39438
// time := time * - 1 ;
39423: LD_ADDR_VAR 0 8
39427: PUSH
39428: LD_VAR 0 8
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: MUL
39437: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39438: LD_VAR 0 8
39442: PUSH
39443: LD_INT 35
39445: PPUSH
39446: LD_INT 875
39448: PPUSH
39449: CALL_OW 12
39453: PLUS
39454: PPUSH
39455: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39459: LD_INT 1
39461: PPUSH
39462: LD_INT 5
39464: PPUSH
39465: CALL_OW 12
39469: PPUSH
39470: LD_VAR 0 1
39474: PPUSH
39475: LD_INT 1
39477: PPUSH
39478: CALL_OW 55
// end ;
39482: GO 39295
// end ;
39484: LD_VAR 0 5
39488: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39489: LD_INT 0
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
39495: PPUSH
39496: PPUSH
39497: PPUSH
39498: PPUSH
// if not turrets or not factories then
39499: LD_VAR 0 1
39503: NOT
39504: IFTRUE 39513
39506: PUSH
39507: LD_VAR 0 2
39511: NOT
39512: OR
39513: IFFALSE 39517
// exit ;
39515: GO 39824
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39517: LD_ADDR_VAR 0 10
39521: PUSH
39522: LD_INT 5
39524: PUSH
39525: LD_INT 6
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: LD_INT 4
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: LD_INT 5
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 24
39559: PUSH
39560: LD_INT 25
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 23
39569: PUSH
39570: LD_INT 27
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 42
39583: PUSH
39584: LD_INT 43
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 44
39593: PUSH
39594: LD_INT 46
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 45
39603: PUSH
39604: LD_INT 47
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// result := [ ] ;
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: EMPTY
39627: ST_TO_ADDR
// for i in turrets do
39628: LD_ADDR_VAR 0 4
39632: PUSH
39633: LD_VAR 0 1
39637: PUSH
39638: FOR_IN
39639: IFFALSE 39822
// begin nat := GetNation ( i ) ;
39641: LD_ADDR_VAR 0 7
39645: PUSH
39646: LD_VAR 0 4
39650: PPUSH
39651: CALL_OW 248
39655: ST_TO_ADDR
// weapon := 0 ;
39656: LD_ADDR_VAR 0 8
39660: PUSH
39661: LD_INT 0
39663: ST_TO_ADDR
// if not nat then
39664: LD_VAR 0 7
39668: NOT
39669: IFFALSE 39673
// continue ;
39671: GO 39638
// for j in list [ nat ] do
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 10
39682: PUSH
39683: LD_VAR 0 7
39687: ARRAY
39688: PUSH
39689: FOR_IN
39690: IFFALSE 39731
// if GetBWeapon ( i ) = j [ 1 ] then
39692: LD_VAR 0 4
39696: PPUSH
39697: CALL_OW 269
39701: PUSH
39702: LD_VAR 0 5
39706: PUSH
39707: LD_INT 1
39709: ARRAY
39710: EQUAL
39711: IFFALSE 39729
// begin weapon := j [ 2 ] ;
39713: LD_ADDR_VAR 0 8
39717: PUSH
39718: LD_VAR 0 5
39722: PUSH
39723: LD_INT 2
39725: ARRAY
39726: ST_TO_ADDR
// break ;
39727: GO 39731
// end ;
39729: GO 39689
39731: POP
39732: POP
// if not weapon then
39733: LD_VAR 0 8
39737: NOT
39738: IFFALSE 39742
// continue ;
39740: GO 39638
// for k in factories do
39742: LD_ADDR_VAR 0 6
39746: PUSH
39747: LD_VAR 0 2
39751: PUSH
39752: FOR_IN
39753: IFFALSE 39818
// begin weapons := AvailableWeaponList ( k ) ;
39755: LD_ADDR_VAR 0 9
39759: PUSH
39760: LD_VAR 0 6
39764: PPUSH
39765: CALL_OW 478
39769: ST_TO_ADDR
// if not weapons then
39770: LD_VAR 0 9
39774: NOT
39775: IFFALSE 39779
// continue ;
39777: GO 39752
// if weapon in weapons then
39779: LD_VAR 0 8
39783: PUSH
39784: LD_VAR 0 9
39788: IN
39789: IFFALSE 39816
// begin result := [ i , weapon ] ;
39791: LD_ADDR_VAR 0 3
39795: PUSH
39796: LD_VAR 0 4
39800: PUSH
39801: LD_VAR 0 8
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: ST_TO_ADDR
// exit ;
39810: POP
39811: POP
39812: POP
39813: POP
39814: GO 39824
// end ; end ;
39816: GO 39752
39818: POP
39819: POP
// end ;
39820: GO 39638
39822: POP
39823: POP
// end ;
39824: LD_VAR 0 3
39828: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39829: LD_INT 0
39831: PPUSH
// if not side or side > 8 then
39832: LD_VAR 0 3
39836: NOT
39837: IFTRUE 39849
39839: PUSH
39840: LD_VAR 0 3
39844: PUSH
39845: LD_INT 8
39847: GREATER
39848: OR
39849: IFFALSE 39853
// exit ;
39851: GO 39912
// if not range then
39853: LD_VAR 0 4
39857: NOT
39858: IFFALSE 39869
// range := - 12 ;
39860: LD_ADDR_VAR 0 4
39864: PUSH
39865: LD_INT 12
39867: NEG
39868: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39869: LD_VAR 0 1
39873: PPUSH
39874: LD_VAR 0 2
39878: PPUSH
39879: LD_VAR 0 3
39883: PPUSH
39884: LD_VAR 0 4
39888: PPUSH
39889: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39893: LD_VAR 0 1
39897: PPUSH
39898: LD_VAR 0 2
39902: PPUSH
39903: LD_VAR 0 3
39907: PPUSH
39908: CALL_OW 331
// end ;
39912: LD_VAR 0 5
39916: RET
// export function Video ( mode ) ; begin
39917: LD_INT 0
39919: PPUSH
// ingame_video = mode ;
39920: LD_ADDR_OWVAR 52
39924: PUSH
39925: LD_VAR 0 1
39929: ST_TO_ADDR
// interface_hidden = mode ;
39930: LD_ADDR_OWVAR 54
39934: PUSH
39935: LD_VAR 0 1
39939: ST_TO_ADDR
// end ;
39940: LD_VAR 0 2
39944: RET
// export function Join ( array , element ) ; begin
39945: LD_INT 0
39947: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: LD_VAR 0 1
39962: PUSH
39963: LD_INT 1
39965: PLUS
39966: PPUSH
39967: LD_VAR 0 2
39971: PPUSH
39972: CALL_OW 1
39976: ST_TO_ADDR
// end ;
39977: LD_VAR 0 3
39981: RET
// export function JoinUnion ( array , element ) ; begin
39982: LD_INT 0
39984: PPUSH
// result := array union element ;
39985: LD_ADDR_VAR 0 3
39989: PUSH
39990: LD_VAR 0 1
39994: PUSH
39995: LD_VAR 0 2
39999: UNION
40000: ST_TO_ADDR
// end ;
40001: LD_VAR 0 3
40005: RET
// export function GetBehemoths ( side ) ; begin
40006: LD_INT 0
40008: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40009: LD_ADDR_VAR 0 2
40013: PUSH
40014: LD_INT 22
40016: PUSH
40017: LD_VAR 0 1
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 31
40028: PUSH
40029: LD_INT 25
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PPUSH
40040: CALL_OW 69
40044: ST_TO_ADDR
// end ;
40045: LD_VAR 0 2
40049: RET
// export function Shuffle ( array ) ; var i , index ; begin
40050: LD_INT 0
40052: PPUSH
40053: PPUSH
40054: PPUSH
// result := [ ] ;
40055: LD_ADDR_VAR 0 2
40059: PUSH
40060: EMPTY
40061: ST_TO_ADDR
// if not array then
40062: LD_VAR 0 1
40066: NOT
40067: IFFALSE 40071
// exit ;
40069: GO 40170
// Randomize ;
40071: CALL_OW 10
// for i = array downto 1 do
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: DOUBLE
40081: LD_VAR 0 1
40085: INC
40086: ST_TO_ADDR
40087: LD_INT 1
40089: PUSH
40090: FOR_DOWNTO
40091: IFFALSE 40168
// begin index := rand ( 1 , array ) ;
40093: LD_ADDR_VAR 0 4
40097: PUSH
40098: LD_INT 1
40100: PPUSH
40101: LD_VAR 0 1
40105: PPUSH
40106: CALL_OW 12
40110: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40111: LD_ADDR_VAR 0 2
40115: PUSH
40116: LD_VAR 0 2
40120: PPUSH
40121: LD_VAR 0 2
40125: PUSH
40126: LD_INT 1
40128: PLUS
40129: PPUSH
40130: LD_VAR 0 1
40134: PUSH
40135: LD_VAR 0 4
40139: ARRAY
40140: PPUSH
40141: CALL_OW 2
40145: ST_TO_ADDR
// array := Delete ( array , index ) ;
40146: LD_ADDR_VAR 0 1
40150: PUSH
40151: LD_VAR 0 1
40155: PPUSH
40156: LD_VAR 0 4
40160: PPUSH
40161: CALL_OW 3
40165: ST_TO_ADDR
// end ;
40166: GO 40090
40168: POP
40169: POP
// end ;
40170: LD_VAR 0 2
40174: RET
// export function GetBaseMaterials ( base ) ; begin
40175: LD_INT 0
40177: PPUSH
// result := [ 0 , 0 , 0 ] ;
40178: LD_ADDR_VAR 0 2
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: ST_TO_ADDR
// if not base then
40197: LD_VAR 0 1
40201: NOT
40202: IFFALSE 40206
// exit ;
40204: GO 40255
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40206: LD_ADDR_VAR 0 2
40210: PUSH
40211: LD_VAR 0 1
40215: PPUSH
40216: LD_INT 1
40218: PPUSH
40219: CALL_OW 275
40223: PUSH
40224: LD_VAR 0 1
40228: PPUSH
40229: LD_INT 2
40231: PPUSH
40232: CALL_OW 275
40236: PUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: LD_INT 3
40244: PPUSH
40245: CALL_OW 275
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: ST_TO_ADDR
// end ;
40255: LD_VAR 0 2
40259: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40260: LD_INT 0
40262: PPUSH
40263: PPUSH
// result := array ;
40264: LD_ADDR_VAR 0 3
40268: PUSH
40269: LD_VAR 0 1
40273: ST_TO_ADDR
// if size >= result then
40274: LD_VAR 0 2
40278: PUSH
40279: LD_VAR 0 3
40283: GREATEREQUAL
40284: IFFALSE 40288
// exit ;
40286: GO 40338
// if size then
40288: LD_VAR 0 2
40292: IFFALSE 40338
// for i := array downto size do
40294: LD_ADDR_VAR 0 4
40298: PUSH
40299: DOUBLE
40300: LD_VAR 0 1
40304: INC
40305: ST_TO_ADDR
40306: LD_VAR 0 2
40310: PUSH
40311: FOR_DOWNTO
40312: IFFALSE 40336
// result := Delete ( result , result ) ;
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: LD_VAR 0 3
40323: PPUSH
40324: LD_VAR 0 3
40328: PPUSH
40329: CALL_OW 3
40333: ST_TO_ADDR
40334: GO 40311
40336: POP
40337: POP
// end ;
40338: LD_VAR 0 3
40342: RET
// export function ComExit ( unit ) ; var tmp ; begin
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
// if not IsInUnit ( unit ) then
40347: LD_VAR 0 1
40351: PPUSH
40352: CALL_OW 310
40356: NOT
40357: IFFALSE 40361
// exit ;
40359: GO 40421
// tmp := IsInUnit ( unit ) ;
40361: LD_ADDR_VAR 0 3
40365: PUSH
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 310
40375: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40376: LD_VAR 0 3
40380: PPUSH
40381: CALL_OW 247
40385: PUSH
40386: LD_INT 2
40388: EQUAL
40389: IFFALSE 40402
// ComExitVehicle ( unit ) else
40391: LD_VAR 0 1
40395: PPUSH
40396: CALL_OW 121
40400: GO 40411
// ComExitBuilding ( unit ) ;
40402: LD_VAR 0 1
40406: PPUSH
40407: CALL_OW 122
// result := tmp ;
40411: LD_ADDR_VAR 0 2
40415: PUSH
40416: LD_VAR 0 3
40420: ST_TO_ADDR
// end ;
40421: LD_VAR 0 2
40425: RET
// export function ComExitAll ( units ) ; var i ; begin
40426: LD_INT 0
40428: PPUSH
40429: PPUSH
// if not units then
40430: LD_VAR 0 1
40434: NOT
40435: IFFALSE 40439
// exit ;
40437: GO 40465
// for i in units do
40439: LD_ADDR_VAR 0 3
40443: PUSH
40444: LD_VAR 0 1
40448: PUSH
40449: FOR_IN
40450: IFFALSE 40463
// ComExit ( i ) ;
40452: LD_VAR 0 3
40456: PPUSH
40457: CALL 40343 0 1
40461: GO 40449
40463: POP
40464: POP
// end ;
40465: LD_VAR 0 2
40469: RET
// export function ResetHc ; begin
40470: LD_INT 0
40472: PPUSH
// InitHc ;
40473: CALL_OW 19
// hc_importance := 0 ;
40477: LD_ADDR_OWVAR 32
40481: PUSH
40482: LD_INT 0
40484: ST_TO_ADDR
// end ;
40485: LD_VAR 0 1
40489: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40490: LD_INT 0
40492: PPUSH
40493: PPUSH
40494: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40495: LD_ADDR_VAR 0 6
40499: PUSH
40500: LD_VAR 0 1
40504: PUSH
40505: LD_VAR 0 3
40509: PLUS
40510: PUSH
40511: LD_INT 2
40513: DIV
40514: ST_TO_ADDR
// if _x < 0 then
40515: LD_VAR 0 6
40519: PUSH
40520: LD_INT 0
40522: LESS
40523: IFFALSE 40540
// _x := _x * - 1 ;
40525: LD_ADDR_VAR 0 6
40529: PUSH
40530: LD_VAR 0 6
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: MUL
40539: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40540: LD_ADDR_VAR 0 7
40544: PUSH
40545: LD_VAR 0 2
40549: PUSH
40550: LD_VAR 0 4
40554: PLUS
40555: PUSH
40556: LD_INT 2
40558: DIV
40559: ST_TO_ADDR
// if _y < 0 then
40560: LD_VAR 0 7
40564: PUSH
40565: LD_INT 0
40567: LESS
40568: IFFALSE 40585
// _y := _y * - 1 ;
40570: LD_ADDR_VAR 0 7
40574: PUSH
40575: LD_VAR 0 7
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: MUL
40584: ST_TO_ADDR
// result := [ _x , _y ] ;
40585: LD_ADDR_VAR 0 5
40589: PUSH
40590: LD_VAR 0 6
40594: PUSH
40595: LD_VAR 0 7
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// end ;
40604: LD_VAR 0 5
40608: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40609: LD_INT 0
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
// task := GetTaskList ( unit ) ;
40615: LD_ADDR_VAR 0 7
40619: PUSH
40620: LD_VAR 0 1
40624: PPUSH
40625: CALL_OW 437
40629: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40630: LD_VAR 0 7
40634: NOT
40635: IFFALSE 40654
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: LD_VAR 0 2
40647: PPUSH
40648: CALL_OW 308
40652: NOT
40653: AND
40654: IFFALSE 40658
// exit ;
40656: GO 40776
// if IsInArea ( unit , area ) then
40658: LD_VAR 0 1
40662: PPUSH
40663: LD_VAR 0 2
40667: PPUSH
40668: CALL_OW 308
40672: IFFALSE 40690
// begin ComMoveToArea ( unit , goAway ) ;
40674: LD_VAR 0 1
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: CALL_OW 113
// exit ;
40688: GO 40776
// end ; if task [ 1 ] [ 1 ] <> M then
40690: LD_VAR 0 7
40694: PUSH
40695: LD_INT 1
40697: ARRAY
40698: PUSH
40699: LD_INT 1
40701: ARRAY
40702: PUSH
40703: LD_STRING M
40705: NONEQUAL
40706: IFFALSE 40710
// exit ;
40708: GO 40776
// x := task [ 1 ] [ 2 ] ;
40710: LD_ADDR_VAR 0 5
40714: PUSH
40715: LD_VAR 0 7
40719: PUSH
40720: LD_INT 1
40722: ARRAY
40723: PUSH
40724: LD_INT 2
40726: ARRAY
40727: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40728: LD_ADDR_VAR 0 6
40732: PUSH
40733: LD_VAR 0 7
40737: PUSH
40738: LD_INT 1
40740: ARRAY
40741: PUSH
40742: LD_INT 3
40744: ARRAY
40745: ST_TO_ADDR
// if InArea ( x , y , area ) then
40746: LD_VAR 0 5
40750: PPUSH
40751: LD_VAR 0 6
40755: PPUSH
40756: LD_VAR 0 2
40760: PPUSH
40761: CALL_OW 309
40765: IFFALSE 40776
// ComStop ( unit ) ;
40767: LD_VAR 0 1
40771: PPUSH
40772: CALL_OW 141
// end ;
40776: LD_VAR 0 4
40780: RET
// export function Abs ( value ) ; begin
40781: LD_INT 0
40783: PPUSH
// result := value ;
40784: LD_ADDR_VAR 0 2
40788: PUSH
40789: LD_VAR 0 1
40793: ST_TO_ADDR
// if value < 0 then
40794: LD_VAR 0 1
40798: PUSH
40799: LD_INT 0
40801: LESS
40802: IFFALSE 40819
// result := value * - 1 ;
40804: LD_ADDR_VAR 0 2
40808: PUSH
40809: LD_VAR 0 1
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: MUL
40818: ST_TO_ADDR
// end ;
40819: LD_VAR 0 2
40823: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40824: LD_INT 0
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
// if not unit or not building then
40834: LD_VAR 0 1
40838: NOT
40839: IFTRUE 40848
40841: PUSH
40842: LD_VAR 0 2
40846: NOT
40847: OR
40848: IFFALSE 40852
// exit ;
40850: GO 41080
// x := GetX ( building ) ;
40852: LD_ADDR_VAR 0 4
40856: PUSH
40857: LD_VAR 0 2
40861: PPUSH
40862: CALL_OW 250
40866: ST_TO_ADDR
// y := GetY ( building ) ;
40867: LD_ADDR_VAR 0 6
40871: PUSH
40872: LD_VAR 0 2
40876: PPUSH
40877: CALL_OW 251
40881: ST_TO_ADDR
// d := GetDir ( building ) ;
40882: LD_ADDR_VAR 0 8
40886: PUSH
40887: LD_VAR 0 2
40891: PPUSH
40892: CALL_OW 254
40896: ST_TO_ADDR
// r := 4 ;
40897: LD_ADDR_VAR 0 9
40901: PUSH
40902: LD_INT 4
40904: ST_TO_ADDR
// for i := 1 to 5 do
40905: LD_ADDR_VAR 0 10
40909: PUSH
40910: DOUBLE
40911: LD_INT 1
40913: DEC
40914: ST_TO_ADDR
40915: LD_INT 5
40917: PUSH
40918: FOR_TO
40919: IFFALSE 41078
// begin _x := ShiftX ( x , d , r + i ) ;
40921: LD_ADDR_VAR 0 5
40925: PUSH
40926: LD_VAR 0 4
40930: PPUSH
40931: LD_VAR 0 8
40935: PPUSH
40936: LD_VAR 0 9
40940: PUSH
40941: LD_VAR 0 10
40945: PLUS
40946: PPUSH
40947: CALL_OW 272
40951: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40952: LD_ADDR_VAR 0 7
40956: PUSH
40957: LD_VAR 0 6
40961: PPUSH
40962: LD_VAR 0 8
40966: PPUSH
40967: LD_VAR 0 9
40971: PUSH
40972: LD_VAR 0 10
40976: PLUS
40977: PPUSH
40978: CALL_OW 273
40982: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40983: LD_VAR 0 5
40987: PPUSH
40988: LD_VAR 0 7
40992: PPUSH
40993: CALL_OW 488
40997: IFFALSE 41032
40999: PUSH
41000: LD_VAR 0 5
41004: PPUSH
41005: LD_VAR 0 7
41009: PPUSH
41010: CALL_OW 428
41014: PPUSH
41015: CALL_OW 247
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: IN
41030: NOT
41031: AND
41032: IFFALSE 41076
// begin ComMoveXY ( unit , _x , _y ) ;
41034: LD_VAR 0 1
41038: PPUSH
41039: LD_VAR 0 5
41043: PPUSH
41044: LD_VAR 0 7
41048: PPUSH
41049: CALL_OW 111
// result := [ _x , _y ] ;
41053: LD_ADDR_VAR 0 3
41057: PUSH
41058: LD_VAR 0 5
41062: PUSH
41063: LD_VAR 0 7
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: ST_TO_ADDR
// exit ;
41072: POP
41073: POP
41074: GO 41080
// end ; end ;
41076: GO 40918
41078: POP
41079: POP
// end ;
41080: LD_VAR 0 3
41084: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41085: LD_INT 0
41087: PPUSH
41088: PPUSH
41089: PPUSH
// result := 0 ;
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_INT 0
41097: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41098: LD_VAR 0 1
41102: PUSH
41103: LD_INT 0
41105: LESS
41106: IFTRUE 41118
41108: PUSH
41109: LD_VAR 0 1
41113: PUSH
41114: LD_INT 8
41116: GREATER
41117: OR
41118: IFTRUE 41130
41120: PUSH
41121: LD_VAR 0 2
41125: PUSH
41126: LD_INT 0
41128: LESS
41129: OR
41130: IFTRUE 41142
41132: PUSH
41133: LD_VAR 0 2
41137: PUSH
41138: LD_INT 8
41140: GREATER
41141: OR
41142: IFFALSE 41146
// exit ;
41144: GO 41221
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41146: LD_ADDR_VAR 0 4
41150: PUSH
41151: LD_INT 22
41153: PUSH
41154: LD_VAR 0 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PPUSH
41163: CALL_OW 69
41167: PUSH
41168: FOR_IN
41169: IFFALSE 41219
// begin un := UnitShoot ( i ) ;
41171: LD_ADDR_VAR 0 5
41175: PUSH
41176: LD_VAR 0 4
41180: PPUSH
41181: CALL_OW 504
41185: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41186: LD_VAR 0 5
41190: PPUSH
41191: CALL_OW 255
41195: PUSH
41196: LD_VAR 0 1
41200: EQUAL
41201: IFFALSE 41217
// begin result := un ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_VAR 0 5
41212: ST_TO_ADDR
// exit ;
41213: POP
41214: POP
41215: GO 41221
// end ; end ;
41217: GO 41168
41219: POP
41220: POP
// end ;
41221: LD_VAR 0 3
41225: RET
// export function GetCargoBay ( units ) ; begin
41226: LD_INT 0
41228: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41229: LD_ADDR_VAR 0 2
41233: PUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: LD_INT 2
41241: PUSH
41242: LD_INT 34
41244: PUSH
41245: LD_INT 12
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 34
41254: PUSH
41255: LD_INT 51
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 34
41264: PUSH
41265: LD_INT 32
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 34
41274: PUSH
41275: LD_INT 89
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: PPUSH
41289: CALL_OW 72
41293: ST_TO_ADDR
// end ;
41294: LD_VAR 0 2
41298: RET
// export function Negate ( value ) ; begin
41299: LD_INT 0
41301: PPUSH
// result := not value ;
41302: LD_ADDR_VAR 0 2
41306: PUSH
41307: LD_VAR 0 1
41311: NOT
41312: ST_TO_ADDR
// end ;
41313: LD_VAR 0 2
41317: RET
// export function Inc ( value ) ; begin
41318: LD_INT 0
41320: PPUSH
// result := value + 1 ;
41321: LD_ADDR_VAR 0 2
41325: PUSH
41326: LD_VAR 0 1
41330: PUSH
41331: LD_INT 1
41333: PLUS
41334: ST_TO_ADDR
// end ;
41335: LD_VAR 0 2
41339: RET
// export function Dec ( value ) ; begin
41340: LD_INT 0
41342: PPUSH
// result := value - 1 ;
41343: LD_ADDR_VAR 0 2
41347: PUSH
41348: LD_VAR 0 1
41352: PUSH
41353: LD_INT 1
41355: MINUS
41356: ST_TO_ADDR
// end ;
41357: LD_VAR 0 2
41361: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41362: LD_INT 0
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41372: LD_VAR 0 1
41376: PPUSH
41377: LD_VAR 0 2
41381: PPUSH
41382: CALL_OW 488
41386: NOT
41387: IFTRUE 41406
41389: PUSH
41390: LD_VAR 0 3
41394: PPUSH
41395: LD_VAR 0 4
41399: PPUSH
41400: CALL_OW 488
41404: NOT
41405: OR
41406: IFFALSE 41419
// begin result := - 1 ;
41408: LD_ADDR_VAR 0 5
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: ST_TO_ADDR
// exit ;
41417: GO 41654
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41419: LD_ADDR_VAR 0 12
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: LD_VAR 0 2
41433: PPUSH
41434: LD_VAR 0 3
41438: PPUSH
41439: LD_VAR 0 4
41443: PPUSH
41444: CALL 40490 0 4
41448: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41449: LD_ADDR_VAR 0 11
41453: PUSH
41454: LD_VAR 0 1
41458: PPUSH
41459: LD_VAR 0 2
41463: PPUSH
41464: LD_VAR 0 12
41468: PUSH
41469: LD_INT 1
41471: ARRAY
41472: PPUSH
41473: LD_VAR 0 12
41477: PUSH
41478: LD_INT 2
41480: ARRAY
41481: PPUSH
41482: CALL_OW 298
41486: ST_TO_ADDR
// distance := 9999 ;
41487: LD_ADDR_VAR 0 10
41491: PUSH
41492: LD_INT 9999
41494: ST_TO_ADDR
// for i := 0 to 5 do
41495: LD_ADDR_VAR 0 6
41499: PUSH
41500: DOUBLE
41501: LD_INT 0
41503: DEC
41504: ST_TO_ADDR
41505: LD_INT 5
41507: PUSH
41508: FOR_TO
41509: IFFALSE 41652
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41511: LD_ADDR_VAR 0 7
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_VAR 0 6
41525: PPUSH
41526: LD_VAR 0 11
41530: PPUSH
41531: CALL_OW 272
41535: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41536: LD_ADDR_VAR 0 8
41540: PUSH
41541: LD_VAR 0 2
41545: PPUSH
41546: LD_VAR 0 6
41550: PPUSH
41551: LD_VAR 0 11
41555: PPUSH
41556: CALL_OW 273
41560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41561: LD_VAR 0 7
41565: PPUSH
41566: LD_VAR 0 8
41570: PPUSH
41571: CALL_OW 488
41575: NOT
41576: IFFALSE 41580
// continue ;
41578: GO 41508
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41580: LD_ADDR_VAR 0 9
41584: PUSH
41585: LD_VAR 0 12
41589: PUSH
41590: LD_INT 1
41592: ARRAY
41593: PPUSH
41594: LD_VAR 0 12
41598: PUSH
41599: LD_INT 2
41601: ARRAY
41602: PPUSH
41603: LD_VAR 0 7
41607: PPUSH
41608: LD_VAR 0 8
41612: PPUSH
41613: CALL_OW 298
41617: ST_TO_ADDR
// if tmp < distance then
41618: LD_VAR 0 9
41622: PUSH
41623: LD_VAR 0 10
41627: LESS
41628: IFFALSE 41650
// begin result := i ;
41630: LD_ADDR_VAR 0 5
41634: PUSH
41635: LD_VAR 0 6
41639: ST_TO_ADDR
// distance := tmp ;
41640: LD_ADDR_VAR 0 10
41644: PUSH
41645: LD_VAR 0 9
41649: ST_TO_ADDR
// end ; end ;
41650: GO 41508
41652: POP
41653: POP
// end ;
41654: LD_VAR 0 5
41658: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41659: LD_INT 0
41661: PPUSH
41662: PPUSH
// if not driver or not IsInUnit ( driver ) then
41663: LD_VAR 0 1
41667: NOT
41668: IFTRUE 41682
41670: PUSH
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 310
41680: NOT
41681: OR
41682: IFFALSE 41686
// exit ;
41684: GO 41776
// vehicle := IsInUnit ( driver ) ;
41686: LD_ADDR_VAR 0 3
41690: PUSH
41691: LD_VAR 0 1
41695: PPUSH
41696: CALL_OW 310
41700: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41701: LD_VAR 0 1
41705: PPUSH
41706: LD_STRING \
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: PUSH
41736: LD_STRING E
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: LD_VAR 0 3
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PPUSH
41772: CALL_OW 446
// end ;
41776: LD_VAR 0 2
41780: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41781: LD_INT 0
41783: PPUSH
41784: PPUSH
// if not driver or not IsInUnit ( driver ) then
41785: LD_VAR 0 1
41789: NOT
41790: IFTRUE 41804
41792: PUSH
41793: LD_VAR 0 1
41797: PPUSH
41798: CALL_OW 310
41802: NOT
41803: OR
41804: IFFALSE 41808
// exit ;
41806: GO 41898
// vehicle := IsInUnit ( driver ) ;
41808: LD_ADDR_VAR 0 3
41812: PUSH
41813: LD_VAR 0 1
41817: PPUSH
41818: CALL_OW 310
41822: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41823: LD_VAR 0 1
41827: PPUSH
41828: LD_STRING \
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: PUSH
41858: LD_STRING E
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_VAR 0 3
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PPUSH
41894: CALL_OW 447
// end ;
41898: LD_VAR 0 2
41902: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41903: LD_INT 0
41905: PPUSH
41906: PPUSH
41907: PPUSH
// tmp := [ ] ;
41908: LD_ADDR_VAR 0 5
41912: PUSH
41913: EMPTY
41914: ST_TO_ADDR
// for i in units do
41915: LD_ADDR_VAR 0 4
41919: PUSH
41920: LD_VAR 0 1
41924: PUSH
41925: FOR_IN
41926: IFFALSE 41964
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41928: LD_ADDR_VAR 0 5
41932: PUSH
41933: LD_VAR 0 5
41937: PPUSH
41938: LD_VAR 0 5
41942: PUSH
41943: LD_INT 1
41945: PLUS
41946: PPUSH
41947: LD_VAR 0 4
41951: PPUSH
41952: CALL_OW 256
41956: PPUSH
41957: CALL_OW 2
41961: ST_TO_ADDR
41962: GO 41925
41964: POP
41965: POP
// if not tmp then
41966: LD_VAR 0 5
41970: NOT
41971: IFFALSE 41975
// exit ;
41973: GO 42023
// if asc then
41975: LD_VAR 0 2
41979: IFFALSE 42003
// result := SortListByListAsc ( units , tmp ) else
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_VAR 0 1
41990: PPUSH
41991: LD_VAR 0 5
41995: PPUSH
41996: CALL_OW 76
42000: ST_TO_ADDR
42001: GO 42023
// result := SortListByListDesc ( units , tmp ) ;
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_VAR 0 1
42012: PPUSH
42013: LD_VAR 0 5
42017: PPUSH
42018: CALL_OW 77
42022: ST_TO_ADDR
// end ;
42023: LD_VAR 0 3
42027: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42028: LD_INT 0
42030: PPUSH
42031: PPUSH
// task := GetTaskList ( mech ) ;
42032: LD_ADDR_VAR 0 4
42036: PUSH
42037: LD_VAR 0 1
42041: PPUSH
42042: CALL_OW 437
42046: ST_TO_ADDR
// if not task then
42047: LD_VAR 0 4
42051: NOT
42052: IFFALSE 42056
// exit ;
42054: GO 42100
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42056: LD_ADDR_VAR 0 3
42060: PUSH
42061: LD_VAR 0 4
42065: PUSH
42066: LD_INT 1
42068: ARRAY
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: PUSH
42074: LD_STRING r
42076: EQUAL
42077: IFFALSE 42099
42079: PUSH
42080: LD_VAR 0 4
42084: PUSH
42085: LD_INT 1
42087: ARRAY
42088: PUSH
42089: LD_INT 4
42091: ARRAY
42092: PUSH
42093: LD_VAR 0 2
42097: EQUAL
42098: AND
42099: ST_TO_ADDR
// end ;
42100: LD_VAR 0 3
42104: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42105: LD_INT 0
42107: PPUSH
// SetDir ( unit , d ) ;
42108: LD_VAR 0 1
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42122: LD_ADDR_VAR 0 6
42126: PUSH
42127: LD_VAR 0 1
42131: PPUSH
42132: LD_VAR 0 2
42136: PPUSH
42137: LD_VAR 0 3
42141: PPUSH
42142: LD_VAR 0 5
42146: PPUSH
42147: CALL_OW 48
42151: ST_TO_ADDR
// end ;
42152: LD_VAR 0 6
42156: RET
// export function ToNaturalNumber ( number ) ; begin
42157: LD_INT 0
42159: PPUSH
// result := number div 1 ;
42160: LD_ADDR_VAR 0 2
42164: PUSH
42165: LD_VAR 0 1
42169: PUSH
42170: LD_INT 1
42172: DIV
42173: ST_TO_ADDR
// if number < 0 then
42174: LD_VAR 0 1
42178: PUSH
42179: LD_INT 0
42181: LESS
42182: IFFALSE 42192
// result := 0 ;
42184: LD_ADDR_VAR 0 2
42188: PUSH
42189: LD_INT 0
42191: ST_TO_ADDR
// end ;
42192: LD_VAR 0 2
42196: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
42197: LD_INT 0
42199: PPUSH
42200: PPUSH
42201: PPUSH
// if not buildings then
42202: LD_VAR 0 1
42206: NOT
42207: IFFALSE 42211
// exit ;
42209: GO 42326
// tmp := [ ] ;
42211: LD_ADDR_VAR 0 5
42215: PUSH
42216: EMPTY
42217: ST_TO_ADDR
// for b in buildings do
42218: LD_ADDR_VAR 0 4
42222: PUSH
42223: LD_VAR 0 1
42227: PUSH
42228: FOR_IN
42229: IFFALSE 42267
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
42231: LD_ADDR_VAR 0 5
42235: PUSH
42236: LD_VAR 0 5
42240: PPUSH
42241: LD_VAR 0 5
42245: PUSH
42246: LD_INT 1
42248: PLUS
42249: PPUSH
42250: LD_VAR 0 4
42254: PPUSH
42255: CALL_OW 266
42259: PPUSH
42260: CALL_OW 1
42264: ST_TO_ADDR
42265: GO 42228
42267: POP
42268: POP
// if not tmp then
42269: LD_VAR 0 5
42273: NOT
42274: IFFALSE 42278
// exit ;
42276: GO 42326
// if asc then
42278: LD_VAR 0 2
42282: IFFALSE 42306
// result := SortListByListAsc ( buildings , tmp ) else
42284: LD_ADDR_VAR 0 3
42288: PUSH
42289: LD_VAR 0 1
42293: PPUSH
42294: LD_VAR 0 5
42298: PPUSH
42299: CALL_OW 76
42303: ST_TO_ADDR
42304: GO 42326
// result := SortListByListDesc ( buildings , tmp ) ;
42306: LD_ADDR_VAR 0 3
42310: PUSH
42311: LD_VAR 0 1
42315: PPUSH
42316: LD_VAR 0 5
42320: PPUSH
42321: CALL_OW 77
42325: ST_TO_ADDR
// end ;
42326: LD_VAR 0 3
42330: RET
// export function SortByClass ( units , class ) ; var un ; begin
42331: LD_INT 0
42333: PPUSH
42334: PPUSH
// if not units or not class then
42335: LD_VAR 0 1
42339: NOT
42340: IFTRUE 42349
42342: PUSH
42343: LD_VAR 0 2
42347: NOT
42348: OR
42349: IFFALSE 42353
// exit ;
42351: GO 42448
// result := [ ] ;
42353: LD_ADDR_VAR 0 3
42357: PUSH
42358: EMPTY
42359: ST_TO_ADDR
// for un in units do
42360: LD_ADDR_VAR 0 4
42364: PUSH
42365: LD_VAR 0 1
42369: PUSH
42370: FOR_IN
42371: IFFALSE 42446
// if GetClass ( un ) = class then
42373: LD_VAR 0 4
42377: PPUSH
42378: CALL_OW 257
42382: PUSH
42383: LD_VAR 0 2
42387: EQUAL
42388: IFFALSE 42415
// result := Insert ( result , 1 , un ) else
42390: LD_ADDR_VAR 0 3
42394: PUSH
42395: LD_VAR 0 3
42399: PPUSH
42400: LD_INT 1
42402: PPUSH
42403: LD_VAR 0 4
42407: PPUSH
42408: CALL_OW 2
42412: ST_TO_ADDR
42413: GO 42444
// result := Replace ( result , result + 1 , un ) ;
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_VAR 0 3
42424: PPUSH
42425: LD_VAR 0 3
42429: PUSH
42430: LD_INT 1
42432: PLUS
42433: PPUSH
42434: LD_VAR 0 4
42438: PPUSH
42439: CALL_OW 1
42443: ST_TO_ADDR
42444: GO 42370
42446: POP
42447: POP
// end ;
42448: LD_VAR 0 3
42452: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
// result := [ ] ;
42462: LD_ADDR_VAR 0 4
42466: PUSH
42467: EMPTY
42468: ST_TO_ADDR
// if x - r < 0 then
42469: LD_VAR 0 1
42473: PUSH
42474: LD_VAR 0 3
42478: MINUS
42479: PUSH
42480: LD_INT 0
42482: LESS
42483: IFFALSE 42495
// min_x := 0 else
42485: LD_ADDR_VAR 0 8
42489: PUSH
42490: LD_INT 0
42492: ST_TO_ADDR
42493: GO 42511
// min_x := x - r ;
42495: LD_ADDR_VAR 0 8
42499: PUSH
42500: LD_VAR 0 1
42504: PUSH
42505: LD_VAR 0 3
42509: MINUS
42510: ST_TO_ADDR
// if y - r < 0 then
42511: LD_VAR 0 2
42515: PUSH
42516: LD_VAR 0 3
42520: MINUS
42521: PUSH
42522: LD_INT 0
42524: LESS
42525: IFFALSE 42537
// min_y := 0 else
42527: LD_ADDR_VAR 0 7
42531: PUSH
42532: LD_INT 0
42534: ST_TO_ADDR
42535: GO 42553
// min_y := y - r ;
42537: LD_ADDR_VAR 0 7
42541: PUSH
42542: LD_VAR 0 2
42546: PUSH
42547: LD_VAR 0 3
42551: MINUS
42552: ST_TO_ADDR
// max_x := x + r ;
42553: LD_ADDR_VAR 0 9
42557: PUSH
42558: LD_VAR 0 1
42562: PUSH
42563: LD_VAR 0 3
42567: PLUS
42568: ST_TO_ADDR
// max_y := y + r ;
42569: LD_ADDR_VAR 0 10
42573: PUSH
42574: LD_VAR 0 2
42578: PUSH
42579: LD_VAR 0 3
42583: PLUS
42584: ST_TO_ADDR
// for _x = min_x to max_x do
42585: LD_ADDR_VAR 0 5
42589: PUSH
42590: DOUBLE
42591: LD_VAR 0 8
42595: DEC
42596: ST_TO_ADDR
42597: LD_VAR 0 9
42601: PUSH
42602: FOR_TO
42603: IFFALSE 42704
// for _y = min_y to max_y do
42605: LD_ADDR_VAR 0 6
42609: PUSH
42610: DOUBLE
42611: LD_VAR 0 7
42615: DEC
42616: ST_TO_ADDR
42617: LD_VAR 0 10
42621: PUSH
42622: FOR_TO
42623: IFFALSE 42700
// begin if not ValidHex ( _x , _y ) then
42625: LD_VAR 0 5
42629: PPUSH
42630: LD_VAR 0 6
42634: PPUSH
42635: CALL_OW 488
42639: NOT
42640: IFFALSE 42644
// continue ;
42642: GO 42622
// if GetResourceTypeXY ( _x , _y ) then
42644: LD_VAR 0 5
42648: PPUSH
42649: LD_VAR 0 6
42653: PPUSH
42654: CALL_OW 283
42658: IFFALSE 42698
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42660: LD_ADDR_VAR 0 4
42664: PUSH
42665: LD_VAR 0 4
42669: PPUSH
42670: LD_VAR 0 4
42674: PUSH
42675: LD_INT 1
42677: PLUS
42678: PPUSH
42679: LD_VAR 0 5
42683: PUSH
42684: LD_VAR 0 6
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PPUSH
42693: CALL_OW 1
42697: ST_TO_ADDR
// end ;
42698: GO 42622
42700: POP
42701: POP
42702: GO 42602
42704: POP
42705: POP
// end ;
42706: LD_VAR 0 4
42710: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42711: LD_INT 0
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
// if not units then
42721: LD_VAR 0 1
42725: NOT
42726: IFFALSE 42730
// exit ;
42728: GO 43262
// result := UnitFilter ( units , [ f_ok ] ) ;
42730: LD_ADDR_VAR 0 3
42734: PUSH
42735: LD_VAR 0 1
42739: PPUSH
42740: LD_INT 50
42742: PUSH
42743: EMPTY
42744: LIST
42745: PPUSH
42746: CALL_OW 72
42750: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42751: LD_ADDR_VAR 0 8
42755: PUSH
42756: LD_VAR 0 1
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PPUSH
42765: CALL_OW 255
42769: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42770: LD_ADDR_VAR 0 10
42774: PUSH
42775: LD_INT 29
42777: PUSH
42778: LD_INT 91
42780: PUSH
42781: LD_INT 49
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// if not result then
42789: LD_VAR 0 3
42793: NOT
42794: IFFALSE 42798
// exit ;
42796: GO 43262
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42798: LD_ADDR_VAR 0 5
42802: PUSH
42803: LD_INT 81
42805: PUSH
42806: LD_VAR 0 8
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PPUSH
42815: CALL_OW 69
42819: ST_TO_ADDR
// for i in result do
42820: LD_ADDR_VAR 0 4
42824: PUSH
42825: LD_VAR 0 3
42829: PUSH
42830: FOR_IN
42831: IFFALSE 43260
// begin tag := GetTag ( i ) + 1 ;
42833: LD_ADDR_VAR 0 9
42837: PUSH
42838: LD_VAR 0 4
42842: PPUSH
42843: CALL_OW 110
42847: PUSH
42848: LD_INT 1
42850: PLUS
42851: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42852: LD_ADDR_VAR 0 7
42856: PUSH
42857: LD_VAR 0 4
42861: PPUSH
42862: CALL_OW 250
42866: PPUSH
42867: LD_VAR 0 4
42871: PPUSH
42872: CALL_OW 251
42876: PPUSH
42877: LD_INT 4
42879: PPUSH
42880: CALL 42453 0 3
42884: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42885: LD_VAR 0 4
42889: PPUSH
42890: CALL_OW 247
42894: PUSH
42895: LD_INT 2
42897: EQUAL
42898: IFFALSE 42910
42900: PUSH
42901: LD_VAR 0 7
42905: PUSH
42906: LD_INT 2
42908: GREATER
42909: AND
42910: IFFALSE 42930
42912: PUSH
42913: LD_VAR 0 4
42917: PPUSH
42918: CALL_OW 264
42922: PUSH
42923: LD_VAR 0 10
42927: IN
42928: NOT
42929: AND
42930: IFFALSE 42969
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42932: LD_VAR 0 4
42936: PPUSH
42937: LD_VAR 0 7
42941: PUSH
42942: LD_INT 1
42944: ARRAY
42945: PUSH
42946: LD_INT 1
42948: ARRAY
42949: PPUSH
42950: LD_VAR 0 7
42954: PUSH
42955: LD_INT 1
42957: ARRAY
42958: PUSH
42959: LD_INT 2
42961: ARRAY
42962: PPUSH
42963: CALL_OW 116
42967: GO 43258
// if path > tag then
42969: LD_VAR 0 2
42973: PUSH
42974: LD_VAR 0 9
42978: GREATER
42979: IFFALSE 43187
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42981: LD_ADDR_VAR 0 6
42985: PUSH
42986: LD_VAR 0 5
42990: PPUSH
42991: LD_INT 91
42993: PUSH
42994: LD_VAR 0 4
42998: PUSH
42999: LD_INT 8
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: PPUSH
43007: CALL_OW 72
43011: ST_TO_ADDR
// if nearEnemy then
43012: LD_VAR 0 6
43016: IFFALSE 43085
// begin if GetWeapon ( i ) = ru_time_lapser then
43018: LD_VAR 0 4
43022: PPUSH
43023: CALL_OW 264
43027: PUSH
43028: LD_INT 49
43030: EQUAL
43031: IFFALSE 43059
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43033: LD_VAR 0 4
43037: PPUSH
43038: LD_VAR 0 6
43042: PPUSH
43043: LD_VAR 0 4
43047: PPUSH
43048: CALL_OW 74
43052: PPUSH
43053: CALL_OW 112
43057: GO 43083
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43059: LD_VAR 0 4
43063: PPUSH
43064: LD_VAR 0 6
43068: PPUSH
43069: LD_VAR 0 4
43073: PPUSH
43074: CALL_OW 74
43078: PPUSH
43079: CALL 44343 0 2
// end else
43083: GO 43185
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43085: LD_VAR 0 4
43089: PPUSH
43090: LD_VAR 0 2
43094: PUSH
43095: LD_VAR 0 9
43099: ARRAY
43100: PUSH
43101: LD_INT 1
43103: ARRAY
43104: PPUSH
43105: LD_VAR 0 2
43109: PUSH
43110: LD_VAR 0 9
43114: ARRAY
43115: PUSH
43116: LD_INT 2
43118: ARRAY
43119: PPUSH
43120: CALL_OW 297
43124: PUSH
43125: LD_INT 6
43127: GREATER
43128: IFFALSE 43171
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43130: LD_VAR 0 4
43134: PPUSH
43135: LD_VAR 0 2
43139: PUSH
43140: LD_VAR 0 9
43144: ARRAY
43145: PUSH
43146: LD_INT 1
43148: ARRAY
43149: PPUSH
43150: LD_VAR 0 2
43154: PUSH
43155: LD_VAR 0 9
43159: ARRAY
43160: PUSH
43161: LD_INT 2
43163: ARRAY
43164: PPUSH
43165: CALL_OW 114
43169: GO 43185
// SetTag ( i , tag ) ;
43171: LD_VAR 0 4
43175: PPUSH
43176: LD_VAR 0 9
43180: PPUSH
43181: CALL_OW 109
// end else
43185: GO 43258
// if enemy then
43187: LD_VAR 0 5
43191: IFFALSE 43258
// begin if GetWeapon ( i ) = ru_time_lapser then
43193: LD_VAR 0 4
43197: PPUSH
43198: CALL_OW 264
43202: PUSH
43203: LD_INT 49
43205: EQUAL
43206: IFFALSE 43234
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43208: LD_VAR 0 4
43212: PPUSH
43213: LD_VAR 0 5
43217: PPUSH
43218: LD_VAR 0 4
43222: PPUSH
43223: CALL_OW 74
43227: PPUSH
43228: CALL_OW 112
43232: GO 43258
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43234: LD_VAR 0 4
43238: PPUSH
43239: LD_VAR 0 5
43243: PPUSH
43244: LD_VAR 0 4
43248: PPUSH
43249: CALL_OW 74
43253: PPUSH
43254: CALL 44343 0 2
// end ; end ;
43258: GO 42830
43260: POP
43261: POP
// end ;
43262: LD_VAR 0 3
43266: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43267: LD_INT 0
43269: PPUSH
43270: PPUSH
43271: PPUSH
// if not unit or IsInUnit ( unit ) then
43272: LD_VAR 0 1
43276: NOT
43277: IFTRUE 43290
43279: PUSH
43280: LD_VAR 0 1
43284: PPUSH
43285: CALL_OW 310
43289: OR
43290: IFFALSE 43294
// exit ;
43292: GO 43385
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43294: LD_ADDR_VAR 0 4
43298: PUSH
43299: LD_VAR 0 1
43303: PPUSH
43304: CALL_OW 250
43308: PPUSH
43309: LD_VAR 0 2
43313: PPUSH
43314: LD_INT 1
43316: PPUSH
43317: CALL_OW 272
43321: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43322: LD_ADDR_VAR 0 5
43326: PUSH
43327: LD_VAR 0 1
43331: PPUSH
43332: CALL_OW 251
43336: PPUSH
43337: LD_VAR 0 2
43341: PPUSH
43342: LD_INT 1
43344: PPUSH
43345: CALL_OW 273
43349: ST_TO_ADDR
// if ValidHex ( x , y ) then
43350: LD_VAR 0 4
43354: PPUSH
43355: LD_VAR 0 5
43359: PPUSH
43360: CALL_OW 488
43364: IFFALSE 43385
// ComTurnXY ( unit , x , y ) ;
43366: LD_VAR 0 1
43370: PPUSH
43371: LD_VAR 0 4
43375: PPUSH
43376: LD_VAR 0 5
43380: PPUSH
43381: CALL_OW 118
// end ;
43385: LD_VAR 0 3
43389: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43390: LD_INT 0
43392: PPUSH
43393: PPUSH
// result := false ;
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_INT 0
43401: ST_TO_ADDR
// if not units then
43402: LD_VAR 0 2
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 43456
// for i in units do
43411: LD_ADDR_VAR 0 4
43415: PUSH
43416: LD_VAR 0 2
43420: PUSH
43421: FOR_IN
43422: IFFALSE 43454
// if See ( side , i ) then
43424: LD_VAR 0 1
43428: PPUSH
43429: LD_VAR 0 4
43433: PPUSH
43434: CALL_OW 292
43438: IFFALSE 43452
// begin result := true ;
43440: LD_ADDR_VAR 0 3
43444: PUSH
43445: LD_INT 1
43447: ST_TO_ADDR
// exit ;
43448: POP
43449: POP
43450: GO 43456
// end ;
43452: GO 43421
43454: POP
43455: POP
// end ;
43456: LD_VAR 0 3
43460: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43461: LD_INT 0
43463: PPUSH
43464: PPUSH
43465: PPUSH
43466: PPUSH
// if not unit or not points then
43467: LD_VAR 0 1
43471: NOT
43472: IFTRUE 43481
43474: PUSH
43475: LD_VAR 0 2
43479: NOT
43480: OR
43481: IFFALSE 43485
// exit ;
43483: GO 43575
// dist := 99999 ;
43485: LD_ADDR_VAR 0 5
43489: PUSH
43490: LD_INT 99999
43492: ST_TO_ADDR
// for i in points do
43493: LD_ADDR_VAR 0 4
43497: PUSH
43498: LD_VAR 0 2
43502: PUSH
43503: FOR_IN
43504: IFFALSE 43573
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43506: LD_ADDR_VAR 0 6
43510: PUSH
43511: LD_VAR 0 1
43515: PPUSH
43516: LD_VAR 0 4
43520: PUSH
43521: LD_INT 1
43523: ARRAY
43524: PPUSH
43525: LD_VAR 0 4
43529: PUSH
43530: LD_INT 2
43532: ARRAY
43533: PPUSH
43534: CALL_OW 297
43538: ST_TO_ADDR
// if tmpDist < dist then
43539: LD_VAR 0 6
43543: PUSH
43544: LD_VAR 0 5
43548: LESS
43549: IFFALSE 43571
// begin result := i ;
43551: LD_ADDR_VAR 0 3
43555: PUSH
43556: LD_VAR 0 4
43560: ST_TO_ADDR
// dist := tmpDist ;
43561: LD_ADDR_VAR 0 5
43565: PUSH
43566: LD_VAR 0 6
43570: ST_TO_ADDR
// end ; end ;
43571: GO 43503
43573: POP
43574: POP
// end ;
43575: LD_VAR 0 3
43579: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43580: LD_INT 0
43582: PPUSH
// uc_side := side ;
43583: LD_ADDR_OWVAR 20
43587: PUSH
43588: LD_VAR 0 1
43592: ST_TO_ADDR
// uc_nation := 3 ;
43593: LD_ADDR_OWVAR 21
43597: PUSH
43598: LD_INT 3
43600: ST_TO_ADDR
// vc_chassis := 25 ;
43601: LD_ADDR_OWVAR 37
43605: PUSH
43606: LD_INT 25
43608: ST_TO_ADDR
// vc_engine := engine_siberite ;
43609: LD_ADDR_OWVAR 39
43613: PUSH
43614: LD_INT 3
43616: ST_TO_ADDR
// vc_control := control_computer ;
43617: LD_ADDR_OWVAR 38
43621: PUSH
43622: LD_INT 3
43624: ST_TO_ADDR
// vc_weapon := 59 ;
43625: LD_ADDR_OWVAR 40
43629: PUSH
43630: LD_INT 59
43632: ST_TO_ADDR
// result := CreateVehicle ;
43633: LD_ADDR_VAR 0 5
43637: PUSH
43638: CALL_OW 45
43642: ST_TO_ADDR
// SetDir ( result , d ) ;
43643: LD_VAR 0 5
43647: PPUSH
43648: LD_VAR 0 4
43652: PPUSH
43653: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43657: LD_VAR 0 5
43661: PPUSH
43662: LD_VAR 0 2
43666: PPUSH
43667: LD_VAR 0 3
43671: PPUSH
43672: LD_INT 0
43674: PPUSH
43675: CALL_OW 48
// end ;
43679: LD_VAR 0 5
43683: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43684: LD_INT 0
43686: PPUSH
43687: PPUSH
43688: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43689: LD_ADDR_VAR 0 2
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43712: LD_VAR 0 1
43716: NOT
43717: IFTRUE 43750
43719: PUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 264
43729: PUSH
43730: LD_INT 12
43732: PUSH
43733: LD_INT 51
43735: PUSH
43736: LD_INT 32
43738: PUSH
43739: LD_INT 89
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: IN
43748: NOT
43749: OR
43750: IFFALSE 43754
// exit ;
43752: GO 43852
// for i := 1 to 3 do
43754: LD_ADDR_VAR 0 3
43758: PUSH
43759: DOUBLE
43760: LD_INT 1
43762: DEC
43763: ST_TO_ADDR
43764: LD_INT 3
43766: PUSH
43767: FOR_TO
43768: IFFALSE 43850
// begin tmp := GetCargo ( cargo , i ) ;
43770: LD_ADDR_VAR 0 4
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: LD_VAR 0 3
43784: PPUSH
43785: CALL_OW 289
43789: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43790: LD_ADDR_VAR 0 2
43794: PUSH
43795: LD_VAR 0 2
43799: PPUSH
43800: LD_VAR 0 3
43804: PPUSH
43805: LD_VAR 0 4
43809: PPUSH
43810: CALL_OW 1
43814: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43815: LD_ADDR_VAR 0 2
43819: PUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: LD_INT 4
43827: PPUSH
43828: LD_VAR 0 2
43832: PUSH
43833: LD_INT 4
43835: ARRAY
43836: PUSH
43837: LD_VAR 0 4
43841: PLUS
43842: PPUSH
43843: CALL_OW 1
43847: ST_TO_ADDR
// end ;
43848: GO 43767
43850: POP
43851: POP
// end ;
43852: LD_VAR 0 2
43856: RET
// export function Length ( array ) ; begin
43857: LD_INT 0
43859: PPUSH
// result := array + 0 ;
43860: LD_ADDR_VAR 0 2
43864: PUSH
43865: LD_VAR 0 1
43869: PUSH
43870: LD_INT 0
43872: PLUS
43873: ST_TO_ADDR
// end ;
43874: LD_VAR 0 2
43878: RET
// export function PrepareArray ( array ) ; begin
43879: LD_INT 0
43881: PPUSH
// result := array diff 0 ;
43882: LD_ADDR_VAR 0 2
43886: PUSH
43887: LD_VAR 0 1
43891: PUSH
43892: LD_INT 0
43894: DIFF
43895: ST_TO_ADDR
// if not result [ 1 ] then
43896: LD_VAR 0 2
43900: PUSH
43901: LD_INT 1
43903: ARRAY
43904: NOT
43905: IFFALSE 43925
// result := Delete ( result , 1 ) ;
43907: LD_ADDR_VAR 0 2
43911: PUSH
43912: LD_VAR 0 2
43916: PPUSH
43917: LD_INT 1
43919: PPUSH
43920: CALL_OW 3
43924: ST_TO_ADDR
// end ;
43925: LD_VAR 0 2
43929: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43930: LD_INT 0
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
// sibRocketRange := 25 ;
43936: LD_ADDR_VAR 0 6
43940: PUSH
43941: LD_INT 25
43943: ST_TO_ADDR
// result := false ;
43944: LD_ADDR_VAR 0 4
43948: PUSH
43949: LD_INT 0
43951: ST_TO_ADDR
// for i := 0 to 5 do
43952: LD_ADDR_VAR 0 5
43956: PUSH
43957: DOUBLE
43958: LD_INT 0
43960: DEC
43961: ST_TO_ADDR
43962: LD_INT 5
43964: PUSH
43965: FOR_TO
43966: IFFALSE 44033
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43968: LD_VAR 0 1
43972: PPUSH
43973: LD_VAR 0 5
43977: PPUSH
43978: LD_VAR 0 6
43982: PPUSH
43983: CALL_OW 272
43987: PPUSH
43988: LD_VAR 0 2
43992: PPUSH
43993: LD_VAR 0 5
43997: PPUSH
43998: LD_VAR 0 6
44002: PPUSH
44003: CALL_OW 273
44007: PPUSH
44008: LD_VAR 0 3
44012: PPUSH
44013: CALL_OW 309
44017: IFFALSE 44031
// begin result := true ;
44019: LD_ADDR_VAR 0 4
44023: PUSH
44024: LD_INT 1
44026: ST_TO_ADDR
// exit ;
44027: POP
44028: POP
44029: GO 44035
// end ;
44031: GO 43965
44033: POP
44034: POP
// end ;
44035: LD_VAR 0 4
44039: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44040: LD_INT 0
44042: PPUSH
44043: PPUSH
44044: PPUSH
// if btype = b_depot then
44045: LD_VAR 0 2
44049: PUSH
44050: LD_INT 0
44052: EQUAL
44053: IFFALSE 44065
// begin result := true ;
44055: LD_ADDR_VAR 0 3
44059: PUSH
44060: LD_INT 1
44062: ST_TO_ADDR
// exit ;
44063: GO 44185
// end ; pom := GetBase ( depot ) ;
44065: LD_ADDR_VAR 0 4
44069: PUSH
44070: LD_VAR 0 1
44074: PPUSH
44075: CALL_OW 274
44079: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44080: LD_ADDR_VAR 0 5
44084: PUSH
44085: LD_VAR 0 2
44089: PPUSH
44090: LD_VAR 0 1
44094: PPUSH
44095: CALL_OW 248
44099: PPUSH
44100: CALL_OW 450
44104: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44105: LD_ADDR_VAR 0 3
44109: PUSH
44110: LD_VAR 0 4
44114: PPUSH
44115: LD_INT 1
44117: PPUSH
44118: CALL_OW 275
44122: PUSH
44123: LD_VAR 0 5
44127: PUSH
44128: LD_INT 1
44130: ARRAY
44131: GREATEREQUAL
44132: IFFALSE 44158
44134: PUSH
44135: LD_VAR 0 4
44139: PPUSH
44140: LD_INT 2
44142: PPUSH
44143: CALL_OW 275
44147: PUSH
44148: LD_VAR 0 5
44152: PUSH
44153: LD_INT 2
44155: ARRAY
44156: GREATEREQUAL
44157: AND
44158: IFFALSE 44184
44160: PUSH
44161: LD_VAR 0 4
44165: PPUSH
44166: LD_INT 3
44168: PPUSH
44169: CALL_OW 275
44173: PUSH
44174: LD_VAR 0 5
44178: PUSH
44179: LD_INT 3
44181: ARRAY
44182: GREATEREQUAL
44183: AND
44184: ST_TO_ADDR
// end ;
44185: LD_VAR 0 3
44189: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44190: LD_INT 0
44192: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44193: LD_VAR 0 1
44197: PPUSH
44198: LD_VAR 0 2
44202: PPUSH
44203: LD_INT 0
44205: PPUSH
44206: LD_INT 0
44208: PPUSH
44209: LD_INT 1
44211: PPUSH
44212: LD_INT 0
44214: PPUSH
44215: CALL_OW 587
// end ;
44219: LD_VAR 0 3
44223: RET
// export function CenterOnNow ( unit ) ; begin
44224: LD_INT 0
44226: PPUSH
// result := IsInUnit ( unit ) ;
44227: LD_ADDR_VAR 0 2
44231: PUSH
44232: LD_VAR 0 1
44236: PPUSH
44237: CALL_OW 310
44241: ST_TO_ADDR
// if not result then
44242: LD_VAR 0 2
44246: NOT
44247: IFFALSE 44259
// result := unit ;
44249: LD_ADDR_VAR 0 2
44253: PUSH
44254: LD_VAR 0 1
44258: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 87
// end ;
44268: LD_VAR 0 2
44272: RET
// export function ComMoveHex ( unit , hex ) ; begin
44273: LD_INT 0
44275: PPUSH
// if not hex then
44276: LD_VAR 0 2
44280: NOT
44281: IFFALSE 44285
// exit ;
44283: GO 44338
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44285: LD_VAR 0 2
44289: PUSH
44290: LD_INT 1
44292: ARRAY
44293: PPUSH
44294: LD_VAR 0 2
44298: PUSH
44299: LD_INT 2
44301: ARRAY
44302: PPUSH
44303: CALL_OW 428
44307: IFFALSE 44311
// exit ;
44309: GO 44338
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44311: LD_VAR 0 1
44315: PPUSH
44316: LD_VAR 0 2
44320: PUSH
44321: LD_INT 1
44323: ARRAY
44324: PPUSH
44325: LD_VAR 0 2
44329: PUSH
44330: LD_INT 2
44332: ARRAY
44333: PPUSH
44334: CALL_OW 111
// end ;
44338: LD_VAR 0 3
44342: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44343: LD_INT 0
44345: PPUSH
44346: PPUSH
44347: PPUSH
// if not unit or not enemy then
44348: LD_VAR 0 1
44352: NOT
44353: IFTRUE 44362
44355: PUSH
44356: LD_VAR 0 2
44360: NOT
44361: OR
44362: IFFALSE 44366
// exit ;
44364: GO 44492
// x := GetX ( enemy ) ;
44366: LD_ADDR_VAR 0 4
44370: PUSH
44371: LD_VAR 0 2
44375: PPUSH
44376: CALL_OW 250
44380: ST_TO_ADDR
// y := GetY ( enemy ) ;
44381: LD_ADDR_VAR 0 5
44385: PUSH
44386: LD_VAR 0 2
44390: PPUSH
44391: CALL_OW 251
44395: ST_TO_ADDR
// if ValidHex ( x , y ) then
44396: LD_VAR 0 4
44400: PPUSH
44401: LD_VAR 0 5
44405: PPUSH
44406: CALL_OW 488
44410: IFFALSE 44492
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44412: LD_VAR 0 2
44416: PPUSH
44417: CALL_OW 247
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: IN
44432: IFTRUE 44455
44434: PUSH
44435: LD_VAR 0 1
44439: PPUSH
44440: CALL_OW 255
44444: PPUSH
44445: LD_VAR 0 2
44449: PPUSH
44450: CALL_OW 292
44454: OR
44455: IFFALSE 44473
// ComAttackUnit ( unit , enemy ) else
44457: LD_VAR 0 1
44461: PPUSH
44462: LD_VAR 0 2
44466: PPUSH
44467: CALL_OW 115
44471: GO 44492
// ComAgressiveMove ( unit , x , y ) ;
44473: LD_VAR 0 1
44477: PPUSH
44478: LD_VAR 0 4
44482: PPUSH
44483: LD_VAR 0 5
44487: PPUSH
44488: CALL_OW 114
// end ;
44492: LD_VAR 0 3
44496: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44497: LD_INT 0
44499: PPUSH
44500: PPUSH
44501: PPUSH
// list := AreaToList ( area , 0 ) ;
44502: LD_ADDR_VAR 0 5
44506: PUSH
44507: LD_VAR 0 1
44511: PPUSH
44512: LD_INT 0
44514: PPUSH
44515: CALL_OW 517
44519: ST_TO_ADDR
// if not list then
44520: LD_VAR 0 5
44524: NOT
44525: IFFALSE 44529
// exit ;
44527: GO 44659
// if all then
44529: LD_VAR 0 2
44533: IFFALSE 44621
// begin for i := 1 to list [ 1 ] do
44535: LD_ADDR_VAR 0 4
44539: PUSH
44540: DOUBLE
44541: LD_INT 1
44543: DEC
44544: ST_TO_ADDR
44545: LD_VAR 0 5
44549: PUSH
44550: LD_INT 1
44552: ARRAY
44553: PUSH
44554: FOR_TO
44555: IFFALSE 44617
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44557: LD_ADDR_VAR 0 3
44561: PUSH
44562: LD_VAR 0 3
44566: PPUSH
44567: LD_VAR 0 3
44571: PUSH
44572: LD_INT 1
44574: PLUS
44575: PPUSH
44576: LD_VAR 0 5
44580: PUSH
44581: LD_INT 1
44583: ARRAY
44584: PUSH
44585: LD_VAR 0 4
44589: ARRAY
44590: PUSH
44591: LD_VAR 0 5
44595: PUSH
44596: LD_INT 2
44598: ARRAY
44599: PUSH
44600: LD_VAR 0 4
44604: ARRAY
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PPUSH
44610: CALL_OW 1
44614: ST_TO_ADDR
44615: GO 44554
44617: POP
44618: POP
// exit ;
44619: GO 44659
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_VAR 0 5
44630: PUSH
44631: LD_INT 1
44633: ARRAY
44634: PUSH
44635: LD_INT 1
44637: ARRAY
44638: PUSH
44639: LD_VAR 0 5
44643: PUSH
44644: LD_INT 2
44646: ARRAY
44647: PUSH
44648: LD_INT 1
44650: ARRAY
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: ST_TO_ADDR
// end ;
44659: LD_VAR 0 3
44663: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44664: LD_INT 0
44666: PPUSH
44667: PPUSH
// list := AreaToList ( area , 0 ) ;
44668: LD_ADDR_VAR 0 4
44672: PUSH
44673: LD_VAR 0 1
44677: PPUSH
44678: LD_INT 0
44680: PPUSH
44681: CALL_OW 517
44685: ST_TO_ADDR
// if not list then
44686: LD_VAR 0 4
44690: NOT
44691: IFFALSE 44695
// exit ;
44693: GO 44736
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44695: LD_ADDR_VAR 0 3
44699: PUSH
44700: LD_VAR 0 4
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PUSH
44709: LD_INT 1
44711: ARRAY
44712: PUSH
44713: LD_VAR 0 4
44717: PUSH
44718: LD_INT 2
44720: ARRAY
44721: PUSH
44722: LD_INT 1
44724: ARRAY
44725: PUSH
44726: LD_VAR 0 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// end ;
44736: LD_VAR 0 3
44740: RET
// export function First ( array ) ; begin
44741: LD_INT 0
44743: PPUSH
// if not array then
44744: LD_VAR 0 1
44748: NOT
44749: IFFALSE 44753
// exit ;
44751: GO 44767
// result := array [ 1 ] ;
44753: LD_ADDR_VAR 0 2
44757: PUSH
44758: LD_VAR 0 1
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: ST_TO_ADDR
// end ;
44767: LD_VAR 0 2
44771: RET
// export function Last ( array ) ; begin
44772: LD_INT 0
44774: PPUSH
// if not array then
44775: LD_VAR 0 1
44779: NOT
44780: IFFALSE 44784
// exit ;
44782: GO 44800
// result := array [ array ] ;
44784: LD_ADDR_VAR 0 2
44788: PUSH
44789: LD_VAR 0 1
44793: PUSH
44794: LD_VAR 0 1
44798: ARRAY
44799: ST_TO_ADDR
// end ;
44800: LD_VAR 0 2
44804: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44805: LD_INT 0
44807: PPUSH
44808: PPUSH
// result := [ ] ;
44809: LD_ADDR_VAR 0 5
44813: PUSH
44814: EMPTY
44815: ST_TO_ADDR
// if not array then
44816: LD_VAR 0 1
44820: NOT
44821: IFFALSE 44825
// exit ;
44823: GO 44937
// for i := 1 to array do
44825: LD_ADDR_VAR 0 6
44829: PUSH
44830: DOUBLE
44831: LD_INT 1
44833: DEC
44834: ST_TO_ADDR
44835: LD_VAR 0 1
44839: PUSH
44840: FOR_TO
44841: IFFALSE 44935
// if array [ i ] [ index ] = value then
44843: LD_VAR 0 1
44847: PUSH
44848: LD_VAR 0 6
44852: ARRAY
44853: PUSH
44854: LD_VAR 0 2
44858: ARRAY
44859: PUSH
44860: LD_VAR 0 3
44864: EQUAL
44865: IFFALSE 44933
// begin if indexColumn then
44867: LD_VAR 0 4
44871: IFFALSE 44907
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44873: LD_ADDR_VAR 0 5
44877: PUSH
44878: LD_VAR 0 5
44882: PPUSH
44883: LD_VAR 0 1
44887: PUSH
44888: LD_VAR 0 6
44892: ARRAY
44893: PUSH
44894: LD_VAR 0 4
44898: ARRAY
44899: PPUSH
44900: CALL 39945 0 2
44904: ST_TO_ADDR
44905: GO 44933
// result := Join ( result , array [ i ] ) ;
44907: LD_ADDR_VAR 0 5
44911: PUSH
44912: LD_VAR 0 5
44916: PPUSH
44917: LD_VAR 0 1
44921: PUSH
44922: LD_VAR 0 6
44926: ARRAY
44927: PPUSH
44928: CALL 39945 0 2
44932: ST_TO_ADDR
// end ;
44933: GO 44840
44935: POP
44936: POP
// end ;
44937: LD_VAR 0 5
44941: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44942: LD_INT 0
44944: PPUSH
// if not vehicles or not parkingPoint then
44945: LD_VAR 0 1
44949: NOT
44950: IFTRUE 44959
44952: PUSH
44953: LD_VAR 0 2
44957: NOT
44958: OR
44959: IFFALSE 44963
// exit ;
44961: GO 45061
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44963: LD_ADDR_VAR 0 1
44967: PUSH
44968: LD_VAR 0 1
44972: PPUSH
44973: LD_INT 50
44975: PUSH
44976: EMPTY
44977: LIST
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 92
44984: PUSH
44985: LD_VAR 0 2
44989: PUSH
44990: LD_INT 1
44992: ARRAY
44993: PUSH
44994: LD_VAR 0 2
44998: PUSH
44999: LD_INT 2
45001: ARRAY
45002: PUSH
45003: LD_INT 8
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PPUSH
45020: CALL_OW 72
45024: ST_TO_ADDR
// if not vehicles then
45025: LD_VAR 0 1
45029: NOT
45030: IFFALSE 45034
// exit ;
45032: GO 45061
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45034: LD_VAR 0 1
45038: PPUSH
45039: LD_VAR 0 2
45043: PUSH
45044: LD_INT 1
45046: ARRAY
45047: PPUSH
45048: LD_VAR 0 2
45052: PUSH
45053: LD_INT 2
45055: ARRAY
45056: PPUSH
45057: CALL_OW 111
// end ;
45061: LD_VAR 0 3
45065: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45066: LD_INT 0
45068: PPUSH
45069: PPUSH
45070: PPUSH
// if not side or not area then
45071: LD_VAR 0 1
45075: NOT
45076: IFTRUE 45085
45078: PUSH
45079: LD_VAR 0 2
45083: NOT
45084: OR
45085: IFFALSE 45089
// exit ;
45087: GO 45208
// tmp := AreaToList ( area , 0 ) ;
45089: LD_ADDR_VAR 0 5
45093: PUSH
45094: LD_VAR 0 2
45098: PPUSH
45099: LD_INT 0
45101: PPUSH
45102: CALL_OW 517
45106: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45107: LD_ADDR_VAR 0 4
45111: PUSH
45112: DOUBLE
45113: LD_INT 1
45115: DEC
45116: ST_TO_ADDR
45117: LD_VAR 0 5
45121: PUSH
45122: LD_INT 1
45124: ARRAY
45125: PUSH
45126: FOR_TO
45127: IFFALSE 45206
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45129: LD_VAR 0 5
45133: PUSH
45134: LD_INT 1
45136: ARRAY
45137: PUSH
45138: LD_VAR 0 4
45142: ARRAY
45143: PPUSH
45144: LD_VAR 0 5
45148: PUSH
45149: LD_INT 2
45151: ARRAY
45152: PUSH
45153: LD_VAR 0 4
45157: ARRAY
45158: PPUSH
45159: CALL_OW 351
45163: IFFALSE 45204
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45165: LD_VAR 0 5
45169: PUSH
45170: LD_INT 1
45172: ARRAY
45173: PUSH
45174: LD_VAR 0 4
45178: ARRAY
45179: PPUSH
45180: LD_VAR 0 5
45184: PUSH
45185: LD_INT 2
45187: ARRAY
45188: PUSH
45189: LD_VAR 0 4
45193: ARRAY
45194: PPUSH
45195: LD_VAR 0 1
45199: PPUSH
45200: CALL_OW 244
// end ;
45204: GO 45126
45206: POP
45207: POP
// end ;
45208: LD_VAR 0 3
45212: RET
// export function UniqueArray ( array ) ; var i ; begin
45213: LD_INT 0
45215: PPUSH
45216: PPUSH
// result := [ ] ;
45217: LD_ADDR_VAR 0 2
45221: PUSH
45222: EMPTY
45223: ST_TO_ADDR
// if not array then
45224: LD_VAR 0 1
45228: NOT
45229: IFFALSE 45233
// exit ;
45231: GO 45294
// for i := 1 to array do
45233: LD_ADDR_VAR 0 3
45237: PUSH
45238: DOUBLE
45239: LD_INT 1
45241: DEC
45242: ST_TO_ADDR
45243: LD_VAR 0 1
45247: PUSH
45248: FOR_TO
45249: IFFALSE 45292
// if not array [ i ] in result then
45251: LD_VAR 0 1
45255: PUSH
45256: LD_VAR 0 3
45260: ARRAY
45261: PUSH
45262: LD_VAR 0 2
45266: IN
45267: NOT
45268: IFFALSE 45290
// result := Join ( result , i ) ;
45270: LD_ADDR_VAR 0 2
45274: PUSH
45275: LD_VAR 0 2
45279: PPUSH
45280: LD_VAR 0 3
45284: PPUSH
45285: CALL 39945 0 2
45289: ST_TO_ADDR
45290: GO 45248
45292: POP
45293: POP
// end ;
45294: LD_VAR 0 2
45298: RET
