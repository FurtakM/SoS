// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 39961 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnitForce ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1873 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 39989 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6809 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 39989 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i , p ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
// p := 0 ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_INT 0
 517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 518: LD_INT 35
 520: PPUSH
 521: CALL_OW 67
// p := Inc ( p ) ;
 525: LD_ADDR_VAR 0 3
 529: PUSH
 530: LD_VAR 0 3
 534: PPUSH
 535: CALL 41362 0 1
 539: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 or p > 20 ;
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 95
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 60
 565: PUSH
 566: EMPTY
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: PUSH
 583: LD_INT 5
 585: GREATEREQUAL
 586: IFTRUE 598
 588: PUSH
 589: LD_VAR 0 3
 593: PUSH
 594: LD_INT 20
 596: GREATER
 597: OR
 598: IFFALSE 518
// wait ( 0 0$1 ) ;
 600: LD_INT 35
 602: PPUSH
 603: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 607: LD_EXP 2
 611: PPUSH
 612: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 616: LD_EXP 3
 620: PPUSH
 621: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 625: LD_INT 10
 627: PPUSH
 628: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 632: LD_EXP 3
 636: PPUSH
 637: LD_INT 52
 639: PPUSH
 640: LD_INT 42
 642: PPUSH
 643: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 647: LD_EXP 2
 651: PPUSH
 652: LD_INT 52
 654: PPUSH
 655: LD_INT 42
 657: PPUSH
 658: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 662: LD_EXP 3
 666: PPUSH
 667: LD_INT 68
 669: PPUSH
 670: LD_INT 55
 672: PPUSH
 673: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 677: LD_EXP 2
 681: PPUSH
 682: LD_INT 68
 684: PPUSH
 685: LD_INT 58
 687: PPUSH
 688: CALL_OW 171
// ComExitVehicle ( people [ 4 ] ) ;
 692: LD_EXP 5
 696: PUSH
 697: LD_INT 4
 699: ARRAY
 700: PPUSH
 701: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 705: LD_EXP 5
 709: PUSH
 710: LD_INT 5
 712: ARRAY
 713: PPUSH
 714: CALL_OW 121
// wait ( 0 0$02 ) ;
 718: LD_INT 70
 720: PPUSH
 721: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 725: LD_EXP 5
 729: PUSH
 730: LD_INT 4
 732: ARRAY
 733: PPUSH
 734: LD_INT 50
 736: PPUSH
 737: LD_INT 40
 739: PPUSH
 740: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 744: LD_EXP 5
 748: PUSH
 749: LD_INT 5
 751: ARRAY
 752: PPUSH
 753: LD_INT 49
 755: PPUSH
 756: LD_INT 59
 758: PPUSH
 759: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 763: LD_INT 35
 765: PPUSH
 766: CALL_OW 67
// if not IsAt ( JMM , 68 , 58 ) and not HasTask ( JMM ) then
 770: LD_EXP 2
 774: PPUSH
 775: LD_INT 68
 777: PPUSH
 778: LD_INT 58
 780: PPUSH
 781: CALL_OW 307
 785: NOT
 786: IFFALSE 800
 788: PUSH
 789: LD_EXP 2
 793: PPUSH
 794: CALL_OW 314
 798: NOT
 799: AND
 800: IFFALSE 817
// ComMoveXY ( JMM , 68 , 58 ) ;
 802: LD_EXP 2
 806: PPUSH
 807: LD_INT 68
 809: PPUSH
 810: LD_INT 58
 812: PPUSH
 813: CALL_OW 111
// if not IsAt ( Powell , 68 , 55 ) and not HasTask ( Powell ) then
 817: LD_EXP 3
 821: PPUSH
 822: LD_INT 68
 824: PPUSH
 825: LD_INT 55
 827: PPUSH
 828: CALL_OW 307
 832: NOT
 833: IFFALSE 847
 835: PUSH
 836: LD_EXP 3
 840: PPUSH
 841: CALL_OW 314
 845: NOT
 846: AND
 847: IFFALSE 864
// ComMoveXY ( Powell , 68 , 55 ) ;
 849: LD_EXP 3
 853: PPUSH
 854: LD_INT 68
 856: PPUSH
 857: LD_INT 55
 859: PPUSH
 860: CALL_OW 111
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 68
 871: PPUSH
 872: LD_INT 55
 874: PPUSH
 875: CALL_OW 307
 879: IFFALSE 898
 881: PUSH
 882: LD_EXP 2
 886: PPUSH
 887: LD_INT 68
 889: PPUSH
 890: LD_INT 58
 892: PPUSH
 893: CALL_OW 307
 897: AND
 898: IFFALSE 763
// AddComTurnXY ( Powell , 73 , 54 ) ;
 900: LD_EXP 3
 904: PPUSH
 905: LD_INT 73
 907: PPUSH
 908: LD_INT 54
 910: PPUSH
 911: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 915: LD_EXP 2
 919: PPUSH
 920: LD_INT 74
 922: PPUSH
 923: LD_INT 58
 925: PPUSH
 926: CALL_OW 178
// CenterNowOnUnits ( JMM ) ;
 930: LD_EXP 2
 934: PPUSH
 935: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 939: LD_EXP 3
 943: PPUSH
 944: LD_STRING D1-Pow-1
 946: PPUSH
 947: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 951: LD_EXP 2
 955: PPUSH
 956: LD_STRING D1-JMM-1
 958: PPUSH
 959: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 963: LD_EXP 3
 967: PPUSH
 968: LD_STRING D1-Pow-2
 970: PPUSH
 971: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 975: LD_EXP 2
 979: PPUSH
 980: LD_EXP 3
 984: PPUSH
 985: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_STRING D1-JMM-2
 996: PPUSH
 997: CALL_OW 88
// wait ( 0 0$01 ) ;
1001: LD_INT 35
1003: PPUSH
1004: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
1008: LD_EXP 3
1012: PPUSH
1013: LD_EXP 2
1017: PPUSH
1018: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
1022: LD_EXP 3
1026: PPUSH
1027: LD_STRING D1-Pow-3
1029: PPUSH
1030: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1034: LD_EXP 2
1038: PPUSH
1039: LD_STRING D1-JMM-3
1041: PPUSH
1042: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
1046: LD_EXP 3
1050: PPUSH
1051: LD_STRING D1-Pow-4
1053: PPUSH
1054: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
1058: LD_EXP 2
1062: PPUSH
1063: LD_STRING D1-JMM-4
1065: PPUSH
1066: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
1070: LD_EXP 3
1074: PPUSH
1075: LD_STRING D1-Pow-5
1077: PPUSH
1078: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1082: LD_EXP 2
1086: PPUSH
1087: LD_STRING D1-JMM-5
1089: PPUSH
1090: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
1094: LD_EXP 3
1098: PPUSH
1099: LD_STRING D1-Pow-6
1101: PPUSH
1102: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
1106: LD_EXP 2
1110: PPUSH
1111: LD_STRING D1-JMM-6
1113: PPUSH
1114: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
1118: LD_EXP 3
1122: PPUSH
1123: LD_STRING D1-Pow-7
1125: PPUSH
1126: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
1130: LD_EXP 2
1134: PPUSH
1135: LD_STRING D1-JMM-7
1137: PPUSH
1138: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1142: LD_EXP 3
1146: PPUSH
1147: LD_INT 68
1149: PPUSH
1150: LD_INT 57
1152: PPUSH
1153: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1157: LD_INT 10
1159: PPUSH
1160: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1164: LD_EXP 3
1168: PPUSH
1169: LD_INT 68
1171: PPUSH
1172: LD_INT 57
1174: PPUSH
1175: CALL_OW 307
1179: IFFALSE 1157
// ComTurnUnit ( Powell , JMM ) ;
1181: LD_EXP 3
1185: PPUSH
1186: LD_EXP 2
1190: PPUSH
1191: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1195: LD_EXP 3
1199: PPUSH
1200: LD_STRING D1-Pow-8
1202: PPUSH
1203: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1207: LD_INT 18
1209: PPUSH
1210: CALL_OW 67
// Query ( QLetter ) ;
1214: LD_STRING QLetter
1216: PPUSH
1217: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1221: LD_EXP 3
1225: PPUSH
1226: LD_STRING D1aa-Pow-1
1228: PPUSH
1229: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1233: LD_EXP 2
1237: PPUSH
1238: LD_STRING D1aa-JMM-1
1240: PPUSH
1241: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1245: LD_EXP 3
1249: PPUSH
1250: LD_STRING D1aa-Pow-2
1252: PPUSH
1253: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1257: LD_EXP 2
1261: PPUSH
1262: LD_STRING D1aa-JMM-2
1264: PPUSH
1265: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1269: LD_EXP 3
1273: PPUSH
1274: LD_STRING D1aa-Pow-3
1276: PPUSH
1277: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1281: LD_EXP 2
1285: PPUSH
1286: LD_STRING D1aa-JMM-3
1288: PPUSH
1289: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1293: LD_EXP 3
1297: PPUSH
1298: LD_INT 69
1300: PPUSH
1301: LD_INT 55
1303: PPUSH
1304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1308: LD_INT 35
1310: PPUSH
1311: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1315: LD_EXP 3
1319: PPUSH
1320: LD_INT 69
1322: PPUSH
1323: LD_INT 55
1325: PPUSH
1326: CALL_OW 307
1330: IFFALSE 1308
// ComTurnXY ( Powell , 71 , 55 ) ;
1332: LD_EXP 3
1336: PPUSH
1337: LD_INT 71
1339: PPUSH
1340: LD_INT 55
1342: PPUSH
1343: CALL_OW 118
// wait ( 0 0$2 ) ;
1347: LD_INT 70
1349: PPUSH
1350: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1354: LD_EXP 3
1358: PPUSH
1359: LD_STRING D1aa-Pow-4
1361: PPUSH
1362: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1366: LD_EXP 2
1370: PPUSH
1371: LD_STRING D1aa-JMM-4
1373: PPUSH
1374: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1378: LD_EXP 3
1382: PPUSH
1383: LD_EXP 2
1387: PPUSH
1388: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1392: LD_INT 10
1394: PPUSH
1395: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1399: LD_EXP 3
1403: PPUSH
1404: LD_STRING D1aa-Pow-5
1406: PPUSH
1407: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1411: LD_EXP 2
1415: PPUSH
1416: LD_STRING D1aa-JMM-5
1418: PPUSH
1419: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1423: LD_EXP 3
1427: PPUSH
1428: LD_STRING D1aa-Pow-6
1430: PPUSH
1431: CALL_OW 88
// wait ( 0 0$1 ) ;
1435: LD_INT 35
1437: PPUSH
1438: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1442: LD_EXP 2
1446: PPUSH
1447: LD_EXP 4
1451: PUSH
1452: LD_INT 3
1454: ARRAY
1455: PPUSH
1456: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1460: LD_INT 18
1462: PPUSH
1463: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1467: LD_EXP 3
1471: PPUSH
1472: LD_EXP 4
1476: PUSH
1477: LD_INT 2
1479: ARRAY
1480: PPUSH
1481: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1485: LD_INT 35
1487: PPUSH
1488: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1492: LD_EXP 3
1496: PPUSH
1497: LD_INT 3
1499: PPUSH
1500: CALL_OW 308
1504: IFFALSE 1485
// CenterOnXY ( 42 , 40 ) ;
1506: LD_INT 42
1508: PPUSH
1509: LD_INT 40
1511: PPUSH
1512: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1516: LD_EXP 5
1520: PUSH
1521: LD_INT 4
1523: ARRAY
1524: PPUSH
1525: LD_EXP 4
1529: PUSH
1530: LD_INT 4
1532: ARRAY
1533: PPUSH
1534: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1538: LD_EXP 5
1542: PUSH
1543: LD_INT 5
1545: ARRAY
1546: PPUSH
1547: LD_EXP 4
1551: PUSH
1552: LD_INT 5
1554: ARRAY
1555: PPUSH
1556: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1560: LD_INT 35
1562: PPUSH
1563: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1567: LD_INT 22
1569: PUSH
1570: LD_INT 1
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 56
1579: PUSH
1580: EMPTY
1581: LIST
1582: PUSH
1583: LD_INT 21
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PPUSH
1598: CALL_OW 69
1602: PUSH
1603: LD_INT 0
1605: EQUAL
1606: IFFALSE 1560
// CenterOnXY ( 36 , 35 ) ;
1608: LD_INT 36
1610: PPUSH
1611: LD_INT 35
1613: PPUSH
1614: CALL_OW 84
// for i := 1 to 5 do
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: DOUBLE
1624: LD_INT 1
1626: DEC
1627: ST_TO_ADDR
1628: LD_INT 5
1630: PUSH
1631: FOR_TO
1632: IFFALSE 1664
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1634: LD_EXP 4
1638: PUSH
1639: LD_VAR 0 2
1643: ARRAY
1644: PPUSH
1645: LD_INT 11
1647: PPUSH
1648: LD_INT 18
1650: PPUSH
1651: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1655: LD_INT 10
1657: PPUSH
1658: CALL_OW 67
// end ;
1662: GO 1631
1664: POP
1665: POP
// wait ( 0 0$2 ) ;
1666: LD_INT 70
1668: PPUSH
1669: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1673: LD_STRING 1
1675: PPUSH
1676: LD_STRING %_cont
1678: PPUSH
1679: CALL_OW 340
// end ;
1683: LD_VAR 0 1
1687: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1688: LD_EXP 5
1692: PUSH
1693: LD_INT 4
1695: ARRAY
1696: PPUSH
1697: LD_INT 50
1699: PPUSH
1700: LD_INT 40
1702: PPUSH
1703: CALL_OW 307
1707: IFFALSE 1731
1709: GO 1711
1711: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1712: LD_EXP 5
1716: PUSH
1717: LD_INT 4
1719: ARRAY
1720: PPUSH
1721: LD_INT 51
1723: PPUSH
1724: LD_INT 40
1726: PPUSH
1727: CALL_OW 118
1731: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1732: LD_EXP 5
1736: PUSH
1737: LD_INT 5
1739: ARRAY
1740: PPUSH
1741: LD_INT 49
1743: PPUSH
1744: LD_INT 59
1746: PPUSH
1747: CALL_OW 307
1751: IFFALSE 1775
1753: GO 1755
1755: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1756: LD_EXP 5
1760: PUSH
1761: LD_INT 5
1763: ARRAY
1764: PPUSH
1765: LD_INT 51
1767: PPUSH
1768: LD_INT 67
1770: PPUSH
1771: CALL_OW 118
1775: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1776: LD_STRING 1
1778: PPUSH
1779: LD_STRING %_cont
1781: PPUSH
1782: CALL_OW 340
// end ; end_of_file
1786: PPOPN 1
1788: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1789: LD_INT 0
1791: PPUSH
1792: PPUSH
// if exist_mode then
1793: LD_VAR 0 2
1797: IFFALSE 1843
// begin unit := CreateCharacter ( prefix & ident ) ;
1799: LD_ADDR_VAR 0 5
1803: PUSH
1804: LD_VAR 0 3
1808: PUSH
1809: LD_VAR 0 1
1813: STR
1814: PPUSH
1815: CALL_OW 34
1819: ST_TO_ADDR
// if unit then
1820: LD_VAR 0 5
1824: IFFALSE 1841
// DeleteCharacters ( prefix & ident ) ;
1826: LD_VAR 0 3
1830: PUSH
1831: LD_VAR 0 1
1835: STR
1836: PPUSH
1837: CALL_OW 40
// end else
1841: GO 1858
// unit := NewCharacter ( ident ) ;
1843: LD_ADDR_VAR 0 5
1847: PUSH
1848: LD_VAR 0 1
1852: PPUSH
1853: CALL_OW 25
1857: ST_TO_ADDR
// result := unit ;
1858: LD_ADDR_VAR 0 4
1862: PUSH
1863: LD_VAR 0 5
1867: ST_TO_ADDR
// end ;
1868: LD_VAR 0 4
1872: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1873: LD_INT 0
1875: PPUSH
1876: PPUSH
// if exist_mode then
1877: LD_VAR 0 2
1881: IFFALSE 1906
// unit := CreateCharacter ( prefix & ident ) else
1883: LD_ADDR_VAR 0 5
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: LD_VAR 0 1
1897: STR
1898: PPUSH
1899: CALL_OW 34
1903: ST_TO_ADDR
1904: GO 1921
// unit := NewCharacter ( ident ) ;
1906: LD_ADDR_VAR 0 5
1910: PUSH
1911: LD_VAR 0 1
1915: PPUSH
1916: CALL_OW 25
1920: ST_TO_ADDR
// result := unit ;
1921: LD_ADDR_VAR 0 4
1925: PUSH
1926: LD_VAR 0 5
1930: ST_TO_ADDR
// end ;
1931: LD_VAR 0 4
1935: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1936: LD_INT 0
1938: PPUSH
1939: PPUSH
// if not side or not nation then
1940: LD_VAR 0 1
1944: NOT
1945: IFTRUE 1954
1947: PUSH
1948: LD_VAR 0 2
1952: NOT
1953: OR
1954: IFFALSE 1958
// exit ;
1956: GO 2752
// case nation of nation_american :
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 1
1965: DOUBLE
1966: EQUAL
1967: IFTRUE 1971
1969: GO 2193
1971: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1972: LD_ADDR_VAR 0 4
1976: PUSH
1977: LD_INT 35
1979: PUSH
1980: LD_INT 45
1982: PUSH
1983: LD_INT 46
1985: PUSH
1986: LD_INT 47
1988: PUSH
1989: LD_INT 82
1991: PUSH
1992: LD_INT 83
1994: PUSH
1995: LD_INT 84
1997: PUSH
1998: LD_INT 85
2000: PUSH
2001: LD_INT 86
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: LD_INT 2
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: LD_INT 15
2015: PUSH
2016: LD_INT 16
2018: PUSH
2019: LD_INT 7
2021: PUSH
2022: LD_INT 12
2024: PUSH
2025: LD_INT 13
2027: PUSH
2028: LD_INT 10
2030: PUSH
2031: LD_INT 14
2033: PUSH
2034: LD_INT 20
2036: PUSH
2037: LD_INT 21
2039: PUSH
2040: LD_INT 22
2042: PUSH
2043: LD_INT 25
2045: PUSH
2046: LD_INT 32
2048: PUSH
2049: LD_INT 27
2051: PUSH
2052: LD_INT 36
2054: PUSH
2055: LD_INT 69
2057: PUSH
2058: LD_INT 39
2060: PUSH
2061: LD_INT 34
2063: PUSH
2064: LD_INT 40
2066: PUSH
2067: LD_INT 48
2069: PUSH
2070: LD_INT 49
2072: PUSH
2073: LD_INT 50
2075: PUSH
2076: LD_INT 51
2078: PUSH
2079: LD_INT 52
2081: PUSH
2082: LD_INT 53
2084: PUSH
2085: LD_INT 54
2087: PUSH
2088: LD_INT 55
2090: PUSH
2091: LD_INT 56
2093: PUSH
2094: LD_INT 57
2096: PUSH
2097: LD_INT 58
2099: PUSH
2100: LD_INT 59
2102: PUSH
2103: LD_INT 60
2105: PUSH
2106: LD_INT 61
2108: PUSH
2109: LD_INT 62
2111: PUSH
2112: LD_INT 80
2114: PUSH
2115: LD_INT 82
2117: PUSH
2118: LD_INT 83
2120: PUSH
2121: LD_INT 84
2123: PUSH
2124: LD_INT 85
2126: PUSH
2127: LD_INT 86
2129: PUSH
2130: LD_INT 90
2132: PUSH
2133: LD_INT 93
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: ST_TO_ADDR
2191: GO 2674
2193: LD_INT 2
2195: DOUBLE
2196: EQUAL
2197: IFTRUE 2201
2199: GO 2435
2201: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
2202: LD_ADDR_VAR 0 4
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 45
2212: PUSH
2213: LD_INT 46
2215: PUSH
2216: LD_INT 47
2218: PUSH
2219: LD_INT 82
2221: PUSH
2222: LD_INT 83
2224: PUSH
2225: LD_INT 84
2227: PUSH
2228: LD_INT 85
2230: PUSH
2231: LD_INT 87
2233: PUSH
2234: LD_INT 70
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 11
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: LD_INT 4
2248: PUSH
2249: LD_INT 5
2251: PUSH
2252: LD_INT 6
2254: PUSH
2255: LD_INT 15
2257: PUSH
2258: LD_INT 18
2260: PUSH
2261: LD_INT 7
2263: PUSH
2264: LD_INT 17
2266: PUSH
2267: LD_INT 8
2269: PUSH
2270: LD_INT 20
2272: PUSH
2273: LD_INT 21
2275: PUSH
2276: LD_INT 22
2278: PUSH
2279: LD_INT 72
2281: PUSH
2282: LD_INT 26
2284: PUSH
2285: LD_INT 69
2287: PUSH
2288: LD_INT 39
2290: PUSH
2291: LD_INT 40
2293: PUSH
2294: LD_INT 41
2296: PUSH
2297: LD_INT 42
2299: PUSH
2300: LD_INT 43
2302: PUSH
2303: LD_INT 48
2305: PUSH
2306: LD_INT 49
2308: PUSH
2309: LD_INT 50
2311: PUSH
2312: LD_INT 51
2314: PUSH
2315: LD_INT 52
2317: PUSH
2318: LD_INT 53
2320: PUSH
2321: LD_INT 54
2323: PUSH
2324: LD_INT 55
2326: PUSH
2327: LD_INT 56
2329: PUSH
2330: LD_INT 60
2332: PUSH
2333: LD_INT 61
2335: PUSH
2336: LD_INT 62
2338: PUSH
2339: LD_INT 66
2341: PUSH
2342: LD_INT 67
2344: PUSH
2345: LD_INT 68
2347: PUSH
2348: LD_INT 81
2350: PUSH
2351: LD_INT 82
2353: PUSH
2354: LD_INT 83
2356: PUSH
2357: LD_INT 84
2359: PUSH
2360: LD_INT 85
2362: PUSH
2363: LD_INT 87
2365: PUSH
2366: LD_INT 88
2368: PUSH
2369: LD_INT 92
2371: PUSH
2372: LD_INT 94
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: ST_TO_ADDR
2433: GO 2674
2435: LD_INT 3
2437: DOUBLE
2438: EQUAL
2439: IFTRUE 2443
2441: GO 2673
2443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2444: LD_ADDR_VAR 0 4
2448: PUSH
2449: LD_INT 46
2451: PUSH
2452: LD_INT 47
2454: PUSH
2455: LD_INT 1
2457: PUSH
2458: LD_INT 2
2460: PUSH
2461: LD_INT 82
2463: PUSH
2464: LD_INT 83
2466: PUSH
2467: LD_INT 84
2469: PUSH
2470: LD_INT 85
2472: PUSH
2473: LD_INT 86
2475: PUSH
2476: LD_INT 11
2478: PUSH
2479: LD_INT 9
2481: PUSH
2482: LD_INT 20
2484: PUSH
2485: LD_INT 19
2487: PUSH
2488: LD_INT 21
2490: PUSH
2491: LD_INT 24
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 25
2499: PUSH
2500: LD_INT 28
2502: PUSH
2503: LD_INT 29
2505: PUSH
2506: LD_INT 30
2508: PUSH
2509: LD_INT 31
2511: PUSH
2512: LD_INT 37
2514: PUSH
2515: LD_INT 38
2517: PUSH
2518: LD_INT 32
2520: PUSH
2521: LD_INT 27
2523: PUSH
2524: LD_INT 33
2526: PUSH
2527: LD_INT 69
2529: PUSH
2530: LD_INT 39
2532: PUSH
2533: LD_INT 34
2535: PUSH
2536: LD_INT 40
2538: PUSH
2539: LD_INT 71
2541: PUSH
2542: LD_INT 23
2544: PUSH
2545: LD_INT 44
2547: PUSH
2548: LD_INT 48
2550: PUSH
2551: LD_INT 49
2553: PUSH
2554: LD_INT 50
2556: PUSH
2557: LD_INT 51
2559: PUSH
2560: LD_INT 52
2562: PUSH
2563: LD_INT 53
2565: PUSH
2566: LD_INT 54
2568: PUSH
2569: LD_INT 55
2571: PUSH
2572: LD_INT 56
2574: PUSH
2575: LD_INT 57
2577: PUSH
2578: LD_INT 58
2580: PUSH
2581: LD_INT 59
2583: PUSH
2584: LD_INT 63
2586: PUSH
2587: LD_INT 64
2589: PUSH
2590: LD_INT 65
2592: PUSH
2593: LD_INT 82
2595: PUSH
2596: LD_INT 83
2598: PUSH
2599: LD_INT 84
2601: PUSH
2602: LD_INT 85
2604: PUSH
2605: LD_INT 86
2607: PUSH
2608: LD_INT 89
2610: PUSH
2611: LD_INT 91
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: ST_TO_ADDR
2671: GO 2674
2673: POP
// if state > - 1 and state < 3 then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 1
2681: NEG
2682: GREATER
2683: IFFALSE 2695
2685: PUSH
2686: LD_VAR 0 3
2690: PUSH
2691: LD_INT 3
2693: LESS
2694: AND
2695: IFFALSE 2752
// for i in result do
2697: LD_ADDR_VAR 0 5
2701: PUSH
2702: LD_VAR 0 4
2706: PUSH
2707: FOR_IN
2708: IFFALSE 2750
// if GetTech ( i , side ) <> state then
2710: LD_VAR 0 5
2714: PPUSH
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 321
2724: PUSH
2725: LD_VAR 0 3
2729: NONEQUAL
2730: IFFALSE 2748
// result := result diff i ;
2732: LD_ADDR_VAR 0 4
2736: PUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_VAR 0 5
2746: DIFF
2747: ST_TO_ADDR
2748: GO 2707
2750: POP
2751: POP
// end ;
2752: LD_VAR 0 4
2756: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2757: LD_INT 0
2759: PPUSH
2760: PPUSH
2761: PPUSH
// result := true ;
2762: LD_ADDR_VAR 0 3
2766: PUSH
2767: LD_INT 1
2769: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2770: LD_ADDR_VAR 0 5
2774: PUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 480
2784: ST_TO_ADDR
// if not tmp then
2785: LD_VAR 0 5
2789: NOT
2790: IFFALSE 2794
// exit ;
2792: GO 2843
// for i in tmp do
2794: LD_ADDR_VAR 0 4
2798: PUSH
2799: LD_VAR 0 5
2803: PUSH
2804: FOR_IN
2805: IFFALSE 2841
// if GetTech ( i , side ) <> state_researched then
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_VAR 0 1
2816: PPUSH
2817: CALL_OW 321
2821: PUSH
2822: LD_INT 2
2824: NONEQUAL
2825: IFFALSE 2839
// begin result := false ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: LD_INT 0
2834: ST_TO_ADDR
// exit ;
2835: POP
2836: POP
2837: GO 2843
// end ;
2839: GO 2804
2841: POP
2842: POP
// end ;
2843: LD_VAR 0 3
2847: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2848: LD_INT 0
2850: PPUSH
2851: PPUSH
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
2860: PPUSH
2861: PPUSH
2862: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2863: LD_VAR 0 1
2867: NOT
2868: IFTRUE 2885
2870: PUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: CALL_OW 257
2880: PUSH
2881: LD_INT 9
2883: NONEQUAL
2884: OR
2885: IFFALSE 2889
// exit ;
2887: GO 3468
// side := GetSide ( unit ) ;
2889: LD_ADDR_VAR 0 9
2893: PUSH
2894: LD_VAR 0 1
2898: PPUSH
2899: CALL_OW 255
2903: ST_TO_ADDR
// tech_space := tech_spacanom ;
2904: LD_ADDR_VAR 0 12
2908: PUSH
2909: LD_INT 29
2911: ST_TO_ADDR
// tech_time := tech_taurad ;
2912: LD_ADDR_VAR 0 13
2916: PUSH
2917: LD_INT 28
2919: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2920: LD_ADDR_VAR 0 11
2924: PUSH
2925: LD_VAR 0 1
2929: PPUSH
2930: CALL_OW 310
2934: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2935: LD_VAR 0 11
2939: PPUSH
2940: CALL_OW 247
2944: PUSH
2945: LD_INT 2
2947: EQUAL
2948: IFFALSE 2952
// exit ;
2950: GO 3468
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2952: LD_ADDR_VAR 0 8
2956: PUSH
2957: LD_INT 81
2959: PUSH
2960: LD_VAR 0 9
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 21
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// if not tmp then
2995: LD_VAR 0 8
2999: NOT
3000: IFFALSE 3004
// exit ;
3002: GO 3468
// if in_unit then
3004: LD_VAR 0 11
3008: IFFALSE 3032
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3010: LD_ADDR_VAR 0 10
3014: PUSH
3015: LD_VAR 0 8
3019: PPUSH
3020: LD_VAR 0 11
3024: PPUSH
3025: CALL_OW 74
3029: ST_TO_ADDR
3030: GO 3052
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3032: LD_ADDR_VAR 0 10
3036: PUSH
3037: LD_VAR 0 8
3041: PPUSH
3042: LD_VAR 0 1
3046: PPUSH
3047: CALL_OW 74
3051: ST_TO_ADDR
// if not enemy then
3052: LD_VAR 0 10
3056: NOT
3057: IFFALSE 3061
// exit ;
3059: GO 3468
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3061: LD_VAR 0 11
3065: IFFALSE 3087
3067: PUSH
3068: LD_VAR 0 11
3072: PPUSH
3073: LD_VAR 0 10
3077: PPUSH
3078: CALL_OW 296
3082: PUSH
3083: LD_INT 13
3085: GREATER
3086: AND
3087: IFTRUE 3109
3089: PUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 296
3104: PUSH
3105: LD_INT 12
3107: GREATER
3108: OR
3109: IFFALSE 3113
// exit ;
3111: GO 3468
// missile := [ 1 ] ;
3113: LD_ADDR_VAR 0 14
3117: PUSH
3118: LD_INT 1
3120: PUSH
3121: EMPTY
3122: LIST
3123: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3124: LD_VAR 0 9
3128: PPUSH
3129: LD_VAR 0 12
3133: PPUSH
3134: CALL_OW 325
3138: IFFALSE 3167
// missile := Replace ( missile , missile + 1 , 2 ) ;
3140: LD_ADDR_VAR 0 14
3144: PUSH
3145: LD_VAR 0 14
3149: PPUSH
3150: LD_VAR 0 14
3154: PUSH
3155: LD_INT 1
3157: PLUS
3158: PPUSH
3159: LD_INT 2
3161: PPUSH
3162: CALL_OW 1
3166: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3167: LD_VAR 0 9
3171: PPUSH
3172: LD_VAR 0 13
3176: PPUSH
3177: CALL_OW 325
3181: IFFALSE 3205
3183: PUSH
3184: LD_VAR 0 10
3188: PPUSH
3189: CALL_OW 255
3193: PPUSH
3194: LD_VAR 0 13
3198: PPUSH
3199: CALL_OW 325
3203: NOT
3204: AND
3205: IFFALSE 3234
// missile := Replace ( missile , missile + 1 , 3 ) ;
3207: LD_ADDR_VAR 0 14
3211: PUSH
3212: LD_VAR 0 14
3216: PPUSH
3217: LD_VAR 0 14
3221: PUSH
3222: LD_INT 1
3224: PLUS
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: CALL_OW 1
3233: ST_TO_ADDR
// if missile < 2 then
3234: LD_VAR 0 14
3238: PUSH
3239: LD_INT 2
3241: LESS
3242: IFFALSE 3246
// exit ;
3244: GO 3468
// x := GetX ( enemy ) ;
3246: LD_ADDR_VAR 0 4
3250: PUSH
3251: LD_VAR 0 10
3255: PPUSH
3256: CALL_OW 250
3260: ST_TO_ADDR
// y := GetY ( enemy ) ;
3261: LD_ADDR_VAR 0 5
3265: PUSH
3266: LD_VAR 0 10
3270: PPUSH
3271: CALL_OW 251
3275: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3276: LD_ADDR_VAR 0 6
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: NEG
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 12
3297: PLUS
3298: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3299: LD_ADDR_VAR 0 7
3303: PUSH
3304: LD_VAR 0 5
3308: PUSH
3309: LD_INT 1
3311: NEG
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 12
3320: PLUS
3321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3322: LD_VAR 0 6
3326: PPUSH
3327: LD_VAR 0 7
3331: PPUSH
3332: CALL_OW 488
3336: NOT
3337: IFFALSE 3359
// begin _x := x ;
3339: LD_ADDR_VAR 0 6
3343: PUSH
3344: LD_VAR 0 4
3348: ST_TO_ADDR
// _y := y ;
3349: LD_ADDR_VAR 0 7
3353: PUSH
3354: LD_VAR 0 5
3358: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 1
3366: PPUSH
3367: LD_VAR 0 14
3371: PPUSH
3372: CALL_OW 12
3376: ST_TO_ADDR
// case i of 1 :
3377: LD_VAR 0 3
3381: PUSH
3382: LD_INT 1
3384: DOUBLE
3385: EQUAL
3386: IFTRUE 3390
3388: GO 3407
3390: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3391: LD_VAR 0 1
3395: PPUSH
3396: LD_VAR 0 10
3400: PPUSH
3401: CALL_OW 115
3405: GO 3468
3407: LD_INT 2
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3415
3413: GO 3437
3415: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3416: LD_VAR 0 1
3420: PPUSH
3421: LD_VAR 0 6
3425: PPUSH
3426: LD_VAR 0 7
3430: PPUSH
3431: CALL_OW 153
3435: GO 3468
3437: LD_INT 3
3439: DOUBLE
3440: EQUAL
3441: IFTRUE 3445
3443: GO 3467
3445: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3446: LD_VAR 0 1
3450: PPUSH
3451: LD_VAR 0 6
3455: PPUSH
3456: LD_VAR 0 7
3460: PPUSH
3461: CALL_OW 154
3465: GO 3468
3467: POP
// end ;
3468: LD_VAR 0 2
3472: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3473: LD_INT 0
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
3479: PPUSH
3480: PPUSH
// if not unit or not building then
3481: LD_VAR 0 1
3485: NOT
3486: IFTRUE 3495
3488: PUSH
3489: LD_VAR 0 2
3493: NOT
3494: OR
3495: IFFALSE 3499
// exit ;
3497: GO 3657
// x := GetX ( building ) ;
3499: LD_ADDR_VAR 0 5
3503: PUSH
3504: LD_VAR 0 2
3508: PPUSH
3509: CALL_OW 250
3513: ST_TO_ADDR
// y := GetY ( building ) ;
3514: LD_ADDR_VAR 0 6
3518: PUSH
3519: LD_VAR 0 2
3523: PPUSH
3524: CALL_OW 251
3528: ST_TO_ADDR
// for i := 0 to 5 do
3529: LD_ADDR_VAR 0 4
3533: PUSH
3534: DOUBLE
3535: LD_INT 0
3537: DEC
3538: ST_TO_ADDR
3539: LD_INT 5
3541: PUSH
3542: FOR_TO
3543: IFFALSE 3655
// begin _x := ShiftX ( x , i , 3 ) ;
3545: LD_ADDR_VAR 0 7
3549: PUSH
3550: LD_VAR 0 5
3554: PPUSH
3555: LD_VAR 0 4
3559: PPUSH
3560: LD_INT 3
3562: PPUSH
3563: CALL_OW 272
3567: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3568: LD_ADDR_VAR 0 8
3572: PUSH
3573: LD_VAR 0 6
3577: PPUSH
3578: LD_VAR 0 4
3582: PPUSH
3583: LD_INT 3
3585: PPUSH
3586: CALL_OW 273
3590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3591: LD_VAR 0 7
3595: PPUSH
3596: LD_VAR 0 8
3600: PPUSH
3601: CALL_OW 488
3605: NOT
3606: IFFALSE 3610
// continue ;
3608: GO 3542
// if HexInfo ( _x , _y ) = 0 then
3610: LD_VAR 0 7
3614: PPUSH
3615: LD_VAR 0 8
3619: PPUSH
3620: CALL_OW 428
3624: PUSH
3625: LD_INT 0
3627: EQUAL
3628: IFFALSE 3653
// begin ComMoveXY ( unit , _x , _y ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_VAR 0 7
3639: PPUSH
3640: LD_VAR 0 8
3644: PPUSH
3645: CALL_OW 111
// exit ;
3649: POP
3650: POP
3651: GO 3657
// end ; end ;
3653: GO 3542
3655: POP
3656: POP
// end ;
3657: LD_VAR 0 3
3661: RET
// export function ScanBase ( side , base_area ) ; begin
3662: LD_INT 0
3664: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: LD_VAR 0 2
3674: PPUSH
3675: LD_INT 81
3677: PUSH
3678: LD_VAR 0 1
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PPUSH
3687: CALL_OW 70
3691: ST_TO_ADDR
// end ;
3692: LD_VAR 0 3
3696: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
// result := false ;
3703: LD_ADDR_VAR 0 2
3707: PUSH
3708: LD_INT 0
3710: ST_TO_ADDR
// side := GetSide ( unit ) ;
3711: LD_ADDR_VAR 0 3
3715: PUSH
3716: LD_VAR 0 1
3720: PPUSH
3721: CALL_OW 255
3725: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3726: LD_ADDR_VAR 0 4
3730: PUSH
3731: LD_VAR 0 1
3735: PPUSH
3736: CALL_OW 248
3740: ST_TO_ADDR
// case nat of 1 :
3741: LD_VAR 0 4
3745: PUSH
3746: LD_INT 1
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3765
3754: POP
// tech := tech_lassight ; 2 :
3755: LD_ADDR_VAR 0 5
3759: PUSH
3760: LD_INT 12
3762: ST_TO_ADDR
3763: GO 3804
3765: LD_INT 2
3767: DOUBLE
3768: EQUAL
3769: IFTRUE 3773
3771: GO 3784
3773: POP
// tech := tech_mortar ; 3 :
3774: LD_ADDR_VAR 0 5
3778: PUSH
3779: LD_INT 41
3781: ST_TO_ADDR
3782: GO 3804
3784: LD_INT 3
3786: DOUBLE
3787: EQUAL
3788: IFTRUE 3792
3790: GO 3803
3792: POP
// tech := tech_bazooka ; end ;
3793: LD_ADDR_VAR 0 5
3797: PUSH
3798: LD_INT 44
3800: ST_TO_ADDR
3801: GO 3804
3803: POP
// if Researched ( side , tech ) then
3804: LD_VAR 0 3
3808: PPUSH
3809: LD_VAR 0 5
3813: PPUSH
3814: CALL_OW 325
3818: IFFALSE 3845
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3820: LD_ADDR_VAR 0 2
3824: PUSH
3825: LD_INT 5
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 9
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: PUSH
3839: LD_VAR 0 4
3843: ARRAY
3844: ST_TO_ADDR
// end ;
3845: LD_VAR 0 2
3849: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3850: LD_INT 0
3852: PPUSH
3853: PPUSH
3854: PPUSH
// if not mines then
3855: LD_VAR 0 2
3859: NOT
3860: IFFALSE 3864
// exit ;
3862: GO 4008
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: LD_INT 81
3871: PUSH
3872: LD_VAR 0 1
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 21
3886: PUSH
3887: LD_INT 3
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: ST_TO_ADDR
// for i in mines do
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: LD_VAR 0 2
3916: PUSH
3917: FOR_IN
3918: IFFALSE 4006
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3920: LD_VAR 0 4
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: PPUSH
3929: LD_VAR 0 4
3933: PUSH
3934: LD_INT 2
3936: ARRAY
3937: PPUSH
3938: CALL_OW 458
3942: NOT
3943: IFFALSE 3947
// continue ;
3945: GO 3917
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3947: LD_VAR 0 4
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_VAR 0 4
3960: PUSH
3961: LD_INT 2
3963: ARRAY
3964: PPUSH
3965: CALL_OW 428
3969: PUSH
3970: LD_VAR 0 5
3974: IN
3975: IFFALSE 4004
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3977: LD_VAR 0 4
3981: PUSH
3982: LD_INT 1
3984: ARRAY
3985: PPUSH
3986: LD_VAR 0 4
3990: PUSH
3991: LD_INT 2
3993: ARRAY
3994: PPUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 456
// end ;
4004: GO 3917
4006: POP
4007: POP
// end ;
4008: LD_VAR 0 3
4012: RET
// export function Count ( array ) ; begin
4013: LD_INT 0
4015: PPUSH
// result := array + 0 ;
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_VAR 0 1
4025: PUSH
4026: LD_INT 0
4028: PLUS
4029: ST_TO_ADDR
// end ;
4030: LD_VAR 0 2
4034: RET
// export function IsEmpty ( building ) ; begin
4035: LD_INT 0
4037: PPUSH
// if not building then
4038: LD_VAR 0 1
4042: NOT
4043: IFFALSE 4047
// exit ;
4045: GO 4090
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4047: LD_ADDR_VAR 0 2
4051: PUSH
4052: LD_VAR 0 1
4056: PUSH
4057: LD_INT 22
4059: PUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 255
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 58
4076: PUSH
4077: EMPTY
4078: LIST
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 69
4088: IN
4089: ST_TO_ADDR
// end ;
4090: LD_VAR 0 2
4094: RET
// export function IsNotFull ( building ) ; var places ; begin
4095: LD_INT 0
4097: PPUSH
4098: PPUSH
// if not building then
4099: LD_VAR 0 1
4103: NOT
4104: IFFALSE 4108
// exit ;
4106: GO 4136
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_VAR 0 1
4117: PPUSH
4118: LD_INT 3
4120: PUSH
4121: LD_INT 62
4123: PUSH
4124: EMPTY
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 72
4135: ST_TO_ADDR
// end ;
4136: LD_VAR 0 2
4140: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4141: LD_INT 0
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
// tmp := [ ] ;
4147: LD_ADDR_VAR 0 3
4151: PUSH
4152: EMPTY
4153: ST_TO_ADDR
// list := [ ] ;
4154: LD_ADDR_VAR 0 5
4158: PUSH
4159: EMPTY
4160: ST_TO_ADDR
// for i = 16 to 25 do
4161: LD_ADDR_VAR 0 4
4165: PUSH
4166: DOUBLE
4167: LD_INT 16
4169: DEC
4170: ST_TO_ADDR
4171: LD_INT 25
4173: PUSH
4174: FOR_TO
4175: IFFALSE 4248
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: LD_VAR 0 3
4186: PUSH
4187: LD_INT 22
4189: PUSH
4190: LD_VAR 0 1
4194: PPUSH
4195: CALL_OW 255
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 91
4206: PUSH
4207: LD_VAR 0 1
4211: PUSH
4212: LD_INT 6
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 30
4222: PUSH
4223: LD_VAR 0 4
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: PPUSH
4240: CALL_OW 69
4244: ADD
4245: ST_TO_ADDR
4246: GO 4174
4248: POP
4249: POP
// for i = 1 to tmp do
4250: LD_ADDR_VAR 0 4
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_VAR 0 3
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4354
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_VAR 0 5
4277: PUSH
4278: LD_VAR 0 3
4282: PUSH
4283: LD_VAR 0 4
4287: ARRAY
4288: PPUSH
4289: CALL_OW 266
4293: PUSH
4294: LD_VAR 0 3
4298: PUSH
4299: LD_VAR 0 4
4303: ARRAY
4304: PPUSH
4305: CALL_OW 250
4309: PUSH
4310: LD_VAR 0 3
4314: PUSH
4315: LD_VAR 0 4
4319: ARRAY
4320: PPUSH
4321: CALL_OW 251
4325: PUSH
4326: LD_VAR 0 3
4330: PUSH
4331: LD_VAR 0 4
4335: ARRAY
4336: PPUSH
4337: CALL_OW 254
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: ADD
4351: ST_TO_ADDR
4352: GO 4265
4354: POP
4355: POP
// result := list ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_VAR 0 5
4365: ST_TO_ADDR
// end ;
4366: LD_VAR 0 2
4370: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
// if not factory then
4380: LD_VAR 0 1
4384: NOT
4385: IFFALSE 4389
// exit ;
4387: GO 4992
// if control = control_apeman then
4389: LD_VAR 0 4
4393: PUSH
4394: LD_INT 5
4396: EQUAL
4397: IFFALSE 4506
// begin tmp := UnitsInside ( factory ) ;
4399: LD_ADDR_VAR 0 8
4403: PUSH
4404: LD_VAR 0 1
4408: PPUSH
4409: CALL_OW 313
4413: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4414: LD_VAR 0 8
4418: PPUSH
4419: LD_INT 25
4421: PUSH
4422: LD_INT 12
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: NOT
4434: IFFALSE 4444
// control := control_manual ;
4436: LD_ADDR_VAR 0 4
4440: PUSH
4441: LD_INT 1
4443: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4444: LD_ADDR_VAR 0 8
4448: PUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL 4141 0 1
4458: ST_TO_ADDR
// if tmp then
4459: LD_VAR 0 8
4463: IFFALSE 4506
// begin for i in tmp do
4465: LD_ADDR_VAR 0 7
4469: PUSH
4470: LD_VAR 0 8
4474: PUSH
4475: FOR_IN
4476: IFFALSE 4504
// if i [ 1 ] = b_ext_radio then
4478: LD_VAR 0 7
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PUSH
4487: LD_INT 22
4489: EQUAL
4490: IFFALSE 4502
// begin control := control_remote ;
4492: LD_ADDR_VAR 0 4
4496: PUSH
4497: LD_INT 2
4499: ST_TO_ADDR
// break ;
4500: GO 4504
// end ;
4502: GO 4475
4504: POP
4505: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4506: LD_VAR 0 1
4510: PPUSH
4511: LD_VAR 0 2
4515: PPUSH
4516: LD_VAR 0 3
4520: PPUSH
4521: LD_VAR 0 4
4525: PPUSH
4526: LD_VAR 0 5
4530: PPUSH
4531: CALL_OW 448
4535: IFFALSE 4570
// begin result := [ chassis , engine , control , weapon ] ;
4537: LD_ADDR_VAR 0 6
4541: PUSH
4542: LD_VAR 0 2
4546: PUSH
4547: LD_VAR 0 3
4551: PUSH
4552: LD_VAR 0 4
4556: PUSH
4557: LD_VAR 0 5
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// exit ;
4568: GO 4992
// end ; _chassis := AvailableChassisList ( factory ) ;
4570: LD_ADDR_VAR 0 9
4574: PUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL_OW 475
4584: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4585: LD_ADDR_VAR 0 11
4589: PUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 476
4599: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4600: LD_ADDR_VAR 0 12
4604: PUSH
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 477
4614: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4615: LD_ADDR_VAR 0 10
4619: PUSH
4620: LD_VAR 0 1
4624: PPUSH
4625: CALL_OW 478
4629: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4630: LD_VAR 0 9
4634: NOT
4635: IFTRUE 4644
4637: PUSH
4638: LD_VAR 0 11
4642: NOT
4643: OR
4644: IFTRUE 4653
4646: PUSH
4647: LD_VAR 0 12
4651: NOT
4652: OR
4653: IFTRUE 4662
4655: PUSH
4656: LD_VAR 0 10
4660: NOT
4661: OR
4662: IFFALSE 4697
// begin result := [ chassis , engine , control , weapon ] ;
4664: LD_ADDR_VAR 0 6
4668: PUSH
4669: LD_VAR 0 2
4673: PUSH
4674: LD_VAR 0 3
4678: PUSH
4679: LD_VAR 0 4
4683: PUSH
4684: LD_VAR 0 5
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: ST_TO_ADDR
// exit ;
4695: GO 4992
// end ; if not chassis in _chassis then
4697: LD_VAR 0 2
4701: PUSH
4702: LD_VAR 0 9
4706: IN
4707: NOT
4708: IFFALSE 4734
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4710: LD_ADDR_VAR 0 2
4714: PUSH
4715: LD_VAR 0 9
4719: PUSH
4720: LD_INT 1
4722: PPUSH
4723: LD_VAR 0 9
4727: PPUSH
4728: CALL_OW 12
4732: ARRAY
4733: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_VAR 0 3
4743: PPUSH
4744: CALL 4997 0 2
4748: NOT
4749: IFFALSE 4810
// repeat engine := _engine [ 1 ] ;
4751: LD_ADDR_VAR 0 3
4755: PUSH
4756: LD_VAR 0 11
4760: PUSH
4761: LD_INT 1
4763: ARRAY
4764: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4765: LD_ADDR_VAR 0 11
4769: PUSH
4770: LD_VAR 0 11
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 3
4782: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4783: LD_VAR 0 2
4787: PPUSH
4788: LD_VAR 0 3
4792: PPUSH
4793: CALL 4997 0 2
4797: IFTRUE 4808
4799: PUSH
4800: LD_VAR 0 11
4804: PUSH
4805: EMPTY
4806: EQUAL
4807: OR
4808: IFFALSE 4751
// if not control in _control then
4810: LD_VAR 0 4
4814: PUSH
4815: LD_VAR 0 12
4819: IN
4820: NOT
4821: IFFALSE 4847
// control := _control [ rand ( 1 , _control ) ] ;
4823: LD_ADDR_VAR 0 4
4827: PUSH
4828: LD_VAR 0 12
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_VAR 0 12
4840: PPUSH
4841: CALL_OW 12
4845: ARRAY
4846: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4847: LD_VAR 0 2
4851: PPUSH
4852: LD_VAR 0 5
4856: PPUSH
4857: CALL 5219 0 2
4861: NOT
4862: IFFALSE 4923
// repeat weapon := _weapon [ 1 ] ;
4864: LD_ADDR_VAR 0 5
4868: PUSH
4869: LD_VAR 0 10
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4878: LD_ADDR_VAR 0 10
4882: PUSH
4883: LD_VAR 0 10
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: CALL_OW 3
4895: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4896: LD_VAR 0 2
4900: PPUSH
4901: LD_VAR 0 5
4905: PPUSH
4906: CALL 5219 0 2
4910: IFTRUE 4921
4912: PUSH
4913: LD_VAR 0 10
4917: PUSH
4918: EMPTY
4919: EQUAL
4920: OR
4921: IFFALSE 4864
// result := [ ] ;
4923: LD_ADDR_VAR 0 6
4927: PUSH
4928: EMPTY
4929: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4930: LD_VAR 0 1
4934: PPUSH
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 3
4944: PPUSH
4945: LD_VAR 0 4
4949: PPUSH
4950: LD_VAR 0 5
4954: PPUSH
4955: CALL_OW 448
4959: IFFALSE 4992
// result := [ chassis , engine , control , weapon ] ;
4961: LD_ADDR_VAR 0 6
4965: PUSH
4966: LD_VAR 0 2
4970: PUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 4
4980: PUSH
4981: LD_VAR 0 5
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: ST_TO_ADDR
// end ;
4992: LD_VAR 0 6
4996: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4997: LD_INT 0
4999: PPUSH
// if not chassis or not engine then
5000: LD_VAR 0 1
5004: NOT
5005: IFTRUE 5014
5007: PUSH
5008: LD_VAR 0 2
5012: NOT
5013: OR
5014: IFFALSE 5018
// exit ;
5016: GO 5214
// case engine of engine_solar :
5018: LD_VAR 0 2
5022: PUSH
5023: LD_INT 2
5025: DOUBLE
5026: EQUAL
5027: IFTRUE 5031
5029: GO 5069
5031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5032: LD_ADDR_VAR 0 3
5036: PUSH
5037: LD_INT 11
5039: PUSH
5040: LD_INT 12
5042: PUSH
5043: LD_INT 13
5045: PUSH
5046: LD_INT 14
5048: PUSH
5049: LD_INT 1
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: LD_INT 3
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: ST_TO_ADDR
5067: GO 5198
5069: LD_INT 1
5071: DOUBLE
5072: EQUAL
5073: IFTRUE 5077
5075: GO 5139
5077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5078: LD_ADDR_VAR 0 3
5082: PUSH
5083: LD_INT 11
5085: PUSH
5086: LD_INT 12
5088: PUSH
5089: LD_INT 13
5091: PUSH
5092: LD_INT 14
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: LD_INT 2
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 5
5109: PUSH
5110: LD_INT 21
5112: PUSH
5113: LD_INT 23
5115: PUSH
5116: LD_INT 22
5118: PUSH
5119: LD_INT 24
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: ST_TO_ADDR
5137: GO 5198
5139: LD_INT 3
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5147
5145: GO 5197
5147: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: LD_INT 14
5158: PUSH
5159: LD_INT 2
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 4
5167: PUSH
5168: LD_INT 5
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 22
5176: PUSH
5177: LD_INT 23
5179: PUSH
5180: LD_INT 24
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: ST_TO_ADDR
5195: GO 5198
5197: POP
// result := ( chassis in result ) ;
5198: LD_ADDR_VAR 0 3
5202: PUSH
5203: LD_VAR 0 1
5207: PUSH
5208: LD_VAR 0 3
5212: IN
5213: ST_TO_ADDR
// end ;
5214: LD_VAR 0 3
5218: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5219: LD_INT 0
5221: PPUSH
// if not chassis or not weapon then
5222: LD_VAR 0 1
5226: NOT
5227: IFTRUE 5236
5229: PUSH
5230: LD_VAR 0 2
5234: NOT
5235: OR
5236: IFFALSE 5240
// exit ;
5238: GO 6334
// case weapon of us_machine_gun :
5240: LD_VAR 0 2
5244: PUSH
5245: LD_INT 2
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5283
5253: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5254: LD_ADDR_VAR 0 3
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 2
5264: PUSH
5265: LD_INT 3
5267: PUSH
5268: LD_INT 4
5270: PUSH
5271: LD_INT 5
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: ST_TO_ADDR
5281: GO 6318
5283: LD_INT 3
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5291
5289: GO 5321
5291: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5292: LD_ADDR_VAR 0 3
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: LD_INT 2
5302: PUSH
5303: LD_INT 3
5305: PUSH
5306: LD_INT 4
5308: PUSH
5309: LD_INT 5
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: ST_TO_ADDR
5319: GO 6318
5321: LD_INT 11
5323: DOUBLE
5324: EQUAL
5325: IFTRUE 5329
5327: GO 5359
5329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5330: LD_ADDR_VAR 0 3
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: LD_INT 2
5340: PUSH
5341: LD_INT 3
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: LD_INT 5
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: ST_TO_ADDR
5357: GO 6318
5359: LD_INT 4
5361: DOUBLE
5362: EQUAL
5363: IFTRUE 5367
5365: GO 5393
5367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5368: LD_ADDR_VAR 0 3
5372: PUSH
5373: LD_INT 2
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: LD_INT 4
5381: PUSH
5382: LD_INT 5
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: ST_TO_ADDR
5391: GO 6318
5393: LD_INT 5
5395: DOUBLE
5396: EQUAL
5397: IFTRUE 5401
5399: GO 5427
5401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5402: LD_ADDR_VAR 0 3
5406: PUSH
5407: LD_INT 2
5409: PUSH
5410: LD_INT 3
5412: PUSH
5413: LD_INT 4
5415: PUSH
5416: LD_INT 5
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: ST_TO_ADDR
5425: GO 6318
5427: LD_INT 9
5429: DOUBLE
5430: EQUAL
5431: IFTRUE 5435
5433: GO 5461
5435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: LD_INT 2
5443: PUSH
5444: LD_INT 3
5446: PUSH
5447: LD_INT 4
5449: PUSH
5450: LD_INT 5
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: ST_TO_ADDR
5459: GO 6318
5461: LD_INT 7
5463: DOUBLE
5464: EQUAL
5465: IFTRUE 5469
5467: GO 5495
5469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5470: LD_ADDR_VAR 0 3
5474: PUSH
5475: LD_INT 2
5477: PUSH
5478: LD_INT 3
5480: PUSH
5481: LD_INT 4
5483: PUSH
5484: LD_INT 5
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: ST_TO_ADDR
5493: GO 6318
5495: LD_INT 12
5497: DOUBLE
5498: EQUAL
5499: IFTRUE 5503
5501: GO 5529
5503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5504: LD_ADDR_VAR 0 3
5508: PUSH
5509: LD_INT 2
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 4
5517: PUSH
5518: LD_INT 5
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: ST_TO_ADDR
5527: GO 6318
5529: LD_INT 13
5531: DOUBLE
5532: EQUAL
5533: IFTRUE 5537
5535: GO 5563
5537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5538: LD_ADDR_VAR 0 3
5542: PUSH
5543: LD_INT 2
5545: PUSH
5546: LD_INT 3
5548: PUSH
5549: LD_INT 4
5551: PUSH
5552: LD_INT 5
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: ST_TO_ADDR
5561: GO 6318
5563: LD_INT 14
5565: DOUBLE
5566: EQUAL
5567: IFTRUE 5571
5569: GO 5589
5571: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5572: LD_ADDR_VAR 0 3
5576: PUSH
5577: LD_INT 4
5579: PUSH
5580: LD_INT 5
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: ST_TO_ADDR
5587: GO 6318
5589: LD_INT 6
5591: DOUBLE
5592: EQUAL
5593: IFTRUE 5597
5595: GO 5615
5597: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5598: LD_ADDR_VAR 0 3
5602: PUSH
5603: LD_INT 4
5605: PUSH
5606: LD_INT 5
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: ST_TO_ADDR
5613: GO 6318
5615: LD_INT 10
5617: DOUBLE
5618: EQUAL
5619: IFTRUE 5623
5621: GO 5641
5623: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5624: LD_ADDR_VAR 0 3
5628: PUSH
5629: LD_INT 4
5631: PUSH
5632: LD_INT 5
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: ST_TO_ADDR
5639: GO 6318
5641: LD_INT 22
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5649
5647: GO 5675
5649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_INT 11
5657: PUSH
5658: LD_INT 12
5660: PUSH
5661: LD_INT 13
5663: PUSH
5664: LD_INT 14
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: ST_TO_ADDR
5673: GO 6318
5675: LD_INT 23
5677: DOUBLE
5678: EQUAL
5679: IFTRUE 5683
5681: GO 5709
5683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5684: LD_ADDR_VAR 0 3
5688: PUSH
5689: LD_INT 11
5691: PUSH
5692: LD_INT 12
5694: PUSH
5695: LD_INT 13
5697: PUSH
5698: LD_INT 14
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: ST_TO_ADDR
5707: GO 6318
5709: LD_INT 24
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5743
5717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5718: LD_ADDR_VAR 0 3
5722: PUSH
5723: LD_INT 11
5725: PUSH
5726: LD_INT 12
5728: PUSH
5729: LD_INT 13
5731: PUSH
5732: LD_INT 14
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 6318
5743: LD_INT 30
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5777
5751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5752: LD_ADDR_VAR 0 3
5756: PUSH
5757: LD_INT 11
5759: PUSH
5760: LD_INT 12
5762: PUSH
5763: LD_INT 13
5765: PUSH
5766: LD_INT 14
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: ST_TO_ADDR
5775: GO 6318
5777: LD_INT 25
5779: DOUBLE
5780: EQUAL
5781: IFTRUE 5785
5783: GO 5803
5785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5786: LD_ADDR_VAR 0 3
5790: PUSH
5791: LD_INT 13
5793: PUSH
5794: LD_INT 14
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: ST_TO_ADDR
5801: GO 6318
5803: LD_INT 27
5805: DOUBLE
5806: EQUAL
5807: IFTRUE 5811
5809: GO 5829
5811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5812: LD_ADDR_VAR 0 3
5816: PUSH
5817: LD_INT 13
5819: PUSH
5820: LD_INT 14
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: ST_TO_ADDR
5827: GO 6318
5829: LD_INT 92
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 5863
5837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5838: LD_ADDR_VAR 0 3
5842: PUSH
5843: LD_INT 11
5845: PUSH
5846: LD_INT 12
5848: PUSH
5849: LD_INT 13
5851: PUSH
5852: LD_INT 14
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: ST_TO_ADDR
5861: GO 6318
5863: LD_INT 28
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5889
5871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_INT 13
5879: PUSH
5880: LD_INT 14
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: ST_TO_ADDR
5887: GO 6318
5889: LD_INT 29
5891: DOUBLE
5892: EQUAL
5893: IFTRUE 5897
5895: GO 5915
5897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5898: LD_ADDR_VAR 0 3
5902: PUSH
5903: LD_INT 13
5905: PUSH
5906: LD_INT 14
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: ST_TO_ADDR
5913: GO 6318
5915: LD_INT 31
5917: DOUBLE
5918: EQUAL
5919: IFTRUE 5923
5921: GO 5941
5923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5924: LD_ADDR_VAR 0 3
5928: PUSH
5929: LD_INT 13
5931: PUSH
5932: LD_INT 14
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: ST_TO_ADDR
5939: GO 6318
5941: LD_INT 26
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5949
5947: GO 5967
5949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5950: LD_ADDR_VAR 0 3
5954: PUSH
5955: LD_INT 13
5957: PUSH
5958: LD_INT 14
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: ST_TO_ADDR
5965: GO 6318
5967: LD_INT 42
5969: DOUBLE
5970: EQUAL
5971: IFTRUE 5975
5973: GO 6001
5975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: LD_INT 21
5983: PUSH
5984: LD_INT 22
5986: PUSH
5987: LD_INT 23
5989: PUSH
5990: LD_INT 24
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: ST_TO_ADDR
5999: GO 6318
6001: LD_INT 43
6003: DOUBLE
6004: EQUAL
6005: IFTRUE 6009
6007: GO 6035
6009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6010: LD_ADDR_VAR 0 3
6014: PUSH
6015: LD_INT 21
6017: PUSH
6018: LD_INT 22
6020: PUSH
6021: LD_INT 23
6023: PUSH
6024: LD_INT 24
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: ST_TO_ADDR
6033: GO 6318
6035: LD_INT 44
6037: DOUBLE
6038: EQUAL
6039: IFTRUE 6043
6041: GO 6069
6043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: LD_INT 21
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_INT 23
6057: PUSH
6058: LD_INT 24
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: ST_TO_ADDR
6067: GO 6318
6069: LD_INT 45
6071: DOUBLE
6072: EQUAL
6073: IFTRUE 6077
6075: GO 6103
6077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_INT 21
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 23
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: ST_TO_ADDR
6101: GO 6318
6103: LD_INT 49
6105: DOUBLE
6106: EQUAL
6107: IFTRUE 6111
6109: GO 6137
6111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6112: LD_ADDR_VAR 0 3
6116: PUSH
6117: LD_INT 21
6119: PUSH
6120: LD_INT 22
6122: PUSH
6123: LD_INT 23
6125: PUSH
6126: LD_INT 24
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: ST_TO_ADDR
6135: GO 6318
6137: LD_INT 51
6139: DOUBLE
6140: EQUAL
6141: IFTRUE 6145
6143: GO 6171
6145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 21
6153: PUSH
6154: LD_INT 22
6156: PUSH
6157: LD_INT 23
6159: PUSH
6160: LD_INT 24
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: ST_TO_ADDR
6169: GO 6318
6171: LD_INT 52
6173: DOUBLE
6174: EQUAL
6175: IFTRUE 6179
6177: GO 6205
6179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: LD_INT 21
6187: PUSH
6188: LD_INT 22
6190: PUSH
6191: LD_INT 23
6193: PUSH
6194: LD_INT 24
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: ST_TO_ADDR
6203: GO 6318
6205: LD_INT 53
6207: DOUBLE
6208: EQUAL
6209: IFTRUE 6213
6211: GO 6231
6213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6214: LD_ADDR_VAR 0 3
6218: PUSH
6219: LD_INT 23
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: ST_TO_ADDR
6229: GO 6318
6231: LD_INT 46
6233: DOUBLE
6234: EQUAL
6235: IFTRUE 6239
6237: GO 6257
6239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: LD_INT 23
6247: PUSH
6248: LD_INT 24
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: ST_TO_ADDR
6255: GO 6318
6257: LD_INT 47
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6283
6265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: LD_INT 23
6273: PUSH
6274: LD_INT 24
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: ST_TO_ADDR
6281: GO 6318
6283: LD_INT 98
6285: DOUBLE
6286: EQUAL
6287: IFTRUE 6291
6289: GO 6317
6291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6292: LD_ADDR_VAR 0 3
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 22
6302: PUSH
6303: LD_INT 23
6305: PUSH
6306: LD_INT 24
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: ST_TO_ADDR
6315: GO 6318
6317: POP
// result := ( chassis in result ) ;
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: LD_VAR 0 3
6332: IN
6333: ST_TO_ADDR
// end ;
6334: LD_VAR 0 3
6338: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6339: LD_INT 0
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
// result := array ;
6348: LD_ADDR_VAR 0 5
6352: PUSH
6353: LD_VAR 0 1
6357: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6358: LD_VAR 0 1
6362: NOT
6363: IFTRUE 6372
6365: PUSH
6366: LD_VAR 0 2
6370: NOT
6371: OR
6372: IFTRUE 6381
6374: PUSH
6375: LD_VAR 0 3
6379: NOT
6380: OR
6381: IFTRUE 6395
6383: PUSH
6384: LD_VAR 0 2
6388: PUSH
6389: LD_VAR 0 1
6393: GREATER
6394: OR
6395: IFTRUE 6409
6397: PUSH
6398: LD_VAR 0 3
6402: PUSH
6403: LD_VAR 0 1
6407: GREATER
6408: OR
6409: IFFALSE 6413
// exit ;
6411: GO 6709
// if direction then
6413: LD_VAR 0 4
6417: IFFALSE 6481
// begin d := 1 ;
6419: LD_ADDR_VAR 0 9
6423: PUSH
6424: LD_INT 1
6426: ST_TO_ADDR
// if i_from > i_to then
6427: LD_VAR 0 2
6431: PUSH
6432: LD_VAR 0 3
6436: GREATER
6437: IFFALSE 6463
// length := ( array - i_from ) + i_to else
6439: LD_ADDR_VAR 0 11
6443: PUSH
6444: LD_VAR 0 1
6448: PUSH
6449: LD_VAR 0 2
6453: MINUS
6454: PUSH
6455: LD_VAR 0 3
6459: PLUS
6460: ST_TO_ADDR
6461: GO 6479
// length := i_to - i_from ;
6463: LD_ADDR_VAR 0 11
6467: PUSH
6468: LD_VAR 0 3
6472: PUSH
6473: LD_VAR 0 2
6477: MINUS
6478: ST_TO_ADDR
// end else
6479: GO 6542
// begin d := - 1 ;
6481: LD_ADDR_VAR 0 9
6485: PUSH
6486: LD_INT 1
6488: NEG
6489: ST_TO_ADDR
// if i_from > i_to then
6490: LD_VAR 0 2
6494: PUSH
6495: LD_VAR 0 3
6499: GREATER
6500: IFFALSE 6520
// length := i_from - i_to else
6502: LD_ADDR_VAR 0 11
6506: PUSH
6507: LD_VAR 0 2
6511: PUSH
6512: LD_VAR 0 3
6516: MINUS
6517: ST_TO_ADDR
6518: GO 6542
// length := ( array - i_to ) + i_from ;
6520: LD_ADDR_VAR 0 11
6524: PUSH
6525: LD_VAR 0 1
6529: PUSH
6530: LD_VAR 0 3
6534: MINUS
6535: PUSH
6536: LD_VAR 0 2
6540: PLUS
6541: ST_TO_ADDR
// end ; if not length then
6542: LD_VAR 0 11
6546: NOT
6547: IFFALSE 6551
// exit ;
6549: GO 6709
// tmp := array ;
6551: LD_ADDR_VAR 0 10
6555: PUSH
6556: LD_VAR 0 1
6560: ST_TO_ADDR
// for i = 1 to length do
6561: LD_ADDR_VAR 0 6
6565: PUSH
6566: DOUBLE
6567: LD_INT 1
6569: DEC
6570: ST_TO_ADDR
6571: LD_VAR 0 11
6575: PUSH
6576: FOR_TO
6577: IFFALSE 6697
// begin for j = 1 to array do
6579: LD_ADDR_VAR 0 7
6583: PUSH
6584: DOUBLE
6585: LD_INT 1
6587: DEC
6588: ST_TO_ADDR
6589: LD_VAR 0 1
6593: PUSH
6594: FOR_TO
6595: IFFALSE 6683
// begin k := j + d ;
6597: LD_ADDR_VAR 0 8
6601: PUSH
6602: LD_VAR 0 7
6606: PUSH
6607: LD_VAR 0 9
6611: PLUS
6612: ST_TO_ADDR
// if k > array then
6613: LD_VAR 0 8
6617: PUSH
6618: LD_VAR 0 1
6622: GREATER
6623: IFFALSE 6633
// k := 1 ;
6625: LD_ADDR_VAR 0 8
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// if not k then
6633: LD_VAR 0 8
6637: NOT
6638: IFFALSE 6650
// k := array ;
6640: LD_ADDR_VAR 0 8
6644: PUSH
6645: LD_VAR 0 1
6649: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6650: LD_ADDR_VAR 0 10
6654: PUSH
6655: LD_VAR 0 10
6659: PPUSH
6660: LD_VAR 0 8
6664: PPUSH
6665: LD_VAR 0 1
6669: PUSH
6670: LD_VAR 0 7
6674: ARRAY
6675: PPUSH
6676: CALL_OW 1
6680: ST_TO_ADDR
// end ;
6681: GO 6594
6683: POP
6684: POP
// array := tmp ;
6685: LD_ADDR_VAR 0 1
6689: PUSH
6690: LD_VAR 0 10
6694: ST_TO_ADDR
// end ;
6695: GO 6576
6697: POP
6698: POP
// result := array ;
6699: LD_ADDR_VAR 0 5
6703: PUSH
6704: LD_VAR 0 1
6708: ST_TO_ADDR
// end ;
6709: LD_VAR 0 5
6713: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6714: LD_INT 0
6716: PPUSH
6717: PPUSH
// result := 0 ;
6718: LD_ADDR_VAR 0 3
6722: PUSH
6723: LD_INT 0
6725: ST_TO_ADDR
// if not array or not value in array then
6726: LD_VAR 0 1
6730: NOT
6731: IFTRUE 6746
6733: PUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_VAR 0 1
6743: IN
6744: NOT
6745: OR
6746: IFFALSE 6750
// exit ;
6748: GO 6804
// for i = 1 to array do
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: DOUBLE
6756: LD_INT 1
6758: DEC
6759: ST_TO_ADDR
6760: LD_VAR 0 1
6764: PUSH
6765: FOR_TO
6766: IFFALSE 6802
// if value = array [ i ] then
6768: LD_VAR 0 2
6772: PUSH
6773: LD_VAR 0 1
6777: PUSH
6778: LD_VAR 0 4
6782: ARRAY
6783: EQUAL
6784: IFFALSE 6800
// begin result := i ;
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: LD_VAR 0 4
6795: ST_TO_ADDR
// exit ;
6796: POP
6797: POP
6798: GO 6804
// end ;
6800: GO 6765
6802: POP
6803: POP
// end ;
6804: LD_VAR 0 3
6808: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6809: LD_INT 0
6811: PPUSH
// vc_chassis := chassis ;
6812: LD_ADDR_OWVAR 37
6816: PUSH
6817: LD_VAR 0 1
6821: ST_TO_ADDR
// vc_engine := engine ;
6822: LD_ADDR_OWVAR 39
6826: PUSH
6827: LD_VAR 0 2
6831: ST_TO_ADDR
// vc_control := control ;
6832: LD_ADDR_OWVAR 38
6836: PUSH
6837: LD_VAR 0 3
6841: ST_TO_ADDR
// vc_weapon := weapon ;
6842: LD_ADDR_OWVAR 40
6846: PUSH
6847: LD_VAR 0 4
6851: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6852: LD_ADDR_OWVAR 41
6856: PUSH
6857: LD_VAR 0 5
6861: ST_TO_ADDR
// end ;
6862: LD_VAR 0 6
6866: RET
// export function WantPlant ( unit ) ; var task ; begin
6867: LD_INT 0
6869: PPUSH
6870: PPUSH
// result := false ;
6871: LD_ADDR_VAR 0 2
6875: PUSH
6876: LD_INT 0
6878: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 437
6893: ST_TO_ADDR
// if task then
6894: LD_VAR 0 3
6898: IFFALSE 6926
// if task [ 1 ] [ 1 ] = p then
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 1
6907: ARRAY
6908: PUSH
6909: LD_INT 1
6911: ARRAY
6912: PUSH
6913: LD_STRING p
6915: EQUAL
6916: IFFALSE 6926
// result := true ;
6918: LD_ADDR_VAR 0 2
6922: PUSH
6923: LD_INT 1
6925: ST_TO_ADDR
// end ;
6926: LD_VAR 0 2
6930: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6931: LD_INT 0
6933: PPUSH
6934: PPUSH
6935: PPUSH
6936: PPUSH
// if pos < 1 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 1
6944: LESS
6945: IFFALSE 6949
// exit ;
6947: GO 7252
// if pos = 1 then
6949: LD_VAR 0 2
6953: PUSH
6954: LD_INT 1
6956: EQUAL
6957: IFFALSE 6990
// result := Replace ( arr , pos [ 1 ] , value ) else
6959: LD_ADDR_VAR 0 4
6963: PUSH
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_VAR 0 2
6973: PUSH
6974: LD_INT 1
6976: ARRAY
6977: PPUSH
6978: LD_VAR 0 3
6982: PPUSH
6983: CALL_OW 1
6987: ST_TO_ADDR
6988: GO 7252
// begin tmp := arr ;
6990: LD_ADDR_VAR 0 6
6994: PUSH
6995: LD_VAR 0 1
6999: ST_TO_ADDR
// s_arr := [ tmp ] ;
7000: LD_ADDR_VAR 0 7
7004: PUSH
7005: LD_VAR 0 6
7009: PUSH
7010: EMPTY
7011: LIST
7012: ST_TO_ADDR
// for i = 1 to pos - 1 do
7013: LD_ADDR_VAR 0 5
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_VAR 0 2
7027: PUSH
7028: LD_INT 1
7030: MINUS
7031: PUSH
7032: FOR_TO
7033: IFFALSE 7078
// begin tmp := tmp [ pos [ i ] ] ;
7035: LD_ADDR_VAR 0 6
7039: PUSH
7040: LD_VAR 0 6
7044: PUSH
7045: LD_VAR 0 2
7049: PUSH
7050: LD_VAR 0 5
7054: ARRAY
7055: ARRAY
7056: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7057: LD_ADDR_VAR 0 7
7061: PUSH
7062: LD_VAR 0 7
7066: PUSH
7067: LD_VAR 0 6
7071: PUSH
7072: EMPTY
7073: LIST
7074: ADD
7075: ST_TO_ADDR
// end ;
7076: GO 7032
7078: POP
7079: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7080: LD_ADDR_VAR 0 6
7084: PUSH
7085: LD_VAR 0 6
7089: PPUSH
7090: LD_VAR 0 2
7094: PUSH
7095: LD_VAR 0 2
7099: ARRAY
7100: PPUSH
7101: LD_VAR 0 3
7105: PPUSH
7106: CALL_OW 1
7110: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7111: LD_ADDR_VAR 0 7
7115: PUSH
7116: LD_VAR 0 7
7120: PPUSH
7121: LD_VAR 0 7
7125: PPUSH
7126: LD_VAR 0 6
7130: PPUSH
7131: CALL_OW 1
7135: ST_TO_ADDR
// for i = s_arr downto 2 do
7136: LD_ADDR_VAR 0 5
7140: PUSH
7141: DOUBLE
7142: LD_VAR 0 7
7146: INC
7147: ST_TO_ADDR
7148: LD_INT 2
7150: PUSH
7151: FOR_DOWNTO
7152: IFFALSE 7236
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7154: LD_ADDR_VAR 0 6
7158: PUSH
7159: LD_VAR 0 7
7163: PUSH
7164: LD_VAR 0 5
7168: PUSH
7169: LD_INT 1
7171: MINUS
7172: ARRAY
7173: PPUSH
7174: LD_VAR 0 2
7178: PUSH
7179: LD_VAR 0 5
7183: PUSH
7184: LD_INT 1
7186: MINUS
7187: ARRAY
7188: PPUSH
7189: LD_VAR 0 7
7193: PUSH
7194: LD_VAR 0 5
7198: ARRAY
7199: PPUSH
7200: CALL_OW 1
7204: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7205: LD_ADDR_VAR 0 7
7209: PUSH
7210: LD_VAR 0 7
7214: PPUSH
7215: LD_VAR 0 5
7219: PUSH
7220: LD_INT 1
7222: MINUS
7223: PPUSH
7224: LD_VAR 0 6
7228: PPUSH
7229: CALL_OW 1
7233: ST_TO_ADDR
// end ;
7234: GO 7151
7236: POP
7237: POP
// result := s_arr [ 1 ] ;
7238: LD_ADDR_VAR 0 4
7242: PUSH
7243: LD_VAR 0 7
7247: PUSH
7248: LD_INT 1
7250: ARRAY
7251: ST_TO_ADDR
// end ; end ;
7252: LD_VAR 0 4
7256: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7257: LD_INT 0
7259: PPUSH
7260: PPUSH
// if not list then
7261: LD_VAR 0 1
7265: NOT
7266: IFFALSE 7270
// exit ;
7268: GO 7361
// i := list [ pos1 ] ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_VAR 0 1
7279: PUSH
7280: LD_VAR 0 2
7284: ARRAY
7285: ST_TO_ADDR
// if not i then
7286: LD_VAR 0 5
7290: NOT
7291: IFFALSE 7295
// exit ;
7293: GO 7361
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7295: LD_ADDR_VAR 0 1
7299: PUSH
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_VAR 0 2
7309: PPUSH
7310: LD_VAR 0 1
7314: PUSH
7315: LD_VAR 0 3
7319: ARRAY
7320: PPUSH
7321: CALL_OW 1
7325: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_VAR 0 1
7335: PPUSH
7336: LD_VAR 0 3
7340: PPUSH
7341: LD_VAR 0 5
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// result := list ;
7351: LD_ADDR_VAR 0 4
7355: PUSH
7356: LD_VAR 0 1
7360: ST_TO_ADDR
// end ;
7361: LD_VAR 0 4
7365: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7366: LD_INT 0
7368: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7369: LD_ADDR_VAR 0 5
7373: PUSH
7374: LD_VAR 0 1
7378: PPUSH
7379: CALL_OW 250
7383: PPUSH
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 251
7393: PPUSH
7394: LD_VAR 0 2
7398: PPUSH
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 7791 0 5
7413: ST_TO_ADDR
// end ;
7414: LD_VAR 0 5
7418: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7419: LD_INT 0
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
// if not list or not unit then
7425: LD_VAR 0 2
7429: NOT
7430: IFTRUE 7439
7432: PUSH
7433: LD_VAR 0 1
7437: NOT
7438: OR
7439: IFFALSE 7443
// exit ;
7441: GO 7786
// result := [ ] ;
7443: LD_ADDR_VAR 0 5
7447: PUSH
7448: EMPTY
7449: ST_TO_ADDR
// for i in list do
7450: LD_ADDR_VAR 0 6
7454: PUSH
7455: LD_VAR 0 2
7459: PUSH
7460: FOR_IN
7461: IFFALSE 7679
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: LD_VAR 0 6
7477: PUSH
7478: LD_INT 1
7480: ARRAY
7481: PPUSH
7482: LD_VAR 0 6
7486: PUSH
7487: LD_INT 2
7489: ARRAY
7490: PPUSH
7491: CALL_OW 297
7495: ST_TO_ADDR
// if not Count ( result ) then
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL 4013 0 1
7505: NOT
7506: IFFALSE 7539
// begin result := Join ( result , [ i , tmp ] ) ;
7508: LD_ADDR_VAR 0 5
7512: PUSH
7513: LD_VAR 0 5
7517: PPUSH
7518: LD_VAR 0 6
7522: PUSH
7523: LD_VAR 0 8
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PPUSH
7532: CALL 39989 0 2
7536: ST_TO_ADDR
// continue ;
7537: GO 7460
// end ; if result [ result ] [ 2 ] <= tmp then
7539: LD_VAR 0 5
7543: PUSH
7544: LD_VAR 0 5
7548: ARRAY
7549: PUSH
7550: LD_INT 2
7552: ARRAY
7553: PUSH
7554: LD_VAR 0 8
7558: LESSEQUAL
7559: IFFALSE 7592
// result := Join ( result , [ i , tmp ] ) else
7561: LD_ADDR_VAR 0 5
7565: PUSH
7566: LD_VAR 0 5
7570: PPUSH
7571: LD_VAR 0 6
7575: PUSH
7576: LD_VAR 0 8
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL 39989 0 2
7589: ST_TO_ADDR
7590: GO 7677
// begin for j := 1 to Count ( result ) do
7592: LD_ADDR_VAR 0 7
7596: PUSH
7597: DOUBLE
7598: LD_INT 1
7600: DEC
7601: ST_TO_ADDR
7602: LD_VAR 0 5
7606: PPUSH
7607: CALL 4013 0 1
7611: PUSH
7612: FOR_TO
7613: IFFALSE 7675
// begin if tmp < result [ j ] [ 2 ] then
7615: LD_VAR 0 8
7619: PUSH
7620: LD_VAR 0 5
7624: PUSH
7625: LD_VAR 0 7
7629: ARRAY
7630: PUSH
7631: LD_INT 2
7633: ARRAY
7634: LESS
7635: IFFALSE 7673
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7637: LD_ADDR_VAR 0 5
7641: PUSH
7642: LD_VAR 0 5
7646: PPUSH
7647: LD_VAR 0 7
7651: PPUSH
7652: LD_VAR 0 6
7656: PUSH
7657: LD_VAR 0 8
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 2
7670: ST_TO_ADDR
// break ;
7671: GO 7675
// end ; end ;
7673: GO 7612
7675: POP
7676: POP
// end ; end ;
7677: GO 7460
7679: POP
7680: POP
// if result and not asc then
7681: LD_VAR 0 5
7685: IFFALSE 7694
7687: PUSH
7688: LD_VAR 0 3
7692: NOT
7693: AND
7694: IFFALSE 7711
// result := ReverseArray ( result ) ;
7696: LD_ADDR_VAR 0 5
7700: PUSH
7701: LD_VAR 0 5
7705: PPUSH
7706: CALL 35069 0 1
7710: ST_TO_ADDR
// tmp := [ ] ;
7711: LD_ADDR_VAR 0 8
7715: PUSH
7716: EMPTY
7717: ST_TO_ADDR
// if mode then
7718: LD_VAR 0 4
7722: IFFALSE 7786
// begin for i := 1 to result do
7724: LD_ADDR_VAR 0 6
7728: PUSH
7729: DOUBLE
7730: LD_INT 1
7732: DEC
7733: ST_TO_ADDR
7734: LD_VAR 0 5
7738: PUSH
7739: FOR_TO
7740: IFFALSE 7774
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7742: LD_ADDR_VAR 0 8
7746: PUSH
7747: LD_VAR 0 8
7751: PPUSH
7752: LD_VAR 0 5
7756: PUSH
7757: LD_VAR 0 6
7761: ARRAY
7762: PUSH
7763: LD_INT 1
7765: ARRAY
7766: PPUSH
7767: CALL 39989 0 2
7771: ST_TO_ADDR
7772: GO 7739
7774: POP
7775: POP
// result := tmp ;
7776: LD_ADDR_VAR 0 5
7780: PUSH
7781: LD_VAR 0 8
7785: ST_TO_ADDR
// end ; end ;
7786: LD_VAR 0 5
7790: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7791: LD_INT 0
7793: PPUSH
7794: PPUSH
7795: PPUSH
7796: PPUSH
// if not list then
7797: LD_VAR 0 3
7801: NOT
7802: IFFALSE 7806
// exit ;
7804: GO 8196
// result := [ ] ;
7806: LD_ADDR_VAR 0 6
7810: PUSH
7811: EMPTY
7812: ST_TO_ADDR
// for i in list do
7813: LD_ADDR_VAR 0 7
7817: PUSH
7818: LD_VAR 0 3
7822: PUSH
7823: FOR_IN
7824: IFFALSE 8026
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_VAR 0 7
7835: PPUSH
7836: LD_VAR 0 1
7840: PPUSH
7841: LD_VAR 0 2
7845: PPUSH
7846: CALL_OW 297
7850: ST_TO_ADDR
// if not result then
7851: LD_VAR 0 6
7855: NOT
7856: IFFALSE 7882
// result := [ [ i , tmp ] ] else
7858: LD_ADDR_VAR 0 6
7862: PUSH
7863: LD_VAR 0 7
7867: PUSH
7868: LD_VAR 0 9
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: ST_TO_ADDR
7880: GO 8024
// begin if result [ result ] [ 2 ] <= tmp then
7882: LD_VAR 0 6
7886: PUSH
7887: LD_VAR 0 6
7891: ARRAY
7892: PUSH
7893: LD_INT 2
7895: ARRAY
7896: PUSH
7897: LD_VAR 0 9
7901: LESSEQUAL
7902: IFFALSE 7944
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7904: LD_ADDR_VAR 0 6
7908: PUSH
7909: LD_VAR 0 6
7913: PPUSH
7914: LD_VAR 0 6
7918: PUSH
7919: LD_INT 1
7921: PLUS
7922: PPUSH
7923: LD_VAR 0 7
7927: PUSH
7928: LD_VAR 0 9
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 2
7941: ST_TO_ADDR
7942: GO 8024
// for j := 1 to result do
7944: LD_ADDR_VAR 0 8
7948: PUSH
7949: DOUBLE
7950: LD_INT 1
7952: DEC
7953: ST_TO_ADDR
7954: LD_VAR 0 6
7958: PUSH
7959: FOR_TO
7960: IFFALSE 8022
// begin if tmp < result [ j ] [ 2 ] then
7962: LD_VAR 0 9
7966: PUSH
7967: LD_VAR 0 6
7971: PUSH
7972: LD_VAR 0 8
7976: ARRAY
7977: PUSH
7978: LD_INT 2
7980: ARRAY
7981: LESS
7982: IFFALSE 8020
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_VAR 0 6
7993: PPUSH
7994: LD_VAR 0 8
7998: PPUSH
7999: LD_VAR 0 7
8003: PUSH
8004: LD_VAR 0 9
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 2
8017: ST_TO_ADDR
// break ;
8018: GO 8022
// end ; end ;
8020: GO 7959
8022: POP
8023: POP
// end ; end ;
8024: GO 7823
8026: POP
8027: POP
// if result and not asc then
8028: LD_VAR 0 6
8032: IFFALSE 8041
8034: PUSH
8035: LD_VAR 0 4
8039: NOT
8040: AND
8041: IFFALSE 8116
// begin tmp := result ;
8043: LD_ADDR_VAR 0 9
8047: PUSH
8048: LD_VAR 0 6
8052: ST_TO_ADDR
// for i = tmp downto 1 do
8053: LD_ADDR_VAR 0 7
8057: PUSH
8058: DOUBLE
8059: LD_VAR 0 9
8063: INC
8064: ST_TO_ADDR
8065: LD_INT 1
8067: PUSH
8068: FOR_DOWNTO
8069: IFFALSE 8114
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8071: LD_ADDR_VAR 0 6
8075: PUSH
8076: LD_VAR 0 6
8080: PPUSH
8081: LD_VAR 0 9
8085: PUSH
8086: LD_VAR 0 7
8090: MINUS
8091: PUSH
8092: LD_INT 1
8094: PLUS
8095: PPUSH
8096: LD_VAR 0 9
8100: PUSH
8101: LD_VAR 0 7
8105: ARRAY
8106: PPUSH
8107: CALL_OW 1
8111: ST_TO_ADDR
8112: GO 8068
8114: POP
8115: POP
// end ; tmp := [ ] ;
8116: LD_ADDR_VAR 0 9
8120: PUSH
8121: EMPTY
8122: ST_TO_ADDR
// if mode then
8123: LD_VAR 0 5
8127: IFFALSE 8196
// begin for i = 1 to result do
8129: LD_ADDR_VAR 0 7
8133: PUSH
8134: DOUBLE
8135: LD_INT 1
8137: DEC
8138: ST_TO_ADDR
8139: LD_VAR 0 6
8143: PUSH
8144: FOR_TO
8145: IFFALSE 8184
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8147: LD_ADDR_VAR 0 9
8151: PUSH
8152: LD_VAR 0 9
8156: PPUSH
8157: LD_VAR 0 7
8161: PPUSH
8162: LD_VAR 0 6
8166: PUSH
8167: LD_VAR 0 7
8171: ARRAY
8172: PUSH
8173: LD_INT 1
8175: ARRAY
8176: PPUSH
8177: CALL_OW 1
8181: ST_TO_ADDR
8182: GO 8144
8184: POP
8185: POP
// result := tmp ;
8186: LD_ADDR_VAR 0 6
8190: PUSH
8191: LD_VAR 0 9
8195: ST_TO_ADDR
// end ; end ;
8196: LD_VAR 0 6
8200: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8201: LD_INT 0
8203: PPUSH
8204: PPUSH
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8209: LD_ADDR_VAR 0 5
8213: PUSH
8214: LD_INT 0
8216: PUSH
8217: LD_INT 0
8219: PUSH
8220: LD_INT 0
8222: PUSH
8223: EMPTY
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// if not x or not y then
8231: LD_VAR 0 2
8235: NOT
8236: IFTRUE 8245
8238: PUSH
8239: LD_VAR 0 3
8243: NOT
8244: OR
8245: IFFALSE 8249
// exit ;
8247: GO 9905
// if not range then
8249: LD_VAR 0 4
8253: NOT
8254: IFFALSE 8264
// range := 10 ;
8256: LD_ADDR_VAR 0 4
8260: PUSH
8261: LD_INT 10
8263: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8264: LD_ADDR_VAR 0 8
8268: PUSH
8269: LD_INT 81
8271: PUSH
8272: LD_VAR 0 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 92
8283: PUSH
8284: LD_VAR 0 2
8288: PUSH
8289: LD_VAR 0 3
8293: PUSH
8294: LD_VAR 0 4
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 3
8307: PUSH
8308: LD_INT 21
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: PPUSH
8327: CALL_OW 69
8331: ST_TO_ADDR
// if not tmp then
8332: LD_VAR 0 8
8336: NOT
8337: IFFALSE 8341
// exit ;
8339: GO 9905
// for i in tmp do
8341: LD_ADDR_VAR 0 6
8345: PUSH
8346: LD_VAR 0 8
8350: PUSH
8351: FOR_IN
8352: IFFALSE 9880
// begin points := [ 0 , 0 , 0 ] ;
8354: LD_ADDR_VAR 0 9
8358: PUSH
8359: LD_INT 0
8361: PUSH
8362: LD_INT 0
8364: PUSH
8365: LD_INT 0
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: ST_TO_ADDR
// bpoints := 1 ;
8373: LD_ADDR_VAR 0 10
8377: PUSH
8378: LD_INT 1
8380: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8381: LD_VAR 0 6
8385: PPUSH
8386: CALL_OW 247
8390: PUSH
8391: LD_INT 1
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8981
8399: POP
// begin if GetClass ( i ) = 1 then
8400: LD_VAR 0 6
8404: PPUSH
8405: CALL_OW 257
8409: PUSH
8410: LD_INT 1
8412: EQUAL
8413: IFFALSE 8434
// points := [ 10 , 5 , 3 ] ;
8415: LD_ADDR_VAR 0 9
8419: PUSH
8420: LD_INT 10
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: LD_INT 3
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8434: LD_VAR 0 6
8438: PPUSH
8439: CALL_OW 257
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: LD_INT 3
8449: PUSH
8450: LD_INT 4
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: IN
8458: IFFALSE 8479
// points := [ 3 , 2 , 1 ] ;
8460: LD_ADDR_VAR 0 9
8464: PUSH
8465: LD_INT 3
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8479: LD_VAR 0 6
8483: PPUSH
8484: CALL_OW 257
8488: PUSH
8489: LD_INT 5
8491: EQUAL
8492: IFFALSE 8513
// points := [ 130 , 5 , 2 ] ;
8494: LD_ADDR_VAR 0 9
8498: PUSH
8499: LD_INT 130
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: LIST
8512: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8513: LD_VAR 0 6
8517: PPUSH
8518: CALL_OW 257
8522: PUSH
8523: LD_INT 8
8525: EQUAL
8526: IFFALSE 8547
// points := [ 35 , 35 , 30 ] ;
8528: LD_ADDR_VAR 0 9
8532: PUSH
8533: LD_INT 35
8535: PUSH
8536: LD_INT 35
8538: PUSH
8539: LD_INT 30
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8547: LD_VAR 0 6
8551: PPUSH
8552: CALL_OW 257
8556: PUSH
8557: LD_INT 9
8559: EQUAL
8560: IFFALSE 8581
// points := [ 20 , 55 , 40 ] ;
8562: LD_ADDR_VAR 0 9
8566: PUSH
8567: LD_INT 20
8569: PUSH
8570: LD_INT 55
8572: PUSH
8573: LD_INT 40
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8581: LD_VAR 0 6
8585: PPUSH
8586: CALL_OW 257
8590: PUSH
8591: LD_INT 12
8593: PUSH
8594: LD_INT 16
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: IN
8601: IFFALSE 8622
// points := [ 5 , 3 , 2 ] ;
8603: LD_ADDR_VAR 0 9
8607: PUSH
8608: LD_INT 5
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8622: LD_VAR 0 6
8626: PPUSH
8627: CALL_OW 257
8631: PUSH
8632: LD_INT 17
8634: EQUAL
8635: IFFALSE 8656
// points := [ 100 , 50 , 75 ] ;
8637: LD_ADDR_VAR 0 9
8641: PUSH
8642: LD_INT 100
8644: PUSH
8645: LD_INT 50
8647: PUSH
8648: LD_INT 75
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8656: LD_VAR 0 6
8660: PPUSH
8661: CALL_OW 257
8665: PUSH
8666: LD_INT 15
8668: EQUAL
8669: IFFALSE 8690
// points := [ 10 , 5 , 3 ] ;
8671: LD_ADDR_VAR 0 9
8675: PUSH
8676: LD_INT 10
8678: PUSH
8679: LD_INT 5
8681: PUSH
8682: LD_INT 3
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8690: LD_VAR 0 6
8694: PPUSH
8695: CALL_OW 257
8699: PUSH
8700: LD_INT 14
8702: EQUAL
8703: IFFALSE 8724
// points := [ 10 , 0 , 0 ] ;
8705: LD_ADDR_VAR 0 9
8709: PUSH
8710: LD_INT 10
8712: PUSH
8713: LD_INT 0
8715: PUSH
8716: LD_INT 0
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8724: LD_VAR 0 6
8728: PPUSH
8729: CALL_OW 257
8733: PUSH
8734: LD_INT 11
8736: EQUAL
8737: IFFALSE 8758
// points := [ 30 , 10 , 5 ] ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_INT 30
8746: PUSH
8747: LD_INT 10
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 5
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: EQUAL
8774: IFFALSE 8791
// bpoints := bpoints * 1.8 ;
8776: LD_ADDR_VAR 0 10
8780: PUSH
8781: LD_VAR 0 10
8785: PUSH
8786: LD_REAL  1.80000000000000E+0000
8789: MUL
8790: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8791: LD_VAR 0 6
8795: PPUSH
8796: CALL_OW 257
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 2
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: LD_INT 4
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: IN
8819: IFFALSE 8839
8821: PUSH
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 51
8829: PPUSH
8830: CALL_OW 321
8834: PUSH
8835: LD_INT 2
8837: EQUAL
8838: AND
8839: IFFALSE 8856
// bpoints := bpoints * 1.2 ;
8841: LD_ADDR_VAR 0 10
8845: PUSH
8846: LD_VAR 0 10
8850: PUSH
8851: LD_REAL  1.20000000000000E+0000
8854: MUL
8855: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8856: LD_VAR 0 6
8860: PPUSH
8861: CALL_OW 257
8865: PUSH
8866: LD_INT 5
8868: PUSH
8869: LD_INT 7
8871: PUSH
8872: LD_INT 9
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: IN
8880: IFFALSE 8900
8882: PUSH
8883: LD_VAR 0 1
8887: PPUSH
8888: LD_INT 52
8890: PPUSH
8891: CALL_OW 321
8895: PUSH
8896: LD_INT 2
8898: EQUAL
8899: AND
8900: IFFALSE 8917
// bpoints := bpoints * 1.5 ;
8902: LD_ADDR_VAR 0 10
8906: PUSH
8907: LD_VAR 0 10
8911: PUSH
8912: LD_REAL  1.50000000000000E+0000
8915: MUL
8916: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8917: LD_VAR 0 1
8921: PPUSH
8922: LD_INT 66
8924: PPUSH
8925: CALL_OW 321
8929: PUSH
8930: LD_INT 2
8932: EQUAL
8933: IFFALSE 8950
// bpoints := bpoints * 1.1 ;
8935: LD_ADDR_VAR 0 10
8939: PUSH
8940: LD_VAR 0 10
8944: PUSH
8945: LD_REAL  1.10000000000000E+0000
8948: MUL
8949: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8950: LD_ADDR_VAR 0 10
8954: PUSH
8955: LD_VAR 0 10
8959: PUSH
8960: LD_VAR 0 6
8964: PPUSH
8965: LD_INT 1
8967: PPUSH
8968: CALL_OW 259
8972: PUSH
8973: LD_REAL  1.15000000000000E+0000
8976: MUL
8977: MUL
8978: ST_TO_ADDR
// end ; unit_vehicle :
8979: GO 9809
8981: LD_INT 2
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9797
8989: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8990: LD_VAR 0 6
8994: PPUSH
8995: CALL_OW 264
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 42
9005: PUSH
9006: LD_INT 24
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: IN
9014: IFFALSE 9035
// points := [ 25 , 5 , 3 ] ;
9016: LD_ADDR_VAR 0 9
9020: PUSH
9021: LD_INT 25
9023: PUSH
9024: LD_INT 5
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9035: LD_VAR 0 6
9039: PPUSH
9040: CALL_OW 264
9044: PUSH
9045: LD_INT 4
9047: PUSH
9048: LD_INT 43
9050: PUSH
9051: LD_INT 25
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: IN
9059: IFFALSE 9080
// points := [ 40 , 15 , 5 ] ;
9061: LD_ADDR_VAR 0 9
9065: PUSH
9066: LD_INT 40
9068: PUSH
9069: LD_INT 15
9071: PUSH
9072: LD_INT 5
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9080: LD_VAR 0 6
9084: PPUSH
9085: CALL_OW 264
9089: PUSH
9090: LD_INT 3
9092: PUSH
9093: LD_INT 23
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: IN
9100: IFFALSE 9121
// points := [ 7 , 25 , 8 ] ;
9102: LD_ADDR_VAR 0 9
9106: PUSH
9107: LD_INT 7
9109: PUSH
9110: LD_INT 25
9112: PUSH
9113: LD_INT 8
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9121: LD_VAR 0 6
9125: PPUSH
9126: CALL_OW 264
9130: PUSH
9131: LD_INT 5
9133: PUSH
9134: LD_INT 27
9136: PUSH
9137: LD_INT 44
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: IN
9145: IFFALSE 9166
// points := [ 14 , 50 , 16 ] ;
9147: LD_ADDR_VAR 0 9
9151: PUSH
9152: LD_INT 14
9154: PUSH
9155: LD_INT 50
9157: PUSH
9158: LD_INT 16
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9166: LD_VAR 0 6
9170: PPUSH
9171: CALL_OW 264
9175: PUSH
9176: LD_INT 6
9178: PUSH
9179: LD_INT 46
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: IN
9186: IFFALSE 9207
// points := [ 32 , 120 , 70 ] ;
9188: LD_ADDR_VAR 0 9
9192: PUSH
9193: LD_INT 32
9195: PUSH
9196: LD_INT 120
9198: PUSH
9199: LD_INT 70
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 264
9216: PUSH
9217: LD_INT 7
9219: PUSH
9220: LD_INT 28
9222: PUSH
9223: LD_INT 45
9225: PUSH
9226: LD_INT 92
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: IN
9235: IFFALSE 9256
// points := [ 35 , 20 , 45 ] ;
9237: LD_ADDR_VAR 0 9
9241: PUSH
9242: LD_INT 35
9244: PUSH
9245: LD_INT 20
9247: PUSH
9248: LD_INT 45
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9256: LD_VAR 0 6
9260: PPUSH
9261: CALL_OW 264
9265: PUSH
9266: LD_INT 47
9268: PUSH
9269: EMPTY
9270: LIST
9271: IN
9272: IFFALSE 9293
// points := [ 67 , 45 , 75 ] ;
9274: LD_ADDR_VAR 0 9
9278: PUSH
9279: LD_INT 67
9281: PUSH
9282: LD_INT 45
9284: PUSH
9285: LD_INT 75
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9293: LD_VAR 0 6
9297: PPUSH
9298: CALL_OW 264
9302: PUSH
9303: LD_INT 26
9305: PUSH
9306: EMPTY
9307: LIST
9308: IN
9309: IFFALSE 9330
// points := [ 120 , 30 , 80 ] ;
9311: LD_ADDR_VAR 0 9
9315: PUSH
9316: LD_INT 120
9318: PUSH
9319: LD_INT 30
9321: PUSH
9322: LD_INT 80
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9330: LD_VAR 0 6
9334: PPUSH
9335: CALL_OW 264
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: EMPTY
9344: LIST
9345: IN
9346: IFFALSE 9367
// points := [ 40 , 1 , 1 ] ;
9348: LD_ADDR_VAR 0 9
9352: PUSH
9353: LD_INT 40
9355: PUSH
9356: LD_INT 1
9358: PUSH
9359: LD_INT 1
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9367: LD_VAR 0 6
9371: PPUSH
9372: CALL_OW 264
9376: PUSH
9377: LD_INT 29
9379: PUSH
9380: EMPTY
9381: LIST
9382: IN
9383: IFFALSE 9404
// points := [ 70 , 200 , 400 ] ;
9385: LD_ADDR_VAR 0 9
9389: PUSH
9390: LD_INT 70
9392: PUSH
9393: LD_INT 200
9395: PUSH
9396: LD_INT 400
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9404: LD_VAR 0 6
9408: PPUSH
9409: CALL_OW 264
9413: PUSH
9414: LD_INT 14
9416: PUSH
9417: LD_INT 53
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: IN
9424: IFFALSE 9445
// points := [ 40 , 10 , 20 ] ;
9426: LD_ADDR_VAR 0 9
9430: PUSH
9431: LD_INT 40
9433: PUSH
9434: LD_INT 10
9436: PUSH
9437: LD_INT 20
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9445: LD_VAR 0 6
9449: PPUSH
9450: CALL_OW 264
9454: PUSH
9455: LD_INT 9
9457: PUSH
9458: EMPTY
9459: LIST
9460: IN
9461: IFFALSE 9482
// points := [ 5 , 70 , 20 ] ;
9463: LD_ADDR_VAR 0 9
9467: PUSH
9468: LD_INT 5
9470: PUSH
9471: LD_INT 70
9473: PUSH
9474: LD_INT 20
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9482: LD_VAR 0 6
9486: PPUSH
9487: CALL_OW 264
9491: PUSH
9492: LD_INT 10
9494: PUSH
9495: EMPTY
9496: LIST
9497: IN
9498: IFFALSE 9519
// points := [ 35 , 110 , 70 ] ;
9500: LD_ADDR_VAR 0 9
9504: PUSH
9505: LD_INT 35
9507: PUSH
9508: LD_INT 110
9510: PUSH
9511: LD_INT 70
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9519: LD_VAR 0 6
9523: PPUSH
9524: CALL_OW 265
9528: PUSH
9529: LD_INT 25
9531: EQUAL
9532: IFFALSE 9553
// points := [ 80 , 65 , 100 ] ;
9534: LD_ADDR_VAR 0 9
9538: PUSH
9539: LD_INT 80
9541: PUSH
9542: LD_INT 65
9544: PUSH
9545: LD_INT 100
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 263
9562: PUSH
9563: LD_INT 1
9565: EQUAL
9566: IFFALSE 9601
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9568: LD_ADDR_VAR 0 10
9572: PUSH
9573: LD_VAR 0 10
9577: PUSH
9578: LD_VAR 0 6
9582: PPUSH
9583: CALL_OW 311
9587: PPUSH
9588: LD_INT 3
9590: PPUSH
9591: CALL_OW 259
9595: PUSH
9596: LD_INT 4
9598: MUL
9599: MUL
9600: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9601: LD_VAR 0 6
9605: PPUSH
9606: CALL_OW 263
9610: PUSH
9611: LD_INT 2
9613: EQUAL
9614: IFFALSE 9665
// begin j := IsControledBy ( i ) ;
9616: LD_ADDR_VAR 0 7
9620: PUSH
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 312
9630: ST_TO_ADDR
// if j then
9631: LD_VAR 0 7
9635: IFFALSE 9665
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9637: LD_ADDR_VAR 0 10
9641: PUSH
9642: LD_VAR 0 10
9646: PUSH
9647: LD_VAR 0 7
9651: PPUSH
9652: LD_INT 3
9654: PPUSH
9655: CALL_OW 259
9659: PUSH
9660: LD_INT 3
9662: MUL
9663: MUL
9664: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9665: LD_VAR 0 6
9669: PPUSH
9670: CALL_OW 264
9674: PUSH
9675: LD_INT 5
9677: PUSH
9678: LD_INT 6
9680: PUSH
9681: LD_INT 46
9683: PUSH
9684: LD_INT 44
9686: PUSH
9687: LD_INT 47
9689: PUSH
9690: LD_INT 45
9692: PUSH
9693: LD_INT 28
9695: PUSH
9696: LD_INT 7
9698: PUSH
9699: LD_INT 27
9701: PUSH
9702: LD_INT 29
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: IN
9717: IFFALSE 9737
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: LD_INT 52
9727: PPUSH
9728: CALL_OW 321
9732: PUSH
9733: LD_INT 2
9735: EQUAL
9736: AND
9737: IFFALSE 9754
// bpoints := bpoints * 1.2 ;
9739: LD_ADDR_VAR 0 10
9743: PUSH
9744: LD_VAR 0 10
9748: PUSH
9749: LD_REAL  1.20000000000000E+0000
9752: MUL
9753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9754: LD_VAR 0 6
9758: PPUSH
9759: CALL_OW 264
9763: PUSH
9764: LD_INT 6
9766: PUSH
9767: LD_INT 46
9769: PUSH
9770: LD_INT 47
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: IN
9778: IFFALSE 9795
// bpoints := bpoints * 1.2 ;
9780: LD_ADDR_VAR 0 10
9784: PUSH
9785: LD_VAR 0 10
9789: PUSH
9790: LD_REAL  1.20000000000000E+0000
9793: MUL
9794: ST_TO_ADDR
// end ; unit_building :
9795: GO 9809
9797: LD_INT 3
9799: DOUBLE
9800: EQUAL
9801: IFTRUE 9805
9803: GO 9808
9805: POP
// ; end ;
9806: GO 9809
9808: POP
// for j = 1 to 3 do
9809: LD_ADDR_VAR 0 7
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_INT 3
9821: PUSH
9822: FOR_TO
9823: IFFALSE 9876
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9825: LD_ADDR_VAR 0 5
9829: PUSH
9830: LD_VAR 0 5
9834: PPUSH
9835: LD_VAR 0 7
9839: PPUSH
9840: LD_VAR 0 5
9844: PUSH
9845: LD_VAR 0 7
9849: ARRAY
9850: PUSH
9851: LD_VAR 0 9
9855: PUSH
9856: LD_VAR 0 7
9860: ARRAY
9861: PUSH
9862: LD_VAR 0 10
9866: MUL
9867: PLUS
9868: PPUSH
9869: CALL_OW 1
9873: ST_TO_ADDR
9874: GO 9822
9876: POP
9877: POP
// end ;
9878: GO 8351
9880: POP
9881: POP
// result := Replace ( result , 4 , tmp ) ;
9882: LD_ADDR_VAR 0 5
9886: PUSH
9887: LD_VAR 0 5
9891: PPUSH
9892: LD_INT 4
9894: PPUSH
9895: LD_VAR 0 8
9899: PPUSH
9900: CALL_OW 1
9904: ST_TO_ADDR
// end ;
9905: LD_VAR 0 5
9909: RET
// export function DangerAtRange ( unit , range ) ; begin
9910: LD_INT 0
9912: PPUSH
// if not unit then
9913: LD_VAR 0 1
9917: NOT
9918: IFFALSE 9922
// exit ;
9920: GO 9967
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9922: LD_ADDR_VAR 0 3
9926: PUSH
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 255
9936: PPUSH
9937: LD_VAR 0 1
9941: PPUSH
9942: CALL_OW 250
9946: PPUSH
9947: LD_VAR 0 1
9951: PPUSH
9952: CALL_OW 251
9956: PPUSH
9957: LD_VAR 0 2
9961: PPUSH
9962: CALL 8201 0 4
9966: ST_TO_ADDR
// end ;
9967: LD_VAR 0 3
9971: RET
// export function DangerInArea ( side , area ) ; begin
9972: LD_INT 0
9974: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9975: LD_ADDR_VAR 0 3
9979: PUSH
9980: LD_VAR 0 2
9984: PPUSH
9985: LD_INT 81
9987: PUSH
9988: LD_VAR 0 1
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PPUSH
9997: CALL_OW 70
10001: ST_TO_ADDR
// end ;
10002: LD_VAR 0 3
10006: RET
// export function IsExtension ( b ) ; begin
10007: LD_INT 0
10009: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10010: LD_ADDR_VAR 0 2
10014: PUSH
10015: LD_VAR 0 1
10019: PUSH
10020: LD_INT 23
10022: PUSH
10023: LD_INT 20
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_INT 17
10031: PUSH
10032: LD_INT 24
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 19
10040: PUSH
10041: LD_INT 16
10043: PUSH
10044: LD_INT 25
10046: PUSH
10047: LD_INT 18
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: IN
10062: ST_TO_ADDR
// end ;
10063: LD_VAR 0 2
10067: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
10072: PPUSH
// result := [ ] ;
10073: LD_ADDR_VAR 0 4
10077: PUSH
10078: EMPTY
10079: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10080: LD_ADDR_VAR 0 5
10084: PUSH
10085: LD_VAR 0 2
10089: PPUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 3
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PPUSH
10100: CALL_OW 70
10104: ST_TO_ADDR
// if not tmp then
10105: LD_VAR 0 5
10109: NOT
10110: IFFALSE 10114
// exit ;
10112: GO 10178
// if checkLink then
10114: LD_VAR 0 3
10118: IFFALSE 10168
// begin for i in tmp do
10120: LD_ADDR_VAR 0 6
10124: PUSH
10125: LD_VAR 0 5
10129: PUSH
10130: FOR_IN
10131: IFFALSE 10166
// if GetBase ( i ) <> base then
10133: LD_VAR 0 6
10137: PPUSH
10138: CALL_OW 274
10142: PUSH
10143: LD_VAR 0 1
10147: NONEQUAL
10148: IFFALSE 10164
// ComLinkToBase ( base , i ) ;
10150: LD_VAR 0 1
10154: PPUSH
10155: LD_VAR 0 6
10159: PPUSH
10160: CALL_OW 169
10164: GO 10130
10166: POP
10167: POP
// end ; result := tmp ;
10168: LD_ADDR_VAR 0 4
10172: PUSH
10173: LD_VAR 0 5
10177: ST_TO_ADDR
// end ;
10178: LD_VAR 0 4
10182: RET
// export function ComComplete ( units , b ) ; var i ; begin
10183: LD_INT 0
10185: PPUSH
10186: PPUSH
// if not units then
10187: LD_VAR 0 1
10191: NOT
10192: IFFALSE 10196
// exit ;
10194: GO 10286
// for i in units do
10196: LD_ADDR_VAR 0 4
10200: PUSH
10201: LD_VAR 0 1
10205: PUSH
10206: FOR_IN
10207: IFFALSE 10284
// if BuildingStatus ( b ) = bs_build then
10209: LD_VAR 0 2
10213: PPUSH
10214: CALL_OW 461
10218: PUSH
10219: LD_INT 1
10221: EQUAL
10222: IFFALSE 10282
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10224: LD_VAR 0 4
10228: PPUSH
10229: LD_STRING h
10231: PUSH
10232: LD_VAR 0 2
10236: PPUSH
10237: CALL_OW 250
10241: PUSH
10242: LD_VAR 0 2
10246: PPUSH
10247: CALL_OW 251
10251: PUSH
10252: LD_VAR 0 2
10256: PUSH
10257: LD_INT 0
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: PPUSH
10278: CALL_OW 446
10282: GO 10206
10284: POP
10285: POP
// end ;
10286: LD_VAR 0 3
10290: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10291: LD_INT 0
10293: PPUSH
10294: PPUSH
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10299: LD_VAR 0 1
10303: NOT
10304: IFTRUE 10321
10306: PUSH
10307: LD_VAR 0 1
10311: PPUSH
10312: CALL_OW 263
10316: PUSH
10317: LD_INT 2
10319: NONEQUAL
10320: OR
10321: IFFALSE 10325
// exit ;
10323: GO 10641
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10325: LD_ADDR_VAR 0 6
10329: PUSH
10330: LD_INT 22
10332: PUSH
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 255
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 30
10352: PUSH
10353: LD_INT 36
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 34
10362: PUSH
10363: LD_INT 31
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: ST_TO_ADDR
// if not tmp then
10384: LD_VAR 0 6
10388: NOT
10389: IFFALSE 10393
// exit ;
10391: GO 10641
// result := [ ] ;
10393: LD_ADDR_VAR 0 2
10397: PUSH
10398: EMPTY
10399: ST_TO_ADDR
// for i in tmp do
10400: LD_ADDR_VAR 0 3
10404: PUSH
10405: LD_VAR 0 6
10409: PUSH
10410: FOR_IN
10411: IFFALSE 10482
// begin t := UnitsInside ( i ) ;
10413: LD_ADDR_VAR 0 4
10417: PUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: CALL_OW 313
10427: ST_TO_ADDR
// if t then
10428: LD_VAR 0 4
10432: IFFALSE 10480
// for j in t do
10434: LD_ADDR_VAR 0 7
10438: PUSH
10439: LD_VAR 0 4
10443: PUSH
10444: FOR_IN
10445: IFFALSE 10478
// result := Replace ( result , result + 1 , j ) ;
10447: LD_ADDR_VAR 0 2
10451: PUSH
10452: LD_VAR 0 2
10456: PPUSH
10457: LD_VAR 0 2
10461: PUSH
10462: LD_INT 1
10464: PLUS
10465: PPUSH
10466: LD_VAR 0 7
10470: PPUSH
10471: CALL_OW 1
10475: ST_TO_ADDR
10476: GO 10444
10478: POP
10479: POP
// end ;
10480: GO 10410
10482: POP
10483: POP
// if not result then
10484: LD_VAR 0 2
10488: NOT
10489: IFFALSE 10493
// exit ;
10491: GO 10641
// mech := result [ 1 ] ;
10493: LD_ADDR_VAR 0 5
10497: PUSH
10498: LD_VAR 0 2
10502: PUSH
10503: LD_INT 1
10505: ARRAY
10506: ST_TO_ADDR
// if result > 1 then
10507: LD_VAR 0 2
10511: PUSH
10512: LD_INT 1
10514: GREATER
10515: IFFALSE 10627
// begin for i = 2 to result do
10517: LD_ADDR_VAR 0 3
10521: PUSH
10522: DOUBLE
10523: LD_INT 2
10525: DEC
10526: ST_TO_ADDR
10527: LD_VAR 0 2
10531: PUSH
10532: FOR_TO
10533: IFFALSE 10625
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_VAR 0 2
10544: PUSH
10545: LD_VAR 0 3
10549: ARRAY
10550: PPUSH
10551: LD_INT 3
10553: PPUSH
10554: CALL_OW 259
10558: PUSH
10559: LD_VAR 0 2
10563: PUSH
10564: LD_VAR 0 3
10568: ARRAY
10569: PPUSH
10570: CALL_OW 432
10574: MINUS
10575: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10576: LD_VAR 0 4
10580: PUSH
10581: LD_VAR 0 5
10585: PPUSH
10586: LD_INT 3
10588: PPUSH
10589: CALL_OW 259
10593: PUSH
10594: LD_VAR 0 5
10598: PPUSH
10599: CALL_OW 432
10603: MINUS
10604: GREATEREQUAL
10605: IFFALSE 10623
// mech := result [ i ] ;
10607: LD_ADDR_VAR 0 5
10611: PUSH
10612: LD_VAR 0 2
10616: PUSH
10617: LD_VAR 0 3
10621: ARRAY
10622: ST_TO_ADDR
// end ;
10623: GO 10532
10625: POP
10626: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10627: LD_VAR 0 1
10631: PPUSH
10632: LD_VAR 0 5
10636: PPUSH
10637: CALL_OW 135
// end ;
10641: LD_VAR 0 2
10645: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10646: LD_INT 0
10648: PPUSH
10649: PPUSH
10650: PPUSH
10651: PPUSH
10652: PPUSH
10653: PPUSH
10654: PPUSH
10655: PPUSH
10656: PPUSH
10657: PPUSH
10658: PPUSH
10659: PPUSH
10660: PPUSH
// result := [ ] ;
10661: LD_ADDR_VAR 0 7
10665: PUSH
10666: EMPTY
10667: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL_OW 266
10677: PUSH
10678: LD_INT 0
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: IN
10688: NOT
10689: IFFALSE 10693
// exit ;
10691: GO 12333
// if name then
10693: LD_VAR 0 3
10697: IFFALSE 10713
// SetBName ( base_dep , name ) ;
10699: LD_VAR 0 1
10703: PPUSH
10704: LD_VAR 0 3
10708: PPUSH
10709: CALL_OW 500
// base := GetBase ( base_dep ) ;
10713: LD_ADDR_VAR 0 15
10717: PUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 274
10727: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10728: LD_ADDR_VAR 0 16
10732: PUSH
10733: LD_VAR 0 1
10737: PPUSH
10738: CALL_OW 255
10742: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10743: LD_ADDR_VAR 0 17
10747: PUSH
10748: LD_VAR 0 1
10752: PPUSH
10753: CALL_OW 248
10757: ST_TO_ADDR
// if sources then
10758: LD_VAR 0 5
10762: IFFALSE 10809
// for i = 1 to 3 do
10764: LD_ADDR_VAR 0 8
10768: PUSH
10769: DOUBLE
10770: LD_INT 1
10772: DEC
10773: ST_TO_ADDR
10774: LD_INT 3
10776: PUSH
10777: FOR_TO
10778: IFFALSE 10807
// AddResourceType ( base , i , sources [ i ] ) ;
10780: LD_VAR 0 15
10784: PPUSH
10785: LD_VAR 0 8
10789: PPUSH
10790: LD_VAR 0 5
10794: PUSH
10795: LD_VAR 0 8
10799: ARRAY
10800: PPUSH
10801: CALL_OW 276
10805: GO 10777
10807: POP
10808: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10809: LD_ADDR_VAR 0 18
10813: PUSH
10814: LD_VAR 0 15
10818: PPUSH
10819: LD_VAR 0 2
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL 10068 0 3
10831: ST_TO_ADDR
// InitHc ;
10832: CALL_OW 19
// InitUc ;
10836: CALL_OW 18
// uc_side := side ;
10840: LD_ADDR_OWVAR 20
10844: PUSH
10845: LD_VAR 0 16
10849: ST_TO_ADDR
// uc_nation := nation ;
10850: LD_ADDR_OWVAR 21
10854: PUSH
10855: LD_VAR 0 17
10859: ST_TO_ADDR
// if buildings then
10860: LD_VAR 0 18
10864: IFFALSE 12192
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10866: LD_ADDR_VAR 0 19
10870: PUSH
10871: LD_VAR 0 18
10875: PPUSH
10876: LD_INT 2
10878: PUSH
10879: LD_INT 30
10881: PUSH
10882: LD_INT 29
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 30
10891: PUSH
10892: LD_INT 30
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 72
10908: ST_TO_ADDR
// if tmp then
10909: LD_VAR 0 19
10913: IFFALSE 10961
// for i in tmp do
10915: LD_ADDR_VAR 0 8
10919: PUSH
10920: LD_VAR 0 19
10924: PUSH
10925: FOR_IN
10926: IFFALSE 10959
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10928: LD_VAR 0 8
10932: PPUSH
10933: CALL_OW 250
10937: PPUSH
10938: LD_VAR 0 8
10942: PPUSH
10943: CALL_OW 251
10947: PPUSH
10948: LD_VAR 0 16
10952: PPUSH
10953: CALL_OW 441
10957: GO 10925
10959: POP
10960: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10961: LD_VAR 0 18
10965: PPUSH
10966: LD_INT 2
10968: PUSH
10969: LD_INT 30
10971: PUSH
10972: LD_INT 32
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 30
10981: PUSH
10982: LD_INT 33
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: LIST
10993: PPUSH
10994: CALL_OW 72
10998: IFFALSE 11086
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11000: LD_ADDR_VAR 0 8
11004: PUSH
11005: LD_VAR 0 18
11009: PPUSH
11010: LD_INT 2
11012: PUSH
11013: LD_INT 30
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 30
11025: PUSH
11026: LD_INT 33
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 72
11042: PUSH
11043: FOR_IN
11044: IFFALSE 11084
// begin if not GetBWeapon ( i ) then
11046: LD_VAR 0 8
11050: PPUSH
11051: CALL_OW 269
11055: NOT
11056: IFFALSE 11082
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11058: LD_VAR 0 8
11062: PPUSH
11063: LD_VAR 0 8
11067: PPUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: CALL 12338 0 2
11077: PPUSH
11078: CALL_OW 431
// end ;
11082: GO 11043
11084: POP
11085: POP
// end ; for i = 1 to personel do
11086: LD_ADDR_VAR 0 8
11090: PUSH
11091: DOUBLE
11092: LD_INT 1
11094: DEC
11095: ST_TO_ADDR
11096: LD_VAR 0 6
11100: PUSH
11101: FOR_TO
11102: IFFALSE 12172
// begin if i > 4 then
11104: LD_VAR 0 8
11108: PUSH
11109: LD_INT 4
11111: GREATER
11112: IFFALSE 11116
// break ;
11114: GO 12172
// case i of 1 :
11116: LD_VAR 0 8
11120: PUSH
11121: LD_INT 1
11123: DOUBLE
11124: EQUAL
11125: IFTRUE 11129
11127: GO 11209
11129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11130: LD_ADDR_VAR 0 12
11134: PUSH
11135: LD_VAR 0 18
11139: PPUSH
11140: LD_INT 22
11142: PUSH
11143: LD_VAR 0 16
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PUSH
11152: LD_INT 58
11154: PUSH
11155: EMPTY
11156: LIST
11157: PUSH
11158: LD_INT 2
11160: PUSH
11161: LD_INT 30
11163: PUSH
11164: LD_INT 32
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 30
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 30
11183: PUSH
11184: LD_INT 5
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 72
11206: ST_TO_ADDR
11207: GO 11431
11209: LD_INT 2
11211: DOUBLE
11212: EQUAL
11213: IFTRUE 11217
11215: GO 11279
11217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11218: LD_ADDR_VAR 0 12
11222: PUSH
11223: LD_VAR 0 18
11227: PPUSH
11228: LD_INT 22
11230: PUSH
11231: LD_VAR 0 16
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: LD_INT 30
11245: PUSH
11246: LD_INT 0
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 30
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 72
11276: ST_TO_ADDR
11277: GO 11431
11279: LD_INT 3
11281: DOUBLE
11282: EQUAL
11283: IFTRUE 11287
11285: GO 11349
11287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11288: LD_ADDR_VAR 0 12
11292: PUSH
11293: LD_VAR 0 18
11297: PPUSH
11298: LD_INT 22
11300: PUSH
11301: LD_VAR 0 16
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 2
11312: PUSH
11313: LD_INT 30
11315: PUSH
11316: LD_INT 2
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 30
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PPUSH
11342: CALL_OW 72
11346: ST_TO_ADDR
11347: GO 11431
11349: LD_INT 4
11351: DOUBLE
11352: EQUAL
11353: IFTRUE 11357
11355: GO 11430
11357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11358: LD_ADDR_VAR 0 12
11362: PUSH
11363: LD_VAR 0 18
11367: PPUSH
11368: LD_INT 22
11370: PUSH
11371: LD_VAR 0 16
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 2
11382: PUSH
11383: LD_INT 30
11385: PUSH
11386: LD_INT 6
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 30
11395: PUSH
11396: LD_INT 7
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 30
11405: PUSH
11406: LD_INT 8
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PPUSH
11423: CALL_OW 72
11427: ST_TO_ADDR
11428: GO 11431
11430: POP
// if i = 1 then
11431: LD_VAR 0 8
11435: PUSH
11436: LD_INT 1
11438: EQUAL
11439: IFFALSE 11550
// begin tmp := [ ] ;
11441: LD_ADDR_VAR 0 19
11445: PUSH
11446: EMPTY
11447: ST_TO_ADDR
// for j in f do
11448: LD_ADDR_VAR 0 9
11452: PUSH
11453: LD_VAR 0 12
11457: PUSH
11458: FOR_IN
11459: IFFALSE 11532
// if GetBType ( j ) = b_bunker then
11461: LD_VAR 0 9
11465: PPUSH
11466: CALL_OW 266
11470: PUSH
11471: LD_INT 32
11473: EQUAL
11474: IFFALSE 11501
// tmp := Insert ( tmp , 1 , j ) else
11476: LD_ADDR_VAR 0 19
11480: PUSH
11481: LD_VAR 0 19
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: LD_VAR 0 9
11493: PPUSH
11494: CALL_OW 2
11498: ST_TO_ADDR
11499: GO 11530
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11501: LD_ADDR_VAR 0 19
11505: PUSH
11506: LD_VAR 0 19
11510: PPUSH
11511: LD_VAR 0 19
11515: PUSH
11516: LD_INT 1
11518: PLUS
11519: PPUSH
11520: LD_VAR 0 9
11524: PPUSH
11525: CALL_OW 2
11529: ST_TO_ADDR
11530: GO 11458
11532: POP
11533: POP
// if tmp then
11534: LD_VAR 0 19
11538: IFFALSE 11550
// f := tmp ;
11540: LD_ADDR_VAR 0 12
11544: PUSH
11545: LD_VAR 0 19
11549: ST_TO_ADDR
// end ; x := personel [ i ] ;
11550: LD_ADDR_VAR 0 13
11554: PUSH
11555: LD_VAR 0 6
11559: PUSH
11560: LD_VAR 0 8
11564: ARRAY
11565: ST_TO_ADDR
// if x = - 1 then
11566: LD_VAR 0 13
11570: PUSH
11571: LD_INT 1
11573: NEG
11574: EQUAL
11575: IFFALSE 11786
// begin for j in f do
11577: LD_ADDR_VAR 0 9
11581: PUSH
11582: LD_VAR 0 12
11586: PUSH
11587: FOR_IN
11588: IFFALSE 11782
// repeat InitHc ;
11590: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11594: LD_VAR 0 9
11598: PPUSH
11599: CALL_OW 266
11603: PUSH
11604: LD_INT 5
11606: EQUAL
11607: IFFALSE 11677
// begin if UnitsInside ( j ) < 3 then
11609: LD_VAR 0 9
11613: PPUSH
11614: CALL_OW 313
11618: PUSH
11619: LD_INT 3
11621: LESS
11622: IFFALSE 11658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11624: LD_INT 0
11626: PPUSH
11627: LD_INT 5
11629: PUSH
11630: LD_INT 8
11632: PUSH
11633: LD_INT 9
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: LD_VAR 0 17
11645: ARRAY
11646: PPUSH
11647: LD_VAR 0 4
11651: PPUSH
11652: CALL_OW 380
11656: GO 11675
// PrepareHuman ( false , i , skill ) ;
11658: LD_INT 0
11660: PPUSH
11661: LD_VAR 0 8
11665: PPUSH
11666: LD_VAR 0 4
11670: PPUSH
11671: CALL_OW 380
// end else
11675: GO 11694
// PrepareHuman ( false , i , skill ) ;
11677: LD_INT 0
11679: PPUSH
11680: LD_VAR 0 8
11684: PPUSH
11685: LD_VAR 0 4
11689: PPUSH
11690: CALL_OW 380
// un := CreateHuman ;
11694: LD_ADDR_VAR 0 14
11698: PUSH
11699: CALL_OW 44
11703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11704: LD_ADDR_VAR 0 7
11708: PUSH
11709: LD_VAR 0 7
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: LD_VAR 0 14
11721: PPUSH
11722: CALL_OW 2
11726: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11727: LD_VAR 0 14
11731: PPUSH
11732: LD_VAR 0 9
11736: PPUSH
11737: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11741: LD_VAR 0 9
11745: PPUSH
11746: CALL_OW 313
11750: PUSH
11751: LD_INT 6
11753: EQUAL
11754: IFTRUE 11778
11756: PUSH
11757: LD_VAR 0 9
11761: PPUSH
11762: CALL_OW 266
11766: PUSH
11767: LD_INT 32
11769: PUSH
11770: LD_INT 31
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: IN
11777: OR
11778: IFFALSE 11590
11780: GO 11587
11782: POP
11783: POP
// end else
11784: GO 12170
// for j = 1 to x do
11786: LD_ADDR_VAR 0 9
11790: PUSH
11791: DOUBLE
11792: LD_INT 1
11794: DEC
11795: ST_TO_ADDR
11796: LD_VAR 0 13
11800: PUSH
11801: FOR_TO
11802: IFFALSE 12168
// begin InitHc ;
11804: CALL_OW 19
// if not f then
11808: LD_VAR 0 12
11812: NOT
11813: IFFALSE 11902
// begin PrepareHuman ( false , i , skill ) ;
11815: LD_INT 0
11817: PPUSH
11818: LD_VAR 0 8
11822: PPUSH
11823: LD_VAR 0 4
11827: PPUSH
11828: CALL_OW 380
// un := CreateHuman ;
11832: LD_ADDR_VAR 0 14
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11842: LD_ADDR_VAR 0 7
11846: PUSH
11847: LD_VAR 0 7
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: LD_VAR 0 14
11859: PPUSH
11860: CALL_OW 2
11864: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11865: LD_VAR 0 14
11869: PPUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 250
11879: PPUSH
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 251
11889: PPUSH
11890: LD_INT 10
11892: PPUSH
11893: LD_INT 0
11895: PPUSH
11896: CALL_OW 50
// continue ;
11900: GO 11801
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11902: LD_VAR 0 12
11906: PUSH
11907: LD_INT 1
11909: ARRAY
11910: PPUSH
11911: CALL_OW 313
11915: IFFALSE 11943
11917: PUSH
11918: LD_VAR 0 12
11922: PUSH
11923: LD_INT 1
11925: ARRAY
11926: PPUSH
11927: CALL_OW 266
11931: PUSH
11932: LD_INT 32
11934: PUSH
11935: LD_INT 31
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: IN
11942: AND
11943: IFTRUE 11964
11945: PUSH
11946: LD_VAR 0 12
11950: PUSH
11951: LD_INT 1
11953: ARRAY
11954: PPUSH
11955: CALL_OW 313
11959: PUSH
11960: LD_INT 6
11962: EQUAL
11963: OR
11964: IFFALSE 11984
// f := Delete ( f , 1 ) ;
11966: LD_ADDR_VAR 0 12
11970: PUSH
11971: LD_VAR 0 12
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 3
11983: ST_TO_ADDR
// if not f then
11984: LD_VAR 0 12
11988: NOT
11989: IFFALSE 12007
// begin x := x + 2 ;
11991: LD_ADDR_VAR 0 13
11995: PUSH
11996: LD_VAR 0 13
12000: PUSH
12001: LD_INT 2
12003: PLUS
12004: ST_TO_ADDR
// continue ;
12005: GO 11801
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12007: LD_VAR 0 12
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: CALL_OW 266
12020: PUSH
12021: LD_INT 5
12023: EQUAL
12024: IFFALSE 12098
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12026: LD_VAR 0 12
12030: PUSH
12031: LD_INT 1
12033: ARRAY
12034: PPUSH
12035: CALL_OW 313
12039: PUSH
12040: LD_INT 3
12042: LESS
12043: IFFALSE 12079
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12045: LD_INT 0
12047: PPUSH
12048: LD_INT 5
12050: PUSH
12051: LD_INT 8
12053: PUSH
12054: LD_INT 9
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: LD_VAR 0 17
12066: ARRAY
12067: PPUSH
12068: LD_VAR 0 4
12072: PPUSH
12073: CALL_OW 380
12077: GO 12096
// PrepareHuman ( false , i , skill ) ;
12079: LD_INT 0
12081: PPUSH
12082: LD_VAR 0 8
12086: PPUSH
12087: LD_VAR 0 4
12091: PPUSH
12092: CALL_OW 380
// end else
12096: GO 12115
// PrepareHuman ( false , i , skill ) ;
12098: LD_INT 0
12100: PPUSH
12101: LD_VAR 0 8
12105: PPUSH
12106: LD_VAR 0 4
12110: PPUSH
12111: CALL_OW 380
// un := CreateHuman ;
12115: LD_ADDR_VAR 0 14
12119: PUSH
12120: CALL_OW 44
12124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12125: LD_ADDR_VAR 0 7
12129: PUSH
12130: LD_VAR 0 7
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: LD_VAR 0 14
12142: PPUSH
12143: CALL_OW 2
12147: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12148: LD_VAR 0 14
12152: PPUSH
12153: LD_VAR 0 12
12157: PUSH
12158: LD_INT 1
12160: ARRAY
12161: PPUSH
12162: CALL_OW 52
// end ;
12166: GO 11801
12168: POP
12169: POP
// end ;
12170: GO 11101
12172: POP
12173: POP
// result := result ^ buildings ;
12174: LD_ADDR_VAR 0 7
12178: PUSH
12179: LD_VAR 0 7
12183: PUSH
12184: LD_VAR 0 18
12188: ADD
12189: ST_TO_ADDR
// end else
12190: GO 12333
// begin for i = 1 to personel do
12192: LD_ADDR_VAR 0 8
12196: PUSH
12197: DOUBLE
12198: LD_INT 1
12200: DEC
12201: ST_TO_ADDR
12202: LD_VAR 0 6
12206: PUSH
12207: FOR_TO
12208: IFFALSE 12331
// begin if i > 4 then
12210: LD_VAR 0 8
12214: PUSH
12215: LD_INT 4
12217: GREATER
12218: IFFALSE 12222
// break ;
12220: GO 12331
// x := personel [ i ] ;
12222: LD_ADDR_VAR 0 13
12226: PUSH
12227: LD_VAR 0 6
12231: PUSH
12232: LD_VAR 0 8
12236: ARRAY
12237: ST_TO_ADDR
// if x = - 1 then
12238: LD_VAR 0 13
12242: PUSH
12243: LD_INT 1
12245: NEG
12246: EQUAL
12247: IFFALSE 12251
// continue ;
12249: GO 12207
// PrepareHuman ( false , i , skill ) ;
12251: LD_INT 0
12253: PPUSH
12254: LD_VAR 0 8
12258: PPUSH
12259: LD_VAR 0 4
12263: PPUSH
12264: CALL_OW 380
// un := CreateHuman ;
12268: LD_ADDR_VAR 0 14
12272: PUSH
12273: CALL_OW 44
12277: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12278: LD_VAR 0 14
12282: PPUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: CALL_OW 250
12292: PPUSH
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 251
12302: PPUSH
12303: LD_INT 10
12305: PPUSH
12306: LD_INT 0
12308: PPUSH
12309: CALL_OW 50
// result := result ^ un ;
12313: LD_ADDR_VAR 0 7
12317: PUSH
12318: LD_VAR 0 7
12322: PUSH
12323: LD_VAR 0 14
12327: ADD
12328: ST_TO_ADDR
// end ;
12329: GO 12207
12331: POP
12332: POP
// end ; end ;
12333: LD_VAR 0 7
12337: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12338: LD_INT 0
12340: PPUSH
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
12352: PPUSH
12353: PPUSH
12354: PPUSH
12355: PPUSH
// result := false ;
12356: LD_ADDR_VAR 0 3
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12364: LD_VAR 0 1
12368: NOT
12369: IFTRUE 12394
12371: PUSH
12372: LD_VAR 0 1
12376: PPUSH
12377: CALL_OW 266
12381: PUSH
12382: LD_INT 32
12384: PUSH
12385: LD_INT 33
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: IN
12392: NOT
12393: OR
12394: IFFALSE 12398
// exit ;
12396: GO 13533
// nat := GetNation ( tower ) ;
12398: LD_ADDR_VAR 0 12
12402: PUSH
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 248
12412: ST_TO_ADDR
// side := GetSide ( tower ) ;
12413: LD_ADDR_VAR 0 16
12417: PUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: CALL_OW 255
12427: ST_TO_ADDR
// x := GetX ( tower ) ;
12428: LD_ADDR_VAR 0 10
12432: PUSH
12433: LD_VAR 0 1
12437: PPUSH
12438: CALL_OW 250
12442: ST_TO_ADDR
// y := GetY ( tower ) ;
12443: LD_ADDR_VAR 0 11
12447: PUSH
12448: LD_VAR 0 1
12452: PPUSH
12453: CALL_OW 251
12457: ST_TO_ADDR
// if not x or not y then
12458: LD_VAR 0 10
12462: NOT
12463: IFTRUE 12472
12465: PUSH
12466: LD_VAR 0 11
12470: NOT
12471: OR
12472: IFFALSE 12476
// exit ;
12474: GO 13533
// weapon := 0 ;
12476: LD_ADDR_VAR 0 18
12480: PUSH
12481: LD_INT 0
12483: ST_TO_ADDR
// fac_list := [ ] ;
12484: LD_ADDR_VAR 0 17
12488: PUSH
12489: EMPTY
12490: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12491: LD_ADDR_VAR 0 6
12495: PUSH
12496: LD_VAR 0 1
12500: PPUSH
12501: CALL_OW 274
12505: PPUSH
12506: LD_VAR 0 2
12510: PPUSH
12511: LD_INT 0
12513: PPUSH
12514: CALL 10068 0 3
12518: PPUSH
12519: LD_INT 30
12521: PUSH
12522: LD_INT 3
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PPUSH
12529: CALL_OW 72
12533: ST_TO_ADDR
// if not factories then
12534: LD_VAR 0 6
12538: NOT
12539: IFFALSE 12543
// exit ;
12541: GO 13533
// for i in factories do
12543: LD_ADDR_VAR 0 8
12547: PUSH
12548: LD_VAR 0 6
12552: PUSH
12553: FOR_IN
12554: IFFALSE 12579
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12556: LD_ADDR_VAR 0 17
12560: PUSH
12561: LD_VAR 0 17
12565: PUSH
12566: LD_VAR 0 8
12570: PPUSH
12571: CALL_OW 478
12575: UNION
12576: ST_TO_ADDR
12577: GO 12553
12579: POP
12580: POP
// if not fac_list then
12581: LD_VAR 0 17
12585: NOT
12586: IFFALSE 12590
// exit ;
12588: GO 13533
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12590: LD_ADDR_VAR 0 5
12594: PUSH
12595: LD_INT 4
12597: PUSH
12598: LD_INT 5
12600: PUSH
12601: LD_INT 9
12603: PUSH
12604: LD_INT 10
12606: PUSH
12607: LD_INT 6
12609: PUSH
12610: LD_INT 7
12612: PUSH
12613: LD_INT 11
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 27
12627: PUSH
12628: LD_INT 28
12630: PUSH
12631: LD_INT 26
12633: PUSH
12634: LD_INT 30
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 43
12645: PUSH
12646: LD_INT 44
12648: PUSH
12649: LD_INT 46
12651: PUSH
12652: LD_INT 45
12654: PUSH
12655: LD_INT 47
12657: PUSH
12658: LD_INT 49
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: LD_VAR 0 12
12678: ARRAY
12679: ST_TO_ADDR
// list := list isect fac_list ;
12680: LD_ADDR_VAR 0 5
12684: PUSH
12685: LD_VAR 0 5
12689: PUSH
12690: LD_VAR 0 17
12694: ISECT
12695: ST_TO_ADDR
// if not list then
12696: LD_VAR 0 5
12700: NOT
12701: IFFALSE 12705
// exit ;
12703: GO 13533
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12705: LD_VAR 0 12
12709: PUSH
12710: LD_INT 3
12712: EQUAL
12713: IFFALSE 12725
12715: PUSH
12716: LD_INT 49
12718: PUSH
12719: LD_VAR 0 5
12723: IN
12724: AND
12725: IFFALSE 12745
12727: PUSH
12728: LD_INT 31
12730: PPUSH
12731: LD_VAR 0 16
12735: PPUSH
12736: CALL_OW 321
12740: PUSH
12741: LD_INT 2
12743: EQUAL
12744: AND
12745: IFFALSE 12805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12747: LD_INT 22
12749: PUSH
12750: LD_VAR 0 16
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 35
12761: PUSH
12762: LD_INT 49
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 91
12771: PUSH
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 10
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: PPUSH
12790: CALL_OW 69
12794: NOT
12795: IFFALSE 12805
// weapon := ru_time_lapser ;
12797: LD_ADDR_VAR 0 18
12801: PUSH
12802: LD_INT 49
12804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12805: LD_VAR 0 12
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: LD_INT 2
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: IN
12820: IFFALSE 12844
12822: PUSH
12823: LD_INT 11
12825: PUSH
12826: LD_VAR 0 5
12830: IN
12831: IFTRUE 12843
12833: PUSH
12834: LD_INT 30
12836: PUSH
12837: LD_VAR 0 5
12841: IN
12842: OR
12843: AND
12844: IFFALSE 12864
12846: PUSH
12847: LD_INT 6
12849: PPUSH
12850: LD_VAR 0 16
12854: PPUSH
12855: CALL_OW 321
12859: PUSH
12860: LD_INT 2
12862: EQUAL
12863: AND
12864: IFFALSE 13031
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12866: LD_INT 22
12868: PUSH
12869: LD_VAR 0 16
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 2
12880: PUSH
12881: LD_INT 35
12883: PUSH
12884: LD_INT 11
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 35
12893: PUSH
12894: LD_INT 30
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 91
12908: PUSH
12909: LD_VAR 0 1
12913: PUSH
12914: LD_INT 18
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: NOT
12932: IFFALSE 13008
12934: PUSH
12935: LD_INT 22
12937: PUSH
12938: LD_VAR 0 16
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 2
12949: PUSH
12950: LD_INT 30
12952: PUSH
12953: LD_INT 32
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 30
12962: PUSH
12963: LD_INT 33
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 91
12977: PUSH
12978: LD_VAR 0 1
12982: PUSH
12983: LD_INT 12
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: PPUSH
12999: CALL_OW 69
13003: PUSH
13004: LD_INT 2
13006: GREATER
13007: AND
13008: IFFALSE 13031
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13010: LD_ADDR_VAR 0 18
13014: PUSH
13015: LD_INT 11
13017: PUSH
13018: LD_INT 30
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_VAR 0 12
13029: ARRAY
13030: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13031: LD_VAR 0 18
13035: NOT
13036: IFFALSE 13056
13038: PUSH
13039: LD_INT 40
13041: PPUSH
13042: LD_VAR 0 16
13046: PPUSH
13047: CALL_OW 321
13051: PUSH
13052: LD_INT 2
13054: EQUAL
13055: AND
13056: IFFALSE 13092
13058: PUSH
13059: LD_INT 7
13061: PUSH
13062: LD_VAR 0 5
13066: IN
13067: IFTRUE 13079
13069: PUSH
13070: LD_INT 28
13072: PUSH
13073: LD_VAR 0 5
13077: IN
13078: OR
13079: IFTRUE 13091
13081: PUSH
13082: LD_INT 45
13084: PUSH
13085: LD_VAR 0 5
13089: IN
13090: OR
13091: AND
13092: IFFALSE 13346
// begin hex := GetHexInfo ( x , y ) ;
13094: LD_ADDR_VAR 0 4
13098: PUSH
13099: LD_VAR 0 10
13103: PPUSH
13104: LD_VAR 0 11
13108: PPUSH
13109: CALL_OW 546
13113: ST_TO_ADDR
// if hex [ 1 ] then
13114: LD_VAR 0 4
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: IFFALSE 13126
// exit ;
13124: GO 13533
// height := hex [ 2 ] ;
13126: LD_ADDR_VAR 0 15
13130: PUSH
13131: LD_VAR 0 4
13135: PUSH
13136: LD_INT 2
13138: ARRAY
13139: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13140: LD_ADDR_VAR 0 14
13144: PUSH
13145: LD_INT 0
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: LD_INT 5
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: ST_TO_ADDR
// for i in tmp do
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: LD_VAR 0 14
13172: PUSH
13173: FOR_IN
13174: IFFALSE 13344
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13176: LD_ADDR_VAR 0 9
13180: PUSH
13181: LD_VAR 0 10
13185: PPUSH
13186: LD_VAR 0 8
13190: PPUSH
13191: LD_INT 5
13193: PPUSH
13194: CALL_OW 272
13198: PUSH
13199: LD_VAR 0 11
13203: PPUSH
13204: LD_VAR 0 8
13208: PPUSH
13209: LD_INT 5
13211: PPUSH
13212: CALL_OW 273
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13221: LD_VAR 0 9
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: PPUSH
13230: LD_VAR 0 9
13234: PUSH
13235: LD_INT 2
13237: ARRAY
13238: PPUSH
13239: CALL_OW 488
13243: IFFALSE 13342
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13245: LD_ADDR_VAR 0 4
13249: PUSH
13250: LD_VAR 0 9
13254: PUSH
13255: LD_INT 1
13257: ARRAY
13258: PPUSH
13259: LD_VAR 0 9
13263: PUSH
13264: LD_INT 2
13266: ARRAY
13267: PPUSH
13268: CALL_OW 546
13272: ST_TO_ADDR
// if hex [ 1 ] then
13273: LD_VAR 0 4
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: IFFALSE 13285
// continue ;
13283: GO 13173
// h := hex [ 2 ] ;
13285: LD_ADDR_VAR 0 13
13289: PUSH
13290: LD_VAR 0 4
13294: PUSH
13295: LD_INT 2
13297: ARRAY
13298: ST_TO_ADDR
// if h + 7 < height then
13299: LD_VAR 0 13
13303: PUSH
13304: LD_INT 7
13306: PLUS
13307: PUSH
13308: LD_VAR 0 15
13312: LESS
13313: IFFALSE 13342
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13315: LD_ADDR_VAR 0 18
13319: PUSH
13320: LD_INT 7
13322: PUSH
13323: LD_INT 28
13325: PUSH
13326: LD_INT 45
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: LD_VAR 0 12
13338: ARRAY
13339: ST_TO_ADDR
// break ;
13340: GO 13344
// end ; end ; end ;
13342: GO 13173
13344: POP
13345: POP
// end ; if not weapon then
13346: LD_VAR 0 18
13350: NOT
13351: IFFALSE 13411
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13353: LD_ADDR_VAR 0 5
13357: PUSH
13358: LD_VAR 0 5
13362: PUSH
13363: LD_INT 11
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 49
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: DIFF
13377: ST_TO_ADDR
// if not list then
13378: LD_VAR 0 5
13382: NOT
13383: IFFALSE 13387
// exit ;
13385: GO 13533
// weapon := list [ rand ( 1 , list ) ] ;
13387: LD_ADDR_VAR 0 18
13391: PUSH
13392: LD_VAR 0 5
13396: PUSH
13397: LD_INT 1
13399: PPUSH
13400: LD_VAR 0 5
13404: PPUSH
13405: CALL_OW 12
13409: ARRAY
13410: ST_TO_ADDR
// end ; if weapon then
13411: LD_VAR 0 18
13415: IFFALSE 13533
// begin tmp := CostOfWeapon ( weapon ) ;
13417: LD_ADDR_VAR 0 14
13421: PUSH
13422: LD_VAR 0 18
13426: PPUSH
13427: CALL_OW 451
13431: ST_TO_ADDR
// j := GetBase ( tower ) ;
13432: LD_ADDR_VAR 0 9
13436: PUSH
13437: LD_VAR 0 1
13441: PPUSH
13442: CALL_OW 274
13446: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13447: LD_VAR 0 9
13451: PPUSH
13452: LD_INT 1
13454: PPUSH
13455: CALL_OW 275
13459: PUSH
13460: LD_VAR 0 14
13464: PUSH
13465: LD_INT 1
13467: ARRAY
13468: GREATEREQUAL
13469: IFFALSE 13495
13471: PUSH
13472: LD_VAR 0 9
13476: PPUSH
13477: LD_INT 2
13479: PPUSH
13480: CALL_OW 275
13484: PUSH
13485: LD_VAR 0 14
13489: PUSH
13490: LD_INT 2
13492: ARRAY
13493: GREATEREQUAL
13494: AND
13495: IFFALSE 13521
13497: PUSH
13498: LD_VAR 0 9
13502: PPUSH
13503: LD_INT 3
13505: PPUSH
13506: CALL_OW 275
13510: PUSH
13511: LD_VAR 0 14
13515: PUSH
13516: LD_INT 3
13518: ARRAY
13519: GREATEREQUAL
13520: AND
13521: IFFALSE 13533
// result := weapon ;
13523: LD_ADDR_VAR 0 3
13527: PUSH
13528: LD_VAR 0 18
13532: ST_TO_ADDR
// end ; end ;
13533: LD_VAR 0 3
13537: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13538: LD_INT 0
13540: PPUSH
13541: PPUSH
// result := true ;
13542: LD_ADDR_VAR 0 3
13546: PUSH
13547: LD_INT 1
13549: ST_TO_ADDR
// if array1 = array2 then
13550: LD_VAR 0 1
13554: PUSH
13555: LD_VAR 0 2
13559: EQUAL
13560: IFFALSE 13620
// begin for i = 1 to array1 do
13562: LD_ADDR_VAR 0 4
13566: PUSH
13567: DOUBLE
13568: LD_INT 1
13570: DEC
13571: ST_TO_ADDR
13572: LD_VAR 0 1
13576: PUSH
13577: FOR_TO
13578: IFFALSE 13616
// if array1 [ i ] <> array2 [ i ] then
13580: LD_VAR 0 1
13584: PUSH
13585: LD_VAR 0 4
13589: ARRAY
13590: PUSH
13591: LD_VAR 0 2
13595: PUSH
13596: LD_VAR 0 4
13600: ARRAY
13601: NONEQUAL
13602: IFFALSE 13614
// begin result := false ;
13604: LD_ADDR_VAR 0 3
13608: PUSH
13609: LD_INT 0
13611: ST_TO_ADDR
// break ;
13612: GO 13616
// end ;
13614: GO 13577
13616: POP
13617: POP
// end else
13618: GO 13628
// result := false ;
13620: LD_ADDR_VAR 0 3
13624: PUSH
13625: LD_INT 0
13627: ST_TO_ADDR
// end ;
13628: LD_VAR 0 3
13632: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13633: LD_INT 0
13635: PPUSH
13636: PPUSH
// if not array1 or not array2 then
13637: LD_VAR 0 1
13641: NOT
13642: IFTRUE 13651
13644: PUSH
13645: LD_VAR 0 2
13649: NOT
13650: OR
13651: IFFALSE 13655
// exit ;
13653: GO 13719
// result := true ;
13655: LD_ADDR_VAR 0 3
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// for i = 1 to array1 do
13663: LD_ADDR_VAR 0 4
13667: PUSH
13668: DOUBLE
13669: LD_INT 1
13671: DEC
13672: ST_TO_ADDR
13673: LD_VAR 0 1
13677: PUSH
13678: FOR_TO
13679: IFFALSE 13717
// if array1 [ i ] <> array2 [ i ] then
13681: LD_VAR 0 1
13685: PUSH
13686: LD_VAR 0 4
13690: ARRAY
13691: PUSH
13692: LD_VAR 0 2
13696: PUSH
13697: LD_VAR 0 4
13701: ARRAY
13702: NONEQUAL
13703: IFFALSE 13715
// begin result := false ;
13705: LD_ADDR_VAR 0 3
13709: PUSH
13710: LD_INT 0
13712: ST_TO_ADDR
// break ;
13713: GO 13717
// end ;
13715: GO 13678
13717: POP
13718: POP
// end ;
13719: LD_VAR 0 3
13723: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13724: LD_INT 0
13726: PPUSH
13727: PPUSH
13728: PPUSH
// pom := GetBase ( fac ) ;
13729: LD_ADDR_VAR 0 5
13733: PUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 274
13743: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13744: LD_ADDR_VAR 0 4
13748: PUSH
13749: LD_VAR 0 2
13753: PUSH
13754: LD_INT 1
13756: ARRAY
13757: PPUSH
13758: LD_VAR 0 2
13762: PUSH
13763: LD_INT 2
13765: ARRAY
13766: PPUSH
13767: LD_VAR 0 2
13771: PUSH
13772: LD_INT 3
13774: ARRAY
13775: PPUSH
13776: LD_VAR 0 2
13780: PUSH
13781: LD_INT 4
13783: ARRAY
13784: PPUSH
13785: CALL_OW 449
13789: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13790: LD_ADDR_VAR 0 3
13794: PUSH
13795: LD_VAR 0 5
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 275
13807: PUSH
13808: LD_VAR 0 4
13812: PUSH
13813: LD_INT 1
13815: ARRAY
13816: GREATEREQUAL
13817: IFFALSE 13843
13819: PUSH
13820: LD_VAR 0 5
13824: PPUSH
13825: LD_INT 2
13827: PPUSH
13828: CALL_OW 275
13832: PUSH
13833: LD_VAR 0 4
13837: PUSH
13838: LD_INT 2
13840: ARRAY
13841: GREATEREQUAL
13842: AND
13843: IFFALSE 13869
13845: PUSH
13846: LD_VAR 0 5
13850: PPUSH
13851: LD_INT 3
13853: PPUSH
13854: CALL_OW 275
13858: PUSH
13859: LD_VAR 0 4
13863: PUSH
13864: LD_INT 3
13866: ARRAY
13867: GREATEREQUAL
13868: AND
13869: ST_TO_ADDR
// end ;
13870: LD_VAR 0 3
13874: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13875: LD_INT 0
13877: PPUSH
13878: PPUSH
13879: PPUSH
13880: PPUSH
// pom := GetBase ( building ) ;
13881: LD_ADDR_VAR 0 3
13885: PUSH
13886: LD_VAR 0 1
13890: PPUSH
13891: CALL_OW 274
13895: ST_TO_ADDR
// if not pom then
13896: LD_VAR 0 3
13900: NOT
13901: IFFALSE 13905
// exit ;
13903: GO 14079
// btype := GetBType ( building ) ;
13905: LD_ADDR_VAR 0 5
13909: PUSH
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 266
13919: ST_TO_ADDR
// if btype = b_armoury then
13920: LD_VAR 0 5
13924: PUSH
13925: LD_INT 4
13927: EQUAL
13928: IFFALSE 13938
// btype := b_barracks ;
13930: LD_ADDR_VAR 0 5
13934: PUSH
13935: LD_INT 5
13937: ST_TO_ADDR
// if btype = b_depot then
13938: LD_VAR 0 5
13942: PUSH
13943: LD_INT 0
13945: EQUAL
13946: IFFALSE 13956
// btype := b_warehouse ;
13948: LD_ADDR_VAR 0 5
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// if btype = b_workshop then
13956: LD_VAR 0 5
13960: PUSH
13961: LD_INT 2
13963: EQUAL
13964: IFFALSE 13974
// btype := b_factory ;
13966: LD_ADDR_VAR 0 5
13970: PUSH
13971: LD_INT 3
13973: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13974: LD_ADDR_VAR 0 4
13978: PUSH
13979: LD_VAR 0 5
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 248
13993: PPUSH
13994: CALL_OW 450
13998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13999: LD_ADDR_VAR 0 2
14003: PUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 275
14016: PUSH
14017: LD_VAR 0 4
14021: PUSH
14022: LD_INT 1
14024: ARRAY
14025: GREATEREQUAL
14026: IFFALSE 14052
14028: PUSH
14029: LD_VAR 0 3
14033: PPUSH
14034: LD_INT 2
14036: PPUSH
14037: CALL_OW 275
14041: PUSH
14042: LD_VAR 0 4
14046: PUSH
14047: LD_INT 2
14049: ARRAY
14050: GREATEREQUAL
14051: AND
14052: IFFALSE 14078
14054: PUSH
14055: LD_VAR 0 3
14059: PPUSH
14060: LD_INT 3
14062: PPUSH
14063: CALL_OW 275
14067: PUSH
14068: LD_VAR 0 4
14072: PUSH
14073: LD_INT 3
14075: ARRAY
14076: GREATEREQUAL
14077: AND
14078: ST_TO_ADDR
// end ;
14079: LD_VAR 0 2
14083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14084: LD_INT 0
14086: PPUSH
14087: PPUSH
14088: PPUSH
// pom := GetBase ( building ) ;
14089: LD_ADDR_VAR 0 4
14093: PUSH
14094: LD_VAR 0 1
14098: PPUSH
14099: CALL_OW 274
14103: ST_TO_ADDR
// if not pom then
14104: LD_VAR 0 4
14108: NOT
14109: IFFALSE 14113
// exit ;
14111: GO 14218
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14113: LD_ADDR_VAR 0 5
14117: PUSH
14118: LD_VAR 0 2
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 248
14132: PPUSH
14133: CALL_OW 450
14137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14138: LD_ADDR_VAR 0 3
14142: PUSH
14143: LD_VAR 0 4
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 275
14155: PUSH
14156: LD_VAR 0 5
14160: PUSH
14161: LD_INT 1
14163: ARRAY
14164: GREATEREQUAL
14165: IFFALSE 14191
14167: PUSH
14168: LD_VAR 0 4
14172: PPUSH
14173: LD_INT 2
14175: PPUSH
14176: CALL_OW 275
14180: PUSH
14181: LD_VAR 0 5
14185: PUSH
14186: LD_INT 2
14188: ARRAY
14189: GREATEREQUAL
14190: AND
14191: IFFALSE 14217
14193: PUSH
14194: LD_VAR 0 4
14198: PPUSH
14199: LD_INT 3
14201: PPUSH
14202: CALL_OW 275
14206: PUSH
14207: LD_VAR 0 5
14211: PUSH
14212: LD_INT 3
14214: ARRAY
14215: GREATEREQUAL
14216: AND
14217: ST_TO_ADDR
// end ;
14218: LD_VAR 0 3
14222: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14223: LD_INT 0
14225: PPUSH
14226: PPUSH
14227: PPUSH
14228: PPUSH
14229: PPUSH
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
14235: PPUSH
// result := false ;
14236: LD_ADDR_VAR 0 8
14240: PUSH
14241: LD_INT 0
14243: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14244: LD_VAR 0 5
14248: NOT
14249: IFTRUE 14258
14251: PUSH
14252: LD_VAR 0 1
14256: NOT
14257: OR
14258: IFTRUE 14267
14260: PUSH
14261: LD_VAR 0 2
14265: NOT
14266: OR
14267: IFTRUE 14276
14269: PUSH
14270: LD_VAR 0 3
14274: NOT
14275: OR
14276: IFFALSE 14280
// exit ;
14278: GO 15106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14280: LD_ADDR_VAR 0 14
14284: PUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: LD_VAR 0 2
14294: PPUSH
14295: LD_VAR 0 3
14299: PPUSH
14300: LD_VAR 0 4
14304: PPUSH
14305: LD_VAR 0 5
14309: PUSH
14310: LD_INT 1
14312: ARRAY
14313: PPUSH
14314: CALL_OW 248
14318: PPUSH
14319: LD_INT 0
14321: PPUSH
14322: CALL 16387 0 6
14326: ST_TO_ADDR
// if not hexes then
14327: LD_VAR 0 14
14331: NOT
14332: IFFALSE 14336
// exit ;
14334: GO 15106
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14336: LD_ADDR_VAR 0 17
14340: PUSH
14341: LD_VAR 0 5
14345: PPUSH
14346: LD_INT 22
14348: PUSH
14349: LD_VAR 0 13
14353: PPUSH
14354: CALL_OW 255
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: LD_INT 30
14368: PUSH
14369: LD_INT 0
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 30
14378: PUSH
14379: LD_INT 1
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 72
14399: ST_TO_ADDR
// for i = 1 to hexes do
14400: LD_ADDR_VAR 0 9
14404: PUSH
14405: DOUBLE
14406: LD_INT 1
14408: DEC
14409: ST_TO_ADDR
14410: LD_VAR 0 14
14414: PUSH
14415: FOR_TO
14416: IFFALSE 15104
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14418: LD_ADDR_VAR 0 13
14422: PUSH
14423: LD_VAR 0 14
14427: PUSH
14428: LD_VAR 0 9
14432: ARRAY
14433: PUSH
14434: LD_INT 1
14436: ARRAY
14437: PPUSH
14438: LD_VAR 0 14
14442: PUSH
14443: LD_VAR 0 9
14447: ARRAY
14448: PUSH
14449: LD_INT 2
14451: ARRAY
14452: PPUSH
14453: CALL_OW 428
14457: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14458: LD_VAR 0 14
14462: PUSH
14463: LD_VAR 0 9
14467: ARRAY
14468: PUSH
14469: LD_INT 1
14471: ARRAY
14472: PPUSH
14473: LD_VAR 0 14
14477: PUSH
14478: LD_VAR 0 9
14482: ARRAY
14483: PUSH
14484: LD_INT 2
14486: ARRAY
14487: PPUSH
14488: CALL_OW 351
14492: IFTRUE 14531
14494: PUSH
14495: LD_VAR 0 14
14499: PUSH
14500: LD_VAR 0 9
14504: ARRAY
14505: PUSH
14506: LD_INT 1
14508: ARRAY
14509: PPUSH
14510: LD_VAR 0 14
14514: PUSH
14515: LD_VAR 0 9
14519: ARRAY
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: PPUSH
14525: CALL_OW 488
14529: NOT
14530: OR
14531: IFTRUE 14548
14533: PUSH
14534: LD_VAR 0 13
14538: PPUSH
14539: CALL_OW 247
14543: PUSH
14544: LD_INT 3
14546: EQUAL
14547: OR
14548: IFFALSE 14554
// exit ;
14550: POP
14551: POP
14552: GO 15106
// if not tmp then
14554: LD_VAR 0 13
14558: NOT
14559: IFFALSE 14563
// continue ;
14561: GO 14415
// result := true ;
14563: LD_ADDR_VAR 0 8
14567: PUSH
14568: LD_INT 1
14570: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14571: LD_VAR 0 6
14575: IFFALSE 14592
14577: PUSH
14578: LD_VAR 0 13
14582: PPUSH
14583: CALL_OW 247
14587: PUSH
14588: LD_INT 2
14590: EQUAL
14591: AND
14592: IFFALSE 14609
14594: PUSH
14595: LD_VAR 0 13
14599: PPUSH
14600: CALL_OW 263
14604: PUSH
14605: LD_INT 1
14607: EQUAL
14608: AND
14609: IFFALSE 14773
// begin if IsDrivenBy ( tmp ) then
14611: LD_VAR 0 13
14615: PPUSH
14616: CALL_OW 311
14620: IFFALSE 14624
// continue ;
14622: GO 14415
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14624: LD_VAR 0 6
14628: PPUSH
14629: LD_INT 3
14631: PUSH
14632: LD_INT 60
14634: PUSH
14635: EMPTY
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: LD_INT 55
14647: PUSH
14648: EMPTY
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PPUSH
14659: CALL_OW 72
14663: IFFALSE 14771
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14665: LD_ADDR_VAR 0 18
14669: PUSH
14670: LD_VAR 0 6
14674: PPUSH
14675: LD_INT 3
14677: PUSH
14678: LD_INT 60
14680: PUSH
14681: EMPTY
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 3
14690: PUSH
14691: LD_INT 55
14693: PUSH
14694: EMPTY
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 72
14709: PUSH
14710: LD_INT 1
14712: ARRAY
14713: ST_TO_ADDR
// if IsInUnit ( driver ) then
14714: LD_VAR 0 18
14718: PPUSH
14719: CALL_OW 310
14723: IFFALSE 14734
// ComExit ( driver ) ;
14725: LD_VAR 0 18
14729: PPUSH
14730: CALL 40387 0 1
// AddComEnterUnit ( driver , tmp ) ;
14734: LD_VAR 0 18
14738: PPUSH
14739: LD_VAR 0 13
14743: PPUSH
14744: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14748: LD_VAR 0 18
14752: PPUSH
14753: LD_VAR 0 7
14757: PPUSH
14758: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14762: LD_VAR 0 18
14766: PPUSH
14767: CALL_OW 181
// end ; continue ;
14771: GO 14415
// end ; if not cleaners or not tmp in cleaners then
14773: LD_VAR 0 6
14777: NOT
14778: IFTRUE 14793
14780: PUSH
14781: LD_VAR 0 13
14785: PUSH
14786: LD_VAR 0 6
14790: IN
14791: NOT
14792: OR
14793: IFFALSE 15102
// begin if dep then
14795: LD_VAR 0 17
14799: IFFALSE 14935
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14801: LD_ADDR_VAR 0 16
14805: PUSH
14806: LD_VAR 0 17
14810: PUSH
14811: LD_INT 1
14813: ARRAY
14814: PPUSH
14815: CALL_OW 250
14819: PPUSH
14820: LD_VAR 0 17
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PPUSH
14829: CALL_OW 254
14833: PPUSH
14834: LD_INT 5
14836: PPUSH
14837: CALL_OW 272
14841: PUSH
14842: LD_VAR 0 17
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: PPUSH
14851: CALL_OW 251
14855: PPUSH
14856: LD_VAR 0 17
14860: PUSH
14861: LD_INT 1
14863: ARRAY
14864: PPUSH
14865: CALL_OW 254
14869: PPUSH
14870: LD_INT 5
14872: PPUSH
14873: CALL_OW 273
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14882: LD_VAR 0 16
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PPUSH
14891: LD_VAR 0 16
14895: PUSH
14896: LD_INT 2
14898: ARRAY
14899: PPUSH
14900: CALL_OW 488
14904: IFFALSE 14935
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14906: LD_VAR 0 13
14910: PPUSH
14911: LD_VAR 0 16
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: PPUSH
14920: LD_VAR 0 16
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: PPUSH
14929: CALL_OW 111
// continue ;
14933: GO 14415
// end ; end ; r := GetDir ( tmp ) ;
14935: LD_ADDR_VAR 0 15
14939: PUSH
14940: LD_VAR 0 13
14944: PPUSH
14945: CALL_OW 254
14949: ST_TO_ADDR
// if r = 5 then
14950: LD_VAR 0 15
14954: PUSH
14955: LD_INT 5
14957: EQUAL
14958: IFFALSE 14968
// r := 0 ;
14960: LD_ADDR_VAR 0 15
14964: PUSH
14965: LD_INT 0
14967: ST_TO_ADDR
// for j = r to 5 do
14968: LD_ADDR_VAR 0 10
14972: PUSH
14973: DOUBLE
14974: LD_VAR 0 15
14978: DEC
14979: ST_TO_ADDR
14980: LD_INT 5
14982: PUSH
14983: FOR_TO
14984: IFFALSE 15100
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14986: LD_ADDR_VAR 0 11
14990: PUSH
14991: LD_VAR 0 13
14995: PPUSH
14996: CALL_OW 250
15000: PPUSH
15001: LD_VAR 0 10
15005: PPUSH
15006: LD_INT 2
15008: PPUSH
15009: CALL_OW 272
15013: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15014: LD_ADDR_VAR 0 12
15018: PUSH
15019: LD_VAR 0 13
15023: PPUSH
15024: CALL_OW 251
15028: PPUSH
15029: LD_VAR 0 10
15033: PPUSH
15034: LD_INT 2
15036: PPUSH
15037: CALL_OW 273
15041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15042: LD_VAR 0 11
15046: PPUSH
15047: LD_VAR 0 12
15051: PPUSH
15052: CALL_OW 488
15056: IFFALSE 15075
15058: PUSH
15059: LD_VAR 0 11
15063: PPUSH
15064: LD_VAR 0 12
15068: PPUSH
15069: CALL_OW 428
15073: NOT
15074: AND
15075: IFFALSE 15098
// begin ComMoveXY ( tmp , _x , _y ) ;
15077: LD_VAR 0 13
15081: PPUSH
15082: LD_VAR 0 11
15086: PPUSH
15087: LD_VAR 0 12
15091: PPUSH
15092: CALL_OW 111
// break ;
15096: GO 15100
// end ; end ;
15098: GO 14983
15100: POP
15101: POP
// end ; end ;
15102: GO 14415
15104: POP
15105: POP
// end ;
15106: LD_VAR 0 8
15110: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15111: LD_INT 0
15113: PPUSH
// result := true ;
15114: LD_ADDR_VAR 0 3
15118: PUSH
15119: LD_INT 1
15121: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15122: LD_VAR 0 2
15126: PUSH
15127: LD_INT 24
15129: DOUBLE
15130: EQUAL
15131: IFTRUE 15141
15133: LD_INT 33
15135: DOUBLE
15136: EQUAL
15137: IFTRUE 15141
15139: GO 15166
15141: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15142: LD_ADDR_VAR 0 3
15146: PUSH
15147: LD_INT 32
15149: PPUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 321
15159: PUSH
15160: LD_INT 2
15162: EQUAL
15163: ST_TO_ADDR
15164: GO 15482
15166: LD_INT 20
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15199
15174: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15175: LD_ADDR_VAR 0 3
15179: PUSH
15180: LD_INT 6
15182: PPUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 321
15192: PUSH
15193: LD_INT 2
15195: EQUAL
15196: ST_TO_ADDR
15197: GO 15482
15199: LD_INT 22
15201: DOUBLE
15202: EQUAL
15203: IFTRUE 15213
15205: LD_INT 36
15207: DOUBLE
15208: EQUAL
15209: IFTRUE 15213
15211: GO 15238
15213: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15214: LD_ADDR_VAR 0 3
15218: PUSH
15219: LD_INT 15
15221: PPUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 321
15231: PUSH
15232: LD_INT 2
15234: EQUAL
15235: ST_TO_ADDR
15236: GO 15482
15238: LD_INT 30
15240: DOUBLE
15241: EQUAL
15242: IFTRUE 15246
15244: GO 15271
15246: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15247: LD_ADDR_VAR 0 3
15251: PUSH
15252: LD_INT 20
15254: PPUSH
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL_OW 321
15264: PUSH
15265: LD_INT 2
15267: EQUAL
15268: ST_TO_ADDR
15269: GO 15482
15271: LD_INT 28
15273: DOUBLE
15274: EQUAL
15275: IFTRUE 15285
15277: LD_INT 21
15279: DOUBLE
15280: EQUAL
15281: IFTRUE 15285
15283: GO 15310
15285: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15286: LD_ADDR_VAR 0 3
15290: PUSH
15291: LD_INT 21
15293: PPUSH
15294: LD_VAR 0 1
15298: PPUSH
15299: CALL_OW 321
15303: PUSH
15304: LD_INT 2
15306: EQUAL
15307: ST_TO_ADDR
15308: GO 15482
15310: LD_INT 16
15312: DOUBLE
15313: EQUAL
15314: IFTRUE 15318
15316: GO 15343
15318: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15319: LD_ADDR_VAR 0 3
15323: PUSH
15324: LD_INT 84
15326: PPUSH
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 321
15336: PUSH
15337: LD_INT 2
15339: EQUAL
15340: ST_TO_ADDR
15341: GO 15482
15343: LD_INT 19
15345: DOUBLE
15346: EQUAL
15347: IFTRUE 15357
15349: LD_INT 23
15351: DOUBLE
15352: EQUAL
15353: IFTRUE 15357
15355: GO 15382
15357: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15358: LD_ADDR_VAR 0 3
15362: PUSH
15363: LD_INT 83
15365: PPUSH
15366: LD_VAR 0 1
15370: PPUSH
15371: CALL_OW 321
15375: PUSH
15376: LD_INT 2
15378: EQUAL
15379: ST_TO_ADDR
15380: GO 15482
15382: LD_INT 17
15384: DOUBLE
15385: EQUAL
15386: IFTRUE 15390
15388: GO 15415
15390: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15391: LD_ADDR_VAR 0 3
15395: PUSH
15396: LD_INT 39
15398: PPUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 321
15408: PUSH
15409: LD_INT 2
15411: EQUAL
15412: ST_TO_ADDR
15413: GO 15482
15415: LD_INT 18
15417: DOUBLE
15418: EQUAL
15419: IFTRUE 15423
15421: GO 15448
15423: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15424: LD_ADDR_VAR 0 3
15428: PUSH
15429: LD_INT 40
15431: PPUSH
15432: LD_VAR 0 1
15436: PPUSH
15437: CALL_OW 321
15441: PUSH
15442: LD_INT 2
15444: EQUAL
15445: ST_TO_ADDR
15446: GO 15482
15448: LD_INT 27
15450: DOUBLE
15451: EQUAL
15452: IFTRUE 15456
15454: GO 15481
15456: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15457: LD_ADDR_VAR 0 3
15461: PUSH
15462: LD_INT 35
15464: PPUSH
15465: LD_VAR 0 1
15469: PPUSH
15470: CALL_OW 321
15474: PUSH
15475: LD_INT 2
15477: EQUAL
15478: ST_TO_ADDR
15479: GO 15482
15481: POP
// end ;
15482: LD_VAR 0 3
15486: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15487: LD_INT 0
15489: PPUSH
15490: PPUSH
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
15495: PPUSH
15496: PPUSH
15497: PPUSH
15498: PPUSH
15499: PPUSH
// result := false ;
15500: LD_ADDR_VAR 0 6
15504: PUSH
15505: LD_INT 0
15507: ST_TO_ADDR
// if btype = b_depot then
15508: LD_VAR 0 2
15512: PUSH
15513: LD_INT 0
15515: EQUAL
15516: IFFALSE 15528
// begin result := true ;
15518: LD_ADDR_VAR 0 6
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// exit ;
15526: GO 16382
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15528: LD_VAR 0 1
15532: NOT
15533: IFTRUE 15558
15535: PUSH
15536: LD_VAR 0 1
15540: PPUSH
15541: CALL_OW 266
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: IN
15556: NOT
15557: OR
15558: IFTRUE 15567
15560: PUSH
15561: LD_VAR 0 2
15565: NOT
15566: OR
15567: IFTRUE 15603
15569: PUSH
15570: LD_VAR 0 5
15574: PUSH
15575: LD_INT 0
15577: PUSH
15578: LD_INT 1
15580: PUSH
15581: LD_INT 2
15583: PUSH
15584: LD_INT 3
15586: PUSH
15587: LD_INT 4
15589: PUSH
15590: LD_INT 5
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: IN
15601: NOT
15602: OR
15603: IFTRUE 15622
15605: PUSH
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_VAR 0 4
15615: PPUSH
15616: CALL_OW 488
15620: NOT
15621: OR
15622: IFFALSE 15626
// exit ;
15624: GO 16382
// side := GetSide ( depot ) ;
15626: LD_ADDR_VAR 0 9
15630: PUSH
15631: LD_VAR 0 1
15635: PPUSH
15636: CALL_OW 255
15640: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15641: LD_VAR 0 9
15645: PPUSH
15646: LD_VAR 0 2
15650: PPUSH
15651: CALL 15111 0 2
15655: NOT
15656: IFFALSE 15660
// exit ;
15658: GO 16382
// pom := GetBase ( depot ) ;
15660: LD_ADDR_VAR 0 10
15664: PUSH
15665: LD_VAR 0 1
15669: PPUSH
15670: CALL_OW 274
15674: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15675: LD_ADDR_VAR 0 11
15679: PUSH
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 248
15694: PPUSH
15695: CALL_OW 450
15699: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15700: LD_VAR 0 10
15704: PPUSH
15705: LD_INT 1
15707: PPUSH
15708: CALL_OW 275
15712: PUSH
15713: LD_VAR 0 11
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: GREATEREQUAL
15722: IFFALSE 15748
15724: PUSH
15725: LD_VAR 0 10
15729: PPUSH
15730: LD_INT 2
15732: PPUSH
15733: CALL_OW 275
15737: PUSH
15738: LD_VAR 0 11
15742: PUSH
15743: LD_INT 2
15745: ARRAY
15746: GREATEREQUAL
15747: AND
15748: IFFALSE 15774
15750: PUSH
15751: LD_VAR 0 10
15755: PPUSH
15756: LD_INT 3
15758: PPUSH
15759: CALL_OW 275
15763: PUSH
15764: LD_VAR 0 11
15768: PUSH
15769: LD_INT 3
15771: ARRAY
15772: GREATEREQUAL
15773: AND
15774: NOT
15775: IFFALSE 15779
// exit ;
15777: GO 16382
// if GetBType ( depot ) = b_depot then
15779: LD_VAR 0 1
15783: PPUSH
15784: CALL_OW 266
15788: PUSH
15789: LD_INT 0
15791: EQUAL
15792: IFFALSE 15804
// dist := 28 else
15794: LD_ADDR_VAR 0 14
15798: PUSH
15799: LD_INT 28
15801: ST_TO_ADDR
15802: GO 15812
// dist := 36 ;
15804: LD_ADDR_VAR 0 14
15808: PUSH
15809: LD_INT 36
15811: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15812: LD_VAR 0 1
15816: PPUSH
15817: LD_VAR 0 3
15821: PPUSH
15822: LD_VAR 0 4
15826: PPUSH
15827: CALL_OW 297
15831: PUSH
15832: LD_VAR 0 14
15836: GREATER
15837: IFFALSE 15841
// exit ;
15839: GO 16382
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15841: LD_ADDR_VAR 0 12
15845: PUSH
15846: LD_VAR 0 2
15850: PPUSH
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_VAR 0 4
15860: PPUSH
15861: LD_VAR 0 5
15865: PPUSH
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 248
15875: PPUSH
15876: LD_INT 0
15878: PPUSH
15879: CALL 16387 0 6
15883: ST_TO_ADDR
// if not hexes then
15884: LD_VAR 0 12
15888: NOT
15889: IFFALSE 15893
// exit ;
15891: GO 16382
// hex := GetHexInfo ( x , y ) ;
15893: LD_ADDR_VAR 0 15
15897: PUSH
15898: LD_VAR 0 3
15902: PPUSH
15903: LD_VAR 0 4
15907: PPUSH
15908: CALL_OW 546
15912: ST_TO_ADDR
// if hex [ 1 ] then
15913: LD_VAR 0 15
15917: PUSH
15918: LD_INT 1
15920: ARRAY
15921: IFFALSE 15925
// exit ;
15923: GO 16382
// height := hex [ 2 ] ;
15925: LD_ADDR_VAR 0 13
15929: PUSH
15930: LD_VAR 0 15
15934: PUSH
15935: LD_INT 2
15937: ARRAY
15938: ST_TO_ADDR
// for i = 1 to hexes do
15939: LD_ADDR_VAR 0 7
15943: PUSH
15944: DOUBLE
15945: LD_INT 1
15947: DEC
15948: ST_TO_ADDR
15949: LD_VAR 0 12
15953: PUSH
15954: FOR_TO
15955: IFFALSE 16299
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15957: LD_VAR 0 12
15961: PUSH
15962: LD_VAR 0 7
15966: ARRAY
15967: PUSH
15968: LD_INT 1
15970: ARRAY
15971: PPUSH
15972: LD_VAR 0 12
15976: PUSH
15977: LD_VAR 0 7
15981: ARRAY
15982: PUSH
15983: LD_INT 2
15985: ARRAY
15986: PPUSH
15987: CALL_OW 488
15991: NOT
15992: IFTRUE 16034
15994: PUSH
15995: LD_VAR 0 12
15999: PUSH
16000: LD_VAR 0 7
16004: ARRAY
16005: PUSH
16006: LD_INT 1
16008: ARRAY
16009: PPUSH
16010: LD_VAR 0 12
16014: PUSH
16015: LD_VAR 0 7
16019: ARRAY
16020: PUSH
16021: LD_INT 2
16023: ARRAY
16024: PPUSH
16025: CALL_OW 428
16029: PUSH
16030: LD_INT 0
16032: GREATER
16033: OR
16034: IFTRUE 16072
16036: PUSH
16037: LD_VAR 0 12
16041: PUSH
16042: LD_VAR 0 7
16046: ARRAY
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: LD_VAR 0 12
16056: PUSH
16057: LD_VAR 0 7
16061: ARRAY
16062: PUSH
16063: LD_INT 2
16065: ARRAY
16066: PPUSH
16067: CALL_OW 351
16071: OR
16072: IFFALSE 16078
// exit ;
16074: POP
16075: POP
16076: GO 16382
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16078: LD_ADDR_VAR 0 8
16082: PUSH
16083: LD_VAR 0 12
16087: PUSH
16088: LD_VAR 0 7
16092: ARRAY
16093: PUSH
16094: LD_INT 1
16096: ARRAY
16097: PPUSH
16098: LD_VAR 0 12
16102: PUSH
16103: LD_VAR 0 7
16107: ARRAY
16108: PUSH
16109: LD_INT 2
16111: ARRAY
16112: PPUSH
16113: CALL_OW 546
16117: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16118: LD_VAR 0 8
16122: PUSH
16123: LD_INT 1
16125: ARRAY
16126: IFTRUE 16148
16128: PUSH
16129: LD_VAR 0 8
16133: PUSH
16134: LD_INT 2
16136: ARRAY
16137: PUSH
16138: LD_VAR 0 13
16142: PUSH
16143: LD_INT 2
16145: PLUS
16146: GREATER
16147: OR
16148: IFTRUE 16170
16150: PUSH
16151: LD_VAR 0 8
16155: PUSH
16156: LD_INT 2
16158: ARRAY
16159: PUSH
16160: LD_VAR 0 13
16164: PUSH
16165: LD_INT 2
16167: MINUS
16168: LESS
16169: OR
16170: IFTRUE 16238
16172: PUSH
16173: LD_VAR 0 8
16177: PUSH
16178: LD_INT 3
16180: ARRAY
16181: PUSH
16182: LD_INT 0
16184: PUSH
16185: LD_INT 8
16187: PUSH
16188: LD_INT 9
16190: PUSH
16191: LD_INT 10
16193: PUSH
16194: LD_INT 11
16196: PUSH
16197: LD_INT 12
16199: PUSH
16200: LD_INT 13
16202: PUSH
16203: LD_INT 16
16205: PUSH
16206: LD_INT 17
16208: PUSH
16209: LD_INT 18
16211: PUSH
16212: LD_INT 19
16214: PUSH
16215: LD_INT 20
16217: PUSH
16218: LD_INT 21
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: IN
16236: NOT
16237: OR
16238: IFTRUE 16251
16240: PUSH
16241: LD_VAR 0 8
16245: PUSH
16246: LD_INT 5
16248: ARRAY
16249: NOT
16250: OR
16251: IFTRUE 16291
16253: PUSH
16254: LD_VAR 0 8
16258: PUSH
16259: LD_INT 6
16261: ARRAY
16262: PUSH
16263: LD_INT 1
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 7
16271: PUSH
16272: LD_INT 9
16274: PUSH
16275: LD_INT 10
16277: PUSH
16278: LD_INT 11
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: IN
16289: NOT
16290: OR
16291: IFFALSE 16297
// exit ;
16293: POP
16294: POP
16295: GO 16382
// end ;
16297: GO 15954
16299: POP
16300: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16301: LD_VAR 0 9
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: LD_VAR 0 4
16315: PPUSH
16316: LD_INT 20
16318: PPUSH
16319: CALL 8201 0 4
16323: PUSH
16324: LD_INT 4
16326: ARRAY
16327: IFFALSE 16331
// exit ;
16329: GO 16382
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16331: LD_VAR 0 2
16335: PUSH
16336: LD_INT 29
16338: PUSH
16339: LD_INT 30
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: IN
16346: IFFALSE 16370
16348: PUSH
16349: LD_VAR 0 3
16353: PPUSH
16354: LD_VAR 0 4
16358: PPUSH
16359: LD_VAR 0 9
16363: PPUSH
16364: CALL_OW 440
16368: NOT
16369: AND
16370: IFFALSE 16374
// exit ;
16372: GO 16382
// result := true ;
16374: LD_ADDR_VAR 0 6
16378: PUSH
16379: LD_INT 1
16381: ST_TO_ADDR
// end ;
16382: LD_VAR 0 6
16386: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16387: LD_INT 0
16389: PPUSH
16390: PPUSH
16391: PPUSH
16392: PPUSH
16393: PPUSH
16394: PPUSH
16395: PPUSH
16396: PPUSH
16397: PPUSH
16398: PPUSH
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
16439: PPUSH
16440: PPUSH
16441: PPUSH
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
// result = [ ] ;
16447: LD_ADDR_VAR 0 7
16451: PUSH
16452: EMPTY
16453: ST_TO_ADDR
// temp_list = [ ] ;
16454: LD_ADDR_VAR 0 9
16458: PUSH
16459: EMPTY
16460: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16461: LD_VAR 0 4
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: LD_INT 4
16480: PUSH
16481: LD_INT 5
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: IN
16492: NOT
16493: IFTRUE 16536
16495: PUSH
16496: LD_VAR 0 1
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: LD_INT 1
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: IN
16511: IFFALSE 16535
16513: PUSH
16514: LD_VAR 0 5
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: LD_INT 2
16524: PUSH
16525: LD_INT 3
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: IN
16533: NOT
16534: AND
16535: OR
16536: IFFALSE 16540
// exit ;
16538: GO 34939
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16540: LD_VAR 0 1
16544: PUSH
16545: LD_INT 6
16547: PUSH
16548: LD_INT 7
16550: PUSH
16551: LD_INT 8
16553: PUSH
16554: LD_INT 13
16556: PUSH
16557: LD_INT 12
16559: PUSH
16560: LD_INT 15
16562: PUSH
16563: LD_INT 11
16565: PUSH
16566: LD_INT 14
16568: PUSH
16569: LD_INT 10
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: IN
16583: IFFALSE 16593
// btype = b_lab ;
16585: LD_ADDR_VAR 0 1
16589: PUSH
16590: LD_INT 6
16592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16593: LD_VAR 0 6
16597: PUSH
16598: LD_INT 0
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: IN
16612: NOT
16613: IFTRUE 16681
16615: PUSH
16616: LD_VAR 0 1
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: LD_INT 6
16635: PUSH
16636: LD_INT 36
16638: PUSH
16639: LD_INT 4
16641: PUSH
16642: LD_INT 5
16644: PUSH
16645: LD_INT 31
16647: PUSH
16648: LD_INT 32
16650: PUSH
16651: LD_INT 33
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: IN
16667: NOT
16668: IFFALSE 16680
16670: PUSH
16671: LD_VAR 0 6
16675: PUSH
16676: LD_INT 1
16678: EQUAL
16679: AND
16680: OR
16681: IFTRUE 16713
16683: PUSH
16684: LD_VAR 0 1
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 3
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: IN
16699: NOT
16700: IFFALSE 16712
16702: PUSH
16703: LD_VAR 0 6
16707: PUSH
16708: LD_INT 2
16710: EQUAL
16711: AND
16712: OR
16713: IFFALSE 16723
// mode = 0 ;
16715: LD_ADDR_VAR 0 6
16719: PUSH
16720: LD_INT 0
16722: ST_TO_ADDR
// case mode of 0 :
16723: LD_VAR 0 6
16727: PUSH
16728: LD_INT 0
16730: DOUBLE
16731: EQUAL
16732: IFTRUE 16736
16734: GO 28189
16736: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16737: LD_ADDR_VAR 0 11
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: LD_INT 0
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: LD_INT 1
16757: NEG
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 1
16765: PUSH
16766: LD_INT 0
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 1
16795: NEG
16796: PUSH
16797: LD_INT 0
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 1
16806: NEG
16807: PUSH
16808: LD_INT 1
16810: NEG
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 1
16818: NEG
16819: PUSH
16820: LD_INT 2
16822: NEG
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 0
16830: PUSH
16831: LD_INT 2
16833: NEG
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: LD_INT 1
16844: NEG
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 1
16872: NEG
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: LD_INT 3
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 0
16893: PUSH
16894: LD_INT 3
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 1
16903: NEG
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16930: LD_ADDR_VAR 0 12
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: LD_INT 0
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: LD_INT 1
16950: NEG
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 1
16958: PUSH
16959: LD_INT 0
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 1
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 0
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 1
16988: NEG
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 1
16999: NEG
17000: PUSH
17001: LD_INT 1
17003: NEG
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: LD_INT 1
17014: NEG
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 1
17042: NEG
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 2
17053: NEG
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 2
17064: NEG
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 2
17076: NEG
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 3
17087: NEG
17088: PUSH
17089: LD_INT 0
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 3
17098: NEG
17099: PUSH
17100: LD_INT 1
17102: NEG
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17126: LD_ADDR_VAR 0 13
17130: PUSH
17131: LD_INT 0
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 0
17143: PUSH
17144: LD_INT 1
17146: NEG
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: LD_INT 0
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 1
17164: PUSH
17165: LD_INT 1
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 0
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: NEG
17185: PUSH
17186: LD_INT 0
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 1
17195: NEG
17196: PUSH
17197: LD_INT 1
17199: NEG
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 1
17207: NEG
17208: PUSH
17209: LD_INT 2
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 2
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 2
17249: NEG
17250: PUSH
17251: LD_INT 1
17253: NEG
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: LD_INT 2
17265: NEG
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 2
17273: NEG
17274: PUSH
17275: LD_INT 3
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 3
17285: NEG
17286: PUSH
17287: LD_INT 2
17289: NEG
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 3
17297: NEG
17298: PUSH
17299: LD_INT 3
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17325: LD_ADDR_VAR 0 14
17329: PUSH
17330: LD_INT 0
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 0
17342: PUSH
17343: LD_INT 1
17345: NEG
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 1
17383: NEG
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 1
17394: NEG
17395: PUSH
17396: LD_INT 1
17398: NEG
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 1
17406: NEG
17407: PUSH
17408: LD_INT 2
17410: NEG
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: LD_INT 2
17421: NEG
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 1
17429: PUSH
17430: LD_INT 1
17432: NEG
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: LD_INT 2
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 0
17450: PUSH
17451: LD_INT 2
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 1
17460: NEG
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 1
17471: NEG
17472: PUSH
17473: LD_INT 3
17475: NEG
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: LD_INT 3
17486: NEG
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: LD_INT 2
17497: NEG
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17521: LD_ADDR_VAR 0 15
17525: PUSH
17526: LD_INT 0
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 1
17541: NEG
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: NEG
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 1
17590: NEG
17591: PUSH
17592: LD_INT 1
17594: NEG
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: LD_INT 1
17605: NEG
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 2
17644: NEG
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: NEG
17656: PUSH
17657: LD_INT 1
17659: NEG
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 2
17667: PUSH
17668: LD_INT 1
17670: NEG
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 3
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 3
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17714: LD_ADDR_VAR 0 16
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: LD_INT 0
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 0
17731: PUSH
17732: LD_INT 1
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: LD_INT 1
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: NEG
17784: PUSH
17785: LD_INT 1
17787: NEG
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: NEG
17796: PUSH
17797: LD_INT 2
17799: NEG
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 2
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 2
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 2
17837: NEG
17838: PUSH
17839: LD_INT 1
17841: NEG
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 2
17849: NEG
17850: PUSH
17851: LD_INT 2
17853: NEG
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 3
17861: PUSH
17862: LD_INT 2
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: LD_INT 3
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 2
17881: PUSH
17882: LD_INT 3
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17907: LD_ADDR_VAR 0 17
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: LD_INT 0
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 1
17927: NEG
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 0
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: NEG
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: NEG
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 0
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: LD_INT 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: NEG
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: NEG
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 2
18106: NEG
18107: PUSH
18108: LD_INT 2
18110: NEG
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18137: LD_ADDR_VAR 0 18
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 0
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: NEG
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: NEG
18325: PUSH
18326: LD_INT 1
18328: NEG
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 2
18336: NEG
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18367: LD_ADDR_VAR 0 19
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: LD_INT 1
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: NEG
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 1
18448: NEG
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: LD_INT 2
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 2
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: LD_INT 2
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: NEG
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: NEG
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 2
18554: NEG
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: NEG
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18597: LD_ADDR_VAR 0 20
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: LD_INT 1
18617: NEG
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: NEG
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 0
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: LD_INT 0
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: NEG
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 2
18773: NEG
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: NEG
18785: PUSH
18786: LD_INT 1
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 2
18796: NEG
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18827: LD_ADDR_VAR 0 21
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 2
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: NEG
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: NEG
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19057: LD_ADDR_VAR 0 22
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 1
19115: NEG
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: NEG
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: LD_INT 2
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 2
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: LD_INT 2
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 2
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: NEG
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: NEG
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: NEG
19257: PUSH
19258: LD_INT 2
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19287: LD_ADDR_VAR 0 23
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 0
19304: PUSH
19305: LD_INT 1
19307: NEG
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 0
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: NEG
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 1
19356: NEG
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 2
19383: NEG
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: LD_INT 1
19394: NEG
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: NEG
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 2
19474: NEG
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 2
19486: NEG
19487: PUSH
19488: LD_INT 2
19490: NEG
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 2
19498: NEG
19499: PUSH
19500: LD_INT 3
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: NEG
19511: PUSH
19512: LD_INT 3
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: LD_INT 1
19536: NEG
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19567: LD_ADDR_VAR 0 24
19571: PUSH
19572: LD_INT 0
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: LD_INT 1
19640: NEG
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: LD_INT 2
19652: NEG
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: LD_INT 1
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 2
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 1
19712: PUSH
19713: LD_INT 2
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 0
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: NEG
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: NEG
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 2
19766: NEG
19767: PUSH
19768: LD_INT 2
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 2
19781: NEG
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 2
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 3
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 3
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19843: LD_ADDR_VAR 0 25
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: LD_INT 0
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 0
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: LD_INT 0
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: LD_INT 1
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: LD_INT 2
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: LD_INT 2
19939: NEG
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 1
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 2
19978: PUSH
19979: LD_INT 2
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: LD_INT 2
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 2
20019: NEG
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 2
20042: NEG
20043: PUSH
20044: LD_INT 2
20046: NEG
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 3
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: LD_INT 2
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: LD_INT 3
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: LD_INT 3
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20117: LD_ADDR_VAR 0 26
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: NEG
20199: PUSH
20200: LD_INT 2
20202: NEG
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 2
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 0
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 2
20304: NEG
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 2
20316: NEG
20317: PUSH
20318: LD_INT 2
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 2
20328: PUSH
20329: LD_INT 3
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: PUSH
20339: LD_INT 3
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: LD_INT 2
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20393: LD_ADDR_VAR 0 27
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: NEG
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: NEG
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: LD_INT 2
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 3
20626: NEG
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 3
20638: NEG
20639: PUSH
20640: LD_INT 2
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20673: LD_ADDR_VAR 0 28
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 0
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: NEG
20732: PUSH
20733: LD_INT 0
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: NEG
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: LD_INT 2
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 2
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 2
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: LD_INT 0
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: NEG
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 2
20884: NEG
20885: PUSH
20886: LD_INT 3
20888: NEG
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 1
20896: NEG
20897: PUSH
20898: LD_INT 3
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 3
20908: NEG
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 3
20920: NEG
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20955: LD_ADDR_VAR 0 29
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 1
21013: NEG
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: LD_INT 2
21051: NEG
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: NEG
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: NEG
21146: PUSH
21147: LD_INT 3
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: PUSH
21158: LD_INT 1
21160: NEG
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 3
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 3
21199: NEG
21200: PUSH
21201: LD_INT 2
21203: NEG
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21234: LD_ADDR_VAR 0 30
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: NEG
21304: PUSH
21305: LD_INT 1
21307: NEG
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: LD_INT 2
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: LD_INT 1
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 3
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 3
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 3
21477: NEG
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21512: LD_ADDR_VAR 0 31
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: LD_INT 2
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 2
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: LD_INT 2
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 2
21677: NEG
21678: PUSH
21679: LD_INT 1
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 2
21689: NEG
21690: PUSH
21691: LD_INT 2
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 2
21701: NEG
21702: PUSH
21703: LD_INT 3
21705: NEG
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 2
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 3
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 3
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 3
21755: NEG
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21790: LD_ADDR_VAR 0 32
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 2
21905: PUSH
21906: LD_INT 1
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 2
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: NEG
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: NEG
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: LD_INT 3
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: LD_INT 2
21994: NEG
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 3
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: LD_INT 3
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 3
22033: NEG
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22068: LD_ADDR_VAR 0 33
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 1
22126: NEG
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: LD_INT 2
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 2
22234: NEG
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: NEG
22247: PUSH
22248: LD_INT 2
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: LD_INT 3
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 3
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 3
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 3
22312: NEG
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22347: LD_ADDR_VAR 0 34
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: LD_INT 2
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 2
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: LD_INT 2
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: LD_INT 3
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: LD_INT 2
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: LD_INT 3
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: NEG
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 3
22592: NEG
22593: PUSH
22594: LD_INT 1
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22627: LD_ADDR_VAR 0 35
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: LD_INT 1
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 1
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22739: LD_ADDR_VAR 0 36
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: LD_INT 1
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: LD_INT 2
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22851: LD_ADDR_VAR 0 37
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: NEG
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22963: LD_ADDR_VAR 0 38
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: NEG
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23075: LD_ADDR_VAR 0 39
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: NEG
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 1
23156: NEG
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23187: LD_ADDR_VAR 0 40
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23299: LD_ADDR_VAR 0 41
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 2
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: LD_INT 1
23395: NEG
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 2
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 2
23465: NEG
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: NEG
23478: PUSH
23479: LD_INT 2
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: NEG
23490: PUSH
23491: LD_INT 3
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 3
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 3
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 3
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: LD_INT 3
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 3
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 3
23573: NEG
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 3
23584: NEG
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 3
23596: NEG
23597: PUSH
23598: LD_INT 2
23600: NEG
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 3
23608: NEG
23609: PUSH
23610: LD_INT 3
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23649: LD_ADDR_VAR 0 42
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: LD_INT 2
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 2
23745: NEG
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 1
23756: NEG
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: LD_INT 3
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: LD_INT 3
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: LD_INT 3
23866: NEG
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 3
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 3
23895: PUSH
23896: LD_INT 3
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: LD_INT 3
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: LD_INT 3
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: LD_INT 3
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 3
23946: NEG
23947: PUSH
23948: LD_INT 2
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 3
23958: NEG
23959: PUSH
23960: LD_INT 3
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23999: LD_ADDR_VAR 0 43
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 2
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 2
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 2
24165: NEG
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: NEG
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: NEG
24189: PUSH
24190: LD_INT 3
24192: NEG
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: LD_INT 3
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: LD_INT 2
24214: NEG
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 2
24222: PUSH
24223: LD_INT 1
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 3
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 3
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 1
24253: PUSH
24254: LD_INT 3
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: LD_INT 3
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: NEG
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 3
24295: NEG
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 3
24306: NEG
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24347: LD_ADDR_VAR 0 44
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 1
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: NEG
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: LD_INT 2
24432: NEG
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: LD_INT 2
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 2
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: NEG
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: NEG
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 2
24525: NEG
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 2
24537: NEG
24538: PUSH
24539: LD_INT 3
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 3
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 3
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 3
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 3
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 2
24610: NEG
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 3
24632: NEG
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 3
24644: NEG
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 3
24656: NEG
24657: PUSH
24658: LD_INT 3
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24697: LD_ADDR_VAR 0 45
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: NEG
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: NEG
24779: PUSH
24780: LD_INT 2
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 2
24793: NEG
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 1
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 0
24842: PUSH
24843: LD_INT 2
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 2
24875: NEG
24876: PUSH
24877: LD_INT 2
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: NEG
24888: PUSH
24889: LD_INT 3
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 3
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: LD_INT 3
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 3
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 3
24943: PUSH
24944: LD_INT 3
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 2
24953: PUSH
24954: LD_INT 3
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: LD_INT 3
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: LD_INT 3
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 3
24994: NEG
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 3
25006: NEG
25007: PUSH
25008: LD_INT 3
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25047: LD_ADDR_VAR 0 46
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: LD_INT 2
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: LD_INT 2
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 2
25213: NEG
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 2
25224: NEG
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: LD_INT 3
25240: NEG
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 3
25251: NEG
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: LD_INT 2
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 3
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 3
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: LD_INT 3
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 3
25343: NEG
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 3
25354: NEG
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25395: LD_ADDR_VAR 0 47
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: NEG
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: NEG
25523: PUSH
25524: LD_INT 2
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25546: LD_ADDR_VAR 0 48
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: LD_INT 0
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 2
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25693: LD_ADDR_VAR 0 49
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 0
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 2
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25837: LD_ADDR_VAR 0 50
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 2
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25981: LD_ADDR_VAR 0 51
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: LD_INT 0
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 0
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: NEG
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26128: LD_ADDR_VAR 0 52
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 2
26232: NEG
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: NEG
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26279: LD_ADDR_VAR 0 53
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26509: LD_ADDR_VAR 0 54
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 2
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: LD_INT 2
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 2
26696: NEG
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: NEG
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26739: LD_ADDR_VAR 0 55
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: LD_INT 2
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: NEG
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: NEG
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 2
26926: NEG
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: LD_INT 2
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26969: LD_ADDR_VAR 0 56
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 2
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 2
27156: NEG
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: NEG
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27199: LD_ADDR_VAR 0 57
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: NEG
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27429: LD_ADDR_VAR 0 58
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: LD_INT 2
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27659: LD_ADDR_VAR 0 59
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27747: LD_ADDR_VAR 0 60
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: NEG
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27835: LD_ADDR_VAR 0 61
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27923: LD_ADDR_VAR 0 62
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28011: LD_ADDR_VAR 0 63
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28099: LD_ADDR_VAR 0 64
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: ST_TO_ADDR
// end ; 1 :
28187: GO 34084
28189: LD_INT 1
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 30820
28197: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28198: LD_ADDR_VAR 0 11
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: LD_INT 3
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: LD_INT 3
28220: NEG
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28242: LD_ADDR_VAR 0 12
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28283: LD_ADDR_VAR 0 13
28287: PUSH
28288: LD_INT 3
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 3
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 3
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: LIST
28322: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28323: LD_ADDR_VAR 0 14
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28364: LD_ADDR_VAR 0 15
28368: PUSH
28369: LD_INT 2
28371: NEG
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 3
28382: NEG
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 3
28393: NEG
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28408: LD_ADDR_VAR 0 16
28412: PUSH
28413: LD_INT 2
28415: NEG
28416: PUSH
28417: LD_INT 3
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 3
28427: NEG
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 3
28439: NEG
28440: PUSH
28441: LD_INT 3
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28454: LD_ADDR_VAR 0 17
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: LD_INT 3
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 3
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28498: LD_ADDR_VAR 0 18
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 3
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 3
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: LIST
28538: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28539: LD_ADDR_VAR 0 19
28543: PUSH
28544: LD_INT 3
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: LD_INT 3
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28579: LD_ADDR_VAR 0 20
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28620: LD_ADDR_VAR 0 21
28624: PUSH
28625: LD_INT 2
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 3
28638: NEG
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 3
28649: NEG
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28664: LD_ADDR_VAR 0 22
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: LD_INT 3
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 3
28683: NEG
28684: PUSH
28685: LD_INT 2
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 3
28695: NEG
28696: PUSH
28697: LD_INT 3
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28710: LD_ADDR_VAR 0 23
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 3
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: LD_INT 4
28732: NEG
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: LD_INT 3
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28754: LD_ADDR_VAR 0 24
28758: PUSH
28759: LD_INT 3
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 3
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 4
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: LIST
28794: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28795: LD_ADDR_VAR 0 25
28799: PUSH
28800: LD_INT 3
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 4
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 3
28822: PUSH
28823: LD_INT 4
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28835: LD_ADDR_VAR 0 26
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 3
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: LD_INT 4
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: LD_INT 3
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: LIST
28875: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28876: LD_ADDR_VAR 0 27
28880: PUSH
28881: LD_INT 3
28883: NEG
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 3
28894: NEG
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 4
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28920: LD_ADDR_VAR 0 28
28924: PUSH
28925: LD_INT 3
28927: NEG
28928: PUSH
28929: LD_INT 3
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 3
28939: NEG
28940: PUSH
28941: LD_INT 4
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 4
28951: NEG
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28966: LD_ADDR_VAR 0 29
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PUSH
28975: LD_INT 3
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: LD_INT 3
28988: NEG
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 2
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 4
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 4
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 3
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: LD_INT 5
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 5
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 4
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: LD_INT 6
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: LD_INT 6
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 5
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29121: LD_ADDR_VAR 0 30
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: LD_INT 1
29131: NEG
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 3
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 3
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 4
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 4
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 4
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 5
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 5
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 5
29221: PUSH
29222: LD_INT 1
29224: NEG
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 6
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 6
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29264: LD_ADDR_VAR 0 31
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 3
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 3
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 4
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 4
29311: PUSH
29312: LD_INT 4
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: LD_INT 4
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 5
29331: PUSH
29332: LD_INT 4
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 5
29341: PUSH
29342: LD_INT 5
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 4
29351: PUSH
29352: LD_INT 5
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 6
29361: PUSH
29362: LD_INT 5
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 6
29371: PUSH
29372: LD_INT 6
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 5
29381: PUSH
29382: LD_INT 6
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29403: LD_ADDR_VAR 0 32
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: LD_INT 3
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: LD_INT 4
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: LD_INT 4
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: LD_INT 3
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: LD_INT 5
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: LD_INT 5
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: LD_INT 4
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: LD_INT 6
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 6
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: LD_INT 5
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29546: LD_ADDR_VAR 0 33
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 3
29564: NEG
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: NEG
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 4
29598: NEG
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 4
29609: NEG
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 4
29621: NEG
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 5
29632: NEG
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 5
29643: NEG
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 5
29655: NEG
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 6
29666: NEG
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 6
29677: NEG
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29701: LD_ADDR_VAR 0 34
29705: PUSH
29706: LD_INT 2
29708: NEG
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 3
29732: NEG
29733: PUSH
29734: LD_INT 3
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: NEG
29745: PUSH
29746: LD_INT 4
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 4
29756: NEG
29757: PUSH
29758: LD_INT 3
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 4
29768: NEG
29769: PUSH
29770: LD_INT 4
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 4
29780: NEG
29781: PUSH
29782: LD_INT 5
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 5
29792: NEG
29793: PUSH
29794: LD_INT 4
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 5
29804: NEG
29805: PUSH
29806: LD_INT 5
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 5
29816: NEG
29817: PUSH
29818: LD_INT 6
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 6
29828: NEG
29829: PUSH
29830: LD_INT 5
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 6
29840: NEG
29841: PUSH
29842: LD_INT 6
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29864: LD_ADDR_VAR 0 41
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 2
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29908: LD_ADDR_VAR 0 42
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 3
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29949: LD_ADDR_VAR 0 43
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 3
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 3
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29989: LD_ADDR_VAR 0 44
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 3
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 1
30016: NEG
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30030: LD_ADDR_VAR 0 45
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30074: LD_ADDR_VAR 0 46
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: LD_INT 2
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: LD_INT 3
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 3
30105: NEG
30106: PUSH
30107: LD_INT 2
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30120: LD_ADDR_VAR 0 47
30124: PUSH
30125: LD_INT 2
30127: NEG
30128: PUSH
30129: LD_INT 3
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: LD_INT 3
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30153: LD_ADDR_VAR 0 48
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30184: LD_ADDR_VAR 0 49
30188: PUSH
30189: LD_INT 3
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30213: LD_ADDR_VAR 0 50
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: LD_INT 3
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30242: LD_ADDR_VAR 0 51
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: NEG
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30273: LD_ADDR_VAR 0 52
30277: PUSH
30278: LD_INT 3
30280: NEG
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: NEG
30293: PUSH
30294: LD_INT 2
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30306: LD_ADDR_VAR 0 53
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: LD_INT 3
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30350: LD_ADDR_VAR 0 54
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 3
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: LIST
30390: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30391: LD_ADDR_VAR 0 55
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30431: LD_ADDR_VAR 0 56
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: LD_INT 3
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30472: LD_ADDR_VAR 0 57
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30516: LD_ADDR_VAR 0 58
30520: PUSH
30521: LD_INT 2
30523: NEG
30524: PUSH
30525: LD_INT 3
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 3
30535: NEG
30536: PUSH
30537: LD_INT 2
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30562: LD_ADDR_VAR 0 59
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 2
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30606: LD_ADDR_VAR 0 60
30610: PUSH
30611: LD_INT 1
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30647: LD_ADDR_VAR 0 61
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 2
30664: PUSH
30665: LD_INT 2
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30687: LD_ADDR_VAR 0 62
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 2
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30728: LD_ADDR_VAR 0 63
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: NEG
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30772: LD_ADDR_VAR 0 64
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 2
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 2
30803: NEG
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// end ; 2 :
30818: GO 34084
30820: LD_INT 2
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 34083
30828: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30829: LD_ADDR_VAR 0 29
30833: PUSH
30834: LD_INT 4
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 5
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 5
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 4
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 3
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: LD_INT 2
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 5
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 3
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 4
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 4
30959: PUSH
30960: LD_INT 4
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 3
30969: PUSH
30970: LD_INT 4
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 4
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 4
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: LD_INT 4
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 5
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: LD_INT 4
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 5
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: NEG
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 3
31112: NEG
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 3
31157: NEG
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: NEG
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 4
31179: NEG
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 4
31191: NEG
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: NEG
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 4
31214: NEG
31215: PUSH
31216: LD_INT 4
31218: NEG
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 4
31226: NEG
31227: PUSH
31228: LD_INT 5
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 3
31238: NEG
31239: PUSH
31240: LD_INT 4
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 3
31250: NEG
31251: PUSH
31252: LD_INT 3
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 4
31262: NEG
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 5
31274: NEG
31275: PUSH
31276: LD_INT 4
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 5
31286: NEG
31287: PUSH
31288: LD_INT 5
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 3
31298: NEG
31299: PUSH
31300: LD_INT 5
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 5
31310: NEG
31311: PUSH
31312: LD_INT 3
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31367: LD_ADDR_VAR 0 30
31371: PUSH
31372: LD_INT 4
31374: PUSH
31375: LD_INT 4
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 4
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 5
31394: PUSH
31395: LD_INT 4
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 5
31404: PUSH
31405: LD_INT 5
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 4
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 3
31424: PUSH
31425: LD_INT 4
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 3
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 5
31444: PUSH
31445: LD_INT 3
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 5
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: LD_INT 4
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 4
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 4
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: NEG
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 4
31557: NEG
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 4
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 3
31591: NEG
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 4
31602: NEG
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 5
31613: NEG
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 5
31624: NEG
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 5
31636: NEG
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 3
31648: NEG
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 3
31659: NEG
31660: PUSH
31661: LD_INT 3
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 3
31671: NEG
31672: PUSH
31673: LD_INT 4
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: NEG
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: NEG
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 4
31719: NEG
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 4
31731: NEG
31732: PUSH
31733: LD_INT 4
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: LD_INT 4
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 4
31755: NEG
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: LD_INT 4
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 5
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: LD_INT 4
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 3
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: LD_INT 3
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 4
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: LD_INT 5
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: LD_INT 3
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: LD_INT 5
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31914: LD_ADDR_VAR 0 31
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 4
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 5
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 3
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 5
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 3
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 3
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 3
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 4
32070: NEG
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 4
32081: NEG
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 4
32093: NEG
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 4
32116: NEG
32117: PUSH
32118: LD_INT 4
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 4
32128: NEG
32129: PUSH
32130: LD_INT 5
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 3
32140: NEG
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: NEG
32153: PUSH
32154: LD_INT 3
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 4
32164: NEG
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 5
32176: NEG
32177: PUSH
32178: LD_INT 4
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 5
32188: NEG
32189: PUSH
32190: LD_INT 5
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 3
32200: NEG
32201: PUSH
32202: LD_INT 5
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 5
32212: NEG
32213: PUSH
32214: LD_INT 3
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 3
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 4
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: LD_INT 3
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 4
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 4
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 4
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 4
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 5
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 4
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 5
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32464: LD_ADDR_VAR 0 32
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 4
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 3
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 4
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 5
32527: NEG
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 5
32538: NEG
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 5
32550: NEG
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 3
32562: NEG
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 3
32573: NEG
32574: PUSH
32575: LD_INT 3
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 3
32585: NEG
32586: PUSH
32587: LD_INT 4
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: LD_INT 3
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 3
32621: NEG
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 4
32633: NEG
32634: PUSH
32635: LD_INT 3
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 4
32645: NEG
32646: PUSH
32647: LD_INT 4
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: LD_INT 4
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 4
32669: NEG
32670: PUSH
32671: LD_INT 2
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 4
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 5
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: LD_INT 4
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 3
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 3
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 4
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 5
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 2
32760: PUSH
32761: LD_INT 3
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: NEG
32772: PUSH
32773: LD_INT 5
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 4
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 4
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 4
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 4
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 4
32886: PUSH
32887: LD_INT 3
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 5
32896: PUSH
32897: LD_INT 4
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 5
32906: PUSH
32907: LD_INT 5
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 4
32916: PUSH
32917: LD_INT 5
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 3
32926: PUSH
32927: LD_INT 4
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 3
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 5
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 3
32956: PUSH
32957: LD_INT 5
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33011: LD_ADDR_VAR 0 33
33015: PUSH
33016: LD_INT 4
33018: NEG
33019: PUSH
33020: LD_INT 4
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 4
33030: NEG
33031: PUSH
33032: LD_INT 5
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 3
33042: NEG
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 4
33066: NEG
33067: PUSH
33068: LD_INT 3
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 5
33078: NEG
33079: PUSH
33080: LD_INT 4
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 5
33090: NEG
33091: PUSH
33092: LD_INT 5
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 3
33102: NEG
33103: PUSH
33104: LD_INT 5
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 5
33114: NEG
33115: PUSH
33116: LD_INT 3
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: LD_INT 4
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: LD_INT 3
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: LD_INT 2
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: LD_INT 4
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: NEG
33217: PUSH
33218: LD_INT 4
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 4
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 4
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 5
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 5
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 4
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 3
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 5
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 4
33341: PUSH
33342: LD_INT 3
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 4
33351: PUSH
33352: LD_INT 4
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: LD_INT 4
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 4
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: LD_INT 4
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: LD_INT 4
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 3
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 4
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 5
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 5
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 4
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 5
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: NEG
33494: PUSH
33495: LD_INT 3
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33549: LD_ADDR_VAR 0 34
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 4
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 5
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 4
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 3
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 4
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 5
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 5
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 3
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 4
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 4
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 3
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 4
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: LD_INT 4
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 4
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 5
33771: PUSH
33772: LD_INT 4
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: LD_INT 5
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: LD_INT 5
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 3
33801: PUSH
33802: LD_INT 4
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: LD_INT 3
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 5
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 5
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: LD_INT 3
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: LD_INT 3
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 4
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 4
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 3
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 4
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: NEG
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 4
33934: NEG
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 4
33945: NEG
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 3
33957: NEG
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 3
33968: NEG
33969: PUSH
33970: LD_INT 1
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 4
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 5
33990: NEG
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 5
34001: NEG
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 5
34013: NEG
34014: PUSH
34015: LD_INT 2
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 3
34025: NEG
34026: PUSH
34027: LD_INT 2
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
// end ; end ;
34081: GO 34084
34083: POP
// case btype of b_depot , b_warehouse :
34084: LD_VAR 0 1
34088: PUSH
34089: LD_INT 0
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34103
34095: LD_INT 1
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34304
34103: POP
// case nation of nation_american :
34104: LD_VAR 0 5
34108: PUSH
34109: LD_INT 1
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34117
34115: GO 34173
34117: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34118: LD_ADDR_VAR 0 9
34122: PUSH
34123: LD_VAR 0 11
34127: PUSH
34128: LD_VAR 0 12
34132: PUSH
34133: LD_VAR 0 13
34137: PUSH
34138: LD_VAR 0 14
34142: PUSH
34143: LD_VAR 0 15
34147: PUSH
34148: LD_VAR 0 16
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: PUSH
34161: LD_VAR 0 4
34165: PUSH
34166: LD_INT 1
34168: PLUS
34169: ARRAY
34170: ST_TO_ADDR
34171: GO 34302
34173: LD_INT 2
34175: DOUBLE
34176: EQUAL
34177: IFTRUE 34181
34179: GO 34237
34181: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34182: LD_ADDR_VAR 0 9
34186: PUSH
34187: LD_VAR 0 17
34191: PUSH
34192: LD_VAR 0 18
34196: PUSH
34197: LD_VAR 0 19
34201: PUSH
34202: LD_VAR 0 20
34206: PUSH
34207: LD_VAR 0 21
34211: PUSH
34212: LD_VAR 0 22
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: PUSH
34225: LD_VAR 0 4
34229: PUSH
34230: LD_INT 1
34232: PLUS
34233: ARRAY
34234: ST_TO_ADDR
34235: GO 34302
34237: LD_INT 3
34239: DOUBLE
34240: EQUAL
34241: IFTRUE 34245
34243: GO 34301
34245: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34246: LD_ADDR_VAR 0 9
34250: PUSH
34251: LD_VAR 0 23
34255: PUSH
34256: LD_VAR 0 24
34260: PUSH
34261: LD_VAR 0 25
34265: PUSH
34266: LD_VAR 0 26
34270: PUSH
34271: LD_VAR 0 27
34275: PUSH
34276: LD_VAR 0 28
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: PUSH
34289: LD_VAR 0 4
34293: PUSH
34294: LD_INT 1
34296: PLUS
34297: ARRAY
34298: ST_TO_ADDR
34299: GO 34302
34301: POP
34302: GO 34857
34304: LD_INT 2
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34318
34310: LD_INT 3
34312: DOUBLE
34313: EQUAL
34314: IFTRUE 34318
34316: GO 34374
34318: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_VAR 0 29
34328: PUSH
34329: LD_VAR 0 30
34333: PUSH
34334: LD_VAR 0 31
34338: PUSH
34339: LD_VAR 0 32
34343: PUSH
34344: LD_VAR 0 33
34348: PUSH
34349: LD_VAR 0 34
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: PUSH
34362: LD_VAR 0 4
34366: PUSH
34367: LD_INT 1
34369: PLUS
34370: ARRAY
34371: ST_TO_ADDR
34372: GO 34857
34374: LD_INT 16
34376: DOUBLE
34377: EQUAL
34378: IFTRUE 34436
34380: LD_INT 17
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34436
34386: LD_INT 18
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34436
34392: LD_INT 19
34394: DOUBLE
34395: EQUAL
34396: IFTRUE 34436
34398: LD_INT 22
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34436
34404: LD_INT 20
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34436
34410: LD_INT 21
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34436
34416: LD_INT 23
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34436
34422: LD_INT 24
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34436
34428: LD_INT 25
34430: DOUBLE
34431: EQUAL
34432: IFTRUE 34436
34434: GO 34492
34436: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34437: LD_ADDR_VAR 0 9
34441: PUSH
34442: LD_VAR 0 35
34446: PUSH
34447: LD_VAR 0 36
34451: PUSH
34452: LD_VAR 0 37
34456: PUSH
34457: LD_VAR 0 38
34461: PUSH
34462: LD_VAR 0 39
34466: PUSH
34467: LD_VAR 0 40
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: PUSH
34480: LD_VAR 0 4
34484: PUSH
34485: LD_INT 1
34487: PLUS
34488: ARRAY
34489: ST_TO_ADDR
34490: GO 34857
34492: LD_INT 6
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34548
34498: LD_INT 7
34500: DOUBLE
34501: EQUAL
34502: IFTRUE 34548
34504: LD_INT 8
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34548
34510: LD_INT 13
34512: DOUBLE
34513: EQUAL
34514: IFTRUE 34548
34516: LD_INT 12
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34548
34522: LD_INT 15
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34548
34528: LD_INT 11
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34548
34534: LD_INT 14
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34548
34540: LD_INT 10
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34604
34548: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_VAR 0 41
34558: PUSH
34559: LD_VAR 0 42
34563: PUSH
34564: LD_VAR 0 43
34568: PUSH
34569: LD_VAR 0 44
34573: PUSH
34574: LD_VAR 0 45
34578: PUSH
34579: LD_VAR 0 46
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: PUSH
34592: LD_VAR 0 4
34596: PUSH
34597: LD_INT 1
34599: PLUS
34600: ARRAY
34601: ST_TO_ADDR
34602: GO 34857
34604: LD_INT 36
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34668
34612: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34613: LD_ADDR_VAR 0 9
34617: PUSH
34618: LD_VAR 0 47
34622: PUSH
34623: LD_VAR 0 48
34627: PUSH
34628: LD_VAR 0 49
34632: PUSH
34633: LD_VAR 0 50
34637: PUSH
34638: LD_VAR 0 51
34642: PUSH
34643: LD_VAR 0 52
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: LD_VAR 0 4
34660: PUSH
34661: LD_INT 1
34663: PLUS
34664: ARRAY
34665: ST_TO_ADDR
34666: GO 34857
34668: LD_INT 4
34670: DOUBLE
34671: EQUAL
34672: IFTRUE 34694
34674: LD_INT 5
34676: DOUBLE
34677: EQUAL
34678: IFTRUE 34694
34680: LD_INT 34
34682: DOUBLE
34683: EQUAL
34684: IFTRUE 34694
34686: LD_INT 37
34688: DOUBLE
34689: EQUAL
34690: IFTRUE 34694
34692: GO 34750
34694: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34695: LD_ADDR_VAR 0 9
34699: PUSH
34700: LD_VAR 0 53
34704: PUSH
34705: LD_VAR 0 54
34709: PUSH
34710: LD_VAR 0 55
34714: PUSH
34715: LD_VAR 0 56
34719: PUSH
34720: LD_VAR 0 57
34724: PUSH
34725: LD_VAR 0 58
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: PUSH
34738: LD_VAR 0 4
34742: PUSH
34743: LD_INT 1
34745: PLUS
34746: ARRAY
34747: ST_TO_ADDR
34748: GO 34857
34750: LD_INT 31
34752: DOUBLE
34753: EQUAL
34754: IFTRUE 34800
34756: LD_INT 32
34758: DOUBLE
34759: EQUAL
34760: IFTRUE 34800
34762: LD_INT 33
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34800
34768: LD_INT 27
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34800
34774: LD_INT 26
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34800
34780: LD_INT 28
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34800
34786: LD_INT 29
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34800
34792: LD_INT 30
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34800
34798: GO 34856
34800: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34801: LD_ADDR_VAR 0 9
34805: PUSH
34806: LD_VAR 0 59
34810: PUSH
34811: LD_VAR 0 60
34815: PUSH
34816: LD_VAR 0 61
34820: PUSH
34821: LD_VAR 0 62
34825: PUSH
34826: LD_VAR 0 63
34830: PUSH
34831: LD_VAR 0 64
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: PUSH
34844: LD_VAR 0 4
34848: PUSH
34849: LD_INT 1
34851: PLUS
34852: ARRAY
34853: ST_TO_ADDR
34854: GO 34857
34856: POP
// temp_list2 = [ ] ;
34857: LD_ADDR_VAR 0 10
34861: PUSH
34862: EMPTY
34863: ST_TO_ADDR
// for i in temp_list do
34864: LD_ADDR_VAR 0 8
34868: PUSH
34869: LD_VAR 0 9
34873: PUSH
34874: FOR_IN
34875: IFFALSE 34927
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34877: LD_ADDR_VAR 0 10
34881: PUSH
34882: LD_VAR 0 10
34886: PUSH
34887: LD_VAR 0 8
34891: PUSH
34892: LD_INT 1
34894: ARRAY
34895: PUSH
34896: LD_VAR 0 2
34900: PLUS
34901: PUSH
34902: LD_VAR 0 8
34906: PUSH
34907: LD_INT 2
34909: ARRAY
34910: PUSH
34911: LD_VAR 0 3
34915: PLUS
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: EMPTY
34922: LIST
34923: ADD
34924: ST_TO_ADDR
34925: GO 34874
34927: POP
34928: POP
// result = temp_list2 ;
34929: LD_ADDR_VAR 0 7
34933: PUSH
34934: LD_VAR 0 10
34938: ST_TO_ADDR
// end ;
34939: LD_VAR 0 7
34943: RET
// export function EnemyInRange ( unit , dist ) ; begin
34944: LD_INT 0
34946: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34947: LD_ADDR_VAR 0 3
34951: PUSH
34952: LD_VAR 0 1
34956: PPUSH
34957: CALL_OW 255
34961: PPUSH
34962: LD_VAR 0 1
34966: PPUSH
34967: CALL_OW 250
34971: PPUSH
34972: LD_VAR 0 1
34976: PPUSH
34977: CALL_OW 251
34981: PPUSH
34982: LD_VAR 0 2
34986: PPUSH
34987: CALL 8201 0 4
34991: PUSH
34992: LD_INT 4
34994: ARRAY
34995: ST_TO_ADDR
// end ;
34996: LD_VAR 0 3
35000: RET
// export function PlayerSeeMe ( unit ) ; begin
35001: LD_INT 0
35003: PPUSH
// result := See ( your_side , unit ) ;
35004: LD_ADDR_VAR 0 2
35008: PUSH
35009: LD_OWVAR 2
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 292
35023: ST_TO_ADDR
// end ;
35024: LD_VAR 0 2
35028: RET
// export function ReverseDir ( unit ) ; begin
35029: LD_INT 0
35031: PPUSH
// if not unit then
35032: LD_VAR 0 1
35036: NOT
35037: IFFALSE 35041
// exit ;
35039: GO 35064
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35041: LD_ADDR_VAR 0 2
35045: PUSH
35046: LD_VAR 0 1
35050: PPUSH
35051: CALL_OW 254
35055: PUSH
35056: LD_INT 3
35058: PLUS
35059: PUSH
35060: LD_INT 6
35062: MOD
35063: ST_TO_ADDR
// end ;
35064: LD_VAR 0 2
35068: RET
// export function ReverseArray ( array ) ; var i ; begin
35069: LD_INT 0
35071: PPUSH
35072: PPUSH
// if not array then
35073: LD_VAR 0 1
35077: NOT
35078: IFFALSE 35082
// exit ;
35080: GO 35137
// result := [ ] ;
35082: LD_ADDR_VAR 0 2
35086: PUSH
35087: EMPTY
35088: ST_TO_ADDR
// for i := array downto 1 do
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: DOUBLE
35095: LD_VAR 0 1
35099: INC
35100: ST_TO_ADDR
35101: LD_INT 1
35103: PUSH
35104: FOR_DOWNTO
35105: IFFALSE 35135
// result := Join ( result , array [ i ] ) ;
35107: LD_ADDR_VAR 0 2
35111: PUSH
35112: LD_VAR 0 2
35116: PPUSH
35117: LD_VAR 0 1
35121: PUSH
35122: LD_VAR 0 3
35126: ARRAY
35127: PPUSH
35128: CALL 39989 0 2
35132: ST_TO_ADDR
35133: GO 35104
35135: POP
35136: POP
// end ;
35137: LD_VAR 0 2
35141: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35142: LD_INT 0
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
// if not unit or not hexes then
35150: LD_VAR 0 1
35154: NOT
35155: IFTRUE 35164
35157: PUSH
35158: LD_VAR 0 2
35162: NOT
35163: OR
35164: IFFALSE 35168
// exit ;
35166: GO 35291
// dist := 9999 ;
35168: LD_ADDR_VAR 0 5
35172: PUSH
35173: LD_INT 9999
35175: ST_TO_ADDR
// for i = 1 to hexes do
35176: LD_ADDR_VAR 0 4
35180: PUSH
35181: DOUBLE
35182: LD_INT 1
35184: DEC
35185: ST_TO_ADDR
35186: LD_VAR 0 2
35190: PUSH
35191: FOR_TO
35192: IFFALSE 35279
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35194: LD_ADDR_VAR 0 6
35198: PUSH
35199: LD_VAR 0 1
35203: PPUSH
35204: LD_VAR 0 2
35208: PUSH
35209: LD_VAR 0 4
35213: ARRAY
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PPUSH
35219: LD_VAR 0 2
35223: PUSH
35224: LD_VAR 0 4
35228: ARRAY
35229: PUSH
35230: LD_INT 2
35232: ARRAY
35233: PPUSH
35234: CALL_OW 297
35238: ST_TO_ADDR
// if tdist < dist then
35239: LD_VAR 0 6
35243: PUSH
35244: LD_VAR 0 5
35248: LESS
35249: IFFALSE 35277
// begin hex := hexes [ i ] ;
35251: LD_ADDR_VAR 0 8
35255: PUSH
35256: LD_VAR 0 2
35260: PUSH
35261: LD_VAR 0 4
35265: ARRAY
35266: ST_TO_ADDR
// dist := tdist ;
35267: LD_ADDR_VAR 0 5
35271: PUSH
35272: LD_VAR 0 6
35276: ST_TO_ADDR
// end ; end ;
35277: GO 35191
35279: POP
35280: POP
// result := hex ;
35281: LD_ADDR_VAR 0 3
35285: PUSH
35286: LD_VAR 0 8
35290: ST_TO_ADDR
// end ;
35291: LD_VAR 0 3
35295: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35296: LD_INT 0
35298: PPUSH
35299: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35300: LD_VAR 0 1
35304: NOT
35305: IFTRUE 35344
35307: PUSH
35308: LD_VAR 0 1
35312: PUSH
35313: LD_INT 21
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 23
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PPUSH
35337: CALL_OW 69
35341: IN
35342: NOT
35343: OR
35344: IFFALSE 35348
// exit ;
35346: GO 35395
// for i = 1 to 3 do
35348: LD_ADDR_VAR 0 3
35352: PUSH
35353: DOUBLE
35354: LD_INT 1
35356: DEC
35357: ST_TO_ADDR
35358: LD_INT 3
35360: PUSH
35361: FOR_TO
35362: IFFALSE 35393
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 250
35373: PPUSH
35374: LD_VAR 0 1
35378: PPUSH
35379: CALL_OW 251
35383: PPUSH
35384: LD_INT 1
35386: PPUSH
35387: CALL_OW 453
35391: GO 35361
35393: POP
35394: POP
// end ;
35395: LD_VAR 0 2
35399: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35400: LD_INT 0
35402: PPUSH
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
35407: PPUSH
// if not unit or not enemy_unit then
35408: LD_VAR 0 1
35412: NOT
35413: IFTRUE 35422
35415: PUSH
35416: LD_VAR 0 2
35420: NOT
35421: OR
35422: IFFALSE 35426
// exit ;
35424: GO 35907
// if GetLives ( i ) < 250 then
35426: LD_VAR 0 4
35430: PPUSH
35431: CALL_OW 256
35435: PUSH
35436: LD_INT 250
35438: LESS
35439: IFFALSE 35452
// begin ComAutodestruct ( i ) ;
35441: LD_VAR 0 4
35445: PPUSH
35446: CALL 35296 0 1
// exit ;
35450: GO 35907
// end ; x := GetX ( enemy_unit ) ;
35452: LD_ADDR_VAR 0 7
35456: PUSH
35457: LD_VAR 0 2
35461: PPUSH
35462: CALL_OW 250
35466: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35467: LD_ADDR_VAR 0 8
35471: PUSH
35472: LD_VAR 0 2
35476: PPUSH
35477: CALL_OW 251
35481: ST_TO_ADDR
// if not x or not y then
35482: LD_VAR 0 7
35486: NOT
35487: IFTRUE 35496
35489: PUSH
35490: LD_VAR 0 8
35494: NOT
35495: OR
35496: IFFALSE 35500
// exit ;
35498: GO 35907
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35500: LD_ADDR_VAR 0 6
35504: PUSH
35505: LD_VAR 0 7
35509: PPUSH
35510: LD_INT 0
35512: PPUSH
35513: LD_INT 4
35515: PPUSH
35516: CALL_OW 272
35520: PUSH
35521: LD_VAR 0 8
35525: PPUSH
35526: LD_INT 0
35528: PPUSH
35529: LD_INT 4
35531: PPUSH
35532: CALL_OW 273
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_VAR 0 7
35545: PPUSH
35546: LD_INT 1
35548: PPUSH
35549: LD_INT 4
35551: PPUSH
35552: CALL_OW 272
35556: PUSH
35557: LD_VAR 0 8
35561: PPUSH
35562: LD_INT 1
35564: PPUSH
35565: LD_INT 4
35567: PPUSH
35568: CALL_OW 273
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_VAR 0 7
35581: PPUSH
35582: LD_INT 2
35584: PPUSH
35585: LD_INT 4
35587: PPUSH
35588: CALL_OW 272
35592: PUSH
35593: LD_VAR 0 8
35597: PPUSH
35598: LD_INT 2
35600: PPUSH
35601: LD_INT 4
35603: PPUSH
35604: CALL_OW 273
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_VAR 0 7
35617: PPUSH
35618: LD_INT 3
35620: PPUSH
35621: LD_INT 4
35623: PPUSH
35624: CALL_OW 272
35628: PUSH
35629: LD_VAR 0 8
35633: PPUSH
35634: LD_INT 3
35636: PPUSH
35637: LD_INT 4
35639: PPUSH
35640: CALL_OW 273
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_VAR 0 7
35653: PPUSH
35654: LD_INT 4
35656: PPUSH
35657: LD_INT 4
35659: PPUSH
35660: CALL_OW 272
35664: PUSH
35665: LD_VAR 0 8
35669: PPUSH
35670: LD_INT 4
35672: PPUSH
35673: LD_INT 4
35675: PPUSH
35676: CALL_OW 273
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_VAR 0 7
35689: PPUSH
35690: LD_INT 5
35692: PPUSH
35693: LD_INT 4
35695: PPUSH
35696: CALL_OW 272
35700: PUSH
35701: LD_VAR 0 8
35705: PPUSH
35706: LD_INT 5
35708: PPUSH
35709: LD_INT 4
35711: PPUSH
35712: CALL_OW 273
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: ST_TO_ADDR
// for i = tmp downto 1 do
35729: LD_ADDR_VAR 0 4
35733: PUSH
35734: DOUBLE
35735: LD_VAR 0 6
35739: INC
35740: ST_TO_ADDR
35741: LD_INT 1
35743: PUSH
35744: FOR_DOWNTO
35745: IFFALSE 35848
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35747: LD_VAR 0 6
35751: PUSH
35752: LD_VAR 0 4
35756: ARRAY
35757: PUSH
35758: LD_INT 1
35760: ARRAY
35761: PPUSH
35762: LD_VAR 0 6
35766: PUSH
35767: LD_VAR 0 4
35771: ARRAY
35772: PUSH
35773: LD_INT 2
35775: ARRAY
35776: PPUSH
35777: CALL_OW 488
35781: NOT
35782: IFTRUE 35824
35784: PUSH
35785: LD_VAR 0 6
35789: PUSH
35790: LD_VAR 0 4
35794: ARRAY
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PPUSH
35800: LD_VAR 0 6
35804: PUSH
35805: LD_VAR 0 4
35809: ARRAY
35810: PUSH
35811: LD_INT 2
35813: ARRAY
35814: PPUSH
35815: CALL_OW 428
35819: PUSH
35820: LD_INT 0
35822: NONEQUAL
35823: OR
35824: IFFALSE 35846
// tmp := Delete ( tmp , i ) ;
35826: LD_ADDR_VAR 0 6
35830: PUSH
35831: LD_VAR 0 6
35835: PPUSH
35836: LD_VAR 0 4
35840: PPUSH
35841: CALL_OW 3
35845: ST_TO_ADDR
35846: GO 35744
35848: POP
35849: POP
// j := GetClosestHex ( unit , tmp ) ;
35850: LD_ADDR_VAR 0 5
35854: PUSH
35855: LD_VAR 0 1
35859: PPUSH
35860: LD_VAR 0 6
35864: PPUSH
35865: CALL 35142 0 2
35869: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35870: LD_VAR 0 1
35874: PPUSH
35875: LD_VAR 0 5
35879: PUSH
35880: LD_INT 1
35882: ARRAY
35883: PPUSH
35884: LD_VAR 0 5
35888: PUSH
35889: LD_INT 2
35891: ARRAY
35892: PPUSH
35893: CALL_OW 111
// result := j ;
35897: LD_ADDR_VAR 0 3
35901: PUSH
35902: LD_VAR 0 5
35906: ST_TO_ADDR
// end ;
35907: LD_VAR 0 3
35911: RET
// export function PrepareApemanSoldier ( ) ; begin
35912: LD_INT 0
35914: PPUSH
// uc_nation := 0 ;
35915: LD_ADDR_OWVAR 21
35919: PUSH
35920: LD_INT 0
35922: ST_TO_ADDR
// hc_sex := sex_male ;
35923: LD_ADDR_OWVAR 27
35927: PUSH
35928: LD_INT 1
35930: ST_TO_ADDR
// hc_name :=  ;
35931: LD_ADDR_OWVAR 26
35935: PUSH
35936: LD_STRING 
35938: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35939: LD_ADDR_OWVAR 28
35943: PUSH
35944: LD_INT 15
35946: ST_TO_ADDR
// hc_gallery :=  ;
35947: LD_ADDR_OWVAR 33
35951: PUSH
35952: LD_STRING 
35954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35955: LD_ADDR_OWVAR 31
35959: PUSH
35960: LD_INT 0
35962: PPUSH
35963: LD_INT 3
35965: PPUSH
35966: CALL_OW 12
35970: PUSH
35971: LD_INT 0
35973: PPUSH
35974: LD_INT 3
35976: PPUSH
35977: CALL_OW 12
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35994: LD_ADDR_OWVAR 29
35998: PUSH
35999: LD_INT 10
36001: PUSH
36002: LD_INT 12
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: ST_TO_ADDR
// end ;
36009: LD_VAR 0 1
36013: RET
// export function PrepareApemanEngineer ( ) ; begin
36014: LD_INT 0
36016: PPUSH
// uc_nation := 0 ;
36017: LD_ADDR_OWVAR 21
36021: PUSH
36022: LD_INT 0
36024: ST_TO_ADDR
// hc_sex := sex_male ;
36025: LD_ADDR_OWVAR 27
36029: PUSH
36030: LD_INT 1
36032: ST_TO_ADDR
// hc_name :=  ;
36033: LD_ADDR_OWVAR 26
36037: PUSH
36038: LD_STRING 
36040: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36041: LD_ADDR_OWVAR 28
36045: PUSH
36046: LD_INT 16
36048: ST_TO_ADDR
// hc_gallery :=  ;
36049: LD_ADDR_OWVAR 33
36053: PUSH
36054: LD_STRING 
36056: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36057: LD_ADDR_OWVAR 31
36061: PUSH
36062: LD_INT 0
36064: PPUSH
36065: LD_INT 3
36067: PPUSH
36068: CALL_OW 12
36072: PUSH
36073: LD_INT 0
36075: PPUSH
36076: LD_INT 3
36078: PPUSH
36079: CALL_OW 12
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
36096: LD_ADDR_OWVAR 29
36100: PUSH
36101: LD_INT 10
36103: PUSH
36104: LD_INT 12
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: ST_TO_ADDR
// end ;
36111: LD_VAR 0 1
36115: RET
// export function PrepareApeman ( agressivity ) ; begin
36116: LD_INT 0
36118: PPUSH
// uc_side := 0 ;
36119: LD_ADDR_OWVAR 20
36123: PUSH
36124: LD_INT 0
36126: ST_TO_ADDR
// uc_nation := 0 ;
36127: LD_ADDR_OWVAR 21
36131: PUSH
36132: LD_INT 0
36134: ST_TO_ADDR
// hc_sex := sex_male ;
36135: LD_ADDR_OWVAR 27
36139: PUSH
36140: LD_INT 1
36142: ST_TO_ADDR
// hc_class := class_apeman ;
36143: LD_ADDR_OWVAR 28
36147: PUSH
36148: LD_INT 12
36150: ST_TO_ADDR
// hc_gallery :=  ;
36151: LD_ADDR_OWVAR 33
36155: PUSH
36156: LD_STRING 
36158: ST_TO_ADDR
// hc_name :=  ;
36159: LD_ADDR_OWVAR 26
36163: PUSH
36164: LD_STRING 
36166: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
36167: LD_ADDR_OWVAR 29
36171: PUSH
36172: LD_INT 10
36174: PUSH
36175: LD_INT 12
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: ST_TO_ADDR
// if agressivity = 0 then
36182: LD_VAR 0 1
36186: PUSH
36187: LD_INT 0
36189: EQUAL
36190: IFFALSE 36202
// hc_agressivity := 0 else
36192: LD_ADDR_OWVAR 35
36196: PUSH
36197: LD_INT 0
36199: ST_TO_ADDR
36200: GO 36223
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36202: LD_ADDR_OWVAR 35
36206: PUSH
36207: LD_VAR 0 1
36211: NEG
36212: PPUSH
36213: LD_VAR 0 1
36217: PPUSH
36218: CALL_OW 12
36222: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36223: LD_ADDR_OWVAR 31
36227: PUSH
36228: LD_INT 0
36230: PPUSH
36231: LD_INT 3
36233: PPUSH
36234: CALL_OW 12
36238: PUSH
36239: LD_INT 0
36241: PPUSH
36242: LD_INT 3
36244: PPUSH
36245: CALL_OW 12
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// end ;
36262: LD_VAR 0 2
36266: RET
// export function PrepareTiger ( agressivity ) ; begin
36267: LD_INT 0
36269: PPUSH
// uc_side := 0 ;
36270: LD_ADDR_OWVAR 20
36274: PUSH
36275: LD_INT 0
36277: ST_TO_ADDR
// uc_nation := 0 ;
36278: LD_ADDR_OWVAR 21
36282: PUSH
36283: LD_INT 0
36285: ST_TO_ADDR
// InitHc ;
36286: CALL_OW 19
// hc_class := class_tiger ;
36290: LD_ADDR_OWVAR 28
36294: PUSH
36295: LD_INT 14
36297: ST_TO_ADDR
// hc_gallery :=  ;
36298: LD_ADDR_OWVAR 33
36302: PUSH
36303: LD_STRING 
36305: ST_TO_ADDR
// hc_name :=  ;
36306: LD_ADDR_OWVAR 26
36310: PUSH
36311: LD_STRING 
36313: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36314: LD_ADDR_OWVAR 35
36318: PUSH
36319: LD_VAR 0 1
36323: NEG
36324: PPUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 12
36334: ST_TO_ADDR
// end ;
36335: LD_VAR 0 2
36339: RET
// export function PrepareEnchidna ( ) ; begin
36340: LD_INT 0
36342: PPUSH
// uc_side := 0 ;
36343: LD_ADDR_OWVAR 20
36347: PUSH
36348: LD_INT 0
36350: ST_TO_ADDR
// uc_nation := 0 ;
36351: LD_ADDR_OWVAR 21
36355: PUSH
36356: LD_INT 0
36358: ST_TO_ADDR
// InitHc ;
36359: CALL_OW 19
// hc_class := class_baggie ;
36363: LD_ADDR_OWVAR 28
36367: PUSH
36368: LD_INT 13
36370: ST_TO_ADDR
// hc_gallery :=  ;
36371: LD_ADDR_OWVAR 33
36375: PUSH
36376: LD_STRING 
36378: ST_TO_ADDR
// hc_name :=  ;
36379: LD_ADDR_OWVAR 26
36383: PUSH
36384: LD_STRING 
36386: ST_TO_ADDR
// end ;
36387: LD_VAR 0 1
36391: RET
// export function PrepareFrog ( ) ; begin
36392: LD_INT 0
36394: PPUSH
// uc_side := 0 ;
36395: LD_ADDR_OWVAR 20
36399: PUSH
36400: LD_INT 0
36402: ST_TO_ADDR
// uc_nation := 0 ;
36403: LD_ADDR_OWVAR 21
36407: PUSH
36408: LD_INT 0
36410: ST_TO_ADDR
// InitHc ;
36411: CALL_OW 19
// hc_class := class_frog ;
36415: LD_ADDR_OWVAR 28
36419: PUSH
36420: LD_INT 19
36422: ST_TO_ADDR
// hc_gallery :=  ;
36423: LD_ADDR_OWVAR 33
36427: PUSH
36428: LD_STRING 
36430: ST_TO_ADDR
// hc_name :=  ;
36431: LD_ADDR_OWVAR 26
36435: PUSH
36436: LD_STRING 
36438: ST_TO_ADDR
// end ;
36439: LD_VAR 0 1
36443: RET
// export function PrepareFish ( ) ; begin
36444: LD_INT 0
36446: PPUSH
// uc_side := 0 ;
36447: LD_ADDR_OWVAR 20
36451: PUSH
36452: LD_INT 0
36454: ST_TO_ADDR
// uc_nation := 0 ;
36455: LD_ADDR_OWVAR 21
36459: PUSH
36460: LD_INT 0
36462: ST_TO_ADDR
// InitHc ;
36463: CALL_OW 19
// hc_class := class_fish ;
36467: LD_ADDR_OWVAR 28
36471: PUSH
36472: LD_INT 20
36474: ST_TO_ADDR
// hc_gallery :=  ;
36475: LD_ADDR_OWVAR 33
36479: PUSH
36480: LD_STRING 
36482: ST_TO_ADDR
// hc_name :=  ;
36483: LD_ADDR_OWVAR 26
36487: PUSH
36488: LD_STRING 
36490: ST_TO_ADDR
// end ;
36491: LD_VAR 0 1
36495: RET
// export function PrepareBird ( ) ; begin
36496: LD_INT 0
36498: PPUSH
// uc_side := 0 ;
36499: LD_ADDR_OWVAR 20
36503: PUSH
36504: LD_INT 0
36506: ST_TO_ADDR
// uc_nation := 0 ;
36507: LD_ADDR_OWVAR 21
36511: PUSH
36512: LD_INT 0
36514: ST_TO_ADDR
// InitHc ;
36515: CALL_OW 19
// hc_class := class_phororhacos ;
36519: LD_ADDR_OWVAR 28
36523: PUSH
36524: LD_INT 18
36526: ST_TO_ADDR
// hc_gallery :=  ;
36527: LD_ADDR_OWVAR 33
36531: PUSH
36532: LD_STRING 
36534: ST_TO_ADDR
// hc_name :=  ;
36535: LD_ADDR_OWVAR 26
36539: PUSH
36540: LD_STRING 
36542: ST_TO_ADDR
// end ;
36543: LD_VAR 0 1
36547: RET
// export function PrepareHorse ( ) ; begin
36548: LD_INT 0
36550: PPUSH
// uc_side := 0 ;
36551: LD_ADDR_OWVAR 20
36555: PUSH
36556: LD_INT 0
36558: ST_TO_ADDR
// uc_nation := 0 ;
36559: LD_ADDR_OWVAR 21
36563: PUSH
36564: LD_INT 0
36566: ST_TO_ADDR
// InitHc ;
36567: CALL_OW 19
// hc_class := class_horse ;
36571: LD_ADDR_OWVAR 28
36575: PUSH
36576: LD_INT 21
36578: ST_TO_ADDR
// hc_gallery :=  ;
36579: LD_ADDR_OWVAR 33
36583: PUSH
36584: LD_STRING 
36586: ST_TO_ADDR
// hc_name :=  ;
36587: LD_ADDR_OWVAR 26
36591: PUSH
36592: LD_STRING 
36594: ST_TO_ADDR
// end ;
36595: LD_VAR 0 1
36599: RET
// export function PrepareMastodont ( ) ; begin
36600: LD_INT 0
36602: PPUSH
// uc_side := 0 ;
36603: LD_ADDR_OWVAR 20
36607: PUSH
36608: LD_INT 0
36610: ST_TO_ADDR
// uc_nation := 0 ;
36611: LD_ADDR_OWVAR 21
36615: PUSH
36616: LD_INT 0
36618: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36619: LD_ADDR_OWVAR 37
36623: PUSH
36624: LD_INT 31
36626: ST_TO_ADDR
// vc_control := control_rider ;
36627: LD_ADDR_OWVAR 38
36631: PUSH
36632: LD_INT 4
36634: ST_TO_ADDR
// end ;
36635: LD_VAR 0 1
36639: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36640: LD_INT 0
36642: PPUSH
36643: PPUSH
36644: PPUSH
// uc_side = 0 ;
36645: LD_ADDR_OWVAR 20
36649: PUSH
36650: LD_INT 0
36652: ST_TO_ADDR
// uc_nation = 0 ;
36653: LD_ADDR_OWVAR 21
36657: PUSH
36658: LD_INT 0
36660: ST_TO_ADDR
// InitHc_All ( ) ;
36661: CALL_OW 584
// InitVc ;
36665: CALL_OW 20
// if mastodonts then
36669: LD_VAR 0 6
36673: IFFALSE 36740
// for i = 1 to mastodonts do
36675: LD_ADDR_VAR 0 11
36679: PUSH
36680: DOUBLE
36681: LD_INT 1
36683: DEC
36684: ST_TO_ADDR
36685: LD_VAR 0 6
36689: PUSH
36690: FOR_TO
36691: IFFALSE 36738
// begin vc_chassis := 31 ;
36693: LD_ADDR_OWVAR 37
36697: PUSH
36698: LD_INT 31
36700: ST_TO_ADDR
// vc_control := control_rider ;
36701: LD_ADDR_OWVAR 38
36705: PUSH
36706: LD_INT 4
36708: ST_TO_ADDR
// animal := CreateVehicle ;
36709: LD_ADDR_VAR 0 12
36713: PUSH
36714: CALL_OW 45
36718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36719: LD_VAR 0 12
36723: PPUSH
36724: LD_VAR 0 8
36728: PPUSH
36729: LD_INT 0
36731: PPUSH
36732: CALL 38882 0 3
// end ;
36736: GO 36690
36738: POP
36739: POP
// if horses then
36740: LD_VAR 0 5
36744: IFFALSE 36811
// for i = 1 to horses do
36746: LD_ADDR_VAR 0 11
36750: PUSH
36751: DOUBLE
36752: LD_INT 1
36754: DEC
36755: ST_TO_ADDR
36756: LD_VAR 0 5
36760: PUSH
36761: FOR_TO
36762: IFFALSE 36809
// begin hc_class := 21 ;
36764: LD_ADDR_OWVAR 28
36768: PUSH
36769: LD_INT 21
36771: ST_TO_ADDR
// hc_gallery :=  ;
36772: LD_ADDR_OWVAR 33
36776: PUSH
36777: LD_STRING 
36779: ST_TO_ADDR
// animal := CreateHuman ;
36780: LD_ADDR_VAR 0 12
36784: PUSH
36785: CALL_OW 44
36789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36790: LD_VAR 0 12
36794: PPUSH
36795: LD_VAR 0 8
36799: PPUSH
36800: LD_INT 0
36802: PPUSH
36803: CALL 38882 0 3
// end ;
36807: GO 36761
36809: POP
36810: POP
// if birds then
36811: LD_VAR 0 1
36815: IFFALSE 36882
// for i = 1 to birds do
36817: LD_ADDR_VAR 0 11
36821: PUSH
36822: DOUBLE
36823: LD_INT 1
36825: DEC
36826: ST_TO_ADDR
36827: LD_VAR 0 1
36831: PUSH
36832: FOR_TO
36833: IFFALSE 36880
// begin hc_class := 18 ;
36835: LD_ADDR_OWVAR 28
36839: PUSH
36840: LD_INT 18
36842: ST_TO_ADDR
// hc_gallery =  ;
36843: LD_ADDR_OWVAR 33
36847: PUSH
36848: LD_STRING 
36850: ST_TO_ADDR
// animal := CreateHuman ;
36851: LD_ADDR_VAR 0 12
36855: PUSH
36856: CALL_OW 44
36860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36861: LD_VAR 0 12
36865: PPUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_INT 0
36873: PPUSH
36874: CALL 38882 0 3
// end ;
36878: GO 36832
36880: POP
36881: POP
// if tigers then
36882: LD_VAR 0 2
36886: IFFALSE 36970
// for i = 1 to tigers do
36888: LD_ADDR_VAR 0 11
36892: PUSH
36893: DOUBLE
36894: LD_INT 1
36896: DEC
36897: ST_TO_ADDR
36898: LD_VAR 0 2
36902: PUSH
36903: FOR_TO
36904: IFFALSE 36968
// begin hc_class = class_tiger ;
36906: LD_ADDR_OWVAR 28
36910: PUSH
36911: LD_INT 14
36913: ST_TO_ADDR
// hc_gallery =  ;
36914: LD_ADDR_OWVAR 33
36918: PUSH
36919: LD_STRING 
36921: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36922: LD_ADDR_OWVAR 35
36926: PUSH
36927: LD_INT 7
36929: NEG
36930: PPUSH
36931: LD_INT 7
36933: PPUSH
36934: CALL_OW 12
36938: ST_TO_ADDR
// animal := CreateHuman ;
36939: LD_ADDR_VAR 0 12
36943: PUSH
36944: CALL_OW 44
36948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36949: LD_VAR 0 12
36953: PPUSH
36954: LD_VAR 0 8
36958: PPUSH
36959: LD_INT 0
36961: PPUSH
36962: CALL 38882 0 3
// end ;
36966: GO 36903
36968: POP
36969: POP
// if apemans then
36970: LD_VAR 0 3
36974: IFFALSE 37097
// for i = 1 to apemans do
36976: LD_ADDR_VAR 0 11
36980: PUSH
36981: DOUBLE
36982: LD_INT 1
36984: DEC
36985: ST_TO_ADDR
36986: LD_VAR 0 3
36990: PUSH
36991: FOR_TO
36992: IFFALSE 37095
// begin hc_class = class_apeman ;
36994: LD_ADDR_OWVAR 28
36998: PUSH
36999: LD_INT 12
37001: ST_TO_ADDR
// hc_gallery =  ;
37002: LD_ADDR_OWVAR 33
37006: PUSH
37007: LD_STRING 
37009: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37010: LD_ADDR_OWVAR 35
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PPUSH
37019: LD_INT 2
37021: PPUSH
37022: CALL_OW 12
37026: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37027: LD_ADDR_OWVAR 31
37031: PUSH
37032: LD_INT 1
37034: PPUSH
37035: LD_INT 3
37037: PPUSH
37038: CALL_OW 12
37042: PUSH
37043: LD_INT 1
37045: PPUSH
37046: LD_INT 3
37048: PPUSH
37049: CALL_OW 12
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// animal := CreateHuman ;
37066: LD_ADDR_VAR 0 12
37070: PUSH
37071: CALL_OW 44
37075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37076: LD_VAR 0 12
37080: PPUSH
37081: LD_VAR 0 8
37085: PPUSH
37086: LD_INT 0
37088: PPUSH
37089: CALL 38882 0 3
// end ;
37093: GO 36991
37095: POP
37096: POP
// if enchidnas then
37097: LD_VAR 0 4
37101: IFFALSE 37168
// for i = 1 to enchidnas do
37103: LD_ADDR_VAR 0 11
37107: PUSH
37108: DOUBLE
37109: LD_INT 1
37111: DEC
37112: ST_TO_ADDR
37113: LD_VAR 0 4
37117: PUSH
37118: FOR_TO
37119: IFFALSE 37166
// begin hc_class = 13 ;
37121: LD_ADDR_OWVAR 28
37125: PUSH
37126: LD_INT 13
37128: ST_TO_ADDR
// hc_gallery =  ;
37129: LD_ADDR_OWVAR 33
37133: PUSH
37134: LD_STRING 
37136: ST_TO_ADDR
// animal := CreateHuman ;
37137: LD_ADDR_VAR 0 12
37141: PUSH
37142: CALL_OW 44
37146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37147: LD_VAR 0 12
37151: PPUSH
37152: LD_VAR 0 8
37156: PPUSH
37157: LD_INT 0
37159: PPUSH
37160: CALL 38882 0 3
// end ;
37164: GO 37118
37166: POP
37167: POP
// if fishes then
37168: LD_VAR 0 7
37172: IFFALSE 37239
// for i = 1 to fishes do
37174: LD_ADDR_VAR 0 11
37178: PUSH
37179: DOUBLE
37180: LD_INT 1
37182: DEC
37183: ST_TO_ADDR
37184: LD_VAR 0 7
37188: PUSH
37189: FOR_TO
37190: IFFALSE 37237
// begin hc_class = 20 ;
37192: LD_ADDR_OWVAR 28
37196: PUSH
37197: LD_INT 20
37199: ST_TO_ADDR
// hc_gallery =  ;
37200: LD_ADDR_OWVAR 33
37204: PUSH
37205: LD_STRING 
37207: ST_TO_ADDR
// animal := CreateHuman ;
37208: LD_ADDR_VAR 0 12
37212: PUSH
37213: CALL_OW 44
37217: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37218: LD_VAR 0 12
37222: PPUSH
37223: LD_VAR 0 9
37227: PPUSH
37228: LD_INT 0
37230: PPUSH
37231: CALL 38882 0 3
// end ;
37235: GO 37189
37237: POP
37238: POP
// end ;
37239: LD_VAR 0 10
37243: RET
// export function WantHeal ( sci , unit ) ; begin
37244: LD_INT 0
37246: PPUSH
// if GetTaskList ( sci ) > 0 then
37247: LD_VAR 0 1
37251: PPUSH
37252: CALL_OW 437
37256: PUSH
37257: LD_INT 0
37259: GREATER
37260: IFFALSE 37332
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37262: LD_VAR 0 1
37266: PPUSH
37267: CALL_OW 437
37271: PUSH
37272: LD_INT 1
37274: ARRAY
37275: PUSH
37276: LD_INT 1
37278: ARRAY
37279: PUSH
37280: LD_STRING l
37282: EQUAL
37283: IFFALSE 37310
37285: PUSH
37286: LD_VAR 0 1
37290: PPUSH
37291: CALL_OW 437
37295: PUSH
37296: LD_INT 1
37298: ARRAY
37299: PUSH
37300: LD_INT 4
37302: ARRAY
37303: PUSH
37304: LD_VAR 0 2
37308: EQUAL
37309: AND
37310: IFFALSE 37322
// result := true else
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_INT 1
37319: ST_TO_ADDR
37320: GO 37330
// result := false ;
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_INT 0
37329: ST_TO_ADDR
// end else
37330: GO 37340
// result := false ;
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_INT 0
37339: ST_TO_ADDR
// end ;
37340: LD_VAR 0 3
37344: RET
// export function HealTarget ( sci ) ; begin
37345: LD_INT 0
37347: PPUSH
// if not sci then
37348: LD_VAR 0 1
37352: NOT
37353: IFFALSE 37357
// exit ;
37355: GO 37422
// result := 0 ;
37357: LD_ADDR_VAR 0 2
37361: PUSH
37362: LD_INT 0
37364: ST_TO_ADDR
// if GetTaskList ( sci ) then
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 437
37374: IFFALSE 37422
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 437
37385: PUSH
37386: LD_INT 1
37388: ARRAY
37389: PUSH
37390: LD_INT 1
37392: ARRAY
37393: PUSH
37394: LD_STRING l
37396: EQUAL
37397: IFFALSE 37422
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37399: LD_ADDR_VAR 0 2
37403: PUSH
37404: LD_VAR 0 1
37408: PPUSH
37409: CALL_OW 437
37413: PUSH
37414: LD_INT 1
37416: ARRAY
37417: PUSH
37418: LD_INT 4
37420: ARRAY
37421: ST_TO_ADDR
// end ;
37422: LD_VAR 0 2
37426: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37427: LD_INT 0
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
// if not base_units then
37433: LD_VAR 0 1
37437: NOT
37438: IFFALSE 37442
// exit ;
37440: GO 37529
// result := false ;
37442: LD_ADDR_VAR 0 2
37446: PUSH
37447: LD_INT 0
37449: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37450: LD_ADDR_VAR 0 5
37454: PUSH
37455: LD_VAR 0 1
37459: PPUSH
37460: LD_INT 21
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PPUSH
37470: CALL_OW 72
37474: ST_TO_ADDR
// if not tmp then
37475: LD_VAR 0 5
37479: NOT
37480: IFFALSE 37484
// exit ;
37482: GO 37529
// for i in tmp do
37484: LD_ADDR_VAR 0 3
37488: PUSH
37489: LD_VAR 0 5
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37527
// begin result := EnemyInRange ( i , 22 ) ;
37497: LD_ADDR_VAR 0 2
37501: PUSH
37502: LD_VAR 0 3
37506: PPUSH
37507: LD_INT 22
37509: PPUSH
37510: CALL 34944 0 2
37514: ST_TO_ADDR
// if result then
37515: LD_VAR 0 2
37519: IFFALSE 37525
// exit ;
37521: POP
37522: POP
37523: GO 37529
// end ;
37525: GO 37494
37527: POP
37528: POP
// end ;
37529: LD_VAR 0 2
37533: RET
// export function FilterByTag ( units , tag ) ; begin
37534: LD_INT 0
37536: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37537: LD_ADDR_VAR 0 3
37541: PUSH
37542: LD_VAR 0 1
37546: PPUSH
37547: LD_INT 120
37549: PUSH
37550: LD_VAR 0 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PPUSH
37559: CALL_OW 72
37563: ST_TO_ADDR
// end ;
37564: LD_VAR 0 3
37568: RET
// export function IsDriver ( un ) ; begin
37569: LD_INT 0
37571: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37572: LD_ADDR_VAR 0 2
37576: PUSH
37577: LD_VAR 0 1
37581: PUSH
37582: LD_INT 55
37584: PUSH
37585: EMPTY
37586: LIST
37587: PPUSH
37588: CALL_OW 69
37592: IN
37593: ST_TO_ADDR
// end ;
37594: LD_VAR 0 2
37598: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37599: LD_INT 0
37601: PPUSH
37602: PPUSH
// list := [ ] ;
37603: LD_ADDR_VAR 0 5
37607: PUSH
37608: EMPTY
37609: ST_TO_ADDR
// case d of 0 :
37610: LD_VAR 0 3
37614: PUSH
37615: LD_INT 0
37617: DOUBLE
37618: EQUAL
37619: IFTRUE 37623
37621: GO 37756
37623: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37624: LD_ADDR_VAR 0 5
37628: PUSH
37629: LD_VAR 0 1
37633: PUSH
37634: LD_INT 4
37636: MINUS
37637: PUSH
37638: LD_VAR 0 2
37642: PUSH
37643: LD_INT 4
37645: MINUS
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: PUSH
37655: LD_VAR 0 1
37659: PUSH
37660: LD_INT 3
37662: MINUS
37663: PUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: PUSH
37677: LD_VAR 0 1
37681: PUSH
37682: LD_INT 4
37684: PLUS
37685: PUSH
37686: LD_VAR 0 2
37690: PUSH
37691: LD_INT 4
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: PUSH
37699: LD_VAR 0 1
37703: PUSH
37704: LD_INT 3
37706: PLUS
37707: PUSH
37708: LD_VAR 0 2
37712: PUSH
37713: LD_INT 3
37715: PLUS
37716: PUSH
37717: LD_INT 5
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: PUSH
37725: LD_VAR 0 1
37729: PUSH
37730: LD_VAR 0 2
37734: PUSH
37735: LD_INT 4
37737: PLUS
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// end ; 1 :
37754: GO 38454
37756: LD_INT 1
37758: DOUBLE
37759: EQUAL
37760: IFTRUE 37764
37762: GO 37897
37764: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37765: LD_ADDR_VAR 0 5
37769: PUSH
37770: LD_VAR 0 1
37774: PUSH
37775: LD_VAR 0 2
37779: PUSH
37780: LD_INT 4
37782: MINUS
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: LIST
37791: PUSH
37792: LD_VAR 0 1
37796: PUSH
37797: LD_INT 3
37799: MINUS
37800: PUSH
37801: LD_VAR 0 2
37805: PUSH
37806: LD_INT 3
37808: MINUS
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: PUSH
37818: LD_VAR 0 1
37822: PUSH
37823: LD_INT 4
37825: MINUS
37826: PUSH
37827: LD_VAR 0 2
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: PUSH
37840: LD_VAR 0 1
37844: PUSH
37845: LD_VAR 0 2
37849: PUSH
37850: LD_INT 3
37852: PLUS
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: PUSH
37862: LD_VAR 0 1
37866: PUSH
37867: LD_INT 4
37869: PLUS
37870: PUSH
37871: LD_VAR 0 2
37875: PUSH
37876: LD_INT 4
37878: PLUS
37879: PUSH
37880: LD_INT 5
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: ST_TO_ADDR
// end ; 2 :
37895: GO 38454
37897: LD_INT 2
37899: DOUBLE
37900: EQUAL
37901: IFTRUE 37905
37903: GO 38034
37905: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37906: LD_ADDR_VAR 0 5
37910: PUSH
37911: LD_VAR 0 1
37915: PUSH
37916: LD_VAR 0 2
37920: PUSH
37921: LD_INT 3
37923: MINUS
37924: PUSH
37925: LD_INT 3
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: LD_VAR 0 1
37937: PUSH
37938: LD_INT 4
37940: PLUS
37941: PUSH
37942: LD_VAR 0 2
37946: PUSH
37947: LD_INT 4
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: PUSH
37955: LD_VAR 0 1
37959: PUSH
37960: LD_VAR 0 2
37964: PUSH
37965: LD_INT 4
37967: PLUS
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: PUSH
37977: LD_VAR 0 1
37981: PUSH
37982: LD_INT 3
37984: MINUS
37985: PUSH
37986: LD_VAR 0 2
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: PUSH
37999: LD_VAR 0 1
38003: PUSH
38004: LD_INT 4
38006: MINUS
38007: PUSH
38008: LD_VAR 0 2
38012: PUSH
38013: LD_INT 4
38015: MINUS
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: ST_TO_ADDR
// end ; 3 :
38032: GO 38454
38034: LD_INT 3
38036: DOUBLE
38037: EQUAL
38038: IFTRUE 38042
38040: GO 38175
38042: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38043: LD_ADDR_VAR 0 5
38047: PUSH
38048: LD_VAR 0 1
38052: PUSH
38053: LD_INT 3
38055: PLUS
38056: PUSH
38057: LD_VAR 0 2
38061: PUSH
38062: LD_INT 4
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: PUSH
38070: LD_VAR 0 1
38074: PUSH
38075: LD_INT 4
38077: PLUS
38078: PUSH
38079: LD_VAR 0 2
38083: PUSH
38084: LD_INT 4
38086: PLUS
38087: PUSH
38088: LD_INT 5
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: PUSH
38096: LD_VAR 0 1
38100: PUSH
38101: LD_INT 4
38103: MINUS
38104: PUSH
38105: LD_VAR 0 2
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: PUSH
38118: LD_VAR 0 1
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_INT 4
38130: MINUS
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: PUSH
38140: LD_VAR 0 1
38144: PUSH
38145: LD_INT 3
38147: MINUS
38148: PUSH
38149: LD_VAR 0 2
38153: PUSH
38154: LD_INT 3
38156: MINUS
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: ST_TO_ADDR
// end ; 4 :
38173: GO 38454
38175: LD_INT 4
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38183
38181: GO 38316
38183: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38184: LD_ADDR_VAR 0 5
38188: PUSH
38189: LD_VAR 0 1
38193: PUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_INT 4
38201: PLUS
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: LD_VAR 0 1
38215: PUSH
38216: LD_INT 3
38218: PLUS
38219: PUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_INT 3
38227: PLUS
38228: PUSH
38229: LD_INT 5
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: PUSH
38237: LD_VAR 0 1
38241: PUSH
38242: LD_INT 4
38244: PLUS
38245: PUSH
38246: LD_VAR 0 2
38250: PUSH
38251: LD_INT 4
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: LD_VAR 0 1
38263: PUSH
38264: LD_VAR 0 2
38268: PUSH
38269: LD_INT 3
38271: MINUS
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: PUSH
38281: LD_VAR 0 1
38285: PUSH
38286: LD_INT 4
38288: MINUS
38289: PUSH
38290: LD_VAR 0 2
38294: PUSH
38295: LD_INT 4
38297: MINUS
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: ST_TO_ADDR
// end ; 5 :
38314: GO 38454
38316: LD_INT 5
38318: DOUBLE
38319: EQUAL
38320: IFTRUE 38324
38322: GO 38453
38324: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38325: LD_ADDR_VAR 0 5
38329: PUSH
38330: LD_VAR 0 1
38334: PUSH
38335: LD_INT 4
38337: MINUS
38338: PUSH
38339: LD_VAR 0 2
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PUSH
38352: LD_VAR 0 1
38356: PUSH
38357: LD_VAR 0 2
38361: PUSH
38362: LD_INT 4
38364: MINUS
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: PUSH
38374: LD_VAR 0 1
38378: PUSH
38379: LD_INT 4
38381: PLUS
38382: PUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_INT 4
38390: PLUS
38391: PUSH
38392: LD_INT 5
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: PUSH
38400: LD_VAR 0 1
38404: PUSH
38405: LD_INT 3
38407: PLUS
38408: PUSH
38409: LD_VAR 0 2
38413: PUSH
38414: LD_INT 4
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: PUSH
38422: LD_VAR 0 1
38426: PUSH
38427: LD_VAR 0 2
38431: PUSH
38432: LD_INT 3
38434: PLUS
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: LIST
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// end ; end ;
38451: GO 38454
38453: POP
// result := list ;
38454: LD_ADDR_VAR 0 4
38458: PUSH
38459: LD_VAR 0 5
38463: ST_TO_ADDR
// end ;
38464: LD_VAR 0 4
38468: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38469: LD_INT 0
38471: PPUSH
38472: PPUSH
38473: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38474: LD_VAR 0 1
38478: NOT
38479: IFTRUE 38507
38481: PUSH
38482: LD_VAR 0 2
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: LD_INT 4
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: IN
38505: NOT
38506: OR
38507: IFFALSE 38511
// exit ;
38509: GO 38594
// tmp := [ ] ;
38511: LD_ADDR_VAR 0 5
38515: PUSH
38516: EMPTY
38517: ST_TO_ADDR
// for i in units do
38518: LD_ADDR_VAR 0 4
38522: PUSH
38523: LD_VAR 0 1
38527: PUSH
38528: FOR_IN
38529: IFFALSE 38563
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: LD_VAR 0 5
38540: PPUSH
38541: LD_VAR 0 4
38545: PPUSH
38546: LD_VAR 0 2
38550: PPUSH
38551: CALL_OW 259
38555: PPUSH
38556: CALL 39989 0 2
38560: ST_TO_ADDR
38561: GO 38528
38563: POP
38564: POP
// if not tmp then
38565: LD_VAR 0 5
38569: NOT
38570: IFFALSE 38574
// exit ;
38572: GO 38594
// result := SortListByListDesc ( units , tmp ) ;
38574: LD_ADDR_VAR 0 3
38578: PUSH
38579: LD_VAR 0 1
38583: PPUSH
38584: LD_VAR 0 5
38588: PPUSH
38589: CALL_OW 77
38593: ST_TO_ADDR
// end ;
38594: LD_VAR 0 3
38598: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38599: LD_INT 0
38601: PPUSH
38602: PPUSH
38603: PPUSH
// result := false ;
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: LD_INT 0
38611: ST_TO_ADDR
// if not building then
38612: LD_VAR 0 2
38616: NOT
38617: IFFALSE 38621
// exit ;
38619: GO 38765
// x := GetX ( building ) ;
38621: LD_ADDR_VAR 0 4
38625: PUSH
38626: LD_VAR 0 2
38630: PPUSH
38631: CALL_OW 250
38635: ST_TO_ADDR
// y := GetY ( building ) ;
38636: LD_ADDR_VAR 0 5
38640: PUSH
38641: LD_VAR 0 2
38645: PPUSH
38646: CALL_OW 251
38650: ST_TO_ADDR
// if not x or not y then
38651: LD_VAR 0 4
38655: NOT
38656: IFTRUE 38665
38658: PUSH
38659: LD_VAR 0 5
38663: NOT
38664: OR
38665: IFFALSE 38669
// exit ;
38667: GO 38765
// if GetTaskList ( unit ) then
38669: LD_VAR 0 1
38673: PPUSH
38674: CALL_OW 437
38678: IFFALSE 38765
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38680: LD_STRING e
38682: PUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 437
38692: PUSH
38693: LD_INT 1
38695: ARRAY
38696: PUSH
38697: LD_INT 1
38699: ARRAY
38700: EQUAL
38701: IFFALSE 38728
38703: PUSH
38704: LD_VAR 0 4
38708: PUSH
38709: LD_VAR 0 1
38713: PPUSH
38714: CALL_OW 437
38718: PUSH
38719: LD_INT 1
38721: ARRAY
38722: PUSH
38723: LD_INT 2
38725: ARRAY
38726: EQUAL
38727: AND
38728: IFFALSE 38755
38730: PUSH
38731: LD_VAR 0 5
38735: PUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 437
38745: PUSH
38746: LD_INT 1
38748: ARRAY
38749: PUSH
38750: LD_INT 3
38752: ARRAY
38753: EQUAL
38754: AND
38755: IFFALSE 38765
// result := true end ;
38757: LD_ADDR_VAR 0 3
38761: PUSH
38762: LD_INT 1
38764: ST_TO_ADDR
// end ;
38765: LD_VAR 0 3
38769: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38770: LD_INT 0
38772: PPUSH
// result := false ;
38773: LD_ADDR_VAR 0 4
38777: PUSH
38778: LD_INT 0
38780: ST_TO_ADDR
// if GetTaskList ( unit ) then
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 437
38790: IFFALSE 38877
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38792: LD_STRING M
38794: PUSH
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 437
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: PUSH
38809: LD_INT 1
38811: ARRAY
38812: EQUAL
38813: IFFALSE 38840
38815: PUSH
38816: LD_VAR 0 2
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 437
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PUSH
38835: LD_INT 2
38837: ARRAY
38838: EQUAL
38839: AND
38840: IFFALSE 38867
38842: PUSH
38843: LD_VAR 0 3
38847: PUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL_OW 437
38857: PUSH
38858: LD_INT 1
38860: ARRAY
38861: PUSH
38862: LD_INT 3
38864: ARRAY
38865: EQUAL
38866: AND
38867: IFFALSE 38877
// result := true ;
38869: LD_ADDR_VAR 0 4
38873: PUSH
38874: LD_INT 1
38876: ST_TO_ADDR
// end ; end ;
38877: LD_VAR 0 4
38881: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38882: LD_INT 0
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
// if not unit or not area then
38888: LD_VAR 0 1
38892: NOT
38893: IFTRUE 38902
38895: PUSH
38896: LD_VAR 0 2
38900: NOT
38901: OR
38902: IFFALSE 38906
// exit ;
38904: GO 39082
// tmp := AreaToList ( area , i ) ;
38906: LD_ADDR_VAR 0 6
38910: PUSH
38911: LD_VAR 0 2
38915: PPUSH
38916: LD_VAR 0 5
38920: PPUSH
38921: CALL_OW 517
38925: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38926: LD_ADDR_VAR 0 5
38930: PUSH
38931: DOUBLE
38932: LD_INT 1
38934: DEC
38935: ST_TO_ADDR
38936: LD_VAR 0 6
38940: PUSH
38941: LD_INT 1
38943: ARRAY
38944: PUSH
38945: FOR_TO
38946: IFFALSE 39080
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38948: LD_ADDR_VAR 0 7
38952: PUSH
38953: LD_VAR 0 6
38957: PUSH
38958: LD_INT 1
38960: ARRAY
38961: PUSH
38962: LD_VAR 0 5
38966: ARRAY
38967: PUSH
38968: LD_VAR 0 6
38972: PUSH
38973: LD_INT 2
38975: ARRAY
38976: PUSH
38977: LD_VAR 0 5
38981: ARRAY
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38987: LD_INT 92
38989: PUSH
38990: LD_VAR 0 7
38994: PUSH
38995: LD_INT 1
38997: ARRAY
38998: PUSH
38999: LD_VAR 0 7
39003: PUSH
39004: LD_INT 2
39006: ARRAY
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: PPUSH
39017: CALL_OW 69
39021: PUSH
39022: LD_INT 0
39024: EQUAL
39025: IFFALSE 39078
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39027: LD_VAR 0 1
39031: PPUSH
39032: LD_VAR 0 7
39036: PUSH
39037: LD_INT 1
39039: ARRAY
39040: PPUSH
39041: LD_VAR 0 7
39045: PUSH
39046: LD_INT 2
39048: ARRAY
39049: PPUSH
39050: LD_VAR 0 3
39054: PPUSH
39055: CALL_OW 48
// result := IsPlaced ( unit ) ;
39059: LD_ADDR_VAR 0 4
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 305
39073: ST_TO_ADDR
// exit ;
39074: POP
39075: POP
39076: GO 39082
// end ; end ;
39078: GO 38945
39080: POP
39081: POP
// end ;
39082: LD_VAR 0 4
39086: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39087: LD_INT 0
39089: PPUSH
39090: PPUSH
39091: PPUSH
// if not side or side > 8 then
39092: LD_VAR 0 1
39096: NOT
39097: IFTRUE 39109
39099: PUSH
39100: LD_VAR 0 1
39104: PUSH
39105: LD_INT 8
39107: GREATER
39108: OR
39109: IFFALSE 39113
// exit ;
39111: GO 39300
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39113: LD_ADDR_VAR 0 4
39117: PUSH
39118: LD_INT 22
39120: PUSH
39121: LD_VAR 0 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 21
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PPUSH
39144: CALL_OW 69
39148: ST_TO_ADDR
// if not tmp then
39149: LD_VAR 0 4
39153: NOT
39154: IFFALSE 39158
// exit ;
39156: GO 39300
// enable_addtolog := true ;
39158: LD_ADDR_OWVAR 81
39162: PUSH
39163: LD_INT 1
39165: ST_TO_ADDR
// AddToLog ( [ ) ;
39166: LD_STRING [
39168: PPUSH
39169: CALL_OW 561
// for i in tmp do
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: LD_VAR 0 4
39182: PUSH
39183: FOR_IN
39184: IFFALSE 39291
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39186: LD_STRING [
39188: PUSH
39189: LD_VAR 0 3
39193: PPUSH
39194: CALL_OW 266
39198: STR
39199: PUSH
39200: LD_STRING , 
39202: STR
39203: PUSH
39204: LD_VAR 0 3
39208: PPUSH
39209: CALL_OW 250
39213: STR
39214: PUSH
39215: LD_STRING , 
39217: STR
39218: PUSH
39219: LD_VAR 0 3
39223: PPUSH
39224: CALL_OW 251
39228: STR
39229: PUSH
39230: LD_STRING , 
39232: STR
39233: PUSH
39234: LD_VAR 0 3
39238: PPUSH
39239: CALL_OW 254
39243: STR
39244: PUSH
39245: LD_STRING , 
39247: STR
39248: PUSH
39249: LD_VAR 0 3
39253: PPUSH
39254: LD_INT 1
39256: PPUSH
39257: CALL_OW 268
39261: STR
39262: PUSH
39263: LD_STRING , 
39265: STR
39266: PUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: LD_INT 2
39274: PPUSH
39275: CALL_OW 268
39279: STR
39280: PUSH
39281: LD_STRING ],
39283: STR
39284: PPUSH
39285: CALL_OW 561
// end ;
39289: GO 39183
39291: POP
39292: POP
// AddToLog ( ]; ) ;
39293: LD_STRING ];
39295: PPUSH
39296: CALL_OW 561
// end ;
39300: LD_VAR 0 2
39304: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39305: LD_INT 0
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
// if not area or not rate or not max then
39312: LD_VAR 0 1
39316: NOT
39317: IFTRUE 39326
39319: PUSH
39320: LD_VAR 0 2
39324: NOT
39325: OR
39326: IFTRUE 39335
39328: PUSH
39329: LD_VAR 0 4
39333: NOT
39334: OR
39335: IFFALSE 39339
// exit ;
39337: GO 39528
// while 1 do
39339: LD_INT 1
39341: IFFALSE 39528
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39343: LD_ADDR_VAR 0 9
39347: PUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: LD_INT 1
39355: PPUSH
39356: CALL_OW 287
39360: PUSH
39361: LD_INT 10
39363: MUL
39364: ST_TO_ADDR
// r := rate / 10 ;
39365: LD_ADDR_VAR 0 7
39369: PUSH
39370: LD_VAR 0 2
39374: PUSH
39375: LD_INT 10
39377: DIVREAL
39378: ST_TO_ADDR
// time := 1 1$00 ;
39379: LD_ADDR_VAR 0 8
39383: PUSH
39384: LD_INT 2100
39386: ST_TO_ADDR
// if amount < min then
39387: LD_VAR 0 9
39391: PUSH
39392: LD_VAR 0 3
39396: LESS
39397: IFFALSE 39415
// r := r * 2 else
39399: LD_ADDR_VAR 0 7
39403: PUSH
39404: LD_VAR 0 7
39408: PUSH
39409: LD_INT 2
39411: MUL
39412: ST_TO_ADDR
39413: GO 39441
// if amount > max then
39415: LD_VAR 0 9
39419: PUSH
39420: LD_VAR 0 4
39424: GREATER
39425: IFFALSE 39441
// r := r / 2 ;
39427: LD_ADDR_VAR 0 7
39431: PUSH
39432: LD_VAR 0 7
39436: PUSH
39437: LD_INT 2
39439: DIVREAL
39440: ST_TO_ADDR
// time := time / r ;
39441: LD_ADDR_VAR 0 8
39445: PUSH
39446: LD_VAR 0 8
39450: PUSH
39451: LD_VAR 0 7
39455: DIVREAL
39456: ST_TO_ADDR
// if time < 0 then
39457: LD_VAR 0 8
39461: PUSH
39462: LD_INT 0
39464: LESS
39465: IFFALSE 39482
// time := time * - 1 ;
39467: LD_ADDR_VAR 0 8
39471: PUSH
39472: LD_VAR 0 8
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: MUL
39481: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39482: LD_VAR 0 8
39486: PUSH
39487: LD_INT 35
39489: PPUSH
39490: LD_INT 875
39492: PPUSH
39493: CALL_OW 12
39497: PLUS
39498: PPUSH
39499: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39503: LD_INT 1
39505: PPUSH
39506: LD_INT 5
39508: PPUSH
39509: CALL_OW 12
39513: PPUSH
39514: LD_VAR 0 1
39518: PPUSH
39519: LD_INT 1
39521: PPUSH
39522: CALL_OW 55
// end ;
39526: GO 39339
// end ;
39528: LD_VAR 0 5
39532: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39533: LD_INT 0
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
// if not turrets or not factories then
39543: LD_VAR 0 1
39547: NOT
39548: IFTRUE 39557
39550: PUSH
39551: LD_VAR 0 2
39555: NOT
39556: OR
39557: IFFALSE 39561
// exit ;
39559: GO 39868
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39561: LD_ADDR_VAR 0 10
39565: PUSH
39566: LD_INT 5
39568: PUSH
39569: LD_INT 6
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 4
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: LD_INT 5
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 24
39603: PUSH
39604: LD_INT 25
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 23
39613: PUSH
39614: LD_INT 27
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 42
39627: PUSH
39628: LD_INT 43
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 44
39637: PUSH
39638: LD_INT 46
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 45
39647: PUSH
39648: LD_INT 47
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
// result := [ ] ;
39665: LD_ADDR_VAR 0 3
39669: PUSH
39670: EMPTY
39671: ST_TO_ADDR
// for i in turrets do
39672: LD_ADDR_VAR 0 4
39676: PUSH
39677: LD_VAR 0 1
39681: PUSH
39682: FOR_IN
39683: IFFALSE 39866
// begin nat := GetNation ( i ) ;
39685: LD_ADDR_VAR 0 7
39689: PUSH
39690: LD_VAR 0 4
39694: PPUSH
39695: CALL_OW 248
39699: ST_TO_ADDR
// weapon := 0 ;
39700: LD_ADDR_VAR 0 8
39704: PUSH
39705: LD_INT 0
39707: ST_TO_ADDR
// if not nat then
39708: LD_VAR 0 7
39712: NOT
39713: IFFALSE 39717
// continue ;
39715: GO 39682
// for j in list [ nat ] do
39717: LD_ADDR_VAR 0 5
39721: PUSH
39722: LD_VAR 0 10
39726: PUSH
39727: LD_VAR 0 7
39731: ARRAY
39732: PUSH
39733: FOR_IN
39734: IFFALSE 39775
// if GetBWeapon ( i ) = j [ 1 ] then
39736: LD_VAR 0 4
39740: PPUSH
39741: CALL_OW 269
39745: PUSH
39746: LD_VAR 0 5
39750: PUSH
39751: LD_INT 1
39753: ARRAY
39754: EQUAL
39755: IFFALSE 39773
// begin weapon := j [ 2 ] ;
39757: LD_ADDR_VAR 0 8
39761: PUSH
39762: LD_VAR 0 5
39766: PUSH
39767: LD_INT 2
39769: ARRAY
39770: ST_TO_ADDR
// break ;
39771: GO 39775
// end ;
39773: GO 39733
39775: POP
39776: POP
// if not weapon then
39777: LD_VAR 0 8
39781: NOT
39782: IFFALSE 39786
// continue ;
39784: GO 39682
// for k in factories do
39786: LD_ADDR_VAR 0 6
39790: PUSH
39791: LD_VAR 0 2
39795: PUSH
39796: FOR_IN
39797: IFFALSE 39862
// begin weapons := AvailableWeaponList ( k ) ;
39799: LD_ADDR_VAR 0 9
39803: PUSH
39804: LD_VAR 0 6
39808: PPUSH
39809: CALL_OW 478
39813: ST_TO_ADDR
// if not weapons then
39814: LD_VAR 0 9
39818: NOT
39819: IFFALSE 39823
// continue ;
39821: GO 39796
// if weapon in weapons then
39823: LD_VAR 0 8
39827: PUSH
39828: LD_VAR 0 9
39832: IN
39833: IFFALSE 39860
// begin result := [ i , weapon ] ;
39835: LD_ADDR_VAR 0 3
39839: PUSH
39840: LD_VAR 0 4
39844: PUSH
39845: LD_VAR 0 8
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: ST_TO_ADDR
// exit ;
39854: POP
39855: POP
39856: POP
39857: POP
39858: GO 39868
// end ; end ;
39860: GO 39796
39862: POP
39863: POP
// end ;
39864: GO 39682
39866: POP
39867: POP
// end ;
39868: LD_VAR 0 3
39872: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39873: LD_INT 0
39875: PPUSH
// if not side or side > 8 then
39876: LD_VAR 0 3
39880: NOT
39881: IFTRUE 39893
39883: PUSH
39884: LD_VAR 0 3
39888: PUSH
39889: LD_INT 8
39891: GREATER
39892: OR
39893: IFFALSE 39897
// exit ;
39895: GO 39956
// if not range then
39897: LD_VAR 0 4
39901: NOT
39902: IFFALSE 39913
// range := - 12 ;
39904: LD_ADDR_VAR 0 4
39908: PUSH
39909: LD_INT 12
39911: NEG
39912: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39913: LD_VAR 0 1
39917: PPUSH
39918: LD_VAR 0 2
39922: PPUSH
39923: LD_VAR 0 3
39927: PPUSH
39928: LD_VAR 0 4
39932: PPUSH
39933: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39937: LD_VAR 0 1
39941: PPUSH
39942: LD_VAR 0 2
39946: PPUSH
39947: LD_VAR 0 3
39951: PPUSH
39952: CALL_OW 331
// end ;
39956: LD_VAR 0 5
39960: RET
// export function Video ( mode ) ; begin
39961: LD_INT 0
39963: PPUSH
// ingame_video = mode ;
39964: LD_ADDR_OWVAR 52
39968: PUSH
39969: LD_VAR 0 1
39973: ST_TO_ADDR
// interface_hidden = mode ;
39974: LD_ADDR_OWVAR 54
39978: PUSH
39979: LD_VAR 0 1
39983: ST_TO_ADDR
// end ;
39984: LD_VAR 0 2
39988: RET
// export function Join ( array , element ) ; begin
39989: LD_INT 0
39991: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_VAR 0 1
40001: PPUSH
40002: LD_VAR 0 1
40006: PUSH
40007: LD_INT 1
40009: PLUS
40010: PPUSH
40011: LD_VAR 0 2
40015: PPUSH
40016: CALL_OW 1
40020: ST_TO_ADDR
// end ;
40021: LD_VAR 0 3
40025: RET
// export function JoinUnion ( array , element ) ; begin
40026: LD_INT 0
40028: PPUSH
// result := array union element ;
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_VAR 0 1
40038: PUSH
40039: LD_VAR 0 2
40043: UNION
40044: ST_TO_ADDR
// end ;
40045: LD_VAR 0 3
40049: RET
// export function GetBehemoths ( side ) ; begin
40050: LD_INT 0
40052: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40053: LD_ADDR_VAR 0 2
40057: PUSH
40058: LD_INT 22
40060: PUSH
40061: LD_VAR 0 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 31
40072: PUSH
40073: LD_INT 25
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PPUSH
40084: CALL_OW 69
40088: ST_TO_ADDR
// end ;
40089: LD_VAR 0 2
40093: RET
// export function Shuffle ( array ) ; var i , index ; begin
40094: LD_INT 0
40096: PPUSH
40097: PPUSH
40098: PPUSH
// result := [ ] ;
40099: LD_ADDR_VAR 0 2
40103: PUSH
40104: EMPTY
40105: ST_TO_ADDR
// if not array then
40106: LD_VAR 0 1
40110: NOT
40111: IFFALSE 40115
// exit ;
40113: GO 40214
// Randomize ;
40115: CALL_OW 10
// for i = array downto 1 do
40119: LD_ADDR_VAR 0 3
40123: PUSH
40124: DOUBLE
40125: LD_VAR 0 1
40129: INC
40130: ST_TO_ADDR
40131: LD_INT 1
40133: PUSH
40134: FOR_DOWNTO
40135: IFFALSE 40212
// begin index := rand ( 1 , array ) ;
40137: LD_ADDR_VAR 0 4
40141: PUSH
40142: LD_INT 1
40144: PPUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 12
40154: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40155: LD_ADDR_VAR 0 2
40159: PUSH
40160: LD_VAR 0 2
40164: PPUSH
40165: LD_VAR 0 2
40169: PUSH
40170: LD_INT 1
40172: PLUS
40173: PPUSH
40174: LD_VAR 0 1
40178: PUSH
40179: LD_VAR 0 4
40183: ARRAY
40184: PPUSH
40185: CALL_OW 2
40189: ST_TO_ADDR
// array := Delete ( array , index ) ;
40190: LD_ADDR_VAR 0 1
40194: PUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: LD_VAR 0 4
40204: PPUSH
40205: CALL_OW 3
40209: ST_TO_ADDR
// end ;
40210: GO 40134
40212: POP
40213: POP
// end ;
40214: LD_VAR 0 2
40218: RET
// export function GetBaseMaterials ( base ) ; begin
40219: LD_INT 0
40221: PPUSH
// result := [ 0 , 0 , 0 ] ;
40222: LD_ADDR_VAR 0 2
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
// if not base then
40241: LD_VAR 0 1
40245: NOT
40246: IFFALSE 40250
// exit ;
40248: GO 40299
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40250: LD_ADDR_VAR 0 2
40254: PUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: LD_INT 1
40262: PPUSH
40263: CALL_OW 275
40267: PUSH
40268: LD_VAR 0 1
40272: PPUSH
40273: LD_INT 2
40275: PPUSH
40276: CALL_OW 275
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: LD_INT 3
40288: PPUSH
40289: CALL_OW 275
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: ST_TO_ADDR
// end ;
40299: LD_VAR 0 2
40303: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40304: LD_INT 0
40306: PPUSH
40307: PPUSH
// result := array ;
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_VAR 0 1
40317: ST_TO_ADDR
// if size >= result then
40318: LD_VAR 0 2
40322: PUSH
40323: LD_VAR 0 3
40327: GREATEREQUAL
40328: IFFALSE 40332
// exit ;
40330: GO 40382
// if size then
40332: LD_VAR 0 2
40336: IFFALSE 40382
// for i := array downto size do
40338: LD_ADDR_VAR 0 4
40342: PUSH
40343: DOUBLE
40344: LD_VAR 0 1
40348: INC
40349: ST_TO_ADDR
40350: LD_VAR 0 2
40354: PUSH
40355: FOR_DOWNTO
40356: IFFALSE 40380
// result := Delete ( result , result ) ;
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_VAR 0 3
40367: PPUSH
40368: LD_VAR 0 3
40372: PPUSH
40373: CALL_OW 3
40377: ST_TO_ADDR
40378: GO 40355
40380: POP
40381: POP
// end ;
40382: LD_VAR 0 3
40386: RET
// export function ComExit ( unit ) ; var tmp ; begin
40387: LD_INT 0
40389: PPUSH
40390: PPUSH
// if not IsInUnit ( unit ) then
40391: LD_VAR 0 1
40395: PPUSH
40396: CALL_OW 310
40400: NOT
40401: IFFALSE 40405
// exit ;
40403: GO 40465
// tmp := IsInUnit ( unit ) ;
40405: LD_ADDR_VAR 0 3
40409: PUSH
40410: LD_VAR 0 1
40414: PPUSH
40415: CALL_OW 310
40419: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40420: LD_VAR 0 3
40424: PPUSH
40425: CALL_OW 247
40429: PUSH
40430: LD_INT 2
40432: EQUAL
40433: IFFALSE 40446
// ComExitVehicle ( unit ) else
40435: LD_VAR 0 1
40439: PPUSH
40440: CALL_OW 121
40444: GO 40455
// ComExitBuilding ( unit ) ;
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 122
// result := tmp ;
40455: LD_ADDR_VAR 0 2
40459: PUSH
40460: LD_VAR 0 3
40464: ST_TO_ADDR
// end ;
40465: LD_VAR 0 2
40469: RET
// export function ComExitAll ( units ) ; var i ; begin
40470: LD_INT 0
40472: PPUSH
40473: PPUSH
// if not units then
40474: LD_VAR 0 1
40478: NOT
40479: IFFALSE 40483
// exit ;
40481: GO 40509
// for i in units do
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: LD_VAR 0 1
40492: PUSH
40493: FOR_IN
40494: IFFALSE 40507
// ComExit ( i ) ;
40496: LD_VAR 0 3
40500: PPUSH
40501: CALL 40387 0 1
40505: GO 40493
40507: POP
40508: POP
// end ;
40509: LD_VAR 0 2
40513: RET
// export function ResetHc ; begin
40514: LD_INT 0
40516: PPUSH
// InitHc ;
40517: CALL_OW 19
// hc_importance := 0 ;
40521: LD_ADDR_OWVAR 32
40525: PUSH
40526: LD_INT 0
40528: ST_TO_ADDR
// end ;
40529: LD_VAR 0 1
40533: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40534: LD_INT 0
40536: PPUSH
40537: PPUSH
40538: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40539: LD_ADDR_VAR 0 6
40543: PUSH
40544: LD_VAR 0 1
40548: PUSH
40549: LD_VAR 0 3
40553: PLUS
40554: PUSH
40555: LD_INT 2
40557: DIV
40558: ST_TO_ADDR
// if _x < 0 then
40559: LD_VAR 0 6
40563: PUSH
40564: LD_INT 0
40566: LESS
40567: IFFALSE 40584
// _x := _x * - 1 ;
40569: LD_ADDR_VAR 0 6
40573: PUSH
40574: LD_VAR 0 6
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: MUL
40583: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40584: LD_ADDR_VAR 0 7
40588: PUSH
40589: LD_VAR 0 2
40593: PUSH
40594: LD_VAR 0 4
40598: PLUS
40599: PUSH
40600: LD_INT 2
40602: DIV
40603: ST_TO_ADDR
// if _y < 0 then
40604: LD_VAR 0 7
40608: PUSH
40609: LD_INT 0
40611: LESS
40612: IFFALSE 40629
// _y := _y * - 1 ;
40614: LD_ADDR_VAR 0 7
40618: PUSH
40619: LD_VAR 0 7
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: MUL
40628: ST_TO_ADDR
// result := [ _x , _y ] ;
40629: LD_ADDR_VAR 0 5
40633: PUSH
40634: LD_VAR 0 6
40638: PUSH
40639: LD_VAR 0 7
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: ST_TO_ADDR
// end ;
40648: LD_VAR 0 5
40652: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40653: LD_INT 0
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
// task := GetTaskList ( unit ) ;
40659: LD_ADDR_VAR 0 7
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 437
40673: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40674: LD_VAR 0 7
40678: NOT
40679: IFFALSE 40698
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: LD_VAR 0 2
40691: PPUSH
40692: CALL_OW 308
40696: NOT
40697: AND
40698: IFFALSE 40702
// exit ;
40700: GO 40820
// if IsInArea ( unit , area ) then
40702: LD_VAR 0 1
40706: PPUSH
40707: LD_VAR 0 2
40711: PPUSH
40712: CALL_OW 308
40716: IFFALSE 40734
// begin ComMoveToArea ( unit , goAway ) ;
40718: LD_VAR 0 1
40722: PPUSH
40723: LD_VAR 0 3
40727: PPUSH
40728: CALL_OW 113
// exit ;
40732: GO 40820
// end ; if task [ 1 ] [ 1 ] <> M then
40734: LD_VAR 0 7
40738: PUSH
40739: LD_INT 1
40741: ARRAY
40742: PUSH
40743: LD_INT 1
40745: ARRAY
40746: PUSH
40747: LD_STRING M
40749: NONEQUAL
40750: IFFALSE 40754
// exit ;
40752: GO 40820
// x := task [ 1 ] [ 2 ] ;
40754: LD_ADDR_VAR 0 5
40758: PUSH
40759: LD_VAR 0 7
40763: PUSH
40764: LD_INT 1
40766: ARRAY
40767: PUSH
40768: LD_INT 2
40770: ARRAY
40771: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40772: LD_ADDR_VAR 0 6
40776: PUSH
40777: LD_VAR 0 7
40781: PUSH
40782: LD_INT 1
40784: ARRAY
40785: PUSH
40786: LD_INT 3
40788: ARRAY
40789: ST_TO_ADDR
// if InArea ( x , y , area ) then
40790: LD_VAR 0 5
40794: PPUSH
40795: LD_VAR 0 6
40799: PPUSH
40800: LD_VAR 0 2
40804: PPUSH
40805: CALL_OW 309
40809: IFFALSE 40820
// ComStop ( unit ) ;
40811: LD_VAR 0 1
40815: PPUSH
40816: CALL_OW 141
// end ;
40820: LD_VAR 0 4
40824: RET
// export function Abs ( value ) ; begin
40825: LD_INT 0
40827: PPUSH
// result := value ;
40828: LD_ADDR_VAR 0 2
40832: PUSH
40833: LD_VAR 0 1
40837: ST_TO_ADDR
// if value < 0 then
40838: LD_VAR 0 1
40842: PUSH
40843: LD_INT 0
40845: LESS
40846: IFFALSE 40863
// result := value * - 1 ;
40848: LD_ADDR_VAR 0 2
40852: PUSH
40853: LD_VAR 0 1
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: MUL
40862: ST_TO_ADDR
// end ;
40863: LD_VAR 0 2
40867: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
// if not unit or not building then
40878: LD_VAR 0 1
40882: NOT
40883: IFTRUE 40892
40885: PUSH
40886: LD_VAR 0 2
40890: NOT
40891: OR
40892: IFFALSE 40896
// exit ;
40894: GO 41124
// x := GetX ( building ) ;
40896: LD_ADDR_VAR 0 4
40900: PUSH
40901: LD_VAR 0 2
40905: PPUSH
40906: CALL_OW 250
40910: ST_TO_ADDR
// y := GetY ( building ) ;
40911: LD_ADDR_VAR 0 6
40915: PUSH
40916: LD_VAR 0 2
40920: PPUSH
40921: CALL_OW 251
40925: ST_TO_ADDR
// d := GetDir ( building ) ;
40926: LD_ADDR_VAR 0 8
40930: PUSH
40931: LD_VAR 0 2
40935: PPUSH
40936: CALL_OW 254
40940: ST_TO_ADDR
// r := 4 ;
40941: LD_ADDR_VAR 0 9
40945: PUSH
40946: LD_INT 4
40948: ST_TO_ADDR
// for i := 1 to 5 do
40949: LD_ADDR_VAR 0 10
40953: PUSH
40954: DOUBLE
40955: LD_INT 1
40957: DEC
40958: ST_TO_ADDR
40959: LD_INT 5
40961: PUSH
40962: FOR_TO
40963: IFFALSE 41122
// begin _x := ShiftX ( x , d , r + i ) ;
40965: LD_ADDR_VAR 0 5
40969: PUSH
40970: LD_VAR 0 4
40974: PPUSH
40975: LD_VAR 0 8
40979: PPUSH
40980: LD_VAR 0 9
40984: PUSH
40985: LD_VAR 0 10
40989: PLUS
40990: PPUSH
40991: CALL_OW 272
40995: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40996: LD_ADDR_VAR 0 7
41000: PUSH
41001: LD_VAR 0 6
41005: PPUSH
41006: LD_VAR 0 8
41010: PPUSH
41011: LD_VAR 0 9
41015: PUSH
41016: LD_VAR 0 10
41020: PLUS
41021: PPUSH
41022: CALL_OW 273
41026: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41027: LD_VAR 0 5
41031: PPUSH
41032: LD_VAR 0 7
41036: PPUSH
41037: CALL_OW 488
41041: IFFALSE 41076
41043: PUSH
41044: LD_VAR 0 5
41048: PPUSH
41049: LD_VAR 0 7
41053: PPUSH
41054: CALL_OW 428
41058: PPUSH
41059: CALL_OW 247
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: IN
41074: NOT
41075: AND
41076: IFFALSE 41120
// begin ComMoveXY ( unit , _x , _y ) ;
41078: LD_VAR 0 1
41082: PPUSH
41083: LD_VAR 0 5
41087: PPUSH
41088: LD_VAR 0 7
41092: PPUSH
41093: CALL_OW 111
// result := [ _x , _y ] ;
41097: LD_ADDR_VAR 0 3
41101: PUSH
41102: LD_VAR 0 5
41106: PUSH
41107: LD_VAR 0 7
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: ST_TO_ADDR
// exit ;
41116: POP
41117: POP
41118: GO 41124
// end ; end ;
41120: GO 40962
41122: POP
41123: POP
// end ;
41124: LD_VAR 0 3
41128: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41129: LD_INT 0
41131: PPUSH
41132: PPUSH
41133: PPUSH
// result := 0 ;
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: LD_INT 0
41141: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41142: LD_VAR 0 1
41146: PUSH
41147: LD_INT 0
41149: LESS
41150: IFTRUE 41162
41152: PUSH
41153: LD_VAR 0 1
41157: PUSH
41158: LD_INT 8
41160: GREATER
41161: OR
41162: IFTRUE 41174
41164: PUSH
41165: LD_VAR 0 2
41169: PUSH
41170: LD_INT 0
41172: LESS
41173: OR
41174: IFTRUE 41186
41176: PUSH
41177: LD_VAR 0 2
41181: PUSH
41182: LD_INT 8
41184: GREATER
41185: OR
41186: IFFALSE 41190
// exit ;
41188: GO 41265
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41190: LD_ADDR_VAR 0 4
41194: PUSH
41195: LD_INT 22
41197: PUSH
41198: LD_VAR 0 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PPUSH
41207: CALL_OW 69
41211: PUSH
41212: FOR_IN
41213: IFFALSE 41263
// begin un := UnitShoot ( i ) ;
41215: LD_ADDR_VAR 0 5
41219: PUSH
41220: LD_VAR 0 4
41224: PPUSH
41225: CALL_OW 504
41229: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41230: LD_VAR 0 5
41234: PPUSH
41235: CALL_OW 255
41239: PUSH
41240: LD_VAR 0 1
41244: EQUAL
41245: IFFALSE 41261
// begin result := un ;
41247: LD_ADDR_VAR 0 3
41251: PUSH
41252: LD_VAR 0 5
41256: ST_TO_ADDR
// exit ;
41257: POP
41258: POP
41259: GO 41265
// end ; end ;
41261: GO 41212
41263: POP
41264: POP
// end ;
41265: LD_VAR 0 3
41269: RET
// export function GetCargoBay ( units ) ; begin
41270: LD_INT 0
41272: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41273: LD_ADDR_VAR 0 2
41277: PUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: LD_INT 2
41285: PUSH
41286: LD_INT 34
41288: PUSH
41289: LD_INT 12
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 34
41298: PUSH
41299: LD_INT 51
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 34
41308: PUSH
41309: LD_INT 32
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 34
41318: PUSH
41319: LD_INT 89
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: PPUSH
41333: CALL_OW 72
41337: ST_TO_ADDR
// end ;
41338: LD_VAR 0 2
41342: RET
// export function Negate ( value ) ; begin
41343: LD_INT 0
41345: PPUSH
// result := not value ;
41346: LD_ADDR_VAR 0 2
41350: PUSH
41351: LD_VAR 0 1
41355: NOT
41356: ST_TO_ADDR
// end ;
41357: LD_VAR 0 2
41361: RET
// export function Inc ( value ) ; begin
41362: LD_INT 0
41364: PPUSH
// result := value + 1 ;
41365: LD_ADDR_VAR 0 2
41369: PUSH
41370: LD_VAR 0 1
41374: PUSH
41375: LD_INT 1
41377: PLUS
41378: ST_TO_ADDR
// end ;
41379: LD_VAR 0 2
41383: RET
// export function Dec ( value ) ; begin
41384: LD_INT 0
41386: PPUSH
// result := value - 1 ;
41387: LD_ADDR_VAR 0 2
41391: PUSH
41392: LD_VAR 0 1
41396: PUSH
41397: LD_INT 1
41399: MINUS
41400: ST_TO_ADDR
// end ;
41401: LD_VAR 0 2
41405: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41406: LD_INT 0
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
41412: PPUSH
41413: PPUSH
41414: PPUSH
41415: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41416: LD_VAR 0 1
41420: PPUSH
41421: LD_VAR 0 2
41425: PPUSH
41426: CALL_OW 488
41430: NOT
41431: IFTRUE 41450
41433: PUSH
41434: LD_VAR 0 3
41438: PPUSH
41439: LD_VAR 0 4
41443: PPUSH
41444: CALL_OW 488
41448: NOT
41449: OR
41450: IFFALSE 41463
// begin result := - 1 ;
41452: LD_ADDR_VAR 0 5
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: ST_TO_ADDR
// exit ;
41461: GO 41698
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41463: LD_ADDR_VAR 0 12
41467: PUSH
41468: LD_VAR 0 1
41472: PPUSH
41473: LD_VAR 0 2
41477: PPUSH
41478: LD_VAR 0 3
41482: PPUSH
41483: LD_VAR 0 4
41487: PPUSH
41488: CALL 40534 0 4
41492: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41493: LD_ADDR_VAR 0 11
41497: PUSH
41498: LD_VAR 0 1
41502: PPUSH
41503: LD_VAR 0 2
41507: PPUSH
41508: LD_VAR 0 12
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PPUSH
41517: LD_VAR 0 12
41521: PUSH
41522: LD_INT 2
41524: ARRAY
41525: PPUSH
41526: CALL_OW 298
41530: ST_TO_ADDR
// distance := 9999 ;
41531: LD_ADDR_VAR 0 10
41535: PUSH
41536: LD_INT 9999
41538: ST_TO_ADDR
// for i := 0 to 5 do
41539: LD_ADDR_VAR 0 6
41543: PUSH
41544: DOUBLE
41545: LD_INT 0
41547: DEC
41548: ST_TO_ADDR
41549: LD_INT 5
41551: PUSH
41552: FOR_TO
41553: IFFALSE 41696
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41555: LD_ADDR_VAR 0 7
41559: PUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: LD_VAR 0 6
41569: PPUSH
41570: LD_VAR 0 11
41574: PPUSH
41575: CALL_OW 272
41579: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41580: LD_ADDR_VAR 0 8
41584: PUSH
41585: LD_VAR 0 2
41589: PPUSH
41590: LD_VAR 0 6
41594: PPUSH
41595: LD_VAR 0 11
41599: PPUSH
41600: CALL_OW 273
41604: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41605: LD_VAR 0 7
41609: PPUSH
41610: LD_VAR 0 8
41614: PPUSH
41615: CALL_OW 488
41619: NOT
41620: IFFALSE 41624
// continue ;
41622: GO 41552
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41624: LD_ADDR_VAR 0 9
41628: PUSH
41629: LD_VAR 0 12
41633: PUSH
41634: LD_INT 1
41636: ARRAY
41637: PPUSH
41638: LD_VAR 0 12
41642: PUSH
41643: LD_INT 2
41645: ARRAY
41646: PPUSH
41647: LD_VAR 0 7
41651: PPUSH
41652: LD_VAR 0 8
41656: PPUSH
41657: CALL_OW 298
41661: ST_TO_ADDR
// if tmp < distance then
41662: LD_VAR 0 9
41666: PUSH
41667: LD_VAR 0 10
41671: LESS
41672: IFFALSE 41694
// begin result := i ;
41674: LD_ADDR_VAR 0 5
41678: PUSH
41679: LD_VAR 0 6
41683: ST_TO_ADDR
// distance := tmp ;
41684: LD_ADDR_VAR 0 10
41688: PUSH
41689: LD_VAR 0 9
41693: ST_TO_ADDR
// end ; end ;
41694: GO 41552
41696: POP
41697: POP
// end ;
41698: LD_VAR 0 5
41702: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41703: LD_INT 0
41705: PPUSH
41706: PPUSH
// if not driver or not IsInUnit ( driver ) then
41707: LD_VAR 0 1
41711: NOT
41712: IFTRUE 41726
41714: PUSH
41715: LD_VAR 0 1
41719: PPUSH
41720: CALL_OW 310
41724: NOT
41725: OR
41726: IFFALSE 41730
// exit ;
41728: GO 41820
// vehicle := IsInUnit ( driver ) ;
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: CALL_OW 310
41744: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41745: LD_VAR 0 1
41749: PPUSH
41750: LD_STRING \
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: PUSH
41780: LD_STRING E
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_VAR 0 3
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PPUSH
41816: CALL_OW 446
// end ;
41820: LD_VAR 0 2
41824: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41825: LD_INT 0
41827: PPUSH
41828: PPUSH
// if not driver or not IsInUnit ( driver ) then
41829: LD_VAR 0 1
41833: NOT
41834: IFTRUE 41848
41836: PUSH
41837: LD_VAR 0 1
41841: PPUSH
41842: CALL_OW 310
41846: NOT
41847: OR
41848: IFFALSE 41852
// exit ;
41850: GO 41942
// vehicle := IsInUnit ( driver ) ;
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 310
41866: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41867: LD_VAR 0 1
41871: PPUSH
41872: LD_STRING \
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: PUSH
41902: LD_STRING E
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_VAR 0 3
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PPUSH
41938: CALL_OW 447
// end ;
41942: LD_VAR 0 2
41946: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41947: LD_INT 0
41949: PPUSH
41950: PPUSH
41951: PPUSH
// tmp := [ ] ;
41952: LD_ADDR_VAR 0 5
41956: PUSH
41957: EMPTY
41958: ST_TO_ADDR
// for i in units do
41959: LD_ADDR_VAR 0 4
41963: PUSH
41964: LD_VAR 0 1
41968: PUSH
41969: FOR_IN
41970: IFFALSE 42008
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41972: LD_ADDR_VAR 0 5
41976: PUSH
41977: LD_VAR 0 5
41981: PPUSH
41982: LD_VAR 0 5
41986: PUSH
41987: LD_INT 1
41989: PLUS
41990: PPUSH
41991: LD_VAR 0 4
41995: PPUSH
41996: CALL_OW 256
42000: PPUSH
42001: CALL_OW 2
42005: ST_TO_ADDR
42006: GO 41969
42008: POP
42009: POP
// if not tmp then
42010: LD_VAR 0 5
42014: NOT
42015: IFFALSE 42019
// exit ;
42017: GO 42067
// if asc then
42019: LD_VAR 0 2
42023: IFFALSE 42047
// result := SortListByListAsc ( units , tmp ) else
42025: LD_ADDR_VAR 0 3
42029: PUSH
42030: LD_VAR 0 1
42034: PPUSH
42035: LD_VAR 0 5
42039: PPUSH
42040: CALL_OW 76
42044: ST_TO_ADDR
42045: GO 42067
// result := SortListByListDesc ( units , tmp ) ;
42047: LD_ADDR_VAR 0 3
42051: PUSH
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_VAR 0 5
42061: PPUSH
42062: CALL_OW 77
42066: ST_TO_ADDR
// end ;
42067: LD_VAR 0 3
42071: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42072: LD_INT 0
42074: PPUSH
42075: PPUSH
// task := GetTaskList ( mech ) ;
42076: LD_ADDR_VAR 0 4
42080: PUSH
42081: LD_VAR 0 1
42085: PPUSH
42086: CALL_OW 437
42090: ST_TO_ADDR
// if not task then
42091: LD_VAR 0 4
42095: NOT
42096: IFFALSE 42100
// exit ;
42098: GO 42144
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42100: LD_ADDR_VAR 0 3
42104: PUSH
42105: LD_VAR 0 4
42109: PUSH
42110: LD_INT 1
42112: ARRAY
42113: PUSH
42114: LD_INT 1
42116: ARRAY
42117: PUSH
42118: LD_STRING r
42120: EQUAL
42121: IFFALSE 42143
42123: PUSH
42124: LD_VAR 0 4
42128: PUSH
42129: LD_INT 1
42131: ARRAY
42132: PUSH
42133: LD_INT 4
42135: ARRAY
42136: PUSH
42137: LD_VAR 0 2
42141: EQUAL
42142: AND
42143: ST_TO_ADDR
// end ;
42144: LD_VAR 0 3
42148: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42149: LD_INT 0
42151: PPUSH
// SetDir ( unit , d ) ;
42152: LD_VAR 0 1
42156: PPUSH
42157: LD_VAR 0 4
42161: PPUSH
42162: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42166: LD_ADDR_VAR 0 6
42170: PUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: LD_VAR 0 2
42180: PPUSH
42181: LD_VAR 0 3
42185: PPUSH
42186: LD_VAR 0 5
42190: PPUSH
42191: CALL_OW 48
42195: ST_TO_ADDR
// end ;
42196: LD_VAR 0 6
42200: RET
// export function ToNaturalNumber ( number ) ; begin
42201: LD_INT 0
42203: PPUSH
// result := number div 1 ;
42204: LD_ADDR_VAR 0 2
42208: PUSH
42209: LD_VAR 0 1
42213: PUSH
42214: LD_INT 1
42216: DIV
42217: ST_TO_ADDR
// if number < 0 then
42218: LD_VAR 0 1
42222: PUSH
42223: LD_INT 0
42225: LESS
42226: IFFALSE 42236
// result := 0 ;
42228: LD_ADDR_VAR 0 2
42232: PUSH
42233: LD_INT 0
42235: ST_TO_ADDR
// end ;
42236: LD_VAR 0 2
42240: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
42241: LD_INT 0
42243: PPUSH
42244: PPUSH
42245: PPUSH
// if not buildings then
42246: LD_VAR 0 1
42250: NOT
42251: IFFALSE 42255
// exit ;
42253: GO 42370
// tmp := [ ] ;
42255: LD_ADDR_VAR 0 5
42259: PUSH
42260: EMPTY
42261: ST_TO_ADDR
// for b in buildings do
42262: LD_ADDR_VAR 0 4
42266: PUSH
42267: LD_VAR 0 1
42271: PUSH
42272: FOR_IN
42273: IFFALSE 42311
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
42275: LD_ADDR_VAR 0 5
42279: PUSH
42280: LD_VAR 0 5
42284: PPUSH
42285: LD_VAR 0 5
42289: PUSH
42290: LD_INT 1
42292: PLUS
42293: PPUSH
42294: LD_VAR 0 4
42298: PPUSH
42299: CALL_OW 266
42303: PPUSH
42304: CALL_OW 1
42308: ST_TO_ADDR
42309: GO 42272
42311: POP
42312: POP
// if not tmp then
42313: LD_VAR 0 5
42317: NOT
42318: IFFALSE 42322
// exit ;
42320: GO 42370
// if asc then
42322: LD_VAR 0 2
42326: IFFALSE 42350
// result := SortListByListAsc ( buildings , tmp ) else
42328: LD_ADDR_VAR 0 3
42332: PUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: LD_VAR 0 5
42342: PPUSH
42343: CALL_OW 76
42347: ST_TO_ADDR
42348: GO 42370
// result := SortListByListDesc ( buildings , tmp ) ;
42350: LD_ADDR_VAR 0 3
42354: PUSH
42355: LD_VAR 0 1
42359: PPUSH
42360: LD_VAR 0 5
42364: PPUSH
42365: CALL_OW 77
42369: ST_TO_ADDR
// end ;
42370: LD_VAR 0 3
42374: RET
// export function SortByClass ( units , class ) ; var un ; begin
42375: LD_INT 0
42377: PPUSH
42378: PPUSH
// if not units or not class then
42379: LD_VAR 0 1
42383: NOT
42384: IFTRUE 42393
42386: PUSH
42387: LD_VAR 0 2
42391: NOT
42392: OR
42393: IFFALSE 42397
// exit ;
42395: GO 42492
// result := [ ] ;
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: EMPTY
42403: ST_TO_ADDR
// for un in units do
42404: LD_ADDR_VAR 0 4
42408: PUSH
42409: LD_VAR 0 1
42413: PUSH
42414: FOR_IN
42415: IFFALSE 42490
// if GetClass ( un ) = class then
42417: LD_VAR 0 4
42421: PPUSH
42422: CALL_OW 257
42426: PUSH
42427: LD_VAR 0 2
42431: EQUAL
42432: IFFALSE 42459
// result := Insert ( result , 1 , un ) else
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_VAR 0 3
42443: PPUSH
42444: LD_INT 1
42446: PPUSH
42447: LD_VAR 0 4
42451: PPUSH
42452: CALL_OW 2
42456: ST_TO_ADDR
42457: GO 42488
// result := Replace ( result , result + 1 , un ) ;
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: LD_VAR 0 3
42468: PPUSH
42469: LD_VAR 0 3
42473: PUSH
42474: LD_INT 1
42476: PLUS
42477: PPUSH
42478: LD_VAR 0 4
42482: PPUSH
42483: CALL_OW 1
42487: ST_TO_ADDR
42488: GO 42414
42490: POP
42491: POP
// end ;
42492: LD_VAR 0 3
42496: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42497: LD_INT 0
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
// result := [ ] ;
42506: LD_ADDR_VAR 0 4
42510: PUSH
42511: EMPTY
42512: ST_TO_ADDR
// if x - r < 0 then
42513: LD_VAR 0 1
42517: PUSH
42518: LD_VAR 0 3
42522: MINUS
42523: PUSH
42524: LD_INT 0
42526: LESS
42527: IFFALSE 42539
// min_x := 0 else
42529: LD_ADDR_VAR 0 8
42533: PUSH
42534: LD_INT 0
42536: ST_TO_ADDR
42537: GO 42555
// min_x := x - r ;
42539: LD_ADDR_VAR 0 8
42543: PUSH
42544: LD_VAR 0 1
42548: PUSH
42549: LD_VAR 0 3
42553: MINUS
42554: ST_TO_ADDR
// if y - r < 0 then
42555: LD_VAR 0 2
42559: PUSH
42560: LD_VAR 0 3
42564: MINUS
42565: PUSH
42566: LD_INT 0
42568: LESS
42569: IFFALSE 42581
// min_y := 0 else
42571: LD_ADDR_VAR 0 7
42575: PUSH
42576: LD_INT 0
42578: ST_TO_ADDR
42579: GO 42597
// min_y := y - r ;
42581: LD_ADDR_VAR 0 7
42585: PUSH
42586: LD_VAR 0 2
42590: PUSH
42591: LD_VAR 0 3
42595: MINUS
42596: ST_TO_ADDR
// max_x := x + r ;
42597: LD_ADDR_VAR 0 9
42601: PUSH
42602: LD_VAR 0 1
42606: PUSH
42607: LD_VAR 0 3
42611: PLUS
42612: ST_TO_ADDR
// max_y := y + r ;
42613: LD_ADDR_VAR 0 10
42617: PUSH
42618: LD_VAR 0 2
42622: PUSH
42623: LD_VAR 0 3
42627: PLUS
42628: ST_TO_ADDR
// for _x = min_x to max_x do
42629: LD_ADDR_VAR 0 5
42633: PUSH
42634: DOUBLE
42635: LD_VAR 0 8
42639: DEC
42640: ST_TO_ADDR
42641: LD_VAR 0 9
42645: PUSH
42646: FOR_TO
42647: IFFALSE 42748
// for _y = min_y to max_y do
42649: LD_ADDR_VAR 0 6
42653: PUSH
42654: DOUBLE
42655: LD_VAR 0 7
42659: DEC
42660: ST_TO_ADDR
42661: LD_VAR 0 10
42665: PUSH
42666: FOR_TO
42667: IFFALSE 42744
// begin if not ValidHex ( _x , _y ) then
42669: LD_VAR 0 5
42673: PPUSH
42674: LD_VAR 0 6
42678: PPUSH
42679: CALL_OW 488
42683: NOT
42684: IFFALSE 42688
// continue ;
42686: GO 42666
// if GetResourceTypeXY ( _x , _y ) then
42688: LD_VAR 0 5
42692: PPUSH
42693: LD_VAR 0 6
42697: PPUSH
42698: CALL_OW 283
42702: IFFALSE 42742
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42704: LD_ADDR_VAR 0 4
42708: PUSH
42709: LD_VAR 0 4
42713: PPUSH
42714: LD_VAR 0 4
42718: PUSH
42719: LD_INT 1
42721: PLUS
42722: PPUSH
42723: LD_VAR 0 5
42727: PUSH
42728: LD_VAR 0 6
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PPUSH
42737: CALL_OW 1
42741: ST_TO_ADDR
// end ;
42742: GO 42666
42744: POP
42745: POP
42746: GO 42646
42748: POP
42749: POP
// end ;
42750: LD_VAR 0 4
42754: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42755: LD_INT 0
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
// if not units then
42765: LD_VAR 0 1
42769: NOT
42770: IFFALSE 42774
// exit ;
42772: GO 43306
// result := UnitFilter ( units , [ f_ok ] ) ;
42774: LD_ADDR_VAR 0 3
42778: PUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: LD_INT 50
42786: PUSH
42787: EMPTY
42788: LIST
42789: PPUSH
42790: CALL_OW 72
42794: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42795: LD_ADDR_VAR 0 8
42799: PUSH
42800: LD_VAR 0 1
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: CALL_OW 255
42813: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42814: LD_ADDR_VAR 0 10
42818: PUSH
42819: LD_INT 29
42821: PUSH
42822: LD_INT 91
42824: PUSH
42825: LD_INT 49
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: ST_TO_ADDR
// if not result then
42833: LD_VAR 0 3
42837: NOT
42838: IFFALSE 42842
// exit ;
42840: GO 43306
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42842: LD_ADDR_VAR 0 5
42846: PUSH
42847: LD_INT 81
42849: PUSH
42850: LD_VAR 0 8
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PPUSH
42859: CALL_OW 69
42863: ST_TO_ADDR
// for i in result do
42864: LD_ADDR_VAR 0 4
42868: PUSH
42869: LD_VAR 0 3
42873: PUSH
42874: FOR_IN
42875: IFFALSE 43304
// begin tag := GetTag ( i ) + 1 ;
42877: LD_ADDR_VAR 0 9
42881: PUSH
42882: LD_VAR 0 4
42886: PPUSH
42887: CALL_OW 110
42891: PUSH
42892: LD_INT 1
42894: PLUS
42895: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42896: LD_ADDR_VAR 0 7
42900: PUSH
42901: LD_VAR 0 4
42905: PPUSH
42906: CALL_OW 250
42910: PPUSH
42911: LD_VAR 0 4
42915: PPUSH
42916: CALL_OW 251
42920: PPUSH
42921: LD_INT 4
42923: PPUSH
42924: CALL 42497 0 3
42928: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42929: LD_VAR 0 4
42933: PPUSH
42934: CALL_OW 247
42938: PUSH
42939: LD_INT 2
42941: EQUAL
42942: IFFALSE 42954
42944: PUSH
42945: LD_VAR 0 7
42949: PUSH
42950: LD_INT 2
42952: GREATER
42953: AND
42954: IFFALSE 42974
42956: PUSH
42957: LD_VAR 0 4
42961: PPUSH
42962: CALL_OW 264
42966: PUSH
42967: LD_VAR 0 10
42971: IN
42972: NOT
42973: AND
42974: IFFALSE 43013
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42976: LD_VAR 0 4
42980: PPUSH
42981: LD_VAR 0 7
42985: PUSH
42986: LD_INT 1
42988: ARRAY
42989: PUSH
42990: LD_INT 1
42992: ARRAY
42993: PPUSH
42994: LD_VAR 0 7
42998: PUSH
42999: LD_INT 1
43001: ARRAY
43002: PUSH
43003: LD_INT 2
43005: ARRAY
43006: PPUSH
43007: CALL_OW 116
43011: GO 43302
// if path > tag then
43013: LD_VAR 0 2
43017: PUSH
43018: LD_VAR 0 9
43022: GREATER
43023: IFFALSE 43231
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43025: LD_ADDR_VAR 0 6
43029: PUSH
43030: LD_VAR 0 5
43034: PPUSH
43035: LD_INT 91
43037: PUSH
43038: LD_VAR 0 4
43042: PUSH
43043: LD_INT 8
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: PPUSH
43051: CALL_OW 72
43055: ST_TO_ADDR
// if nearEnemy then
43056: LD_VAR 0 6
43060: IFFALSE 43129
// begin if GetWeapon ( i ) = ru_time_lapser then
43062: LD_VAR 0 4
43066: PPUSH
43067: CALL_OW 264
43071: PUSH
43072: LD_INT 49
43074: EQUAL
43075: IFFALSE 43103
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43077: LD_VAR 0 4
43081: PPUSH
43082: LD_VAR 0 6
43086: PPUSH
43087: LD_VAR 0 4
43091: PPUSH
43092: CALL_OW 74
43096: PPUSH
43097: CALL_OW 112
43101: GO 43127
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43103: LD_VAR 0 4
43107: PPUSH
43108: LD_VAR 0 6
43112: PPUSH
43113: LD_VAR 0 4
43117: PPUSH
43118: CALL_OW 74
43122: PPUSH
43123: CALL 44387 0 2
// end else
43127: GO 43229
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43129: LD_VAR 0 4
43133: PPUSH
43134: LD_VAR 0 2
43138: PUSH
43139: LD_VAR 0 9
43143: ARRAY
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 2
43153: PUSH
43154: LD_VAR 0 9
43158: ARRAY
43159: PUSH
43160: LD_INT 2
43162: ARRAY
43163: PPUSH
43164: CALL_OW 297
43168: PUSH
43169: LD_INT 6
43171: GREATER
43172: IFFALSE 43215
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43174: LD_VAR 0 4
43178: PPUSH
43179: LD_VAR 0 2
43183: PUSH
43184: LD_VAR 0 9
43188: ARRAY
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: PPUSH
43194: LD_VAR 0 2
43198: PUSH
43199: LD_VAR 0 9
43203: ARRAY
43204: PUSH
43205: LD_INT 2
43207: ARRAY
43208: PPUSH
43209: CALL_OW 114
43213: GO 43229
// SetTag ( i , tag ) ;
43215: LD_VAR 0 4
43219: PPUSH
43220: LD_VAR 0 9
43224: PPUSH
43225: CALL_OW 109
// end else
43229: GO 43302
// if enemy then
43231: LD_VAR 0 5
43235: IFFALSE 43302
// begin if GetWeapon ( i ) = ru_time_lapser then
43237: LD_VAR 0 4
43241: PPUSH
43242: CALL_OW 264
43246: PUSH
43247: LD_INT 49
43249: EQUAL
43250: IFFALSE 43278
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43252: LD_VAR 0 4
43256: PPUSH
43257: LD_VAR 0 5
43261: PPUSH
43262: LD_VAR 0 4
43266: PPUSH
43267: CALL_OW 74
43271: PPUSH
43272: CALL_OW 112
43276: GO 43302
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43278: LD_VAR 0 4
43282: PPUSH
43283: LD_VAR 0 5
43287: PPUSH
43288: LD_VAR 0 4
43292: PPUSH
43293: CALL_OW 74
43297: PPUSH
43298: CALL 44387 0 2
// end ; end ;
43302: GO 42874
43304: POP
43305: POP
// end ;
43306: LD_VAR 0 3
43310: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43311: LD_INT 0
43313: PPUSH
43314: PPUSH
43315: PPUSH
// if not unit or IsInUnit ( unit ) then
43316: LD_VAR 0 1
43320: NOT
43321: IFTRUE 43334
43323: PUSH
43324: LD_VAR 0 1
43328: PPUSH
43329: CALL_OW 310
43333: OR
43334: IFFALSE 43338
// exit ;
43336: GO 43429
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43338: LD_ADDR_VAR 0 4
43342: PUSH
43343: LD_VAR 0 1
43347: PPUSH
43348: CALL_OW 250
43352: PPUSH
43353: LD_VAR 0 2
43357: PPUSH
43358: LD_INT 1
43360: PPUSH
43361: CALL_OW 272
43365: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43366: LD_ADDR_VAR 0 5
43370: PUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: CALL_OW 251
43380: PPUSH
43381: LD_VAR 0 2
43385: PPUSH
43386: LD_INT 1
43388: PPUSH
43389: CALL_OW 273
43393: ST_TO_ADDR
// if ValidHex ( x , y ) then
43394: LD_VAR 0 4
43398: PPUSH
43399: LD_VAR 0 5
43403: PPUSH
43404: CALL_OW 488
43408: IFFALSE 43429
// ComTurnXY ( unit , x , y ) ;
43410: LD_VAR 0 1
43414: PPUSH
43415: LD_VAR 0 4
43419: PPUSH
43420: LD_VAR 0 5
43424: PPUSH
43425: CALL_OW 118
// end ;
43429: LD_VAR 0 3
43433: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43434: LD_INT 0
43436: PPUSH
43437: PPUSH
// result := false ;
43438: LD_ADDR_VAR 0 3
43442: PUSH
43443: LD_INT 0
43445: ST_TO_ADDR
// if not units then
43446: LD_VAR 0 2
43450: NOT
43451: IFFALSE 43455
// exit ;
43453: GO 43500
// for i in units do
43455: LD_ADDR_VAR 0 4
43459: PUSH
43460: LD_VAR 0 2
43464: PUSH
43465: FOR_IN
43466: IFFALSE 43498
// if See ( side , i ) then
43468: LD_VAR 0 1
43472: PPUSH
43473: LD_VAR 0 4
43477: PPUSH
43478: CALL_OW 292
43482: IFFALSE 43496
// begin result := true ;
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_INT 1
43491: ST_TO_ADDR
// exit ;
43492: POP
43493: POP
43494: GO 43500
// end ;
43496: GO 43465
43498: POP
43499: POP
// end ;
43500: LD_VAR 0 3
43504: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43505: LD_INT 0
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
// if not unit or not points then
43511: LD_VAR 0 1
43515: NOT
43516: IFTRUE 43525
43518: PUSH
43519: LD_VAR 0 2
43523: NOT
43524: OR
43525: IFFALSE 43529
// exit ;
43527: GO 43619
// dist := 99999 ;
43529: LD_ADDR_VAR 0 5
43533: PUSH
43534: LD_INT 99999
43536: ST_TO_ADDR
// for i in points do
43537: LD_ADDR_VAR 0 4
43541: PUSH
43542: LD_VAR 0 2
43546: PUSH
43547: FOR_IN
43548: IFFALSE 43617
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43550: LD_ADDR_VAR 0 6
43554: PUSH
43555: LD_VAR 0 1
43559: PPUSH
43560: LD_VAR 0 4
43564: PUSH
43565: LD_INT 1
43567: ARRAY
43568: PPUSH
43569: LD_VAR 0 4
43573: PUSH
43574: LD_INT 2
43576: ARRAY
43577: PPUSH
43578: CALL_OW 297
43582: ST_TO_ADDR
// if tmpDist < dist then
43583: LD_VAR 0 6
43587: PUSH
43588: LD_VAR 0 5
43592: LESS
43593: IFFALSE 43615
// begin result := i ;
43595: LD_ADDR_VAR 0 3
43599: PUSH
43600: LD_VAR 0 4
43604: ST_TO_ADDR
// dist := tmpDist ;
43605: LD_ADDR_VAR 0 5
43609: PUSH
43610: LD_VAR 0 6
43614: ST_TO_ADDR
// end ; end ;
43615: GO 43547
43617: POP
43618: POP
// end ;
43619: LD_VAR 0 3
43623: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43624: LD_INT 0
43626: PPUSH
// uc_side := side ;
43627: LD_ADDR_OWVAR 20
43631: PUSH
43632: LD_VAR 0 1
43636: ST_TO_ADDR
// uc_nation := 3 ;
43637: LD_ADDR_OWVAR 21
43641: PUSH
43642: LD_INT 3
43644: ST_TO_ADDR
// vc_chassis := 25 ;
43645: LD_ADDR_OWVAR 37
43649: PUSH
43650: LD_INT 25
43652: ST_TO_ADDR
// vc_engine := engine_siberite ;
43653: LD_ADDR_OWVAR 39
43657: PUSH
43658: LD_INT 3
43660: ST_TO_ADDR
// vc_control := control_computer ;
43661: LD_ADDR_OWVAR 38
43665: PUSH
43666: LD_INT 3
43668: ST_TO_ADDR
// vc_weapon := 59 ;
43669: LD_ADDR_OWVAR 40
43673: PUSH
43674: LD_INT 59
43676: ST_TO_ADDR
// result := CreateVehicle ;
43677: LD_ADDR_VAR 0 5
43681: PUSH
43682: CALL_OW 45
43686: ST_TO_ADDR
// SetDir ( result , d ) ;
43687: LD_VAR 0 5
43691: PPUSH
43692: LD_VAR 0 4
43696: PPUSH
43697: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43701: LD_VAR 0 5
43705: PPUSH
43706: LD_VAR 0 2
43710: PPUSH
43711: LD_VAR 0 3
43715: PPUSH
43716: LD_INT 0
43718: PPUSH
43719: CALL_OW 48
// end ;
43723: LD_VAR 0 5
43727: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43728: LD_INT 0
43730: PPUSH
43731: PPUSH
43732: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43733: LD_ADDR_VAR 0 2
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43756: LD_VAR 0 1
43760: NOT
43761: IFTRUE 43794
43763: PUSH
43764: LD_VAR 0 1
43768: PPUSH
43769: CALL_OW 264
43773: PUSH
43774: LD_INT 12
43776: PUSH
43777: LD_INT 51
43779: PUSH
43780: LD_INT 32
43782: PUSH
43783: LD_INT 89
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: IN
43792: NOT
43793: OR
43794: IFFALSE 43798
// exit ;
43796: GO 43896
// for i := 1 to 3 do
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: DOUBLE
43804: LD_INT 1
43806: DEC
43807: ST_TO_ADDR
43808: LD_INT 3
43810: PUSH
43811: FOR_TO
43812: IFFALSE 43894
// begin tmp := GetCargo ( cargo , i ) ;
43814: LD_ADDR_VAR 0 4
43818: PUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: LD_VAR 0 3
43828: PPUSH
43829: CALL_OW 289
43833: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43834: LD_ADDR_VAR 0 2
43838: PUSH
43839: LD_VAR 0 2
43843: PPUSH
43844: LD_VAR 0 3
43848: PPUSH
43849: LD_VAR 0 4
43853: PPUSH
43854: CALL_OW 1
43858: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43859: LD_ADDR_VAR 0 2
43863: PUSH
43864: LD_VAR 0 2
43868: PPUSH
43869: LD_INT 4
43871: PPUSH
43872: LD_VAR 0 2
43876: PUSH
43877: LD_INT 4
43879: ARRAY
43880: PUSH
43881: LD_VAR 0 4
43885: PLUS
43886: PPUSH
43887: CALL_OW 1
43891: ST_TO_ADDR
// end ;
43892: GO 43811
43894: POP
43895: POP
// end ;
43896: LD_VAR 0 2
43900: RET
// export function Length ( array ) ; begin
43901: LD_INT 0
43903: PPUSH
// result := array + 0 ;
43904: LD_ADDR_VAR 0 2
43908: PUSH
43909: LD_VAR 0 1
43913: PUSH
43914: LD_INT 0
43916: PLUS
43917: ST_TO_ADDR
// end ;
43918: LD_VAR 0 2
43922: RET
// export function PrepareArray ( array ) ; begin
43923: LD_INT 0
43925: PPUSH
// result := array diff 0 ;
43926: LD_ADDR_VAR 0 2
43930: PUSH
43931: LD_VAR 0 1
43935: PUSH
43936: LD_INT 0
43938: DIFF
43939: ST_TO_ADDR
// if not result [ 1 ] then
43940: LD_VAR 0 2
43944: PUSH
43945: LD_INT 1
43947: ARRAY
43948: NOT
43949: IFFALSE 43969
// result := Delete ( result , 1 ) ;
43951: LD_ADDR_VAR 0 2
43955: PUSH
43956: LD_VAR 0 2
43960: PPUSH
43961: LD_INT 1
43963: PPUSH
43964: CALL_OW 3
43968: ST_TO_ADDR
// end ;
43969: LD_VAR 0 2
43973: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43974: LD_INT 0
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
// sibRocketRange := 25 ;
43980: LD_ADDR_VAR 0 6
43984: PUSH
43985: LD_INT 25
43987: ST_TO_ADDR
// result := false ;
43988: LD_ADDR_VAR 0 4
43992: PUSH
43993: LD_INT 0
43995: ST_TO_ADDR
// for i := 0 to 5 do
43996: LD_ADDR_VAR 0 5
44000: PUSH
44001: DOUBLE
44002: LD_INT 0
44004: DEC
44005: ST_TO_ADDR
44006: LD_INT 5
44008: PUSH
44009: FOR_TO
44010: IFFALSE 44077
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44012: LD_VAR 0 1
44016: PPUSH
44017: LD_VAR 0 5
44021: PPUSH
44022: LD_VAR 0 6
44026: PPUSH
44027: CALL_OW 272
44031: PPUSH
44032: LD_VAR 0 2
44036: PPUSH
44037: LD_VAR 0 5
44041: PPUSH
44042: LD_VAR 0 6
44046: PPUSH
44047: CALL_OW 273
44051: PPUSH
44052: LD_VAR 0 3
44056: PPUSH
44057: CALL_OW 309
44061: IFFALSE 44075
// begin result := true ;
44063: LD_ADDR_VAR 0 4
44067: PUSH
44068: LD_INT 1
44070: ST_TO_ADDR
// exit ;
44071: POP
44072: POP
44073: GO 44079
// end ;
44075: GO 44009
44077: POP
44078: POP
// end ;
44079: LD_VAR 0 4
44083: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44084: LD_INT 0
44086: PPUSH
44087: PPUSH
44088: PPUSH
// if btype = b_depot then
44089: LD_VAR 0 2
44093: PUSH
44094: LD_INT 0
44096: EQUAL
44097: IFFALSE 44109
// begin result := true ;
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: LD_INT 1
44106: ST_TO_ADDR
// exit ;
44107: GO 44229
// end ; pom := GetBase ( depot ) ;
44109: LD_ADDR_VAR 0 4
44113: PUSH
44114: LD_VAR 0 1
44118: PPUSH
44119: CALL_OW 274
44123: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44124: LD_ADDR_VAR 0 5
44128: PUSH
44129: LD_VAR 0 2
44133: PPUSH
44134: LD_VAR 0 1
44138: PPUSH
44139: CALL_OW 248
44143: PPUSH
44144: CALL_OW 450
44148: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44149: LD_ADDR_VAR 0 3
44153: PUSH
44154: LD_VAR 0 4
44158: PPUSH
44159: LD_INT 1
44161: PPUSH
44162: CALL_OW 275
44166: PUSH
44167: LD_VAR 0 5
44171: PUSH
44172: LD_INT 1
44174: ARRAY
44175: GREATEREQUAL
44176: IFFALSE 44202
44178: PUSH
44179: LD_VAR 0 4
44183: PPUSH
44184: LD_INT 2
44186: PPUSH
44187: CALL_OW 275
44191: PUSH
44192: LD_VAR 0 5
44196: PUSH
44197: LD_INT 2
44199: ARRAY
44200: GREATEREQUAL
44201: AND
44202: IFFALSE 44228
44204: PUSH
44205: LD_VAR 0 4
44209: PPUSH
44210: LD_INT 3
44212: PPUSH
44213: CALL_OW 275
44217: PUSH
44218: LD_VAR 0 5
44222: PUSH
44223: LD_INT 3
44225: ARRAY
44226: GREATEREQUAL
44227: AND
44228: ST_TO_ADDR
// end ;
44229: LD_VAR 0 3
44233: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44234: LD_INT 0
44236: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44237: LD_VAR 0 1
44241: PPUSH
44242: LD_VAR 0 2
44246: PPUSH
44247: LD_INT 0
44249: PPUSH
44250: LD_INT 0
44252: PPUSH
44253: LD_INT 1
44255: PPUSH
44256: LD_INT 0
44258: PPUSH
44259: CALL_OW 587
// end ;
44263: LD_VAR 0 3
44267: RET
// export function CenterOnNow ( unit ) ; begin
44268: LD_INT 0
44270: PPUSH
// result := IsInUnit ( unit ) ;
44271: LD_ADDR_VAR 0 2
44275: PUSH
44276: LD_VAR 0 1
44280: PPUSH
44281: CALL_OW 310
44285: ST_TO_ADDR
// if not result then
44286: LD_VAR 0 2
44290: NOT
44291: IFFALSE 44303
// result := unit ;
44293: LD_ADDR_VAR 0 2
44297: PUSH
44298: LD_VAR 0 1
44302: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44303: LD_VAR 0 1
44307: PPUSH
44308: CALL_OW 87
// end ;
44312: LD_VAR 0 2
44316: RET
// export function ComMoveHex ( unit , hex ) ; begin
44317: LD_INT 0
44319: PPUSH
// if not hex then
44320: LD_VAR 0 2
44324: NOT
44325: IFFALSE 44329
// exit ;
44327: GO 44382
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44329: LD_VAR 0 2
44333: PUSH
44334: LD_INT 1
44336: ARRAY
44337: PPUSH
44338: LD_VAR 0 2
44342: PUSH
44343: LD_INT 2
44345: ARRAY
44346: PPUSH
44347: CALL_OW 428
44351: IFFALSE 44355
// exit ;
44353: GO 44382
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44355: LD_VAR 0 1
44359: PPUSH
44360: LD_VAR 0 2
44364: PUSH
44365: LD_INT 1
44367: ARRAY
44368: PPUSH
44369: LD_VAR 0 2
44373: PUSH
44374: LD_INT 2
44376: ARRAY
44377: PPUSH
44378: CALL_OW 111
// end ;
44382: LD_VAR 0 3
44386: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44387: LD_INT 0
44389: PPUSH
44390: PPUSH
44391: PPUSH
// if not unit or not enemy then
44392: LD_VAR 0 1
44396: NOT
44397: IFTRUE 44406
44399: PUSH
44400: LD_VAR 0 2
44404: NOT
44405: OR
44406: IFFALSE 44410
// exit ;
44408: GO 44536
// x := GetX ( enemy ) ;
44410: LD_ADDR_VAR 0 4
44414: PUSH
44415: LD_VAR 0 2
44419: PPUSH
44420: CALL_OW 250
44424: ST_TO_ADDR
// y := GetY ( enemy ) ;
44425: LD_ADDR_VAR 0 5
44429: PUSH
44430: LD_VAR 0 2
44434: PPUSH
44435: CALL_OW 251
44439: ST_TO_ADDR
// if ValidHex ( x , y ) then
44440: LD_VAR 0 4
44444: PPUSH
44445: LD_VAR 0 5
44449: PPUSH
44450: CALL_OW 488
44454: IFFALSE 44536
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44456: LD_VAR 0 2
44460: PPUSH
44461: CALL_OW 247
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: IN
44476: IFTRUE 44499
44478: PUSH
44479: LD_VAR 0 1
44483: PPUSH
44484: CALL_OW 255
44488: PPUSH
44489: LD_VAR 0 2
44493: PPUSH
44494: CALL_OW 292
44498: OR
44499: IFFALSE 44517
// ComAttackUnit ( unit , enemy ) else
44501: LD_VAR 0 1
44505: PPUSH
44506: LD_VAR 0 2
44510: PPUSH
44511: CALL_OW 115
44515: GO 44536
// ComAgressiveMove ( unit , x , y ) ;
44517: LD_VAR 0 1
44521: PPUSH
44522: LD_VAR 0 4
44526: PPUSH
44527: LD_VAR 0 5
44531: PPUSH
44532: CALL_OW 114
// end ;
44536: LD_VAR 0 3
44540: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44541: LD_INT 0
44543: PPUSH
44544: PPUSH
44545: PPUSH
// list := AreaToList ( area , 0 ) ;
44546: LD_ADDR_VAR 0 5
44550: PUSH
44551: LD_VAR 0 1
44555: PPUSH
44556: LD_INT 0
44558: PPUSH
44559: CALL_OW 517
44563: ST_TO_ADDR
// if not list then
44564: LD_VAR 0 5
44568: NOT
44569: IFFALSE 44573
// exit ;
44571: GO 44703
// if all then
44573: LD_VAR 0 2
44577: IFFALSE 44665
// begin for i := 1 to list [ 1 ] do
44579: LD_ADDR_VAR 0 4
44583: PUSH
44584: DOUBLE
44585: LD_INT 1
44587: DEC
44588: ST_TO_ADDR
44589: LD_VAR 0 5
44593: PUSH
44594: LD_INT 1
44596: ARRAY
44597: PUSH
44598: FOR_TO
44599: IFFALSE 44661
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44601: LD_ADDR_VAR 0 3
44605: PUSH
44606: LD_VAR 0 3
44610: PPUSH
44611: LD_VAR 0 3
44615: PUSH
44616: LD_INT 1
44618: PLUS
44619: PPUSH
44620: LD_VAR 0 5
44624: PUSH
44625: LD_INT 1
44627: ARRAY
44628: PUSH
44629: LD_VAR 0 4
44633: ARRAY
44634: PUSH
44635: LD_VAR 0 5
44639: PUSH
44640: LD_INT 2
44642: ARRAY
44643: PUSH
44644: LD_VAR 0 4
44648: ARRAY
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PPUSH
44654: CALL_OW 1
44658: ST_TO_ADDR
44659: GO 44598
44661: POP
44662: POP
// exit ;
44663: GO 44703
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44665: LD_ADDR_VAR 0 3
44669: PUSH
44670: LD_VAR 0 5
44674: PUSH
44675: LD_INT 1
44677: ARRAY
44678: PUSH
44679: LD_INT 1
44681: ARRAY
44682: PUSH
44683: LD_VAR 0 5
44687: PUSH
44688: LD_INT 2
44690: ARRAY
44691: PUSH
44692: LD_INT 1
44694: ARRAY
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: EMPTY
44701: LIST
44702: ST_TO_ADDR
// end ;
44703: LD_VAR 0 3
44707: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44708: LD_INT 0
44710: PPUSH
44711: PPUSH
// list := AreaToList ( area , 0 ) ;
44712: LD_ADDR_VAR 0 4
44716: PUSH
44717: LD_VAR 0 1
44721: PPUSH
44722: LD_INT 0
44724: PPUSH
44725: CALL_OW 517
44729: ST_TO_ADDR
// if not list then
44730: LD_VAR 0 4
44734: NOT
44735: IFFALSE 44739
// exit ;
44737: GO 44780
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44739: LD_ADDR_VAR 0 3
44743: PUSH
44744: LD_VAR 0 4
44748: PUSH
44749: LD_INT 1
44751: ARRAY
44752: PUSH
44753: LD_INT 1
44755: ARRAY
44756: PUSH
44757: LD_VAR 0 4
44761: PUSH
44762: LD_INT 2
44764: ARRAY
44765: PUSH
44766: LD_INT 1
44768: ARRAY
44769: PUSH
44770: LD_VAR 0 2
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: ST_TO_ADDR
// end ;
44780: LD_VAR 0 3
44784: RET
// export function First ( array ) ; begin
44785: LD_INT 0
44787: PPUSH
// if not array then
44788: LD_VAR 0 1
44792: NOT
44793: IFFALSE 44797
// exit ;
44795: GO 44811
// result := array [ 1 ] ;
44797: LD_ADDR_VAR 0 2
44801: PUSH
44802: LD_VAR 0 1
44806: PUSH
44807: LD_INT 1
44809: ARRAY
44810: ST_TO_ADDR
// end ;
44811: LD_VAR 0 2
44815: RET
// export function Last ( array ) ; begin
44816: LD_INT 0
44818: PPUSH
// if not array then
44819: LD_VAR 0 1
44823: NOT
44824: IFFALSE 44828
// exit ;
44826: GO 44844
// result := array [ array ] ;
44828: LD_ADDR_VAR 0 2
44832: PUSH
44833: LD_VAR 0 1
44837: PUSH
44838: LD_VAR 0 1
44842: ARRAY
44843: ST_TO_ADDR
// end ;
44844: LD_VAR 0 2
44848: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44849: LD_INT 0
44851: PPUSH
44852: PPUSH
// result := [ ] ;
44853: LD_ADDR_VAR 0 5
44857: PUSH
44858: EMPTY
44859: ST_TO_ADDR
// if not array then
44860: LD_VAR 0 1
44864: NOT
44865: IFFALSE 44869
// exit ;
44867: GO 44981
// for i := 1 to array do
44869: LD_ADDR_VAR 0 6
44873: PUSH
44874: DOUBLE
44875: LD_INT 1
44877: DEC
44878: ST_TO_ADDR
44879: LD_VAR 0 1
44883: PUSH
44884: FOR_TO
44885: IFFALSE 44979
// if array [ i ] [ index ] = value then
44887: LD_VAR 0 1
44891: PUSH
44892: LD_VAR 0 6
44896: ARRAY
44897: PUSH
44898: LD_VAR 0 2
44902: ARRAY
44903: PUSH
44904: LD_VAR 0 3
44908: EQUAL
44909: IFFALSE 44977
// begin if indexColumn then
44911: LD_VAR 0 4
44915: IFFALSE 44951
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44917: LD_ADDR_VAR 0 5
44921: PUSH
44922: LD_VAR 0 5
44926: PPUSH
44927: LD_VAR 0 1
44931: PUSH
44932: LD_VAR 0 6
44936: ARRAY
44937: PUSH
44938: LD_VAR 0 4
44942: ARRAY
44943: PPUSH
44944: CALL 39989 0 2
44948: ST_TO_ADDR
44949: GO 44977
// result := Join ( result , array [ i ] ) ;
44951: LD_ADDR_VAR 0 5
44955: PUSH
44956: LD_VAR 0 5
44960: PPUSH
44961: LD_VAR 0 1
44965: PUSH
44966: LD_VAR 0 6
44970: ARRAY
44971: PPUSH
44972: CALL 39989 0 2
44976: ST_TO_ADDR
// end ;
44977: GO 44884
44979: POP
44980: POP
// end ;
44981: LD_VAR 0 5
44985: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44986: LD_INT 0
44988: PPUSH
// if not vehicles or not parkingPoint then
44989: LD_VAR 0 1
44993: NOT
44994: IFTRUE 45003
44996: PUSH
44997: LD_VAR 0 2
45001: NOT
45002: OR
45003: IFFALSE 45007
// exit ;
45005: GO 45105
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45007: LD_ADDR_VAR 0 1
45011: PUSH
45012: LD_VAR 0 1
45016: PPUSH
45017: LD_INT 50
45019: PUSH
45020: EMPTY
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: PUSH
45026: LD_INT 92
45028: PUSH
45029: LD_VAR 0 2
45033: PUSH
45034: LD_INT 1
45036: ARRAY
45037: PUSH
45038: LD_VAR 0 2
45042: PUSH
45043: LD_INT 2
45045: ARRAY
45046: PUSH
45047: LD_INT 8
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PPUSH
45064: CALL_OW 72
45068: ST_TO_ADDR
// if not vehicles then
45069: LD_VAR 0 1
45073: NOT
45074: IFFALSE 45078
// exit ;
45076: GO 45105
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45078: LD_VAR 0 1
45082: PPUSH
45083: LD_VAR 0 2
45087: PUSH
45088: LD_INT 1
45090: ARRAY
45091: PPUSH
45092: LD_VAR 0 2
45096: PUSH
45097: LD_INT 2
45099: ARRAY
45100: PPUSH
45101: CALL_OW 111
// end ;
45105: LD_VAR 0 3
45109: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45110: LD_INT 0
45112: PPUSH
45113: PPUSH
45114: PPUSH
// if not side or not area then
45115: LD_VAR 0 1
45119: NOT
45120: IFTRUE 45129
45122: PUSH
45123: LD_VAR 0 2
45127: NOT
45128: OR
45129: IFFALSE 45133
// exit ;
45131: GO 45252
// tmp := AreaToList ( area , 0 ) ;
45133: LD_ADDR_VAR 0 5
45137: PUSH
45138: LD_VAR 0 2
45142: PPUSH
45143: LD_INT 0
45145: PPUSH
45146: CALL_OW 517
45150: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45151: LD_ADDR_VAR 0 4
45155: PUSH
45156: DOUBLE
45157: LD_INT 1
45159: DEC
45160: ST_TO_ADDR
45161: LD_VAR 0 5
45165: PUSH
45166: LD_INT 1
45168: ARRAY
45169: PUSH
45170: FOR_TO
45171: IFFALSE 45250
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45173: LD_VAR 0 5
45177: PUSH
45178: LD_INT 1
45180: ARRAY
45181: PUSH
45182: LD_VAR 0 4
45186: ARRAY
45187: PPUSH
45188: LD_VAR 0 5
45192: PUSH
45193: LD_INT 2
45195: ARRAY
45196: PUSH
45197: LD_VAR 0 4
45201: ARRAY
45202: PPUSH
45203: CALL_OW 351
45207: IFFALSE 45248
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45209: LD_VAR 0 5
45213: PUSH
45214: LD_INT 1
45216: ARRAY
45217: PUSH
45218: LD_VAR 0 4
45222: ARRAY
45223: PPUSH
45224: LD_VAR 0 5
45228: PUSH
45229: LD_INT 2
45231: ARRAY
45232: PUSH
45233: LD_VAR 0 4
45237: ARRAY
45238: PPUSH
45239: LD_VAR 0 1
45243: PPUSH
45244: CALL_OW 244
// end ;
45248: GO 45170
45250: POP
45251: POP
// end ;
45252: LD_VAR 0 3
45256: RET
// export function UniqueArray ( array ) ; var i ; begin
45257: LD_INT 0
45259: PPUSH
45260: PPUSH
// result := [ ] ;
45261: LD_ADDR_VAR 0 2
45265: PUSH
45266: EMPTY
45267: ST_TO_ADDR
// if not array then
45268: LD_VAR 0 1
45272: NOT
45273: IFFALSE 45277
// exit ;
45275: GO 45338
// for i := 1 to array do
45277: LD_ADDR_VAR 0 3
45281: PUSH
45282: DOUBLE
45283: LD_INT 1
45285: DEC
45286: ST_TO_ADDR
45287: LD_VAR 0 1
45291: PUSH
45292: FOR_TO
45293: IFFALSE 45336
// if not array [ i ] in result then
45295: LD_VAR 0 1
45299: PUSH
45300: LD_VAR 0 3
45304: ARRAY
45305: PUSH
45306: LD_VAR 0 2
45310: IN
45311: NOT
45312: IFFALSE 45334
// result := Join ( result , i ) ;
45314: LD_ADDR_VAR 0 2
45318: PUSH
45319: LD_VAR 0 2
45323: PPUSH
45324: LD_VAR 0 3
45328: PPUSH
45329: CALL 39989 0 2
45333: ST_TO_ADDR
45334: GO 45292
45336: POP
45337: POP
// end ;
45338: LD_VAR 0 2
45342: RET
