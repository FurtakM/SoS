// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 39331 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1657 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 39359 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6497 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 39359 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 ;
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 95
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 3
 538: PUSH
 539: LD_INT 60
 541: PUSH
 542: EMPTY
 543: LIST
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: PPUSH
 554: CALL_OW 69
 558: PUSH
 559: LD_INT 5
 561: GREATEREQUAL
 562: IFFALSE 509
// wait ( 0 0$1 ) ;
 564: LD_INT 35
 566: PPUSH
 567: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 571: LD_EXP 2
 575: PPUSH
 576: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 580: LD_EXP 3
 584: PPUSH
 585: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 589: LD_INT 10
 591: PPUSH
 592: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 596: LD_EXP 3
 600: PPUSH
 601: LD_INT 52
 603: PPUSH
 604: LD_INT 42
 606: PPUSH
 607: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 611: LD_EXP 2
 615: PPUSH
 616: LD_INT 52
 618: PPUSH
 619: LD_INT 42
 621: PPUSH
 622: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 626: LD_EXP 3
 630: PPUSH
 631: LD_INT 68
 633: PPUSH
 634: LD_INT 55
 636: PPUSH
 637: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 641: LD_EXP 2
 645: PPUSH
 646: LD_INT 68
 648: PPUSH
 649: LD_INT 58
 651: PPUSH
 652: CALL_OW 171
// AddComTurnXY ( Powell , 73 , 54 ) ;
 656: LD_EXP 3
 660: PPUSH
 661: LD_INT 73
 663: PPUSH
 664: LD_INT 54
 666: PPUSH
 667: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 671: LD_EXP 2
 675: PPUSH
 676: LD_INT 74
 678: PPUSH
 679: LD_INT 58
 681: PPUSH
 682: CALL_OW 178
// ComExitVehicle ( people [ 4 ] ) ;
 686: LD_EXP 5
 690: PUSH
 691: LD_INT 4
 693: ARRAY
 694: PPUSH
 695: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 699: LD_EXP 5
 703: PUSH
 704: LD_INT 5
 706: ARRAY
 707: PPUSH
 708: CALL_OW 121
// wait ( 0 0$02 ) ;
 712: LD_INT 70
 714: PPUSH
 715: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 719: LD_EXP 5
 723: PUSH
 724: LD_INT 4
 726: ARRAY
 727: PPUSH
 728: LD_INT 50
 730: PPUSH
 731: LD_INT 40
 733: PPUSH
 734: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 738: LD_EXP 5
 742: PUSH
 743: LD_INT 5
 745: ARRAY
 746: PPUSH
 747: LD_INT 49
 749: PPUSH
 750: LD_INT 59
 752: PPUSH
 753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 757: LD_INT 35
 759: PPUSH
 760: CALL_OW 67
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 764: LD_EXP 3
 768: PPUSH
 769: LD_INT 68
 771: PPUSH
 772: LD_INT 55
 774: PPUSH
 775: CALL_OW 307
 779: PUSH
 780: LD_EXP 2
 784: PPUSH
 785: LD_INT 68
 787: PPUSH
 788: LD_INT 58
 790: PPUSH
 791: CALL_OW 307
 795: AND
 796: IFFALSE 757
// CenterNowOnUnits ( JMM ) ;
 798: LD_EXP 2
 802: PPUSH
 803: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 807: LD_EXP 3
 811: PPUSH
 812: LD_STRING D1-Pow-1
 814: PPUSH
 815: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 819: LD_EXP 2
 823: PPUSH
 824: LD_STRING D1-JMM-1
 826: PPUSH
 827: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 831: LD_EXP 3
 835: PPUSH
 836: LD_STRING D1-Pow-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_EXP 3
 852: PPUSH
 853: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 857: LD_EXP 2
 861: PPUSH
 862: LD_STRING D1-JMM-2
 864: PPUSH
 865: CALL_OW 88
// wait ( 0 0$01 ) ;
 869: LD_INT 35
 871: PPUSH
 872: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_EXP 2
 885: PPUSH
 886: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
 890: LD_EXP 3
 894: PPUSH
 895: LD_STRING D1-Pow-3
 897: PPUSH
 898: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
 902: LD_EXP 2
 906: PPUSH
 907: LD_STRING D1-JMM-3
 909: PPUSH
 910: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
 914: LD_EXP 3
 918: PPUSH
 919: LD_STRING D1-Pow-4
 921: PPUSH
 922: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
 926: LD_EXP 2
 930: PPUSH
 931: LD_STRING D1-JMM-4
 933: PPUSH
 934: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
 938: LD_EXP 3
 942: PPUSH
 943: LD_STRING D1-Pow-5
 945: PPUSH
 946: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
 950: LD_EXP 2
 954: PPUSH
 955: LD_STRING D1-JMM-5
 957: PPUSH
 958: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING D1-Pow-6
 969: PPUSH
 970: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
 974: LD_EXP 2
 978: PPUSH
 979: LD_STRING D1-JMM-6
 981: PPUSH
 982: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
 986: LD_EXP 3
 990: PPUSH
 991: LD_STRING D1-Pow-7
 993: PPUSH
 994: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
 998: LD_EXP 2
1002: PPUSH
1003: LD_STRING D1-JMM-7
1005: PPUSH
1006: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1010: LD_EXP 3
1014: PPUSH
1015: LD_INT 68
1017: PPUSH
1018: LD_INT 57
1020: PPUSH
1021: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1025: LD_INT 10
1027: PPUSH
1028: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_INT 68
1039: PPUSH
1040: LD_INT 57
1042: PPUSH
1043: CALL_OW 307
1047: IFFALSE 1025
// ComTurnUnit ( Powell , JMM ) ;
1049: LD_EXP 3
1053: PPUSH
1054: LD_EXP 2
1058: PPUSH
1059: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1063: LD_EXP 3
1067: PPUSH
1068: LD_STRING D1-Pow-8
1070: PPUSH
1071: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1075: LD_INT 18
1077: PPUSH
1078: CALL_OW 67
// Query ( QLetter ) ;
1082: LD_STRING QLetter
1084: PPUSH
1085: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1089: LD_EXP 3
1093: PPUSH
1094: LD_STRING D1aa-Pow-1
1096: PPUSH
1097: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1101: LD_EXP 2
1105: PPUSH
1106: LD_STRING D1aa-JMM-1
1108: PPUSH
1109: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1113: LD_EXP 3
1117: PPUSH
1118: LD_STRING D1aa-Pow-2
1120: PPUSH
1121: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1125: LD_EXP 2
1129: PPUSH
1130: LD_STRING D1aa-JMM-2
1132: PPUSH
1133: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1137: LD_EXP 3
1141: PPUSH
1142: LD_STRING D1aa-Pow-3
1144: PPUSH
1145: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1149: LD_EXP 2
1153: PPUSH
1154: LD_STRING D1aa-JMM-3
1156: PPUSH
1157: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1161: LD_EXP 3
1165: PPUSH
1166: LD_INT 69
1168: PPUSH
1169: LD_INT 55
1171: PPUSH
1172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1176: LD_INT 35
1178: PPUSH
1179: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1183: LD_EXP 3
1187: PPUSH
1188: LD_INT 69
1190: PPUSH
1191: LD_INT 55
1193: PPUSH
1194: CALL_OW 307
1198: IFFALSE 1176
// ComTurnXY ( Powell , 71 , 55 ) ;
1200: LD_EXP 3
1204: PPUSH
1205: LD_INT 71
1207: PPUSH
1208: LD_INT 55
1210: PPUSH
1211: CALL_OW 118
// wait ( 0 0$2 ) ;
1215: LD_INT 70
1217: PPUSH
1218: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1222: LD_EXP 3
1226: PPUSH
1227: LD_STRING D1aa-Pow-4
1229: PPUSH
1230: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1234: LD_EXP 2
1238: PPUSH
1239: LD_STRING D1aa-JMM-4
1241: PPUSH
1242: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1246: LD_EXP 3
1250: PPUSH
1251: LD_EXP 2
1255: PPUSH
1256: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1260: LD_INT 10
1262: PPUSH
1263: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1267: LD_EXP 3
1271: PPUSH
1272: LD_STRING D1aa-Pow-5
1274: PPUSH
1275: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1279: LD_EXP 2
1283: PPUSH
1284: LD_STRING D1aa-JMM-5
1286: PPUSH
1287: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1291: LD_EXP 3
1295: PPUSH
1296: LD_STRING D1aa-Pow-6
1298: PPUSH
1299: CALL_OW 88
// wait ( 0 0$1 ) ;
1303: LD_INT 35
1305: PPUSH
1306: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1310: LD_EXP 2
1314: PPUSH
1315: LD_EXP 4
1319: PUSH
1320: LD_INT 3
1322: ARRAY
1323: PPUSH
1324: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1328: LD_INT 18
1330: PPUSH
1331: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1335: LD_EXP 3
1339: PPUSH
1340: LD_EXP 4
1344: PUSH
1345: LD_INT 2
1347: ARRAY
1348: PPUSH
1349: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1353: LD_INT 35
1355: PPUSH
1356: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1360: LD_EXP 3
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL_OW 308
1372: IFFALSE 1353
// CenterOnXY ( 42 , 40 ) ;
1374: LD_INT 42
1376: PPUSH
1377: LD_INT 40
1379: PPUSH
1380: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1384: LD_EXP 5
1388: PUSH
1389: LD_INT 4
1391: ARRAY
1392: PPUSH
1393: LD_EXP 4
1397: PUSH
1398: LD_INT 4
1400: ARRAY
1401: PPUSH
1402: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1406: LD_EXP 5
1410: PUSH
1411: LD_INT 5
1413: ARRAY
1414: PPUSH
1415: LD_EXP 4
1419: PUSH
1420: LD_INT 5
1422: ARRAY
1423: PPUSH
1424: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1428: LD_INT 35
1430: PPUSH
1431: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1435: LD_INT 22
1437: PUSH
1438: LD_INT 1
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 56
1447: PUSH
1448: EMPTY
1449: LIST
1450: PUSH
1451: LD_INT 21
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL_OW 69
1470: PUSH
1471: LD_INT 0
1473: EQUAL
1474: IFFALSE 1428
// CenterOnXY ( 36 , 35 ) ;
1476: LD_INT 36
1478: PPUSH
1479: LD_INT 35
1481: PPUSH
1482: CALL_OW 84
// for i := 1 to 5 do
1486: LD_ADDR_VAR 0 2
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_INT 5
1498: PUSH
1499: FOR_TO
1500: IFFALSE 1532
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1502: LD_EXP 4
1506: PUSH
1507: LD_VAR 0 2
1511: ARRAY
1512: PPUSH
1513: LD_INT 11
1515: PPUSH
1516: LD_INT 18
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 67
// end ;
1530: GO 1499
1532: POP
1533: POP
// wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1541: LD_STRING 1
1543: PPUSH
1544: LD_STRING %_cont
1546: PPUSH
1547: CALL_OW 340
// end ;
1551: LD_VAR 0 1
1555: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1556: LD_EXP 5
1560: PUSH
1561: LD_INT 4
1563: ARRAY
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: LD_INT 40
1570: PPUSH
1571: CALL_OW 307
1575: IFFALSE 1599
1577: GO 1579
1579: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1580: LD_EXP 5
1584: PUSH
1585: LD_INT 4
1587: ARRAY
1588: PPUSH
1589: LD_INT 51
1591: PPUSH
1592: LD_INT 40
1594: PPUSH
1595: CALL_OW 118
1599: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1600: LD_EXP 5
1604: PUSH
1605: LD_INT 5
1607: ARRAY
1608: PPUSH
1609: LD_INT 49
1611: PPUSH
1612: LD_INT 59
1614: PPUSH
1615: CALL_OW 307
1619: IFFALSE 1643
1621: GO 1623
1623: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1624: LD_EXP 5
1628: PUSH
1629: LD_INT 5
1631: ARRAY
1632: PPUSH
1633: LD_INT 51
1635: PPUSH
1636: LD_INT 67
1638: PPUSH
1639: CALL_OW 118
1643: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1644: LD_STRING 1
1646: PPUSH
1647: LD_STRING %_cont
1649: PPUSH
1650: CALL_OW 340
// end ; end_of_file
1654: PPOPN 1
1656: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1657: LD_INT 0
1659: PPUSH
1660: PPUSH
// if exist_mode then
1661: LD_VAR 0 2
1665: IFFALSE 1690
// unit := CreateCharacter ( prefix & ident ) else
1667: LD_ADDR_VAR 0 5
1671: PUSH
1672: LD_VAR 0 3
1676: PUSH
1677: LD_VAR 0 1
1681: STR
1682: PPUSH
1683: CALL_OW 34
1687: ST_TO_ADDR
1688: GO 1705
// unit := NewCharacter ( ident ) ;
1690: LD_ADDR_VAR 0 5
1694: PUSH
1695: LD_VAR 0 1
1699: PPUSH
1700: CALL_OW 25
1704: ST_TO_ADDR
// result := unit ;
1705: LD_ADDR_VAR 0 4
1709: PUSH
1710: LD_VAR 0 5
1714: ST_TO_ADDR
// end ;
1715: LD_VAR 0 4
1719: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1720: LD_INT 0
1722: PPUSH
1723: PPUSH
// if not side or not nation then
1724: LD_VAR 0 1
1728: NOT
1729: PUSH
1730: LD_VAR 0 2
1734: NOT
1735: OR
1736: IFFALSE 1740
// exit ;
1738: GO 2508
// case nation of nation_american :
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 1
1747: DOUBLE
1748: EQUAL
1749: IFTRUE 1753
1751: GO 1967
1753: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1754: LD_ADDR_VAR 0 4
1758: PUSH
1759: LD_INT 35
1761: PUSH
1762: LD_INT 45
1764: PUSH
1765: LD_INT 46
1767: PUSH
1768: LD_INT 47
1770: PUSH
1771: LD_INT 82
1773: PUSH
1774: LD_INT 83
1776: PUSH
1777: LD_INT 84
1779: PUSH
1780: LD_INT 85
1782: PUSH
1783: LD_INT 86
1785: PUSH
1786: LD_INT 1
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 6
1794: PUSH
1795: LD_INT 15
1797: PUSH
1798: LD_INT 16
1800: PUSH
1801: LD_INT 7
1803: PUSH
1804: LD_INT 12
1806: PUSH
1807: LD_INT 13
1809: PUSH
1810: LD_INT 10
1812: PUSH
1813: LD_INT 14
1815: PUSH
1816: LD_INT 20
1818: PUSH
1819: LD_INT 21
1821: PUSH
1822: LD_INT 22
1824: PUSH
1825: LD_INT 25
1827: PUSH
1828: LD_INT 32
1830: PUSH
1831: LD_INT 27
1833: PUSH
1834: LD_INT 36
1836: PUSH
1837: LD_INT 69
1839: PUSH
1840: LD_INT 39
1842: PUSH
1843: LD_INT 34
1845: PUSH
1846: LD_INT 40
1848: PUSH
1849: LD_INT 48
1851: PUSH
1852: LD_INT 49
1854: PUSH
1855: LD_INT 50
1857: PUSH
1858: LD_INT 51
1860: PUSH
1861: LD_INT 52
1863: PUSH
1864: LD_INT 53
1866: PUSH
1867: LD_INT 54
1869: PUSH
1870: LD_INT 55
1872: PUSH
1873: LD_INT 56
1875: PUSH
1876: LD_INT 57
1878: PUSH
1879: LD_INT 58
1881: PUSH
1882: LD_INT 59
1884: PUSH
1885: LD_INT 60
1887: PUSH
1888: LD_INT 61
1890: PUSH
1891: LD_INT 62
1893: PUSH
1894: LD_INT 80
1896: PUSH
1897: LD_INT 82
1899: PUSH
1900: LD_INT 83
1902: PUSH
1903: LD_INT 84
1905: PUSH
1906: LD_INT 85
1908: PUSH
1909: LD_INT 86
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: ST_TO_ADDR
1965: GO 2432
1967: LD_INT 2
1969: DOUBLE
1970: EQUAL
1971: IFTRUE 1975
1973: GO 2201
1975: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1976: LD_ADDR_VAR 0 4
1980: PUSH
1981: LD_INT 35
1983: PUSH
1984: LD_INT 45
1986: PUSH
1987: LD_INT 46
1989: PUSH
1990: LD_INT 47
1992: PUSH
1993: LD_INT 82
1995: PUSH
1996: LD_INT 83
1998: PUSH
1999: LD_INT 84
2001: PUSH
2002: LD_INT 85
2004: PUSH
2005: LD_INT 87
2007: PUSH
2008: LD_INT 70
2010: PUSH
2011: LD_INT 1
2013: PUSH
2014: LD_INT 11
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: LD_INT 4
2022: PUSH
2023: LD_INT 5
2025: PUSH
2026: LD_INT 6
2028: PUSH
2029: LD_INT 15
2031: PUSH
2032: LD_INT 18
2034: PUSH
2035: LD_INT 7
2037: PUSH
2038: LD_INT 17
2040: PUSH
2041: LD_INT 8
2043: PUSH
2044: LD_INT 20
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 22
2052: PUSH
2053: LD_INT 72
2055: PUSH
2056: LD_INT 26
2058: PUSH
2059: LD_INT 69
2061: PUSH
2062: LD_INT 39
2064: PUSH
2065: LD_INT 40
2067: PUSH
2068: LD_INT 41
2070: PUSH
2071: LD_INT 42
2073: PUSH
2074: LD_INT 43
2076: PUSH
2077: LD_INT 48
2079: PUSH
2080: LD_INT 49
2082: PUSH
2083: LD_INT 50
2085: PUSH
2086: LD_INT 51
2088: PUSH
2089: LD_INT 52
2091: PUSH
2092: LD_INT 53
2094: PUSH
2095: LD_INT 54
2097: PUSH
2098: LD_INT 55
2100: PUSH
2101: LD_INT 56
2103: PUSH
2104: LD_INT 60
2106: PUSH
2107: LD_INT 61
2109: PUSH
2110: LD_INT 62
2112: PUSH
2113: LD_INT 66
2115: PUSH
2116: LD_INT 67
2118: PUSH
2119: LD_INT 68
2121: PUSH
2122: LD_INT 81
2124: PUSH
2125: LD_INT 82
2127: PUSH
2128: LD_INT 83
2130: PUSH
2131: LD_INT 84
2133: PUSH
2134: LD_INT 85
2136: PUSH
2137: LD_INT 87
2139: PUSH
2140: LD_INT 88
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
2199: GO 2432
2201: LD_INT 3
2203: DOUBLE
2204: EQUAL
2205: IFTRUE 2209
2207: GO 2431
2209: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2210: LD_ADDR_VAR 0 4
2214: PUSH
2215: LD_INT 46
2217: PUSH
2218: LD_INT 47
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 2
2226: PUSH
2227: LD_INT 82
2229: PUSH
2230: LD_INT 83
2232: PUSH
2233: LD_INT 84
2235: PUSH
2236: LD_INT 85
2238: PUSH
2239: LD_INT 86
2241: PUSH
2242: LD_INT 11
2244: PUSH
2245: LD_INT 9
2247: PUSH
2248: LD_INT 20
2250: PUSH
2251: LD_INT 19
2253: PUSH
2254: LD_INT 21
2256: PUSH
2257: LD_INT 24
2259: PUSH
2260: LD_INT 22
2262: PUSH
2263: LD_INT 25
2265: PUSH
2266: LD_INT 28
2268: PUSH
2269: LD_INT 29
2271: PUSH
2272: LD_INT 30
2274: PUSH
2275: LD_INT 31
2277: PUSH
2278: LD_INT 37
2280: PUSH
2281: LD_INT 38
2283: PUSH
2284: LD_INT 32
2286: PUSH
2287: LD_INT 27
2289: PUSH
2290: LD_INT 33
2292: PUSH
2293: LD_INT 69
2295: PUSH
2296: LD_INT 39
2298: PUSH
2299: LD_INT 34
2301: PUSH
2302: LD_INT 40
2304: PUSH
2305: LD_INT 71
2307: PUSH
2308: LD_INT 23
2310: PUSH
2311: LD_INT 44
2313: PUSH
2314: LD_INT 48
2316: PUSH
2317: LD_INT 49
2319: PUSH
2320: LD_INT 50
2322: PUSH
2323: LD_INT 51
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 53
2331: PUSH
2332: LD_INT 54
2334: PUSH
2335: LD_INT 55
2337: PUSH
2338: LD_INT 56
2340: PUSH
2341: LD_INT 57
2343: PUSH
2344: LD_INT 58
2346: PUSH
2347: LD_INT 59
2349: PUSH
2350: LD_INT 63
2352: PUSH
2353: LD_INT 64
2355: PUSH
2356: LD_INT 65
2358: PUSH
2359: LD_INT 82
2361: PUSH
2362: LD_INT 83
2364: PUSH
2365: LD_INT 84
2367: PUSH
2368: LD_INT 85
2370: PUSH
2371: LD_INT 86
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
2429: GO 2432
2431: POP
// if state > - 1 and state < 3 then
2432: LD_VAR 0 3
2436: PUSH
2437: LD_INT 1
2439: NEG
2440: GREATER
2441: PUSH
2442: LD_VAR 0 3
2446: PUSH
2447: LD_INT 3
2449: LESS
2450: AND
2451: IFFALSE 2508
// for i in result do
2453: LD_ADDR_VAR 0 5
2457: PUSH
2458: LD_VAR 0 4
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2506
// if GetTech ( i , side ) <> state then
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_VAR 0 1
2475: PPUSH
2476: CALL_OW 321
2480: PUSH
2481: LD_VAR 0 3
2485: NONEQUAL
2486: IFFALSE 2504
// result := result diff i ;
2488: LD_ADDR_VAR 0 4
2492: PUSH
2493: LD_VAR 0 4
2497: PUSH
2498: LD_VAR 0 5
2502: DIFF
2503: ST_TO_ADDR
2504: GO 2463
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 4
2512: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// result := true ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2526: LD_ADDR_VAR 0 5
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 480
2540: ST_TO_ADDR
// if not tmp then
2541: LD_VAR 0 5
2545: NOT
2546: IFFALSE 2550
// exit ;
2548: GO 2599
// for i in tmp do
2550: LD_ADDR_VAR 0 4
2554: PUSH
2555: LD_VAR 0 5
2559: PUSH
2560: FOR_IN
2561: IFFALSE 2597
// if GetTech ( i , side ) <> state_researched then
2563: LD_VAR 0 4
2567: PPUSH
2568: LD_VAR 0 1
2572: PPUSH
2573: CALL_OW 321
2577: PUSH
2578: LD_INT 2
2580: NONEQUAL
2581: IFFALSE 2595
// begin result := false ;
2583: LD_ADDR_VAR 0 3
2587: PUSH
2588: LD_INT 0
2590: ST_TO_ADDR
// exit ;
2591: POP
2592: POP
2593: GO 2599
// end ;
2595: GO 2560
2597: POP
2598: POP
// end ;
2599: LD_VAR 0 3
2603: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2604: LD_INT 0
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
2618: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2619: LD_VAR 0 1
2623: NOT
2624: PUSH
2625: LD_VAR 0 1
2629: PPUSH
2630: CALL_OW 257
2634: PUSH
2635: LD_INT 9
2637: NONEQUAL
2638: OR
2639: IFFALSE 2643
// exit ;
2641: GO 3216
// side := GetSide ( unit ) ;
2643: LD_ADDR_VAR 0 9
2647: PUSH
2648: LD_VAR 0 1
2652: PPUSH
2653: CALL_OW 255
2657: ST_TO_ADDR
// tech_space := tech_spacanom ;
2658: LD_ADDR_VAR 0 12
2662: PUSH
2663: LD_INT 29
2665: ST_TO_ADDR
// tech_time := tech_taurad ;
2666: LD_ADDR_VAR 0 13
2670: PUSH
2671: LD_INT 28
2673: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2674: LD_ADDR_VAR 0 11
2678: PUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 310
2688: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2689: LD_VAR 0 11
2693: PPUSH
2694: CALL_OW 247
2698: PUSH
2699: LD_INT 2
2701: EQUAL
2702: IFFALSE 2706
// exit ;
2704: GO 3216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2706: LD_ADDR_VAR 0 8
2710: PUSH
2711: LD_INT 81
2713: PUSH
2714: LD_VAR 0 9
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: LD_INT 21
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: ST_TO_ADDR
// if not tmp then
2749: LD_VAR 0 8
2753: NOT
2754: IFFALSE 2758
// exit ;
2756: GO 3216
// if in_unit then
2758: LD_VAR 0 11
2762: IFFALSE 2786
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2764: LD_ADDR_VAR 0 10
2768: PUSH
2769: LD_VAR 0 8
2773: PPUSH
2774: LD_VAR 0 11
2778: PPUSH
2779: CALL_OW 74
2783: ST_TO_ADDR
2784: GO 2806
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2786: LD_ADDR_VAR 0 10
2790: PUSH
2791: LD_VAR 0 8
2795: PPUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 74
2805: ST_TO_ADDR
// if not enemy then
2806: LD_VAR 0 10
2810: NOT
2811: IFFALSE 2815
// exit ;
2813: GO 3216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2815: LD_VAR 0 11
2819: PUSH
2820: LD_VAR 0 11
2824: PPUSH
2825: LD_VAR 0 10
2829: PPUSH
2830: CALL_OW 296
2834: PUSH
2835: LD_INT 13
2837: GREATER
2838: AND
2839: PUSH
2840: LD_VAR 0 1
2844: PPUSH
2845: LD_VAR 0 10
2849: PPUSH
2850: CALL_OW 296
2854: PUSH
2855: LD_INT 12
2857: GREATER
2858: OR
2859: IFFALSE 2863
// exit ;
2861: GO 3216
// missile := [ 1 ] ;
2863: LD_ADDR_VAR 0 14
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2874: LD_VAR 0 9
2878: PPUSH
2879: LD_VAR 0 12
2883: PPUSH
2884: CALL_OW 325
2888: IFFALSE 2917
// missile := Replace ( missile , missile + 1 , 2 ) ;
2890: LD_ADDR_VAR 0 14
2894: PUSH
2895: LD_VAR 0 14
2899: PPUSH
2900: LD_VAR 0 14
2904: PUSH
2905: LD_INT 1
2907: PLUS
2908: PPUSH
2909: LD_INT 2
2911: PPUSH
2912: CALL_OW 1
2916: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2917: LD_VAR 0 9
2921: PPUSH
2922: LD_VAR 0 13
2926: PPUSH
2927: CALL_OW 325
2931: PUSH
2932: LD_VAR 0 10
2936: PPUSH
2937: CALL_OW 255
2941: PPUSH
2942: LD_VAR 0 13
2946: PPUSH
2947: CALL_OW 325
2951: NOT
2952: AND
2953: IFFALSE 2982
// missile := Replace ( missile , missile + 1 , 3 ) ;
2955: LD_ADDR_VAR 0 14
2959: PUSH
2960: LD_VAR 0 14
2964: PPUSH
2965: LD_VAR 0 14
2969: PUSH
2970: LD_INT 1
2972: PLUS
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 1
2981: ST_TO_ADDR
// if missile < 2 then
2982: LD_VAR 0 14
2986: PUSH
2987: LD_INT 2
2989: LESS
2990: IFFALSE 2994
// exit ;
2992: GO 3216
// x := GetX ( enemy ) ;
2994: LD_ADDR_VAR 0 4
2998: PUSH
2999: LD_VAR 0 10
3003: PPUSH
3004: CALL_OW 250
3008: ST_TO_ADDR
// y := GetY ( enemy ) ;
3009: LD_ADDR_VAR 0 5
3013: PUSH
3014: LD_VAR 0 10
3018: PPUSH
3019: CALL_OW 251
3023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3024: LD_ADDR_VAR 0 6
3028: PUSH
3029: LD_VAR 0 4
3033: PUSH
3034: LD_INT 1
3036: NEG
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: CALL_OW 12
3045: PLUS
3046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3047: LD_ADDR_VAR 0 7
3051: PUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: NEG
3060: PPUSH
3061: LD_INT 1
3063: PPUSH
3064: CALL_OW 12
3068: PLUS
3069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3070: LD_VAR 0 6
3074: PPUSH
3075: LD_VAR 0 7
3079: PPUSH
3080: CALL_OW 488
3084: NOT
3085: IFFALSE 3107
// begin _x := x ;
3087: LD_ADDR_VAR 0 6
3091: PUSH
3092: LD_VAR 0 4
3096: ST_TO_ADDR
// _y := y ;
3097: LD_ADDR_VAR 0 7
3101: PUSH
3102: LD_VAR 0 5
3106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_VAR 0 14
3119: PPUSH
3120: CALL_OW 12
3124: ST_TO_ADDR
// case i of 1 :
3125: LD_VAR 0 3
3129: PUSH
3130: LD_INT 1
3132: DOUBLE
3133: EQUAL
3134: IFTRUE 3138
3136: GO 3155
3138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3139: LD_VAR 0 1
3143: PPUSH
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 115
3153: GO 3216
3155: LD_INT 2
3157: DOUBLE
3158: EQUAL
3159: IFTRUE 3163
3161: GO 3185
3163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: LD_VAR 0 7
3178: PPUSH
3179: CALL_OW 153
3183: GO 3216
3185: LD_INT 3
3187: DOUBLE
3188: EQUAL
3189: IFTRUE 3193
3191: GO 3215
3193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3194: LD_VAR 0 1
3198: PPUSH
3199: LD_VAR 0 6
3203: PPUSH
3204: LD_VAR 0 7
3208: PPUSH
3209: CALL_OW 154
3213: GO 3216
3215: POP
// end ;
3216: LD_VAR 0 2
3220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
// if not unit or not building then
3229: LD_VAR 0 1
3233: NOT
3234: PUSH
3235: LD_VAR 0 2
3239: NOT
3240: OR
3241: IFFALSE 3245
// exit ;
3243: GO 3403
// x := GetX ( building ) ;
3245: LD_ADDR_VAR 0 5
3249: PUSH
3250: LD_VAR 0 2
3254: PPUSH
3255: CALL_OW 250
3259: ST_TO_ADDR
// y := GetY ( building ) ;
3260: LD_ADDR_VAR 0 6
3264: PUSH
3265: LD_VAR 0 2
3269: PPUSH
3270: CALL_OW 251
3274: ST_TO_ADDR
// for i = 0 to 5 do
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: DOUBLE
3281: LD_INT 0
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3401
// begin _x := ShiftX ( x , i , 3 ) ;
3291: LD_ADDR_VAR 0 7
3295: PUSH
3296: LD_VAR 0 5
3300: PPUSH
3301: LD_VAR 0 4
3305: PPUSH
3306: LD_INT 3
3308: PPUSH
3309: CALL_OW 272
3313: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3314: LD_ADDR_VAR 0 8
3318: PUSH
3319: LD_VAR 0 6
3323: PPUSH
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: CALL_OW 273
3336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3337: LD_VAR 0 7
3341: PPUSH
3342: LD_VAR 0 8
3346: PPUSH
3347: CALL_OW 488
3351: NOT
3352: IFFALSE 3356
// continue ;
3354: GO 3288
// if HexInfo ( _x , _y ) = 0 then
3356: LD_VAR 0 7
3360: PPUSH
3361: LD_VAR 0 8
3365: PPUSH
3366: CALL_OW 428
3370: PUSH
3371: LD_INT 0
3373: EQUAL
3374: IFFALSE 3399
// begin ComMoveXY ( unit , _x , _y ) ;
3376: LD_VAR 0 1
3380: PPUSH
3381: LD_VAR 0 7
3385: PPUSH
3386: LD_VAR 0 8
3390: PPUSH
3391: CALL_OW 111
// exit ;
3395: POP
3396: POP
3397: GO 3403
// end ; end ;
3399: GO 3288
3401: POP
3402: POP
// end ;
3403: LD_VAR 0 3
3407: RET
// export function ScanBase ( side , base_area ) ; begin
3408: LD_INT 0
3410: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: LD_VAR 0 2
3420: PPUSH
3421: LD_INT 81
3423: PUSH
3424: LD_VAR 0 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PPUSH
3433: CALL_OW 70
3437: ST_TO_ADDR
// end ;
3438: LD_VAR 0 3
3442: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3443: LD_INT 0
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
// result := false ;
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// side := GetSide ( unit ) ;
3457: LD_ADDR_VAR 0 3
3461: PUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 255
3471: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3472: LD_ADDR_VAR 0 4
3476: PUSH
3477: LD_VAR 0 1
3481: PPUSH
3482: CALL_OW 248
3486: ST_TO_ADDR
// case nat of 1 :
3487: LD_VAR 0 4
3491: PUSH
3492: LD_INT 1
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3500
3498: GO 3511
3500: POP
// tech := tech_lassight ; 2 :
3501: LD_ADDR_VAR 0 5
3505: PUSH
3506: LD_INT 12
3508: ST_TO_ADDR
3509: GO 3550
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3530
3519: POP
// tech := tech_mortar ; 3 :
3520: LD_ADDR_VAR 0 5
3524: PUSH
3525: LD_INT 41
3527: ST_TO_ADDR
3528: GO 3550
3530: LD_INT 3
3532: DOUBLE
3533: EQUAL
3534: IFTRUE 3538
3536: GO 3549
3538: POP
// tech := tech_bazooka ; end ;
3539: LD_ADDR_VAR 0 5
3543: PUSH
3544: LD_INT 44
3546: ST_TO_ADDR
3547: GO 3550
3549: POP
// if Researched ( side , tech ) then
3550: LD_VAR 0 3
3554: PPUSH
3555: LD_VAR 0 5
3559: PPUSH
3560: CALL_OW 325
3564: IFFALSE 3591
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3566: LD_ADDR_VAR 0 2
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: LD_INT 8
3576: PUSH
3577: LD_INT 9
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: PUSH
3585: LD_VAR 0 4
3589: ARRAY
3590: ST_TO_ADDR
// end ;
3591: LD_VAR 0 2
3595: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3596: LD_INT 0
3598: PPUSH
3599: PPUSH
3600: PPUSH
// if not mines then
3601: LD_VAR 0 2
3605: NOT
3606: IFFALSE 3610
// exit ;
3608: GO 3754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3610: LD_ADDR_VAR 0 5
3614: PUSH
3615: LD_INT 81
3617: PUSH
3618: LD_VAR 0 1
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 3
3629: PUSH
3630: LD_INT 21
3632: PUSH
3633: LD_INT 3
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 69
3652: ST_TO_ADDR
// for i in mines do
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: LD_VAR 0 2
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3752
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3666: LD_VAR 0 4
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 2
3682: ARRAY
3683: PPUSH
3684: CALL_OW 458
3688: NOT
3689: IFFALSE 3693
// continue ;
3691: GO 3663
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: LD_VAR 0 4
3706: PUSH
3707: LD_INT 2
3709: ARRAY
3710: PPUSH
3711: CALL_OW 428
3715: PUSH
3716: LD_VAR 0 5
3720: IN
3721: IFFALSE 3750
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3723: LD_VAR 0 4
3727: PUSH
3728: LD_INT 1
3730: ARRAY
3731: PPUSH
3732: LD_VAR 0 4
3736: PUSH
3737: LD_INT 2
3739: ARRAY
3740: PPUSH
3741: LD_VAR 0 1
3745: PPUSH
3746: CALL_OW 456
// end ;
3750: GO 3663
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 3
3758: RET
// export function Count ( array ) ; begin
3759: LD_INT 0
3761: PPUSH
// result := array + 0 ;
3762: LD_ADDR_VAR 0 2
3766: PUSH
3767: LD_VAR 0 1
3771: PUSH
3772: LD_INT 0
3774: PLUS
3775: ST_TO_ADDR
// end ;
3776: LD_VAR 0 2
3780: RET
// export function IsEmpty ( building ) ; begin
3781: LD_INT 0
3783: PPUSH
// if not building then
3784: LD_VAR 0 1
3788: NOT
3789: IFFALSE 3793
// exit ;
3791: GO 3836
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3793: LD_ADDR_VAR 0 2
3797: PUSH
3798: LD_VAR 0 1
3802: PUSH
3803: LD_INT 22
3805: PUSH
3806: LD_VAR 0 1
3810: PPUSH
3811: CALL_OW 255
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 58
3822: PUSH
3823: EMPTY
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PPUSH
3830: CALL_OW 69
3834: IN
3835: ST_TO_ADDR
// end ;
3836: LD_VAR 0 2
3840: RET
// export function IsNotFull ( building ) ; var places ; begin
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// if not building then
3845: LD_VAR 0 1
3849: NOT
3850: IFFALSE 3854
// exit ;
3852: GO 3882
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3854: LD_ADDR_VAR 0 2
3858: PUSH
3859: LD_VAR 0 1
3863: PPUSH
3864: LD_INT 3
3866: PUSH
3867: LD_INT 62
3869: PUSH
3870: EMPTY
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 72
3881: ST_TO_ADDR
// end ;
3882: LD_VAR 0 2
3886: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3887: LD_INT 0
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
// tmp := [ ] ;
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: EMPTY
3899: ST_TO_ADDR
// list := [ ] ;
3900: LD_ADDR_VAR 0 5
3904: PUSH
3905: EMPTY
3906: ST_TO_ADDR
// for i = 16 to 25 do
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: DOUBLE
3913: LD_INT 16
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 25
3919: PUSH
3920: FOR_TO
3921: IFFALSE 3994
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_INT 22
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 255
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 91
3952: PUSH
3953: LD_VAR 0 1
3957: PUSH
3958: LD_INT 6
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 30
3968: PUSH
3969: LD_VAR 0 4
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: EMPTY
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: ADD
3991: ST_TO_ADDR
3992: GO 3920
3994: POP
3995: POP
// for i = 1 to tmp do
3996: LD_ADDR_VAR 0 4
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_VAR 0 3
4010: PUSH
4011: FOR_TO
4012: IFFALSE 4100
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_VAR 0 5
4023: PUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_VAR 0 4
4033: ARRAY
4034: PPUSH
4035: CALL_OW 266
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: LD_VAR 0 4
4049: ARRAY
4050: PPUSH
4051: CALL_OW 250
4055: PUSH
4056: LD_VAR 0 3
4060: PUSH
4061: LD_VAR 0 4
4065: ARRAY
4066: PPUSH
4067: CALL_OW 251
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: ARRAY
4082: PPUSH
4083: CALL_OW 254
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: PUSH
4094: EMPTY
4095: LIST
4096: ADD
4097: ST_TO_ADDR
4098: GO 4011
4100: POP
4101: POP
// result := list ;
4102: LD_ADDR_VAR 0 2
4106: PUSH
4107: LD_VAR 0 5
4111: ST_TO_ADDR
// end ;
4112: LD_VAR 0 2
4116: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
// if not factory then
4126: LD_VAR 0 1
4130: NOT
4131: IFFALSE 4135
// exit ;
4133: GO 4728
// if control = control_apeman then
4135: LD_VAR 0 4
4139: PUSH
4140: LD_INT 5
4142: EQUAL
4143: IFFALSE 4252
// begin tmp := UnitsInside ( factory ) ;
4145: LD_ADDR_VAR 0 8
4149: PUSH
4150: LD_VAR 0 1
4154: PPUSH
4155: CALL_OW 313
4159: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4160: LD_VAR 0 8
4164: PPUSH
4165: LD_INT 25
4167: PUSH
4168: LD_INT 12
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 72
4179: NOT
4180: IFFALSE 4190
// control := control_manual ;
4182: LD_ADDR_VAR 0 4
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4190: LD_ADDR_VAR 0 8
4194: PUSH
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL 3887 0 1
4204: ST_TO_ADDR
// if tmp then
4205: LD_VAR 0 8
4209: IFFALSE 4252
// begin for i in tmp do
4211: LD_ADDR_VAR 0 7
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: FOR_IN
4222: IFFALSE 4250
// if i [ 1 ] = b_ext_radio then
4224: LD_VAR 0 7
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PUSH
4233: LD_INT 22
4235: EQUAL
4236: IFFALSE 4248
// begin control := control_remote ;
4238: LD_ADDR_VAR 0 4
4242: PUSH
4243: LD_INT 2
4245: ST_TO_ADDR
// break ;
4246: GO 4250
// end ;
4248: GO 4221
4250: POP
4251: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4252: LD_VAR 0 1
4256: PPUSH
4257: LD_VAR 0 2
4261: PPUSH
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_VAR 0 4
4271: PPUSH
4272: LD_VAR 0 5
4276: PPUSH
4277: CALL_OW 448
4281: IFFALSE 4316
// begin result := [ chassis , engine , control , weapon ] ;
4283: LD_ADDR_VAR 0 6
4287: PUSH
4288: LD_VAR 0 2
4292: PUSH
4293: LD_VAR 0 3
4297: PUSH
4298: LD_VAR 0 4
4302: PUSH
4303: LD_VAR 0 5
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: ST_TO_ADDR
// exit ;
4314: GO 4728
// end ; _chassis := AvailableChassisList ( factory ) ;
4316: LD_ADDR_VAR 0 9
4320: PUSH
4321: LD_VAR 0 1
4325: PPUSH
4326: CALL_OW 475
4330: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4331: LD_ADDR_VAR 0 11
4335: PUSH
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 476
4345: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4346: LD_ADDR_VAR 0 12
4350: PUSH
4351: LD_VAR 0 1
4355: PPUSH
4356: CALL_OW 477
4360: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4361: LD_ADDR_VAR 0 10
4365: PUSH
4366: LD_VAR 0 1
4370: PPUSH
4371: CALL_OW 478
4375: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4376: LD_VAR 0 9
4380: NOT
4381: PUSH
4382: LD_VAR 0 11
4386: NOT
4387: OR
4388: PUSH
4389: LD_VAR 0 12
4393: NOT
4394: OR
4395: PUSH
4396: LD_VAR 0 10
4400: NOT
4401: OR
4402: IFFALSE 4437
// begin result := [ chassis , engine , control , weapon ] ;
4404: LD_ADDR_VAR 0 6
4408: PUSH
4409: LD_VAR 0 2
4413: PUSH
4414: LD_VAR 0 3
4418: PUSH
4419: LD_VAR 0 4
4423: PUSH
4424: LD_VAR 0 5
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// exit ;
4435: GO 4728
// end ; if not chassis in _chassis then
4437: LD_VAR 0 2
4441: PUSH
4442: LD_VAR 0 9
4446: IN
4447: NOT
4448: IFFALSE 4474
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4450: LD_ADDR_VAR 0 2
4454: PUSH
4455: LD_VAR 0 9
4459: PUSH
4460: LD_INT 1
4462: PPUSH
4463: LD_VAR 0 9
4467: PPUSH
4468: CALL_OW 12
4472: ARRAY
4473: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4474: LD_VAR 0 2
4478: PPUSH
4479: LD_VAR 0 3
4483: PPUSH
4484: CALL 4733 0 2
4488: NOT
4489: IFFALSE 4548
// repeat engine := _engine [ 1 ] ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_VAR 0 11
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4505: LD_ADDR_VAR 0 11
4509: PUSH
4510: LD_VAR 0 11
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: CALL_OW 3
4522: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4523: LD_VAR 0 2
4527: PPUSH
4528: LD_VAR 0 3
4532: PPUSH
4533: CALL 4733 0 2
4537: PUSH
4538: LD_VAR 0 11
4542: PUSH
4543: EMPTY
4544: EQUAL
4545: OR
4546: IFFALSE 4491
// if not control in _control then
4548: LD_VAR 0 4
4552: PUSH
4553: LD_VAR 0 12
4557: IN
4558: NOT
4559: IFFALSE 4585
// control := _control [ rand ( 1 , _control ) ] ;
4561: LD_ADDR_VAR 0 4
4565: PUSH
4566: LD_VAR 0 12
4570: PUSH
4571: LD_INT 1
4573: PPUSH
4574: LD_VAR 0 12
4578: PPUSH
4579: CALL_OW 12
4583: ARRAY
4584: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4585: LD_VAR 0 2
4589: PPUSH
4590: LD_VAR 0 5
4594: PPUSH
4595: CALL 4953 0 2
4599: NOT
4600: IFFALSE 4659
// repeat weapon := _weapon [ 1 ] ;
4602: LD_ADDR_VAR 0 5
4606: PUSH
4607: LD_VAR 0 10
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4616: LD_ADDR_VAR 0 10
4620: PUSH
4621: LD_VAR 0 10
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: CALL_OW 3
4633: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4634: LD_VAR 0 2
4638: PPUSH
4639: LD_VAR 0 5
4643: PPUSH
4644: CALL 4953 0 2
4648: PUSH
4649: LD_VAR 0 10
4653: PUSH
4654: EMPTY
4655: EQUAL
4656: OR
4657: IFFALSE 4602
// result := [ ] ;
4659: LD_ADDR_VAR 0 6
4663: PUSH
4664: EMPTY
4665: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 2
4675: PPUSH
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: LD_VAR 0 5
4690: PPUSH
4691: CALL_OW 448
4695: IFFALSE 4728
// result := [ chassis , engine , control , weapon ] ;
4697: LD_ADDR_VAR 0 6
4701: PUSH
4702: LD_VAR 0 2
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_VAR 0 4
4716: PUSH
4717: LD_VAR 0 5
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
// end ;
4728: LD_VAR 0 6
4732: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4733: LD_INT 0
4735: PPUSH
// if not chassis or not engine then
4736: LD_VAR 0 1
4740: NOT
4741: PUSH
4742: LD_VAR 0 2
4746: NOT
4747: OR
4748: IFFALSE 4752
// exit ;
4750: GO 4948
// case engine of engine_solar :
4752: LD_VAR 0 2
4756: PUSH
4757: LD_INT 2
4759: DOUBLE
4760: EQUAL
4761: IFTRUE 4765
4763: GO 4803
4765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: LD_INT 11
4773: PUSH
4774: LD_INT 12
4776: PUSH
4777: LD_INT 13
4779: PUSH
4780: LD_INT 14
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: LD_INT 3
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 4932
4803: LD_INT 1
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4873
4811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 11
4819: PUSH
4820: LD_INT 12
4822: PUSH
4823: LD_INT 13
4825: PUSH
4826: LD_INT 14
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: LD_INT 2
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: LD_INT 4
4840: PUSH
4841: LD_INT 5
4843: PUSH
4844: LD_INT 21
4846: PUSH
4847: LD_INT 23
4849: PUSH
4850: LD_INT 22
4852: PUSH
4853: LD_INT 24
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
4871: GO 4932
4873: LD_INT 3
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4931
4881: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: LD_INT 13
4889: PUSH
4890: LD_INT 14
4892: PUSH
4893: LD_INT 2
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: LD_INT 5
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: LD_INT 22
4910: PUSH
4911: LD_INT 23
4913: PUSH
4914: LD_INT 24
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: ST_TO_ADDR
4929: GO 4932
4931: POP
// result := ( chassis in result ) ;
4932: LD_ADDR_VAR 0 3
4936: PUSH
4937: LD_VAR 0 1
4941: PUSH
4942: LD_VAR 0 3
4946: IN
4947: ST_TO_ADDR
// end ;
4948: LD_VAR 0 3
4952: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4953: LD_INT 0
4955: PPUSH
// if not chassis or not weapon then
4956: LD_VAR 0 1
4960: NOT
4961: PUSH
4962: LD_VAR 0 2
4966: NOT
4967: OR
4968: IFFALSE 4972
// exit ;
4970: GO 6032
// case weapon of us_machine_gun :
4972: LD_VAR 0 2
4976: PUSH
4977: LD_INT 2
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 5015
4985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4986: LD_ADDR_VAR 0 3
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 2
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: LD_INT 4
5002: PUSH
5003: LD_INT 5
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: ST_TO_ADDR
5013: GO 6016
5015: LD_INT 3
5017: DOUBLE
5018: EQUAL
5019: IFTRUE 5023
5021: GO 5053
5023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5024: LD_ADDR_VAR 0 3
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 2
5034: PUSH
5035: LD_INT 3
5037: PUSH
5038: LD_INT 4
5040: PUSH
5041: LD_INT 5
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
5051: GO 6016
5053: LD_INT 11
5055: DOUBLE
5056: EQUAL
5057: IFTRUE 5061
5059: GO 5091
5061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: LD_INT 1
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: LD_INT 4
5078: PUSH
5079: LD_INT 5
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: ST_TO_ADDR
5089: GO 6016
5091: LD_INT 4
5093: DOUBLE
5094: EQUAL
5095: IFTRUE 5099
5097: GO 5125
5099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: LD_INT 2
5107: PUSH
5108: LD_INT 3
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: LD_INT 5
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: ST_TO_ADDR
5123: GO 6016
5125: LD_INT 5
5127: DOUBLE
5128: EQUAL
5129: IFTRUE 5133
5131: GO 5159
5133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5134: LD_ADDR_VAR 0 3
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 4
5147: PUSH
5148: LD_INT 5
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
5157: GO 6016
5159: LD_INT 9
5161: DOUBLE
5162: EQUAL
5163: IFTRUE 5167
5165: GO 5193
5167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_INT 2
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: LD_INT 4
5181: PUSH
5182: LD_INT 5
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: ST_TO_ADDR
5191: GO 6016
5193: LD_INT 7
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5227
5201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: LD_INT 5
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: ST_TO_ADDR
5225: GO 6016
5227: LD_INT 12
5229: DOUBLE
5230: EQUAL
5231: IFTRUE 5235
5233: GO 5261
5235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 4
5249: PUSH
5250: LD_INT 5
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
5259: GO 6016
5261: LD_INT 13
5263: DOUBLE
5264: EQUAL
5265: IFTRUE 5269
5267: GO 5295
5269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: LD_INT 3
5280: PUSH
5281: LD_INT 4
5283: PUSH
5284: LD_INT 5
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: ST_TO_ADDR
5293: GO 6016
5295: LD_INT 14
5297: DOUBLE
5298: EQUAL
5299: IFTRUE 5303
5301: GO 5321
5303: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5304: LD_ADDR_VAR 0 3
5308: PUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: ST_TO_ADDR
5319: GO 6016
5321: LD_INT 6
5323: DOUBLE
5324: EQUAL
5325: IFTRUE 5329
5327: GO 5347
5329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5330: LD_ADDR_VAR 0 3
5334: PUSH
5335: LD_INT 4
5337: PUSH
5338: LD_INT 5
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: ST_TO_ADDR
5345: GO 6016
5347: LD_INT 10
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5373
5355: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5356: LD_ADDR_VAR 0 3
5360: PUSH
5361: LD_INT 4
5363: PUSH
5364: LD_INT 5
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: ST_TO_ADDR
5371: GO 6016
5373: LD_INT 22
5375: DOUBLE
5376: EQUAL
5377: IFTRUE 5381
5379: GO 5407
5381: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5382: LD_ADDR_VAR 0 3
5386: PUSH
5387: LD_INT 11
5389: PUSH
5390: LD_INT 12
5392: PUSH
5393: LD_INT 13
5395: PUSH
5396: LD_INT 14
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: ST_TO_ADDR
5405: GO 6016
5407: LD_INT 23
5409: DOUBLE
5410: EQUAL
5411: IFTRUE 5415
5413: GO 5441
5415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5416: LD_ADDR_VAR 0 3
5420: PUSH
5421: LD_INT 11
5423: PUSH
5424: LD_INT 12
5426: PUSH
5427: LD_INT 13
5429: PUSH
5430: LD_INT 14
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
5439: GO 6016
5441: LD_INT 24
5443: DOUBLE
5444: EQUAL
5445: IFTRUE 5449
5447: GO 5475
5449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_INT 11
5457: PUSH
5458: LD_INT 12
5460: PUSH
5461: LD_INT 13
5463: PUSH
5464: LD_INT 14
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 6016
5475: LD_INT 30
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5483
5481: GO 5509
5483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5484: LD_ADDR_VAR 0 3
5488: PUSH
5489: LD_INT 11
5491: PUSH
5492: LD_INT 12
5494: PUSH
5495: LD_INT 13
5497: PUSH
5498: LD_INT 14
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: ST_TO_ADDR
5507: GO 6016
5509: LD_INT 25
5511: DOUBLE
5512: EQUAL
5513: IFTRUE 5517
5515: GO 5535
5517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5518: LD_ADDR_VAR 0 3
5522: PUSH
5523: LD_INT 13
5525: PUSH
5526: LD_INT 14
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: ST_TO_ADDR
5533: GO 6016
5535: LD_INT 27
5537: DOUBLE
5538: EQUAL
5539: IFTRUE 5543
5541: GO 5561
5543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5544: LD_ADDR_VAR 0 3
5548: PUSH
5549: LD_INT 13
5551: PUSH
5552: LD_INT 14
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 6016
5561: LD_INT 92
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5595
5569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 11
5577: PUSH
5578: LD_INT 12
5580: PUSH
5581: LD_INT 13
5583: PUSH
5584: LD_INT 14
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
5593: GO 6016
5595: LD_INT 28
5597: DOUBLE
5598: EQUAL
5599: IFTRUE 5603
5601: GO 5621
5603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_INT 13
5611: PUSH
5612: LD_INT 14
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 6016
5621: LD_INT 29
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5647
5629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 13
5637: PUSH
5638: LD_INT 14
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
5645: GO 6016
5647: LD_INT 31
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5655
5653: GO 5673
5655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_INT 13
5663: PUSH
5664: LD_INT 14
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 6016
5673: LD_INT 26
5675: DOUBLE
5676: EQUAL
5677: IFTRUE 5681
5679: GO 5699
5681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: LD_INT 13
5689: PUSH
5690: LD_INT 14
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: ST_TO_ADDR
5697: GO 6016
5699: LD_INT 42
5701: DOUBLE
5702: EQUAL
5703: IFTRUE 5707
5705: GO 5733
5707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5708: LD_ADDR_VAR 0 3
5712: PUSH
5713: LD_INT 21
5715: PUSH
5716: LD_INT 22
5718: PUSH
5719: LD_INT 23
5721: PUSH
5722: LD_INT 24
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: ST_TO_ADDR
5731: GO 6016
5733: LD_INT 43
5735: DOUBLE
5736: EQUAL
5737: IFTRUE 5741
5739: GO 5767
5741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5742: LD_ADDR_VAR 0 3
5746: PUSH
5747: LD_INT 21
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 23
5755: PUSH
5756: LD_INT 24
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: ST_TO_ADDR
5765: GO 6016
5767: LD_INT 44
5769: DOUBLE
5770: EQUAL
5771: IFTRUE 5775
5773: GO 5801
5775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: LD_INT 21
5783: PUSH
5784: LD_INT 22
5786: PUSH
5787: LD_INT 23
5789: PUSH
5790: LD_INT 24
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: ST_TO_ADDR
5799: GO 6016
5801: LD_INT 45
5803: DOUBLE
5804: EQUAL
5805: IFTRUE 5809
5807: GO 5835
5809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: LD_INT 21
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_INT 23
5823: PUSH
5824: LD_INT 24
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: ST_TO_ADDR
5833: GO 6016
5835: LD_INT 49
5837: DOUBLE
5838: EQUAL
5839: IFTRUE 5843
5841: GO 5869
5843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5844: LD_ADDR_VAR 0 3
5848: PUSH
5849: LD_INT 21
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_INT 23
5857: PUSH
5858: LD_INT 24
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: ST_TO_ADDR
5867: GO 6016
5869: LD_INT 51
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5903
5877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5878: LD_ADDR_VAR 0 3
5882: PUSH
5883: LD_INT 21
5885: PUSH
5886: LD_INT 22
5888: PUSH
5889: LD_INT 23
5891: PUSH
5892: LD_INT 24
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: ST_TO_ADDR
5901: GO 6016
5903: LD_INT 52
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5937
5911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5912: LD_ADDR_VAR 0 3
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: LD_INT 22
5922: PUSH
5923: LD_INT 23
5925: PUSH
5926: LD_INT 24
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: ST_TO_ADDR
5935: GO 6016
5937: LD_INT 53
5939: DOUBLE
5940: EQUAL
5941: IFTRUE 5945
5943: GO 5963
5945: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5946: LD_ADDR_VAR 0 3
5950: PUSH
5951: LD_INT 23
5953: PUSH
5954: LD_INT 24
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: ST_TO_ADDR
5961: GO 6016
5963: LD_INT 46
5965: DOUBLE
5966: EQUAL
5967: IFTRUE 5971
5969: GO 5989
5971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5972: LD_ADDR_VAR 0 3
5976: PUSH
5977: LD_INT 23
5979: PUSH
5980: LD_INT 24
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: ST_TO_ADDR
5987: GO 6016
5989: LD_INT 47
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6015
5997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5998: LD_ADDR_VAR 0 3
6002: PUSH
6003: LD_INT 23
6005: PUSH
6006: LD_INT 24
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 6016
6015: POP
// result := ( chassis in result ) ;
6016: LD_ADDR_VAR 0 3
6020: PUSH
6021: LD_VAR 0 1
6025: PUSH
6026: LD_VAR 0 3
6030: IN
6031: ST_TO_ADDR
// end ;
6032: LD_VAR 0 3
6036: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6037: LD_INT 0
6039: PPUSH
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
6045: PPUSH
// result := array ;
6046: LD_ADDR_VAR 0 5
6050: PUSH
6051: LD_VAR 0 1
6055: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6056: LD_VAR 0 1
6060: NOT
6061: PUSH
6062: LD_VAR 0 2
6066: NOT
6067: OR
6068: PUSH
6069: LD_VAR 0 3
6073: NOT
6074: OR
6075: PUSH
6076: LD_VAR 0 2
6080: PUSH
6081: LD_VAR 0 1
6085: GREATER
6086: OR
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 1
6097: GREATER
6098: OR
6099: IFFALSE 6103
// exit ;
6101: GO 6399
// if direction then
6103: LD_VAR 0 4
6107: IFFALSE 6171
// begin d := 1 ;
6109: LD_ADDR_VAR 0 9
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// if i_from > i_to then
6117: LD_VAR 0 2
6121: PUSH
6122: LD_VAR 0 3
6126: GREATER
6127: IFFALSE 6153
// length := ( array - i_from ) + i_to else
6129: LD_ADDR_VAR 0 11
6133: PUSH
6134: LD_VAR 0 1
6138: PUSH
6139: LD_VAR 0 2
6143: MINUS
6144: PUSH
6145: LD_VAR 0 3
6149: PLUS
6150: ST_TO_ADDR
6151: GO 6169
// length := i_to - i_from ;
6153: LD_ADDR_VAR 0 11
6157: PUSH
6158: LD_VAR 0 3
6162: PUSH
6163: LD_VAR 0 2
6167: MINUS
6168: ST_TO_ADDR
// end else
6169: GO 6232
// begin d := - 1 ;
6171: LD_ADDR_VAR 0 9
6175: PUSH
6176: LD_INT 1
6178: NEG
6179: ST_TO_ADDR
// if i_from > i_to then
6180: LD_VAR 0 2
6184: PUSH
6185: LD_VAR 0 3
6189: GREATER
6190: IFFALSE 6210
// length := i_from - i_to else
6192: LD_ADDR_VAR 0 11
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: MINUS
6207: ST_TO_ADDR
6208: GO 6232
// length := ( array - i_to ) + i_from ;
6210: LD_ADDR_VAR 0 11
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: LD_VAR 0 3
6224: MINUS
6225: PUSH
6226: LD_VAR 0 2
6230: PLUS
6231: ST_TO_ADDR
// end ; if not length then
6232: LD_VAR 0 11
6236: NOT
6237: IFFALSE 6241
// exit ;
6239: GO 6399
// tmp := array ;
6241: LD_ADDR_VAR 0 10
6245: PUSH
6246: LD_VAR 0 1
6250: ST_TO_ADDR
// for i = 1 to length do
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: DOUBLE
6257: LD_INT 1
6259: DEC
6260: ST_TO_ADDR
6261: LD_VAR 0 11
6265: PUSH
6266: FOR_TO
6267: IFFALSE 6387
// begin for j = 1 to array do
6269: LD_ADDR_VAR 0 7
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_VAR 0 1
6283: PUSH
6284: FOR_TO
6285: IFFALSE 6373
// begin k := j + d ;
6287: LD_ADDR_VAR 0 8
6291: PUSH
6292: LD_VAR 0 7
6296: PUSH
6297: LD_VAR 0 9
6301: PLUS
6302: ST_TO_ADDR
// if k > array then
6303: LD_VAR 0 8
6307: PUSH
6308: LD_VAR 0 1
6312: GREATER
6313: IFFALSE 6323
// k := 1 ;
6315: LD_ADDR_VAR 0 8
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if not k then
6323: LD_VAR 0 8
6327: NOT
6328: IFFALSE 6340
// k := array ;
6330: LD_ADDR_VAR 0 8
6334: PUSH
6335: LD_VAR 0 1
6339: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6340: LD_ADDR_VAR 0 10
6344: PUSH
6345: LD_VAR 0 10
6349: PPUSH
6350: LD_VAR 0 8
6354: PPUSH
6355: LD_VAR 0 1
6359: PUSH
6360: LD_VAR 0 7
6364: ARRAY
6365: PPUSH
6366: CALL_OW 1
6370: ST_TO_ADDR
// end ;
6371: GO 6284
6373: POP
6374: POP
// array := tmp ;
6375: LD_ADDR_VAR 0 1
6379: PUSH
6380: LD_VAR 0 10
6384: ST_TO_ADDR
// end ;
6385: GO 6266
6387: POP
6388: POP
// result := array ;
6389: LD_ADDR_VAR 0 5
6393: PUSH
6394: LD_VAR 0 1
6398: ST_TO_ADDR
// end ;
6399: LD_VAR 0 5
6403: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6404: LD_INT 0
6406: PPUSH
6407: PPUSH
// result := 0 ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 0
6415: ST_TO_ADDR
// if not array or not value in array then
6416: LD_VAR 0 1
6420: NOT
6421: PUSH
6422: LD_VAR 0 2
6426: PUSH
6427: LD_VAR 0 1
6431: IN
6432: NOT
6433: OR
6434: IFFALSE 6438
// exit ;
6436: GO 6492
// for i = 1 to array do
6438: LD_ADDR_VAR 0 4
6442: PUSH
6443: DOUBLE
6444: LD_INT 1
6446: DEC
6447: ST_TO_ADDR
6448: LD_VAR 0 1
6452: PUSH
6453: FOR_TO
6454: IFFALSE 6490
// if value = array [ i ] then
6456: LD_VAR 0 2
6460: PUSH
6461: LD_VAR 0 1
6465: PUSH
6466: LD_VAR 0 4
6470: ARRAY
6471: EQUAL
6472: IFFALSE 6488
// begin result := i ;
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_VAR 0 4
6483: ST_TO_ADDR
// exit ;
6484: POP
6485: POP
6486: GO 6492
// end ;
6488: GO 6453
6490: POP
6491: POP
// end ;
6492: LD_VAR 0 3
6496: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6497: LD_INT 0
6499: PPUSH
// vc_chassis := chassis ;
6500: LD_ADDR_OWVAR 37
6504: PUSH
6505: LD_VAR 0 1
6509: ST_TO_ADDR
// vc_engine := engine ;
6510: LD_ADDR_OWVAR 39
6514: PUSH
6515: LD_VAR 0 2
6519: ST_TO_ADDR
// vc_control := control ;
6520: LD_ADDR_OWVAR 38
6524: PUSH
6525: LD_VAR 0 3
6529: ST_TO_ADDR
// vc_weapon := weapon ;
6530: LD_ADDR_OWVAR 40
6534: PUSH
6535: LD_VAR 0 4
6539: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6540: LD_ADDR_OWVAR 41
6544: PUSH
6545: LD_VAR 0 5
6549: ST_TO_ADDR
// end ;
6550: LD_VAR 0 6
6554: RET
// export function WantPlant ( unit ) ; var task ; begin
6555: LD_INT 0
6557: PPUSH
6558: PPUSH
// result := false ;
6559: LD_ADDR_VAR 0 2
6563: PUSH
6564: LD_INT 0
6566: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_VAR 0 1
6576: PPUSH
6577: CALL_OW 437
6581: ST_TO_ADDR
// if task then
6582: LD_VAR 0 3
6586: IFFALSE 6614
// if task [ 1 ] [ 1 ] = p then
6588: LD_VAR 0 3
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PUSH
6597: LD_INT 1
6599: ARRAY
6600: PUSH
6601: LD_STRING p
6603: EQUAL
6604: IFFALSE 6614
// result := true ;
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: LD_INT 1
6613: ST_TO_ADDR
// end ;
6614: LD_VAR 0 2
6618: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
6623: PPUSH
6624: PPUSH
// if pos < 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: LESS
6633: IFFALSE 6637
// exit ;
6635: GO 6940
// if pos = 1 then
6637: LD_VAR 0 2
6641: PUSH
6642: LD_INT 1
6644: EQUAL
6645: IFFALSE 6678
// result := Replace ( arr , pos [ 1 ] , value ) else
6647: LD_ADDR_VAR 0 4
6651: PUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: LD_VAR 0 2
6661: PUSH
6662: LD_INT 1
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: CALL_OW 1
6675: ST_TO_ADDR
6676: GO 6940
// begin tmp := arr ;
6678: LD_ADDR_VAR 0 6
6682: PUSH
6683: LD_VAR 0 1
6687: ST_TO_ADDR
// s_arr := [ tmp ] ;
6688: LD_ADDR_VAR 0 7
6692: PUSH
6693: LD_VAR 0 6
6697: PUSH
6698: EMPTY
6699: LIST
6700: ST_TO_ADDR
// for i = 1 to pos - 1 do
6701: LD_ADDR_VAR 0 5
6705: PUSH
6706: DOUBLE
6707: LD_INT 1
6709: DEC
6710: ST_TO_ADDR
6711: LD_VAR 0 2
6715: PUSH
6716: LD_INT 1
6718: MINUS
6719: PUSH
6720: FOR_TO
6721: IFFALSE 6766
// begin tmp := tmp [ pos [ i ] ] ;
6723: LD_ADDR_VAR 0 6
6727: PUSH
6728: LD_VAR 0 6
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 5
6742: ARRAY
6743: ARRAY
6744: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6745: LD_ADDR_VAR 0 7
6749: PUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 6
6759: PUSH
6760: EMPTY
6761: LIST
6762: ADD
6763: ST_TO_ADDR
// end ;
6764: GO 6720
6766: POP
6767: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6768: LD_ADDR_VAR 0 6
6772: PUSH
6773: LD_VAR 0 6
6777: PPUSH
6778: LD_VAR 0 2
6782: PUSH
6783: LD_VAR 0 2
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PPUSH
6794: CALL_OW 1
6798: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6799: LD_ADDR_VAR 0 7
6803: PUSH
6804: LD_VAR 0 7
6808: PPUSH
6809: LD_VAR 0 7
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 1
6823: ST_TO_ADDR
// for i = s_arr downto 2 do
6824: LD_ADDR_VAR 0 5
6828: PUSH
6829: DOUBLE
6830: LD_VAR 0 7
6834: INC
6835: ST_TO_ADDR
6836: LD_INT 2
6838: PUSH
6839: FOR_DOWNTO
6840: IFFALSE 6924
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: LD_VAR 0 7
6851: PUSH
6852: LD_VAR 0 5
6856: PUSH
6857: LD_INT 1
6859: MINUS
6860: ARRAY
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_VAR 0 5
6871: PUSH
6872: LD_INT 1
6874: MINUS
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 7
6881: PUSH
6882: LD_VAR 0 5
6886: ARRAY
6887: PPUSH
6888: CALL_OW 1
6892: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6893: LD_ADDR_VAR 0 7
6897: PUSH
6898: LD_VAR 0 7
6902: PPUSH
6903: LD_VAR 0 5
6907: PUSH
6908: LD_INT 1
6910: MINUS
6911: PPUSH
6912: LD_VAR 0 6
6916: PPUSH
6917: CALL_OW 1
6921: ST_TO_ADDR
// end ;
6922: GO 6839
6924: POP
6925: POP
// result := s_arr [ 1 ] ;
6926: LD_ADDR_VAR 0 4
6930: PUSH
6931: LD_VAR 0 7
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: ST_TO_ADDR
// end ; end ;
6940: LD_VAR 0 4
6944: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
// if not list then
6949: LD_VAR 0 1
6953: NOT
6954: IFFALSE 6958
// exit ;
6956: GO 7049
// i := list [ pos1 ] ;
6958: LD_ADDR_VAR 0 5
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: LD_VAR 0 2
6972: ARRAY
6973: ST_TO_ADDR
// if not i then
6974: LD_VAR 0 5
6978: NOT
6979: IFFALSE 6983
// exit ;
6981: GO 7049
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_VAR 0 2
6997: PPUSH
6998: LD_VAR 0 1
7002: PUSH
7003: LD_VAR 0 3
7007: ARRAY
7008: PPUSH
7009: CALL_OW 1
7013: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7014: LD_ADDR_VAR 0 1
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: LD_VAR 0 5
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// result := list ;
7039: LD_ADDR_VAR 0 4
7043: PUSH
7044: LD_VAR 0 1
7048: ST_TO_ADDR
// end ;
7049: LD_VAR 0 4
7053: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7054: LD_INT 0
7056: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7057: LD_ADDR_VAR 0 5
7061: PUSH
7062: LD_VAR 0 1
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_VAR 0 2
7086: PPUSH
7087: LD_VAR 0 3
7091: PPUSH
7092: LD_VAR 0 4
7096: PPUSH
7097: CALL 7475 0 5
7101: ST_TO_ADDR
// end ;
7102: LD_VAR 0 5
7106: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7107: LD_INT 0
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
// if not list or not unit then
7113: LD_VAR 0 2
7117: NOT
7118: PUSH
7119: LD_VAR 0 1
7123: NOT
7124: OR
7125: IFFALSE 7129
// exit ;
7127: GO 7470
// result := [ ] ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: EMPTY
7135: ST_TO_ADDR
// for i in list do
7136: LD_ADDR_VAR 0 6
7140: PUSH
7141: LD_VAR 0 2
7145: PUSH
7146: FOR_IN
7147: IFFALSE 7365
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7149: LD_ADDR_VAR 0 8
7153: PUSH
7154: LD_VAR 0 1
7158: PPUSH
7159: LD_VAR 0 6
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: PPUSH
7168: LD_VAR 0 6
7172: PUSH
7173: LD_INT 2
7175: ARRAY
7176: PPUSH
7177: CALL_OW 297
7181: ST_TO_ADDR
// if not Count ( result ) then
7182: LD_VAR 0 5
7186: PPUSH
7187: CALL 3759 0 1
7191: NOT
7192: IFFALSE 7225
// begin result := Join ( result , [ i , tmp ] ) ;
7194: LD_ADDR_VAR 0 5
7198: PUSH
7199: LD_VAR 0 5
7203: PPUSH
7204: LD_VAR 0 6
7208: PUSH
7209: LD_VAR 0 8
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PPUSH
7218: CALL 39359 0 2
7222: ST_TO_ADDR
// continue ;
7223: GO 7146
// end ; if result [ result ] [ 2 ] <= tmp then
7225: LD_VAR 0 5
7229: PUSH
7230: LD_VAR 0 5
7234: ARRAY
7235: PUSH
7236: LD_INT 2
7238: ARRAY
7239: PUSH
7240: LD_VAR 0 8
7244: LESSEQUAL
7245: IFFALSE 7278
// result := Join ( result , [ i , tmp ] ) else
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: LD_VAR 0 5
7256: PPUSH
7257: LD_VAR 0 6
7261: PUSH
7262: LD_VAR 0 8
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL 39359 0 2
7275: ST_TO_ADDR
7276: GO 7363
// begin for j := 1 to Count ( result ) do
7278: LD_ADDR_VAR 0 7
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL 3759 0 1
7297: PUSH
7298: FOR_TO
7299: IFFALSE 7361
// begin if tmp < result [ j ] [ 2 ] then
7301: LD_VAR 0 8
7305: PUSH
7306: LD_VAR 0 5
7310: PUSH
7311: LD_VAR 0 7
7315: ARRAY
7316: PUSH
7317: LD_INT 2
7319: ARRAY
7320: LESS
7321: IFFALSE 7359
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7323: LD_ADDR_VAR 0 5
7327: PUSH
7328: LD_VAR 0 5
7332: PPUSH
7333: LD_VAR 0 7
7337: PPUSH
7338: LD_VAR 0 6
7342: PUSH
7343: LD_VAR 0 8
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 2
7356: ST_TO_ADDR
// break ;
7357: GO 7361
// end ; end ;
7359: GO 7298
7361: POP
7362: POP
// end ; end ;
7363: GO 7146
7365: POP
7366: POP
// if result and not asc then
7367: LD_VAR 0 5
7371: PUSH
7372: LD_VAR 0 3
7376: NOT
7377: AND
7378: IFFALSE 7395
// result := ReverseArray ( result ) ;
7380: LD_ADDR_VAR 0 5
7384: PUSH
7385: LD_VAR 0 5
7389: PPUSH
7390: CALL 34635 0 1
7394: ST_TO_ADDR
// tmp := [ ] ;
7395: LD_ADDR_VAR 0 8
7399: PUSH
7400: EMPTY
7401: ST_TO_ADDR
// if mode then
7402: LD_VAR 0 4
7406: IFFALSE 7470
// begin for i := 1 to result do
7408: LD_ADDR_VAR 0 6
7412: PUSH
7413: DOUBLE
7414: LD_INT 1
7416: DEC
7417: ST_TO_ADDR
7418: LD_VAR 0 5
7422: PUSH
7423: FOR_TO
7424: IFFALSE 7458
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7426: LD_ADDR_VAR 0 8
7430: PUSH
7431: LD_VAR 0 8
7435: PPUSH
7436: LD_VAR 0 5
7440: PUSH
7441: LD_VAR 0 6
7445: ARRAY
7446: PUSH
7447: LD_INT 1
7449: ARRAY
7450: PPUSH
7451: CALL 39359 0 2
7455: ST_TO_ADDR
7456: GO 7423
7458: POP
7459: POP
// result := tmp ;
7460: LD_ADDR_VAR 0 5
7464: PUSH
7465: LD_VAR 0 8
7469: ST_TO_ADDR
// end ; end ;
7470: LD_VAR 0 5
7474: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7475: LD_INT 0
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
// if not list then
7481: LD_VAR 0 3
7485: NOT
7486: IFFALSE 7490
// exit ;
7488: GO 7878
// result := [ ] ;
7490: LD_ADDR_VAR 0 6
7494: PUSH
7495: EMPTY
7496: ST_TO_ADDR
// for i in list do
7497: LD_ADDR_VAR 0 7
7501: PUSH
7502: LD_VAR 0 3
7506: PUSH
7507: FOR_IN
7508: IFFALSE 7710
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7510: LD_ADDR_VAR 0 9
7514: PUSH
7515: LD_VAR 0 7
7519: PPUSH
7520: LD_VAR 0 1
7524: PPUSH
7525: LD_VAR 0 2
7529: PPUSH
7530: CALL_OW 297
7534: ST_TO_ADDR
// if not result then
7535: LD_VAR 0 6
7539: NOT
7540: IFFALSE 7566
// result := [ [ i , tmp ] ] else
7542: LD_ADDR_VAR 0 6
7546: PUSH
7547: LD_VAR 0 7
7551: PUSH
7552: LD_VAR 0 9
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: ST_TO_ADDR
7564: GO 7708
// begin if result [ result ] [ 2 ] < tmp then
7566: LD_VAR 0 6
7570: PUSH
7571: LD_VAR 0 6
7575: ARRAY
7576: PUSH
7577: LD_INT 2
7579: ARRAY
7580: PUSH
7581: LD_VAR 0 9
7585: LESS
7586: IFFALSE 7628
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7588: LD_ADDR_VAR 0 6
7592: PUSH
7593: LD_VAR 0 6
7597: PPUSH
7598: LD_VAR 0 6
7602: PUSH
7603: LD_INT 1
7605: PLUS
7606: PPUSH
7607: LD_VAR 0 7
7611: PUSH
7612: LD_VAR 0 9
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 2
7625: ST_TO_ADDR
7626: GO 7708
// for j = 1 to result do
7628: LD_ADDR_VAR 0 8
7632: PUSH
7633: DOUBLE
7634: LD_INT 1
7636: DEC
7637: ST_TO_ADDR
7638: LD_VAR 0 6
7642: PUSH
7643: FOR_TO
7644: IFFALSE 7706
// begin if tmp < result [ j ] [ 2 ] then
7646: LD_VAR 0 9
7650: PUSH
7651: LD_VAR 0 6
7655: PUSH
7656: LD_VAR 0 8
7660: ARRAY
7661: PUSH
7662: LD_INT 2
7664: ARRAY
7665: LESS
7666: IFFALSE 7704
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7668: LD_ADDR_VAR 0 6
7672: PUSH
7673: LD_VAR 0 6
7677: PPUSH
7678: LD_VAR 0 8
7682: PPUSH
7683: LD_VAR 0 7
7687: PUSH
7688: LD_VAR 0 9
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PPUSH
7697: CALL_OW 2
7701: ST_TO_ADDR
// break ;
7702: GO 7706
// end ; end ;
7704: GO 7643
7706: POP
7707: POP
// end ; end ;
7708: GO 7507
7710: POP
7711: POP
// if result and not asc then
7712: LD_VAR 0 6
7716: PUSH
7717: LD_VAR 0 4
7721: NOT
7722: AND
7723: IFFALSE 7798
// begin tmp := result ;
7725: LD_ADDR_VAR 0 9
7729: PUSH
7730: LD_VAR 0 6
7734: ST_TO_ADDR
// for i = tmp downto 1 do
7735: LD_ADDR_VAR 0 7
7739: PUSH
7740: DOUBLE
7741: LD_VAR 0 9
7745: INC
7746: ST_TO_ADDR
7747: LD_INT 1
7749: PUSH
7750: FOR_DOWNTO
7751: IFFALSE 7796
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7753: LD_ADDR_VAR 0 6
7757: PUSH
7758: LD_VAR 0 6
7762: PPUSH
7763: LD_VAR 0 9
7767: PUSH
7768: LD_VAR 0 7
7772: MINUS
7773: PUSH
7774: LD_INT 1
7776: PLUS
7777: PPUSH
7778: LD_VAR 0 9
7782: PUSH
7783: LD_VAR 0 7
7787: ARRAY
7788: PPUSH
7789: CALL_OW 1
7793: ST_TO_ADDR
7794: GO 7750
7796: POP
7797: POP
// end ; tmp := [ ] ;
7798: LD_ADDR_VAR 0 9
7802: PUSH
7803: EMPTY
7804: ST_TO_ADDR
// if mode then
7805: LD_VAR 0 5
7809: IFFALSE 7878
// begin for i = 1 to result do
7811: LD_ADDR_VAR 0 7
7815: PUSH
7816: DOUBLE
7817: LD_INT 1
7819: DEC
7820: ST_TO_ADDR
7821: LD_VAR 0 6
7825: PUSH
7826: FOR_TO
7827: IFFALSE 7866
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7829: LD_ADDR_VAR 0 9
7833: PUSH
7834: LD_VAR 0 9
7838: PPUSH
7839: LD_VAR 0 7
7843: PPUSH
7844: LD_VAR 0 6
7848: PUSH
7849: LD_VAR 0 7
7853: ARRAY
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: PPUSH
7859: CALL_OW 1
7863: ST_TO_ADDR
7864: GO 7826
7866: POP
7867: POP
// result := tmp ;
7868: LD_ADDR_VAR 0 6
7872: PUSH
7873: LD_VAR 0 9
7877: ST_TO_ADDR
// end ; end ;
7878: LD_VAR 0 6
7882: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7883: LD_INT 0
7885: PPUSH
7886: PPUSH
7887: PPUSH
7888: PPUSH
7889: PPUSH
7890: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7891: LD_ADDR_VAR 0 5
7895: PUSH
7896: LD_INT 0
7898: PUSH
7899: LD_INT 0
7901: PUSH
7902: LD_INT 0
7904: PUSH
7905: EMPTY
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: ST_TO_ADDR
// if not x or not y then
7913: LD_VAR 0 2
7917: NOT
7918: PUSH
7919: LD_VAR 0 3
7923: NOT
7924: OR
7925: IFFALSE 7929
// exit ;
7927: GO 9579
// if not range then
7929: LD_VAR 0 4
7933: NOT
7934: IFFALSE 7944
// range := 10 ;
7936: LD_ADDR_VAR 0 4
7940: PUSH
7941: LD_INT 10
7943: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7944: LD_ADDR_VAR 0 8
7948: PUSH
7949: LD_INT 81
7951: PUSH
7952: LD_VAR 0 1
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 92
7963: PUSH
7964: LD_VAR 0 2
7968: PUSH
7969: LD_VAR 0 3
7973: PUSH
7974: LD_VAR 0 4
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: PUSH
7985: LD_INT 3
7987: PUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 3
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: ST_TO_ADDR
// if not tmp then
8012: LD_VAR 0 8
8016: NOT
8017: IFFALSE 8021
// exit ;
8019: GO 9579
// for i in tmp do
8021: LD_ADDR_VAR 0 6
8025: PUSH
8026: LD_VAR 0 8
8030: PUSH
8031: FOR_IN
8032: IFFALSE 9554
// begin points := [ 0 , 0 , 0 ] ;
8034: LD_ADDR_VAR 0 9
8038: PUSH
8039: LD_INT 0
8041: PUSH
8042: LD_INT 0
8044: PUSH
8045: LD_INT 0
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: ST_TO_ADDR
// bpoints := 1 ;
8053: LD_ADDR_VAR 0 10
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8061: LD_VAR 0 6
8065: PPUSH
8066: CALL_OW 247
8070: PUSH
8071: LD_INT 1
8073: DOUBLE
8074: EQUAL
8075: IFTRUE 8079
8077: GO 8657
8079: POP
// begin if GetClass ( i ) = 1 then
8080: LD_VAR 0 6
8084: PPUSH
8085: CALL_OW 257
8089: PUSH
8090: LD_INT 1
8092: EQUAL
8093: IFFALSE 8114
// points := [ 10 , 5 , 3 ] ;
8095: LD_ADDR_VAR 0 9
8099: PUSH
8100: LD_INT 10
8102: PUSH
8103: LD_INT 5
8105: PUSH
8106: LD_INT 3
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8114: LD_VAR 0 6
8118: PPUSH
8119: CALL_OW 257
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: IN
8138: IFFALSE 8159
// points := [ 3 , 2 , 1 ] ;
8140: LD_ADDR_VAR 0 9
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: LD_INT 2
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8159: LD_VAR 0 6
8163: PPUSH
8164: CALL_OW 257
8168: PUSH
8169: LD_INT 5
8171: EQUAL
8172: IFFALSE 8193
// points := [ 130 , 5 , 2 ] ;
8174: LD_ADDR_VAR 0 9
8178: PUSH
8179: LD_INT 130
8181: PUSH
8182: LD_INT 5
8184: PUSH
8185: LD_INT 2
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8193: LD_VAR 0 6
8197: PPUSH
8198: CALL_OW 257
8202: PUSH
8203: LD_INT 8
8205: EQUAL
8206: IFFALSE 8227
// points := [ 35 , 35 , 30 ] ;
8208: LD_ADDR_VAR 0 9
8212: PUSH
8213: LD_INT 35
8215: PUSH
8216: LD_INT 35
8218: PUSH
8219: LD_INT 30
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8227: LD_VAR 0 6
8231: PPUSH
8232: CALL_OW 257
8236: PUSH
8237: LD_INT 9
8239: EQUAL
8240: IFFALSE 8261
// points := [ 20 , 55 , 40 ] ;
8242: LD_ADDR_VAR 0 9
8246: PUSH
8247: LD_INT 20
8249: PUSH
8250: LD_INT 55
8252: PUSH
8253: LD_INT 40
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8261: LD_VAR 0 6
8265: PPUSH
8266: CALL_OW 257
8270: PUSH
8271: LD_INT 12
8273: PUSH
8274: LD_INT 16
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: IN
8281: IFFALSE 8302
// points := [ 5 , 3 , 2 ] ;
8283: LD_ADDR_VAR 0 9
8287: PUSH
8288: LD_INT 5
8290: PUSH
8291: LD_INT 3
8293: PUSH
8294: LD_INT 2
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8302: LD_VAR 0 6
8306: PPUSH
8307: CALL_OW 257
8311: PUSH
8312: LD_INT 17
8314: EQUAL
8315: IFFALSE 8336
// points := [ 100 , 50 , 75 ] ;
8317: LD_ADDR_VAR 0 9
8321: PUSH
8322: LD_INT 100
8324: PUSH
8325: LD_INT 50
8327: PUSH
8328: LD_INT 75
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8336: LD_VAR 0 6
8340: PPUSH
8341: CALL_OW 257
8345: PUSH
8346: LD_INT 15
8348: EQUAL
8349: IFFALSE 8370
// points := [ 10 , 5 , 3 ] ;
8351: LD_ADDR_VAR 0 9
8355: PUSH
8356: LD_INT 10
8358: PUSH
8359: LD_INT 5
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8370: LD_VAR 0 6
8374: PPUSH
8375: CALL_OW 257
8379: PUSH
8380: LD_INT 14
8382: EQUAL
8383: IFFALSE 8404
// points := [ 10 , 0 , 0 ] ;
8385: LD_ADDR_VAR 0 9
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: LD_INT 0
8395: PUSH
8396: LD_INT 0
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8404: LD_VAR 0 6
8408: PPUSH
8409: CALL_OW 257
8413: PUSH
8414: LD_INT 11
8416: EQUAL
8417: IFFALSE 8438
// points := [ 30 , 10 , 5 ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 30
8426: PUSH
8427: LD_INT 10
8429: PUSH
8430: LD_INT 5
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8438: LD_VAR 0 1
8442: PPUSH
8443: LD_INT 5
8445: PPUSH
8446: CALL_OW 321
8450: PUSH
8451: LD_INT 2
8453: EQUAL
8454: IFFALSE 8471
// bpoints := bpoints * 1.8 ;
8456: LD_ADDR_VAR 0 10
8460: PUSH
8461: LD_VAR 0 10
8465: PUSH
8466: LD_REAL  1.80000000000000E+0000
8469: MUL
8470: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8471: LD_VAR 0 6
8475: PPUSH
8476: CALL_OW 257
8480: PUSH
8481: LD_INT 1
8483: PUSH
8484: LD_INT 2
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: LD_INT 4
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: IN
8499: PUSH
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_INT 51
8507: PPUSH
8508: CALL_OW 321
8512: PUSH
8513: LD_INT 2
8515: EQUAL
8516: AND
8517: IFFALSE 8534
// bpoints := bpoints * 1.2 ;
8519: LD_ADDR_VAR 0 10
8523: PUSH
8524: LD_VAR 0 10
8528: PUSH
8529: LD_REAL  1.20000000000000E+0000
8532: MUL
8533: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 257
8543: PUSH
8544: LD_INT 5
8546: PUSH
8547: LD_INT 7
8549: PUSH
8550: LD_INT 9
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: IN
8558: PUSH
8559: LD_VAR 0 1
8563: PPUSH
8564: LD_INT 52
8566: PPUSH
8567: CALL_OW 321
8571: PUSH
8572: LD_INT 2
8574: EQUAL
8575: AND
8576: IFFALSE 8593
// bpoints := bpoints * 1.5 ;
8578: LD_ADDR_VAR 0 10
8582: PUSH
8583: LD_VAR 0 10
8587: PUSH
8588: LD_REAL  1.50000000000000E+0000
8591: MUL
8592: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8593: LD_VAR 0 1
8597: PPUSH
8598: LD_INT 66
8600: PPUSH
8601: CALL_OW 321
8605: PUSH
8606: LD_INT 2
8608: EQUAL
8609: IFFALSE 8626
// bpoints := bpoints * 1.1 ;
8611: LD_ADDR_VAR 0 10
8615: PUSH
8616: LD_VAR 0 10
8620: PUSH
8621: LD_REAL  1.10000000000000E+0000
8624: MUL
8625: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8626: LD_ADDR_VAR 0 10
8630: PUSH
8631: LD_VAR 0 10
8635: PUSH
8636: LD_VAR 0 6
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: CALL_OW 259
8648: PUSH
8649: LD_REAL  1.15000000000000E+0000
8652: MUL
8653: MUL
8654: ST_TO_ADDR
// end ; unit_vehicle :
8655: GO 9483
8657: LD_INT 2
8659: DOUBLE
8660: EQUAL
8661: IFTRUE 8665
8663: GO 9471
8665: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8666: LD_VAR 0 6
8670: PPUSH
8671: CALL_OW 264
8675: PUSH
8676: LD_INT 2
8678: PUSH
8679: LD_INT 42
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: IN
8690: IFFALSE 8711
// points := [ 25 , 5 , 3 ] ;
8692: LD_ADDR_VAR 0 9
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 5
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8711: LD_VAR 0 6
8715: PPUSH
8716: CALL_OW 264
8720: PUSH
8721: LD_INT 4
8723: PUSH
8724: LD_INT 43
8726: PUSH
8727: LD_INT 25
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: LIST
8734: IN
8735: IFFALSE 8756
// points := [ 40 , 15 , 5 ] ;
8737: LD_ADDR_VAR 0 9
8741: PUSH
8742: LD_INT 40
8744: PUSH
8745: LD_INT 15
8747: PUSH
8748: LD_INT 5
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8756: LD_VAR 0 6
8760: PPUSH
8761: CALL_OW 264
8765: PUSH
8766: LD_INT 3
8768: PUSH
8769: LD_INT 23
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: IN
8776: IFFALSE 8797
// points := [ 7 , 25 , 8 ] ;
8778: LD_ADDR_VAR 0 9
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 25
8788: PUSH
8789: LD_INT 8
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8797: LD_VAR 0 6
8801: PPUSH
8802: CALL_OW 264
8806: PUSH
8807: LD_INT 5
8809: PUSH
8810: LD_INT 27
8812: PUSH
8813: LD_INT 44
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: IN
8821: IFFALSE 8842
// points := [ 14 , 50 , 16 ] ;
8823: LD_ADDR_VAR 0 9
8827: PUSH
8828: LD_INT 14
8830: PUSH
8831: LD_INT 50
8833: PUSH
8834: LD_INT 16
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8842: LD_VAR 0 6
8846: PPUSH
8847: CALL_OW 264
8851: PUSH
8852: LD_INT 6
8854: PUSH
8855: LD_INT 46
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: IN
8862: IFFALSE 8883
// points := [ 32 , 120 , 70 ] ;
8864: LD_ADDR_VAR 0 9
8868: PUSH
8869: LD_INT 32
8871: PUSH
8872: LD_INT 120
8874: PUSH
8875: LD_INT 70
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8883: LD_VAR 0 6
8887: PPUSH
8888: CALL_OW 264
8892: PUSH
8893: LD_INT 7
8895: PUSH
8896: LD_INT 28
8898: PUSH
8899: LD_INT 45
8901: PUSH
8902: LD_INT 92
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: IN
8911: IFFALSE 8932
// points := [ 35 , 20 , 45 ] ;
8913: LD_ADDR_VAR 0 9
8917: PUSH
8918: LD_INT 35
8920: PUSH
8921: LD_INT 20
8923: PUSH
8924: LD_INT 45
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: LIST
8931: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8932: LD_VAR 0 6
8936: PPUSH
8937: CALL_OW 264
8941: PUSH
8942: LD_INT 47
8944: PUSH
8945: EMPTY
8946: LIST
8947: IN
8948: IFFALSE 8969
// points := [ 67 , 45 , 75 ] ;
8950: LD_ADDR_VAR 0 9
8954: PUSH
8955: LD_INT 67
8957: PUSH
8958: LD_INT 45
8960: PUSH
8961: LD_INT 75
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8969: LD_VAR 0 6
8973: PPUSH
8974: CALL_OW 264
8978: PUSH
8979: LD_INT 26
8981: PUSH
8982: EMPTY
8983: LIST
8984: IN
8985: IFFALSE 9006
// points := [ 120 , 30 , 80 ] ;
8987: LD_ADDR_VAR 0 9
8991: PUSH
8992: LD_INT 120
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 80
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9006: LD_VAR 0 6
9010: PPUSH
9011: CALL_OW 264
9015: PUSH
9016: LD_INT 22
9018: PUSH
9019: EMPTY
9020: LIST
9021: IN
9022: IFFALSE 9043
// points := [ 40 , 1 , 1 ] ;
9024: LD_ADDR_VAR 0 9
9028: PUSH
9029: LD_INT 40
9031: PUSH
9032: LD_INT 1
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9043: LD_VAR 0 6
9047: PPUSH
9048: CALL_OW 264
9052: PUSH
9053: LD_INT 29
9055: PUSH
9056: EMPTY
9057: LIST
9058: IN
9059: IFFALSE 9080
// points := [ 70 , 200 , 400 ] ;
9061: LD_ADDR_VAR 0 9
9065: PUSH
9066: LD_INT 70
9068: PUSH
9069: LD_INT 200
9071: PUSH
9072: LD_INT 400
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9080: LD_VAR 0 6
9084: PPUSH
9085: CALL_OW 264
9089: PUSH
9090: LD_INT 14
9092: PUSH
9093: LD_INT 53
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: IN
9100: IFFALSE 9121
// points := [ 40 , 10 , 20 ] ;
9102: LD_ADDR_VAR 0 9
9106: PUSH
9107: LD_INT 40
9109: PUSH
9110: LD_INT 10
9112: PUSH
9113: LD_INT 20
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9121: LD_VAR 0 6
9125: PPUSH
9126: CALL_OW 264
9130: PUSH
9131: LD_INT 9
9133: PUSH
9134: EMPTY
9135: LIST
9136: IN
9137: IFFALSE 9158
// points := [ 5 , 70 , 20 ] ;
9139: LD_ADDR_VAR 0 9
9143: PUSH
9144: LD_INT 5
9146: PUSH
9147: LD_INT 70
9149: PUSH
9150: LD_INT 20
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9158: LD_VAR 0 6
9162: PPUSH
9163: CALL_OW 264
9167: PUSH
9168: LD_INT 10
9170: PUSH
9171: EMPTY
9172: LIST
9173: IN
9174: IFFALSE 9195
// points := [ 35 , 110 , 70 ] ;
9176: LD_ADDR_VAR 0 9
9180: PUSH
9181: LD_INT 35
9183: PUSH
9184: LD_INT 110
9186: PUSH
9187: LD_INT 70
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9195: LD_VAR 0 6
9199: PPUSH
9200: CALL_OW 265
9204: PUSH
9205: LD_INT 25
9207: EQUAL
9208: IFFALSE 9229
// points := [ 80 , 65 , 100 ] ;
9210: LD_ADDR_VAR 0 9
9214: PUSH
9215: LD_INT 80
9217: PUSH
9218: LD_INT 65
9220: PUSH
9221: LD_INT 100
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9229: LD_VAR 0 6
9233: PPUSH
9234: CALL_OW 263
9238: PUSH
9239: LD_INT 1
9241: EQUAL
9242: IFFALSE 9277
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9244: LD_ADDR_VAR 0 10
9248: PUSH
9249: LD_VAR 0 10
9253: PUSH
9254: LD_VAR 0 6
9258: PPUSH
9259: CALL_OW 311
9263: PPUSH
9264: LD_INT 3
9266: PPUSH
9267: CALL_OW 259
9271: PUSH
9272: LD_INT 4
9274: MUL
9275: MUL
9276: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9277: LD_VAR 0 6
9281: PPUSH
9282: CALL_OW 263
9286: PUSH
9287: LD_INT 2
9289: EQUAL
9290: IFFALSE 9341
// begin j := IsControledBy ( i ) ;
9292: LD_ADDR_VAR 0 7
9296: PUSH
9297: LD_VAR 0 6
9301: PPUSH
9302: CALL_OW 312
9306: ST_TO_ADDR
// if j then
9307: LD_VAR 0 7
9311: IFFALSE 9341
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9313: LD_ADDR_VAR 0 10
9317: PUSH
9318: LD_VAR 0 10
9322: PUSH
9323: LD_VAR 0 7
9327: PPUSH
9328: LD_INT 3
9330: PPUSH
9331: CALL_OW 259
9335: PUSH
9336: LD_INT 3
9338: MUL
9339: MUL
9340: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9341: LD_VAR 0 6
9345: PPUSH
9346: CALL_OW 264
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: LD_INT 6
9356: PUSH
9357: LD_INT 46
9359: PUSH
9360: LD_INT 44
9362: PUSH
9363: LD_INT 47
9365: PUSH
9366: LD_INT 45
9368: PUSH
9369: LD_INT 28
9371: PUSH
9372: LD_INT 7
9374: PUSH
9375: LD_INT 27
9377: PUSH
9378: LD_INT 29
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: IN
9393: PUSH
9394: LD_VAR 0 1
9398: PPUSH
9399: LD_INT 52
9401: PPUSH
9402: CALL_OW 321
9406: PUSH
9407: LD_INT 2
9409: EQUAL
9410: AND
9411: IFFALSE 9428
// bpoints := bpoints * 1.2 ;
9413: LD_ADDR_VAR 0 10
9417: PUSH
9418: LD_VAR 0 10
9422: PUSH
9423: LD_REAL  1.20000000000000E+0000
9426: MUL
9427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9428: LD_VAR 0 6
9432: PPUSH
9433: CALL_OW 264
9437: PUSH
9438: LD_INT 6
9440: PUSH
9441: LD_INT 46
9443: PUSH
9444: LD_INT 47
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: IN
9452: IFFALSE 9469
// bpoints := bpoints * 1.2 ;
9454: LD_ADDR_VAR 0 10
9458: PUSH
9459: LD_VAR 0 10
9463: PUSH
9464: LD_REAL  1.20000000000000E+0000
9467: MUL
9468: ST_TO_ADDR
// end ; unit_building :
9469: GO 9483
9471: LD_INT 3
9473: DOUBLE
9474: EQUAL
9475: IFTRUE 9479
9477: GO 9482
9479: POP
// ; end ;
9480: GO 9483
9482: POP
// for j = 1 to 3 do
9483: LD_ADDR_VAR 0 7
9487: PUSH
9488: DOUBLE
9489: LD_INT 1
9491: DEC
9492: ST_TO_ADDR
9493: LD_INT 3
9495: PUSH
9496: FOR_TO
9497: IFFALSE 9550
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9499: LD_ADDR_VAR 0 5
9503: PUSH
9504: LD_VAR 0 5
9508: PPUSH
9509: LD_VAR 0 7
9513: PPUSH
9514: LD_VAR 0 5
9518: PUSH
9519: LD_VAR 0 7
9523: ARRAY
9524: PUSH
9525: LD_VAR 0 9
9529: PUSH
9530: LD_VAR 0 7
9534: ARRAY
9535: PUSH
9536: LD_VAR 0 10
9540: MUL
9541: PLUS
9542: PPUSH
9543: CALL_OW 1
9547: ST_TO_ADDR
9548: GO 9496
9550: POP
9551: POP
// end ;
9552: GO 8031
9554: POP
9555: POP
// result := Replace ( result , 4 , tmp ) ;
9556: LD_ADDR_VAR 0 5
9560: PUSH
9561: LD_VAR 0 5
9565: PPUSH
9566: LD_INT 4
9568: PPUSH
9569: LD_VAR 0 8
9573: PPUSH
9574: CALL_OW 1
9578: ST_TO_ADDR
// end ;
9579: LD_VAR 0 5
9583: RET
// export function DangerAtRange ( unit , range ) ; begin
9584: LD_INT 0
9586: PPUSH
// if not unit then
9587: LD_VAR 0 1
9591: NOT
9592: IFFALSE 9596
// exit ;
9594: GO 9641
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 255
9610: PPUSH
9611: LD_VAR 0 1
9615: PPUSH
9616: CALL_OW 250
9620: PPUSH
9621: LD_VAR 0 1
9625: PPUSH
9626: CALL_OW 251
9630: PPUSH
9631: LD_VAR 0 2
9635: PPUSH
9636: CALL 7883 0 4
9640: ST_TO_ADDR
// end ;
9641: LD_VAR 0 3
9645: RET
// export function DangerInArea ( side , area ) ; begin
9646: LD_INT 0
9648: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9649: LD_ADDR_VAR 0 3
9653: PUSH
9654: LD_VAR 0 2
9658: PPUSH
9659: LD_INT 81
9661: PUSH
9662: LD_VAR 0 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PPUSH
9671: CALL_OW 70
9675: ST_TO_ADDR
// end ;
9676: LD_VAR 0 3
9680: RET
// export function IsExtension ( b ) ; begin
9681: LD_INT 0
9683: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9684: LD_ADDR_VAR 0 2
9688: PUSH
9689: LD_VAR 0 1
9693: PUSH
9694: LD_INT 23
9696: PUSH
9697: LD_INT 20
9699: PUSH
9700: LD_INT 22
9702: PUSH
9703: LD_INT 17
9705: PUSH
9706: LD_INT 24
9708: PUSH
9709: LD_INT 21
9711: PUSH
9712: LD_INT 19
9714: PUSH
9715: LD_INT 16
9717: PUSH
9718: LD_INT 25
9720: PUSH
9721: LD_INT 18
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: IN
9736: ST_TO_ADDR
// end ;
9737: LD_VAR 0 2
9741: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9742: LD_INT 0
9744: PPUSH
9745: PPUSH
9746: PPUSH
// result := [ ] ;
9747: LD_ADDR_VAR 0 4
9751: PUSH
9752: EMPTY
9753: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9754: LD_ADDR_VAR 0 5
9758: PUSH
9759: LD_VAR 0 2
9763: PPUSH
9764: LD_INT 21
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PPUSH
9774: CALL_OW 70
9778: ST_TO_ADDR
// if not tmp then
9779: LD_VAR 0 5
9783: NOT
9784: IFFALSE 9788
// exit ;
9786: GO 9852
// if checkLink then
9788: LD_VAR 0 3
9792: IFFALSE 9842
// begin for i in tmp do
9794: LD_ADDR_VAR 0 6
9798: PUSH
9799: LD_VAR 0 5
9803: PUSH
9804: FOR_IN
9805: IFFALSE 9840
// if GetBase ( i ) <> base then
9807: LD_VAR 0 6
9811: PPUSH
9812: CALL_OW 274
9816: PUSH
9817: LD_VAR 0 1
9821: NONEQUAL
9822: IFFALSE 9838
// ComLinkToBase ( base , i ) ;
9824: LD_VAR 0 1
9828: PPUSH
9829: LD_VAR 0 6
9833: PPUSH
9834: CALL_OW 169
9838: GO 9804
9840: POP
9841: POP
// end ; result := tmp ;
9842: LD_ADDR_VAR 0 4
9846: PUSH
9847: LD_VAR 0 5
9851: ST_TO_ADDR
// end ;
9852: LD_VAR 0 4
9856: RET
// export function ComComplete ( units , b ) ; var i ; begin
9857: LD_INT 0
9859: PPUSH
9860: PPUSH
// if not units then
9861: LD_VAR 0 1
9865: NOT
9866: IFFALSE 9870
// exit ;
9868: GO 9960
// for i in units do
9870: LD_ADDR_VAR 0 4
9874: PUSH
9875: LD_VAR 0 1
9879: PUSH
9880: FOR_IN
9881: IFFALSE 9958
// if BuildingStatus ( b ) = bs_build then
9883: LD_VAR 0 2
9887: PPUSH
9888: CALL_OW 461
9892: PUSH
9893: LD_INT 1
9895: EQUAL
9896: IFFALSE 9956
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9898: LD_VAR 0 4
9902: PPUSH
9903: LD_STRING h
9905: PUSH
9906: LD_VAR 0 2
9910: PPUSH
9911: CALL_OW 250
9915: PUSH
9916: LD_VAR 0 2
9920: PPUSH
9921: CALL_OW 251
9925: PUSH
9926: LD_VAR 0 2
9930: PUSH
9931: LD_INT 0
9933: PUSH
9934: LD_INT 0
9936: PUSH
9937: LD_INT 0
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: PUSH
9949: EMPTY
9950: LIST
9951: PPUSH
9952: CALL_OW 446
9956: GO 9880
9958: POP
9959: POP
// end ;
9960: LD_VAR 0 3
9964: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9965: LD_INT 0
9967: PPUSH
9968: PPUSH
9969: PPUSH
9970: PPUSH
9971: PPUSH
9972: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9973: LD_VAR 0 1
9977: NOT
9978: PUSH
9979: LD_VAR 0 1
9983: PPUSH
9984: CALL_OW 263
9988: PUSH
9989: LD_INT 2
9991: NONEQUAL
9992: OR
9993: IFFALSE 9997
// exit ;
9995: GO 10313
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9997: LD_ADDR_VAR 0 6
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_VAR 0 1
10009: PPUSH
10010: CALL_OW 255
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 2
10021: PUSH
10022: LD_INT 30
10024: PUSH
10025: LD_INT 36
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: LD_INT 34
10034: PUSH
10035: LD_INT 31
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: ST_TO_ADDR
// if not tmp then
10056: LD_VAR 0 6
10060: NOT
10061: IFFALSE 10065
// exit ;
10063: GO 10313
// result := [ ] ;
10065: LD_ADDR_VAR 0 2
10069: PUSH
10070: EMPTY
10071: ST_TO_ADDR
// for i in tmp do
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_VAR 0 6
10081: PUSH
10082: FOR_IN
10083: IFFALSE 10154
// begin t := UnitsInside ( i ) ;
10085: LD_ADDR_VAR 0 4
10089: PUSH
10090: LD_VAR 0 3
10094: PPUSH
10095: CALL_OW 313
10099: ST_TO_ADDR
// if t then
10100: LD_VAR 0 4
10104: IFFALSE 10152
// for j in t do
10106: LD_ADDR_VAR 0 7
10110: PUSH
10111: LD_VAR 0 4
10115: PUSH
10116: FOR_IN
10117: IFFALSE 10150
// result := Replace ( result , result + 1 , j ) ;
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: LD_VAR 0 2
10128: PPUSH
10129: LD_VAR 0 2
10133: PUSH
10134: LD_INT 1
10136: PLUS
10137: PPUSH
10138: LD_VAR 0 7
10142: PPUSH
10143: CALL_OW 1
10147: ST_TO_ADDR
10148: GO 10116
10150: POP
10151: POP
// end ;
10152: GO 10082
10154: POP
10155: POP
// if not result then
10156: LD_VAR 0 2
10160: NOT
10161: IFFALSE 10165
// exit ;
10163: GO 10313
// mech := result [ 1 ] ;
10165: LD_ADDR_VAR 0 5
10169: PUSH
10170: LD_VAR 0 2
10174: PUSH
10175: LD_INT 1
10177: ARRAY
10178: ST_TO_ADDR
// if result > 1 then
10179: LD_VAR 0 2
10183: PUSH
10184: LD_INT 1
10186: GREATER
10187: IFFALSE 10299
// begin for i = 2 to result do
10189: LD_ADDR_VAR 0 3
10193: PUSH
10194: DOUBLE
10195: LD_INT 2
10197: DEC
10198: ST_TO_ADDR
10199: LD_VAR 0 2
10203: PUSH
10204: FOR_TO
10205: IFFALSE 10297
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10207: LD_ADDR_VAR 0 4
10211: PUSH
10212: LD_VAR 0 2
10216: PUSH
10217: LD_VAR 0 3
10221: ARRAY
10222: PPUSH
10223: LD_INT 3
10225: PPUSH
10226: CALL_OW 259
10230: PUSH
10231: LD_VAR 0 2
10235: PUSH
10236: LD_VAR 0 3
10240: ARRAY
10241: PPUSH
10242: CALL_OW 432
10246: MINUS
10247: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10248: LD_VAR 0 4
10252: PUSH
10253: LD_VAR 0 5
10257: PPUSH
10258: LD_INT 3
10260: PPUSH
10261: CALL_OW 259
10265: PUSH
10266: LD_VAR 0 5
10270: PPUSH
10271: CALL_OW 432
10275: MINUS
10276: GREATEREQUAL
10277: IFFALSE 10295
// mech := result [ i ] ;
10279: LD_ADDR_VAR 0 5
10283: PUSH
10284: LD_VAR 0 2
10288: PUSH
10289: LD_VAR 0 3
10293: ARRAY
10294: ST_TO_ADDR
// end ;
10295: GO 10204
10297: POP
10298: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10299: LD_VAR 0 1
10303: PPUSH
10304: LD_VAR 0 5
10308: PPUSH
10309: CALL_OW 135
// end ;
10313: LD_VAR 0 2
10317: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10318: LD_INT 0
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
10331: PPUSH
10332: PPUSH
// result := [ ] ;
10333: LD_ADDR_VAR 0 7
10337: PUSH
10338: EMPTY
10339: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 266
10349: PUSH
10350: LD_INT 0
10352: PUSH
10353: LD_INT 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: IN
10360: NOT
10361: IFFALSE 10365
// exit ;
10363: GO 11999
// if name then
10365: LD_VAR 0 3
10369: IFFALSE 10385
// SetBName ( base_dep , name ) ;
10371: LD_VAR 0 1
10375: PPUSH
10376: LD_VAR 0 3
10380: PPUSH
10381: CALL_OW 500
// base := GetBase ( base_dep ) ;
10385: LD_ADDR_VAR 0 15
10389: PUSH
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 274
10399: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10400: LD_ADDR_VAR 0 16
10404: PUSH
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10415: LD_ADDR_VAR 0 17
10419: PUSH
10420: LD_VAR 0 1
10424: PPUSH
10425: CALL_OW 248
10429: ST_TO_ADDR
// if sources then
10430: LD_VAR 0 5
10434: IFFALSE 10481
// for i = 1 to 3 do
10436: LD_ADDR_VAR 0 8
10440: PUSH
10441: DOUBLE
10442: LD_INT 1
10444: DEC
10445: ST_TO_ADDR
10446: LD_INT 3
10448: PUSH
10449: FOR_TO
10450: IFFALSE 10479
// AddResourceType ( base , i , sources [ i ] ) ;
10452: LD_VAR 0 15
10456: PPUSH
10457: LD_VAR 0 8
10461: PPUSH
10462: LD_VAR 0 5
10466: PUSH
10467: LD_VAR 0 8
10471: ARRAY
10472: PPUSH
10473: CALL_OW 276
10477: GO 10449
10479: POP
10480: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10481: LD_ADDR_VAR 0 18
10485: PUSH
10486: LD_VAR 0 15
10490: PPUSH
10491: LD_VAR 0 2
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL 9742 0 3
10503: ST_TO_ADDR
// InitHc ;
10504: CALL_OW 19
// InitUc ;
10508: CALL_OW 18
// uc_side := side ;
10512: LD_ADDR_OWVAR 20
10516: PUSH
10517: LD_VAR 0 16
10521: ST_TO_ADDR
// uc_nation := nation ;
10522: LD_ADDR_OWVAR 21
10526: PUSH
10527: LD_VAR 0 17
10531: ST_TO_ADDR
// if buildings then
10532: LD_VAR 0 18
10536: IFFALSE 11858
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10538: LD_ADDR_VAR 0 19
10542: PUSH
10543: LD_VAR 0 18
10547: PPUSH
10548: LD_INT 2
10550: PUSH
10551: LD_INT 30
10553: PUSH
10554: LD_INT 29
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 30
10563: PUSH
10564: LD_INT 30
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 72
10580: ST_TO_ADDR
// if tmp then
10581: LD_VAR 0 19
10585: IFFALSE 10633
// for i in tmp do
10587: LD_ADDR_VAR 0 8
10591: PUSH
10592: LD_VAR 0 19
10596: PUSH
10597: FOR_IN
10598: IFFALSE 10631
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10600: LD_VAR 0 8
10604: PPUSH
10605: CALL_OW 250
10609: PPUSH
10610: LD_VAR 0 8
10614: PPUSH
10615: CALL_OW 251
10619: PPUSH
10620: LD_VAR 0 16
10624: PPUSH
10625: CALL_OW 441
10629: GO 10597
10631: POP
10632: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10633: LD_VAR 0 18
10637: PPUSH
10638: LD_INT 2
10640: PUSH
10641: LD_INT 30
10643: PUSH
10644: LD_INT 32
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 30
10653: PUSH
10654: LD_INT 33
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 72
10670: IFFALSE 10758
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10672: LD_ADDR_VAR 0 8
10676: PUSH
10677: LD_VAR 0 18
10681: PPUSH
10682: LD_INT 2
10684: PUSH
10685: LD_INT 30
10687: PUSH
10688: LD_INT 32
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 30
10697: PUSH
10698: LD_INT 33
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 72
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10756
// begin if not GetBWeapon ( i ) then
10718: LD_VAR 0 8
10722: PPUSH
10723: CALL_OW 269
10727: NOT
10728: IFFALSE 10754
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10730: LD_VAR 0 8
10734: PPUSH
10735: LD_VAR 0 8
10739: PPUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: CALL 12004 0 2
10749: PPUSH
10750: CALL_OW 431
// end ;
10754: GO 10715
10756: POP
10757: POP
// end ; for i = 1 to personel do
10758: LD_ADDR_VAR 0 8
10762: PUSH
10763: DOUBLE
10764: LD_INT 1
10766: DEC
10767: ST_TO_ADDR
10768: LD_VAR 0 6
10772: PUSH
10773: FOR_TO
10774: IFFALSE 11838
// begin if i > 4 then
10776: LD_VAR 0 8
10780: PUSH
10781: LD_INT 4
10783: GREATER
10784: IFFALSE 10788
// break ;
10786: GO 11838
// case i of 1 :
10788: LD_VAR 0 8
10792: PUSH
10793: LD_INT 1
10795: DOUBLE
10796: EQUAL
10797: IFTRUE 10801
10799: GO 10881
10801: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10802: LD_ADDR_VAR 0 12
10806: PUSH
10807: LD_VAR 0 18
10811: PPUSH
10812: LD_INT 22
10814: PUSH
10815: LD_VAR 0 16
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 58
10826: PUSH
10827: EMPTY
10828: LIST
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: LD_INT 30
10835: PUSH
10836: LD_INT 32
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 30
10845: PUSH
10846: LD_INT 4
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 30
10855: PUSH
10856: LD_INT 5
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: PPUSH
10874: CALL_OW 72
10878: ST_TO_ADDR
10879: GO 11103
10881: LD_INT 2
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10951
10889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10890: LD_ADDR_VAR 0 12
10894: PUSH
10895: LD_VAR 0 18
10899: PPUSH
10900: LD_INT 22
10902: PUSH
10903: LD_VAR 0 16
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 2
10914: PUSH
10915: LD_INT 30
10917: PUSH
10918: LD_INT 0
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 30
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 72
10948: ST_TO_ADDR
10949: GO 11103
10951: LD_INT 3
10953: DOUBLE
10954: EQUAL
10955: IFTRUE 10959
10957: GO 11021
10959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10960: LD_ADDR_VAR 0 12
10964: PUSH
10965: LD_VAR 0 18
10969: PPUSH
10970: LD_INT 22
10972: PUSH
10973: LD_VAR 0 16
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 2
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 30
10997: PUSH
10998: LD_INT 3
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PPUSH
11014: CALL_OW 72
11018: ST_TO_ADDR
11019: GO 11103
11021: LD_INT 4
11023: DOUBLE
11024: EQUAL
11025: IFTRUE 11029
11027: GO 11102
11029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11030: LD_ADDR_VAR 0 12
11034: PUSH
11035: LD_VAR 0 18
11039: PPUSH
11040: LD_INT 22
11042: PUSH
11043: LD_VAR 0 16
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: LD_INT 30
11057: PUSH
11058: LD_INT 6
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 30
11067: PUSH
11068: LD_INT 7
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 30
11077: PUSH
11078: LD_INT 8
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PPUSH
11095: CALL_OW 72
11099: ST_TO_ADDR
11100: GO 11103
11102: POP
// if i = 1 then
11103: LD_VAR 0 8
11107: PUSH
11108: LD_INT 1
11110: EQUAL
11111: IFFALSE 11222
// begin tmp := [ ] ;
11113: LD_ADDR_VAR 0 19
11117: PUSH
11118: EMPTY
11119: ST_TO_ADDR
// for j in f do
11120: LD_ADDR_VAR 0 9
11124: PUSH
11125: LD_VAR 0 12
11129: PUSH
11130: FOR_IN
11131: IFFALSE 11204
// if GetBType ( j ) = b_bunker then
11133: LD_VAR 0 9
11137: PPUSH
11138: CALL_OW 266
11142: PUSH
11143: LD_INT 32
11145: EQUAL
11146: IFFALSE 11173
// tmp := Insert ( tmp , 1 , j ) else
11148: LD_ADDR_VAR 0 19
11152: PUSH
11153: LD_VAR 0 19
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: LD_VAR 0 9
11165: PPUSH
11166: CALL_OW 2
11170: ST_TO_ADDR
11171: GO 11202
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11173: LD_ADDR_VAR 0 19
11177: PUSH
11178: LD_VAR 0 19
11182: PPUSH
11183: LD_VAR 0 19
11187: PUSH
11188: LD_INT 1
11190: PLUS
11191: PPUSH
11192: LD_VAR 0 9
11196: PPUSH
11197: CALL_OW 2
11201: ST_TO_ADDR
11202: GO 11130
11204: POP
11205: POP
// if tmp then
11206: LD_VAR 0 19
11210: IFFALSE 11222
// f := tmp ;
11212: LD_ADDR_VAR 0 12
11216: PUSH
11217: LD_VAR 0 19
11221: ST_TO_ADDR
// end ; x := personel [ i ] ;
11222: LD_ADDR_VAR 0 13
11226: PUSH
11227: LD_VAR 0 6
11231: PUSH
11232: LD_VAR 0 8
11236: ARRAY
11237: ST_TO_ADDR
// if x = - 1 then
11238: LD_VAR 0 13
11242: PUSH
11243: LD_INT 1
11245: NEG
11246: EQUAL
11247: IFFALSE 11456
// begin for j in f do
11249: LD_ADDR_VAR 0 9
11253: PUSH
11254: LD_VAR 0 12
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11452
// repeat InitHc ;
11262: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11266: LD_VAR 0 9
11270: PPUSH
11271: CALL_OW 266
11275: PUSH
11276: LD_INT 5
11278: EQUAL
11279: IFFALSE 11349
// begin if UnitsInside ( j ) < 3 then
11281: LD_VAR 0 9
11285: PPUSH
11286: CALL_OW 313
11290: PUSH
11291: LD_INT 3
11293: LESS
11294: IFFALSE 11330
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11296: LD_INT 0
11298: PPUSH
11299: LD_INT 5
11301: PUSH
11302: LD_INT 8
11304: PUSH
11305: LD_INT 9
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: PUSH
11313: LD_VAR 0 17
11317: ARRAY
11318: PPUSH
11319: LD_VAR 0 4
11323: PPUSH
11324: CALL_OW 380
11328: GO 11347
// PrepareHuman ( false , i , skill ) ;
11330: LD_INT 0
11332: PPUSH
11333: LD_VAR 0 8
11337: PPUSH
11338: LD_VAR 0 4
11342: PPUSH
11343: CALL_OW 380
// end else
11347: GO 11366
// PrepareHuman ( false , i , skill ) ;
11349: LD_INT 0
11351: PPUSH
11352: LD_VAR 0 8
11356: PPUSH
11357: LD_VAR 0 4
11361: PPUSH
11362: CALL_OW 380
// un := CreateHuman ;
11366: LD_ADDR_VAR 0 14
11370: PUSH
11371: CALL_OW 44
11375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11376: LD_ADDR_VAR 0 7
11380: PUSH
11381: LD_VAR 0 7
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: LD_VAR 0 14
11393: PPUSH
11394: CALL_OW 2
11398: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11399: LD_VAR 0 14
11403: PPUSH
11404: LD_VAR 0 9
11408: PPUSH
11409: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11413: LD_VAR 0 9
11417: PPUSH
11418: CALL_OW 313
11422: PUSH
11423: LD_INT 6
11425: EQUAL
11426: PUSH
11427: LD_VAR 0 9
11431: PPUSH
11432: CALL_OW 266
11436: PUSH
11437: LD_INT 32
11439: PUSH
11440: LD_INT 31
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: IN
11447: OR
11448: IFFALSE 11262
11450: GO 11259
11452: POP
11453: POP
// end else
11454: GO 11836
// for j = 1 to x do
11456: LD_ADDR_VAR 0 9
11460: PUSH
11461: DOUBLE
11462: LD_INT 1
11464: DEC
11465: ST_TO_ADDR
11466: LD_VAR 0 13
11470: PUSH
11471: FOR_TO
11472: IFFALSE 11834
// begin InitHc ;
11474: CALL_OW 19
// if not f then
11478: LD_VAR 0 12
11482: NOT
11483: IFFALSE 11572
// begin PrepareHuman ( false , i , skill ) ;
11485: LD_INT 0
11487: PPUSH
11488: LD_VAR 0 8
11492: PPUSH
11493: LD_VAR 0 4
11497: PPUSH
11498: CALL_OW 380
// un := CreateHuman ;
11502: LD_ADDR_VAR 0 14
11506: PUSH
11507: CALL_OW 44
11511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11512: LD_ADDR_VAR 0 7
11516: PUSH
11517: LD_VAR 0 7
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: LD_VAR 0 14
11529: PPUSH
11530: CALL_OW 2
11534: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11535: LD_VAR 0 14
11539: PPUSH
11540: LD_VAR 0 1
11544: PPUSH
11545: CALL_OW 250
11549: PPUSH
11550: LD_VAR 0 1
11554: PPUSH
11555: CALL_OW 251
11559: PPUSH
11560: LD_INT 10
11562: PPUSH
11563: LD_INT 0
11565: PPUSH
11566: CALL_OW 50
// continue ;
11570: GO 11471
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11572: LD_VAR 0 12
11576: PUSH
11577: LD_INT 1
11579: ARRAY
11580: PPUSH
11581: CALL_OW 313
11585: PUSH
11586: LD_VAR 0 12
11590: PUSH
11591: LD_INT 1
11593: ARRAY
11594: PPUSH
11595: CALL_OW 266
11599: PUSH
11600: LD_INT 32
11602: PUSH
11603: LD_INT 31
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: IN
11610: AND
11611: PUSH
11612: LD_VAR 0 12
11616: PUSH
11617: LD_INT 1
11619: ARRAY
11620: PPUSH
11621: CALL_OW 313
11625: PUSH
11626: LD_INT 6
11628: EQUAL
11629: OR
11630: IFFALSE 11650
// f := Delete ( f , 1 ) ;
11632: LD_ADDR_VAR 0 12
11636: PUSH
11637: LD_VAR 0 12
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL_OW 3
11649: ST_TO_ADDR
// if not f then
11650: LD_VAR 0 12
11654: NOT
11655: IFFALSE 11673
// begin x := x + 2 ;
11657: LD_ADDR_VAR 0 13
11661: PUSH
11662: LD_VAR 0 13
11666: PUSH
11667: LD_INT 2
11669: PLUS
11670: ST_TO_ADDR
// continue ;
11671: GO 11471
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11673: LD_VAR 0 12
11677: PUSH
11678: LD_INT 1
11680: ARRAY
11681: PPUSH
11682: CALL_OW 266
11686: PUSH
11687: LD_INT 5
11689: EQUAL
11690: IFFALSE 11764
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11692: LD_VAR 0 12
11696: PUSH
11697: LD_INT 1
11699: ARRAY
11700: PPUSH
11701: CALL_OW 313
11705: PUSH
11706: LD_INT 3
11708: LESS
11709: IFFALSE 11745
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11711: LD_INT 0
11713: PPUSH
11714: LD_INT 5
11716: PUSH
11717: LD_INT 8
11719: PUSH
11720: LD_INT 9
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: LD_VAR 0 17
11732: ARRAY
11733: PPUSH
11734: LD_VAR 0 4
11738: PPUSH
11739: CALL_OW 380
11743: GO 11762
// PrepareHuman ( false , i , skill ) ;
11745: LD_INT 0
11747: PPUSH
11748: LD_VAR 0 8
11752: PPUSH
11753: LD_VAR 0 4
11757: PPUSH
11758: CALL_OW 380
// end else
11762: GO 11781
// PrepareHuman ( false , i , skill ) ;
11764: LD_INT 0
11766: PPUSH
11767: LD_VAR 0 8
11771: PPUSH
11772: LD_VAR 0 4
11776: PPUSH
11777: CALL_OW 380
// un := CreateHuman ;
11781: LD_ADDR_VAR 0 14
11785: PUSH
11786: CALL_OW 44
11790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11791: LD_ADDR_VAR 0 7
11795: PUSH
11796: LD_VAR 0 7
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: LD_VAR 0 14
11808: PPUSH
11809: CALL_OW 2
11813: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11814: LD_VAR 0 14
11818: PPUSH
11819: LD_VAR 0 12
11823: PUSH
11824: LD_INT 1
11826: ARRAY
11827: PPUSH
11828: CALL_OW 52
// end ;
11832: GO 11471
11834: POP
11835: POP
// end ;
11836: GO 10773
11838: POP
11839: POP
// result := result ^ buildings ;
11840: LD_ADDR_VAR 0 7
11844: PUSH
11845: LD_VAR 0 7
11849: PUSH
11850: LD_VAR 0 18
11854: ADD
11855: ST_TO_ADDR
// end else
11856: GO 11999
// begin for i = 1 to personel do
11858: LD_ADDR_VAR 0 8
11862: PUSH
11863: DOUBLE
11864: LD_INT 1
11866: DEC
11867: ST_TO_ADDR
11868: LD_VAR 0 6
11872: PUSH
11873: FOR_TO
11874: IFFALSE 11997
// begin if i > 4 then
11876: LD_VAR 0 8
11880: PUSH
11881: LD_INT 4
11883: GREATER
11884: IFFALSE 11888
// break ;
11886: GO 11997
// x := personel [ i ] ;
11888: LD_ADDR_VAR 0 13
11892: PUSH
11893: LD_VAR 0 6
11897: PUSH
11898: LD_VAR 0 8
11902: ARRAY
11903: ST_TO_ADDR
// if x = - 1 then
11904: LD_VAR 0 13
11908: PUSH
11909: LD_INT 1
11911: NEG
11912: EQUAL
11913: IFFALSE 11917
// continue ;
11915: GO 11873
// PrepareHuman ( false , i , skill ) ;
11917: LD_INT 0
11919: PPUSH
11920: LD_VAR 0 8
11924: PPUSH
11925: LD_VAR 0 4
11929: PPUSH
11930: CALL_OW 380
// un := CreateHuman ;
11934: LD_ADDR_VAR 0 14
11938: PUSH
11939: CALL_OW 44
11943: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11944: LD_VAR 0 14
11948: PPUSH
11949: LD_VAR 0 1
11953: PPUSH
11954: CALL_OW 250
11958: PPUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 251
11968: PPUSH
11969: LD_INT 10
11971: PPUSH
11972: LD_INT 0
11974: PPUSH
11975: CALL_OW 50
// result := result ^ un ;
11979: LD_ADDR_VAR 0 7
11983: PUSH
11984: LD_VAR 0 7
11988: PUSH
11989: LD_VAR 0 14
11993: ADD
11994: ST_TO_ADDR
// end ;
11995: GO 11873
11997: POP
11998: POP
// end ; end ;
11999: LD_VAR 0 7
12003: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12004: LD_INT 0
12006: PPUSH
12007: PPUSH
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
12012: PPUSH
12013: PPUSH
12014: PPUSH
12015: PPUSH
12016: PPUSH
12017: PPUSH
12018: PPUSH
12019: PPUSH
12020: PPUSH
12021: PPUSH
// result := false ;
12022: LD_ADDR_VAR 0 3
12026: PUSH
12027: LD_INT 0
12029: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12030: LD_VAR 0 1
12034: NOT
12035: PUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 266
12045: PUSH
12046: LD_INT 32
12048: PUSH
12049: LD_INT 33
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: IN
12056: NOT
12057: OR
12058: IFFALSE 12062
// exit ;
12060: GO 13171
// nat := GetNation ( tower ) ;
12062: LD_ADDR_VAR 0 12
12066: PUSH
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 248
12076: ST_TO_ADDR
// side := GetSide ( tower ) ;
12077: LD_ADDR_VAR 0 16
12081: PUSH
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 255
12091: ST_TO_ADDR
// x := GetX ( tower ) ;
12092: LD_ADDR_VAR 0 10
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 250
12106: ST_TO_ADDR
// y := GetY ( tower ) ;
12107: LD_ADDR_VAR 0 11
12111: PUSH
12112: LD_VAR 0 1
12116: PPUSH
12117: CALL_OW 251
12121: ST_TO_ADDR
// if not x or not y then
12122: LD_VAR 0 10
12126: NOT
12127: PUSH
12128: LD_VAR 0 11
12132: NOT
12133: OR
12134: IFFALSE 12138
// exit ;
12136: GO 13171
// weapon := 0 ;
12138: LD_ADDR_VAR 0 18
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// fac_list := [ ] ;
12146: LD_ADDR_VAR 0 17
12150: PUSH
12151: EMPTY
12152: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12153: LD_ADDR_VAR 0 6
12157: PUSH
12158: LD_VAR 0 1
12162: PPUSH
12163: CALL_OW 274
12167: PPUSH
12168: LD_VAR 0 2
12172: PPUSH
12173: LD_INT 0
12175: PPUSH
12176: CALL 9742 0 3
12180: PPUSH
12181: LD_INT 30
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 72
12195: ST_TO_ADDR
// if not factories then
12196: LD_VAR 0 6
12200: NOT
12201: IFFALSE 12205
// exit ;
12203: GO 13171
// for i in factories do
12205: LD_ADDR_VAR 0 8
12209: PUSH
12210: LD_VAR 0 6
12214: PUSH
12215: FOR_IN
12216: IFFALSE 12241
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12218: LD_ADDR_VAR 0 17
12222: PUSH
12223: LD_VAR 0 17
12227: PUSH
12228: LD_VAR 0 8
12232: PPUSH
12233: CALL_OW 478
12237: UNION
12238: ST_TO_ADDR
12239: GO 12215
12241: POP
12242: POP
// if not fac_list then
12243: LD_VAR 0 17
12247: NOT
12248: IFFALSE 12252
// exit ;
12250: GO 13171
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12252: LD_ADDR_VAR 0 5
12256: PUSH
12257: LD_INT 4
12259: PUSH
12260: LD_INT 5
12262: PUSH
12263: LD_INT 9
12265: PUSH
12266: LD_INT 10
12268: PUSH
12269: LD_INT 6
12271: PUSH
12272: LD_INT 7
12274: PUSH
12275: LD_INT 11
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 27
12289: PUSH
12290: LD_INT 28
12292: PUSH
12293: LD_INT 26
12295: PUSH
12296: LD_INT 30
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 43
12307: PUSH
12308: LD_INT 44
12310: PUSH
12311: LD_INT 46
12313: PUSH
12314: LD_INT 45
12316: PUSH
12317: LD_INT 47
12319: PUSH
12320: LD_INT 49
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: PUSH
12336: LD_VAR 0 12
12340: ARRAY
12341: ST_TO_ADDR
// list := list isect fac_list ;
12342: LD_ADDR_VAR 0 5
12346: PUSH
12347: LD_VAR 0 5
12351: PUSH
12352: LD_VAR 0 17
12356: ISECT
12357: ST_TO_ADDR
// if not list then
12358: LD_VAR 0 5
12362: NOT
12363: IFFALSE 12367
// exit ;
12365: GO 13171
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12367: LD_VAR 0 12
12371: PUSH
12372: LD_INT 3
12374: EQUAL
12375: PUSH
12376: LD_INT 49
12378: PUSH
12379: LD_VAR 0 5
12383: IN
12384: AND
12385: PUSH
12386: LD_INT 31
12388: PPUSH
12389: LD_VAR 0 16
12393: PPUSH
12394: CALL_OW 321
12398: PUSH
12399: LD_INT 2
12401: EQUAL
12402: AND
12403: IFFALSE 12463
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12405: LD_INT 22
12407: PUSH
12408: LD_VAR 0 16
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 35
12419: PUSH
12420: LD_INT 49
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 91
12429: PUSH
12430: LD_VAR 0 1
12434: PUSH
12435: LD_INT 10
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 69
12452: NOT
12453: IFFALSE 12463
// weapon := ru_time_lapser ;
12455: LD_ADDR_VAR 0 18
12459: PUSH
12460: LD_INT 49
12462: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12463: LD_VAR 0 12
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: LD_INT 2
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: IN
12478: PUSH
12479: LD_INT 11
12481: PUSH
12482: LD_VAR 0 5
12486: IN
12487: PUSH
12488: LD_INT 30
12490: PUSH
12491: LD_VAR 0 5
12495: IN
12496: OR
12497: AND
12498: PUSH
12499: LD_INT 6
12501: PPUSH
12502: LD_VAR 0 16
12506: PPUSH
12507: CALL_OW 321
12511: PUSH
12512: LD_INT 2
12514: EQUAL
12515: AND
12516: IFFALSE 12681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12518: LD_INT 22
12520: PUSH
12521: LD_VAR 0 16
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: LD_INT 35
12535: PUSH
12536: LD_INT 11
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 35
12545: PUSH
12546: LD_INT 30
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 91
12560: PUSH
12561: LD_VAR 0 1
12565: PUSH
12566: LD_INT 18
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: PPUSH
12579: CALL_OW 69
12583: NOT
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_VAR 0 16
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: LD_INT 30
12602: PUSH
12603: LD_INT 32
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 33
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 91
12627: PUSH
12628: LD_VAR 0 1
12632: PUSH
12633: LD_INT 12
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: PPUSH
12649: CALL_OW 69
12653: PUSH
12654: LD_INT 2
12656: GREATER
12657: AND
12658: IFFALSE 12681
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12660: LD_ADDR_VAR 0 18
12664: PUSH
12665: LD_INT 11
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_VAR 0 12
12679: ARRAY
12680: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12681: LD_VAR 0 18
12685: NOT
12686: PUSH
12687: LD_INT 40
12689: PPUSH
12690: LD_VAR 0 16
12694: PPUSH
12695: CALL_OW 321
12699: PUSH
12700: LD_INT 2
12702: EQUAL
12703: AND
12704: PUSH
12705: LD_INT 7
12707: PUSH
12708: LD_VAR 0 5
12712: IN
12713: PUSH
12714: LD_INT 28
12716: PUSH
12717: LD_VAR 0 5
12721: IN
12722: OR
12723: PUSH
12724: LD_INT 45
12726: PUSH
12727: LD_VAR 0 5
12731: IN
12732: OR
12733: AND
12734: IFFALSE 12988
// begin hex := GetHexInfo ( x , y ) ;
12736: LD_ADDR_VAR 0 4
12740: PUSH
12741: LD_VAR 0 10
12745: PPUSH
12746: LD_VAR 0 11
12750: PPUSH
12751: CALL_OW 546
12755: ST_TO_ADDR
// if hex [ 1 ] then
12756: LD_VAR 0 4
12760: PUSH
12761: LD_INT 1
12763: ARRAY
12764: IFFALSE 12768
// exit ;
12766: GO 13171
// height := hex [ 2 ] ;
12768: LD_ADDR_VAR 0 15
12772: PUSH
12773: LD_VAR 0 4
12777: PUSH
12778: LD_INT 2
12780: ARRAY
12781: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12782: LD_ADDR_VAR 0 14
12786: PUSH
12787: LD_INT 0
12789: PUSH
12790: LD_INT 2
12792: PUSH
12793: LD_INT 3
12795: PUSH
12796: LD_INT 5
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: ST_TO_ADDR
// for i in tmp do
12805: LD_ADDR_VAR 0 8
12809: PUSH
12810: LD_VAR 0 14
12814: PUSH
12815: FOR_IN
12816: IFFALSE 12986
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12818: LD_ADDR_VAR 0 9
12822: PUSH
12823: LD_VAR 0 10
12827: PPUSH
12828: LD_VAR 0 8
12832: PPUSH
12833: LD_INT 5
12835: PPUSH
12836: CALL_OW 272
12840: PUSH
12841: LD_VAR 0 11
12845: PPUSH
12846: LD_VAR 0 8
12850: PPUSH
12851: LD_INT 5
12853: PPUSH
12854: CALL_OW 273
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12863: LD_VAR 0 9
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: PPUSH
12872: LD_VAR 0 9
12876: PUSH
12877: LD_INT 2
12879: ARRAY
12880: PPUSH
12881: CALL_OW 488
12885: IFFALSE 12984
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12887: LD_ADDR_VAR 0 4
12891: PUSH
12892: LD_VAR 0 9
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: LD_VAR 0 9
12905: PUSH
12906: LD_INT 2
12908: ARRAY
12909: PPUSH
12910: CALL_OW 546
12914: ST_TO_ADDR
// if hex [ 1 ] then
12915: LD_VAR 0 4
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: IFFALSE 12927
// continue ;
12925: GO 12815
// h := hex [ 2 ] ;
12927: LD_ADDR_VAR 0 13
12931: PUSH
12932: LD_VAR 0 4
12936: PUSH
12937: LD_INT 2
12939: ARRAY
12940: ST_TO_ADDR
// if h + 7 < height then
12941: LD_VAR 0 13
12945: PUSH
12946: LD_INT 7
12948: PLUS
12949: PUSH
12950: LD_VAR 0 15
12954: LESS
12955: IFFALSE 12984
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12957: LD_ADDR_VAR 0 18
12961: PUSH
12962: LD_INT 7
12964: PUSH
12965: LD_INT 28
12967: PUSH
12968: LD_INT 45
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: LD_VAR 0 12
12980: ARRAY
12981: ST_TO_ADDR
// break ;
12982: GO 12986
// end ; end ; end ;
12984: GO 12815
12986: POP
12987: POP
// end ; if not weapon then
12988: LD_VAR 0 18
12992: NOT
12993: IFFALSE 13053
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12995: LD_ADDR_VAR 0 5
12999: PUSH
13000: LD_VAR 0 5
13004: PUSH
13005: LD_INT 11
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: LD_INT 49
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: DIFF
13019: ST_TO_ADDR
// if not list then
13020: LD_VAR 0 5
13024: NOT
13025: IFFALSE 13029
// exit ;
13027: GO 13171
// weapon := list [ rand ( 1 , list ) ] ;
13029: LD_ADDR_VAR 0 18
13033: PUSH
13034: LD_VAR 0 5
13038: PUSH
13039: LD_INT 1
13041: PPUSH
13042: LD_VAR 0 5
13046: PPUSH
13047: CALL_OW 12
13051: ARRAY
13052: ST_TO_ADDR
// end ; if weapon then
13053: LD_VAR 0 18
13057: IFFALSE 13171
// begin tmp := CostOfWeapon ( weapon ) ;
13059: LD_ADDR_VAR 0 14
13063: PUSH
13064: LD_VAR 0 18
13068: PPUSH
13069: CALL_OW 451
13073: ST_TO_ADDR
// j := GetBase ( tower ) ;
13074: LD_ADDR_VAR 0 9
13078: PUSH
13079: LD_VAR 0 1
13083: PPUSH
13084: CALL_OW 274
13088: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13089: LD_VAR 0 9
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 275
13101: PUSH
13102: LD_VAR 0 14
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: GREATEREQUAL
13111: PUSH
13112: LD_VAR 0 9
13116: PPUSH
13117: LD_INT 2
13119: PPUSH
13120: CALL_OW 275
13124: PUSH
13125: LD_VAR 0 14
13129: PUSH
13130: LD_INT 2
13132: ARRAY
13133: GREATEREQUAL
13134: AND
13135: PUSH
13136: LD_VAR 0 9
13140: PPUSH
13141: LD_INT 3
13143: PPUSH
13144: CALL_OW 275
13148: PUSH
13149: LD_VAR 0 14
13153: PUSH
13154: LD_INT 3
13156: ARRAY
13157: GREATEREQUAL
13158: AND
13159: IFFALSE 13171
// result := weapon ;
13161: LD_ADDR_VAR 0 3
13165: PUSH
13166: LD_VAR 0 18
13170: ST_TO_ADDR
// end ; end ;
13171: LD_VAR 0 3
13175: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
// result := true ;
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// if array1 = array2 then
13188: LD_VAR 0 1
13192: PUSH
13193: LD_VAR 0 2
13197: EQUAL
13198: IFFALSE 13258
// begin for i = 1 to array1 do
13200: LD_ADDR_VAR 0 4
13204: PUSH
13205: DOUBLE
13206: LD_INT 1
13208: DEC
13209: ST_TO_ADDR
13210: LD_VAR 0 1
13214: PUSH
13215: FOR_TO
13216: IFFALSE 13254
// if array1 [ i ] <> array2 [ i ] then
13218: LD_VAR 0 1
13222: PUSH
13223: LD_VAR 0 4
13227: ARRAY
13228: PUSH
13229: LD_VAR 0 2
13233: PUSH
13234: LD_VAR 0 4
13238: ARRAY
13239: NONEQUAL
13240: IFFALSE 13252
// begin result := false ;
13242: LD_ADDR_VAR 0 3
13246: PUSH
13247: LD_INT 0
13249: ST_TO_ADDR
// break ;
13250: GO 13254
// end ;
13252: GO 13215
13254: POP
13255: POP
// end else
13256: GO 13266
// result := false ;
13258: LD_ADDR_VAR 0 3
13262: PUSH
13263: LD_INT 0
13265: ST_TO_ADDR
// end ;
13266: LD_VAR 0 3
13270: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13271: LD_INT 0
13273: PPUSH
13274: PPUSH
// if not array1 or not array2 then
13275: LD_VAR 0 1
13279: NOT
13280: PUSH
13281: LD_VAR 0 2
13285: NOT
13286: OR
13287: IFFALSE 13291
// exit ;
13289: GO 13355
// result := true ;
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// for i = 1 to array1 do
13299: LD_ADDR_VAR 0 4
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_VAR 0 1
13313: PUSH
13314: FOR_TO
13315: IFFALSE 13353
// if array1 [ i ] <> array2 [ i ] then
13317: LD_VAR 0 1
13321: PUSH
13322: LD_VAR 0 4
13326: ARRAY
13327: PUSH
13328: LD_VAR 0 2
13332: PUSH
13333: LD_VAR 0 4
13337: ARRAY
13338: NONEQUAL
13339: IFFALSE 13351
// begin result := false ;
13341: LD_ADDR_VAR 0 3
13345: PUSH
13346: LD_INT 0
13348: ST_TO_ADDR
// break ;
13349: GO 13353
// end ;
13351: GO 13314
13353: POP
13354: POP
// end ;
13355: LD_VAR 0 3
13359: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13360: LD_INT 0
13362: PPUSH
13363: PPUSH
13364: PPUSH
// pom := GetBase ( fac ) ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 274
13379: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13380: LD_ADDR_VAR 0 4
13384: PUSH
13385: LD_VAR 0 2
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: LD_VAR 0 2
13398: PUSH
13399: LD_INT 2
13401: ARRAY
13402: PPUSH
13403: LD_VAR 0 2
13407: PUSH
13408: LD_INT 3
13410: ARRAY
13411: PPUSH
13412: LD_VAR 0 2
13416: PUSH
13417: LD_INT 4
13419: ARRAY
13420: PPUSH
13421: CALL_OW 449
13425: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13426: LD_ADDR_VAR 0 3
13430: PUSH
13431: LD_VAR 0 5
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: CALL_OW 275
13443: PUSH
13444: LD_VAR 0 4
13448: PUSH
13449: LD_INT 1
13451: ARRAY
13452: GREATEREQUAL
13453: PUSH
13454: LD_VAR 0 5
13458: PPUSH
13459: LD_INT 2
13461: PPUSH
13462: CALL_OW 275
13466: PUSH
13467: LD_VAR 0 4
13471: PUSH
13472: LD_INT 2
13474: ARRAY
13475: GREATEREQUAL
13476: AND
13477: PUSH
13478: LD_VAR 0 5
13482: PPUSH
13483: LD_INT 3
13485: PPUSH
13486: CALL_OW 275
13490: PUSH
13491: LD_VAR 0 4
13495: PUSH
13496: LD_INT 3
13498: ARRAY
13499: GREATEREQUAL
13500: AND
13501: ST_TO_ADDR
// end ;
13502: LD_VAR 0 3
13506: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13507: LD_INT 0
13509: PPUSH
13510: PPUSH
13511: PPUSH
13512: PPUSH
// pom := GetBase ( building ) ;
13513: LD_ADDR_VAR 0 3
13517: PUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 274
13527: ST_TO_ADDR
// if not pom then
13528: LD_VAR 0 3
13532: NOT
13533: IFFALSE 13537
// exit ;
13535: GO 13707
// btype := GetBType ( building ) ;
13537: LD_ADDR_VAR 0 5
13541: PUSH
13542: LD_VAR 0 1
13546: PPUSH
13547: CALL_OW 266
13551: ST_TO_ADDR
// if btype = b_armoury then
13552: LD_VAR 0 5
13556: PUSH
13557: LD_INT 4
13559: EQUAL
13560: IFFALSE 13570
// btype := b_barracks ;
13562: LD_ADDR_VAR 0 5
13566: PUSH
13567: LD_INT 5
13569: ST_TO_ADDR
// if btype = b_depot then
13570: LD_VAR 0 5
13574: PUSH
13575: LD_INT 0
13577: EQUAL
13578: IFFALSE 13588
// btype := b_warehouse ;
13580: LD_ADDR_VAR 0 5
13584: PUSH
13585: LD_INT 1
13587: ST_TO_ADDR
// if btype = b_workshop then
13588: LD_VAR 0 5
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: IFFALSE 13606
// btype := b_factory ;
13598: LD_ADDR_VAR 0 5
13602: PUSH
13603: LD_INT 3
13605: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13606: LD_ADDR_VAR 0 4
13610: PUSH
13611: LD_VAR 0 5
13615: PPUSH
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 248
13625: PPUSH
13626: CALL_OW 450
13630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_VAR 0 3
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 275
13648: PUSH
13649: LD_VAR 0 4
13653: PUSH
13654: LD_INT 1
13656: ARRAY
13657: GREATEREQUAL
13658: PUSH
13659: LD_VAR 0 3
13663: PPUSH
13664: LD_INT 2
13666: PPUSH
13667: CALL_OW 275
13671: PUSH
13672: LD_VAR 0 4
13676: PUSH
13677: LD_INT 2
13679: ARRAY
13680: GREATEREQUAL
13681: AND
13682: PUSH
13683: LD_VAR 0 3
13687: PPUSH
13688: LD_INT 3
13690: PPUSH
13691: CALL_OW 275
13695: PUSH
13696: LD_VAR 0 4
13700: PUSH
13701: LD_INT 3
13703: ARRAY
13704: GREATEREQUAL
13705: AND
13706: ST_TO_ADDR
// end ;
13707: LD_VAR 0 2
13711: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13712: LD_INT 0
13714: PPUSH
13715: PPUSH
13716: PPUSH
// pom := GetBase ( building ) ;
13717: LD_ADDR_VAR 0 4
13721: PUSH
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 274
13731: ST_TO_ADDR
// if not pom then
13732: LD_VAR 0 4
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13842
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13741: LD_ADDR_VAR 0 5
13745: PUSH
13746: LD_VAR 0 2
13750: PPUSH
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 248
13760: PPUSH
13761: CALL_OW 450
13765: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13766: LD_ADDR_VAR 0 3
13770: PUSH
13771: LD_VAR 0 4
13775: PPUSH
13776: LD_INT 1
13778: PPUSH
13779: CALL_OW 275
13783: PUSH
13784: LD_VAR 0 5
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: GREATEREQUAL
13793: PUSH
13794: LD_VAR 0 4
13798: PPUSH
13799: LD_INT 2
13801: PPUSH
13802: CALL_OW 275
13806: PUSH
13807: LD_VAR 0 5
13811: PUSH
13812: LD_INT 2
13814: ARRAY
13815: GREATEREQUAL
13816: AND
13817: PUSH
13818: LD_VAR 0 4
13822: PPUSH
13823: LD_INT 3
13825: PPUSH
13826: CALL_OW 275
13830: PUSH
13831: LD_VAR 0 5
13835: PUSH
13836: LD_INT 3
13838: ARRAY
13839: GREATEREQUAL
13840: AND
13841: ST_TO_ADDR
// end ;
13842: LD_VAR 0 3
13846: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// result := false ;
13860: LD_ADDR_VAR 0 8
13864: PUSH
13865: LD_INT 0
13867: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13868: LD_VAR 0 5
13872: NOT
13873: PUSH
13874: LD_VAR 0 1
13878: NOT
13879: OR
13880: PUSH
13881: LD_VAR 0 2
13885: NOT
13886: OR
13887: PUSH
13888: LD_VAR 0 3
13892: NOT
13893: OR
13894: IFFALSE 13898
// exit ;
13896: GO 14712
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13898: LD_ADDR_VAR 0 14
13902: PUSH
13903: LD_VAR 0 1
13907: PPUSH
13908: LD_VAR 0 2
13912: PPUSH
13913: LD_VAR 0 3
13917: PPUSH
13918: LD_VAR 0 4
13922: PPUSH
13923: LD_VAR 0 5
13927: PUSH
13928: LD_INT 1
13930: ARRAY
13931: PPUSH
13932: CALL_OW 248
13936: PPUSH
13937: LD_INT 0
13939: PPUSH
13940: CALL 15965 0 6
13944: ST_TO_ADDR
// if not hexes then
13945: LD_VAR 0 14
13949: NOT
13950: IFFALSE 13954
// exit ;
13952: GO 14712
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13954: LD_ADDR_VAR 0 17
13958: PUSH
13959: LD_VAR 0 5
13963: PPUSH
13964: LD_INT 22
13966: PUSH
13967: LD_VAR 0 13
13971: PPUSH
13972: CALL_OW 255
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 30
13986: PUSH
13987: LD_INT 0
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 30
13996: PUSH
13997: LD_INT 1
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 72
14017: ST_TO_ADDR
// for i = 1 to hexes do
14018: LD_ADDR_VAR 0 9
14022: PUSH
14023: DOUBLE
14024: LD_INT 1
14026: DEC
14027: ST_TO_ADDR
14028: LD_VAR 0 14
14032: PUSH
14033: FOR_TO
14034: IFFALSE 14710
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14036: LD_ADDR_VAR 0 13
14040: PUSH
14041: LD_VAR 0 14
14045: PUSH
14046: LD_VAR 0 9
14050: ARRAY
14051: PUSH
14052: LD_INT 1
14054: ARRAY
14055: PPUSH
14056: LD_VAR 0 14
14060: PUSH
14061: LD_VAR 0 9
14065: ARRAY
14066: PUSH
14067: LD_INT 2
14069: ARRAY
14070: PPUSH
14071: CALL_OW 428
14075: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14076: LD_VAR 0 14
14080: PUSH
14081: LD_VAR 0 9
14085: ARRAY
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_VAR 0 14
14095: PUSH
14096: LD_VAR 0 9
14100: ARRAY
14101: PUSH
14102: LD_INT 2
14104: ARRAY
14105: PPUSH
14106: CALL_OW 351
14110: PUSH
14111: LD_VAR 0 14
14115: PUSH
14116: LD_VAR 0 9
14120: ARRAY
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 14
14130: PUSH
14131: LD_VAR 0 9
14135: ARRAY
14136: PUSH
14137: LD_INT 2
14139: ARRAY
14140: PPUSH
14141: CALL_OW 488
14145: NOT
14146: OR
14147: PUSH
14148: LD_VAR 0 13
14152: PPUSH
14153: CALL_OW 247
14157: PUSH
14158: LD_INT 3
14160: EQUAL
14161: OR
14162: IFFALSE 14168
// exit ;
14164: POP
14165: POP
14166: GO 14712
// if not tmp then
14168: LD_VAR 0 13
14172: NOT
14173: IFFALSE 14177
// continue ;
14175: GO 14033
// result := true ;
14177: LD_ADDR_VAR 0 8
14181: PUSH
14182: LD_INT 1
14184: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14185: LD_VAR 0 6
14189: PUSH
14190: LD_VAR 0 13
14194: PPUSH
14195: CALL_OW 247
14199: PUSH
14200: LD_INT 2
14202: EQUAL
14203: AND
14204: PUSH
14205: LD_VAR 0 13
14209: PPUSH
14210: CALL_OW 263
14214: PUSH
14215: LD_INT 1
14217: EQUAL
14218: AND
14219: IFFALSE 14383
// begin if IsDrivenBy ( tmp ) then
14221: LD_VAR 0 13
14225: PPUSH
14226: CALL_OW 311
14230: IFFALSE 14234
// continue ;
14232: GO 14033
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14234: LD_VAR 0 6
14238: PPUSH
14239: LD_INT 3
14241: PUSH
14242: LD_INT 60
14244: PUSH
14245: EMPTY
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: LD_INT 55
14257: PUSH
14258: EMPTY
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 72
14273: IFFALSE 14381
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14275: LD_ADDR_VAR 0 18
14279: PUSH
14280: LD_VAR 0 6
14284: PPUSH
14285: LD_INT 3
14287: PUSH
14288: LD_INT 60
14290: PUSH
14291: EMPTY
14292: LIST
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 3
14300: PUSH
14301: LD_INT 55
14303: PUSH
14304: EMPTY
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PPUSH
14315: CALL_OW 72
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: ST_TO_ADDR
// if IsInUnit ( driver ) then
14324: LD_VAR 0 18
14328: PPUSH
14329: CALL_OW 310
14333: IFFALSE 14344
// ComExit ( driver ) ;
14335: LD_VAR 0 18
14339: PPUSH
14340: CALL 39757 0 1
// AddComEnterUnit ( driver , tmp ) ;
14344: LD_VAR 0 18
14348: PPUSH
14349: LD_VAR 0 13
14353: PPUSH
14354: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14358: LD_VAR 0 18
14362: PPUSH
14363: LD_VAR 0 7
14367: PPUSH
14368: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14372: LD_VAR 0 18
14376: PPUSH
14377: CALL_OW 181
// end ; continue ;
14381: GO 14033
// end ; if not cleaners or not tmp in cleaners then
14383: LD_VAR 0 6
14387: NOT
14388: PUSH
14389: LD_VAR 0 13
14393: PUSH
14394: LD_VAR 0 6
14398: IN
14399: NOT
14400: OR
14401: IFFALSE 14708
// begin if dep then
14403: LD_VAR 0 17
14407: IFFALSE 14543
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14409: LD_ADDR_VAR 0 16
14413: PUSH
14414: LD_VAR 0 17
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: PPUSH
14423: CALL_OW 250
14427: PPUSH
14428: LD_VAR 0 17
14432: PUSH
14433: LD_INT 1
14435: ARRAY
14436: PPUSH
14437: CALL_OW 254
14441: PPUSH
14442: LD_INT 5
14444: PPUSH
14445: CALL_OW 272
14449: PUSH
14450: LD_VAR 0 17
14454: PUSH
14455: LD_INT 1
14457: ARRAY
14458: PPUSH
14459: CALL_OW 251
14463: PPUSH
14464: LD_VAR 0 17
14468: PUSH
14469: LD_INT 1
14471: ARRAY
14472: PPUSH
14473: CALL_OW 254
14477: PPUSH
14478: LD_INT 5
14480: PPUSH
14481: CALL_OW 273
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14490: LD_VAR 0 16
14494: PUSH
14495: LD_INT 1
14497: ARRAY
14498: PPUSH
14499: LD_VAR 0 16
14503: PUSH
14504: LD_INT 2
14506: ARRAY
14507: PPUSH
14508: CALL_OW 488
14512: IFFALSE 14543
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14514: LD_VAR 0 13
14518: PPUSH
14519: LD_VAR 0 16
14523: PUSH
14524: LD_INT 1
14526: ARRAY
14527: PPUSH
14528: LD_VAR 0 16
14532: PUSH
14533: LD_INT 2
14535: ARRAY
14536: PPUSH
14537: CALL_OW 111
// continue ;
14541: GO 14033
// end ; end ; r := GetDir ( tmp ) ;
14543: LD_ADDR_VAR 0 15
14547: PUSH
14548: LD_VAR 0 13
14552: PPUSH
14553: CALL_OW 254
14557: ST_TO_ADDR
// if r = 5 then
14558: LD_VAR 0 15
14562: PUSH
14563: LD_INT 5
14565: EQUAL
14566: IFFALSE 14576
// r := 0 ;
14568: LD_ADDR_VAR 0 15
14572: PUSH
14573: LD_INT 0
14575: ST_TO_ADDR
// for j = r to 5 do
14576: LD_ADDR_VAR 0 10
14580: PUSH
14581: DOUBLE
14582: LD_VAR 0 15
14586: DEC
14587: ST_TO_ADDR
14588: LD_INT 5
14590: PUSH
14591: FOR_TO
14592: IFFALSE 14706
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14594: LD_ADDR_VAR 0 11
14598: PUSH
14599: LD_VAR 0 13
14603: PPUSH
14604: CALL_OW 250
14608: PPUSH
14609: LD_VAR 0 10
14613: PPUSH
14614: LD_INT 2
14616: PPUSH
14617: CALL_OW 272
14621: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14622: LD_ADDR_VAR 0 12
14626: PUSH
14627: LD_VAR 0 13
14631: PPUSH
14632: CALL_OW 251
14636: PPUSH
14637: LD_VAR 0 10
14641: PPUSH
14642: LD_INT 2
14644: PPUSH
14645: CALL_OW 273
14649: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14650: LD_VAR 0 11
14654: PPUSH
14655: LD_VAR 0 12
14659: PPUSH
14660: CALL_OW 488
14664: PUSH
14665: LD_VAR 0 11
14669: PPUSH
14670: LD_VAR 0 12
14674: PPUSH
14675: CALL_OW 428
14679: NOT
14680: AND
14681: IFFALSE 14704
// begin ComMoveXY ( tmp , _x , _y ) ;
14683: LD_VAR 0 13
14687: PPUSH
14688: LD_VAR 0 11
14692: PPUSH
14693: LD_VAR 0 12
14697: PPUSH
14698: CALL_OW 111
// break ;
14702: GO 14706
// end ; end ;
14704: GO 14591
14706: POP
14707: POP
// end ; end ;
14708: GO 14033
14710: POP
14711: POP
// end ;
14712: LD_VAR 0 8
14716: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14717: LD_INT 0
14719: PPUSH
// result := true ;
14720: LD_ADDR_VAR 0 3
14724: PUSH
14725: LD_INT 1
14727: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14728: LD_VAR 0 2
14732: PUSH
14733: LD_INT 24
14735: DOUBLE
14736: EQUAL
14737: IFTRUE 14747
14739: LD_INT 33
14741: DOUBLE
14742: EQUAL
14743: IFTRUE 14747
14745: GO 14772
14747: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14748: LD_ADDR_VAR 0 3
14752: PUSH
14753: LD_INT 32
14755: PPUSH
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 321
14765: PUSH
14766: LD_INT 2
14768: EQUAL
14769: ST_TO_ADDR
14770: GO 15088
14772: LD_INT 20
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14805
14780: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_INT 6
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 321
14798: PUSH
14799: LD_INT 2
14801: EQUAL
14802: ST_TO_ADDR
14803: GO 15088
14805: LD_INT 22
14807: DOUBLE
14808: EQUAL
14809: IFTRUE 14819
14811: LD_INT 36
14813: DOUBLE
14814: EQUAL
14815: IFTRUE 14819
14817: GO 14844
14819: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14820: LD_ADDR_VAR 0 3
14824: PUSH
14825: LD_INT 15
14827: PPUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 321
14837: PUSH
14838: LD_INT 2
14840: EQUAL
14841: ST_TO_ADDR
14842: GO 15088
14844: LD_INT 30
14846: DOUBLE
14847: EQUAL
14848: IFTRUE 14852
14850: GO 14877
14852: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14853: LD_ADDR_VAR 0 3
14857: PUSH
14858: LD_INT 20
14860: PPUSH
14861: LD_VAR 0 1
14865: PPUSH
14866: CALL_OW 321
14870: PUSH
14871: LD_INT 2
14873: EQUAL
14874: ST_TO_ADDR
14875: GO 15088
14877: LD_INT 28
14879: DOUBLE
14880: EQUAL
14881: IFTRUE 14891
14883: LD_INT 21
14885: DOUBLE
14886: EQUAL
14887: IFTRUE 14891
14889: GO 14916
14891: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_INT 21
14899: PPUSH
14900: LD_VAR 0 1
14904: PPUSH
14905: CALL_OW 321
14909: PUSH
14910: LD_INT 2
14912: EQUAL
14913: ST_TO_ADDR
14914: GO 15088
14916: LD_INT 16
14918: DOUBLE
14919: EQUAL
14920: IFTRUE 14924
14922: GO 14949
14924: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14925: LD_ADDR_VAR 0 3
14929: PUSH
14930: LD_INT 84
14932: PPUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 321
14942: PUSH
14943: LD_INT 2
14945: EQUAL
14946: ST_TO_ADDR
14947: GO 15088
14949: LD_INT 19
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14963
14955: LD_INT 23
14957: DOUBLE
14958: EQUAL
14959: IFTRUE 14963
14961: GO 14988
14963: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14964: LD_ADDR_VAR 0 3
14968: PUSH
14969: LD_INT 83
14971: PPUSH
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 321
14981: PUSH
14982: LD_INT 2
14984: EQUAL
14985: ST_TO_ADDR
14986: GO 15088
14988: LD_INT 17
14990: DOUBLE
14991: EQUAL
14992: IFTRUE 14996
14994: GO 15021
14996: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14997: LD_ADDR_VAR 0 3
15001: PUSH
15002: LD_INT 39
15004: PPUSH
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 321
15014: PUSH
15015: LD_INT 2
15017: EQUAL
15018: ST_TO_ADDR
15019: GO 15088
15021: LD_INT 18
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15054
15029: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15030: LD_ADDR_VAR 0 3
15034: PUSH
15035: LD_INT 40
15037: PPUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL_OW 321
15047: PUSH
15048: LD_INT 2
15050: EQUAL
15051: ST_TO_ADDR
15052: GO 15088
15054: LD_INT 27
15056: DOUBLE
15057: EQUAL
15058: IFTRUE 15062
15060: GO 15087
15062: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15063: LD_ADDR_VAR 0 3
15067: PUSH
15068: LD_INT 35
15070: PPUSH
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 321
15080: PUSH
15081: LD_INT 2
15083: EQUAL
15084: ST_TO_ADDR
15085: GO 15088
15087: POP
// end ;
15088: LD_VAR 0 3
15092: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15093: LD_INT 0
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
// result := false ;
15106: LD_ADDR_VAR 0 6
15110: PUSH
15111: LD_INT 0
15113: ST_TO_ADDR
// if btype = b_depot then
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 0
15121: EQUAL
15122: IFFALSE 15134
// begin result := true ;
15124: LD_ADDR_VAR 0 6
15128: PUSH
15129: LD_INT 1
15131: ST_TO_ADDR
// exit ;
15132: GO 15960
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15134: LD_VAR 0 1
15138: NOT
15139: PUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL_OW 266
15149: PUSH
15150: LD_INT 0
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: IN
15160: NOT
15161: OR
15162: PUSH
15163: LD_VAR 0 2
15167: NOT
15168: OR
15169: PUSH
15170: LD_VAR 0 5
15174: PUSH
15175: LD_INT 0
15177: PUSH
15178: LD_INT 1
15180: PUSH
15181: LD_INT 2
15183: PUSH
15184: LD_INT 3
15186: PUSH
15187: LD_INT 4
15189: PUSH
15190: LD_INT 5
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: IN
15201: NOT
15202: OR
15203: PUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: LD_VAR 0 4
15213: PPUSH
15214: CALL_OW 488
15218: NOT
15219: OR
15220: IFFALSE 15224
// exit ;
15222: GO 15960
// side := GetSide ( depot ) ;
15224: LD_ADDR_VAR 0 9
15228: PUSH
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 255
15238: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15239: LD_VAR 0 9
15243: PPUSH
15244: LD_VAR 0 2
15248: PPUSH
15249: CALL 14717 0 2
15253: NOT
15254: IFFALSE 15258
// exit ;
15256: GO 15960
// pom := GetBase ( depot ) ;
15258: LD_ADDR_VAR 0 10
15262: PUSH
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL_OW 274
15272: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15273: LD_ADDR_VAR 0 11
15277: PUSH
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_VAR 0 1
15287: PPUSH
15288: CALL_OW 248
15292: PPUSH
15293: CALL_OW 450
15297: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15298: LD_VAR 0 10
15302: PPUSH
15303: LD_INT 1
15305: PPUSH
15306: CALL_OW 275
15310: PUSH
15311: LD_VAR 0 11
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: GREATEREQUAL
15320: PUSH
15321: LD_VAR 0 10
15325: PPUSH
15326: LD_INT 2
15328: PPUSH
15329: CALL_OW 275
15333: PUSH
15334: LD_VAR 0 11
15338: PUSH
15339: LD_INT 2
15341: ARRAY
15342: GREATEREQUAL
15343: AND
15344: PUSH
15345: LD_VAR 0 10
15349: PPUSH
15350: LD_INT 3
15352: PPUSH
15353: CALL_OW 275
15357: PUSH
15358: LD_VAR 0 11
15362: PUSH
15363: LD_INT 3
15365: ARRAY
15366: GREATEREQUAL
15367: AND
15368: NOT
15369: IFFALSE 15373
// exit ;
15371: GO 15960
// if GetBType ( depot ) = b_depot then
15373: LD_VAR 0 1
15377: PPUSH
15378: CALL_OW 266
15382: PUSH
15383: LD_INT 0
15385: EQUAL
15386: IFFALSE 15398
// dist := 28 else
15388: LD_ADDR_VAR 0 14
15392: PUSH
15393: LD_INT 28
15395: ST_TO_ADDR
15396: GO 15406
// dist := 36 ;
15398: LD_ADDR_VAR 0 14
15402: PUSH
15403: LD_INT 36
15405: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15406: LD_VAR 0 1
15410: PPUSH
15411: LD_VAR 0 3
15415: PPUSH
15416: LD_VAR 0 4
15420: PPUSH
15421: CALL_OW 297
15425: PUSH
15426: LD_VAR 0 14
15430: GREATER
15431: IFFALSE 15435
// exit ;
15433: GO 15960
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15435: LD_ADDR_VAR 0 12
15439: PUSH
15440: LD_VAR 0 2
15444: PPUSH
15445: LD_VAR 0 3
15449: PPUSH
15450: LD_VAR 0 4
15454: PPUSH
15455: LD_VAR 0 5
15459: PPUSH
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 248
15469: PPUSH
15470: LD_INT 0
15472: PPUSH
15473: CALL 15965 0 6
15477: ST_TO_ADDR
// if not hexes then
15478: LD_VAR 0 12
15482: NOT
15483: IFFALSE 15487
// exit ;
15485: GO 15960
// hex := GetHexInfo ( x , y ) ;
15487: LD_ADDR_VAR 0 15
15491: PUSH
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_VAR 0 4
15501: PPUSH
15502: CALL_OW 546
15506: ST_TO_ADDR
// if hex [ 1 ] then
15507: LD_VAR 0 15
15511: PUSH
15512: LD_INT 1
15514: ARRAY
15515: IFFALSE 15519
// exit ;
15517: GO 15960
// height := hex [ 2 ] ;
15519: LD_ADDR_VAR 0 13
15523: PUSH
15524: LD_VAR 0 15
15528: PUSH
15529: LD_INT 2
15531: ARRAY
15532: ST_TO_ADDR
// for i = 1 to hexes do
15533: LD_ADDR_VAR 0 7
15537: PUSH
15538: DOUBLE
15539: LD_INT 1
15541: DEC
15542: ST_TO_ADDR
15543: LD_VAR 0 12
15547: PUSH
15548: FOR_TO
15549: IFFALSE 15879
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15551: LD_VAR 0 12
15555: PUSH
15556: LD_VAR 0 7
15560: ARRAY
15561: PUSH
15562: LD_INT 1
15564: ARRAY
15565: PPUSH
15566: LD_VAR 0 12
15570: PUSH
15571: LD_VAR 0 7
15575: ARRAY
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: PPUSH
15581: CALL_OW 488
15585: NOT
15586: PUSH
15587: LD_VAR 0 12
15591: PUSH
15592: LD_VAR 0 7
15596: ARRAY
15597: PUSH
15598: LD_INT 1
15600: ARRAY
15601: PPUSH
15602: LD_VAR 0 12
15606: PUSH
15607: LD_VAR 0 7
15611: ARRAY
15612: PUSH
15613: LD_INT 2
15615: ARRAY
15616: PPUSH
15617: CALL_OW 428
15621: PUSH
15622: LD_INT 0
15624: GREATER
15625: OR
15626: PUSH
15627: LD_VAR 0 12
15631: PUSH
15632: LD_VAR 0 7
15636: ARRAY
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: LD_VAR 0 12
15646: PUSH
15647: LD_VAR 0 7
15651: ARRAY
15652: PUSH
15653: LD_INT 2
15655: ARRAY
15656: PPUSH
15657: CALL_OW 351
15661: OR
15662: IFFALSE 15668
// exit ;
15664: POP
15665: POP
15666: GO 15960
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15668: LD_ADDR_VAR 0 8
15672: PUSH
15673: LD_VAR 0 12
15677: PUSH
15678: LD_VAR 0 7
15682: ARRAY
15683: PUSH
15684: LD_INT 1
15686: ARRAY
15687: PPUSH
15688: LD_VAR 0 12
15692: PUSH
15693: LD_VAR 0 7
15697: ARRAY
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PPUSH
15703: CALL_OW 546
15707: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15708: LD_VAR 0 8
15712: PUSH
15713: LD_INT 1
15715: ARRAY
15716: PUSH
15717: LD_VAR 0 8
15721: PUSH
15722: LD_INT 2
15724: ARRAY
15725: PUSH
15726: LD_VAR 0 13
15730: PUSH
15731: LD_INT 2
15733: PLUS
15734: GREATER
15735: OR
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 2
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 13
15750: PUSH
15751: LD_INT 2
15753: MINUS
15754: LESS
15755: OR
15756: PUSH
15757: LD_VAR 0 8
15761: PUSH
15762: LD_INT 3
15764: ARRAY
15765: PUSH
15766: LD_INT 0
15768: PUSH
15769: LD_INT 8
15771: PUSH
15772: LD_INT 9
15774: PUSH
15775: LD_INT 10
15777: PUSH
15778: LD_INT 11
15780: PUSH
15781: LD_INT 12
15783: PUSH
15784: LD_INT 13
15786: PUSH
15787: LD_INT 16
15789: PUSH
15790: LD_INT 17
15792: PUSH
15793: LD_INT 18
15795: PUSH
15796: LD_INT 19
15798: PUSH
15799: LD_INT 20
15801: PUSH
15802: LD_INT 21
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: IN
15820: NOT
15821: OR
15822: PUSH
15823: LD_VAR 0 8
15827: PUSH
15828: LD_INT 5
15830: ARRAY
15831: NOT
15832: OR
15833: PUSH
15834: LD_VAR 0 8
15838: PUSH
15839: LD_INT 6
15841: ARRAY
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: LD_INT 7
15851: PUSH
15852: LD_INT 9
15854: PUSH
15855: LD_INT 10
15857: PUSH
15858: LD_INT 11
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: IN
15869: NOT
15870: OR
15871: IFFALSE 15877
// exit ;
15873: POP
15874: POP
15875: GO 15960
// end ;
15877: GO 15548
15879: POP
15880: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15881: LD_VAR 0 9
15885: PPUSH
15886: LD_VAR 0 3
15890: PPUSH
15891: LD_VAR 0 4
15895: PPUSH
15896: LD_INT 20
15898: PPUSH
15899: CALL 7883 0 4
15903: PUSH
15904: LD_INT 4
15906: ARRAY
15907: IFFALSE 15911
// exit ;
15909: GO 15960
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15911: LD_VAR 0 2
15915: PUSH
15916: LD_INT 29
15918: PUSH
15919: LD_INT 30
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: IN
15926: PUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_VAR 0 4
15936: PPUSH
15937: LD_VAR 0 9
15941: PPUSH
15942: CALL_OW 440
15946: NOT
15947: AND
15948: IFFALSE 15952
// exit ;
15950: GO 15960
// result := true ;
15952: LD_ADDR_VAR 0 6
15956: PUSH
15957: LD_INT 1
15959: ST_TO_ADDR
// end ;
15960: LD_VAR 0 6
15964: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15965: LD_INT 0
15967: PPUSH
15968: PPUSH
15969: PPUSH
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
15975: PPUSH
15976: PPUSH
15977: PPUSH
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
15982: PPUSH
15983: PPUSH
15984: PPUSH
15985: PPUSH
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
15991: PPUSH
15992: PPUSH
15993: PPUSH
15994: PPUSH
15995: PPUSH
15996: PPUSH
15997: PPUSH
15998: PPUSH
15999: PPUSH
16000: PPUSH
16001: PPUSH
16002: PPUSH
16003: PPUSH
16004: PPUSH
16005: PPUSH
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
16012: PPUSH
16013: PPUSH
16014: PPUSH
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
16021: PPUSH
16022: PPUSH
16023: PPUSH
16024: PPUSH
// result = [ ] ;
16025: LD_ADDR_VAR 0 7
16029: PUSH
16030: EMPTY
16031: ST_TO_ADDR
// temp_list = [ ] ;
16032: LD_ADDR_VAR 0 9
16036: PUSH
16037: EMPTY
16038: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16039: LD_VAR 0 4
16043: PUSH
16044: LD_INT 0
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: LD_INT 3
16055: PUSH
16056: LD_INT 4
16058: PUSH
16059: LD_INT 5
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: IN
16070: NOT
16071: PUSH
16072: LD_VAR 0 1
16076: PUSH
16077: LD_INT 0
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: IN
16087: PUSH
16088: LD_VAR 0 5
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 3
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: IN
16107: NOT
16108: AND
16109: OR
16110: IFFALSE 16114
// exit ;
16112: GO 34505
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16114: LD_VAR 0 1
16118: PUSH
16119: LD_INT 6
16121: PUSH
16122: LD_INT 7
16124: PUSH
16125: LD_INT 8
16127: PUSH
16128: LD_INT 13
16130: PUSH
16131: LD_INT 12
16133: PUSH
16134: LD_INT 15
16136: PUSH
16137: LD_INT 11
16139: PUSH
16140: LD_INT 14
16142: PUSH
16143: LD_INT 10
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: IN
16157: IFFALSE 16167
// btype = b_lab ;
16159: LD_ADDR_VAR 0 1
16163: PUSH
16164: LD_INT 6
16166: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16167: LD_VAR 0 6
16171: PUSH
16172: LD_INT 0
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 2
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: IN
16186: NOT
16187: PUSH
16188: LD_VAR 0 1
16192: PUSH
16193: LD_INT 0
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: LD_INT 6
16207: PUSH
16208: LD_INT 36
16210: PUSH
16211: LD_INT 4
16213: PUSH
16214: LD_INT 5
16216: PUSH
16217: LD_INT 31
16219: PUSH
16220: LD_INT 32
16222: PUSH
16223: LD_INT 33
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: IN
16239: NOT
16240: PUSH
16241: LD_VAR 0 6
16245: PUSH
16246: LD_INT 1
16248: EQUAL
16249: AND
16250: OR
16251: PUSH
16252: LD_VAR 0 1
16256: PUSH
16257: LD_INT 2
16259: PUSH
16260: LD_INT 3
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: IN
16267: NOT
16268: PUSH
16269: LD_VAR 0 6
16273: PUSH
16274: LD_INT 2
16276: EQUAL
16277: AND
16278: OR
16279: IFFALSE 16289
// mode = 0 ;
16281: LD_ADDR_VAR 0 6
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// case mode of 0 :
16289: LD_VAR 0 6
16293: PUSH
16294: LD_INT 0
16296: DOUBLE
16297: EQUAL
16298: IFTRUE 16302
16300: GO 27755
16302: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16303: LD_ADDR_VAR 0 11
16307: PUSH
16308: LD_INT 0
16310: PUSH
16311: LD_INT 0
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 0
16320: PUSH
16321: LD_INT 1
16323: NEG
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: LD_INT 0
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 1
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 0
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 1
16361: NEG
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 1
16372: NEG
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 1
16384: NEG
16385: PUSH
16386: LD_INT 2
16388: NEG
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 2
16399: NEG
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 1
16410: NEG
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 1
16418: PUSH
16419: LD_INT 2
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 0
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 1
16438: NEG
16439: PUSH
16440: LD_INT 1
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 1
16449: PUSH
16450: LD_INT 3
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: LD_INT 3
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 1
16469: NEG
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16496: LD_ADDR_VAR 0 12
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 0
16513: PUSH
16514: LD_INT 1
16516: NEG
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: LD_INT 0
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 0
16544: PUSH
16545: LD_INT 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 1
16554: NEG
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PUSH
16567: LD_INT 1
16569: NEG
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: LD_INT 1
16580: NEG
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 2
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 1
16608: NEG
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 2
16619: NEG
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 2
16630: NEG
16631: PUSH
16632: LD_INT 1
16634: NEG
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 2
16642: NEG
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 3
16653: NEG
16654: PUSH
16655: LD_INT 0
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 3
16664: NEG
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16692: LD_ADDR_VAR 0 13
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: LD_INT 0
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 0
16709: PUSH
16710: LD_INT 1
16712: NEG
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 1
16720: PUSH
16721: LD_INT 0
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: LD_INT 1
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 1
16750: NEG
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 1
16761: NEG
16762: PUSH
16763: LD_INT 1
16765: NEG
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 1
16773: NEG
16774: PUSH
16775: LD_INT 2
16777: NEG
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 2
16795: PUSH
16796: LD_INT 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: LD_INT 2
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 2
16815: NEG
16816: PUSH
16817: LD_INT 1
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 2
16827: NEG
16828: PUSH
16829: LD_INT 2
16831: NEG
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 2
16839: NEG
16840: PUSH
16841: LD_INT 3
16843: NEG
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 3
16851: NEG
16852: PUSH
16853: LD_INT 2
16855: NEG
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 3
16863: NEG
16864: PUSH
16865: LD_INT 3
16867: NEG
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16891: LD_ADDR_VAR 0 14
16895: PUSH
16896: LD_INT 0
16898: PUSH
16899: LD_INT 0
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 0
16908: PUSH
16909: LD_INT 1
16911: NEG
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 1
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: LD_INT 1
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PUSH
16951: LD_INT 0
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 1
16960: NEG
16961: PUSH
16962: LD_INT 1
16964: NEG
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 1
16972: NEG
16973: PUSH
16974: LD_INT 2
16976: NEG
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 0
16984: PUSH
16985: LD_INT 2
16987: NEG
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: LD_INT 1
16998: NEG
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 1
17026: NEG
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: LD_INT 3
17041: NEG
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 3
17052: NEG
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 2
17063: NEG
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17087: LD_ADDR_VAR 0 15
17091: PUSH
17092: LD_INT 0
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: LD_INT 1
17107: NEG
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: LD_INT 0
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 1
17145: NEG
17146: PUSH
17147: LD_INT 0
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 1
17156: NEG
17157: PUSH
17158: LD_INT 1
17160: NEG
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: LD_INT 1
17171: NEG
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 2
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 1
17199: NEG
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 2
17210: NEG
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 2
17221: NEG
17222: PUSH
17223: LD_INT 1
17225: NEG
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 2
17233: PUSH
17234: LD_INT 1
17236: NEG
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 3
17244: PUSH
17245: LD_INT 0
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 1
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17280: LD_ADDR_VAR 0 16
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 0
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 1
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 0
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 1
17338: NEG
17339: PUSH
17340: LD_INT 0
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 1
17349: NEG
17350: PUSH
17351: LD_INT 1
17353: NEG
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: LD_INT 2
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: LD_INT 2
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: LD_INT 2
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 2
17403: NEG
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 2
17415: NEG
17416: PUSH
17417: LD_INT 2
17419: NEG
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 3
17427: PUSH
17428: LD_INT 2
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 3
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 2
17447: PUSH
17448: LD_INT 3
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17473: LD_ADDR_VAR 0 17
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: LD_INT 0
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: LD_INT 0
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 1
17554: NEG
17555: PUSH
17556: LD_INT 2
17558: NEG
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: LD_INT 2
17569: NEG
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 1
17577: PUSH
17578: LD_INT 1
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 2
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: LD_INT 2
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 1
17638: NEG
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 2
17649: NEG
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 2
17660: NEG
17661: PUSH
17662: LD_INT 1
17664: NEG
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 2
17672: NEG
17673: PUSH
17674: LD_INT 2
17676: NEG
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17703: LD_ADDR_VAR 0 18
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: LD_INT 0
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 0
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: LD_INT 1
17776: NEG
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 1
17784: NEG
17785: PUSH
17786: LD_INT 2
17788: NEG
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 2
17799: NEG
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 2
17818: PUSH
17819: LD_INT 0
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: LD_INT 2
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: NEG
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: LD_INT 1
17894: NEG
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 2
17902: NEG
17903: PUSH
17904: LD_INT 2
17906: NEG
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17933: LD_ADDR_VAR 0 19
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 0
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 0
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: LD_INT 1
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: LD_INT 2
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 2
18029: NEG
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 1
18040: NEG
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 2
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 2
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: LD_INT 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 2
18109: NEG
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 2
18120: NEG
18121: PUSH
18122: LD_INT 1
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 2
18132: NEG
18133: PUSH
18134: LD_INT 2
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18163: LD_ADDR_VAR 0 20
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 0
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: LD_INT 2
18259: NEG
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: LD_INT 1
18270: NEG
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: NEG
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 2
18339: NEG
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 2
18350: NEG
18351: PUSH
18352: LD_INT 1
18354: NEG
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 2
18362: NEG
18363: PUSH
18364: LD_INT 2
18366: NEG
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18393: LD_ADDR_VAR 0 21
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: LD_INT 2
18489: NEG
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 1
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: NEG
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 2
18580: NEG
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 2
18592: NEG
18593: PUSH
18594: LD_INT 2
18596: NEG
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18623: LD_ADDR_VAR 0 22
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: NEG
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: LD_INT 2
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: LD_INT 2
18719: NEG
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 1
18727: PUSH
18728: LD_INT 1
18730: NEG
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 2
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: LD_INT 2
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: LD_INT 2
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 1
18788: NEG
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 2
18799: NEG
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 2
18810: NEG
18811: PUSH
18812: LD_INT 1
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 2
18822: NEG
18823: PUSH
18824: LD_INT 2
18826: NEG
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18853: LD_ADDR_VAR 0 23
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: LD_INT 1
18926: NEG
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: LD_INT 2
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: LD_INT 2
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: LD_INT 1
18960: NEG
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 2
18988: PUSH
18989: LD_INT 2
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: LD_INT 2
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: LD_INT 2
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: LD_INT 3
19068: NEG
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 1
19076: NEG
19077: PUSH
19078: LD_INT 3
19080: NEG
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19133: LD_ADDR_VAR 0 24
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: LD_INT 1
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: LD_INT 0
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: LD_INT 0
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: NEG
19203: PUSH
19204: LD_INT 1
19206: NEG
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: LD_INT 2
19218: NEG
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: LD_INT 2
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 1
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 2
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: NEG
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: LD_INT 1
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: LD_INT 2
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 3
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 3
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19409: LD_ADDR_VAR 0 25
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: LD_INT 1
19429: NEG
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: NEG
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 2
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 2
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 3
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: LD_INT 3
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: LD_INT 3
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19683: LD_ADDR_VAR 0 26
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 0
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 2
19882: NEG
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 2
19894: PUSH
19895: LD_INT 3
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19959: LD_ADDR_VAR 0 27
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 0
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: LD_INT 2
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: LD_INT 2
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 1
20066: NEG
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 2
20094: PUSH
20095: LD_INT 2
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 2
20135: NEG
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: NEG
20159: PUSH
20160: LD_INT 2
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: LD_INT 2
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 2
20181: NEG
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 3
20192: NEG
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 3
20204: NEG
20205: PUSH
20206: LD_INT 2
20208: NEG
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20239: LD_ADDR_VAR 0 28
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: LD_INT 1
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: LD_INT 1
20312: NEG
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: LD_INT 2
20324: NEG
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 2
20335: NEG
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: LD_INT 1
20346: NEG
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 0
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 2
20426: NEG
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: NEG
20439: PUSH
20440: LD_INT 2
20442: NEG
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: LD_INT 3
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 3
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 3
20474: NEG
20475: PUSH
20476: LD_INT 1
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 3
20486: NEG
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20521: LD_ADDR_VAR 0 29
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: LD_INT 1
20594: NEG
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: NEG
20603: PUSH
20604: LD_INT 2
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: LD_INT 0
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: LD_INT 1
20691: NEG
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 2
20699: NEG
20700: PUSH
20701: LD_INT 2
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: NEG
20712: PUSH
20713: LD_INT 3
20715: NEG
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 3
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: LD_INT 3
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 3
20765: NEG
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20800: LD_ADDR_VAR 0 30
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 1
20858: NEG
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: LD_INT 1
20873: NEG
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: NEG
20882: PUSH
20883: LD_INT 2
20885: NEG
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: LD_INT 2
20896: NEG
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: LD_INT 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 1
20955: NEG
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 2
20966: NEG
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 2
20977: NEG
20978: PUSH
20979: LD_INT 1
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: LD_INT 3
20993: NEG
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: LD_INT 2
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 3
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: LD_INT 3
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: NEG
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 3
21043: NEG
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21078: LD_ADDR_VAR 0 31
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: LD_INT 2
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 2
21255: NEG
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 2
21267: NEG
21268: PUSH
21269: LD_INT 3
21271: NEG
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 1
21282: NEG
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 3
21321: NEG
21322: PUSH
21323: LD_INT 2
21325: NEG
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21356: LD_ADDR_VAR 0 32
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 0
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 1
21425: NEG
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: NEG
21438: PUSH
21439: LD_INT 2
21441: NEG
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: LD_INT 2
21452: NEG
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: NEG
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 3
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 3
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: PUSH
21579: LD_INT 3
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 3
21599: NEG
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21634: LD_ADDR_VAR 0 33
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 2
21824: NEG
21825: PUSH
21826: LD_INT 3
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 3
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 3
21878: NEG
21879: PUSH
21880: LD_INT 2
21882: NEG
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21913: LD_ADDR_VAR 0 34
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: LD_INT 1
21986: NEG
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: LD_INT 2
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: LD_INT 1
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: NEG
22093: PUSH
22094: LD_INT 2
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 3
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: LD_INT 2
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: LD_INT 2
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 2
22147: NEG
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 3
22158: NEG
22159: PUSH
22160: LD_INT 1
22162: NEG
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22193: LD_ADDR_VAR 0 35
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: NEG
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22305: LD_ADDR_VAR 0 36
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 0
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: LD_INT 0
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: LD_INT 2
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22417: LD_ADDR_VAR 0 37
22421: PUSH
22422: LD_INT 0
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: NEG
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 1
22486: NEG
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22529: LD_ADDR_VAR 0 38
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 0
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: LD_INT 0
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 0
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: NEG
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 2
22620: NEG
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22641: LD_ADDR_VAR 0 39
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: LD_INT 1
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22753: LD_ADDR_VAR 0 40
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 1
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22865: LD_ADDR_VAR 0 41
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: NEG
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 2
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 2
23020: NEG
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: NEG
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 2
23043: NEG
23044: PUSH
23045: LD_INT 2
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: LD_INT 3
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 1
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 3
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 3
23098: PUSH
23099: LD_INT 2
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 3
23108: PUSH
23109: LD_INT 3
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 3
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 2
23128: NEG
23129: PUSH
23130: LD_INT 1
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 3
23139: NEG
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 3
23150: NEG
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 3
23162: NEG
23163: PUSH
23164: LD_INT 2
23166: NEG
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 3
23174: NEG
23175: PUSH
23176: LD_INT 3
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23215: LD_ADDR_VAR 0 42
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 0
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 1
23273: NEG
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: LD_INT 2
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 2
23393: NEG
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 2
23405: NEG
23406: PUSH
23407: LD_INT 3
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: LD_INT 3
23421: NEG
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: LD_INT 3
23432: NEG
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 3
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 3
23461: PUSH
23462: LD_INT 3
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: PUSH
23472: LD_INT 3
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: LD_INT 3
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: LD_INT 3
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 3
23512: NEG
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 3
23524: NEG
23525: PUSH
23526: LD_INT 3
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23565: LD_ADDR_VAR 0 43
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 0
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: LD_INT 1
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: LD_INT 1
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: LD_INT 2
23650: NEG
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 2
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 1
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 2
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 2
23731: NEG
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: NEG
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: LD_INT 3
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 3
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 3
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 3
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 3
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 2
23850: NEG
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 3
23861: NEG
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 3
23872: NEG
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23913: LD_ADDR_VAR 0 44
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: LD_INT 2
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 1
24009: NEG
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: LD_INT 2
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: NEG
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: NEG
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: NEG
24092: PUSH
24093: LD_INT 2
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 2
24103: NEG
24104: PUSH
24105: LD_INT 3
24107: NEG
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 3
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 3
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: NEG
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 3
24187: NEG
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 3
24198: NEG
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 3
24210: NEG
24211: PUSH
24212: LD_INT 2
24214: NEG
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 3
24222: NEG
24223: PUSH
24224: LD_INT 3
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24263: LD_ADDR_VAR 0 45
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: NEG
24333: PUSH
24334: LD_INT 1
24336: NEG
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: LD_INT 2
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: LD_INT 2
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 2
24429: NEG
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 2
24441: NEG
24442: PUSH
24443: LD_INT 2
24445: NEG
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: NEG
24454: PUSH
24455: LD_INT 3
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 3
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: LD_INT 3
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 2
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 3
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: LD_INT 3
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 3
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 3
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 3
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 3
24560: NEG
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 3
24572: NEG
24573: PUSH
24574: LD_INT 3
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24613: LD_ADDR_VAR 0 46
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: LD_INT 0
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: LD_INT 1
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 2
24779: NEG
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 2
24790: NEG
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 3
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: LD_INT 3
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: LD_INT 2
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 3
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: LD_INT 3
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 0
24877: PUSH
24878: LD_INT 3
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 2
24898: NEG
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 3
24909: NEG
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 3
24920: NEG
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24961: LD_ADDR_VAR 0 47
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 2
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: NEG
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 2
25088: NEG
25089: PUSH
25090: LD_INT 2
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25112: LD_ADDR_VAR 0 48
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: LD_INT 2
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25259: LD_ADDR_VAR 0 49
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25403: LD_ADDR_VAR 0 50
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: NEG
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 1
25476: NEG
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25547: LD_ADDR_VAR 0 51
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: LD_INT 2
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 2
25659: NEG
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25694: LD_ADDR_VAR 0 52
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 2
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: NEG
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: LD_INT 2
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25845: LD_ADDR_VAR 0 53
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 2
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: NEG
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26075: LD_ADDR_VAR 0 54
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 0
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: LD_INT 2
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 2
26274: NEG
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26305: LD_ADDR_VAR 0 55
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: NEG
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 2
26492: NEG
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 2
26504: NEG
26505: PUSH
26506: LD_INT 2
26508: NEG
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26535: LD_ADDR_VAR 0 56
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 2
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 2
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 2
26711: NEG
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26765: LD_ADDR_VAR 0 57
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 2
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 2
26941: NEG
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: NEG
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: LD_INT 2
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26995: LD_ADDR_VAR 0 58
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27225: LD_ADDR_VAR 0 59
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27313: LD_ADDR_VAR 0 60
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27401: LD_ADDR_VAR 0 61
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27489: LD_ADDR_VAR 0 62
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27577: LD_ADDR_VAR 0 63
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: LD_INT 0
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27665: LD_ADDR_VAR 0 64
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: ST_TO_ADDR
// end ; 1 :
27753: GO 33650
27755: LD_INT 1
27757: DOUBLE
27758: EQUAL
27759: IFTRUE 27763
27761: GO 30386
27763: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27764: LD_ADDR_VAR 0 11
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: LD_INT 3
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: LD_INT 3
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27808: LD_ADDR_VAR 0 12
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 3
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 3
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27849: LD_ADDR_VAR 0 13
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27889: LD_ADDR_VAR 0 14
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: LD_INT 3
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: LD_INT 3
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27930: LD_ADDR_VAR 0 15
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 3
27948: NEG
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27974: LD_ADDR_VAR 0 16
27978: PUSH
27979: LD_INT 2
27981: NEG
27982: PUSH
27983: LD_INT 3
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 3
27993: NEG
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 3
28005: NEG
28006: PUSH
28007: LD_INT 3
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28020: LD_ADDR_VAR 0 17
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 3
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: LD_INT 3
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28064: LD_ADDR_VAR 0 18
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 3
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 3
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: LIST
28104: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28105: LD_ADDR_VAR 0 19
28109: PUSH
28110: LD_INT 3
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 3
28122: PUSH
28123: LD_INT 3
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 3
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28145: LD_ADDR_VAR 0 20
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: LD_INT 3
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: LD_INT 3
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28186: LD_ADDR_VAR 0 21
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 3
28204: NEG
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 3
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28230: LD_ADDR_VAR 0 22
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: LD_INT 3
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 3
28249: NEG
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 3
28261: NEG
28262: PUSH
28263: LD_INT 3
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28276: LD_ADDR_VAR 0 23
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: LD_INT 3
28286: NEG
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: LD_INT 4
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 3
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28320: LD_ADDR_VAR 0 24
28324: PUSH
28325: LD_INT 3
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 3
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 4
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28361: LD_ADDR_VAR 0 25
28365: PUSH
28366: LD_INT 3
28368: PUSH
28369: LD_INT 3
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 4
28378: PUSH
28379: LD_INT 3
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: LD_INT 4
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28401: LD_ADDR_VAR 0 26
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 3
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 4
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28442: LD_ADDR_VAR 0 27
28446: PUSH
28447: LD_INT 3
28449: NEG
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 3
28460: NEG
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 4
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28486: LD_ADDR_VAR 0 28
28490: PUSH
28491: LD_INT 3
28493: NEG
28494: PUSH
28495: LD_INT 3
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: LD_INT 4
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 4
28517: NEG
28518: PUSH
28519: LD_INT 3
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: LIST
28531: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28532: LD_ADDR_VAR 0 29
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: LD_INT 3
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 3
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: LD_INT 2
28565: NEG
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 4
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 4
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 3
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 5
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 5
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 4
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 6
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 6
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 5
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28687: LD_ADDR_VAR 0 30
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 3
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 3
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 3
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 4
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 4
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 5
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 5
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 5
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 6
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 6
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28830: LD_ADDR_VAR 0 31
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 3
28847: PUSH
28848: LD_INT 3
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: LD_INT 3
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 4
28867: PUSH
28868: LD_INT 3
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 4
28877: PUSH
28878: LD_INT 4
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: LD_INT 4
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 5
28897: PUSH
28898: LD_INT 4
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 5
28907: PUSH
28908: LD_INT 5
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 4
28917: PUSH
28918: LD_INT 5
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 6
28927: PUSH
28928: LD_INT 5
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 6
28937: PUSH
28938: LD_INT 6
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 5
28947: PUSH
28948: LD_INT 6
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28969: LD_ADDR_VAR 0 32
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: LD_INT 4
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: LD_INT 4
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: LD_INT 3
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 5
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 5
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: LD_INT 4
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 6
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 6
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: LD_INT 5
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29112: LD_ADDR_VAR 0 33
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 3
29130: NEG
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 3
29153: NEG
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 4
29164: NEG
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 4
29175: NEG
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 4
29187: NEG
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 5
29198: NEG
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 5
29209: NEG
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 5
29221: NEG
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 6
29232: NEG
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 6
29243: NEG
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29267: LD_ADDR_VAR 0 34
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 3
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 3
29298: NEG
29299: PUSH
29300: LD_INT 3
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 3
29310: NEG
29311: PUSH
29312: LD_INT 4
29314: NEG
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 4
29322: NEG
29323: PUSH
29324: LD_INT 3
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 4
29334: NEG
29335: PUSH
29336: LD_INT 4
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 4
29346: NEG
29347: PUSH
29348: LD_INT 5
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 5
29358: NEG
29359: PUSH
29360: LD_INT 4
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 5
29370: NEG
29371: PUSH
29372: LD_INT 5
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 5
29382: NEG
29383: PUSH
29384: LD_INT 6
29386: NEG
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 6
29394: NEG
29395: PUSH
29396: LD_INT 5
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 6
29406: NEG
29407: PUSH
29408: LD_INT 6
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29430: LD_ADDR_VAR 0 41
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 2
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: LD_INT 3
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29474: LD_ADDR_VAR 0 42
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 1
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29515: LD_ADDR_VAR 0 43
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29555: LD_ADDR_VAR 0 44
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29596: LD_ADDR_VAR 0 45
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29640: LD_ADDR_VAR 0 46
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 3
29671: NEG
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29686: LD_ADDR_VAR 0 47
29690: PUSH
29691: LD_INT 2
29693: NEG
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: LD_INT 3
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29719: LD_ADDR_VAR 0 48
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 2
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29750: LD_ADDR_VAR 0 49
29754: PUSH
29755: LD_INT 3
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 3
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29779: LD_ADDR_VAR 0 50
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29808: LD_ADDR_VAR 0 51
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 2
29826: NEG
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29839: LD_ADDR_VAR 0 52
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29872: LD_ADDR_VAR 0 53
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 3
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: LD_INT 3
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29916: LD_ADDR_VAR 0 54
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 3
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29957: LD_ADDR_VAR 0 55
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: LD_INT 3
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29997: LD_ADDR_VAR 0 56
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30038: LD_ADDR_VAR 0 57
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 3
30056: NEG
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 3
30067: NEG
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30082: LD_ADDR_VAR 0 58
30086: PUSH
30087: LD_INT 2
30089: NEG
30090: PUSH
30091: LD_INT 3
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 3
30101: NEG
30102: PUSH
30103: LD_INT 2
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 3
30113: NEG
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30128: LD_ADDR_VAR 0 59
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 2
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 2
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30172: LD_ADDR_VAR 0 60
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30213: LD_ADDR_VAR 0 61
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 2
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30253: LD_ADDR_VAR 0 62
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: LIST
30293: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30294: LD_ADDR_VAR 0 63
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: NEG
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30338: LD_ADDR_VAR 0 64
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: LD_INT 2
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: NEG
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: ST_TO_ADDR
// end ; 2 :
30384: GO 33650
30386: LD_INT 2
30388: DOUBLE
30389: EQUAL
30390: IFTRUE 30394
30392: GO 33649
30394: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30395: LD_ADDR_VAR 0 29
30399: PUSH
30400: LD_INT 4
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 5
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 5
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 4
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: LD_INT 0
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 3
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: LD_INT 2
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 5
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: LD_INT 3
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: LD_INT 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 4
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: LD_INT 4
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 3
30535: PUSH
30536: LD_INT 4
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 2
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 2
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: LD_INT 4
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 4
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 5
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: NEG
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 5
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 2
30667: NEG
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 3
30678: NEG
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 3
30689: NEG
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 2
30701: NEG
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 3
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 4
30734: NEG
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 4
30745: NEG
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 4
30757: NEG
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 4
30780: NEG
30781: PUSH
30782: LD_INT 4
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 4
30792: NEG
30793: PUSH
30794: LD_INT 5
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 3
30804: NEG
30805: PUSH
30806: LD_INT 4
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 3
30816: NEG
30817: PUSH
30818: LD_INT 3
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 4
30828: NEG
30829: PUSH
30830: LD_INT 3
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 5
30840: NEG
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 5
30852: NEG
30853: PUSH
30854: LD_INT 5
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: LD_INT 5
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 5
30876: NEG
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30933: LD_ADDR_VAR 0 30
30937: PUSH
30938: LD_INT 4
30940: PUSH
30941: LD_INT 4
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 4
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 5
30960: PUSH
30961: LD_INT 4
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 5
30970: PUSH
30971: LD_INT 5
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 4
30980: PUSH
30981: LD_INT 5
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 3
30990: PUSH
30991: LD_INT 4
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 3
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 5
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: LD_INT 5
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 3
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: LD_INT 3
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 4
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 4
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 2
31102: PUSH
31103: LD_INT 4
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: LD_INT 2
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 4
31123: NEG
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 4
31134: NEG
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 3
31146: NEG
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 3
31157: NEG
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: NEG
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 5
31179: NEG
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 5
31190: NEG
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 5
31202: NEG
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: NEG
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 3
31225: NEG
31226: PUSH
31227: LD_INT 3
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 3
31237: NEG
31238: PUSH
31239: LD_INT 4
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 2
31261: NEG
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 3
31273: NEG
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 4
31285: NEG
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 4
31297: NEG
31298: PUSH
31299: LD_INT 4
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: LD_INT 4
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 4
31321: NEG
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: LD_INT 4
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 5
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: LD_INT 4
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: LD_INT 3
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 4
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 5
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 3
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: LD_INT 5
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31480: LD_ADDR_VAR 0 31
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 4
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 4
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 5
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 5
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 4
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 3
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 5
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 3
31591: NEG
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 2
31614: NEG
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 4
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 4
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 4
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: NEG
31672: PUSH
31673: LD_INT 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 4
31682: NEG
31683: PUSH
31684: LD_INT 4
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 4
31694: NEG
31695: PUSH
31696: LD_INT 5
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 3
31706: NEG
31707: PUSH
31708: LD_INT 4
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 3
31718: NEG
31719: PUSH
31720: LD_INT 3
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 4
31730: NEG
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 5
31742: NEG
31743: PUSH
31744: LD_INT 4
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 5
31754: NEG
31755: PUSH
31756: LD_INT 5
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 3
31766: NEG
31767: PUSH
31768: LD_INT 5
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 5
31778: NEG
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 4
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: LD_INT 2
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 3
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: LD_INT 4
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 2
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 2
31880: NEG
31881: PUSH
31882: LD_INT 4
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 4
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 4
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 5
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 5
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: LD_INT 2
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 5
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32030: LD_ADDR_VAR 0 32
32034: PUSH
32035: LD_INT 4
32037: NEG
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 4
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 3
32060: NEG
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 3
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 4
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 5
32093: NEG
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 5
32104: NEG
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 5
32116: NEG
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 3
32139: NEG
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: NEG
32152: PUSH
32153: LD_INT 4
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: NEG
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 4
32199: NEG
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 4
32211: NEG
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: NEG
32224: PUSH
32225: LD_INT 4
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 4
32235: NEG
32236: PUSH
32237: LD_INT 2
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 4
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: LD_INT 5
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 4
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 3
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: LD_INT 3
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: LD_INT 4
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 5
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: LD_INT 3
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 5
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 4
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 3
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: LD_INT 4
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 4
32452: PUSH
32453: LD_INT 3
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 5
32462: PUSH
32463: LD_INT 4
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: LD_INT 5
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 4
32482: PUSH
32483: LD_INT 5
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: LD_INT 4
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: LD_INT 3
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 5
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: LD_INT 5
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32577: LD_ADDR_VAR 0 33
32581: PUSH
32582: LD_INT 4
32584: NEG
32585: PUSH
32586: LD_INT 4
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 4
32596: NEG
32597: PUSH
32598: LD_INT 5
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: NEG
32609: PUSH
32610: LD_INT 4
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 4
32632: NEG
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 5
32644: NEG
32645: PUSH
32646: LD_INT 4
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 5
32656: NEG
32657: PUSH
32658: LD_INT 5
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: NEG
32669: PUSH
32670: LD_INT 5
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 5
32680: NEG
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 3
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 4
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 3
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 2
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 3
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 4
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: LD_INT 4
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 4
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 4
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 5
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 5
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 4
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 3
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 5
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 3
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 4
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 4
32917: PUSH
32918: LD_INT 4
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: LD_INT 4
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 4
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 4
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: LD_INT 4
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: LD_INT 5
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: LD_INT 5
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: LD_INT 4
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: LD_INT 5
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 2
33059: NEG
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33115: LD_ADDR_VAR 0 34
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 4
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 5
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 4
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: LD_INT 3
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: LD_INT 4
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: LD_INT 5
33193: NEG
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 3
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: LD_INT 5
33216: NEG
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 3
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 4
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 4
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 3
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 4
33317: PUSH
33318: LD_INT 4
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 4
33327: PUSH
33328: LD_INT 3
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 5
33337: PUSH
33338: LD_INT 4
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 5
33347: PUSH
33348: LD_INT 5
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 4
33357: PUSH
33358: LD_INT 5
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 3
33367: PUSH
33368: LD_INT 4
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 5
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 3
33397: PUSH
33398: LD_INT 5
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 4
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 4
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 4
33500: NEG
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 4
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 3
33523: NEG
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 3
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 4
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 5
33556: NEG
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 5
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 5
33579: NEG
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 3
33591: NEG
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// end ; end ;
33647: GO 33650
33649: POP
// case btype of b_depot , b_warehouse :
33650: LD_VAR 0 1
33654: PUSH
33655: LD_INT 0
33657: DOUBLE
33658: EQUAL
33659: IFTRUE 33669
33661: LD_INT 1
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33870
33669: POP
// case nation of nation_american :
33670: LD_VAR 0 5
33674: PUSH
33675: LD_INT 1
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33739
33683: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33684: LD_ADDR_VAR 0 9
33688: PUSH
33689: LD_VAR 0 11
33693: PUSH
33694: LD_VAR 0 12
33698: PUSH
33699: LD_VAR 0 13
33703: PUSH
33704: LD_VAR 0 14
33708: PUSH
33709: LD_VAR 0 15
33713: PUSH
33714: LD_VAR 0 16
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: PUSH
33727: LD_VAR 0 4
33731: PUSH
33732: LD_INT 1
33734: PLUS
33735: ARRAY
33736: ST_TO_ADDR
33737: GO 33868
33739: LD_INT 2
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33803
33747: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33748: LD_ADDR_VAR 0 9
33752: PUSH
33753: LD_VAR 0 17
33757: PUSH
33758: LD_VAR 0 18
33762: PUSH
33763: LD_VAR 0 19
33767: PUSH
33768: LD_VAR 0 20
33772: PUSH
33773: LD_VAR 0 21
33777: PUSH
33778: LD_VAR 0 22
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: PUSH
33791: LD_VAR 0 4
33795: PUSH
33796: LD_INT 1
33798: PLUS
33799: ARRAY
33800: ST_TO_ADDR
33801: GO 33868
33803: LD_INT 3
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33867
33811: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33812: LD_ADDR_VAR 0 9
33816: PUSH
33817: LD_VAR 0 23
33821: PUSH
33822: LD_VAR 0 24
33826: PUSH
33827: LD_VAR 0 25
33831: PUSH
33832: LD_VAR 0 26
33836: PUSH
33837: LD_VAR 0 27
33841: PUSH
33842: LD_VAR 0 28
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: PUSH
33855: LD_VAR 0 4
33859: PUSH
33860: LD_INT 1
33862: PLUS
33863: ARRAY
33864: ST_TO_ADDR
33865: GO 33868
33867: POP
33868: GO 34423
33870: LD_INT 2
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33884
33876: LD_INT 3
33878: DOUBLE
33879: EQUAL
33880: IFTRUE 33884
33882: GO 33940
33884: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33885: LD_ADDR_VAR 0 9
33889: PUSH
33890: LD_VAR 0 29
33894: PUSH
33895: LD_VAR 0 30
33899: PUSH
33900: LD_VAR 0 31
33904: PUSH
33905: LD_VAR 0 32
33909: PUSH
33910: LD_VAR 0 33
33914: PUSH
33915: LD_VAR 0 34
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: PUSH
33928: LD_VAR 0 4
33932: PUSH
33933: LD_INT 1
33935: PLUS
33936: ARRAY
33937: ST_TO_ADDR
33938: GO 34423
33940: LD_INT 16
33942: DOUBLE
33943: EQUAL
33944: IFTRUE 34002
33946: LD_INT 17
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 34002
33952: LD_INT 18
33954: DOUBLE
33955: EQUAL
33956: IFTRUE 34002
33958: LD_INT 19
33960: DOUBLE
33961: EQUAL
33962: IFTRUE 34002
33964: LD_INT 22
33966: DOUBLE
33967: EQUAL
33968: IFTRUE 34002
33970: LD_INT 20
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 34002
33976: LD_INT 21
33978: DOUBLE
33979: EQUAL
33980: IFTRUE 34002
33982: LD_INT 23
33984: DOUBLE
33985: EQUAL
33986: IFTRUE 34002
33988: LD_INT 24
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 34002
33994: LD_INT 25
33996: DOUBLE
33997: EQUAL
33998: IFTRUE 34002
34000: GO 34058
34002: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34003: LD_ADDR_VAR 0 9
34007: PUSH
34008: LD_VAR 0 35
34012: PUSH
34013: LD_VAR 0 36
34017: PUSH
34018: LD_VAR 0 37
34022: PUSH
34023: LD_VAR 0 38
34027: PUSH
34028: LD_VAR 0 39
34032: PUSH
34033: LD_VAR 0 40
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: PUSH
34046: LD_VAR 0 4
34050: PUSH
34051: LD_INT 1
34053: PLUS
34054: ARRAY
34055: ST_TO_ADDR
34056: GO 34423
34058: LD_INT 6
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34114
34064: LD_INT 7
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34114
34070: LD_INT 8
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34114
34076: LD_INT 13
34078: DOUBLE
34079: EQUAL
34080: IFTRUE 34114
34082: LD_INT 12
34084: DOUBLE
34085: EQUAL
34086: IFTRUE 34114
34088: LD_INT 15
34090: DOUBLE
34091: EQUAL
34092: IFTRUE 34114
34094: LD_INT 11
34096: DOUBLE
34097: EQUAL
34098: IFTRUE 34114
34100: LD_INT 14
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34114
34106: LD_INT 10
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34114
34112: GO 34170
34114: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34115: LD_ADDR_VAR 0 9
34119: PUSH
34120: LD_VAR 0 41
34124: PUSH
34125: LD_VAR 0 42
34129: PUSH
34130: LD_VAR 0 43
34134: PUSH
34135: LD_VAR 0 44
34139: PUSH
34140: LD_VAR 0 45
34144: PUSH
34145: LD_VAR 0 46
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: PUSH
34158: LD_VAR 0 4
34162: PUSH
34163: LD_INT 1
34165: PLUS
34166: ARRAY
34167: ST_TO_ADDR
34168: GO 34423
34170: LD_INT 36
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34178
34176: GO 34234
34178: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34179: LD_ADDR_VAR 0 9
34183: PUSH
34184: LD_VAR 0 47
34188: PUSH
34189: LD_VAR 0 48
34193: PUSH
34194: LD_VAR 0 49
34198: PUSH
34199: LD_VAR 0 50
34203: PUSH
34204: LD_VAR 0 51
34208: PUSH
34209: LD_VAR 0 52
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: PUSH
34222: LD_VAR 0 4
34226: PUSH
34227: LD_INT 1
34229: PLUS
34230: ARRAY
34231: ST_TO_ADDR
34232: GO 34423
34234: LD_INT 4
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34260
34240: LD_INT 5
34242: DOUBLE
34243: EQUAL
34244: IFTRUE 34260
34246: LD_INT 34
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34260
34252: LD_INT 37
34254: DOUBLE
34255: EQUAL
34256: IFTRUE 34260
34258: GO 34316
34260: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34261: LD_ADDR_VAR 0 9
34265: PUSH
34266: LD_VAR 0 53
34270: PUSH
34271: LD_VAR 0 54
34275: PUSH
34276: LD_VAR 0 55
34280: PUSH
34281: LD_VAR 0 56
34285: PUSH
34286: LD_VAR 0 57
34290: PUSH
34291: LD_VAR 0 58
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: PUSH
34304: LD_VAR 0 4
34308: PUSH
34309: LD_INT 1
34311: PLUS
34312: ARRAY
34313: ST_TO_ADDR
34314: GO 34423
34316: LD_INT 31
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34366
34322: LD_INT 32
34324: DOUBLE
34325: EQUAL
34326: IFTRUE 34366
34328: LD_INT 33
34330: DOUBLE
34331: EQUAL
34332: IFTRUE 34366
34334: LD_INT 27
34336: DOUBLE
34337: EQUAL
34338: IFTRUE 34366
34340: LD_INT 26
34342: DOUBLE
34343: EQUAL
34344: IFTRUE 34366
34346: LD_INT 28
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34366
34352: LD_INT 29
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34366
34358: LD_INT 30
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34366
34364: GO 34422
34366: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34367: LD_ADDR_VAR 0 9
34371: PUSH
34372: LD_VAR 0 59
34376: PUSH
34377: LD_VAR 0 60
34381: PUSH
34382: LD_VAR 0 61
34386: PUSH
34387: LD_VAR 0 62
34391: PUSH
34392: LD_VAR 0 63
34396: PUSH
34397: LD_VAR 0 64
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: PUSH
34410: LD_VAR 0 4
34414: PUSH
34415: LD_INT 1
34417: PLUS
34418: ARRAY
34419: ST_TO_ADDR
34420: GO 34423
34422: POP
// temp_list2 = [ ] ;
34423: LD_ADDR_VAR 0 10
34427: PUSH
34428: EMPTY
34429: ST_TO_ADDR
// for i in temp_list do
34430: LD_ADDR_VAR 0 8
34434: PUSH
34435: LD_VAR 0 9
34439: PUSH
34440: FOR_IN
34441: IFFALSE 34493
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34443: LD_ADDR_VAR 0 10
34447: PUSH
34448: LD_VAR 0 10
34452: PUSH
34453: LD_VAR 0 8
34457: PUSH
34458: LD_INT 1
34460: ARRAY
34461: PUSH
34462: LD_VAR 0 2
34466: PLUS
34467: PUSH
34468: LD_VAR 0 8
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PUSH
34477: LD_VAR 0 3
34481: PLUS
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: EMPTY
34488: LIST
34489: ADD
34490: ST_TO_ADDR
34491: GO 34440
34493: POP
34494: POP
// result = temp_list2 ;
34495: LD_ADDR_VAR 0 7
34499: PUSH
34500: LD_VAR 0 10
34504: ST_TO_ADDR
// end ;
34505: LD_VAR 0 7
34509: RET
// export function EnemyInRange ( unit , dist ) ; begin
34510: LD_INT 0
34512: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 255
34527: PPUSH
34528: LD_VAR 0 1
34532: PPUSH
34533: CALL_OW 250
34537: PPUSH
34538: LD_VAR 0 1
34542: PPUSH
34543: CALL_OW 251
34547: PPUSH
34548: LD_VAR 0 2
34552: PPUSH
34553: CALL 7883 0 4
34557: PUSH
34558: LD_INT 4
34560: ARRAY
34561: ST_TO_ADDR
// end ;
34562: LD_VAR 0 3
34566: RET
// export function PlayerSeeMe ( unit ) ; begin
34567: LD_INT 0
34569: PPUSH
// result := See ( your_side , unit ) ;
34570: LD_ADDR_VAR 0 2
34574: PUSH
34575: LD_OWVAR 2
34579: PPUSH
34580: LD_VAR 0 1
34584: PPUSH
34585: CALL_OW 292
34589: ST_TO_ADDR
// end ;
34590: LD_VAR 0 2
34594: RET
// export function ReverseDir ( unit ) ; begin
34595: LD_INT 0
34597: PPUSH
// if not unit then
34598: LD_VAR 0 1
34602: NOT
34603: IFFALSE 34607
// exit ;
34605: GO 34630
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34607: LD_ADDR_VAR 0 2
34611: PUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 254
34621: PUSH
34622: LD_INT 3
34624: PLUS
34625: PUSH
34626: LD_INT 6
34628: MOD
34629: ST_TO_ADDR
// end ;
34630: LD_VAR 0 2
34634: RET
// export function ReverseArray ( array ) ; var i ; begin
34635: LD_INT 0
34637: PPUSH
34638: PPUSH
// if not array then
34639: LD_VAR 0 1
34643: NOT
34644: IFFALSE 34648
// exit ;
34646: GO 34703
// result := [ ] ;
34648: LD_ADDR_VAR 0 2
34652: PUSH
34653: EMPTY
34654: ST_TO_ADDR
// for i := array downto 1 do
34655: LD_ADDR_VAR 0 3
34659: PUSH
34660: DOUBLE
34661: LD_VAR 0 1
34665: INC
34666: ST_TO_ADDR
34667: LD_INT 1
34669: PUSH
34670: FOR_DOWNTO
34671: IFFALSE 34701
// result := Join ( result , array [ i ] ) ;
34673: LD_ADDR_VAR 0 2
34677: PUSH
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 1
34687: PUSH
34688: LD_VAR 0 3
34692: ARRAY
34693: PPUSH
34694: CALL 39359 0 2
34698: ST_TO_ADDR
34699: GO 34670
34701: POP
34702: POP
// end ;
34703: LD_VAR 0 2
34707: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34708: LD_INT 0
34710: PPUSH
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
// if not unit or not hexes then
34716: LD_VAR 0 1
34720: NOT
34721: PUSH
34722: LD_VAR 0 2
34726: NOT
34727: OR
34728: IFFALSE 34732
// exit ;
34730: GO 34855
// dist := 9999 ;
34732: LD_ADDR_VAR 0 5
34736: PUSH
34737: LD_INT 9999
34739: ST_TO_ADDR
// for i = 1 to hexes do
34740: LD_ADDR_VAR 0 4
34744: PUSH
34745: DOUBLE
34746: LD_INT 1
34748: DEC
34749: ST_TO_ADDR
34750: LD_VAR 0 2
34754: PUSH
34755: FOR_TO
34756: IFFALSE 34843
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34758: LD_ADDR_VAR 0 6
34762: PUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: LD_VAR 0 2
34772: PUSH
34773: LD_VAR 0 4
34777: ARRAY
34778: PUSH
34779: LD_INT 1
34781: ARRAY
34782: PPUSH
34783: LD_VAR 0 2
34787: PUSH
34788: LD_VAR 0 4
34792: ARRAY
34793: PUSH
34794: LD_INT 2
34796: ARRAY
34797: PPUSH
34798: CALL_OW 297
34802: ST_TO_ADDR
// if tdist < dist then
34803: LD_VAR 0 6
34807: PUSH
34808: LD_VAR 0 5
34812: LESS
34813: IFFALSE 34841
// begin hex := hexes [ i ] ;
34815: LD_ADDR_VAR 0 8
34819: PUSH
34820: LD_VAR 0 2
34824: PUSH
34825: LD_VAR 0 4
34829: ARRAY
34830: ST_TO_ADDR
// dist := tdist ;
34831: LD_ADDR_VAR 0 5
34835: PUSH
34836: LD_VAR 0 6
34840: ST_TO_ADDR
// end ; end ;
34841: GO 34755
34843: POP
34844: POP
// result := hex ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_VAR 0 8
34854: ST_TO_ADDR
// end ;
34855: LD_VAR 0 3
34859: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34860: LD_INT 0
34862: PPUSH
34863: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34864: LD_VAR 0 1
34868: NOT
34869: PUSH
34870: LD_VAR 0 1
34874: PUSH
34875: LD_INT 21
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 23
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PPUSH
34899: CALL_OW 69
34903: IN
34904: NOT
34905: OR
34906: IFFALSE 34910
// exit ;
34908: GO 34957
// for i = 1 to 3 do
34910: LD_ADDR_VAR 0 3
34914: PUSH
34915: DOUBLE
34916: LD_INT 1
34918: DEC
34919: ST_TO_ADDR
34920: LD_INT 3
34922: PUSH
34923: FOR_TO
34924: IFFALSE 34955
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34926: LD_VAR 0 1
34930: PPUSH
34931: CALL_OW 250
34935: PPUSH
34936: LD_VAR 0 1
34940: PPUSH
34941: CALL_OW 251
34945: PPUSH
34946: LD_INT 1
34948: PPUSH
34949: CALL_OW 453
34953: GO 34923
34955: POP
34956: POP
// end ;
34957: LD_VAR 0 2
34961: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34962: LD_INT 0
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34970: LD_VAR 0 1
34974: NOT
34975: PUSH
34976: LD_VAR 0 2
34980: NOT
34981: OR
34982: PUSH
34983: LD_VAR 0 1
34987: PPUSH
34988: CALL_OW 314
34992: OR
34993: IFFALSE 34997
// exit ;
34995: GO 35464
// if GetLives ( i ) < 250 then
34997: LD_VAR 0 4
35001: PPUSH
35002: CALL_OW 256
35006: PUSH
35007: LD_INT 250
35009: LESS
35010: IFFALSE 35023
// begin ComAutodestruct ( i ) ;
35012: LD_VAR 0 4
35016: PPUSH
35017: CALL 34860 0 1
// exit ;
35021: GO 35464
// end ; x := GetX ( enemy_unit ) ;
35023: LD_ADDR_VAR 0 7
35027: PUSH
35028: LD_VAR 0 2
35032: PPUSH
35033: CALL_OW 250
35037: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35038: LD_ADDR_VAR 0 8
35042: PUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: CALL_OW 251
35052: ST_TO_ADDR
// if not x or not y then
35053: LD_VAR 0 7
35057: NOT
35058: PUSH
35059: LD_VAR 0 8
35063: NOT
35064: OR
35065: IFFALSE 35069
// exit ;
35067: GO 35464
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35069: LD_ADDR_VAR 0 6
35073: PUSH
35074: LD_VAR 0 7
35078: PPUSH
35079: LD_INT 0
35081: PPUSH
35082: LD_INT 4
35084: PPUSH
35085: CALL_OW 272
35089: PUSH
35090: LD_VAR 0 8
35094: PPUSH
35095: LD_INT 0
35097: PPUSH
35098: LD_INT 4
35100: PPUSH
35101: CALL_OW 273
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_VAR 0 7
35114: PPUSH
35115: LD_INT 1
35117: PPUSH
35118: LD_INT 4
35120: PPUSH
35121: CALL_OW 272
35125: PUSH
35126: LD_VAR 0 8
35130: PPUSH
35131: LD_INT 1
35133: PPUSH
35134: LD_INT 4
35136: PPUSH
35137: CALL_OW 273
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_VAR 0 7
35150: PPUSH
35151: LD_INT 2
35153: PPUSH
35154: LD_INT 4
35156: PPUSH
35157: CALL_OW 272
35161: PUSH
35162: LD_VAR 0 8
35166: PPUSH
35167: LD_INT 2
35169: PPUSH
35170: LD_INT 4
35172: PPUSH
35173: CALL_OW 273
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_VAR 0 7
35186: PPUSH
35187: LD_INT 3
35189: PPUSH
35190: LD_INT 4
35192: PPUSH
35193: CALL_OW 272
35197: PUSH
35198: LD_VAR 0 8
35202: PPUSH
35203: LD_INT 3
35205: PPUSH
35206: LD_INT 4
35208: PPUSH
35209: CALL_OW 273
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_VAR 0 7
35222: PPUSH
35223: LD_INT 4
35225: PPUSH
35226: LD_INT 4
35228: PPUSH
35229: CALL_OW 272
35233: PUSH
35234: LD_VAR 0 8
35238: PPUSH
35239: LD_INT 4
35241: PPUSH
35242: LD_INT 4
35244: PPUSH
35245: CALL_OW 273
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_VAR 0 7
35258: PPUSH
35259: LD_INT 5
35261: PPUSH
35262: LD_INT 4
35264: PPUSH
35265: CALL_OW 272
35269: PUSH
35270: LD_VAR 0 8
35274: PPUSH
35275: LD_INT 5
35277: PPUSH
35278: LD_INT 4
35280: PPUSH
35281: CALL_OW 273
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
// for i = tmp downto 1 do
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: DOUBLE
35304: LD_VAR 0 6
35308: INC
35309: ST_TO_ADDR
35310: LD_INT 1
35312: PUSH
35313: FOR_DOWNTO
35314: IFFALSE 35415
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35316: LD_VAR 0 6
35320: PUSH
35321: LD_VAR 0 4
35325: ARRAY
35326: PUSH
35327: LD_INT 1
35329: ARRAY
35330: PPUSH
35331: LD_VAR 0 6
35335: PUSH
35336: LD_VAR 0 4
35340: ARRAY
35341: PUSH
35342: LD_INT 2
35344: ARRAY
35345: PPUSH
35346: CALL_OW 488
35350: NOT
35351: PUSH
35352: LD_VAR 0 6
35356: PUSH
35357: LD_VAR 0 4
35361: ARRAY
35362: PUSH
35363: LD_INT 1
35365: ARRAY
35366: PPUSH
35367: LD_VAR 0 6
35371: PUSH
35372: LD_VAR 0 4
35376: ARRAY
35377: PUSH
35378: LD_INT 2
35380: ARRAY
35381: PPUSH
35382: CALL_OW 428
35386: PUSH
35387: LD_INT 0
35389: NONEQUAL
35390: OR
35391: IFFALSE 35413
// tmp := Delete ( tmp , i ) ;
35393: LD_ADDR_VAR 0 6
35397: PUSH
35398: LD_VAR 0 6
35402: PPUSH
35403: LD_VAR 0 4
35407: PPUSH
35408: CALL_OW 3
35412: ST_TO_ADDR
35413: GO 35313
35415: POP
35416: POP
// j := GetClosestHex ( unit , tmp ) ;
35417: LD_ADDR_VAR 0 5
35421: PUSH
35422: LD_VAR 0 1
35426: PPUSH
35427: LD_VAR 0 6
35431: PPUSH
35432: CALL 34708 0 2
35436: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35437: LD_VAR 0 1
35441: PPUSH
35442: LD_VAR 0 5
35446: PUSH
35447: LD_INT 1
35449: ARRAY
35450: PPUSH
35451: LD_VAR 0 5
35455: PUSH
35456: LD_INT 2
35458: ARRAY
35459: PPUSH
35460: CALL_OW 111
// end ;
35464: LD_VAR 0 3
35468: RET
// export function PrepareApemanSoldier ( ) ; begin
35469: LD_INT 0
35471: PPUSH
// uc_nation := 0 ;
35472: LD_ADDR_OWVAR 21
35476: PUSH
35477: LD_INT 0
35479: ST_TO_ADDR
// hc_sex := sex_male ;
35480: LD_ADDR_OWVAR 27
35484: PUSH
35485: LD_INT 1
35487: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35488: LD_ADDR_OWVAR 28
35492: PUSH
35493: LD_INT 15
35495: ST_TO_ADDR
// hc_gallery :=  ;
35496: LD_ADDR_OWVAR 33
35500: PUSH
35501: LD_STRING 
35503: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35504: LD_ADDR_OWVAR 31
35508: PUSH
35509: LD_INT 0
35511: PPUSH
35512: LD_INT 3
35514: PPUSH
35515: CALL_OW 12
35519: PUSH
35520: LD_INT 0
35522: PPUSH
35523: LD_INT 3
35525: PPUSH
35526: CALL_OW 12
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: ST_TO_ADDR
// end ;
35543: LD_VAR 0 1
35547: RET
// export function PrepareApemanEngineer ( ) ; begin
35548: LD_INT 0
35550: PPUSH
// uc_nation := 0 ;
35551: LD_ADDR_OWVAR 21
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// hc_sex := sex_male ;
35559: LD_ADDR_OWVAR 27
35563: PUSH
35564: LD_INT 1
35566: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35567: LD_ADDR_OWVAR 28
35571: PUSH
35572: LD_INT 16
35574: ST_TO_ADDR
// hc_gallery :=  ;
35575: LD_ADDR_OWVAR 33
35579: PUSH
35580: LD_STRING 
35582: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35583: LD_ADDR_OWVAR 31
35587: PUSH
35588: LD_INT 0
35590: PPUSH
35591: LD_INT 3
35593: PPUSH
35594: CALL_OW 12
35598: PUSH
35599: LD_INT 0
35601: PPUSH
35602: LD_INT 3
35604: PPUSH
35605: CALL_OW 12
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// end ;
35622: LD_VAR 0 1
35626: RET
// export function PrepareApeman ( agressivity ) ; begin
35627: LD_INT 0
35629: PPUSH
// uc_side := 0 ;
35630: LD_ADDR_OWVAR 20
35634: PUSH
35635: LD_INT 0
35637: ST_TO_ADDR
// uc_nation := 0 ;
35638: LD_ADDR_OWVAR 21
35642: PUSH
35643: LD_INT 0
35645: ST_TO_ADDR
// hc_sex := sex_male ;
35646: LD_ADDR_OWVAR 27
35650: PUSH
35651: LD_INT 1
35653: ST_TO_ADDR
// hc_class := class_apeman ;
35654: LD_ADDR_OWVAR 28
35658: PUSH
35659: LD_INT 12
35661: ST_TO_ADDR
// hc_gallery :=  ;
35662: LD_ADDR_OWVAR 33
35666: PUSH
35667: LD_STRING 
35669: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35670: LD_ADDR_OWVAR 35
35674: PUSH
35675: LD_VAR 0 1
35679: NEG
35680: PPUSH
35681: LD_VAR 0 1
35685: PPUSH
35686: CALL_OW 12
35690: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35691: LD_ADDR_OWVAR 31
35695: PUSH
35696: LD_INT 0
35698: PPUSH
35699: LD_INT 3
35701: PPUSH
35702: CALL_OW 12
35706: PUSH
35707: LD_INT 0
35709: PPUSH
35710: LD_INT 3
35712: PPUSH
35713: CALL_OW 12
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// end ;
35730: LD_VAR 0 2
35734: RET
// export function PrepareTiger ( agressivity ) ; begin
35735: LD_INT 0
35737: PPUSH
// uc_side := 0 ;
35738: LD_ADDR_OWVAR 20
35742: PUSH
35743: LD_INT 0
35745: ST_TO_ADDR
// uc_nation := 0 ;
35746: LD_ADDR_OWVAR 21
35750: PUSH
35751: LD_INT 0
35753: ST_TO_ADDR
// hc_class := class_tiger ;
35754: LD_ADDR_OWVAR 28
35758: PUSH
35759: LD_INT 14
35761: ST_TO_ADDR
// hc_gallery :=  ;
35762: LD_ADDR_OWVAR 33
35766: PUSH
35767: LD_STRING 
35769: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35770: LD_ADDR_OWVAR 35
35774: PUSH
35775: LD_VAR 0 1
35779: NEG
35780: PPUSH
35781: LD_VAR 0 1
35785: PPUSH
35786: CALL_OW 12
35790: ST_TO_ADDR
// end ;
35791: LD_VAR 0 2
35795: RET
// export function PrepareEnchidna ( ) ; begin
35796: LD_INT 0
35798: PPUSH
// uc_side := 0 ;
35799: LD_ADDR_OWVAR 20
35803: PUSH
35804: LD_INT 0
35806: ST_TO_ADDR
// uc_nation := 0 ;
35807: LD_ADDR_OWVAR 21
35811: PUSH
35812: LD_INT 0
35814: ST_TO_ADDR
// hc_class := class_baggie ;
35815: LD_ADDR_OWVAR 28
35819: PUSH
35820: LD_INT 13
35822: ST_TO_ADDR
// hc_gallery :=  ;
35823: LD_ADDR_OWVAR 33
35827: PUSH
35828: LD_STRING 
35830: ST_TO_ADDR
// end ;
35831: LD_VAR 0 1
35835: RET
// export function PrepareFrog ( ) ; begin
35836: LD_INT 0
35838: PPUSH
// uc_side := 0 ;
35839: LD_ADDR_OWVAR 20
35843: PUSH
35844: LD_INT 0
35846: ST_TO_ADDR
// uc_nation := 0 ;
35847: LD_ADDR_OWVAR 21
35851: PUSH
35852: LD_INT 0
35854: ST_TO_ADDR
// hc_class := class_frog ;
35855: LD_ADDR_OWVAR 28
35859: PUSH
35860: LD_INT 19
35862: ST_TO_ADDR
// hc_gallery :=  ;
35863: LD_ADDR_OWVAR 33
35867: PUSH
35868: LD_STRING 
35870: ST_TO_ADDR
// end ;
35871: LD_VAR 0 1
35875: RET
// export function PrepareFish ( ) ; begin
35876: LD_INT 0
35878: PPUSH
// uc_side := 0 ;
35879: LD_ADDR_OWVAR 20
35883: PUSH
35884: LD_INT 0
35886: ST_TO_ADDR
// uc_nation := 0 ;
35887: LD_ADDR_OWVAR 21
35891: PUSH
35892: LD_INT 0
35894: ST_TO_ADDR
// hc_class := class_fish ;
35895: LD_ADDR_OWVAR 28
35899: PUSH
35900: LD_INT 20
35902: ST_TO_ADDR
// hc_gallery :=  ;
35903: LD_ADDR_OWVAR 33
35907: PUSH
35908: LD_STRING 
35910: ST_TO_ADDR
// end ;
35911: LD_VAR 0 1
35915: RET
// export function PrepareBird ( ) ; begin
35916: LD_INT 0
35918: PPUSH
// uc_side := 0 ;
35919: LD_ADDR_OWVAR 20
35923: PUSH
35924: LD_INT 0
35926: ST_TO_ADDR
// uc_nation := 0 ;
35927: LD_ADDR_OWVAR 21
35931: PUSH
35932: LD_INT 0
35934: ST_TO_ADDR
// hc_class := class_phororhacos ;
35935: LD_ADDR_OWVAR 28
35939: PUSH
35940: LD_INT 18
35942: ST_TO_ADDR
// hc_gallery :=  ;
35943: LD_ADDR_OWVAR 33
35947: PUSH
35948: LD_STRING 
35950: ST_TO_ADDR
// end ;
35951: LD_VAR 0 1
35955: RET
// export function PrepareHorse ( ) ; begin
35956: LD_INT 0
35958: PPUSH
// uc_side := 0 ;
35959: LD_ADDR_OWVAR 20
35963: PUSH
35964: LD_INT 0
35966: ST_TO_ADDR
// uc_nation := 0 ;
35967: LD_ADDR_OWVAR 21
35971: PUSH
35972: LD_INT 0
35974: ST_TO_ADDR
// hc_class := class_horse ;
35975: LD_ADDR_OWVAR 28
35979: PUSH
35980: LD_INT 21
35982: ST_TO_ADDR
// hc_gallery :=  ;
35983: LD_ADDR_OWVAR 33
35987: PUSH
35988: LD_STRING 
35990: ST_TO_ADDR
// end ;
35991: LD_VAR 0 1
35995: RET
// export function PrepareMastodont ( ) ; begin
35996: LD_INT 0
35998: PPUSH
// uc_side := 0 ;
35999: LD_ADDR_OWVAR 20
36003: PUSH
36004: LD_INT 0
36006: ST_TO_ADDR
// uc_nation := 0 ;
36007: LD_ADDR_OWVAR 21
36011: PUSH
36012: LD_INT 0
36014: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36015: LD_ADDR_OWVAR 37
36019: PUSH
36020: LD_INT 31
36022: ST_TO_ADDR
// vc_control := control_rider ;
36023: LD_ADDR_OWVAR 38
36027: PUSH
36028: LD_INT 4
36030: ST_TO_ADDR
// end ;
36031: LD_VAR 0 1
36035: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
36040: PPUSH
// uc_side = 0 ;
36041: LD_ADDR_OWVAR 20
36045: PUSH
36046: LD_INT 0
36048: ST_TO_ADDR
// uc_nation = 0 ;
36049: LD_ADDR_OWVAR 21
36053: PUSH
36054: LD_INT 0
36056: ST_TO_ADDR
// InitHc_All ( ) ;
36057: CALL_OW 584
// InitVc ;
36061: CALL_OW 20
// if mastodonts then
36065: LD_VAR 0 6
36069: IFFALSE 36136
// for i = 1 to mastodonts do
36071: LD_ADDR_VAR 0 11
36075: PUSH
36076: DOUBLE
36077: LD_INT 1
36079: DEC
36080: ST_TO_ADDR
36081: LD_VAR 0 6
36085: PUSH
36086: FOR_TO
36087: IFFALSE 36134
// begin vc_chassis := 31 ;
36089: LD_ADDR_OWVAR 37
36093: PUSH
36094: LD_INT 31
36096: ST_TO_ADDR
// vc_control := control_rider ;
36097: LD_ADDR_OWVAR 38
36101: PUSH
36102: LD_INT 4
36104: ST_TO_ADDR
// animal := CreateVehicle ;
36105: LD_ADDR_VAR 0 12
36109: PUSH
36110: CALL_OW 45
36114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36115: LD_VAR 0 12
36119: PPUSH
36120: LD_VAR 0 8
36124: PPUSH
36125: LD_INT 0
36127: PPUSH
36128: CALL 38264 0 3
// end ;
36132: GO 36086
36134: POP
36135: POP
// if horses then
36136: LD_VAR 0 5
36140: IFFALSE 36207
// for i = 1 to horses do
36142: LD_ADDR_VAR 0 11
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_VAR 0 5
36156: PUSH
36157: FOR_TO
36158: IFFALSE 36205
// begin hc_class := 21 ;
36160: LD_ADDR_OWVAR 28
36164: PUSH
36165: LD_INT 21
36167: ST_TO_ADDR
// hc_gallery :=  ;
36168: LD_ADDR_OWVAR 33
36172: PUSH
36173: LD_STRING 
36175: ST_TO_ADDR
// animal := CreateHuman ;
36176: LD_ADDR_VAR 0 12
36180: PUSH
36181: CALL_OW 44
36185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36186: LD_VAR 0 12
36190: PPUSH
36191: LD_VAR 0 8
36195: PPUSH
36196: LD_INT 0
36198: PPUSH
36199: CALL 38264 0 3
// end ;
36203: GO 36157
36205: POP
36206: POP
// if birds then
36207: LD_VAR 0 1
36211: IFFALSE 36278
// for i = 1 to birds do
36213: LD_ADDR_VAR 0 11
36217: PUSH
36218: DOUBLE
36219: LD_INT 1
36221: DEC
36222: ST_TO_ADDR
36223: LD_VAR 0 1
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36276
// begin hc_class := 18 ;
36231: LD_ADDR_OWVAR 28
36235: PUSH
36236: LD_INT 18
36238: ST_TO_ADDR
// hc_gallery =  ;
36239: LD_ADDR_OWVAR 33
36243: PUSH
36244: LD_STRING 
36246: ST_TO_ADDR
// animal := CreateHuman ;
36247: LD_ADDR_VAR 0 12
36251: PUSH
36252: CALL_OW 44
36256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36257: LD_VAR 0 12
36261: PPUSH
36262: LD_VAR 0 8
36266: PPUSH
36267: LD_INT 0
36269: PPUSH
36270: CALL 38264 0 3
// end ;
36274: GO 36228
36276: POP
36277: POP
// if tigers then
36278: LD_VAR 0 2
36282: IFFALSE 36366
// for i = 1 to tigers do
36284: LD_ADDR_VAR 0 11
36288: PUSH
36289: DOUBLE
36290: LD_INT 1
36292: DEC
36293: ST_TO_ADDR
36294: LD_VAR 0 2
36298: PUSH
36299: FOR_TO
36300: IFFALSE 36364
// begin hc_class = class_tiger ;
36302: LD_ADDR_OWVAR 28
36306: PUSH
36307: LD_INT 14
36309: ST_TO_ADDR
// hc_gallery =  ;
36310: LD_ADDR_OWVAR 33
36314: PUSH
36315: LD_STRING 
36317: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36318: LD_ADDR_OWVAR 35
36322: PUSH
36323: LD_INT 7
36325: NEG
36326: PPUSH
36327: LD_INT 7
36329: PPUSH
36330: CALL_OW 12
36334: ST_TO_ADDR
// animal := CreateHuman ;
36335: LD_ADDR_VAR 0 12
36339: PUSH
36340: CALL_OW 44
36344: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36345: LD_VAR 0 12
36349: PPUSH
36350: LD_VAR 0 8
36354: PPUSH
36355: LD_INT 0
36357: PPUSH
36358: CALL 38264 0 3
// end ;
36362: GO 36299
36364: POP
36365: POP
// if apemans then
36366: LD_VAR 0 3
36370: IFFALSE 36493
// for i = 1 to apemans do
36372: LD_ADDR_VAR 0 11
36376: PUSH
36377: DOUBLE
36378: LD_INT 1
36380: DEC
36381: ST_TO_ADDR
36382: LD_VAR 0 3
36386: PUSH
36387: FOR_TO
36388: IFFALSE 36491
// begin hc_class = class_apeman ;
36390: LD_ADDR_OWVAR 28
36394: PUSH
36395: LD_INT 12
36397: ST_TO_ADDR
// hc_gallery =  ;
36398: LD_ADDR_OWVAR 33
36402: PUSH
36403: LD_STRING 
36405: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36406: LD_ADDR_OWVAR 35
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PPUSH
36415: LD_INT 2
36417: PPUSH
36418: CALL_OW 12
36422: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36423: LD_ADDR_OWVAR 31
36427: PUSH
36428: LD_INT 1
36430: PPUSH
36431: LD_INT 3
36433: PPUSH
36434: CALL_OW 12
36438: PUSH
36439: LD_INT 1
36441: PPUSH
36442: LD_INT 3
36444: PPUSH
36445: CALL_OW 12
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: ST_TO_ADDR
// animal := CreateHuman ;
36462: LD_ADDR_VAR 0 12
36466: PUSH
36467: CALL_OW 44
36471: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36472: LD_VAR 0 12
36476: PPUSH
36477: LD_VAR 0 8
36481: PPUSH
36482: LD_INT 0
36484: PPUSH
36485: CALL 38264 0 3
// end ;
36489: GO 36387
36491: POP
36492: POP
// if enchidnas then
36493: LD_VAR 0 4
36497: IFFALSE 36564
// for i = 1 to enchidnas do
36499: LD_ADDR_VAR 0 11
36503: PUSH
36504: DOUBLE
36505: LD_INT 1
36507: DEC
36508: ST_TO_ADDR
36509: LD_VAR 0 4
36513: PUSH
36514: FOR_TO
36515: IFFALSE 36562
// begin hc_class = 13 ;
36517: LD_ADDR_OWVAR 28
36521: PUSH
36522: LD_INT 13
36524: ST_TO_ADDR
// hc_gallery =  ;
36525: LD_ADDR_OWVAR 33
36529: PUSH
36530: LD_STRING 
36532: ST_TO_ADDR
// animal := CreateHuman ;
36533: LD_ADDR_VAR 0 12
36537: PUSH
36538: CALL_OW 44
36542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36543: LD_VAR 0 12
36547: PPUSH
36548: LD_VAR 0 8
36552: PPUSH
36553: LD_INT 0
36555: PPUSH
36556: CALL 38264 0 3
// end ;
36560: GO 36514
36562: POP
36563: POP
// if fishes then
36564: LD_VAR 0 7
36568: IFFALSE 36635
// for i = 1 to fishes do
36570: LD_ADDR_VAR 0 11
36574: PUSH
36575: DOUBLE
36576: LD_INT 1
36578: DEC
36579: ST_TO_ADDR
36580: LD_VAR 0 7
36584: PUSH
36585: FOR_TO
36586: IFFALSE 36633
// begin hc_class = 20 ;
36588: LD_ADDR_OWVAR 28
36592: PUSH
36593: LD_INT 20
36595: ST_TO_ADDR
// hc_gallery =  ;
36596: LD_ADDR_OWVAR 33
36600: PUSH
36601: LD_STRING 
36603: ST_TO_ADDR
// animal := CreateHuman ;
36604: LD_ADDR_VAR 0 12
36608: PUSH
36609: CALL_OW 44
36613: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36614: LD_VAR 0 12
36618: PPUSH
36619: LD_VAR 0 9
36623: PPUSH
36624: LD_INT 0
36626: PPUSH
36627: CALL 38264 0 3
// end ;
36631: GO 36585
36633: POP
36634: POP
// end ;
36635: LD_VAR 0 10
36639: RET
// export function WantHeal ( sci , unit ) ; begin
36640: LD_INT 0
36642: PPUSH
// if GetTaskList ( sci ) > 0 then
36643: LD_VAR 0 1
36647: PPUSH
36648: CALL_OW 437
36652: PUSH
36653: LD_INT 0
36655: GREATER
36656: IFFALSE 36726
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36658: LD_VAR 0 1
36662: PPUSH
36663: CALL_OW 437
36667: PUSH
36668: LD_INT 1
36670: ARRAY
36671: PUSH
36672: LD_INT 1
36674: ARRAY
36675: PUSH
36676: LD_STRING l
36678: EQUAL
36679: PUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: CALL_OW 437
36689: PUSH
36690: LD_INT 1
36692: ARRAY
36693: PUSH
36694: LD_INT 4
36696: ARRAY
36697: PUSH
36698: LD_VAR 0 2
36702: EQUAL
36703: AND
36704: IFFALSE 36716
// result := true else
36706: LD_ADDR_VAR 0 3
36710: PUSH
36711: LD_INT 1
36713: ST_TO_ADDR
36714: GO 36724
// result := false ;
36716: LD_ADDR_VAR 0 3
36720: PUSH
36721: LD_INT 0
36723: ST_TO_ADDR
// end else
36724: GO 36734
// result := false ;
36726: LD_ADDR_VAR 0 3
36730: PUSH
36731: LD_INT 0
36733: ST_TO_ADDR
// end ;
36734: LD_VAR 0 3
36738: RET
// export function HealTarget ( sci ) ; begin
36739: LD_INT 0
36741: PPUSH
// if not sci then
36742: LD_VAR 0 1
36746: NOT
36747: IFFALSE 36751
// exit ;
36749: GO 36816
// result := 0 ;
36751: LD_ADDR_VAR 0 2
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// if GetTaskList ( sci ) then
36759: LD_VAR 0 1
36763: PPUSH
36764: CALL_OW 437
36768: IFFALSE 36816
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36770: LD_VAR 0 1
36774: PPUSH
36775: CALL_OW 437
36779: PUSH
36780: LD_INT 1
36782: ARRAY
36783: PUSH
36784: LD_INT 1
36786: ARRAY
36787: PUSH
36788: LD_STRING l
36790: EQUAL
36791: IFFALSE 36816
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36793: LD_ADDR_VAR 0 2
36797: PUSH
36798: LD_VAR 0 1
36802: PPUSH
36803: CALL_OW 437
36807: PUSH
36808: LD_INT 1
36810: ARRAY
36811: PUSH
36812: LD_INT 4
36814: ARRAY
36815: ST_TO_ADDR
// end ;
36816: LD_VAR 0 2
36820: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36821: LD_INT 0
36823: PPUSH
36824: PPUSH
36825: PPUSH
36826: PPUSH
// if not base_units then
36827: LD_VAR 0 1
36831: NOT
36832: IFFALSE 36836
// exit ;
36834: GO 36923
// result := false ;
36836: LD_ADDR_VAR 0 2
36840: PUSH
36841: LD_INT 0
36843: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36844: LD_ADDR_VAR 0 5
36848: PUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: LD_INT 21
36856: PUSH
36857: LD_INT 3
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PPUSH
36864: CALL_OW 72
36868: ST_TO_ADDR
// if not tmp then
36869: LD_VAR 0 5
36873: NOT
36874: IFFALSE 36878
// exit ;
36876: GO 36923
// for i in tmp do
36878: LD_ADDR_VAR 0 3
36882: PUSH
36883: LD_VAR 0 5
36887: PUSH
36888: FOR_IN
36889: IFFALSE 36921
// begin result := EnemyInRange ( i , 22 ) ;
36891: LD_ADDR_VAR 0 2
36895: PUSH
36896: LD_VAR 0 3
36900: PPUSH
36901: LD_INT 22
36903: PPUSH
36904: CALL 34510 0 2
36908: ST_TO_ADDR
// if result then
36909: LD_VAR 0 2
36913: IFFALSE 36919
// exit ;
36915: POP
36916: POP
36917: GO 36923
// end ;
36919: GO 36888
36921: POP
36922: POP
// end ;
36923: LD_VAR 0 2
36927: RET
// export function FilterByTag ( units , tag ) ; begin
36928: LD_INT 0
36930: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_VAR 0 1
36940: PPUSH
36941: LD_INT 120
36943: PUSH
36944: LD_VAR 0 2
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PPUSH
36953: CALL_OW 72
36957: ST_TO_ADDR
// end ;
36958: LD_VAR 0 3
36962: RET
// export function IsDriver ( un ) ; begin
36963: LD_INT 0
36965: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36966: LD_ADDR_VAR 0 2
36970: PUSH
36971: LD_VAR 0 1
36975: PUSH
36976: LD_INT 55
36978: PUSH
36979: EMPTY
36980: LIST
36981: PPUSH
36982: CALL_OW 69
36986: IN
36987: ST_TO_ADDR
// end ;
36988: LD_VAR 0 2
36992: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36993: LD_INT 0
36995: PPUSH
36996: PPUSH
// list := [ ] ;
36997: LD_ADDR_VAR 0 5
37001: PUSH
37002: EMPTY
37003: ST_TO_ADDR
// case d of 0 :
37004: LD_VAR 0 3
37008: PUSH
37009: LD_INT 0
37011: DOUBLE
37012: EQUAL
37013: IFTRUE 37017
37015: GO 37150
37017: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37018: LD_ADDR_VAR 0 5
37022: PUSH
37023: LD_VAR 0 1
37027: PUSH
37028: LD_INT 4
37030: MINUS
37031: PUSH
37032: LD_VAR 0 2
37036: PUSH
37037: LD_INT 4
37039: MINUS
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: PUSH
37049: LD_VAR 0 1
37053: PUSH
37054: LD_INT 3
37056: MINUS
37057: PUSH
37058: LD_VAR 0 2
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: LIST
37070: PUSH
37071: LD_VAR 0 1
37075: PUSH
37076: LD_INT 4
37078: PLUS
37079: PUSH
37080: LD_VAR 0 2
37084: PUSH
37085: LD_INT 4
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: PUSH
37093: LD_VAR 0 1
37097: PUSH
37098: LD_INT 3
37100: PLUS
37101: PUSH
37102: LD_VAR 0 2
37106: PUSH
37107: LD_INT 3
37109: PLUS
37110: PUSH
37111: LD_INT 5
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: PUSH
37119: LD_VAR 0 1
37123: PUSH
37124: LD_VAR 0 2
37128: PUSH
37129: LD_INT 4
37131: PLUS
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: ST_TO_ADDR
// end ; 1 :
37148: GO 37848
37150: LD_INT 1
37152: DOUBLE
37153: EQUAL
37154: IFTRUE 37158
37156: GO 37291
37158: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37159: LD_ADDR_VAR 0 5
37163: PUSH
37164: LD_VAR 0 1
37168: PUSH
37169: LD_VAR 0 2
37173: PUSH
37174: LD_INT 4
37176: MINUS
37177: PUSH
37178: LD_INT 3
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: PUSH
37186: LD_VAR 0 1
37190: PUSH
37191: LD_INT 3
37193: MINUS
37194: PUSH
37195: LD_VAR 0 2
37199: PUSH
37200: LD_INT 3
37202: MINUS
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: PUSH
37212: LD_VAR 0 1
37216: PUSH
37217: LD_INT 4
37219: MINUS
37220: PUSH
37221: LD_VAR 0 2
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: PUSH
37234: LD_VAR 0 1
37238: PUSH
37239: LD_VAR 0 2
37243: PUSH
37244: LD_INT 3
37246: PLUS
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: PUSH
37256: LD_VAR 0 1
37260: PUSH
37261: LD_INT 4
37263: PLUS
37264: PUSH
37265: LD_VAR 0 2
37269: PUSH
37270: LD_INT 4
37272: PLUS
37273: PUSH
37274: LD_INT 5
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// end ; 2 :
37289: GO 37848
37291: LD_INT 2
37293: DOUBLE
37294: EQUAL
37295: IFTRUE 37299
37297: GO 37428
37299: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37300: LD_ADDR_VAR 0 5
37304: PUSH
37305: LD_VAR 0 1
37309: PUSH
37310: LD_VAR 0 2
37314: PUSH
37315: LD_INT 3
37317: MINUS
37318: PUSH
37319: LD_INT 3
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: PUSH
37327: LD_VAR 0 1
37331: PUSH
37332: LD_INT 4
37334: PLUS
37335: PUSH
37336: LD_VAR 0 2
37340: PUSH
37341: LD_INT 4
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: PUSH
37349: LD_VAR 0 1
37353: PUSH
37354: LD_VAR 0 2
37358: PUSH
37359: LD_INT 4
37361: PLUS
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: PUSH
37371: LD_VAR 0 1
37375: PUSH
37376: LD_INT 3
37378: MINUS
37379: PUSH
37380: LD_VAR 0 2
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: PUSH
37393: LD_VAR 0 1
37397: PUSH
37398: LD_INT 4
37400: MINUS
37401: PUSH
37402: LD_VAR 0 2
37406: PUSH
37407: LD_INT 4
37409: MINUS
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: ST_TO_ADDR
// end ; 3 :
37426: GO 37848
37428: LD_INT 3
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37436
37434: GO 37569
37436: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37437: LD_ADDR_VAR 0 5
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: LD_INT 3
37449: PLUS
37450: PUSH
37451: LD_VAR 0 2
37455: PUSH
37456: LD_INT 4
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: PUSH
37464: LD_VAR 0 1
37468: PUSH
37469: LD_INT 4
37471: PLUS
37472: PUSH
37473: LD_VAR 0 2
37477: PUSH
37478: LD_INT 4
37480: PLUS
37481: PUSH
37482: LD_INT 5
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PUSH
37490: LD_VAR 0 1
37494: PUSH
37495: LD_INT 4
37497: MINUS
37498: PUSH
37499: LD_VAR 0 2
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: PUSH
37512: LD_VAR 0 1
37516: PUSH
37517: LD_VAR 0 2
37521: PUSH
37522: LD_INT 4
37524: MINUS
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: PUSH
37534: LD_VAR 0 1
37538: PUSH
37539: LD_INT 3
37541: MINUS
37542: PUSH
37543: LD_VAR 0 2
37547: PUSH
37548: LD_INT 3
37550: MINUS
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: ST_TO_ADDR
// end ; 4 :
37567: GO 37848
37569: LD_INT 4
37571: DOUBLE
37572: EQUAL
37573: IFTRUE 37577
37575: GO 37710
37577: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37578: LD_ADDR_VAR 0 5
37582: PUSH
37583: LD_VAR 0 1
37587: PUSH
37588: LD_VAR 0 2
37592: PUSH
37593: LD_INT 4
37595: PLUS
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: PUSH
37605: LD_VAR 0 1
37609: PUSH
37610: LD_INT 3
37612: PLUS
37613: PUSH
37614: LD_VAR 0 2
37618: PUSH
37619: LD_INT 3
37621: PLUS
37622: PUSH
37623: LD_INT 5
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: LD_VAR 0 1
37635: PUSH
37636: LD_INT 4
37638: PLUS
37639: PUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_INT 4
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: PUSH
37653: LD_VAR 0 1
37657: PUSH
37658: LD_VAR 0 2
37662: PUSH
37663: LD_INT 3
37665: MINUS
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: PUSH
37675: LD_VAR 0 1
37679: PUSH
37680: LD_INT 4
37682: MINUS
37683: PUSH
37684: LD_VAR 0 2
37688: PUSH
37689: LD_INT 4
37691: MINUS
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// end ; 5 :
37708: GO 37848
37710: LD_INT 5
37712: DOUBLE
37713: EQUAL
37714: IFTRUE 37718
37716: GO 37847
37718: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37719: LD_ADDR_VAR 0 5
37723: PUSH
37724: LD_VAR 0 1
37728: PUSH
37729: LD_INT 4
37731: MINUS
37732: PUSH
37733: LD_VAR 0 2
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: PUSH
37746: LD_VAR 0 1
37750: PUSH
37751: LD_VAR 0 2
37755: PUSH
37756: LD_INT 4
37758: MINUS
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: PUSH
37768: LD_VAR 0 1
37772: PUSH
37773: LD_INT 4
37775: PLUS
37776: PUSH
37777: LD_VAR 0 2
37781: PUSH
37782: LD_INT 4
37784: PLUS
37785: PUSH
37786: LD_INT 5
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: PUSH
37794: LD_VAR 0 1
37798: PUSH
37799: LD_INT 3
37801: PLUS
37802: PUSH
37803: LD_VAR 0 2
37807: PUSH
37808: LD_INT 4
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: PUSH
37816: LD_VAR 0 1
37820: PUSH
37821: LD_VAR 0 2
37825: PUSH
37826: LD_INT 3
37828: PLUS
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
// end ; end ;
37845: GO 37848
37847: POP
// result := list ;
37848: LD_ADDR_VAR 0 4
37852: PUSH
37853: LD_VAR 0 5
37857: ST_TO_ADDR
// end ;
37858: LD_VAR 0 4
37862: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37863: LD_INT 0
37865: PPUSH
37866: PPUSH
37867: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37868: LD_VAR 0 1
37872: NOT
37873: PUSH
37874: LD_VAR 0 2
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: LD_INT 4
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: IN
37897: NOT
37898: OR
37899: IFFALSE 37903
// exit ;
37901: GO 37986
// tmp := [ ] ;
37903: LD_ADDR_VAR 0 5
37907: PUSH
37908: EMPTY
37909: ST_TO_ADDR
// for i in units do
37910: LD_ADDR_VAR 0 4
37914: PUSH
37915: LD_VAR 0 1
37919: PUSH
37920: FOR_IN
37921: IFFALSE 37955
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37923: LD_ADDR_VAR 0 5
37927: PUSH
37928: LD_VAR 0 5
37932: PPUSH
37933: LD_VAR 0 4
37937: PPUSH
37938: LD_VAR 0 2
37942: PPUSH
37943: CALL_OW 259
37947: PPUSH
37948: CALL 39359 0 2
37952: ST_TO_ADDR
37953: GO 37920
37955: POP
37956: POP
// if not tmp then
37957: LD_VAR 0 5
37961: NOT
37962: IFFALSE 37966
// exit ;
37964: GO 37986
// result := SortListByListDesc ( units , tmp ) ;
37966: LD_ADDR_VAR 0 3
37970: PUSH
37971: LD_VAR 0 1
37975: PPUSH
37976: LD_VAR 0 5
37980: PPUSH
37981: CALL_OW 77
37985: ST_TO_ADDR
// end ;
37986: LD_VAR 0 3
37990: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37991: LD_INT 0
37993: PPUSH
37994: PPUSH
37995: PPUSH
// result := false ;
37996: LD_ADDR_VAR 0 3
38000: PUSH
38001: LD_INT 0
38003: ST_TO_ADDR
// if not building then
38004: LD_VAR 0 2
38008: NOT
38009: IFFALSE 38013
// exit ;
38011: GO 38151
// x := GetX ( building ) ;
38013: LD_ADDR_VAR 0 4
38017: PUSH
38018: LD_VAR 0 2
38022: PPUSH
38023: CALL_OW 250
38027: ST_TO_ADDR
// y := GetY ( building ) ;
38028: LD_ADDR_VAR 0 5
38032: PUSH
38033: LD_VAR 0 2
38037: PPUSH
38038: CALL_OW 251
38042: ST_TO_ADDR
// if not x or not y then
38043: LD_VAR 0 4
38047: NOT
38048: PUSH
38049: LD_VAR 0 5
38053: NOT
38054: OR
38055: IFFALSE 38059
// exit ;
38057: GO 38151
// if GetTaskList ( unit ) then
38059: LD_VAR 0 1
38063: PPUSH
38064: CALL_OW 437
38068: IFFALSE 38151
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38070: LD_STRING e
38072: PUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 437
38082: PUSH
38083: LD_INT 1
38085: ARRAY
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: EQUAL
38091: PUSH
38092: LD_VAR 0 4
38096: PUSH
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 437
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: PUSH
38111: LD_INT 2
38113: ARRAY
38114: EQUAL
38115: AND
38116: PUSH
38117: LD_VAR 0 5
38121: PUSH
38122: LD_VAR 0 1
38126: PPUSH
38127: CALL_OW 437
38131: PUSH
38132: LD_INT 1
38134: ARRAY
38135: PUSH
38136: LD_INT 3
38138: ARRAY
38139: EQUAL
38140: AND
38141: IFFALSE 38151
// result := true end ;
38143: LD_ADDR_VAR 0 3
38147: PUSH
38148: LD_INT 1
38150: ST_TO_ADDR
// end ;
38151: LD_VAR 0 3
38155: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38156: LD_INT 0
38158: PPUSH
// result := false ;
38159: LD_ADDR_VAR 0 4
38163: PUSH
38164: LD_INT 0
38166: ST_TO_ADDR
// if GetTaskList ( unit ) then
38167: LD_VAR 0 1
38171: PPUSH
38172: CALL_OW 437
38176: IFFALSE 38259
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38178: LD_STRING M
38180: PUSH
38181: LD_VAR 0 1
38185: PPUSH
38186: CALL_OW 437
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: PUSH
38195: LD_INT 1
38197: ARRAY
38198: EQUAL
38199: PUSH
38200: LD_VAR 0 2
38204: PUSH
38205: LD_VAR 0 1
38209: PPUSH
38210: CALL_OW 437
38214: PUSH
38215: LD_INT 1
38217: ARRAY
38218: PUSH
38219: LD_INT 2
38221: ARRAY
38222: EQUAL
38223: AND
38224: PUSH
38225: LD_VAR 0 3
38229: PUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 437
38239: PUSH
38240: LD_INT 1
38242: ARRAY
38243: PUSH
38244: LD_INT 3
38246: ARRAY
38247: EQUAL
38248: AND
38249: IFFALSE 38259
// result := true ;
38251: LD_ADDR_VAR 0 4
38255: PUSH
38256: LD_INT 1
38258: ST_TO_ADDR
// end ; end ;
38259: LD_VAR 0 4
38263: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38264: LD_INT 0
38266: PPUSH
38267: PPUSH
38268: PPUSH
38269: PPUSH
// if not unit or not area then
38270: LD_VAR 0 1
38274: NOT
38275: PUSH
38276: LD_VAR 0 2
38280: NOT
38281: OR
38282: IFFALSE 38286
// exit ;
38284: GO 38462
// tmp := AreaToList ( area , i ) ;
38286: LD_ADDR_VAR 0 6
38290: PUSH
38291: LD_VAR 0 2
38295: PPUSH
38296: LD_VAR 0 5
38300: PPUSH
38301: CALL_OW 517
38305: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38306: LD_ADDR_VAR 0 5
38310: PUSH
38311: DOUBLE
38312: LD_INT 1
38314: DEC
38315: ST_TO_ADDR
38316: LD_VAR 0 6
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PUSH
38325: FOR_TO
38326: IFFALSE 38460
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38328: LD_ADDR_VAR 0 7
38332: PUSH
38333: LD_VAR 0 6
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PUSH
38342: LD_VAR 0 5
38346: ARRAY
38347: PUSH
38348: LD_VAR 0 6
38352: PUSH
38353: LD_INT 2
38355: ARRAY
38356: PUSH
38357: LD_VAR 0 5
38361: ARRAY
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38367: LD_INT 92
38369: PUSH
38370: LD_VAR 0 7
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PUSH
38379: LD_VAR 0 7
38383: PUSH
38384: LD_INT 2
38386: ARRAY
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: PPUSH
38397: CALL_OW 69
38401: PUSH
38402: LD_INT 0
38404: EQUAL
38405: IFFALSE 38458
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38407: LD_VAR 0 1
38411: PPUSH
38412: LD_VAR 0 7
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PPUSH
38421: LD_VAR 0 7
38425: PUSH
38426: LD_INT 2
38428: ARRAY
38429: PPUSH
38430: LD_VAR 0 3
38434: PPUSH
38435: CALL_OW 48
// result := IsPlaced ( unit ) ;
38439: LD_ADDR_VAR 0 4
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 305
38453: ST_TO_ADDR
// exit ;
38454: POP
38455: POP
38456: GO 38462
// end ; end ;
38458: GO 38325
38460: POP
38461: POP
// end ;
38462: LD_VAR 0 4
38466: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38467: LD_INT 0
38469: PPUSH
38470: PPUSH
38471: PPUSH
// if not side or side > 8 then
38472: LD_VAR 0 1
38476: NOT
38477: PUSH
38478: LD_VAR 0 1
38482: PUSH
38483: LD_INT 8
38485: GREATER
38486: OR
38487: IFFALSE 38491
// exit ;
38489: GO 38678
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38491: LD_ADDR_VAR 0 4
38495: PUSH
38496: LD_INT 22
38498: PUSH
38499: LD_VAR 0 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 21
38510: PUSH
38511: LD_INT 3
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PPUSH
38522: CALL_OW 69
38526: ST_TO_ADDR
// if not tmp then
38527: LD_VAR 0 4
38531: NOT
38532: IFFALSE 38536
// exit ;
38534: GO 38678
// enable_addtolog := true ;
38536: LD_ADDR_OWVAR 81
38540: PUSH
38541: LD_INT 1
38543: ST_TO_ADDR
// AddToLog ( [ ) ;
38544: LD_STRING [
38546: PPUSH
38547: CALL_OW 561
// for i in tmp do
38551: LD_ADDR_VAR 0 3
38555: PUSH
38556: LD_VAR 0 4
38560: PUSH
38561: FOR_IN
38562: IFFALSE 38669
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38564: LD_STRING [
38566: PUSH
38567: LD_VAR 0 3
38571: PPUSH
38572: CALL_OW 266
38576: STR
38577: PUSH
38578: LD_STRING , 
38580: STR
38581: PUSH
38582: LD_VAR 0 3
38586: PPUSH
38587: CALL_OW 250
38591: STR
38592: PUSH
38593: LD_STRING , 
38595: STR
38596: PUSH
38597: LD_VAR 0 3
38601: PPUSH
38602: CALL_OW 251
38606: STR
38607: PUSH
38608: LD_STRING , 
38610: STR
38611: PUSH
38612: LD_VAR 0 3
38616: PPUSH
38617: CALL_OW 254
38621: STR
38622: PUSH
38623: LD_STRING , 
38625: STR
38626: PUSH
38627: LD_VAR 0 3
38631: PPUSH
38632: LD_INT 1
38634: PPUSH
38635: CALL_OW 268
38639: STR
38640: PUSH
38641: LD_STRING , 
38643: STR
38644: PUSH
38645: LD_VAR 0 3
38649: PPUSH
38650: LD_INT 2
38652: PPUSH
38653: CALL_OW 268
38657: STR
38658: PUSH
38659: LD_STRING ],
38661: STR
38662: PPUSH
38663: CALL_OW 561
// end ;
38667: GO 38561
38669: POP
38670: POP
// AddToLog ( ]; ) ;
38671: LD_STRING ];
38673: PPUSH
38674: CALL_OW 561
// end ;
38678: LD_VAR 0 2
38682: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
// if not area or not rate or not max then
38690: LD_VAR 0 1
38694: NOT
38695: PUSH
38696: LD_VAR 0 2
38700: NOT
38701: OR
38702: PUSH
38703: LD_VAR 0 4
38707: NOT
38708: OR
38709: IFFALSE 38713
// exit ;
38711: GO 38902
// while 1 do
38713: LD_INT 1
38715: IFFALSE 38902
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38717: LD_ADDR_VAR 0 9
38721: PUSH
38722: LD_VAR 0 1
38726: PPUSH
38727: LD_INT 1
38729: PPUSH
38730: CALL_OW 287
38734: PUSH
38735: LD_INT 10
38737: MUL
38738: ST_TO_ADDR
// r := rate / 10 ;
38739: LD_ADDR_VAR 0 7
38743: PUSH
38744: LD_VAR 0 2
38748: PUSH
38749: LD_INT 10
38751: DIVREAL
38752: ST_TO_ADDR
// time := 1 1$00 ;
38753: LD_ADDR_VAR 0 8
38757: PUSH
38758: LD_INT 2100
38760: ST_TO_ADDR
// if amount < min then
38761: LD_VAR 0 9
38765: PUSH
38766: LD_VAR 0 3
38770: LESS
38771: IFFALSE 38789
// r := r * 2 else
38773: LD_ADDR_VAR 0 7
38777: PUSH
38778: LD_VAR 0 7
38782: PUSH
38783: LD_INT 2
38785: MUL
38786: ST_TO_ADDR
38787: GO 38815
// if amount > max then
38789: LD_VAR 0 9
38793: PUSH
38794: LD_VAR 0 4
38798: GREATER
38799: IFFALSE 38815
// r := r / 2 ;
38801: LD_ADDR_VAR 0 7
38805: PUSH
38806: LD_VAR 0 7
38810: PUSH
38811: LD_INT 2
38813: DIVREAL
38814: ST_TO_ADDR
// time := time / r ;
38815: LD_ADDR_VAR 0 8
38819: PUSH
38820: LD_VAR 0 8
38824: PUSH
38825: LD_VAR 0 7
38829: DIVREAL
38830: ST_TO_ADDR
// if time < 0 then
38831: LD_VAR 0 8
38835: PUSH
38836: LD_INT 0
38838: LESS
38839: IFFALSE 38856
// time := time * - 1 ;
38841: LD_ADDR_VAR 0 8
38845: PUSH
38846: LD_VAR 0 8
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: MUL
38855: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38856: LD_VAR 0 8
38860: PUSH
38861: LD_INT 35
38863: PPUSH
38864: LD_INT 875
38866: PPUSH
38867: CALL_OW 12
38871: PLUS
38872: PPUSH
38873: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38877: LD_INT 1
38879: PPUSH
38880: LD_INT 5
38882: PPUSH
38883: CALL_OW 12
38887: PPUSH
38888: LD_VAR 0 1
38892: PPUSH
38893: LD_INT 1
38895: PPUSH
38896: CALL_OW 55
// end ;
38900: GO 38713
// end ;
38902: LD_VAR 0 5
38906: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38907: LD_INT 0
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
// if not turrets or not factories then
38917: LD_VAR 0 1
38921: NOT
38922: PUSH
38923: LD_VAR 0 2
38927: NOT
38928: OR
38929: IFFALSE 38933
// exit ;
38931: GO 39240
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38933: LD_ADDR_VAR 0 10
38937: PUSH
38938: LD_INT 5
38940: PUSH
38941: LD_INT 6
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: LD_INT 4
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 3
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 24
38975: PUSH
38976: LD_INT 25
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 23
38985: PUSH
38986: LD_INT 27
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 42
38999: PUSH
39000: LD_INT 43
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 44
39009: PUSH
39010: LD_INT 46
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 45
39019: PUSH
39020: LD_INT 47
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: ST_TO_ADDR
// result := [ ] ;
39037: LD_ADDR_VAR 0 3
39041: PUSH
39042: EMPTY
39043: ST_TO_ADDR
// for i in turrets do
39044: LD_ADDR_VAR 0 4
39048: PUSH
39049: LD_VAR 0 1
39053: PUSH
39054: FOR_IN
39055: IFFALSE 39238
// begin nat := GetNation ( i ) ;
39057: LD_ADDR_VAR 0 7
39061: PUSH
39062: LD_VAR 0 4
39066: PPUSH
39067: CALL_OW 248
39071: ST_TO_ADDR
// weapon := 0 ;
39072: LD_ADDR_VAR 0 8
39076: PUSH
39077: LD_INT 0
39079: ST_TO_ADDR
// if not nat then
39080: LD_VAR 0 7
39084: NOT
39085: IFFALSE 39089
// continue ;
39087: GO 39054
// for j in list [ nat ] do
39089: LD_ADDR_VAR 0 5
39093: PUSH
39094: LD_VAR 0 10
39098: PUSH
39099: LD_VAR 0 7
39103: ARRAY
39104: PUSH
39105: FOR_IN
39106: IFFALSE 39147
// if GetBWeapon ( i ) = j [ 1 ] then
39108: LD_VAR 0 4
39112: PPUSH
39113: CALL_OW 269
39117: PUSH
39118: LD_VAR 0 5
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: EQUAL
39127: IFFALSE 39145
// begin weapon := j [ 2 ] ;
39129: LD_ADDR_VAR 0 8
39133: PUSH
39134: LD_VAR 0 5
39138: PUSH
39139: LD_INT 2
39141: ARRAY
39142: ST_TO_ADDR
// break ;
39143: GO 39147
// end ;
39145: GO 39105
39147: POP
39148: POP
// if not weapon then
39149: LD_VAR 0 8
39153: NOT
39154: IFFALSE 39158
// continue ;
39156: GO 39054
// for k in factories do
39158: LD_ADDR_VAR 0 6
39162: PUSH
39163: LD_VAR 0 2
39167: PUSH
39168: FOR_IN
39169: IFFALSE 39234
// begin weapons := AvailableWeaponList ( k ) ;
39171: LD_ADDR_VAR 0 9
39175: PUSH
39176: LD_VAR 0 6
39180: PPUSH
39181: CALL_OW 478
39185: ST_TO_ADDR
// if not weapons then
39186: LD_VAR 0 9
39190: NOT
39191: IFFALSE 39195
// continue ;
39193: GO 39168
// if weapon in weapons then
39195: LD_VAR 0 8
39199: PUSH
39200: LD_VAR 0 9
39204: IN
39205: IFFALSE 39232
// begin result := [ i , weapon ] ;
39207: LD_ADDR_VAR 0 3
39211: PUSH
39212: LD_VAR 0 4
39216: PUSH
39217: LD_VAR 0 8
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// exit ;
39226: POP
39227: POP
39228: POP
39229: POP
39230: GO 39240
// end ; end ;
39232: GO 39168
39234: POP
39235: POP
// end ;
39236: GO 39054
39238: POP
39239: POP
// end ;
39240: LD_VAR 0 3
39244: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39245: LD_INT 0
39247: PPUSH
// if not side or side > 8 then
39248: LD_VAR 0 3
39252: NOT
39253: PUSH
39254: LD_VAR 0 3
39258: PUSH
39259: LD_INT 8
39261: GREATER
39262: OR
39263: IFFALSE 39267
// exit ;
39265: GO 39326
// if not range then
39267: LD_VAR 0 4
39271: NOT
39272: IFFALSE 39283
// range := - 12 ;
39274: LD_ADDR_VAR 0 4
39278: PUSH
39279: LD_INT 12
39281: NEG
39282: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39283: LD_VAR 0 1
39287: PPUSH
39288: LD_VAR 0 2
39292: PPUSH
39293: LD_VAR 0 3
39297: PPUSH
39298: LD_VAR 0 4
39302: PPUSH
39303: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39307: LD_VAR 0 1
39311: PPUSH
39312: LD_VAR 0 2
39316: PPUSH
39317: LD_VAR 0 3
39321: PPUSH
39322: CALL_OW 331
// end ;
39326: LD_VAR 0 5
39330: RET
// export function Video ( mode ) ; begin
39331: LD_INT 0
39333: PPUSH
// ingame_video = mode ;
39334: LD_ADDR_OWVAR 52
39338: PUSH
39339: LD_VAR 0 1
39343: ST_TO_ADDR
// interface_hidden = mode ;
39344: LD_ADDR_OWVAR 54
39348: PUSH
39349: LD_VAR 0 1
39353: ST_TO_ADDR
// end ;
39354: LD_VAR 0 2
39358: RET
// export function Join ( array , element ) ; begin
39359: LD_INT 0
39361: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39362: LD_ADDR_VAR 0 3
39366: PUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: LD_VAR 0 1
39376: PUSH
39377: LD_INT 1
39379: PLUS
39380: PPUSH
39381: LD_VAR 0 2
39385: PPUSH
39386: CALL_OW 1
39390: ST_TO_ADDR
// end ;
39391: LD_VAR 0 3
39395: RET
// export function JoinUnion ( array , element ) ; begin
39396: LD_INT 0
39398: PPUSH
// result := array union element ;
39399: LD_ADDR_VAR 0 3
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_VAR 0 2
39413: UNION
39414: ST_TO_ADDR
// end ;
39415: LD_VAR 0 3
39419: RET
// export function GetBehemoths ( side ) ; begin
39420: LD_INT 0
39422: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39423: LD_ADDR_VAR 0 2
39427: PUSH
39428: LD_INT 22
39430: PUSH
39431: LD_VAR 0 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 31
39442: PUSH
39443: LD_INT 25
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PPUSH
39454: CALL_OW 69
39458: ST_TO_ADDR
// end ;
39459: LD_VAR 0 2
39463: RET
// export function Shuffle ( array ) ; var i , index ; begin
39464: LD_INT 0
39466: PPUSH
39467: PPUSH
39468: PPUSH
// result := [ ] ;
39469: LD_ADDR_VAR 0 2
39473: PUSH
39474: EMPTY
39475: ST_TO_ADDR
// if not array then
39476: LD_VAR 0 1
39480: NOT
39481: IFFALSE 39485
// exit ;
39483: GO 39584
// Randomize ;
39485: CALL_OW 10
// for i = array downto 1 do
39489: LD_ADDR_VAR 0 3
39493: PUSH
39494: DOUBLE
39495: LD_VAR 0 1
39499: INC
39500: ST_TO_ADDR
39501: LD_INT 1
39503: PUSH
39504: FOR_DOWNTO
39505: IFFALSE 39582
// begin index := rand ( 1 , array ) ;
39507: LD_ADDR_VAR 0 4
39511: PUSH
39512: LD_INT 1
39514: PPUSH
39515: LD_VAR 0 1
39519: PPUSH
39520: CALL_OW 12
39524: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39525: LD_ADDR_VAR 0 2
39529: PUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: LD_VAR 0 2
39539: PUSH
39540: LD_INT 1
39542: PLUS
39543: PPUSH
39544: LD_VAR 0 1
39548: PUSH
39549: LD_VAR 0 4
39553: ARRAY
39554: PPUSH
39555: CALL_OW 2
39559: ST_TO_ADDR
// array := Delete ( array , index ) ;
39560: LD_ADDR_VAR 0 1
39564: PUSH
39565: LD_VAR 0 1
39569: PPUSH
39570: LD_VAR 0 4
39574: PPUSH
39575: CALL_OW 3
39579: ST_TO_ADDR
// end ;
39580: GO 39504
39582: POP
39583: POP
// end ;
39584: LD_VAR 0 2
39588: RET
// export function GetBaseMaterials ( base ) ; begin
39589: LD_INT 0
39591: PPUSH
// result := [ 0 , 0 , 0 ] ;
39592: LD_ADDR_VAR 0 2
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// if not base then
39611: LD_VAR 0 1
39615: NOT
39616: IFFALSE 39620
// exit ;
39618: GO 39669
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39620: LD_ADDR_VAR 0 2
39624: PUSH
39625: LD_VAR 0 1
39629: PPUSH
39630: LD_INT 1
39632: PPUSH
39633: CALL_OW 275
39637: PUSH
39638: LD_VAR 0 1
39642: PPUSH
39643: LD_INT 2
39645: PPUSH
39646: CALL_OW 275
39650: PUSH
39651: LD_VAR 0 1
39655: PPUSH
39656: LD_INT 3
39658: PPUSH
39659: CALL_OW 275
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: ST_TO_ADDR
// end ;
39669: LD_VAR 0 2
39673: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39674: LD_INT 0
39676: PPUSH
39677: PPUSH
// result := array ;
39678: LD_ADDR_VAR 0 3
39682: PUSH
39683: LD_VAR 0 1
39687: ST_TO_ADDR
// if size >= result then
39688: LD_VAR 0 2
39692: PUSH
39693: LD_VAR 0 3
39697: GREATEREQUAL
39698: IFFALSE 39702
// exit ;
39700: GO 39752
// if size then
39702: LD_VAR 0 2
39706: IFFALSE 39752
// for i := array downto size do
39708: LD_ADDR_VAR 0 4
39712: PUSH
39713: DOUBLE
39714: LD_VAR 0 1
39718: INC
39719: ST_TO_ADDR
39720: LD_VAR 0 2
39724: PUSH
39725: FOR_DOWNTO
39726: IFFALSE 39750
// result := Delete ( result , result ) ;
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_VAR 0 3
39737: PPUSH
39738: LD_VAR 0 3
39742: PPUSH
39743: CALL_OW 3
39747: ST_TO_ADDR
39748: GO 39725
39750: POP
39751: POP
// end ;
39752: LD_VAR 0 3
39756: RET
// export function ComExit ( unit ) ; var tmp ; begin
39757: LD_INT 0
39759: PPUSH
39760: PPUSH
// if not IsInUnit ( unit ) then
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 310
39770: NOT
39771: IFFALSE 39775
// exit ;
39773: GO 39835
// tmp := IsInUnit ( unit ) ;
39775: LD_ADDR_VAR 0 3
39779: PUSH
39780: LD_VAR 0 1
39784: PPUSH
39785: CALL_OW 310
39789: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39790: LD_VAR 0 3
39794: PPUSH
39795: CALL_OW 247
39799: PUSH
39800: LD_INT 2
39802: EQUAL
39803: IFFALSE 39816
// ComExitVehicle ( unit ) else
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 121
39814: GO 39825
// ComExitBuilding ( unit ) ;
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 122
// result := tmp ;
39825: LD_ADDR_VAR 0 2
39829: PUSH
39830: LD_VAR 0 3
39834: ST_TO_ADDR
// end ;
39835: LD_VAR 0 2
39839: RET
// export function ComExitAll ( units ) ; var i ; begin
39840: LD_INT 0
39842: PPUSH
39843: PPUSH
// if not units then
39844: LD_VAR 0 1
39848: NOT
39849: IFFALSE 39853
// exit ;
39851: GO 39879
// for i in units do
39853: LD_ADDR_VAR 0 3
39857: PUSH
39858: LD_VAR 0 1
39862: PUSH
39863: FOR_IN
39864: IFFALSE 39877
// ComExit ( i ) ;
39866: LD_VAR 0 3
39870: PPUSH
39871: CALL 39757 0 1
39875: GO 39863
39877: POP
39878: POP
// end ;
39879: LD_VAR 0 2
39883: RET
// export function ResetHc ; begin
39884: LD_INT 0
39886: PPUSH
// InitHc ;
39887: CALL_OW 19
// hc_importance := 0 ;
39891: LD_ADDR_OWVAR 32
39895: PUSH
39896: LD_INT 0
39898: ST_TO_ADDR
// end ;
39899: LD_VAR 0 1
39903: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39904: LD_INT 0
39906: PPUSH
39907: PPUSH
39908: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39909: LD_ADDR_VAR 0 6
39913: PUSH
39914: LD_VAR 0 1
39918: PUSH
39919: LD_VAR 0 3
39923: PLUS
39924: PUSH
39925: LD_INT 2
39927: DIV
39928: ST_TO_ADDR
// if _x < 0 then
39929: LD_VAR 0 6
39933: PUSH
39934: LD_INT 0
39936: LESS
39937: IFFALSE 39954
// _x := _x * - 1 ;
39939: LD_ADDR_VAR 0 6
39943: PUSH
39944: LD_VAR 0 6
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: MUL
39953: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39954: LD_ADDR_VAR 0 7
39958: PUSH
39959: LD_VAR 0 2
39963: PUSH
39964: LD_VAR 0 4
39968: PLUS
39969: PUSH
39970: LD_INT 2
39972: DIV
39973: ST_TO_ADDR
// if _y < 0 then
39974: LD_VAR 0 7
39978: PUSH
39979: LD_INT 0
39981: LESS
39982: IFFALSE 39999
// _y := _y * - 1 ;
39984: LD_ADDR_VAR 0 7
39988: PUSH
39989: LD_VAR 0 7
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: MUL
39998: ST_TO_ADDR
// result := [ _x , _y ] ;
39999: LD_ADDR_VAR 0 5
40003: PUSH
40004: LD_VAR 0 6
40008: PUSH
40009: LD_VAR 0 7
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: ST_TO_ADDR
// end ;
40018: LD_VAR 0 5
40022: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40023: LD_INT 0
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
// task := GetTaskList ( unit ) ;
40029: LD_ADDR_VAR 0 7
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 437
40043: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40044: LD_VAR 0 7
40048: NOT
40049: PUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: LD_VAR 0 2
40059: PPUSH
40060: CALL_OW 308
40064: NOT
40065: AND
40066: IFFALSE 40070
// exit ;
40068: GO 40188
// if IsInArea ( unit , area ) then
40070: LD_VAR 0 1
40074: PPUSH
40075: LD_VAR 0 2
40079: PPUSH
40080: CALL_OW 308
40084: IFFALSE 40102
// begin ComMoveToArea ( unit , goAway ) ;
40086: LD_VAR 0 1
40090: PPUSH
40091: LD_VAR 0 3
40095: PPUSH
40096: CALL_OW 113
// exit ;
40100: GO 40188
// end ; if task [ 1 ] [ 1 ] <> M then
40102: LD_VAR 0 7
40106: PUSH
40107: LD_INT 1
40109: ARRAY
40110: PUSH
40111: LD_INT 1
40113: ARRAY
40114: PUSH
40115: LD_STRING M
40117: NONEQUAL
40118: IFFALSE 40122
// exit ;
40120: GO 40188
// x := task [ 1 ] [ 2 ] ;
40122: LD_ADDR_VAR 0 5
40126: PUSH
40127: LD_VAR 0 7
40131: PUSH
40132: LD_INT 1
40134: ARRAY
40135: PUSH
40136: LD_INT 2
40138: ARRAY
40139: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40140: LD_ADDR_VAR 0 6
40144: PUSH
40145: LD_VAR 0 7
40149: PUSH
40150: LD_INT 1
40152: ARRAY
40153: PUSH
40154: LD_INT 3
40156: ARRAY
40157: ST_TO_ADDR
// if InArea ( x , y , area ) then
40158: LD_VAR 0 5
40162: PPUSH
40163: LD_VAR 0 6
40167: PPUSH
40168: LD_VAR 0 2
40172: PPUSH
40173: CALL_OW 309
40177: IFFALSE 40188
// ComStop ( unit ) ;
40179: LD_VAR 0 1
40183: PPUSH
40184: CALL_OW 141
// end ;
40188: LD_VAR 0 4
40192: RET
// export function Abs ( value ) ; begin
40193: LD_INT 0
40195: PPUSH
// result := value ;
40196: LD_ADDR_VAR 0 2
40200: PUSH
40201: LD_VAR 0 1
40205: ST_TO_ADDR
// if value < 0 then
40206: LD_VAR 0 1
40210: PUSH
40211: LD_INT 0
40213: LESS
40214: IFFALSE 40231
// result := value * - 1 ;
40216: LD_ADDR_VAR 0 2
40220: PUSH
40221: LD_VAR 0 1
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: MUL
40230: ST_TO_ADDR
// end ;
40231: LD_VAR 0 2
40235: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40236: LD_INT 0
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
// if not unit or not building then
40246: LD_VAR 0 1
40250: NOT
40251: PUSH
40252: LD_VAR 0 2
40256: NOT
40257: OR
40258: IFFALSE 40262
// exit ;
40260: GO 40488
// x := GetX ( building ) ;
40262: LD_ADDR_VAR 0 4
40266: PUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: CALL_OW 250
40276: ST_TO_ADDR
// y := GetY ( building ) ;
40277: LD_ADDR_VAR 0 6
40281: PUSH
40282: LD_VAR 0 2
40286: PPUSH
40287: CALL_OW 251
40291: ST_TO_ADDR
// d := GetDir ( building ) ;
40292: LD_ADDR_VAR 0 8
40296: PUSH
40297: LD_VAR 0 2
40301: PPUSH
40302: CALL_OW 254
40306: ST_TO_ADDR
// r := 4 ;
40307: LD_ADDR_VAR 0 9
40311: PUSH
40312: LD_INT 4
40314: ST_TO_ADDR
// for i := 1 to 5 do
40315: LD_ADDR_VAR 0 10
40319: PUSH
40320: DOUBLE
40321: LD_INT 1
40323: DEC
40324: ST_TO_ADDR
40325: LD_INT 5
40327: PUSH
40328: FOR_TO
40329: IFFALSE 40486
// begin _x := ShiftX ( x , d , r + i ) ;
40331: LD_ADDR_VAR 0 5
40335: PUSH
40336: LD_VAR 0 4
40340: PPUSH
40341: LD_VAR 0 8
40345: PPUSH
40346: LD_VAR 0 9
40350: PUSH
40351: LD_VAR 0 10
40355: PLUS
40356: PPUSH
40357: CALL_OW 272
40361: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40362: LD_ADDR_VAR 0 7
40366: PUSH
40367: LD_VAR 0 6
40371: PPUSH
40372: LD_VAR 0 8
40376: PPUSH
40377: LD_VAR 0 9
40381: PUSH
40382: LD_VAR 0 10
40386: PLUS
40387: PPUSH
40388: CALL_OW 273
40392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40393: LD_VAR 0 5
40397: PPUSH
40398: LD_VAR 0 7
40402: PPUSH
40403: CALL_OW 488
40407: PUSH
40408: LD_VAR 0 5
40412: PPUSH
40413: LD_VAR 0 7
40417: PPUSH
40418: CALL_OW 428
40422: PPUSH
40423: CALL_OW 247
40427: PUSH
40428: LD_INT 3
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: IN
40438: NOT
40439: AND
40440: IFFALSE 40484
// begin ComMoveXY ( unit , _x , _y ) ;
40442: LD_VAR 0 1
40446: PPUSH
40447: LD_VAR 0 5
40451: PPUSH
40452: LD_VAR 0 7
40456: PPUSH
40457: CALL_OW 111
// result := [ _x , _y ] ;
40461: LD_ADDR_VAR 0 3
40465: PUSH
40466: LD_VAR 0 5
40470: PUSH
40471: LD_VAR 0 7
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: ST_TO_ADDR
// exit ;
40480: POP
40481: POP
40482: GO 40488
// end ; end ;
40484: GO 40328
40486: POP
40487: POP
// end ;
40488: LD_VAR 0 3
40492: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40493: LD_INT 0
40495: PPUSH
40496: PPUSH
40497: PPUSH
// result := 0 ;
40498: LD_ADDR_VAR 0 3
40502: PUSH
40503: LD_INT 0
40505: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40506: LD_VAR 0 1
40510: PUSH
40511: LD_INT 0
40513: LESS
40514: PUSH
40515: LD_VAR 0 1
40519: PUSH
40520: LD_INT 8
40522: GREATER
40523: OR
40524: PUSH
40525: LD_VAR 0 2
40529: PUSH
40530: LD_INT 0
40532: LESS
40533: OR
40534: PUSH
40535: LD_VAR 0 2
40539: PUSH
40540: LD_INT 8
40542: GREATER
40543: OR
40544: IFFALSE 40548
// exit ;
40546: GO 40623
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40548: LD_ADDR_VAR 0 4
40552: PUSH
40553: LD_INT 22
40555: PUSH
40556: LD_VAR 0 2
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PPUSH
40565: CALL_OW 69
40569: PUSH
40570: FOR_IN
40571: IFFALSE 40621
// begin un := UnitShoot ( i ) ;
40573: LD_ADDR_VAR 0 5
40577: PUSH
40578: LD_VAR 0 4
40582: PPUSH
40583: CALL_OW 504
40587: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40588: LD_VAR 0 5
40592: PPUSH
40593: CALL_OW 255
40597: PUSH
40598: LD_VAR 0 1
40602: EQUAL
40603: IFFALSE 40619
// begin result := un ;
40605: LD_ADDR_VAR 0 3
40609: PUSH
40610: LD_VAR 0 5
40614: ST_TO_ADDR
// exit ;
40615: POP
40616: POP
40617: GO 40623
// end ; end ;
40619: GO 40570
40621: POP
40622: POP
// end ;
40623: LD_VAR 0 3
40627: RET
// export function GetCargoBay ( units ) ; begin
40628: LD_INT 0
40630: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40631: LD_ADDR_VAR 0 2
40635: PUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 34
40646: PUSH
40647: LD_INT 12
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 34
40656: PUSH
40657: LD_INT 51
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 34
40666: PUSH
40667: LD_INT 32
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 34
40676: PUSH
40677: LD_INT 89
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: PPUSH
40691: CALL_OW 72
40695: ST_TO_ADDR
// end ;
40696: LD_VAR 0 2
40700: RET
// export function Negate ( value ) ; begin
40701: LD_INT 0
40703: PPUSH
// result := not value ;
40704: LD_ADDR_VAR 0 2
40708: PUSH
40709: LD_VAR 0 1
40713: NOT
40714: ST_TO_ADDR
// end ;
40715: LD_VAR 0 2
40719: RET
// export function Inc ( value ) ; begin
40720: LD_INT 0
40722: PPUSH
// result := value + 1 ;
40723: LD_ADDR_VAR 0 2
40727: PUSH
40728: LD_VAR 0 1
40732: PUSH
40733: LD_INT 1
40735: PLUS
40736: ST_TO_ADDR
// end ;
40737: LD_VAR 0 2
40741: RET
// export function Dec ( value ) ; begin
40742: LD_INT 0
40744: PPUSH
// result := value - 1 ;
40745: LD_ADDR_VAR 0 2
40749: PUSH
40750: LD_VAR 0 1
40754: PUSH
40755: LD_INT 1
40757: MINUS
40758: ST_TO_ADDR
// end ;
40759: LD_VAR 0 2
40763: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40764: LD_INT 0
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40774: LD_VAR 0 1
40778: PPUSH
40779: LD_VAR 0 2
40783: PPUSH
40784: CALL_OW 488
40788: NOT
40789: PUSH
40790: LD_VAR 0 3
40794: PPUSH
40795: LD_VAR 0 4
40799: PPUSH
40800: CALL_OW 488
40804: NOT
40805: OR
40806: IFFALSE 40819
// begin result := - 1 ;
40808: LD_ADDR_VAR 0 5
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: ST_TO_ADDR
// exit ;
40817: GO 41054
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40819: LD_ADDR_VAR 0 12
40823: PUSH
40824: LD_VAR 0 1
40828: PPUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: LD_VAR 0 3
40838: PPUSH
40839: LD_VAR 0 4
40843: PPUSH
40844: CALL 39904 0 4
40848: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40849: LD_ADDR_VAR 0 11
40853: PUSH
40854: LD_VAR 0 1
40858: PPUSH
40859: LD_VAR 0 2
40863: PPUSH
40864: LD_VAR 0 12
40868: PUSH
40869: LD_INT 1
40871: ARRAY
40872: PPUSH
40873: LD_VAR 0 12
40877: PUSH
40878: LD_INT 2
40880: ARRAY
40881: PPUSH
40882: CALL_OW 298
40886: ST_TO_ADDR
// distance := 9999 ;
40887: LD_ADDR_VAR 0 10
40891: PUSH
40892: LD_INT 9999
40894: ST_TO_ADDR
// for i := 0 to 5 do
40895: LD_ADDR_VAR 0 6
40899: PUSH
40900: DOUBLE
40901: LD_INT 0
40903: DEC
40904: ST_TO_ADDR
40905: LD_INT 5
40907: PUSH
40908: FOR_TO
40909: IFFALSE 41052
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40911: LD_ADDR_VAR 0 7
40915: PUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: LD_VAR 0 6
40925: PPUSH
40926: LD_VAR 0 11
40930: PPUSH
40931: CALL_OW 272
40935: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40936: LD_ADDR_VAR 0 8
40940: PUSH
40941: LD_VAR 0 2
40945: PPUSH
40946: LD_VAR 0 6
40950: PPUSH
40951: LD_VAR 0 11
40955: PPUSH
40956: CALL_OW 273
40960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40961: LD_VAR 0 7
40965: PPUSH
40966: LD_VAR 0 8
40970: PPUSH
40971: CALL_OW 488
40975: NOT
40976: IFFALSE 40980
// continue ;
40978: GO 40908
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40980: LD_ADDR_VAR 0 9
40984: PUSH
40985: LD_VAR 0 12
40989: PUSH
40990: LD_INT 1
40992: ARRAY
40993: PPUSH
40994: LD_VAR 0 12
40998: PUSH
40999: LD_INT 2
41001: ARRAY
41002: PPUSH
41003: LD_VAR 0 7
41007: PPUSH
41008: LD_VAR 0 8
41012: PPUSH
41013: CALL_OW 298
41017: ST_TO_ADDR
// if tmp < distance then
41018: LD_VAR 0 9
41022: PUSH
41023: LD_VAR 0 10
41027: LESS
41028: IFFALSE 41050
// begin result := i ;
41030: LD_ADDR_VAR 0 5
41034: PUSH
41035: LD_VAR 0 6
41039: ST_TO_ADDR
// distance := tmp ;
41040: LD_ADDR_VAR 0 10
41044: PUSH
41045: LD_VAR 0 9
41049: ST_TO_ADDR
// end ; end ;
41050: GO 40908
41052: POP
41053: POP
// end ;
41054: LD_VAR 0 5
41058: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41059: LD_INT 0
41061: PPUSH
41062: PPUSH
// if not driver or not IsInUnit ( driver ) then
41063: LD_VAR 0 1
41067: NOT
41068: PUSH
41069: LD_VAR 0 1
41073: PPUSH
41074: CALL_OW 310
41078: NOT
41079: OR
41080: IFFALSE 41084
// exit ;
41082: GO 41174
// vehicle := IsInUnit ( driver ) ;
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: CALL_OW 310
41098: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41099: LD_VAR 0 1
41103: PPUSH
41104: LD_STRING \
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: PUSH
41134: LD_STRING E
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_VAR 0 3
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PPUSH
41170: CALL_OW 446
// end ;
41174: LD_VAR 0 2
41178: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41179: LD_INT 0
41181: PPUSH
41182: PPUSH
// if not driver or not IsInUnit ( driver ) then
41183: LD_VAR 0 1
41187: NOT
41188: PUSH
41189: LD_VAR 0 1
41193: PPUSH
41194: CALL_OW 310
41198: NOT
41199: OR
41200: IFFALSE 41204
// exit ;
41202: GO 41294
// vehicle := IsInUnit ( driver ) ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_VAR 0 1
41213: PPUSH
41214: CALL_OW 310
41218: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41219: LD_VAR 0 1
41223: PPUSH
41224: LD_STRING \
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: PUSH
41254: LD_STRING E
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_VAR 0 3
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PPUSH
41290: CALL_OW 447
// end ;
41294: LD_VAR 0 2
41298: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41299: LD_INT 0
41301: PPUSH
41302: PPUSH
41303: PPUSH
// tmp := [ ] ;
41304: LD_ADDR_VAR 0 5
41308: PUSH
41309: EMPTY
41310: ST_TO_ADDR
// for i in units do
41311: LD_ADDR_VAR 0 4
41315: PUSH
41316: LD_VAR 0 1
41320: PUSH
41321: FOR_IN
41322: IFFALSE 41360
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41324: LD_ADDR_VAR 0 5
41328: PUSH
41329: LD_VAR 0 5
41333: PPUSH
41334: LD_VAR 0 5
41338: PUSH
41339: LD_INT 1
41341: PLUS
41342: PPUSH
41343: LD_VAR 0 4
41347: PPUSH
41348: CALL_OW 256
41352: PPUSH
41353: CALL_OW 2
41357: ST_TO_ADDR
41358: GO 41321
41360: POP
41361: POP
// if not tmp then
41362: LD_VAR 0 5
41366: NOT
41367: IFFALSE 41371
// exit ;
41369: GO 41419
// if asc then
41371: LD_VAR 0 2
41375: IFFALSE 41399
// result := SortListByListAsc ( units , tmp ) else
41377: LD_ADDR_VAR 0 3
41381: PUSH
41382: LD_VAR 0 1
41386: PPUSH
41387: LD_VAR 0 5
41391: PPUSH
41392: CALL_OW 76
41396: ST_TO_ADDR
41397: GO 41419
// result := SortListByListDesc ( units , tmp ) ;
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: LD_VAR 0 1
41408: PPUSH
41409: LD_VAR 0 5
41413: PPUSH
41414: CALL_OW 77
41418: ST_TO_ADDR
// end ;
41419: LD_VAR 0 3
41423: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41424: LD_INT 0
41426: PPUSH
41427: PPUSH
// task := GetTaskList ( mech ) ;
41428: LD_ADDR_VAR 0 4
41432: PUSH
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 437
41442: ST_TO_ADDR
// if not task then
41443: LD_VAR 0 4
41447: NOT
41448: IFFALSE 41452
// exit ;
41450: GO 41494
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41452: LD_ADDR_VAR 0 3
41456: PUSH
41457: LD_VAR 0 4
41461: PUSH
41462: LD_INT 1
41464: ARRAY
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: PUSH
41470: LD_STRING r
41472: EQUAL
41473: PUSH
41474: LD_VAR 0 4
41478: PUSH
41479: LD_INT 1
41481: ARRAY
41482: PUSH
41483: LD_INT 4
41485: ARRAY
41486: PUSH
41487: LD_VAR 0 2
41491: EQUAL
41492: AND
41493: ST_TO_ADDR
// end ;
41494: LD_VAR 0 3
41498: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41499: LD_INT 0
41501: PPUSH
// SetDir ( unit , d ) ;
41502: LD_VAR 0 1
41506: PPUSH
41507: LD_VAR 0 4
41511: PPUSH
41512: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_VAR 0 2
41525: PPUSH
41526: LD_VAR 0 3
41530: PPUSH
41531: LD_VAR 0 5
41535: PPUSH
41536: CALL_OW 48
// end ;
41540: LD_VAR 0 6
41544: RET
// export function ToNaturalNumber ( number ) ; begin
41545: LD_INT 0
41547: PPUSH
// result := number div 1 ;
41548: LD_ADDR_VAR 0 2
41552: PUSH
41553: LD_VAR 0 1
41557: PUSH
41558: LD_INT 1
41560: DIV
41561: ST_TO_ADDR
// if number < 0 then
41562: LD_VAR 0 1
41566: PUSH
41567: LD_INT 0
41569: LESS
41570: IFFALSE 41580
// result := 0 ;
41572: LD_ADDR_VAR 0 2
41576: PUSH
41577: LD_INT 0
41579: ST_TO_ADDR
// end ;
41580: LD_VAR 0 2
41584: RET
// export function SortByClass ( units , class ) ; var un ; begin
41585: LD_INT 0
41587: PPUSH
41588: PPUSH
// if not units or not class then
41589: LD_VAR 0 1
41593: NOT
41594: PUSH
41595: LD_VAR 0 2
41599: NOT
41600: OR
41601: IFFALSE 41605
// exit ;
41603: GO 41700
// result := [ ] ;
41605: LD_ADDR_VAR 0 3
41609: PUSH
41610: EMPTY
41611: ST_TO_ADDR
// for un in units do
41612: LD_ADDR_VAR 0 4
41616: PUSH
41617: LD_VAR 0 1
41621: PUSH
41622: FOR_IN
41623: IFFALSE 41698
// if GetClass ( un ) = class then
41625: LD_VAR 0 4
41629: PPUSH
41630: CALL_OW 257
41634: PUSH
41635: LD_VAR 0 2
41639: EQUAL
41640: IFFALSE 41667
// result := Insert ( result , 1 , un ) else
41642: LD_ADDR_VAR 0 3
41646: PUSH
41647: LD_VAR 0 3
41651: PPUSH
41652: LD_INT 1
41654: PPUSH
41655: LD_VAR 0 4
41659: PPUSH
41660: CALL_OW 2
41664: ST_TO_ADDR
41665: GO 41696
// result := Replace ( result , result + 1 , un ) ;
41667: LD_ADDR_VAR 0 3
41671: PUSH
41672: LD_VAR 0 3
41676: PPUSH
41677: LD_VAR 0 3
41681: PUSH
41682: LD_INT 1
41684: PLUS
41685: PPUSH
41686: LD_VAR 0 4
41690: PPUSH
41691: CALL_OW 1
41695: ST_TO_ADDR
41696: GO 41622
41698: POP
41699: POP
// end ;
41700: LD_VAR 0 3
41704: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41705: LD_INT 0
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
// result := [ ] ;
41714: LD_ADDR_VAR 0 4
41718: PUSH
41719: EMPTY
41720: ST_TO_ADDR
// if x - r < 0 then
41721: LD_VAR 0 1
41725: PUSH
41726: LD_VAR 0 3
41730: MINUS
41731: PUSH
41732: LD_INT 0
41734: LESS
41735: IFFALSE 41747
// min_x := 0 else
41737: LD_ADDR_VAR 0 8
41741: PUSH
41742: LD_INT 0
41744: ST_TO_ADDR
41745: GO 41763
// min_x := x - r ;
41747: LD_ADDR_VAR 0 8
41751: PUSH
41752: LD_VAR 0 1
41756: PUSH
41757: LD_VAR 0 3
41761: MINUS
41762: ST_TO_ADDR
// if y - r < 0 then
41763: LD_VAR 0 2
41767: PUSH
41768: LD_VAR 0 3
41772: MINUS
41773: PUSH
41774: LD_INT 0
41776: LESS
41777: IFFALSE 41789
// min_y := 0 else
41779: LD_ADDR_VAR 0 7
41783: PUSH
41784: LD_INT 0
41786: ST_TO_ADDR
41787: GO 41805
// min_y := y - r ;
41789: LD_ADDR_VAR 0 7
41793: PUSH
41794: LD_VAR 0 2
41798: PUSH
41799: LD_VAR 0 3
41803: MINUS
41804: ST_TO_ADDR
// max_x := x + r ;
41805: LD_ADDR_VAR 0 9
41809: PUSH
41810: LD_VAR 0 1
41814: PUSH
41815: LD_VAR 0 3
41819: PLUS
41820: ST_TO_ADDR
// max_y := y + r ;
41821: LD_ADDR_VAR 0 10
41825: PUSH
41826: LD_VAR 0 2
41830: PUSH
41831: LD_VAR 0 3
41835: PLUS
41836: ST_TO_ADDR
// for _x = min_x to max_x do
41837: LD_ADDR_VAR 0 5
41841: PUSH
41842: DOUBLE
41843: LD_VAR 0 8
41847: DEC
41848: ST_TO_ADDR
41849: LD_VAR 0 9
41853: PUSH
41854: FOR_TO
41855: IFFALSE 41956
// for _y = min_y to max_y do
41857: LD_ADDR_VAR 0 6
41861: PUSH
41862: DOUBLE
41863: LD_VAR 0 7
41867: DEC
41868: ST_TO_ADDR
41869: LD_VAR 0 10
41873: PUSH
41874: FOR_TO
41875: IFFALSE 41952
// begin if not ValidHex ( _x , _y ) then
41877: LD_VAR 0 5
41881: PPUSH
41882: LD_VAR 0 6
41886: PPUSH
41887: CALL_OW 488
41891: NOT
41892: IFFALSE 41896
// continue ;
41894: GO 41874
// if GetResourceTypeXY ( _x , _y ) then
41896: LD_VAR 0 5
41900: PPUSH
41901: LD_VAR 0 6
41905: PPUSH
41906: CALL_OW 283
41910: IFFALSE 41950
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41912: LD_ADDR_VAR 0 4
41916: PUSH
41917: LD_VAR 0 4
41921: PPUSH
41922: LD_VAR 0 4
41926: PUSH
41927: LD_INT 1
41929: PLUS
41930: PPUSH
41931: LD_VAR 0 5
41935: PUSH
41936: LD_VAR 0 6
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PPUSH
41945: CALL_OW 1
41949: ST_TO_ADDR
// end ;
41950: GO 41874
41952: POP
41953: POP
41954: GO 41854
41956: POP
41957: POP
// end ;
41958: LD_VAR 0 4
41962: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41963: LD_INT 0
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
// if not units then
41973: LD_VAR 0 1
41977: NOT
41978: IFFALSE 41982
// exit ;
41980: GO 42506
// result := UnitFilter ( units , [ f_ok ] ) ;
41982: LD_ADDR_VAR 0 3
41986: PUSH
41987: LD_VAR 0 1
41991: PPUSH
41992: LD_INT 50
41994: PUSH
41995: EMPTY
41996: LIST
41997: PPUSH
41998: CALL_OW 72
42002: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42003: LD_ADDR_VAR 0 8
42007: PUSH
42008: LD_VAR 0 1
42012: PUSH
42013: LD_INT 1
42015: ARRAY
42016: PPUSH
42017: CALL_OW 255
42021: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42022: LD_ADDR_VAR 0 10
42026: PUSH
42027: LD_INT 29
42029: PUSH
42030: LD_INT 91
42032: PUSH
42033: LD_INT 49
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
// if not result then
42041: LD_VAR 0 3
42045: NOT
42046: IFFALSE 42050
// exit ;
42048: GO 42506
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42050: LD_ADDR_VAR 0 5
42054: PUSH
42055: LD_INT 81
42057: PUSH
42058: LD_VAR 0 8
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PPUSH
42067: CALL_OW 69
42071: ST_TO_ADDR
// for i in result do
42072: LD_ADDR_VAR 0 4
42076: PUSH
42077: LD_VAR 0 3
42081: PUSH
42082: FOR_IN
42083: IFFALSE 42504
// begin tag := GetTag ( i ) + 1 ;
42085: LD_ADDR_VAR 0 9
42089: PUSH
42090: LD_VAR 0 4
42094: PPUSH
42095: CALL_OW 110
42099: PUSH
42100: LD_INT 1
42102: PLUS
42103: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42104: LD_ADDR_VAR 0 7
42108: PUSH
42109: LD_VAR 0 4
42113: PPUSH
42114: CALL_OW 250
42118: PPUSH
42119: LD_VAR 0 4
42123: PPUSH
42124: CALL_OW 251
42128: PPUSH
42129: LD_INT 6
42131: PPUSH
42132: CALL 41705 0 3
42136: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42137: LD_VAR 0 4
42141: PPUSH
42142: CALL_OW 247
42146: PUSH
42147: LD_INT 2
42149: EQUAL
42150: PUSH
42151: LD_VAR 0 7
42155: AND
42156: PUSH
42157: LD_VAR 0 4
42161: PPUSH
42162: CALL_OW 264
42166: PUSH
42167: LD_VAR 0 10
42171: IN
42172: NOT
42173: AND
42174: IFFALSE 42213
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42176: LD_VAR 0 4
42180: PPUSH
42181: LD_VAR 0 7
42185: PUSH
42186: LD_INT 1
42188: ARRAY
42189: PUSH
42190: LD_INT 1
42192: ARRAY
42193: PPUSH
42194: LD_VAR 0 7
42198: PUSH
42199: LD_INT 1
42201: ARRAY
42202: PUSH
42203: LD_INT 2
42205: ARRAY
42206: PPUSH
42207: CALL_OW 116
42211: GO 42502
// if path > tag then
42213: LD_VAR 0 2
42217: PUSH
42218: LD_VAR 0 9
42222: GREATER
42223: IFFALSE 42431
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42225: LD_ADDR_VAR 0 6
42229: PUSH
42230: LD_VAR 0 5
42234: PPUSH
42235: LD_INT 91
42237: PUSH
42238: LD_VAR 0 4
42242: PUSH
42243: LD_INT 8
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: LIST
42250: PPUSH
42251: CALL_OW 72
42255: ST_TO_ADDR
// if nearEnemy then
42256: LD_VAR 0 6
42260: IFFALSE 42329
// begin if GetWeapon ( i ) = ru_time_lapser then
42262: LD_VAR 0 4
42266: PPUSH
42267: CALL_OW 264
42271: PUSH
42272: LD_INT 49
42274: EQUAL
42275: IFFALSE 42303
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42277: LD_VAR 0 4
42281: PPUSH
42282: LD_VAR 0 6
42286: PPUSH
42287: LD_VAR 0 4
42291: PPUSH
42292: CALL_OW 74
42296: PPUSH
42297: CALL_OW 112
42301: GO 42327
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42303: LD_VAR 0 4
42307: PPUSH
42308: LD_VAR 0 6
42312: PPUSH
42313: LD_VAR 0 4
42317: PPUSH
42318: CALL_OW 74
42322: PPUSH
42323: CALL 43431 0 2
// end else
42327: GO 42429
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42329: LD_VAR 0 4
42333: PPUSH
42334: LD_VAR 0 2
42338: PUSH
42339: LD_VAR 0 9
42343: ARRAY
42344: PUSH
42345: LD_INT 1
42347: ARRAY
42348: PPUSH
42349: LD_VAR 0 2
42353: PUSH
42354: LD_VAR 0 9
42358: ARRAY
42359: PUSH
42360: LD_INT 2
42362: ARRAY
42363: PPUSH
42364: CALL_OW 297
42368: PUSH
42369: LD_INT 6
42371: GREATER
42372: IFFALSE 42415
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42374: LD_VAR 0 4
42378: PPUSH
42379: LD_VAR 0 2
42383: PUSH
42384: LD_VAR 0 9
42388: ARRAY
42389: PUSH
42390: LD_INT 1
42392: ARRAY
42393: PPUSH
42394: LD_VAR 0 2
42398: PUSH
42399: LD_VAR 0 9
42403: ARRAY
42404: PUSH
42405: LD_INT 2
42407: ARRAY
42408: PPUSH
42409: CALL_OW 114
42413: GO 42429
// SetTag ( i , tag ) ;
42415: LD_VAR 0 4
42419: PPUSH
42420: LD_VAR 0 9
42424: PPUSH
42425: CALL_OW 109
// end else
42429: GO 42502
// if enemy then
42431: LD_VAR 0 5
42435: IFFALSE 42502
// begin if GetWeapon ( i ) = ru_time_lapser then
42437: LD_VAR 0 4
42441: PPUSH
42442: CALL_OW 264
42446: PUSH
42447: LD_INT 49
42449: EQUAL
42450: IFFALSE 42478
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42452: LD_VAR 0 4
42456: PPUSH
42457: LD_VAR 0 5
42461: PPUSH
42462: LD_VAR 0 4
42466: PPUSH
42467: CALL_OW 74
42471: PPUSH
42472: CALL_OW 112
42476: GO 42502
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42478: LD_VAR 0 4
42482: PPUSH
42483: LD_VAR 0 5
42487: PPUSH
42488: LD_VAR 0 4
42492: PPUSH
42493: CALL_OW 74
42497: PPUSH
42498: CALL 43431 0 2
// end ; end ;
42502: GO 42082
42504: POP
42505: POP
// end ;
42506: LD_VAR 0 3
42510: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42511: LD_INT 0
42513: PPUSH
42514: PPUSH
42515: PPUSH
// if not unit or IsInUnit ( unit ) then
42516: LD_VAR 0 1
42520: NOT
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL_OW 310
42531: OR
42532: IFFALSE 42536
// exit ;
42534: GO 42627
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42536: LD_ADDR_VAR 0 4
42540: PUSH
42541: LD_VAR 0 1
42545: PPUSH
42546: CALL_OW 250
42550: PPUSH
42551: LD_VAR 0 2
42555: PPUSH
42556: LD_INT 1
42558: PPUSH
42559: CALL_OW 272
42563: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42564: LD_ADDR_VAR 0 5
42568: PUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 251
42578: PPUSH
42579: LD_VAR 0 2
42583: PPUSH
42584: LD_INT 1
42586: PPUSH
42587: CALL_OW 273
42591: ST_TO_ADDR
// if ValidHex ( x , y ) then
42592: LD_VAR 0 4
42596: PPUSH
42597: LD_VAR 0 5
42601: PPUSH
42602: CALL_OW 488
42606: IFFALSE 42627
// ComTurnXY ( unit , x , y ) ;
42608: LD_VAR 0 1
42612: PPUSH
42613: LD_VAR 0 4
42617: PPUSH
42618: LD_VAR 0 5
42622: PPUSH
42623: CALL_OW 118
// end ;
42627: LD_VAR 0 3
42631: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42632: LD_INT 0
42634: PPUSH
42635: PPUSH
// result := false ;
42636: LD_ADDR_VAR 0 3
42640: PUSH
42641: LD_INT 0
42643: ST_TO_ADDR
// if not units then
42644: LD_VAR 0 2
42648: NOT
42649: IFFALSE 42653
// exit ;
42651: GO 42698
// for i in units do
42653: LD_ADDR_VAR 0 4
42657: PUSH
42658: LD_VAR 0 2
42662: PUSH
42663: FOR_IN
42664: IFFALSE 42696
// if See ( side , i ) then
42666: LD_VAR 0 1
42670: PPUSH
42671: LD_VAR 0 4
42675: PPUSH
42676: CALL_OW 292
42680: IFFALSE 42694
// begin result := true ;
42682: LD_ADDR_VAR 0 3
42686: PUSH
42687: LD_INT 1
42689: ST_TO_ADDR
// exit ;
42690: POP
42691: POP
42692: GO 42698
// end ;
42694: GO 42663
42696: POP
42697: POP
// end ;
42698: LD_VAR 0 3
42702: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42703: LD_INT 0
42705: PPUSH
42706: PPUSH
42707: PPUSH
42708: PPUSH
// if not unit or not points then
42709: LD_VAR 0 1
42713: NOT
42714: PUSH
42715: LD_VAR 0 2
42719: NOT
42720: OR
42721: IFFALSE 42725
// exit ;
42723: GO 42815
// dist := 99999 ;
42725: LD_ADDR_VAR 0 5
42729: PUSH
42730: LD_INT 99999
42732: ST_TO_ADDR
// for i in points do
42733: LD_ADDR_VAR 0 4
42737: PUSH
42738: LD_VAR 0 2
42742: PUSH
42743: FOR_IN
42744: IFFALSE 42813
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42746: LD_ADDR_VAR 0 6
42750: PUSH
42751: LD_VAR 0 1
42755: PPUSH
42756: LD_VAR 0 4
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PPUSH
42765: LD_VAR 0 4
42769: PUSH
42770: LD_INT 2
42772: ARRAY
42773: PPUSH
42774: CALL_OW 297
42778: ST_TO_ADDR
// if tmpDist < dist then
42779: LD_VAR 0 6
42783: PUSH
42784: LD_VAR 0 5
42788: LESS
42789: IFFALSE 42811
// begin result := i ;
42791: LD_ADDR_VAR 0 3
42795: PUSH
42796: LD_VAR 0 4
42800: ST_TO_ADDR
// dist := tmpDist ;
42801: LD_ADDR_VAR 0 5
42805: PUSH
42806: LD_VAR 0 6
42810: ST_TO_ADDR
// end ; end ;
42811: GO 42743
42813: POP
42814: POP
// end ;
42815: LD_VAR 0 3
42819: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42820: LD_INT 0
42822: PPUSH
// uc_side := side ;
42823: LD_ADDR_OWVAR 20
42827: PUSH
42828: LD_VAR 0 1
42832: ST_TO_ADDR
// uc_nation := 3 ;
42833: LD_ADDR_OWVAR 21
42837: PUSH
42838: LD_INT 3
42840: ST_TO_ADDR
// vc_chassis := 25 ;
42841: LD_ADDR_OWVAR 37
42845: PUSH
42846: LD_INT 25
42848: ST_TO_ADDR
// vc_engine := engine_siberite ;
42849: LD_ADDR_OWVAR 39
42853: PUSH
42854: LD_INT 3
42856: ST_TO_ADDR
// vc_control := control_computer ;
42857: LD_ADDR_OWVAR 38
42861: PUSH
42862: LD_INT 3
42864: ST_TO_ADDR
// vc_weapon := 59 ;
42865: LD_ADDR_OWVAR 40
42869: PUSH
42870: LD_INT 59
42872: ST_TO_ADDR
// result := CreateVehicle ;
42873: LD_ADDR_VAR 0 5
42877: PUSH
42878: CALL_OW 45
42882: ST_TO_ADDR
// SetDir ( result , d ) ;
42883: LD_VAR 0 5
42887: PPUSH
42888: LD_VAR 0 4
42892: PPUSH
42893: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42897: LD_VAR 0 5
42901: PPUSH
42902: LD_VAR 0 2
42906: PPUSH
42907: LD_VAR 0 3
42911: PPUSH
42912: LD_INT 0
42914: PPUSH
42915: CALL_OW 48
// end ;
42919: LD_VAR 0 5
42923: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42924: LD_INT 0
42926: PPUSH
42927: PPUSH
42928: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42929: LD_ADDR_VAR 0 2
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42952: LD_VAR 0 1
42956: NOT
42957: PUSH
42958: LD_VAR 0 1
42962: PPUSH
42963: CALL_OW 264
42967: PUSH
42968: LD_INT 12
42970: PUSH
42971: LD_INT 51
42973: PUSH
42974: LD_INT 32
42976: PUSH
42977: LD_INT 89
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: IN
42986: NOT
42987: OR
42988: IFFALSE 42992
// exit ;
42990: GO 43090
// for i := 1 to 3 do
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: DOUBLE
42998: LD_INT 1
43000: DEC
43001: ST_TO_ADDR
43002: LD_INT 3
43004: PUSH
43005: FOR_TO
43006: IFFALSE 43088
// begin tmp := GetCargo ( cargo , i ) ;
43008: LD_ADDR_VAR 0 4
43012: PUSH
43013: LD_VAR 0 1
43017: PPUSH
43018: LD_VAR 0 3
43022: PPUSH
43023: CALL_OW 289
43027: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43028: LD_ADDR_VAR 0 2
43032: PUSH
43033: LD_VAR 0 2
43037: PPUSH
43038: LD_VAR 0 3
43042: PPUSH
43043: LD_VAR 0 4
43047: PPUSH
43048: CALL_OW 1
43052: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43053: LD_ADDR_VAR 0 2
43057: PUSH
43058: LD_VAR 0 2
43062: PPUSH
43063: LD_INT 4
43065: PPUSH
43066: LD_VAR 0 2
43070: PUSH
43071: LD_INT 4
43073: ARRAY
43074: PUSH
43075: LD_VAR 0 4
43079: PLUS
43080: PPUSH
43081: CALL_OW 1
43085: ST_TO_ADDR
// end ;
43086: GO 43005
43088: POP
43089: POP
// end ;
43090: LD_VAR 0 2
43094: RET
// export function Length ( array ) ; begin
43095: LD_INT 0
43097: PPUSH
// result := array + 0 ;
43098: LD_ADDR_VAR 0 2
43102: PUSH
43103: LD_VAR 0 1
43107: PUSH
43108: LD_INT 0
43110: PLUS
43111: ST_TO_ADDR
// end ;
43112: LD_VAR 0 2
43116: RET
// export function PrepareArray ( array ) ; begin
43117: LD_INT 0
43119: PPUSH
// result := array diff 0 ;
43120: LD_ADDR_VAR 0 2
43124: PUSH
43125: LD_VAR 0 1
43129: PUSH
43130: LD_INT 0
43132: DIFF
43133: ST_TO_ADDR
// if not result [ 1 ] then
43134: LD_VAR 0 2
43138: PUSH
43139: LD_INT 1
43141: ARRAY
43142: NOT
43143: IFFALSE 43163
// result := Delete ( result , 1 ) ;
43145: LD_ADDR_VAR 0 2
43149: PUSH
43150: LD_VAR 0 2
43154: PPUSH
43155: LD_INT 1
43157: PPUSH
43158: CALL_OW 3
43162: ST_TO_ADDR
// end ;
43163: LD_VAR 0 2
43167: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43168: LD_INT 0
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
// sibRocketRange := 25 ;
43174: LD_ADDR_VAR 0 6
43178: PUSH
43179: LD_INT 25
43181: ST_TO_ADDR
// result := false ;
43182: LD_ADDR_VAR 0 4
43186: PUSH
43187: LD_INT 0
43189: ST_TO_ADDR
// for i := 0 to 5 do
43190: LD_ADDR_VAR 0 5
43194: PUSH
43195: DOUBLE
43196: LD_INT 0
43198: DEC
43199: ST_TO_ADDR
43200: LD_INT 5
43202: PUSH
43203: FOR_TO
43204: IFFALSE 43271
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43206: LD_VAR 0 1
43210: PPUSH
43211: LD_VAR 0 5
43215: PPUSH
43216: LD_VAR 0 6
43220: PPUSH
43221: CALL_OW 272
43225: PPUSH
43226: LD_VAR 0 2
43230: PPUSH
43231: LD_VAR 0 5
43235: PPUSH
43236: LD_VAR 0 6
43240: PPUSH
43241: CALL_OW 273
43245: PPUSH
43246: LD_VAR 0 3
43250: PPUSH
43251: CALL_OW 309
43255: IFFALSE 43269
// begin result := true ;
43257: LD_ADDR_VAR 0 4
43261: PUSH
43262: LD_INT 1
43264: ST_TO_ADDR
// exit ;
43265: POP
43266: POP
43267: GO 43273
// end ;
43269: GO 43203
43271: POP
43272: POP
// end ;
43273: LD_VAR 0 4
43277: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43278: LD_INT 0
43280: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43281: LD_VAR 0 1
43285: PPUSH
43286: LD_VAR 0 2
43290: PPUSH
43291: LD_INT 0
43293: PPUSH
43294: LD_INT 0
43296: PPUSH
43297: LD_INT 1
43299: PPUSH
43300: LD_INT 0
43302: PPUSH
43303: CALL_OW 587
// end ;
43307: LD_VAR 0 3
43311: RET
// export function CenterOnNow ( unit ) ; begin
43312: LD_INT 0
43314: PPUSH
// result := IsInUnit ( unit ) ;
43315: LD_ADDR_VAR 0 2
43319: PUSH
43320: LD_VAR 0 1
43324: PPUSH
43325: CALL_OW 310
43329: ST_TO_ADDR
// if not result then
43330: LD_VAR 0 2
43334: NOT
43335: IFFALSE 43347
// result := unit ;
43337: LD_ADDR_VAR 0 2
43341: PUSH
43342: LD_VAR 0 1
43346: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43347: LD_VAR 0 1
43351: PPUSH
43352: CALL_OW 87
// end ;
43356: LD_VAR 0 2
43360: RET
// export function ComMoveHex ( unit , hex ) ; begin
43361: LD_INT 0
43363: PPUSH
// if not hex then
43364: LD_VAR 0 2
43368: NOT
43369: IFFALSE 43373
// exit ;
43371: GO 43426
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43373: LD_VAR 0 2
43377: PUSH
43378: LD_INT 1
43380: ARRAY
43381: PPUSH
43382: LD_VAR 0 2
43386: PUSH
43387: LD_INT 2
43389: ARRAY
43390: PPUSH
43391: CALL_OW 428
43395: IFFALSE 43399
// exit ;
43397: GO 43426
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43399: LD_VAR 0 1
43403: PPUSH
43404: LD_VAR 0 2
43408: PUSH
43409: LD_INT 1
43411: ARRAY
43412: PPUSH
43413: LD_VAR 0 2
43417: PUSH
43418: LD_INT 2
43420: ARRAY
43421: PPUSH
43422: CALL_OW 111
// end ;
43426: LD_VAR 0 3
43430: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43431: LD_INT 0
43433: PPUSH
43434: PPUSH
43435: PPUSH
// if not unit or not enemy then
43436: LD_VAR 0 1
43440: NOT
43441: PUSH
43442: LD_VAR 0 2
43446: NOT
43447: OR
43448: IFFALSE 43452
// exit ;
43450: GO 43576
// x := GetX ( enemy ) ;
43452: LD_ADDR_VAR 0 4
43456: PUSH
43457: LD_VAR 0 2
43461: PPUSH
43462: CALL_OW 250
43466: ST_TO_ADDR
// y := GetY ( enemy ) ;
43467: LD_ADDR_VAR 0 5
43471: PUSH
43472: LD_VAR 0 2
43476: PPUSH
43477: CALL_OW 251
43481: ST_TO_ADDR
// if ValidHex ( x , y ) then
43482: LD_VAR 0 4
43486: PPUSH
43487: LD_VAR 0 5
43491: PPUSH
43492: CALL_OW 488
43496: IFFALSE 43576
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
43498: LD_VAR 0 2
43502: PPUSH
43503: CALL_OW 247
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: IN
43518: PUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: CALL_OW 255
43528: PPUSH
43529: LD_VAR 0 2
43533: PPUSH
43534: CALL_OW 292
43538: AND
43539: IFFALSE 43557
// ComAttackUnit ( unit , enemy ) else
43541: LD_VAR 0 1
43545: PPUSH
43546: LD_VAR 0 2
43550: PPUSH
43551: CALL_OW 115
43555: GO 43576
// ComAgressiveMove ( unit , x , y ) ;
43557: LD_VAR 0 1
43561: PPUSH
43562: LD_VAR 0 4
43566: PPUSH
43567: LD_VAR 0 5
43571: PPUSH
43572: CALL_OW 114
// end ;
43576: LD_VAR 0 3
43580: RET
