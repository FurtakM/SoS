// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 39097 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1657 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 39125 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6672 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 39125 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 ;
 516: LD_INT 22
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: PUSH
 526: LD_INT 95
 528: PUSH
 529: LD_INT 1
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 3
 538: PUSH
 539: LD_INT 60
 541: PUSH
 542: EMPTY
 543: LIST
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: PPUSH
 554: CALL_OW 69
 558: PUSH
 559: LD_INT 5
 561: GREATEREQUAL
 562: IFFALSE 509
// wait ( 0 0$1 ) ;
 564: LD_INT 35
 566: PPUSH
 567: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 571: LD_EXP 2
 575: PPUSH
 576: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 580: LD_EXP 3
 584: PPUSH
 585: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 589: LD_INT 10
 591: PPUSH
 592: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 596: LD_EXP 3
 600: PPUSH
 601: LD_INT 52
 603: PPUSH
 604: LD_INT 42
 606: PPUSH
 607: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 611: LD_EXP 2
 615: PPUSH
 616: LD_INT 52
 618: PPUSH
 619: LD_INT 42
 621: PPUSH
 622: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 626: LD_EXP 3
 630: PPUSH
 631: LD_INT 68
 633: PPUSH
 634: LD_INT 55
 636: PPUSH
 637: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 641: LD_EXP 2
 645: PPUSH
 646: LD_INT 68
 648: PPUSH
 649: LD_INT 58
 651: PPUSH
 652: CALL_OW 171
// AddComTurnXY ( Powell , 73 , 54 ) ;
 656: LD_EXP 3
 660: PPUSH
 661: LD_INT 73
 663: PPUSH
 664: LD_INT 54
 666: PPUSH
 667: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 671: LD_EXP 2
 675: PPUSH
 676: LD_INT 74
 678: PPUSH
 679: LD_INT 58
 681: PPUSH
 682: CALL_OW 178
// ComExitVehicle ( people [ 4 ] ) ;
 686: LD_EXP 5
 690: PUSH
 691: LD_INT 4
 693: ARRAY
 694: PPUSH
 695: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 699: LD_EXP 5
 703: PUSH
 704: LD_INT 5
 706: ARRAY
 707: PPUSH
 708: CALL_OW 121
// wait ( 0 0$02 ) ;
 712: LD_INT 70
 714: PPUSH
 715: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 719: LD_EXP 5
 723: PUSH
 724: LD_INT 4
 726: ARRAY
 727: PPUSH
 728: LD_INT 50
 730: PPUSH
 731: LD_INT 40
 733: PPUSH
 734: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 738: LD_EXP 5
 742: PUSH
 743: LD_INT 5
 745: ARRAY
 746: PPUSH
 747: LD_INT 49
 749: PPUSH
 750: LD_INT 59
 752: PPUSH
 753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 757: LD_INT 35
 759: PPUSH
 760: CALL_OW 67
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 764: LD_EXP 3
 768: PPUSH
 769: LD_INT 68
 771: PPUSH
 772: LD_INT 55
 774: PPUSH
 775: CALL_OW 307
 779: PUSH
 780: LD_EXP 2
 784: PPUSH
 785: LD_INT 68
 787: PPUSH
 788: LD_INT 58
 790: PPUSH
 791: CALL_OW 307
 795: AND
 796: IFFALSE 757
// CenterNowOnUnits ( JMM ) ;
 798: LD_EXP 2
 802: PPUSH
 803: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 807: LD_EXP 3
 811: PPUSH
 812: LD_STRING D1-Pow-1
 814: PPUSH
 815: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 819: LD_EXP 2
 823: PPUSH
 824: LD_STRING D1-JMM-1
 826: PPUSH
 827: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 831: LD_EXP 3
 835: PPUSH
 836: LD_STRING D1-Pow-2
 838: PPUSH
 839: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 843: LD_EXP 2
 847: PPUSH
 848: LD_EXP 3
 852: PPUSH
 853: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 857: LD_EXP 2
 861: PPUSH
 862: LD_STRING D1-JMM-2
 864: PPUSH
 865: CALL_OW 88
// wait ( 0 0$01 ) ;
 869: LD_INT 35
 871: PPUSH
 872: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_EXP 2
 885: PPUSH
 886: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
 890: LD_EXP 3
 894: PPUSH
 895: LD_STRING D1-Pow-3
 897: PPUSH
 898: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
 902: LD_EXP 2
 906: PPUSH
 907: LD_STRING D1-JMM-3
 909: PPUSH
 910: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
 914: LD_EXP 3
 918: PPUSH
 919: LD_STRING D1-Pow-4
 921: PPUSH
 922: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
 926: LD_EXP 2
 930: PPUSH
 931: LD_STRING D1-JMM-4
 933: PPUSH
 934: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
 938: LD_EXP 3
 942: PPUSH
 943: LD_STRING D1-Pow-5
 945: PPUSH
 946: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
 950: LD_EXP 2
 954: PPUSH
 955: LD_STRING D1-JMM-5
 957: PPUSH
 958: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
 962: LD_EXP 3
 966: PPUSH
 967: LD_STRING D1-Pow-6
 969: PPUSH
 970: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
 974: LD_EXP 2
 978: PPUSH
 979: LD_STRING D1-JMM-6
 981: PPUSH
 982: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
 986: LD_EXP 3
 990: PPUSH
 991: LD_STRING D1-Pow-7
 993: PPUSH
 994: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
 998: LD_EXP 2
1002: PPUSH
1003: LD_STRING D1-JMM-7
1005: PPUSH
1006: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1010: LD_EXP 3
1014: PPUSH
1015: LD_INT 68
1017: PPUSH
1018: LD_INT 57
1020: PPUSH
1021: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1025: LD_INT 10
1027: PPUSH
1028: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_INT 68
1039: PPUSH
1040: LD_INT 57
1042: PPUSH
1043: CALL_OW 307
1047: IFFALSE 1025
// ComTurnUnit ( Powell , JMM ) ;
1049: LD_EXP 3
1053: PPUSH
1054: LD_EXP 2
1058: PPUSH
1059: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1063: LD_EXP 3
1067: PPUSH
1068: LD_STRING D1-Pow-8
1070: PPUSH
1071: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1075: LD_INT 18
1077: PPUSH
1078: CALL_OW 67
// Query ( QLetter ) ;
1082: LD_STRING QLetter
1084: PPUSH
1085: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1089: LD_EXP 3
1093: PPUSH
1094: LD_STRING D1aa-Pow-1
1096: PPUSH
1097: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1101: LD_EXP 2
1105: PPUSH
1106: LD_STRING D1aa-JMM-1
1108: PPUSH
1109: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1113: LD_EXP 3
1117: PPUSH
1118: LD_STRING D1aa-Pow-2
1120: PPUSH
1121: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1125: LD_EXP 2
1129: PPUSH
1130: LD_STRING D1aa-JMM-2
1132: PPUSH
1133: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1137: LD_EXP 3
1141: PPUSH
1142: LD_STRING D1aa-Pow-3
1144: PPUSH
1145: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1149: LD_EXP 2
1153: PPUSH
1154: LD_STRING D1aa-JMM-3
1156: PPUSH
1157: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1161: LD_EXP 3
1165: PPUSH
1166: LD_INT 69
1168: PPUSH
1169: LD_INT 55
1171: PPUSH
1172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1176: LD_INT 35
1178: PPUSH
1179: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1183: LD_EXP 3
1187: PPUSH
1188: LD_INT 69
1190: PPUSH
1191: LD_INT 55
1193: PPUSH
1194: CALL_OW 307
1198: IFFALSE 1176
// ComTurnXY ( Powell , 71 , 55 ) ;
1200: LD_EXP 3
1204: PPUSH
1205: LD_INT 71
1207: PPUSH
1208: LD_INT 55
1210: PPUSH
1211: CALL_OW 118
// wait ( 0 0$2 ) ;
1215: LD_INT 70
1217: PPUSH
1218: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1222: LD_EXP 3
1226: PPUSH
1227: LD_STRING D1aa-Pow-4
1229: PPUSH
1230: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1234: LD_EXP 2
1238: PPUSH
1239: LD_STRING D1aa-JMM-4
1241: PPUSH
1242: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1246: LD_EXP 3
1250: PPUSH
1251: LD_EXP 2
1255: PPUSH
1256: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1260: LD_INT 10
1262: PPUSH
1263: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1267: LD_EXP 3
1271: PPUSH
1272: LD_STRING D1aa-Pow-5
1274: PPUSH
1275: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1279: LD_EXP 2
1283: PPUSH
1284: LD_STRING D1aa-JMM-5
1286: PPUSH
1287: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1291: LD_EXP 3
1295: PPUSH
1296: LD_STRING D1aa-Pow-6
1298: PPUSH
1299: CALL_OW 88
// wait ( 0 0$1 ) ;
1303: LD_INT 35
1305: PPUSH
1306: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1310: LD_EXP 2
1314: PPUSH
1315: LD_EXP 4
1319: PUSH
1320: LD_INT 3
1322: ARRAY
1323: PPUSH
1324: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1328: LD_INT 18
1330: PPUSH
1331: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1335: LD_EXP 3
1339: PPUSH
1340: LD_EXP 4
1344: PUSH
1345: LD_INT 2
1347: ARRAY
1348: PPUSH
1349: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1353: LD_INT 35
1355: PPUSH
1356: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1360: LD_EXP 3
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: CALL_OW 308
1372: IFFALSE 1353
// CenterOnXY ( 42 , 40 ) ;
1374: LD_INT 42
1376: PPUSH
1377: LD_INT 40
1379: PPUSH
1380: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1384: LD_EXP 5
1388: PUSH
1389: LD_INT 4
1391: ARRAY
1392: PPUSH
1393: LD_EXP 4
1397: PUSH
1398: LD_INT 4
1400: ARRAY
1401: PPUSH
1402: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1406: LD_EXP 5
1410: PUSH
1411: LD_INT 5
1413: ARRAY
1414: PPUSH
1415: LD_EXP 4
1419: PUSH
1420: LD_INT 5
1422: ARRAY
1423: PPUSH
1424: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1428: LD_INT 35
1430: PPUSH
1431: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1435: LD_INT 22
1437: PUSH
1438: LD_INT 1
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 56
1447: PUSH
1448: EMPTY
1449: LIST
1450: PUSH
1451: LD_INT 21
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL_OW 69
1470: PUSH
1471: LD_INT 0
1473: EQUAL
1474: IFFALSE 1428
// CenterOnXY ( 36 , 35 ) ;
1476: LD_INT 36
1478: PPUSH
1479: LD_INT 35
1481: PPUSH
1482: CALL_OW 84
// for i := 1 to 5 do
1486: LD_ADDR_VAR 0 2
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_INT 5
1498: PUSH
1499: FOR_TO
1500: IFFALSE 1532
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1502: LD_EXP 4
1506: PUSH
1507: LD_VAR 0 2
1511: ARRAY
1512: PPUSH
1513: LD_INT 11
1515: PPUSH
1516: LD_INT 18
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1523: LD_INT 10
1525: PPUSH
1526: CALL_OW 67
// end ;
1530: GO 1499
1532: POP
1533: POP
// wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1541: LD_STRING 1
1543: PPUSH
1544: LD_STRING %_cont
1546: PPUSH
1547: CALL_OW 340
// end ;
1551: LD_VAR 0 1
1555: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1556: LD_EXP 5
1560: PUSH
1561: LD_INT 4
1563: ARRAY
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: LD_INT 40
1570: PPUSH
1571: CALL_OW 307
1575: IFFALSE 1599
1577: GO 1579
1579: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1580: LD_EXP 5
1584: PUSH
1585: LD_INT 4
1587: ARRAY
1588: PPUSH
1589: LD_INT 51
1591: PPUSH
1592: LD_INT 40
1594: PPUSH
1595: CALL_OW 118
1599: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1600: LD_EXP 5
1604: PUSH
1605: LD_INT 5
1607: ARRAY
1608: PPUSH
1609: LD_INT 49
1611: PPUSH
1612: LD_INT 59
1614: PPUSH
1615: CALL_OW 307
1619: IFFALSE 1643
1621: GO 1623
1623: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1624: LD_EXP 5
1628: PUSH
1629: LD_INT 5
1631: ARRAY
1632: PPUSH
1633: LD_INT 51
1635: PPUSH
1636: LD_INT 67
1638: PPUSH
1639: CALL_OW 118
1643: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1644: LD_STRING 1
1646: PPUSH
1647: LD_STRING %_cont
1649: PPUSH
1650: CALL_OW 340
// end ; end_of_file
1654: PPOPN 1
1656: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1657: LD_INT 0
1659: PPUSH
1660: PPUSH
// if exist_mode then
1661: LD_VAR 0 2
1665: IFFALSE 1690
// unit := CreateCharacter ( prefix & ident ) else
1667: LD_ADDR_VAR 0 5
1671: PUSH
1672: LD_VAR 0 3
1676: PUSH
1677: LD_VAR 0 1
1681: STR
1682: PPUSH
1683: CALL_OW 34
1687: ST_TO_ADDR
1688: GO 1705
// unit := NewCharacter ( ident ) ;
1690: LD_ADDR_VAR 0 5
1694: PUSH
1695: LD_VAR 0 1
1699: PPUSH
1700: CALL_OW 25
1704: ST_TO_ADDR
// result := unit ;
1705: LD_ADDR_VAR 0 4
1709: PUSH
1710: LD_VAR 0 5
1714: ST_TO_ADDR
// end ;
1715: LD_VAR 0 4
1719: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1720: LD_INT 0
1722: PPUSH
1723: PPUSH
// if not side or not nation then
1724: LD_VAR 0 1
1728: NOT
1729: PUSH
1730: LD_VAR 0 2
1734: NOT
1735: OR
1736: IFFALSE 1740
// exit ;
1738: GO 2508
// case nation of nation_american :
1740: LD_VAR 0 2
1744: PUSH
1745: LD_INT 1
1747: DOUBLE
1748: EQUAL
1749: IFTRUE 1753
1751: GO 1967
1753: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1754: LD_ADDR_VAR 0 4
1758: PUSH
1759: LD_INT 35
1761: PUSH
1762: LD_INT 45
1764: PUSH
1765: LD_INT 46
1767: PUSH
1768: LD_INT 47
1770: PUSH
1771: LD_INT 82
1773: PUSH
1774: LD_INT 83
1776: PUSH
1777: LD_INT 84
1779: PUSH
1780: LD_INT 85
1782: PUSH
1783: LD_INT 86
1785: PUSH
1786: LD_INT 1
1788: PUSH
1789: LD_INT 2
1791: PUSH
1792: LD_INT 6
1794: PUSH
1795: LD_INT 15
1797: PUSH
1798: LD_INT 16
1800: PUSH
1801: LD_INT 7
1803: PUSH
1804: LD_INT 12
1806: PUSH
1807: LD_INT 13
1809: PUSH
1810: LD_INT 10
1812: PUSH
1813: LD_INT 14
1815: PUSH
1816: LD_INT 20
1818: PUSH
1819: LD_INT 21
1821: PUSH
1822: LD_INT 22
1824: PUSH
1825: LD_INT 25
1827: PUSH
1828: LD_INT 32
1830: PUSH
1831: LD_INT 27
1833: PUSH
1834: LD_INT 36
1836: PUSH
1837: LD_INT 69
1839: PUSH
1840: LD_INT 39
1842: PUSH
1843: LD_INT 34
1845: PUSH
1846: LD_INT 40
1848: PUSH
1849: LD_INT 48
1851: PUSH
1852: LD_INT 49
1854: PUSH
1855: LD_INT 50
1857: PUSH
1858: LD_INT 51
1860: PUSH
1861: LD_INT 52
1863: PUSH
1864: LD_INT 53
1866: PUSH
1867: LD_INT 54
1869: PUSH
1870: LD_INT 55
1872: PUSH
1873: LD_INT 56
1875: PUSH
1876: LD_INT 57
1878: PUSH
1879: LD_INT 58
1881: PUSH
1882: LD_INT 59
1884: PUSH
1885: LD_INT 60
1887: PUSH
1888: LD_INT 61
1890: PUSH
1891: LD_INT 62
1893: PUSH
1894: LD_INT 80
1896: PUSH
1897: LD_INT 82
1899: PUSH
1900: LD_INT 83
1902: PUSH
1903: LD_INT 84
1905: PUSH
1906: LD_INT 85
1908: PUSH
1909: LD_INT 86
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: ST_TO_ADDR
1965: GO 2432
1967: LD_INT 2
1969: DOUBLE
1970: EQUAL
1971: IFTRUE 1975
1973: GO 2201
1975: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1976: LD_ADDR_VAR 0 4
1980: PUSH
1981: LD_INT 35
1983: PUSH
1984: LD_INT 45
1986: PUSH
1987: LD_INT 46
1989: PUSH
1990: LD_INT 47
1992: PUSH
1993: LD_INT 82
1995: PUSH
1996: LD_INT 83
1998: PUSH
1999: LD_INT 84
2001: PUSH
2002: LD_INT 85
2004: PUSH
2005: LD_INT 87
2007: PUSH
2008: LD_INT 70
2010: PUSH
2011: LD_INT 1
2013: PUSH
2014: LD_INT 11
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: LD_INT 4
2022: PUSH
2023: LD_INT 5
2025: PUSH
2026: LD_INT 6
2028: PUSH
2029: LD_INT 15
2031: PUSH
2032: LD_INT 18
2034: PUSH
2035: LD_INT 7
2037: PUSH
2038: LD_INT 17
2040: PUSH
2041: LD_INT 8
2043: PUSH
2044: LD_INT 20
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 22
2052: PUSH
2053: LD_INT 72
2055: PUSH
2056: LD_INT 26
2058: PUSH
2059: LD_INT 69
2061: PUSH
2062: LD_INT 39
2064: PUSH
2065: LD_INT 40
2067: PUSH
2068: LD_INT 41
2070: PUSH
2071: LD_INT 42
2073: PUSH
2074: LD_INT 43
2076: PUSH
2077: LD_INT 48
2079: PUSH
2080: LD_INT 49
2082: PUSH
2083: LD_INT 50
2085: PUSH
2086: LD_INT 51
2088: PUSH
2089: LD_INT 52
2091: PUSH
2092: LD_INT 53
2094: PUSH
2095: LD_INT 54
2097: PUSH
2098: LD_INT 55
2100: PUSH
2101: LD_INT 56
2103: PUSH
2104: LD_INT 60
2106: PUSH
2107: LD_INT 61
2109: PUSH
2110: LD_INT 62
2112: PUSH
2113: LD_INT 66
2115: PUSH
2116: LD_INT 67
2118: PUSH
2119: LD_INT 68
2121: PUSH
2122: LD_INT 81
2124: PUSH
2125: LD_INT 82
2127: PUSH
2128: LD_INT 83
2130: PUSH
2131: LD_INT 84
2133: PUSH
2134: LD_INT 85
2136: PUSH
2137: LD_INT 87
2139: PUSH
2140: LD_INT 88
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
2199: GO 2432
2201: LD_INT 3
2203: DOUBLE
2204: EQUAL
2205: IFTRUE 2209
2207: GO 2431
2209: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2210: LD_ADDR_VAR 0 4
2214: PUSH
2215: LD_INT 46
2217: PUSH
2218: LD_INT 47
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 2
2226: PUSH
2227: LD_INT 82
2229: PUSH
2230: LD_INT 83
2232: PUSH
2233: LD_INT 84
2235: PUSH
2236: LD_INT 85
2238: PUSH
2239: LD_INT 86
2241: PUSH
2242: LD_INT 11
2244: PUSH
2245: LD_INT 9
2247: PUSH
2248: LD_INT 20
2250: PUSH
2251: LD_INT 19
2253: PUSH
2254: LD_INT 21
2256: PUSH
2257: LD_INT 24
2259: PUSH
2260: LD_INT 22
2262: PUSH
2263: LD_INT 25
2265: PUSH
2266: LD_INT 28
2268: PUSH
2269: LD_INT 29
2271: PUSH
2272: LD_INT 30
2274: PUSH
2275: LD_INT 31
2277: PUSH
2278: LD_INT 37
2280: PUSH
2281: LD_INT 38
2283: PUSH
2284: LD_INT 32
2286: PUSH
2287: LD_INT 27
2289: PUSH
2290: LD_INT 33
2292: PUSH
2293: LD_INT 69
2295: PUSH
2296: LD_INT 39
2298: PUSH
2299: LD_INT 34
2301: PUSH
2302: LD_INT 40
2304: PUSH
2305: LD_INT 71
2307: PUSH
2308: LD_INT 23
2310: PUSH
2311: LD_INT 44
2313: PUSH
2314: LD_INT 48
2316: PUSH
2317: LD_INT 49
2319: PUSH
2320: LD_INT 50
2322: PUSH
2323: LD_INT 51
2325: PUSH
2326: LD_INT 52
2328: PUSH
2329: LD_INT 53
2331: PUSH
2332: LD_INT 54
2334: PUSH
2335: LD_INT 55
2337: PUSH
2338: LD_INT 56
2340: PUSH
2341: LD_INT 57
2343: PUSH
2344: LD_INT 58
2346: PUSH
2347: LD_INT 59
2349: PUSH
2350: LD_INT 63
2352: PUSH
2353: LD_INT 64
2355: PUSH
2356: LD_INT 65
2358: PUSH
2359: LD_INT 82
2361: PUSH
2362: LD_INT 83
2364: PUSH
2365: LD_INT 84
2367: PUSH
2368: LD_INT 85
2370: PUSH
2371: LD_INT 86
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
2429: GO 2432
2431: POP
// if state > - 1 and state < 3 then
2432: LD_VAR 0 3
2436: PUSH
2437: LD_INT 1
2439: NEG
2440: GREATER
2441: PUSH
2442: LD_VAR 0 3
2446: PUSH
2447: LD_INT 3
2449: LESS
2450: AND
2451: IFFALSE 2508
// for i in result do
2453: LD_ADDR_VAR 0 5
2457: PUSH
2458: LD_VAR 0 4
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2506
// if GetTech ( i , side ) <> state then
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_VAR 0 1
2475: PPUSH
2476: CALL_OW 321
2480: PUSH
2481: LD_VAR 0 3
2485: NONEQUAL
2486: IFFALSE 2504
// result := result diff i ;
2488: LD_ADDR_VAR 0 4
2492: PUSH
2493: LD_VAR 0 4
2497: PUSH
2498: LD_VAR 0 5
2502: DIFF
2503: ST_TO_ADDR
2504: GO 2463
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 4
2512: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// result := true ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2526: LD_ADDR_VAR 0 5
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 480
2540: ST_TO_ADDR
// if not tmp then
2541: LD_VAR 0 5
2545: NOT
2546: IFFALSE 2550
// exit ;
2548: GO 2599
// for i in tmp do
2550: LD_ADDR_VAR 0 4
2554: PUSH
2555: LD_VAR 0 5
2559: PUSH
2560: FOR_IN
2561: IFFALSE 2597
// if GetTech ( i , side ) <> state_researched then
2563: LD_VAR 0 4
2567: PPUSH
2568: LD_VAR 0 1
2572: PPUSH
2573: CALL_OW 321
2577: PUSH
2578: LD_INT 2
2580: NONEQUAL
2581: IFFALSE 2595
// begin result := false ;
2583: LD_ADDR_VAR 0 3
2587: PUSH
2588: LD_INT 0
2590: ST_TO_ADDR
// exit ;
2591: POP
2592: POP
2593: GO 2599
// end ;
2595: GO 2560
2597: POP
2598: POP
// end ;
2599: LD_VAR 0 3
2603: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2604: LD_INT 0
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
2613: PPUSH
2614: PPUSH
2615: PPUSH
2616: PPUSH
2617: PPUSH
2618: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2619: LD_VAR 0 1
2623: NOT
2624: PUSH
2625: LD_VAR 0 1
2629: PPUSH
2630: CALL_OW 257
2634: PUSH
2635: LD_INT 9
2637: NONEQUAL
2638: OR
2639: IFFALSE 2643
// exit ;
2641: GO 3216
// side := GetSide ( unit ) ;
2643: LD_ADDR_VAR 0 9
2647: PUSH
2648: LD_VAR 0 1
2652: PPUSH
2653: CALL_OW 255
2657: ST_TO_ADDR
// tech_space := tech_spacanom ;
2658: LD_ADDR_VAR 0 12
2662: PUSH
2663: LD_INT 29
2665: ST_TO_ADDR
// tech_time := tech_taurad ;
2666: LD_ADDR_VAR 0 13
2670: PUSH
2671: LD_INT 28
2673: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2674: LD_ADDR_VAR 0 11
2678: PUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 310
2688: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2689: LD_VAR 0 11
2693: PPUSH
2694: CALL_OW 247
2698: PUSH
2699: LD_INT 2
2701: EQUAL
2702: IFFALSE 2706
// exit ;
2704: GO 3216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2706: LD_ADDR_VAR 0 8
2710: PUSH
2711: LD_INT 81
2713: PUSH
2714: LD_VAR 0 9
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: LD_INT 21
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: ST_TO_ADDR
// if not tmp then
2749: LD_VAR 0 8
2753: NOT
2754: IFFALSE 2758
// exit ;
2756: GO 3216
// if in_unit then
2758: LD_VAR 0 11
2762: IFFALSE 2786
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2764: LD_ADDR_VAR 0 10
2768: PUSH
2769: LD_VAR 0 8
2773: PPUSH
2774: LD_VAR 0 11
2778: PPUSH
2779: CALL_OW 74
2783: ST_TO_ADDR
2784: GO 2806
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2786: LD_ADDR_VAR 0 10
2790: PUSH
2791: LD_VAR 0 8
2795: PPUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 74
2805: ST_TO_ADDR
// if not enemy then
2806: LD_VAR 0 10
2810: NOT
2811: IFFALSE 2815
// exit ;
2813: GO 3216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2815: LD_VAR 0 11
2819: PUSH
2820: LD_VAR 0 11
2824: PPUSH
2825: LD_VAR 0 10
2829: PPUSH
2830: CALL_OW 296
2834: PUSH
2835: LD_INT 13
2837: GREATER
2838: AND
2839: PUSH
2840: LD_VAR 0 1
2844: PPUSH
2845: LD_VAR 0 10
2849: PPUSH
2850: CALL_OW 296
2854: PUSH
2855: LD_INT 12
2857: GREATER
2858: OR
2859: IFFALSE 2863
// exit ;
2861: GO 3216
// missile := [ 1 ] ;
2863: LD_ADDR_VAR 0 14
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2874: LD_VAR 0 9
2878: PPUSH
2879: LD_VAR 0 12
2883: PPUSH
2884: CALL_OW 325
2888: IFFALSE 2917
// missile := Replace ( missile , missile + 1 , 2 ) ;
2890: LD_ADDR_VAR 0 14
2894: PUSH
2895: LD_VAR 0 14
2899: PPUSH
2900: LD_VAR 0 14
2904: PUSH
2905: LD_INT 1
2907: PLUS
2908: PPUSH
2909: LD_INT 2
2911: PPUSH
2912: CALL_OW 1
2916: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2917: LD_VAR 0 9
2921: PPUSH
2922: LD_VAR 0 13
2926: PPUSH
2927: CALL_OW 325
2931: PUSH
2932: LD_VAR 0 10
2936: PPUSH
2937: CALL_OW 255
2941: PPUSH
2942: LD_VAR 0 13
2946: PPUSH
2947: CALL_OW 325
2951: NOT
2952: AND
2953: IFFALSE 2982
// missile := Replace ( missile , missile + 1 , 3 ) ;
2955: LD_ADDR_VAR 0 14
2959: PUSH
2960: LD_VAR 0 14
2964: PPUSH
2965: LD_VAR 0 14
2969: PUSH
2970: LD_INT 1
2972: PLUS
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 1
2981: ST_TO_ADDR
// if missile < 2 then
2982: LD_VAR 0 14
2986: PUSH
2987: LD_INT 2
2989: LESS
2990: IFFALSE 2994
// exit ;
2992: GO 3216
// x := GetX ( enemy ) ;
2994: LD_ADDR_VAR 0 4
2998: PUSH
2999: LD_VAR 0 10
3003: PPUSH
3004: CALL_OW 250
3008: ST_TO_ADDR
// y := GetY ( enemy ) ;
3009: LD_ADDR_VAR 0 5
3013: PUSH
3014: LD_VAR 0 10
3018: PPUSH
3019: CALL_OW 251
3023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3024: LD_ADDR_VAR 0 6
3028: PUSH
3029: LD_VAR 0 4
3033: PUSH
3034: LD_INT 1
3036: NEG
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: CALL_OW 12
3045: PLUS
3046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3047: LD_ADDR_VAR 0 7
3051: PUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: NEG
3060: PPUSH
3061: LD_INT 1
3063: PPUSH
3064: CALL_OW 12
3068: PLUS
3069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3070: LD_VAR 0 6
3074: PPUSH
3075: LD_VAR 0 7
3079: PPUSH
3080: CALL_OW 488
3084: NOT
3085: IFFALSE 3107
// begin _x := x ;
3087: LD_ADDR_VAR 0 6
3091: PUSH
3092: LD_VAR 0 4
3096: ST_TO_ADDR
// _y := y ;
3097: LD_ADDR_VAR 0 7
3101: PUSH
3102: LD_VAR 0 5
3106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_VAR 0 14
3119: PPUSH
3120: CALL_OW 12
3124: ST_TO_ADDR
// case i of 1 :
3125: LD_VAR 0 3
3129: PUSH
3130: LD_INT 1
3132: DOUBLE
3133: EQUAL
3134: IFTRUE 3138
3136: GO 3155
3138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3139: LD_VAR 0 1
3143: PPUSH
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 115
3153: GO 3216
3155: LD_INT 2
3157: DOUBLE
3158: EQUAL
3159: IFTRUE 3163
3161: GO 3185
3163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: LD_VAR 0 7
3178: PPUSH
3179: CALL_OW 153
3183: GO 3216
3185: LD_INT 3
3187: DOUBLE
3188: EQUAL
3189: IFTRUE 3193
3191: GO 3215
3193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3194: LD_VAR 0 1
3198: PPUSH
3199: LD_VAR 0 6
3203: PPUSH
3204: LD_VAR 0 7
3208: PPUSH
3209: CALL_OW 154
3213: GO 3216
3215: POP
// end ;
3216: LD_VAR 0 2
3220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
// if not unit or not building then
3229: LD_VAR 0 1
3233: NOT
3234: PUSH
3235: LD_VAR 0 2
3239: NOT
3240: OR
3241: IFFALSE 3245
// exit ;
3243: GO 3403
// x := GetX ( building ) ;
3245: LD_ADDR_VAR 0 5
3249: PUSH
3250: LD_VAR 0 2
3254: PPUSH
3255: CALL_OW 250
3259: ST_TO_ADDR
// y := GetY ( building ) ;
3260: LD_ADDR_VAR 0 6
3264: PUSH
3265: LD_VAR 0 2
3269: PPUSH
3270: CALL_OW 251
3274: ST_TO_ADDR
// for i = 0 to 5 do
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: DOUBLE
3281: LD_INT 0
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3401
// begin _x := ShiftX ( x , i , 3 ) ;
3291: LD_ADDR_VAR 0 7
3295: PUSH
3296: LD_VAR 0 5
3300: PPUSH
3301: LD_VAR 0 4
3305: PPUSH
3306: LD_INT 3
3308: PPUSH
3309: CALL_OW 272
3313: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3314: LD_ADDR_VAR 0 8
3318: PUSH
3319: LD_VAR 0 6
3323: PPUSH
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: CALL_OW 273
3336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3337: LD_VAR 0 7
3341: PPUSH
3342: LD_VAR 0 8
3346: PPUSH
3347: CALL_OW 488
3351: NOT
3352: IFFALSE 3356
// continue ;
3354: GO 3288
// if HexInfo ( _x , _y ) = 0 then
3356: LD_VAR 0 7
3360: PPUSH
3361: LD_VAR 0 8
3365: PPUSH
3366: CALL_OW 428
3370: PUSH
3371: LD_INT 0
3373: EQUAL
3374: IFFALSE 3399
// begin ComMoveXY ( unit , _x , _y ) ;
3376: LD_VAR 0 1
3380: PPUSH
3381: LD_VAR 0 7
3385: PPUSH
3386: LD_VAR 0 8
3390: PPUSH
3391: CALL_OW 111
// exit ;
3395: POP
3396: POP
3397: GO 3403
// end ; end ;
3399: GO 3288
3401: POP
3402: POP
// end ;
3403: LD_VAR 0 3
3407: RET
// export function ScanBase ( side , base_area ) ; begin
3408: LD_INT 0
3410: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: LD_VAR 0 2
3420: PPUSH
3421: LD_INT 81
3423: PUSH
3424: LD_VAR 0 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PPUSH
3433: CALL_OW 70
3437: ST_TO_ADDR
// end ;
3438: LD_VAR 0 3
3442: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3443: LD_INT 0
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
// result := false ;
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// side := GetSide ( unit ) ;
3457: LD_ADDR_VAR 0 3
3461: PUSH
3462: LD_VAR 0 1
3466: PPUSH
3467: CALL_OW 255
3471: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3472: LD_ADDR_VAR 0 4
3476: PUSH
3477: LD_VAR 0 1
3481: PPUSH
3482: CALL_OW 248
3486: ST_TO_ADDR
// case nat of 1 :
3487: LD_VAR 0 4
3491: PUSH
3492: LD_INT 1
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3500
3498: GO 3511
3500: POP
// tech := tech_lassight ; 2 :
3501: LD_ADDR_VAR 0 5
3505: PUSH
3506: LD_INT 12
3508: ST_TO_ADDR
3509: GO 3550
3511: LD_INT 2
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3530
3519: POP
// tech := tech_mortar ; 3 :
3520: LD_ADDR_VAR 0 5
3524: PUSH
3525: LD_INT 41
3527: ST_TO_ADDR
3528: GO 3550
3530: LD_INT 3
3532: DOUBLE
3533: EQUAL
3534: IFTRUE 3538
3536: GO 3549
3538: POP
// tech := tech_bazooka ; end ;
3539: LD_ADDR_VAR 0 5
3543: PUSH
3544: LD_INT 44
3546: ST_TO_ADDR
3547: GO 3550
3549: POP
// if Researched ( side , tech ) then
3550: LD_VAR 0 3
3554: PPUSH
3555: LD_VAR 0 5
3559: PPUSH
3560: CALL_OW 325
3564: IFFALSE 3591
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3566: LD_ADDR_VAR 0 2
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: LD_INT 8
3576: PUSH
3577: LD_INT 9
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: PUSH
3585: LD_VAR 0 4
3589: ARRAY
3590: ST_TO_ADDR
// end ;
3591: LD_VAR 0 2
3595: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3596: LD_INT 0
3598: PPUSH
3599: PPUSH
3600: PPUSH
// if not mines then
3601: LD_VAR 0 2
3605: NOT
3606: IFFALSE 3610
// exit ;
3608: GO 3754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3610: LD_ADDR_VAR 0 5
3614: PUSH
3615: LD_INT 81
3617: PUSH
3618: LD_VAR 0 1
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 3
3629: PUSH
3630: LD_INT 21
3632: PUSH
3633: LD_INT 3
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL_OW 69
3652: ST_TO_ADDR
// for i in mines do
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: LD_VAR 0 2
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3752
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3666: LD_VAR 0 4
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 2
3682: ARRAY
3683: PPUSH
3684: CALL_OW 458
3688: NOT
3689: IFFALSE 3693
// continue ;
3691: GO 3663
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: LD_VAR 0 4
3706: PUSH
3707: LD_INT 2
3709: ARRAY
3710: PPUSH
3711: CALL_OW 428
3715: PUSH
3716: LD_VAR 0 5
3720: IN
3721: IFFALSE 3750
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3723: LD_VAR 0 4
3727: PUSH
3728: LD_INT 1
3730: ARRAY
3731: PPUSH
3732: LD_VAR 0 4
3736: PUSH
3737: LD_INT 2
3739: ARRAY
3740: PPUSH
3741: LD_VAR 0 1
3745: PPUSH
3746: CALL_OW 456
// end ;
3750: GO 3663
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 3
3758: RET
// export function Count ( array ) ; var i ; begin
3759: LD_INT 0
3761: PPUSH
3762: PPUSH
// result := 0 ;
3763: LD_ADDR_VAR 0 2
3767: PUSH
3768: LD_INT 0
3770: ST_TO_ADDR
// for i in array do
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: LD_VAR 0 1
3780: PUSH
3781: FOR_IN
3782: IFFALSE 3806
// if i then
3784: LD_VAR 0 3
3788: IFFALSE 3804
// result := result + 1 ;
3790: LD_ADDR_VAR 0 2
3794: PUSH
3795: LD_VAR 0 2
3799: PUSH
3800: LD_INT 1
3802: PLUS
3803: ST_TO_ADDR
3804: GO 3781
3806: POP
3807: POP
// end ;
3808: LD_VAR 0 2
3812: RET
// export function IsEmpty ( building ) ; begin
3813: LD_INT 0
3815: PPUSH
// if not building then
3816: LD_VAR 0 1
3820: NOT
3821: IFFALSE 3825
// exit ;
3823: GO 3868
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3825: LD_ADDR_VAR 0 2
3829: PUSH
3830: LD_VAR 0 1
3834: PUSH
3835: LD_INT 22
3837: PUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 255
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 58
3854: PUSH
3855: EMPTY
3856: LIST
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PPUSH
3862: CALL_OW 69
3866: IN
3867: ST_TO_ADDR
// end ;
3868: LD_VAR 0 2
3872: RET
// export function IsNotFull ( building ) ; var places ; begin
3873: LD_INT 0
3875: PPUSH
3876: PPUSH
// if not building then
3877: LD_VAR 0 1
3881: NOT
3882: IFFALSE 3886
// exit ;
3884: GO 4057
// result := false ;
3886: LD_ADDR_VAR 0 2
3890: PUSH
3891: LD_INT 0
3893: ST_TO_ADDR
// places := 0 ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: LD_INT 0
3901: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 266
3911: PUSH
3912: LD_INT 0
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3974
3918: LD_INT 1
3920: DOUBLE
3921: EQUAL
3922: IFTRUE 3974
3924: LD_INT 6
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3974
3930: LD_INT 7
3932: DOUBLE
3933: EQUAL
3934: IFTRUE 3974
3936: LD_INT 8
3938: DOUBLE
3939: EQUAL
3940: IFTRUE 3974
3942: LD_INT 4
3944: DOUBLE
3945: EQUAL
3946: IFTRUE 3974
3948: LD_INT 5
3950: DOUBLE
3951: EQUAL
3952: IFTRUE 3974
3954: LD_INT 2
3956: DOUBLE
3957: EQUAL
3958: IFTRUE 3974
3960: LD_INT 3
3962: DOUBLE
3963: EQUAL
3964: IFTRUE 3974
3966: LD_INT 35
3968: DOUBLE
3969: EQUAL
3970: IFTRUE 3974
3972: GO 3985
3974: POP
// places := 6 ; b_bunker , b_breastwork :
3975: LD_ADDR_VAR 0 3
3979: PUSH
3980: LD_INT 6
3982: ST_TO_ADDR
3983: GO 4030
3985: LD_INT 32
3987: DOUBLE
3988: EQUAL
3989: IFTRUE 3999
3991: LD_INT 31
3993: DOUBLE
3994: EQUAL
3995: IFTRUE 3999
3997: GO 4010
3999: POP
// places := 1 ; b_control_tower :
4000: LD_ADDR_VAR 0 3
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
4008: GO 4030
4010: LD_INT 36
4012: DOUBLE
4013: EQUAL
4014: IFTRUE 4018
4016: GO 4029
4018: POP
// places := 3 ; end ;
4019: LD_ADDR_VAR 0 3
4023: PUSH
4024: LD_INT 3
4026: ST_TO_ADDR
4027: GO 4030
4029: POP
// if places then
4030: LD_VAR 0 3
4034: IFFALSE 4057
// result := UnitsInside ( building ) < places ;
4036: LD_ADDR_VAR 0 2
4040: PUSH
4041: LD_VAR 0 1
4045: PPUSH
4046: CALL_OW 313
4050: PUSH
4051: LD_VAR 0 3
4055: LESS
4056: ST_TO_ADDR
// end ;
4057: LD_VAR 0 2
4061: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
// tmp := [ ] ;
4068: LD_ADDR_VAR 0 3
4072: PUSH
4073: EMPTY
4074: ST_TO_ADDR
// list := [ ] ;
4075: LD_ADDR_VAR 0 5
4079: PUSH
4080: EMPTY
4081: ST_TO_ADDR
// for i = 16 to 25 do
4082: LD_ADDR_VAR 0 4
4086: PUSH
4087: DOUBLE
4088: LD_INT 16
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 25
4094: PUSH
4095: FOR_TO
4096: IFFALSE 4169
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4098: LD_ADDR_VAR 0 3
4102: PUSH
4103: LD_VAR 0 3
4107: PUSH
4108: LD_INT 22
4110: PUSH
4111: LD_VAR 0 1
4115: PPUSH
4116: CALL_OW 255
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 91
4127: PUSH
4128: LD_VAR 0 1
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: PUSH
4141: LD_INT 30
4143: PUSH
4144: LD_VAR 0 4
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: PPUSH
4161: CALL_OW 69
4165: ADD
4166: ST_TO_ADDR
4167: GO 4095
4169: POP
4170: POP
// for i = 1 to tmp do
4171: LD_ADDR_VAR 0 4
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_VAR 0 3
4185: PUSH
4186: FOR_TO
4187: IFFALSE 4275
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4189: LD_ADDR_VAR 0 5
4193: PUSH
4194: LD_VAR 0 5
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_VAR 0 4
4208: ARRAY
4209: PPUSH
4210: CALL_OW 266
4214: PUSH
4215: LD_VAR 0 3
4219: PUSH
4220: LD_VAR 0 4
4224: ARRAY
4225: PPUSH
4226: CALL_OW 250
4230: PUSH
4231: LD_VAR 0 3
4235: PUSH
4236: LD_VAR 0 4
4240: ARRAY
4241: PPUSH
4242: CALL_OW 251
4246: PUSH
4247: LD_VAR 0 3
4251: PUSH
4252: LD_VAR 0 4
4256: ARRAY
4257: PPUSH
4258: CALL_OW 254
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: EMPTY
4270: LIST
4271: ADD
4272: ST_TO_ADDR
4273: GO 4186
4275: POP
4276: POP
// result := list ;
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: LD_VAR 0 5
4286: ST_TO_ADDR
// end ;
4287: LD_VAR 0 2
4291: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
4296: PPUSH
4297: PPUSH
4298: PPUSH
4299: PPUSH
4300: PPUSH
// if not factory then
4301: LD_VAR 0 1
4305: NOT
4306: IFFALSE 4310
// exit ;
4308: GO 4903
// if control = control_apeman then
4310: LD_VAR 0 4
4314: PUSH
4315: LD_INT 5
4317: EQUAL
4318: IFFALSE 4427
// begin tmp := UnitsInside ( factory ) ;
4320: LD_ADDR_VAR 0 8
4324: PUSH
4325: LD_VAR 0 1
4329: PPUSH
4330: CALL_OW 313
4334: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4335: LD_VAR 0 8
4339: PPUSH
4340: LD_INT 25
4342: PUSH
4343: LD_INT 12
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PPUSH
4350: CALL_OW 72
4354: NOT
4355: IFFALSE 4365
// control := control_manual ;
4357: LD_ADDR_VAR 0 4
4361: PUSH
4362: LD_INT 1
4364: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4365: LD_ADDR_VAR 0 8
4369: PUSH
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL 4062 0 1
4379: ST_TO_ADDR
// if tmp then
4380: LD_VAR 0 8
4384: IFFALSE 4427
// begin for i in tmp do
4386: LD_ADDR_VAR 0 7
4390: PUSH
4391: LD_VAR 0 8
4395: PUSH
4396: FOR_IN
4397: IFFALSE 4425
// if i [ 1 ] = b_ext_radio then
4399: LD_VAR 0 7
4403: PUSH
4404: LD_INT 1
4406: ARRAY
4407: PUSH
4408: LD_INT 22
4410: EQUAL
4411: IFFALSE 4423
// begin control := control_remote ;
4413: LD_ADDR_VAR 0 4
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// break ;
4421: GO 4425
// end ;
4423: GO 4396
4425: POP
4426: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_VAR 0 2
4436: PPUSH
4437: LD_VAR 0 3
4441: PPUSH
4442: LD_VAR 0 4
4446: PPUSH
4447: LD_VAR 0 5
4451: PPUSH
4452: CALL_OW 448
4456: IFFALSE 4491
// begin result := [ chassis , engine , control , weapon ] ;
4458: LD_ADDR_VAR 0 6
4462: PUSH
4463: LD_VAR 0 2
4467: PUSH
4468: LD_VAR 0 3
4472: PUSH
4473: LD_VAR 0 4
4477: PUSH
4478: LD_VAR 0 5
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: ST_TO_ADDR
// exit ;
4489: GO 4903
// end ; _chassis := AvailableChassisList ( factory ) ;
4491: LD_ADDR_VAR 0 9
4495: PUSH
4496: LD_VAR 0 1
4500: PPUSH
4501: CALL_OW 475
4505: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4506: LD_ADDR_VAR 0 11
4510: PUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 476
4520: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4521: LD_ADDR_VAR 0 12
4525: PUSH
4526: LD_VAR 0 1
4530: PPUSH
4531: CALL_OW 477
4535: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4536: LD_ADDR_VAR 0 10
4540: PUSH
4541: LD_VAR 0 1
4545: PPUSH
4546: CALL_OW 478
4550: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4551: LD_VAR 0 9
4555: NOT
4556: PUSH
4557: LD_VAR 0 11
4561: NOT
4562: OR
4563: PUSH
4564: LD_VAR 0 12
4568: NOT
4569: OR
4570: PUSH
4571: LD_VAR 0 10
4575: NOT
4576: OR
4577: IFFALSE 4612
// begin result := [ chassis , engine , control , weapon ] ;
4579: LD_ADDR_VAR 0 6
4583: PUSH
4584: LD_VAR 0 2
4588: PUSH
4589: LD_VAR 0 3
4593: PUSH
4594: LD_VAR 0 4
4598: PUSH
4599: LD_VAR 0 5
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: ST_TO_ADDR
// exit ;
4610: GO 4903
// end ; if not chassis in _chassis then
4612: LD_VAR 0 2
4616: PUSH
4617: LD_VAR 0 9
4621: IN
4622: NOT
4623: IFFALSE 4649
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4625: LD_ADDR_VAR 0 2
4629: PUSH
4630: LD_VAR 0 9
4634: PUSH
4635: LD_INT 1
4637: PPUSH
4638: LD_VAR 0 9
4642: PPUSH
4643: CALL_OW 12
4647: ARRAY
4648: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4649: LD_VAR 0 2
4653: PPUSH
4654: LD_VAR 0 3
4658: PPUSH
4659: CALL 4908 0 2
4663: NOT
4664: IFFALSE 4723
// repeat engine := _engine [ 1 ] ;
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: LD_VAR 0 11
4675: PUSH
4676: LD_INT 1
4678: ARRAY
4679: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4680: LD_ADDR_VAR 0 11
4684: PUSH
4685: LD_VAR 0 11
4689: PPUSH
4690: LD_INT 1
4692: PPUSH
4693: CALL_OW 3
4697: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4698: LD_VAR 0 2
4702: PPUSH
4703: LD_VAR 0 3
4707: PPUSH
4708: CALL 4908 0 2
4712: PUSH
4713: LD_VAR 0 11
4717: PUSH
4718: EMPTY
4719: EQUAL
4720: OR
4721: IFFALSE 4666
// if not control in _control then
4723: LD_VAR 0 4
4727: PUSH
4728: LD_VAR 0 12
4732: IN
4733: NOT
4734: IFFALSE 4760
// control := _control [ rand ( 1 , _control ) ] ;
4736: LD_ADDR_VAR 0 4
4740: PUSH
4741: LD_VAR 0 12
4745: PUSH
4746: LD_INT 1
4748: PPUSH
4749: LD_VAR 0 12
4753: PPUSH
4754: CALL_OW 12
4758: ARRAY
4759: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4760: LD_VAR 0 2
4764: PPUSH
4765: LD_VAR 0 5
4769: PPUSH
4770: CALL 5128 0 2
4774: NOT
4775: IFFALSE 4834
// repeat weapon := _weapon [ 1 ] ;
4777: LD_ADDR_VAR 0 5
4781: PUSH
4782: LD_VAR 0 10
4786: PUSH
4787: LD_INT 1
4789: ARRAY
4790: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4791: LD_ADDR_VAR 0 10
4795: PUSH
4796: LD_VAR 0 10
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 3
4808: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4809: LD_VAR 0 2
4813: PPUSH
4814: LD_VAR 0 5
4818: PPUSH
4819: CALL 5128 0 2
4823: PUSH
4824: LD_VAR 0 10
4828: PUSH
4829: EMPTY
4830: EQUAL
4831: OR
4832: IFFALSE 4777
// result := [ ] ;
4834: LD_ADDR_VAR 0 6
4838: PUSH
4839: EMPTY
4840: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4841: LD_VAR 0 1
4845: PPUSH
4846: LD_VAR 0 2
4850: PPUSH
4851: LD_VAR 0 3
4855: PPUSH
4856: LD_VAR 0 4
4860: PPUSH
4861: LD_VAR 0 5
4865: PPUSH
4866: CALL_OW 448
4870: IFFALSE 4903
// result := [ chassis , engine , control , weapon ] ;
4872: LD_ADDR_VAR 0 6
4876: PUSH
4877: LD_VAR 0 2
4881: PUSH
4882: LD_VAR 0 3
4886: PUSH
4887: LD_VAR 0 4
4891: PUSH
4892: LD_VAR 0 5
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// end ;
4903: LD_VAR 0 6
4907: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4908: LD_INT 0
4910: PPUSH
// if not chassis or not engine then
4911: LD_VAR 0 1
4915: NOT
4916: PUSH
4917: LD_VAR 0 2
4921: NOT
4922: OR
4923: IFFALSE 4927
// exit ;
4925: GO 5123
// case engine of engine_solar :
4927: LD_VAR 0 2
4931: PUSH
4932: LD_INT 2
4934: DOUBLE
4935: EQUAL
4936: IFTRUE 4940
4938: GO 4978
4940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: LD_INT 11
4948: PUSH
4949: LD_INT 12
4951: PUSH
4952: LD_INT 13
4954: PUSH
4955: LD_INT 14
4957: PUSH
4958: LD_INT 1
4960: PUSH
4961: LD_INT 2
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: ST_TO_ADDR
4976: GO 5107
4978: LD_INT 1
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5048
4986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4987: LD_ADDR_VAR 0 3
4991: PUSH
4992: LD_INT 11
4994: PUSH
4995: LD_INT 12
4997: PUSH
4998: LD_INT 13
5000: PUSH
5001: LD_INT 14
5003: PUSH
5004: LD_INT 1
5006: PUSH
5007: LD_INT 2
5009: PUSH
5010: LD_INT 3
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: LD_INT 5
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 23
5024: PUSH
5025: LD_INT 22
5027: PUSH
5028: LD_INT 24
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: ST_TO_ADDR
5046: GO 5107
5048: LD_INT 3
5050: DOUBLE
5051: EQUAL
5052: IFTRUE 5056
5054: GO 5106
5056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5057: LD_ADDR_VAR 0 3
5061: PUSH
5062: LD_INT 13
5064: PUSH
5065: LD_INT 14
5067: PUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 3
5073: PUSH
5074: LD_INT 4
5076: PUSH
5077: LD_INT 5
5079: PUSH
5080: LD_INT 21
5082: PUSH
5083: LD_INT 22
5085: PUSH
5086: LD_INT 23
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: ST_TO_ADDR
5104: GO 5107
5106: POP
// result := ( chassis in result ) ;
5107: LD_ADDR_VAR 0 3
5111: PUSH
5112: LD_VAR 0 1
5116: PUSH
5117: LD_VAR 0 3
5121: IN
5122: ST_TO_ADDR
// end ;
5123: LD_VAR 0 3
5127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5128: LD_INT 0
5130: PPUSH
// if not chassis or not weapon then
5131: LD_VAR 0 1
5135: NOT
5136: PUSH
5137: LD_VAR 0 2
5141: NOT
5142: OR
5143: IFFALSE 5147
// exit ;
5145: GO 6207
// case weapon of us_machine_gun :
5147: LD_VAR 0 2
5151: PUSH
5152: LD_INT 2
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5160
5158: GO 5190
5160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5161: LD_ADDR_VAR 0 3
5165: PUSH
5166: LD_INT 1
5168: PUSH
5169: LD_INT 2
5171: PUSH
5172: LD_INT 3
5174: PUSH
5175: LD_INT 4
5177: PUSH
5178: LD_INT 5
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: ST_TO_ADDR
5188: GO 6191
5190: LD_INT 3
5192: DOUBLE
5193: EQUAL
5194: IFTRUE 5198
5196: GO 5228
5198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_INT 1
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: LD_INT 5
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: ST_TO_ADDR
5226: GO 6191
5228: LD_INT 11
5230: DOUBLE
5231: EQUAL
5232: IFTRUE 5236
5234: GO 5266
5236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5237: LD_ADDR_VAR 0 3
5241: PUSH
5242: LD_INT 1
5244: PUSH
5245: LD_INT 2
5247: PUSH
5248: LD_INT 3
5250: PUSH
5251: LD_INT 4
5253: PUSH
5254: LD_INT 5
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: ST_TO_ADDR
5264: GO 6191
5266: LD_INT 4
5268: DOUBLE
5269: EQUAL
5270: IFTRUE 5274
5272: GO 5300
5274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5275: LD_ADDR_VAR 0 3
5279: PUSH
5280: LD_INT 2
5282: PUSH
5283: LD_INT 3
5285: PUSH
5286: LD_INT 4
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: ST_TO_ADDR
5298: GO 6191
5300: LD_INT 5
5302: DOUBLE
5303: EQUAL
5304: IFTRUE 5308
5306: GO 5334
5308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: LD_INT 2
5316: PUSH
5317: LD_INT 3
5319: PUSH
5320: LD_INT 4
5322: PUSH
5323: LD_INT 5
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: ST_TO_ADDR
5332: GO 6191
5334: LD_INT 9
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5342
5340: GO 5368
5342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5343: LD_ADDR_VAR 0 3
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: LD_INT 3
5353: PUSH
5354: LD_INT 4
5356: PUSH
5357: LD_INT 5
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: ST_TO_ADDR
5366: GO 6191
5368: LD_INT 7
5370: DOUBLE
5371: EQUAL
5372: IFTRUE 5376
5374: GO 5402
5376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_INT 2
5384: PUSH
5385: LD_INT 3
5387: PUSH
5388: LD_INT 4
5390: PUSH
5391: LD_INT 5
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
5400: GO 6191
5402: LD_INT 12
5404: DOUBLE
5405: EQUAL
5406: IFTRUE 5410
5408: GO 5436
5410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5411: LD_ADDR_VAR 0 3
5415: PUSH
5416: LD_INT 2
5418: PUSH
5419: LD_INT 3
5421: PUSH
5422: LD_INT 4
5424: PUSH
5425: LD_INT 5
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: ST_TO_ADDR
5434: GO 6191
5436: LD_INT 13
5438: DOUBLE
5439: EQUAL
5440: IFTRUE 5444
5442: GO 5470
5444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5445: LD_ADDR_VAR 0 3
5449: PUSH
5450: LD_INT 2
5452: PUSH
5453: LD_INT 3
5455: PUSH
5456: LD_INT 4
5458: PUSH
5459: LD_INT 5
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: ST_TO_ADDR
5468: GO 6191
5470: LD_INT 14
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5478
5476: GO 5496
5478: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5479: LD_ADDR_VAR 0 3
5483: PUSH
5484: LD_INT 4
5486: PUSH
5487: LD_INT 5
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
5494: GO 6191
5496: LD_INT 6
5498: DOUBLE
5499: EQUAL
5500: IFTRUE 5504
5502: GO 5522
5504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5505: LD_ADDR_VAR 0 3
5509: PUSH
5510: LD_INT 4
5512: PUSH
5513: LD_INT 5
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: ST_TO_ADDR
5520: GO 6191
5522: LD_INT 10
5524: DOUBLE
5525: EQUAL
5526: IFTRUE 5530
5528: GO 5548
5530: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5531: LD_ADDR_VAR 0 3
5535: PUSH
5536: LD_INT 4
5538: PUSH
5539: LD_INT 5
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: ST_TO_ADDR
5546: GO 6191
5548: LD_INT 22
5550: DOUBLE
5551: EQUAL
5552: IFTRUE 5556
5554: GO 5582
5556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_INT 11
5564: PUSH
5565: LD_INT 12
5567: PUSH
5568: LD_INT 13
5570: PUSH
5571: LD_INT 14
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
5580: GO 6191
5582: LD_INT 23
5584: DOUBLE
5585: EQUAL
5586: IFTRUE 5590
5588: GO 5616
5590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5591: LD_ADDR_VAR 0 3
5595: PUSH
5596: LD_INT 11
5598: PUSH
5599: LD_INT 12
5601: PUSH
5602: LD_INT 13
5604: PUSH
5605: LD_INT 14
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: ST_TO_ADDR
5614: GO 6191
5616: LD_INT 24
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5624
5622: GO 5650
5624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_INT 11
5632: PUSH
5633: LD_INT 12
5635: PUSH
5636: LD_INT 13
5638: PUSH
5639: LD_INT 14
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: ST_TO_ADDR
5648: GO 6191
5650: LD_INT 30
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5658
5656: GO 5684
5658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5659: LD_ADDR_VAR 0 3
5663: PUSH
5664: LD_INT 11
5666: PUSH
5667: LD_INT 12
5669: PUSH
5670: LD_INT 13
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: ST_TO_ADDR
5682: GO 6191
5684: LD_INT 25
5686: DOUBLE
5687: EQUAL
5688: IFTRUE 5692
5690: GO 5710
5692: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_INT 13
5700: PUSH
5701: LD_INT 14
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: ST_TO_ADDR
5708: GO 6191
5710: LD_INT 27
5712: DOUBLE
5713: EQUAL
5714: IFTRUE 5718
5716: GO 5736
5718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_INT 13
5726: PUSH
5727: LD_INT 14
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: ST_TO_ADDR
5734: GO 6191
5736: LD_INT 92
5738: DOUBLE
5739: EQUAL
5740: IFTRUE 5744
5742: GO 5770
5744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5745: LD_ADDR_VAR 0 3
5749: PUSH
5750: LD_INT 11
5752: PUSH
5753: LD_INT 12
5755: PUSH
5756: LD_INT 13
5758: PUSH
5759: LD_INT 14
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: ST_TO_ADDR
5768: GO 6191
5770: LD_INT 28
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5796
5778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5779: LD_ADDR_VAR 0 3
5783: PUSH
5784: LD_INT 13
5786: PUSH
5787: LD_INT 14
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: ST_TO_ADDR
5794: GO 6191
5796: LD_INT 29
5798: DOUBLE
5799: EQUAL
5800: IFTRUE 5804
5802: GO 5822
5804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5805: LD_ADDR_VAR 0 3
5809: PUSH
5810: LD_INT 13
5812: PUSH
5813: LD_INT 14
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: ST_TO_ADDR
5820: GO 6191
5822: LD_INT 31
5824: DOUBLE
5825: EQUAL
5826: IFTRUE 5830
5828: GO 5848
5830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5831: LD_ADDR_VAR 0 3
5835: PUSH
5836: LD_INT 13
5838: PUSH
5839: LD_INT 14
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: ST_TO_ADDR
5846: GO 6191
5848: LD_INT 26
5850: DOUBLE
5851: EQUAL
5852: IFTRUE 5856
5854: GO 5874
5856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5857: LD_ADDR_VAR 0 3
5861: PUSH
5862: LD_INT 13
5864: PUSH
5865: LD_INT 14
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: ST_TO_ADDR
5872: GO 6191
5874: LD_INT 42
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5882
5880: GO 5908
5882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5883: LD_ADDR_VAR 0 3
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 22
5893: PUSH
5894: LD_INT 23
5896: PUSH
5897: LD_INT 24
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: ST_TO_ADDR
5906: GO 6191
5908: LD_INT 43
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5916
5914: GO 5942
5916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5917: LD_ADDR_VAR 0 3
5921: PUSH
5922: LD_INT 21
5924: PUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 23
5930: PUSH
5931: LD_INT 24
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: ST_TO_ADDR
5940: GO 6191
5942: LD_INT 44
5944: DOUBLE
5945: EQUAL
5946: IFTRUE 5950
5948: GO 5976
5950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5951: LD_ADDR_VAR 0 3
5955: PUSH
5956: LD_INT 21
5958: PUSH
5959: LD_INT 22
5961: PUSH
5962: LD_INT 23
5964: PUSH
5965: LD_INT 24
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: ST_TO_ADDR
5974: GO 6191
5976: LD_INT 45
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5984
5982: GO 6010
5984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5985: LD_ADDR_VAR 0 3
5989: PUSH
5990: LD_INT 21
5992: PUSH
5993: LD_INT 22
5995: PUSH
5996: LD_INT 23
5998: PUSH
5999: LD_INT 24
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: ST_TO_ADDR
6008: GO 6191
6010: LD_INT 49
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6044
6018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6019: LD_ADDR_VAR 0 3
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 23
6032: PUSH
6033: LD_INT 24
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: ST_TO_ADDR
6042: GO 6191
6044: LD_INT 51
6046: DOUBLE
6047: EQUAL
6048: IFTRUE 6052
6050: GO 6078
6052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: LD_INT 21
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 23
6066: PUSH
6067: LD_INT 24
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: ST_TO_ADDR
6076: GO 6191
6078: LD_INT 52
6080: DOUBLE
6081: EQUAL
6082: IFTRUE 6086
6084: GO 6112
6086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6087: LD_ADDR_VAR 0 3
6091: PUSH
6092: LD_INT 21
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 23
6100: PUSH
6101: LD_INT 24
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: ST_TO_ADDR
6110: GO 6191
6112: LD_INT 53
6114: DOUBLE
6115: EQUAL
6116: IFTRUE 6120
6118: GO 6138
6120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6121: LD_ADDR_VAR 0 3
6125: PUSH
6126: LD_INT 23
6128: PUSH
6129: LD_INT 24
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: ST_TO_ADDR
6136: GO 6191
6138: LD_INT 46
6140: DOUBLE
6141: EQUAL
6142: IFTRUE 6146
6144: GO 6164
6146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6147: LD_ADDR_VAR 0 3
6151: PUSH
6152: LD_INT 23
6154: PUSH
6155: LD_INT 24
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: ST_TO_ADDR
6162: GO 6191
6164: LD_INT 47
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6190
6172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6173: LD_ADDR_VAR 0 3
6177: PUSH
6178: LD_INT 23
6180: PUSH
6181: LD_INT 24
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: ST_TO_ADDR
6188: GO 6191
6190: POP
// result := ( chassis in result ) ;
6191: LD_ADDR_VAR 0 3
6195: PUSH
6196: LD_VAR 0 1
6200: PUSH
6201: LD_VAR 0 3
6205: IN
6206: ST_TO_ADDR
// end ;
6207: LD_VAR 0 3
6211: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
6218: PPUSH
6219: PPUSH
6220: PPUSH
// result := array ;
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: LD_VAR 0 1
6230: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6231: LD_VAR 0 1
6235: NOT
6236: PUSH
6237: LD_VAR 0 2
6241: NOT
6242: OR
6243: PUSH
6244: LD_VAR 0 3
6248: NOT
6249: OR
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: LD_VAR 0 1
6260: GREATER
6261: OR
6262: PUSH
6263: LD_VAR 0 3
6267: PUSH
6268: LD_VAR 0 1
6272: GREATER
6273: OR
6274: IFFALSE 6278
// exit ;
6276: GO 6574
// if direction then
6278: LD_VAR 0 4
6282: IFFALSE 6346
// begin d := 1 ;
6284: LD_ADDR_VAR 0 9
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// if i_from > i_to then
6292: LD_VAR 0 2
6296: PUSH
6297: LD_VAR 0 3
6301: GREATER
6302: IFFALSE 6328
// length := ( array - i_from ) + i_to else
6304: LD_ADDR_VAR 0 11
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_VAR 0 2
6318: MINUS
6319: PUSH
6320: LD_VAR 0 3
6324: PLUS
6325: ST_TO_ADDR
6326: GO 6344
// length := i_to - i_from ;
6328: LD_ADDR_VAR 0 11
6332: PUSH
6333: LD_VAR 0 3
6337: PUSH
6338: LD_VAR 0 2
6342: MINUS
6343: ST_TO_ADDR
// end else
6344: GO 6407
// begin d := - 1 ;
6346: LD_ADDR_VAR 0 9
6350: PUSH
6351: LD_INT 1
6353: NEG
6354: ST_TO_ADDR
// if i_from > i_to then
6355: LD_VAR 0 2
6359: PUSH
6360: LD_VAR 0 3
6364: GREATER
6365: IFFALSE 6385
// length := i_from - i_to else
6367: LD_ADDR_VAR 0 11
6371: PUSH
6372: LD_VAR 0 2
6376: PUSH
6377: LD_VAR 0 3
6381: MINUS
6382: ST_TO_ADDR
6383: GO 6407
// length := ( array - i_to ) + i_from ;
6385: LD_ADDR_VAR 0 11
6389: PUSH
6390: LD_VAR 0 1
6394: PUSH
6395: LD_VAR 0 3
6399: MINUS
6400: PUSH
6401: LD_VAR 0 2
6405: PLUS
6406: ST_TO_ADDR
// end ; if not length then
6407: LD_VAR 0 11
6411: NOT
6412: IFFALSE 6416
// exit ;
6414: GO 6574
// tmp := array ;
6416: LD_ADDR_VAR 0 10
6420: PUSH
6421: LD_VAR 0 1
6425: ST_TO_ADDR
// for i = 1 to length do
6426: LD_ADDR_VAR 0 6
6430: PUSH
6431: DOUBLE
6432: LD_INT 1
6434: DEC
6435: ST_TO_ADDR
6436: LD_VAR 0 11
6440: PUSH
6441: FOR_TO
6442: IFFALSE 6562
// begin for j = 1 to array do
6444: LD_ADDR_VAR 0 7
6448: PUSH
6449: DOUBLE
6450: LD_INT 1
6452: DEC
6453: ST_TO_ADDR
6454: LD_VAR 0 1
6458: PUSH
6459: FOR_TO
6460: IFFALSE 6548
// begin k := j + d ;
6462: LD_ADDR_VAR 0 8
6466: PUSH
6467: LD_VAR 0 7
6471: PUSH
6472: LD_VAR 0 9
6476: PLUS
6477: ST_TO_ADDR
// if k > array then
6478: LD_VAR 0 8
6482: PUSH
6483: LD_VAR 0 1
6487: GREATER
6488: IFFALSE 6498
// k := 1 ;
6490: LD_ADDR_VAR 0 8
6494: PUSH
6495: LD_INT 1
6497: ST_TO_ADDR
// if not k then
6498: LD_VAR 0 8
6502: NOT
6503: IFFALSE 6515
// k := array ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_VAR 0 1
6514: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6515: LD_ADDR_VAR 0 10
6519: PUSH
6520: LD_VAR 0 10
6524: PPUSH
6525: LD_VAR 0 8
6529: PPUSH
6530: LD_VAR 0 1
6534: PUSH
6535: LD_VAR 0 7
6539: ARRAY
6540: PPUSH
6541: CALL_OW 1
6545: ST_TO_ADDR
// end ;
6546: GO 6459
6548: POP
6549: POP
// array := tmp ;
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 10
6559: ST_TO_ADDR
// end ;
6560: GO 6441
6562: POP
6563: POP
// result := array ;
6564: LD_ADDR_VAR 0 5
6568: PUSH
6569: LD_VAR 0 1
6573: ST_TO_ADDR
// end ;
6574: LD_VAR 0 5
6578: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6579: LD_INT 0
6581: PPUSH
6582: PPUSH
// result := 0 ;
6583: LD_ADDR_VAR 0 3
6587: PUSH
6588: LD_INT 0
6590: ST_TO_ADDR
// if not array or not value in array then
6591: LD_VAR 0 1
6595: NOT
6596: PUSH
6597: LD_VAR 0 2
6601: PUSH
6602: LD_VAR 0 1
6606: IN
6607: NOT
6608: OR
6609: IFFALSE 6613
// exit ;
6611: GO 6667
// for i = 1 to array do
6613: LD_ADDR_VAR 0 4
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_VAR 0 1
6627: PUSH
6628: FOR_TO
6629: IFFALSE 6665
// if value = array [ i ] then
6631: LD_VAR 0 2
6635: PUSH
6636: LD_VAR 0 1
6640: PUSH
6641: LD_VAR 0 4
6645: ARRAY
6646: EQUAL
6647: IFFALSE 6663
// begin result := i ;
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_VAR 0 4
6658: ST_TO_ADDR
// exit ;
6659: POP
6660: POP
6661: GO 6667
// end ;
6663: GO 6628
6665: POP
6666: POP
// end ;
6667: LD_VAR 0 3
6671: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6672: LD_INT 0
6674: PPUSH
// vc_chassis := chassis ;
6675: LD_ADDR_OWVAR 37
6679: PUSH
6680: LD_VAR 0 1
6684: ST_TO_ADDR
// vc_engine := engine ;
6685: LD_ADDR_OWVAR 39
6689: PUSH
6690: LD_VAR 0 2
6694: ST_TO_ADDR
// vc_control := control ;
6695: LD_ADDR_OWVAR 38
6699: PUSH
6700: LD_VAR 0 3
6704: ST_TO_ADDR
// vc_weapon := weapon ;
6705: LD_ADDR_OWVAR 40
6709: PUSH
6710: LD_VAR 0 4
6714: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6715: LD_ADDR_OWVAR 41
6719: PUSH
6720: LD_VAR 0 5
6724: ST_TO_ADDR
// end ;
6725: LD_VAR 0 6
6729: RET
// export function WantPlant ( unit ) ; var task ; begin
6730: LD_INT 0
6732: PPUSH
6733: PPUSH
// result := false ;
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: LD_INT 0
6741: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6742: LD_ADDR_VAR 0 3
6746: PUSH
6747: LD_VAR 0 1
6751: PPUSH
6752: CALL_OW 437
6756: ST_TO_ADDR
// if task then
6757: LD_VAR 0 3
6761: IFFALSE 6789
// if task [ 1 ] [ 1 ] = p then
6763: LD_VAR 0 3
6767: PUSH
6768: LD_INT 1
6770: ARRAY
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PUSH
6776: LD_STRING p
6778: EQUAL
6779: IFFALSE 6789
// result := true ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: LD_INT 1
6788: ST_TO_ADDR
// end ;
6789: LD_VAR 0 2
6793: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6794: LD_INT 0
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
// if pos < 1 then
6800: LD_VAR 0 2
6804: PUSH
6805: LD_INT 1
6807: LESS
6808: IFFALSE 6812
// exit ;
6810: GO 7115
// if pos = 1 then
6812: LD_VAR 0 2
6816: PUSH
6817: LD_INT 1
6819: EQUAL
6820: IFFALSE 6853
// result := Replace ( arr , pos [ 1 ] , value ) else
6822: LD_ADDR_VAR 0 4
6826: PUSH
6827: LD_VAR 0 1
6831: PPUSH
6832: LD_VAR 0 2
6836: PUSH
6837: LD_INT 1
6839: ARRAY
6840: PPUSH
6841: LD_VAR 0 3
6845: PPUSH
6846: CALL_OW 1
6850: ST_TO_ADDR
6851: GO 7115
// begin tmp := arr ;
6853: LD_ADDR_VAR 0 6
6857: PUSH
6858: LD_VAR 0 1
6862: ST_TO_ADDR
// s_arr := [ tmp ] ;
6863: LD_ADDR_VAR 0 7
6867: PUSH
6868: LD_VAR 0 6
6872: PUSH
6873: EMPTY
6874: LIST
6875: ST_TO_ADDR
// for i = 1 to pos - 1 do
6876: LD_ADDR_VAR 0 5
6880: PUSH
6881: DOUBLE
6882: LD_INT 1
6884: DEC
6885: ST_TO_ADDR
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 1
6893: MINUS
6894: PUSH
6895: FOR_TO
6896: IFFALSE 6941
// begin tmp := tmp [ pos [ i ] ] ;
6898: LD_ADDR_VAR 0 6
6902: PUSH
6903: LD_VAR 0 6
6907: PUSH
6908: LD_VAR 0 2
6912: PUSH
6913: LD_VAR 0 5
6917: ARRAY
6918: ARRAY
6919: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6920: LD_ADDR_VAR 0 7
6924: PUSH
6925: LD_VAR 0 7
6929: PUSH
6930: LD_VAR 0 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: ADD
6938: ST_TO_ADDR
// end ;
6939: GO 6895
6941: POP
6942: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6943: LD_ADDR_VAR 0 6
6947: PUSH
6948: LD_VAR 0 6
6952: PPUSH
6953: LD_VAR 0 2
6957: PUSH
6958: LD_VAR 0 2
6962: ARRAY
6963: PPUSH
6964: LD_VAR 0 3
6968: PPUSH
6969: CALL_OW 1
6973: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6974: LD_ADDR_VAR 0 7
6978: PUSH
6979: LD_VAR 0 7
6983: PPUSH
6984: LD_VAR 0 7
6988: PPUSH
6989: LD_VAR 0 6
6993: PPUSH
6994: CALL_OW 1
6998: ST_TO_ADDR
// for i = s_arr downto 2 do
6999: LD_ADDR_VAR 0 5
7003: PUSH
7004: DOUBLE
7005: LD_VAR 0 7
7009: INC
7010: ST_TO_ADDR
7011: LD_INT 2
7013: PUSH
7014: FOR_DOWNTO
7015: IFFALSE 7099
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7017: LD_ADDR_VAR 0 6
7021: PUSH
7022: LD_VAR 0 7
7026: PUSH
7027: LD_VAR 0 5
7031: PUSH
7032: LD_INT 1
7034: MINUS
7035: ARRAY
7036: PPUSH
7037: LD_VAR 0 2
7041: PUSH
7042: LD_VAR 0 5
7046: PUSH
7047: LD_INT 1
7049: MINUS
7050: ARRAY
7051: PPUSH
7052: LD_VAR 0 7
7056: PUSH
7057: LD_VAR 0 5
7061: ARRAY
7062: PPUSH
7063: CALL_OW 1
7067: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7068: LD_ADDR_VAR 0 7
7072: PUSH
7073: LD_VAR 0 7
7077: PPUSH
7078: LD_VAR 0 5
7082: PUSH
7083: LD_INT 1
7085: MINUS
7086: PPUSH
7087: LD_VAR 0 6
7091: PPUSH
7092: CALL_OW 1
7096: ST_TO_ADDR
// end ;
7097: GO 7014
7099: POP
7100: POP
// result := s_arr [ 1 ] ;
7101: LD_ADDR_VAR 0 4
7105: PUSH
7106: LD_VAR 0 7
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: ST_TO_ADDR
// end ; end ;
7115: LD_VAR 0 4
7119: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7120: LD_INT 0
7122: PPUSH
7123: PPUSH
// if not list then
7124: LD_VAR 0 1
7128: NOT
7129: IFFALSE 7133
// exit ;
7131: GO 7224
// i := list [ pos1 ] ;
7133: LD_ADDR_VAR 0 5
7137: PUSH
7138: LD_VAR 0 1
7142: PUSH
7143: LD_VAR 0 2
7147: ARRAY
7148: ST_TO_ADDR
// if not i then
7149: LD_VAR 0 5
7153: NOT
7154: IFFALSE 7158
// exit ;
7156: GO 7224
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: LD_VAR 0 1
7167: PPUSH
7168: LD_VAR 0 2
7172: PPUSH
7173: LD_VAR 0 1
7177: PUSH
7178: LD_VAR 0 3
7182: ARRAY
7183: PPUSH
7184: CALL_OW 1
7188: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7189: LD_ADDR_VAR 0 1
7193: PUSH
7194: LD_VAR 0 1
7198: PPUSH
7199: LD_VAR 0 3
7203: PPUSH
7204: LD_VAR 0 5
7208: PPUSH
7209: CALL_OW 1
7213: ST_TO_ADDR
// result := list ;
7214: LD_ADDR_VAR 0 4
7218: PUSH
7219: LD_VAR 0 1
7223: ST_TO_ADDR
// end ;
7224: LD_VAR 0 4
7228: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7229: LD_INT 0
7231: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7232: LD_ADDR_VAR 0 5
7236: PUSH
7237: LD_VAR 0 1
7241: PPUSH
7242: CALL_OW 250
7246: PPUSH
7247: LD_VAR 0 1
7251: PPUSH
7252: CALL_OW 251
7256: PPUSH
7257: LD_VAR 0 2
7261: PPUSH
7262: LD_VAR 0 3
7266: PPUSH
7267: LD_VAR 0 4
7271: PPUSH
7272: CALL 7282 0 5
7276: ST_TO_ADDR
// end ;
7277: LD_VAR 0 5
7281: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7282: LD_INT 0
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
// if not list then
7288: LD_VAR 0 3
7292: NOT
7293: IFFALSE 7297
// exit ;
7295: GO 7685
// result := [ ] ;
7297: LD_ADDR_VAR 0 6
7301: PUSH
7302: EMPTY
7303: ST_TO_ADDR
// for i in list do
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_VAR 0 3
7313: PUSH
7314: FOR_IN
7315: IFFALSE 7517
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7317: LD_ADDR_VAR 0 9
7321: PUSH
7322: LD_VAR 0 7
7326: PPUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 297
7341: ST_TO_ADDR
// if not result then
7342: LD_VAR 0 6
7346: NOT
7347: IFFALSE 7373
// result := [ [ i , tmp ] ] else
7349: LD_ADDR_VAR 0 6
7353: PUSH
7354: LD_VAR 0 7
7358: PUSH
7359: LD_VAR 0 9
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: EMPTY
7369: LIST
7370: ST_TO_ADDR
7371: GO 7515
// begin if result [ result ] [ 2 ] < tmp then
7373: LD_VAR 0 6
7377: PUSH
7378: LD_VAR 0 6
7382: ARRAY
7383: PUSH
7384: LD_INT 2
7386: ARRAY
7387: PUSH
7388: LD_VAR 0 9
7392: LESS
7393: IFFALSE 7435
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7395: LD_ADDR_VAR 0 6
7399: PUSH
7400: LD_VAR 0 6
7404: PPUSH
7405: LD_VAR 0 6
7409: PUSH
7410: LD_INT 1
7412: PLUS
7413: PPUSH
7414: LD_VAR 0 7
7418: PUSH
7419: LD_VAR 0 9
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PPUSH
7428: CALL_OW 2
7432: ST_TO_ADDR
7433: GO 7515
// for j = 1 to result do
7435: LD_ADDR_VAR 0 8
7439: PUSH
7440: DOUBLE
7441: LD_INT 1
7443: DEC
7444: ST_TO_ADDR
7445: LD_VAR 0 6
7449: PUSH
7450: FOR_TO
7451: IFFALSE 7513
// begin if tmp < result [ j ] [ 2 ] then
7453: LD_VAR 0 9
7457: PUSH
7458: LD_VAR 0 6
7462: PUSH
7463: LD_VAR 0 8
7467: ARRAY
7468: PUSH
7469: LD_INT 2
7471: ARRAY
7472: LESS
7473: IFFALSE 7511
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7475: LD_ADDR_VAR 0 6
7479: PUSH
7480: LD_VAR 0 6
7484: PPUSH
7485: LD_VAR 0 8
7489: PPUSH
7490: LD_VAR 0 7
7494: PUSH
7495: LD_VAR 0 9
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 2
7508: ST_TO_ADDR
// break ;
7509: GO 7513
// end ; end ;
7511: GO 7450
7513: POP
7514: POP
// end ; end ;
7515: GO 7314
7517: POP
7518: POP
// if result and not asc then
7519: LD_VAR 0 6
7523: PUSH
7524: LD_VAR 0 4
7528: NOT
7529: AND
7530: IFFALSE 7605
// begin tmp := result ;
7532: LD_ADDR_VAR 0 9
7536: PUSH
7537: LD_VAR 0 6
7541: ST_TO_ADDR
// for i = tmp downto 1 do
7542: LD_ADDR_VAR 0 7
7546: PUSH
7547: DOUBLE
7548: LD_VAR 0 9
7552: INC
7553: ST_TO_ADDR
7554: LD_INT 1
7556: PUSH
7557: FOR_DOWNTO
7558: IFFALSE 7603
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7560: LD_ADDR_VAR 0 6
7564: PUSH
7565: LD_VAR 0 6
7569: PPUSH
7570: LD_VAR 0 9
7574: PUSH
7575: LD_VAR 0 7
7579: MINUS
7580: PUSH
7581: LD_INT 1
7583: PLUS
7584: PPUSH
7585: LD_VAR 0 9
7589: PUSH
7590: LD_VAR 0 7
7594: ARRAY
7595: PPUSH
7596: CALL_OW 1
7600: ST_TO_ADDR
7601: GO 7557
7603: POP
7604: POP
// end ; tmp := [ ] ;
7605: LD_ADDR_VAR 0 9
7609: PUSH
7610: EMPTY
7611: ST_TO_ADDR
// if mode then
7612: LD_VAR 0 5
7616: IFFALSE 7685
// begin for i = 1 to result do
7618: LD_ADDR_VAR 0 7
7622: PUSH
7623: DOUBLE
7624: LD_INT 1
7626: DEC
7627: ST_TO_ADDR
7628: LD_VAR 0 6
7632: PUSH
7633: FOR_TO
7634: IFFALSE 7673
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7636: LD_ADDR_VAR 0 9
7640: PUSH
7641: LD_VAR 0 9
7645: PPUSH
7646: LD_VAR 0 7
7650: PPUSH
7651: LD_VAR 0 6
7655: PUSH
7656: LD_VAR 0 7
7660: ARRAY
7661: PUSH
7662: LD_INT 1
7664: ARRAY
7665: PPUSH
7666: CALL_OW 1
7670: ST_TO_ADDR
7671: GO 7633
7673: POP
7674: POP
// result := tmp ;
7675: LD_ADDR_VAR 0 6
7679: PUSH
7680: LD_VAR 0 9
7684: ST_TO_ADDR
// end ; end ;
7685: LD_VAR 0 6
7689: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7690: LD_INT 0
7692: PPUSH
7693: PPUSH
7694: PPUSH
7695: PPUSH
7696: PPUSH
7697: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7698: LD_ADDR_VAR 0 5
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: ST_TO_ADDR
// if not x or not y then
7720: LD_VAR 0 2
7724: NOT
7725: PUSH
7726: LD_VAR 0 3
7730: NOT
7731: OR
7732: IFFALSE 7736
// exit ;
7734: GO 9386
// if not range then
7736: LD_VAR 0 4
7740: NOT
7741: IFFALSE 7751
// range := 10 ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_INT 10
7750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7751: LD_ADDR_VAR 0 8
7755: PUSH
7756: LD_INT 81
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 92
7770: PUSH
7771: LD_VAR 0 2
7775: PUSH
7776: LD_VAR 0 3
7780: PUSH
7781: LD_VAR 0 4
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 3
7794: PUSH
7795: LD_INT 21
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 69
7818: ST_TO_ADDR
// if not tmp then
7819: LD_VAR 0 8
7823: NOT
7824: IFFALSE 7828
// exit ;
7826: GO 9386
// for i in tmp do
7828: LD_ADDR_VAR 0 6
7832: PUSH
7833: LD_VAR 0 8
7837: PUSH
7838: FOR_IN
7839: IFFALSE 9361
// begin points := [ 0 , 0 , 0 ] ;
7841: LD_ADDR_VAR 0 9
7845: PUSH
7846: LD_INT 0
7848: PUSH
7849: LD_INT 0
7851: PUSH
7852: LD_INT 0
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// bpoints := 1 ;
7860: LD_ADDR_VAR 0 10
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7868: LD_VAR 0 6
7872: PPUSH
7873: CALL_OW 247
7877: PUSH
7878: LD_INT 1
7880: DOUBLE
7881: EQUAL
7882: IFTRUE 7886
7884: GO 8464
7886: POP
// begin if GetClass ( i ) = 1 then
7887: LD_VAR 0 6
7891: PPUSH
7892: CALL_OW 257
7896: PUSH
7897: LD_INT 1
7899: EQUAL
7900: IFFALSE 7921
// points := [ 10 , 5 , 3 ] ;
7902: LD_ADDR_VAR 0 9
7906: PUSH
7907: LD_INT 10
7909: PUSH
7910: LD_INT 5
7912: PUSH
7913: LD_INT 3
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7921: LD_VAR 0 6
7925: PPUSH
7926: CALL_OW 257
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: LD_INT 3
7936: PUSH
7937: LD_INT 4
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: IN
7945: IFFALSE 7966
// points := [ 3 , 2 , 1 ] ;
7947: LD_ADDR_VAR 0 9
7951: PUSH
7952: LD_INT 3
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 1
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7966: LD_VAR 0 6
7970: PPUSH
7971: CALL_OW 257
7975: PUSH
7976: LD_INT 5
7978: EQUAL
7979: IFFALSE 8000
// points := [ 130 , 5 , 2 ] ;
7981: LD_ADDR_VAR 0 9
7985: PUSH
7986: LD_INT 130
7988: PUSH
7989: LD_INT 5
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8000: LD_VAR 0 6
8004: PPUSH
8005: CALL_OW 257
8009: PUSH
8010: LD_INT 8
8012: EQUAL
8013: IFFALSE 8034
// points := [ 35 , 35 , 30 ] ;
8015: LD_ADDR_VAR 0 9
8019: PUSH
8020: LD_INT 35
8022: PUSH
8023: LD_INT 35
8025: PUSH
8026: LD_INT 30
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8034: LD_VAR 0 6
8038: PPUSH
8039: CALL_OW 257
8043: PUSH
8044: LD_INT 9
8046: EQUAL
8047: IFFALSE 8068
// points := [ 20 , 55 , 40 ] ;
8049: LD_ADDR_VAR 0 9
8053: PUSH
8054: LD_INT 20
8056: PUSH
8057: LD_INT 55
8059: PUSH
8060: LD_INT 40
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8068: LD_VAR 0 6
8072: PPUSH
8073: CALL_OW 257
8077: PUSH
8078: LD_INT 12
8080: PUSH
8081: LD_INT 16
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: IN
8088: IFFALSE 8109
// points := [ 5 , 3 , 2 ] ;
8090: LD_ADDR_VAR 0 9
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: LD_INT 3
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8109: LD_VAR 0 6
8113: PPUSH
8114: CALL_OW 257
8118: PUSH
8119: LD_INT 17
8121: EQUAL
8122: IFFALSE 8143
// points := [ 100 , 50 , 75 ] ;
8124: LD_ADDR_VAR 0 9
8128: PUSH
8129: LD_INT 100
8131: PUSH
8132: LD_INT 50
8134: PUSH
8135: LD_INT 75
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8143: LD_VAR 0 6
8147: PPUSH
8148: CALL_OW 257
8152: PUSH
8153: LD_INT 15
8155: EQUAL
8156: IFFALSE 8177
// points := [ 10 , 5 , 3 ] ;
8158: LD_ADDR_VAR 0 9
8162: PUSH
8163: LD_INT 10
8165: PUSH
8166: LD_INT 5
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8177: LD_VAR 0 6
8181: PPUSH
8182: CALL_OW 257
8186: PUSH
8187: LD_INT 14
8189: EQUAL
8190: IFFALSE 8211
// points := [ 10 , 0 , 0 ] ;
8192: LD_ADDR_VAR 0 9
8196: PUSH
8197: LD_INT 10
8199: PUSH
8200: LD_INT 0
8202: PUSH
8203: LD_INT 0
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8211: LD_VAR 0 6
8215: PPUSH
8216: CALL_OW 257
8220: PUSH
8221: LD_INT 11
8223: EQUAL
8224: IFFALSE 8245
// points := [ 30 , 10 , 5 ] ;
8226: LD_ADDR_VAR 0 9
8230: PUSH
8231: LD_INT 30
8233: PUSH
8234: LD_INT 10
8236: PUSH
8237: LD_INT 5
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8245: LD_VAR 0 1
8249: PPUSH
8250: LD_INT 5
8252: PPUSH
8253: CALL_OW 321
8257: PUSH
8258: LD_INT 2
8260: EQUAL
8261: IFFALSE 8278
// bpoints := bpoints * 1.8 ;
8263: LD_ADDR_VAR 0 10
8267: PUSH
8268: LD_VAR 0 10
8272: PUSH
8273: LD_REAL  1.80000000000000E+0000
8276: MUL
8277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8278: LD_VAR 0 6
8282: PPUSH
8283: CALL_OW 257
8287: PUSH
8288: LD_INT 1
8290: PUSH
8291: LD_INT 2
8293: PUSH
8294: LD_INT 3
8296: PUSH
8297: LD_INT 4
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: IN
8306: PUSH
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_INT 51
8314: PPUSH
8315: CALL_OW 321
8319: PUSH
8320: LD_INT 2
8322: EQUAL
8323: AND
8324: IFFALSE 8341
// bpoints := bpoints * 1.2 ;
8326: LD_ADDR_VAR 0 10
8330: PUSH
8331: LD_VAR 0 10
8335: PUSH
8336: LD_REAL  1.20000000000000E+0000
8339: MUL
8340: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8341: LD_VAR 0 6
8345: PPUSH
8346: CALL_OW 257
8350: PUSH
8351: LD_INT 5
8353: PUSH
8354: LD_INT 7
8356: PUSH
8357: LD_INT 9
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: IN
8365: PUSH
8366: LD_VAR 0 1
8370: PPUSH
8371: LD_INT 52
8373: PPUSH
8374: CALL_OW 321
8378: PUSH
8379: LD_INT 2
8381: EQUAL
8382: AND
8383: IFFALSE 8400
// bpoints := bpoints * 1.5 ;
8385: LD_ADDR_VAR 0 10
8389: PUSH
8390: LD_VAR 0 10
8394: PUSH
8395: LD_REAL  1.50000000000000E+0000
8398: MUL
8399: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8400: LD_VAR 0 1
8404: PPUSH
8405: LD_INT 66
8407: PPUSH
8408: CALL_OW 321
8412: PUSH
8413: LD_INT 2
8415: EQUAL
8416: IFFALSE 8433
// bpoints := bpoints * 1.1 ;
8418: LD_ADDR_VAR 0 10
8422: PUSH
8423: LD_VAR 0 10
8427: PUSH
8428: LD_REAL  1.10000000000000E+0000
8431: MUL
8432: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8433: LD_ADDR_VAR 0 10
8437: PUSH
8438: LD_VAR 0 10
8442: PUSH
8443: LD_VAR 0 6
8447: PPUSH
8448: LD_INT 1
8450: PPUSH
8451: CALL_OW 259
8455: PUSH
8456: LD_REAL  1.15000000000000E+0000
8459: MUL
8460: MUL
8461: ST_TO_ADDR
// end ; unit_vehicle :
8462: GO 9290
8464: LD_INT 2
8466: DOUBLE
8467: EQUAL
8468: IFTRUE 8472
8470: GO 9278
8472: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8473: LD_VAR 0 6
8477: PPUSH
8478: CALL_OW 264
8482: PUSH
8483: LD_INT 2
8485: PUSH
8486: LD_INT 42
8488: PUSH
8489: LD_INT 24
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: IN
8497: IFFALSE 8518
// points := [ 25 , 5 , 3 ] ;
8499: LD_ADDR_VAR 0 9
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 5
8509: PUSH
8510: LD_INT 3
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8518: LD_VAR 0 6
8522: PPUSH
8523: CALL_OW 264
8527: PUSH
8528: LD_INT 4
8530: PUSH
8531: LD_INT 43
8533: PUSH
8534: LD_INT 25
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: IN
8542: IFFALSE 8563
// points := [ 40 , 15 , 5 ] ;
8544: LD_ADDR_VAR 0 9
8548: PUSH
8549: LD_INT 40
8551: PUSH
8552: LD_INT 15
8554: PUSH
8555: LD_INT 5
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: LIST
8562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8563: LD_VAR 0 6
8567: PPUSH
8568: CALL_OW 264
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 23
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: IN
8583: IFFALSE 8604
// points := [ 7 , 25 , 8 ] ;
8585: LD_ADDR_VAR 0 9
8589: PUSH
8590: LD_INT 7
8592: PUSH
8593: LD_INT 25
8595: PUSH
8596: LD_INT 8
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8604: LD_VAR 0 6
8608: PPUSH
8609: CALL_OW 264
8613: PUSH
8614: LD_INT 5
8616: PUSH
8617: LD_INT 27
8619: PUSH
8620: LD_INT 44
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: IN
8628: IFFALSE 8649
// points := [ 14 , 50 , 16 ] ;
8630: LD_ADDR_VAR 0 9
8634: PUSH
8635: LD_INT 14
8637: PUSH
8638: LD_INT 50
8640: PUSH
8641: LD_INT 16
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8649: LD_VAR 0 6
8653: PPUSH
8654: CALL_OW 264
8658: PUSH
8659: LD_INT 6
8661: PUSH
8662: LD_INT 46
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: IN
8669: IFFALSE 8690
// points := [ 32 , 120 , 70 ] ;
8671: LD_ADDR_VAR 0 9
8675: PUSH
8676: LD_INT 32
8678: PUSH
8679: LD_INT 120
8681: PUSH
8682: LD_INT 70
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8690: LD_VAR 0 6
8694: PPUSH
8695: CALL_OW 264
8699: PUSH
8700: LD_INT 7
8702: PUSH
8703: LD_INT 28
8705: PUSH
8706: LD_INT 45
8708: PUSH
8709: LD_INT 92
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: IN
8718: IFFALSE 8739
// points := [ 35 , 20 , 45 ] ;
8720: LD_ADDR_VAR 0 9
8724: PUSH
8725: LD_INT 35
8727: PUSH
8728: LD_INT 20
8730: PUSH
8731: LD_INT 45
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8739: LD_VAR 0 6
8743: PPUSH
8744: CALL_OW 264
8748: PUSH
8749: LD_INT 47
8751: PUSH
8752: EMPTY
8753: LIST
8754: IN
8755: IFFALSE 8776
// points := [ 67 , 45 , 75 ] ;
8757: LD_ADDR_VAR 0 9
8761: PUSH
8762: LD_INT 67
8764: PUSH
8765: LD_INT 45
8767: PUSH
8768: LD_INT 75
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8776: LD_VAR 0 6
8780: PPUSH
8781: CALL_OW 264
8785: PUSH
8786: LD_INT 26
8788: PUSH
8789: EMPTY
8790: LIST
8791: IN
8792: IFFALSE 8813
// points := [ 120 , 30 , 80 ] ;
8794: LD_ADDR_VAR 0 9
8798: PUSH
8799: LD_INT 120
8801: PUSH
8802: LD_INT 30
8804: PUSH
8805: LD_INT 80
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8813: LD_VAR 0 6
8817: PPUSH
8818: CALL_OW 264
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: EMPTY
8827: LIST
8828: IN
8829: IFFALSE 8850
// points := [ 40 , 1 , 1 ] ;
8831: LD_ADDR_VAR 0 9
8835: PUSH
8836: LD_INT 40
8838: PUSH
8839: LD_INT 1
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8850: LD_VAR 0 6
8854: PPUSH
8855: CALL_OW 264
8859: PUSH
8860: LD_INT 29
8862: PUSH
8863: EMPTY
8864: LIST
8865: IN
8866: IFFALSE 8887
// points := [ 70 , 200 , 400 ] ;
8868: LD_ADDR_VAR 0 9
8872: PUSH
8873: LD_INT 70
8875: PUSH
8876: LD_INT 200
8878: PUSH
8879: LD_INT 400
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8887: LD_VAR 0 6
8891: PPUSH
8892: CALL_OW 264
8896: PUSH
8897: LD_INT 14
8899: PUSH
8900: LD_INT 53
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: IN
8907: IFFALSE 8928
// points := [ 40 , 10 , 20 ] ;
8909: LD_ADDR_VAR 0 9
8913: PUSH
8914: LD_INT 40
8916: PUSH
8917: LD_INT 10
8919: PUSH
8920: LD_INT 20
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8928: LD_VAR 0 6
8932: PPUSH
8933: CALL_OW 264
8937: PUSH
8938: LD_INT 9
8940: PUSH
8941: EMPTY
8942: LIST
8943: IN
8944: IFFALSE 8965
// points := [ 5 , 70 , 20 ] ;
8946: LD_ADDR_VAR 0 9
8950: PUSH
8951: LD_INT 5
8953: PUSH
8954: LD_INT 70
8956: PUSH
8957: LD_INT 20
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: LIST
8964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8965: LD_VAR 0 6
8969: PPUSH
8970: CALL_OW 264
8974: PUSH
8975: LD_INT 10
8977: PUSH
8978: EMPTY
8979: LIST
8980: IN
8981: IFFALSE 9002
// points := [ 35 , 110 , 70 ] ;
8983: LD_ADDR_VAR 0 9
8987: PUSH
8988: LD_INT 35
8990: PUSH
8991: LD_INT 110
8993: PUSH
8994: LD_INT 70
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9002: LD_VAR 0 6
9006: PPUSH
9007: CALL_OW 265
9011: PUSH
9012: LD_INT 25
9014: EQUAL
9015: IFFALSE 9036
// points := [ 80 , 65 , 100 ] ;
9017: LD_ADDR_VAR 0 9
9021: PUSH
9022: LD_INT 80
9024: PUSH
9025: LD_INT 65
9027: PUSH
9028: LD_INT 100
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9036: LD_VAR 0 6
9040: PPUSH
9041: CALL_OW 263
9045: PUSH
9046: LD_INT 1
9048: EQUAL
9049: IFFALSE 9084
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9051: LD_ADDR_VAR 0 10
9055: PUSH
9056: LD_VAR 0 10
9060: PUSH
9061: LD_VAR 0 6
9065: PPUSH
9066: CALL_OW 311
9070: PPUSH
9071: LD_INT 3
9073: PPUSH
9074: CALL_OW 259
9078: PUSH
9079: LD_INT 4
9081: MUL
9082: MUL
9083: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9084: LD_VAR 0 6
9088: PPUSH
9089: CALL_OW 263
9093: PUSH
9094: LD_INT 2
9096: EQUAL
9097: IFFALSE 9148
// begin j := IsControledBy ( i ) ;
9099: LD_ADDR_VAR 0 7
9103: PUSH
9104: LD_VAR 0 6
9108: PPUSH
9109: CALL_OW 312
9113: ST_TO_ADDR
// if j then
9114: LD_VAR 0 7
9118: IFFALSE 9148
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9120: LD_ADDR_VAR 0 10
9124: PUSH
9125: LD_VAR 0 10
9129: PUSH
9130: LD_VAR 0 7
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: CALL_OW 259
9142: PUSH
9143: LD_INT 3
9145: MUL
9146: MUL
9147: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9148: LD_VAR 0 6
9152: PPUSH
9153: CALL_OW 264
9157: PUSH
9158: LD_INT 5
9160: PUSH
9161: LD_INT 6
9163: PUSH
9164: LD_INT 46
9166: PUSH
9167: LD_INT 44
9169: PUSH
9170: LD_INT 47
9172: PUSH
9173: LD_INT 45
9175: PUSH
9176: LD_INT 28
9178: PUSH
9179: LD_INT 7
9181: PUSH
9182: LD_INT 27
9184: PUSH
9185: LD_INT 29
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: IN
9200: PUSH
9201: LD_VAR 0 1
9205: PPUSH
9206: LD_INT 52
9208: PPUSH
9209: CALL_OW 321
9213: PUSH
9214: LD_INT 2
9216: EQUAL
9217: AND
9218: IFFALSE 9235
// bpoints := bpoints * 1.2 ;
9220: LD_ADDR_VAR 0 10
9224: PUSH
9225: LD_VAR 0 10
9229: PUSH
9230: LD_REAL  1.20000000000000E+0000
9233: MUL
9234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9235: LD_VAR 0 6
9239: PPUSH
9240: CALL_OW 264
9244: PUSH
9245: LD_INT 6
9247: PUSH
9248: LD_INT 46
9250: PUSH
9251: LD_INT 47
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: LIST
9258: IN
9259: IFFALSE 9276
// bpoints := bpoints * 1.2 ;
9261: LD_ADDR_VAR 0 10
9265: PUSH
9266: LD_VAR 0 10
9270: PUSH
9271: LD_REAL  1.20000000000000E+0000
9274: MUL
9275: ST_TO_ADDR
// end ; unit_building :
9276: GO 9290
9278: LD_INT 3
9280: DOUBLE
9281: EQUAL
9282: IFTRUE 9286
9284: GO 9289
9286: POP
// ; end ;
9287: GO 9290
9289: POP
// for j = 1 to 3 do
9290: LD_ADDR_VAR 0 7
9294: PUSH
9295: DOUBLE
9296: LD_INT 1
9298: DEC
9299: ST_TO_ADDR
9300: LD_INT 3
9302: PUSH
9303: FOR_TO
9304: IFFALSE 9357
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 5
9315: PPUSH
9316: LD_VAR 0 7
9320: PPUSH
9321: LD_VAR 0 5
9325: PUSH
9326: LD_VAR 0 7
9330: ARRAY
9331: PUSH
9332: LD_VAR 0 9
9336: PUSH
9337: LD_VAR 0 7
9341: ARRAY
9342: PUSH
9343: LD_VAR 0 10
9347: MUL
9348: PLUS
9349: PPUSH
9350: CALL_OW 1
9354: ST_TO_ADDR
9355: GO 9303
9357: POP
9358: POP
// end ;
9359: GO 7838
9361: POP
9362: POP
// result := Replace ( result , 4 , tmp ) ;
9363: LD_ADDR_VAR 0 5
9367: PUSH
9368: LD_VAR 0 5
9372: PPUSH
9373: LD_INT 4
9375: PPUSH
9376: LD_VAR 0 8
9380: PPUSH
9381: CALL_OW 1
9385: ST_TO_ADDR
// end ;
9386: LD_VAR 0 5
9390: RET
// export function DangerAtRange ( unit , range ) ; begin
9391: LD_INT 0
9393: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9394: LD_ADDR_VAR 0 3
9398: PUSH
9399: LD_VAR 0 1
9403: PPUSH
9404: CALL_OW 255
9408: PPUSH
9409: LD_VAR 0 1
9413: PPUSH
9414: CALL_OW 250
9418: PPUSH
9419: LD_VAR 0 1
9423: PPUSH
9424: CALL_OW 251
9428: PPUSH
9429: LD_VAR 0 2
9433: PPUSH
9434: CALL 7690 0 4
9438: ST_TO_ADDR
// end ;
9439: LD_VAR 0 3
9443: RET
// export function DangerInArea ( side , area ) ; begin
9444: LD_INT 0
9446: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9447: LD_ADDR_VAR 0 3
9451: PUSH
9452: LD_VAR 0 2
9456: PPUSH
9457: LD_INT 81
9459: PUSH
9460: LD_VAR 0 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PPUSH
9469: CALL_OW 70
9473: ST_TO_ADDR
// end ;
9474: LD_VAR 0 3
9478: RET
// export function IsExtension ( b ) ; begin
9479: LD_INT 0
9481: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9482: LD_ADDR_VAR 0 2
9486: PUSH
9487: LD_VAR 0 1
9491: PUSH
9492: LD_INT 23
9494: PUSH
9495: LD_INT 20
9497: PUSH
9498: LD_INT 22
9500: PUSH
9501: LD_INT 17
9503: PUSH
9504: LD_INT 24
9506: PUSH
9507: LD_INT 21
9509: PUSH
9510: LD_INT 19
9512: PUSH
9513: LD_INT 16
9515: PUSH
9516: LD_INT 25
9518: PUSH
9519: LD_INT 18
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: IN
9534: ST_TO_ADDR
// end ;
9535: LD_VAR 0 2
9539: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9540: LD_INT 0
9542: PPUSH
9543: PPUSH
9544: PPUSH
// result := [ ] ;
9545: LD_ADDR_VAR 0 4
9549: PUSH
9550: EMPTY
9551: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9552: LD_ADDR_VAR 0 5
9556: PUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: LD_INT 21
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 70
9576: ST_TO_ADDR
// if not tmp then
9577: LD_VAR 0 5
9581: NOT
9582: IFFALSE 9586
// exit ;
9584: GO 9650
// if checkLink then
9586: LD_VAR 0 3
9590: IFFALSE 9640
// begin for i in tmp do
9592: LD_ADDR_VAR 0 6
9596: PUSH
9597: LD_VAR 0 5
9601: PUSH
9602: FOR_IN
9603: IFFALSE 9638
// if GetBase ( i ) <> base then
9605: LD_VAR 0 6
9609: PPUSH
9610: CALL_OW 274
9614: PUSH
9615: LD_VAR 0 1
9619: NONEQUAL
9620: IFFALSE 9636
// ComLinkToBase ( base , i ) ;
9622: LD_VAR 0 1
9626: PPUSH
9627: LD_VAR 0 6
9631: PPUSH
9632: CALL_OW 169
9636: GO 9602
9638: POP
9639: POP
// end ; result := tmp ;
9640: LD_ADDR_VAR 0 4
9644: PUSH
9645: LD_VAR 0 5
9649: ST_TO_ADDR
// end ;
9650: LD_VAR 0 4
9654: RET
// export function ComComplete ( units , b ) ; var i ; begin
9655: LD_INT 0
9657: PPUSH
9658: PPUSH
// if not units then
9659: LD_VAR 0 1
9663: NOT
9664: IFFALSE 9668
// exit ;
9666: GO 9758
// for i in units do
9668: LD_ADDR_VAR 0 4
9672: PUSH
9673: LD_VAR 0 1
9677: PUSH
9678: FOR_IN
9679: IFFALSE 9756
// if BuildingStatus ( b ) = bs_build then
9681: LD_VAR 0 2
9685: PPUSH
9686: CALL_OW 461
9690: PUSH
9691: LD_INT 1
9693: EQUAL
9694: IFFALSE 9754
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9696: LD_VAR 0 4
9700: PPUSH
9701: LD_STRING h
9703: PUSH
9704: LD_VAR 0 2
9708: PPUSH
9709: CALL_OW 250
9713: PUSH
9714: LD_VAR 0 2
9718: PPUSH
9719: CALL_OW 251
9723: PUSH
9724: LD_VAR 0 2
9728: PUSH
9729: LD_INT 0
9731: PUSH
9732: LD_INT 0
9734: PUSH
9735: LD_INT 0
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: PUSH
9747: EMPTY
9748: LIST
9749: PPUSH
9750: CALL_OW 446
9754: GO 9678
9756: POP
9757: POP
// end ;
9758: LD_VAR 0 3
9762: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9763: LD_INT 0
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9771: LD_VAR 0 1
9775: NOT
9776: PUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 263
9786: PUSH
9787: LD_INT 2
9789: NONEQUAL
9790: OR
9791: IFFALSE 9795
// exit ;
9793: GO 10111
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9795: LD_ADDR_VAR 0 6
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_VAR 0 1
9807: PPUSH
9808: CALL_OW 255
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 30
9822: PUSH
9823: LD_INT 36
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 34
9832: PUSH
9833: LD_INT 31
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 69
9853: ST_TO_ADDR
// if not tmp then
9854: LD_VAR 0 6
9858: NOT
9859: IFFALSE 9863
// exit ;
9861: GO 10111
// result := [ ] ;
9863: LD_ADDR_VAR 0 2
9867: PUSH
9868: EMPTY
9869: ST_TO_ADDR
// for i in tmp do
9870: LD_ADDR_VAR 0 3
9874: PUSH
9875: LD_VAR 0 6
9879: PUSH
9880: FOR_IN
9881: IFFALSE 9952
// begin t := UnitsInside ( i ) ;
9883: LD_ADDR_VAR 0 4
9887: PUSH
9888: LD_VAR 0 3
9892: PPUSH
9893: CALL_OW 313
9897: ST_TO_ADDR
// if t then
9898: LD_VAR 0 4
9902: IFFALSE 9950
// for j in t do
9904: LD_ADDR_VAR 0 7
9908: PUSH
9909: LD_VAR 0 4
9913: PUSH
9914: FOR_IN
9915: IFFALSE 9948
// result := Replace ( result , result + 1 , j ) ;
9917: LD_ADDR_VAR 0 2
9921: PUSH
9922: LD_VAR 0 2
9926: PPUSH
9927: LD_VAR 0 2
9931: PUSH
9932: LD_INT 1
9934: PLUS
9935: PPUSH
9936: LD_VAR 0 7
9940: PPUSH
9941: CALL_OW 1
9945: ST_TO_ADDR
9946: GO 9914
9948: POP
9949: POP
// end ;
9950: GO 9880
9952: POP
9953: POP
// if not result then
9954: LD_VAR 0 2
9958: NOT
9959: IFFALSE 9963
// exit ;
9961: GO 10111
// mech := result [ 1 ] ;
9963: LD_ADDR_VAR 0 5
9967: PUSH
9968: LD_VAR 0 2
9972: PUSH
9973: LD_INT 1
9975: ARRAY
9976: ST_TO_ADDR
// if result > 1 then
9977: LD_VAR 0 2
9981: PUSH
9982: LD_INT 1
9984: GREATER
9985: IFFALSE 10097
// begin for i = 2 to result do
9987: LD_ADDR_VAR 0 3
9991: PUSH
9992: DOUBLE
9993: LD_INT 2
9995: DEC
9996: ST_TO_ADDR
9997: LD_VAR 0 2
10001: PUSH
10002: FOR_TO
10003: IFFALSE 10095
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10005: LD_ADDR_VAR 0 4
10009: PUSH
10010: LD_VAR 0 2
10014: PUSH
10015: LD_VAR 0 3
10019: ARRAY
10020: PPUSH
10021: LD_INT 3
10023: PPUSH
10024: CALL_OW 259
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: LD_VAR 0 3
10038: ARRAY
10039: PPUSH
10040: CALL_OW 432
10044: MINUS
10045: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10046: LD_VAR 0 4
10050: PUSH
10051: LD_VAR 0 5
10055: PPUSH
10056: LD_INT 3
10058: PPUSH
10059: CALL_OW 259
10063: PUSH
10064: LD_VAR 0 5
10068: PPUSH
10069: CALL_OW 432
10073: MINUS
10074: GREATEREQUAL
10075: IFFALSE 10093
// mech := result [ i ] ;
10077: LD_ADDR_VAR 0 5
10081: PUSH
10082: LD_VAR 0 2
10086: PUSH
10087: LD_VAR 0 3
10091: ARRAY
10092: ST_TO_ADDR
// end ;
10093: GO 10002
10095: POP
10096: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10097: LD_VAR 0 1
10101: PPUSH
10102: LD_VAR 0 5
10106: PPUSH
10107: CALL_OW 135
// end ;
10111: LD_VAR 0 2
10115: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
10120: PPUSH
10121: PPUSH
10122: PPUSH
10123: PPUSH
10124: PPUSH
10125: PPUSH
10126: PPUSH
10127: PPUSH
10128: PPUSH
10129: PPUSH
10130: PPUSH
// result := [ ] ;
10131: LD_ADDR_VAR 0 7
10135: PUSH
10136: EMPTY
10137: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10138: LD_VAR 0 1
10142: PPUSH
10143: CALL_OW 266
10147: PUSH
10148: LD_INT 0
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: IN
10158: NOT
10159: IFFALSE 10163
// exit ;
10161: GO 11797
// if name then
10163: LD_VAR 0 3
10167: IFFALSE 10183
// SetBName ( base_dep , name ) ;
10169: LD_VAR 0 1
10173: PPUSH
10174: LD_VAR 0 3
10178: PPUSH
10179: CALL_OW 500
// base := GetBase ( base_dep ) ;
10183: LD_ADDR_VAR 0 15
10187: PUSH
10188: LD_VAR 0 1
10192: PPUSH
10193: CALL_OW 274
10197: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10198: LD_ADDR_VAR 0 16
10202: PUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: CALL_OW 255
10212: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10213: LD_ADDR_VAR 0 17
10217: PUSH
10218: LD_VAR 0 1
10222: PPUSH
10223: CALL_OW 248
10227: ST_TO_ADDR
// if sources then
10228: LD_VAR 0 5
10232: IFFALSE 10279
// for i = 1 to 3 do
10234: LD_ADDR_VAR 0 8
10238: PUSH
10239: DOUBLE
10240: LD_INT 1
10242: DEC
10243: ST_TO_ADDR
10244: LD_INT 3
10246: PUSH
10247: FOR_TO
10248: IFFALSE 10277
// AddResourceType ( base , i , sources [ i ] ) ;
10250: LD_VAR 0 15
10254: PPUSH
10255: LD_VAR 0 8
10259: PPUSH
10260: LD_VAR 0 5
10264: PUSH
10265: LD_VAR 0 8
10269: ARRAY
10270: PPUSH
10271: CALL_OW 276
10275: GO 10247
10277: POP
10278: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10279: LD_ADDR_VAR 0 18
10283: PUSH
10284: LD_VAR 0 15
10288: PPUSH
10289: LD_VAR 0 2
10293: PPUSH
10294: LD_INT 1
10296: PPUSH
10297: CALL 9540 0 3
10301: ST_TO_ADDR
// InitHc ;
10302: CALL_OW 19
// InitUc ;
10306: CALL_OW 18
// uc_side := side ;
10310: LD_ADDR_OWVAR 20
10314: PUSH
10315: LD_VAR 0 16
10319: ST_TO_ADDR
// uc_nation := nation ;
10320: LD_ADDR_OWVAR 21
10324: PUSH
10325: LD_VAR 0 17
10329: ST_TO_ADDR
// if buildings then
10330: LD_VAR 0 18
10334: IFFALSE 11656
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10336: LD_ADDR_VAR 0 19
10340: PUSH
10341: LD_VAR 0 18
10345: PPUSH
10346: LD_INT 2
10348: PUSH
10349: LD_INT 30
10351: PUSH
10352: LD_INT 29
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 30
10361: PUSH
10362: LD_INT 30
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 72
10378: ST_TO_ADDR
// if tmp then
10379: LD_VAR 0 19
10383: IFFALSE 10431
// for i in tmp do
10385: LD_ADDR_VAR 0 8
10389: PUSH
10390: LD_VAR 0 19
10394: PUSH
10395: FOR_IN
10396: IFFALSE 10429
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10398: LD_VAR 0 8
10402: PPUSH
10403: CALL_OW 250
10407: PPUSH
10408: LD_VAR 0 8
10412: PPUSH
10413: CALL_OW 251
10417: PPUSH
10418: LD_VAR 0 16
10422: PPUSH
10423: CALL_OW 441
10427: GO 10395
10429: POP
10430: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10431: LD_VAR 0 18
10435: PPUSH
10436: LD_INT 2
10438: PUSH
10439: LD_INT 30
10441: PUSH
10442: LD_INT 32
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 30
10451: PUSH
10452: LD_INT 33
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: PPUSH
10464: CALL_OW 72
10468: IFFALSE 10556
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10470: LD_ADDR_VAR 0 8
10474: PUSH
10475: LD_VAR 0 18
10479: PPUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 30
10485: PUSH
10486: LD_INT 32
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 30
10495: PUSH
10496: LD_INT 33
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 72
10512: PUSH
10513: FOR_IN
10514: IFFALSE 10554
// begin if not GetBWeapon ( i ) then
10516: LD_VAR 0 8
10520: PPUSH
10521: CALL_OW 269
10525: NOT
10526: IFFALSE 10552
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10528: LD_VAR 0 8
10532: PPUSH
10533: LD_VAR 0 8
10537: PPUSH
10538: LD_VAR 0 2
10542: PPUSH
10543: CALL 11802 0 2
10547: PPUSH
10548: CALL_OW 431
// end ;
10552: GO 10513
10554: POP
10555: POP
// end ; for i = 1 to personel do
10556: LD_ADDR_VAR 0 8
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_VAR 0 6
10570: PUSH
10571: FOR_TO
10572: IFFALSE 11636
// begin if i > 4 then
10574: LD_VAR 0 8
10578: PUSH
10579: LD_INT 4
10581: GREATER
10582: IFFALSE 10586
// break ;
10584: GO 11636
// case i of 1 :
10586: LD_VAR 0 8
10590: PUSH
10591: LD_INT 1
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10679
10599: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10600: LD_ADDR_VAR 0 12
10604: PUSH
10605: LD_VAR 0 18
10609: PPUSH
10610: LD_INT 22
10612: PUSH
10613: LD_VAR 0 16
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 58
10624: PUSH
10625: EMPTY
10626: LIST
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: LD_INT 30
10633: PUSH
10634: LD_INT 32
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 30
10643: PUSH
10644: LD_INT 4
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 30
10653: PUSH
10654: LD_INT 5
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 72
10676: ST_TO_ADDR
10677: GO 10901
10679: LD_INT 2
10681: DOUBLE
10682: EQUAL
10683: IFTRUE 10687
10685: GO 10749
10687: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10688: LD_ADDR_VAR 0 12
10692: PUSH
10693: LD_VAR 0 18
10697: PPUSH
10698: LD_INT 22
10700: PUSH
10701: LD_VAR 0 16
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: LD_INT 30
10715: PUSH
10716: LD_INT 0
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 30
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PPUSH
10742: CALL_OW 72
10746: ST_TO_ADDR
10747: GO 10901
10749: LD_INT 3
10751: DOUBLE
10752: EQUAL
10753: IFTRUE 10757
10755: GO 10819
10757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10758: LD_ADDR_VAR 0 12
10762: PUSH
10763: LD_VAR 0 18
10767: PPUSH
10768: LD_INT 22
10770: PUSH
10771: LD_VAR 0 16
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 2
10782: PUSH
10783: LD_INT 30
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 30
10795: PUSH
10796: LD_INT 3
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PPUSH
10812: CALL_OW 72
10816: ST_TO_ADDR
10817: GO 10901
10819: LD_INT 4
10821: DOUBLE
10822: EQUAL
10823: IFTRUE 10827
10825: GO 10900
10827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10828: LD_ADDR_VAR 0 12
10832: PUSH
10833: LD_VAR 0 18
10837: PPUSH
10838: LD_INT 22
10840: PUSH
10841: LD_VAR 0 16
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 2
10852: PUSH
10853: LD_INT 30
10855: PUSH
10856: LD_INT 6
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 30
10865: PUSH
10866: LD_INT 7
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 30
10875: PUSH
10876: LD_INT 8
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PPUSH
10893: CALL_OW 72
10897: ST_TO_ADDR
10898: GO 10901
10900: POP
// if i = 1 then
10901: LD_VAR 0 8
10905: PUSH
10906: LD_INT 1
10908: EQUAL
10909: IFFALSE 11020
// begin tmp := [ ] ;
10911: LD_ADDR_VAR 0 19
10915: PUSH
10916: EMPTY
10917: ST_TO_ADDR
// for j in f do
10918: LD_ADDR_VAR 0 9
10922: PUSH
10923: LD_VAR 0 12
10927: PUSH
10928: FOR_IN
10929: IFFALSE 11002
// if GetBType ( j ) = b_bunker then
10931: LD_VAR 0 9
10935: PPUSH
10936: CALL_OW 266
10940: PUSH
10941: LD_INT 32
10943: EQUAL
10944: IFFALSE 10971
// tmp := Insert ( tmp , 1 , j ) else
10946: LD_ADDR_VAR 0 19
10950: PUSH
10951: LD_VAR 0 19
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: LD_VAR 0 9
10963: PPUSH
10964: CALL_OW 2
10968: ST_TO_ADDR
10969: GO 11000
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10971: LD_ADDR_VAR 0 19
10975: PUSH
10976: LD_VAR 0 19
10980: PPUSH
10981: LD_VAR 0 19
10985: PUSH
10986: LD_INT 1
10988: PLUS
10989: PPUSH
10990: LD_VAR 0 9
10994: PPUSH
10995: CALL_OW 2
10999: ST_TO_ADDR
11000: GO 10928
11002: POP
11003: POP
// if tmp then
11004: LD_VAR 0 19
11008: IFFALSE 11020
// f := tmp ;
11010: LD_ADDR_VAR 0 12
11014: PUSH
11015: LD_VAR 0 19
11019: ST_TO_ADDR
// end ; x := personel [ i ] ;
11020: LD_ADDR_VAR 0 13
11024: PUSH
11025: LD_VAR 0 6
11029: PUSH
11030: LD_VAR 0 8
11034: ARRAY
11035: ST_TO_ADDR
// if x = - 1 then
11036: LD_VAR 0 13
11040: PUSH
11041: LD_INT 1
11043: NEG
11044: EQUAL
11045: IFFALSE 11254
// begin for j in f do
11047: LD_ADDR_VAR 0 9
11051: PUSH
11052: LD_VAR 0 12
11056: PUSH
11057: FOR_IN
11058: IFFALSE 11250
// repeat InitHc ;
11060: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11064: LD_VAR 0 9
11068: PPUSH
11069: CALL_OW 266
11073: PUSH
11074: LD_INT 5
11076: EQUAL
11077: IFFALSE 11147
// begin if UnitsInside ( j ) < 3 then
11079: LD_VAR 0 9
11083: PPUSH
11084: CALL_OW 313
11088: PUSH
11089: LD_INT 3
11091: LESS
11092: IFFALSE 11128
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11094: LD_INT 0
11096: PPUSH
11097: LD_INT 5
11099: PUSH
11100: LD_INT 8
11102: PUSH
11103: LD_INT 9
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: PUSH
11111: LD_VAR 0 17
11115: ARRAY
11116: PPUSH
11117: LD_VAR 0 4
11121: PPUSH
11122: CALL_OW 380
11126: GO 11145
// PrepareHuman ( false , i , skill ) ;
11128: LD_INT 0
11130: PPUSH
11131: LD_VAR 0 8
11135: PPUSH
11136: LD_VAR 0 4
11140: PPUSH
11141: CALL_OW 380
// end else
11145: GO 11164
// PrepareHuman ( false , i , skill ) ;
11147: LD_INT 0
11149: PPUSH
11150: LD_VAR 0 8
11154: PPUSH
11155: LD_VAR 0 4
11159: PPUSH
11160: CALL_OW 380
// un := CreateHuman ;
11164: LD_ADDR_VAR 0 14
11168: PUSH
11169: CALL_OW 44
11173: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11174: LD_ADDR_VAR 0 7
11178: PUSH
11179: LD_VAR 0 7
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: LD_VAR 0 14
11191: PPUSH
11192: CALL_OW 2
11196: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11197: LD_VAR 0 14
11201: PPUSH
11202: LD_VAR 0 9
11206: PPUSH
11207: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11211: LD_VAR 0 9
11215: PPUSH
11216: CALL_OW 313
11220: PUSH
11221: LD_INT 6
11223: EQUAL
11224: PUSH
11225: LD_VAR 0 9
11229: PPUSH
11230: CALL_OW 266
11234: PUSH
11235: LD_INT 32
11237: PUSH
11238: LD_INT 31
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: IN
11245: OR
11246: IFFALSE 11060
11248: GO 11057
11250: POP
11251: POP
// end else
11252: GO 11634
// for j = 1 to x do
11254: LD_ADDR_VAR 0 9
11258: PUSH
11259: DOUBLE
11260: LD_INT 1
11262: DEC
11263: ST_TO_ADDR
11264: LD_VAR 0 13
11268: PUSH
11269: FOR_TO
11270: IFFALSE 11632
// begin InitHc ;
11272: CALL_OW 19
// if not f then
11276: LD_VAR 0 12
11280: NOT
11281: IFFALSE 11370
// begin PrepareHuman ( false , i , skill ) ;
11283: LD_INT 0
11285: PPUSH
11286: LD_VAR 0 8
11290: PPUSH
11291: LD_VAR 0 4
11295: PPUSH
11296: CALL_OW 380
// un := CreateHuman ;
11300: LD_ADDR_VAR 0 14
11304: PUSH
11305: CALL_OW 44
11309: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11310: LD_ADDR_VAR 0 7
11314: PUSH
11315: LD_VAR 0 7
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: LD_VAR 0 14
11327: PPUSH
11328: CALL_OW 2
11332: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11333: LD_VAR 0 14
11337: PPUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 250
11347: PPUSH
11348: LD_VAR 0 1
11352: PPUSH
11353: CALL_OW 251
11357: PPUSH
11358: LD_INT 10
11360: PPUSH
11361: LD_INT 0
11363: PPUSH
11364: CALL_OW 50
// continue ;
11368: GO 11269
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11370: LD_VAR 0 12
11374: PUSH
11375: LD_INT 1
11377: ARRAY
11378: PPUSH
11379: CALL_OW 313
11383: PUSH
11384: LD_VAR 0 12
11388: PUSH
11389: LD_INT 1
11391: ARRAY
11392: PPUSH
11393: CALL_OW 266
11397: PUSH
11398: LD_INT 32
11400: PUSH
11401: LD_INT 31
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: IN
11408: AND
11409: PUSH
11410: LD_VAR 0 12
11414: PUSH
11415: LD_INT 1
11417: ARRAY
11418: PPUSH
11419: CALL_OW 313
11423: PUSH
11424: LD_INT 6
11426: EQUAL
11427: OR
11428: IFFALSE 11448
// f := Delete ( f , 1 ) ;
11430: LD_ADDR_VAR 0 12
11434: PUSH
11435: LD_VAR 0 12
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 3
11447: ST_TO_ADDR
// if not f then
11448: LD_VAR 0 12
11452: NOT
11453: IFFALSE 11471
// begin x := x + 2 ;
11455: LD_ADDR_VAR 0 13
11459: PUSH
11460: LD_VAR 0 13
11464: PUSH
11465: LD_INT 2
11467: PLUS
11468: ST_TO_ADDR
// continue ;
11469: GO 11269
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11471: LD_VAR 0 12
11475: PUSH
11476: LD_INT 1
11478: ARRAY
11479: PPUSH
11480: CALL_OW 266
11484: PUSH
11485: LD_INT 5
11487: EQUAL
11488: IFFALSE 11562
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11490: LD_VAR 0 12
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: CALL_OW 313
11503: PUSH
11504: LD_INT 3
11506: LESS
11507: IFFALSE 11543
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11509: LD_INT 0
11511: PPUSH
11512: LD_INT 5
11514: PUSH
11515: LD_INT 8
11517: PUSH
11518: LD_INT 9
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: LD_VAR 0 17
11530: ARRAY
11531: PPUSH
11532: LD_VAR 0 4
11536: PPUSH
11537: CALL_OW 380
11541: GO 11560
// PrepareHuman ( false , i , skill ) ;
11543: LD_INT 0
11545: PPUSH
11546: LD_VAR 0 8
11550: PPUSH
11551: LD_VAR 0 4
11555: PPUSH
11556: CALL_OW 380
// end else
11560: GO 11579
// PrepareHuman ( false , i , skill ) ;
11562: LD_INT 0
11564: PPUSH
11565: LD_VAR 0 8
11569: PPUSH
11570: LD_VAR 0 4
11574: PPUSH
11575: CALL_OW 380
// un := CreateHuman ;
11579: LD_ADDR_VAR 0 14
11583: PUSH
11584: CALL_OW 44
11588: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11589: LD_ADDR_VAR 0 7
11593: PUSH
11594: LD_VAR 0 7
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: LD_VAR 0 14
11606: PPUSH
11607: CALL_OW 2
11611: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11612: LD_VAR 0 14
11616: PPUSH
11617: LD_VAR 0 12
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: PPUSH
11626: CALL_OW 52
// end ;
11630: GO 11269
11632: POP
11633: POP
// end ;
11634: GO 10571
11636: POP
11637: POP
// result := result ^ buildings ;
11638: LD_ADDR_VAR 0 7
11642: PUSH
11643: LD_VAR 0 7
11647: PUSH
11648: LD_VAR 0 18
11652: ADD
11653: ST_TO_ADDR
// end else
11654: GO 11797
// begin for i = 1 to personel do
11656: LD_ADDR_VAR 0 8
11660: PUSH
11661: DOUBLE
11662: LD_INT 1
11664: DEC
11665: ST_TO_ADDR
11666: LD_VAR 0 6
11670: PUSH
11671: FOR_TO
11672: IFFALSE 11795
// begin if i > 4 then
11674: LD_VAR 0 8
11678: PUSH
11679: LD_INT 4
11681: GREATER
11682: IFFALSE 11686
// break ;
11684: GO 11795
// x := personel [ i ] ;
11686: LD_ADDR_VAR 0 13
11690: PUSH
11691: LD_VAR 0 6
11695: PUSH
11696: LD_VAR 0 8
11700: ARRAY
11701: ST_TO_ADDR
// if x = - 1 then
11702: LD_VAR 0 13
11706: PUSH
11707: LD_INT 1
11709: NEG
11710: EQUAL
11711: IFFALSE 11715
// continue ;
11713: GO 11671
// PrepareHuman ( false , i , skill ) ;
11715: LD_INT 0
11717: PPUSH
11718: LD_VAR 0 8
11722: PPUSH
11723: LD_VAR 0 4
11727: PPUSH
11728: CALL_OW 380
// un := CreateHuman ;
11732: LD_ADDR_VAR 0 14
11736: PUSH
11737: CALL_OW 44
11741: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11742: LD_VAR 0 14
11746: PPUSH
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL_OW 250
11756: PPUSH
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 251
11766: PPUSH
11767: LD_INT 10
11769: PPUSH
11770: LD_INT 0
11772: PPUSH
11773: CALL_OW 50
// result := result ^ un ;
11777: LD_ADDR_VAR 0 7
11781: PUSH
11782: LD_VAR 0 7
11786: PUSH
11787: LD_VAR 0 14
11791: ADD
11792: ST_TO_ADDR
// end ;
11793: GO 11671
11795: POP
11796: POP
// end ; end ;
11797: LD_VAR 0 7
11801: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11802: LD_INT 0
11804: PPUSH
11805: PPUSH
11806: PPUSH
11807: PPUSH
11808: PPUSH
11809: PPUSH
11810: PPUSH
11811: PPUSH
11812: PPUSH
11813: PPUSH
11814: PPUSH
11815: PPUSH
11816: PPUSH
11817: PPUSH
11818: PPUSH
11819: PPUSH
// result := false ;
11820: LD_ADDR_VAR 0 3
11824: PUSH
11825: LD_INT 0
11827: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11828: LD_VAR 0 1
11832: NOT
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 266
11843: PUSH
11844: LD_INT 32
11846: PUSH
11847: LD_INT 33
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: IN
11854: NOT
11855: OR
11856: IFFALSE 11860
// exit ;
11858: GO 12969
// nat := GetNation ( tower ) ;
11860: LD_ADDR_VAR 0 12
11864: PUSH
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL_OW 248
11874: ST_TO_ADDR
// side := GetSide ( tower ) ;
11875: LD_ADDR_VAR 0 16
11879: PUSH
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 255
11889: ST_TO_ADDR
// x := GetX ( tower ) ;
11890: LD_ADDR_VAR 0 10
11894: PUSH
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 250
11904: ST_TO_ADDR
// y := GetY ( tower ) ;
11905: LD_ADDR_VAR 0 11
11909: PUSH
11910: LD_VAR 0 1
11914: PPUSH
11915: CALL_OW 251
11919: ST_TO_ADDR
// if not x or not y then
11920: LD_VAR 0 10
11924: NOT
11925: PUSH
11926: LD_VAR 0 11
11930: NOT
11931: OR
11932: IFFALSE 11936
// exit ;
11934: GO 12969
// weapon := 0 ;
11936: LD_ADDR_VAR 0 18
11940: PUSH
11941: LD_INT 0
11943: ST_TO_ADDR
// fac_list := [ ] ;
11944: LD_ADDR_VAR 0 17
11948: PUSH
11949: EMPTY
11950: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11951: LD_ADDR_VAR 0 6
11955: PUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 274
11965: PPUSH
11966: LD_VAR 0 2
11970: PPUSH
11971: LD_INT 0
11973: PPUSH
11974: CALL 9540 0 3
11978: PPUSH
11979: LD_INT 30
11981: PUSH
11982: LD_INT 3
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 72
11993: ST_TO_ADDR
// if not factories then
11994: LD_VAR 0 6
11998: NOT
11999: IFFALSE 12003
// exit ;
12001: GO 12969
// for i in factories do
12003: LD_ADDR_VAR 0 8
12007: PUSH
12008: LD_VAR 0 6
12012: PUSH
12013: FOR_IN
12014: IFFALSE 12039
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12016: LD_ADDR_VAR 0 17
12020: PUSH
12021: LD_VAR 0 17
12025: PUSH
12026: LD_VAR 0 8
12030: PPUSH
12031: CALL_OW 478
12035: UNION
12036: ST_TO_ADDR
12037: GO 12013
12039: POP
12040: POP
// if not fac_list then
12041: LD_VAR 0 17
12045: NOT
12046: IFFALSE 12050
// exit ;
12048: GO 12969
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12050: LD_ADDR_VAR 0 5
12054: PUSH
12055: LD_INT 4
12057: PUSH
12058: LD_INT 5
12060: PUSH
12061: LD_INT 9
12063: PUSH
12064: LD_INT 10
12066: PUSH
12067: LD_INT 6
12069: PUSH
12070: LD_INT 7
12072: PUSH
12073: LD_INT 11
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 27
12087: PUSH
12088: LD_INT 28
12090: PUSH
12091: LD_INT 26
12093: PUSH
12094: LD_INT 30
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 43
12105: PUSH
12106: LD_INT 44
12108: PUSH
12109: LD_INT 46
12111: PUSH
12112: LD_INT 45
12114: PUSH
12115: LD_INT 47
12117: PUSH
12118: LD_INT 49
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: PUSH
12134: LD_VAR 0 12
12138: ARRAY
12139: ST_TO_ADDR
// list := list isect fac_list ;
12140: LD_ADDR_VAR 0 5
12144: PUSH
12145: LD_VAR 0 5
12149: PUSH
12150: LD_VAR 0 17
12154: ISECT
12155: ST_TO_ADDR
// if not list then
12156: LD_VAR 0 5
12160: NOT
12161: IFFALSE 12165
// exit ;
12163: GO 12969
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12165: LD_VAR 0 12
12169: PUSH
12170: LD_INT 3
12172: EQUAL
12173: PUSH
12174: LD_INT 49
12176: PUSH
12177: LD_VAR 0 5
12181: IN
12182: AND
12183: PUSH
12184: LD_INT 31
12186: PPUSH
12187: LD_VAR 0 16
12191: PPUSH
12192: CALL_OW 321
12196: PUSH
12197: LD_INT 2
12199: EQUAL
12200: AND
12201: IFFALSE 12261
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12203: LD_INT 22
12205: PUSH
12206: LD_VAR 0 16
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 35
12217: PUSH
12218: LD_INT 49
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 91
12227: PUSH
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 10
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 69
12250: NOT
12251: IFFALSE 12261
// weapon := ru_time_lapser ;
12253: LD_ADDR_VAR 0 18
12257: PUSH
12258: LD_INT 49
12260: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12261: LD_VAR 0 12
12265: PUSH
12266: LD_INT 1
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: IN
12276: PUSH
12277: LD_INT 11
12279: PUSH
12280: LD_VAR 0 5
12284: IN
12285: PUSH
12286: LD_INT 30
12288: PUSH
12289: LD_VAR 0 5
12293: IN
12294: OR
12295: AND
12296: PUSH
12297: LD_INT 6
12299: PPUSH
12300: LD_VAR 0 16
12304: PPUSH
12305: CALL_OW 321
12309: PUSH
12310: LD_INT 2
12312: EQUAL
12313: AND
12314: IFFALSE 12479
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12316: LD_INT 22
12318: PUSH
12319: LD_VAR 0 16
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: LD_INT 35
12333: PUSH
12334: LD_INT 11
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 35
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 91
12358: PUSH
12359: LD_VAR 0 1
12363: PUSH
12364: LD_INT 18
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: NOT
12382: PUSH
12383: LD_INT 22
12385: PUSH
12386: LD_VAR 0 16
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 2
12397: PUSH
12398: LD_INT 30
12400: PUSH
12401: LD_INT 32
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 33
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 91
12425: PUSH
12426: LD_VAR 0 1
12430: PUSH
12431: LD_INT 12
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: PUSH
12452: LD_INT 2
12454: GREATER
12455: AND
12456: IFFALSE 12479
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12458: LD_ADDR_VAR 0 18
12462: PUSH
12463: LD_INT 11
12465: PUSH
12466: LD_INT 30
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_VAR 0 12
12477: ARRAY
12478: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12479: LD_VAR 0 18
12483: NOT
12484: PUSH
12485: LD_INT 40
12487: PPUSH
12488: LD_VAR 0 16
12492: PPUSH
12493: CALL_OW 321
12497: PUSH
12498: LD_INT 2
12500: EQUAL
12501: AND
12502: PUSH
12503: LD_INT 7
12505: PUSH
12506: LD_VAR 0 5
12510: IN
12511: PUSH
12512: LD_INT 28
12514: PUSH
12515: LD_VAR 0 5
12519: IN
12520: OR
12521: PUSH
12522: LD_INT 45
12524: PUSH
12525: LD_VAR 0 5
12529: IN
12530: OR
12531: AND
12532: IFFALSE 12786
// begin hex := GetHexInfo ( x , y ) ;
12534: LD_ADDR_VAR 0 4
12538: PUSH
12539: LD_VAR 0 10
12543: PPUSH
12544: LD_VAR 0 11
12548: PPUSH
12549: CALL_OW 546
12553: ST_TO_ADDR
// if hex [ 1 ] then
12554: LD_VAR 0 4
12558: PUSH
12559: LD_INT 1
12561: ARRAY
12562: IFFALSE 12566
// exit ;
12564: GO 12969
// height := hex [ 2 ] ;
12566: LD_ADDR_VAR 0 15
12570: PUSH
12571: LD_VAR 0 4
12575: PUSH
12576: LD_INT 2
12578: ARRAY
12579: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12580: LD_ADDR_VAR 0 14
12584: PUSH
12585: LD_INT 0
12587: PUSH
12588: LD_INT 2
12590: PUSH
12591: LD_INT 3
12593: PUSH
12594: LD_INT 5
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: ST_TO_ADDR
// for i in tmp do
12603: LD_ADDR_VAR 0 8
12607: PUSH
12608: LD_VAR 0 14
12612: PUSH
12613: FOR_IN
12614: IFFALSE 12784
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12616: LD_ADDR_VAR 0 9
12620: PUSH
12621: LD_VAR 0 10
12625: PPUSH
12626: LD_VAR 0 8
12630: PPUSH
12631: LD_INT 5
12633: PPUSH
12634: CALL_OW 272
12638: PUSH
12639: LD_VAR 0 11
12643: PPUSH
12644: LD_VAR 0 8
12648: PPUSH
12649: LD_INT 5
12651: PPUSH
12652: CALL_OW 273
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12661: LD_VAR 0 9
12665: PUSH
12666: LD_INT 1
12668: ARRAY
12669: PPUSH
12670: LD_VAR 0 9
12674: PUSH
12675: LD_INT 2
12677: ARRAY
12678: PPUSH
12679: CALL_OW 488
12683: IFFALSE 12782
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12685: LD_ADDR_VAR 0 4
12689: PUSH
12690: LD_VAR 0 9
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: LD_VAR 0 9
12703: PUSH
12704: LD_INT 2
12706: ARRAY
12707: PPUSH
12708: CALL_OW 546
12712: ST_TO_ADDR
// if hex [ 1 ] then
12713: LD_VAR 0 4
12717: PUSH
12718: LD_INT 1
12720: ARRAY
12721: IFFALSE 12725
// continue ;
12723: GO 12613
// h := hex [ 2 ] ;
12725: LD_ADDR_VAR 0 13
12729: PUSH
12730: LD_VAR 0 4
12734: PUSH
12735: LD_INT 2
12737: ARRAY
12738: ST_TO_ADDR
// if h + 7 < height then
12739: LD_VAR 0 13
12743: PUSH
12744: LD_INT 7
12746: PLUS
12747: PUSH
12748: LD_VAR 0 15
12752: LESS
12753: IFFALSE 12782
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12755: LD_ADDR_VAR 0 18
12759: PUSH
12760: LD_INT 7
12762: PUSH
12763: LD_INT 28
12765: PUSH
12766: LD_INT 45
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_VAR 0 12
12778: ARRAY
12779: ST_TO_ADDR
// break ;
12780: GO 12784
// end ; end ; end ;
12782: GO 12613
12784: POP
12785: POP
// end ; if not weapon then
12786: LD_VAR 0 18
12790: NOT
12791: IFFALSE 12851
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12793: LD_ADDR_VAR 0 5
12797: PUSH
12798: LD_VAR 0 5
12802: PUSH
12803: LD_INT 11
12805: PUSH
12806: LD_INT 30
12808: PUSH
12809: LD_INT 49
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: DIFF
12817: ST_TO_ADDR
// if not list then
12818: LD_VAR 0 5
12822: NOT
12823: IFFALSE 12827
// exit ;
12825: GO 12969
// weapon := list [ rand ( 1 , list ) ] ;
12827: LD_ADDR_VAR 0 18
12831: PUSH
12832: LD_VAR 0 5
12836: PUSH
12837: LD_INT 1
12839: PPUSH
12840: LD_VAR 0 5
12844: PPUSH
12845: CALL_OW 12
12849: ARRAY
12850: ST_TO_ADDR
// end ; if weapon then
12851: LD_VAR 0 18
12855: IFFALSE 12969
// begin tmp := CostOfWeapon ( weapon ) ;
12857: LD_ADDR_VAR 0 14
12861: PUSH
12862: LD_VAR 0 18
12866: PPUSH
12867: CALL_OW 451
12871: ST_TO_ADDR
// j := GetBase ( tower ) ;
12872: LD_ADDR_VAR 0 9
12876: PUSH
12877: LD_VAR 0 1
12881: PPUSH
12882: CALL_OW 274
12886: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12887: LD_VAR 0 9
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 275
12899: PUSH
12900: LD_VAR 0 14
12904: PUSH
12905: LD_INT 1
12907: ARRAY
12908: GREATEREQUAL
12909: PUSH
12910: LD_VAR 0 9
12914: PPUSH
12915: LD_INT 2
12917: PPUSH
12918: CALL_OW 275
12922: PUSH
12923: LD_VAR 0 14
12927: PUSH
12928: LD_INT 2
12930: ARRAY
12931: GREATEREQUAL
12932: AND
12933: PUSH
12934: LD_VAR 0 9
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: CALL_OW 275
12946: PUSH
12947: LD_VAR 0 14
12951: PUSH
12952: LD_INT 3
12954: ARRAY
12955: GREATEREQUAL
12956: AND
12957: IFFALSE 12969
// result := weapon ;
12959: LD_ADDR_VAR 0 3
12963: PUSH
12964: LD_VAR 0 18
12968: ST_TO_ADDR
// end ; end ;
12969: LD_VAR 0 3
12973: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12974: LD_INT 0
12976: PPUSH
12977: PPUSH
// result := true ;
12978: LD_ADDR_VAR 0 3
12982: PUSH
12983: LD_INT 1
12985: ST_TO_ADDR
// if array1 = array2 then
12986: LD_VAR 0 1
12990: PUSH
12991: LD_VAR 0 2
12995: EQUAL
12996: IFFALSE 13056
// begin for i = 1 to array1 do
12998: LD_ADDR_VAR 0 4
13002: PUSH
13003: DOUBLE
13004: LD_INT 1
13006: DEC
13007: ST_TO_ADDR
13008: LD_VAR 0 1
13012: PUSH
13013: FOR_TO
13014: IFFALSE 13052
// if array1 [ i ] <> array2 [ i ] then
13016: LD_VAR 0 1
13020: PUSH
13021: LD_VAR 0 4
13025: ARRAY
13026: PUSH
13027: LD_VAR 0 2
13031: PUSH
13032: LD_VAR 0 4
13036: ARRAY
13037: NONEQUAL
13038: IFFALSE 13050
// begin result := false ;
13040: LD_ADDR_VAR 0 3
13044: PUSH
13045: LD_INT 0
13047: ST_TO_ADDR
// break ;
13048: GO 13052
// end ;
13050: GO 13013
13052: POP
13053: POP
// end else
13054: GO 13064
// result := false ;
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: LD_INT 0
13063: ST_TO_ADDR
// end ;
13064: LD_VAR 0 3
13068: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13069: LD_INT 0
13071: PPUSH
13072: PPUSH
// if not array1 or not array2 then
13073: LD_VAR 0 1
13077: NOT
13078: PUSH
13079: LD_VAR 0 2
13083: NOT
13084: OR
13085: IFFALSE 13089
// exit ;
13087: GO 13153
// result := true ;
13089: LD_ADDR_VAR 0 3
13093: PUSH
13094: LD_INT 1
13096: ST_TO_ADDR
// for i = 1 to array1 do
13097: LD_ADDR_VAR 0 4
13101: PUSH
13102: DOUBLE
13103: LD_INT 1
13105: DEC
13106: ST_TO_ADDR
13107: LD_VAR 0 1
13111: PUSH
13112: FOR_TO
13113: IFFALSE 13151
// if array1 [ i ] <> array2 [ i ] then
13115: LD_VAR 0 1
13119: PUSH
13120: LD_VAR 0 4
13124: ARRAY
13125: PUSH
13126: LD_VAR 0 2
13130: PUSH
13131: LD_VAR 0 4
13135: ARRAY
13136: NONEQUAL
13137: IFFALSE 13149
// begin result := false ;
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// break ;
13147: GO 13151
// end ;
13149: GO 13112
13151: POP
13152: POP
// end ;
13153: LD_VAR 0 3
13157: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13158: LD_INT 0
13160: PPUSH
13161: PPUSH
13162: PPUSH
// pom := GetBase ( fac ) ;
13163: LD_ADDR_VAR 0 5
13167: PUSH
13168: LD_VAR 0 1
13172: PPUSH
13173: CALL_OW 274
13177: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13178: LD_ADDR_VAR 0 4
13182: PUSH
13183: LD_VAR 0 2
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: LD_VAR 0 2
13196: PUSH
13197: LD_INT 2
13199: ARRAY
13200: PPUSH
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 3
13208: ARRAY
13209: PPUSH
13210: LD_VAR 0 2
13214: PUSH
13215: LD_INT 4
13217: ARRAY
13218: PPUSH
13219: CALL_OW 449
13223: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13224: LD_ADDR_VAR 0 3
13228: PUSH
13229: LD_VAR 0 5
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: CALL_OW 275
13241: PUSH
13242: LD_VAR 0 4
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: GREATEREQUAL
13251: PUSH
13252: LD_VAR 0 5
13256: PPUSH
13257: LD_INT 2
13259: PPUSH
13260: CALL_OW 275
13264: PUSH
13265: LD_VAR 0 4
13269: PUSH
13270: LD_INT 2
13272: ARRAY
13273: GREATEREQUAL
13274: AND
13275: PUSH
13276: LD_VAR 0 5
13280: PPUSH
13281: LD_INT 3
13283: PPUSH
13284: CALL_OW 275
13288: PUSH
13289: LD_VAR 0 4
13293: PUSH
13294: LD_INT 3
13296: ARRAY
13297: GREATEREQUAL
13298: AND
13299: ST_TO_ADDR
// end ;
13300: LD_VAR 0 3
13304: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
13309: PPUSH
13310: PPUSH
// pom := GetBase ( building ) ;
13311: LD_ADDR_VAR 0 3
13315: PUSH
13316: LD_VAR 0 1
13320: PPUSH
13321: CALL_OW 274
13325: ST_TO_ADDR
// if not pom then
13326: LD_VAR 0 3
13330: NOT
13331: IFFALSE 13335
// exit ;
13333: GO 13505
// btype := GetBType ( building ) ;
13335: LD_ADDR_VAR 0 5
13339: PUSH
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 266
13349: ST_TO_ADDR
// if btype = b_armoury then
13350: LD_VAR 0 5
13354: PUSH
13355: LD_INT 4
13357: EQUAL
13358: IFFALSE 13368
// btype := b_barracks ;
13360: LD_ADDR_VAR 0 5
13364: PUSH
13365: LD_INT 5
13367: ST_TO_ADDR
// if btype = b_depot then
13368: LD_VAR 0 5
13372: PUSH
13373: LD_INT 0
13375: EQUAL
13376: IFFALSE 13386
// btype := b_warehouse ;
13378: LD_ADDR_VAR 0 5
13382: PUSH
13383: LD_INT 1
13385: ST_TO_ADDR
// if btype = b_workshop then
13386: LD_VAR 0 5
13390: PUSH
13391: LD_INT 2
13393: EQUAL
13394: IFFALSE 13404
// btype := b_factory ;
13396: LD_ADDR_VAR 0 5
13400: PUSH
13401: LD_INT 3
13403: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13404: LD_ADDR_VAR 0 4
13408: PUSH
13409: LD_VAR 0 5
13413: PPUSH
13414: LD_VAR 0 1
13418: PPUSH
13419: CALL_OW 248
13423: PPUSH
13424: CALL_OW 450
13428: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 275
13446: PUSH
13447: LD_VAR 0 4
13451: PUSH
13452: LD_INT 1
13454: ARRAY
13455: GREATEREQUAL
13456: PUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_INT 2
13464: PPUSH
13465: CALL_OW 275
13469: PUSH
13470: LD_VAR 0 4
13474: PUSH
13475: LD_INT 2
13477: ARRAY
13478: GREATEREQUAL
13479: AND
13480: PUSH
13481: LD_VAR 0 3
13485: PPUSH
13486: LD_INT 3
13488: PPUSH
13489: CALL_OW 275
13493: PUSH
13494: LD_VAR 0 4
13498: PUSH
13499: LD_INT 3
13501: ARRAY
13502: GREATEREQUAL
13503: AND
13504: ST_TO_ADDR
// end ;
13505: LD_VAR 0 2
13509: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13510: LD_INT 0
13512: PPUSH
13513: PPUSH
13514: PPUSH
// pom := GetBase ( building ) ;
13515: LD_ADDR_VAR 0 4
13519: PUSH
13520: LD_VAR 0 1
13524: PPUSH
13525: CALL_OW 274
13529: ST_TO_ADDR
// if not pom then
13530: LD_VAR 0 4
13534: NOT
13535: IFFALSE 13539
// exit ;
13537: GO 13640
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13539: LD_ADDR_VAR 0 5
13543: PUSH
13544: LD_VAR 0 2
13548: PPUSH
13549: LD_VAR 0 1
13553: PPUSH
13554: CALL_OW 248
13558: PPUSH
13559: CALL_OW 450
13563: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13564: LD_ADDR_VAR 0 3
13568: PUSH
13569: LD_VAR 0 4
13573: PPUSH
13574: LD_INT 1
13576: PPUSH
13577: CALL_OW 275
13581: PUSH
13582: LD_VAR 0 5
13586: PUSH
13587: LD_INT 1
13589: ARRAY
13590: GREATEREQUAL
13591: PUSH
13592: LD_VAR 0 4
13596: PPUSH
13597: LD_INT 2
13599: PPUSH
13600: CALL_OW 275
13604: PUSH
13605: LD_VAR 0 5
13609: PUSH
13610: LD_INT 2
13612: ARRAY
13613: GREATEREQUAL
13614: AND
13615: PUSH
13616: LD_VAR 0 4
13620: PPUSH
13621: LD_INT 3
13623: PPUSH
13624: CALL_OW 275
13628: PUSH
13629: LD_VAR 0 5
13633: PUSH
13634: LD_INT 3
13636: ARRAY
13637: GREATEREQUAL
13638: AND
13639: ST_TO_ADDR
// end ;
13640: LD_VAR 0 3
13644: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13645: LD_INT 0
13647: PPUSH
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
13654: PPUSH
13655: PPUSH
13656: PPUSH
13657: PPUSH
// result := false ;
13658: LD_ADDR_VAR 0 8
13662: PUSH
13663: LD_INT 0
13665: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13666: LD_VAR 0 5
13670: NOT
13671: PUSH
13672: LD_VAR 0 1
13676: NOT
13677: OR
13678: PUSH
13679: LD_VAR 0 2
13683: NOT
13684: OR
13685: PUSH
13686: LD_VAR 0 3
13690: NOT
13691: OR
13692: IFFALSE 13696
// exit ;
13694: GO 14510
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13696: LD_ADDR_VAR 0 14
13700: PUSH
13701: LD_VAR 0 1
13705: PPUSH
13706: LD_VAR 0 2
13710: PPUSH
13711: LD_VAR 0 3
13715: PPUSH
13716: LD_VAR 0 4
13720: PPUSH
13721: LD_VAR 0 5
13725: PUSH
13726: LD_INT 1
13728: ARRAY
13729: PPUSH
13730: CALL_OW 248
13734: PPUSH
13735: LD_INT 0
13737: PPUSH
13738: CALL 15743 0 6
13742: ST_TO_ADDR
// if not hexes then
13743: LD_VAR 0 14
13747: NOT
13748: IFFALSE 13752
// exit ;
13750: GO 14510
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13752: LD_ADDR_VAR 0 17
13756: PUSH
13757: LD_VAR 0 5
13761: PPUSH
13762: LD_INT 22
13764: PUSH
13765: LD_VAR 0 13
13769: PPUSH
13770: CALL_OW 255
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 30
13784: PUSH
13785: LD_INT 0
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 30
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PPUSH
13811: CALL_OW 72
13815: ST_TO_ADDR
// for i = 1 to hexes do
13816: LD_ADDR_VAR 0 9
13820: PUSH
13821: DOUBLE
13822: LD_INT 1
13824: DEC
13825: ST_TO_ADDR
13826: LD_VAR 0 14
13830: PUSH
13831: FOR_TO
13832: IFFALSE 14508
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13834: LD_ADDR_VAR 0 13
13838: PUSH
13839: LD_VAR 0 14
13843: PUSH
13844: LD_VAR 0 9
13848: ARRAY
13849: PUSH
13850: LD_INT 1
13852: ARRAY
13853: PPUSH
13854: LD_VAR 0 14
13858: PUSH
13859: LD_VAR 0 9
13863: ARRAY
13864: PUSH
13865: LD_INT 2
13867: ARRAY
13868: PPUSH
13869: CALL_OW 428
13873: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13874: LD_VAR 0 14
13878: PUSH
13879: LD_VAR 0 9
13883: ARRAY
13884: PUSH
13885: LD_INT 1
13887: ARRAY
13888: PPUSH
13889: LD_VAR 0 14
13893: PUSH
13894: LD_VAR 0 9
13898: ARRAY
13899: PUSH
13900: LD_INT 2
13902: ARRAY
13903: PPUSH
13904: CALL_OW 351
13908: PUSH
13909: LD_VAR 0 14
13913: PUSH
13914: LD_VAR 0 9
13918: ARRAY
13919: PUSH
13920: LD_INT 1
13922: ARRAY
13923: PPUSH
13924: LD_VAR 0 14
13928: PUSH
13929: LD_VAR 0 9
13933: ARRAY
13934: PUSH
13935: LD_INT 2
13937: ARRAY
13938: PPUSH
13939: CALL_OW 488
13943: NOT
13944: OR
13945: PUSH
13946: LD_VAR 0 13
13950: PPUSH
13951: CALL_OW 247
13955: PUSH
13956: LD_INT 3
13958: EQUAL
13959: OR
13960: IFFALSE 13966
// exit ;
13962: POP
13963: POP
13964: GO 14510
// if not tmp then
13966: LD_VAR 0 13
13970: NOT
13971: IFFALSE 13975
// continue ;
13973: GO 13831
// result := true ;
13975: LD_ADDR_VAR 0 8
13979: PUSH
13980: LD_INT 1
13982: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13983: LD_VAR 0 6
13987: PUSH
13988: LD_VAR 0 13
13992: PPUSH
13993: CALL_OW 247
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: AND
14002: PUSH
14003: LD_VAR 0 13
14007: PPUSH
14008: CALL_OW 263
14012: PUSH
14013: LD_INT 1
14015: EQUAL
14016: AND
14017: IFFALSE 14181
// begin if IsDrivenBy ( tmp ) then
14019: LD_VAR 0 13
14023: PPUSH
14024: CALL_OW 311
14028: IFFALSE 14032
// continue ;
14030: GO 13831
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14032: LD_VAR 0 6
14036: PPUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 60
14042: PUSH
14043: EMPTY
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 3
14052: PUSH
14053: LD_INT 55
14055: PUSH
14056: EMPTY
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PPUSH
14067: CALL_OW 72
14071: IFFALSE 14179
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14073: LD_ADDR_VAR 0 18
14077: PUSH
14078: LD_VAR 0 6
14082: PPUSH
14083: LD_INT 3
14085: PUSH
14086: LD_INT 60
14088: PUSH
14089: EMPTY
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 3
14098: PUSH
14099: LD_INT 55
14101: PUSH
14102: EMPTY
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 72
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: ST_TO_ADDR
// if IsInUnit ( driver ) then
14122: LD_VAR 0 18
14126: PPUSH
14127: CALL_OW 310
14131: IFFALSE 14142
// ComExit ( driver ) ;
14133: LD_VAR 0 18
14137: PPUSH
14138: CALL 39523 0 1
// AddComEnterUnit ( driver , tmp ) ;
14142: LD_VAR 0 18
14146: PPUSH
14147: LD_VAR 0 13
14151: PPUSH
14152: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14156: LD_VAR 0 18
14160: PPUSH
14161: LD_VAR 0 7
14165: PPUSH
14166: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14170: LD_VAR 0 18
14174: PPUSH
14175: CALL_OW 181
// end ; continue ;
14179: GO 13831
// end ; if not cleaners or not tmp in cleaners then
14181: LD_VAR 0 6
14185: NOT
14186: PUSH
14187: LD_VAR 0 13
14191: PUSH
14192: LD_VAR 0 6
14196: IN
14197: NOT
14198: OR
14199: IFFALSE 14506
// begin if dep then
14201: LD_VAR 0 17
14205: IFFALSE 14341
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14207: LD_ADDR_VAR 0 16
14211: PUSH
14212: LD_VAR 0 17
14216: PUSH
14217: LD_INT 1
14219: ARRAY
14220: PPUSH
14221: CALL_OW 250
14225: PPUSH
14226: LD_VAR 0 17
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 254
14239: PPUSH
14240: LD_INT 5
14242: PPUSH
14243: CALL_OW 272
14247: PUSH
14248: LD_VAR 0 17
14252: PUSH
14253: LD_INT 1
14255: ARRAY
14256: PPUSH
14257: CALL_OW 251
14261: PPUSH
14262: LD_VAR 0 17
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: CALL_OW 254
14275: PPUSH
14276: LD_INT 5
14278: PPUSH
14279: CALL_OW 273
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14288: LD_VAR 0 16
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PPUSH
14297: LD_VAR 0 16
14301: PUSH
14302: LD_INT 2
14304: ARRAY
14305: PPUSH
14306: CALL_OW 488
14310: IFFALSE 14341
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14312: LD_VAR 0 13
14316: PPUSH
14317: LD_VAR 0 16
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: PPUSH
14326: LD_VAR 0 16
14330: PUSH
14331: LD_INT 2
14333: ARRAY
14334: PPUSH
14335: CALL_OW 111
// continue ;
14339: GO 13831
// end ; end ; r := GetDir ( tmp ) ;
14341: LD_ADDR_VAR 0 15
14345: PUSH
14346: LD_VAR 0 13
14350: PPUSH
14351: CALL_OW 254
14355: ST_TO_ADDR
// if r = 5 then
14356: LD_VAR 0 15
14360: PUSH
14361: LD_INT 5
14363: EQUAL
14364: IFFALSE 14374
// r := 0 ;
14366: LD_ADDR_VAR 0 15
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// for j = r to 5 do
14374: LD_ADDR_VAR 0 10
14378: PUSH
14379: DOUBLE
14380: LD_VAR 0 15
14384: DEC
14385: ST_TO_ADDR
14386: LD_INT 5
14388: PUSH
14389: FOR_TO
14390: IFFALSE 14504
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14392: LD_ADDR_VAR 0 11
14396: PUSH
14397: LD_VAR 0 13
14401: PPUSH
14402: CALL_OW 250
14406: PPUSH
14407: LD_VAR 0 10
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: CALL_OW 272
14419: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14420: LD_ADDR_VAR 0 12
14424: PUSH
14425: LD_VAR 0 13
14429: PPUSH
14430: CALL_OW 251
14434: PPUSH
14435: LD_VAR 0 10
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: CALL_OW 273
14447: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14448: LD_VAR 0 11
14452: PPUSH
14453: LD_VAR 0 12
14457: PPUSH
14458: CALL_OW 488
14462: PUSH
14463: LD_VAR 0 11
14467: PPUSH
14468: LD_VAR 0 12
14472: PPUSH
14473: CALL_OW 428
14477: NOT
14478: AND
14479: IFFALSE 14502
// begin ComMoveXY ( tmp , _x , _y ) ;
14481: LD_VAR 0 13
14485: PPUSH
14486: LD_VAR 0 11
14490: PPUSH
14491: LD_VAR 0 12
14495: PPUSH
14496: CALL_OW 111
// break ;
14500: GO 14504
// end ; end ;
14502: GO 14389
14504: POP
14505: POP
// end ; end ;
14506: GO 13831
14508: POP
14509: POP
// end ;
14510: LD_VAR 0 8
14514: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14515: LD_INT 0
14517: PPUSH
// result := true ;
14518: LD_ADDR_VAR 0 3
14522: PUSH
14523: LD_INT 1
14525: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14526: LD_VAR 0 2
14530: PUSH
14531: LD_INT 24
14533: DOUBLE
14534: EQUAL
14535: IFTRUE 14545
14537: LD_INT 33
14539: DOUBLE
14540: EQUAL
14541: IFTRUE 14545
14543: GO 14570
14545: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_INT 32
14553: PPUSH
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 321
14563: PUSH
14564: LD_INT 2
14566: EQUAL
14567: ST_TO_ADDR
14568: GO 14886
14570: LD_INT 20
14572: DOUBLE
14573: EQUAL
14574: IFTRUE 14578
14576: GO 14603
14578: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_INT 6
14586: PPUSH
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL_OW 321
14596: PUSH
14597: LD_INT 2
14599: EQUAL
14600: ST_TO_ADDR
14601: GO 14886
14603: LD_INT 22
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14617
14609: LD_INT 36
14611: DOUBLE
14612: EQUAL
14613: IFTRUE 14617
14615: GO 14642
14617: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_INT 15
14625: PPUSH
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL_OW 321
14635: PUSH
14636: LD_INT 2
14638: EQUAL
14639: ST_TO_ADDR
14640: GO 14886
14642: LD_INT 30
14644: DOUBLE
14645: EQUAL
14646: IFTRUE 14650
14648: GO 14675
14650: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14651: LD_ADDR_VAR 0 3
14655: PUSH
14656: LD_INT 20
14658: PPUSH
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL_OW 321
14668: PUSH
14669: LD_INT 2
14671: EQUAL
14672: ST_TO_ADDR
14673: GO 14886
14675: LD_INT 28
14677: DOUBLE
14678: EQUAL
14679: IFTRUE 14689
14681: LD_INT 21
14683: DOUBLE
14684: EQUAL
14685: IFTRUE 14689
14687: GO 14714
14689: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_INT 21
14697: PPUSH
14698: LD_VAR 0 1
14702: PPUSH
14703: CALL_OW 321
14707: PUSH
14708: LD_INT 2
14710: EQUAL
14711: ST_TO_ADDR
14712: GO 14886
14714: LD_INT 16
14716: DOUBLE
14717: EQUAL
14718: IFTRUE 14722
14720: GO 14747
14722: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14723: LD_ADDR_VAR 0 3
14727: PUSH
14728: LD_INT 84
14730: PPUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 321
14740: PUSH
14741: LD_INT 2
14743: EQUAL
14744: ST_TO_ADDR
14745: GO 14886
14747: LD_INT 19
14749: DOUBLE
14750: EQUAL
14751: IFTRUE 14761
14753: LD_INT 23
14755: DOUBLE
14756: EQUAL
14757: IFTRUE 14761
14759: GO 14786
14761: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14762: LD_ADDR_VAR 0 3
14766: PUSH
14767: LD_INT 83
14769: PPUSH
14770: LD_VAR 0 1
14774: PPUSH
14775: CALL_OW 321
14779: PUSH
14780: LD_INT 2
14782: EQUAL
14783: ST_TO_ADDR
14784: GO 14886
14786: LD_INT 17
14788: DOUBLE
14789: EQUAL
14790: IFTRUE 14794
14792: GO 14819
14794: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14795: LD_ADDR_VAR 0 3
14799: PUSH
14800: LD_INT 39
14802: PPUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 321
14812: PUSH
14813: LD_INT 2
14815: EQUAL
14816: ST_TO_ADDR
14817: GO 14886
14819: LD_INT 18
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 14852
14827: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14828: LD_ADDR_VAR 0 3
14832: PUSH
14833: LD_INT 40
14835: PPUSH
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 321
14845: PUSH
14846: LD_INT 2
14848: EQUAL
14849: ST_TO_ADDR
14850: GO 14886
14852: LD_INT 27
14854: DOUBLE
14855: EQUAL
14856: IFTRUE 14860
14858: GO 14885
14860: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_INT 35
14868: PPUSH
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 321
14878: PUSH
14879: LD_INT 2
14881: EQUAL
14882: ST_TO_ADDR
14883: GO 14886
14885: POP
// end ;
14886: LD_VAR 0 3
14890: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14891: LD_INT 0
14893: PPUSH
14894: PPUSH
14895: PPUSH
14896: PPUSH
14897: PPUSH
14898: PPUSH
14899: PPUSH
14900: PPUSH
14901: PPUSH
14902: PPUSH
14903: PPUSH
// result := false ;
14904: LD_ADDR_VAR 0 6
14908: PUSH
14909: LD_INT 0
14911: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14912: LD_VAR 0 1
14916: NOT
14917: PUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 266
14927: PUSH
14928: LD_INT 0
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: IN
14938: NOT
14939: OR
14940: PUSH
14941: LD_VAR 0 2
14945: NOT
14946: OR
14947: PUSH
14948: LD_VAR 0 5
14952: PUSH
14953: LD_INT 0
14955: PUSH
14956: LD_INT 1
14958: PUSH
14959: LD_INT 2
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: LD_INT 4
14967: PUSH
14968: LD_INT 5
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: IN
14979: NOT
14980: OR
14981: PUSH
14982: LD_VAR 0 3
14986: PPUSH
14987: LD_VAR 0 4
14991: PPUSH
14992: CALL_OW 488
14996: NOT
14997: OR
14998: IFFALSE 15002
// exit ;
15000: GO 15738
// side := GetSide ( depot ) ;
15002: LD_ADDR_VAR 0 9
15006: PUSH
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 255
15016: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15017: LD_VAR 0 9
15021: PPUSH
15022: LD_VAR 0 2
15026: PPUSH
15027: CALL 14515 0 2
15031: NOT
15032: IFFALSE 15036
// exit ;
15034: GO 15738
// pom := GetBase ( depot ) ;
15036: LD_ADDR_VAR 0 10
15040: PUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: CALL_OW 274
15050: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15051: LD_ADDR_VAR 0 11
15055: PUSH
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 248
15070: PPUSH
15071: CALL_OW 450
15075: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15076: LD_VAR 0 10
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 275
15088: PUSH
15089: LD_VAR 0 11
15093: PUSH
15094: LD_INT 1
15096: ARRAY
15097: GREATEREQUAL
15098: PUSH
15099: LD_VAR 0 10
15103: PPUSH
15104: LD_INT 2
15106: PPUSH
15107: CALL_OW 275
15111: PUSH
15112: LD_VAR 0 11
15116: PUSH
15117: LD_INT 2
15119: ARRAY
15120: GREATEREQUAL
15121: AND
15122: PUSH
15123: LD_VAR 0 10
15127: PPUSH
15128: LD_INT 3
15130: PPUSH
15131: CALL_OW 275
15135: PUSH
15136: LD_VAR 0 11
15140: PUSH
15141: LD_INT 3
15143: ARRAY
15144: GREATEREQUAL
15145: AND
15146: NOT
15147: IFFALSE 15151
// exit ;
15149: GO 15738
// if GetBType ( depot ) = b_depot then
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 266
15160: PUSH
15161: LD_INT 0
15163: EQUAL
15164: IFFALSE 15176
// dist := 28 else
15166: LD_ADDR_VAR 0 14
15170: PUSH
15171: LD_INT 28
15173: ST_TO_ADDR
15174: GO 15184
// dist := 36 ;
15176: LD_ADDR_VAR 0 14
15180: PUSH
15181: LD_INT 36
15183: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15184: LD_VAR 0 1
15188: PPUSH
15189: LD_VAR 0 3
15193: PPUSH
15194: LD_VAR 0 4
15198: PPUSH
15199: CALL_OW 297
15203: PUSH
15204: LD_VAR 0 14
15208: GREATER
15209: IFFALSE 15213
// exit ;
15211: GO 15738
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15213: LD_ADDR_VAR 0 12
15217: PUSH
15218: LD_VAR 0 2
15222: PPUSH
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_VAR 0 4
15232: PPUSH
15233: LD_VAR 0 5
15237: PPUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 248
15247: PPUSH
15248: LD_INT 0
15250: PPUSH
15251: CALL 15743 0 6
15255: ST_TO_ADDR
// if not hexes then
15256: LD_VAR 0 12
15260: NOT
15261: IFFALSE 15265
// exit ;
15263: GO 15738
// hex := GetHexInfo ( x , y ) ;
15265: LD_ADDR_VAR 0 15
15269: PUSH
15270: LD_VAR 0 3
15274: PPUSH
15275: LD_VAR 0 4
15279: PPUSH
15280: CALL_OW 546
15284: ST_TO_ADDR
// if hex [ 1 ] then
15285: LD_VAR 0 15
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: IFFALSE 15297
// exit ;
15295: GO 15738
// height := hex [ 2 ] ;
15297: LD_ADDR_VAR 0 13
15301: PUSH
15302: LD_VAR 0 15
15306: PUSH
15307: LD_INT 2
15309: ARRAY
15310: ST_TO_ADDR
// for i = 1 to hexes do
15311: LD_ADDR_VAR 0 7
15315: PUSH
15316: DOUBLE
15317: LD_INT 1
15319: DEC
15320: ST_TO_ADDR
15321: LD_VAR 0 12
15325: PUSH
15326: FOR_TO
15327: IFFALSE 15657
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15329: LD_VAR 0 12
15333: PUSH
15334: LD_VAR 0 7
15338: ARRAY
15339: PUSH
15340: LD_INT 1
15342: ARRAY
15343: PPUSH
15344: LD_VAR 0 12
15348: PUSH
15349: LD_VAR 0 7
15353: ARRAY
15354: PUSH
15355: LD_INT 2
15357: ARRAY
15358: PPUSH
15359: CALL_OW 488
15363: NOT
15364: PUSH
15365: LD_VAR 0 12
15369: PUSH
15370: LD_VAR 0 7
15374: ARRAY
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: LD_VAR 0 12
15384: PUSH
15385: LD_VAR 0 7
15389: ARRAY
15390: PUSH
15391: LD_INT 2
15393: ARRAY
15394: PPUSH
15395: CALL_OW 428
15399: PUSH
15400: LD_INT 0
15402: GREATER
15403: OR
15404: PUSH
15405: LD_VAR 0 12
15409: PUSH
15410: LD_VAR 0 7
15414: ARRAY
15415: PUSH
15416: LD_INT 1
15418: ARRAY
15419: PPUSH
15420: LD_VAR 0 12
15424: PUSH
15425: LD_VAR 0 7
15429: ARRAY
15430: PUSH
15431: LD_INT 2
15433: ARRAY
15434: PPUSH
15435: CALL_OW 351
15439: OR
15440: IFFALSE 15446
// exit ;
15442: POP
15443: POP
15444: GO 15738
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15446: LD_ADDR_VAR 0 8
15450: PUSH
15451: LD_VAR 0 12
15455: PUSH
15456: LD_VAR 0 7
15460: ARRAY
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: LD_VAR 0 12
15470: PUSH
15471: LD_VAR 0 7
15475: ARRAY
15476: PUSH
15477: LD_INT 2
15479: ARRAY
15480: PPUSH
15481: CALL_OW 546
15485: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15486: LD_VAR 0 8
15490: PUSH
15491: LD_INT 1
15493: ARRAY
15494: PUSH
15495: LD_VAR 0 8
15499: PUSH
15500: LD_INT 2
15502: ARRAY
15503: PUSH
15504: LD_VAR 0 13
15508: PUSH
15509: LD_INT 2
15511: PLUS
15512: GREATER
15513: OR
15514: PUSH
15515: LD_VAR 0 8
15519: PUSH
15520: LD_INT 2
15522: ARRAY
15523: PUSH
15524: LD_VAR 0 13
15528: PUSH
15529: LD_INT 2
15531: MINUS
15532: LESS
15533: OR
15534: PUSH
15535: LD_VAR 0 8
15539: PUSH
15540: LD_INT 3
15542: ARRAY
15543: PUSH
15544: LD_INT 0
15546: PUSH
15547: LD_INT 8
15549: PUSH
15550: LD_INT 9
15552: PUSH
15553: LD_INT 10
15555: PUSH
15556: LD_INT 11
15558: PUSH
15559: LD_INT 12
15561: PUSH
15562: LD_INT 13
15564: PUSH
15565: LD_INT 16
15567: PUSH
15568: LD_INT 17
15570: PUSH
15571: LD_INT 18
15573: PUSH
15574: LD_INT 19
15576: PUSH
15577: LD_INT 20
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: IN
15598: NOT
15599: OR
15600: PUSH
15601: LD_VAR 0 8
15605: PUSH
15606: LD_INT 5
15608: ARRAY
15609: NOT
15610: OR
15611: PUSH
15612: LD_VAR 0 8
15616: PUSH
15617: LD_INT 6
15619: ARRAY
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: LD_INT 2
15626: PUSH
15627: LD_INT 7
15629: PUSH
15630: LD_INT 9
15632: PUSH
15633: LD_INT 10
15635: PUSH
15636: LD_INT 11
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: IN
15647: NOT
15648: OR
15649: IFFALSE 15655
// exit ;
15651: POP
15652: POP
15653: GO 15738
// end ;
15655: GO 15326
15657: POP
15658: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15659: LD_VAR 0 9
15663: PPUSH
15664: LD_VAR 0 3
15668: PPUSH
15669: LD_VAR 0 4
15673: PPUSH
15674: LD_INT 20
15676: PPUSH
15677: CALL 7690 0 4
15681: PUSH
15682: LD_INT 4
15684: ARRAY
15685: IFFALSE 15689
// exit ;
15687: GO 15738
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15689: LD_VAR 0 2
15693: PUSH
15694: LD_INT 29
15696: PUSH
15697: LD_INT 30
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: IN
15704: PUSH
15705: LD_VAR 0 3
15709: PPUSH
15710: LD_VAR 0 4
15714: PPUSH
15715: LD_VAR 0 9
15719: PPUSH
15720: CALL_OW 440
15724: NOT
15725: AND
15726: IFFALSE 15730
// exit ;
15728: GO 15738
// result := true ;
15730: LD_ADDR_VAR 0 6
15734: PUSH
15735: LD_INT 1
15737: ST_TO_ADDR
// end ;
15738: LD_VAR 0 6
15742: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15743: LD_INT 0
15745: PPUSH
15746: PPUSH
15747: PPUSH
15748: PPUSH
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
15759: PPUSH
15760: PPUSH
15761: PPUSH
15762: PPUSH
15763: PPUSH
15764: PPUSH
15765: PPUSH
15766: PPUSH
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
15772: PPUSH
15773: PPUSH
15774: PPUSH
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
15784: PPUSH
15785: PPUSH
15786: PPUSH
15787: PPUSH
15788: PPUSH
15789: PPUSH
15790: PPUSH
15791: PPUSH
15792: PPUSH
15793: PPUSH
15794: PPUSH
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
15799: PPUSH
15800: PPUSH
15801: PPUSH
15802: PPUSH
// result = [ ] ;
15803: LD_ADDR_VAR 0 7
15807: PUSH
15808: EMPTY
15809: ST_TO_ADDR
// temp_list = [ ] ;
15810: LD_ADDR_VAR 0 9
15814: PUSH
15815: EMPTY
15816: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15817: LD_VAR 0 4
15821: PUSH
15822: LD_INT 0
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 3
15833: PUSH
15834: LD_INT 4
15836: PUSH
15837: LD_INT 5
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: IN
15848: NOT
15849: PUSH
15850: LD_VAR 0 1
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 1
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: IN
15865: PUSH
15866: LD_VAR 0 5
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: LD_INT 3
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: LIST
15884: IN
15885: NOT
15886: AND
15887: OR
15888: IFFALSE 15892
// exit ;
15890: GO 34283
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15892: LD_VAR 0 1
15896: PUSH
15897: LD_INT 6
15899: PUSH
15900: LD_INT 7
15902: PUSH
15903: LD_INT 8
15905: PUSH
15906: LD_INT 13
15908: PUSH
15909: LD_INT 12
15911: PUSH
15912: LD_INT 15
15914: PUSH
15915: LD_INT 11
15917: PUSH
15918: LD_INT 14
15920: PUSH
15921: LD_INT 10
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: IN
15935: IFFALSE 15945
// btype = b_lab ;
15937: LD_ADDR_VAR 0 1
15941: PUSH
15942: LD_INT 6
15944: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15945: LD_VAR 0 6
15949: PUSH
15950: LD_INT 0
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: IN
15964: NOT
15965: PUSH
15966: LD_VAR 0 1
15970: PUSH
15971: LD_INT 0
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: LD_INT 6
15985: PUSH
15986: LD_INT 36
15988: PUSH
15989: LD_INT 4
15991: PUSH
15992: LD_INT 5
15994: PUSH
15995: LD_INT 31
15997: PUSH
15998: LD_INT 32
16000: PUSH
16001: LD_INT 33
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: IN
16017: NOT
16018: PUSH
16019: LD_VAR 0 6
16023: PUSH
16024: LD_INT 1
16026: EQUAL
16027: AND
16028: OR
16029: PUSH
16030: LD_VAR 0 1
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: LD_INT 3
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: IN
16045: NOT
16046: PUSH
16047: LD_VAR 0 6
16051: PUSH
16052: LD_INT 2
16054: EQUAL
16055: AND
16056: OR
16057: IFFALSE 16067
// mode = 0 ;
16059: LD_ADDR_VAR 0 6
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// case mode of 0 :
16067: LD_VAR 0 6
16071: PUSH
16072: LD_INT 0
16074: DOUBLE
16075: EQUAL
16076: IFTRUE 16080
16078: GO 27533
16080: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16081: LD_ADDR_VAR 0 11
16085: PUSH
16086: LD_INT 0
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 0
16098: PUSH
16099: LD_INT 1
16101: NEG
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 1
16109: PUSH
16110: LD_INT 0
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 1
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 0
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 1
16139: NEG
16140: PUSH
16141: LD_INT 0
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: NEG
16151: PUSH
16152: LD_INT 1
16154: NEG
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 1
16162: NEG
16163: PUSH
16164: LD_INT 2
16166: NEG
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 0
16174: PUSH
16175: LD_INT 2
16177: NEG
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 1
16185: PUSH
16186: LD_INT 1
16188: NEG
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 1
16216: NEG
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 0
16237: PUSH
16238: LD_INT 3
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 1
16247: NEG
16248: PUSH
16249: LD_INT 2
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16274: LD_ADDR_VAR 0 12
16278: PUSH
16279: LD_INT 0
16281: PUSH
16282: LD_INT 0
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 1
16294: NEG
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 0
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 1
16332: NEG
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: NEG
16344: PUSH
16345: LD_INT 1
16347: NEG
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 1
16358: NEG
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 2
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 1
16386: NEG
16387: PUSH
16388: LD_INT 1
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 2
16397: NEG
16398: PUSH
16399: LD_INT 0
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 2
16408: NEG
16409: PUSH
16410: LD_INT 1
16412: NEG
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 2
16420: NEG
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 3
16431: NEG
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 3
16442: NEG
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16470: LD_ADDR_VAR 0 13
16474: PUSH
16475: LD_INT 0
16477: PUSH
16478: LD_INT 0
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: LD_INT 1
16490: NEG
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 0
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 1
16528: NEG
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: NEG
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 1
16551: NEG
16552: PUSH
16553: LD_INT 2
16555: NEG
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 2
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 2
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 1
16583: PUSH
16584: LD_INT 2
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 2
16593: NEG
16594: PUSH
16595: LD_INT 1
16597: NEG
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 2
16605: NEG
16606: PUSH
16607: LD_INT 2
16609: NEG
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 2
16617: NEG
16618: PUSH
16619: LD_INT 3
16621: NEG
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 3
16629: NEG
16630: PUSH
16631: LD_INT 2
16633: NEG
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 3
16641: NEG
16642: PUSH
16643: LD_INT 3
16645: NEG
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16669: LD_ADDR_VAR 0 14
16673: PUSH
16674: LD_INT 0
16676: PUSH
16677: LD_INT 0
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 0
16686: PUSH
16687: LD_INT 1
16689: NEG
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 1
16697: PUSH
16698: LD_INT 0
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: LD_INT 1
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 1
16727: NEG
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 1
16738: NEG
16739: PUSH
16740: LD_INT 1
16742: NEG
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 1
16750: NEG
16751: PUSH
16752: LD_INT 2
16754: NEG
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 0
16762: PUSH
16763: LD_INT 2
16765: NEG
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: LD_INT 1
16776: NEG
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 1
16784: PUSH
16785: LD_INT 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 1
16804: NEG
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: LD_INT 3
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: LD_INT 3
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: LD_INT 2
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16865: LD_ADDR_VAR 0 15
16869: PUSH
16870: LD_INT 0
16872: PUSH
16873: LD_INT 0
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: LD_INT 1
16885: NEG
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: LD_INT 0
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 1
16903: PUSH
16904: LD_INT 1
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: NEG
16924: PUSH
16925: LD_INT 0
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: NEG
16935: PUSH
16936: LD_INT 1
16938: NEG
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 2
16957: PUSH
16958: LD_INT 0
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: LD_INT 1
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 1
16977: NEG
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 2
16988: NEG
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: NEG
17000: PUSH
17001: LD_INT 1
17003: NEG
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 1
17014: NEG
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 3
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17058: LD_ADDR_VAR 0 16
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 0
17075: PUSH
17076: LD_INT 1
17078: NEG
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: LD_INT 0
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 0
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 1
17116: NEG
17117: PUSH
17118: LD_INT 0
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 1
17127: NEG
17128: PUSH
17129: LD_INT 1
17131: NEG
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: LD_INT 2
17143: NEG
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: PUSH
17162: LD_INT 2
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 2
17181: NEG
17182: PUSH
17183: LD_INT 1
17185: NEG
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 2
17193: NEG
17194: PUSH
17195: LD_INT 2
17197: NEG
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 3
17215: PUSH
17216: LD_INT 3
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 2
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17251: LD_ADDR_VAR 0 17
17255: PUSH
17256: LD_INT 0
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: LD_INT 1
17271: NEG
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 0
17299: PUSH
17300: LD_INT 1
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: NEG
17310: PUSH
17311: LD_INT 0
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 1
17320: NEG
17321: PUSH
17322: LD_INT 1
17324: NEG
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 1
17332: NEG
17333: PUSH
17334: LD_INT 2
17336: NEG
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 0
17344: PUSH
17345: LD_INT 2
17347: NEG
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: LD_INT 1
17358: NEG
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 2
17366: PUSH
17367: LD_INT 0
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 2
17376: PUSH
17377: LD_INT 1
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 2
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: LD_INT 2
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 0
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 1
17416: NEG
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 2
17427: NEG
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 2
17438: NEG
17439: PUSH
17440: LD_INT 1
17442: NEG
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 2
17450: NEG
17451: PUSH
17452: LD_INT 2
17454: NEG
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17481: LD_ADDR_VAR 0 18
17485: PUSH
17486: LD_INT 0
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 0
17498: PUSH
17499: LD_INT 1
17501: NEG
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 1
17519: PUSH
17520: LD_INT 1
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: LD_INT 1
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 1
17539: NEG
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 1
17550: NEG
17551: PUSH
17552: LD_INT 1
17554: NEG
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: NEG
17563: PUSH
17564: LD_INT 2
17566: NEG
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 2
17577: NEG
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: LD_INT 1
17588: NEG
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 2
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 2
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 2
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 2
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 1
17646: NEG
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 2
17657: NEG
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 2
17680: NEG
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17711: LD_ADDR_VAR 0 19
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: LD_INT 1
17731: NEG
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 1
17769: NEG
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: NEG
17781: PUSH
17782: LD_INT 1
17784: NEG
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: NEG
17793: PUSH
17794: LD_INT 2
17796: NEG
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: LD_INT 2
17807: NEG
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: LD_INT 1
17818: NEG
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 2
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 2
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 2
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 0
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: NEG
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 2
17887: NEG
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 2
17898: NEG
17899: PUSH
17900: LD_INT 1
17902: NEG
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 2
17910: NEG
17911: PUSH
17912: LD_INT 2
17914: NEG
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17941: LD_ADDR_VAR 0 20
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: LD_INT 0
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 0
17958: PUSH
17959: LD_INT 1
17961: NEG
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: LD_INT 1
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 1
17999: NEG
18000: PUSH
18001: LD_INT 0
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 1
18010: NEG
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 1
18022: NEG
18023: PUSH
18024: LD_INT 2
18026: NEG
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 0
18034: PUSH
18035: LD_INT 2
18037: NEG
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: LD_INT 1
18048: NEG
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 2
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 2
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 2
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: NEG
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 2
18128: NEG
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 2
18140: NEG
18141: PUSH
18142: LD_INT 2
18144: NEG
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18171: LD_ADDR_VAR 0 21
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: NEG
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: NEG
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: LD_INT 2
18267: NEG
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: LD_INT 1
18278: NEG
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 2
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: LD_INT 2
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: LD_INT 2
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: LD_INT 0
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 2
18358: NEG
18359: PUSH
18360: LD_INT 1
18362: NEG
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 2
18370: NEG
18371: PUSH
18372: LD_INT 2
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18401: LD_ADDR_VAR 0 22
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: NEG
18471: PUSH
18472: LD_INT 1
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: NEG
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 2
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: LD_INT 1
18508: NEG
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 2
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 2
18588: NEG
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: NEG
18601: PUSH
18602: LD_INT 2
18604: NEG
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18631: LD_ADDR_VAR 0 23
18635: PUSH
18636: LD_INT 0
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 1
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: LD_INT 2
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: LD_INT 2
18727: NEG
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: PUSH
18736: LD_INT 1
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 2
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: LD_INT 2
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: NEG
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: NEG
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: LD_INT 1
18822: NEG
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 2
18830: NEG
18831: PUSH
18832: LD_INT 2
18834: NEG
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: NEG
18843: PUSH
18844: LD_INT 3
18846: NEG
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: NEG
18855: PUSH
18856: LD_INT 3
18858: NEG
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 1
18880: NEG
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18911: LD_ADDR_VAR 0 24
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: LD_INT 0
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 1
18980: NEG
18981: PUSH
18982: LD_INT 1
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: LD_INT 2
18996: NEG
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: LD_INT 2
19007: NEG
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: LD_INT 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 1
19076: NEG
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 2
19087: NEG
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: NEG
19111: PUSH
19112: LD_INT 2
19114: NEG
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: LD_INT 2
19125: NEG
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: LD_INT 1
19136: NEG
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 3
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 3
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19187: LD_ADDR_VAR 0 25
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 0
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: NEG
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: LD_INT 2
19272: NEG
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 2
19283: NEG
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 2
19374: NEG
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: NEG
19387: PUSH
19388: LD_INT 2
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 3
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 3
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: LD_INT 3
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 1
19428: PUSH
19429: LD_INT 3
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19461: LD_ADDR_VAR 0 26
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 0
19478: PUSH
19479: LD_INT 1
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 1
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: LD_INT 2
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: LD_INT 1
19568: NEG
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: LD_INT 2
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 2
19637: NEG
19638: PUSH
19639: LD_INT 0
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: LD_INT 1
19652: NEG
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: NEG
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: LD_INT 3
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: LD_INT 3
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19737: LD_ADDR_VAR 0 27
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: LD_INT 2
19822: NEG
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 2
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: NEG
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: LD_INT 2
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 2
19959: NEG
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 3
19970: NEG
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 3
19982: NEG
19983: PUSH
19984: LD_INT 2
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20017: LD_ADDR_VAR 0 28
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: NEG
20076: PUSH
20077: LD_INT 0
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: LD_INT 1
20090: NEG
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: LD_INT 2
20102: NEG
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 2
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: LD_INT 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 2
20193: NEG
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 2
20216: NEG
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: LD_INT 3
20232: NEG
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 1
20240: NEG
20241: PUSH
20242: LD_INT 3
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 3
20252: NEG
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 3
20264: NEG
20265: PUSH
20266: LD_INT 2
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20299: LD_ADDR_VAR 0 29
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: LD_INT 0
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: LD_INT 1
20319: NEG
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: LD_INT 0
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: LD_INT 2
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 0
20392: PUSH
20393: LD_INT 2
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 2
20465: NEG
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: LD_INT 2
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: LD_INT 3
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 3
20512: PUSH
20513: LD_INT 1
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: LD_INT 3
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: LD_INT 2
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 3
20543: NEG
20544: PUSH
20545: LD_INT 2
20547: NEG
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20578: LD_ADDR_VAR 0 30
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: LD_INT 1
20598: NEG
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 0
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: LD_INT 1
20651: NEG
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: LD_INT 2
20663: NEG
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 2
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 1
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: NEG
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: LD_INT 3
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 2
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 3
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: LD_INT 3
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: NEG
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 3
20821: NEG
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20856: LD_ADDR_VAR 0 31
20860: PUSH
20861: LD_INT 0
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 1
20914: NEG
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 1
20929: NEG
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: LD_INT 2
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 2
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 1
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: NEG
21046: PUSH
21047: LD_INT 3
21049: NEG
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 3
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: LD_INT 3
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: NEG
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 3
21099: NEG
21100: PUSH
21101: LD_INT 2
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21134: LD_ADDR_VAR 0 32
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 1
21203: NEG
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: LD_INT 2
21219: NEG
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 2
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 2
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 2
21300: NEG
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: NEG
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: NEG
21324: PUSH
21325: LD_INT 3
21327: NEG
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: LD_INT 2
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 3
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: NEG
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 3
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21412: LD_ADDR_VAR 0 33
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 1
21432: NEG
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: LD_INT 1
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 2
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 2
21590: NEG
21591: PUSH
21592: LD_INT 2
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: LD_INT 3
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: LD_INT 3
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 3
21656: NEG
21657: PUSH
21658: LD_INT 2
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21691: LD_ADDR_VAR 0 34
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 2
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: LD_INT 1
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 2
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: NEG
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 2
21858: NEG
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 2
21870: NEG
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: NEG
21883: PUSH
21884: LD_INT 3
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 2
21897: NEG
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 3
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 3
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 2
21925: NEG
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 3
21936: NEG
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21971: LD_ADDR_VAR 0 35
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: NEG
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22083: LD_ADDR_VAR 0 36
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: LD_INT 0
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: NEG
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22195: LD_ADDR_VAR 0 37
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22307: LD_ADDR_VAR 0 38
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: NEG
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22419: LD_ADDR_VAR 0 39
22423: PUSH
22424: LD_INT 0
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 0
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: LD_INT 2
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: LD_INT 2
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22531: LD_ADDR_VAR 0 40
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: NEG
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22643: LD_ADDR_VAR 0 41
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: NEG
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 0
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 2
22767: PUSH
22768: LD_INT 2
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 1
22787: NEG
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 2
22821: NEG
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 2
22833: NEG
22834: PUSH
22835: LD_INT 3
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 3
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 3
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 3
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 3
22917: NEG
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 3
22928: NEG
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: LD_INT 2
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 3
22952: NEG
22953: PUSH
22954: LD_INT 3
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22993: LD_ADDR_VAR 0 42
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 2
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: LD_INT 2
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: LD_INT 3
23187: NEG
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: LD_INT 3
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 3
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: LD_INT 2
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 3
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 3
23239: PUSH
23240: LD_INT 3
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: PUSH
23260: LD_INT 3
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: LD_INT 3
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 3
23290: NEG
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 3
23302: NEG
23303: PUSH
23304: LD_INT 3
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23343: LD_ADDR_VAR 0 43
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 1
23363: NEG
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: NEG
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: LD_INT 2
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: LD_INT 3
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 3
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: LD_INT 2
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 1
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 3
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 3
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: LD_INT 3
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: NEG
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: NEG
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 3
23650: NEG
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23691: LD_ADDR_VAR 0 44
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: NEG
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: LD_INT 2
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: LD_INT 0
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: LD_INT 2
23873: NEG
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: LD_INT 3
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 3
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: LD_INT 3
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: LD_INT 3
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 2
23954: NEG
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 3
23965: NEG
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 3
23976: NEG
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 3
23988: NEG
23989: PUSH
23990: LD_INT 2
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 3
24000: NEG
24001: PUSH
24002: LD_INT 3
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24041: LD_ADDR_VAR 0 45
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: LD_INT 2
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: LD_INT 2
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 2
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 2
24207: NEG
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: LD_INT 2
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: LD_INT 3
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: LD_INT 3
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 3
24258: NEG
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 1
24266: PUSH
24267: LD_INT 2
24269: NEG
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 3
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 3
24287: PUSH
24288: LD_INT 3
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: LD_INT 3
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: LD_INT 3
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: LD_INT 3
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 3
24338: NEG
24339: PUSH
24340: LD_INT 2
24342: NEG
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 3
24350: NEG
24351: PUSH
24352: LD_INT 3
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24391: LD_ADDR_VAR 0 46
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: LD_INT 2
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: NEG
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: LD_INT 3
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 3
24595: NEG
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: LD_INT 3
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 2
24676: NEG
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 3
24687: NEG
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 3
24698: NEG
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24739: LD_ADDR_VAR 0 47
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 1
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: LD_INT 2
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 0
24832: PUSH
24833: LD_INT 2
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: NEG
24867: PUSH
24868: LD_INT 2
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24890: LD_ADDR_VAR 0 48
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 2
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: LD_INT 1
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 2
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25037: LD_ADDR_VAR 0 49
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 2
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25181: LD_ADDR_VAR 0 50
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: LD_INT 1
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25325: LD_ADDR_VAR 0 51
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 2
25437: NEG
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 2
25448: NEG
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25472: LD_ADDR_VAR 0 52
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: LD_INT 2
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25623: LD_ADDR_VAR 0 53
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: LD_INT 2
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: NEG
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25853: LD_ADDR_VAR 0 54
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 0
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: LD_INT 2
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 2
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: PUSH
25979: LD_INT 1
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 2
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: NEG
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: NEG
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26083: LD_ADDR_VAR 0 55
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: LD_INT 1
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 2
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 2
26270: NEG
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 2
26282: NEG
26283: PUSH
26284: LD_INT 2
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26313: LD_ADDR_VAR 0 56
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 0
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 1
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: NEG
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 2
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 1
26420: NEG
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: NEG
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 2
26500: NEG
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: NEG
26513: PUSH
26514: LD_INT 2
26516: NEG
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26543: LD_ADDR_VAR 0 57
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: LD_INT 2
26639: NEG
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: LD_INT 1
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 2
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 2
26668: PUSH
26669: LD_INT 1
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: NEG
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26773: LD_ADDR_VAR 0 58
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: LD_INT 2
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27003: LD_ADDR_VAR 0 59
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27091: LD_ADDR_VAR 0 60
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27179: LD_ADDR_VAR 0 61
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: LD_INT 1
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27267: LD_ADDR_VAR 0 62
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27355: LD_ADDR_VAR 0 63
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27443: LD_ADDR_VAR 0 64
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: ST_TO_ADDR
// end ; 1 :
27531: GO 33428
27533: LD_INT 1
27535: DOUBLE
27536: EQUAL
27537: IFTRUE 27541
27539: GO 30164
27541: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27542: LD_ADDR_VAR 0 11
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 3
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: LD_INT 3
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: LD_INT 2
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27586: LD_ADDR_VAR 0 12
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27627: LD_ADDR_VAR 0 13
27631: PUSH
27632: LD_INT 3
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: PUSH
27645: LD_INT 3
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: LD_INT 3
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27667: LD_ADDR_VAR 0 14
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: LD_INT 3
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27708: LD_ADDR_VAR 0 15
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 3
27726: NEG
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 3
27737: NEG
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27752: LD_ADDR_VAR 0 16
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: LD_INT 3
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 3
27771: NEG
27772: PUSH
27773: LD_INT 2
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 3
27783: NEG
27784: PUSH
27785: LD_INT 3
27787: NEG
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27798: LD_ADDR_VAR 0 17
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: LD_INT 3
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 3
27820: NEG
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: LD_INT 2
27831: NEG
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27842: LD_ADDR_VAR 0 18
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 3
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 3
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27883: LD_ADDR_VAR 0 19
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: LD_INT 3
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: LD_INT 3
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27923: LD_ADDR_VAR 0 20
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: LD_INT 3
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27964: LD_ADDR_VAR 0 21
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 3
27982: NEG
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 3
27993: NEG
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28008: LD_ADDR_VAR 0 22
28012: PUSH
28013: LD_INT 2
28015: NEG
28016: PUSH
28017: LD_INT 3
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 3
28027: NEG
28028: PUSH
28029: LD_INT 2
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 3
28039: NEG
28040: PUSH
28041: LD_INT 3
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28054: LD_ADDR_VAR 0 23
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 3
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: LD_INT 4
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: LD_INT 3
28087: NEG
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28098: LD_ADDR_VAR 0 24
28102: PUSH
28103: LD_INT 3
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 3
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 4
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28139: LD_ADDR_VAR 0 25
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 4
28156: PUSH
28157: LD_INT 3
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 3
28166: PUSH
28167: LD_INT 4
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28179: LD_ADDR_VAR 0 26
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 4
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28220: LD_ADDR_VAR 0 27
28224: PUSH
28225: LD_INT 3
28227: NEG
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 3
28238: NEG
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 4
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28264: LD_ADDR_VAR 0 28
28268: PUSH
28269: LD_INT 3
28271: NEG
28272: PUSH
28273: LD_INT 3
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 3
28283: NEG
28284: PUSH
28285: LD_INT 4
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 4
28295: NEG
28296: PUSH
28297: LD_INT 3
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28310: LD_ADDR_VAR 0 29
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 3
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 4
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: LD_INT 4
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: LD_INT 3
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: LD_INT 5
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 5
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 4
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 6
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: LD_INT 6
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 5
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28465: LD_ADDR_VAR 0 30
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 3
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 3
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 4
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 4
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 4
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 5
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 5
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 5
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 6
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 6
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28608: LD_ADDR_VAR 0 31
28612: PUSH
28613: LD_INT 3
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: LD_INT 3
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 4
28645: PUSH
28646: LD_INT 3
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 4
28655: PUSH
28656: LD_INT 4
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 3
28665: PUSH
28666: LD_INT 4
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 5
28675: PUSH
28676: LD_INT 4
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 5
28685: PUSH
28686: LD_INT 5
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: LD_INT 5
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 6
28705: PUSH
28706: LD_INT 5
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 6
28715: PUSH
28716: LD_INT 6
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 5
28725: PUSH
28726: LD_INT 6
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28747: LD_ADDR_VAR 0 32
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 3
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 4
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 0
28795: PUSH
28796: LD_INT 4
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 3
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: LD_INT 5
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: LD_INT 5
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: LD_INT 4
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: PUSH
28848: LD_INT 6
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 6
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: LD_INT 5
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28890: LD_ADDR_VAR 0 33
28894: PUSH
28895: LD_INT 2
28897: NEG
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 3
28908: NEG
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 3
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 3
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 4
28942: NEG
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 4
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 4
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 5
28976: NEG
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 5
28987: NEG
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 5
28999: NEG
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 6
29010: NEG
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 6
29021: NEG
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29045: LD_ADDR_VAR 0 34
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 3
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 3
29064: NEG
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 3
29076: NEG
29077: PUSH
29078: LD_INT 3
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 3
29088: NEG
29089: PUSH
29090: LD_INT 4
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 4
29100: NEG
29101: PUSH
29102: LD_INT 3
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 4
29112: NEG
29113: PUSH
29114: LD_INT 4
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 4
29124: NEG
29125: PUSH
29126: LD_INT 5
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 5
29136: NEG
29137: PUSH
29138: LD_INT 4
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 5
29148: NEG
29149: PUSH
29150: LD_INT 5
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 5
29160: NEG
29161: PUSH
29162: LD_INT 6
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 6
29172: NEG
29173: PUSH
29174: LD_INT 5
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 6
29184: NEG
29185: PUSH
29186: LD_INT 6
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29208: LD_ADDR_VAR 0 41
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 2
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 3
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 2
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29252: LD_ADDR_VAR 0 42
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 3
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29293: LD_ADDR_VAR 0 43
29297: PUSH
29298: LD_INT 2
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: LD_INT 3
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29333: LD_ADDR_VAR 0 44
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29374: LD_ADDR_VAR 0 45
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: LD_INT 1
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29418: LD_ADDR_VAR 0 46
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 2
29437: NEG
29438: PUSH
29439: LD_INT 3
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: LD_INT 2
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29464: LD_ADDR_VAR 0 47
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: LD_INT 3
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 3
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29497: LD_ADDR_VAR 0 48
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 2
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: LD_INT 1
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29528: LD_ADDR_VAR 0 49
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: LD_INT 2
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29557: LD_ADDR_VAR 0 50
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29586: LD_ADDR_VAR 0 51
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29617: LD_ADDR_VAR 0 52
29621: PUSH
29622: LD_INT 3
29624: NEG
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: LD_INT 2
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29650: LD_ADDR_VAR 0 53
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: LD_INT 3
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 3
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: LD_INT 2
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29694: LD_ADDR_VAR 0 54
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 3
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29735: LD_ADDR_VAR 0 55
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29775: LD_ADDR_VAR 0 56
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29816: LD_ADDR_VAR 0 57
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 3
29845: NEG
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29860: LD_ADDR_VAR 0 58
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 3
29879: NEG
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: NEG
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29906: LD_ADDR_VAR 0 59
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 2
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29950: LD_ADDR_VAR 0 60
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29991: LD_ADDR_VAR 0 61
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30031: LD_ADDR_VAR 0 62
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30072: LD_ADDR_VAR 0 63
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: NEG
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 2
30101: NEG
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30116: LD_ADDR_VAR 0 64
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: LD_INT 2
30127: NEG
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 2
30135: NEG
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 2
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
// end ; 2 :
30162: GO 33428
30164: LD_INT 2
30166: DOUBLE
30167: EQUAL
30168: IFTRUE 30172
30170: GO 33427
30172: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30173: LD_ADDR_VAR 0 29
30177: PUSH
30178: LD_INT 4
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 4
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 5
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 5
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 4
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 3
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 5
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 4
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 4
30303: PUSH
30304: LD_INT 4
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: LD_INT 4
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 4
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 4
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 4
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: LD_INT 5
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: LD_INT 5
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 4
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: LD_INT 3
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: LD_INT 5
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 4
30512: NEG
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 4
30523: NEG
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 4
30535: NEG
30536: PUSH
30537: LD_INT 2
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 2
30547: NEG
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 4
30558: NEG
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 4
30570: NEG
30571: PUSH
30572: LD_INT 5
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 3
30582: NEG
30583: PUSH
30584: LD_INT 4
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: LD_INT 3
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 4
30606: NEG
30607: PUSH
30608: LD_INT 3
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 5
30618: NEG
30619: PUSH
30620: LD_INT 4
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 5
30630: NEG
30631: PUSH
30632: LD_INT 5
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 3
30642: NEG
30643: PUSH
30644: LD_INT 5
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 5
30654: NEG
30655: PUSH
30656: LD_INT 3
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30711: LD_ADDR_VAR 0 30
30715: PUSH
30716: LD_INT 4
30718: PUSH
30719: LD_INT 4
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 4
30728: PUSH
30729: LD_INT 3
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 5
30738: PUSH
30739: LD_INT 4
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 5
30748: PUSH
30749: LD_INT 5
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 4
30758: PUSH
30759: LD_INT 5
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 3
30768: PUSH
30769: LD_INT 4
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: PUSH
30779: LD_INT 3
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 5
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 3
30798: PUSH
30799: LD_INT 5
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 4
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: LD_INT 4
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: LD_INT 3
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: LD_INT 4
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 4
30901: NEG
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 4
30912: NEG
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 3
30924: NEG
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 4
30946: NEG
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 5
30957: NEG
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 5
30968: NEG
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 5
30980: NEG
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 2
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 3
31003: NEG
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 3
31015: NEG
31016: PUSH
31017: LD_INT 4
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 2
31039: NEG
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 3
31051: NEG
31052: PUSH
31053: LD_INT 2
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 4
31063: NEG
31064: PUSH
31065: LD_INT 3
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 4
31075: NEG
31076: PUSH
31077: LD_INT 4
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: LD_INT 4
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 4
31099: NEG
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 4
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: LD_INT 5
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 4
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: LD_INT 3
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: LD_INT 4
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 5
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: LD_INT 3
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 2
31201: NEG
31202: PUSH
31203: LD_INT 5
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31258: LD_ADDR_VAR 0 31
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 4
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: LD_INT 4
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 5
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 5
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 4
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: LD_INT 5
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 4
31414: NEG
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 4
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 4
31437: NEG
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: NEG
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 4
31460: NEG
31461: PUSH
31462: LD_INT 4
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 4
31472: NEG
31473: PUSH
31474: LD_INT 5
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 3
31484: NEG
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 3
31496: NEG
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 4
31508: NEG
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 5
31520: NEG
31521: PUSH
31522: LD_INT 4
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 5
31532: NEG
31533: PUSH
31534: LD_INT 5
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: LD_INT 5
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 5
31556: NEG
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 3
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 4
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 2
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: LD_INT 3
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 4
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: LD_INT 4
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 4
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 4
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 5
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 5
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 4
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 5
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31808: LD_ADDR_VAR 0 32
31812: PUSH
31813: LD_INT 4
31815: NEG
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 4
31826: NEG
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 3
31838: NEG
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 3
31849: NEG
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 4
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 5
31871: NEG
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 5
31882: NEG
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 5
31894: NEG
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 3
31906: NEG
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: NEG
31918: PUSH
31919: LD_INT 3
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: LD_INT 4
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: LD_INT 3
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 4
31977: NEG
31978: PUSH
31979: LD_INT 3
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 4
31989: NEG
31990: PUSH
31991: LD_INT 4
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: LD_INT 4
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 4
32013: NEG
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: LD_INT 4
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: LD_INT 5
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: LD_INT 4
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: LD_INT 3
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 3
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 4
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: LD_INT 5
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: LD_INT 5
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 4
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 4
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 4
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 4
32220: PUSH
32221: LD_INT 4
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 4
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 5
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 5
32250: PUSH
32251: LD_INT 5
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 4
32260: PUSH
32261: LD_INT 5
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: LD_INT 4
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: LD_INT 5
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32355: LD_ADDR_VAR 0 33
32359: PUSH
32360: LD_INT 4
32362: NEG
32363: PUSH
32364: LD_INT 4
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 4
32374: NEG
32375: PUSH
32376: LD_INT 5
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 4
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 3
32398: NEG
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 4
32410: NEG
32411: PUSH
32412: LD_INT 3
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 5
32422: NEG
32423: PUSH
32424: LD_INT 4
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 5
32434: NEG
32435: PUSH
32436: LD_INT 5
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: LD_INT 5
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 5
32458: NEG
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 3
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: LD_INT 4
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 3
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 3
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: LD_INT 4
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: LD_INT 4
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 4
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 5
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 4
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 3
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 5
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 3
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 4
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 4
32695: PUSH
32696: LD_INT 4
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 3
32705: PUSH
32706: LD_INT 4
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 4
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 4
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 4
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 3
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: LD_INT 4
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: LD_INT 5
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: LD_INT 4
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 3
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: LD_INT 5
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32893: LD_ADDR_VAR 0 34
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 4
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 5
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 4
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: LD_INT 3
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 3
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 4
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 5
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: LD_INT 5
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 4
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 4
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 3
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 4
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 4
33095: PUSH
33096: LD_INT 4
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 4
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 5
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 5
33125: PUSH
33126: LD_INT 5
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 4
33135: PUSH
33136: LD_INT 5
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 3
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: LD_INT 5
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 3
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 4
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 4
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: LD_INT 3
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 4
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 4
33278: NEG
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 4
33289: NEG
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 3
33301: NEG
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 3
33312: NEG
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 4
33323: NEG
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 5
33334: NEG
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 5
33345: NEG
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 5
33357: NEG
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: ST_TO_ADDR
// end ; end ;
33425: GO 33428
33427: POP
// case btype of b_depot , b_warehouse :
33428: LD_VAR 0 1
33432: PUSH
33433: LD_INT 0
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33447
33439: LD_INT 1
33441: DOUBLE
33442: EQUAL
33443: IFTRUE 33447
33445: GO 33648
33447: POP
// case nation of nation_american :
33448: LD_VAR 0 5
33452: PUSH
33453: LD_INT 1
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33461
33459: GO 33517
33461: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33462: LD_ADDR_VAR 0 9
33466: PUSH
33467: LD_VAR 0 11
33471: PUSH
33472: LD_VAR 0 12
33476: PUSH
33477: LD_VAR 0 13
33481: PUSH
33482: LD_VAR 0 14
33486: PUSH
33487: LD_VAR 0 15
33491: PUSH
33492: LD_VAR 0 16
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: PUSH
33505: LD_VAR 0 4
33509: PUSH
33510: LD_INT 1
33512: PLUS
33513: ARRAY
33514: ST_TO_ADDR
33515: GO 33646
33517: LD_INT 2
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33581
33525: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33526: LD_ADDR_VAR 0 9
33530: PUSH
33531: LD_VAR 0 17
33535: PUSH
33536: LD_VAR 0 18
33540: PUSH
33541: LD_VAR 0 19
33545: PUSH
33546: LD_VAR 0 20
33550: PUSH
33551: LD_VAR 0 21
33555: PUSH
33556: LD_VAR 0 22
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: PUSH
33569: LD_VAR 0 4
33573: PUSH
33574: LD_INT 1
33576: PLUS
33577: ARRAY
33578: ST_TO_ADDR
33579: GO 33646
33581: LD_INT 3
33583: DOUBLE
33584: EQUAL
33585: IFTRUE 33589
33587: GO 33645
33589: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33590: LD_ADDR_VAR 0 9
33594: PUSH
33595: LD_VAR 0 23
33599: PUSH
33600: LD_VAR 0 24
33604: PUSH
33605: LD_VAR 0 25
33609: PUSH
33610: LD_VAR 0 26
33614: PUSH
33615: LD_VAR 0 27
33619: PUSH
33620: LD_VAR 0 28
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: LD_VAR 0 4
33637: PUSH
33638: LD_INT 1
33640: PLUS
33641: ARRAY
33642: ST_TO_ADDR
33643: GO 33646
33645: POP
33646: GO 34201
33648: LD_INT 2
33650: DOUBLE
33651: EQUAL
33652: IFTRUE 33662
33654: LD_INT 3
33656: DOUBLE
33657: EQUAL
33658: IFTRUE 33662
33660: GO 33718
33662: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33663: LD_ADDR_VAR 0 9
33667: PUSH
33668: LD_VAR 0 29
33672: PUSH
33673: LD_VAR 0 30
33677: PUSH
33678: LD_VAR 0 31
33682: PUSH
33683: LD_VAR 0 32
33687: PUSH
33688: LD_VAR 0 33
33692: PUSH
33693: LD_VAR 0 34
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: PUSH
33706: LD_VAR 0 4
33710: PUSH
33711: LD_INT 1
33713: PLUS
33714: ARRAY
33715: ST_TO_ADDR
33716: GO 34201
33718: LD_INT 16
33720: DOUBLE
33721: EQUAL
33722: IFTRUE 33780
33724: LD_INT 17
33726: DOUBLE
33727: EQUAL
33728: IFTRUE 33780
33730: LD_INT 18
33732: DOUBLE
33733: EQUAL
33734: IFTRUE 33780
33736: LD_INT 19
33738: DOUBLE
33739: EQUAL
33740: IFTRUE 33780
33742: LD_INT 22
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33780
33748: LD_INT 20
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33780
33754: LD_INT 21
33756: DOUBLE
33757: EQUAL
33758: IFTRUE 33780
33760: LD_INT 23
33762: DOUBLE
33763: EQUAL
33764: IFTRUE 33780
33766: LD_INT 24
33768: DOUBLE
33769: EQUAL
33770: IFTRUE 33780
33772: LD_INT 25
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33836
33780: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33781: LD_ADDR_VAR 0 9
33785: PUSH
33786: LD_VAR 0 35
33790: PUSH
33791: LD_VAR 0 36
33795: PUSH
33796: LD_VAR 0 37
33800: PUSH
33801: LD_VAR 0 38
33805: PUSH
33806: LD_VAR 0 39
33810: PUSH
33811: LD_VAR 0 40
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: PUSH
33824: LD_VAR 0 4
33828: PUSH
33829: LD_INT 1
33831: PLUS
33832: ARRAY
33833: ST_TO_ADDR
33834: GO 34201
33836: LD_INT 6
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33892
33842: LD_INT 7
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33892
33848: LD_INT 8
33850: DOUBLE
33851: EQUAL
33852: IFTRUE 33892
33854: LD_INT 13
33856: DOUBLE
33857: EQUAL
33858: IFTRUE 33892
33860: LD_INT 12
33862: DOUBLE
33863: EQUAL
33864: IFTRUE 33892
33866: LD_INT 15
33868: DOUBLE
33869: EQUAL
33870: IFTRUE 33892
33872: LD_INT 11
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33892
33878: LD_INT 14
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33892
33884: LD_INT 10
33886: DOUBLE
33887: EQUAL
33888: IFTRUE 33892
33890: GO 33948
33892: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33893: LD_ADDR_VAR 0 9
33897: PUSH
33898: LD_VAR 0 41
33902: PUSH
33903: LD_VAR 0 42
33907: PUSH
33908: LD_VAR 0 43
33912: PUSH
33913: LD_VAR 0 44
33917: PUSH
33918: LD_VAR 0 45
33922: PUSH
33923: LD_VAR 0 46
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: PUSH
33936: LD_VAR 0 4
33940: PUSH
33941: LD_INT 1
33943: PLUS
33944: ARRAY
33945: ST_TO_ADDR
33946: GO 34201
33948: LD_INT 36
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 34012
33956: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33957: LD_ADDR_VAR 0 9
33961: PUSH
33962: LD_VAR 0 47
33966: PUSH
33967: LD_VAR 0 48
33971: PUSH
33972: LD_VAR 0 49
33976: PUSH
33977: LD_VAR 0 50
33981: PUSH
33982: LD_VAR 0 51
33986: PUSH
33987: LD_VAR 0 52
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: PUSH
34000: LD_VAR 0 4
34004: PUSH
34005: LD_INT 1
34007: PLUS
34008: ARRAY
34009: ST_TO_ADDR
34010: GO 34201
34012: LD_INT 4
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34038
34018: LD_INT 5
34020: DOUBLE
34021: EQUAL
34022: IFTRUE 34038
34024: LD_INT 34
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34038
34030: LD_INT 37
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34094
34038: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34039: LD_ADDR_VAR 0 9
34043: PUSH
34044: LD_VAR 0 53
34048: PUSH
34049: LD_VAR 0 54
34053: PUSH
34054: LD_VAR 0 55
34058: PUSH
34059: LD_VAR 0 56
34063: PUSH
34064: LD_VAR 0 57
34068: PUSH
34069: LD_VAR 0 58
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: PUSH
34082: LD_VAR 0 4
34086: PUSH
34087: LD_INT 1
34089: PLUS
34090: ARRAY
34091: ST_TO_ADDR
34092: GO 34201
34094: LD_INT 31
34096: DOUBLE
34097: EQUAL
34098: IFTRUE 34144
34100: LD_INT 32
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34144
34106: LD_INT 33
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34144
34112: LD_INT 27
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34144
34118: LD_INT 26
34120: DOUBLE
34121: EQUAL
34122: IFTRUE 34144
34124: LD_INT 28
34126: DOUBLE
34127: EQUAL
34128: IFTRUE 34144
34130: LD_INT 29
34132: DOUBLE
34133: EQUAL
34134: IFTRUE 34144
34136: LD_INT 30
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34200
34144: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34145: LD_ADDR_VAR 0 9
34149: PUSH
34150: LD_VAR 0 59
34154: PUSH
34155: LD_VAR 0 60
34159: PUSH
34160: LD_VAR 0 61
34164: PUSH
34165: LD_VAR 0 62
34169: PUSH
34170: LD_VAR 0 63
34174: PUSH
34175: LD_VAR 0 64
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: PUSH
34188: LD_VAR 0 4
34192: PUSH
34193: LD_INT 1
34195: PLUS
34196: ARRAY
34197: ST_TO_ADDR
34198: GO 34201
34200: POP
// temp_list2 = [ ] ;
34201: LD_ADDR_VAR 0 10
34205: PUSH
34206: EMPTY
34207: ST_TO_ADDR
// for i in temp_list do
34208: LD_ADDR_VAR 0 8
34212: PUSH
34213: LD_VAR 0 9
34217: PUSH
34218: FOR_IN
34219: IFFALSE 34271
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34221: LD_ADDR_VAR 0 10
34225: PUSH
34226: LD_VAR 0 10
34230: PUSH
34231: LD_VAR 0 8
34235: PUSH
34236: LD_INT 1
34238: ARRAY
34239: PUSH
34240: LD_VAR 0 2
34244: PLUS
34245: PUSH
34246: LD_VAR 0 8
34250: PUSH
34251: LD_INT 2
34253: ARRAY
34254: PUSH
34255: LD_VAR 0 3
34259: PLUS
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: ADD
34268: ST_TO_ADDR
34269: GO 34218
34271: POP
34272: POP
// result = temp_list2 ;
34273: LD_ADDR_VAR 0 7
34277: PUSH
34278: LD_VAR 0 10
34282: ST_TO_ADDR
// end ;
34283: LD_VAR 0 7
34287: RET
// export function EnemyInRange ( unit , dist ) ; begin
34288: LD_INT 0
34290: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34291: LD_ADDR_VAR 0 3
34295: PUSH
34296: LD_VAR 0 1
34300: PPUSH
34301: CALL_OW 255
34305: PPUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 250
34315: PPUSH
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL_OW 251
34325: PPUSH
34326: LD_VAR 0 2
34330: PPUSH
34331: CALL 7690 0 4
34335: PUSH
34336: LD_INT 4
34338: ARRAY
34339: ST_TO_ADDR
// end ;
34340: LD_VAR 0 3
34344: RET
// export function PlayerSeeMe ( unit ) ; begin
34345: LD_INT 0
34347: PPUSH
// result := See ( your_side , unit ) ;
34348: LD_ADDR_VAR 0 2
34352: PUSH
34353: LD_OWVAR 2
34357: PPUSH
34358: LD_VAR 0 1
34362: PPUSH
34363: CALL_OW 292
34367: ST_TO_ADDR
// end ;
34368: LD_VAR 0 2
34372: RET
// export function ReverseDir ( unit ) ; begin
34373: LD_INT 0
34375: PPUSH
// if not unit then
34376: LD_VAR 0 1
34380: NOT
34381: IFFALSE 34385
// exit ;
34383: GO 34408
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34385: LD_ADDR_VAR 0 2
34389: PUSH
34390: LD_VAR 0 1
34394: PPUSH
34395: CALL_OW 254
34399: PUSH
34400: LD_INT 3
34402: PLUS
34403: PUSH
34404: LD_INT 6
34406: MOD
34407: ST_TO_ADDR
// end ;
34408: LD_VAR 0 2
34412: RET
// export function ReverseArray ( array ) ; var i ; begin
34413: LD_INT 0
34415: PPUSH
34416: PPUSH
// if not array then
34417: LD_VAR 0 1
34421: NOT
34422: IFFALSE 34426
// exit ;
34424: GO 34481
// result := [ ] ;
34426: LD_ADDR_VAR 0 2
34430: PUSH
34431: EMPTY
34432: ST_TO_ADDR
// for i := array downto 1 do
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: DOUBLE
34439: LD_VAR 0 1
34443: INC
34444: ST_TO_ADDR
34445: LD_INT 1
34447: PUSH
34448: FOR_DOWNTO
34449: IFFALSE 34479
// result := Join ( result , array [ i ] ) ;
34451: LD_ADDR_VAR 0 2
34455: PUSH
34456: LD_VAR 0 2
34460: PPUSH
34461: LD_VAR 0 1
34465: PUSH
34466: LD_VAR 0 3
34470: ARRAY
34471: PPUSH
34472: CALL 39125 0 2
34476: ST_TO_ADDR
34477: GO 34448
34479: POP
34480: POP
// end ;
34481: LD_VAR 0 2
34485: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34486: LD_INT 0
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
// if not unit or not hexes then
34494: LD_VAR 0 1
34498: NOT
34499: PUSH
34500: LD_VAR 0 2
34504: NOT
34505: OR
34506: IFFALSE 34510
// exit ;
34508: GO 34633
// dist := 9999 ;
34510: LD_ADDR_VAR 0 5
34514: PUSH
34515: LD_INT 9999
34517: ST_TO_ADDR
// for i = 1 to hexes do
34518: LD_ADDR_VAR 0 4
34522: PUSH
34523: DOUBLE
34524: LD_INT 1
34526: DEC
34527: ST_TO_ADDR
34528: LD_VAR 0 2
34532: PUSH
34533: FOR_TO
34534: IFFALSE 34621
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34536: LD_ADDR_VAR 0 6
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_VAR 0 2
34550: PUSH
34551: LD_VAR 0 4
34555: ARRAY
34556: PUSH
34557: LD_INT 1
34559: ARRAY
34560: PPUSH
34561: LD_VAR 0 2
34565: PUSH
34566: LD_VAR 0 4
34570: ARRAY
34571: PUSH
34572: LD_INT 2
34574: ARRAY
34575: PPUSH
34576: CALL_OW 297
34580: ST_TO_ADDR
// if tdist < dist then
34581: LD_VAR 0 6
34585: PUSH
34586: LD_VAR 0 5
34590: LESS
34591: IFFALSE 34619
// begin hex := hexes [ i ] ;
34593: LD_ADDR_VAR 0 8
34597: PUSH
34598: LD_VAR 0 2
34602: PUSH
34603: LD_VAR 0 4
34607: ARRAY
34608: ST_TO_ADDR
// dist := tdist ;
34609: LD_ADDR_VAR 0 5
34613: PUSH
34614: LD_VAR 0 6
34618: ST_TO_ADDR
// end ; end ;
34619: GO 34533
34621: POP
34622: POP
// result := hex ;
34623: LD_ADDR_VAR 0 3
34627: PUSH
34628: LD_VAR 0 8
34632: ST_TO_ADDR
// end ;
34633: LD_VAR 0 3
34637: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34638: LD_INT 0
34640: PPUSH
34641: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34642: LD_VAR 0 1
34646: NOT
34647: PUSH
34648: LD_VAR 0 1
34652: PUSH
34653: LD_INT 21
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 23
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PPUSH
34677: CALL_OW 69
34681: IN
34682: NOT
34683: OR
34684: IFFALSE 34688
// exit ;
34686: GO 34735
// for i = 1 to 3 do
34688: LD_ADDR_VAR 0 3
34692: PUSH
34693: DOUBLE
34694: LD_INT 1
34696: DEC
34697: ST_TO_ADDR
34698: LD_INT 3
34700: PUSH
34701: FOR_TO
34702: IFFALSE 34733
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 250
34713: PPUSH
34714: LD_VAR 0 1
34718: PPUSH
34719: CALL_OW 251
34723: PPUSH
34724: LD_INT 1
34726: PPUSH
34727: CALL_OW 453
34731: GO 34701
34733: POP
34734: POP
// end ;
34735: LD_VAR 0 2
34739: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34740: LD_INT 0
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34748: LD_VAR 0 1
34752: NOT
34753: PUSH
34754: LD_VAR 0 2
34758: NOT
34759: OR
34760: PUSH
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 314
34770: OR
34771: IFFALSE 34775
// exit ;
34773: GO 35242
// if GetLives ( i ) < 250 then
34775: LD_VAR 0 4
34779: PPUSH
34780: CALL_OW 256
34784: PUSH
34785: LD_INT 250
34787: LESS
34788: IFFALSE 34801
// begin ComAutodestruct ( i ) ;
34790: LD_VAR 0 4
34794: PPUSH
34795: CALL 34638 0 1
// exit ;
34799: GO 35242
// end ; x := GetX ( enemy_unit ) ;
34801: LD_ADDR_VAR 0 7
34805: PUSH
34806: LD_VAR 0 2
34810: PPUSH
34811: CALL_OW 250
34815: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34816: LD_ADDR_VAR 0 8
34820: PUSH
34821: LD_VAR 0 2
34825: PPUSH
34826: CALL_OW 251
34830: ST_TO_ADDR
// if not x or not y then
34831: LD_VAR 0 7
34835: NOT
34836: PUSH
34837: LD_VAR 0 8
34841: NOT
34842: OR
34843: IFFALSE 34847
// exit ;
34845: GO 35242
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34847: LD_ADDR_VAR 0 6
34851: PUSH
34852: LD_VAR 0 7
34856: PPUSH
34857: LD_INT 0
34859: PPUSH
34860: LD_INT 4
34862: PPUSH
34863: CALL_OW 272
34867: PUSH
34868: LD_VAR 0 8
34872: PPUSH
34873: LD_INT 0
34875: PPUSH
34876: LD_INT 4
34878: PPUSH
34879: CALL_OW 273
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_VAR 0 7
34892: PPUSH
34893: LD_INT 1
34895: PPUSH
34896: LD_INT 4
34898: PPUSH
34899: CALL_OW 272
34903: PUSH
34904: LD_VAR 0 8
34908: PPUSH
34909: LD_INT 1
34911: PPUSH
34912: LD_INT 4
34914: PPUSH
34915: CALL_OW 273
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_VAR 0 7
34928: PPUSH
34929: LD_INT 2
34931: PPUSH
34932: LD_INT 4
34934: PPUSH
34935: CALL_OW 272
34939: PUSH
34940: LD_VAR 0 8
34944: PPUSH
34945: LD_INT 2
34947: PPUSH
34948: LD_INT 4
34950: PPUSH
34951: CALL_OW 273
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_VAR 0 7
34964: PPUSH
34965: LD_INT 3
34967: PPUSH
34968: LD_INT 4
34970: PPUSH
34971: CALL_OW 272
34975: PUSH
34976: LD_VAR 0 8
34980: PPUSH
34981: LD_INT 3
34983: PPUSH
34984: LD_INT 4
34986: PPUSH
34987: CALL_OW 273
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_VAR 0 7
35000: PPUSH
35001: LD_INT 4
35003: PPUSH
35004: LD_INT 4
35006: PPUSH
35007: CALL_OW 272
35011: PUSH
35012: LD_VAR 0 8
35016: PPUSH
35017: LD_INT 4
35019: PPUSH
35020: LD_INT 4
35022: PPUSH
35023: CALL_OW 273
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_VAR 0 7
35036: PPUSH
35037: LD_INT 5
35039: PPUSH
35040: LD_INT 4
35042: PPUSH
35043: CALL_OW 272
35047: PUSH
35048: LD_VAR 0 8
35052: PPUSH
35053: LD_INT 5
35055: PPUSH
35056: LD_INT 4
35058: PPUSH
35059: CALL_OW 273
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: ST_TO_ADDR
// for i = tmp downto 1 do
35076: LD_ADDR_VAR 0 4
35080: PUSH
35081: DOUBLE
35082: LD_VAR 0 6
35086: INC
35087: ST_TO_ADDR
35088: LD_INT 1
35090: PUSH
35091: FOR_DOWNTO
35092: IFFALSE 35193
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35094: LD_VAR 0 6
35098: PUSH
35099: LD_VAR 0 4
35103: ARRAY
35104: PUSH
35105: LD_INT 1
35107: ARRAY
35108: PPUSH
35109: LD_VAR 0 6
35113: PUSH
35114: LD_VAR 0 4
35118: ARRAY
35119: PUSH
35120: LD_INT 2
35122: ARRAY
35123: PPUSH
35124: CALL_OW 488
35128: NOT
35129: PUSH
35130: LD_VAR 0 6
35134: PUSH
35135: LD_VAR 0 4
35139: ARRAY
35140: PUSH
35141: LD_INT 1
35143: ARRAY
35144: PPUSH
35145: LD_VAR 0 6
35149: PUSH
35150: LD_VAR 0 4
35154: ARRAY
35155: PUSH
35156: LD_INT 2
35158: ARRAY
35159: PPUSH
35160: CALL_OW 428
35164: PUSH
35165: LD_INT 0
35167: NONEQUAL
35168: OR
35169: IFFALSE 35191
// tmp := Delete ( tmp , i ) ;
35171: LD_ADDR_VAR 0 6
35175: PUSH
35176: LD_VAR 0 6
35180: PPUSH
35181: LD_VAR 0 4
35185: PPUSH
35186: CALL_OW 3
35190: ST_TO_ADDR
35191: GO 35091
35193: POP
35194: POP
// j := GetClosestHex ( unit , tmp ) ;
35195: LD_ADDR_VAR 0 5
35199: PUSH
35200: LD_VAR 0 1
35204: PPUSH
35205: LD_VAR 0 6
35209: PPUSH
35210: CALL 34486 0 2
35214: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35215: LD_VAR 0 1
35219: PPUSH
35220: LD_VAR 0 5
35224: PUSH
35225: LD_INT 1
35227: ARRAY
35228: PPUSH
35229: LD_VAR 0 5
35233: PUSH
35234: LD_INT 2
35236: ARRAY
35237: PPUSH
35238: CALL_OW 111
// end ;
35242: LD_VAR 0 3
35246: RET
// export function PrepareApemanSoldier ( ) ; begin
35247: LD_INT 0
35249: PPUSH
// uc_nation := 0 ;
35250: LD_ADDR_OWVAR 21
35254: PUSH
35255: LD_INT 0
35257: ST_TO_ADDR
// hc_sex := sex_male ;
35258: LD_ADDR_OWVAR 27
35262: PUSH
35263: LD_INT 1
35265: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35266: LD_ADDR_OWVAR 28
35270: PUSH
35271: LD_INT 15
35273: ST_TO_ADDR
// hc_gallery :=  ;
35274: LD_ADDR_OWVAR 33
35278: PUSH
35279: LD_STRING 
35281: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35282: LD_ADDR_OWVAR 31
35286: PUSH
35287: LD_INT 0
35289: PPUSH
35290: LD_INT 3
35292: PPUSH
35293: CALL_OW 12
35297: PUSH
35298: LD_INT 0
35300: PPUSH
35301: LD_INT 3
35303: PPUSH
35304: CALL_OW 12
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// end ;
35321: LD_VAR 0 1
35325: RET
// export function PrepareApemanEngineer ( ) ; begin
35326: LD_INT 0
35328: PPUSH
// uc_nation := 0 ;
35329: LD_ADDR_OWVAR 21
35333: PUSH
35334: LD_INT 0
35336: ST_TO_ADDR
// hc_sex := sex_male ;
35337: LD_ADDR_OWVAR 27
35341: PUSH
35342: LD_INT 1
35344: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35345: LD_ADDR_OWVAR 28
35349: PUSH
35350: LD_INT 16
35352: ST_TO_ADDR
// hc_gallery :=  ;
35353: LD_ADDR_OWVAR 33
35357: PUSH
35358: LD_STRING 
35360: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35361: LD_ADDR_OWVAR 31
35365: PUSH
35366: LD_INT 0
35368: PPUSH
35369: LD_INT 3
35371: PPUSH
35372: CALL_OW 12
35376: PUSH
35377: LD_INT 0
35379: PPUSH
35380: LD_INT 3
35382: PPUSH
35383: CALL_OW 12
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: ST_TO_ADDR
// end ;
35400: LD_VAR 0 1
35404: RET
// export function PrepareApeman ( agressivity ) ; begin
35405: LD_INT 0
35407: PPUSH
// uc_side := 0 ;
35408: LD_ADDR_OWVAR 20
35412: PUSH
35413: LD_INT 0
35415: ST_TO_ADDR
// uc_nation := 0 ;
35416: LD_ADDR_OWVAR 21
35420: PUSH
35421: LD_INT 0
35423: ST_TO_ADDR
// hc_sex := sex_male ;
35424: LD_ADDR_OWVAR 27
35428: PUSH
35429: LD_INT 1
35431: ST_TO_ADDR
// hc_class := class_apeman ;
35432: LD_ADDR_OWVAR 28
35436: PUSH
35437: LD_INT 12
35439: ST_TO_ADDR
// hc_gallery :=  ;
35440: LD_ADDR_OWVAR 33
35444: PUSH
35445: LD_STRING 
35447: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35448: LD_ADDR_OWVAR 35
35452: PUSH
35453: LD_VAR 0 1
35457: NEG
35458: PPUSH
35459: LD_VAR 0 1
35463: PPUSH
35464: CALL_OW 12
35468: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35469: LD_ADDR_OWVAR 31
35473: PUSH
35474: LD_INT 0
35476: PPUSH
35477: LD_INT 3
35479: PPUSH
35480: CALL_OW 12
35484: PUSH
35485: LD_INT 0
35487: PPUSH
35488: LD_INT 3
35490: PPUSH
35491: CALL_OW 12
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: ST_TO_ADDR
// end ;
35508: LD_VAR 0 2
35512: RET
// export function PrepareTiger ( agressivity ) ; begin
35513: LD_INT 0
35515: PPUSH
// uc_side := 0 ;
35516: LD_ADDR_OWVAR 20
35520: PUSH
35521: LD_INT 0
35523: ST_TO_ADDR
// uc_nation := 0 ;
35524: LD_ADDR_OWVAR 21
35528: PUSH
35529: LD_INT 0
35531: ST_TO_ADDR
// hc_class := class_tiger ;
35532: LD_ADDR_OWVAR 28
35536: PUSH
35537: LD_INT 14
35539: ST_TO_ADDR
// hc_gallery :=  ;
35540: LD_ADDR_OWVAR 33
35544: PUSH
35545: LD_STRING 
35547: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35548: LD_ADDR_OWVAR 35
35552: PUSH
35553: LD_VAR 0 1
35557: NEG
35558: PPUSH
35559: LD_VAR 0 1
35563: PPUSH
35564: CALL_OW 12
35568: ST_TO_ADDR
// end ;
35569: LD_VAR 0 2
35573: RET
// export function PrepareEnchidna ( ) ; begin
35574: LD_INT 0
35576: PPUSH
// uc_side := 0 ;
35577: LD_ADDR_OWVAR 20
35581: PUSH
35582: LD_INT 0
35584: ST_TO_ADDR
// uc_nation := 0 ;
35585: LD_ADDR_OWVAR 21
35589: PUSH
35590: LD_INT 0
35592: ST_TO_ADDR
// hc_class := class_baggie ;
35593: LD_ADDR_OWVAR 28
35597: PUSH
35598: LD_INT 13
35600: ST_TO_ADDR
// hc_gallery :=  ;
35601: LD_ADDR_OWVAR 33
35605: PUSH
35606: LD_STRING 
35608: ST_TO_ADDR
// end ;
35609: LD_VAR 0 1
35613: RET
// export function PrepareFrog ( ) ; begin
35614: LD_INT 0
35616: PPUSH
// uc_side := 0 ;
35617: LD_ADDR_OWVAR 20
35621: PUSH
35622: LD_INT 0
35624: ST_TO_ADDR
// uc_nation := 0 ;
35625: LD_ADDR_OWVAR 21
35629: PUSH
35630: LD_INT 0
35632: ST_TO_ADDR
// hc_class := class_frog ;
35633: LD_ADDR_OWVAR 28
35637: PUSH
35638: LD_INT 19
35640: ST_TO_ADDR
// hc_gallery :=  ;
35641: LD_ADDR_OWVAR 33
35645: PUSH
35646: LD_STRING 
35648: ST_TO_ADDR
// end ;
35649: LD_VAR 0 1
35653: RET
// export function PrepareFish ( ) ; begin
35654: LD_INT 0
35656: PPUSH
// uc_side := 0 ;
35657: LD_ADDR_OWVAR 20
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
// uc_nation := 0 ;
35665: LD_ADDR_OWVAR 21
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// hc_class := class_fish ;
35673: LD_ADDR_OWVAR 28
35677: PUSH
35678: LD_INT 20
35680: ST_TO_ADDR
// hc_gallery :=  ;
35681: LD_ADDR_OWVAR 33
35685: PUSH
35686: LD_STRING 
35688: ST_TO_ADDR
// end ;
35689: LD_VAR 0 1
35693: RET
// export function PrepareBird ( ) ; begin
35694: LD_INT 0
35696: PPUSH
// uc_side := 0 ;
35697: LD_ADDR_OWVAR 20
35701: PUSH
35702: LD_INT 0
35704: ST_TO_ADDR
// uc_nation := 0 ;
35705: LD_ADDR_OWVAR 21
35709: PUSH
35710: LD_INT 0
35712: ST_TO_ADDR
// hc_class := class_phororhacos ;
35713: LD_ADDR_OWVAR 28
35717: PUSH
35718: LD_INT 18
35720: ST_TO_ADDR
// hc_gallery :=  ;
35721: LD_ADDR_OWVAR 33
35725: PUSH
35726: LD_STRING 
35728: ST_TO_ADDR
// end ;
35729: LD_VAR 0 1
35733: RET
// export function PrepareHorse ( ) ; begin
35734: LD_INT 0
35736: PPUSH
// uc_side := 0 ;
35737: LD_ADDR_OWVAR 20
35741: PUSH
35742: LD_INT 0
35744: ST_TO_ADDR
// uc_nation := 0 ;
35745: LD_ADDR_OWVAR 21
35749: PUSH
35750: LD_INT 0
35752: ST_TO_ADDR
// hc_class := class_horse ;
35753: LD_ADDR_OWVAR 28
35757: PUSH
35758: LD_INT 21
35760: ST_TO_ADDR
// hc_gallery :=  ;
35761: LD_ADDR_OWVAR 33
35765: PUSH
35766: LD_STRING 
35768: ST_TO_ADDR
// end ;
35769: LD_VAR 0 1
35773: RET
// export function PrepareMastodont ( ) ; begin
35774: LD_INT 0
35776: PPUSH
// uc_side := 0 ;
35777: LD_ADDR_OWVAR 20
35781: PUSH
35782: LD_INT 0
35784: ST_TO_ADDR
// uc_nation := 0 ;
35785: LD_ADDR_OWVAR 21
35789: PUSH
35790: LD_INT 0
35792: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35793: LD_ADDR_OWVAR 37
35797: PUSH
35798: LD_INT 31
35800: ST_TO_ADDR
// vc_control := control_rider ;
35801: LD_ADDR_OWVAR 38
35805: PUSH
35806: LD_INT 4
35808: ST_TO_ADDR
// end ;
35809: LD_VAR 0 1
35813: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35814: LD_INT 0
35816: PPUSH
35817: PPUSH
35818: PPUSH
// uc_side = 0 ;
35819: LD_ADDR_OWVAR 20
35823: PUSH
35824: LD_INT 0
35826: ST_TO_ADDR
// uc_nation = 0 ;
35827: LD_ADDR_OWVAR 21
35831: PUSH
35832: LD_INT 0
35834: ST_TO_ADDR
// InitHc_All ( ) ;
35835: CALL_OW 584
// InitVc ;
35839: CALL_OW 20
// if mastodonts then
35843: LD_VAR 0 6
35847: IFFALSE 35914
// for i = 1 to mastodonts do
35849: LD_ADDR_VAR 0 11
35853: PUSH
35854: DOUBLE
35855: LD_INT 1
35857: DEC
35858: ST_TO_ADDR
35859: LD_VAR 0 6
35863: PUSH
35864: FOR_TO
35865: IFFALSE 35912
// begin vc_chassis := 31 ;
35867: LD_ADDR_OWVAR 37
35871: PUSH
35872: LD_INT 31
35874: ST_TO_ADDR
// vc_control := control_rider ;
35875: LD_ADDR_OWVAR 38
35879: PUSH
35880: LD_INT 4
35882: ST_TO_ADDR
// animal := CreateVehicle ;
35883: LD_ADDR_VAR 0 12
35887: PUSH
35888: CALL_OW 45
35892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35893: LD_VAR 0 12
35897: PPUSH
35898: LD_VAR 0 8
35902: PPUSH
35903: LD_INT 0
35905: PPUSH
35906: CALL 38042 0 3
// end ;
35910: GO 35864
35912: POP
35913: POP
// if horses then
35914: LD_VAR 0 5
35918: IFFALSE 35985
// for i = 1 to horses do
35920: LD_ADDR_VAR 0 11
35924: PUSH
35925: DOUBLE
35926: LD_INT 1
35928: DEC
35929: ST_TO_ADDR
35930: LD_VAR 0 5
35934: PUSH
35935: FOR_TO
35936: IFFALSE 35983
// begin hc_class := 21 ;
35938: LD_ADDR_OWVAR 28
35942: PUSH
35943: LD_INT 21
35945: ST_TO_ADDR
// hc_gallery :=  ;
35946: LD_ADDR_OWVAR 33
35950: PUSH
35951: LD_STRING 
35953: ST_TO_ADDR
// animal := CreateHuman ;
35954: LD_ADDR_VAR 0 12
35958: PUSH
35959: CALL_OW 44
35963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35964: LD_VAR 0 12
35968: PPUSH
35969: LD_VAR 0 8
35973: PPUSH
35974: LD_INT 0
35976: PPUSH
35977: CALL 38042 0 3
// end ;
35981: GO 35935
35983: POP
35984: POP
// if birds then
35985: LD_VAR 0 1
35989: IFFALSE 36056
// for i = 1 to birds do
35991: LD_ADDR_VAR 0 11
35995: PUSH
35996: DOUBLE
35997: LD_INT 1
35999: DEC
36000: ST_TO_ADDR
36001: LD_VAR 0 1
36005: PUSH
36006: FOR_TO
36007: IFFALSE 36054
// begin hc_class = 18 ;
36009: LD_ADDR_OWVAR 28
36013: PUSH
36014: LD_INT 18
36016: ST_TO_ADDR
// hc_gallery =  ;
36017: LD_ADDR_OWVAR 33
36021: PUSH
36022: LD_STRING 
36024: ST_TO_ADDR
// animal := CreateHuman ;
36025: LD_ADDR_VAR 0 12
36029: PUSH
36030: CALL_OW 44
36034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36035: LD_VAR 0 12
36039: PPUSH
36040: LD_VAR 0 8
36044: PPUSH
36045: LD_INT 0
36047: PPUSH
36048: CALL 38042 0 3
// end ;
36052: GO 36006
36054: POP
36055: POP
// if tigers then
36056: LD_VAR 0 2
36060: IFFALSE 36144
// for i = 1 to tigers do
36062: LD_ADDR_VAR 0 11
36066: PUSH
36067: DOUBLE
36068: LD_INT 1
36070: DEC
36071: ST_TO_ADDR
36072: LD_VAR 0 2
36076: PUSH
36077: FOR_TO
36078: IFFALSE 36142
// begin hc_class = class_tiger ;
36080: LD_ADDR_OWVAR 28
36084: PUSH
36085: LD_INT 14
36087: ST_TO_ADDR
// hc_gallery =  ;
36088: LD_ADDR_OWVAR 33
36092: PUSH
36093: LD_STRING 
36095: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36096: LD_ADDR_OWVAR 35
36100: PUSH
36101: LD_INT 7
36103: NEG
36104: PPUSH
36105: LD_INT 7
36107: PPUSH
36108: CALL_OW 12
36112: ST_TO_ADDR
// animal := CreateHuman ;
36113: LD_ADDR_VAR 0 12
36117: PUSH
36118: CALL_OW 44
36122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36123: LD_VAR 0 12
36127: PPUSH
36128: LD_VAR 0 8
36132: PPUSH
36133: LD_INT 0
36135: PPUSH
36136: CALL 38042 0 3
// end ;
36140: GO 36077
36142: POP
36143: POP
// if apemans then
36144: LD_VAR 0 3
36148: IFFALSE 36271
// for i = 1 to apemans do
36150: LD_ADDR_VAR 0 11
36154: PUSH
36155: DOUBLE
36156: LD_INT 1
36158: DEC
36159: ST_TO_ADDR
36160: LD_VAR 0 3
36164: PUSH
36165: FOR_TO
36166: IFFALSE 36269
// begin hc_class = class_apeman ;
36168: LD_ADDR_OWVAR 28
36172: PUSH
36173: LD_INT 12
36175: ST_TO_ADDR
// hc_gallery =  ;
36176: LD_ADDR_OWVAR 33
36180: PUSH
36181: LD_STRING 
36183: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36184: LD_ADDR_OWVAR 35
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PPUSH
36193: LD_INT 2
36195: PPUSH
36196: CALL_OW 12
36200: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36201: LD_ADDR_OWVAR 31
36205: PUSH
36206: LD_INT 1
36208: PPUSH
36209: LD_INT 3
36211: PPUSH
36212: CALL_OW 12
36216: PUSH
36217: LD_INT 1
36219: PPUSH
36220: LD_INT 3
36222: PPUSH
36223: CALL_OW 12
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: ST_TO_ADDR
// animal := CreateHuman ;
36240: LD_ADDR_VAR 0 12
36244: PUSH
36245: CALL_OW 44
36249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36250: LD_VAR 0 12
36254: PPUSH
36255: LD_VAR 0 8
36259: PPUSH
36260: LD_INT 0
36262: PPUSH
36263: CALL 38042 0 3
// end ;
36267: GO 36165
36269: POP
36270: POP
// if enchidnas then
36271: LD_VAR 0 4
36275: IFFALSE 36342
// for i = 1 to enchidnas do
36277: LD_ADDR_VAR 0 11
36281: PUSH
36282: DOUBLE
36283: LD_INT 1
36285: DEC
36286: ST_TO_ADDR
36287: LD_VAR 0 4
36291: PUSH
36292: FOR_TO
36293: IFFALSE 36340
// begin hc_class = 13 ;
36295: LD_ADDR_OWVAR 28
36299: PUSH
36300: LD_INT 13
36302: ST_TO_ADDR
// hc_gallery =  ;
36303: LD_ADDR_OWVAR 33
36307: PUSH
36308: LD_STRING 
36310: ST_TO_ADDR
// animal := CreateHuman ;
36311: LD_ADDR_VAR 0 12
36315: PUSH
36316: CALL_OW 44
36320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36321: LD_VAR 0 12
36325: PPUSH
36326: LD_VAR 0 8
36330: PPUSH
36331: LD_INT 0
36333: PPUSH
36334: CALL 38042 0 3
// end ;
36338: GO 36292
36340: POP
36341: POP
// if fishes then
36342: LD_VAR 0 7
36346: IFFALSE 36413
// for i = 1 to fishes do
36348: LD_ADDR_VAR 0 11
36352: PUSH
36353: DOUBLE
36354: LD_INT 1
36356: DEC
36357: ST_TO_ADDR
36358: LD_VAR 0 7
36362: PUSH
36363: FOR_TO
36364: IFFALSE 36411
// begin hc_class = 20 ;
36366: LD_ADDR_OWVAR 28
36370: PUSH
36371: LD_INT 20
36373: ST_TO_ADDR
// hc_gallery =  ;
36374: LD_ADDR_OWVAR 33
36378: PUSH
36379: LD_STRING 
36381: ST_TO_ADDR
// animal := CreateHuman ;
36382: LD_ADDR_VAR 0 12
36386: PUSH
36387: CALL_OW 44
36391: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36392: LD_VAR 0 12
36396: PPUSH
36397: LD_VAR 0 9
36401: PPUSH
36402: LD_INT 0
36404: PPUSH
36405: CALL 38042 0 3
// end ;
36409: GO 36363
36411: POP
36412: POP
// end ;
36413: LD_VAR 0 10
36417: RET
// export function WantHeal ( sci , unit ) ; begin
36418: LD_INT 0
36420: PPUSH
// if GetTaskList ( sci ) > 0 then
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL_OW 437
36430: PUSH
36431: LD_INT 0
36433: GREATER
36434: IFFALSE 36504
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36436: LD_VAR 0 1
36440: PPUSH
36441: CALL_OW 437
36445: PUSH
36446: LD_INT 1
36448: ARRAY
36449: PUSH
36450: LD_INT 1
36452: ARRAY
36453: PUSH
36454: LD_STRING l
36456: EQUAL
36457: PUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: CALL_OW 437
36467: PUSH
36468: LD_INT 1
36470: ARRAY
36471: PUSH
36472: LD_INT 4
36474: ARRAY
36475: PUSH
36476: LD_VAR 0 2
36480: EQUAL
36481: AND
36482: IFFALSE 36494
// result := true else
36484: LD_ADDR_VAR 0 3
36488: PUSH
36489: LD_INT 1
36491: ST_TO_ADDR
36492: GO 36502
// result := false ;
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_INT 0
36501: ST_TO_ADDR
// end else
36502: GO 36512
// result := false ;
36504: LD_ADDR_VAR 0 3
36508: PUSH
36509: LD_INT 0
36511: ST_TO_ADDR
// end ;
36512: LD_VAR 0 3
36516: RET
// export function HealTarget ( sci ) ; begin
36517: LD_INT 0
36519: PPUSH
// if not sci then
36520: LD_VAR 0 1
36524: NOT
36525: IFFALSE 36529
// exit ;
36527: GO 36594
// result := 0 ;
36529: LD_ADDR_VAR 0 2
36533: PUSH
36534: LD_INT 0
36536: ST_TO_ADDR
// if GetTaskList ( sci ) then
36537: LD_VAR 0 1
36541: PPUSH
36542: CALL_OW 437
36546: IFFALSE 36594
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL_OW 437
36557: PUSH
36558: LD_INT 1
36560: ARRAY
36561: PUSH
36562: LD_INT 1
36564: ARRAY
36565: PUSH
36566: LD_STRING l
36568: EQUAL
36569: IFFALSE 36594
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36571: LD_ADDR_VAR 0 2
36575: PUSH
36576: LD_VAR 0 1
36580: PPUSH
36581: CALL_OW 437
36585: PUSH
36586: LD_INT 1
36588: ARRAY
36589: PUSH
36590: LD_INT 4
36592: ARRAY
36593: ST_TO_ADDR
// end ;
36594: LD_VAR 0 2
36598: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36599: LD_INT 0
36601: PPUSH
36602: PPUSH
36603: PPUSH
36604: PPUSH
// if not base_units then
36605: LD_VAR 0 1
36609: NOT
36610: IFFALSE 36614
// exit ;
36612: GO 36701
// result := false ;
36614: LD_ADDR_VAR 0 2
36618: PUSH
36619: LD_INT 0
36621: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36622: LD_ADDR_VAR 0 5
36626: PUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: LD_INT 21
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PPUSH
36642: CALL_OW 72
36646: ST_TO_ADDR
// if not tmp then
36647: LD_VAR 0 5
36651: NOT
36652: IFFALSE 36656
// exit ;
36654: GO 36701
// for i in tmp do
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_VAR 0 5
36665: PUSH
36666: FOR_IN
36667: IFFALSE 36699
// begin result := EnemyInRange ( i , 22 ) ;
36669: LD_ADDR_VAR 0 2
36673: PUSH
36674: LD_VAR 0 3
36678: PPUSH
36679: LD_INT 22
36681: PPUSH
36682: CALL 34288 0 2
36686: ST_TO_ADDR
// if result then
36687: LD_VAR 0 2
36691: IFFALSE 36697
// exit ;
36693: POP
36694: POP
36695: GO 36701
// end ;
36697: GO 36666
36699: POP
36700: POP
// end ;
36701: LD_VAR 0 2
36705: RET
// export function FilterByTag ( units , tag ) ; begin
36706: LD_INT 0
36708: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36709: LD_ADDR_VAR 0 3
36713: PUSH
36714: LD_VAR 0 1
36718: PPUSH
36719: LD_INT 120
36721: PUSH
36722: LD_VAR 0 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PPUSH
36731: CALL_OW 72
36735: ST_TO_ADDR
// end ;
36736: LD_VAR 0 3
36740: RET
// export function IsDriver ( un ) ; begin
36741: LD_INT 0
36743: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36744: LD_ADDR_VAR 0 2
36748: PUSH
36749: LD_VAR 0 1
36753: PUSH
36754: LD_INT 55
36756: PUSH
36757: EMPTY
36758: LIST
36759: PPUSH
36760: CALL_OW 69
36764: IN
36765: ST_TO_ADDR
// end ;
36766: LD_VAR 0 2
36770: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36771: LD_INT 0
36773: PPUSH
36774: PPUSH
// list := [ ] ;
36775: LD_ADDR_VAR 0 5
36779: PUSH
36780: EMPTY
36781: ST_TO_ADDR
// case d of 0 :
36782: LD_VAR 0 3
36786: PUSH
36787: LD_INT 0
36789: DOUBLE
36790: EQUAL
36791: IFTRUE 36795
36793: GO 36928
36795: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36796: LD_ADDR_VAR 0 5
36800: PUSH
36801: LD_VAR 0 1
36805: PUSH
36806: LD_INT 4
36808: MINUS
36809: PUSH
36810: LD_VAR 0 2
36814: PUSH
36815: LD_INT 4
36817: MINUS
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: PUSH
36827: LD_VAR 0 1
36831: PUSH
36832: LD_INT 3
36834: MINUS
36835: PUSH
36836: LD_VAR 0 2
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: LD_VAR 0 1
36853: PUSH
36854: LD_INT 4
36856: PLUS
36857: PUSH
36858: LD_VAR 0 2
36862: PUSH
36863: LD_INT 4
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: PUSH
36871: LD_VAR 0 1
36875: PUSH
36876: LD_INT 3
36878: PLUS
36879: PUSH
36880: LD_VAR 0 2
36884: PUSH
36885: LD_INT 3
36887: PLUS
36888: PUSH
36889: LD_INT 5
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: PUSH
36897: LD_VAR 0 1
36901: PUSH
36902: LD_VAR 0 2
36906: PUSH
36907: LD_INT 4
36909: PLUS
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
// end ; 1 :
36926: GO 37626
36928: LD_INT 1
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36936
36934: GO 37069
36936: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36937: LD_ADDR_VAR 0 5
36941: PUSH
36942: LD_VAR 0 1
36946: PUSH
36947: LD_VAR 0 2
36951: PUSH
36952: LD_INT 4
36954: MINUS
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: PUSH
36964: LD_VAR 0 1
36968: PUSH
36969: LD_INT 3
36971: MINUS
36972: PUSH
36973: LD_VAR 0 2
36977: PUSH
36978: LD_INT 3
36980: MINUS
36981: PUSH
36982: LD_INT 2
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: PUSH
36990: LD_VAR 0 1
36994: PUSH
36995: LD_INT 4
36997: MINUS
36998: PUSH
36999: LD_VAR 0 2
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: PUSH
37012: LD_VAR 0 1
37016: PUSH
37017: LD_VAR 0 2
37021: PUSH
37022: LD_INT 3
37024: PLUS
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: PUSH
37034: LD_VAR 0 1
37038: PUSH
37039: LD_INT 4
37041: PLUS
37042: PUSH
37043: LD_VAR 0 2
37047: PUSH
37048: LD_INT 4
37050: PLUS
37051: PUSH
37052: LD_INT 5
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: ST_TO_ADDR
// end ; 2 :
37067: GO 37626
37069: LD_INT 2
37071: DOUBLE
37072: EQUAL
37073: IFTRUE 37077
37075: GO 37206
37077: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37078: LD_ADDR_VAR 0 5
37082: PUSH
37083: LD_VAR 0 1
37087: PUSH
37088: LD_VAR 0 2
37092: PUSH
37093: LD_INT 3
37095: MINUS
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: PUSH
37105: LD_VAR 0 1
37109: PUSH
37110: LD_INT 4
37112: PLUS
37113: PUSH
37114: LD_VAR 0 2
37118: PUSH
37119: LD_INT 4
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: PUSH
37127: LD_VAR 0 1
37131: PUSH
37132: LD_VAR 0 2
37136: PUSH
37137: LD_INT 4
37139: PLUS
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: PUSH
37149: LD_VAR 0 1
37153: PUSH
37154: LD_INT 3
37156: MINUS
37157: PUSH
37158: LD_VAR 0 2
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: PUSH
37171: LD_VAR 0 1
37175: PUSH
37176: LD_INT 4
37178: MINUS
37179: PUSH
37180: LD_VAR 0 2
37184: PUSH
37185: LD_INT 4
37187: MINUS
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: LIST
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// end ; 3 :
37204: GO 37626
37206: LD_INT 3
37208: DOUBLE
37209: EQUAL
37210: IFTRUE 37214
37212: GO 37347
37214: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37215: LD_ADDR_VAR 0 5
37219: PUSH
37220: LD_VAR 0 1
37224: PUSH
37225: LD_INT 3
37227: PLUS
37228: PUSH
37229: LD_VAR 0 2
37233: PUSH
37234: LD_INT 4
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: PUSH
37242: LD_VAR 0 1
37246: PUSH
37247: LD_INT 4
37249: PLUS
37250: PUSH
37251: LD_VAR 0 2
37255: PUSH
37256: LD_INT 4
37258: PLUS
37259: PUSH
37260: LD_INT 5
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: PUSH
37268: LD_VAR 0 1
37272: PUSH
37273: LD_INT 4
37275: MINUS
37276: PUSH
37277: LD_VAR 0 2
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: PUSH
37290: LD_VAR 0 1
37294: PUSH
37295: LD_VAR 0 2
37299: PUSH
37300: LD_INT 4
37302: MINUS
37303: PUSH
37304: LD_INT 3
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: PUSH
37312: LD_VAR 0 1
37316: PUSH
37317: LD_INT 3
37319: MINUS
37320: PUSH
37321: LD_VAR 0 2
37325: PUSH
37326: LD_INT 3
37328: MINUS
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: ST_TO_ADDR
// end ; 4 :
37345: GO 37626
37347: LD_INT 4
37349: DOUBLE
37350: EQUAL
37351: IFTRUE 37355
37353: GO 37488
37355: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37356: LD_ADDR_VAR 0 5
37360: PUSH
37361: LD_VAR 0 1
37365: PUSH
37366: LD_VAR 0 2
37370: PUSH
37371: LD_INT 4
37373: PLUS
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: PUSH
37383: LD_VAR 0 1
37387: PUSH
37388: LD_INT 3
37390: PLUS
37391: PUSH
37392: LD_VAR 0 2
37396: PUSH
37397: LD_INT 3
37399: PLUS
37400: PUSH
37401: LD_INT 5
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: PUSH
37409: LD_VAR 0 1
37413: PUSH
37414: LD_INT 4
37416: PLUS
37417: PUSH
37418: LD_VAR 0 2
37422: PUSH
37423: LD_INT 4
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: LD_VAR 0 1
37435: PUSH
37436: LD_VAR 0 2
37440: PUSH
37441: LD_INT 3
37443: MINUS
37444: PUSH
37445: LD_INT 3
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: PUSH
37453: LD_VAR 0 1
37457: PUSH
37458: LD_INT 4
37460: MINUS
37461: PUSH
37462: LD_VAR 0 2
37466: PUSH
37467: LD_INT 4
37469: MINUS
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// end ; 5 :
37486: GO 37626
37488: LD_INT 5
37490: DOUBLE
37491: EQUAL
37492: IFTRUE 37496
37494: GO 37625
37496: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37497: LD_ADDR_VAR 0 5
37501: PUSH
37502: LD_VAR 0 1
37506: PUSH
37507: LD_INT 4
37509: MINUS
37510: PUSH
37511: LD_VAR 0 2
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: LIST
37523: PUSH
37524: LD_VAR 0 1
37528: PUSH
37529: LD_VAR 0 2
37533: PUSH
37534: LD_INT 4
37536: MINUS
37537: PUSH
37538: LD_INT 3
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: PUSH
37546: LD_VAR 0 1
37550: PUSH
37551: LD_INT 4
37553: PLUS
37554: PUSH
37555: LD_VAR 0 2
37559: PUSH
37560: LD_INT 4
37562: PLUS
37563: PUSH
37564: LD_INT 5
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: PUSH
37572: LD_VAR 0 1
37576: PUSH
37577: LD_INT 3
37579: PLUS
37580: PUSH
37581: LD_VAR 0 2
37585: PUSH
37586: LD_INT 4
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: PUSH
37594: LD_VAR 0 1
37598: PUSH
37599: LD_VAR 0 2
37603: PUSH
37604: LD_INT 3
37606: PLUS
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: ST_TO_ADDR
// end ; end ;
37623: GO 37626
37625: POP
// result := list ;
37626: LD_ADDR_VAR 0 4
37630: PUSH
37631: LD_VAR 0 5
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 4
37640: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
37645: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37646: LD_VAR 0 1
37650: NOT
37651: PUSH
37652: LD_VAR 0 2
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: LD_INT 3
37665: PUSH
37666: LD_INT 4
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: IN
37675: NOT
37676: OR
37677: IFFALSE 37681
// exit ;
37679: GO 37764
// tmp := [ ] ;
37681: LD_ADDR_VAR 0 5
37685: PUSH
37686: EMPTY
37687: ST_TO_ADDR
// for i in units do
37688: LD_ADDR_VAR 0 4
37692: PUSH
37693: LD_VAR 0 1
37697: PUSH
37698: FOR_IN
37699: IFFALSE 37733
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37701: LD_ADDR_VAR 0 5
37705: PUSH
37706: LD_VAR 0 5
37710: PPUSH
37711: LD_VAR 0 4
37715: PPUSH
37716: LD_VAR 0 2
37720: PPUSH
37721: CALL_OW 259
37725: PPUSH
37726: CALL 39125 0 2
37730: ST_TO_ADDR
37731: GO 37698
37733: POP
37734: POP
// if not tmp then
37735: LD_VAR 0 5
37739: NOT
37740: IFFALSE 37744
// exit ;
37742: GO 37764
// result := SortListByListDesc ( units , tmp ) ;
37744: LD_ADDR_VAR 0 3
37748: PUSH
37749: LD_VAR 0 1
37753: PPUSH
37754: LD_VAR 0 5
37758: PPUSH
37759: CALL_OW 77
37763: ST_TO_ADDR
// end ;
37764: LD_VAR 0 3
37768: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37769: LD_INT 0
37771: PPUSH
37772: PPUSH
37773: PPUSH
// result := false ;
37774: LD_ADDR_VAR 0 3
37778: PUSH
37779: LD_INT 0
37781: ST_TO_ADDR
// if not building then
37782: LD_VAR 0 2
37786: NOT
37787: IFFALSE 37791
// exit ;
37789: GO 37929
// x := GetX ( building ) ;
37791: LD_ADDR_VAR 0 4
37795: PUSH
37796: LD_VAR 0 2
37800: PPUSH
37801: CALL_OW 250
37805: ST_TO_ADDR
// y := GetY ( building ) ;
37806: LD_ADDR_VAR 0 5
37810: PUSH
37811: LD_VAR 0 2
37815: PPUSH
37816: CALL_OW 251
37820: ST_TO_ADDR
// if not x or not y then
37821: LD_VAR 0 4
37825: NOT
37826: PUSH
37827: LD_VAR 0 5
37831: NOT
37832: OR
37833: IFFALSE 37837
// exit ;
37835: GO 37929
// if GetTaskList ( unit ) then
37837: LD_VAR 0 1
37841: PPUSH
37842: CALL_OW 437
37846: IFFALSE 37929
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37848: LD_STRING e
37850: PUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: CALL_OW 437
37860: PUSH
37861: LD_INT 1
37863: ARRAY
37864: PUSH
37865: LD_INT 1
37867: ARRAY
37868: EQUAL
37869: PUSH
37870: LD_VAR 0 4
37874: PUSH
37875: LD_VAR 0 1
37879: PPUSH
37880: CALL_OW 437
37884: PUSH
37885: LD_INT 1
37887: ARRAY
37888: PUSH
37889: LD_INT 2
37891: ARRAY
37892: EQUAL
37893: AND
37894: PUSH
37895: LD_VAR 0 5
37899: PUSH
37900: LD_VAR 0 1
37904: PPUSH
37905: CALL_OW 437
37909: PUSH
37910: LD_INT 1
37912: ARRAY
37913: PUSH
37914: LD_INT 3
37916: ARRAY
37917: EQUAL
37918: AND
37919: IFFALSE 37929
// result := true end ;
37921: LD_ADDR_VAR 0 3
37925: PUSH
37926: LD_INT 1
37928: ST_TO_ADDR
// end ;
37929: LD_VAR 0 3
37933: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37934: LD_INT 0
37936: PPUSH
// result := false ;
37937: LD_ADDR_VAR 0 4
37941: PUSH
37942: LD_INT 0
37944: ST_TO_ADDR
// if GetTaskList ( unit ) then
37945: LD_VAR 0 1
37949: PPUSH
37950: CALL_OW 437
37954: IFFALSE 38037
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37956: LD_STRING M
37958: PUSH
37959: LD_VAR 0 1
37963: PPUSH
37964: CALL_OW 437
37968: PUSH
37969: LD_INT 1
37971: ARRAY
37972: PUSH
37973: LD_INT 1
37975: ARRAY
37976: EQUAL
37977: PUSH
37978: LD_VAR 0 2
37982: PUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 437
37992: PUSH
37993: LD_INT 1
37995: ARRAY
37996: PUSH
37997: LD_INT 2
37999: ARRAY
38000: EQUAL
38001: AND
38002: PUSH
38003: LD_VAR 0 3
38007: PUSH
38008: LD_VAR 0 1
38012: PPUSH
38013: CALL_OW 437
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: PUSH
38022: LD_INT 3
38024: ARRAY
38025: EQUAL
38026: AND
38027: IFFALSE 38037
// result := true ;
38029: LD_ADDR_VAR 0 4
38033: PUSH
38034: LD_INT 1
38036: ST_TO_ADDR
// end ; end ;
38037: LD_VAR 0 4
38041: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38042: LD_INT 0
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
// if not unit or not area then
38048: LD_VAR 0 1
38052: NOT
38053: PUSH
38054: LD_VAR 0 2
38058: NOT
38059: OR
38060: IFFALSE 38064
// exit ;
38062: GO 38228
// tmp := AreaToList ( area , i ) ;
38064: LD_ADDR_VAR 0 6
38068: PUSH
38069: LD_VAR 0 2
38073: PPUSH
38074: LD_VAR 0 5
38078: PPUSH
38079: CALL_OW 517
38083: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38084: LD_ADDR_VAR 0 5
38088: PUSH
38089: DOUBLE
38090: LD_INT 1
38092: DEC
38093: ST_TO_ADDR
38094: LD_VAR 0 6
38098: PUSH
38099: LD_INT 1
38101: ARRAY
38102: PUSH
38103: FOR_TO
38104: IFFALSE 38226
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38106: LD_ADDR_VAR 0 7
38110: PUSH
38111: LD_VAR 0 6
38115: PUSH
38116: LD_INT 1
38118: ARRAY
38119: PUSH
38120: LD_VAR 0 5
38124: ARRAY
38125: PUSH
38126: LD_VAR 0 6
38130: PUSH
38131: LD_INT 2
38133: ARRAY
38134: PUSH
38135: LD_VAR 0 5
38139: ARRAY
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38145: LD_VAR 0 7
38149: PUSH
38150: LD_INT 1
38152: ARRAY
38153: PPUSH
38154: LD_VAR 0 7
38158: PUSH
38159: LD_INT 2
38161: ARRAY
38162: PPUSH
38163: CALL_OW 428
38167: PUSH
38168: LD_INT 0
38170: EQUAL
38171: IFFALSE 38224
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38173: LD_VAR 0 1
38177: PPUSH
38178: LD_VAR 0 7
38182: PUSH
38183: LD_INT 1
38185: ARRAY
38186: PPUSH
38187: LD_VAR 0 7
38191: PUSH
38192: LD_INT 2
38194: ARRAY
38195: PPUSH
38196: LD_VAR 0 3
38200: PPUSH
38201: CALL_OW 48
// result := IsPlaced ( unit ) ;
38205: LD_ADDR_VAR 0 4
38209: PUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 305
38219: ST_TO_ADDR
// exit ;
38220: POP
38221: POP
38222: GO 38228
// end ; end ;
38224: GO 38103
38226: POP
38227: POP
// end ;
38228: LD_VAR 0 4
38232: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38233: LD_INT 0
38235: PPUSH
38236: PPUSH
38237: PPUSH
// if not side or side > 8 then
38238: LD_VAR 0 1
38242: NOT
38243: PUSH
38244: LD_VAR 0 1
38248: PUSH
38249: LD_INT 8
38251: GREATER
38252: OR
38253: IFFALSE 38257
// exit ;
38255: GO 38444
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: LD_INT 22
38264: PUSH
38265: LD_VAR 0 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 21
38276: PUSH
38277: LD_INT 3
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PPUSH
38288: CALL_OW 69
38292: ST_TO_ADDR
// if not tmp then
38293: LD_VAR 0 4
38297: NOT
38298: IFFALSE 38302
// exit ;
38300: GO 38444
// enable_addtolog := true ;
38302: LD_ADDR_OWVAR 81
38306: PUSH
38307: LD_INT 1
38309: ST_TO_ADDR
// AddToLog ( [ ) ;
38310: LD_STRING [
38312: PPUSH
38313: CALL_OW 561
// for i in tmp do
38317: LD_ADDR_VAR 0 3
38321: PUSH
38322: LD_VAR 0 4
38326: PUSH
38327: FOR_IN
38328: IFFALSE 38435
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38330: LD_STRING [
38332: PUSH
38333: LD_VAR 0 3
38337: PPUSH
38338: CALL_OW 266
38342: STR
38343: PUSH
38344: LD_STRING , 
38346: STR
38347: PUSH
38348: LD_VAR 0 3
38352: PPUSH
38353: CALL_OW 250
38357: STR
38358: PUSH
38359: LD_STRING , 
38361: STR
38362: PUSH
38363: LD_VAR 0 3
38367: PPUSH
38368: CALL_OW 251
38372: STR
38373: PUSH
38374: LD_STRING , 
38376: STR
38377: PUSH
38378: LD_VAR 0 3
38382: PPUSH
38383: CALL_OW 254
38387: STR
38388: PUSH
38389: LD_STRING , 
38391: STR
38392: PUSH
38393: LD_VAR 0 3
38397: PPUSH
38398: LD_INT 1
38400: PPUSH
38401: CALL_OW 268
38405: STR
38406: PUSH
38407: LD_STRING , 
38409: STR
38410: PUSH
38411: LD_VAR 0 3
38415: PPUSH
38416: LD_INT 2
38418: PPUSH
38419: CALL_OW 268
38423: STR
38424: PUSH
38425: LD_STRING ],
38427: STR
38428: PPUSH
38429: CALL_OW 561
// end ;
38433: GO 38327
38435: POP
38436: POP
// AddToLog ( ]; ) ;
38437: LD_STRING ];
38439: PPUSH
38440: CALL_OW 561
// end ;
38444: LD_VAR 0 2
38448: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38449: LD_INT 0
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
// if not area or not rate or not max then
38456: LD_VAR 0 1
38460: NOT
38461: PUSH
38462: LD_VAR 0 2
38466: NOT
38467: OR
38468: PUSH
38469: LD_VAR 0 4
38473: NOT
38474: OR
38475: IFFALSE 38479
// exit ;
38477: GO 38668
// while 1 do
38479: LD_INT 1
38481: IFFALSE 38668
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38483: LD_ADDR_VAR 0 9
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: LD_INT 1
38495: PPUSH
38496: CALL_OW 287
38500: PUSH
38501: LD_INT 10
38503: MUL
38504: ST_TO_ADDR
// r := rate / 10 ;
38505: LD_ADDR_VAR 0 7
38509: PUSH
38510: LD_VAR 0 2
38514: PUSH
38515: LD_INT 10
38517: DIVREAL
38518: ST_TO_ADDR
// time := 1 1$00 ;
38519: LD_ADDR_VAR 0 8
38523: PUSH
38524: LD_INT 2100
38526: ST_TO_ADDR
// if amount < min then
38527: LD_VAR 0 9
38531: PUSH
38532: LD_VAR 0 3
38536: LESS
38537: IFFALSE 38555
// r := r * 2 else
38539: LD_ADDR_VAR 0 7
38543: PUSH
38544: LD_VAR 0 7
38548: PUSH
38549: LD_INT 2
38551: MUL
38552: ST_TO_ADDR
38553: GO 38581
// if amount > max then
38555: LD_VAR 0 9
38559: PUSH
38560: LD_VAR 0 4
38564: GREATER
38565: IFFALSE 38581
// r := r / 2 ;
38567: LD_ADDR_VAR 0 7
38571: PUSH
38572: LD_VAR 0 7
38576: PUSH
38577: LD_INT 2
38579: DIVREAL
38580: ST_TO_ADDR
// time := time / r ;
38581: LD_ADDR_VAR 0 8
38585: PUSH
38586: LD_VAR 0 8
38590: PUSH
38591: LD_VAR 0 7
38595: DIVREAL
38596: ST_TO_ADDR
// if time < 0 then
38597: LD_VAR 0 8
38601: PUSH
38602: LD_INT 0
38604: LESS
38605: IFFALSE 38622
// time := time * - 1 ;
38607: LD_ADDR_VAR 0 8
38611: PUSH
38612: LD_VAR 0 8
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: MUL
38621: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38622: LD_VAR 0 8
38626: PUSH
38627: LD_INT 35
38629: PPUSH
38630: LD_INT 875
38632: PPUSH
38633: CALL_OW 12
38637: PLUS
38638: PPUSH
38639: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38643: LD_INT 1
38645: PPUSH
38646: LD_INT 5
38648: PPUSH
38649: CALL_OW 12
38653: PPUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: LD_INT 1
38661: PPUSH
38662: CALL_OW 55
// end ;
38666: GO 38479
// end ;
38668: LD_VAR 0 5
38672: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38673: LD_INT 0
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
// if not turrets or not factories then
38683: LD_VAR 0 1
38687: NOT
38688: PUSH
38689: LD_VAR 0 2
38693: NOT
38694: OR
38695: IFFALSE 38699
// exit ;
38697: GO 39006
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38699: LD_ADDR_VAR 0 10
38703: PUSH
38704: LD_INT 5
38706: PUSH
38707: LD_INT 6
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: LD_INT 4
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: PUSH
38727: LD_INT 5
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 24
38741: PUSH
38742: LD_INT 25
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 23
38751: PUSH
38752: LD_INT 27
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 42
38765: PUSH
38766: LD_INT 43
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 44
38775: PUSH
38776: LD_INT 46
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 45
38785: PUSH
38786: LD_INT 47
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: ST_TO_ADDR
// result := [ ] ;
38803: LD_ADDR_VAR 0 3
38807: PUSH
38808: EMPTY
38809: ST_TO_ADDR
// for i in turrets do
38810: LD_ADDR_VAR 0 4
38814: PUSH
38815: LD_VAR 0 1
38819: PUSH
38820: FOR_IN
38821: IFFALSE 39004
// begin nat := GetNation ( i ) ;
38823: LD_ADDR_VAR 0 7
38827: PUSH
38828: LD_VAR 0 4
38832: PPUSH
38833: CALL_OW 248
38837: ST_TO_ADDR
// weapon := 0 ;
38838: LD_ADDR_VAR 0 8
38842: PUSH
38843: LD_INT 0
38845: ST_TO_ADDR
// if not nat then
38846: LD_VAR 0 7
38850: NOT
38851: IFFALSE 38855
// continue ;
38853: GO 38820
// for j in list [ nat ] do
38855: LD_ADDR_VAR 0 5
38859: PUSH
38860: LD_VAR 0 10
38864: PUSH
38865: LD_VAR 0 7
38869: ARRAY
38870: PUSH
38871: FOR_IN
38872: IFFALSE 38913
// if GetBWeapon ( i ) = j [ 1 ] then
38874: LD_VAR 0 4
38878: PPUSH
38879: CALL_OW 269
38883: PUSH
38884: LD_VAR 0 5
38888: PUSH
38889: LD_INT 1
38891: ARRAY
38892: EQUAL
38893: IFFALSE 38911
// begin weapon := j [ 2 ] ;
38895: LD_ADDR_VAR 0 8
38899: PUSH
38900: LD_VAR 0 5
38904: PUSH
38905: LD_INT 2
38907: ARRAY
38908: ST_TO_ADDR
// break ;
38909: GO 38913
// end ;
38911: GO 38871
38913: POP
38914: POP
// if not weapon then
38915: LD_VAR 0 8
38919: NOT
38920: IFFALSE 38924
// continue ;
38922: GO 38820
// for k in factories do
38924: LD_ADDR_VAR 0 6
38928: PUSH
38929: LD_VAR 0 2
38933: PUSH
38934: FOR_IN
38935: IFFALSE 39000
// begin weapons := AvailableWeaponList ( k ) ;
38937: LD_ADDR_VAR 0 9
38941: PUSH
38942: LD_VAR 0 6
38946: PPUSH
38947: CALL_OW 478
38951: ST_TO_ADDR
// if not weapons then
38952: LD_VAR 0 9
38956: NOT
38957: IFFALSE 38961
// continue ;
38959: GO 38934
// if weapon in weapons then
38961: LD_VAR 0 8
38965: PUSH
38966: LD_VAR 0 9
38970: IN
38971: IFFALSE 38998
// begin result := [ i , weapon ] ;
38973: LD_ADDR_VAR 0 3
38977: PUSH
38978: LD_VAR 0 4
38982: PUSH
38983: LD_VAR 0 8
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: ST_TO_ADDR
// exit ;
38992: POP
38993: POP
38994: POP
38995: POP
38996: GO 39006
// end ; end ;
38998: GO 38934
39000: POP
39001: POP
// end ;
39002: GO 38820
39004: POP
39005: POP
// end ;
39006: LD_VAR 0 3
39010: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39011: LD_INT 0
39013: PPUSH
// if not side or side > 8 then
39014: LD_VAR 0 3
39018: NOT
39019: PUSH
39020: LD_VAR 0 3
39024: PUSH
39025: LD_INT 8
39027: GREATER
39028: OR
39029: IFFALSE 39033
// exit ;
39031: GO 39092
// if not range then
39033: LD_VAR 0 4
39037: NOT
39038: IFFALSE 39049
// range := - 12 ;
39040: LD_ADDR_VAR 0 4
39044: PUSH
39045: LD_INT 12
39047: NEG
39048: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39049: LD_VAR 0 1
39053: PPUSH
39054: LD_VAR 0 2
39058: PPUSH
39059: LD_VAR 0 3
39063: PPUSH
39064: LD_VAR 0 4
39068: PPUSH
39069: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39073: LD_VAR 0 1
39077: PPUSH
39078: LD_VAR 0 2
39082: PPUSH
39083: LD_VAR 0 3
39087: PPUSH
39088: CALL_OW 331
// end ;
39092: LD_VAR 0 5
39096: RET
// export function Video ( mode ) ; begin
39097: LD_INT 0
39099: PPUSH
// ingame_video = mode ;
39100: LD_ADDR_OWVAR 52
39104: PUSH
39105: LD_VAR 0 1
39109: ST_TO_ADDR
// interface_hidden = mode ;
39110: LD_ADDR_OWVAR 54
39114: PUSH
39115: LD_VAR 0 1
39119: ST_TO_ADDR
// end ;
39120: LD_VAR 0 2
39124: RET
// export function Join ( array , element ) ; begin
39125: LD_INT 0
39127: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39128: LD_ADDR_VAR 0 3
39132: PUSH
39133: LD_VAR 0 1
39137: PPUSH
39138: LD_VAR 0 1
39142: PUSH
39143: LD_INT 1
39145: PLUS
39146: PPUSH
39147: LD_VAR 0 2
39151: PPUSH
39152: CALL_OW 1
39156: ST_TO_ADDR
// end ;
39157: LD_VAR 0 3
39161: RET
// export function JoinUnion ( array , element ) ; begin
39162: LD_INT 0
39164: PPUSH
// result := array union element ;
39165: LD_ADDR_VAR 0 3
39169: PUSH
39170: LD_VAR 0 1
39174: PUSH
39175: LD_VAR 0 2
39179: UNION
39180: ST_TO_ADDR
// end ;
39181: LD_VAR 0 3
39185: RET
// export function GetBehemoths ( side ) ; begin
39186: LD_INT 0
39188: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39189: LD_ADDR_VAR 0 2
39193: PUSH
39194: LD_INT 22
39196: PUSH
39197: LD_VAR 0 1
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 31
39208: PUSH
39209: LD_INT 25
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PPUSH
39220: CALL_OW 69
39224: ST_TO_ADDR
// end ;
39225: LD_VAR 0 2
39229: RET
// export function Shuffle ( array ) ; var i , index ; begin
39230: LD_INT 0
39232: PPUSH
39233: PPUSH
39234: PPUSH
// result := [ ] ;
39235: LD_ADDR_VAR 0 2
39239: PUSH
39240: EMPTY
39241: ST_TO_ADDR
// if not array then
39242: LD_VAR 0 1
39246: NOT
39247: IFFALSE 39251
// exit ;
39249: GO 39350
// Randomize ;
39251: CALL_OW 10
// for i = array downto 1 do
39255: LD_ADDR_VAR 0 3
39259: PUSH
39260: DOUBLE
39261: LD_VAR 0 1
39265: INC
39266: ST_TO_ADDR
39267: LD_INT 1
39269: PUSH
39270: FOR_DOWNTO
39271: IFFALSE 39348
// begin index := rand ( 1 , array ) ;
39273: LD_ADDR_VAR 0 4
39277: PUSH
39278: LD_INT 1
39280: PPUSH
39281: LD_VAR 0 1
39285: PPUSH
39286: CALL_OW 12
39290: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39291: LD_ADDR_VAR 0 2
39295: PUSH
39296: LD_VAR 0 2
39300: PPUSH
39301: LD_VAR 0 2
39305: PUSH
39306: LD_INT 1
39308: PLUS
39309: PPUSH
39310: LD_VAR 0 1
39314: PUSH
39315: LD_VAR 0 4
39319: ARRAY
39320: PPUSH
39321: CALL_OW 2
39325: ST_TO_ADDR
// array := Delete ( array , index ) ;
39326: LD_ADDR_VAR 0 1
39330: PUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: LD_VAR 0 4
39340: PPUSH
39341: CALL_OW 3
39345: ST_TO_ADDR
// end ;
39346: GO 39270
39348: POP
39349: POP
// end ;
39350: LD_VAR 0 2
39354: RET
// export function GetBaseMaterials ( base ) ; begin
39355: LD_INT 0
39357: PPUSH
// result := [ 0 , 0 , 0 ] ;
39358: LD_ADDR_VAR 0 2
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: ST_TO_ADDR
// if not base then
39377: LD_VAR 0 1
39381: NOT
39382: IFFALSE 39386
// exit ;
39384: GO 39435
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39386: LD_ADDR_VAR 0 2
39390: PUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: LD_INT 1
39398: PPUSH
39399: CALL_OW 275
39403: PUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: LD_INT 2
39411: PPUSH
39412: CALL_OW 275
39416: PUSH
39417: LD_VAR 0 1
39421: PPUSH
39422: LD_INT 3
39424: PPUSH
39425: CALL_OW 275
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: ST_TO_ADDR
// end ;
39435: LD_VAR 0 2
39439: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39440: LD_INT 0
39442: PPUSH
39443: PPUSH
// result := array ;
39444: LD_ADDR_VAR 0 3
39448: PUSH
39449: LD_VAR 0 1
39453: ST_TO_ADDR
// if size >= result then
39454: LD_VAR 0 2
39458: PUSH
39459: LD_VAR 0 3
39463: GREATEREQUAL
39464: IFFALSE 39468
// exit ;
39466: GO 39518
// if size then
39468: LD_VAR 0 2
39472: IFFALSE 39518
// for i := array downto size do
39474: LD_ADDR_VAR 0 4
39478: PUSH
39479: DOUBLE
39480: LD_VAR 0 1
39484: INC
39485: ST_TO_ADDR
39486: LD_VAR 0 2
39490: PUSH
39491: FOR_DOWNTO
39492: IFFALSE 39516
// result := Delete ( result , result ) ;
39494: LD_ADDR_VAR 0 3
39498: PUSH
39499: LD_VAR 0 3
39503: PPUSH
39504: LD_VAR 0 3
39508: PPUSH
39509: CALL_OW 3
39513: ST_TO_ADDR
39514: GO 39491
39516: POP
39517: POP
// end ;
39518: LD_VAR 0 3
39522: RET
// export function ComExit ( unit ) ; var tmp ; begin
39523: LD_INT 0
39525: PPUSH
39526: PPUSH
// if not IsInUnit ( unit ) then
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 310
39536: NOT
39537: IFFALSE 39541
// exit ;
39539: GO 39601
// tmp := IsInUnit ( unit ) ;
39541: LD_ADDR_VAR 0 3
39545: PUSH
39546: LD_VAR 0 1
39550: PPUSH
39551: CALL_OW 310
39555: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39556: LD_VAR 0 3
39560: PPUSH
39561: CALL_OW 247
39565: PUSH
39566: LD_INT 2
39568: EQUAL
39569: IFFALSE 39582
// ComExitVehicle ( unit ) else
39571: LD_VAR 0 1
39575: PPUSH
39576: CALL_OW 121
39580: GO 39591
// ComExitBuilding ( unit ) ;
39582: LD_VAR 0 1
39586: PPUSH
39587: CALL_OW 122
// result := tmp ;
39591: LD_ADDR_VAR 0 2
39595: PUSH
39596: LD_VAR 0 3
39600: ST_TO_ADDR
// end ;
39601: LD_VAR 0 2
39605: RET
// export function ComExitAll ( units ) ; var i ; begin
39606: LD_INT 0
39608: PPUSH
39609: PPUSH
// if not units then
39610: LD_VAR 0 1
39614: NOT
39615: IFFALSE 39619
// exit ;
39617: GO 39645
// for i in units do
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_VAR 0 1
39628: PUSH
39629: FOR_IN
39630: IFFALSE 39643
// ComExit ( i ) ;
39632: LD_VAR 0 3
39636: PPUSH
39637: CALL 39523 0 1
39641: GO 39629
39643: POP
39644: POP
// end ;
39645: LD_VAR 0 2
39649: RET
// export function ResetHc ; begin
39650: LD_INT 0
39652: PPUSH
// InitHc ;
39653: CALL_OW 19
// hc_importance := 0 ;
39657: LD_ADDR_OWVAR 32
39661: PUSH
39662: LD_INT 0
39664: ST_TO_ADDR
// end ;
39665: LD_VAR 0 1
39669: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39670: LD_INT 0
39672: PPUSH
39673: PPUSH
39674: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39675: LD_ADDR_VAR 0 6
39679: PUSH
39680: LD_VAR 0 1
39684: PUSH
39685: LD_VAR 0 3
39689: PLUS
39690: PUSH
39691: LD_INT 2
39693: DIV
39694: ST_TO_ADDR
// if _x < 0 then
39695: LD_VAR 0 6
39699: PUSH
39700: LD_INT 0
39702: LESS
39703: IFFALSE 39720
// _x := _x * - 1 ;
39705: LD_ADDR_VAR 0 6
39709: PUSH
39710: LD_VAR 0 6
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: MUL
39719: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39720: LD_ADDR_VAR 0 7
39724: PUSH
39725: LD_VAR 0 2
39729: PUSH
39730: LD_VAR 0 4
39734: PLUS
39735: PUSH
39736: LD_INT 2
39738: DIV
39739: ST_TO_ADDR
// if _y < 0 then
39740: LD_VAR 0 7
39744: PUSH
39745: LD_INT 0
39747: LESS
39748: IFFALSE 39765
// _y := _y * - 1 ;
39750: LD_ADDR_VAR 0 7
39754: PUSH
39755: LD_VAR 0 7
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: MUL
39764: ST_TO_ADDR
// result := [ _x , _y ] ;
39765: LD_ADDR_VAR 0 5
39769: PUSH
39770: LD_VAR 0 6
39774: PUSH
39775: LD_VAR 0 7
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: ST_TO_ADDR
// end ;
39784: LD_VAR 0 5
39788: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39789: LD_INT 0
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
// task := GetTaskList ( unit ) ;
39795: LD_ADDR_VAR 0 7
39799: PUSH
39800: LD_VAR 0 1
39804: PPUSH
39805: CALL_OW 437
39809: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39810: LD_VAR 0 7
39814: NOT
39815: PUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: LD_VAR 0 2
39825: PPUSH
39826: CALL_OW 308
39830: NOT
39831: AND
39832: IFFALSE 39836
// exit ;
39834: GO 39954
// if IsInArea ( unit , area ) then
39836: LD_VAR 0 1
39840: PPUSH
39841: LD_VAR 0 2
39845: PPUSH
39846: CALL_OW 308
39850: IFFALSE 39868
// begin ComMoveToArea ( unit , goAway ) ;
39852: LD_VAR 0 1
39856: PPUSH
39857: LD_VAR 0 3
39861: PPUSH
39862: CALL_OW 113
// exit ;
39866: GO 39954
// end ; if task [ 1 ] [ 1 ] <> M then
39868: LD_VAR 0 7
39872: PUSH
39873: LD_INT 1
39875: ARRAY
39876: PUSH
39877: LD_INT 1
39879: ARRAY
39880: PUSH
39881: LD_STRING M
39883: NONEQUAL
39884: IFFALSE 39888
// exit ;
39886: GO 39954
// x := task [ 1 ] [ 2 ] ;
39888: LD_ADDR_VAR 0 5
39892: PUSH
39893: LD_VAR 0 7
39897: PUSH
39898: LD_INT 1
39900: ARRAY
39901: PUSH
39902: LD_INT 2
39904: ARRAY
39905: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39906: LD_ADDR_VAR 0 6
39910: PUSH
39911: LD_VAR 0 7
39915: PUSH
39916: LD_INT 1
39918: ARRAY
39919: PUSH
39920: LD_INT 3
39922: ARRAY
39923: ST_TO_ADDR
// if InArea ( x , y , area ) then
39924: LD_VAR 0 5
39928: PPUSH
39929: LD_VAR 0 6
39933: PPUSH
39934: LD_VAR 0 2
39938: PPUSH
39939: CALL_OW 309
39943: IFFALSE 39954
// ComStop ( unit ) ;
39945: LD_VAR 0 1
39949: PPUSH
39950: CALL_OW 141
// end ;
39954: LD_VAR 0 4
39958: RET
// export function Abs ( value ) ; begin
39959: LD_INT 0
39961: PPUSH
// result := value ;
39962: LD_ADDR_VAR 0 2
39966: PUSH
39967: LD_VAR 0 1
39971: ST_TO_ADDR
// if value < 0 then
39972: LD_VAR 0 1
39976: PUSH
39977: LD_INT 0
39979: LESS
39980: IFFALSE 39997
// result := value * - 1 ;
39982: LD_ADDR_VAR 0 2
39986: PUSH
39987: LD_VAR 0 1
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: MUL
39996: ST_TO_ADDR
// end ;
39997: LD_VAR 0 2
40001: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40002: LD_INT 0
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
// if not unit or not building then
40012: LD_VAR 0 1
40016: NOT
40017: PUSH
40018: LD_VAR 0 2
40022: NOT
40023: OR
40024: IFFALSE 40028
// exit ;
40026: GO 40254
// x := GetX ( building ) ;
40028: LD_ADDR_VAR 0 4
40032: PUSH
40033: LD_VAR 0 2
40037: PPUSH
40038: CALL_OW 250
40042: ST_TO_ADDR
// y := GetY ( building ) ;
40043: LD_ADDR_VAR 0 6
40047: PUSH
40048: LD_VAR 0 2
40052: PPUSH
40053: CALL_OW 251
40057: ST_TO_ADDR
// d := GetDir ( building ) ;
40058: LD_ADDR_VAR 0 8
40062: PUSH
40063: LD_VAR 0 2
40067: PPUSH
40068: CALL_OW 254
40072: ST_TO_ADDR
// r := 4 ;
40073: LD_ADDR_VAR 0 9
40077: PUSH
40078: LD_INT 4
40080: ST_TO_ADDR
// for i := 1 to 5 do
40081: LD_ADDR_VAR 0 10
40085: PUSH
40086: DOUBLE
40087: LD_INT 1
40089: DEC
40090: ST_TO_ADDR
40091: LD_INT 5
40093: PUSH
40094: FOR_TO
40095: IFFALSE 40252
// begin _x := ShiftX ( x , d , r + i ) ;
40097: LD_ADDR_VAR 0 5
40101: PUSH
40102: LD_VAR 0 4
40106: PPUSH
40107: LD_VAR 0 8
40111: PPUSH
40112: LD_VAR 0 9
40116: PUSH
40117: LD_VAR 0 10
40121: PLUS
40122: PPUSH
40123: CALL_OW 272
40127: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40128: LD_ADDR_VAR 0 7
40132: PUSH
40133: LD_VAR 0 6
40137: PPUSH
40138: LD_VAR 0 8
40142: PPUSH
40143: LD_VAR 0 9
40147: PUSH
40148: LD_VAR 0 10
40152: PLUS
40153: PPUSH
40154: CALL_OW 273
40158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40159: LD_VAR 0 5
40163: PPUSH
40164: LD_VAR 0 7
40168: PPUSH
40169: CALL_OW 488
40173: PUSH
40174: LD_VAR 0 5
40178: PPUSH
40179: LD_VAR 0 7
40183: PPUSH
40184: CALL_OW 428
40188: PPUSH
40189: CALL_OW 247
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: IN
40204: NOT
40205: AND
40206: IFFALSE 40250
// begin ComMoveXY ( unit , _x , _y ) ;
40208: LD_VAR 0 1
40212: PPUSH
40213: LD_VAR 0 5
40217: PPUSH
40218: LD_VAR 0 7
40222: PPUSH
40223: CALL_OW 111
// result := [ _x , _y ] ;
40227: LD_ADDR_VAR 0 3
40231: PUSH
40232: LD_VAR 0 5
40236: PUSH
40237: LD_VAR 0 7
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// exit ;
40246: POP
40247: POP
40248: GO 40254
// end ; end ;
40250: GO 40094
40252: POP
40253: POP
// end ;
40254: LD_VAR 0 3
40258: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40259: LD_INT 0
40261: PPUSH
40262: PPUSH
40263: PPUSH
// result := 0 ;
40264: LD_ADDR_VAR 0 3
40268: PUSH
40269: LD_INT 0
40271: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40272: LD_VAR 0 1
40276: PUSH
40277: LD_INT 0
40279: LESS
40280: PUSH
40281: LD_VAR 0 1
40285: PUSH
40286: LD_INT 8
40288: GREATER
40289: OR
40290: PUSH
40291: LD_VAR 0 2
40295: PUSH
40296: LD_INT 0
40298: LESS
40299: OR
40300: PUSH
40301: LD_VAR 0 2
40305: PUSH
40306: LD_INT 8
40308: GREATER
40309: OR
40310: IFFALSE 40314
// exit ;
40312: GO 40389
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40314: LD_ADDR_VAR 0 4
40318: PUSH
40319: LD_INT 22
40321: PUSH
40322: LD_VAR 0 2
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PPUSH
40331: CALL_OW 69
40335: PUSH
40336: FOR_IN
40337: IFFALSE 40387
// begin un := UnitShoot ( i ) ;
40339: LD_ADDR_VAR 0 5
40343: PUSH
40344: LD_VAR 0 4
40348: PPUSH
40349: CALL_OW 504
40353: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40354: LD_VAR 0 5
40358: PPUSH
40359: CALL_OW 255
40363: PUSH
40364: LD_VAR 0 1
40368: EQUAL
40369: IFFALSE 40385
// begin result := un ;
40371: LD_ADDR_VAR 0 3
40375: PUSH
40376: LD_VAR 0 5
40380: ST_TO_ADDR
// exit ;
40381: POP
40382: POP
40383: GO 40389
// end ; end ;
40385: GO 40336
40387: POP
40388: POP
// end ;
40389: LD_VAR 0 3
40393: RET
// export function GetCargoBay ( units ) ; begin
40394: LD_INT 0
40396: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40397: LD_ADDR_VAR 0 2
40401: PUSH
40402: LD_VAR 0 1
40406: PPUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 34
40412: PUSH
40413: LD_INT 12
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 34
40422: PUSH
40423: LD_INT 51
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 34
40432: PUSH
40433: LD_INT 32
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 34
40442: PUSH
40443: LD_INT 89
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: PPUSH
40457: CALL_OW 72
40461: ST_TO_ADDR
// end ;
40462: LD_VAR 0 2
40466: RET
// export function Negate ( value ) ; begin
40467: LD_INT 0
40469: PPUSH
// result := not value ;
40470: LD_ADDR_VAR 0 2
40474: PUSH
40475: LD_VAR 0 1
40479: NOT
40480: ST_TO_ADDR
// end ;
40481: LD_VAR 0 2
40485: RET
// export function Inc ( value ) ; begin
40486: LD_INT 0
40488: PPUSH
// result := value + 1 ;
40489: LD_ADDR_VAR 0 2
40493: PUSH
40494: LD_VAR 0 1
40498: PUSH
40499: LD_INT 1
40501: PLUS
40502: ST_TO_ADDR
// end ;
40503: LD_VAR 0 2
40507: RET
// export function Dec ( value ) ; begin
40508: LD_INT 0
40510: PPUSH
// result := value - 1 ;
40511: LD_ADDR_VAR 0 2
40515: PUSH
40516: LD_VAR 0 1
40520: PUSH
40521: LD_INT 1
40523: MINUS
40524: ST_TO_ADDR
// end ;
40525: LD_VAR 0 2
40529: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40530: LD_INT 0
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40540: LD_VAR 0 1
40544: PPUSH
40545: LD_VAR 0 2
40549: PPUSH
40550: CALL_OW 488
40554: NOT
40555: PUSH
40556: LD_VAR 0 3
40560: PPUSH
40561: LD_VAR 0 4
40565: PPUSH
40566: CALL_OW 488
40570: NOT
40571: OR
40572: IFFALSE 40585
// begin result := - 1 ;
40574: LD_ADDR_VAR 0 5
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: ST_TO_ADDR
// exit ;
40583: GO 40820
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40585: LD_ADDR_VAR 0 12
40589: PUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: LD_VAR 0 3
40604: PPUSH
40605: LD_VAR 0 4
40609: PPUSH
40610: CALL 39670 0 4
40614: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40615: LD_ADDR_VAR 0 11
40619: PUSH
40620: LD_VAR 0 1
40624: PPUSH
40625: LD_VAR 0 2
40629: PPUSH
40630: LD_VAR 0 12
40634: PUSH
40635: LD_INT 1
40637: ARRAY
40638: PPUSH
40639: LD_VAR 0 12
40643: PUSH
40644: LD_INT 2
40646: ARRAY
40647: PPUSH
40648: CALL_OW 298
40652: ST_TO_ADDR
// distance := 9999 ;
40653: LD_ADDR_VAR 0 10
40657: PUSH
40658: LD_INT 9999
40660: ST_TO_ADDR
// for i := 0 to 5 do
40661: LD_ADDR_VAR 0 6
40665: PUSH
40666: DOUBLE
40667: LD_INT 0
40669: DEC
40670: ST_TO_ADDR
40671: LD_INT 5
40673: PUSH
40674: FOR_TO
40675: IFFALSE 40818
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40677: LD_ADDR_VAR 0 7
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: LD_VAR 0 6
40691: PPUSH
40692: LD_VAR 0 11
40696: PPUSH
40697: CALL_OW 272
40701: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40702: LD_ADDR_VAR 0 8
40706: PUSH
40707: LD_VAR 0 2
40711: PPUSH
40712: LD_VAR 0 6
40716: PPUSH
40717: LD_VAR 0 11
40721: PPUSH
40722: CALL_OW 273
40726: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40727: LD_VAR 0 7
40731: PPUSH
40732: LD_VAR 0 8
40736: PPUSH
40737: CALL_OW 488
40741: NOT
40742: IFFALSE 40746
// continue ;
40744: GO 40674
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40746: LD_ADDR_VAR 0 9
40750: PUSH
40751: LD_VAR 0 12
40755: PUSH
40756: LD_INT 1
40758: ARRAY
40759: PPUSH
40760: LD_VAR 0 12
40764: PUSH
40765: LD_INT 2
40767: ARRAY
40768: PPUSH
40769: LD_VAR 0 7
40773: PPUSH
40774: LD_VAR 0 8
40778: PPUSH
40779: CALL_OW 298
40783: ST_TO_ADDR
// if tmp < distance then
40784: LD_VAR 0 9
40788: PUSH
40789: LD_VAR 0 10
40793: LESS
40794: IFFALSE 40816
// begin result := i ;
40796: LD_ADDR_VAR 0 5
40800: PUSH
40801: LD_VAR 0 6
40805: ST_TO_ADDR
// distance := tmp ;
40806: LD_ADDR_VAR 0 10
40810: PUSH
40811: LD_VAR 0 9
40815: ST_TO_ADDR
// end ; end ;
40816: GO 40674
40818: POP
40819: POP
// end ;
40820: LD_VAR 0 5
40824: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40825: LD_INT 0
40827: PPUSH
40828: PPUSH
// if not driver or not IsInUnit ( driver ) then
40829: LD_VAR 0 1
40833: NOT
40834: PUSH
40835: LD_VAR 0 1
40839: PPUSH
40840: CALL_OW 310
40844: NOT
40845: OR
40846: IFFALSE 40850
// exit ;
40848: GO 40940
// vehicle := IsInUnit ( driver ) ;
40850: LD_ADDR_VAR 0 3
40854: PUSH
40855: LD_VAR 0 1
40859: PPUSH
40860: CALL_OW 310
40864: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40865: LD_VAR 0 1
40869: PPUSH
40870: LD_STRING \
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: PUSH
40900: LD_STRING E
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_VAR 0 3
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PPUSH
40936: CALL_OW 446
// end ;
40940: LD_VAR 0 2
40944: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40945: LD_INT 0
40947: PPUSH
40948: PPUSH
// if not driver or not IsInUnit ( driver ) then
40949: LD_VAR 0 1
40953: NOT
40954: PUSH
40955: LD_VAR 0 1
40959: PPUSH
40960: CALL_OW 310
40964: NOT
40965: OR
40966: IFFALSE 40970
// exit ;
40968: GO 41060
// vehicle := IsInUnit ( driver ) ;
40970: LD_ADDR_VAR 0 3
40974: PUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 310
40984: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40985: LD_VAR 0 1
40989: PPUSH
40990: LD_STRING \
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: PUSH
41020: LD_STRING E
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_VAR 0 3
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PPUSH
41056: CALL_OW 447
// end ;
41060: LD_VAR 0 2
41064: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41065: LD_INT 0
41067: PPUSH
41068: PPUSH
41069: PPUSH
// tmp := [ ] ;
41070: LD_ADDR_VAR 0 5
41074: PUSH
41075: EMPTY
41076: ST_TO_ADDR
// for i in units do
41077: LD_ADDR_VAR 0 4
41081: PUSH
41082: LD_VAR 0 1
41086: PUSH
41087: FOR_IN
41088: IFFALSE 41126
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41090: LD_ADDR_VAR 0 5
41094: PUSH
41095: LD_VAR 0 5
41099: PPUSH
41100: LD_VAR 0 5
41104: PUSH
41105: LD_INT 1
41107: PLUS
41108: PPUSH
41109: LD_VAR 0 4
41113: PPUSH
41114: CALL_OW 256
41118: PPUSH
41119: CALL_OW 2
41123: ST_TO_ADDR
41124: GO 41087
41126: POP
41127: POP
// if not tmp then
41128: LD_VAR 0 5
41132: NOT
41133: IFFALSE 41137
// exit ;
41135: GO 41185
// if asc then
41137: LD_VAR 0 2
41141: IFFALSE 41165
// result := SortListByListAsc ( units , tmp ) else
41143: LD_ADDR_VAR 0 3
41147: PUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: LD_VAR 0 5
41157: PPUSH
41158: CALL_OW 76
41162: ST_TO_ADDR
41163: GO 41185
// result := SortListByListDesc ( units , tmp ) ;
41165: LD_ADDR_VAR 0 3
41169: PUSH
41170: LD_VAR 0 1
41174: PPUSH
41175: LD_VAR 0 5
41179: PPUSH
41180: CALL_OW 77
41184: ST_TO_ADDR
// end ;
41185: LD_VAR 0 3
41189: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41190: LD_INT 0
41192: PPUSH
41193: PPUSH
// task := GetTaskList ( mech ) ;
41194: LD_ADDR_VAR 0 4
41198: PUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: CALL_OW 437
41208: ST_TO_ADDR
// if not task then
41209: LD_VAR 0 4
41213: NOT
41214: IFFALSE 41218
// exit ;
41216: GO 41260
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41218: LD_ADDR_VAR 0 3
41222: PUSH
41223: LD_VAR 0 4
41227: PUSH
41228: LD_INT 1
41230: ARRAY
41231: PUSH
41232: LD_INT 1
41234: ARRAY
41235: PUSH
41236: LD_STRING r
41238: EQUAL
41239: PUSH
41240: LD_VAR 0 4
41244: PUSH
41245: LD_INT 1
41247: ARRAY
41248: PUSH
41249: LD_INT 4
41251: ARRAY
41252: PUSH
41253: LD_VAR 0 2
41257: EQUAL
41258: AND
41259: ST_TO_ADDR
// end ;
41260: LD_VAR 0 3
41264: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41265: LD_INT 0
41267: PPUSH
// SetDir ( unit , d ) ;
41268: LD_VAR 0 1
41272: PPUSH
41273: LD_VAR 0 4
41277: PPUSH
41278: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41282: LD_VAR 0 1
41286: PPUSH
41287: LD_VAR 0 2
41291: PPUSH
41292: LD_VAR 0 3
41296: PPUSH
41297: LD_VAR 0 5
41301: PPUSH
41302: CALL_OW 48
// end ;
41306: LD_VAR 0 6
41310: RET
// export function ToNaturalNumber ( number ) ; begin
41311: LD_INT 0
41313: PPUSH
// result := number div 1 ;
41314: LD_ADDR_VAR 0 2
41318: PUSH
41319: LD_VAR 0 1
41323: PUSH
41324: LD_INT 1
41326: DIV
41327: ST_TO_ADDR
// if number < 0 then
41328: LD_VAR 0 1
41332: PUSH
41333: LD_INT 0
41335: LESS
41336: IFFALSE 41346
// result := 0 ;
41338: LD_ADDR_VAR 0 2
41342: PUSH
41343: LD_INT 0
41345: ST_TO_ADDR
// end ;
41346: LD_VAR 0 2
41350: RET
// export function SortByClass ( units , class ) ; var un ; begin
41351: LD_INT 0
41353: PPUSH
41354: PPUSH
// if not units or not class then
41355: LD_VAR 0 1
41359: NOT
41360: PUSH
41361: LD_VAR 0 2
41365: NOT
41366: OR
41367: IFFALSE 41371
// exit ;
41369: GO 41466
// result := [ ] ;
41371: LD_ADDR_VAR 0 3
41375: PUSH
41376: EMPTY
41377: ST_TO_ADDR
// for un in units do
41378: LD_ADDR_VAR 0 4
41382: PUSH
41383: LD_VAR 0 1
41387: PUSH
41388: FOR_IN
41389: IFFALSE 41464
// if GetClass ( un ) = class then
41391: LD_VAR 0 4
41395: PPUSH
41396: CALL_OW 257
41400: PUSH
41401: LD_VAR 0 2
41405: EQUAL
41406: IFFALSE 41433
// result := Insert ( result , 1 , un ) else
41408: LD_ADDR_VAR 0 3
41412: PUSH
41413: LD_VAR 0 3
41417: PPUSH
41418: LD_INT 1
41420: PPUSH
41421: LD_VAR 0 4
41425: PPUSH
41426: CALL_OW 2
41430: ST_TO_ADDR
41431: GO 41462
// result := Replace ( result , result + 1 , un ) ;
41433: LD_ADDR_VAR 0 3
41437: PUSH
41438: LD_VAR 0 3
41442: PPUSH
41443: LD_VAR 0 3
41447: PUSH
41448: LD_INT 1
41450: PLUS
41451: PPUSH
41452: LD_VAR 0 4
41456: PPUSH
41457: CALL_OW 1
41461: ST_TO_ADDR
41462: GO 41388
41464: POP
41465: POP
// end ;
41466: LD_VAR 0 3
41470: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41471: LD_INT 0
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
// result := [ ] ;
41480: LD_ADDR_VAR 0 4
41484: PUSH
41485: EMPTY
41486: ST_TO_ADDR
// if x - r < 0 then
41487: LD_VAR 0 1
41491: PUSH
41492: LD_VAR 0 3
41496: MINUS
41497: PUSH
41498: LD_INT 0
41500: LESS
41501: IFFALSE 41513
// min_x := 0 else
41503: LD_ADDR_VAR 0 8
41507: PUSH
41508: LD_INT 0
41510: ST_TO_ADDR
41511: GO 41529
// min_x := x - r ;
41513: LD_ADDR_VAR 0 8
41517: PUSH
41518: LD_VAR 0 1
41522: PUSH
41523: LD_VAR 0 3
41527: MINUS
41528: ST_TO_ADDR
// if y - r < 0 then
41529: LD_VAR 0 2
41533: PUSH
41534: LD_VAR 0 3
41538: MINUS
41539: PUSH
41540: LD_INT 0
41542: LESS
41543: IFFALSE 41555
// min_y := 0 else
41545: LD_ADDR_VAR 0 7
41549: PUSH
41550: LD_INT 0
41552: ST_TO_ADDR
41553: GO 41571
// min_y := y - r ;
41555: LD_ADDR_VAR 0 7
41559: PUSH
41560: LD_VAR 0 2
41564: PUSH
41565: LD_VAR 0 3
41569: MINUS
41570: ST_TO_ADDR
// max_x := x + r ;
41571: LD_ADDR_VAR 0 9
41575: PUSH
41576: LD_VAR 0 1
41580: PUSH
41581: LD_VAR 0 3
41585: PLUS
41586: ST_TO_ADDR
// max_y := y + r ;
41587: LD_ADDR_VAR 0 10
41591: PUSH
41592: LD_VAR 0 2
41596: PUSH
41597: LD_VAR 0 3
41601: PLUS
41602: ST_TO_ADDR
// for _x = min_x to max_x do
41603: LD_ADDR_VAR 0 5
41607: PUSH
41608: DOUBLE
41609: LD_VAR 0 8
41613: DEC
41614: ST_TO_ADDR
41615: LD_VAR 0 9
41619: PUSH
41620: FOR_TO
41621: IFFALSE 41722
// for _y = min_y to max_y do
41623: LD_ADDR_VAR 0 6
41627: PUSH
41628: DOUBLE
41629: LD_VAR 0 7
41633: DEC
41634: ST_TO_ADDR
41635: LD_VAR 0 10
41639: PUSH
41640: FOR_TO
41641: IFFALSE 41718
// begin if not ValidHex ( _x , _y ) then
41643: LD_VAR 0 5
41647: PPUSH
41648: LD_VAR 0 6
41652: PPUSH
41653: CALL_OW 488
41657: NOT
41658: IFFALSE 41662
// continue ;
41660: GO 41640
// if GetResourceTypeXY ( _x , _y ) then
41662: LD_VAR 0 5
41666: PPUSH
41667: LD_VAR 0 6
41671: PPUSH
41672: CALL_OW 283
41676: IFFALSE 41716
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41678: LD_ADDR_VAR 0 4
41682: PUSH
41683: LD_VAR 0 4
41687: PPUSH
41688: LD_VAR 0 4
41692: PUSH
41693: LD_INT 1
41695: PLUS
41696: PPUSH
41697: LD_VAR 0 5
41701: PUSH
41702: LD_VAR 0 6
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PPUSH
41711: CALL_OW 1
41715: ST_TO_ADDR
// end ;
41716: GO 41640
41718: POP
41719: POP
41720: GO 41620
41722: POP
41723: POP
// end ;
41724: LD_VAR 0 4
41728: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41729: LD_INT 0
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
// if not units then
41739: LD_VAR 0 1
41743: NOT
41744: IFFALSE 41748
// exit ;
41746: GO 42272
// result := UnitFilter ( units , [ f_ok ] ) ;
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: LD_VAR 0 1
41757: PPUSH
41758: LD_INT 50
41760: PUSH
41761: EMPTY
41762: LIST
41763: PPUSH
41764: CALL_OW 72
41768: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41769: LD_ADDR_VAR 0 8
41773: PUSH
41774: LD_VAR 0 1
41778: PUSH
41779: LD_INT 1
41781: ARRAY
41782: PPUSH
41783: CALL_OW 255
41787: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41788: LD_ADDR_VAR 0 10
41792: PUSH
41793: LD_INT 29
41795: PUSH
41796: LD_INT 91
41798: PUSH
41799: LD_INT 49
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: ST_TO_ADDR
// if not result then
41807: LD_VAR 0 3
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 42272
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41816: LD_ADDR_VAR 0 5
41820: PUSH
41821: LD_INT 81
41823: PUSH
41824: LD_VAR 0 8
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PPUSH
41833: CALL_OW 69
41837: ST_TO_ADDR
// for i in result do
41838: LD_ADDR_VAR 0 4
41842: PUSH
41843: LD_VAR 0 3
41847: PUSH
41848: FOR_IN
41849: IFFALSE 42270
// begin tag := GetTag ( i ) + 1 ;
41851: LD_ADDR_VAR 0 9
41855: PUSH
41856: LD_VAR 0 4
41860: PPUSH
41861: CALL_OW 110
41865: PUSH
41866: LD_INT 1
41868: PLUS
41869: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41870: LD_ADDR_VAR 0 7
41874: PUSH
41875: LD_VAR 0 4
41879: PPUSH
41880: CALL_OW 250
41884: PPUSH
41885: LD_VAR 0 4
41889: PPUSH
41890: CALL_OW 251
41894: PPUSH
41895: LD_INT 6
41897: PPUSH
41898: CALL 41471 0 3
41902: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41903: LD_VAR 0 4
41907: PPUSH
41908: CALL_OW 247
41912: PUSH
41913: LD_INT 2
41915: EQUAL
41916: PUSH
41917: LD_VAR 0 7
41921: AND
41922: PUSH
41923: LD_VAR 0 4
41927: PPUSH
41928: CALL_OW 264
41932: PUSH
41933: LD_VAR 0 10
41937: IN
41938: NOT
41939: AND
41940: IFFALSE 41979
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41942: LD_VAR 0 4
41946: PPUSH
41947: LD_VAR 0 7
41951: PUSH
41952: LD_INT 1
41954: ARRAY
41955: PUSH
41956: LD_INT 1
41958: ARRAY
41959: PPUSH
41960: LD_VAR 0 7
41964: PUSH
41965: LD_INT 1
41967: ARRAY
41968: PUSH
41969: LD_INT 2
41971: ARRAY
41972: PPUSH
41973: CALL_OW 116
41977: GO 42268
// if path > tag then
41979: LD_VAR 0 2
41983: PUSH
41984: LD_VAR 0 9
41988: GREATER
41989: IFFALSE 42197
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41991: LD_ADDR_VAR 0 6
41995: PUSH
41996: LD_VAR 0 5
42000: PPUSH
42001: LD_INT 91
42003: PUSH
42004: LD_VAR 0 4
42008: PUSH
42009: LD_INT 8
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: PPUSH
42017: CALL_OW 72
42021: ST_TO_ADDR
// if nearEnemy then
42022: LD_VAR 0 6
42026: IFFALSE 42095
// begin if GetWeapon ( i ) = ru_time_lapser then
42028: LD_VAR 0 4
42032: PPUSH
42033: CALL_OW 264
42037: PUSH
42038: LD_INT 49
42040: EQUAL
42041: IFFALSE 42069
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42043: LD_VAR 0 4
42047: PPUSH
42048: LD_VAR 0 6
42052: PPUSH
42053: LD_VAR 0 4
42057: PPUSH
42058: CALL_OW 74
42062: PPUSH
42063: CALL_OW 112
42067: GO 42093
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42069: LD_VAR 0 4
42073: PPUSH
42074: LD_VAR 0 6
42078: PPUSH
42079: LD_VAR 0 4
42083: PPUSH
42084: CALL_OW 74
42088: PPUSH
42089: CALL_OW 115
// end else
42093: GO 42195
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42095: LD_VAR 0 4
42099: PPUSH
42100: LD_VAR 0 2
42104: PUSH
42105: LD_VAR 0 9
42109: ARRAY
42110: PUSH
42111: LD_INT 1
42113: ARRAY
42114: PPUSH
42115: LD_VAR 0 2
42119: PUSH
42120: LD_VAR 0 9
42124: ARRAY
42125: PUSH
42126: LD_INT 2
42128: ARRAY
42129: PPUSH
42130: CALL_OW 297
42134: PUSH
42135: LD_INT 6
42137: GREATER
42138: IFFALSE 42181
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42140: LD_VAR 0 4
42144: PPUSH
42145: LD_VAR 0 2
42149: PUSH
42150: LD_VAR 0 9
42154: ARRAY
42155: PUSH
42156: LD_INT 1
42158: ARRAY
42159: PPUSH
42160: LD_VAR 0 2
42164: PUSH
42165: LD_VAR 0 9
42169: ARRAY
42170: PUSH
42171: LD_INT 2
42173: ARRAY
42174: PPUSH
42175: CALL_OW 114
42179: GO 42195
// SetTag ( i , tag ) ;
42181: LD_VAR 0 4
42185: PPUSH
42186: LD_VAR 0 9
42190: PPUSH
42191: CALL_OW 109
// end else
42195: GO 42268
// if enemy then
42197: LD_VAR 0 5
42201: IFFALSE 42268
// begin if GetWeapon ( i ) = ru_time_lapser then
42203: LD_VAR 0 4
42207: PPUSH
42208: CALL_OW 264
42212: PUSH
42213: LD_INT 49
42215: EQUAL
42216: IFFALSE 42244
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42218: LD_VAR 0 4
42222: PPUSH
42223: LD_VAR 0 5
42227: PPUSH
42228: LD_VAR 0 4
42232: PPUSH
42233: CALL_OW 74
42237: PPUSH
42238: CALL_OW 112
42242: GO 42268
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42244: LD_VAR 0 4
42248: PPUSH
42249: LD_VAR 0 5
42253: PPUSH
42254: LD_VAR 0 4
42258: PPUSH
42259: CALL_OW 74
42263: PPUSH
42264: CALL_OW 115
// end ; end ;
42268: GO 41848
42270: POP
42271: POP
// end ;
42272: LD_VAR 0 3
42276: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42277: LD_INT 0
42279: PPUSH
42280: PPUSH
42281: PPUSH
// if not unit or IsInUnit ( unit ) then
42282: LD_VAR 0 1
42286: NOT
42287: PUSH
42288: LD_VAR 0 1
42292: PPUSH
42293: CALL_OW 310
42297: OR
42298: IFFALSE 42302
// exit ;
42300: GO 42393
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42302: LD_ADDR_VAR 0 4
42306: PUSH
42307: LD_VAR 0 1
42311: PPUSH
42312: CALL_OW 250
42316: PPUSH
42317: LD_VAR 0 2
42321: PPUSH
42322: LD_INT 1
42324: PPUSH
42325: CALL_OW 272
42329: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42330: LD_ADDR_VAR 0 5
42334: PUSH
42335: LD_VAR 0 1
42339: PPUSH
42340: CALL_OW 251
42344: PPUSH
42345: LD_VAR 0 2
42349: PPUSH
42350: LD_INT 1
42352: PPUSH
42353: CALL_OW 273
42357: ST_TO_ADDR
// if ValidHex ( x , y ) then
42358: LD_VAR 0 4
42362: PPUSH
42363: LD_VAR 0 5
42367: PPUSH
42368: CALL_OW 488
42372: IFFALSE 42393
// ComTurnXY ( unit , x , y ) ;
42374: LD_VAR 0 1
42378: PPUSH
42379: LD_VAR 0 4
42383: PPUSH
42384: LD_VAR 0 5
42388: PPUSH
42389: CALL_OW 118
// end ;
42393: LD_VAR 0 3
42397: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42398: LD_INT 0
42400: PPUSH
42401: PPUSH
// result := false ;
42402: LD_ADDR_VAR 0 3
42406: PUSH
42407: LD_INT 0
42409: ST_TO_ADDR
// if not units then
42410: LD_VAR 0 2
42414: NOT
42415: IFFALSE 42419
// exit ;
42417: GO 42464
// for i in units do
42419: LD_ADDR_VAR 0 4
42423: PUSH
42424: LD_VAR 0 2
42428: PUSH
42429: FOR_IN
42430: IFFALSE 42462
// if See ( side , i ) then
42432: LD_VAR 0 1
42436: PPUSH
42437: LD_VAR 0 4
42441: PPUSH
42442: CALL_OW 292
42446: IFFALSE 42460
// begin result := true ;
42448: LD_ADDR_VAR 0 3
42452: PUSH
42453: LD_INT 1
42455: ST_TO_ADDR
// exit ;
42456: POP
42457: POP
42458: GO 42464
// end ;
42460: GO 42429
42462: POP
42463: POP
// end ;
42464: LD_VAR 0 3
42468: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42469: LD_INT 0
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
// if not unit or not points then
42475: LD_VAR 0 1
42479: NOT
42480: PUSH
42481: LD_VAR 0 2
42485: NOT
42486: OR
42487: IFFALSE 42491
// exit ;
42489: GO 42581
// dist := 99999 ;
42491: LD_ADDR_VAR 0 5
42495: PUSH
42496: LD_INT 99999
42498: ST_TO_ADDR
// for i in points do
42499: LD_ADDR_VAR 0 4
42503: PUSH
42504: LD_VAR 0 2
42508: PUSH
42509: FOR_IN
42510: IFFALSE 42579
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42512: LD_ADDR_VAR 0 6
42516: PUSH
42517: LD_VAR 0 1
42521: PPUSH
42522: LD_VAR 0 4
42526: PUSH
42527: LD_INT 1
42529: ARRAY
42530: PPUSH
42531: LD_VAR 0 4
42535: PUSH
42536: LD_INT 2
42538: ARRAY
42539: PPUSH
42540: CALL_OW 297
42544: ST_TO_ADDR
// if tmpDist < dist then
42545: LD_VAR 0 6
42549: PUSH
42550: LD_VAR 0 5
42554: LESS
42555: IFFALSE 42577
// begin result := i ;
42557: LD_ADDR_VAR 0 3
42561: PUSH
42562: LD_VAR 0 4
42566: ST_TO_ADDR
// dist := tmpDist ;
42567: LD_ADDR_VAR 0 5
42571: PUSH
42572: LD_VAR 0 6
42576: ST_TO_ADDR
// end ; end ;
42577: GO 42509
42579: POP
42580: POP
// end ;
42581: LD_VAR 0 3
42585: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42586: LD_INT 0
42588: PPUSH
// uc_side := side ;
42589: LD_ADDR_OWVAR 20
42593: PUSH
42594: LD_VAR 0 1
42598: ST_TO_ADDR
// uc_nation := 3 ;
42599: LD_ADDR_OWVAR 21
42603: PUSH
42604: LD_INT 3
42606: ST_TO_ADDR
// vc_chassis := 25 ;
42607: LD_ADDR_OWVAR 37
42611: PUSH
42612: LD_INT 25
42614: ST_TO_ADDR
// vc_engine := engine_siberite ;
42615: LD_ADDR_OWVAR 39
42619: PUSH
42620: LD_INT 3
42622: ST_TO_ADDR
// vc_control := control_computer ;
42623: LD_ADDR_OWVAR 38
42627: PUSH
42628: LD_INT 3
42630: ST_TO_ADDR
// vc_weapon := 59 ;
42631: LD_ADDR_OWVAR 40
42635: PUSH
42636: LD_INT 59
42638: ST_TO_ADDR
// result := CreateVehicle ;
42639: LD_ADDR_VAR 0 5
42643: PUSH
42644: CALL_OW 45
42648: ST_TO_ADDR
// SetDir ( result , d ) ;
42649: LD_VAR 0 5
42653: PPUSH
42654: LD_VAR 0 4
42658: PPUSH
42659: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42663: LD_VAR 0 5
42667: PPUSH
42668: LD_VAR 0 2
42672: PPUSH
42673: LD_VAR 0 3
42677: PPUSH
42678: LD_INT 0
42680: PPUSH
42681: CALL_OW 48
// end ;
42685: LD_VAR 0 5
42689: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42690: LD_INT 0
42692: PPUSH
42693: PPUSH
42694: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42695: LD_ADDR_VAR 0 2
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42718: LD_VAR 0 1
42722: NOT
42723: PUSH
42724: LD_VAR 0 1
42728: PPUSH
42729: CALL_OW 264
42733: PUSH
42734: LD_INT 12
42736: PUSH
42737: LD_INT 51
42739: PUSH
42740: LD_INT 32
42742: PUSH
42743: LD_INT 89
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: IN
42752: NOT
42753: OR
42754: IFFALSE 42758
// exit ;
42756: GO 42856
// for i := 1 to 3 do
42758: LD_ADDR_VAR 0 3
42762: PUSH
42763: DOUBLE
42764: LD_INT 1
42766: DEC
42767: ST_TO_ADDR
42768: LD_INT 3
42770: PUSH
42771: FOR_TO
42772: IFFALSE 42854
// begin tmp := GetCargo ( cargo , i ) ;
42774: LD_ADDR_VAR 0 4
42778: PUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: LD_VAR 0 3
42788: PPUSH
42789: CALL_OW 289
42793: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42794: LD_ADDR_VAR 0 2
42798: PUSH
42799: LD_VAR 0 2
42803: PPUSH
42804: LD_VAR 0 3
42808: PPUSH
42809: LD_VAR 0 4
42813: PPUSH
42814: CALL_OW 1
42818: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42819: LD_ADDR_VAR 0 2
42823: PUSH
42824: LD_VAR 0 2
42828: PPUSH
42829: LD_INT 4
42831: PPUSH
42832: LD_VAR 0 2
42836: PUSH
42837: LD_INT 4
42839: ARRAY
42840: PUSH
42841: LD_VAR 0 4
42845: PLUS
42846: PPUSH
42847: CALL_OW 1
42851: ST_TO_ADDR
// end ;
42852: GO 42771
42854: POP
42855: POP
// end ;
42856: LD_VAR 0 2
42860: RET
// export function Length ( array ) ; begin
42861: LD_INT 0
42863: PPUSH
// result := array + 0 ;
42864: LD_ADDR_VAR 0 2
42868: PUSH
42869: LD_VAR 0 1
42873: PUSH
42874: LD_INT 0
42876: PLUS
42877: ST_TO_ADDR
// end ;
42878: LD_VAR 0 2
42882: RET
// export function PrepareArray ( array ) ; begin
42883: LD_INT 0
42885: PPUSH
// result := array diff 0 ;
42886: LD_ADDR_VAR 0 2
42890: PUSH
42891: LD_VAR 0 1
42895: PUSH
42896: LD_INT 0
42898: DIFF
42899: ST_TO_ADDR
// if not result [ 1 ] then
42900: LD_VAR 0 2
42904: PUSH
42905: LD_INT 1
42907: ARRAY
42908: NOT
42909: IFFALSE 42929
// result := Delete ( result , 1 ) ;
42911: LD_ADDR_VAR 0 2
42915: PUSH
42916: LD_VAR 0 2
42920: PPUSH
42921: LD_INT 1
42923: PPUSH
42924: CALL_OW 3
42928: ST_TO_ADDR
// end ;
42929: LD_VAR 0 2
42933: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42934: LD_INT 0
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
// sibRocketRange := 25 ;
42940: LD_ADDR_VAR 0 6
42944: PUSH
42945: LD_INT 25
42947: ST_TO_ADDR
// result := false ;
42948: LD_ADDR_VAR 0 4
42952: PUSH
42953: LD_INT 0
42955: ST_TO_ADDR
// for i := 0 to 5 do
42956: LD_ADDR_VAR 0 5
42960: PUSH
42961: DOUBLE
42962: LD_INT 0
42964: DEC
42965: ST_TO_ADDR
42966: LD_INT 5
42968: PUSH
42969: FOR_TO
42970: IFFALSE 43037
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42972: LD_VAR 0 1
42976: PPUSH
42977: LD_VAR 0 5
42981: PPUSH
42982: LD_VAR 0 6
42986: PPUSH
42987: CALL_OW 272
42991: PPUSH
42992: LD_VAR 0 2
42996: PPUSH
42997: LD_VAR 0 5
43001: PPUSH
43002: LD_VAR 0 6
43006: PPUSH
43007: CALL_OW 273
43011: PPUSH
43012: LD_VAR 0 3
43016: PPUSH
43017: CALL_OW 309
43021: IFFALSE 43035
// begin result := true ;
43023: LD_ADDR_VAR 0 4
43027: PUSH
43028: LD_INT 1
43030: ST_TO_ADDR
// exit ;
43031: POP
43032: POP
43033: GO 43039
// end ;
43035: GO 42969
43037: POP
43038: POP
// end ;
43039: LD_VAR 0 4
43043: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43044: LD_INT 0
43046: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43047: LD_VAR 0 1
43051: PPUSH
43052: LD_VAR 0 2
43056: PPUSH
43057: LD_INT 0
43059: PPUSH
43060: LD_INT 0
43062: PPUSH
43063: LD_INT 1
43065: PPUSH
43066: LD_INT 0
43068: PPUSH
43069: CALL_OW 587
// end ;
43073: LD_VAR 0 3
43077: RET
