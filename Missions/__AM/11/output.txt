// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 39485 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1781 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 39513 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6642 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 39513 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i , p ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
// p := 0 ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_INT 0
 517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 518: LD_INT 35
 520: PPUSH
 521: CALL_OW 67
// p := Inc ( p ) ;
 525: LD_ADDR_VAR 0 3
 529: PUSH
 530: LD_VAR 0 3
 534: PPUSH
 535: CALL 40874 0 1
 539: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 or p > 20 ;
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 95
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 60
 565: PUSH
 566: EMPTY
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: PUSH
 583: LD_INT 5
 585: GREATEREQUAL
 586: PUSH
 587: LD_VAR 0 3
 591: PUSH
 592: LD_INT 20
 594: GREATER
 595: OR
 596: IFFALSE 518
// wait ( 0 0$1 ) ;
 598: LD_INT 35
 600: PPUSH
 601: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 605: LD_EXP 2
 609: PPUSH
 610: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 614: LD_EXP 3
 618: PPUSH
 619: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 623: LD_INT 10
 625: PPUSH
 626: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 630: LD_EXP 3
 634: PPUSH
 635: LD_INT 52
 637: PPUSH
 638: LD_INT 42
 640: PPUSH
 641: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 645: LD_EXP 2
 649: PPUSH
 650: LD_INT 52
 652: PPUSH
 653: LD_INT 42
 655: PPUSH
 656: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 660: LD_EXP 3
 664: PPUSH
 665: LD_INT 68
 667: PPUSH
 668: LD_INT 55
 670: PPUSH
 671: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 675: LD_EXP 2
 679: PPUSH
 680: LD_INT 68
 682: PPUSH
 683: LD_INT 58
 685: PPUSH
 686: CALL_OW 171
// ComExitVehicle ( people [ 4 ] ) ;
 690: LD_EXP 5
 694: PUSH
 695: LD_INT 4
 697: ARRAY
 698: PPUSH
 699: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 703: LD_EXP 5
 707: PUSH
 708: LD_INT 5
 710: ARRAY
 711: PPUSH
 712: CALL_OW 121
// wait ( 0 0$02 ) ;
 716: LD_INT 70
 718: PPUSH
 719: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 723: LD_EXP 5
 727: PUSH
 728: LD_INT 4
 730: ARRAY
 731: PPUSH
 732: LD_INT 50
 734: PPUSH
 735: LD_INT 40
 737: PPUSH
 738: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 742: LD_EXP 5
 746: PUSH
 747: LD_INT 5
 749: ARRAY
 750: PPUSH
 751: LD_INT 49
 753: PPUSH
 754: LD_INT 59
 756: PPUSH
 757: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 761: LD_INT 35
 763: PPUSH
 764: CALL_OW 67
// if not IsAt ( JMM , 68 , 58 ) and not HasTask ( JMM ) then
 768: LD_EXP 2
 772: PPUSH
 773: LD_INT 68
 775: PPUSH
 776: LD_INT 58
 778: PPUSH
 779: CALL_OW 307
 783: NOT
 784: PUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL_OW 314
 794: NOT
 795: AND
 796: IFFALSE 813
// ComMoveXY ( JMM , 68 , 58 ) ;
 798: LD_EXP 2
 802: PPUSH
 803: LD_INT 68
 805: PPUSH
 806: LD_INT 58
 808: PPUSH
 809: CALL_OW 111
// if not IsAt ( Powell , 68 , 55 ) and not HasTask ( Powell ) then
 813: LD_EXP 3
 817: PPUSH
 818: LD_INT 68
 820: PPUSH
 821: LD_INT 55
 823: PPUSH
 824: CALL_OW 307
 828: NOT
 829: PUSH
 830: LD_EXP 3
 834: PPUSH
 835: CALL_OW 314
 839: NOT
 840: AND
 841: IFFALSE 858
// ComMoveXY ( Powell , 68 , 55 ) ;
 843: LD_EXP 3
 847: PPUSH
 848: LD_INT 68
 850: PPUSH
 851: LD_INT 55
 853: PPUSH
 854: CALL_OW 111
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 858: LD_EXP 3
 862: PPUSH
 863: LD_INT 68
 865: PPUSH
 866: LD_INT 55
 868: PPUSH
 869: CALL_OW 307
 873: PUSH
 874: LD_EXP 2
 878: PPUSH
 879: LD_INT 68
 881: PPUSH
 882: LD_INT 58
 884: PPUSH
 885: CALL_OW 307
 889: AND
 890: IFFALSE 761
// AddComTurnXY ( Powell , 73 , 54 ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_INT 73
 899: PPUSH
 900: LD_INT 54
 902: PPUSH
 903: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 907: LD_EXP 2
 911: PPUSH
 912: LD_INT 74
 914: PPUSH
 915: LD_INT 58
 917: PPUSH
 918: CALL_OW 178
// CenterNowOnUnits ( JMM ) ;
 922: LD_EXP 2
 926: PPUSH
 927: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 931: LD_EXP 3
 935: PPUSH
 936: LD_STRING D1-Pow-1
 938: PPUSH
 939: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 943: LD_EXP 2
 947: PPUSH
 948: LD_STRING D1-JMM-1
 950: PPUSH
 951: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 955: LD_EXP 3
 959: PPUSH
 960: LD_STRING D1-Pow-2
 962: PPUSH
 963: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 967: LD_EXP 2
 971: PPUSH
 972: LD_EXP 3
 976: PPUSH
 977: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 981: LD_EXP 2
 985: PPUSH
 986: LD_STRING D1-JMM-2
 988: PPUSH
 989: CALL_OW 88
// wait ( 0 0$01 ) ;
 993: LD_INT 35
 995: PPUSH
 996: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
1000: LD_EXP 3
1004: PPUSH
1005: LD_EXP 2
1009: PPUSH
1010: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
1014: LD_EXP 3
1018: PPUSH
1019: LD_STRING D1-Pow-3
1021: PPUSH
1022: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_STRING D1-JMM-3
1033: PPUSH
1034: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
1038: LD_EXP 3
1042: PPUSH
1043: LD_STRING D1-Pow-4
1045: PPUSH
1046: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
1050: LD_EXP 2
1054: PPUSH
1055: LD_STRING D1-JMM-4
1057: PPUSH
1058: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
1062: LD_EXP 3
1066: PPUSH
1067: LD_STRING D1-Pow-5
1069: PPUSH
1070: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1074: LD_EXP 2
1078: PPUSH
1079: LD_STRING D1-JMM-5
1081: PPUSH
1082: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
1086: LD_EXP 3
1090: PPUSH
1091: LD_STRING D1-Pow-6
1093: PPUSH
1094: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
1098: LD_EXP 2
1102: PPUSH
1103: LD_STRING D1-JMM-6
1105: PPUSH
1106: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
1110: LD_EXP 3
1114: PPUSH
1115: LD_STRING D1-Pow-7
1117: PPUSH
1118: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
1122: LD_EXP 2
1126: PPUSH
1127: LD_STRING D1-JMM-7
1129: PPUSH
1130: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1134: LD_EXP 3
1138: PPUSH
1139: LD_INT 68
1141: PPUSH
1142: LD_INT 57
1144: PPUSH
1145: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1156: LD_EXP 3
1160: PPUSH
1161: LD_INT 68
1163: PPUSH
1164: LD_INT 57
1166: PPUSH
1167: CALL_OW 307
1171: IFFALSE 1149
// ComTurnUnit ( Powell , JMM ) ;
1173: LD_EXP 3
1177: PPUSH
1178: LD_EXP 2
1182: PPUSH
1183: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1187: LD_EXP 3
1191: PPUSH
1192: LD_STRING D1-Pow-8
1194: PPUSH
1195: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1199: LD_INT 18
1201: PPUSH
1202: CALL_OW 67
// Query ( QLetter ) ;
1206: LD_STRING QLetter
1208: PPUSH
1209: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1213: LD_EXP 3
1217: PPUSH
1218: LD_STRING D1aa-Pow-1
1220: PPUSH
1221: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1225: LD_EXP 2
1229: PPUSH
1230: LD_STRING D1aa-JMM-1
1232: PPUSH
1233: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1237: LD_EXP 3
1241: PPUSH
1242: LD_STRING D1aa-Pow-2
1244: PPUSH
1245: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1249: LD_EXP 2
1253: PPUSH
1254: LD_STRING D1aa-JMM-2
1256: PPUSH
1257: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1261: LD_EXP 3
1265: PPUSH
1266: LD_STRING D1aa-Pow-3
1268: PPUSH
1269: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1273: LD_EXP 2
1277: PPUSH
1278: LD_STRING D1aa-JMM-3
1280: PPUSH
1281: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1285: LD_EXP 3
1289: PPUSH
1290: LD_INT 69
1292: PPUSH
1293: LD_INT 55
1295: PPUSH
1296: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1300: LD_INT 35
1302: PPUSH
1303: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1307: LD_EXP 3
1311: PPUSH
1312: LD_INT 69
1314: PPUSH
1315: LD_INT 55
1317: PPUSH
1318: CALL_OW 307
1322: IFFALSE 1300
// ComTurnXY ( Powell , 71 , 55 ) ;
1324: LD_EXP 3
1328: PPUSH
1329: LD_INT 71
1331: PPUSH
1332: LD_INT 55
1334: PPUSH
1335: CALL_OW 118
// wait ( 0 0$2 ) ;
1339: LD_INT 70
1341: PPUSH
1342: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1346: LD_EXP 3
1350: PPUSH
1351: LD_STRING D1aa-Pow-4
1353: PPUSH
1354: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1358: LD_EXP 2
1362: PPUSH
1363: LD_STRING D1aa-JMM-4
1365: PPUSH
1366: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1370: LD_EXP 3
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1391: LD_EXP 3
1395: PPUSH
1396: LD_STRING D1aa-Pow-5
1398: PPUSH
1399: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1403: LD_EXP 2
1407: PPUSH
1408: LD_STRING D1aa-JMM-5
1410: PPUSH
1411: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1415: LD_EXP 3
1419: PPUSH
1420: LD_STRING D1aa-Pow-6
1422: PPUSH
1423: CALL_OW 88
// wait ( 0 0$1 ) ;
1427: LD_INT 35
1429: PPUSH
1430: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1434: LD_EXP 2
1438: PPUSH
1439: LD_EXP 4
1443: PUSH
1444: LD_INT 3
1446: ARRAY
1447: PPUSH
1448: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1452: LD_INT 18
1454: PPUSH
1455: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1459: LD_EXP 3
1463: PPUSH
1464: LD_EXP 4
1468: PUSH
1469: LD_INT 2
1471: ARRAY
1472: PPUSH
1473: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1477: LD_INT 35
1479: PPUSH
1480: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1484: LD_EXP 3
1488: PPUSH
1489: LD_INT 3
1491: PPUSH
1492: CALL_OW 308
1496: IFFALSE 1477
// CenterOnXY ( 42 , 40 ) ;
1498: LD_INT 42
1500: PPUSH
1501: LD_INT 40
1503: PPUSH
1504: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1508: LD_EXP 5
1512: PUSH
1513: LD_INT 4
1515: ARRAY
1516: PPUSH
1517: LD_EXP 4
1521: PUSH
1522: LD_INT 4
1524: ARRAY
1525: PPUSH
1526: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 5
1537: ARRAY
1538: PPUSH
1539: LD_EXP 4
1543: PUSH
1544: LD_INT 5
1546: ARRAY
1547: PPUSH
1548: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1552: LD_INT 35
1554: PPUSH
1555: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1559: LD_INT 22
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 56
1571: PUSH
1572: EMPTY
1573: LIST
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: PPUSH
1590: CALL_OW 69
1594: PUSH
1595: LD_INT 0
1597: EQUAL
1598: IFFALSE 1552
// CenterOnXY ( 36 , 35 ) ;
1600: LD_INT 36
1602: PPUSH
1603: LD_INT 35
1605: PPUSH
1606: CALL_OW 84
// for i := 1 to 5 do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: DOUBLE
1616: LD_INT 1
1618: DEC
1619: ST_TO_ADDR
1620: LD_INT 5
1622: PUSH
1623: FOR_TO
1624: IFFALSE 1656
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1626: LD_EXP 4
1630: PUSH
1631: LD_VAR 0 2
1635: ARRAY
1636: PPUSH
1637: LD_INT 11
1639: PPUSH
1640: LD_INT 18
1642: PPUSH
1643: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1647: LD_INT 10
1649: PPUSH
1650: CALL_OW 67
// end ;
1654: GO 1623
1656: POP
1657: POP
// wait ( 0 0$2 ) ;
1658: LD_INT 70
1660: PPUSH
1661: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1665: LD_STRING 1
1667: PPUSH
1668: LD_STRING %_cont
1670: PPUSH
1671: CALL_OW 340
// end ;
1675: LD_VAR 0 1
1679: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1680: LD_EXP 5
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: PPUSH
1689: LD_INT 50
1691: PPUSH
1692: LD_INT 40
1694: PPUSH
1695: CALL_OW 307
1699: IFFALSE 1723
1701: GO 1703
1703: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1704: LD_EXP 5
1708: PUSH
1709: LD_INT 4
1711: ARRAY
1712: PPUSH
1713: LD_INT 51
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: CALL_OW 118
1723: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1724: LD_EXP 5
1728: PUSH
1729: LD_INT 5
1731: ARRAY
1732: PPUSH
1733: LD_INT 49
1735: PPUSH
1736: LD_INT 59
1738: PPUSH
1739: CALL_OW 307
1743: IFFALSE 1767
1745: GO 1747
1747: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1748: LD_EXP 5
1752: PUSH
1753: LD_INT 5
1755: ARRAY
1756: PPUSH
1757: LD_INT 51
1759: PPUSH
1760: LD_INT 67
1762: PPUSH
1763: CALL_OW 118
1767: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1768: LD_STRING 1
1770: PPUSH
1771: LD_STRING %_cont
1773: PPUSH
1774: CALL_OW 340
// end ; end_of_file
1778: PPOPN 1
1780: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1781: LD_INT 0
1783: PPUSH
1784: PPUSH
// if exist_mode then
1785: LD_VAR 0 2
1789: IFFALSE 1835
// begin unit := CreateCharacter ( prefix & ident ) ;
1791: LD_ADDR_VAR 0 5
1795: PUSH
1796: LD_VAR 0 3
1800: PUSH
1801: LD_VAR 0 1
1805: STR
1806: PPUSH
1807: CALL_OW 34
1811: ST_TO_ADDR
// if unit then
1812: LD_VAR 0 5
1816: IFFALSE 1833
// DeleteCharacters ( prefix & ident ) ;
1818: LD_VAR 0 3
1822: PUSH
1823: LD_VAR 0 1
1827: STR
1828: PPUSH
1829: CALL_OW 40
// end else
1833: GO 1850
// unit := NewCharacter ( ident ) ;
1835: LD_ADDR_VAR 0 5
1839: PUSH
1840: LD_VAR 0 1
1844: PPUSH
1845: CALL_OW 25
1849: ST_TO_ADDR
// result := unit ;
1850: LD_ADDR_VAR 0 4
1854: PUSH
1855: LD_VAR 0 5
1859: ST_TO_ADDR
// end ;
1860: LD_VAR 0 4
1864: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1865: LD_INT 0
1867: PPUSH
1868: PPUSH
// if not side or not nation then
1869: LD_VAR 0 1
1873: NOT
1874: PUSH
1875: LD_VAR 0 2
1879: NOT
1880: OR
1881: IFFALSE 1885
// exit ;
1883: GO 2653
// case nation of nation_american :
1885: LD_VAR 0 2
1889: PUSH
1890: LD_INT 1
1892: DOUBLE
1893: EQUAL
1894: IFTRUE 1898
1896: GO 2112
1898: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1899: LD_ADDR_VAR 0 4
1903: PUSH
1904: LD_INT 35
1906: PUSH
1907: LD_INT 45
1909: PUSH
1910: LD_INT 46
1912: PUSH
1913: LD_INT 47
1915: PUSH
1916: LD_INT 82
1918: PUSH
1919: LD_INT 83
1921: PUSH
1922: LD_INT 84
1924: PUSH
1925: LD_INT 85
1927: PUSH
1928: LD_INT 86
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 6
1939: PUSH
1940: LD_INT 15
1942: PUSH
1943: LD_INT 16
1945: PUSH
1946: LD_INT 7
1948: PUSH
1949: LD_INT 12
1951: PUSH
1952: LD_INT 13
1954: PUSH
1955: LD_INT 10
1957: PUSH
1958: LD_INT 14
1960: PUSH
1961: LD_INT 20
1963: PUSH
1964: LD_INT 21
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 25
1972: PUSH
1973: LD_INT 32
1975: PUSH
1976: LD_INT 27
1978: PUSH
1979: LD_INT 36
1981: PUSH
1982: LD_INT 69
1984: PUSH
1985: LD_INT 39
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 40
1993: PUSH
1994: LD_INT 48
1996: PUSH
1997: LD_INT 49
1999: PUSH
2000: LD_INT 50
2002: PUSH
2003: LD_INT 51
2005: PUSH
2006: LD_INT 52
2008: PUSH
2009: LD_INT 53
2011: PUSH
2012: LD_INT 54
2014: PUSH
2015: LD_INT 55
2017: PUSH
2018: LD_INT 56
2020: PUSH
2021: LD_INT 57
2023: PUSH
2024: LD_INT 58
2026: PUSH
2027: LD_INT 59
2029: PUSH
2030: LD_INT 60
2032: PUSH
2033: LD_INT 61
2035: PUSH
2036: LD_INT 62
2038: PUSH
2039: LD_INT 80
2041: PUSH
2042: LD_INT 82
2044: PUSH
2045: LD_INT 83
2047: PUSH
2048: LD_INT 84
2050: PUSH
2051: LD_INT 85
2053: PUSH
2054: LD_INT 86
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: ST_TO_ADDR
2110: GO 2577
2112: LD_INT 2
2114: DOUBLE
2115: EQUAL
2116: IFTRUE 2120
2118: GO 2346
2120: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2121: LD_ADDR_VAR 0 4
2125: PUSH
2126: LD_INT 35
2128: PUSH
2129: LD_INT 45
2131: PUSH
2132: LD_INT 46
2134: PUSH
2135: LD_INT 47
2137: PUSH
2138: LD_INT 82
2140: PUSH
2141: LD_INT 83
2143: PUSH
2144: LD_INT 84
2146: PUSH
2147: LD_INT 85
2149: PUSH
2150: LD_INT 87
2152: PUSH
2153: LD_INT 70
2155: PUSH
2156: LD_INT 1
2158: PUSH
2159: LD_INT 11
2161: PUSH
2162: LD_INT 3
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: LD_INT 5
2170: PUSH
2171: LD_INT 6
2173: PUSH
2174: LD_INT 15
2176: PUSH
2177: LD_INT 18
2179: PUSH
2180: LD_INT 7
2182: PUSH
2183: LD_INT 17
2185: PUSH
2186: LD_INT 8
2188: PUSH
2189: LD_INT 20
2191: PUSH
2192: LD_INT 21
2194: PUSH
2195: LD_INT 22
2197: PUSH
2198: LD_INT 72
2200: PUSH
2201: LD_INT 26
2203: PUSH
2204: LD_INT 69
2206: PUSH
2207: LD_INT 39
2209: PUSH
2210: LD_INT 40
2212: PUSH
2213: LD_INT 41
2215: PUSH
2216: LD_INT 42
2218: PUSH
2219: LD_INT 43
2221: PUSH
2222: LD_INT 48
2224: PUSH
2225: LD_INT 49
2227: PUSH
2228: LD_INT 50
2230: PUSH
2231: LD_INT 51
2233: PUSH
2234: LD_INT 52
2236: PUSH
2237: LD_INT 53
2239: PUSH
2240: LD_INT 54
2242: PUSH
2243: LD_INT 55
2245: PUSH
2246: LD_INT 56
2248: PUSH
2249: LD_INT 60
2251: PUSH
2252: LD_INT 61
2254: PUSH
2255: LD_INT 62
2257: PUSH
2258: LD_INT 66
2260: PUSH
2261: LD_INT 67
2263: PUSH
2264: LD_INT 68
2266: PUSH
2267: LD_INT 81
2269: PUSH
2270: LD_INT 82
2272: PUSH
2273: LD_INT 83
2275: PUSH
2276: LD_INT 84
2278: PUSH
2279: LD_INT 85
2281: PUSH
2282: LD_INT 87
2284: PUSH
2285: LD_INT 88
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: ST_TO_ADDR
2344: GO 2577
2346: LD_INT 3
2348: DOUBLE
2349: EQUAL
2350: IFTRUE 2354
2352: GO 2576
2354: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2355: LD_ADDR_VAR 0 4
2359: PUSH
2360: LD_INT 46
2362: PUSH
2363: LD_INT 47
2365: PUSH
2366: LD_INT 1
2368: PUSH
2369: LD_INT 2
2371: PUSH
2372: LD_INT 82
2374: PUSH
2375: LD_INT 83
2377: PUSH
2378: LD_INT 84
2380: PUSH
2381: LD_INT 85
2383: PUSH
2384: LD_INT 86
2386: PUSH
2387: LD_INT 11
2389: PUSH
2390: LD_INT 9
2392: PUSH
2393: LD_INT 20
2395: PUSH
2396: LD_INT 19
2398: PUSH
2399: LD_INT 21
2401: PUSH
2402: LD_INT 24
2404: PUSH
2405: LD_INT 22
2407: PUSH
2408: LD_INT 25
2410: PUSH
2411: LD_INT 28
2413: PUSH
2414: LD_INT 29
2416: PUSH
2417: LD_INT 30
2419: PUSH
2420: LD_INT 31
2422: PUSH
2423: LD_INT 37
2425: PUSH
2426: LD_INT 38
2428: PUSH
2429: LD_INT 32
2431: PUSH
2432: LD_INT 27
2434: PUSH
2435: LD_INT 33
2437: PUSH
2438: LD_INT 69
2440: PUSH
2441: LD_INT 39
2443: PUSH
2444: LD_INT 34
2446: PUSH
2447: LD_INT 40
2449: PUSH
2450: LD_INT 71
2452: PUSH
2453: LD_INT 23
2455: PUSH
2456: LD_INT 44
2458: PUSH
2459: LD_INT 48
2461: PUSH
2462: LD_INT 49
2464: PUSH
2465: LD_INT 50
2467: PUSH
2468: LD_INT 51
2470: PUSH
2471: LD_INT 52
2473: PUSH
2474: LD_INT 53
2476: PUSH
2477: LD_INT 54
2479: PUSH
2480: LD_INT 55
2482: PUSH
2483: LD_INT 56
2485: PUSH
2486: LD_INT 57
2488: PUSH
2489: LD_INT 58
2491: PUSH
2492: LD_INT 59
2494: PUSH
2495: LD_INT 63
2497: PUSH
2498: LD_INT 64
2500: PUSH
2501: LD_INT 65
2503: PUSH
2504: LD_INT 82
2506: PUSH
2507: LD_INT 83
2509: PUSH
2510: LD_INT 84
2512: PUSH
2513: LD_INT 85
2515: PUSH
2516: LD_INT 86
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: ST_TO_ADDR
2574: GO 2577
2576: POP
// if state > - 1 and state < 3 then
2577: LD_VAR 0 3
2581: PUSH
2582: LD_INT 1
2584: NEG
2585: GREATER
2586: PUSH
2587: LD_VAR 0 3
2591: PUSH
2592: LD_INT 3
2594: LESS
2595: AND
2596: IFFALSE 2653
// for i in result do
2598: LD_ADDR_VAR 0 5
2602: PUSH
2603: LD_VAR 0 4
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2651
// if GetTech ( i , side ) <> state then
2611: LD_VAR 0 5
2615: PPUSH
2616: LD_VAR 0 1
2620: PPUSH
2621: CALL_OW 321
2625: PUSH
2626: LD_VAR 0 3
2630: NONEQUAL
2631: IFFALSE 2649
// result := result diff i ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 4
2642: PUSH
2643: LD_VAR 0 5
2647: DIFF
2648: ST_TO_ADDR
2649: GO 2608
2651: POP
2652: POP
// end ;
2653: LD_VAR 0 4
2657: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2658: LD_INT 0
2660: PPUSH
2661: PPUSH
2662: PPUSH
// result := true ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2671: LD_ADDR_VAR 0 5
2675: PUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: CALL_OW 480
2685: ST_TO_ADDR
// if not tmp then
2686: LD_VAR 0 5
2690: NOT
2691: IFFALSE 2695
// exit ;
2693: GO 2744
// for i in tmp do
2695: LD_ADDR_VAR 0 4
2699: PUSH
2700: LD_VAR 0 5
2704: PUSH
2705: FOR_IN
2706: IFFALSE 2742
// if GetTech ( i , side ) <> state_researched then
2708: LD_VAR 0 4
2712: PPUSH
2713: LD_VAR 0 1
2717: PPUSH
2718: CALL_OW 321
2722: PUSH
2723: LD_INT 2
2725: NONEQUAL
2726: IFFALSE 2740
// begin result := false ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: LD_INT 0
2735: ST_TO_ADDR
// exit ;
2736: POP
2737: POP
2738: GO 2744
// end ;
2740: GO 2705
2742: POP
2743: POP
// end ;
2744: LD_VAR 0 3
2748: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2749: LD_INT 0
2751: PPUSH
2752: PPUSH
2753: PPUSH
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
2758: PPUSH
2759: PPUSH
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2764: LD_VAR 0 1
2768: NOT
2769: PUSH
2770: LD_VAR 0 1
2774: PPUSH
2775: CALL_OW 257
2779: PUSH
2780: LD_INT 9
2782: NONEQUAL
2783: OR
2784: IFFALSE 2788
// exit ;
2786: GO 3361
// side := GetSide ( unit ) ;
2788: LD_ADDR_VAR 0 9
2792: PUSH
2793: LD_VAR 0 1
2797: PPUSH
2798: CALL_OW 255
2802: ST_TO_ADDR
// tech_space := tech_spacanom ;
2803: LD_ADDR_VAR 0 12
2807: PUSH
2808: LD_INT 29
2810: ST_TO_ADDR
// tech_time := tech_taurad ;
2811: LD_ADDR_VAR 0 13
2815: PUSH
2816: LD_INT 28
2818: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2819: LD_ADDR_VAR 0 11
2823: PUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL_OW 310
2833: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2834: LD_VAR 0 11
2838: PPUSH
2839: CALL_OW 247
2843: PUSH
2844: LD_INT 2
2846: EQUAL
2847: IFFALSE 2851
// exit ;
2849: GO 3361
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2851: LD_ADDR_VAR 0 8
2855: PUSH
2856: LD_INT 81
2858: PUSH
2859: LD_VAR 0 9
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 3
2870: PUSH
2871: LD_INT 21
2873: PUSH
2874: LD_INT 3
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// if not tmp then
2894: LD_VAR 0 8
2898: NOT
2899: IFFALSE 2903
// exit ;
2901: GO 3361
// if in_unit then
2903: LD_VAR 0 11
2907: IFFALSE 2931
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2909: LD_ADDR_VAR 0 10
2913: PUSH
2914: LD_VAR 0 8
2918: PPUSH
2919: LD_VAR 0 11
2923: PPUSH
2924: CALL_OW 74
2928: ST_TO_ADDR
2929: GO 2951
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2931: LD_ADDR_VAR 0 10
2935: PUSH
2936: LD_VAR 0 8
2940: PPUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: CALL_OW 74
2950: ST_TO_ADDR
// if not enemy then
2951: LD_VAR 0 10
2955: NOT
2956: IFFALSE 2960
// exit ;
2958: GO 3361
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2960: LD_VAR 0 11
2964: PUSH
2965: LD_VAR 0 11
2969: PPUSH
2970: LD_VAR 0 10
2974: PPUSH
2975: CALL_OW 296
2979: PUSH
2980: LD_INT 13
2982: GREATER
2983: AND
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: LD_VAR 0 10
2994: PPUSH
2995: CALL_OW 296
2999: PUSH
3000: LD_INT 12
3002: GREATER
3003: OR
3004: IFFALSE 3008
// exit ;
3006: GO 3361
// missile := [ 1 ] ;
3008: LD_ADDR_VAR 0 14
3012: PUSH
3013: LD_INT 1
3015: PUSH
3016: EMPTY
3017: LIST
3018: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3019: LD_VAR 0 9
3023: PPUSH
3024: LD_VAR 0 12
3028: PPUSH
3029: CALL_OW 325
3033: IFFALSE 3062
// missile := Replace ( missile , missile + 1 , 2 ) ;
3035: LD_ADDR_VAR 0 14
3039: PUSH
3040: LD_VAR 0 14
3044: PPUSH
3045: LD_VAR 0 14
3049: PUSH
3050: LD_INT 1
3052: PLUS
3053: PPUSH
3054: LD_INT 2
3056: PPUSH
3057: CALL_OW 1
3061: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3062: LD_VAR 0 9
3066: PPUSH
3067: LD_VAR 0 13
3071: PPUSH
3072: CALL_OW 325
3076: PUSH
3077: LD_VAR 0 10
3081: PPUSH
3082: CALL_OW 255
3086: PPUSH
3087: LD_VAR 0 13
3091: PPUSH
3092: CALL_OW 325
3096: NOT
3097: AND
3098: IFFALSE 3127
// missile := Replace ( missile , missile + 1 , 3 ) ;
3100: LD_ADDR_VAR 0 14
3104: PUSH
3105: LD_VAR 0 14
3109: PPUSH
3110: LD_VAR 0 14
3114: PUSH
3115: LD_INT 1
3117: PLUS
3118: PPUSH
3119: LD_INT 3
3121: PPUSH
3122: CALL_OW 1
3126: ST_TO_ADDR
// if missile < 2 then
3127: LD_VAR 0 14
3131: PUSH
3132: LD_INT 2
3134: LESS
3135: IFFALSE 3139
// exit ;
3137: GO 3361
// x := GetX ( enemy ) ;
3139: LD_ADDR_VAR 0 4
3143: PUSH
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 250
3153: ST_TO_ADDR
// y := GetY ( enemy ) ;
3154: LD_ADDR_VAR 0 5
3158: PUSH
3159: LD_VAR 0 10
3163: PPUSH
3164: CALL_OW 251
3168: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3169: LD_ADDR_VAR 0 6
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: LD_INT 1
3181: NEG
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: CALL_OW 12
3190: PLUS
3191: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3192: LD_ADDR_VAR 0 7
3196: PUSH
3197: LD_VAR 0 5
3201: PUSH
3202: LD_INT 1
3204: NEG
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: CALL_OW 12
3213: PLUS
3214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3215: LD_VAR 0 6
3219: PPUSH
3220: LD_VAR 0 7
3224: PPUSH
3225: CALL_OW 488
3229: NOT
3230: IFFALSE 3252
// begin _x := x ;
3232: LD_ADDR_VAR 0 6
3236: PUSH
3237: LD_VAR 0 4
3241: ST_TO_ADDR
// _y := y ;
3242: LD_ADDR_VAR 0 7
3246: PUSH
3247: LD_VAR 0 5
3251: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3252: LD_ADDR_VAR 0 3
3256: PUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_VAR 0 14
3264: PPUSH
3265: CALL_OW 12
3269: ST_TO_ADDR
// case i of 1 :
3270: LD_VAR 0 3
3274: PUSH
3275: LD_INT 1
3277: DOUBLE
3278: EQUAL
3279: IFTRUE 3283
3281: GO 3300
3283: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 10
3293: PPUSH
3294: CALL_OW 115
3298: GO 3361
3300: LD_INT 2
3302: DOUBLE
3303: EQUAL
3304: IFTRUE 3308
3306: GO 3330
3308: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3309: LD_VAR 0 1
3313: PPUSH
3314: LD_VAR 0 6
3318: PPUSH
3319: LD_VAR 0 7
3323: PPUSH
3324: CALL_OW 153
3328: GO 3361
3330: LD_INT 3
3332: DOUBLE
3333: EQUAL
3334: IFTRUE 3338
3336: GO 3360
3338: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_VAR 0 6
3348: PPUSH
3349: LD_VAR 0 7
3353: PPUSH
3354: CALL_OW 154
3358: GO 3361
3360: POP
// end ;
3361: LD_VAR 0 2
3365: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3366: LD_INT 0
3368: PPUSH
3369: PPUSH
3370: PPUSH
3371: PPUSH
3372: PPUSH
3373: PPUSH
// if not unit or not building then
3374: LD_VAR 0 1
3378: NOT
3379: PUSH
3380: LD_VAR 0 2
3384: NOT
3385: OR
3386: IFFALSE 3390
// exit ;
3388: GO 3548
// x := GetX ( building ) ;
3390: LD_ADDR_VAR 0 5
3394: PUSH
3395: LD_VAR 0 2
3399: PPUSH
3400: CALL_OW 250
3404: ST_TO_ADDR
// y := GetY ( building ) ;
3405: LD_ADDR_VAR 0 6
3409: PUSH
3410: LD_VAR 0 2
3414: PPUSH
3415: CALL_OW 251
3419: ST_TO_ADDR
// for i = 0 to 5 do
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: DOUBLE
3426: LD_INT 0
3428: DEC
3429: ST_TO_ADDR
3430: LD_INT 5
3432: PUSH
3433: FOR_TO
3434: IFFALSE 3546
// begin _x := ShiftX ( x , i , 3 ) ;
3436: LD_ADDR_VAR 0 7
3440: PUSH
3441: LD_VAR 0 5
3445: PPUSH
3446: LD_VAR 0 4
3450: PPUSH
3451: LD_INT 3
3453: PPUSH
3454: CALL_OW 272
3458: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3459: LD_ADDR_VAR 0 8
3463: PUSH
3464: LD_VAR 0 6
3468: PPUSH
3469: LD_VAR 0 4
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: CALL_OW 273
3481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3482: LD_VAR 0 7
3486: PPUSH
3487: LD_VAR 0 8
3491: PPUSH
3492: CALL_OW 488
3496: NOT
3497: IFFALSE 3501
// continue ;
3499: GO 3433
// if HexInfo ( _x , _y ) = 0 then
3501: LD_VAR 0 7
3505: PPUSH
3506: LD_VAR 0 8
3510: PPUSH
3511: CALL_OW 428
3515: PUSH
3516: LD_INT 0
3518: EQUAL
3519: IFFALSE 3544
// begin ComMoveXY ( unit , _x , _y ) ;
3521: LD_VAR 0 1
3525: PPUSH
3526: LD_VAR 0 7
3530: PPUSH
3531: LD_VAR 0 8
3535: PPUSH
3536: CALL_OW 111
// exit ;
3540: POP
3541: POP
3542: GO 3548
// end ; end ;
3544: GO 3433
3546: POP
3547: POP
// end ;
3548: LD_VAR 0 3
3552: RET
// export function ScanBase ( side , base_area ) ; begin
3553: LD_INT 0
3555: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3556: LD_ADDR_VAR 0 3
3560: PUSH
3561: LD_VAR 0 2
3565: PPUSH
3566: LD_INT 81
3568: PUSH
3569: LD_VAR 0 1
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 70
3582: ST_TO_ADDR
// end ;
3583: LD_VAR 0 3
3587: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3588: LD_INT 0
3590: PPUSH
3591: PPUSH
3592: PPUSH
3593: PPUSH
// result := false ;
3594: LD_ADDR_VAR 0 2
3598: PUSH
3599: LD_INT 0
3601: ST_TO_ADDR
// side := GetSide ( unit ) ;
3602: LD_ADDR_VAR 0 3
3606: PUSH
3607: LD_VAR 0 1
3611: PPUSH
3612: CALL_OW 255
3616: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3617: LD_ADDR_VAR 0 4
3621: PUSH
3622: LD_VAR 0 1
3626: PPUSH
3627: CALL_OW 248
3631: ST_TO_ADDR
// case nat of 1 :
3632: LD_VAR 0 4
3636: PUSH
3637: LD_INT 1
3639: DOUBLE
3640: EQUAL
3641: IFTRUE 3645
3643: GO 3656
3645: POP
// tech := tech_lassight ; 2 :
3646: LD_ADDR_VAR 0 5
3650: PUSH
3651: LD_INT 12
3653: ST_TO_ADDR
3654: GO 3695
3656: LD_INT 2
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3675
3664: POP
// tech := tech_mortar ; 3 :
3665: LD_ADDR_VAR 0 5
3669: PUSH
3670: LD_INT 41
3672: ST_TO_ADDR
3673: GO 3695
3675: LD_INT 3
3677: DOUBLE
3678: EQUAL
3679: IFTRUE 3683
3681: GO 3694
3683: POP
// tech := tech_bazooka ; end ;
3684: LD_ADDR_VAR 0 5
3688: PUSH
3689: LD_INT 44
3691: ST_TO_ADDR
3692: GO 3695
3694: POP
// if Researched ( side , tech ) then
3695: LD_VAR 0 3
3699: PPUSH
3700: LD_VAR 0 5
3704: PPUSH
3705: CALL_OW 325
3709: IFFALSE 3736
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3711: LD_ADDR_VAR 0 2
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 8
3721: PUSH
3722: LD_INT 9
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: PUSH
3730: LD_VAR 0 4
3734: ARRAY
3735: ST_TO_ADDR
// end ;
3736: LD_VAR 0 2
3740: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
// if not mines then
3746: LD_VAR 0 2
3750: NOT
3751: IFFALSE 3755
// exit ;
3753: GO 3899
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3755: LD_ADDR_VAR 0 5
3759: PUSH
3760: LD_INT 81
3762: PUSH
3763: LD_VAR 0 1
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: LD_INT 3
3774: PUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: ST_TO_ADDR
// for i in mines do
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_VAR 0 2
3807: PUSH
3808: FOR_IN
3809: IFFALSE 3897
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3811: LD_VAR 0 4
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: PPUSH
3820: LD_VAR 0 4
3824: PUSH
3825: LD_INT 2
3827: ARRAY
3828: PPUSH
3829: CALL_OW 458
3833: NOT
3834: IFFALSE 3838
// continue ;
3836: GO 3808
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3838: LD_VAR 0 4
3842: PUSH
3843: LD_INT 1
3845: ARRAY
3846: PPUSH
3847: LD_VAR 0 4
3851: PUSH
3852: LD_INT 2
3854: ARRAY
3855: PPUSH
3856: CALL_OW 428
3860: PUSH
3861: LD_VAR 0 5
3865: IN
3866: IFFALSE 3895
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3868: LD_VAR 0 4
3872: PUSH
3873: LD_INT 1
3875: ARRAY
3876: PPUSH
3877: LD_VAR 0 4
3881: PUSH
3882: LD_INT 2
3884: ARRAY
3885: PPUSH
3886: LD_VAR 0 1
3890: PPUSH
3891: CALL_OW 456
// end ;
3895: GO 3808
3897: POP
3898: POP
// end ;
3899: LD_VAR 0 3
3903: RET
// export function Count ( array ) ; begin
3904: LD_INT 0
3906: PPUSH
// result := array + 0 ;
3907: LD_ADDR_VAR 0 2
3911: PUSH
3912: LD_VAR 0 1
3916: PUSH
3917: LD_INT 0
3919: PLUS
3920: ST_TO_ADDR
// end ;
3921: LD_VAR 0 2
3925: RET
// export function IsEmpty ( building ) ; begin
3926: LD_INT 0
3928: PPUSH
// if not building then
3929: LD_VAR 0 1
3933: NOT
3934: IFFALSE 3938
// exit ;
3936: GO 3981
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3938: LD_ADDR_VAR 0 2
3942: PUSH
3943: LD_VAR 0 1
3947: PUSH
3948: LD_INT 22
3950: PUSH
3951: LD_VAR 0 1
3955: PPUSH
3956: CALL_OW 255
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_INT 58
3967: PUSH
3968: EMPTY
3969: LIST
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: IN
3980: ST_TO_ADDR
// end ;
3981: LD_VAR 0 2
3985: RET
// export function IsNotFull ( building ) ; var places ; begin
3986: LD_INT 0
3988: PPUSH
3989: PPUSH
// if not building then
3990: LD_VAR 0 1
3994: NOT
3995: IFFALSE 3999
// exit ;
3997: GO 4027
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 62
4014: PUSH
4015: EMPTY
4016: LIST
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PPUSH
4022: CALL_OW 72
4026: ST_TO_ADDR
// end ;
4027: LD_VAR 0 2
4031: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
// tmp := [ ] ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: EMPTY
4044: ST_TO_ADDR
// list := [ ] ;
4045: LD_ADDR_VAR 0 5
4049: PUSH
4050: EMPTY
4051: ST_TO_ADDR
// for i = 16 to 25 do
4052: LD_ADDR_VAR 0 4
4056: PUSH
4057: DOUBLE
4058: LD_INT 16
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 25
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4139
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4068: LD_ADDR_VAR 0 3
4072: PUSH
4073: LD_VAR 0 3
4077: PUSH
4078: LD_INT 22
4080: PUSH
4081: LD_VAR 0 1
4085: PPUSH
4086: CALL_OW 255
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_INT 91
4097: PUSH
4098: LD_VAR 0 1
4102: PUSH
4103: LD_INT 6
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: PUSH
4111: LD_INT 30
4113: PUSH
4114: LD_VAR 0 4
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: ADD
4136: ST_TO_ADDR
4137: GO 4065
4139: POP
4140: POP
// for i = 1 to tmp do
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: DOUBLE
4147: LD_INT 1
4149: DEC
4150: ST_TO_ADDR
4151: LD_VAR 0 3
4155: PUSH
4156: FOR_TO
4157: IFFALSE 4245
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4159: LD_ADDR_VAR 0 5
4163: PUSH
4164: LD_VAR 0 5
4168: PUSH
4169: LD_VAR 0 3
4173: PUSH
4174: LD_VAR 0 4
4178: ARRAY
4179: PPUSH
4180: CALL_OW 266
4184: PUSH
4185: LD_VAR 0 3
4189: PUSH
4190: LD_VAR 0 4
4194: ARRAY
4195: PPUSH
4196: CALL_OW 250
4200: PUSH
4201: LD_VAR 0 3
4205: PUSH
4206: LD_VAR 0 4
4210: ARRAY
4211: PPUSH
4212: CALL_OW 251
4216: PUSH
4217: LD_VAR 0 3
4221: PUSH
4222: LD_VAR 0 4
4226: ARRAY
4227: PPUSH
4228: CALL_OW 254
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: EMPTY
4240: LIST
4241: ADD
4242: ST_TO_ADDR
4243: GO 4156
4245: POP
4246: POP
// result := list ;
4247: LD_ADDR_VAR 0 2
4251: PUSH
4252: LD_VAR 0 5
4256: ST_TO_ADDR
// end ;
4257: LD_VAR 0 2
4261: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4262: LD_INT 0
4264: PPUSH
4265: PPUSH
4266: PPUSH
4267: PPUSH
4268: PPUSH
4269: PPUSH
4270: PPUSH
// if not factory then
4271: LD_VAR 0 1
4275: NOT
4276: IFFALSE 4280
// exit ;
4278: GO 4873
// if control = control_apeman then
4280: LD_VAR 0 4
4284: PUSH
4285: LD_INT 5
4287: EQUAL
4288: IFFALSE 4397
// begin tmp := UnitsInside ( factory ) ;
4290: LD_ADDR_VAR 0 8
4294: PUSH
4295: LD_VAR 0 1
4299: PPUSH
4300: CALL_OW 313
4304: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4305: LD_VAR 0 8
4309: PPUSH
4310: LD_INT 25
4312: PUSH
4313: LD_INT 12
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PPUSH
4320: CALL_OW 72
4324: NOT
4325: IFFALSE 4335
// control := control_manual ;
4327: LD_ADDR_VAR 0 4
4331: PUSH
4332: LD_INT 1
4334: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4335: LD_ADDR_VAR 0 8
4339: PUSH
4340: LD_VAR 0 1
4344: PPUSH
4345: CALL 4032 0 1
4349: ST_TO_ADDR
// if tmp then
4350: LD_VAR 0 8
4354: IFFALSE 4397
// begin for i in tmp do
4356: LD_ADDR_VAR 0 7
4360: PUSH
4361: LD_VAR 0 8
4365: PUSH
4366: FOR_IN
4367: IFFALSE 4395
// if i [ 1 ] = b_ext_radio then
4369: LD_VAR 0 7
4373: PUSH
4374: LD_INT 1
4376: ARRAY
4377: PUSH
4378: LD_INT 22
4380: EQUAL
4381: IFFALSE 4393
// begin control := control_remote ;
4383: LD_ADDR_VAR 0 4
4387: PUSH
4388: LD_INT 2
4390: ST_TO_ADDR
// break ;
4391: GO 4395
// end ;
4393: GO 4366
4395: POP
4396: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4397: LD_VAR 0 1
4401: PPUSH
4402: LD_VAR 0 2
4406: PPUSH
4407: LD_VAR 0 3
4411: PPUSH
4412: LD_VAR 0 4
4416: PPUSH
4417: LD_VAR 0 5
4421: PPUSH
4422: CALL_OW 448
4426: IFFALSE 4461
// begin result := [ chassis , engine , control , weapon ] ;
4428: LD_ADDR_VAR 0 6
4432: PUSH
4433: LD_VAR 0 2
4437: PUSH
4438: LD_VAR 0 3
4442: PUSH
4443: LD_VAR 0 4
4447: PUSH
4448: LD_VAR 0 5
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: ST_TO_ADDR
// exit ;
4459: GO 4873
// end ; _chassis := AvailableChassisList ( factory ) ;
4461: LD_ADDR_VAR 0 9
4465: PUSH
4466: LD_VAR 0 1
4470: PPUSH
4471: CALL_OW 475
4475: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4476: LD_ADDR_VAR 0 11
4480: PUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 476
4490: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4491: LD_ADDR_VAR 0 12
4495: PUSH
4496: LD_VAR 0 1
4500: PPUSH
4501: CALL_OW 477
4505: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4506: LD_ADDR_VAR 0 10
4510: PUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 478
4520: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4521: LD_VAR 0 9
4525: NOT
4526: PUSH
4527: LD_VAR 0 11
4531: NOT
4532: OR
4533: PUSH
4534: LD_VAR 0 12
4538: NOT
4539: OR
4540: PUSH
4541: LD_VAR 0 10
4545: NOT
4546: OR
4547: IFFALSE 4582
// begin result := [ chassis , engine , control , weapon ] ;
4549: LD_ADDR_VAR 0 6
4553: PUSH
4554: LD_VAR 0 2
4558: PUSH
4559: LD_VAR 0 3
4563: PUSH
4564: LD_VAR 0 4
4568: PUSH
4569: LD_VAR 0 5
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: ST_TO_ADDR
// exit ;
4580: GO 4873
// end ; if not chassis in _chassis then
4582: LD_VAR 0 2
4586: PUSH
4587: LD_VAR 0 9
4591: IN
4592: NOT
4593: IFFALSE 4619
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4595: LD_ADDR_VAR 0 2
4599: PUSH
4600: LD_VAR 0 9
4604: PUSH
4605: LD_INT 1
4607: PPUSH
4608: LD_VAR 0 9
4612: PPUSH
4613: CALL_OW 12
4617: ARRAY
4618: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4619: LD_VAR 0 2
4623: PPUSH
4624: LD_VAR 0 3
4628: PPUSH
4629: CALL 4878 0 2
4633: NOT
4634: IFFALSE 4693
// repeat engine := _engine [ 1 ] ;
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: LD_VAR 0 11
4645: PUSH
4646: LD_INT 1
4648: ARRAY
4649: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4650: LD_ADDR_VAR 0 11
4654: PUSH
4655: LD_VAR 0 11
4659: PPUSH
4660: LD_INT 1
4662: PPUSH
4663: CALL_OW 3
4667: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_VAR 0 3
4677: PPUSH
4678: CALL 4878 0 2
4682: PUSH
4683: LD_VAR 0 11
4687: PUSH
4688: EMPTY
4689: EQUAL
4690: OR
4691: IFFALSE 4636
// if not control in _control then
4693: LD_VAR 0 4
4697: PUSH
4698: LD_VAR 0 12
4702: IN
4703: NOT
4704: IFFALSE 4730
// control := _control [ rand ( 1 , _control ) ] ;
4706: LD_ADDR_VAR 0 4
4710: PUSH
4711: LD_VAR 0 12
4715: PUSH
4716: LD_INT 1
4718: PPUSH
4719: LD_VAR 0 12
4723: PPUSH
4724: CALL_OW 12
4728: ARRAY
4729: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4730: LD_VAR 0 2
4734: PPUSH
4735: LD_VAR 0 5
4739: PPUSH
4740: CALL 5098 0 2
4744: NOT
4745: IFFALSE 4804
// repeat weapon := _weapon [ 1 ] ;
4747: LD_ADDR_VAR 0 5
4751: PUSH
4752: LD_VAR 0 10
4756: PUSH
4757: LD_INT 1
4759: ARRAY
4760: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4761: LD_ADDR_VAR 0 10
4765: PUSH
4766: LD_VAR 0 10
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 3
4778: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4779: LD_VAR 0 2
4783: PPUSH
4784: LD_VAR 0 5
4788: PPUSH
4789: CALL 5098 0 2
4793: PUSH
4794: LD_VAR 0 10
4798: PUSH
4799: EMPTY
4800: EQUAL
4801: OR
4802: IFFALSE 4747
// result := [ ] ;
4804: LD_ADDR_VAR 0 6
4808: PUSH
4809: EMPTY
4810: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4811: LD_VAR 0 1
4815: PPUSH
4816: LD_VAR 0 2
4820: PPUSH
4821: LD_VAR 0 3
4825: PPUSH
4826: LD_VAR 0 4
4830: PPUSH
4831: LD_VAR 0 5
4835: PPUSH
4836: CALL_OW 448
4840: IFFALSE 4873
// result := [ chassis , engine , control , weapon ] ;
4842: LD_ADDR_VAR 0 6
4846: PUSH
4847: LD_VAR 0 2
4851: PUSH
4852: LD_VAR 0 3
4856: PUSH
4857: LD_VAR 0 4
4861: PUSH
4862: LD_VAR 0 5
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: ST_TO_ADDR
// end ;
4873: LD_VAR 0 6
4877: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4878: LD_INT 0
4880: PPUSH
// if not chassis or not engine then
4881: LD_VAR 0 1
4885: NOT
4886: PUSH
4887: LD_VAR 0 2
4891: NOT
4892: OR
4893: IFFALSE 4897
// exit ;
4895: GO 5093
// case engine of engine_solar :
4897: LD_VAR 0 2
4901: PUSH
4902: LD_INT 2
4904: DOUBLE
4905: EQUAL
4906: IFTRUE 4910
4908: GO 4948
4910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4911: LD_ADDR_VAR 0 3
4915: PUSH
4916: LD_INT 11
4918: PUSH
4919: LD_INT 12
4921: PUSH
4922: LD_INT 13
4924: PUSH
4925: LD_INT 14
4927: PUSH
4928: LD_INT 1
4930: PUSH
4931: LD_INT 2
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: ST_TO_ADDR
4946: GO 5077
4948: LD_INT 1
4950: DOUBLE
4951: EQUAL
4952: IFTRUE 4956
4954: GO 5018
4956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_INT 11
4964: PUSH
4965: LD_INT 12
4967: PUSH
4968: LD_INT 13
4970: PUSH
4971: LD_INT 14
4973: PUSH
4974: LD_INT 1
4976: PUSH
4977: LD_INT 2
4979: PUSH
4980: LD_INT 3
4982: PUSH
4983: LD_INT 4
4985: PUSH
4986: LD_INT 5
4988: PUSH
4989: LD_INT 21
4991: PUSH
4992: LD_INT 23
4994: PUSH
4995: LD_INT 22
4997: PUSH
4998: LD_INT 24
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: ST_TO_ADDR
5016: GO 5077
5018: LD_INT 3
5020: DOUBLE
5021: EQUAL
5022: IFTRUE 5026
5024: GO 5076
5026: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: LD_INT 13
5034: PUSH
5035: LD_INT 14
5037: PUSH
5038: LD_INT 2
5040: PUSH
5041: LD_INT 3
5043: PUSH
5044: LD_INT 4
5046: PUSH
5047: LD_INT 5
5049: PUSH
5050: LD_INT 21
5052: PUSH
5053: LD_INT 22
5055: PUSH
5056: LD_INT 23
5058: PUSH
5059: LD_INT 24
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: ST_TO_ADDR
5074: GO 5077
5076: POP
// result := ( chassis in result ) ;
5077: LD_ADDR_VAR 0 3
5081: PUSH
5082: LD_VAR 0 1
5086: PUSH
5087: LD_VAR 0 3
5091: IN
5092: ST_TO_ADDR
// end ;
5093: LD_VAR 0 3
5097: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5098: LD_INT 0
5100: PPUSH
// if not chassis or not weapon then
5101: LD_VAR 0 1
5105: NOT
5106: PUSH
5107: LD_VAR 0 2
5111: NOT
5112: OR
5113: IFFALSE 5117
// exit ;
5115: GO 6177
// case weapon of us_machine_gun :
5117: LD_VAR 0 2
5121: PUSH
5122: LD_INT 2
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5130
5128: GO 5160
5130: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5131: LD_ADDR_VAR 0 3
5135: PUSH
5136: LD_INT 1
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: LD_INT 3
5144: PUSH
5145: LD_INT 4
5147: PUSH
5148: LD_INT 5
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: ST_TO_ADDR
5158: GO 6161
5160: LD_INT 3
5162: DOUBLE
5163: EQUAL
5164: IFTRUE 5168
5166: GO 5198
5168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: LD_INT 1
5176: PUSH
5177: LD_INT 2
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: LD_INT 4
5185: PUSH
5186: LD_INT 5
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: ST_TO_ADDR
5196: GO 6161
5198: LD_INT 11
5200: DOUBLE
5201: EQUAL
5202: IFTRUE 5206
5204: GO 5236
5206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5207: LD_ADDR_VAR 0 3
5211: PUSH
5212: LD_INT 1
5214: PUSH
5215: LD_INT 2
5217: PUSH
5218: LD_INT 3
5220: PUSH
5221: LD_INT 4
5223: PUSH
5224: LD_INT 5
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: ST_TO_ADDR
5234: GO 6161
5236: LD_INT 4
5238: DOUBLE
5239: EQUAL
5240: IFTRUE 5244
5242: GO 5270
5244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: LD_INT 3
5255: PUSH
5256: LD_INT 4
5258: PUSH
5259: LD_INT 5
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: ST_TO_ADDR
5268: GO 6161
5270: LD_INT 5
5272: DOUBLE
5273: EQUAL
5274: IFTRUE 5278
5276: GO 5304
5278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: LD_INT 2
5286: PUSH
5287: LD_INT 3
5289: PUSH
5290: LD_INT 4
5292: PUSH
5293: LD_INT 5
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: ST_TO_ADDR
5302: GO 6161
5304: LD_INT 9
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5338
5312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_INT 2
5320: PUSH
5321: LD_INT 3
5323: PUSH
5324: LD_INT 4
5326: PUSH
5327: LD_INT 5
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: ST_TO_ADDR
5336: GO 6161
5338: LD_INT 7
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5346
5344: GO 5372
5346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: LD_INT 2
5354: PUSH
5355: LD_INT 3
5357: PUSH
5358: LD_INT 4
5360: PUSH
5361: LD_INT 5
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: ST_TO_ADDR
5370: GO 6161
5372: LD_INT 12
5374: DOUBLE
5375: EQUAL
5376: IFTRUE 5380
5378: GO 5406
5380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5381: LD_ADDR_VAR 0 3
5385: PUSH
5386: LD_INT 2
5388: PUSH
5389: LD_INT 3
5391: PUSH
5392: LD_INT 4
5394: PUSH
5395: LD_INT 5
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: ST_TO_ADDR
5404: GO 6161
5406: LD_INT 13
5408: DOUBLE
5409: EQUAL
5410: IFTRUE 5414
5412: GO 5440
5414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5415: LD_ADDR_VAR 0 3
5419: PUSH
5420: LD_INT 2
5422: PUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 4
5428: PUSH
5429: LD_INT 5
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: ST_TO_ADDR
5438: GO 6161
5440: LD_INT 14
5442: DOUBLE
5443: EQUAL
5444: IFTRUE 5448
5446: GO 5466
5448: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5449: LD_ADDR_VAR 0 3
5453: PUSH
5454: LD_INT 4
5456: PUSH
5457: LD_INT 5
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
5464: GO 6161
5466: LD_INT 6
5468: DOUBLE
5469: EQUAL
5470: IFTRUE 5474
5472: GO 5492
5474: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: LD_INT 4
5482: PUSH
5483: LD_INT 5
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: ST_TO_ADDR
5490: GO 6161
5492: LD_INT 10
5494: DOUBLE
5495: EQUAL
5496: IFTRUE 5500
5498: GO 5518
5500: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5501: LD_ADDR_VAR 0 3
5505: PUSH
5506: LD_INT 4
5508: PUSH
5509: LD_INT 5
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: ST_TO_ADDR
5516: GO 6161
5518: LD_INT 22
5520: DOUBLE
5521: EQUAL
5522: IFTRUE 5526
5524: GO 5552
5526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5527: LD_ADDR_VAR 0 3
5531: PUSH
5532: LD_INT 11
5534: PUSH
5535: LD_INT 12
5537: PUSH
5538: LD_INT 13
5540: PUSH
5541: LD_INT 14
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: ST_TO_ADDR
5550: GO 6161
5552: LD_INT 23
5554: DOUBLE
5555: EQUAL
5556: IFTRUE 5560
5558: GO 5586
5560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5561: LD_ADDR_VAR 0 3
5565: PUSH
5566: LD_INT 11
5568: PUSH
5569: LD_INT 12
5571: PUSH
5572: LD_INT 13
5574: PUSH
5575: LD_INT 14
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: ST_TO_ADDR
5584: GO 6161
5586: LD_INT 24
5588: DOUBLE
5589: EQUAL
5590: IFTRUE 5594
5592: GO 5620
5594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: LD_INT 11
5602: PUSH
5603: LD_INT 12
5605: PUSH
5606: LD_INT 13
5608: PUSH
5609: LD_INT 14
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: ST_TO_ADDR
5618: GO 6161
5620: LD_INT 30
5622: DOUBLE
5623: EQUAL
5624: IFTRUE 5628
5626: GO 5654
5628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_INT 11
5636: PUSH
5637: LD_INT 12
5639: PUSH
5640: LD_INT 13
5642: PUSH
5643: LD_INT 14
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: ST_TO_ADDR
5652: GO 6161
5654: LD_INT 25
5656: DOUBLE
5657: EQUAL
5658: IFTRUE 5662
5660: GO 5680
5662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5663: LD_ADDR_VAR 0 3
5667: PUSH
5668: LD_INT 13
5670: PUSH
5671: LD_INT 14
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: ST_TO_ADDR
5678: GO 6161
5680: LD_INT 27
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5706
5688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5689: LD_ADDR_VAR 0 3
5693: PUSH
5694: LD_INT 13
5696: PUSH
5697: LD_INT 14
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: ST_TO_ADDR
5704: GO 6161
5706: LD_INT 92
5708: DOUBLE
5709: EQUAL
5710: IFTRUE 5714
5712: GO 5740
5714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5715: LD_ADDR_VAR 0 3
5719: PUSH
5720: LD_INT 11
5722: PUSH
5723: LD_INT 12
5725: PUSH
5726: LD_INT 13
5728: PUSH
5729: LD_INT 14
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: ST_TO_ADDR
5738: GO 6161
5740: LD_INT 28
5742: DOUBLE
5743: EQUAL
5744: IFTRUE 5748
5746: GO 5766
5748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_INT 13
5756: PUSH
5757: LD_INT 14
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: ST_TO_ADDR
5764: GO 6161
5766: LD_INT 29
5768: DOUBLE
5769: EQUAL
5770: IFTRUE 5774
5772: GO 5792
5774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: LD_INT 13
5782: PUSH
5783: LD_INT 14
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: ST_TO_ADDR
5790: GO 6161
5792: LD_INT 31
5794: DOUBLE
5795: EQUAL
5796: IFTRUE 5800
5798: GO 5818
5800: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5801: LD_ADDR_VAR 0 3
5805: PUSH
5806: LD_INT 13
5808: PUSH
5809: LD_INT 14
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: ST_TO_ADDR
5816: GO 6161
5818: LD_INT 26
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5826
5824: GO 5844
5826: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: LD_INT 13
5834: PUSH
5835: LD_INT 14
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: ST_TO_ADDR
5842: GO 6161
5844: LD_INT 42
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5878
5852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5853: LD_ADDR_VAR 0 3
5857: PUSH
5858: LD_INT 21
5860: PUSH
5861: LD_INT 22
5863: PUSH
5864: LD_INT 23
5866: PUSH
5867: LD_INT 24
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: ST_TO_ADDR
5876: GO 6161
5878: LD_INT 43
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5912
5886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5887: LD_ADDR_VAR 0 3
5891: PUSH
5892: LD_INT 21
5894: PUSH
5895: LD_INT 22
5897: PUSH
5898: LD_INT 23
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: ST_TO_ADDR
5910: GO 6161
5912: LD_INT 44
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5946
5920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5921: LD_ADDR_VAR 0 3
5925: PUSH
5926: LD_INT 21
5928: PUSH
5929: LD_INT 22
5931: PUSH
5932: LD_INT 23
5934: PUSH
5935: LD_INT 24
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: ST_TO_ADDR
5944: GO 6161
5946: LD_INT 45
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5954
5952: GO 5980
5954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5955: LD_ADDR_VAR 0 3
5959: PUSH
5960: LD_INT 21
5962: PUSH
5963: LD_INT 22
5965: PUSH
5966: LD_INT 23
5968: PUSH
5969: LD_INT 24
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: ST_TO_ADDR
5978: GO 6161
5980: LD_INT 49
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 6014
5988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5989: LD_ADDR_VAR 0 3
5993: PUSH
5994: LD_INT 21
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_INT 23
6002: PUSH
6003: LD_INT 24
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: ST_TO_ADDR
6012: GO 6161
6014: LD_INT 51
6016: DOUBLE
6017: EQUAL
6018: IFTRUE 6022
6020: GO 6048
6022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6023: LD_ADDR_VAR 0 3
6027: PUSH
6028: LD_INT 21
6030: PUSH
6031: LD_INT 22
6033: PUSH
6034: LD_INT 23
6036: PUSH
6037: LD_INT 24
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: ST_TO_ADDR
6046: GO 6161
6048: LD_INT 52
6050: DOUBLE
6051: EQUAL
6052: IFTRUE 6056
6054: GO 6082
6056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6057: LD_ADDR_VAR 0 3
6061: PUSH
6062: LD_INT 21
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 23
6070: PUSH
6071: LD_INT 24
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: ST_TO_ADDR
6080: GO 6161
6082: LD_INT 53
6084: DOUBLE
6085: EQUAL
6086: IFTRUE 6090
6088: GO 6108
6090: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6091: LD_ADDR_VAR 0 3
6095: PUSH
6096: LD_INT 23
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: ST_TO_ADDR
6106: GO 6161
6108: LD_INT 46
6110: DOUBLE
6111: EQUAL
6112: IFTRUE 6116
6114: GO 6134
6116: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6117: LD_ADDR_VAR 0 3
6121: PUSH
6122: LD_INT 23
6124: PUSH
6125: LD_INT 24
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: ST_TO_ADDR
6132: GO 6161
6134: LD_INT 47
6136: DOUBLE
6137: EQUAL
6138: IFTRUE 6142
6140: GO 6160
6142: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6143: LD_ADDR_VAR 0 3
6147: PUSH
6148: LD_INT 23
6150: PUSH
6151: LD_INT 24
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: ST_TO_ADDR
6158: GO 6161
6160: POP
// result := ( chassis in result ) ;
6161: LD_ADDR_VAR 0 3
6165: PUSH
6166: LD_VAR 0 1
6170: PUSH
6171: LD_VAR 0 3
6175: IN
6176: ST_TO_ADDR
// end ;
6177: LD_VAR 0 3
6181: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6182: LD_INT 0
6184: PPUSH
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
6189: PPUSH
6190: PPUSH
// result := array ;
6191: LD_ADDR_VAR 0 5
6195: PUSH
6196: LD_VAR 0 1
6200: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6201: LD_VAR 0 1
6205: NOT
6206: PUSH
6207: LD_VAR 0 2
6211: NOT
6212: OR
6213: PUSH
6214: LD_VAR 0 3
6218: NOT
6219: OR
6220: PUSH
6221: LD_VAR 0 2
6225: PUSH
6226: LD_VAR 0 1
6230: GREATER
6231: OR
6232: PUSH
6233: LD_VAR 0 3
6237: PUSH
6238: LD_VAR 0 1
6242: GREATER
6243: OR
6244: IFFALSE 6248
// exit ;
6246: GO 6544
// if direction then
6248: LD_VAR 0 4
6252: IFFALSE 6316
// begin d := 1 ;
6254: LD_ADDR_VAR 0 9
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// if i_from > i_to then
6262: LD_VAR 0 2
6266: PUSH
6267: LD_VAR 0 3
6271: GREATER
6272: IFFALSE 6298
// length := ( array - i_from ) + i_to else
6274: LD_ADDR_VAR 0 11
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: LD_VAR 0 2
6288: MINUS
6289: PUSH
6290: LD_VAR 0 3
6294: PLUS
6295: ST_TO_ADDR
6296: GO 6314
// length := i_to - i_from ;
6298: LD_ADDR_VAR 0 11
6302: PUSH
6303: LD_VAR 0 3
6307: PUSH
6308: LD_VAR 0 2
6312: MINUS
6313: ST_TO_ADDR
// end else
6314: GO 6377
// begin d := - 1 ;
6316: LD_ADDR_VAR 0 9
6320: PUSH
6321: LD_INT 1
6323: NEG
6324: ST_TO_ADDR
// if i_from > i_to then
6325: LD_VAR 0 2
6329: PUSH
6330: LD_VAR 0 3
6334: GREATER
6335: IFFALSE 6355
// length := i_from - i_to else
6337: LD_ADDR_VAR 0 11
6341: PUSH
6342: LD_VAR 0 2
6346: PUSH
6347: LD_VAR 0 3
6351: MINUS
6352: ST_TO_ADDR
6353: GO 6377
// length := ( array - i_to ) + i_from ;
6355: LD_ADDR_VAR 0 11
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_VAR 0 3
6369: MINUS
6370: PUSH
6371: LD_VAR 0 2
6375: PLUS
6376: ST_TO_ADDR
// end ; if not length then
6377: LD_VAR 0 11
6381: NOT
6382: IFFALSE 6386
// exit ;
6384: GO 6544
// tmp := array ;
6386: LD_ADDR_VAR 0 10
6390: PUSH
6391: LD_VAR 0 1
6395: ST_TO_ADDR
// for i = 1 to length do
6396: LD_ADDR_VAR 0 6
6400: PUSH
6401: DOUBLE
6402: LD_INT 1
6404: DEC
6405: ST_TO_ADDR
6406: LD_VAR 0 11
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6532
// begin for j = 1 to array do
6414: LD_ADDR_VAR 0 7
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_VAR 0 1
6428: PUSH
6429: FOR_TO
6430: IFFALSE 6518
// begin k := j + d ;
6432: LD_ADDR_VAR 0 8
6436: PUSH
6437: LD_VAR 0 7
6441: PUSH
6442: LD_VAR 0 9
6446: PLUS
6447: ST_TO_ADDR
// if k > array then
6448: LD_VAR 0 8
6452: PUSH
6453: LD_VAR 0 1
6457: GREATER
6458: IFFALSE 6468
// k := 1 ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_INT 1
6467: ST_TO_ADDR
// if not k then
6468: LD_VAR 0 8
6472: NOT
6473: IFFALSE 6485
// k := array ;
6475: LD_ADDR_VAR 0 8
6479: PUSH
6480: LD_VAR 0 1
6484: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6485: LD_ADDR_VAR 0 10
6489: PUSH
6490: LD_VAR 0 10
6494: PPUSH
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_VAR 0 1
6504: PUSH
6505: LD_VAR 0 7
6509: ARRAY
6510: PPUSH
6511: CALL_OW 1
6515: ST_TO_ADDR
// end ;
6516: GO 6429
6518: POP
6519: POP
// array := tmp ;
6520: LD_ADDR_VAR 0 1
6524: PUSH
6525: LD_VAR 0 10
6529: ST_TO_ADDR
// end ;
6530: GO 6411
6532: POP
6533: POP
// result := array ;
6534: LD_ADDR_VAR 0 5
6538: PUSH
6539: LD_VAR 0 1
6543: ST_TO_ADDR
// end ;
6544: LD_VAR 0 5
6548: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6549: LD_INT 0
6551: PPUSH
6552: PPUSH
// result := 0 ;
6553: LD_ADDR_VAR 0 3
6557: PUSH
6558: LD_INT 0
6560: ST_TO_ADDR
// if not array or not value in array then
6561: LD_VAR 0 1
6565: NOT
6566: PUSH
6567: LD_VAR 0 2
6571: PUSH
6572: LD_VAR 0 1
6576: IN
6577: NOT
6578: OR
6579: IFFALSE 6583
// exit ;
6581: GO 6637
// for i = 1 to array do
6583: LD_ADDR_VAR 0 4
6587: PUSH
6588: DOUBLE
6589: LD_INT 1
6591: DEC
6592: ST_TO_ADDR
6593: LD_VAR 0 1
6597: PUSH
6598: FOR_TO
6599: IFFALSE 6635
// if value = array [ i ] then
6601: LD_VAR 0 2
6605: PUSH
6606: LD_VAR 0 1
6610: PUSH
6611: LD_VAR 0 4
6615: ARRAY
6616: EQUAL
6617: IFFALSE 6633
// begin result := i ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_VAR 0 4
6628: ST_TO_ADDR
// exit ;
6629: POP
6630: POP
6631: GO 6637
// end ;
6633: GO 6598
6635: POP
6636: POP
// end ;
6637: LD_VAR 0 3
6641: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6642: LD_INT 0
6644: PPUSH
// vc_chassis := chassis ;
6645: LD_ADDR_OWVAR 37
6649: PUSH
6650: LD_VAR 0 1
6654: ST_TO_ADDR
// vc_engine := engine ;
6655: LD_ADDR_OWVAR 39
6659: PUSH
6660: LD_VAR 0 2
6664: ST_TO_ADDR
// vc_control := control ;
6665: LD_ADDR_OWVAR 38
6669: PUSH
6670: LD_VAR 0 3
6674: ST_TO_ADDR
// vc_weapon := weapon ;
6675: LD_ADDR_OWVAR 40
6679: PUSH
6680: LD_VAR 0 4
6684: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6685: LD_ADDR_OWVAR 41
6689: PUSH
6690: LD_VAR 0 5
6694: ST_TO_ADDR
// end ;
6695: LD_VAR 0 6
6699: RET
// export function WantPlant ( unit ) ; var task ; begin
6700: LD_INT 0
6702: PPUSH
6703: PPUSH
// result := false ;
6704: LD_ADDR_VAR 0 2
6708: PUSH
6709: LD_INT 0
6711: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6712: LD_ADDR_VAR 0 3
6716: PUSH
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 437
6726: ST_TO_ADDR
// if task then
6727: LD_VAR 0 3
6731: IFFALSE 6759
// if task [ 1 ] [ 1 ] = p then
6733: LD_VAR 0 3
6737: PUSH
6738: LD_INT 1
6740: ARRAY
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PUSH
6746: LD_STRING p
6748: EQUAL
6749: IFFALSE 6759
// result := true ;
6751: LD_ADDR_VAR 0 2
6755: PUSH
6756: LD_INT 1
6758: ST_TO_ADDR
// end ;
6759: LD_VAR 0 2
6763: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6764: LD_INT 0
6766: PPUSH
6767: PPUSH
6768: PPUSH
6769: PPUSH
// if pos < 1 then
6770: LD_VAR 0 2
6774: PUSH
6775: LD_INT 1
6777: LESS
6778: IFFALSE 6782
// exit ;
6780: GO 7085
// if pos = 1 then
6782: LD_VAR 0 2
6786: PUSH
6787: LD_INT 1
6789: EQUAL
6790: IFFALSE 6823
// result := Replace ( arr , pos [ 1 ] , value ) else
6792: LD_ADDR_VAR 0 4
6796: PUSH
6797: LD_VAR 0 1
6801: PPUSH
6802: LD_VAR 0 2
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: PPUSH
6811: LD_VAR 0 3
6815: PPUSH
6816: CALL_OW 1
6820: ST_TO_ADDR
6821: GO 7085
// begin tmp := arr ;
6823: LD_ADDR_VAR 0 6
6827: PUSH
6828: LD_VAR 0 1
6832: ST_TO_ADDR
// s_arr := [ tmp ] ;
6833: LD_ADDR_VAR 0 7
6837: PUSH
6838: LD_VAR 0 6
6842: PUSH
6843: EMPTY
6844: LIST
6845: ST_TO_ADDR
// for i = 1 to pos - 1 do
6846: LD_ADDR_VAR 0 5
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 2
6860: PUSH
6861: LD_INT 1
6863: MINUS
6864: PUSH
6865: FOR_TO
6866: IFFALSE 6911
// begin tmp := tmp [ pos [ i ] ] ;
6868: LD_ADDR_VAR 0 6
6872: PUSH
6873: LD_VAR 0 6
6877: PUSH
6878: LD_VAR 0 2
6882: PUSH
6883: LD_VAR 0 5
6887: ARRAY
6888: ARRAY
6889: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6890: LD_ADDR_VAR 0 7
6894: PUSH
6895: LD_VAR 0 7
6899: PUSH
6900: LD_VAR 0 6
6904: PUSH
6905: EMPTY
6906: LIST
6907: ADD
6908: ST_TO_ADDR
// end ;
6909: GO 6865
6911: POP
6912: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6913: LD_ADDR_VAR 0 6
6917: PUSH
6918: LD_VAR 0 6
6922: PPUSH
6923: LD_VAR 0 2
6927: PUSH
6928: LD_VAR 0 2
6932: ARRAY
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: CALL_OW 1
6943: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6944: LD_ADDR_VAR 0 7
6948: PUSH
6949: LD_VAR 0 7
6953: PPUSH
6954: LD_VAR 0 7
6958: PPUSH
6959: LD_VAR 0 6
6963: PPUSH
6964: CALL_OW 1
6968: ST_TO_ADDR
// for i = s_arr downto 2 do
6969: LD_ADDR_VAR 0 5
6973: PUSH
6974: DOUBLE
6975: LD_VAR 0 7
6979: INC
6980: ST_TO_ADDR
6981: LD_INT 2
6983: PUSH
6984: FOR_DOWNTO
6985: IFFALSE 7069
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6987: LD_ADDR_VAR 0 6
6991: PUSH
6992: LD_VAR 0 7
6996: PUSH
6997: LD_VAR 0 5
7001: PUSH
7002: LD_INT 1
7004: MINUS
7005: ARRAY
7006: PPUSH
7007: LD_VAR 0 2
7011: PUSH
7012: LD_VAR 0 5
7016: PUSH
7017: LD_INT 1
7019: MINUS
7020: ARRAY
7021: PPUSH
7022: LD_VAR 0 7
7026: PUSH
7027: LD_VAR 0 5
7031: ARRAY
7032: PPUSH
7033: CALL_OW 1
7037: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7038: LD_ADDR_VAR 0 7
7042: PUSH
7043: LD_VAR 0 7
7047: PPUSH
7048: LD_VAR 0 5
7052: PUSH
7053: LD_INT 1
7055: MINUS
7056: PPUSH
7057: LD_VAR 0 6
7061: PPUSH
7062: CALL_OW 1
7066: ST_TO_ADDR
// end ;
7067: GO 6984
7069: POP
7070: POP
// result := s_arr [ 1 ] ;
7071: LD_ADDR_VAR 0 4
7075: PUSH
7076: LD_VAR 0 7
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: ST_TO_ADDR
// end ; end ;
7085: LD_VAR 0 4
7089: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7090: LD_INT 0
7092: PPUSH
7093: PPUSH
// if not list then
7094: LD_VAR 0 1
7098: NOT
7099: IFFALSE 7103
// exit ;
7101: GO 7194
// i := list [ pos1 ] ;
7103: LD_ADDR_VAR 0 5
7107: PUSH
7108: LD_VAR 0 1
7112: PUSH
7113: LD_VAR 0 2
7117: ARRAY
7118: ST_TO_ADDR
// if not i then
7119: LD_VAR 0 5
7123: NOT
7124: IFFALSE 7128
// exit ;
7126: GO 7194
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_VAR 0 2
7142: PPUSH
7143: LD_VAR 0 1
7147: PUSH
7148: LD_VAR 0 3
7152: ARRAY
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7159: LD_ADDR_VAR 0 1
7163: PUSH
7164: LD_VAR 0 1
7168: PPUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: LD_VAR 0 5
7178: PPUSH
7179: CALL_OW 1
7183: ST_TO_ADDR
// result := list ;
7184: LD_ADDR_VAR 0 4
7188: PUSH
7189: LD_VAR 0 1
7193: ST_TO_ADDR
// end ;
7194: LD_VAR 0 4
7198: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7199: LD_INT 0
7201: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7202: LD_ADDR_VAR 0 5
7206: PUSH
7207: LD_VAR 0 1
7211: PPUSH
7212: CALL_OW 250
7216: PPUSH
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 251
7226: PPUSH
7227: LD_VAR 0 2
7231: PPUSH
7232: LD_VAR 0 3
7236: PPUSH
7237: LD_VAR 0 4
7241: PPUSH
7242: CALL 7620 0 5
7246: ST_TO_ADDR
// end ;
7247: LD_VAR 0 5
7251: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7252: LD_INT 0
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
// if not list or not unit then
7258: LD_VAR 0 2
7262: NOT
7263: PUSH
7264: LD_VAR 0 1
7268: NOT
7269: OR
7270: IFFALSE 7274
// exit ;
7272: GO 7615
// result := [ ] ;
7274: LD_ADDR_VAR 0 5
7278: PUSH
7279: EMPTY
7280: ST_TO_ADDR
// for i in list do
7281: LD_ADDR_VAR 0 6
7285: PUSH
7286: LD_VAR 0 2
7290: PUSH
7291: FOR_IN
7292: IFFALSE 7510
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: LD_VAR 0 1
7303: PPUSH
7304: LD_VAR 0 6
7308: PUSH
7309: LD_INT 1
7311: ARRAY
7312: PPUSH
7313: LD_VAR 0 6
7317: PUSH
7318: LD_INT 2
7320: ARRAY
7321: PPUSH
7322: CALL_OW 297
7326: ST_TO_ADDR
// if not Count ( result ) then
7327: LD_VAR 0 5
7331: PPUSH
7332: CALL 3904 0 1
7336: NOT
7337: IFFALSE 7370
// begin result := Join ( result , [ i , tmp ] ) ;
7339: LD_ADDR_VAR 0 5
7343: PUSH
7344: LD_VAR 0 5
7348: PPUSH
7349: LD_VAR 0 6
7353: PUSH
7354: LD_VAR 0 8
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PPUSH
7363: CALL 39513 0 2
7367: ST_TO_ADDR
// continue ;
7368: GO 7291
// end ; if result [ result ] [ 2 ] <= tmp then
7370: LD_VAR 0 5
7374: PUSH
7375: LD_VAR 0 5
7379: ARRAY
7380: PUSH
7381: LD_INT 2
7383: ARRAY
7384: PUSH
7385: LD_VAR 0 8
7389: LESSEQUAL
7390: IFFALSE 7423
// result := Join ( result , [ i , tmp ] ) else
7392: LD_ADDR_VAR 0 5
7396: PUSH
7397: LD_VAR 0 5
7401: PPUSH
7402: LD_VAR 0 6
7406: PUSH
7407: LD_VAR 0 8
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL 39513 0 2
7420: ST_TO_ADDR
7421: GO 7508
// begin for j := 1 to Count ( result ) do
7423: LD_ADDR_VAR 0 7
7427: PUSH
7428: DOUBLE
7429: LD_INT 1
7431: DEC
7432: ST_TO_ADDR
7433: LD_VAR 0 5
7437: PPUSH
7438: CALL 3904 0 1
7442: PUSH
7443: FOR_TO
7444: IFFALSE 7506
// begin if tmp < result [ j ] [ 2 ] then
7446: LD_VAR 0 8
7450: PUSH
7451: LD_VAR 0 5
7455: PUSH
7456: LD_VAR 0 7
7460: ARRAY
7461: PUSH
7462: LD_INT 2
7464: ARRAY
7465: LESS
7466: IFFALSE 7504
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7468: LD_ADDR_VAR 0 5
7472: PUSH
7473: LD_VAR 0 5
7477: PPUSH
7478: LD_VAR 0 7
7482: PPUSH
7483: LD_VAR 0 6
7487: PUSH
7488: LD_VAR 0 8
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PPUSH
7497: CALL_OW 2
7501: ST_TO_ADDR
// break ;
7502: GO 7506
// end ; end ;
7504: GO 7443
7506: POP
7507: POP
// end ; end ;
7508: GO 7291
7510: POP
7511: POP
// if result and not asc then
7512: LD_VAR 0 5
7516: PUSH
7517: LD_VAR 0 3
7521: NOT
7522: AND
7523: IFFALSE 7540
// result := ReverseArray ( result ) ;
7525: LD_ADDR_VAR 0 5
7529: PUSH
7530: LD_VAR 0 5
7534: PPUSH
7535: CALL 34780 0 1
7539: ST_TO_ADDR
// tmp := [ ] ;
7540: LD_ADDR_VAR 0 8
7544: PUSH
7545: EMPTY
7546: ST_TO_ADDR
// if mode then
7547: LD_VAR 0 4
7551: IFFALSE 7615
// begin for i := 1 to result do
7553: LD_ADDR_VAR 0 6
7557: PUSH
7558: DOUBLE
7559: LD_INT 1
7561: DEC
7562: ST_TO_ADDR
7563: LD_VAR 0 5
7567: PUSH
7568: FOR_TO
7569: IFFALSE 7603
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7571: LD_ADDR_VAR 0 8
7575: PUSH
7576: LD_VAR 0 8
7580: PPUSH
7581: LD_VAR 0 5
7585: PUSH
7586: LD_VAR 0 6
7590: ARRAY
7591: PUSH
7592: LD_INT 1
7594: ARRAY
7595: PPUSH
7596: CALL 39513 0 2
7600: ST_TO_ADDR
7601: GO 7568
7603: POP
7604: POP
// result := tmp ;
7605: LD_ADDR_VAR 0 5
7609: PUSH
7610: LD_VAR 0 8
7614: ST_TO_ADDR
// end ; end ;
7615: LD_VAR 0 5
7619: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
7624: PPUSH
7625: PPUSH
// if not list then
7626: LD_VAR 0 3
7630: NOT
7631: IFFALSE 7635
// exit ;
7633: GO 8023
// result := [ ] ;
7635: LD_ADDR_VAR 0 6
7639: PUSH
7640: EMPTY
7641: ST_TO_ADDR
// for i in list do
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 3
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7855
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7655: LD_ADDR_VAR 0 9
7659: PUSH
7660: LD_VAR 0 7
7664: PPUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: LD_VAR 0 2
7674: PPUSH
7675: CALL_OW 297
7679: ST_TO_ADDR
// if not result then
7680: LD_VAR 0 6
7684: NOT
7685: IFFALSE 7711
// result := [ [ i , tmp ] ] else
7687: LD_ADDR_VAR 0 6
7691: PUSH
7692: LD_VAR 0 7
7696: PUSH
7697: LD_VAR 0 9
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: EMPTY
7707: LIST
7708: ST_TO_ADDR
7709: GO 7853
// begin if result [ result ] [ 2 ] <= tmp then
7711: LD_VAR 0 6
7715: PUSH
7716: LD_VAR 0 6
7720: ARRAY
7721: PUSH
7722: LD_INT 2
7724: ARRAY
7725: PUSH
7726: LD_VAR 0 9
7730: LESSEQUAL
7731: IFFALSE 7773
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7733: LD_ADDR_VAR 0 6
7737: PUSH
7738: LD_VAR 0 6
7742: PPUSH
7743: LD_VAR 0 6
7747: PUSH
7748: LD_INT 1
7750: PLUS
7751: PPUSH
7752: LD_VAR 0 7
7756: PUSH
7757: LD_VAR 0 9
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 2
7770: ST_TO_ADDR
7771: GO 7853
// for j := 1 to result do
7773: LD_ADDR_VAR 0 8
7777: PUSH
7778: DOUBLE
7779: LD_INT 1
7781: DEC
7782: ST_TO_ADDR
7783: LD_VAR 0 6
7787: PUSH
7788: FOR_TO
7789: IFFALSE 7851
// begin if tmp < result [ j ] [ 2 ] then
7791: LD_VAR 0 9
7795: PUSH
7796: LD_VAR 0 6
7800: PUSH
7801: LD_VAR 0 8
7805: ARRAY
7806: PUSH
7807: LD_INT 2
7809: ARRAY
7810: LESS
7811: IFFALSE 7849
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7813: LD_ADDR_VAR 0 6
7817: PUSH
7818: LD_VAR 0 6
7822: PPUSH
7823: LD_VAR 0 8
7827: PPUSH
7828: LD_VAR 0 7
7832: PUSH
7833: LD_VAR 0 9
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 2
7846: ST_TO_ADDR
// break ;
7847: GO 7851
// end ; end ;
7849: GO 7788
7851: POP
7852: POP
// end ; end ;
7853: GO 7652
7855: POP
7856: POP
// if result and not asc then
7857: LD_VAR 0 6
7861: PUSH
7862: LD_VAR 0 4
7866: NOT
7867: AND
7868: IFFALSE 7943
// begin tmp := result ;
7870: LD_ADDR_VAR 0 9
7874: PUSH
7875: LD_VAR 0 6
7879: ST_TO_ADDR
// for i = tmp downto 1 do
7880: LD_ADDR_VAR 0 7
7884: PUSH
7885: DOUBLE
7886: LD_VAR 0 9
7890: INC
7891: ST_TO_ADDR
7892: LD_INT 1
7894: PUSH
7895: FOR_DOWNTO
7896: IFFALSE 7941
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7898: LD_ADDR_VAR 0 6
7902: PUSH
7903: LD_VAR 0 6
7907: PPUSH
7908: LD_VAR 0 9
7912: PUSH
7913: LD_VAR 0 7
7917: MINUS
7918: PUSH
7919: LD_INT 1
7921: PLUS
7922: PPUSH
7923: LD_VAR 0 9
7927: PUSH
7928: LD_VAR 0 7
7932: ARRAY
7933: PPUSH
7934: CALL_OW 1
7938: ST_TO_ADDR
7939: GO 7895
7941: POP
7942: POP
// end ; tmp := [ ] ;
7943: LD_ADDR_VAR 0 9
7947: PUSH
7948: EMPTY
7949: ST_TO_ADDR
// if mode then
7950: LD_VAR 0 5
7954: IFFALSE 8023
// begin for i = 1 to result do
7956: LD_ADDR_VAR 0 7
7960: PUSH
7961: DOUBLE
7962: LD_INT 1
7964: DEC
7965: ST_TO_ADDR
7966: LD_VAR 0 6
7970: PUSH
7971: FOR_TO
7972: IFFALSE 8011
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7974: LD_ADDR_VAR 0 9
7978: PUSH
7979: LD_VAR 0 9
7983: PPUSH
7984: LD_VAR 0 7
7988: PPUSH
7989: LD_VAR 0 6
7993: PUSH
7994: LD_VAR 0 7
7998: ARRAY
7999: PUSH
8000: LD_INT 1
8002: ARRAY
8003: PPUSH
8004: CALL_OW 1
8008: ST_TO_ADDR
8009: GO 7971
8011: POP
8012: POP
// result := tmp ;
8013: LD_ADDR_VAR 0 6
8017: PUSH
8018: LD_VAR 0 9
8022: ST_TO_ADDR
// end ; end ;
8023: LD_VAR 0 6
8027: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8028: LD_INT 0
8030: PPUSH
8031: PPUSH
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8036: LD_ADDR_VAR 0 5
8040: PUSH
8041: LD_INT 0
8043: PUSH
8044: LD_INT 0
8046: PUSH
8047: LD_INT 0
8049: PUSH
8050: EMPTY
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: ST_TO_ADDR
// if not x or not y then
8058: LD_VAR 0 2
8062: NOT
8063: PUSH
8064: LD_VAR 0 3
8068: NOT
8069: OR
8070: IFFALSE 8074
// exit ;
8072: GO 9724
// if not range then
8074: LD_VAR 0 4
8078: NOT
8079: IFFALSE 8089
// range := 10 ;
8081: LD_ADDR_VAR 0 4
8085: PUSH
8086: LD_INT 10
8088: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8089: LD_ADDR_VAR 0 8
8093: PUSH
8094: LD_INT 81
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: LD_INT 92
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_VAR 0 3
8118: PUSH
8119: LD_VAR 0 4
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 3
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: PPUSH
8152: CALL_OW 69
8156: ST_TO_ADDR
// if not tmp then
8157: LD_VAR 0 8
8161: NOT
8162: IFFALSE 8166
// exit ;
8164: GO 9724
// for i in tmp do
8166: LD_ADDR_VAR 0 6
8170: PUSH
8171: LD_VAR 0 8
8175: PUSH
8176: FOR_IN
8177: IFFALSE 9699
// begin points := [ 0 , 0 , 0 ] ;
8179: LD_ADDR_VAR 0 9
8183: PUSH
8184: LD_INT 0
8186: PUSH
8187: LD_INT 0
8189: PUSH
8190: LD_INT 0
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: ST_TO_ADDR
// bpoints := 1 ;
8198: LD_ADDR_VAR 0 10
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8206: LD_VAR 0 6
8210: PPUSH
8211: CALL_OW 247
8215: PUSH
8216: LD_INT 1
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8802
8224: POP
// begin if GetClass ( i ) = 1 then
8225: LD_VAR 0 6
8229: PPUSH
8230: CALL_OW 257
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8259
// points := [ 10 , 5 , 3 ] ;
8240: LD_ADDR_VAR 0 9
8244: PUSH
8245: LD_INT 10
8247: PUSH
8248: LD_INT 5
8250: PUSH
8251: LD_INT 3
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8259: LD_VAR 0 6
8263: PPUSH
8264: CALL_OW 257
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: LD_INT 4
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: IN
8283: IFFALSE 8304
// points := [ 3 , 2 , 1 ] ;
8285: LD_ADDR_VAR 0 9
8289: PUSH
8290: LD_INT 3
8292: PUSH
8293: LD_INT 2
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8304: LD_VAR 0 6
8308: PPUSH
8309: CALL_OW 257
8313: PUSH
8314: LD_INT 5
8316: EQUAL
8317: IFFALSE 8338
// points := [ 130 , 5 , 2 ] ;
8319: LD_ADDR_VAR 0 9
8323: PUSH
8324: LD_INT 130
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8338: LD_VAR 0 6
8342: PPUSH
8343: CALL_OW 257
8347: PUSH
8348: LD_INT 8
8350: EQUAL
8351: IFFALSE 8372
// points := [ 35 , 35 , 30 ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 35
8360: PUSH
8361: LD_INT 35
8363: PUSH
8364: LD_INT 30
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8372: LD_VAR 0 6
8376: PPUSH
8377: CALL_OW 257
8381: PUSH
8382: LD_INT 9
8384: EQUAL
8385: IFFALSE 8406
// points := [ 20 , 55 , 40 ] ;
8387: LD_ADDR_VAR 0 9
8391: PUSH
8392: LD_INT 20
8394: PUSH
8395: LD_INT 55
8397: PUSH
8398: LD_INT 40
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 257
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 16
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: IN
8426: IFFALSE 8447
// points := [ 5 , 3 , 2 ] ;
8428: LD_ADDR_VAR 0 9
8432: PUSH
8433: LD_INT 5
8435: PUSH
8436: LD_INT 3
8438: PUSH
8439: LD_INT 2
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8447: LD_VAR 0 6
8451: PPUSH
8452: CALL_OW 257
8456: PUSH
8457: LD_INT 17
8459: EQUAL
8460: IFFALSE 8481
// points := [ 100 , 50 , 75 ] ;
8462: LD_ADDR_VAR 0 9
8466: PUSH
8467: LD_INT 100
8469: PUSH
8470: LD_INT 50
8472: PUSH
8473: LD_INT 75
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8481: LD_VAR 0 6
8485: PPUSH
8486: CALL_OW 257
8490: PUSH
8491: LD_INT 15
8493: EQUAL
8494: IFFALSE 8515
// points := [ 10 , 5 , 3 ] ;
8496: LD_ADDR_VAR 0 9
8500: PUSH
8501: LD_INT 10
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: LD_INT 3
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8515: LD_VAR 0 6
8519: PPUSH
8520: CALL_OW 257
8524: PUSH
8525: LD_INT 14
8527: EQUAL
8528: IFFALSE 8549
// points := [ 10 , 0 , 0 ] ;
8530: LD_ADDR_VAR 0 9
8534: PUSH
8535: LD_INT 10
8537: PUSH
8538: LD_INT 0
8540: PUSH
8541: LD_INT 0
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: LIST
8548: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8549: LD_VAR 0 6
8553: PPUSH
8554: CALL_OW 257
8558: PUSH
8559: LD_INT 11
8561: EQUAL
8562: IFFALSE 8583
// points := [ 30 , 10 , 5 ] ;
8564: LD_ADDR_VAR 0 9
8568: PUSH
8569: LD_INT 30
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 5
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8583: LD_VAR 0 1
8587: PPUSH
8588: LD_INT 5
8590: PPUSH
8591: CALL_OW 321
8595: PUSH
8596: LD_INT 2
8598: EQUAL
8599: IFFALSE 8616
// bpoints := bpoints * 1.8 ;
8601: LD_ADDR_VAR 0 10
8605: PUSH
8606: LD_VAR 0 10
8610: PUSH
8611: LD_REAL  1.80000000000000E+0000
8614: MUL
8615: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8616: LD_VAR 0 6
8620: PPUSH
8621: CALL_OW 257
8625: PUSH
8626: LD_INT 1
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: LD_INT 3
8634: PUSH
8635: LD_INT 4
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: IN
8644: PUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_INT 51
8652: PPUSH
8653: CALL_OW 321
8657: PUSH
8658: LD_INT 2
8660: EQUAL
8661: AND
8662: IFFALSE 8679
// bpoints := bpoints * 1.2 ;
8664: LD_ADDR_VAR 0 10
8668: PUSH
8669: LD_VAR 0 10
8673: PUSH
8674: LD_REAL  1.20000000000000E+0000
8677: MUL
8678: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8679: LD_VAR 0 6
8683: PPUSH
8684: CALL_OW 257
8688: PUSH
8689: LD_INT 5
8691: PUSH
8692: LD_INT 7
8694: PUSH
8695: LD_INT 9
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: IN
8703: PUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: LD_INT 52
8711: PPUSH
8712: CALL_OW 321
8716: PUSH
8717: LD_INT 2
8719: EQUAL
8720: AND
8721: IFFALSE 8738
// bpoints := bpoints * 1.5 ;
8723: LD_ADDR_VAR 0 10
8727: PUSH
8728: LD_VAR 0 10
8732: PUSH
8733: LD_REAL  1.50000000000000E+0000
8736: MUL
8737: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8738: LD_VAR 0 1
8742: PPUSH
8743: LD_INT 66
8745: PPUSH
8746: CALL_OW 321
8750: PUSH
8751: LD_INT 2
8753: EQUAL
8754: IFFALSE 8771
// bpoints := bpoints * 1.1 ;
8756: LD_ADDR_VAR 0 10
8760: PUSH
8761: LD_VAR 0 10
8765: PUSH
8766: LD_REAL  1.10000000000000E+0000
8769: MUL
8770: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8771: LD_ADDR_VAR 0 10
8775: PUSH
8776: LD_VAR 0 10
8780: PUSH
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: CALL_OW 259
8793: PUSH
8794: LD_REAL  1.15000000000000E+0000
8797: MUL
8798: MUL
8799: ST_TO_ADDR
// end ; unit_vehicle :
8800: GO 9628
8802: LD_INT 2
8804: DOUBLE
8805: EQUAL
8806: IFTRUE 8810
8808: GO 9616
8810: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8811: LD_VAR 0 6
8815: PPUSH
8816: CALL_OW 264
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 42
8826: PUSH
8827: LD_INT 24
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: IN
8835: IFFALSE 8856
// points := [ 25 , 5 , 3 ] ;
8837: LD_ADDR_VAR 0 9
8841: PUSH
8842: LD_INT 25
8844: PUSH
8845: LD_INT 5
8847: PUSH
8848: LD_INT 3
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: LIST
8855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8856: LD_VAR 0 6
8860: PPUSH
8861: CALL_OW 264
8865: PUSH
8866: LD_INT 4
8868: PUSH
8869: LD_INT 43
8871: PUSH
8872: LD_INT 25
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: IN
8880: IFFALSE 8901
// points := [ 40 , 15 , 5 ] ;
8882: LD_ADDR_VAR 0 9
8886: PUSH
8887: LD_INT 40
8889: PUSH
8890: LD_INT 15
8892: PUSH
8893: LD_INT 5
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8901: LD_VAR 0 6
8905: PPUSH
8906: CALL_OW 264
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: LD_INT 23
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: IN
8921: IFFALSE 8942
// points := [ 7 , 25 , 8 ] ;
8923: LD_ADDR_VAR 0 9
8927: PUSH
8928: LD_INT 7
8930: PUSH
8931: LD_INT 25
8933: PUSH
8934: LD_INT 8
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8942: LD_VAR 0 6
8946: PPUSH
8947: CALL_OW 264
8951: PUSH
8952: LD_INT 5
8954: PUSH
8955: LD_INT 27
8957: PUSH
8958: LD_INT 44
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: IN
8966: IFFALSE 8987
// points := [ 14 , 50 , 16 ] ;
8968: LD_ADDR_VAR 0 9
8972: PUSH
8973: LD_INT 14
8975: PUSH
8976: LD_INT 50
8978: PUSH
8979: LD_INT 16
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: LIST
8986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8987: LD_VAR 0 6
8991: PPUSH
8992: CALL_OW 264
8996: PUSH
8997: LD_INT 6
8999: PUSH
9000: LD_INT 46
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: IN
9007: IFFALSE 9028
// points := [ 32 , 120 , 70 ] ;
9009: LD_ADDR_VAR 0 9
9013: PUSH
9014: LD_INT 32
9016: PUSH
9017: LD_INT 120
9019: PUSH
9020: LD_INT 70
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: LIST
9027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9028: LD_VAR 0 6
9032: PPUSH
9033: CALL_OW 264
9037: PUSH
9038: LD_INT 7
9040: PUSH
9041: LD_INT 28
9043: PUSH
9044: LD_INT 45
9046: PUSH
9047: LD_INT 92
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: IN
9056: IFFALSE 9077
// points := [ 35 , 20 , 45 ] ;
9058: LD_ADDR_VAR 0 9
9062: PUSH
9063: LD_INT 35
9065: PUSH
9066: LD_INT 20
9068: PUSH
9069: LD_INT 45
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: LIST
9076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9077: LD_VAR 0 6
9081: PPUSH
9082: CALL_OW 264
9086: PUSH
9087: LD_INT 47
9089: PUSH
9090: EMPTY
9091: LIST
9092: IN
9093: IFFALSE 9114
// points := [ 67 , 45 , 75 ] ;
9095: LD_ADDR_VAR 0 9
9099: PUSH
9100: LD_INT 67
9102: PUSH
9103: LD_INT 45
9105: PUSH
9106: LD_INT 75
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9114: LD_VAR 0 6
9118: PPUSH
9119: CALL_OW 264
9123: PUSH
9124: LD_INT 26
9126: PUSH
9127: EMPTY
9128: LIST
9129: IN
9130: IFFALSE 9151
// points := [ 120 , 30 , 80 ] ;
9132: LD_ADDR_VAR 0 9
9136: PUSH
9137: LD_INT 120
9139: PUSH
9140: LD_INT 30
9142: PUSH
9143: LD_INT 80
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9151: LD_VAR 0 6
9155: PPUSH
9156: CALL_OW 264
9160: PUSH
9161: LD_INT 22
9163: PUSH
9164: EMPTY
9165: LIST
9166: IN
9167: IFFALSE 9188
// points := [ 40 , 1 , 1 ] ;
9169: LD_ADDR_VAR 0 9
9173: PUSH
9174: LD_INT 40
9176: PUSH
9177: LD_INT 1
9179: PUSH
9180: LD_INT 1
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: LIST
9187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9188: LD_VAR 0 6
9192: PPUSH
9193: CALL_OW 264
9197: PUSH
9198: LD_INT 29
9200: PUSH
9201: EMPTY
9202: LIST
9203: IN
9204: IFFALSE 9225
// points := [ 70 , 200 , 400 ] ;
9206: LD_ADDR_VAR 0 9
9210: PUSH
9211: LD_INT 70
9213: PUSH
9214: LD_INT 200
9216: PUSH
9217: LD_INT 400
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: LIST
9224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9225: LD_VAR 0 6
9229: PPUSH
9230: CALL_OW 264
9234: PUSH
9235: LD_INT 14
9237: PUSH
9238: LD_INT 53
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: IN
9245: IFFALSE 9266
// points := [ 40 , 10 , 20 ] ;
9247: LD_ADDR_VAR 0 9
9251: PUSH
9252: LD_INT 40
9254: PUSH
9255: LD_INT 10
9257: PUSH
9258: LD_INT 20
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9266: LD_VAR 0 6
9270: PPUSH
9271: CALL_OW 264
9275: PUSH
9276: LD_INT 9
9278: PUSH
9279: EMPTY
9280: LIST
9281: IN
9282: IFFALSE 9303
// points := [ 5 , 70 , 20 ] ;
9284: LD_ADDR_VAR 0 9
9288: PUSH
9289: LD_INT 5
9291: PUSH
9292: LD_INT 70
9294: PUSH
9295: LD_INT 20
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9303: LD_VAR 0 6
9307: PPUSH
9308: CALL_OW 264
9312: PUSH
9313: LD_INT 10
9315: PUSH
9316: EMPTY
9317: LIST
9318: IN
9319: IFFALSE 9340
// points := [ 35 , 110 , 70 ] ;
9321: LD_ADDR_VAR 0 9
9325: PUSH
9326: LD_INT 35
9328: PUSH
9329: LD_INT 110
9331: PUSH
9332: LD_INT 70
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9340: LD_VAR 0 6
9344: PPUSH
9345: CALL_OW 265
9349: PUSH
9350: LD_INT 25
9352: EQUAL
9353: IFFALSE 9374
// points := [ 80 , 65 , 100 ] ;
9355: LD_ADDR_VAR 0 9
9359: PUSH
9360: LD_INT 80
9362: PUSH
9363: LD_INT 65
9365: PUSH
9366: LD_INT 100
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9374: LD_VAR 0 6
9378: PPUSH
9379: CALL_OW 263
9383: PUSH
9384: LD_INT 1
9386: EQUAL
9387: IFFALSE 9422
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9389: LD_ADDR_VAR 0 10
9393: PUSH
9394: LD_VAR 0 10
9398: PUSH
9399: LD_VAR 0 6
9403: PPUSH
9404: CALL_OW 311
9408: PPUSH
9409: LD_INT 3
9411: PPUSH
9412: CALL_OW 259
9416: PUSH
9417: LD_INT 4
9419: MUL
9420: MUL
9421: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9422: LD_VAR 0 6
9426: PPUSH
9427: CALL_OW 263
9431: PUSH
9432: LD_INT 2
9434: EQUAL
9435: IFFALSE 9486
// begin j := IsControledBy ( i ) ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_VAR 0 6
9446: PPUSH
9447: CALL_OW 312
9451: ST_TO_ADDR
// if j then
9452: LD_VAR 0 7
9456: IFFALSE 9486
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9458: LD_ADDR_VAR 0 10
9462: PUSH
9463: LD_VAR 0 10
9467: PUSH
9468: LD_VAR 0 7
9472: PPUSH
9473: LD_INT 3
9475: PPUSH
9476: CALL_OW 259
9480: PUSH
9481: LD_INT 3
9483: MUL
9484: MUL
9485: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9486: LD_VAR 0 6
9490: PPUSH
9491: CALL_OW 264
9495: PUSH
9496: LD_INT 5
9498: PUSH
9499: LD_INT 6
9501: PUSH
9502: LD_INT 46
9504: PUSH
9505: LD_INT 44
9507: PUSH
9508: LD_INT 47
9510: PUSH
9511: LD_INT 45
9513: PUSH
9514: LD_INT 28
9516: PUSH
9517: LD_INT 7
9519: PUSH
9520: LD_INT 27
9522: PUSH
9523: LD_INT 29
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: IN
9538: PUSH
9539: LD_VAR 0 1
9543: PPUSH
9544: LD_INT 52
9546: PPUSH
9547: CALL_OW 321
9551: PUSH
9552: LD_INT 2
9554: EQUAL
9555: AND
9556: IFFALSE 9573
// bpoints := bpoints * 1.2 ;
9558: LD_ADDR_VAR 0 10
9562: PUSH
9563: LD_VAR 0 10
9567: PUSH
9568: LD_REAL  1.20000000000000E+0000
9571: MUL
9572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9573: LD_VAR 0 6
9577: PPUSH
9578: CALL_OW 264
9582: PUSH
9583: LD_INT 6
9585: PUSH
9586: LD_INT 46
9588: PUSH
9589: LD_INT 47
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: IN
9597: IFFALSE 9614
// bpoints := bpoints * 1.2 ;
9599: LD_ADDR_VAR 0 10
9603: PUSH
9604: LD_VAR 0 10
9608: PUSH
9609: LD_REAL  1.20000000000000E+0000
9612: MUL
9613: ST_TO_ADDR
// end ; unit_building :
9614: GO 9628
9616: LD_INT 3
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9627
9624: POP
// ; end ;
9625: GO 9628
9627: POP
// for j = 1 to 3 do
9628: LD_ADDR_VAR 0 7
9632: PUSH
9633: DOUBLE
9634: LD_INT 1
9636: DEC
9637: ST_TO_ADDR
9638: LD_INT 3
9640: PUSH
9641: FOR_TO
9642: IFFALSE 9695
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9644: LD_ADDR_VAR 0 5
9648: PUSH
9649: LD_VAR 0 5
9653: PPUSH
9654: LD_VAR 0 7
9658: PPUSH
9659: LD_VAR 0 5
9663: PUSH
9664: LD_VAR 0 7
9668: ARRAY
9669: PUSH
9670: LD_VAR 0 9
9674: PUSH
9675: LD_VAR 0 7
9679: ARRAY
9680: PUSH
9681: LD_VAR 0 10
9685: MUL
9686: PLUS
9687: PPUSH
9688: CALL_OW 1
9692: ST_TO_ADDR
9693: GO 9641
9695: POP
9696: POP
// end ;
9697: GO 8176
9699: POP
9700: POP
// result := Replace ( result , 4 , tmp ) ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: LD_VAR 0 5
9710: PPUSH
9711: LD_INT 4
9713: PPUSH
9714: LD_VAR 0 8
9718: PPUSH
9719: CALL_OW 1
9723: ST_TO_ADDR
// end ;
9724: LD_VAR 0 5
9728: RET
// export function DangerAtRange ( unit , range ) ; begin
9729: LD_INT 0
9731: PPUSH
// if not unit then
9732: LD_VAR 0 1
9736: NOT
9737: IFFALSE 9741
// exit ;
9739: GO 9786
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9741: LD_ADDR_VAR 0 3
9745: PUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 255
9755: PPUSH
9756: LD_VAR 0 1
9760: PPUSH
9761: CALL_OW 250
9765: PPUSH
9766: LD_VAR 0 1
9770: PPUSH
9771: CALL_OW 251
9775: PPUSH
9776: LD_VAR 0 2
9780: PPUSH
9781: CALL 8028 0 4
9785: ST_TO_ADDR
// end ;
9786: LD_VAR 0 3
9790: RET
// export function DangerInArea ( side , area ) ; begin
9791: LD_INT 0
9793: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9794: LD_ADDR_VAR 0 3
9798: PUSH
9799: LD_VAR 0 2
9803: PPUSH
9804: LD_INT 81
9806: PUSH
9807: LD_VAR 0 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PPUSH
9816: CALL_OW 70
9820: ST_TO_ADDR
// end ;
9821: LD_VAR 0 3
9825: RET
// export function IsExtension ( b ) ; begin
9826: LD_INT 0
9828: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9829: LD_ADDR_VAR 0 2
9833: PUSH
9834: LD_VAR 0 1
9838: PUSH
9839: LD_INT 23
9841: PUSH
9842: LD_INT 20
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 17
9850: PUSH
9851: LD_INT 24
9853: PUSH
9854: LD_INT 21
9856: PUSH
9857: LD_INT 19
9859: PUSH
9860: LD_INT 16
9862: PUSH
9863: LD_INT 25
9865: PUSH
9866: LD_INT 18
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: IN
9881: ST_TO_ADDR
// end ;
9882: LD_VAR 0 2
9886: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9887: LD_INT 0
9889: PPUSH
9890: PPUSH
9891: PPUSH
// result := [ ] ;
9892: LD_ADDR_VAR 0 4
9896: PUSH
9897: EMPTY
9898: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9899: LD_ADDR_VAR 0 5
9903: PUSH
9904: LD_VAR 0 2
9908: PPUSH
9909: LD_INT 21
9911: PUSH
9912: LD_INT 3
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: ST_TO_ADDR
// if not tmp then
9924: LD_VAR 0 5
9928: NOT
9929: IFFALSE 9933
// exit ;
9931: GO 9997
// if checkLink then
9933: LD_VAR 0 3
9937: IFFALSE 9987
// begin for i in tmp do
9939: LD_ADDR_VAR 0 6
9943: PUSH
9944: LD_VAR 0 5
9948: PUSH
9949: FOR_IN
9950: IFFALSE 9985
// if GetBase ( i ) <> base then
9952: LD_VAR 0 6
9956: PPUSH
9957: CALL_OW 274
9961: PUSH
9962: LD_VAR 0 1
9966: NONEQUAL
9967: IFFALSE 9983
// ComLinkToBase ( base , i ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_VAR 0 6
9978: PPUSH
9979: CALL_OW 169
9983: GO 9949
9985: POP
9986: POP
// end ; result := tmp ;
9987: LD_ADDR_VAR 0 4
9991: PUSH
9992: LD_VAR 0 5
9996: ST_TO_ADDR
// end ;
9997: LD_VAR 0 4
10001: RET
// export function ComComplete ( units , b ) ; var i ; begin
10002: LD_INT 0
10004: PPUSH
10005: PPUSH
// if not units then
10006: LD_VAR 0 1
10010: NOT
10011: IFFALSE 10015
// exit ;
10013: GO 10105
// for i in units do
10015: LD_ADDR_VAR 0 4
10019: PUSH
10020: LD_VAR 0 1
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10103
// if BuildingStatus ( b ) = bs_build then
10028: LD_VAR 0 2
10032: PPUSH
10033: CALL_OW 461
10037: PUSH
10038: LD_INT 1
10040: EQUAL
10041: IFFALSE 10101
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10043: LD_VAR 0 4
10047: PPUSH
10048: LD_STRING h
10050: PUSH
10051: LD_VAR 0 2
10055: PPUSH
10056: CALL_OW 250
10060: PUSH
10061: LD_VAR 0 2
10065: PPUSH
10066: CALL_OW 251
10070: PUSH
10071: LD_VAR 0 2
10075: PUSH
10076: LD_INT 0
10078: PUSH
10079: LD_INT 0
10081: PUSH
10082: LD_INT 0
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: PPUSH
10097: CALL_OW 446
10101: GO 10025
10103: POP
10104: POP
// end ;
10105: LD_VAR 0 3
10109: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10110: LD_INT 0
10112: PPUSH
10113: PPUSH
10114: PPUSH
10115: PPUSH
10116: PPUSH
10117: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10118: LD_VAR 0 1
10122: NOT
10123: PUSH
10124: LD_VAR 0 1
10128: PPUSH
10129: CALL_OW 263
10133: PUSH
10134: LD_INT 2
10136: NONEQUAL
10137: OR
10138: IFFALSE 10142
// exit ;
10140: GO 10458
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10142: LD_ADDR_VAR 0 6
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_VAR 0 1
10154: PPUSH
10155: CALL_OW 255
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 30
10169: PUSH
10170: LD_INT 36
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 34
10179: PUSH
10180: LD_INT 31
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 69
10200: ST_TO_ADDR
// if not tmp then
10201: LD_VAR 0 6
10205: NOT
10206: IFFALSE 10210
// exit ;
10208: GO 10458
// result := [ ] ;
10210: LD_ADDR_VAR 0 2
10214: PUSH
10215: EMPTY
10216: ST_TO_ADDR
// for i in tmp do
10217: LD_ADDR_VAR 0 3
10221: PUSH
10222: LD_VAR 0 6
10226: PUSH
10227: FOR_IN
10228: IFFALSE 10299
// begin t := UnitsInside ( i ) ;
10230: LD_ADDR_VAR 0 4
10234: PUSH
10235: LD_VAR 0 3
10239: PPUSH
10240: CALL_OW 313
10244: ST_TO_ADDR
// if t then
10245: LD_VAR 0 4
10249: IFFALSE 10297
// for j in t do
10251: LD_ADDR_VAR 0 7
10255: PUSH
10256: LD_VAR 0 4
10260: PUSH
10261: FOR_IN
10262: IFFALSE 10295
// result := Replace ( result , result + 1 , j ) ;
10264: LD_ADDR_VAR 0 2
10268: PUSH
10269: LD_VAR 0 2
10273: PPUSH
10274: LD_VAR 0 2
10278: PUSH
10279: LD_INT 1
10281: PLUS
10282: PPUSH
10283: LD_VAR 0 7
10287: PPUSH
10288: CALL_OW 1
10292: ST_TO_ADDR
10293: GO 10261
10295: POP
10296: POP
// end ;
10297: GO 10227
10299: POP
10300: POP
// if not result then
10301: LD_VAR 0 2
10305: NOT
10306: IFFALSE 10310
// exit ;
10308: GO 10458
// mech := result [ 1 ] ;
10310: LD_ADDR_VAR 0 5
10314: PUSH
10315: LD_VAR 0 2
10319: PUSH
10320: LD_INT 1
10322: ARRAY
10323: ST_TO_ADDR
// if result > 1 then
10324: LD_VAR 0 2
10328: PUSH
10329: LD_INT 1
10331: GREATER
10332: IFFALSE 10444
// begin for i = 2 to result do
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: DOUBLE
10340: LD_INT 2
10342: DEC
10343: ST_TO_ADDR
10344: LD_VAR 0 2
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10442
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10352: LD_ADDR_VAR 0 4
10356: PUSH
10357: LD_VAR 0 2
10361: PUSH
10362: LD_VAR 0 3
10366: ARRAY
10367: PPUSH
10368: LD_INT 3
10370: PPUSH
10371: CALL_OW 259
10375: PUSH
10376: LD_VAR 0 2
10380: PUSH
10381: LD_VAR 0 3
10385: ARRAY
10386: PPUSH
10387: CALL_OW 432
10391: MINUS
10392: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10393: LD_VAR 0 4
10397: PUSH
10398: LD_VAR 0 5
10402: PPUSH
10403: LD_INT 3
10405: PPUSH
10406: CALL_OW 259
10410: PUSH
10411: LD_VAR 0 5
10415: PPUSH
10416: CALL_OW 432
10420: MINUS
10421: GREATEREQUAL
10422: IFFALSE 10440
// mech := result [ i ] ;
10424: LD_ADDR_VAR 0 5
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_VAR 0 3
10438: ARRAY
10439: ST_TO_ADDR
// end ;
10440: GO 10349
10442: POP
10443: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10444: LD_VAR 0 1
10448: PPUSH
10449: LD_VAR 0 5
10453: PPUSH
10454: CALL_OW 135
// end ;
10458: LD_VAR 0 2
10462: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10463: LD_INT 0
10465: PPUSH
10466: PPUSH
10467: PPUSH
10468: PPUSH
10469: PPUSH
10470: PPUSH
10471: PPUSH
10472: PPUSH
10473: PPUSH
10474: PPUSH
10475: PPUSH
10476: PPUSH
10477: PPUSH
// result := [ ] ;
10478: LD_ADDR_VAR 0 7
10482: PUSH
10483: EMPTY
10484: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10485: LD_VAR 0 1
10489: PPUSH
10490: CALL_OW 266
10494: PUSH
10495: LD_INT 0
10497: PUSH
10498: LD_INT 1
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: IN
10505: NOT
10506: IFFALSE 10510
// exit ;
10508: GO 12144
// if name then
10510: LD_VAR 0 3
10514: IFFALSE 10530
// SetBName ( base_dep , name ) ;
10516: LD_VAR 0 1
10520: PPUSH
10521: LD_VAR 0 3
10525: PPUSH
10526: CALL_OW 500
// base := GetBase ( base_dep ) ;
10530: LD_ADDR_VAR 0 15
10534: PUSH
10535: LD_VAR 0 1
10539: PPUSH
10540: CALL_OW 274
10544: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10545: LD_ADDR_VAR 0 16
10549: PUSH
10550: LD_VAR 0 1
10554: PPUSH
10555: CALL_OW 255
10559: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10560: LD_ADDR_VAR 0 17
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 248
10574: ST_TO_ADDR
// if sources then
10575: LD_VAR 0 5
10579: IFFALSE 10626
// for i = 1 to 3 do
10581: LD_ADDR_VAR 0 8
10585: PUSH
10586: DOUBLE
10587: LD_INT 1
10589: DEC
10590: ST_TO_ADDR
10591: LD_INT 3
10593: PUSH
10594: FOR_TO
10595: IFFALSE 10624
// AddResourceType ( base , i , sources [ i ] ) ;
10597: LD_VAR 0 15
10601: PPUSH
10602: LD_VAR 0 8
10606: PPUSH
10607: LD_VAR 0 5
10611: PUSH
10612: LD_VAR 0 8
10616: ARRAY
10617: PPUSH
10618: CALL_OW 276
10622: GO 10594
10624: POP
10625: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10626: LD_ADDR_VAR 0 18
10630: PUSH
10631: LD_VAR 0 15
10635: PPUSH
10636: LD_VAR 0 2
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL 9887 0 3
10648: ST_TO_ADDR
// InitHc ;
10649: CALL_OW 19
// InitUc ;
10653: CALL_OW 18
// uc_side := side ;
10657: LD_ADDR_OWVAR 20
10661: PUSH
10662: LD_VAR 0 16
10666: ST_TO_ADDR
// uc_nation := nation ;
10667: LD_ADDR_OWVAR 21
10671: PUSH
10672: LD_VAR 0 17
10676: ST_TO_ADDR
// if buildings then
10677: LD_VAR 0 18
10681: IFFALSE 12003
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10683: LD_ADDR_VAR 0 19
10687: PUSH
10688: LD_VAR 0 18
10692: PPUSH
10693: LD_INT 2
10695: PUSH
10696: LD_INT 30
10698: PUSH
10699: LD_INT 29
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 30
10708: PUSH
10709: LD_INT 30
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 72
10725: ST_TO_ADDR
// if tmp then
10726: LD_VAR 0 19
10730: IFFALSE 10778
// for i in tmp do
10732: LD_ADDR_VAR 0 8
10736: PUSH
10737: LD_VAR 0 19
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10776
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10745: LD_VAR 0 8
10749: PPUSH
10750: CALL_OW 250
10754: PPUSH
10755: LD_VAR 0 8
10759: PPUSH
10760: CALL_OW 251
10764: PPUSH
10765: LD_VAR 0 16
10769: PPUSH
10770: CALL_OW 441
10774: GO 10742
10776: POP
10777: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10778: LD_VAR 0 18
10782: PPUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 30
10788: PUSH
10789: LD_INT 32
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 30
10798: PUSH
10799: LD_INT 33
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 72
10815: IFFALSE 10903
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10817: LD_ADDR_VAR 0 8
10821: PUSH
10822: LD_VAR 0 18
10826: PPUSH
10827: LD_INT 2
10829: PUSH
10830: LD_INT 30
10832: PUSH
10833: LD_INT 32
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 30
10842: PUSH
10843: LD_INT 33
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 72
10859: PUSH
10860: FOR_IN
10861: IFFALSE 10901
// begin if not GetBWeapon ( i ) then
10863: LD_VAR 0 8
10867: PPUSH
10868: CALL_OW 269
10872: NOT
10873: IFFALSE 10899
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10875: LD_VAR 0 8
10879: PPUSH
10880: LD_VAR 0 8
10884: PPUSH
10885: LD_VAR 0 2
10889: PPUSH
10890: CALL 12149 0 2
10894: PPUSH
10895: CALL_OW 431
// end ;
10899: GO 10860
10901: POP
10902: POP
// end ; for i = 1 to personel do
10903: LD_ADDR_VAR 0 8
10907: PUSH
10908: DOUBLE
10909: LD_INT 1
10911: DEC
10912: ST_TO_ADDR
10913: LD_VAR 0 6
10917: PUSH
10918: FOR_TO
10919: IFFALSE 11983
// begin if i > 4 then
10921: LD_VAR 0 8
10925: PUSH
10926: LD_INT 4
10928: GREATER
10929: IFFALSE 10933
// break ;
10931: GO 11983
// case i of 1 :
10933: LD_VAR 0 8
10937: PUSH
10938: LD_INT 1
10940: DOUBLE
10941: EQUAL
10942: IFTRUE 10946
10944: GO 11026
10946: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10947: LD_ADDR_VAR 0 12
10951: PUSH
10952: LD_VAR 0 18
10956: PPUSH
10957: LD_INT 22
10959: PUSH
10960: LD_VAR 0 16
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 58
10971: PUSH
10972: EMPTY
10973: LIST
10974: PUSH
10975: LD_INT 2
10977: PUSH
10978: LD_INT 30
10980: PUSH
10981: LD_INT 32
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: LD_INT 4
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 30
11000: PUSH
11001: LD_INT 5
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 72
11023: ST_TO_ADDR
11024: GO 11248
11026: LD_INT 2
11028: DOUBLE
11029: EQUAL
11030: IFTRUE 11034
11032: GO 11096
11034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11035: LD_ADDR_VAR 0 12
11039: PUSH
11040: LD_VAR 0 18
11044: PPUSH
11045: LD_INT 22
11047: PUSH
11048: LD_VAR 0 16
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: LD_INT 30
11062: PUSH
11063: LD_INT 0
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 30
11072: PUSH
11073: LD_INT 1
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 72
11093: ST_TO_ADDR
11094: GO 11248
11096: LD_INT 3
11098: DOUBLE
11099: EQUAL
11100: IFTRUE 11104
11102: GO 11166
11104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11105: LD_ADDR_VAR 0 12
11109: PUSH
11110: LD_VAR 0 18
11114: PPUSH
11115: LD_INT 22
11117: PUSH
11118: LD_VAR 0 16
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 2
11129: PUSH
11130: LD_INT 30
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 30
11142: PUSH
11143: LD_INT 3
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PPUSH
11159: CALL_OW 72
11163: ST_TO_ADDR
11164: GO 11248
11166: LD_INT 4
11168: DOUBLE
11169: EQUAL
11170: IFTRUE 11174
11172: GO 11247
11174: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11175: LD_ADDR_VAR 0 12
11179: PUSH
11180: LD_VAR 0 18
11184: PPUSH
11185: LD_INT 22
11187: PUSH
11188: LD_VAR 0 16
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 2
11199: PUSH
11200: LD_INT 30
11202: PUSH
11203: LD_INT 6
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 30
11212: PUSH
11213: LD_INT 7
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 30
11222: PUSH
11223: LD_INT 8
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PPUSH
11240: CALL_OW 72
11244: ST_TO_ADDR
11245: GO 11248
11247: POP
// if i = 1 then
11248: LD_VAR 0 8
11252: PUSH
11253: LD_INT 1
11255: EQUAL
11256: IFFALSE 11367
// begin tmp := [ ] ;
11258: LD_ADDR_VAR 0 19
11262: PUSH
11263: EMPTY
11264: ST_TO_ADDR
// for j in f do
11265: LD_ADDR_VAR 0 9
11269: PUSH
11270: LD_VAR 0 12
11274: PUSH
11275: FOR_IN
11276: IFFALSE 11349
// if GetBType ( j ) = b_bunker then
11278: LD_VAR 0 9
11282: PPUSH
11283: CALL_OW 266
11287: PUSH
11288: LD_INT 32
11290: EQUAL
11291: IFFALSE 11318
// tmp := Insert ( tmp , 1 , j ) else
11293: LD_ADDR_VAR 0 19
11297: PUSH
11298: LD_VAR 0 19
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: LD_VAR 0 9
11310: PPUSH
11311: CALL_OW 2
11315: ST_TO_ADDR
11316: GO 11347
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11318: LD_ADDR_VAR 0 19
11322: PUSH
11323: LD_VAR 0 19
11327: PPUSH
11328: LD_VAR 0 19
11332: PUSH
11333: LD_INT 1
11335: PLUS
11336: PPUSH
11337: LD_VAR 0 9
11341: PPUSH
11342: CALL_OW 2
11346: ST_TO_ADDR
11347: GO 11275
11349: POP
11350: POP
// if tmp then
11351: LD_VAR 0 19
11355: IFFALSE 11367
// f := tmp ;
11357: LD_ADDR_VAR 0 12
11361: PUSH
11362: LD_VAR 0 19
11366: ST_TO_ADDR
// end ; x := personel [ i ] ;
11367: LD_ADDR_VAR 0 13
11371: PUSH
11372: LD_VAR 0 6
11376: PUSH
11377: LD_VAR 0 8
11381: ARRAY
11382: ST_TO_ADDR
// if x = - 1 then
11383: LD_VAR 0 13
11387: PUSH
11388: LD_INT 1
11390: NEG
11391: EQUAL
11392: IFFALSE 11601
// begin for j in f do
11394: LD_ADDR_VAR 0 9
11398: PUSH
11399: LD_VAR 0 12
11403: PUSH
11404: FOR_IN
11405: IFFALSE 11597
// repeat InitHc ;
11407: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11411: LD_VAR 0 9
11415: PPUSH
11416: CALL_OW 266
11420: PUSH
11421: LD_INT 5
11423: EQUAL
11424: IFFALSE 11494
// begin if UnitsInside ( j ) < 3 then
11426: LD_VAR 0 9
11430: PPUSH
11431: CALL_OW 313
11435: PUSH
11436: LD_INT 3
11438: LESS
11439: IFFALSE 11475
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11441: LD_INT 0
11443: PPUSH
11444: LD_INT 5
11446: PUSH
11447: LD_INT 8
11449: PUSH
11450: LD_INT 9
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: PUSH
11458: LD_VAR 0 17
11462: ARRAY
11463: PPUSH
11464: LD_VAR 0 4
11468: PPUSH
11469: CALL_OW 380
11473: GO 11492
// PrepareHuman ( false , i , skill ) ;
11475: LD_INT 0
11477: PPUSH
11478: LD_VAR 0 8
11482: PPUSH
11483: LD_VAR 0 4
11487: PPUSH
11488: CALL_OW 380
// end else
11492: GO 11511
// PrepareHuman ( false , i , skill ) ;
11494: LD_INT 0
11496: PPUSH
11497: LD_VAR 0 8
11501: PPUSH
11502: LD_VAR 0 4
11506: PPUSH
11507: CALL_OW 380
// un := CreateHuman ;
11511: LD_ADDR_VAR 0 14
11515: PUSH
11516: CALL_OW 44
11520: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11521: LD_ADDR_VAR 0 7
11525: PUSH
11526: LD_VAR 0 7
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: LD_VAR 0 14
11538: PPUSH
11539: CALL_OW 2
11543: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11544: LD_VAR 0 14
11548: PPUSH
11549: LD_VAR 0 9
11553: PPUSH
11554: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11558: LD_VAR 0 9
11562: PPUSH
11563: CALL_OW 313
11567: PUSH
11568: LD_INT 6
11570: EQUAL
11571: PUSH
11572: LD_VAR 0 9
11576: PPUSH
11577: CALL_OW 266
11581: PUSH
11582: LD_INT 32
11584: PUSH
11585: LD_INT 31
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: IN
11592: OR
11593: IFFALSE 11407
11595: GO 11404
11597: POP
11598: POP
// end else
11599: GO 11981
// for j = 1 to x do
11601: LD_ADDR_VAR 0 9
11605: PUSH
11606: DOUBLE
11607: LD_INT 1
11609: DEC
11610: ST_TO_ADDR
11611: LD_VAR 0 13
11615: PUSH
11616: FOR_TO
11617: IFFALSE 11979
// begin InitHc ;
11619: CALL_OW 19
// if not f then
11623: LD_VAR 0 12
11627: NOT
11628: IFFALSE 11717
// begin PrepareHuman ( false , i , skill ) ;
11630: LD_INT 0
11632: PPUSH
11633: LD_VAR 0 8
11637: PPUSH
11638: LD_VAR 0 4
11642: PPUSH
11643: CALL_OW 380
// un := CreateHuman ;
11647: LD_ADDR_VAR 0 14
11651: PUSH
11652: CALL_OW 44
11656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11657: LD_ADDR_VAR 0 7
11661: PUSH
11662: LD_VAR 0 7
11666: PPUSH
11667: LD_INT 1
11669: PPUSH
11670: LD_VAR 0 14
11674: PPUSH
11675: CALL_OW 2
11679: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11680: LD_VAR 0 14
11684: PPUSH
11685: LD_VAR 0 1
11689: PPUSH
11690: CALL_OW 250
11694: PPUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 251
11704: PPUSH
11705: LD_INT 10
11707: PPUSH
11708: LD_INT 0
11710: PPUSH
11711: CALL_OW 50
// continue ;
11715: GO 11616
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11717: LD_VAR 0 12
11721: PUSH
11722: LD_INT 1
11724: ARRAY
11725: PPUSH
11726: CALL_OW 313
11730: PUSH
11731: LD_VAR 0 12
11735: PUSH
11736: LD_INT 1
11738: ARRAY
11739: PPUSH
11740: CALL_OW 266
11744: PUSH
11745: LD_INT 32
11747: PUSH
11748: LD_INT 31
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: IN
11755: AND
11756: PUSH
11757: LD_VAR 0 12
11761: PUSH
11762: LD_INT 1
11764: ARRAY
11765: PPUSH
11766: CALL_OW 313
11770: PUSH
11771: LD_INT 6
11773: EQUAL
11774: OR
11775: IFFALSE 11795
// f := Delete ( f , 1 ) ;
11777: LD_ADDR_VAR 0 12
11781: PUSH
11782: LD_VAR 0 12
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: CALL_OW 3
11794: ST_TO_ADDR
// if not f then
11795: LD_VAR 0 12
11799: NOT
11800: IFFALSE 11818
// begin x := x + 2 ;
11802: LD_ADDR_VAR 0 13
11806: PUSH
11807: LD_VAR 0 13
11811: PUSH
11812: LD_INT 2
11814: PLUS
11815: ST_TO_ADDR
// continue ;
11816: GO 11616
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11818: LD_VAR 0 12
11822: PUSH
11823: LD_INT 1
11825: ARRAY
11826: PPUSH
11827: CALL_OW 266
11831: PUSH
11832: LD_INT 5
11834: EQUAL
11835: IFFALSE 11909
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11837: LD_VAR 0 12
11841: PUSH
11842: LD_INT 1
11844: ARRAY
11845: PPUSH
11846: CALL_OW 313
11850: PUSH
11851: LD_INT 3
11853: LESS
11854: IFFALSE 11890
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11856: LD_INT 0
11858: PPUSH
11859: LD_INT 5
11861: PUSH
11862: LD_INT 8
11864: PUSH
11865: LD_INT 9
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: LD_VAR 0 17
11877: ARRAY
11878: PPUSH
11879: LD_VAR 0 4
11883: PPUSH
11884: CALL_OW 380
11888: GO 11907
// PrepareHuman ( false , i , skill ) ;
11890: LD_INT 0
11892: PPUSH
11893: LD_VAR 0 8
11897: PPUSH
11898: LD_VAR 0 4
11902: PPUSH
11903: CALL_OW 380
// end else
11907: GO 11926
// PrepareHuman ( false , i , skill ) ;
11909: LD_INT 0
11911: PPUSH
11912: LD_VAR 0 8
11916: PPUSH
11917: LD_VAR 0 4
11921: PPUSH
11922: CALL_OW 380
// un := CreateHuman ;
11926: LD_ADDR_VAR 0 14
11930: PUSH
11931: CALL_OW 44
11935: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11936: LD_ADDR_VAR 0 7
11940: PUSH
11941: LD_VAR 0 7
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: LD_VAR 0 14
11953: PPUSH
11954: CALL_OW 2
11958: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11959: LD_VAR 0 14
11963: PPUSH
11964: LD_VAR 0 12
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: PPUSH
11973: CALL_OW 52
// end ;
11977: GO 11616
11979: POP
11980: POP
// end ;
11981: GO 10918
11983: POP
11984: POP
// result := result ^ buildings ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_VAR 0 7
11994: PUSH
11995: LD_VAR 0 18
11999: ADD
12000: ST_TO_ADDR
// end else
12001: GO 12144
// begin for i = 1 to personel do
12003: LD_ADDR_VAR 0 8
12007: PUSH
12008: DOUBLE
12009: LD_INT 1
12011: DEC
12012: ST_TO_ADDR
12013: LD_VAR 0 6
12017: PUSH
12018: FOR_TO
12019: IFFALSE 12142
// begin if i > 4 then
12021: LD_VAR 0 8
12025: PUSH
12026: LD_INT 4
12028: GREATER
12029: IFFALSE 12033
// break ;
12031: GO 12142
// x := personel [ i ] ;
12033: LD_ADDR_VAR 0 13
12037: PUSH
12038: LD_VAR 0 6
12042: PUSH
12043: LD_VAR 0 8
12047: ARRAY
12048: ST_TO_ADDR
// if x = - 1 then
12049: LD_VAR 0 13
12053: PUSH
12054: LD_INT 1
12056: NEG
12057: EQUAL
12058: IFFALSE 12062
// continue ;
12060: GO 12018
// PrepareHuman ( false , i , skill ) ;
12062: LD_INT 0
12064: PPUSH
12065: LD_VAR 0 8
12069: PPUSH
12070: LD_VAR 0 4
12074: PPUSH
12075: CALL_OW 380
// un := CreateHuman ;
12079: LD_ADDR_VAR 0 14
12083: PUSH
12084: CALL_OW 44
12088: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12089: LD_VAR 0 14
12093: PPUSH
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 250
12103: PPUSH
12104: LD_VAR 0 1
12108: PPUSH
12109: CALL_OW 251
12113: PPUSH
12114: LD_INT 10
12116: PPUSH
12117: LD_INT 0
12119: PPUSH
12120: CALL_OW 50
// result := result ^ un ;
12124: LD_ADDR_VAR 0 7
12128: PUSH
12129: LD_VAR 0 7
12133: PUSH
12134: LD_VAR 0 14
12138: ADD
12139: ST_TO_ADDR
// end ;
12140: GO 12018
12142: POP
12143: POP
// end ; end ;
12144: LD_VAR 0 7
12148: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12149: LD_INT 0
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
12155: PPUSH
12156: PPUSH
12157: PPUSH
12158: PPUSH
12159: PPUSH
12160: PPUSH
12161: PPUSH
12162: PPUSH
12163: PPUSH
12164: PPUSH
12165: PPUSH
12166: PPUSH
// result := false ;
12167: LD_ADDR_VAR 0 3
12171: PUSH
12172: LD_INT 0
12174: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12175: LD_VAR 0 1
12179: NOT
12180: PUSH
12181: LD_VAR 0 1
12185: PPUSH
12186: CALL_OW 266
12190: PUSH
12191: LD_INT 32
12193: PUSH
12194: LD_INT 33
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: IN
12201: NOT
12202: OR
12203: IFFALSE 12207
// exit ;
12205: GO 13316
// nat := GetNation ( tower ) ;
12207: LD_ADDR_VAR 0 12
12211: PUSH
12212: LD_VAR 0 1
12216: PPUSH
12217: CALL_OW 248
12221: ST_TO_ADDR
// side := GetSide ( tower ) ;
12222: LD_ADDR_VAR 0 16
12226: PUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 255
12236: ST_TO_ADDR
// x := GetX ( tower ) ;
12237: LD_ADDR_VAR 0 10
12241: PUSH
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 250
12251: ST_TO_ADDR
// y := GetY ( tower ) ;
12252: LD_ADDR_VAR 0 11
12256: PUSH
12257: LD_VAR 0 1
12261: PPUSH
12262: CALL_OW 251
12266: ST_TO_ADDR
// if not x or not y then
12267: LD_VAR 0 10
12271: NOT
12272: PUSH
12273: LD_VAR 0 11
12277: NOT
12278: OR
12279: IFFALSE 12283
// exit ;
12281: GO 13316
// weapon := 0 ;
12283: LD_ADDR_VAR 0 18
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// fac_list := [ ] ;
12291: LD_ADDR_VAR 0 17
12295: PUSH
12296: EMPTY
12297: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12298: LD_ADDR_VAR 0 6
12302: PUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 274
12312: PPUSH
12313: LD_VAR 0 2
12317: PPUSH
12318: LD_INT 0
12320: PPUSH
12321: CALL 9887 0 3
12325: PPUSH
12326: LD_INT 30
12328: PUSH
12329: LD_INT 3
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: ST_TO_ADDR
// if not factories then
12341: LD_VAR 0 6
12345: NOT
12346: IFFALSE 12350
// exit ;
12348: GO 13316
// for i in factories do
12350: LD_ADDR_VAR 0 8
12354: PUSH
12355: LD_VAR 0 6
12359: PUSH
12360: FOR_IN
12361: IFFALSE 12386
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12363: LD_ADDR_VAR 0 17
12367: PUSH
12368: LD_VAR 0 17
12372: PUSH
12373: LD_VAR 0 8
12377: PPUSH
12378: CALL_OW 478
12382: UNION
12383: ST_TO_ADDR
12384: GO 12360
12386: POP
12387: POP
// if not fac_list then
12388: LD_VAR 0 17
12392: NOT
12393: IFFALSE 12397
// exit ;
12395: GO 13316
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12397: LD_ADDR_VAR 0 5
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: LD_INT 5
12407: PUSH
12408: LD_INT 9
12410: PUSH
12411: LD_INT 10
12413: PUSH
12414: LD_INT 6
12416: PUSH
12417: LD_INT 7
12419: PUSH
12420: LD_INT 11
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 27
12434: PUSH
12435: LD_INT 28
12437: PUSH
12438: LD_INT 26
12440: PUSH
12441: LD_INT 30
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 43
12452: PUSH
12453: LD_INT 44
12455: PUSH
12456: LD_INT 46
12458: PUSH
12459: LD_INT 45
12461: PUSH
12462: LD_INT 47
12464: PUSH
12465: LD_INT 49
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: LD_VAR 0 12
12485: ARRAY
12486: ST_TO_ADDR
// list := list isect fac_list ;
12487: LD_ADDR_VAR 0 5
12491: PUSH
12492: LD_VAR 0 5
12496: PUSH
12497: LD_VAR 0 17
12501: ISECT
12502: ST_TO_ADDR
// if not list then
12503: LD_VAR 0 5
12507: NOT
12508: IFFALSE 12512
// exit ;
12510: GO 13316
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12512: LD_VAR 0 12
12516: PUSH
12517: LD_INT 3
12519: EQUAL
12520: PUSH
12521: LD_INT 49
12523: PUSH
12524: LD_VAR 0 5
12528: IN
12529: AND
12530: PUSH
12531: LD_INT 31
12533: PPUSH
12534: LD_VAR 0 16
12538: PPUSH
12539: CALL_OW 321
12543: PUSH
12544: LD_INT 2
12546: EQUAL
12547: AND
12548: IFFALSE 12608
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 16
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 35
12564: PUSH
12565: LD_INT 49
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 91
12574: PUSH
12575: LD_VAR 0 1
12579: PUSH
12580: LD_INT 10
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: NOT
12598: IFFALSE 12608
// weapon := ru_time_lapser ;
12600: LD_ADDR_VAR 0 18
12604: PUSH
12605: LD_INT 49
12607: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12608: LD_VAR 0 12
12612: PUSH
12613: LD_INT 1
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: IN
12623: PUSH
12624: LD_INT 11
12626: PUSH
12627: LD_VAR 0 5
12631: IN
12632: PUSH
12633: LD_INT 30
12635: PUSH
12636: LD_VAR 0 5
12640: IN
12641: OR
12642: AND
12643: PUSH
12644: LD_INT 6
12646: PPUSH
12647: LD_VAR 0 16
12651: PPUSH
12652: CALL_OW 321
12656: PUSH
12657: LD_INT 2
12659: EQUAL
12660: AND
12661: IFFALSE 12826
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12663: LD_INT 22
12665: PUSH
12666: LD_VAR 0 16
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 2
12677: PUSH
12678: LD_INT 35
12680: PUSH
12681: LD_INT 11
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 35
12690: PUSH
12691: LD_INT 30
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 91
12705: PUSH
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 18
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: NOT
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_VAR 0 16
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 32
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 33
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 91
12772: PUSH
12773: LD_VAR 0 1
12777: PUSH
12778: LD_INT 12
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: PPUSH
12794: CALL_OW 69
12798: PUSH
12799: LD_INT 2
12801: GREATER
12802: AND
12803: IFFALSE 12826
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12805: LD_ADDR_VAR 0 18
12809: PUSH
12810: LD_INT 11
12812: PUSH
12813: LD_INT 30
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_VAR 0 12
12824: ARRAY
12825: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12826: LD_VAR 0 18
12830: NOT
12831: PUSH
12832: LD_INT 40
12834: PPUSH
12835: LD_VAR 0 16
12839: PPUSH
12840: CALL_OW 321
12844: PUSH
12845: LD_INT 2
12847: EQUAL
12848: AND
12849: PUSH
12850: LD_INT 7
12852: PUSH
12853: LD_VAR 0 5
12857: IN
12858: PUSH
12859: LD_INT 28
12861: PUSH
12862: LD_VAR 0 5
12866: IN
12867: OR
12868: PUSH
12869: LD_INT 45
12871: PUSH
12872: LD_VAR 0 5
12876: IN
12877: OR
12878: AND
12879: IFFALSE 13133
// begin hex := GetHexInfo ( x , y ) ;
12881: LD_ADDR_VAR 0 4
12885: PUSH
12886: LD_VAR 0 10
12890: PPUSH
12891: LD_VAR 0 11
12895: PPUSH
12896: CALL_OW 546
12900: ST_TO_ADDR
// if hex [ 1 ] then
12901: LD_VAR 0 4
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: IFFALSE 12913
// exit ;
12911: GO 13316
// height := hex [ 2 ] ;
12913: LD_ADDR_VAR 0 15
12917: PUSH
12918: LD_VAR 0 4
12922: PUSH
12923: LD_INT 2
12925: ARRAY
12926: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12927: LD_ADDR_VAR 0 14
12931: PUSH
12932: LD_INT 0
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: LD_INT 5
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: ST_TO_ADDR
// for i in tmp do
12950: LD_ADDR_VAR 0 8
12954: PUSH
12955: LD_VAR 0 14
12959: PUSH
12960: FOR_IN
12961: IFFALSE 13131
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12963: LD_ADDR_VAR 0 9
12967: PUSH
12968: LD_VAR 0 10
12972: PPUSH
12973: LD_VAR 0 8
12977: PPUSH
12978: LD_INT 5
12980: PPUSH
12981: CALL_OW 272
12985: PUSH
12986: LD_VAR 0 11
12990: PPUSH
12991: LD_VAR 0 8
12995: PPUSH
12996: LD_INT 5
12998: PPUSH
12999: CALL_OW 273
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13008: LD_VAR 0 9
13012: PUSH
13013: LD_INT 1
13015: ARRAY
13016: PPUSH
13017: LD_VAR 0 9
13021: PUSH
13022: LD_INT 2
13024: ARRAY
13025: PPUSH
13026: CALL_OW 488
13030: IFFALSE 13129
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13032: LD_ADDR_VAR 0 4
13036: PUSH
13037: LD_VAR 0 9
13041: PUSH
13042: LD_INT 1
13044: ARRAY
13045: PPUSH
13046: LD_VAR 0 9
13050: PUSH
13051: LD_INT 2
13053: ARRAY
13054: PPUSH
13055: CALL_OW 546
13059: ST_TO_ADDR
// if hex [ 1 ] then
13060: LD_VAR 0 4
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: IFFALSE 13072
// continue ;
13070: GO 12960
// h := hex [ 2 ] ;
13072: LD_ADDR_VAR 0 13
13076: PUSH
13077: LD_VAR 0 4
13081: PUSH
13082: LD_INT 2
13084: ARRAY
13085: ST_TO_ADDR
// if h + 7 < height then
13086: LD_VAR 0 13
13090: PUSH
13091: LD_INT 7
13093: PLUS
13094: PUSH
13095: LD_VAR 0 15
13099: LESS
13100: IFFALSE 13129
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13102: LD_ADDR_VAR 0 18
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 28
13112: PUSH
13113: LD_INT 45
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: PUSH
13121: LD_VAR 0 12
13125: ARRAY
13126: ST_TO_ADDR
// break ;
13127: GO 13131
// end ; end ; end ;
13129: GO 12960
13131: POP
13132: POP
// end ; if not weapon then
13133: LD_VAR 0 18
13137: NOT
13138: IFFALSE 13198
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13140: LD_ADDR_VAR 0 5
13144: PUSH
13145: LD_VAR 0 5
13149: PUSH
13150: LD_INT 11
13152: PUSH
13153: LD_INT 30
13155: PUSH
13156: LD_INT 49
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: DIFF
13164: ST_TO_ADDR
// if not list then
13165: LD_VAR 0 5
13169: NOT
13170: IFFALSE 13174
// exit ;
13172: GO 13316
// weapon := list [ rand ( 1 , list ) ] ;
13174: LD_ADDR_VAR 0 18
13178: PUSH
13179: LD_VAR 0 5
13183: PUSH
13184: LD_INT 1
13186: PPUSH
13187: LD_VAR 0 5
13191: PPUSH
13192: CALL_OW 12
13196: ARRAY
13197: ST_TO_ADDR
// end ; if weapon then
13198: LD_VAR 0 18
13202: IFFALSE 13316
// begin tmp := CostOfWeapon ( weapon ) ;
13204: LD_ADDR_VAR 0 14
13208: PUSH
13209: LD_VAR 0 18
13213: PPUSH
13214: CALL_OW 451
13218: ST_TO_ADDR
// j := GetBase ( tower ) ;
13219: LD_ADDR_VAR 0 9
13223: PUSH
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 274
13233: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13234: LD_VAR 0 9
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: CALL_OW 275
13246: PUSH
13247: LD_VAR 0 14
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: GREATEREQUAL
13256: PUSH
13257: LD_VAR 0 9
13261: PPUSH
13262: LD_INT 2
13264: PPUSH
13265: CALL_OW 275
13269: PUSH
13270: LD_VAR 0 14
13274: PUSH
13275: LD_INT 2
13277: ARRAY
13278: GREATEREQUAL
13279: AND
13280: PUSH
13281: LD_VAR 0 9
13285: PPUSH
13286: LD_INT 3
13288: PPUSH
13289: CALL_OW 275
13293: PUSH
13294: LD_VAR 0 14
13298: PUSH
13299: LD_INT 3
13301: ARRAY
13302: GREATEREQUAL
13303: AND
13304: IFFALSE 13316
// result := weapon ;
13306: LD_ADDR_VAR 0 3
13310: PUSH
13311: LD_VAR 0 18
13315: ST_TO_ADDR
// end ; end ;
13316: LD_VAR 0 3
13320: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13321: LD_INT 0
13323: PPUSH
13324: PPUSH
// result := true ;
13325: LD_ADDR_VAR 0 3
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// if array1 = array2 then
13333: LD_VAR 0 1
13337: PUSH
13338: LD_VAR 0 2
13342: EQUAL
13343: IFFALSE 13403
// begin for i = 1 to array1 do
13345: LD_ADDR_VAR 0 4
13349: PUSH
13350: DOUBLE
13351: LD_INT 1
13353: DEC
13354: ST_TO_ADDR
13355: LD_VAR 0 1
13359: PUSH
13360: FOR_TO
13361: IFFALSE 13399
// if array1 [ i ] <> array2 [ i ] then
13363: LD_VAR 0 1
13367: PUSH
13368: LD_VAR 0 4
13372: ARRAY
13373: PUSH
13374: LD_VAR 0 2
13378: PUSH
13379: LD_VAR 0 4
13383: ARRAY
13384: NONEQUAL
13385: IFFALSE 13397
// begin result := false ;
13387: LD_ADDR_VAR 0 3
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// break ;
13395: GO 13399
// end ;
13397: GO 13360
13399: POP
13400: POP
// end else
13401: GO 13411
// result := false ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// end ;
13411: LD_VAR 0 3
13415: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13416: LD_INT 0
13418: PPUSH
13419: PPUSH
// if not array1 or not array2 then
13420: LD_VAR 0 1
13424: NOT
13425: PUSH
13426: LD_VAR 0 2
13430: NOT
13431: OR
13432: IFFALSE 13436
// exit ;
13434: GO 13500
// result := true ;
13436: LD_ADDR_VAR 0 3
13440: PUSH
13441: LD_INT 1
13443: ST_TO_ADDR
// for i = 1 to array1 do
13444: LD_ADDR_VAR 0 4
13448: PUSH
13449: DOUBLE
13450: LD_INT 1
13452: DEC
13453: ST_TO_ADDR
13454: LD_VAR 0 1
13458: PUSH
13459: FOR_TO
13460: IFFALSE 13498
// if array1 [ i ] <> array2 [ i ] then
13462: LD_VAR 0 1
13466: PUSH
13467: LD_VAR 0 4
13471: ARRAY
13472: PUSH
13473: LD_VAR 0 2
13477: PUSH
13478: LD_VAR 0 4
13482: ARRAY
13483: NONEQUAL
13484: IFFALSE 13496
// begin result := false ;
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_INT 0
13493: ST_TO_ADDR
// break ;
13494: GO 13498
// end ;
13496: GO 13459
13498: POP
13499: POP
// end ;
13500: LD_VAR 0 3
13504: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13505: LD_INT 0
13507: PPUSH
13508: PPUSH
13509: PPUSH
// pom := GetBase ( fac ) ;
13510: LD_ADDR_VAR 0 5
13514: PUSH
13515: LD_VAR 0 1
13519: PPUSH
13520: CALL_OW 274
13524: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13525: LD_ADDR_VAR 0 4
13529: PUSH
13530: LD_VAR 0 2
13534: PUSH
13535: LD_INT 1
13537: ARRAY
13538: PPUSH
13539: LD_VAR 0 2
13543: PUSH
13544: LD_INT 2
13546: ARRAY
13547: PPUSH
13548: LD_VAR 0 2
13552: PUSH
13553: LD_INT 3
13555: ARRAY
13556: PPUSH
13557: LD_VAR 0 2
13561: PUSH
13562: LD_INT 4
13564: ARRAY
13565: PPUSH
13566: CALL_OW 449
13570: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13571: LD_ADDR_VAR 0 3
13575: PUSH
13576: LD_VAR 0 5
13580: PPUSH
13581: LD_INT 1
13583: PPUSH
13584: CALL_OW 275
13588: PUSH
13589: LD_VAR 0 4
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: GREATEREQUAL
13598: PUSH
13599: LD_VAR 0 5
13603: PPUSH
13604: LD_INT 2
13606: PPUSH
13607: CALL_OW 275
13611: PUSH
13612: LD_VAR 0 4
13616: PUSH
13617: LD_INT 2
13619: ARRAY
13620: GREATEREQUAL
13621: AND
13622: PUSH
13623: LD_VAR 0 5
13627: PPUSH
13628: LD_INT 3
13630: PPUSH
13631: CALL_OW 275
13635: PUSH
13636: LD_VAR 0 4
13640: PUSH
13641: LD_INT 3
13643: ARRAY
13644: GREATEREQUAL
13645: AND
13646: ST_TO_ADDR
// end ;
13647: LD_VAR 0 3
13651: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13652: LD_INT 0
13654: PPUSH
13655: PPUSH
13656: PPUSH
13657: PPUSH
// pom := GetBase ( building ) ;
13658: LD_ADDR_VAR 0 3
13662: PUSH
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 274
13672: ST_TO_ADDR
// if not pom then
13673: LD_VAR 0 3
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 13852
// btype := GetBType ( building ) ;
13682: LD_ADDR_VAR 0 5
13686: PUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: CALL_OW 266
13696: ST_TO_ADDR
// if btype = b_armoury then
13697: LD_VAR 0 5
13701: PUSH
13702: LD_INT 4
13704: EQUAL
13705: IFFALSE 13715
// btype := b_barracks ;
13707: LD_ADDR_VAR 0 5
13711: PUSH
13712: LD_INT 5
13714: ST_TO_ADDR
// if btype = b_depot then
13715: LD_VAR 0 5
13719: PUSH
13720: LD_INT 0
13722: EQUAL
13723: IFFALSE 13733
// btype := b_warehouse ;
13725: LD_ADDR_VAR 0 5
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// if btype = b_workshop then
13733: LD_VAR 0 5
13737: PUSH
13738: LD_INT 2
13740: EQUAL
13741: IFFALSE 13751
// btype := b_factory ;
13743: LD_ADDR_VAR 0 5
13747: PUSH
13748: LD_INT 3
13750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13751: LD_ADDR_VAR 0 4
13755: PUSH
13756: LD_VAR 0 5
13760: PPUSH
13761: LD_VAR 0 1
13765: PPUSH
13766: CALL_OW 248
13770: PPUSH
13771: CALL_OW 450
13775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_VAR 0 3
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 275
13793: PUSH
13794: LD_VAR 0 4
13798: PUSH
13799: LD_INT 1
13801: ARRAY
13802: GREATEREQUAL
13803: PUSH
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: CALL_OW 275
13816: PUSH
13817: LD_VAR 0 4
13821: PUSH
13822: LD_INT 2
13824: ARRAY
13825: GREATEREQUAL
13826: AND
13827: PUSH
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 3
13835: PPUSH
13836: CALL_OW 275
13840: PUSH
13841: LD_VAR 0 4
13845: PUSH
13846: LD_INT 3
13848: ARRAY
13849: GREATEREQUAL
13850: AND
13851: ST_TO_ADDR
// end ;
13852: LD_VAR 0 2
13856: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13857: LD_INT 0
13859: PPUSH
13860: PPUSH
13861: PPUSH
// pom := GetBase ( building ) ;
13862: LD_ADDR_VAR 0 4
13866: PUSH
13867: LD_VAR 0 1
13871: PPUSH
13872: CALL_OW 274
13876: ST_TO_ADDR
// if not pom then
13877: LD_VAR 0 4
13881: NOT
13882: IFFALSE 13886
// exit ;
13884: GO 13987
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13886: LD_ADDR_VAR 0 5
13890: PUSH
13891: LD_VAR 0 2
13895: PPUSH
13896: LD_VAR 0 1
13900: PPUSH
13901: CALL_OW 248
13905: PPUSH
13906: CALL_OW 450
13910: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: LD_VAR 0 4
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 275
13928: PUSH
13929: LD_VAR 0 5
13933: PUSH
13934: LD_INT 1
13936: ARRAY
13937: GREATEREQUAL
13938: PUSH
13939: LD_VAR 0 4
13943: PPUSH
13944: LD_INT 2
13946: PPUSH
13947: CALL_OW 275
13951: PUSH
13952: LD_VAR 0 5
13956: PUSH
13957: LD_INT 2
13959: ARRAY
13960: GREATEREQUAL
13961: AND
13962: PUSH
13963: LD_VAR 0 4
13967: PPUSH
13968: LD_INT 3
13970: PPUSH
13971: CALL_OW 275
13975: PUSH
13976: LD_VAR 0 5
13980: PUSH
13981: LD_INT 3
13983: ARRAY
13984: GREATEREQUAL
13985: AND
13986: ST_TO_ADDR
// end ;
13987: LD_VAR 0 3
13991: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13992: LD_INT 0
13994: PPUSH
13995: PPUSH
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
// result := false ;
14005: LD_ADDR_VAR 0 8
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14013: LD_VAR 0 5
14017: NOT
14018: PUSH
14019: LD_VAR 0 1
14023: NOT
14024: OR
14025: PUSH
14026: LD_VAR 0 2
14030: NOT
14031: OR
14032: PUSH
14033: LD_VAR 0 3
14037: NOT
14038: OR
14039: IFFALSE 14043
// exit ;
14041: GO 14857
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14043: LD_ADDR_VAR 0 14
14047: PUSH
14048: LD_VAR 0 1
14052: PPUSH
14053: LD_VAR 0 2
14057: PPUSH
14058: LD_VAR 0 3
14062: PPUSH
14063: LD_VAR 0 4
14067: PPUSH
14068: LD_VAR 0 5
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: PPUSH
14077: CALL_OW 248
14081: PPUSH
14082: LD_INT 0
14084: PPUSH
14085: CALL 16110 0 6
14089: ST_TO_ADDR
// if not hexes then
14090: LD_VAR 0 14
14094: NOT
14095: IFFALSE 14099
// exit ;
14097: GO 14857
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14099: LD_ADDR_VAR 0 17
14103: PUSH
14104: LD_VAR 0 5
14108: PPUSH
14109: LD_INT 22
14111: PUSH
14112: LD_VAR 0 13
14116: PPUSH
14117: CALL_OW 255
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 2
14128: PUSH
14129: LD_INT 30
14131: PUSH
14132: LD_INT 0
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 30
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PPUSH
14158: CALL_OW 72
14162: ST_TO_ADDR
// for i = 1 to hexes do
14163: LD_ADDR_VAR 0 9
14167: PUSH
14168: DOUBLE
14169: LD_INT 1
14171: DEC
14172: ST_TO_ADDR
14173: LD_VAR 0 14
14177: PUSH
14178: FOR_TO
14179: IFFALSE 14855
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14181: LD_ADDR_VAR 0 13
14185: PUSH
14186: LD_VAR 0 14
14190: PUSH
14191: LD_VAR 0 9
14195: ARRAY
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: PPUSH
14201: LD_VAR 0 14
14205: PUSH
14206: LD_VAR 0 9
14210: ARRAY
14211: PUSH
14212: LD_INT 2
14214: ARRAY
14215: PPUSH
14216: CALL_OW 428
14220: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14221: LD_VAR 0 14
14225: PUSH
14226: LD_VAR 0 9
14230: ARRAY
14231: PUSH
14232: LD_INT 1
14234: ARRAY
14235: PPUSH
14236: LD_VAR 0 14
14240: PUSH
14241: LD_VAR 0 9
14245: ARRAY
14246: PUSH
14247: LD_INT 2
14249: ARRAY
14250: PPUSH
14251: CALL_OW 351
14255: PUSH
14256: LD_VAR 0 14
14260: PUSH
14261: LD_VAR 0 9
14265: ARRAY
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: LD_VAR 0 14
14275: PUSH
14276: LD_VAR 0 9
14280: ARRAY
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: PPUSH
14286: CALL_OW 488
14290: NOT
14291: OR
14292: PUSH
14293: LD_VAR 0 13
14297: PPUSH
14298: CALL_OW 247
14302: PUSH
14303: LD_INT 3
14305: EQUAL
14306: OR
14307: IFFALSE 14313
// exit ;
14309: POP
14310: POP
14311: GO 14857
// if not tmp then
14313: LD_VAR 0 13
14317: NOT
14318: IFFALSE 14322
// continue ;
14320: GO 14178
// result := true ;
14322: LD_ADDR_VAR 0 8
14326: PUSH
14327: LD_INT 1
14329: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14330: LD_VAR 0 6
14334: PUSH
14335: LD_VAR 0 13
14339: PPUSH
14340: CALL_OW 247
14344: PUSH
14345: LD_INT 2
14347: EQUAL
14348: AND
14349: PUSH
14350: LD_VAR 0 13
14354: PPUSH
14355: CALL_OW 263
14359: PUSH
14360: LD_INT 1
14362: EQUAL
14363: AND
14364: IFFALSE 14528
// begin if IsDrivenBy ( tmp ) then
14366: LD_VAR 0 13
14370: PPUSH
14371: CALL_OW 311
14375: IFFALSE 14379
// continue ;
14377: GO 14178
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14379: LD_VAR 0 6
14383: PPUSH
14384: LD_INT 3
14386: PUSH
14387: LD_INT 60
14389: PUSH
14390: EMPTY
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 3
14399: PUSH
14400: LD_INT 55
14402: PUSH
14403: EMPTY
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 72
14418: IFFALSE 14526
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14420: LD_ADDR_VAR 0 18
14424: PUSH
14425: LD_VAR 0 6
14429: PPUSH
14430: LD_INT 3
14432: PUSH
14433: LD_INT 60
14435: PUSH
14436: EMPTY
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: LD_INT 3
14445: PUSH
14446: LD_INT 55
14448: PUSH
14449: EMPTY
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 72
14464: PUSH
14465: LD_INT 1
14467: ARRAY
14468: ST_TO_ADDR
// if IsInUnit ( driver ) then
14469: LD_VAR 0 18
14473: PPUSH
14474: CALL_OW 310
14478: IFFALSE 14489
// ComExit ( driver ) ;
14480: LD_VAR 0 18
14484: PPUSH
14485: CALL 39911 0 1
// AddComEnterUnit ( driver , tmp ) ;
14489: LD_VAR 0 18
14493: PPUSH
14494: LD_VAR 0 13
14498: PPUSH
14499: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14503: LD_VAR 0 18
14507: PPUSH
14508: LD_VAR 0 7
14512: PPUSH
14513: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14517: LD_VAR 0 18
14521: PPUSH
14522: CALL_OW 181
// end ; continue ;
14526: GO 14178
// end ; if not cleaners or not tmp in cleaners then
14528: LD_VAR 0 6
14532: NOT
14533: PUSH
14534: LD_VAR 0 13
14538: PUSH
14539: LD_VAR 0 6
14543: IN
14544: NOT
14545: OR
14546: IFFALSE 14853
// begin if dep then
14548: LD_VAR 0 17
14552: IFFALSE 14688
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14554: LD_ADDR_VAR 0 16
14558: PUSH
14559: LD_VAR 0 17
14563: PUSH
14564: LD_INT 1
14566: ARRAY
14567: PPUSH
14568: CALL_OW 250
14572: PPUSH
14573: LD_VAR 0 17
14577: PUSH
14578: LD_INT 1
14580: ARRAY
14581: PPUSH
14582: CALL_OW 254
14586: PPUSH
14587: LD_INT 5
14589: PPUSH
14590: CALL_OW 272
14594: PUSH
14595: LD_VAR 0 17
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: PPUSH
14604: CALL_OW 251
14608: PPUSH
14609: LD_VAR 0 17
14613: PUSH
14614: LD_INT 1
14616: ARRAY
14617: PPUSH
14618: CALL_OW 254
14622: PPUSH
14623: LD_INT 5
14625: PPUSH
14626: CALL_OW 273
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14635: LD_VAR 0 16
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: PPUSH
14644: LD_VAR 0 16
14648: PUSH
14649: LD_INT 2
14651: ARRAY
14652: PPUSH
14653: CALL_OW 488
14657: IFFALSE 14688
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14659: LD_VAR 0 13
14663: PPUSH
14664: LD_VAR 0 16
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: PPUSH
14673: LD_VAR 0 16
14677: PUSH
14678: LD_INT 2
14680: ARRAY
14681: PPUSH
14682: CALL_OW 111
// continue ;
14686: GO 14178
// end ; end ; r := GetDir ( tmp ) ;
14688: LD_ADDR_VAR 0 15
14692: PUSH
14693: LD_VAR 0 13
14697: PPUSH
14698: CALL_OW 254
14702: ST_TO_ADDR
// if r = 5 then
14703: LD_VAR 0 15
14707: PUSH
14708: LD_INT 5
14710: EQUAL
14711: IFFALSE 14721
// r := 0 ;
14713: LD_ADDR_VAR 0 15
14717: PUSH
14718: LD_INT 0
14720: ST_TO_ADDR
// for j = r to 5 do
14721: LD_ADDR_VAR 0 10
14725: PUSH
14726: DOUBLE
14727: LD_VAR 0 15
14731: DEC
14732: ST_TO_ADDR
14733: LD_INT 5
14735: PUSH
14736: FOR_TO
14737: IFFALSE 14851
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14739: LD_ADDR_VAR 0 11
14743: PUSH
14744: LD_VAR 0 13
14748: PPUSH
14749: CALL_OW 250
14753: PPUSH
14754: LD_VAR 0 10
14758: PPUSH
14759: LD_INT 2
14761: PPUSH
14762: CALL_OW 272
14766: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14767: LD_ADDR_VAR 0 12
14771: PUSH
14772: LD_VAR 0 13
14776: PPUSH
14777: CALL_OW 251
14781: PPUSH
14782: LD_VAR 0 10
14786: PPUSH
14787: LD_INT 2
14789: PPUSH
14790: CALL_OW 273
14794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14795: LD_VAR 0 11
14799: PPUSH
14800: LD_VAR 0 12
14804: PPUSH
14805: CALL_OW 488
14809: PUSH
14810: LD_VAR 0 11
14814: PPUSH
14815: LD_VAR 0 12
14819: PPUSH
14820: CALL_OW 428
14824: NOT
14825: AND
14826: IFFALSE 14849
// begin ComMoveXY ( tmp , _x , _y ) ;
14828: LD_VAR 0 13
14832: PPUSH
14833: LD_VAR 0 11
14837: PPUSH
14838: LD_VAR 0 12
14842: PPUSH
14843: CALL_OW 111
// break ;
14847: GO 14851
// end ; end ;
14849: GO 14736
14851: POP
14852: POP
// end ; end ;
14853: GO 14178
14855: POP
14856: POP
// end ;
14857: LD_VAR 0 8
14861: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14862: LD_INT 0
14864: PPUSH
// result := true ;
14865: LD_ADDR_VAR 0 3
14869: PUSH
14870: LD_INT 1
14872: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14873: LD_VAR 0 2
14877: PUSH
14878: LD_INT 24
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14892
14884: LD_INT 33
14886: DOUBLE
14887: EQUAL
14888: IFTRUE 14892
14890: GO 14917
14892: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: LD_INT 32
14900: PPUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 321
14910: PUSH
14911: LD_INT 2
14913: EQUAL
14914: ST_TO_ADDR
14915: GO 15233
14917: LD_INT 20
14919: DOUBLE
14920: EQUAL
14921: IFTRUE 14925
14923: GO 14950
14925: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14926: LD_ADDR_VAR 0 3
14930: PUSH
14931: LD_INT 6
14933: PPUSH
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 321
14943: PUSH
14944: LD_INT 2
14946: EQUAL
14947: ST_TO_ADDR
14948: GO 15233
14950: LD_INT 22
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14964
14956: LD_INT 36
14958: DOUBLE
14959: EQUAL
14960: IFTRUE 14964
14962: GO 14989
14964: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14965: LD_ADDR_VAR 0 3
14969: PUSH
14970: LD_INT 15
14972: PPUSH
14973: LD_VAR 0 1
14977: PPUSH
14978: CALL_OW 321
14982: PUSH
14983: LD_INT 2
14985: EQUAL
14986: ST_TO_ADDR
14987: GO 15233
14989: LD_INT 30
14991: DOUBLE
14992: EQUAL
14993: IFTRUE 14997
14995: GO 15022
14997: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14998: LD_ADDR_VAR 0 3
15002: PUSH
15003: LD_INT 20
15005: PPUSH
15006: LD_VAR 0 1
15010: PPUSH
15011: CALL_OW 321
15015: PUSH
15016: LD_INT 2
15018: EQUAL
15019: ST_TO_ADDR
15020: GO 15233
15022: LD_INT 28
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15036
15028: LD_INT 21
15030: DOUBLE
15031: EQUAL
15032: IFTRUE 15036
15034: GO 15061
15036: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15037: LD_ADDR_VAR 0 3
15041: PUSH
15042: LD_INT 21
15044: PPUSH
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 321
15054: PUSH
15055: LD_INT 2
15057: EQUAL
15058: ST_TO_ADDR
15059: GO 15233
15061: LD_INT 16
15063: DOUBLE
15064: EQUAL
15065: IFTRUE 15069
15067: GO 15094
15069: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15070: LD_ADDR_VAR 0 3
15074: PUSH
15075: LD_INT 84
15077: PPUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 321
15087: PUSH
15088: LD_INT 2
15090: EQUAL
15091: ST_TO_ADDR
15092: GO 15233
15094: LD_INT 19
15096: DOUBLE
15097: EQUAL
15098: IFTRUE 15108
15100: LD_INT 23
15102: DOUBLE
15103: EQUAL
15104: IFTRUE 15108
15106: GO 15133
15108: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_INT 83
15116: PPUSH
15117: LD_VAR 0 1
15121: PPUSH
15122: CALL_OW 321
15126: PUSH
15127: LD_INT 2
15129: EQUAL
15130: ST_TO_ADDR
15131: GO 15233
15133: LD_INT 17
15135: DOUBLE
15136: EQUAL
15137: IFTRUE 15141
15139: GO 15166
15141: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15142: LD_ADDR_VAR 0 3
15146: PUSH
15147: LD_INT 39
15149: PPUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 321
15159: PUSH
15160: LD_INT 2
15162: EQUAL
15163: ST_TO_ADDR
15164: GO 15233
15166: LD_INT 18
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15199
15174: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15175: LD_ADDR_VAR 0 3
15179: PUSH
15180: LD_INT 40
15182: PPUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 321
15192: PUSH
15193: LD_INT 2
15195: EQUAL
15196: ST_TO_ADDR
15197: GO 15233
15199: LD_INT 27
15201: DOUBLE
15202: EQUAL
15203: IFTRUE 15207
15205: GO 15232
15207: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15208: LD_ADDR_VAR 0 3
15212: PUSH
15213: LD_INT 35
15215: PPUSH
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 321
15225: PUSH
15226: LD_INT 2
15228: EQUAL
15229: ST_TO_ADDR
15230: GO 15233
15232: POP
// end ;
15233: LD_VAR 0 3
15237: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15238: LD_INT 0
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
// result := false ;
15251: LD_ADDR_VAR 0 6
15255: PUSH
15256: LD_INT 0
15258: ST_TO_ADDR
// if btype = b_depot then
15259: LD_VAR 0 2
15263: PUSH
15264: LD_INT 0
15266: EQUAL
15267: IFFALSE 15279
// begin result := true ;
15269: LD_ADDR_VAR 0 6
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// exit ;
15277: GO 16105
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15279: LD_VAR 0 1
15283: NOT
15284: PUSH
15285: LD_VAR 0 1
15289: PPUSH
15290: CALL_OW 266
15294: PUSH
15295: LD_INT 0
15297: PUSH
15298: LD_INT 1
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: IN
15305: NOT
15306: OR
15307: PUSH
15308: LD_VAR 0 2
15312: NOT
15313: OR
15314: PUSH
15315: LD_VAR 0 5
15319: PUSH
15320: LD_INT 0
15322: PUSH
15323: LD_INT 1
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 3
15331: PUSH
15332: LD_INT 4
15334: PUSH
15335: LD_INT 5
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: IN
15346: NOT
15347: OR
15348: PUSH
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_VAR 0 4
15358: PPUSH
15359: CALL_OW 488
15363: NOT
15364: OR
15365: IFFALSE 15369
// exit ;
15367: GO 16105
// side := GetSide ( depot ) ;
15369: LD_ADDR_VAR 0 9
15373: PUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 255
15383: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15384: LD_VAR 0 9
15388: PPUSH
15389: LD_VAR 0 2
15393: PPUSH
15394: CALL 14862 0 2
15398: NOT
15399: IFFALSE 15403
// exit ;
15401: GO 16105
// pom := GetBase ( depot ) ;
15403: LD_ADDR_VAR 0 10
15407: PUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 274
15417: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15418: LD_ADDR_VAR 0 11
15422: PUSH
15423: LD_VAR 0 2
15427: PPUSH
15428: LD_VAR 0 1
15432: PPUSH
15433: CALL_OW 248
15437: PPUSH
15438: CALL_OW 450
15442: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15443: LD_VAR 0 10
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 275
15455: PUSH
15456: LD_VAR 0 11
15460: PUSH
15461: LD_INT 1
15463: ARRAY
15464: GREATEREQUAL
15465: PUSH
15466: LD_VAR 0 10
15470: PPUSH
15471: LD_INT 2
15473: PPUSH
15474: CALL_OW 275
15478: PUSH
15479: LD_VAR 0 11
15483: PUSH
15484: LD_INT 2
15486: ARRAY
15487: GREATEREQUAL
15488: AND
15489: PUSH
15490: LD_VAR 0 10
15494: PPUSH
15495: LD_INT 3
15497: PPUSH
15498: CALL_OW 275
15502: PUSH
15503: LD_VAR 0 11
15507: PUSH
15508: LD_INT 3
15510: ARRAY
15511: GREATEREQUAL
15512: AND
15513: NOT
15514: IFFALSE 15518
// exit ;
15516: GO 16105
// if GetBType ( depot ) = b_depot then
15518: LD_VAR 0 1
15522: PPUSH
15523: CALL_OW 266
15527: PUSH
15528: LD_INT 0
15530: EQUAL
15531: IFFALSE 15543
// dist := 28 else
15533: LD_ADDR_VAR 0 14
15537: PUSH
15538: LD_INT 28
15540: ST_TO_ADDR
15541: GO 15551
// dist := 36 ;
15543: LD_ADDR_VAR 0 14
15547: PUSH
15548: LD_INT 36
15550: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15551: LD_VAR 0 1
15555: PPUSH
15556: LD_VAR 0 3
15560: PPUSH
15561: LD_VAR 0 4
15565: PPUSH
15566: CALL_OW 297
15570: PUSH
15571: LD_VAR 0 14
15575: GREATER
15576: IFFALSE 15580
// exit ;
15578: GO 16105
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15580: LD_ADDR_VAR 0 12
15584: PUSH
15585: LD_VAR 0 2
15589: PPUSH
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_VAR 0 4
15599: PPUSH
15600: LD_VAR 0 5
15604: PPUSH
15605: LD_VAR 0 1
15609: PPUSH
15610: CALL_OW 248
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL 16110 0 6
15622: ST_TO_ADDR
// if not hexes then
15623: LD_VAR 0 12
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 16105
// hex := GetHexInfo ( x , y ) ;
15632: LD_ADDR_VAR 0 15
15636: PUSH
15637: LD_VAR 0 3
15641: PPUSH
15642: LD_VAR 0 4
15646: PPUSH
15647: CALL_OW 546
15651: ST_TO_ADDR
// if hex [ 1 ] then
15652: LD_VAR 0 15
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: IFFALSE 15664
// exit ;
15662: GO 16105
// height := hex [ 2 ] ;
15664: LD_ADDR_VAR 0 13
15668: PUSH
15669: LD_VAR 0 15
15673: PUSH
15674: LD_INT 2
15676: ARRAY
15677: ST_TO_ADDR
// for i = 1 to hexes do
15678: LD_ADDR_VAR 0 7
15682: PUSH
15683: DOUBLE
15684: LD_INT 1
15686: DEC
15687: ST_TO_ADDR
15688: LD_VAR 0 12
15692: PUSH
15693: FOR_TO
15694: IFFALSE 16024
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15696: LD_VAR 0 12
15700: PUSH
15701: LD_VAR 0 7
15705: ARRAY
15706: PUSH
15707: LD_INT 1
15709: ARRAY
15710: PPUSH
15711: LD_VAR 0 12
15715: PUSH
15716: LD_VAR 0 7
15720: ARRAY
15721: PUSH
15722: LD_INT 2
15724: ARRAY
15725: PPUSH
15726: CALL_OW 488
15730: NOT
15731: PUSH
15732: LD_VAR 0 12
15736: PUSH
15737: LD_VAR 0 7
15741: ARRAY
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: LD_VAR 0 12
15751: PUSH
15752: LD_VAR 0 7
15756: ARRAY
15757: PUSH
15758: LD_INT 2
15760: ARRAY
15761: PPUSH
15762: CALL_OW 428
15766: PUSH
15767: LD_INT 0
15769: GREATER
15770: OR
15771: PUSH
15772: LD_VAR 0 12
15776: PUSH
15777: LD_VAR 0 7
15781: ARRAY
15782: PUSH
15783: LD_INT 1
15785: ARRAY
15786: PPUSH
15787: LD_VAR 0 12
15791: PUSH
15792: LD_VAR 0 7
15796: ARRAY
15797: PUSH
15798: LD_INT 2
15800: ARRAY
15801: PPUSH
15802: CALL_OW 351
15806: OR
15807: IFFALSE 15813
// exit ;
15809: POP
15810: POP
15811: GO 16105
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15813: LD_ADDR_VAR 0 8
15817: PUSH
15818: LD_VAR 0 12
15822: PUSH
15823: LD_VAR 0 7
15827: ARRAY
15828: PUSH
15829: LD_INT 1
15831: ARRAY
15832: PPUSH
15833: LD_VAR 0 12
15837: PUSH
15838: LD_VAR 0 7
15842: ARRAY
15843: PUSH
15844: LD_INT 2
15846: ARRAY
15847: PPUSH
15848: CALL_OW 546
15852: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15853: LD_VAR 0 8
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PUSH
15862: LD_VAR 0 8
15866: PUSH
15867: LD_INT 2
15869: ARRAY
15870: PUSH
15871: LD_VAR 0 13
15875: PUSH
15876: LD_INT 2
15878: PLUS
15879: GREATER
15880: OR
15881: PUSH
15882: LD_VAR 0 8
15886: PUSH
15887: LD_INT 2
15889: ARRAY
15890: PUSH
15891: LD_VAR 0 13
15895: PUSH
15896: LD_INT 2
15898: MINUS
15899: LESS
15900: OR
15901: PUSH
15902: LD_VAR 0 8
15906: PUSH
15907: LD_INT 3
15909: ARRAY
15910: PUSH
15911: LD_INT 0
15913: PUSH
15914: LD_INT 8
15916: PUSH
15917: LD_INT 9
15919: PUSH
15920: LD_INT 10
15922: PUSH
15923: LD_INT 11
15925: PUSH
15926: LD_INT 12
15928: PUSH
15929: LD_INT 13
15931: PUSH
15932: LD_INT 16
15934: PUSH
15935: LD_INT 17
15937: PUSH
15938: LD_INT 18
15940: PUSH
15941: LD_INT 19
15943: PUSH
15944: LD_INT 20
15946: PUSH
15947: LD_INT 21
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: IN
15965: NOT
15966: OR
15967: PUSH
15968: LD_VAR 0 8
15972: PUSH
15973: LD_INT 5
15975: ARRAY
15976: NOT
15977: OR
15978: PUSH
15979: LD_VAR 0 8
15983: PUSH
15984: LD_INT 6
15986: ARRAY
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: LD_INT 2
15993: PUSH
15994: LD_INT 7
15996: PUSH
15997: LD_INT 9
15999: PUSH
16000: LD_INT 10
16002: PUSH
16003: LD_INT 11
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: IN
16014: NOT
16015: OR
16016: IFFALSE 16022
// exit ;
16018: POP
16019: POP
16020: GO 16105
// end ;
16022: GO 15693
16024: POP
16025: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16026: LD_VAR 0 9
16030: PPUSH
16031: LD_VAR 0 3
16035: PPUSH
16036: LD_VAR 0 4
16040: PPUSH
16041: LD_INT 20
16043: PPUSH
16044: CALL 8028 0 4
16048: PUSH
16049: LD_INT 4
16051: ARRAY
16052: IFFALSE 16056
// exit ;
16054: GO 16105
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16056: LD_VAR 0 2
16060: PUSH
16061: LD_INT 29
16063: PUSH
16064: LD_INT 30
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: IN
16071: PUSH
16072: LD_VAR 0 3
16076: PPUSH
16077: LD_VAR 0 4
16081: PPUSH
16082: LD_VAR 0 9
16086: PPUSH
16087: CALL_OW 440
16091: NOT
16092: AND
16093: IFFALSE 16097
// exit ;
16095: GO 16105
// result := true ;
16097: LD_ADDR_VAR 0 6
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// end ;
16105: LD_VAR 0 6
16109: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
16150: PPUSH
16151: PPUSH
16152: PPUSH
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
16165: PPUSH
16166: PPUSH
16167: PPUSH
16168: PPUSH
16169: PPUSH
// result = [ ] ;
16170: LD_ADDR_VAR 0 7
16174: PUSH
16175: EMPTY
16176: ST_TO_ADDR
// temp_list = [ ] ;
16177: LD_ADDR_VAR 0 9
16181: PUSH
16182: EMPTY
16183: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16184: LD_VAR 0 4
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: LD_INT 3
16200: PUSH
16201: LD_INT 4
16203: PUSH
16204: LD_INT 5
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: IN
16215: NOT
16216: PUSH
16217: LD_VAR 0 1
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: IN
16232: PUSH
16233: LD_VAR 0 5
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: LD_INT 2
16243: PUSH
16244: LD_INT 3
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: IN
16252: NOT
16253: AND
16254: OR
16255: IFFALSE 16259
// exit ;
16257: GO 34650
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16259: LD_VAR 0 1
16263: PUSH
16264: LD_INT 6
16266: PUSH
16267: LD_INT 7
16269: PUSH
16270: LD_INT 8
16272: PUSH
16273: LD_INT 13
16275: PUSH
16276: LD_INT 12
16278: PUSH
16279: LD_INT 15
16281: PUSH
16282: LD_INT 11
16284: PUSH
16285: LD_INT 14
16287: PUSH
16288: LD_INT 10
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: IN
16302: IFFALSE 16312
// btype = b_lab ;
16304: LD_ADDR_VAR 0 1
16308: PUSH
16309: LD_INT 6
16311: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16312: LD_VAR 0 6
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: LD_INT 2
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: IN
16331: NOT
16332: PUSH
16333: LD_VAR 0 1
16337: PUSH
16338: LD_INT 0
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: LD_INT 2
16346: PUSH
16347: LD_INT 3
16349: PUSH
16350: LD_INT 6
16352: PUSH
16353: LD_INT 36
16355: PUSH
16356: LD_INT 4
16358: PUSH
16359: LD_INT 5
16361: PUSH
16362: LD_INT 31
16364: PUSH
16365: LD_INT 32
16367: PUSH
16368: LD_INT 33
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: IN
16384: NOT
16385: PUSH
16386: LD_VAR 0 6
16390: PUSH
16391: LD_INT 1
16393: EQUAL
16394: AND
16395: OR
16396: PUSH
16397: LD_VAR 0 1
16401: PUSH
16402: LD_INT 2
16404: PUSH
16405: LD_INT 3
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: IN
16412: NOT
16413: PUSH
16414: LD_VAR 0 6
16418: PUSH
16419: LD_INT 2
16421: EQUAL
16422: AND
16423: OR
16424: IFFALSE 16434
// mode = 0 ;
16426: LD_ADDR_VAR 0 6
16430: PUSH
16431: LD_INT 0
16433: ST_TO_ADDR
// case mode of 0 :
16434: LD_VAR 0 6
16438: PUSH
16439: LD_INT 0
16441: DOUBLE
16442: EQUAL
16443: IFTRUE 16447
16445: GO 27900
16447: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16448: LD_ADDR_VAR 0 11
16452: PUSH
16453: LD_INT 0
16455: PUSH
16456: LD_INT 0
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 0
16465: PUSH
16466: LD_INT 1
16468: NEG
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 0
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 1
16506: NEG
16507: PUSH
16508: LD_INT 0
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: LD_INT 1
16521: NEG
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 1
16529: NEG
16530: PUSH
16531: LD_INT 2
16533: NEG
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 0
16541: PUSH
16542: LD_INT 2
16544: NEG
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: LD_INT 1
16555: NEG
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: LD_INT 2
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 0
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 1
16583: NEG
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: LD_INT 3
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 0
16604: PUSH
16605: LD_INT 3
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PUSH
16616: LD_INT 2
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16641: LD_ADDR_VAR 0 12
16645: PUSH
16646: LD_INT 0
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 0
16658: PUSH
16659: LD_INT 1
16661: NEG
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 0
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 1
16699: NEG
16700: PUSH
16701: LD_INT 0
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 1
16710: NEG
16711: PUSH
16712: LD_INT 1
16714: NEG
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 1
16722: PUSH
16723: LD_INT 1
16725: NEG
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 2
16743: PUSH
16744: LD_INT 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 1
16753: NEG
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 2
16764: NEG
16765: PUSH
16766: LD_INT 0
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 2
16775: NEG
16776: PUSH
16777: LD_INT 1
16779: NEG
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 2
16787: NEG
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 3
16798: NEG
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 3
16809: NEG
16810: PUSH
16811: LD_INT 1
16813: NEG
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16837: LD_ADDR_VAR 0 13
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: LD_INT 0
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 0
16854: PUSH
16855: LD_INT 1
16857: NEG
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 1
16865: PUSH
16866: LD_INT 0
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 1
16875: PUSH
16876: LD_INT 1
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 0
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 1
16895: NEG
16896: PUSH
16897: LD_INT 0
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 1
16906: NEG
16907: PUSH
16908: LD_INT 1
16910: NEG
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 1
16918: NEG
16919: PUSH
16920: LD_INT 2
16922: NEG
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 1
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 1
16950: PUSH
16951: LD_INT 2
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 2
16960: NEG
16961: PUSH
16962: LD_INT 1
16964: NEG
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: LD_INT 2
16976: NEG
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 2
16984: NEG
16985: PUSH
16986: LD_INT 3
16988: NEG
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 3
16996: NEG
16997: PUSH
16998: LD_INT 2
17000: NEG
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 3
17008: NEG
17009: PUSH
17010: LD_INT 3
17012: NEG
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17036: LD_ADDR_VAR 0 14
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: LD_INT 1
17056: NEG
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 1
17064: PUSH
17065: LD_INT 0
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 1
17094: NEG
17095: PUSH
17096: LD_INT 0
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 1
17105: NEG
17106: PUSH
17107: LD_INT 1
17109: NEG
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PUSH
17119: LD_INT 2
17121: NEG
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 0
17129: PUSH
17130: LD_INT 2
17132: NEG
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: LD_INT 1
17143: NEG
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: LD_INT 2
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 1
17171: NEG
17172: PUSH
17173: LD_INT 1
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 1
17182: NEG
17183: PUSH
17184: LD_INT 3
17186: NEG
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: LD_INT 3
17197: NEG
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: LD_INT 2
17208: NEG
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17232: LD_ADDR_VAR 0 15
17236: PUSH
17237: LD_INT 0
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 0
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: NEG
17291: PUSH
17292: LD_INT 0
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: LD_INT 1
17305: NEG
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: LD_INT 1
17316: NEG
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: LD_INT 1
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 1
17344: NEG
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 2
17355: NEG
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 2
17366: NEG
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: LD_INT 1
17381: NEG
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: LD_INT 0
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 3
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17425: LD_ADDR_VAR 0 16
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 0
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 1
17483: NEG
17484: PUSH
17485: LD_INT 0
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 1
17494: NEG
17495: PUSH
17496: LD_INT 1
17498: NEG
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: LD_INT 2
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 2
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 2
17528: PUSH
17529: LD_INT 2
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 2
17548: NEG
17549: PUSH
17550: LD_INT 1
17552: NEG
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 2
17560: NEG
17561: PUSH
17562: LD_INT 2
17564: NEG
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 3
17572: PUSH
17573: LD_INT 2
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 2
17592: PUSH
17593: LD_INT 3
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17618: LD_ADDR_VAR 0 17
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 0
17635: PUSH
17636: LD_INT 1
17638: NEG
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 1
17646: PUSH
17647: LD_INT 0
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: PUSH
17657: LD_INT 1
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 0
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 1
17676: NEG
17677: PUSH
17678: LD_INT 0
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: NEG
17688: PUSH
17689: LD_INT 1
17691: NEG
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: LD_INT 2
17703: NEG
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: LD_INT 2
17714: NEG
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: LD_INT 1
17725: NEG
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 2
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 2
17753: PUSH
17754: LD_INT 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: NEG
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 2
17794: NEG
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 2
17805: NEG
17806: PUSH
17807: LD_INT 1
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 2
17817: NEG
17818: PUSH
17819: LD_INT 2
17821: NEG
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17848: LD_ADDR_VAR 0 18
17852: PUSH
17853: LD_INT 0
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 1
17906: NEG
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: NEG
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: NEG
17930: PUSH
17931: LD_INT 2
17933: NEG
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: LD_INT 2
17944: NEG
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: LD_INT 1
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: LD_INT 0
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: LD_INT 2
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 0
18003: PUSH
18004: LD_INT 2
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: LD_INT 1
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 2
18024: NEG
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 2
18035: NEG
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: LD_INT 2
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18078: LD_ADDR_VAR 0 19
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: LD_INT 2
18163: NEG
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: LD_INT 2
18174: NEG
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: PUSH
18224: LD_INT 2
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: LD_INT 2
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 2
18254: NEG
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 2
18265: NEG
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 2
18277: NEG
18278: PUSH
18279: LD_INT 2
18281: NEG
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18308: LD_ADDR_VAR 0 20
18312: PUSH
18313: LD_INT 0
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: LD_INT 1
18328: NEG
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: NEG
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: LD_INT 1
18381: NEG
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 1
18389: NEG
18390: PUSH
18391: LD_INT 2
18393: NEG
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 2
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: LD_INT 1
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 2
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 2
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 2
18484: NEG
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 2
18495: NEG
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 2
18507: NEG
18508: PUSH
18509: LD_INT 2
18511: NEG
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18538: LD_ADDR_VAR 0 21
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: NEG
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 2
18714: NEG
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 2
18725: NEG
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 2
18737: NEG
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18768: LD_ADDR_VAR 0 22
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: LD_INT 1
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: LD_INT 1
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: NEG
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: LD_INT 2
18853: NEG
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: NEG
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: NEG
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: NEG
18968: PUSH
18969: LD_INT 2
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18998: LD_ADDR_VAR 0 23
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 2
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: NEG
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: LD_INT 3
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 3
19225: NEG
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19278: LD_ADDR_VAR 0 24
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: NEG
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 2
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 2
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 2
19454: NEG
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: LD_INT 2
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 1
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 3
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19554: LD_ADDR_VAR 0 25
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: LD_INT 1
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: LD_INT 2
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: LD_INT 2
19650: NEG
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 2
19730: NEG
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 2
19741: NEG
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 3
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 3
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: LD_INT 3
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19828: LD_ADDR_VAR 0 26
19832: PUSH
19833: LD_INT 0
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 0
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 2
20015: NEG
20016: PUSH
20017: LD_INT 1
20019: NEG
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: NEG
20028: PUSH
20029: LD_INT 2
20031: NEG
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 2
20039: PUSH
20040: LD_INT 3
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: LD_INT 3
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20104: LD_ADDR_VAR 0 27
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: LD_INT 0
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: NEG
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: NEG
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 2
20291: NEG
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 2
20303: NEG
20304: PUSH
20305: LD_INT 2
20307: NEG
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: NEG
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 3
20337: NEG
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 3
20349: NEG
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20384: LD_ADDR_VAR 0 28
20388: PUSH
20389: LD_INT 0
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 1
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: LD_INT 1
20457: NEG
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: NEG
20466: PUSH
20467: LD_INT 2
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 2
20560: NEG
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: LD_INT 2
20587: NEG
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 2
20595: NEG
20596: PUSH
20597: LD_INT 3
20599: NEG
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 3
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 3
20619: NEG
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 3
20631: NEG
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20666: LD_ADDR_VAR 0 29
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: LD_INT 0
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: LD_INT 2
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 2
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 2
20856: NEG
20857: PUSH
20858: LD_INT 3
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 2
20868: PUSH
20869: LD_INT 1
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 3
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 3
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 1
20899: NEG
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 3
20910: NEG
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20945: LD_ADDR_VAR 0 30
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: LD_INT 1
20965: NEG
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 0
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 1
21003: NEG
21004: PUSH
21005: LD_INT 0
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: LD_INT 1
21018: NEG
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: LD_INT 2
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 0
21038: PUSH
21039: LD_INT 2
21041: NEG
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: LD_INT 1
21052: NEG
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 2
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: LD_INT 1
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 2
21122: NEG
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: PUSH
21136: LD_INT 3
21138: NEG
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 3
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 3
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: NEG
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 3
21188: NEG
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21223: LD_ADDR_VAR 0 31
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 2
21412: NEG
21413: PUSH
21414: LD_INT 3
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 3
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: LD_INT 3
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 3
21466: NEG
21467: PUSH
21468: LD_INT 2
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21501: LD_ADDR_VAR 0 32
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: LD_INT 1
21574: NEG
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: NEG
21583: PUSH
21584: LD_INT 2
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 2
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 0
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: NEG
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 2
21678: NEG
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 3
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: LD_INT 2
21705: NEG
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 3
21713: PUSH
21714: LD_INT 2
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 3
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 2
21733: NEG
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 3
21744: NEG
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21779: LD_ADDR_VAR 0 33
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 0
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 2
21934: NEG
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 2
21945: NEG
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: NEG
21958: PUSH
21959: LD_INT 2
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 2
21969: NEG
21970: PUSH
21971: LD_INT 3
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 1
22012: NEG
22013: PUSH
22014: LD_INT 2
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 3
22023: NEG
22024: PUSH
22025: LD_INT 2
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22058: LD_ADDR_VAR 0 34
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: LD_INT 2
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 1
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 2
22214: NEG
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: NEG
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 2
22237: NEG
22238: PUSH
22239: LD_INT 2
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 3
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 3
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 2
22282: PUSH
22283: LD_INT 3
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 3
22303: NEG
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22338: LD_ADDR_VAR 0 35
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: LD_INT 0
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22450: LD_ADDR_VAR 0 36
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: LD_INT 2
22535: NEG
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22562: LD_ADDR_VAR 0 37
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: NEG
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22674: LD_ADDR_VAR 0 38
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 2
22765: NEG
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22786: LD_ADDR_VAR 0 39
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: LD_INT 1
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: NEG
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: NEG
22868: PUSH
22869: LD_INT 2
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22898: LD_ADDR_VAR 0 40
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: LD_INT 1
22982: NEG
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23010: LD_ADDR_VAR 0 41
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: LD_INT 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: NEG
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: LD_INT 2
23192: NEG
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: LD_INT 3
23204: NEG
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: LD_INT 3
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 3
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 3
23284: NEG
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: NEG
23296: PUSH
23297: LD_INT 1
23299: NEG
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 3
23307: NEG
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 3
23319: NEG
23320: PUSH
23321: LD_INT 3
23323: NEG
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23360: LD_ADDR_VAR 0 42
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: LD_INT 2
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: NEG
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: LD_INT 2
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: LD_INT 3
23554: NEG
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: LD_INT 3
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 0
23574: PUSH
23575: LD_INT 3
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 2
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 3
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 2
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: LD_INT 3
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 3
23657: NEG
23658: PUSH
23659: LD_INT 2
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 3
23669: NEG
23670: PUSH
23671: LD_INT 3
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23710: LD_ADDR_VAR 0 43
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: NEG
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 2
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: LD_INT 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: NEG
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 2
23887: NEG
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: LD_INT 3
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 3
23914: NEG
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: LD_INT 2
23925: NEG
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 3
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 3
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: LD_INT 3
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 0
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 3
24006: NEG
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 3
24017: NEG
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24058: LD_ADDR_VAR 0 44
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: LD_INT 2
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: LD_INT 2
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 2
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: LD_INT 1
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: NEG
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: NEG
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 2
24248: NEG
24249: PUSH
24250: LD_INT 3
24252: NEG
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 2
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: LD_INT 0
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 3
24291: PUSH
24292: LD_INT 2
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 3
24301: PUSH
24302: LD_INT 3
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 3
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 3
24332: NEG
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 3
24343: NEG
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 3
24355: NEG
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 3
24367: NEG
24368: PUSH
24369: LD_INT 3
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24408: LD_ADDR_VAR 0 45
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: LD_INT 2
24493: NEG
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 2
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 2
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 2
24574: NEG
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: NEG
24587: PUSH
24588: LD_INT 2
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 2
24598: NEG
24599: PUSH
24600: LD_INT 3
24602: NEG
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: LD_INT 3
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: LD_INT 3
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 2
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 3
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 3
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 2
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 3
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: LD_INT 3
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 3
24705: NEG
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 3
24717: NEG
24718: PUSH
24719: LD_INT 3
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24758: LD_ADDR_VAR 0 46
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 1
24778: NEG
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 1
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: LD_INT 2
24843: NEG
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: LD_INT 3
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 3
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 2
24973: NEG
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 2
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 3
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 3
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 3
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 3
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 1
25032: NEG
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 2
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 3
25054: NEG
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 3
25065: NEG
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25106: LD_ADDR_VAR 0 47
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: NEG
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 2
25233: NEG
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25257: LD_ADDR_VAR 0 48
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25404: LD_ADDR_VAR 0 49
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25548: LD_ADDR_VAR 0 50
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25692: LD_ADDR_VAR 0 51
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: LD_INT 2
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 1
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25839: LD_ADDR_VAR 0 52
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: LD_INT 0
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: LD_INT 2
25924: NEG
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25990: LD_ADDR_VAR 0 53
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 2
26166: NEG
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 2
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 2
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26220: LD_ADDR_VAR 0 54
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 2
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 0
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: NEG
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 2
26419: NEG
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26450: LD_ADDR_VAR 0 55
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 2
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26680: LD_ADDR_VAR 0 56
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 2
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: NEG
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: NEG
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: NEG
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26910: LD_ADDR_VAR 0 57
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27140: LD_ADDR_VAR 0 58
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 2
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27370: LD_ADDR_VAR 0 59
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27458: LD_ADDR_VAR 0 60
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27546: LD_ADDR_VAR 0 61
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27634: LD_ADDR_VAR 0 62
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27722: LD_ADDR_VAR 0 63
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27810: LD_ADDR_VAR 0 64
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: ST_TO_ADDR
// end ; 1 :
27898: GO 33795
27900: LD_INT 1
27902: DOUBLE
27903: EQUAL
27904: IFTRUE 27908
27906: GO 30531
27908: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27909: LD_ADDR_VAR 0 11
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: LD_INT 3
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 3
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27953: LD_ADDR_VAR 0 12
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 1
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27994: LD_ADDR_VAR 0 13
27998: PUSH
27999: LD_INT 3
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: LD_INT 3
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: LD_INT 3
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28034: LD_ADDR_VAR 0 14
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 3
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28075: LD_ADDR_VAR 0 15
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 3
28093: NEG
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 3
28104: NEG
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28119: LD_ADDR_VAR 0 16
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: LD_INT 3
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 3
28138: NEG
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 3
28150: NEG
28151: PUSH
28152: LD_INT 3
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28165: LD_ADDR_VAR 0 17
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: LD_INT 3
28176: NEG
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 3
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28209: LD_ADDR_VAR 0 18
28213: PUSH
28214: LD_INT 2
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 3
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 3
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28250: LD_ADDR_VAR 0 19
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: LD_INT 2
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: LD_INT 3
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: LIST
28289: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28290: LD_ADDR_VAR 0 20
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 3
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28331: LD_ADDR_VAR 0 21
28335: PUSH
28336: LD_INT 2
28338: NEG
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 3
28349: NEG
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 3
28360: NEG
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28375: LD_ADDR_VAR 0 22
28379: PUSH
28380: LD_INT 2
28382: NEG
28383: PUSH
28384: LD_INT 3
28386: NEG
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 3
28394: NEG
28395: PUSH
28396: LD_INT 2
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 3
28406: NEG
28407: PUSH
28408: LD_INT 3
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28421: LD_ADDR_VAR 0 23
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: LD_INT 3
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 4
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: LD_INT 3
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28465: LD_ADDR_VAR 0 24
28469: PUSH
28470: LD_INT 3
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 3
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 4
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28506: LD_ADDR_VAR 0 25
28510: PUSH
28511: LD_INT 3
28513: PUSH
28514: LD_INT 3
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 4
28523: PUSH
28524: LD_INT 3
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 3
28533: PUSH
28534: LD_INT 4
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28546: LD_ADDR_VAR 0 26
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 4
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28587: LD_ADDR_VAR 0 27
28591: PUSH
28592: LD_INT 3
28594: NEG
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 3
28605: NEG
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 4
28616: NEG
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28631: LD_ADDR_VAR 0 28
28635: PUSH
28636: LD_INT 3
28638: NEG
28639: PUSH
28640: LD_INT 3
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 3
28650: NEG
28651: PUSH
28652: LD_INT 4
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 4
28662: NEG
28663: PUSH
28664: LD_INT 3
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28677: LD_ADDR_VAR 0 29
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: LD_INT 3
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: LD_INT 3
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 4
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 4
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: LD_INT 3
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: LD_INT 5
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 5
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 4
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 6
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: LD_INT 6
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 5
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28832: LD_ADDR_VAR 0 30
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 3
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 3
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 4
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 4
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 4
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 5
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 5
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 5
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 6
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 6
28953: PUSH
28954: LD_INT 1
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28975: LD_ADDR_VAR 0 31
28979: PUSH
28980: LD_INT 3
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 3
28992: PUSH
28993: LD_INT 3
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 3
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 4
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 4
29022: PUSH
29023: LD_INT 4
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 3
29032: PUSH
29033: LD_INT 4
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 5
29042: PUSH
29043: LD_INT 4
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 5
29052: PUSH
29053: LD_INT 5
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 4
29062: PUSH
29063: LD_INT 5
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 6
29072: PUSH
29073: LD_INT 5
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 6
29082: PUSH
29083: LD_INT 6
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 5
29092: PUSH
29093: LD_INT 6
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29114: LD_ADDR_VAR 0 32
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 3
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 4
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 4
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 3
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: LD_INT 5
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 5
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: LD_INT 4
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 6
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: LD_INT 6
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: LD_INT 5
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29257: LD_ADDR_VAR 0 33
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 3
29286: NEG
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 3
29298: NEG
29299: PUSH
29300: LD_INT 1
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 4
29309: NEG
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 4
29320: NEG
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 4
29332: NEG
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 5
29343: NEG
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 5
29354: NEG
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 5
29366: NEG
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 6
29377: NEG
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 6
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29412: LD_ADDR_VAR 0 34
29416: PUSH
29417: LD_INT 2
29419: NEG
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 3
29431: NEG
29432: PUSH
29433: LD_INT 2
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 3
29443: NEG
29444: PUSH
29445: LD_INT 3
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 3
29455: NEG
29456: PUSH
29457: LD_INT 4
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 4
29467: NEG
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 4
29479: NEG
29480: PUSH
29481: LD_INT 4
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 4
29491: NEG
29492: PUSH
29493: LD_INT 5
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 5
29503: NEG
29504: PUSH
29505: LD_INT 4
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 5
29515: NEG
29516: PUSH
29517: LD_INT 5
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 5
29527: NEG
29528: PUSH
29529: LD_INT 6
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 6
29539: NEG
29540: PUSH
29541: LD_INT 5
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 6
29551: NEG
29552: PUSH
29553: LD_INT 6
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29575: LD_ADDR_VAR 0 41
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 3
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29619: LD_ADDR_VAR 0 42
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29660: LD_ADDR_VAR 0 43
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: LD_INT 3
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29700: LD_ADDR_VAR 0 44
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29741: LD_ADDR_VAR 0 45
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: NEG
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29785: LD_ADDR_VAR 0 46
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: NEG
29805: PUSH
29806: LD_INT 3
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 3
29816: NEG
29817: PUSH
29818: LD_INT 2
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29831: LD_ADDR_VAR 0 47
29835: PUSH
29836: LD_INT 2
29838: NEG
29839: PUSH
29840: LD_INT 3
29842: NEG
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: LD_INT 3
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29864: LD_ADDR_VAR 0 48
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29895: LD_ADDR_VAR 0 49
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29924: LD_ADDR_VAR 0 50
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: LD_INT 3
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29953: LD_ADDR_VAR 0 51
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29984: LD_ADDR_VAR 0 52
29988: PUSH
29989: LD_INT 3
29991: NEG
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 3
30003: NEG
30004: PUSH
30005: LD_INT 2
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30017: LD_ADDR_VAR 0 53
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 3
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: LD_INT 3
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: LD_INT 2
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30061: LD_ADDR_VAR 0 54
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: LIST
30101: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30102: LD_ADDR_VAR 0 55
30106: PUSH
30107: LD_INT 3
30109: PUSH
30110: LD_INT 2
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: LD_INT 3
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 3
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30142: LD_ADDR_VAR 0 56
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: LD_INT 2
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30183: LD_ADDR_VAR 0 57
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 3
30212: NEG
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30227: LD_ADDR_VAR 0 58
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: LD_INT 3
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: LD_INT 2
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 3
30258: NEG
30259: PUSH
30260: LD_INT 3
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30273: LD_ADDR_VAR 0 59
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 2
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: LD_INT 2
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30317: LD_ADDR_VAR 0 60
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30358: LD_ADDR_VAR 0 61
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30398: LD_ADDR_VAR 0 62
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30439: LD_ADDR_VAR 0 63
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 2
30468: NEG
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30483: LD_ADDR_VAR 0 64
30487: PUSH
30488: LD_INT 1
30490: NEG
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: NEG
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: LD_INT 2
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: LIST
30528: ST_TO_ADDR
// end ; 2 :
30529: GO 33795
30531: LD_INT 2
30533: DOUBLE
30534: EQUAL
30535: IFTRUE 30539
30537: GO 33794
30539: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30540: LD_ADDR_VAR 0 29
30544: PUSH
30545: LD_INT 4
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 4
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: PUSH
30620: LD_INT 2
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 5
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 4
30660: PUSH
30661: LD_INT 3
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 4
30670: PUSH
30671: LD_INT 4
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 3
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 4
30710: PUSH
30711: LD_INT 2
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 4
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 4
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 3
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: LD_INT 4
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: LD_INT 5
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 5
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 4
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 5
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: NEG
30813: PUSH
30814: LD_INT 3
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: NEG
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 3
30834: NEG
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: NEG
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 3
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 4
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 4
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 4
30902: NEG
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 4
30925: NEG
30926: PUSH
30927: LD_INT 4
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 4
30937: NEG
30938: PUSH
30939: LD_INT 5
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 3
30949: NEG
30950: PUSH
30951: LD_INT 4
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: LD_INT 3
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 4
30973: NEG
30974: PUSH
30975: LD_INT 3
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 5
30985: NEG
30986: PUSH
30987: LD_INT 4
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 5
30997: NEG
30998: PUSH
30999: LD_INT 5
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: LD_INT 5
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 5
31021: NEG
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31078: LD_ADDR_VAR 0 30
31082: PUSH
31083: LD_INT 4
31085: PUSH
31086: LD_INT 4
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 4
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 5
31105: PUSH
31106: LD_INT 4
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 5
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 4
31125: PUSH
31126: LD_INT 5
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 4
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 5
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 0
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: LD_INT 4
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: LD_INT 4
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: LD_INT 4
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 4
31268: NEG
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 4
31279: NEG
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 3
31291: NEG
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 3
31302: NEG
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 4
31313: NEG
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 5
31324: NEG
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 5
31335: NEG
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 5
31347: NEG
31348: PUSH
31349: LD_INT 2
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 3
31359: NEG
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 3
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 3
31382: NEG
31383: PUSH
31384: LD_INT 4
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: NEG
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 2
31406: NEG
31407: PUSH
31408: LD_INT 2
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 3
31418: NEG
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 4
31430: NEG
31431: PUSH
31432: LD_INT 3
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 4
31442: NEG
31443: PUSH
31444: LD_INT 4
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: LD_INT 4
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 4
31466: NEG
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 4
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 5
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 4
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: LD_INT 3
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 3
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 4
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 5
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: LD_INT 5
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31625: LD_ADDR_VAR 0 31
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 4
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: LD_INT 4
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 5
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: LD_INT 5
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: LD_INT 4
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 2
31704: PUSH
31705: LD_INT 5
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: LD_INT 3
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: NEG
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 3
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 4
31781: NEG
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 4
31792: NEG
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 4
31804: NEG
31805: PUSH
31806: LD_INT 2
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 4
31827: NEG
31828: PUSH
31829: LD_INT 4
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 4
31839: NEG
31840: PUSH
31841: LD_INT 5
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 3
31851: NEG
31852: PUSH
31853: LD_INT 4
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: LD_INT 3
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 4
31875: NEG
31876: PUSH
31877: LD_INT 3
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 5
31887: NEG
31888: PUSH
31889: LD_INT 4
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 5
31899: NEG
31900: PUSH
31901: LD_INT 5
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: LD_INT 5
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 5
31923: NEG
31924: PUSH
31925: LD_INT 3
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: LD_INT 4
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: LD_INT 3
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: LD_INT 3
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 4
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: LD_INT 4
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 4
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 4
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 5
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 5
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 4
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 5
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32175: LD_ADDR_VAR 0 32
32179: PUSH
32180: LD_INT 4
32182: NEG
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 4
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 3
32205: NEG
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 3
32216: NEG
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 4
32227: NEG
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 5
32238: NEG
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 5
32249: NEG
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 5
32261: NEG
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 3
32273: NEG
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 3
32284: NEG
32285: PUSH
32286: LD_INT 3
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 3
32296: NEG
32297: PUSH
32298: LD_INT 4
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: LD_INT 2
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: LD_INT 2
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 4
32344: NEG
32345: PUSH
32346: LD_INT 3
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 4
32356: NEG
32357: PUSH
32358: LD_INT 4
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: LD_INT 4
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 4
32380: NEG
32381: PUSH
32382: LD_INT 2
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 4
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: LD_INT 5
32406: NEG
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 4
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 3
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 3
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: LD_INT 4
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 5
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: LD_INT 5
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 4
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 4
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 3
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 2
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 4
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 4
32587: PUSH
32588: LD_INT 4
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 4
32597: PUSH
32598: LD_INT 3
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 5
32607: PUSH
32608: LD_INT 4
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 5
32617: PUSH
32618: LD_INT 5
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 4
32627: PUSH
32628: LD_INT 5
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 3
32637: PUSH
32638: LD_INT 4
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: LD_INT 3
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: LD_INT 5
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32722: LD_ADDR_VAR 0 33
32726: PUSH
32727: LD_INT 4
32729: NEG
32730: PUSH
32731: LD_INT 4
32733: NEG
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 4
32741: NEG
32742: PUSH
32743: LD_INT 5
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 3
32765: NEG
32766: PUSH
32767: LD_INT 3
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 4
32777: NEG
32778: PUSH
32779: LD_INT 3
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 5
32789: NEG
32790: PUSH
32791: LD_INT 4
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 5
32801: NEG
32802: PUSH
32803: LD_INT 5
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 3
32813: NEG
32814: PUSH
32815: LD_INT 5
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 5
32825: NEG
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 3
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 4
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: LD_INT 3
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: NEG
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: LD_INT 4
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: LD_INT 4
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 4
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 4
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 5
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 4
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 5
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 3
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: LD_INT 2
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 4
33052: PUSH
33053: LD_INT 3
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 4
33062: PUSH
33063: LD_INT 4
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: LD_INT 4
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 4
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 4
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 4
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 5
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: LD_INT 4
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: LD_INT 5
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 2
33204: NEG
33205: PUSH
33206: LD_INT 3
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33260: LD_ADDR_VAR 0 34
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 4
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 5
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: LD_INT 4
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 3
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: LD_INT 4
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: LD_INT 5
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 3
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: LD_INT 5
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 4
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 4
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 4
33462: PUSH
33463: LD_INT 4
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 4
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 5
33482: PUSH
33483: LD_INT 4
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 5
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 4
33502: PUSH
33503: LD_INT 5
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 3
33512: PUSH
33513: LD_INT 4
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 3
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 5
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 3
33542: PUSH
33543: LD_INT 5
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 4
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: LD_INT 3
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 4
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 4
33645: NEG
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 4
33656: NEG
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 3
33679: NEG
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 4
33690: NEG
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 5
33701: NEG
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 5
33712: NEG
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 5
33724: NEG
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 3
33736: NEG
33737: PUSH
33738: LD_INT 2
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: ST_TO_ADDR
// end ; end ;
33792: GO 33795
33794: POP
// case btype of b_depot , b_warehouse :
33795: LD_VAR 0 1
33799: PUSH
33800: LD_INT 0
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33814
33806: LD_INT 1
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33814
33812: GO 34015
33814: POP
// case nation of nation_american :
33815: LD_VAR 0 5
33819: PUSH
33820: LD_INT 1
33822: DOUBLE
33823: EQUAL
33824: IFTRUE 33828
33826: GO 33884
33828: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_VAR 0 11
33838: PUSH
33839: LD_VAR 0 12
33843: PUSH
33844: LD_VAR 0 13
33848: PUSH
33849: LD_VAR 0 14
33853: PUSH
33854: LD_VAR 0 15
33858: PUSH
33859: LD_VAR 0 16
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: PUSH
33872: LD_VAR 0 4
33876: PUSH
33877: LD_INT 1
33879: PLUS
33880: ARRAY
33881: ST_TO_ADDR
33882: GO 34013
33884: LD_INT 2
33886: DOUBLE
33887: EQUAL
33888: IFTRUE 33892
33890: GO 33948
33892: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33893: LD_ADDR_VAR 0 9
33897: PUSH
33898: LD_VAR 0 17
33902: PUSH
33903: LD_VAR 0 18
33907: PUSH
33908: LD_VAR 0 19
33912: PUSH
33913: LD_VAR 0 20
33917: PUSH
33918: LD_VAR 0 21
33922: PUSH
33923: LD_VAR 0 22
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: PUSH
33936: LD_VAR 0 4
33940: PUSH
33941: LD_INT 1
33943: PLUS
33944: ARRAY
33945: ST_TO_ADDR
33946: GO 34013
33948: LD_INT 3
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 34012
33956: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33957: LD_ADDR_VAR 0 9
33961: PUSH
33962: LD_VAR 0 23
33966: PUSH
33967: LD_VAR 0 24
33971: PUSH
33972: LD_VAR 0 25
33976: PUSH
33977: LD_VAR 0 26
33981: PUSH
33982: LD_VAR 0 27
33986: PUSH
33987: LD_VAR 0 28
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: PUSH
34000: LD_VAR 0 4
34004: PUSH
34005: LD_INT 1
34007: PLUS
34008: ARRAY
34009: ST_TO_ADDR
34010: GO 34013
34012: POP
34013: GO 34568
34015: LD_INT 2
34017: DOUBLE
34018: EQUAL
34019: IFTRUE 34029
34021: LD_INT 3
34023: DOUBLE
34024: EQUAL
34025: IFTRUE 34029
34027: GO 34085
34029: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34030: LD_ADDR_VAR 0 9
34034: PUSH
34035: LD_VAR 0 29
34039: PUSH
34040: LD_VAR 0 30
34044: PUSH
34045: LD_VAR 0 31
34049: PUSH
34050: LD_VAR 0 32
34054: PUSH
34055: LD_VAR 0 33
34059: PUSH
34060: LD_VAR 0 34
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: PUSH
34073: LD_VAR 0 4
34077: PUSH
34078: LD_INT 1
34080: PLUS
34081: ARRAY
34082: ST_TO_ADDR
34083: GO 34568
34085: LD_INT 16
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34147
34091: LD_INT 17
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34147
34097: LD_INT 18
34099: DOUBLE
34100: EQUAL
34101: IFTRUE 34147
34103: LD_INT 19
34105: DOUBLE
34106: EQUAL
34107: IFTRUE 34147
34109: LD_INT 22
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34147
34115: LD_INT 20
34117: DOUBLE
34118: EQUAL
34119: IFTRUE 34147
34121: LD_INT 21
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34147
34127: LD_INT 23
34129: DOUBLE
34130: EQUAL
34131: IFTRUE 34147
34133: LD_INT 24
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34147
34139: LD_INT 25
34141: DOUBLE
34142: EQUAL
34143: IFTRUE 34147
34145: GO 34203
34147: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34148: LD_ADDR_VAR 0 9
34152: PUSH
34153: LD_VAR 0 35
34157: PUSH
34158: LD_VAR 0 36
34162: PUSH
34163: LD_VAR 0 37
34167: PUSH
34168: LD_VAR 0 38
34172: PUSH
34173: LD_VAR 0 39
34177: PUSH
34178: LD_VAR 0 40
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: PUSH
34191: LD_VAR 0 4
34195: PUSH
34196: LD_INT 1
34198: PLUS
34199: ARRAY
34200: ST_TO_ADDR
34201: GO 34568
34203: LD_INT 6
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34259
34209: LD_INT 7
34211: DOUBLE
34212: EQUAL
34213: IFTRUE 34259
34215: LD_INT 8
34217: DOUBLE
34218: EQUAL
34219: IFTRUE 34259
34221: LD_INT 13
34223: DOUBLE
34224: EQUAL
34225: IFTRUE 34259
34227: LD_INT 12
34229: DOUBLE
34230: EQUAL
34231: IFTRUE 34259
34233: LD_INT 15
34235: DOUBLE
34236: EQUAL
34237: IFTRUE 34259
34239: LD_INT 11
34241: DOUBLE
34242: EQUAL
34243: IFTRUE 34259
34245: LD_INT 14
34247: DOUBLE
34248: EQUAL
34249: IFTRUE 34259
34251: LD_INT 10
34253: DOUBLE
34254: EQUAL
34255: IFTRUE 34259
34257: GO 34315
34259: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34260: LD_ADDR_VAR 0 9
34264: PUSH
34265: LD_VAR 0 41
34269: PUSH
34270: LD_VAR 0 42
34274: PUSH
34275: LD_VAR 0 43
34279: PUSH
34280: LD_VAR 0 44
34284: PUSH
34285: LD_VAR 0 45
34289: PUSH
34290: LD_VAR 0 46
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: PUSH
34303: LD_VAR 0 4
34307: PUSH
34308: LD_INT 1
34310: PLUS
34311: ARRAY
34312: ST_TO_ADDR
34313: GO 34568
34315: LD_INT 36
34317: DOUBLE
34318: EQUAL
34319: IFTRUE 34323
34321: GO 34379
34323: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34324: LD_ADDR_VAR 0 9
34328: PUSH
34329: LD_VAR 0 47
34333: PUSH
34334: LD_VAR 0 48
34338: PUSH
34339: LD_VAR 0 49
34343: PUSH
34344: LD_VAR 0 50
34348: PUSH
34349: LD_VAR 0 51
34353: PUSH
34354: LD_VAR 0 52
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: PUSH
34367: LD_VAR 0 4
34371: PUSH
34372: LD_INT 1
34374: PLUS
34375: ARRAY
34376: ST_TO_ADDR
34377: GO 34568
34379: LD_INT 4
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34405
34385: LD_INT 5
34387: DOUBLE
34388: EQUAL
34389: IFTRUE 34405
34391: LD_INT 34
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34405
34397: LD_INT 37
34399: DOUBLE
34400: EQUAL
34401: IFTRUE 34405
34403: GO 34461
34405: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34406: LD_ADDR_VAR 0 9
34410: PUSH
34411: LD_VAR 0 53
34415: PUSH
34416: LD_VAR 0 54
34420: PUSH
34421: LD_VAR 0 55
34425: PUSH
34426: LD_VAR 0 56
34430: PUSH
34431: LD_VAR 0 57
34435: PUSH
34436: LD_VAR 0 58
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: PUSH
34449: LD_VAR 0 4
34453: PUSH
34454: LD_INT 1
34456: PLUS
34457: ARRAY
34458: ST_TO_ADDR
34459: GO 34568
34461: LD_INT 31
34463: DOUBLE
34464: EQUAL
34465: IFTRUE 34511
34467: LD_INT 32
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34511
34473: LD_INT 33
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34511
34479: LD_INT 27
34481: DOUBLE
34482: EQUAL
34483: IFTRUE 34511
34485: LD_INT 26
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34511
34491: LD_INT 28
34493: DOUBLE
34494: EQUAL
34495: IFTRUE 34511
34497: LD_INT 29
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34511
34503: LD_INT 30
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34511
34509: GO 34567
34511: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34512: LD_ADDR_VAR 0 9
34516: PUSH
34517: LD_VAR 0 59
34521: PUSH
34522: LD_VAR 0 60
34526: PUSH
34527: LD_VAR 0 61
34531: PUSH
34532: LD_VAR 0 62
34536: PUSH
34537: LD_VAR 0 63
34541: PUSH
34542: LD_VAR 0 64
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: PUSH
34555: LD_VAR 0 4
34559: PUSH
34560: LD_INT 1
34562: PLUS
34563: ARRAY
34564: ST_TO_ADDR
34565: GO 34568
34567: POP
// temp_list2 = [ ] ;
34568: LD_ADDR_VAR 0 10
34572: PUSH
34573: EMPTY
34574: ST_TO_ADDR
// for i in temp_list do
34575: LD_ADDR_VAR 0 8
34579: PUSH
34580: LD_VAR 0 9
34584: PUSH
34585: FOR_IN
34586: IFFALSE 34638
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34588: LD_ADDR_VAR 0 10
34592: PUSH
34593: LD_VAR 0 10
34597: PUSH
34598: LD_VAR 0 8
34602: PUSH
34603: LD_INT 1
34605: ARRAY
34606: PUSH
34607: LD_VAR 0 2
34611: PLUS
34612: PUSH
34613: LD_VAR 0 8
34617: PUSH
34618: LD_INT 2
34620: ARRAY
34621: PUSH
34622: LD_VAR 0 3
34626: PLUS
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: EMPTY
34633: LIST
34634: ADD
34635: ST_TO_ADDR
34636: GO 34585
34638: POP
34639: POP
// result = temp_list2 ;
34640: LD_ADDR_VAR 0 7
34644: PUSH
34645: LD_VAR 0 10
34649: ST_TO_ADDR
// end ;
34650: LD_VAR 0 7
34654: RET
// export function EnemyInRange ( unit , dist ) ; begin
34655: LD_INT 0
34657: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 255
34672: PPUSH
34673: LD_VAR 0 1
34677: PPUSH
34678: CALL_OW 250
34682: PPUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 251
34692: PPUSH
34693: LD_VAR 0 2
34697: PPUSH
34698: CALL 8028 0 4
34702: PUSH
34703: LD_INT 4
34705: ARRAY
34706: ST_TO_ADDR
// end ;
34707: LD_VAR 0 3
34711: RET
// export function PlayerSeeMe ( unit ) ; begin
34712: LD_INT 0
34714: PPUSH
// result := See ( your_side , unit ) ;
34715: LD_ADDR_VAR 0 2
34719: PUSH
34720: LD_OWVAR 2
34724: PPUSH
34725: LD_VAR 0 1
34729: PPUSH
34730: CALL_OW 292
34734: ST_TO_ADDR
// end ;
34735: LD_VAR 0 2
34739: RET
// export function ReverseDir ( unit ) ; begin
34740: LD_INT 0
34742: PPUSH
// if not unit then
34743: LD_VAR 0 1
34747: NOT
34748: IFFALSE 34752
// exit ;
34750: GO 34775
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34752: LD_ADDR_VAR 0 2
34756: PUSH
34757: LD_VAR 0 1
34761: PPUSH
34762: CALL_OW 254
34766: PUSH
34767: LD_INT 3
34769: PLUS
34770: PUSH
34771: LD_INT 6
34773: MOD
34774: ST_TO_ADDR
// end ;
34775: LD_VAR 0 2
34779: RET
// export function ReverseArray ( array ) ; var i ; begin
34780: LD_INT 0
34782: PPUSH
34783: PPUSH
// if not array then
34784: LD_VAR 0 1
34788: NOT
34789: IFFALSE 34793
// exit ;
34791: GO 34848
// result := [ ] ;
34793: LD_ADDR_VAR 0 2
34797: PUSH
34798: EMPTY
34799: ST_TO_ADDR
// for i := array downto 1 do
34800: LD_ADDR_VAR 0 3
34804: PUSH
34805: DOUBLE
34806: LD_VAR 0 1
34810: INC
34811: ST_TO_ADDR
34812: LD_INT 1
34814: PUSH
34815: FOR_DOWNTO
34816: IFFALSE 34846
// result := Join ( result , array [ i ] ) ;
34818: LD_ADDR_VAR 0 2
34822: PUSH
34823: LD_VAR 0 2
34827: PPUSH
34828: LD_VAR 0 1
34832: PUSH
34833: LD_VAR 0 3
34837: ARRAY
34838: PPUSH
34839: CALL 39513 0 2
34843: ST_TO_ADDR
34844: GO 34815
34846: POP
34847: POP
// end ;
34848: LD_VAR 0 2
34852: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34853: LD_INT 0
34855: PPUSH
34856: PPUSH
34857: PPUSH
34858: PPUSH
34859: PPUSH
34860: PPUSH
// if not unit or not hexes then
34861: LD_VAR 0 1
34865: NOT
34866: PUSH
34867: LD_VAR 0 2
34871: NOT
34872: OR
34873: IFFALSE 34877
// exit ;
34875: GO 35000
// dist := 9999 ;
34877: LD_ADDR_VAR 0 5
34881: PUSH
34882: LD_INT 9999
34884: ST_TO_ADDR
// for i = 1 to hexes do
34885: LD_ADDR_VAR 0 4
34889: PUSH
34890: DOUBLE
34891: LD_INT 1
34893: DEC
34894: ST_TO_ADDR
34895: LD_VAR 0 2
34899: PUSH
34900: FOR_TO
34901: IFFALSE 34988
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34903: LD_ADDR_VAR 0 6
34907: PUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: LD_VAR 0 2
34917: PUSH
34918: LD_VAR 0 4
34922: ARRAY
34923: PUSH
34924: LD_INT 1
34926: ARRAY
34927: PPUSH
34928: LD_VAR 0 2
34932: PUSH
34933: LD_VAR 0 4
34937: ARRAY
34938: PUSH
34939: LD_INT 2
34941: ARRAY
34942: PPUSH
34943: CALL_OW 297
34947: ST_TO_ADDR
// if tdist < dist then
34948: LD_VAR 0 6
34952: PUSH
34953: LD_VAR 0 5
34957: LESS
34958: IFFALSE 34986
// begin hex := hexes [ i ] ;
34960: LD_ADDR_VAR 0 8
34964: PUSH
34965: LD_VAR 0 2
34969: PUSH
34970: LD_VAR 0 4
34974: ARRAY
34975: ST_TO_ADDR
// dist := tdist ;
34976: LD_ADDR_VAR 0 5
34980: PUSH
34981: LD_VAR 0 6
34985: ST_TO_ADDR
// end ; end ;
34986: GO 34900
34988: POP
34989: POP
// result := hex ;
34990: LD_ADDR_VAR 0 3
34994: PUSH
34995: LD_VAR 0 8
34999: ST_TO_ADDR
// end ;
35000: LD_VAR 0 3
35004: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35005: LD_INT 0
35007: PPUSH
35008: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35009: LD_VAR 0 1
35013: NOT
35014: PUSH
35015: LD_VAR 0 1
35019: PUSH
35020: LD_INT 21
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 23
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PPUSH
35044: CALL_OW 69
35048: IN
35049: NOT
35050: OR
35051: IFFALSE 35055
// exit ;
35053: GO 35102
// for i = 1 to 3 do
35055: LD_ADDR_VAR 0 3
35059: PUSH
35060: DOUBLE
35061: LD_INT 1
35063: DEC
35064: ST_TO_ADDR
35065: LD_INT 3
35067: PUSH
35068: FOR_TO
35069: IFFALSE 35100
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL_OW 250
35080: PPUSH
35081: LD_VAR 0 1
35085: PPUSH
35086: CALL_OW 251
35090: PPUSH
35091: LD_INT 1
35093: PPUSH
35094: CALL_OW 453
35098: GO 35068
35100: POP
35101: POP
// end ;
35102: LD_VAR 0 2
35106: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35107: LD_INT 0
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
// if not unit or not enemy_unit then
35115: LD_VAR 0 1
35119: NOT
35120: PUSH
35121: LD_VAR 0 2
35125: NOT
35126: OR
35127: IFFALSE 35131
// exit ;
35129: GO 35598
// if GetLives ( i ) < 250 then
35131: LD_VAR 0 4
35135: PPUSH
35136: CALL_OW 256
35140: PUSH
35141: LD_INT 250
35143: LESS
35144: IFFALSE 35157
// begin ComAutodestruct ( i ) ;
35146: LD_VAR 0 4
35150: PPUSH
35151: CALL 35005 0 1
// exit ;
35155: GO 35598
// end ; x := GetX ( enemy_unit ) ;
35157: LD_ADDR_VAR 0 7
35161: PUSH
35162: LD_VAR 0 2
35166: PPUSH
35167: CALL_OW 250
35171: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35172: LD_ADDR_VAR 0 8
35176: PUSH
35177: LD_VAR 0 2
35181: PPUSH
35182: CALL_OW 251
35186: ST_TO_ADDR
// if not x or not y then
35187: LD_VAR 0 7
35191: NOT
35192: PUSH
35193: LD_VAR 0 8
35197: NOT
35198: OR
35199: IFFALSE 35203
// exit ;
35201: GO 35598
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35203: LD_ADDR_VAR 0 6
35207: PUSH
35208: LD_VAR 0 7
35212: PPUSH
35213: LD_INT 0
35215: PPUSH
35216: LD_INT 4
35218: PPUSH
35219: CALL_OW 272
35223: PUSH
35224: LD_VAR 0 8
35228: PPUSH
35229: LD_INT 0
35231: PPUSH
35232: LD_INT 4
35234: PPUSH
35235: CALL_OW 273
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_VAR 0 7
35248: PPUSH
35249: LD_INT 1
35251: PPUSH
35252: LD_INT 4
35254: PPUSH
35255: CALL_OW 272
35259: PUSH
35260: LD_VAR 0 8
35264: PPUSH
35265: LD_INT 1
35267: PPUSH
35268: LD_INT 4
35270: PPUSH
35271: CALL_OW 273
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_VAR 0 7
35284: PPUSH
35285: LD_INT 2
35287: PPUSH
35288: LD_INT 4
35290: PPUSH
35291: CALL_OW 272
35295: PUSH
35296: LD_VAR 0 8
35300: PPUSH
35301: LD_INT 2
35303: PPUSH
35304: LD_INT 4
35306: PPUSH
35307: CALL_OW 273
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_VAR 0 7
35320: PPUSH
35321: LD_INT 3
35323: PPUSH
35324: LD_INT 4
35326: PPUSH
35327: CALL_OW 272
35331: PUSH
35332: LD_VAR 0 8
35336: PPUSH
35337: LD_INT 3
35339: PPUSH
35340: LD_INT 4
35342: PPUSH
35343: CALL_OW 273
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_VAR 0 7
35356: PPUSH
35357: LD_INT 4
35359: PPUSH
35360: LD_INT 4
35362: PPUSH
35363: CALL_OW 272
35367: PUSH
35368: LD_VAR 0 8
35372: PPUSH
35373: LD_INT 4
35375: PPUSH
35376: LD_INT 4
35378: PPUSH
35379: CALL_OW 273
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_VAR 0 7
35392: PPUSH
35393: LD_INT 5
35395: PPUSH
35396: LD_INT 4
35398: PPUSH
35399: CALL_OW 272
35403: PUSH
35404: LD_VAR 0 8
35408: PPUSH
35409: LD_INT 5
35411: PPUSH
35412: LD_INT 4
35414: PPUSH
35415: CALL_OW 273
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: ST_TO_ADDR
// for i = tmp downto 1 do
35432: LD_ADDR_VAR 0 4
35436: PUSH
35437: DOUBLE
35438: LD_VAR 0 6
35442: INC
35443: ST_TO_ADDR
35444: LD_INT 1
35446: PUSH
35447: FOR_DOWNTO
35448: IFFALSE 35549
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35450: LD_VAR 0 6
35454: PUSH
35455: LD_VAR 0 4
35459: ARRAY
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PPUSH
35465: LD_VAR 0 6
35469: PUSH
35470: LD_VAR 0 4
35474: ARRAY
35475: PUSH
35476: LD_INT 2
35478: ARRAY
35479: PPUSH
35480: CALL_OW 488
35484: NOT
35485: PUSH
35486: LD_VAR 0 6
35490: PUSH
35491: LD_VAR 0 4
35495: ARRAY
35496: PUSH
35497: LD_INT 1
35499: ARRAY
35500: PPUSH
35501: LD_VAR 0 6
35505: PUSH
35506: LD_VAR 0 4
35510: ARRAY
35511: PUSH
35512: LD_INT 2
35514: ARRAY
35515: PPUSH
35516: CALL_OW 428
35520: PUSH
35521: LD_INT 0
35523: NONEQUAL
35524: OR
35525: IFFALSE 35547
// tmp := Delete ( tmp , i ) ;
35527: LD_ADDR_VAR 0 6
35531: PUSH
35532: LD_VAR 0 6
35536: PPUSH
35537: LD_VAR 0 4
35541: PPUSH
35542: CALL_OW 3
35546: ST_TO_ADDR
35547: GO 35447
35549: POP
35550: POP
// j := GetClosestHex ( unit , tmp ) ;
35551: LD_ADDR_VAR 0 5
35555: PUSH
35556: LD_VAR 0 1
35560: PPUSH
35561: LD_VAR 0 6
35565: PPUSH
35566: CALL 34853 0 2
35570: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35571: LD_VAR 0 1
35575: PPUSH
35576: LD_VAR 0 5
35580: PUSH
35581: LD_INT 1
35583: ARRAY
35584: PPUSH
35585: LD_VAR 0 5
35589: PUSH
35590: LD_INT 2
35592: ARRAY
35593: PPUSH
35594: CALL_OW 111
// end ;
35598: LD_VAR 0 3
35602: RET
// export function PrepareApemanSoldier ( ) ; begin
35603: LD_INT 0
35605: PPUSH
// uc_nation := 0 ;
35606: LD_ADDR_OWVAR 21
35610: PUSH
35611: LD_INT 0
35613: ST_TO_ADDR
// hc_sex := sex_male ;
35614: LD_ADDR_OWVAR 27
35618: PUSH
35619: LD_INT 1
35621: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35622: LD_ADDR_OWVAR 28
35626: PUSH
35627: LD_INT 15
35629: ST_TO_ADDR
// hc_gallery :=  ;
35630: LD_ADDR_OWVAR 33
35634: PUSH
35635: LD_STRING 
35637: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35638: LD_ADDR_OWVAR 31
35642: PUSH
35643: LD_INT 0
35645: PPUSH
35646: LD_INT 3
35648: PPUSH
35649: CALL_OW 12
35653: PUSH
35654: LD_INT 0
35656: PPUSH
35657: LD_INT 3
35659: PPUSH
35660: CALL_OW 12
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: ST_TO_ADDR
// end ;
35677: LD_VAR 0 1
35681: RET
// export function PrepareApemanEngineer ( ) ; begin
35682: LD_INT 0
35684: PPUSH
// uc_nation := 0 ;
35685: LD_ADDR_OWVAR 21
35689: PUSH
35690: LD_INT 0
35692: ST_TO_ADDR
// hc_sex := sex_male ;
35693: LD_ADDR_OWVAR 27
35697: PUSH
35698: LD_INT 1
35700: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35701: LD_ADDR_OWVAR 28
35705: PUSH
35706: LD_INT 16
35708: ST_TO_ADDR
// hc_gallery :=  ;
35709: LD_ADDR_OWVAR 33
35713: PUSH
35714: LD_STRING 
35716: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35717: LD_ADDR_OWVAR 31
35721: PUSH
35722: LD_INT 0
35724: PPUSH
35725: LD_INT 3
35727: PPUSH
35728: CALL_OW 12
35732: PUSH
35733: LD_INT 0
35735: PPUSH
35736: LD_INT 3
35738: PPUSH
35739: CALL_OW 12
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: ST_TO_ADDR
// end ;
35756: LD_VAR 0 1
35760: RET
// export function PrepareApeman ( agressivity ) ; begin
35761: LD_INT 0
35763: PPUSH
// uc_side := 0 ;
35764: LD_ADDR_OWVAR 20
35768: PUSH
35769: LD_INT 0
35771: ST_TO_ADDR
// uc_nation := 0 ;
35772: LD_ADDR_OWVAR 21
35776: PUSH
35777: LD_INT 0
35779: ST_TO_ADDR
// hc_sex := sex_male ;
35780: LD_ADDR_OWVAR 27
35784: PUSH
35785: LD_INT 1
35787: ST_TO_ADDR
// hc_class := class_apeman ;
35788: LD_ADDR_OWVAR 28
35792: PUSH
35793: LD_INT 12
35795: ST_TO_ADDR
// hc_gallery :=  ;
35796: LD_ADDR_OWVAR 33
35800: PUSH
35801: LD_STRING 
35803: ST_TO_ADDR
// if agressivity = 0 then
35804: LD_VAR 0 1
35808: PUSH
35809: LD_INT 0
35811: EQUAL
35812: IFFALSE 35824
// hc_agressivity := 0 else
35814: LD_ADDR_OWVAR 35
35818: PUSH
35819: LD_INT 0
35821: ST_TO_ADDR
35822: GO 35845
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35824: LD_ADDR_OWVAR 35
35828: PUSH
35829: LD_VAR 0 1
35833: NEG
35834: PPUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 12
35844: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35845: LD_ADDR_OWVAR 31
35849: PUSH
35850: LD_INT 0
35852: PPUSH
35853: LD_INT 3
35855: PPUSH
35856: CALL_OW 12
35860: PUSH
35861: LD_INT 0
35863: PPUSH
35864: LD_INT 3
35866: PPUSH
35867: CALL_OW 12
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// end ;
35884: LD_VAR 0 2
35888: RET
// export function PrepareTiger ( agressivity ) ; begin
35889: LD_INT 0
35891: PPUSH
// uc_side := 0 ;
35892: LD_ADDR_OWVAR 20
35896: PUSH
35897: LD_INT 0
35899: ST_TO_ADDR
// uc_nation := 0 ;
35900: LD_ADDR_OWVAR 21
35904: PUSH
35905: LD_INT 0
35907: ST_TO_ADDR
// hc_class := class_tiger ;
35908: LD_ADDR_OWVAR 28
35912: PUSH
35913: LD_INT 14
35915: ST_TO_ADDR
// hc_gallery :=  ;
35916: LD_ADDR_OWVAR 33
35920: PUSH
35921: LD_STRING 
35923: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35924: LD_ADDR_OWVAR 35
35928: PUSH
35929: LD_VAR 0 1
35933: NEG
35934: PPUSH
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL_OW 12
35944: ST_TO_ADDR
// end ;
35945: LD_VAR 0 2
35949: RET
// export function PrepareEnchidna ( ) ; begin
35950: LD_INT 0
35952: PPUSH
// uc_side := 0 ;
35953: LD_ADDR_OWVAR 20
35957: PUSH
35958: LD_INT 0
35960: ST_TO_ADDR
// uc_nation := 0 ;
35961: LD_ADDR_OWVAR 21
35965: PUSH
35966: LD_INT 0
35968: ST_TO_ADDR
// hc_class := class_baggie ;
35969: LD_ADDR_OWVAR 28
35973: PUSH
35974: LD_INT 13
35976: ST_TO_ADDR
// hc_gallery :=  ;
35977: LD_ADDR_OWVAR 33
35981: PUSH
35982: LD_STRING 
35984: ST_TO_ADDR
// end ;
35985: LD_VAR 0 1
35989: RET
// export function PrepareFrog ( ) ; begin
35990: LD_INT 0
35992: PPUSH
// uc_side := 0 ;
35993: LD_ADDR_OWVAR 20
35997: PUSH
35998: LD_INT 0
36000: ST_TO_ADDR
// uc_nation := 0 ;
36001: LD_ADDR_OWVAR 21
36005: PUSH
36006: LD_INT 0
36008: ST_TO_ADDR
// hc_class := class_frog ;
36009: LD_ADDR_OWVAR 28
36013: PUSH
36014: LD_INT 19
36016: ST_TO_ADDR
// hc_gallery :=  ;
36017: LD_ADDR_OWVAR 33
36021: PUSH
36022: LD_STRING 
36024: ST_TO_ADDR
// end ;
36025: LD_VAR 0 1
36029: RET
// export function PrepareFish ( ) ; begin
36030: LD_INT 0
36032: PPUSH
// uc_side := 0 ;
36033: LD_ADDR_OWVAR 20
36037: PUSH
36038: LD_INT 0
36040: ST_TO_ADDR
// uc_nation := 0 ;
36041: LD_ADDR_OWVAR 21
36045: PUSH
36046: LD_INT 0
36048: ST_TO_ADDR
// hc_class := class_fish ;
36049: LD_ADDR_OWVAR 28
36053: PUSH
36054: LD_INT 20
36056: ST_TO_ADDR
// hc_gallery :=  ;
36057: LD_ADDR_OWVAR 33
36061: PUSH
36062: LD_STRING 
36064: ST_TO_ADDR
// end ;
36065: LD_VAR 0 1
36069: RET
// export function PrepareBird ( ) ; begin
36070: LD_INT 0
36072: PPUSH
// uc_side := 0 ;
36073: LD_ADDR_OWVAR 20
36077: PUSH
36078: LD_INT 0
36080: ST_TO_ADDR
// uc_nation := 0 ;
36081: LD_ADDR_OWVAR 21
36085: PUSH
36086: LD_INT 0
36088: ST_TO_ADDR
// hc_class := class_phororhacos ;
36089: LD_ADDR_OWVAR 28
36093: PUSH
36094: LD_INT 18
36096: ST_TO_ADDR
// hc_gallery :=  ;
36097: LD_ADDR_OWVAR 33
36101: PUSH
36102: LD_STRING 
36104: ST_TO_ADDR
// end ;
36105: LD_VAR 0 1
36109: RET
// export function PrepareHorse ( ) ; begin
36110: LD_INT 0
36112: PPUSH
// uc_side := 0 ;
36113: LD_ADDR_OWVAR 20
36117: PUSH
36118: LD_INT 0
36120: ST_TO_ADDR
// uc_nation := 0 ;
36121: LD_ADDR_OWVAR 21
36125: PUSH
36126: LD_INT 0
36128: ST_TO_ADDR
// hc_class := class_horse ;
36129: LD_ADDR_OWVAR 28
36133: PUSH
36134: LD_INT 21
36136: ST_TO_ADDR
// hc_gallery :=  ;
36137: LD_ADDR_OWVAR 33
36141: PUSH
36142: LD_STRING 
36144: ST_TO_ADDR
// end ;
36145: LD_VAR 0 1
36149: RET
// export function PrepareMastodont ( ) ; begin
36150: LD_INT 0
36152: PPUSH
// uc_side := 0 ;
36153: LD_ADDR_OWVAR 20
36157: PUSH
36158: LD_INT 0
36160: ST_TO_ADDR
// uc_nation := 0 ;
36161: LD_ADDR_OWVAR 21
36165: PUSH
36166: LD_INT 0
36168: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36169: LD_ADDR_OWVAR 37
36173: PUSH
36174: LD_INT 31
36176: ST_TO_ADDR
// vc_control := control_rider ;
36177: LD_ADDR_OWVAR 38
36181: PUSH
36182: LD_INT 4
36184: ST_TO_ADDR
// end ;
36185: LD_VAR 0 1
36189: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36190: LD_INT 0
36192: PPUSH
36193: PPUSH
36194: PPUSH
// uc_side = 0 ;
36195: LD_ADDR_OWVAR 20
36199: PUSH
36200: LD_INT 0
36202: ST_TO_ADDR
// uc_nation = 0 ;
36203: LD_ADDR_OWVAR 21
36207: PUSH
36208: LD_INT 0
36210: ST_TO_ADDR
// InitHc_All ( ) ;
36211: CALL_OW 584
// InitVc ;
36215: CALL_OW 20
// if mastodonts then
36219: LD_VAR 0 6
36223: IFFALSE 36290
// for i = 1 to mastodonts do
36225: LD_ADDR_VAR 0 11
36229: PUSH
36230: DOUBLE
36231: LD_INT 1
36233: DEC
36234: ST_TO_ADDR
36235: LD_VAR 0 6
36239: PUSH
36240: FOR_TO
36241: IFFALSE 36288
// begin vc_chassis := 31 ;
36243: LD_ADDR_OWVAR 37
36247: PUSH
36248: LD_INT 31
36250: ST_TO_ADDR
// vc_control := control_rider ;
36251: LD_ADDR_OWVAR 38
36255: PUSH
36256: LD_INT 4
36258: ST_TO_ADDR
// animal := CreateVehicle ;
36259: LD_ADDR_VAR 0 12
36263: PUSH
36264: CALL_OW 45
36268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36269: LD_VAR 0 12
36273: PPUSH
36274: LD_VAR 0 8
36278: PPUSH
36279: LD_INT 0
36281: PPUSH
36282: CALL 38418 0 3
// end ;
36286: GO 36240
36288: POP
36289: POP
// if horses then
36290: LD_VAR 0 5
36294: IFFALSE 36361
// for i = 1 to horses do
36296: LD_ADDR_VAR 0 11
36300: PUSH
36301: DOUBLE
36302: LD_INT 1
36304: DEC
36305: ST_TO_ADDR
36306: LD_VAR 0 5
36310: PUSH
36311: FOR_TO
36312: IFFALSE 36359
// begin hc_class := 21 ;
36314: LD_ADDR_OWVAR 28
36318: PUSH
36319: LD_INT 21
36321: ST_TO_ADDR
// hc_gallery :=  ;
36322: LD_ADDR_OWVAR 33
36326: PUSH
36327: LD_STRING 
36329: ST_TO_ADDR
// animal := CreateHuman ;
36330: LD_ADDR_VAR 0 12
36334: PUSH
36335: CALL_OW 44
36339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36340: LD_VAR 0 12
36344: PPUSH
36345: LD_VAR 0 8
36349: PPUSH
36350: LD_INT 0
36352: PPUSH
36353: CALL 38418 0 3
// end ;
36357: GO 36311
36359: POP
36360: POP
// if birds then
36361: LD_VAR 0 1
36365: IFFALSE 36432
// for i = 1 to birds do
36367: LD_ADDR_VAR 0 11
36371: PUSH
36372: DOUBLE
36373: LD_INT 1
36375: DEC
36376: ST_TO_ADDR
36377: LD_VAR 0 1
36381: PUSH
36382: FOR_TO
36383: IFFALSE 36430
// begin hc_class := 18 ;
36385: LD_ADDR_OWVAR 28
36389: PUSH
36390: LD_INT 18
36392: ST_TO_ADDR
// hc_gallery =  ;
36393: LD_ADDR_OWVAR 33
36397: PUSH
36398: LD_STRING 
36400: ST_TO_ADDR
// animal := CreateHuman ;
36401: LD_ADDR_VAR 0 12
36405: PUSH
36406: CALL_OW 44
36410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36411: LD_VAR 0 12
36415: PPUSH
36416: LD_VAR 0 8
36420: PPUSH
36421: LD_INT 0
36423: PPUSH
36424: CALL 38418 0 3
// end ;
36428: GO 36382
36430: POP
36431: POP
// if tigers then
36432: LD_VAR 0 2
36436: IFFALSE 36520
// for i = 1 to tigers do
36438: LD_ADDR_VAR 0 11
36442: PUSH
36443: DOUBLE
36444: LD_INT 1
36446: DEC
36447: ST_TO_ADDR
36448: LD_VAR 0 2
36452: PUSH
36453: FOR_TO
36454: IFFALSE 36518
// begin hc_class = class_tiger ;
36456: LD_ADDR_OWVAR 28
36460: PUSH
36461: LD_INT 14
36463: ST_TO_ADDR
// hc_gallery =  ;
36464: LD_ADDR_OWVAR 33
36468: PUSH
36469: LD_STRING 
36471: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36472: LD_ADDR_OWVAR 35
36476: PUSH
36477: LD_INT 7
36479: NEG
36480: PPUSH
36481: LD_INT 7
36483: PPUSH
36484: CALL_OW 12
36488: ST_TO_ADDR
// animal := CreateHuman ;
36489: LD_ADDR_VAR 0 12
36493: PUSH
36494: CALL_OW 44
36498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36499: LD_VAR 0 12
36503: PPUSH
36504: LD_VAR 0 8
36508: PPUSH
36509: LD_INT 0
36511: PPUSH
36512: CALL 38418 0 3
// end ;
36516: GO 36453
36518: POP
36519: POP
// if apemans then
36520: LD_VAR 0 3
36524: IFFALSE 36647
// for i = 1 to apemans do
36526: LD_ADDR_VAR 0 11
36530: PUSH
36531: DOUBLE
36532: LD_INT 1
36534: DEC
36535: ST_TO_ADDR
36536: LD_VAR 0 3
36540: PUSH
36541: FOR_TO
36542: IFFALSE 36645
// begin hc_class = class_apeman ;
36544: LD_ADDR_OWVAR 28
36548: PUSH
36549: LD_INT 12
36551: ST_TO_ADDR
// hc_gallery =  ;
36552: LD_ADDR_OWVAR 33
36556: PUSH
36557: LD_STRING 
36559: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36560: LD_ADDR_OWVAR 35
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PPUSH
36569: LD_INT 2
36571: PPUSH
36572: CALL_OW 12
36576: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36577: LD_ADDR_OWVAR 31
36581: PUSH
36582: LD_INT 1
36584: PPUSH
36585: LD_INT 3
36587: PPUSH
36588: CALL_OW 12
36592: PUSH
36593: LD_INT 1
36595: PPUSH
36596: LD_INT 3
36598: PPUSH
36599: CALL_OW 12
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// animal := CreateHuman ;
36616: LD_ADDR_VAR 0 12
36620: PUSH
36621: CALL_OW 44
36625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36626: LD_VAR 0 12
36630: PPUSH
36631: LD_VAR 0 8
36635: PPUSH
36636: LD_INT 0
36638: PPUSH
36639: CALL 38418 0 3
// end ;
36643: GO 36541
36645: POP
36646: POP
// if enchidnas then
36647: LD_VAR 0 4
36651: IFFALSE 36718
// for i = 1 to enchidnas do
36653: LD_ADDR_VAR 0 11
36657: PUSH
36658: DOUBLE
36659: LD_INT 1
36661: DEC
36662: ST_TO_ADDR
36663: LD_VAR 0 4
36667: PUSH
36668: FOR_TO
36669: IFFALSE 36716
// begin hc_class = 13 ;
36671: LD_ADDR_OWVAR 28
36675: PUSH
36676: LD_INT 13
36678: ST_TO_ADDR
// hc_gallery =  ;
36679: LD_ADDR_OWVAR 33
36683: PUSH
36684: LD_STRING 
36686: ST_TO_ADDR
// animal := CreateHuman ;
36687: LD_ADDR_VAR 0 12
36691: PUSH
36692: CALL_OW 44
36696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36697: LD_VAR 0 12
36701: PPUSH
36702: LD_VAR 0 8
36706: PPUSH
36707: LD_INT 0
36709: PPUSH
36710: CALL 38418 0 3
// end ;
36714: GO 36668
36716: POP
36717: POP
// if fishes then
36718: LD_VAR 0 7
36722: IFFALSE 36789
// for i = 1 to fishes do
36724: LD_ADDR_VAR 0 11
36728: PUSH
36729: DOUBLE
36730: LD_INT 1
36732: DEC
36733: ST_TO_ADDR
36734: LD_VAR 0 7
36738: PUSH
36739: FOR_TO
36740: IFFALSE 36787
// begin hc_class = 20 ;
36742: LD_ADDR_OWVAR 28
36746: PUSH
36747: LD_INT 20
36749: ST_TO_ADDR
// hc_gallery =  ;
36750: LD_ADDR_OWVAR 33
36754: PUSH
36755: LD_STRING 
36757: ST_TO_ADDR
// animal := CreateHuman ;
36758: LD_ADDR_VAR 0 12
36762: PUSH
36763: CALL_OW 44
36767: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36768: LD_VAR 0 12
36772: PPUSH
36773: LD_VAR 0 9
36777: PPUSH
36778: LD_INT 0
36780: PPUSH
36781: CALL 38418 0 3
// end ;
36785: GO 36739
36787: POP
36788: POP
// end ;
36789: LD_VAR 0 10
36793: RET
// export function WantHeal ( sci , unit ) ; begin
36794: LD_INT 0
36796: PPUSH
// if GetTaskList ( sci ) > 0 then
36797: LD_VAR 0 1
36801: PPUSH
36802: CALL_OW 437
36806: PUSH
36807: LD_INT 0
36809: GREATER
36810: IFFALSE 36880
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 437
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: PUSH
36826: LD_INT 1
36828: ARRAY
36829: PUSH
36830: LD_STRING l
36832: EQUAL
36833: PUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 437
36843: PUSH
36844: LD_INT 1
36846: ARRAY
36847: PUSH
36848: LD_INT 4
36850: ARRAY
36851: PUSH
36852: LD_VAR 0 2
36856: EQUAL
36857: AND
36858: IFFALSE 36870
// result := true else
36860: LD_ADDR_VAR 0 3
36864: PUSH
36865: LD_INT 1
36867: ST_TO_ADDR
36868: GO 36878
// result := false ;
36870: LD_ADDR_VAR 0 3
36874: PUSH
36875: LD_INT 0
36877: ST_TO_ADDR
// end else
36878: GO 36888
// result := false ;
36880: LD_ADDR_VAR 0 3
36884: PUSH
36885: LD_INT 0
36887: ST_TO_ADDR
// end ;
36888: LD_VAR 0 3
36892: RET
// export function HealTarget ( sci ) ; begin
36893: LD_INT 0
36895: PPUSH
// if not sci then
36896: LD_VAR 0 1
36900: NOT
36901: IFFALSE 36905
// exit ;
36903: GO 36970
// result := 0 ;
36905: LD_ADDR_VAR 0 2
36909: PUSH
36910: LD_INT 0
36912: ST_TO_ADDR
// if GetTaskList ( sci ) then
36913: LD_VAR 0 1
36917: PPUSH
36918: CALL_OW 437
36922: IFFALSE 36970
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36924: LD_VAR 0 1
36928: PPUSH
36929: CALL_OW 437
36933: PUSH
36934: LD_INT 1
36936: ARRAY
36937: PUSH
36938: LD_INT 1
36940: ARRAY
36941: PUSH
36942: LD_STRING l
36944: EQUAL
36945: IFFALSE 36970
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36947: LD_ADDR_VAR 0 2
36951: PUSH
36952: LD_VAR 0 1
36956: PPUSH
36957: CALL_OW 437
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PUSH
36966: LD_INT 4
36968: ARRAY
36969: ST_TO_ADDR
// end ;
36970: LD_VAR 0 2
36974: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36975: LD_INT 0
36977: PPUSH
36978: PPUSH
36979: PPUSH
36980: PPUSH
// if not base_units then
36981: LD_VAR 0 1
36985: NOT
36986: IFFALSE 36990
// exit ;
36988: GO 37077
// result := false ;
36990: LD_ADDR_VAR 0 2
36994: PUSH
36995: LD_INT 0
36997: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36998: LD_ADDR_VAR 0 5
37002: PUSH
37003: LD_VAR 0 1
37007: PPUSH
37008: LD_INT 21
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PPUSH
37018: CALL_OW 72
37022: ST_TO_ADDR
// if not tmp then
37023: LD_VAR 0 5
37027: NOT
37028: IFFALSE 37032
// exit ;
37030: GO 37077
// for i in tmp do
37032: LD_ADDR_VAR 0 3
37036: PUSH
37037: LD_VAR 0 5
37041: PUSH
37042: FOR_IN
37043: IFFALSE 37075
// begin result := EnemyInRange ( i , 22 ) ;
37045: LD_ADDR_VAR 0 2
37049: PUSH
37050: LD_VAR 0 3
37054: PPUSH
37055: LD_INT 22
37057: PPUSH
37058: CALL 34655 0 2
37062: ST_TO_ADDR
// if result then
37063: LD_VAR 0 2
37067: IFFALSE 37073
// exit ;
37069: POP
37070: POP
37071: GO 37077
// end ;
37073: GO 37042
37075: POP
37076: POP
// end ;
37077: LD_VAR 0 2
37081: RET
// export function FilterByTag ( units , tag ) ; begin
37082: LD_INT 0
37084: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37085: LD_ADDR_VAR 0 3
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: LD_INT 120
37097: PUSH
37098: LD_VAR 0 2
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PPUSH
37107: CALL_OW 72
37111: ST_TO_ADDR
// end ;
37112: LD_VAR 0 3
37116: RET
// export function IsDriver ( un ) ; begin
37117: LD_INT 0
37119: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37120: LD_ADDR_VAR 0 2
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_INT 55
37132: PUSH
37133: EMPTY
37134: LIST
37135: PPUSH
37136: CALL_OW 69
37140: IN
37141: ST_TO_ADDR
// end ;
37142: LD_VAR 0 2
37146: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37147: LD_INT 0
37149: PPUSH
37150: PPUSH
// list := [ ] ;
37151: LD_ADDR_VAR 0 5
37155: PUSH
37156: EMPTY
37157: ST_TO_ADDR
// case d of 0 :
37158: LD_VAR 0 3
37162: PUSH
37163: LD_INT 0
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37304
37171: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37172: LD_ADDR_VAR 0 5
37176: PUSH
37177: LD_VAR 0 1
37181: PUSH
37182: LD_INT 4
37184: MINUS
37185: PUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_INT 4
37193: MINUS
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: PUSH
37203: LD_VAR 0 1
37207: PUSH
37208: LD_INT 3
37210: MINUS
37211: PUSH
37212: LD_VAR 0 2
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: PUSH
37225: LD_VAR 0 1
37229: PUSH
37230: LD_INT 4
37232: PLUS
37233: PUSH
37234: LD_VAR 0 2
37238: PUSH
37239: LD_INT 4
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: PUSH
37247: LD_VAR 0 1
37251: PUSH
37252: LD_INT 3
37254: PLUS
37255: PUSH
37256: LD_VAR 0 2
37260: PUSH
37261: LD_INT 3
37263: PLUS
37264: PUSH
37265: LD_INT 5
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: LD_VAR 0 1
37277: PUSH
37278: LD_VAR 0 2
37282: PUSH
37283: LD_INT 4
37285: PLUS
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// end ; 1 :
37302: GO 38002
37304: LD_INT 1
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37445
37312: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37313: LD_ADDR_VAR 0 5
37317: PUSH
37318: LD_VAR 0 1
37322: PUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_INT 4
37330: MINUS
37331: PUSH
37332: LD_INT 3
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: PUSH
37340: LD_VAR 0 1
37344: PUSH
37345: LD_INT 3
37347: MINUS
37348: PUSH
37349: LD_VAR 0 2
37353: PUSH
37354: LD_INT 3
37356: MINUS
37357: PUSH
37358: LD_INT 2
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: PUSH
37366: LD_VAR 0 1
37370: PUSH
37371: LD_INT 4
37373: MINUS
37374: PUSH
37375: LD_VAR 0 2
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: PUSH
37388: LD_VAR 0 1
37392: PUSH
37393: LD_VAR 0 2
37397: PUSH
37398: LD_INT 3
37400: PLUS
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: PUSH
37410: LD_VAR 0 1
37414: PUSH
37415: LD_INT 4
37417: PLUS
37418: PUSH
37419: LD_VAR 0 2
37423: PUSH
37424: LD_INT 4
37426: PLUS
37427: PUSH
37428: LD_INT 5
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// end ; 2 :
37443: GO 38002
37445: LD_INT 2
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37582
37453: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37454: LD_ADDR_VAR 0 5
37458: PUSH
37459: LD_VAR 0 1
37463: PUSH
37464: LD_VAR 0 2
37468: PUSH
37469: LD_INT 3
37471: MINUS
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: PUSH
37481: LD_VAR 0 1
37485: PUSH
37486: LD_INT 4
37488: PLUS
37489: PUSH
37490: LD_VAR 0 2
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: PUSH
37503: LD_VAR 0 1
37507: PUSH
37508: LD_VAR 0 2
37512: PUSH
37513: LD_INT 4
37515: PLUS
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: PUSH
37525: LD_VAR 0 1
37529: PUSH
37530: LD_INT 3
37532: MINUS
37533: PUSH
37534: LD_VAR 0 2
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: PUSH
37547: LD_VAR 0 1
37551: PUSH
37552: LD_INT 4
37554: MINUS
37555: PUSH
37556: LD_VAR 0 2
37560: PUSH
37561: LD_INT 4
37563: MINUS
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// end ; 3 :
37580: GO 38002
37582: LD_INT 3
37584: DOUBLE
37585: EQUAL
37586: IFTRUE 37590
37588: GO 37723
37590: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37591: LD_ADDR_VAR 0 5
37595: PUSH
37596: LD_VAR 0 1
37600: PUSH
37601: LD_INT 3
37603: PLUS
37604: PUSH
37605: LD_VAR 0 2
37609: PUSH
37610: LD_INT 4
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: PUSH
37618: LD_VAR 0 1
37622: PUSH
37623: LD_INT 4
37625: PLUS
37626: PUSH
37627: LD_VAR 0 2
37631: PUSH
37632: LD_INT 4
37634: PLUS
37635: PUSH
37636: LD_INT 5
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: PUSH
37644: LD_VAR 0 1
37648: PUSH
37649: LD_INT 4
37651: MINUS
37652: PUSH
37653: LD_VAR 0 2
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: PUSH
37666: LD_VAR 0 1
37670: PUSH
37671: LD_VAR 0 2
37675: PUSH
37676: LD_INT 4
37678: MINUS
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: LD_VAR 0 1
37692: PUSH
37693: LD_INT 3
37695: MINUS
37696: PUSH
37697: LD_VAR 0 2
37701: PUSH
37702: LD_INT 3
37704: MINUS
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// end ; 4 :
37721: GO 38002
37723: LD_INT 4
37725: DOUBLE
37726: EQUAL
37727: IFTRUE 37731
37729: GO 37864
37731: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37732: LD_ADDR_VAR 0 5
37736: PUSH
37737: LD_VAR 0 1
37741: PUSH
37742: LD_VAR 0 2
37746: PUSH
37747: LD_INT 4
37749: PLUS
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: PUSH
37759: LD_VAR 0 1
37763: PUSH
37764: LD_INT 3
37766: PLUS
37767: PUSH
37768: LD_VAR 0 2
37772: PUSH
37773: LD_INT 3
37775: PLUS
37776: PUSH
37777: LD_INT 5
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: LD_VAR 0 1
37789: PUSH
37790: LD_INT 4
37792: PLUS
37793: PUSH
37794: LD_VAR 0 2
37798: PUSH
37799: LD_INT 4
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: PUSH
37807: LD_VAR 0 1
37811: PUSH
37812: LD_VAR 0 2
37816: PUSH
37817: LD_INT 3
37819: MINUS
37820: PUSH
37821: LD_INT 3
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: PUSH
37829: LD_VAR 0 1
37833: PUSH
37834: LD_INT 4
37836: MINUS
37837: PUSH
37838: LD_VAR 0 2
37842: PUSH
37843: LD_INT 4
37845: MINUS
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: ST_TO_ADDR
// end ; 5 :
37862: GO 38002
37864: LD_INT 5
37866: DOUBLE
37867: EQUAL
37868: IFTRUE 37872
37870: GO 38001
37872: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37873: LD_ADDR_VAR 0 5
37877: PUSH
37878: LD_VAR 0 1
37882: PUSH
37883: LD_INT 4
37885: MINUS
37886: PUSH
37887: LD_VAR 0 2
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: PUSH
37900: LD_VAR 0 1
37904: PUSH
37905: LD_VAR 0 2
37909: PUSH
37910: LD_INT 4
37912: MINUS
37913: PUSH
37914: LD_INT 3
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: PUSH
37922: LD_VAR 0 1
37926: PUSH
37927: LD_INT 4
37929: PLUS
37930: PUSH
37931: LD_VAR 0 2
37935: PUSH
37936: LD_INT 4
37938: PLUS
37939: PUSH
37940: LD_INT 5
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: PUSH
37948: LD_VAR 0 1
37952: PUSH
37953: LD_INT 3
37955: PLUS
37956: PUSH
37957: LD_VAR 0 2
37961: PUSH
37962: LD_INT 4
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: LIST
37969: PUSH
37970: LD_VAR 0 1
37974: PUSH
37975: LD_VAR 0 2
37979: PUSH
37980: LD_INT 3
37982: PLUS
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: ST_TO_ADDR
// end ; end ;
37999: GO 38002
38001: POP
// result := list ;
38002: LD_ADDR_VAR 0 4
38006: PUSH
38007: LD_VAR 0 5
38011: ST_TO_ADDR
// end ;
38012: LD_VAR 0 4
38016: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38017: LD_INT 0
38019: PPUSH
38020: PPUSH
38021: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38022: LD_VAR 0 1
38026: NOT
38027: PUSH
38028: LD_VAR 0 2
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 3
38041: PUSH
38042: LD_INT 4
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: IN
38051: NOT
38052: OR
38053: IFFALSE 38057
// exit ;
38055: GO 38140
// tmp := [ ] ;
38057: LD_ADDR_VAR 0 5
38061: PUSH
38062: EMPTY
38063: ST_TO_ADDR
// for i in units do
38064: LD_ADDR_VAR 0 4
38068: PUSH
38069: LD_VAR 0 1
38073: PUSH
38074: FOR_IN
38075: IFFALSE 38109
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38077: LD_ADDR_VAR 0 5
38081: PUSH
38082: LD_VAR 0 5
38086: PPUSH
38087: LD_VAR 0 4
38091: PPUSH
38092: LD_VAR 0 2
38096: PPUSH
38097: CALL_OW 259
38101: PPUSH
38102: CALL 39513 0 2
38106: ST_TO_ADDR
38107: GO 38074
38109: POP
38110: POP
// if not tmp then
38111: LD_VAR 0 5
38115: NOT
38116: IFFALSE 38120
// exit ;
38118: GO 38140
// result := SortListByListDesc ( units , tmp ) ;
38120: LD_ADDR_VAR 0 3
38124: PUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: LD_VAR 0 5
38134: PPUSH
38135: CALL_OW 77
38139: ST_TO_ADDR
// end ;
38140: LD_VAR 0 3
38144: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38145: LD_INT 0
38147: PPUSH
38148: PPUSH
38149: PPUSH
// result := false ;
38150: LD_ADDR_VAR 0 3
38154: PUSH
38155: LD_INT 0
38157: ST_TO_ADDR
// if not building then
38158: LD_VAR 0 2
38162: NOT
38163: IFFALSE 38167
// exit ;
38165: GO 38305
// x := GetX ( building ) ;
38167: LD_ADDR_VAR 0 4
38171: PUSH
38172: LD_VAR 0 2
38176: PPUSH
38177: CALL_OW 250
38181: ST_TO_ADDR
// y := GetY ( building ) ;
38182: LD_ADDR_VAR 0 5
38186: PUSH
38187: LD_VAR 0 2
38191: PPUSH
38192: CALL_OW 251
38196: ST_TO_ADDR
// if not x or not y then
38197: LD_VAR 0 4
38201: NOT
38202: PUSH
38203: LD_VAR 0 5
38207: NOT
38208: OR
38209: IFFALSE 38213
// exit ;
38211: GO 38305
// if GetTaskList ( unit ) then
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 437
38222: IFFALSE 38305
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38224: LD_STRING e
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 437
38236: PUSH
38237: LD_INT 1
38239: ARRAY
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: EQUAL
38245: PUSH
38246: LD_VAR 0 4
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL_OW 437
38260: PUSH
38261: LD_INT 1
38263: ARRAY
38264: PUSH
38265: LD_INT 2
38267: ARRAY
38268: EQUAL
38269: AND
38270: PUSH
38271: LD_VAR 0 5
38275: PUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 437
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PUSH
38290: LD_INT 3
38292: ARRAY
38293: EQUAL
38294: AND
38295: IFFALSE 38305
// result := true end ;
38297: LD_ADDR_VAR 0 3
38301: PUSH
38302: LD_INT 1
38304: ST_TO_ADDR
// end ;
38305: LD_VAR 0 3
38309: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38310: LD_INT 0
38312: PPUSH
// result := false ;
38313: LD_ADDR_VAR 0 4
38317: PUSH
38318: LD_INT 0
38320: ST_TO_ADDR
// if GetTaskList ( unit ) then
38321: LD_VAR 0 1
38325: PPUSH
38326: CALL_OW 437
38330: IFFALSE 38413
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38332: LD_STRING M
38334: PUSH
38335: LD_VAR 0 1
38339: PPUSH
38340: CALL_OW 437
38344: PUSH
38345: LD_INT 1
38347: ARRAY
38348: PUSH
38349: LD_INT 1
38351: ARRAY
38352: EQUAL
38353: PUSH
38354: LD_VAR 0 2
38358: PUSH
38359: LD_VAR 0 1
38363: PPUSH
38364: CALL_OW 437
38368: PUSH
38369: LD_INT 1
38371: ARRAY
38372: PUSH
38373: LD_INT 2
38375: ARRAY
38376: EQUAL
38377: AND
38378: PUSH
38379: LD_VAR 0 3
38383: PUSH
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 437
38393: PUSH
38394: LD_INT 1
38396: ARRAY
38397: PUSH
38398: LD_INT 3
38400: ARRAY
38401: EQUAL
38402: AND
38403: IFFALSE 38413
// result := true ;
38405: LD_ADDR_VAR 0 4
38409: PUSH
38410: LD_INT 1
38412: ST_TO_ADDR
// end ; end ;
38413: LD_VAR 0 4
38417: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38418: LD_INT 0
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
// if not unit or not area then
38424: LD_VAR 0 1
38428: NOT
38429: PUSH
38430: LD_VAR 0 2
38434: NOT
38435: OR
38436: IFFALSE 38440
// exit ;
38438: GO 38616
// tmp := AreaToList ( area , i ) ;
38440: LD_ADDR_VAR 0 6
38444: PUSH
38445: LD_VAR 0 2
38449: PPUSH
38450: LD_VAR 0 5
38454: PPUSH
38455: CALL_OW 517
38459: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38460: LD_ADDR_VAR 0 5
38464: PUSH
38465: DOUBLE
38466: LD_INT 1
38468: DEC
38469: ST_TO_ADDR
38470: LD_VAR 0 6
38474: PUSH
38475: LD_INT 1
38477: ARRAY
38478: PUSH
38479: FOR_TO
38480: IFFALSE 38614
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38482: LD_ADDR_VAR 0 7
38486: PUSH
38487: LD_VAR 0 6
38491: PUSH
38492: LD_INT 1
38494: ARRAY
38495: PUSH
38496: LD_VAR 0 5
38500: ARRAY
38501: PUSH
38502: LD_VAR 0 6
38506: PUSH
38507: LD_INT 2
38509: ARRAY
38510: PUSH
38511: LD_VAR 0 5
38515: ARRAY
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38521: LD_INT 92
38523: PUSH
38524: LD_VAR 0 7
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: PUSH
38533: LD_VAR 0 7
38537: PUSH
38538: LD_INT 2
38540: ARRAY
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: PPUSH
38551: CALL_OW 69
38555: PUSH
38556: LD_INT 0
38558: EQUAL
38559: IFFALSE 38612
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38561: LD_VAR 0 1
38565: PPUSH
38566: LD_VAR 0 7
38570: PUSH
38571: LD_INT 1
38573: ARRAY
38574: PPUSH
38575: LD_VAR 0 7
38579: PUSH
38580: LD_INT 2
38582: ARRAY
38583: PPUSH
38584: LD_VAR 0 3
38588: PPUSH
38589: CALL_OW 48
// result := IsPlaced ( unit ) ;
38593: LD_ADDR_VAR 0 4
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: CALL_OW 305
38607: ST_TO_ADDR
// exit ;
38608: POP
38609: POP
38610: GO 38616
// end ; end ;
38612: GO 38479
38614: POP
38615: POP
// end ;
38616: LD_VAR 0 4
38620: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38621: LD_INT 0
38623: PPUSH
38624: PPUSH
38625: PPUSH
// if not side or side > 8 then
38626: LD_VAR 0 1
38630: NOT
38631: PUSH
38632: LD_VAR 0 1
38636: PUSH
38637: LD_INT 8
38639: GREATER
38640: OR
38641: IFFALSE 38645
// exit ;
38643: GO 38832
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38645: LD_ADDR_VAR 0 4
38649: PUSH
38650: LD_INT 22
38652: PUSH
38653: LD_VAR 0 1
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 21
38664: PUSH
38665: LD_INT 3
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PPUSH
38676: CALL_OW 69
38680: ST_TO_ADDR
// if not tmp then
38681: LD_VAR 0 4
38685: NOT
38686: IFFALSE 38690
// exit ;
38688: GO 38832
// enable_addtolog := true ;
38690: LD_ADDR_OWVAR 81
38694: PUSH
38695: LD_INT 1
38697: ST_TO_ADDR
// AddToLog ( [ ) ;
38698: LD_STRING [
38700: PPUSH
38701: CALL_OW 561
// for i in tmp do
38705: LD_ADDR_VAR 0 3
38709: PUSH
38710: LD_VAR 0 4
38714: PUSH
38715: FOR_IN
38716: IFFALSE 38823
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38718: LD_STRING [
38720: PUSH
38721: LD_VAR 0 3
38725: PPUSH
38726: CALL_OW 266
38730: STR
38731: PUSH
38732: LD_STRING , 
38734: STR
38735: PUSH
38736: LD_VAR 0 3
38740: PPUSH
38741: CALL_OW 250
38745: STR
38746: PUSH
38747: LD_STRING , 
38749: STR
38750: PUSH
38751: LD_VAR 0 3
38755: PPUSH
38756: CALL_OW 251
38760: STR
38761: PUSH
38762: LD_STRING , 
38764: STR
38765: PUSH
38766: LD_VAR 0 3
38770: PPUSH
38771: CALL_OW 254
38775: STR
38776: PUSH
38777: LD_STRING , 
38779: STR
38780: PUSH
38781: LD_VAR 0 3
38785: PPUSH
38786: LD_INT 1
38788: PPUSH
38789: CALL_OW 268
38793: STR
38794: PUSH
38795: LD_STRING , 
38797: STR
38798: PUSH
38799: LD_VAR 0 3
38803: PPUSH
38804: LD_INT 2
38806: PPUSH
38807: CALL_OW 268
38811: STR
38812: PUSH
38813: LD_STRING ],
38815: STR
38816: PPUSH
38817: CALL_OW 561
// end ;
38821: GO 38715
38823: POP
38824: POP
// AddToLog ( ]; ) ;
38825: LD_STRING ];
38827: PPUSH
38828: CALL_OW 561
// end ;
38832: LD_VAR 0 2
38836: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38837: LD_INT 0
38839: PPUSH
38840: PPUSH
38841: PPUSH
38842: PPUSH
38843: PPUSH
// if not area or not rate or not max then
38844: LD_VAR 0 1
38848: NOT
38849: PUSH
38850: LD_VAR 0 2
38854: NOT
38855: OR
38856: PUSH
38857: LD_VAR 0 4
38861: NOT
38862: OR
38863: IFFALSE 38867
// exit ;
38865: GO 39056
// while 1 do
38867: LD_INT 1
38869: IFFALSE 39056
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38871: LD_ADDR_VAR 0 9
38875: PUSH
38876: LD_VAR 0 1
38880: PPUSH
38881: LD_INT 1
38883: PPUSH
38884: CALL_OW 287
38888: PUSH
38889: LD_INT 10
38891: MUL
38892: ST_TO_ADDR
// r := rate / 10 ;
38893: LD_ADDR_VAR 0 7
38897: PUSH
38898: LD_VAR 0 2
38902: PUSH
38903: LD_INT 10
38905: DIVREAL
38906: ST_TO_ADDR
// time := 1 1$00 ;
38907: LD_ADDR_VAR 0 8
38911: PUSH
38912: LD_INT 2100
38914: ST_TO_ADDR
// if amount < min then
38915: LD_VAR 0 9
38919: PUSH
38920: LD_VAR 0 3
38924: LESS
38925: IFFALSE 38943
// r := r * 2 else
38927: LD_ADDR_VAR 0 7
38931: PUSH
38932: LD_VAR 0 7
38936: PUSH
38937: LD_INT 2
38939: MUL
38940: ST_TO_ADDR
38941: GO 38969
// if amount > max then
38943: LD_VAR 0 9
38947: PUSH
38948: LD_VAR 0 4
38952: GREATER
38953: IFFALSE 38969
// r := r / 2 ;
38955: LD_ADDR_VAR 0 7
38959: PUSH
38960: LD_VAR 0 7
38964: PUSH
38965: LD_INT 2
38967: DIVREAL
38968: ST_TO_ADDR
// time := time / r ;
38969: LD_ADDR_VAR 0 8
38973: PUSH
38974: LD_VAR 0 8
38978: PUSH
38979: LD_VAR 0 7
38983: DIVREAL
38984: ST_TO_ADDR
// if time < 0 then
38985: LD_VAR 0 8
38989: PUSH
38990: LD_INT 0
38992: LESS
38993: IFFALSE 39010
// time := time * - 1 ;
38995: LD_ADDR_VAR 0 8
38999: PUSH
39000: LD_VAR 0 8
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: MUL
39009: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39010: LD_VAR 0 8
39014: PUSH
39015: LD_INT 35
39017: PPUSH
39018: LD_INT 875
39020: PPUSH
39021: CALL_OW 12
39025: PLUS
39026: PPUSH
39027: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39031: LD_INT 1
39033: PPUSH
39034: LD_INT 5
39036: PPUSH
39037: CALL_OW 12
39041: PPUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: LD_INT 1
39049: PPUSH
39050: CALL_OW 55
// end ;
39054: GO 38867
// end ;
39056: LD_VAR 0 5
39060: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39061: LD_INT 0
39063: PPUSH
39064: PPUSH
39065: PPUSH
39066: PPUSH
39067: PPUSH
39068: PPUSH
39069: PPUSH
39070: PPUSH
// if not turrets or not factories then
39071: LD_VAR 0 1
39075: NOT
39076: PUSH
39077: LD_VAR 0 2
39081: NOT
39082: OR
39083: IFFALSE 39087
// exit ;
39085: GO 39394
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39087: LD_ADDR_VAR 0 10
39091: PUSH
39092: LD_INT 5
39094: PUSH
39095: LD_INT 6
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 4
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: LD_INT 5
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 24
39129: PUSH
39130: LD_INT 25
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 23
39139: PUSH
39140: LD_INT 27
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 42
39153: PUSH
39154: LD_INT 43
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 44
39163: PUSH
39164: LD_INT 46
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 45
39173: PUSH
39174: LD_INT 47
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: ST_TO_ADDR
// result := [ ] ;
39191: LD_ADDR_VAR 0 3
39195: PUSH
39196: EMPTY
39197: ST_TO_ADDR
// for i in turrets do
39198: LD_ADDR_VAR 0 4
39202: PUSH
39203: LD_VAR 0 1
39207: PUSH
39208: FOR_IN
39209: IFFALSE 39392
// begin nat := GetNation ( i ) ;
39211: LD_ADDR_VAR 0 7
39215: PUSH
39216: LD_VAR 0 4
39220: PPUSH
39221: CALL_OW 248
39225: ST_TO_ADDR
// weapon := 0 ;
39226: LD_ADDR_VAR 0 8
39230: PUSH
39231: LD_INT 0
39233: ST_TO_ADDR
// if not nat then
39234: LD_VAR 0 7
39238: NOT
39239: IFFALSE 39243
// continue ;
39241: GO 39208
// for j in list [ nat ] do
39243: LD_ADDR_VAR 0 5
39247: PUSH
39248: LD_VAR 0 10
39252: PUSH
39253: LD_VAR 0 7
39257: ARRAY
39258: PUSH
39259: FOR_IN
39260: IFFALSE 39301
// if GetBWeapon ( i ) = j [ 1 ] then
39262: LD_VAR 0 4
39266: PPUSH
39267: CALL_OW 269
39271: PUSH
39272: LD_VAR 0 5
39276: PUSH
39277: LD_INT 1
39279: ARRAY
39280: EQUAL
39281: IFFALSE 39299
// begin weapon := j [ 2 ] ;
39283: LD_ADDR_VAR 0 8
39287: PUSH
39288: LD_VAR 0 5
39292: PUSH
39293: LD_INT 2
39295: ARRAY
39296: ST_TO_ADDR
// break ;
39297: GO 39301
// end ;
39299: GO 39259
39301: POP
39302: POP
// if not weapon then
39303: LD_VAR 0 8
39307: NOT
39308: IFFALSE 39312
// continue ;
39310: GO 39208
// for k in factories do
39312: LD_ADDR_VAR 0 6
39316: PUSH
39317: LD_VAR 0 2
39321: PUSH
39322: FOR_IN
39323: IFFALSE 39388
// begin weapons := AvailableWeaponList ( k ) ;
39325: LD_ADDR_VAR 0 9
39329: PUSH
39330: LD_VAR 0 6
39334: PPUSH
39335: CALL_OW 478
39339: ST_TO_ADDR
// if not weapons then
39340: LD_VAR 0 9
39344: NOT
39345: IFFALSE 39349
// continue ;
39347: GO 39322
// if weapon in weapons then
39349: LD_VAR 0 8
39353: PUSH
39354: LD_VAR 0 9
39358: IN
39359: IFFALSE 39386
// begin result := [ i , weapon ] ;
39361: LD_ADDR_VAR 0 3
39365: PUSH
39366: LD_VAR 0 4
39370: PUSH
39371: LD_VAR 0 8
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: ST_TO_ADDR
// exit ;
39380: POP
39381: POP
39382: POP
39383: POP
39384: GO 39394
// end ; end ;
39386: GO 39322
39388: POP
39389: POP
// end ;
39390: GO 39208
39392: POP
39393: POP
// end ;
39394: LD_VAR 0 3
39398: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39399: LD_INT 0
39401: PPUSH
// if not side or side > 8 then
39402: LD_VAR 0 3
39406: NOT
39407: PUSH
39408: LD_VAR 0 3
39412: PUSH
39413: LD_INT 8
39415: GREATER
39416: OR
39417: IFFALSE 39421
// exit ;
39419: GO 39480
// if not range then
39421: LD_VAR 0 4
39425: NOT
39426: IFFALSE 39437
// range := - 12 ;
39428: LD_ADDR_VAR 0 4
39432: PUSH
39433: LD_INT 12
39435: NEG
39436: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39437: LD_VAR 0 1
39441: PPUSH
39442: LD_VAR 0 2
39446: PPUSH
39447: LD_VAR 0 3
39451: PPUSH
39452: LD_VAR 0 4
39456: PPUSH
39457: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39461: LD_VAR 0 1
39465: PPUSH
39466: LD_VAR 0 2
39470: PPUSH
39471: LD_VAR 0 3
39475: PPUSH
39476: CALL_OW 331
// end ;
39480: LD_VAR 0 5
39484: RET
// export function Video ( mode ) ; begin
39485: LD_INT 0
39487: PPUSH
// ingame_video = mode ;
39488: LD_ADDR_OWVAR 52
39492: PUSH
39493: LD_VAR 0 1
39497: ST_TO_ADDR
// interface_hidden = mode ;
39498: LD_ADDR_OWVAR 54
39502: PUSH
39503: LD_VAR 0 1
39507: ST_TO_ADDR
// end ;
39508: LD_VAR 0 2
39512: RET
// export function Join ( array , element ) ; begin
39513: LD_INT 0
39515: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39516: LD_ADDR_VAR 0 3
39520: PUSH
39521: LD_VAR 0 1
39525: PPUSH
39526: LD_VAR 0 1
39530: PUSH
39531: LD_INT 1
39533: PLUS
39534: PPUSH
39535: LD_VAR 0 2
39539: PPUSH
39540: CALL_OW 1
39544: ST_TO_ADDR
// end ;
39545: LD_VAR 0 3
39549: RET
// export function JoinUnion ( array , element ) ; begin
39550: LD_INT 0
39552: PPUSH
// result := array union element ;
39553: LD_ADDR_VAR 0 3
39557: PUSH
39558: LD_VAR 0 1
39562: PUSH
39563: LD_VAR 0 2
39567: UNION
39568: ST_TO_ADDR
// end ;
39569: LD_VAR 0 3
39573: RET
// export function GetBehemoths ( side ) ; begin
39574: LD_INT 0
39576: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39577: LD_ADDR_VAR 0 2
39581: PUSH
39582: LD_INT 22
39584: PUSH
39585: LD_VAR 0 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 31
39596: PUSH
39597: LD_INT 25
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PPUSH
39608: CALL_OW 69
39612: ST_TO_ADDR
// end ;
39613: LD_VAR 0 2
39617: RET
// export function Shuffle ( array ) ; var i , index ; begin
39618: LD_INT 0
39620: PPUSH
39621: PPUSH
39622: PPUSH
// result := [ ] ;
39623: LD_ADDR_VAR 0 2
39627: PUSH
39628: EMPTY
39629: ST_TO_ADDR
// if not array then
39630: LD_VAR 0 1
39634: NOT
39635: IFFALSE 39639
// exit ;
39637: GO 39738
// Randomize ;
39639: CALL_OW 10
// for i = array downto 1 do
39643: LD_ADDR_VAR 0 3
39647: PUSH
39648: DOUBLE
39649: LD_VAR 0 1
39653: INC
39654: ST_TO_ADDR
39655: LD_INT 1
39657: PUSH
39658: FOR_DOWNTO
39659: IFFALSE 39736
// begin index := rand ( 1 , array ) ;
39661: LD_ADDR_VAR 0 4
39665: PUSH
39666: LD_INT 1
39668: PPUSH
39669: LD_VAR 0 1
39673: PPUSH
39674: CALL_OW 12
39678: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39679: LD_ADDR_VAR 0 2
39683: PUSH
39684: LD_VAR 0 2
39688: PPUSH
39689: LD_VAR 0 2
39693: PUSH
39694: LD_INT 1
39696: PLUS
39697: PPUSH
39698: LD_VAR 0 1
39702: PUSH
39703: LD_VAR 0 4
39707: ARRAY
39708: PPUSH
39709: CALL_OW 2
39713: ST_TO_ADDR
// array := Delete ( array , index ) ;
39714: LD_ADDR_VAR 0 1
39718: PUSH
39719: LD_VAR 0 1
39723: PPUSH
39724: LD_VAR 0 4
39728: PPUSH
39729: CALL_OW 3
39733: ST_TO_ADDR
// end ;
39734: GO 39658
39736: POP
39737: POP
// end ;
39738: LD_VAR 0 2
39742: RET
// export function GetBaseMaterials ( base ) ; begin
39743: LD_INT 0
39745: PPUSH
// result := [ 0 , 0 , 0 ] ;
39746: LD_ADDR_VAR 0 2
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
// if not base then
39765: LD_VAR 0 1
39769: NOT
39770: IFFALSE 39774
// exit ;
39772: GO 39823
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39774: LD_ADDR_VAR 0 2
39778: PUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: LD_INT 1
39786: PPUSH
39787: CALL_OW 275
39791: PUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: LD_INT 2
39799: PPUSH
39800: CALL_OW 275
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: LD_INT 3
39812: PPUSH
39813: CALL_OW 275
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// end ;
39823: LD_VAR 0 2
39827: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39828: LD_INT 0
39830: PPUSH
39831: PPUSH
// result := array ;
39832: LD_ADDR_VAR 0 3
39836: PUSH
39837: LD_VAR 0 1
39841: ST_TO_ADDR
// if size >= result then
39842: LD_VAR 0 2
39846: PUSH
39847: LD_VAR 0 3
39851: GREATEREQUAL
39852: IFFALSE 39856
// exit ;
39854: GO 39906
// if size then
39856: LD_VAR 0 2
39860: IFFALSE 39906
// for i := array downto size do
39862: LD_ADDR_VAR 0 4
39866: PUSH
39867: DOUBLE
39868: LD_VAR 0 1
39872: INC
39873: ST_TO_ADDR
39874: LD_VAR 0 2
39878: PUSH
39879: FOR_DOWNTO
39880: IFFALSE 39904
// result := Delete ( result , result ) ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_VAR 0 3
39891: PPUSH
39892: LD_VAR 0 3
39896: PPUSH
39897: CALL_OW 3
39901: ST_TO_ADDR
39902: GO 39879
39904: POP
39905: POP
// end ;
39906: LD_VAR 0 3
39910: RET
// export function ComExit ( unit ) ; var tmp ; begin
39911: LD_INT 0
39913: PPUSH
39914: PPUSH
// if not IsInUnit ( unit ) then
39915: LD_VAR 0 1
39919: PPUSH
39920: CALL_OW 310
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 39989
// tmp := IsInUnit ( unit ) ;
39929: LD_ADDR_VAR 0 3
39933: PUSH
39934: LD_VAR 0 1
39938: PPUSH
39939: CALL_OW 310
39943: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39944: LD_VAR 0 3
39948: PPUSH
39949: CALL_OW 247
39953: PUSH
39954: LD_INT 2
39956: EQUAL
39957: IFFALSE 39970
// ComExitVehicle ( unit ) else
39959: LD_VAR 0 1
39963: PPUSH
39964: CALL_OW 121
39968: GO 39979
// ComExitBuilding ( unit ) ;
39970: LD_VAR 0 1
39974: PPUSH
39975: CALL_OW 122
// result := tmp ;
39979: LD_ADDR_VAR 0 2
39983: PUSH
39984: LD_VAR 0 3
39988: ST_TO_ADDR
// end ;
39989: LD_VAR 0 2
39993: RET
// export function ComExitAll ( units ) ; var i ; begin
39994: LD_INT 0
39996: PPUSH
39997: PPUSH
// if not units then
39998: LD_VAR 0 1
40002: NOT
40003: IFFALSE 40007
// exit ;
40005: GO 40033
// for i in units do
40007: LD_ADDR_VAR 0 3
40011: PUSH
40012: LD_VAR 0 1
40016: PUSH
40017: FOR_IN
40018: IFFALSE 40031
// ComExit ( i ) ;
40020: LD_VAR 0 3
40024: PPUSH
40025: CALL 39911 0 1
40029: GO 40017
40031: POP
40032: POP
// end ;
40033: LD_VAR 0 2
40037: RET
// export function ResetHc ; begin
40038: LD_INT 0
40040: PPUSH
// InitHc ;
40041: CALL_OW 19
// hc_importance := 0 ;
40045: LD_ADDR_OWVAR 32
40049: PUSH
40050: LD_INT 0
40052: ST_TO_ADDR
// end ;
40053: LD_VAR 0 1
40057: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40058: LD_INT 0
40060: PPUSH
40061: PPUSH
40062: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40063: LD_ADDR_VAR 0 6
40067: PUSH
40068: LD_VAR 0 1
40072: PUSH
40073: LD_VAR 0 3
40077: PLUS
40078: PUSH
40079: LD_INT 2
40081: DIV
40082: ST_TO_ADDR
// if _x < 0 then
40083: LD_VAR 0 6
40087: PUSH
40088: LD_INT 0
40090: LESS
40091: IFFALSE 40108
// _x := _x * - 1 ;
40093: LD_ADDR_VAR 0 6
40097: PUSH
40098: LD_VAR 0 6
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: MUL
40107: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40108: LD_ADDR_VAR 0 7
40112: PUSH
40113: LD_VAR 0 2
40117: PUSH
40118: LD_VAR 0 4
40122: PLUS
40123: PUSH
40124: LD_INT 2
40126: DIV
40127: ST_TO_ADDR
// if _y < 0 then
40128: LD_VAR 0 7
40132: PUSH
40133: LD_INT 0
40135: LESS
40136: IFFALSE 40153
// _y := _y * - 1 ;
40138: LD_ADDR_VAR 0 7
40142: PUSH
40143: LD_VAR 0 7
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: MUL
40152: ST_TO_ADDR
// result := [ _x , _y ] ;
40153: LD_ADDR_VAR 0 5
40157: PUSH
40158: LD_VAR 0 6
40162: PUSH
40163: LD_VAR 0 7
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// end ;
40172: LD_VAR 0 5
40176: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
// task := GetTaskList ( unit ) ;
40183: LD_ADDR_VAR 0 7
40187: PUSH
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 437
40197: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40198: LD_VAR 0 7
40202: NOT
40203: PUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: LD_VAR 0 2
40213: PPUSH
40214: CALL_OW 308
40218: NOT
40219: AND
40220: IFFALSE 40224
// exit ;
40222: GO 40342
// if IsInArea ( unit , area ) then
40224: LD_VAR 0 1
40228: PPUSH
40229: LD_VAR 0 2
40233: PPUSH
40234: CALL_OW 308
40238: IFFALSE 40256
// begin ComMoveToArea ( unit , goAway ) ;
40240: LD_VAR 0 1
40244: PPUSH
40245: LD_VAR 0 3
40249: PPUSH
40250: CALL_OW 113
// exit ;
40254: GO 40342
// end ; if task [ 1 ] [ 1 ] <> M then
40256: LD_VAR 0 7
40260: PUSH
40261: LD_INT 1
40263: ARRAY
40264: PUSH
40265: LD_INT 1
40267: ARRAY
40268: PUSH
40269: LD_STRING M
40271: NONEQUAL
40272: IFFALSE 40276
// exit ;
40274: GO 40342
// x := task [ 1 ] [ 2 ] ;
40276: LD_ADDR_VAR 0 5
40280: PUSH
40281: LD_VAR 0 7
40285: PUSH
40286: LD_INT 1
40288: ARRAY
40289: PUSH
40290: LD_INT 2
40292: ARRAY
40293: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40294: LD_ADDR_VAR 0 6
40298: PUSH
40299: LD_VAR 0 7
40303: PUSH
40304: LD_INT 1
40306: ARRAY
40307: PUSH
40308: LD_INT 3
40310: ARRAY
40311: ST_TO_ADDR
// if InArea ( x , y , area ) then
40312: LD_VAR 0 5
40316: PPUSH
40317: LD_VAR 0 6
40321: PPUSH
40322: LD_VAR 0 2
40326: PPUSH
40327: CALL_OW 309
40331: IFFALSE 40342
// ComStop ( unit ) ;
40333: LD_VAR 0 1
40337: PPUSH
40338: CALL_OW 141
// end ;
40342: LD_VAR 0 4
40346: RET
// export function Abs ( value ) ; begin
40347: LD_INT 0
40349: PPUSH
// result := value ;
40350: LD_ADDR_VAR 0 2
40354: PUSH
40355: LD_VAR 0 1
40359: ST_TO_ADDR
// if value < 0 then
40360: LD_VAR 0 1
40364: PUSH
40365: LD_INT 0
40367: LESS
40368: IFFALSE 40385
// result := value * - 1 ;
40370: LD_ADDR_VAR 0 2
40374: PUSH
40375: LD_VAR 0 1
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: MUL
40384: ST_TO_ADDR
// end ;
40385: LD_VAR 0 2
40389: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40390: LD_INT 0
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
// if not unit or not building then
40400: LD_VAR 0 1
40404: NOT
40405: PUSH
40406: LD_VAR 0 2
40410: NOT
40411: OR
40412: IFFALSE 40416
// exit ;
40414: GO 40642
// x := GetX ( building ) ;
40416: LD_ADDR_VAR 0 4
40420: PUSH
40421: LD_VAR 0 2
40425: PPUSH
40426: CALL_OW 250
40430: ST_TO_ADDR
// y := GetY ( building ) ;
40431: LD_ADDR_VAR 0 6
40435: PUSH
40436: LD_VAR 0 2
40440: PPUSH
40441: CALL_OW 251
40445: ST_TO_ADDR
// d := GetDir ( building ) ;
40446: LD_ADDR_VAR 0 8
40450: PUSH
40451: LD_VAR 0 2
40455: PPUSH
40456: CALL_OW 254
40460: ST_TO_ADDR
// r := 4 ;
40461: LD_ADDR_VAR 0 9
40465: PUSH
40466: LD_INT 4
40468: ST_TO_ADDR
// for i := 1 to 5 do
40469: LD_ADDR_VAR 0 10
40473: PUSH
40474: DOUBLE
40475: LD_INT 1
40477: DEC
40478: ST_TO_ADDR
40479: LD_INT 5
40481: PUSH
40482: FOR_TO
40483: IFFALSE 40640
// begin _x := ShiftX ( x , d , r + i ) ;
40485: LD_ADDR_VAR 0 5
40489: PUSH
40490: LD_VAR 0 4
40494: PPUSH
40495: LD_VAR 0 8
40499: PPUSH
40500: LD_VAR 0 9
40504: PUSH
40505: LD_VAR 0 10
40509: PLUS
40510: PPUSH
40511: CALL_OW 272
40515: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40516: LD_ADDR_VAR 0 7
40520: PUSH
40521: LD_VAR 0 6
40525: PPUSH
40526: LD_VAR 0 8
40530: PPUSH
40531: LD_VAR 0 9
40535: PUSH
40536: LD_VAR 0 10
40540: PLUS
40541: PPUSH
40542: CALL_OW 273
40546: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40547: LD_VAR 0 5
40551: PPUSH
40552: LD_VAR 0 7
40556: PPUSH
40557: CALL_OW 488
40561: PUSH
40562: LD_VAR 0 5
40566: PPUSH
40567: LD_VAR 0 7
40571: PPUSH
40572: CALL_OW 428
40576: PPUSH
40577: CALL_OW 247
40581: PUSH
40582: LD_INT 3
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: IN
40592: NOT
40593: AND
40594: IFFALSE 40638
// begin ComMoveXY ( unit , _x , _y ) ;
40596: LD_VAR 0 1
40600: PPUSH
40601: LD_VAR 0 5
40605: PPUSH
40606: LD_VAR 0 7
40610: PPUSH
40611: CALL_OW 111
// result := [ _x , _y ] ;
40615: LD_ADDR_VAR 0 3
40619: PUSH
40620: LD_VAR 0 5
40624: PUSH
40625: LD_VAR 0 7
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: ST_TO_ADDR
// exit ;
40634: POP
40635: POP
40636: GO 40642
// end ; end ;
40638: GO 40482
40640: POP
40641: POP
// end ;
40642: LD_VAR 0 3
40646: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40647: LD_INT 0
40649: PPUSH
40650: PPUSH
40651: PPUSH
// result := 0 ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_INT 0
40659: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40660: LD_VAR 0 1
40664: PUSH
40665: LD_INT 0
40667: LESS
40668: PUSH
40669: LD_VAR 0 1
40673: PUSH
40674: LD_INT 8
40676: GREATER
40677: OR
40678: PUSH
40679: LD_VAR 0 2
40683: PUSH
40684: LD_INT 0
40686: LESS
40687: OR
40688: PUSH
40689: LD_VAR 0 2
40693: PUSH
40694: LD_INT 8
40696: GREATER
40697: OR
40698: IFFALSE 40702
// exit ;
40700: GO 40777
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40702: LD_ADDR_VAR 0 4
40706: PUSH
40707: LD_INT 22
40709: PUSH
40710: LD_VAR 0 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PPUSH
40719: CALL_OW 69
40723: PUSH
40724: FOR_IN
40725: IFFALSE 40775
// begin un := UnitShoot ( i ) ;
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: LD_VAR 0 4
40736: PPUSH
40737: CALL_OW 504
40741: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40742: LD_VAR 0 5
40746: PPUSH
40747: CALL_OW 255
40751: PUSH
40752: LD_VAR 0 1
40756: EQUAL
40757: IFFALSE 40773
// begin result := un ;
40759: LD_ADDR_VAR 0 3
40763: PUSH
40764: LD_VAR 0 5
40768: ST_TO_ADDR
// exit ;
40769: POP
40770: POP
40771: GO 40777
// end ; end ;
40773: GO 40724
40775: POP
40776: POP
// end ;
40777: LD_VAR 0 3
40781: RET
// export function GetCargoBay ( units ) ; begin
40782: LD_INT 0
40784: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40785: LD_ADDR_VAR 0 2
40789: PUSH
40790: LD_VAR 0 1
40794: PPUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 34
40800: PUSH
40801: LD_INT 12
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 34
40810: PUSH
40811: LD_INT 51
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 34
40820: PUSH
40821: LD_INT 32
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 34
40830: PUSH
40831: LD_INT 89
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: PPUSH
40845: CALL_OW 72
40849: ST_TO_ADDR
// end ;
40850: LD_VAR 0 2
40854: RET
// export function Negate ( value ) ; begin
40855: LD_INT 0
40857: PPUSH
// result := not value ;
40858: LD_ADDR_VAR 0 2
40862: PUSH
40863: LD_VAR 0 1
40867: NOT
40868: ST_TO_ADDR
// end ;
40869: LD_VAR 0 2
40873: RET
// export function Inc ( value ) ; begin
40874: LD_INT 0
40876: PPUSH
// result := value + 1 ;
40877: LD_ADDR_VAR 0 2
40881: PUSH
40882: LD_VAR 0 1
40886: PUSH
40887: LD_INT 1
40889: PLUS
40890: ST_TO_ADDR
// end ;
40891: LD_VAR 0 2
40895: RET
// export function Dec ( value ) ; begin
40896: LD_INT 0
40898: PPUSH
// result := value - 1 ;
40899: LD_ADDR_VAR 0 2
40903: PUSH
40904: LD_VAR 0 1
40908: PUSH
40909: LD_INT 1
40911: MINUS
40912: ST_TO_ADDR
// end ;
40913: LD_VAR 0 2
40917: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
40927: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40928: LD_VAR 0 1
40932: PPUSH
40933: LD_VAR 0 2
40937: PPUSH
40938: CALL_OW 488
40942: NOT
40943: PUSH
40944: LD_VAR 0 3
40948: PPUSH
40949: LD_VAR 0 4
40953: PPUSH
40954: CALL_OW 488
40958: NOT
40959: OR
40960: IFFALSE 40973
// begin result := - 1 ;
40962: LD_ADDR_VAR 0 5
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: ST_TO_ADDR
// exit ;
40971: GO 41208
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40973: LD_ADDR_VAR 0 12
40977: PUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: LD_VAR 0 2
40987: PPUSH
40988: LD_VAR 0 3
40992: PPUSH
40993: LD_VAR 0 4
40997: PPUSH
40998: CALL 40058 0 4
41002: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41003: LD_ADDR_VAR 0 11
41007: PUSH
41008: LD_VAR 0 1
41012: PPUSH
41013: LD_VAR 0 2
41017: PPUSH
41018: LD_VAR 0 12
41022: PUSH
41023: LD_INT 1
41025: ARRAY
41026: PPUSH
41027: LD_VAR 0 12
41031: PUSH
41032: LD_INT 2
41034: ARRAY
41035: PPUSH
41036: CALL_OW 298
41040: ST_TO_ADDR
// distance := 9999 ;
41041: LD_ADDR_VAR 0 10
41045: PUSH
41046: LD_INT 9999
41048: ST_TO_ADDR
// for i := 0 to 5 do
41049: LD_ADDR_VAR 0 6
41053: PUSH
41054: DOUBLE
41055: LD_INT 0
41057: DEC
41058: ST_TO_ADDR
41059: LD_INT 5
41061: PUSH
41062: FOR_TO
41063: IFFALSE 41206
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41065: LD_ADDR_VAR 0 7
41069: PUSH
41070: LD_VAR 0 1
41074: PPUSH
41075: LD_VAR 0 6
41079: PPUSH
41080: LD_VAR 0 11
41084: PPUSH
41085: CALL_OW 272
41089: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41090: LD_ADDR_VAR 0 8
41094: PUSH
41095: LD_VAR 0 2
41099: PPUSH
41100: LD_VAR 0 6
41104: PPUSH
41105: LD_VAR 0 11
41109: PPUSH
41110: CALL_OW 273
41114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41115: LD_VAR 0 7
41119: PPUSH
41120: LD_VAR 0 8
41124: PPUSH
41125: CALL_OW 488
41129: NOT
41130: IFFALSE 41134
// continue ;
41132: GO 41062
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41134: LD_ADDR_VAR 0 9
41138: PUSH
41139: LD_VAR 0 12
41143: PUSH
41144: LD_INT 1
41146: ARRAY
41147: PPUSH
41148: LD_VAR 0 12
41152: PUSH
41153: LD_INT 2
41155: ARRAY
41156: PPUSH
41157: LD_VAR 0 7
41161: PPUSH
41162: LD_VAR 0 8
41166: PPUSH
41167: CALL_OW 298
41171: ST_TO_ADDR
// if tmp < distance then
41172: LD_VAR 0 9
41176: PUSH
41177: LD_VAR 0 10
41181: LESS
41182: IFFALSE 41204
// begin result := i ;
41184: LD_ADDR_VAR 0 5
41188: PUSH
41189: LD_VAR 0 6
41193: ST_TO_ADDR
// distance := tmp ;
41194: LD_ADDR_VAR 0 10
41198: PUSH
41199: LD_VAR 0 9
41203: ST_TO_ADDR
// end ; end ;
41204: GO 41062
41206: POP
41207: POP
// end ;
41208: LD_VAR 0 5
41212: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41213: LD_INT 0
41215: PPUSH
41216: PPUSH
// if not driver or not IsInUnit ( driver ) then
41217: LD_VAR 0 1
41221: NOT
41222: PUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 310
41232: NOT
41233: OR
41234: IFFALSE 41238
// exit ;
41236: GO 41328
// vehicle := IsInUnit ( driver ) ;
41238: LD_ADDR_VAR 0 3
41242: PUSH
41243: LD_VAR 0 1
41247: PPUSH
41248: CALL_OW 310
41252: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41253: LD_VAR 0 1
41257: PPUSH
41258: LD_STRING \
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: PUSH
41288: LD_STRING E
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_VAR 0 3
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PPUSH
41324: CALL_OW 446
// end ;
41328: LD_VAR 0 2
41332: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
// if not driver or not IsInUnit ( driver ) then
41337: LD_VAR 0 1
41341: NOT
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 310
41352: NOT
41353: OR
41354: IFFALSE 41358
// exit ;
41356: GO 41448
// vehicle := IsInUnit ( driver ) ;
41358: LD_ADDR_VAR 0 3
41362: PUSH
41363: LD_VAR 0 1
41367: PPUSH
41368: CALL_OW 310
41372: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41373: LD_VAR 0 1
41377: PPUSH
41378: LD_STRING \
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: PUSH
41408: LD_STRING E
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_VAR 0 3
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PPUSH
41444: CALL_OW 447
// end ;
41448: LD_VAR 0 2
41452: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41453: LD_INT 0
41455: PPUSH
41456: PPUSH
41457: PPUSH
// tmp := [ ] ;
41458: LD_ADDR_VAR 0 5
41462: PUSH
41463: EMPTY
41464: ST_TO_ADDR
// for i in units do
41465: LD_ADDR_VAR 0 4
41469: PUSH
41470: LD_VAR 0 1
41474: PUSH
41475: FOR_IN
41476: IFFALSE 41514
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41478: LD_ADDR_VAR 0 5
41482: PUSH
41483: LD_VAR 0 5
41487: PPUSH
41488: LD_VAR 0 5
41492: PUSH
41493: LD_INT 1
41495: PLUS
41496: PPUSH
41497: LD_VAR 0 4
41501: PPUSH
41502: CALL_OW 256
41506: PPUSH
41507: CALL_OW 2
41511: ST_TO_ADDR
41512: GO 41475
41514: POP
41515: POP
// if not tmp then
41516: LD_VAR 0 5
41520: NOT
41521: IFFALSE 41525
// exit ;
41523: GO 41573
// if asc then
41525: LD_VAR 0 2
41529: IFFALSE 41553
// result := SortListByListAsc ( units , tmp ) else
41531: LD_ADDR_VAR 0 3
41535: PUSH
41536: LD_VAR 0 1
41540: PPUSH
41541: LD_VAR 0 5
41545: PPUSH
41546: CALL_OW 76
41550: ST_TO_ADDR
41551: GO 41573
// result := SortListByListDesc ( units , tmp ) ;
41553: LD_ADDR_VAR 0 3
41557: PUSH
41558: LD_VAR 0 1
41562: PPUSH
41563: LD_VAR 0 5
41567: PPUSH
41568: CALL_OW 77
41572: ST_TO_ADDR
// end ;
41573: LD_VAR 0 3
41577: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41578: LD_INT 0
41580: PPUSH
41581: PPUSH
// task := GetTaskList ( mech ) ;
41582: LD_ADDR_VAR 0 4
41586: PUSH
41587: LD_VAR 0 1
41591: PPUSH
41592: CALL_OW 437
41596: ST_TO_ADDR
// if not task then
41597: LD_VAR 0 4
41601: NOT
41602: IFFALSE 41606
// exit ;
41604: GO 41648
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41606: LD_ADDR_VAR 0 3
41610: PUSH
41611: LD_VAR 0 4
41615: PUSH
41616: LD_INT 1
41618: ARRAY
41619: PUSH
41620: LD_INT 1
41622: ARRAY
41623: PUSH
41624: LD_STRING r
41626: EQUAL
41627: PUSH
41628: LD_VAR 0 4
41632: PUSH
41633: LD_INT 1
41635: ARRAY
41636: PUSH
41637: LD_INT 4
41639: ARRAY
41640: PUSH
41641: LD_VAR 0 2
41645: EQUAL
41646: AND
41647: ST_TO_ADDR
// end ;
41648: LD_VAR 0 3
41652: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41653: LD_INT 0
41655: PPUSH
// SetDir ( unit , d ) ;
41656: LD_VAR 0 1
41660: PPUSH
41661: LD_VAR 0 4
41665: PPUSH
41666: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41670: LD_VAR 0 1
41674: PPUSH
41675: LD_VAR 0 2
41679: PPUSH
41680: LD_VAR 0 3
41684: PPUSH
41685: LD_VAR 0 5
41689: PPUSH
41690: CALL_OW 48
// end ;
41694: LD_VAR 0 6
41698: RET
// export function ToNaturalNumber ( number ) ; begin
41699: LD_INT 0
41701: PPUSH
// result := number div 1 ;
41702: LD_ADDR_VAR 0 2
41706: PUSH
41707: LD_VAR 0 1
41711: PUSH
41712: LD_INT 1
41714: DIV
41715: ST_TO_ADDR
// if number < 0 then
41716: LD_VAR 0 1
41720: PUSH
41721: LD_INT 0
41723: LESS
41724: IFFALSE 41734
// result := 0 ;
41726: LD_ADDR_VAR 0 2
41730: PUSH
41731: LD_INT 0
41733: ST_TO_ADDR
// end ;
41734: LD_VAR 0 2
41738: RET
// export function SortByClass ( units , class ) ; var un ; begin
41739: LD_INT 0
41741: PPUSH
41742: PPUSH
// if not units or not class then
41743: LD_VAR 0 1
41747: NOT
41748: PUSH
41749: LD_VAR 0 2
41753: NOT
41754: OR
41755: IFFALSE 41759
// exit ;
41757: GO 41854
// result := [ ] ;
41759: LD_ADDR_VAR 0 3
41763: PUSH
41764: EMPTY
41765: ST_TO_ADDR
// for un in units do
41766: LD_ADDR_VAR 0 4
41770: PUSH
41771: LD_VAR 0 1
41775: PUSH
41776: FOR_IN
41777: IFFALSE 41852
// if GetClass ( un ) = class then
41779: LD_VAR 0 4
41783: PPUSH
41784: CALL_OW 257
41788: PUSH
41789: LD_VAR 0 2
41793: EQUAL
41794: IFFALSE 41821
// result := Insert ( result , 1 , un ) else
41796: LD_ADDR_VAR 0 3
41800: PUSH
41801: LD_VAR 0 3
41805: PPUSH
41806: LD_INT 1
41808: PPUSH
41809: LD_VAR 0 4
41813: PPUSH
41814: CALL_OW 2
41818: ST_TO_ADDR
41819: GO 41850
// result := Replace ( result , result + 1 , un ) ;
41821: LD_ADDR_VAR 0 3
41825: PUSH
41826: LD_VAR 0 3
41830: PPUSH
41831: LD_VAR 0 3
41835: PUSH
41836: LD_INT 1
41838: PLUS
41839: PPUSH
41840: LD_VAR 0 4
41844: PPUSH
41845: CALL_OW 1
41849: ST_TO_ADDR
41850: GO 41776
41852: POP
41853: POP
// end ;
41854: LD_VAR 0 3
41858: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41859: LD_INT 0
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
// result := [ ] ;
41868: LD_ADDR_VAR 0 4
41872: PUSH
41873: EMPTY
41874: ST_TO_ADDR
// if x - r < 0 then
41875: LD_VAR 0 1
41879: PUSH
41880: LD_VAR 0 3
41884: MINUS
41885: PUSH
41886: LD_INT 0
41888: LESS
41889: IFFALSE 41901
// min_x := 0 else
41891: LD_ADDR_VAR 0 8
41895: PUSH
41896: LD_INT 0
41898: ST_TO_ADDR
41899: GO 41917
// min_x := x - r ;
41901: LD_ADDR_VAR 0 8
41905: PUSH
41906: LD_VAR 0 1
41910: PUSH
41911: LD_VAR 0 3
41915: MINUS
41916: ST_TO_ADDR
// if y - r < 0 then
41917: LD_VAR 0 2
41921: PUSH
41922: LD_VAR 0 3
41926: MINUS
41927: PUSH
41928: LD_INT 0
41930: LESS
41931: IFFALSE 41943
// min_y := 0 else
41933: LD_ADDR_VAR 0 7
41937: PUSH
41938: LD_INT 0
41940: ST_TO_ADDR
41941: GO 41959
// min_y := y - r ;
41943: LD_ADDR_VAR 0 7
41947: PUSH
41948: LD_VAR 0 2
41952: PUSH
41953: LD_VAR 0 3
41957: MINUS
41958: ST_TO_ADDR
// max_x := x + r ;
41959: LD_ADDR_VAR 0 9
41963: PUSH
41964: LD_VAR 0 1
41968: PUSH
41969: LD_VAR 0 3
41973: PLUS
41974: ST_TO_ADDR
// max_y := y + r ;
41975: LD_ADDR_VAR 0 10
41979: PUSH
41980: LD_VAR 0 2
41984: PUSH
41985: LD_VAR 0 3
41989: PLUS
41990: ST_TO_ADDR
// for _x = min_x to max_x do
41991: LD_ADDR_VAR 0 5
41995: PUSH
41996: DOUBLE
41997: LD_VAR 0 8
42001: DEC
42002: ST_TO_ADDR
42003: LD_VAR 0 9
42007: PUSH
42008: FOR_TO
42009: IFFALSE 42110
// for _y = min_y to max_y do
42011: LD_ADDR_VAR 0 6
42015: PUSH
42016: DOUBLE
42017: LD_VAR 0 7
42021: DEC
42022: ST_TO_ADDR
42023: LD_VAR 0 10
42027: PUSH
42028: FOR_TO
42029: IFFALSE 42106
// begin if not ValidHex ( _x , _y ) then
42031: LD_VAR 0 5
42035: PPUSH
42036: LD_VAR 0 6
42040: PPUSH
42041: CALL_OW 488
42045: NOT
42046: IFFALSE 42050
// continue ;
42048: GO 42028
// if GetResourceTypeXY ( _x , _y ) then
42050: LD_VAR 0 5
42054: PPUSH
42055: LD_VAR 0 6
42059: PPUSH
42060: CALL_OW 283
42064: IFFALSE 42104
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42066: LD_ADDR_VAR 0 4
42070: PUSH
42071: LD_VAR 0 4
42075: PPUSH
42076: LD_VAR 0 4
42080: PUSH
42081: LD_INT 1
42083: PLUS
42084: PPUSH
42085: LD_VAR 0 5
42089: PUSH
42090: LD_VAR 0 6
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PPUSH
42099: CALL_OW 1
42103: ST_TO_ADDR
// end ;
42104: GO 42028
42106: POP
42107: POP
42108: GO 42008
42110: POP
42111: POP
// end ;
42112: LD_VAR 0 4
42116: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42117: LD_INT 0
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
42126: PPUSH
// if not units then
42127: LD_VAR 0 1
42131: NOT
42132: IFFALSE 42136
// exit ;
42134: GO 42664
// result := UnitFilter ( units , [ f_ok ] ) ;
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_VAR 0 1
42145: PPUSH
42146: LD_INT 50
42148: PUSH
42149: EMPTY
42150: LIST
42151: PPUSH
42152: CALL_OW 72
42156: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42157: LD_ADDR_VAR 0 8
42161: PUSH
42162: LD_VAR 0 1
42166: PUSH
42167: LD_INT 1
42169: ARRAY
42170: PPUSH
42171: CALL_OW 255
42175: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42176: LD_ADDR_VAR 0 10
42180: PUSH
42181: LD_INT 29
42183: PUSH
42184: LD_INT 91
42186: PUSH
42187: LD_INT 49
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: ST_TO_ADDR
// if not result then
42195: LD_VAR 0 3
42199: NOT
42200: IFFALSE 42204
// exit ;
42202: GO 42664
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42204: LD_ADDR_VAR 0 5
42208: PUSH
42209: LD_INT 81
42211: PUSH
42212: LD_VAR 0 8
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PPUSH
42221: CALL_OW 69
42225: ST_TO_ADDR
// for i in result do
42226: LD_ADDR_VAR 0 4
42230: PUSH
42231: LD_VAR 0 3
42235: PUSH
42236: FOR_IN
42237: IFFALSE 42662
// begin tag := GetTag ( i ) + 1 ;
42239: LD_ADDR_VAR 0 9
42243: PUSH
42244: LD_VAR 0 4
42248: PPUSH
42249: CALL_OW 110
42253: PUSH
42254: LD_INT 1
42256: PLUS
42257: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42258: LD_ADDR_VAR 0 7
42262: PUSH
42263: LD_VAR 0 4
42267: PPUSH
42268: CALL_OW 250
42272: PPUSH
42273: LD_VAR 0 4
42277: PPUSH
42278: CALL_OW 251
42282: PPUSH
42283: LD_INT 4
42285: PPUSH
42286: CALL 41859 0 3
42290: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42291: LD_VAR 0 4
42295: PPUSH
42296: CALL_OW 247
42300: PUSH
42301: LD_INT 2
42303: EQUAL
42304: PUSH
42305: LD_VAR 0 7
42309: PUSH
42310: LD_INT 2
42312: GREATER
42313: AND
42314: PUSH
42315: LD_VAR 0 4
42319: PPUSH
42320: CALL_OW 264
42324: PUSH
42325: LD_VAR 0 10
42329: IN
42330: NOT
42331: AND
42332: IFFALSE 42371
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42334: LD_VAR 0 4
42338: PPUSH
42339: LD_VAR 0 7
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: PUSH
42348: LD_INT 1
42350: ARRAY
42351: PPUSH
42352: LD_VAR 0 7
42356: PUSH
42357: LD_INT 1
42359: ARRAY
42360: PUSH
42361: LD_INT 2
42363: ARRAY
42364: PPUSH
42365: CALL_OW 116
42369: GO 42660
// if path > tag then
42371: LD_VAR 0 2
42375: PUSH
42376: LD_VAR 0 9
42380: GREATER
42381: IFFALSE 42589
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42383: LD_ADDR_VAR 0 6
42387: PUSH
42388: LD_VAR 0 5
42392: PPUSH
42393: LD_INT 91
42395: PUSH
42396: LD_VAR 0 4
42400: PUSH
42401: LD_INT 8
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: PPUSH
42409: CALL_OW 72
42413: ST_TO_ADDR
// if nearEnemy then
42414: LD_VAR 0 6
42418: IFFALSE 42487
// begin if GetWeapon ( i ) = ru_time_lapser then
42420: LD_VAR 0 4
42424: PPUSH
42425: CALL_OW 264
42429: PUSH
42430: LD_INT 49
42432: EQUAL
42433: IFFALSE 42461
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42435: LD_VAR 0 4
42439: PPUSH
42440: LD_VAR 0 6
42444: PPUSH
42445: LD_VAR 0 4
42449: PPUSH
42450: CALL_OW 74
42454: PPUSH
42455: CALL_OW 112
42459: GO 42485
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42461: LD_VAR 0 4
42465: PPUSH
42466: LD_VAR 0 6
42470: PPUSH
42471: LD_VAR 0 4
42475: PPUSH
42476: CALL_OW 74
42480: PPUSH
42481: CALL 43735 0 2
// end else
42485: GO 42587
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42487: LD_VAR 0 4
42491: PPUSH
42492: LD_VAR 0 2
42496: PUSH
42497: LD_VAR 0 9
42501: ARRAY
42502: PUSH
42503: LD_INT 1
42505: ARRAY
42506: PPUSH
42507: LD_VAR 0 2
42511: PUSH
42512: LD_VAR 0 9
42516: ARRAY
42517: PUSH
42518: LD_INT 2
42520: ARRAY
42521: PPUSH
42522: CALL_OW 297
42526: PUSH
42527: LD_INT 6
42529: GREATER
42530: IFFALSE 42573
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42532: LD_VAR 0 4
42536: PPUSH
42537: LD_VAR 0 2
42541: PUSH
42542: LD_VAR 0 9
42546: ARRAY
42547: PUSH
42548: LD_INT 1
42550: ARRAY
42551: PPUSH
42552: LD_VAR 0 2
42556: PUSH
42557: LD_VAR 0 9
42561: ARRAY
42562: PUSH
42563: LD_INT 2
42565: ARRAY
42566: PPUSH
42567: CALL_OW 114
42571: GO 42587
// SetTag ( i , tag ) ;
42573: LD_VAR 0 4
42577: PPUSH
42578: LD_VAR 0 9
42582: PPUSH
42583: CALL_OW 109
// end else
42587: GO 42660
// if enemy then
42589: LD_VAR 0 5
42593: IFFALSE 42660
// begin if GetWeapon ( i ) = ru_time_lapser then
42595: LD_VAR 0 4
42599: PPUSH
42600: CALL_OW 264
42604: PUSH
42605: LD_INT 49
42607: EQUAL
42608: IFFALSE 42636
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42610: LD_VAR 0 4
42614: PPUSH
42615: LD_VAR 0 5
42619: PPUSH
42620: LD_VAR 0 4
42624: PPUSH
42625: CALL_OW 74
42629: PPUSH
42630: CALL_OW 112
42634: GO 42660
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42636: LD_VAR 0 4
42640: PPUSH
42641: LD_VAR 0 5
42645: PPUSH
42646: LD_VAR 0 4
42650: PPUSH
42651: CALL_OW 74
42655: PPUSH
42656: CALL 43735 0 2
// end ; end ;
42660: GO 42236
42662: POP
42663: POP
// end ;
42664: LD_VAR 0 3
42668: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42669: LD_INT 0
42671: PPUSH
42672: PPUSH
42673: PPUSH
// if not unit or IsInUnit ( unit ) then
42674: LD_VAR 0 1
42678: NOT
42679: PUSH
42680: LD_VAR 0 1
42684: PPUSH
42685: CALL_OW 310
42689: OR
42690: IFFALSE 42694
// exit ;
42692: GO 42785
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42694: LD_ADDR_VAR 0 4
42698: PUSH
42699: LD_VAR 0 1
42703: PPUSH
42704: CALL_OW 250
42708: PPUSH
42709: LD_VAR 0 2
42713: PPUSH
42714: LD_INT 1
42716: PPUSH
42717: CALL_OW 272
42721: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42722: LD_ADDR_VAR 0 5
42726: PUSH
42727: LD_VAR 0 1
42731: PPUSH
42732: CALL_OW 251
42736: PPUSH
42737: LD_VAR 0 2
42741: PPUSH
42742: LD_INT 1
42744: PPUSH
42745: CALL_OW 273
42749: ST_TO_ADDR
// if ValidHex ( x , y ) then
42750: LD_VAR 0 4
42754: PPUSH
42755: LD_VAR 0 5
42759: PPUSH
42760: CALL_OW 488
42764: IFFALSE 42785
// ComTurnXY ( unit , x , y ) ;
42766: LD_VAR 0 1
42770: PPUSH
42771: LD_VAR 0 4
42775: PPUSH
42776: LD_VAR 0 5
42780: PPUSH
42781: CALL_OW 118
// end ;
42785: LD_VAR 0 3
42789: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42790: LD_INT 0
42792: PPUSH
42793: PPUSH
// result := false ;
42794: LD_ADDR_VAR 0 3
42798: PUSH
42799: LD_INT 0
42801: ST_TO_ADDR
// if not units then
42802: LD_VAR 0 2
42806: NOT
42807: IFFALSE 42811
// exit ;
42809: GO 42856
// for i in units do
42811: LD_ADDR_VAR 0 4
42815: PUSH
42816: LD_VAR 0 2
42820: PUSH
42821: FOR_IN
42822: IFFALSE 42854
// if See ( side , i ) then
42824: LD_VAR 0 1
42828: PPUSH
42829: LD_VAR 0 4
42833: PPUSH
42834: CALL_OW 292
42838: IFFALSE 42852
// begin result := true ;
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: LD_INT 1
42847: ST_TO_ADDR
// exit ;
42848: POP
42849: POP
42850: GO 42856
// end ;
42852: GO 42821
42854: POP
42855: POP
// end ;
42856: LD_VAR 0 3
42860: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42861: LD_INT 0
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
// if not unit or not points then
42867: LD_VAR 0 1
42871: NOT
42872: PUSH
42873: LD_VAR 0 2
42877: NOT
42878: OR
42879: IFFALSE 42883
// exit ;
42881: GO 42973
// dist := 99999 ;
42883: LD_ADDR_VAR 0 5
42887: PUSH
42888: LD_INT 99999
42890: ST_TO_ADDR
// for i in points do
42891: LD_ADDR_VAR 0 4
42895: PUSH
42896: LD_VAR 0 2
42900: PUSH
42901: FOR_IN
42902: IFFALSE 42971
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42904: LD_ADDR_VAR 0 6
42908: PUSH
42909: LD_VAR 0 1
42913: PPUSH
42914: LD_VAR 0 4
42918: PUSH
42919: LD_INT 1
42921: ARRAY
42922: PPUSH
42923: LD_VAR 0 4
42927: PUSH
42928: LD_INT 2
42930: ARRAY
42931: PPUSH
42932: CALL_OW 297
42936: ST_TO_ADDR
// if tmpDist < dist then
42937: LD_VAR 0 6
42941: PUSH
42942: LD_VAR 0 5
42946: LESS
42947: IFFALSE 42969
// begin result := i ;
42949: LD_ADDR_VAR 0 3
42953: PUSH
42954: LD_VAR 0 4
42958: ST_TO_ADDR
// dist := tmpDist ;
42959: LD_ADDR_VAR 0 5
42963: PUSH
42964: LD_VAR 0 6
42968: ST_TO_ADDR
// end ; end ;
42969: GO 42901
42971: POP
42972: POP
// end ;
42973: LD_VAR 0 3
42977: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42978: LD_INT 0
42980: PPUSH
// uc_side := side ;
42981: LD_ADDR_OWVAR 20
42985: PUSH
42986: LD_VAR 0 1
42990: ST_TO_ADDR
// uc_nation := 3 ;
42991: LD_ADDR_OWVAR 21
42995: PUSH
42996: LD_INT 3
42998: ST_TO_ADDR
// vc_chassis := 25 ;
42999: LD_ADDR_OWVAR 37
43003: PUSH
43004: LD_INT 25
43006: ST_TO_ADDR
// vc_engine := engine_siberite ;
43007: LD_ADDR_OWVAR 39
43011: PUSH
43012: LD_INT 3
43014: ST_TO_ADDR
// vc_control := control_computer ;
43015: LD_ADDR_OWVAR 38
43019: PUSH
43020: LD_INT 3
43022: ST_TO_ADDR
// vc_weapon := 59 ;
43023: LD_ADDR_OWVAR 40
43027: PUSH
43028: LD_INT 59
43030: ST_TO_ADDR
// result := CreateVehicle ;
43031: LD_ADDR_VAR 0 5
43035: PUSH
43036: CALL_OW 45
43040: ST_TO_ADDR
// SetDir ( result , d ) ;
43041: LD_VAR 0 5
43045: PPUSH
43046: LD_VAR 0 4
43050: PPUSH
43051: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43055: LD_VAR 0 5
43059: PPUSH
43060: LD_VAR 0 2
43064: PPUSH
43065: LD_VAR 0 3
43069: PPUSH
43070: LD_INT 0
43072: PPUSH
43073: CALL_OW 48
// end ;
43077: LD_VAR 0 5
43081: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43082: LD_INT 0
43084: PPUSH
43085: PPUSH
43086: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43087: LD_ADDR_VAR 0 2
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43110: LD_VAR 0 1
43114: NOT
43115: PUSH
43116: LD_VAR 0 1
43120: PPUSH
43121: CALL_OW 264
43125: PUSH
43126: LD_INT 12
43128: PUSH
43129: LD_INT 51
43131: PUSH
43132: LD_INT 32
43134: PUSH
43135: LD_INT 89
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: IN
43144: NOT
43145: OR
43146: IFFALSE 43150
// exit ;
43148: GO 43248
// for i := 1 to 3 do
43150: LD_ADDR_VAR 0 3
43154: PUSH
43155: DOUBLE
43156: LD_INT 1
43158: DEC
43159: ST_TO_ADDR
43160: LD_INT 3
43162: PUSH
43163: FOR_TO
43164: IFFALSE 43246
// begin tmp := GetCargo ( cargo , i ) ;
43166: LD_ADDR_VAR 0 4
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: LD_VAR 0 3
43180: PPUSH
43181: CALL_OW 289
43185: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43186: LD_ADDR_VAR 0 2
43190: PUSH
43191: LD_VAR 0 2
43195: PPUSH
43196: LD_VAR 0 3
43200: PPUSH
43201: LD_VAR 0 4
43205: PPUSH
43206: CALL_OW 1
43210: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43211: LD_ADDR_VAR 0 2
43215: PUSH
43216: LD_VAR 0 2
43220: PPUSH
43221: LD_INT 4
43223: PPUSH
43224: LD_VAR 0 2
43228: PUSH
43229: LD_INT 4
43231: ARRAY
43232: PUSH
43233: LD_VAR 0 4
43237: PLUS
43238: PPUSH
43239: CALL_OW 1
43243: ST_TO_ADDR
// end ;
43244: GO 43163
43246: POP
43247: POP
// end ;
43248: LD_VAR 0 2
43252: RET
// export function Length ( array ) ; begin
43253: LD_INT 0
43255: PPUSH
// result := array + 0 ;
43256: LD_ADDR_VAR 0 2
43260: PUSH
43261: LD_VAR 0 1
43265: PUSH
43266: LD_INT 0
43268: PLUS
43269: ST_TO_ADDR
// end ;
43270: LD_VAR 0 2
43274: RET
// export function PrepareArray ( array ) ; begin
43275: LD_INT 0
43277: PPUSH
// result := array diff 0 ;
43278: LD_ADDR_VAR 0 2
43282: PUSH
43283: LD_VAR 0 1
43287: PUSH
43288: LD_INT 0
43290: DIFF
43291: ST_TO_ADDR
// if not result [ 1 ] then
43292: LD_VAR 0 2
43296: PUSH
43297: LD_INT 1
43299: ARRAY
43300: NOT
43301: IFFALSE 43321
// result := Delete ( result , 1 ) ;
43303: LD_ADDR_VAR 0 2
43307: PUSH
43308: LD_VAR 0 2
43312: PPUSH
43313: LD_INT 1
43315: PPUSH
43316: CALL_OW 3
43320: ST_TO_ADDR
// end ;
43321: LD_VAR 0 2
43325: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43326: LD_INT 0
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
// sibRocketRange := 25 ;
43332: LD_ADDR_VAR 0 6
43336: PUSH
43337: LD_INT 25
43339: ST_TO_ADDR
// result := false ;
43340: LD_ADDR_VAR 0 4
43344: PUSH
43345: LD_INT 0
43347: ST_TO_ADDR
// for i := 0 to 5 do
43348: LD_ADDR_VAR 0 5
43352: PUSH
43353: DOUBLE
43354: LD_INT 0
43356: DEC
43357: ST_TO_ADDR
43358: LD_INT 5
43360: PUSH
43361: FOR_TO
43362: IFFALSE 43429
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43364: LD_VAR 0 1
43368: PPUSH
43369: LD_VAR 0 5
43373: PPUSH
43374: LD_VAR 0 6
43378: PPUSH
43379: CALL_OW 272
43383: PPUSH
43384: LD_VAR 0 2
43388: PPUSH
43389: LD_VAR 0 5
43393: PPUSH
43394: LD_VAR 0 6
43398: PPUSH
43399: CALL_OW 273
43403: PPUSH
43404: LD_VAR 0 3
43408: PPUSH
43409: CALL_OW 309
43413: IFFALSE 43427
// begin result := true ;
43415: LD_ADDR_VAR 0 4
43419: PUSH
43420: LD_INT 1
43422: ST_TO_ADDR
// exit ;
43423: POP
43424: POP
43425: GO 43431
// end ;
43427: GO 43361
43429: POP
43430: POP
// end ;
43431: LD_VAR 0 4
43435: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43436: LD_INT 0
43438: PPUSH
43439: PPUSH
43440: PPUSH
// if btype = b_depot then
43441: LD_VAR 0 2
43445: PUSH
43446: LD_INT 0
43448: EQUAL
43449: IFFALSE 43461
// begin result := true ;
43451: LD_ADDR_VAR 0 3
43455: PUSH
43456: LD_INT 1
43458: ST_TO_ADDR
// exit ;
43459: GO 43577
// end ; pom := GetBase ( depot ) ;
43461: LD_ADDR_VAR 0 4
43465: PUSH
43466: LD_VAR 0 1
43470: PPUSH
43471: CALL_OW 274
43475: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43476: LD_ADDR_VAR 0 5
43480: PUSH
43481: LD_VAR 0 2
43485: PPUSH
43486: LD_VAR 0 1
43490: PPUSH
43491: CALL_OW 248
43495: PPUSH
43496: CALL_OW 450
43500: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43501: LD_ADDR_VAR 0 3
43505: PUSH
43506: LD_VAR 0 4
43510: PPUSH
43511: LD_INT 1
43513: PPUSH
43514: CALL_OW 275
43518: PUSH
43519: LD_VAR 0 5
43523: PUSH
43524: LD_INT 1
43526: ARRAY
43527: GREATEREQUAL
43528: PUSH
43529: LD_VAR 0 4
43533: PPUSH
43534: LD_INT 2
43536: PPUSH
43537: CALL_OW 275
43541: PUSH
43542: LD_VAR 0 5
43546: PUSH
43547: LD_INT 2
43549: ARRAY
43550: GREATEREQUAL
43551: AND
43552: PUSH
43553: LD_VAR 0 4
43557: PPUSH
43558: LD_INT 3
43560: PPUSH
43561: CALL_OW 275
43565: PUSH
43566: LD_VAR 0 5
43570: PUSH
43571: LD_INT 3
43573: ARRAY
43574: GREATEREQUAL
43575: AND
43576: ST_TO_ADDR
// end ;
43577: LD_VAR 0 3
43581: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43582: LD_INT 0
43584: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43585: LD_VAR 0 1
43589: PPUSH
43590: LD_VAR 0 2
43594: PPUSH
43595: LD_INT 0
43597: PPUSH
43598: LD_INT 0
43600: PPUSH
43601: LD_INT 1
43603: PPUSH
43604: LD_INT 0
43606: PPUSH
43607: CALL_OW 587
// end ;
43611: LD_VAR 0 3
43615: RET
// export function CenterOnNow ( unit ) ; begin
43616: LD_INT 0
43618: PPUSH
// result := IsInUnit ( unit ) ;
43619: LD_ADDR_VAR 0 2
43623: PUSH
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 310
43633: ST_TO_ADDR
// if not result then
43634: LD_VAR 0 2
43638: NOT
43639: IFFALSE 43651
// result := unit ;
43641: LD_ADDR_VAR 0 2
43645: PUSH
43646: LD_VAR 0 1
43650: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43651: LD_VAR 0 1
43655: PPUSH
43656: CALL_OW 87
// end ;
43660: LD_VAR 0 2
43664: RET
// export function ComMoveHex ( unit , hex ) ; begin
43665: LD_INT 0
43667: PPUSH
// if not hex then
43668: LD_VAR 0 2
43672: NOT
43673: IFFALSE 43677
// exit ;
43675: GO 43730
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43677: LD_VAR 0 2
43681: PUSH
43682: LD_INT 1
43684: ARRAY
43685: PPUSH
43686: LD_VAR 0 2
43690: PUSH
43691: LD_INT 2
43693: ARRAY
43694: PPUSH
43695: CALL_OW 428
43699: IFFALSE 43703
// exit ;
43701: GO 43730
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43703: LD_VAR 0 1
43707: PPUSH
43708: LD_VAR 0 2
43712: PUSH
43713: LD_INT 1
43715: ARRAY
43716: PPUSH
43717: LD_VAR 0 2
43721: PUSH
43722: LD_INT 2
43724: ARRAY
43725: PPUSH
43726: CALL_OW 111
// end ;
43730: LD_VAR 0 3
43734: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43735: LD_INT 0
43737: PPUSH
43738: PPUSH
43739: PPUSH
// if not unit or not enemy then
43740: LD_VAR 0 1
43744: NOT
43745: PUSH
43746: LD_VAR 0 2
43750: NOT
43751: OR
43752: IFFALSE 43756
// exit ;
43754: GO 43880
// x := GetX ( enemy ) ;
43756: LD_ADDR_VAR 0 4
43760: PUSH
43761: LD_VAR 0 2
43765: PPUSH
43766: CALL_OW 250
43770: ST_TO_ADDR
// y := GetY ( enemy ) ;
43771: LD_ADDR_VAR 0 5
43775: PUSH
43776: LD_VAR 0 2
43780: PPUSH
43781: CALL_OW 251
43785: ST_TO_ADDR
// if ValidHex ( x , y ) then
43786: LD_VAR 0 4
43790: PPUSH
43791: LD_VAR 0 5
43795: PPUSH
43796: CALL_OW 488
43800: IFFALSE 43880
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43802: LD_VAR 0 2
43806: PPUSH
43807: CALL_OW 247
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: IN
43822: PUSH
43823: LD_VAR 0 1
43827: PPUSH
43828: CALL_OW 255
43832: PPUSH
43833: LD_VAR 0 2
43837: PPUSH
43838: CALL_OW 292
43842: OR
43843: IFFALSE 43861
// ComAttackUnit ( unit , enemy ) else
43845: LD_VAR 0 1
43849: PPUSH
43850: LD_VAR 0 2
43854: PPUSH
43855: CALL_OW 115
43859: GO 43880
// ComAgressiveMove ( unit , x , y ) ;
43861: LD_VAR 0 1
43865: PPUSH
43866: LD_VAR 0 4
43870: PPUSH
43871: LD_VAR 0 5
43875: PPUSH
43876: CALL_OW 114
// end ;
43880: LD_VAR 0 3
43884: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43885: LD_INT 0
43887: PPUSH
43888: PPUSH
43889: PPUSH
// list := AreaToList ( area , 0 ) ;
43890: LD_ADDR_VAR 0 5
43894: PUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: LD_INT 0
43902: PPUSH
43903: CALL_OW 517
43907: ST_TO_ADDR
// if not list then
43908: LD_VAR 0 5
43912: NOT
43913: IFFALSE 43917
// exit ;
43915: GO 44047
// if all then
43917: LD_VAR 0 2
43921: IFFALSE 44009
// begin for i := 1 to list [ 1 ] do
43923: LD_ADDR_VAR 0 4
43927: PUSH
43928: DOUBLE
43929: LD_INT 1
43931: DEC
43932: ST_TO_ADDR
43933: LD_VAR 0 5
43937: PUSH
43938: LD_INT 1
43940: ARRAY
43941: PUSH
43942: FOR_TO
43943: IFFALSE 44005
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43945: LD_ADDR_VAR 0 3
43949: PUSH
43950: LD_VAR 0 3
43954: PPUSH
43955: LD_VAR 0 3
43959: PUSH
43960: LD_INT 1
43962: PLUS
43963: PPUSH
43964: LD_VAR 0 5
43968: PUSH
43969: LD_INT 1
43971: ARRAY
43972: PUSH
43973: LD_VAR 0 4
43977: ARRAY
43978: PUSH
43979: LD_VAR 0 5
43983: PUSH
43984: LD_INT 2
43986: ARRAY
43987: PUSH
43988: LD_VAR 0 4
43992: ARRAY
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PPUSH
43998: CALL_OW 1
44002: ST_TO_ADDR
44003: GO 43942
44005: POP
44006: POP
// exit ;
44007: GO 44047
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: LD_VAR 0 5
44018: PUSH
44019: LD_INT 1
44021: ARRAY
44022: PUSH
44023: LD_INT 1
44025: ARRAY
44026: PUSH
44027: LD_VAR 0 5
44031: PUSH
44032: LD_INT 2
44034: ARRAY
44035: PUSH
44036: LD_INT 1
44038: ARRAY
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: ST_TO_ADDR
// end ;
44047: LD_VAR 0 3
44051: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44052: LD_INT 0
44054: PPUSH
44055: PPUSH
// list := AreaToList ( area , 0 ) ;
44056: LD_ADDR_VAR 0 4
44060: PUSH
44061: LD_VAR 0 1
44065: PPUSH
44066: LD_INT 0
44068: PPUSH
44069: CALL_OW 517
44073: ST_TO_ADDR
// if not list then
44074: LD_VAR 0 4
44078: NOT
44079: IFFALSE 44083
// exit ;
44081: GO 44124
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_VAR 0 4
44092: PUSH
44093: LD_INT 1
44095: ARRAY
44096: PUSH
44097: LD_INT 1
44099: ARRAY
44100: PUSH
44101: LD_VAR 0 4
44105: PUSH
44106: LD_INT 2
44108: ARRAY
44109: PUSH
44110: LD_INT 1
44112: ARRAY
44113: PUSH
44114: LD_VAR 0 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: ST_TO_ADDR
// end ;
44124: LD_VAR 0 3
44128: RET
// export function First ( array ) ; begin
44129: LD_INT 0
44131: PPUSH
// if not array then
44132: LD_VAR 0 1
44136: NOT
44137: IFFALSE 44141
// exit ;
44139: GO 44155
// result := array [ 1 ] ;
44141: LD_ADDR_VAR 0 2
44145: PUSH
44146: LD_VAR 0 1
44150: PUSH
44151: LD_INT 1
44153: ARRAY
44154: ST_TO_ADDR
// end ;
44155: LD_VAR 0 2
44159: RET
// export function Last ( array ) ; begin
44160: LD_INT 0
44162: PPUSH
// if not array then
44163: LD_VAR 0 1
44167: NOT
44168: IFFALSE 44172
// exit ;
44170: GO 44188
// result := array [ array ] ;
44172: LD_ADDR_VAR 0 2
44176: PUSH
44177: LD_VAR 0 1
44181: PUSH
44182: LD_VAR 0 1
44186: ARRAY
44187: ST_TO_ADDR
// end ;
44188: LD_VAR 0 2
44192: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44193: LD_INT 0
44195: PPUSH
44196: PPUSH
// result := [ ] ;
44197: LD_ADDR_VAR 0 5
44201: PUSH
44202: EMPTY
44203: ST_TO_ADDR
// if not array then
44204: LD_VAR 0 1
44208: NOT
44209: IFFALSE 44213
// exit ;
44211: GO 44325
// for i := 1 to array do
44213: LD_ADDR_VAR 0 6
44217: PUSH
44218: DOUBLE
44219: LD_INT 1
44221: DEC
44222: ST_TO_ADDR
44223: LD_VAR 0 1
44227: PUSH
44228: FOR_TO
44229: IFFALSE 44323
// if array [ i ] [ index ] = value then
44231: LD_VAR 0 1
44235: PUSH
44236: LD_VAR 0 6
44240: ARRAY
44241: PUSH
44242: LD_VAR 0 2
44246: ARRAY
44247: PUSH
44248: LD_VAR 0 3
44252: EQUAL
44253: IFFALSE 44321
// begin if indexColumn then
44255: LD_VAR 0 4
44259: IFFALSE 44295
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44261: LD_ADDR_VAR 0 5
44265: PUSH
44266: LD_VAR 0 5
44270: PPUSH
44271: LD_VAR 0 1
44275: PUSH
44276: LD_VAR 0 6
44280: ARRAY
44281: PUSH
44282: LD_VAR 0 4
44286: ARRAY
44287: PPUSH
44288: CALL 39513 0 2
44292: ST_TO_ADDR
44293: GO 44321
// result := Join ( result , array [ i ] ) ;
44295: LD_ADDR_VAR 0 5
44299: PUSH
44300: LD_VAR 0 5
44304: PPUSH
44305: LD_VAR 0 1
44309: PUSH
44310: LD_VAR 0 6
44314: ARRAY
44315: PPUSH
44316: CALL 39513 0 2
44320: ST_TO_ADDR
// end ;
44321: GO 44228
44323: POP
44324: POP
// end ;
44325: LD_VAR 0 5
44329: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44330: LD_INT 0
44332: PPUSH
// if not vehicles or not parkingPoint then
44333: LD_VAR 0 1
44337: NOT
44338: PUSH
44339: LD_VAR 0 2
44343: NOT
44344: OR
44345: IFFALSE 44349
// exit ;
44347: GO 44447
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44349: LD_ADDR_VAR 0 1
44353: PUSH
44354: LD_VAR 0 1
44358: PPUSH
44359: LD_INT 50
44361: PUSH
44362: EMPTY
44363: LIST
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: LD_INT 92
44370: PUSH
44371: LD_VAR 0 2
44375: PUSH
44376: LD_INT 1
44378: ARRAY
44379: PUSH
44380: LD_VAR 0 2
44384: PUSH
44385: LD_INT 2
44387: ARRAY
44388: PUSH
44389: LD_INT 8
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PPUSH
44406: CALL_OW 72
44410: ST_TO_ADDR
// if not vehicles then
44411: LD_VAR 0 1
44415: NOT
44416: IFFALSE 44420
// exit ;
44418: GO 44447
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44420: LD_VAR 0 1
44424: PPUSH
44425: LD_VAR 0 2
44429: PUSH
44430: LD_INT 1
44432: ARRAY
44433: PPUSH
44434: LD_VAR 0 2
44438: PUSH
44439: LD_INT 2
44441: ARRAY
44442: PPUSH
44443: CALL_OW 111
// end ;
44447: LD_VAR 0 3
44451: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44452: LD_INT 0
44454: PPUSH
44455: PPUSH
44456: PPUSH
// if not side or not area then
44457: LD_VAR 0 1
44461: NOT
44462: PUSH
44463: LD_VAR 0 2
44467: NOT
44468: OR
44469: IFFALSE 44473
// exit ;
44471: GO 44592
// tmp := AreaToList ( area , 0 ) ;
44473: LD_ADDR_VAR 0 5
44477: PUSH
44478: LD_VAR 0 2
44482: PPUSH
44483: LD_INT 0
44485: PPUSH
44486: CALL_OW 517
44490: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44491: LD_ADDR_VAR 0 4
44495: PUSH
44496: DOUBLE
44497: LD_INT 1
44499: DEC
44500: ST_TO_ADDR
44501: LD_VAR 0 5
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: PUSH
44510: FOR_TO
44511: IFFALSE 44590
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44513: LD_VAR 0 5
44517: PUSH
44518: LD_INT 1
44520: ARRAY
44521: PUSH
44522: LD_VAR 0 4
44526: ARRAY
44527: PPUSH
44528: LD_VAR 0 5
44532: PUSH
44533: LD_INT 2
44535: ARRAY
44536: PUSH
44537: LD_VAR 0 4
44541: ARRAY
44542: PPUSH
44543: CALL_OW 351
44547: IFFALSE 44588
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44549: LD_VAR 0 5
44553: PUSH
44554: LD_INT 1
44556: ARRAY
44557: PUSH
44558: LD_VAR 0 4
44562: ARRAY
44563: PPUSH
44564: LD_VAR 0 5
44568: PUSH
44569: LD_INT 2
44571: ARRAY
44572: PUSH
44573: LD_VAR 0 4
44577: ARRAY
44578: PPUSH
44579: LD_VAR 0 1
44583: PPUSH
44584: CALL_OW 244
// end ;
44588: GO 44510
44590: POP
44591: POP
// end ;
44592: LD_VAR 0 3
44596: RET
