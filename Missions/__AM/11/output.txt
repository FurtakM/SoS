// export debug ; export JMM , Powell ; export cars , people ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// RevealFogArea ( 1 , fogArea ) ;
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: CALL_OW 332
// Video ( true ) ;
  25: LD_INT 1
  27: PPUSH
  28: CALL 39455 0 1
// CenterNowOnXY ( 42 , 40 ) ;
  32: LD_INT 42
  34: PPUSH
  35: LD_INT 40
  37: PPUSH
  38: CALL_OW 86
// PrepareUnits ;
  42: CALL 51 0 0
// Action ;
  46: CALL 505 0 0
// end ;
  50: END
// function PrepareUnits ; var i , un , veh , coords ; begin
  51: LD_INT 0
  53: PPUSH
  54: PPUSH
  55: PPUSH
  56: PPUSH
  57: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 10c_ ) ;
  58: LD_ADDR_EXP 2
  62: PUSH
  63: LD_STRING JMM
  65: PPUSH
  66: LD_EXP 1
  70: NOT
  71: PPUSH
  72: LD_STRING 10c_
  74: PPUSH
  75: CALL 1781 0 3
  79: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
  80: LD_ADDR_EXP 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
  93: LD_EXP 2
  97: PPUSH
  98: LD_INT 1
 100: PPUSH
 101: CALL_OW 336
// cars := [ ] ;
 105: LD_ADDR_EXP 4
 109: PUSH
 110: EMPTY
 111: ST_TO_ADDR
// people := [ ] ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// coords := [ [ 31 , 28 ] , [ 36 , 35 ] , [ 39 , 38 ] , [ 41 , 41 ] , [ 44 , 47 ] ] ;
 119: LD_ADDR_VAR 0 5
 123: PUSH
 124: LD_INT 31
 126: PUSH
 127: LD_INT 28
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PUSH
 134: LD_INT 36
 136: PUSH
 137: LD_INT 35
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 39
 146: PUSH
 147: LD_INT 38
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: LD_INT 41
 156: PUSH
 157: LD_INT 41
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 44
 166: PUSH
 167: LD_INT 47
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// for i := 1 to 3 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 3
 193: PUSH
 194: FOR_TO
 195: IFFALSE 239
// begin PrepareSoldier ( false , 7 ) ;
 197: LD_INT 0
 199: PPUSH
 200: LD_INT 7
 202: PPUSH
 203: CALL_OW 381
// un := CreateHuman ;
 207: LD_ADDR_VAR 0 3
 211: PUSH
 212: CALL_OW 44
 216: ST_TO_ADDR
// people := Join ( people , un ) ;
 217: LD_ADDR_EXP 5
 221: PUSH
 222: LD_EXP 5
 226: PPUSH
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL 39483 0 2
 236: ST_TO_ADDR
// end ;
 237: GO 194
 239: POP
 240: POP
// people := Insert ( people , 2 , Powell ) ;
 241: LD_ADDR_EXP 5
 245: PUSH
 246: LD_EXP 5
 250: PPUSH
 251: LD_INT 2
 253: PPUSH
 254: LD_EXP 3
 258: PPUSH
 259: CALL_OW 2
 263: ST_TO_ADDR
// people := Insert ( people , 3 , JMM ) ;
 264: LD_ADDR_EXP 5
 268: PUSH
 269: LD_EXP 5
 273: PPUSH
 274: LD_INT 3
 276: PPUSH
 277: LD_EXP 2
 281: PPUSH
 282: CALL_OW 2
 286: ST_TO_ADDR
// for i := 1 to 5 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 5
 299: PUSH
 300: FOR_TO
 301: IFFALSE 498
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_gatling_gun , us_double_gun , us_double_gun , us_radar , us_rocket_launcher ] [ i mod 5 + 1 ] , 100 ) ;
 303: LD_INT 3
 305: PPUSH
 306: LD_INT 1
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 4
 314: PUSH
 315: LD_INT 5
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 11
 323: PUSH
 324: LD_INT 7
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: LIST
 333: PUSH
 334: LD_VAR 0 2
 338: PUSH
 339: LD_INT 5
 341: MOD
 342: PUSH
 343: LD_INT 1
 345: PLUS
 346: ARRAY
 347: PPUSH
 348: LD_INT 100
 350: PPUSH
 351: CALL 6621 0 5
// veh := CreateVehicle ;
 355: LD_ADDR_VAR 0 4
 359: PUSH
 360: CALL_OW 45
 364: ST_TO_ADDR
// cars := Join ( cars , veh ) ;
 365: LD_ADDR_EXP 4
 369: PUSH
 370: LD_EXP 4
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 39483 0 2
 384: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 233
// PlaceUnitXY ( veh , 56 , 77 , false ) ;
 397: LD_VAR 0 4
 401: PPUSH
 402: LD_INT 56
 404: PPUSH
 405: LD_INT 77
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// PlaceHumanInUnit ( people [ i ] , veh ) ;
 415: LD_EXP 5
 419: PUSH
 420: LD_VAR 0 2
 424: ARRAY
 425: PPUSH
 426: LD_VAR 0 4
 430: PPUSH
 431: CALL_OW 52
// ComMoveXY ( veh , 48 , 61 ) ;
 435: LD_VAR 0 4
 439: PPUSH
 440: LD_INT 48
 442: PPUSH
 443: LD_INT 61
 445: PPUSH
 446: CALL_OW 111
// AddComMoveXY ( veh , coords [ i ] [ 1 ] , coords [ i ] [ 2 ] ) ;
 450: LD_VAR 0 4
 454: PPUSH
 455: LD_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PUSH
 466: LD_INT 1
 468: ARRAY
 469: PPUSH
 470: LD_VAR 0 5
 474: PUSH
 475: LD_VAR 0 2
 479: ARRAY
 480: PUSH
 481: LD_INT 2
 483: ARRAY
 484: PPUSH
 485: CALL_OW 171
// wait ( 0 0$3 ) ;
 489: LD_INT 105
 491: PPUSH
 492: CALL_OW 67
// end ;
 496: GO 300
 498: POP
 499: POP
// end ;
 500: LD_VAR 0 1
 504: RET
// function Action ; var i , p ; begin
 505: LD_INT 0
 507: PPUSH
 508: PPUSH
 509: PPUSH
// p := 0 ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_INT 0
 517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 518: LD_INT 35
 520: PPUSH
 521: CALL_OW 67
// p := Inc ( p ) ;
 525: LD_ADDR_VAR 0 3
 529: PUSH
 530: LD_VAR 0 3
 534: PPUSH
 535: CALL 40844 0 1
 539: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , stopConvoyArea ] , [ f_not , [ f_hastask ] ] ] ) >= 5 or p > 20 ;
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 95
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 3
 562: PUSH
 563: LD_INT 60
 565: PUSH
 566: EMPTY
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: PUSH
 583: LD_INT 5
 585: GREATEREQUAL
 586: PUSH
 587: LD_VAR 0 3
 591: PUSH
 592: LD_INT 20
 594: GREATER
 595: OR
 596: IFFALSE 518
// wait ( 0 0$1 ) ;
 598: LD_INT 35
 600: PPUSH
 601: CALL_OW 67
// ComExitVehicle ( JMM ) ;
 605: LD_EXP 2
 609: PPUSH
 610: CALL_OW 121
// ComExitVehicle ( Powell ) ;
 614: LD_EXP 3
 618: PPUSH
 619: CALL_OW 121
// wait ( 0 0$0.3 ) ;
 623: LD_INT 10
 625: PPUSH
 626: CALL_OW 67
// AddComMoveXY ( Powell , 52 , 42 ) ;
 630: LD_EXP 3
 634: PPUSH
 635: LD_INT 52
 637: PPUSH
 638: LD_INT 42
 640: PPUSH
 641: CALL_OW 171
// AddComMoveXY ( JMM , 52 , 42 ) ;
 645: LD_EXP 2
 649: PPUSH
 650: LD_INT 52
 652: PPUSH
 653: LD_INT 42
 655: PPUSH
 656: CALL_OW 171
// AddComMoveXY ( Powell , 68 , 55 ) ;
 660: LD_EXP 3
 664: PPUSH
 665: LD_INT 68
 667: PPUSH
 668: LD_INT 55
 670: PPUSH
 671: CALL_OW 171
// AddComMoveXY ( JMM , 68 , 58 ) ;
 675: LD_EXP 2
 679: PPUSH
 680: LD_INT 68
 682: PPUSH
 683: LD_INT 58
 685: PPUSH
 686: CALL_OW 171
// ComExitVehicle ( people [ 4 ] ) ;
 690: LD_EXP 5
 694: PUSH
 695: LD_INT 4
 697: ARRAY
 698: PPUSH
 699: CALL_OW 121
// ComExitVehicle ( people [ 5 ] ) ;
 703: LD_EXP 5
 707: PUSH
 708: LD_INT 5
 710: ARRAY
 711: PPUSH
 712: CALL_OW 121
// wait ( 0 0$02 ) ;
 716: LD_INT 70
 718: PPUSH
 719: CALL_OW 67
// ComMoveXY ( people [ 4 ] , 50 , 40 ) ;
 723: LD_EXP 5
 727: PUSH
 728: LD_INT 4
 730: ARRAY
 731: PPUSH
 732: LD_INT 50
 734: PPUSH
 735: LD_INT 40
 737: PPUSH
 738: CALL_OW 111
// ComMoveXY ( people [ 5 ] , 49 , 59 ) ;
 742: LD_EXP 5
 746: PUSH
 747: LD_INT 5
 749: ARRAY
 750: PPUSH
 751: LD_INT 49
 753: PPUSH
 754: LD_INT 59
 756: PPUSH
 757: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 761: LD_INT 35
 763: PPUSH
 764: CALL_OW 67
// if not IsAt ( JMM , 68 , 58 ) and not HasTask ( JMM ) then
 768: LD_EXP 2
 772: PPUSH
 773: LD_INT 68
 775: PPUSH
 776: LD_INT 58
 778: PPUSH
 779: CALL_OW 307
 783: NOT
 784: PUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL_OW 314
 794: NOT
 795: AND
 796: IFFALSE 813
// ComMoveXY ( JMM , 68 , 58 ) ;
 798: LD_EXP 2
 802: PPUSH
 803: LD_INT 68
 805: PPUSH
 806: LD_INT 58
 808: PPUSH
 809: CALL_OW 111
// if not IsAt ( Powell , 68 , 55 ) and not HasTask ( Powell ) then
 813: LD_EXP 3
 817: PPUSH
 818: LD_INT 68
 820: PPUSH
 821: LD_INT 55
 823: PPUSH
 824: CALL_OW 307
 828: NOT
 829: PUSH
 830: LD_EXP 3
 834: PPUSH
 835: CALL_OW 314
 839: NOT
 840: AND
 841: IFFALSE 858
// ComMoveXY ( Powell , 68 , 55 ) ;
 843: LD_EXP 3
 847: PPUSH
 848: LD_INT 68
 850: PPUSH
 851: LD_INT 55
 853: PPUSH
 854: CALL_OW 111
// until IsAt ( Powell , 68 , 55 ) and IsAt ( JMM , 68 , 58 ) ;
 858: LD_EXP 3
 862: PPUSH
 863: LD_INT 68
 865: PPUSH
 866: LD_INT 55
 868: PPUSH
 869: CALL_OW 307
 873: PUSH
 874: LD_EXP 2
 878: PPUSH
 879: LD_INT 68
 881: PPUSH
 882: LD_INT 58
 884: PPUSH
 885: CALL_OW 307
 889: AND
 890: IFFALSE 761
// AddComTurnXY ( Powell , 73 , 54 ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_INT 73
 899: PPUSH
 900: LD_INT 54
 902: PPUSH
 903: CALL_OW 178
// AddComTurnXY ( JMM , 74 , 58 ) ;
 907: LD_EXP 2
 911: PPUSH
 912: LD_INT 74
 914: PPUSH
 915: LD_INT 58
 917: PPUSH
 918: CALL_OW 178
// CenterNowOnUnits ( JMM ) ;
 922: LD_EXP 2
 926: PPUSH
 927: CALL_OW 87
// Say ( Powell , D1-Pow-1 ) ;
 931: LD_EXP 3
 935: PPUSH
 936: LD_STRING D1-Pow-1
 938: PPUSH
 939: CALL_OW 88
// Say ( JMM , D1-JMM-1 ) ;
 943: LD_EXP 2
 947: PPUSH
 948: LD_STRING D1-JMM-1
 950: PPUSH
 951: CALL_OW 88
// Say ( Powell , D1-Pow-2 ) ;
 955: LD_EXP 3
 959: PPUSH
 960: LD_STRING D1-Pow-2
 962: PPUSH
 963: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
 967: LD_EXP 2
 971: PPUSH
 972: LD_EXP 3
 976: PPUSH
 977: CALL_OW 119
// Say ( JMM , D1-JMM-2 ) ;
 981: LD_EXP 2
 985: PPUSH
 986: LD_STRING D1-JMM-2
 988: PPUSH
 989: CALL_OW 88
// wait ( 0 0$01 ) ;
 993: LD_INT 35
 995: PPUSH
 996: CALL_OW 67
// ComTurnUnit ( Powell , JMM ) ;
1000: LD_EXP 3
1004: PPUSH
1005: LD_EXP 2
1009: PPUSH
1010: CALL_OW 119
// Say ( Powell , D1-Pow-3 ) ;
1014: LD_EXP 3
1018: PPUSH
1019: LD_STRING D1-Pow-3
1021: PPUSH
1022: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_STRING D1-JMM-3
1033: PPUSH
1034: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
1038: LD_EXP 3
1042: PPUSH
1043: LD_STRING D1-Pow-4
1045: PPUSH
1046: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
1050: LD_EXP 2
1054: PPUSH
1055: LD_STRING D1-JMM-4
1057: PPUSH
1058: CALL_OW 88
// Say ( Powell , D1-Pow-5 ) ;
1062: LD_EXP 3
1066: PPUSH
1067: LD_STRING D1-Pow-5
1069: PPUSH
1070: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
1074: LD_EXP 2
1078: PPUSH
1079: LD_STRING D1-JMM-5
1081: PPUSH
1082: CALL_OW 88
// Say ( Powell , D1-Pow-6 ) ;
1086: LD_EXP 3
1090: PPUSH
1091: LD_STRING D1-Pow-6
1093: PPUSH
1094: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
1098: LD_EXP 2
1102: PPUSH
1103: LD_STRING D1-JMM-6
1105: PPUSH
1106: CALL_OW 88
// Say ( Powell , D1-Pow-7 ) ;
1110: LD_EXP 3
1114: PPUSH
1115: LD_STRING D1-Pow-7
1117: PPUSH
1118: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
1122: LD_EXP 2
1126: PPUSH
1127: LD_STRING D1-JMM-7
1129: PPUSH
1130: CALL_OW 88
// ComMoveXY ( Powell , 68 , 57 ) ;
1134: LD_EXP 3
1138: PPUSH
1139: LD_INT 68
1141: PPUSH
1142: LD_INT 57
1144: PPUSH
1145: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
1149: LD_INT 10
1151: PPUSH
1152: CALL_OW 67
// until IsAt ( Powell , 68 , 57 ) ;
1156: LD_EXP 3
1160: PPUSH
1161: LD_INT 68
1163: PPUSH
1164: LD_INT 57
1166: PPUSH
1167: CALL_OW 307
1171: IFFALSE 1149
// ComTurnUnit ( Powell , JMM ) ;
1173: LD_EXP 3
1177: PPUSH
1178: LD_EXP 2
1182: PPUSH
1183: CALL_OW 119
// Say ( Powell , D1-Pow-8 ) ;
1187: LD_EXP 3
1191: PPUSH
1192: LD_STRING D1-Pow-8
1194: PPUSH
1195: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1199: LD_INT 18
1201: PPUSH
1202: CALL_OW 67
// Query ( QLetter ) ;
1206: LD_STRING QLetter
1208: PPUSH
1209: CALL_OW 97
// Say ( Powell , D1aa-Pow-1 ) ;
1213: LD_EXP 3
1217: PPUSH
1218: LD_STRING D1aa-Pow-1
1220: PPUSH
1221: CALL_OW 88
// Say ( JMM , D1aa-JMM-1 ) ;
1225: LD_EXP 2
1229: PPUSH
1230: LD_STRING D1aa-JMM-1
1232: PPUSH
1233: CALL_OW 88
// Say ( Powell , D1aa-Pow-2 ) ;
1237: LD_EXP 3
1241: PPUSH
1242: LD_STRING D1aa-Pow-2
1244: PPUSH
1245: CALL_OW 88
// Say ( JMM , D1aa-JMM-2 ) ;
1249: LD_EXP 2
1253: PPUSH
1254: LD_STRING D1aa-JMM-2
1256: PPUSH
1257: CALL_OW 88
// Say ( Powell , D1aa-Pow-3 ) ;
1261: LD_EXP 3
1265: PPUSH
1266: LD_STRING D1aa-Pow-3
1268: PPUSH
1269: CALL_OW 88
// Say ( JMM , D1aa-JMM-3 ) ;
1273: LD_EXP 2
1277: PPUSH
1278: LD_STRING D1aa-JMM-3
1280: PPUSH
1281: CALL_OW 88
// ComMoveXY ( Powell , 69 , 55 ) ;
1285: LD_EXP 3
1289: PPUSH
1290: LD_INT 69
1292: PPUSH
1293: LD_INT 55
1295: PPUSH
1296: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
1300: LD_INT 35
1302: PPUSH
1303: CALL_OW 67
// until IsAt ( Powell , 69 , 55 ) ;
1307: LD_EXP 3
1311: PPUSH
1312: LD_INT 69
1314: PPUSH
1315: LD_INT 55
1317: PPUSH
1318: CALL_OW 307
1322: IFFALSE 1300
// ComTurnXY ( Powell , 71 , 55 ) ;
1324: LD_EXP 3
1328: PPUSH
1329: LD_INT 71
1331: PPUSH
1332: LD_INT 55
1334: PPUSH
1335: CALL_OW 118
// wait ( 0 0$2 ) ;
1339: LD_INT 70
1341: PPUSH
1342: CALL_OW 67
// Say ( Powell , D1aa-Pow-4 ) ;
1346: LD_EXP 3
1350: PPUSH
1351: LD_STRING D1aa-Pow-4
1353: PPUSH
1354: CALL_OW 88
// Say ( JMM , D1aa-JMM-4 ) ;
1358: LD_EXP 2
1362: PPUSH
1363: LD_STRING D1aa-JMM-4
1365: PPUSH
1366: CALL_OW 88
// ComTurnUnit ( Powell , JMM ) ;
1370: LD_EXP 3
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 67
// Say ( Powell , D1aa-Pow-5 ) ;
1391: LD_EXP 3
1395: PPUSH
1396: LD_STRING D1aa-Pow-5
1398: PPUSH
1399: CALL_OW 88
// Say ( JMM , D1aa-JMM-5 ) ;
1403: LD_EXP 2
1407: PPUSH
1408: LD_STRING D1aa-JMM-5
1410: PPUSH
1411: CALL_OW 88
// Say ( Powell , D1aa-Pow-6 ) ;
1415: LD_EXP 3
1419: PPUSH
1420: LD_STRING D1aa-Pow-6
1422: PPUSH
1423: CALL_OW 88
// wait ( 0 0$1 ) ;
1427: LD_INT 35
1429: PPUSH
1430: CALL_OW 67
// ComEnterUnit ( JMM , cars [ 3 ] ) ;
1434: LD_EXP 2
1438: PPUSH
1439: LD_EXP 4
1443: PUSH
1444: LD_INT 3
1446: ARRAY
1447: PPUSH
1448: CALL_OW 120
// wait ( 0 0$0.5 ) ;
1452: LD_INT 18
1454: PPUSH
1455: CALL_OW 67
// ComEnterUnit ( Powell , cars [ 2 ] ) ;
1459: LD_EXP 3
1463: PPUSH
1464: LD_EXP 4
1468: PUSH
1469: LD_INT 2
1471: ARRAY
1472: PPUSH
1473: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1477: LD_INT 35
1479: PPUSH
1480: CALL_OW 67
// until IsInArea ( Powell , hillDownArea ) ;
1484: LD_EXP 3
1488: PPUSH
1489: LD_INT 3
1491: PPUSH
1492: CALL_OW 308
1496: IFFALSE 1477
// CenterOnXY ( 42 , 40 ) ;
1498: LD_INT 42
1500: PPUSH
1501: LD_INT 40
1503: PPUSH
1504: CALL_OW 84
// ComEnterUnit ( people [ 4 ] , cars [ 4 ] ) ;
1508: LD_EXP 5
1512: PUSH
1513: LD_INT 4
1515: ARRAY
1516: PPUSH
1517: LD_EXP 4
1521: PUSH
1522: LD_INT 4
1524: ARRAY
1525: PPUSH
1526: CALL_OW 120
// ComEnterUnit ( people [ 5 ] , cars [ 5 ] ) ;
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 5
1537: ARRAY
1538: PPUSH
1539: LD_EXP 4
1543: PUSH
1544: LD_INT 5
1546: ARRAY
1547: PPUSH
1548: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
1552: LD_INT 35
1554: PPUSH
1555: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_outside ] , [ f_type , unit_human ] ] ) = 0 ;
1559: LD_INT 22
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 56
1571: PUSH
1572: EMPTY
1573: LIST
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: PPUSH
1590: CALL_OW 69
1594: PUSH
1595: LD_INT 0
1597: EQUAL
1598: IFFALSE 1552
// CenterOnXY ( 36 , 35 ) ;
1600: LD_INT 36
1602: PPUSH
1603: LD_INT 35
1605: PPUSH
1606: CALL_OW 84
// for i := 1 to 5 do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: DOUBLE
1616: LD_INT 1
1618: DEC
1619: ST_TO_ADDR
1620: LD_INT 5
1622: PUSH
1623: FOR_TO
1624: IFFALSE 1656
// begin ComMoveXY ( cars [ i ] , 11 , 18 ) ;
1626: LD_EXP 4
1630: PUSH
1631: LD_VAR 0 2
1635: ARRAY
1636: PPUSH
1637: LD_INT 11
1639: PPUSH
1640: LD_INT 18
1642: PPUSH
1643: CALL_OW 111
// wait ( 0 0$0.3 ) ;
1647: LD_INT 10
1649: PPUSH
1650: CALL_OW 67
// end ;
1654: GO 1623
1656: POP
1657: POP
// wait ( 0 0$2 ) ;
1658: LD_INT 70
1660: PPUSH
1661: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1665: LD_STRING 1
1667: PPUSH
1668: LD_STRING %_cont
1670: PPUSH
1671: CALL_OW 340
// end ;
1675: LD_VAR 0 1
1679: RET
// every 0 0$1 trigger IsAt ( people [ 4 ] , 50 , 40 ) do
1680: LD_EXP 5
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: PPUSH
1689: LD_INT 50
1691: PPUSH
1692: LD_INT 40
1694: PPUSH
1695: CALL_OW 307
1699: IFFALSE 1723
1701: GO 1703
1703: DISABLE
// ComTurnXY ( people [ 4 ] , 51 , 40 ) ;
1704: LD_EXP 5
1708: PUSH
1709: LD_INT 4
1711: ARRAY
1712: PPUSH
1713: LD_INT 51
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: CALL_OW 118
1723: END
// every 0 0$1 trigger IsAt ( people [ 5 ] , 49 , 59 ) do
1724: LD_EXP 5
1728: PUSH
1729: LD_INT 5
1731: ARRAY
1732: PPUSH
1733: LD_INT 49
1735: PPUSH
1736: LD_INT 59
1738: PPUSH
1739: CALL_OW 307
1743: IFFALSE 1767
1745: GO 1747
1747: DISABLE
// ComTurnXY ( people [ 5 ] , 51 , 67 ) ;
1748: LD_EXP 5
1752: PUSH
1753: LD_INT 5
1755: ARRAY
1756: PPUSH
1757: LD_INT 51
1759: PPUSH
1760: LD_INT 67
1762: PPUSH
1763: CALL_OW 118
1767: END
// on DialogueSkipped ( d ) do begin ChangeMap ( 1 , %_cont ) ;
1768: LD_STRING 1
1770: PPUSH
1771: LD_STRING %_cont
1773: PPUSH
1774: CALL_OW 340
// end ; end_of_file
1778: PPOPN 1
1780: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1781: LD_INT 0
1783: PPUSH
1784: PPUSH
// if exist_mode then
1785: LD_VAR 0 2
1789: IFFALSE 1814
// unit := CreateCharacter ( prefix & ident ) else
1791: LD_ADDR_VAR 0 5
1795: PUSH
1796: LD_VAR 0 3
1800: PUSH
1801: LD_VAR 0 1
1805: STR
1806: PPUSH
1807: CALL_OW 34
1811: ST_TO_ADDR
1812: GO 1829
// unit := NewCharacter ( ident ) ;
1814: LD_ADDR_VAR 0 5
1818: PUSH
1819: LD_VAR 0 1
1823: PPUSH
1824: CALL_OW 25
1828: ST_TO_ADDR
// result := unit ;
1829: LD_ADDR_VAR 0 4
1833: PUSH
1834: LD_VAR 0 5
1838: ST_TO_ADDR
// end ;
1839: LD_VAR 0 4
1843: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1844: LD_INT 0
1846: PPUSH
1847: PPUSH
// if not side or not nation then
1848: LD_VAR 0 1
1852: NOT
1853: PUSH
1854: LD_VAR 0 2
1858: NOT
1859: OR
1860: IFFALSE 1864
// exit ;
1862: GO 2632
// case nation of nation_american :
1864: LD_VAR 0 2
1868: PUSH
1869: LD_INT 1
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 2091
1877: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1878: LD_ADDR_VAR 0 4
1882: PUSH
1883: LD_INT 35
1885: PUSH
1886: LD_INT 45
1888: PUSH
1889: LD_INT 46
1891: PUSH
1892: LD_INT 47
1894: PUSH
1895: LD_INT 82
1897: PUSH
1898: LD_INT 83
1900: PUSH
1901: LD_INT 84
1903: PUSH
1904: LD_INT 85
1906: PUSH
1907: LD_INT 86
1909: PUSH
1910: LD_INT 1
1912: PUSH
1913: LD_INT 2
1915: PUSH
1916: LD_INT 6
1918: PUSH
1919: LD_INT 15
1921: PUSH
1922: LD_INT 16
1924: PUSH
1925: LD_INT 7
1927: PUSH
1928: LD_INT 12
1930: PUSH
1931: LD_INT 13
1933: PUSH
1934: LD_INT 10
1936: PUSH
1937: LD_INT 14
1939: PUSH
1940: LD_INT 20
1942: PUSH
1943: LD_INT 21
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 25
1951: PUSH
1952: LD_INT 32
1954: PUSH
1955: LD_INT 27
1957: PUSH
1958: LD_INT 36
1960: PUSH
1961: LD_INT 69
1963: PUSH
1964: LD_INT 39
1966: PUSH
1967: LD_INT 34
1969: PUSH
1970: LD_INT 40
1972: PUSH
1973: LD_INT 48
1975: PUSH
1976: LD_INT 49
1978: PUSH
1979: LD_INT 50
1981: PUSH
1982: LD_INT 51
1984: PUSH
1985: LD_INT 52
1987: PUSH
1988: LD_INT 53
1990: PUSH
1991: LD_INT 54
1993: PUSH
1994: LD_INT 55
1996: PUSH
1997: LD_INT 56
1999: PUSH
2000: LD_INT 57
2002: PUSH
2003: LD_INT 58
2005: PUSH
2006: LD_INT 59
2008: PUSH
2009: LD_INT 60
2011: PUSH
2012: LD_INT 61
2014: PUSH
2015: LD_INT 62
2017: PUSH
2018: LD_INT 80
2020: PUSH
2021: LD_INT 82
2023: PUSH
2024: LD_INT 83
2026: PUSH
2027: LD_INT 84
2029: PUSH
2030: LD_INT 85
2032: PUSH
2033: LD_INT 86
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: ST_TO_ADDR
2089: GO 2556
2091: LD_INT 2
2093: DOUBLE
2094: EQUAL
2095: IFTRUE 2099
2097: GO 2325
2099: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2100: LD_ADDR_VAR 0 4
2104: PUSH
2105: LD_INT 35
2107: PUSH
2108: LD_INT 45
2110: PUSH
2111: LD_INT 46
2113: PUSH
2114: LD_INT 47
2116: PUSH
2117: LD_INT 82
2119: PUSH
2120: LD_INT 83
2122: PUSH
2123: LD_INT 84
2125: PUSH
2126: LD_INT 85
2128: PUSH
2129: LD_INT 87
2131: PUSH
2132: LD_INT 70
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: LD_INT 11
2140: PUSH
2141: LD_INT 3
2143: PUSH
2144: LD_INT 4
2146: PUSH
2147: LD_INT 5
2149: PUSH
2150: LD_INT 6
2152: PUSH
2153: LD_INT 15
2155: PUSH
2156: LD_INT 18
2158: PUSH
2159: LD_INT 7
2161: PUSH
2162: LD_INT 17
2164: PUSH
2165: LD_INT 8
2167: PUSH
2168: LD_INT 20
2170: PUSH
2171: LD_INT 21
2173: PUSH
2174: LD_INT 22
2176: PUSH
2177: LD_INT 72
2179: PUSH
2180: LD_INT 26
2182: PUSH
2183: LD_INT 69
2185: PUSH
2186: LD_INT 39
2188: PUSH
2189: LD_INT 40
2191: PUSH
2192: LD_INT 41
2194: PUSH
2195: LD_INT 42
2197: PUSH
2198: LD_INT 43
2200: PUSH
2201: LD_INT 48
2203: PUSH
2204: LD_INT 49
2206: PUSH
2207: LD_INT 50
2209: PUSH
2210: LD_INT 51
2212: PUSH
2213: LD_INT 52
2215: PUSH
2216: LD_INT 53
2218: PUSH
2219: LD_INT 54
2221: PUSH
2222: LD_INT 55
2224: PUSH
2225: LD_INT 56
2227: PUSH
2228: LD_INT 60
2230: PUSH
2231: LD_INT 61
2233: PUSH
2234: LD_INT 62
2236: PUSH
2237: LD_INT 66
2239: PUSH
2240: LD_INT 67
2242: PUSH
2243: LD_INT 68
2245: PUSH
2246: LD_INT 81
2248: PUSH
2249: LD_INT 82
2251: PUSH
2252: LD_INT 83
2254: PUSH
2255: LD_INT 84
2257: PUSH
2258: LD_INT 85
2260: PUSH
2261: LD_INT 87
2263: PUSH
2264: LD_INT 88
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: ST_TO_ADDR
2323: GO 2556
2325: LD_INT 3
2327: DOUBLE
2328: EQUAL
2329: IFTRUE 2333
2331: GO 2555
2333: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2334: LD_ADDR_VAR 0 4
2338: PUSH
2339: LD_INT 46
2341: PUSH
2342: LD_INT 47
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: LD_INT 2
2350: PUSH
2351: LD_INT 82
2353: PUSH
2354: LD_INT 83
2356: PUSH
2357: LD_INT 84
2359: PUSH
2360: LD_INT 85
2362: PUSH
2363: LD_INT 86
2365: PUSH
2366: LD_INT 11
2368: PUSH
2369: LD_INT 9
2371: PUSH
2372: LD_INT 20
2374: PUSH
2375: LD_INT 19
2377: PUSH
2378: LD_INT 21
2380: PUSH
2381: LD_INT 24
2383: PUSH
2384: LD_INT 22
2386: PUSH
2387: LD_INT 25
2389: PUSH
2390: LD_INT 28
2392: PUSH
2393: LD_INT 29
2395: PUSH
2396: LD_INT 30
2398: PUSH
2399: LD_INT 31
2401: PUSH
2402: LD_INT 37
2404: PUSH
2405: LD_INT 38
2407: PUSH
2408: LD_INT 32
2410: PUSH
2411: LD_INT 27
2413: PUSH
2414: LD_INT 33
2416: PUSH
2417: LD_INT 69
2419: PUSH
2420: LD_INT 39
2422: PUSH
2423: LD_INT 34
2425: PUSH
2426: LD_INT 40
2428: PUSH
2429: LD_INT 71
2431: PUSH
2432: LD_INT 23
2434: PUSH
2435: LD_INT 44
2437: PUSH
2438: LD_INT 48
2440: PUSH
2441: LD_INT 49
2443: PUSH
2444: LD_INT 50
2446: PUSH
2447: LD_INT 51
2449: PUSH
2450: LD_INT 52
2452: PUSH
2453: LD_INT 53
2455: PUSH
2456: LD_INT 54
2458: PUSH
2459: LD_INT 55
2461: PUSH
2462: LD_INT 56
2464: PUSH
2465: LD_INT 57
2467: PUSH
2468: LD_INT 58
2470: PUSH
2471: LD_INT 59
2473: PUSH
2474: LD_INT 63
2476: PUSH
2477: LD_INT 64
2479: PUSH
2480: LD_INT 65
2482: PUSH
2483: LD_INT 82
2485: PUSH
2486: LD_INT 83
2488: PUSH
2489: LD_INT 84
2491: PUSH
2492: LD_INT 85
2494: PUSH
2495: LD_INT 86
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: ST_TO_ADDR
2553: GO 2556
2555: POP
// if state > - 1 and state < 3 then
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 1
2563: NEG
2564: GREATER
2565: PUSH
2566: LD_VAR 0 3
2570: PUSH
2571: LD_INT 3
2573: LESS
2574: AND
2575: IFFALSE 2632
// for i in result do
2577: LD_ADDR_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: PUSH
2587: FOR_IN
2588: IFFALSE 2630
// if GetTech ( i , side ) <> state then
2590: LD_VAR 0 5
2594: PPUSH
2595: LD_VAR 0 1
2599: PPUSH
2600: CALL_OW 321
2604: PUSH
2605: LD_VAR 0 3
2609: NONEQUAL
2610: IFFALSE 2628
// result := result diff i ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_VAR 0 4
2621: PUSH
2622: LD_VAR 0 5
2626: DIFF
2627: ST_TO_ADDR
2628: GO 2587
2630: POP
2631: POP
// end ;
2632: LD_VAR 0 4
2636: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2637: LD_INT 0
2639: PPUSH
2640: PPUSH
2641: PPUSH
// result := true ;
2642: LD_ADDR_VAR 0 3
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2650: LD_ADDR_VAR 0 5
2654: PUSH
2655: LD_VAR 0 2
2659: PPUSH
2660: CALL_OW 480
2664: ST_TO_ADDR
// if not tmp then
2665: LD_VAR 0 5
2669: NOT
2670: IFFALSE 2674
// exit ;
2672: GO 2723
// for i in tmp do
2674: LD_ADDR_VAR 0 4
2678: PUSH
2679: LD_VAR 0 5
2683: PUSH
2684: FOR_IN
2685: IFFALSE 2721
// if GetTech ( i , side ) <> state_researched then
2687: LD_VAR 0 4
2691: PPUSH
2692: LD_VAR 0 1
2696: PPUSH
2697: CALL_OW 321
2701: PUSH
2702: LD_INT 2
2704: NONEQUAL
2705: IFFALSE 2719
// begin result := false ;
2707: LD_ADDR_VAR 0 3
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// exit ;
2715: POP
2716: POP
2717: GO 2723
// end ;
2719: GO 2684
2721: POP
2722: POP
// end ;
2723: LD_VAR 0 3
2727: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
2732: PPUSH
2733: PPUSH
2734: PPUSH
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2743: LD_VAR 0 1
2747: NOT
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 257
2758: PUSH
2759: LD_INT 9
2761: NONEQUAL
2762: OR
2763: IFFALSE 2767
// exit ;
2765: GO 3340
// side := GetSide ( unit ) ;
2767: LD_ADDR_VAR 0 9
2771: PUSH
2772: LD_VAR 0 1
2776: PPUSH
2777: CALL_OW 255
2781: ST_TO_ADDR
// tech_space := tech_spacanom ;
2782: LD_ADDR_VAR 0 12
2786: PUSH
2787: LD_INT 29
2789: ST_TO_ADDR
// tech_time := tech_taurad ;
2790: LD_ADDR_VAR 0 13
2794: PUSH
2795: LD_INT 28
2797: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2798: LD_ADDR_VAR 0 11
2802: PUSH
2803: LD_VAR 0 1
2807: PPUSH
2808: CALL_OW 310
2812: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2813: LD_VAR 0 11
2817: PPUSH
2818: CALL_OW 247
2822: PUSH
2823: LD_INT 2
2825: EQUAL
2826: IFFALSE 2830
// exit ;
2828: GO 3340
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2830: LD_ADDR_VAR 0 8
2834: PUSH
2835: LD_INT 81
2837: PUSH
2838: LD_VAR 0 9
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: PUSH
2847: LD_INT 3
2849: PUSH
2850: LD_INT 21
2852: PUSH
2853: LD_INT 3
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 69
2872: ST_TO_ADDR
// if not tmp then
2873: LD_VAR 0 8
2877: NOT
2878: IFFALSE 2882
// exit ;
2880: GO 3340
// if in_unit then
2882: LD_VAR 0 11
2886: IFFALSE 2910
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2888: LD_ADDR_VAR 0 10
2892: PUSH
2893: LD_VAR 0 8
2897: PPUSH
2898: LD_VAR 0 11
2902: PPUSH
2903: CALL_OW 74
2907: ST_TO_ADDR
2908: GO 2930
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2910: LD_ADDR_VAR 0 10
2914: PUSH
2915: LD_VAR 0 8
2919: PPUSH
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL_OW 74
2929: ST_TO_ADDR
// if not enemy then
2930: LD_VAR 0 10
2934: NOT
2935: IFFALSE 2939
// exit ;
2937: GO 3340
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2939: LD_VAR 0 11
2943: PUSH
2944: LD_VAR 0 11
2948: PPUSH
2949: LD_VAR 0 10
2953: PPUSH
2954: CALL_OW 296
2958: PUSH
2959: LD_INT 13
2961: GREATER
2962: AND
2963: PUSH
2964: LD_VAR 0 1
2968: PPUSH
2969: LD_VAR 0 10
2973: PPUSH
2974: CALL_OW 296
2978: PUSH
2979: LD_INT 12
2981: GREATER
2982: OR
2983: IFFALSE 2987
// exit ;
2985: GO 3340
// missile := [ 1 ] ;
2987: LD_ADDR_VAR 0 14
2991: PUSH
2992: LD_INT 1
2994: PUSH
2995: EMPTY
2996: LIST
2997: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2998: LD_VAR 0 9
3002: PPUSH
3003: LD_VAR 0 12
3007: PPUSH
3008: CALL_OW 325
3012: IFFALSE 3041
// missile := Replace ( missile , missile + 1 , 2 ) ;
3014: LD_ADDR_VAR 0 14
3018: PUSH
3019: LD_VAR 0 14
3023: PPUSH
3024: LD_VAR 0 14
3028: PUSH
3029: LD_INT 1
3031: PLUS
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: CALL_OW 1
3040: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3041: LD_VAR 0 9
3045: PPUSH
3046: LD_VAR 0 13
3050: PPUSH
3051: CALL_OW 325
3055: PUSH
3056: LD_VAR 0 10
3060: PPUSH
3061: CALL_OW 255
3065: PPUSH
3066: LD_VAR 0 13
3070: PPUSH
3071: CALL_OW 325
3075: NOT
3076: AND
3077: IFFALSE 3106
// missile := Replace ( missile , missile + 1 , 3 ) ;
3079: LD_ADDR_VAR 0 14
3083: PUSH
3084: LD_VAR 0 14
3088: PPUSH
3089: LD_VAR 0 14
3093: PUSH
3094: LD_INT 1
3096: PLUS
3097: PPUSH
3098: LD_INT 3
3100: PPUSH
3101: CALL_OW 1
3105: ST_TO_ADDR
// if missile < 2 then
3106: LD_VAR 0 14
3110: PUSH
3111: LD_INT 2
3113: LESS
3114: IFFALSE 3118
// exit ;
3116: GO 3340
// x := GetX ( enemy ) ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_VAR 0 10
3127: PPUSH
3128: CALL_OW 250
3132: ST_TO_ADDR
// y := GetY ( enemy ) ;
3133: LD_ADDR_VAR 0 5
3137: PUSH
3138: LD_VAR 0 10
3142: PPUSH
3143: CALL_OW 251
3147: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3148: LD_ADDR_VAR 0 6
3152: PUSH
3153: LD_VAR 0 4
3157: PUSH
3158: LD_INT 1
3160: NEG
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 12
3169: PLUS
3170: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3171: LD_ADDR_VAR 0 7
3175: PUSH
3176: LD_VAR 0 5
3180: PUSH
3181: LD_INT 1
3183: NEG
3184: PPUSH
3185: LD_INT 1
3187: PPUSH
3188: CALL_OW 12
3192: PLUS
3193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3194: LD_VAR 0 6
3198: PPUSH
3199: LD_VAR 0 7
3203: PPUSH
3204: CALL_OW 488
3208: NOT
3209: IFFALSE 3231
// begin _x := x ;
3211: LD_ADDR_VAR 0 6
3215: PUSH
3216: LD_VAR 0 4
3220: ST_TO_ADDR
// _y := y ;
3221: LD_ADDR_VAR 0 7
3225: PUSH
3226: LD_VAR 0 5
3230: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3231: LD_ADDR_VAR 0 3
3235: PUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_VAR 0 14
3243: PPUSH
3244: CALL_OW 12
3248: ST_TO_ADDR
// case i of 1 :
3249: LD_VAR 0 3
3253: PUSH
3254: LD_INT 1
3256: DOUBLE
3257: EQUAL
3258: IFTRUE 3262
3260: GO 3279
3262: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3263: LD_VAR 0 1
3267: PPUSH
3268: LD_VAR 0 10
3272: PPUSH
3273: CALL_OW 115
3277: GO 3340
3279: LD_INT 2
3281: DOUBLE
3282: EQUAL
3283: IFTRUE 3287
3285: GO 3309
3287: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3288: LD_VAR 0 1
3292: PPUSH
3293: LD_VAR 0 6
3297: PPUSH
3298: LD_VAR 0 7
3302: PPUSH
3303: CALL_OW 153
3307: GO 3340
3309: LD_INT 3
3311: DOUBLE
3312: EQUAL
3313: IFTRUE 3317
3315: GO 3339
3317: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3318: LD_VAR 0 1
3322: PPUSH
3323: LD_VAR 0 6
3327: PPUSH
3328: LD_VAR 0 7
3332: PPUSH
3333: CALL_OW 154
3337: GO 3340
3339: POP
// end ;
3340: LD_VAR 0 2
3344: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3345: LD_INT 0
3347: PPUSH
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
// if not unit or not building then
3353: LD_VAR 0 1
3357: NOT
3358: PUSH
3359: LD_VAR 0 2
3363: NOT
3364: OR
3365: IFFALSE 3369
// exit ;
3367: GO 3527
// x := GetX ( building ) ;
3369: LD_ADDR_VAR 0 5
3373: PUSH
3374: LD_VAR 0 2
3378: PPUSH
3379: CALL_OW 250
3383: ST_TO_ADDR
// y := GetY ( building ) ;
3384: LD_ADDR_VAR 0 6
3388: PUSH
3389: LD_VAR 0 2
3393: PPUSH
3394: CALL_OW 251
3398: ST_TO_ADDR
// for i = 0 to 5 do
3399: LD_ADDR_VAR 0 4
3403: PUSH
3404: DOUBLE
3405: LD_INT 0
3407: DEC
3408: ST_TO_ADDR
3409: LD_INT 5
3411: PUSH
3412: FOR_TO
3413: IFFALSE 3525
// begin _x := ShiftX ( x , i , 3 ) ;
3415: LD_ADDR_VAR 0 7
3419: PUSH
3420: LD_VAR 0 5
3424: PPUSH
3425: LD_VAR 0 4
3429: PPUSH
3430: LD_INT 3
3432: PPUSH
3433: CALL_OW 272
3437: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3438: LD_ADDR_VAR 0 8
3442: PUSH
3443: LD_VAR 0 6
3447: PPUSH
3448: LD_VAR 0 4
3452: PPUSH
3453: LD_INT 3
3455: PPUSH
3456: CALL_OW 273
3460: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3461: LD_VAR 0 7
3465: PPUSH
3466: LD_VAR 0 8
3470: PPUSH
3471: CALL_OW 488
3475: NOT
3476: IFFALSE 3480
// continue ;
3478: GO 3412
// if HexInfo ( _x , _y ) = 0 then
3480: LD_VAR 0 7
3484: PPUSH
3485: LD_VAR 0 8
3489: PPUSH
3490: CALL_OW 428
3494: PUSH
3495: LD_INT 0
3497: EQUAL
3498: IFFALSE 3523
// begin ComMoveXY ( unit , _x , _y ) ;
3500: LD_VAR 0 1
3504: PPUSH
3505: LD_VAR 0 7
3509: PPUSH
3510: LD_VAR 0 8
3514: PPUSH
3515: CALL_OW 111
// exit ;
3519: POP
3520: POP
3521: GO 3527
// end ; end ;
3523: GO 3412
3525: POP
3526: POP
// end ;
3527: LD_VAR 0 3
3531: RET
// export function ScanBase ( side , base_area ) ; begin
3532: LD_INT 0
3534: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: LD_VAR 0 2
3544: PPUSH
3545: LD_INT 81
3547: PUSH
3548: LD_VAR 0 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PPUSH
3557: CALL_OW 70
3561: ST_TO_ADDR
// end ;
3562: LD_VAR 0 3
3566: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3567: LD_INT 0
3569: PPUSH
3570: PPUSH
3571: PPUSH
3572: PPUSH
// result := false ;
3573: LD_ADDR_VAR 0 2
3577: PUSH
3578: LD_INT 0
3580: ST_TO_ADDR
// side := GetSide ( unit ) ;
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 255
3595: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3596: LD_ADDR_VAR 0 4
3600: PUSH
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 248
3610: ST_TO_ADDR
// case nat of 1 :
3611: LD_VAR 0 4
3615: PUSH
3616: LD_INT 1
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3635
3624: POP
// tech := tech_lassight ; 2 :
3625: LD_ADDR_VAR 0 5
3629: PUSH
3630: LD_INT 12
3632: ST_TO_ADDR
3633: GO 3674
3635: LD_INT 2
3637: DOUBLE
3638: EQUAL
3639: IFTRUE 3643
3641: GO 3654
3643: POP
// tech := tech_mortar ; 3 :
3644: LD_ADDR_VAR 0 5
3648: PUSH
3649: LD_INT 41
3651: ST_TO_ADDR
3652: GO 3674
3654: LD_INT 3
3656: DOUBLE
3657: EQUAL
3658: IFTRUE 3662
3660: GO 3673
3662: POP
// tech := tech_bazooka ; end ;
3663: LD_ADDR_VAR 0 5
3667: PUSH
3668: LD_INT 44
3670: ST_TO_ADDR
3671: GO 3674
3673: POP
// if Researched ( side , tech ) then
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 5
3683: PPUSH
3684: CALL_OW 325
3688: IFFALSE 3715
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: LD_INT 5
3697: PUSH
3698: LD_INT 8
3700: PUSH
3701: LD_INT 9
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: PUSH
3709: LD_VAR 0 4
3713: ARRAY
3714: ST_TO_ADDR
// end ;
3715: LD_VAR 0 2
3719: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3720: LD_INT 0
3722: PPUSH
3723: PPUSH
3724: PPUSH
// if not mines then
3725: LD_VAR 0 2
3729: NOT
3730: IFFALSE 3734
// exit ;
3732: GO 3878
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3734: LD_ADDR_VAR 0 5
3738: PUSH
3739: LD_INT 81
3741: PUSH
3742: LD_VAR 0 1
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 21
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PPUSH
3772: CALL_OW 69
3776: ST_TO_ADDR
// for i in mines do
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: LD_VAR 0 2
3786: PUSH
3787: FOR_IN
3788: IFFALSE 3876
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3790: LD_VAR 0 4
3794: PUSH
3795: LD_INT 1
3797: ARRAY
3798: PPUSH
3799: LD_VAR 0 4
3803: PUSH
3804: LD_INT 2
3806: ARRAY
3807: PPUSH
3808: CALL_OW 458
3812: NOT
3813: IFFALSE 3817
// continue ;
3815: GO 3787
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3817: LD_VAR 0 4
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 2
3833: ARRAY
3834: PPUSH
3835: CALL_OW 428
3839: PUSH
3840: LD_VAR 0 5
3844: IN
3845: IFFALSE 3874
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3847: LD_VAR 0 4
3851: PUSH
3852: LD_INT 1
3854: ARRAY
3855: PPUSH
3856: LD_VAR 0 4
3860: PUSH
3861: LD_INT 2
3863: ARRAY
3864: PPUSH
3865: LD_VAR 0 1
3869: PPUSH
3870: CALL_OW 456
// end ;
3874: GO 3787
3876: POP
3877: POP
// end ;
3878: LD_VAR 0 3
3882: RET
// export function Count ( array ) ; begin
3883: LD_INT 0
3885: PPUSH
// result := array + 0 ;
3886: LD_ADDR_VAR 0 2
3890: PUSH
3891: LD_VAR 0 1
3895: PUSH
3896: LD_INT 0
3898: PLUS
3899: ST_TO_ADDR
// end ;
3900: LD_VAR 0 2
3904: RET
// export function IsEmpty ( building ) ; begin
3905: LD_INT 0
3907: PPUSH
// if not building then
3908: LD_VAR 0 1
3912: NOT
3913: IFFALSE 3917
// exit ;
3915: GO 3960
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: LD_VAR 0 1
3926: PUSH
3927: LD_INT 22
3929: PUSH
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 255
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 58
3946: PUSH
3947: EMPTY
3948: LIST
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PPUSH
3954: CALL_OW 69
3958: IN
3959: ST_TO_ADDR
// end ;
3960: LD_VAR 0 2
3964: RET
// export function IsNotFull ( building ) ; var places ; begin
3965: LD_INT 0
3967: PPUSH
3968: PPUSH
// if not building then
3969: LD_VAR 0 1
3973: NOT
3974: IFFALSE 3978
// exit ;
3976: GO 4006
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3978: LD_ADDR_VAR 0 2
3982: PUSH
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_INT 3
3990: PUSH
3991: LD_INT 62
3993: PUSH
3994: EMPTY
3995: LIST
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PPUSH
4001: CALL_OW 72
4005: ST_TO_ADDR
// end ;
4006: LD_VAR 0 2
4010: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4011: LD_INT 0
4013: PPUSH
4014: PPUSH
4015: PPUSH
4016: PPUSH
// tmp := [ ] ;
4017: LD_ADDR_VAR 0 3
4021: PUSH
4022: EMPTY
4023: ST_TO_ADDR
// list := [ ] ;
4024: LD_ADDR_VAR 0 5
4028: PUSH
4029: EMPTY
4030: ST_TO_ADDR
// for i = 16 to 25 do
4031: LD_ADDR_VAR 0 4
4035: PUSH
4036: DOUBLE
4037: LD_INT 16
4039: DEC
4040: ST_TO_ADDR
4041: LD_INT 25
4043: PUSH
4044: FOR_TO
4045: IFFALSE 4118
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4047: LD_ADDR_VAR 0 3
4051: PUSH
4052: LD_VAR 0 3
4056: PUSH
4057: LD_INT 22
4059: PUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 255
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 91
4076: PUSH
4077: LD_VAR 0 1
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 30
4092: PUSH
4093: LD_VAR 0 4
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: PPUSH
4110: CALL_OW 69
4114: ADD
4115: ST_TO_ADDR
4116: GO 4044
4118: POP
4119: POP
// for i = 1 to tmp do
4120: LD_ADDR_VAR 0 4
4124: PUSH
4125: DOUBLE
4126: LD_INT 1
4128: DEC
4129: ST_TO_ADDR
4130: LD_VAR 0 3
4134: PUSH
4135: FOR_TO
4136: IFFALSE 4224
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4138: LD_ADDR_VAR 0 5
4142: PUSH
4143: LD_VAR 0 5
4147: PUSH
4148: LD_VAR 0 3
4152: PUSH
4153: LD_VAR 0 4
4157: ARRAY
4158: PPUSH
4159: CALL_OW 266
4163: PUSH
4164: LD_VAR 0 3
4168: PUSH
4169: LD_VAR 0 4
4173: ARRAY
4174: PPUSH
4175: CALL_OW 250
4179: PUSH
4180: LD_VAR 0 3
4184: PUSH
4185: LD_VAR 0 4
4189: ARRAY
4190: PPUSH
4191: CALL_OW 251
4195: PUSH
4196: LD_VAR 0 3
4200: PUSH
4201: LD_VAR 0 4
4205: ARRAY
4206: PPUSH
4207: CALL_OW 254
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: ADD
4221: ST_TO_ADDR
4222: GO 4135
4224: POP
4225: POP
// result := list ;
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: LD_VAR 0 5
4235: ST_TO_ADDR
// end ;
4236: LD_VAR 0 2
4240: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4241: LD_INT 0
4243: PPUSH
4244: PPUSH
4245: PPUSH
4246: PPUSH
4247: PPUSH
4248: PPUSH
4249: PPUSH
// if not factory then
4250: LD_VAR 0 1
4254: NOT
4255: IFFALSE 4259
// exit ;
4257: GO 4852
// if control = control_apeman then
4259: LD_VAR 0 4
4263: PUSH
4264: LD_INT 5
4266: EQUAL
4267: IFFALSE 4376
// begin tmp := UnitsInside ( factory ) ;
4269: LD_ADDR_VAR 0 8
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 313
4283: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4284: LD_VAR 0 8
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 12
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: NOT
4304: IFFALSE 4314
// control := control_manual ;
4306: LD_ADDR_VAR 0 4
4310: PUSH
4311: LD_INT 1
4313: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4314: LD_ADDR_VAR 0 8
4318: PUSH
4319: LD_VAR 0 1
4323: PPUSH
4324: CALL 4011 0 1
4328: ST_TO_ADDR
// if tmp then
4329: LD_VAR 0 8
4333: IFFALSE 4376
// begin for i in tmp do
4335: LD_ADDR_VAR 0 7
4339: PUSH
4340: LD_VAR 0 8
4344: PUSH
4345: FOR_IN
4346: IFFALSE 4374
// if i [ 1 ] = b_ext_radio then
4348: LD_VAR 0 7
4352: PUSH
4353: LD_INT 1
4355: ARRAY
4356: PUSH
4357: LD_INT 22
4359: EQUAL
4360: IFFALSE 4372
// begin control := control_remote ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_INT 2
4369: ST_TO_ADDR
// break ;
4370: GO 4374
// end ;
4372: GO 4345
4374: POP
4375: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4376: LD_VAR 0 1
4380: PPUSH
4381: LD_VAR 0 2
4385: PPUSH
4386: LD_VAR 0 3
4390: PPUSH
4391: LD_VAR 0 4
4395: PPUSH
4396: LD_VAR 0 5
4400: PPUSH
4401: CALL_OW 448
4405: IFFALSE 4440
// begin result := [ chassis , engine , control , weapon ] ;
4407: LD_ADDR_VAR 0 6
4411: PUSH
4412: LD_VAR 0 2
4416: PUSH
4417: LD_VAR 0 3
4421: PUSH
4422: LD_VAR 0 4
4426: PUSH
4427: LD_VAR 0 5
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// exit ;
4438: GO 4852
// end ; _chassis := AvailableChassisList ( factory ) ;
4440: LD_ADDR_VAR 0 9
4444: PUSH
4445: LD_VAR 0 1
4449: PPUSH
4450: CALL_OW 475
4454: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4455: LD_ADDR_VAR 0 11
4459: PUSH
4460: LD_VAR 0 1
4464: PPUSH
4465: CALL_OW 476
4469: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4470: LD_ADDR_VAR 0 12
4474: PUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: CALL_OW 477
4484: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4485: LD_ADDR_VAR 0 10
4489: PUSH
4490: LD_VAR 0 1
4494: PPUSH
4495: CALL_OW 478
4499: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4500: LD_VAR 0 9
4504: NOT
4505: PUSH
4506: LD_VAR 0 11
4510: NOT
4511: OR
4512: PUSH
4513: LD_VAR 0 12
4517: NOT
4518: OR
4519: PUSH
4520: LD_VAR 0 10
4524: NOT
4525: OR
4526: IFFALSE 4561
// begin result := [ chassis , engine , control , weapon ] ;
4528: LD_ADDR_VAR 0 6
4532: PUSH
4533: LD_VAR 0 2
4537: PUSH
4538: LD_VAR 0 3
4542: PUSH
4543: LD_VAR 0 4
4547: PUSH
4548: LD_VAR 0 5
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: ST_TO_ADDR
// exit ;
4559: GO 4852
// end ; if not chassis in _chassis then
4561: LD_VAR 0 2
4565: PUSH
4566: LD_VAR 0 9
4570: IN
4571: NOT
4572: IFFALSE 4598
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4574: LD_ADDR_VAR 0 2
4578: PUSH
4579: LD_VAR 0 9
4583: PUSH
4584: LD_INT 1
4586: PPUSH
4587: LD_VAR 0 9
4591: PPUSH
4592: CALL_OW 12
4596: ARRAY
4597: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4598: LD_VAR 0 2
4602: PPUSH
4603: LD_VAR 0 3
4607: PPUSH
4608: CALL 4857 0 2
4612: NOT
4613: IFFALSE 4672
// repeat engine := _engine [ 1 ] ;
4615: LD_ADDR_VAR 0 3
4619: PUSH
4620: LD_VAR 0 11
4624: PUSH
4625: LD_INT 1
4627: ARRAY
4628: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4629: LD_ADDR_VAR 0 11
4633: PUSH
4634: LD_VAR 0 11
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 3
4646: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 3
4656: PPUSH
4657: CALL 4857 0 2
4661: PUSH
4662: LD_VAR 0 11
4666: PUSH
4667: EMPTY
4668: EQUAL
4669: OR
4670: IFFALSE 4615
// if not control in _control then
4672: LD_VAR 0 4
4676: PUSH
4677: LD_VAR 0 12
4681: IN
4682: NOT
4683: IFFALSE 4709
// control := _control [ rand ( 1 , _control ) ] ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: LD_VAR 0 12
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: LD_VAR 0 12
4702: PPUSH
4703: CALL_OW 12
4707: ARRAY
4708: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4709: LD_VAR 0 2
4713: PPUSH
4714: LD_VAR 0 5
4718: PPUSH
4719: CALL 5077 0 2
4723: NOT
4724: IFFALSE 4783
// repeat weapon := _weapon [ 1 ] ;
4726: LD_ADDR_VAR 0 5
4730: PUSH
4731: LD_VAR 0 10
4735: PUSH
4736: LD_INT 1
4738: ARRAY
4739: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4740: LD_ADDR_VAR 0 10
4744: PUSH
4745: LD_VAR 0 10
4749: PPUSH
4750: LD_INT 1
4752: PPUSH
4753: CALL_OW 3
4757: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4758: LD_VAR 0 2
4762: PPUSH
4763: LD_VAR 0 5
4767: PPUSH
4768: CALL 5077 0 2
4772: PUSH
4773: LD_VAR 0 10
4777: PUSH
4778: EMPTY
4779: EQUAL
4780: OR
4781: IFFALSE 4726
// result := [ ] ;
4783: LD_ADDR_VAR 0 6
4787: PUSH
4788: EMPTY
4789: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_VAR 0 2
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_VAR 0 4
4809: PPUSH
4810: LD_VAR 0 5
4814: PPUSH
4815: CALL_OW 448
4819: IFFALSE 4852
// result := [ chassis , engine , control , weapon ] ;
4821: LD_ADDR_VAR 0 6
4825: PUSH
4826: LD_VAR 0 2
4830: PUSH
4831: LD_VAR 0 3
4835: PUSH
4836: LD_VAR 0 4
4840: PUSH
4841: LD_VAR 0 5
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: ST_TO_ADDR
// end ;
4852: LD_VAR 0 6
4856: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4857: LD_INT 0
4859: PPUSH
// if not chassis or not engine then
4860: LD_VAR 0 1
4864: NOT
4865: PUSH
4866: LD_VAR 0 2
4870: NOT
4871: OR
4872: IFFALSE 4876
// exit ;
4874: GO 5072
// case engine of engine_solar :
4876: LD_VAR 0 2
4880: PUSH
4881: LD_INT 2
4883: DOUBLE
4884: EQUAL
4885: IFTRUE 4889
4887: GO 4927
4889: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4890: LD_ADDR_VAR 0 3
4894: PUSH
4895: LD_INT 11
4897: PUSH
4898: LD_INT 12
4900: PUSH
4901: LD_INT 13
4903: PUSH
4904: LD_INT 14
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: LD_INT 2
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: ST_TO_ADDR
4925: GO 5056
4927: LD_INT 1
4929: DOUBLE
4930: EQUAL
4931: IFTRUE 4935
4933: GO 4997
4935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4936: LD_ADDR_VAR 0 3
4940: PUSH
4941: LD_INT 11
4943: PUSH
4944: LD_INT 12
4946: PUSH
4947: LD_INT 13
4949: PUSH
4950: LD_INT 14
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 21
4970: PUSH
4971: LD_INT 23
4973: PUSH
4974: LD_INT 22
4976: PUSH
4977: LD_INT 24
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: ST_TO_ADDR
4995: GO 5056
4997: LD_INT 3
4999: DOUBLE
5000: EQUAL
5001: IFTRUE 5005
5003: GO 5055
5005: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5006: LD_ADDR_VAR 0 3
5010: PUSH
5011: LD_INT 13
5013: PUSH
5014: LD_INT 14
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: LD_INT 3
5022: PUSH
5023: LD_INT 4
5025: PUSH
5026: LD_INT 5
5028: PUSH
5029: LD_INT 21
5031: PUSH
5032: LD_INT 22
5034: PUSH
5035: LD_INT 23
5037: PUSH
5038: LD_INT 24
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: ST_TO_ADDR
5053: GO 5056
5055: POP
// result := ( chassis in result ) ;
5056: LD_ADDR_VAR 0 3
5060: PUSH
5061: LD_VAR 0 1
5065: PUSH
5066: LD_VAR 0 3
5070: IN
5071: ST_TO_ADDR
// end ;
5072: LD_VAR 0 3
5076: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5077: LD_INT 0
5079: PPUSH
// if not chassis or not weapon then
5080: LD_VAR 0 1
5084: NOT
5085: PUSH
5086: LD_VAR 0 2
5090: NOT
5091: OR
5092: IFFALSE 5096
// exit ;
5094: GO 6156
// case weapon of us_machine_gun :
5096: LD_VAR 0 2
5100: PUSH
5101: LD_INT 2
5103: DOUBLE
5104: EQUAL
5105: IFTRUE 5109
5107: GO 5139
5109: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5110: LD_ADDR_VAR 0 3
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: LD_INT 3
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: ST_TO_ADDR
5137: GO 6140
5139: LD_INT 3
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5147
5145: GO 5177
5147: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_INT 1
5155: PUSH
5156: LD_INT 2
5158: PUSH
5159: LD_INT 3
5161: PUSH
5162: LD_INT 4
5164: PUSH
5165: LD_INT 5
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: ST_TO_ADDR
5175: GO 6140
5177: LD_INT 11
5179: DOUBLE
5180: EQUAL
5181: IFTRUE 5185
5183: GO 5215
5185: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5186: LD_ADDR_VAR 0 3
5190: PUSH
5191: LD_INT 1
5193: PUSH
5194: LD_INT 2
5196: PUSH
5197: LD_INT 3
5199: PUSH
5200: LD_INT 4
5202: PUSH
5203: LD_INT 5
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: ST_TO_ADDR
5213: GO 6140
5215: LD_INT 4
5217: DOUBLE
5218: EQUAL
5219: IFTRUE 5223
5221: GO 5249
5223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5224: LD_ADDR_VAR 0 3
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 3
5234: PUSH
5235: LD_INT 4
5237: PUSH
5238: LD_INT 5
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: ST_TO_ADDR
5247: GO 6140
5249: LD_INT 5
5251: DOUBLE
5252: EQUAL
5253: IFTRUE 5257
5255: GO 5283
5257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5258: LD_ADDR_VAR 0 3
5262: PUSH
5263: LD_INT 2
5265: PUSH
5266: LD_INT 3
5268: PUSH
5269: LD_INT 4
5271: PUSH
5272: LD_INT 5
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: ST_TO_ADDR
5281: GO 6140
5283: LD_INT 9
5285: DOUBLE
5286: EQUAL
5287: IFTRUE 5291
5289: GO 5317
5291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5292: LD_ADDR_VAR 0 3
5296: PUSH
5297: LD_INT 2
5299: PUSH
5300: LD_INT 3
5302: PUSH
5303: LD_INT 4
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: ST_TO_ADDR
5315: GO 6140
5317: LD_INT 7
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5325
5323: GO 5351
5325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5326: LD_ADDR_VAR 0 3
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: LD_INT 3
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: LD_INT 5
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: ST_TO_ADDR
5349: GO 6140
5351: LD_INT 12
5353: DOUBLE
5354: EQUAL
5355: IFTRUE 5359
5357: GO 5385
5359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5360: LD_ADDR_VAR 0 3
5364: PUSH
5365: LD_INT 2
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: LD_INT 4
5373: PUSH
5374: LD_INT 5
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: ST_TO_ADDR
5383: GO 6140
5385: LD_INT 13
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5393
5391: GO 5419
5393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5394: LD_ADDR_VAR 0 3
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: LD_INT 3
5404: PUSH
5405: LD_INT 4
5407: PUSH
5408: LD_INT 5
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: ST_TO_ADDR
5417: GO 6140
5419: LD_INT 14
5421: DOUBLE
5422: EQUAL
5423: IFTRUE 5427
5425: GO 5445
5427: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5428: LD_ADDR_VAR 0 3
5432: PUSH
5433: LD_INT 4
5435: PUSH
5436: LD_INT 5
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: ST_TO_ADDR
5443: GO 6140
5445: LD_INT 6
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5453
5451: GO 5471
5453: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5454: LD_ADDR_VAR 0 3
5458: PUSH
5459: LD_INT 4
5461: PUSH
5462: LD_INT 5
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: ST_TO_ADDR
5469: GO 6140
5471: LD_INT 10
5473: DOUBLE
5474: EQUAL
5475: IFTRUE 5479
5477: GO 5497
5479: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5480: LD_ADDR_VAR 0 3
5484: PUSH
5485: LD_INT 4
5487: PUSH
5488: LD_INT 5
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: ST_TO_ADDR
5495: GO 6140
5497: LD_INT 22
5499: DOUBLE
5500: EQUAL
5501: IFTRUE 5505
5503: GO 5531
5505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: LD_INT 11
5513: PUSH
5514: LD_INT 12
5516: PUSH
5517: LD_INT 13
5519: PUSH
5520: LD_INT 14
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: ST_TO_ADDR
5529: GO 6140
5531: LD_INT 23
5533: DOUBLE
5534: EQUAL
5535: IFTRUE 5539
5537: GO 5565
5539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5540: LD_ADDR_VAR 0 3
5544: PUSH
5545: LD_INT 11
5547: PUSH
5548: LD_INT 12
5550: PUSH
5551: LD_INT 13
5553: PUSH
5554: LD_INT 14
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: ST_TO_ADDR
5563: GO 6140
5565: LD_INT 24
5567: DOUBLE
5568: EQUAL
5569: IFTRUE 5573
5571: GO 5599
5573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5574: LD_ADDR_VAR 0 3
5578: PUSH
5579: LD_INT 11
5581: PUSH
5582: LD_INT 12
5584: PUSH
5585: LD_INT 13
5587: PUSH
5588: LD_INT 14
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: ST_TO_ADDR
5597: GO 6140
5599: LD_INT 30
5601: DOUBLE
5602: EQUAL
5603: IFTRUE 5607
5605: GO 5633
5607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5608: LD_ADDR_VAR 0 3
5612: PUSH
5613: LD_INT 11
5615: PUSH
5616: LD_INT 12
5618: PUSH
5619: LD_INT 13
5621: PUSH
5622: LD_INT 14
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
5631: GO 6140
5633: LD_INT 25
5635: DOUBLE
5636: EQUAL
5637: IFTRUE 5641
5639: GO 5659
5641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5642: LD_ADDR_VAR 0 3
5646: PUSH
5647: LD_INT 13
5649: PUSH
5650: LD_INT 14
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: ST_TO_ADDR
5657: GO 6140
5659: LD_INT 27
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5685
5667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5668: LD_ADDR_VAR 0 3
5672: PUSH
5673: LD_INT 13
5675: PUSH
5676: LD_INT 14
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: ST_TO_ADDR
5683: GO 6140
5685: LD_INT 92
5687: DOUBLE
5688: EQUAL
5689: IFTRUE 5693
5691: GO 5719
5693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5694: LD_ADDR_VAR 0 3
5698: PUSH
5699: LD_INT 11
5701: PUSH
5702: LD_INT 12
5704: PUSH
5705: LD_INT 13
5707: PUSH
5708: LD_INT 14
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: ST_TO_ADDR
5717: GO 6140
5719: LD_INT 28
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5745
5727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5728: LD_ADDR_VAR 0 3
5732: PUSH
5733: LD_INT 13
5735: PUSH
5736: LD_INT 14
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: ST_TO_ADDR
5743: GO 6140
5745: LD_INT 29
5747: DOUBLE
5748: EQUAL
5749: IFTRUE 5753
5751: GO 5771
5753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5754: LD_ADDR_VAR 0 3
5758: PUSH
5759: LD_INT 13
5761: PUSH
5762: LD_INT 14
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: ST_TO_ADDR
5769: GO 6140
5771: LD_INT 31
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5779
5777: GO 5797
5779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5780: LD_ADDR_VAR 0 3
5784: PUSH
5785: LD_INT 13
5787: PUSH
5788: LD_INT 14
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: ST_TO_ADDR
5795: GO 6140
5797: LD_INT 26
5799: DOUBLE
5800: EQUAL
5801: IFTRUE 5805
5803: GO 5823
5805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5806: LD_ADDR_VAR 0 3
5810: PUSH
5811: LD_INT 13
5813: PUSH
5814: LD_INT 14
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: ST_TO_ADDR
5821: GO 6140
5823: LD_INT 42
5825: DOUBLE
5826: EQUAL
5827: IFTRUE 5831
5829: GO 5857
5831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5832: LD_ADDR_VAR 0 3
5836: PUSH
5837: LD_INT 21
5839: PUSH
5840: LD_INT 22
5842: PUSH
5843: LD_INT 23
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: ST_TO_ADDR
5855: GO 6140
5857: LD_INT 43
5859: DOUBLE
5860: EQUAL
5861: IFTRUE 5865
5863: GO 5891
5865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5866: LD_ADDR_VAR 0 3
5870: PUSH
5871: LD_INT 21
5873: PUSH
5874: LD_INT 22
5876: PUSH
5877: LD_INT 23
5879: PUSH
5880: LD_INT 24
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: ST_TO_ADDR
5889: GO 6140
5891: LD_INT 44
5893: DOUBLE
5894: EQUAL
5895: IFTRUE 5899
5897: GO 5925
5899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5900: LD_ADDR_VAR 0 3
5904: PUSH
5905: LD_INT 21
5907: PUSH
5908: LD_INT 22
5910: PUSH
5911: LD_INT 23
5913: PUSH
5914: LD_INT 24
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: ST_TO_ADDR
5923: GO 6140
5925: LD_INT 45
5927: DOUBLE
5928: EQUAL
5929: IFTRUE 5933
5931: GO 5959
5933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5934: LD_ADDR_VAR 0 3
5938: PUSH
5939: LD_INT 21
5941: PUSH
5942: LD_INT 22
5944: PUSH
5945: LD_INT 23
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: ST_TO_ADDR
5957: GO 6140
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5967
5965: GO 5993
5967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5968: LD_ADDR_VAR 0 3
5972: PUSH
5973: LD_INT 21
5975: PUSH
5976: LD_INT 22
5978: PUSH
5979: LD_INT 23
5981: PUSH
5982: LD_INT 24
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: ST_TO_ADDR
5991: GO 6140
5993: LD_INT 51
5995: DOUBLE
5996: EQUAL
5997: IFTRUE 6001
5999: GO 6027
6001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6002: LD_ADDR_VAR 0 3
6006: PUSH
6007: LD_INT 21
6009: PUSH
6010: LD_INT 22
6012: PUSH
6013: LD_INT 23
6015: PUSH
6016: LD_INT 24
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: ST_TO_ADDR
6025: GO 6140
6027: LD_INT 52
6029: DOUBLE
6030: EQUAL
6031: IFTRUE 6035
6033: GO 6061
6035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6036: LD_ADDR_VAR 0 3
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 22
6046: PUSH
6047: LD_INT 23
6049: PUSH
6050: LD_INT 24
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: ST_TO_ADDR
6059: GO 6140
6061: LD_INT 53
6063: DOUBLE
6064: EQUAL
6065: IFTRUE 6069
6067: GO 6087
6069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6070: LD_ADDR_VAR 0 3
6074: PUSH
6075: LD_INT 23
6077: PUSH
6078: LD_INT 24
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: ST_TO_ADDR
6085: GO 6140
6087: LD_INT 46
6089: DOUBLE
6090: EQUAL
6091: IFTRUE 6095
6093: GO 6113
6095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6096: LD_ADDR_VAR 0 3
6100: PUSH
6101: LD_INT 23
6103: PUSH
6104: LD_INT 24
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: ST_TO_ADDR
6111: GO 6140
6113: LD_INT 47
6115: DOUBLE
6116: EQUAL
6117: IFTRUE 6121
6119: GO 6139
6121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_INT 23
6129: PUSH
6130: LD_INT 24
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: ST_TO_ADDR
6137: GO 6140
6139: POP
// result := ( chassis in result ) ;
6140: LD_ADDR_VAR 0 3
6144: PUSH
6145: LD_VAR 0 1
6149: PUSH
6150: LD_VAR 0 3
6154: IN
6155: ST_TO_ADDR
// end ;
6156: LD_VAR 0 3
6160: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6161: LD_INT 0
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
6169: PPUSH
// result := array ;
6170: LD_ADDR_VAR 0 5
6174: PUSH
6175: LD_VAR 0 1
6179: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6180: LD_VAR 0 1
6184: NOT
6185: PUSH
6186: LD_VAR 0 2
6190: NOT
6191: OR
6192: PUSH
6193: LD_VAR 0 3
6197: NOT
6198: OR
6199: PUSH
6200: LD_VAR 0 2
6204: PUSH
6205: LD_VAR 0 1
6209: GREATER
6210: OR
6211: PUSH
6212: LD_VAR 0 3
6216: PUSH
6217: LD_VAR 0 1
6221: GREATER
6222: OR
6223: IFFALSE 6227
// exit ;
6225: GO 6523
// if direction then
6227: LD_VAR 0 4
6231: IFFALSE 6295
// begin d := 1 ;
6233: LD_ADDR_VAR 0 9
6237: PUSH
6238: LD_INT 1
6240: ST_TO_ADDR
// if i_from > i_to then
6241: LD_VAR 0 2
6245: PUSH
6246: LD_VAR 0 3
6250: GREATER
6251: IFFALSE 6277
// length := ( array - i_from ) + i_to else
6253: LD_ADDR_VAR 0 11
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: LD_VAR 0 2
6267: MINUS
6268: PUSH
6269: LD_VAR 0 3
6273: PLUS
6274: ST_TO_ADDR
6275: GO 6293
// length := i_to - i_from ;
6277: LD_ADDR_VAR 0 11
6281: PUSH
6282: LD_VAR 0 3
6286: PUSH
6287: LD_VAR 0 2
6291: MINUS
6292: ST_TO_ADDR
// end else
6293: GO 6356
// begin d := - 1 ;
6295: LD_ADDR_VAR 0 9
6299: PUSH
6300: LD_INT 1
6302: NEG
6303: ST_TO_ADDR
// if i_from > i_to then
6304: LD_VAR 0 2
6308: PUSH
6309: LD_VAR 0 3
6313: GREATER
6314: IFFALSE 6334
// length := i_from - i_to else
6316: LD_ADDR_VAR 0 11
6320: PUSH
6321: LD_VAR 0 2
6325: PUSH
6326: LD_VAR 0 3
6330: MINUS
6331: ST_TO_ADDR
6332: GO 6356
// length := ( array - i_to ) + i_from ;
6334: LD_ADDR_VAR 0 11
6338: PUSH
6339: LD_VAR 0 1
6343: PUSH
6344: LD_VAR 0 3
6348: MINUS
6349: PUSH
6350: LD_VAR 0 2
6354: PLUS
6355: ST_TO_ADDR
// end ; if not length then
6356: LD_VAR 0 11
6360: NOT
6361: IFFALSE 6365
// exit ;
6363: GO 6523
// tmp := array ;
6365: LD_ADDR_VAR 0 10
6369: PUSH
6370: LD_VAR 0 1
6374: ST_TO_ADDR
// for i = 1 to length do
6375: LD_ADDR_VAR 0 6
6379: PUSH
6380: DOUBLE
6381: LD_INT 1
6383: DEC
6384: ST_TO_ADDR
6385: LD_VAR 0 11
6389: PUSH
6390: FOR_TO
6391: IFFALSE 6511
// begin for j = 1 to array do
6393: LD_ADDR_VAR 0 7
6397: PUSH
6398: DOUBLE
6399: LD_INT 1
6401: DEC
6402: ST_TO_ADDR
6403: LD_VAR 0 1
6407: PUSH
6408: FOR_TO
6409: IFFALSE 6497
// begin k := j + d ;
6411: LD_ADDR_VAR 0 8
6415: PUSH
6416: LD_VAR 0 7
6420: PUSH
6421: LD_VAR 0 9
6425: PLUS
6426: ST_TO_ADDR
// if k > array then
6427: LD_VAR 0 8
6431: PUSH
6432: LD_VAR 0 1
6436: GREATER
6437: IFFALSE 6447
// k := 1 ;
6439: LD_ADDR_VAR 0 8
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// if not k then
6447: LD_VAR 0 8
6451: NOT
6452: IFFALSE 6464
// k := array ;
6454: LD_ADDR_VAR 0 8
6458: PUSH
6459: LD_VAR 0 1
6463: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6464: LD_ADDR_VAR 0 10
6468: PUSH
6469: LD_VAR 0 10
6473: PPUSH
6474: LD_VAR 0 8
6478: PPUSH
6479: LD_VAR 0 1
6483: PUSH
6484: LD_VAR 0 7
6488: ARRAY
6489: PPUSH
6490: CALL_OW 1
6494: ST_TO_ADDR
// end ;
6495: GO 6408
6497: POP
6498: POP
// array := tmp ;
6499: LD_ADDR_VAR 0 1
6503: PUSH
6504: LD_VAR 0 10
6508: ST_TO_ADDR
// end ;
6509: GO 6390
6511: POP
6512: POP
// result := array ;
6513: LD_ADDR_VAR 0 5
6517: PUSH
6518: LD_VAR 0 1
6522: ST_TO_ADDR
// end ;
6523: LD_VAR 0 5
6527: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6528: LD_INT 0
6530: PPUSH
6531: PPUSH
// result := 0 ;
6532: LD_ADDR_VAR 0 3
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// if not array or not value in array then
6540: LD_VAR 0 1
6544: NOT
6545: PUSH
6546: LD_VAR 0 2
6550: PUSH
6551: LD_VAR 0 1
6555: IN
6556: NOT
6557: OR
6558: IFFALSE 6562
// exit ;
6560: GO 6616
// for i = 1 to array do
6562: LD_ADDR_VAR 0 4
6566: PUSH
6567: DOUBLE
6568: LD_INT 1
6570: DEC
6571: ST_TO_ADDR
6572: LD_VAR 0 1
6576: PUSH
6577: FOR_TO
6578: IFFALSE 6614
// if value = array [ i ] then
6580: LD_VAR 0 2
6584: PUSH
6585: LD_VAR 0 1
6589: PUSH
6590: LD_VAR 0 4
6594: ARRAY
6595: EQUAL
6596: IFFALSE 6612
// begin result := i ;
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_VAR 0 4
6607: ST_TO_ADDR
// exit ;
6608: POP
6609: POP
6610: GO 6616
// end ;
6612: GO 6577
6614: POP
6615: POP
// end ;
6616: LD_VAR 0 3
6620: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6621: LD_INT 0
6623: PPUSH
// vc_chassis := chassis ;
6624: LD_ADDR_OWVAR 37
6628: PUSH
6629: LD_VAR 0 1
6633: ST_TO_ADDR
// vc_engine := engine ;
6634: LD_ADDR_OWVAR 39
6638: PUSH
6639: LD_VAR 0 2
6643: ST_TO_ADDR
// vc_control := control ;
6644: LD_ADDR_OWVAR 38
6648: PUSH
6649: LD_VAR 0 3
6653: ST_TO_ADDR
// vc_weapon := weapon ;
6654: LD_ADDR_OWVAR 40
6658: PUSH
6659: LD_VAR 0 4
6663: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6664: LD_ADDR_OWVAR 41
6668: PUSH
6669: LD_VAR 0 5
6673: ST_TO_ADDR
// end ;
6674: LD_VAR 0 6
6678: RET
// export function WantPlant ( unit ) ; var task ; begin
6679: LD_INT 0
6681: PPUSH
6682: PPUSH
// result := false ;
6683: LD_ADDR_VAR 0 2
6687: PUSH
6688: LD_INT 0
6690: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6691: LD_ADDR_VAR 0 3
6695: PUSH
6696: LD_VAR 0 1
6700: PPUSH
6701: CALL_OW 437
6705: ST_TO_ADDR
// if task then
6706: LD_VAR 0 3
6710: IFFALSE 6738
// if task [ 1 ] [ 1 ] = p then
6712: LD_VAR 0 3
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PUSH
6725: LD_STRING p
6727: EQUAL
6728: IFFALSE 6738
// result := true ;
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
// end ;
6738: LD_VAR 0 2
6742: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6743: LD_INT 0
6745: PPUSH
6746: PPUSH
6747: PPUSH
6748: PPUSH
// if pos < 1 then
6749: LD_VAR 0 2
6753: PUSH
6754: LD_INT 1
6756: LESS
6757: IFFALSE 6761
// exit ;
6759: GO 7064
// if pos = 1 then
6761: LD_VAR 0 2
6765: PUSH
6766: LD_INT 1
6768: EQUAL
6769: IFFALSE 6802
// result := Replace ( arr , pos [ 1 ] , value ) else
6771: LD_ADDR_VAR 0 4
6775: PUSH
6776: LD_VAR 0 1
6780: PPUSH
6781: LD_VAR 0 2
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PPUSH
6790: LD_VAR 0 3
6794: PPUSH
6795: CALL_OW 1
6799: ST_TO_ADDR
6800: GO 7064
// begin tmp := arr ;
6802: LD_ADDR_VAR 0 6
6806: PUSH
6807: LD_VAR 0 1
6811: ST_TO_ADDR
// s_arr := [ tmp ] ;
6812: LD_ADDR_VAR 0 7
6816: PUSH
6817: LD_VAR 0 6
6821: PUSH
6822: EMPTY
6823: LIST
6824: ST_TO_ADDR
// for i = 1 to pos - 1 do
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: DOUBLE
6831: LD_INT 1
6833: DEC
6834: ST_TO_ADDR
6835: LD_VAR 0 2
6839: PUSH
6840: LD_INT 1
6842: MINUS
6843: PUSH
6844: FOR_TO
6845: IFFALSE 6890
// begin tmp := tmp [ pos [ i ] ] ;
6847: LD_ADDR_VAR 0 6
6851: PUSH
6852: LD_VAR 0 6
6856: PUSH
6857: LD_VAR 0 2
6861: PUSH
6862: LD_VAR 0 5
6866: ARRAY
6867: ARRAY
6868: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6869: LD_ADDR_VAR 0 7
6873: PUSH
6874: LD_VAR 0 7
6878: PUSH
6879: LD_VAR 0 6
6883: PUSH
6884: EMPTY
6885: LIST
6886: ADD
6887: ST_TO_ADDR
// end ;
6888: GO 6844
6890: POP
6891: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6892: LD_ADDR_VAR 0 6
6896: PUSH
6897: LD_VAR 0 6
6901: PPUSH
6902: LD_VAR 0 2
6906: PUSH
6907: LD_VAR 0 2
6911: ARRAY
6912: PPUSH
6913: LD_VAR 0 3
6917: PPUSH
6918: CALL_OW 1
6922: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6923: LD_ADDR_VAR 0 7
6927: PUSH
6928: LD_VAR 0 7
6932: PPUSH
6933: LD_VAR 0 7
6937: PPUSH
6938: LD_VAR 0 6
6942: PPUSH
6943: CALL_OW 1
6947: ST_TO_ADDR
// for i = s_arr downto 2 do
6948: LD_ADDR_VAR 0 5
6952: PUSH
6953: DOUBLE
6954: LD_VAR 0 7
6958: INC
6959: ST_TO_ADDR
6960: LD_INT 2
6962: PUSH
6963: FOR_DOWNTO
6964: IFFALSE 7048
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_VAR 0 7
6975: PUSH
6976: LD_VAR 0 5
6980: PUSH
6981: LD_INT 1
6983: MINUS
6984: ARRAY
6985: PPUSH
6986: LD_VAR 0 2
6990: PUSH
6991: LD_VAR 0 5
6995: PUSH
6996: LD_INT 1
6998: MINUS
6999: ARRAY
7000: PPUSH
7001: LD_VAR 0 7
7005: PUSH
7006: LD_VAR 0 5
7010: ARRAY
7011: PPUSH
7012: CALL_OW 1
7016: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7017: LD_ADDR_VAR 0 7
7021: PUSH
7022: LD_VAR 0 7
7026: PPUSH
7027: LD_VAR 0 5
7031: PUSH
7032: LD_INT 1
7034: MINUS
7035: PPUSH
7036: LD_VAR 0 6
7040: PPUSH
7041: CALL_OW 1
7045: ST_TO_ADDR
// end ;
7046: GO 6963
7048: POP
7049: POP
// result := s_arr [ 1 ] ;
7050: LD_ADDR_VAR 0 4
7054: PUSH
7055: LD_VAR 0 7
7059: PUSH
7060: LD_INT 1
7062: ARRAY
7063: ST_TO_ADDR
// end ; end ;
7064: LD_VAR 0 4
7068: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7069: LD_INT 0
7071: PPUSH
7072: PPUSH
// if not list then
7073: LD_VAR 0 1
7077: NOT
7078: IFFALSE 7082
// exit ;
7080: GO 7173
// i := list [ pos1 ] ;
7082: LD_ADDR_VAR 0 5
7086: PUSH
7087: LD_VAR 0 1
7091: PUSH
7092: LD_VAR 0 2
7096: ARRAY
7097: ST_TO_ADDR
// if not i then
7098: LD_VAR 0 5
7102: NOT
7103: IFFALSE 7107
// exit ;
7105: GO 7173
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7107: LD_ADDR_VAR 0 1
7111: PUSH
7112: LD_VAR 0 1
7116: PPUSH
7117: LD_VAR 0 2
7121: PPUSH
7122: LD_VAR 0 1
7126: PUSH
7127: LD_VAR 0 3
7131: ARRAY
7132: PPUSH
7133: CALL_OW 1
7137: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_VAR 0 3
7152: PPUSH
7153: LD_VAR 0 5
7157: PPUSH
7158: CALL_OW 1
7162: ST_TO_ADDR
// result := list ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: LD_VAR 0 1
7172: ST_TO_ADDR
// end ;
7173: LD_VAR 0 4
7177: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7178: LD_INT 0
7180: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7181: LD_ADDR_VAR 0 5
7185: PUSH
7186: LD_VAR 0 1
7190: PPUSH
7191: CALL_OW 250
7195: PPUSH
7196: LD_VAR 0 1
7200: PPUSH
7201: CALL_OW 251
7205: PPUSH
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_VAR 0 3
7215: PPUSH
7216: LD_VAR 0 4
7220: PPUSH
7221: CALL 7599 0 5
7225: ST_TO_ADDR
// end ;
7226: LD_VAR 0 5
7230: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7231: LD_INT 0
7233: PPUSH
7234: PPUSH
7235: PPUSH
7236: PPUSH
// if not list or not unit then
7237: LD_VAR 0 2
7241: NOT
7242: PUSH
7243: LD_VAR 0 1
7247: NOT
7248: OR
7249: IFFALSE 7253
// exit ;
7251: GO 7594
// result := [ ] ;
7253: LD_ADDR_VAR 0 5
7257: PUSH
7258: EMPTY
7259: ST_TO_ADDR
// for i in list do
7260: LD_ADDR_VAR 0 6
7264: PUSH
7265: LD_VAR 0 2
7269: PUSH
7270: FOR_IN
7271: IFFALSE 7489
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7273: LD_ADDR_VAR 0 8
7277: PUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: LD_VAR 0 6
7287: PUSH
7288: LD_INT 1
7290: ARRAY
7291: PPUSH
7292: LD_VAR 0 6
7296: PUSH
7297: LD_INT 2
7299: ARRAY
7300: PPUSH
7301: CALL_OW 297
7305: ST_TO_ADDR
// if not Count ( result ) then
7306: LD_VAR 0 5
7310: PPUSH
7311: CALL 3883 0 1
7315: NOT
7316: IFFALSE 7349
// begin result := Join ( result , [ i , tmp ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_VAR 0 6
7332: PUSH
7333: LD_VAR 0 8
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL 39483 0 2
7346: ST_TO_ADDR
// continue ;
7347: GO 7270
// end ; if result [ result ] [ 2 ] <= tmp then
7349: LD_VAR 0 5
7353: PUSH
7354: LD_VAR 0 5
7358: ARRAY
7359: PUSH
7360: LD_INT 2
7362: ARRAY
7363: PUSH
7364: LD_VAR 0 8
7368: LESSEQUAL
7369: IFFALSE 7402
// result := Join ( result , [ i , tmp ] ) else
7371: LD_ADDR_VAR 0 5
7375: PUSH
7376: LD_VAR 0 5
7380: PPUSH
7381: LD_VAR 0 6
7385: PUSH
7386: LD_VAR 0 8
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PPUSH
7395: CALL 39483 0 2
7399: ST_TO_ADDR
7400: GO 7487
// begin for j := 1 to Count ( result ) do
7402: LD_ADDR_VAR 0 7
7406: PUSH
7407: DOUBLE
7408: LD_INT 1
7410: DEC
7411: ST_TO_ADDR
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL 3883 0 1
7421: PUSH
7422: FOR_TO
7423: IFFALSE 7485
// begin if tmp < result [ j ] [ 2 ] then
7425: LD_VAR 0 8
7429: PUSH
7430: LD_VAR 0 5
7434: PUSH
7435: LD_VAR 0 7
7439: ARRAY
7440: PUSH
7441: LD_INT 2
7443: ARRAY
7444: LESS
7445: IFFALSE 7483
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7447: LD_ADDR_VAR 0 5
7451: PUSH
7452: LD_VAR 0 5
7456: PPUSH
7457: LD_VAR 0 7
7461: PPUSH
7462: LD_VAR 0 6
7466: PUSH
7467: LD_VAR 0 8
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 2
7480: ST_TO_ADDR
// break ;
7481: GO 7485
// end ; end ;
7483: GO 7422
7485: POP
7486: POP
// end ; end ;
7487: GO 7270
7489: POP
7490: POP
// if result and not asc then
7491: LD_VAR 0 5
7495: PUSH
7496: LD_VAR 0 3
7500: NOT
7501: AND
7502: IFFALSE 7519
// result := ReverseArray ( result ) ;
7504: LD_ADDR_VAR 0 5
7508: PUSH
7509: LD_VAR 0 5
7513: PPUSH
7514: CALL 34759 0 1
7518: ST_TO_ADDR
// tmp := [ ] ;
7519: LD_ADDR_VAR 0 8
7523: PUSH
7524: EMPTY
7525: ST_TO_ADDR
// if mode then
7526: LD_VAR 0 4
7530: IFFALSE 7594
// begin for i := 1 to result do
7532: LD_ADDR_VAR 0 6
7536: PUSH
7537: DOUBLE
7538: LD_INT 1
7540: DEC
7541: ST_TO_ADDR
7542: LD_VAR 0 5
7546: PUSH
7547: FOR_TO
7548: IFFALSE 7582
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7550: LD_ADDR_VAR 0 8
7554: PUSH
7555: LD_VAR 0 8
7559: PPUSH
7560: LD_VAR 0 5
7564: PUSH
7565: LD_VAR 0 6
7569: ARRAY
7570: PUSH
7571: LD_INT 1
7573: ARRAY
7574: PPUSH
7575: CALL 39483 0 2
7579: ST_TO_ADDR
7580: GO 7547
7582: POP
7583: POP
// result := tmp ;
7584: LD_ADDR_VAR 0 5
7588: PUSH
7589: LD_VAR 0 8
7593: ST_TO_ADDR
// end ; end ;
7594: LD_VAR 0 5
7598: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7599: LD_INT 0
7601: PPUSH
7602: PPUSH
7603: PPUSH
7604: PPUSH
// if not list then
7605: LD_VAR 0 3
7609: NOT
7610: IFFALSE 7614
// exit ;
7612: GO 8002
// result := [ ] ;
7614: LD_ADDR_VAR 0 6
7618: PUSH
7619: EMPTY
7620: ST_TO_ADDR
// for i in list do
7621: LD_ADDR_VAR 0 7
7625: PUSH
7626: LD_VAR 0 3
7630: PUSH
7631: FOR_IN
7632: IFFALSE 7834
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7634: LD_ADDR_VAR 0 9
7638: PUSH
7639: LD_VAR 0 7
7643: PPUSH
7644: LD_VAR 0 1
7648: PPUSH
7649: LD_VAR 0 2
7653: PPUSH
7654: CALL_OW 297
7658: ST_TO_ADDR
// if not result then
7659: LD_VAR 0 6
7663: NOT
7664: IFFALSE 7690
// result := [ [ i , tmp ] ] else
7666: LD_ADDR_VAR 0 6
7670: PUSH
7671: LD_VAR 0 7
7675: PUSH
7676: LD_VAR 0 9
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: ST_TO_ADDR
7688: GO 7832
// begin if result [ result ] [ 2 ] < tmp then
7690: LD_VAR 0 6
7694: PUSH
7695: LD_VAR 0 6
7699: ARRAY
7700: PUSH
7701: LD_INT 2
7703: ARRAY
7704: PUSH
7705: LD_VAR 0 9
7709: LESS
7710: IFFALSE 7752
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7712: LD_ADDR_VAR 0 6
7716: PUSH
7717: LD_VAR 0 6
7721: PPUSH
7722: LD_VAR 0 6
7726: PUSH
7727: LD_INT 1
7729: PLUS
7730: PPUSH
7731: LD_VAR 0 7
7735: PUSH
7736: LD_VAR 0 9
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PPUSH
7745: CALL_OW 2
7749: ST_TO_ADDR
7750: GO 7832
// for j = 1 to result do
7752: LD_ADDR_VAR 0 8
7756: PUSH
7757: DOUBLE
7758: LD_INT 1
7760: DEC
7761: ST_TO_ADDR
7762: LD_VAR 0 6
7766: PUSH
7767: FOR_TO
7768: IFFALSE 7830
// begin if tmp < result [ j ] [ 2 ] then
7770: LD_VAR 0 9
7774: PUSH
7775: LD_VAR 0 6
7779: PUSH
7780: LD_VAR 0 8
7784: ARRAY
7785: PUSH
7786: LD_INT 2
7788: ARRAY
7789: LESS
7790: IFFALSE 7828
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7792: LD_ADDR_VAR 0 6
7796: PUSH
7797: LD_VAR 0 6
7801: PPUSH
7802: LD_VAR 0 8
7806: PPUSH
7807: LD_VAR 0 7
7811: PUSH
7812: LD_VAR 0 9
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 2
7825: ST_TO_ADDR
// break ;
7826: GO 7830
// end ; end ;
7828: GO 7767
7830: POP
7831: POP
// end ; end ;
7832: GO 7631
7834: POP
7835: POP
// if result and not asc then
7836: LD_VAR 0 6
7840: PUSH
7841: LD_VAR 0 4
7845: NOT
7846: AND
7847: IFFALSE 7922
// begin tmp := result ;
7849: LD_ADDR_VAR 0 9
7853: PUSH
7854: LD_VAR 0 6
7858: ST_TO_ADDR
// for i = tmp downto 1 do
7859: LD_ADDR_VAR 0 7
7863: PUSH
7864: DOUBLE
7865: LD_VAR 0 9
7869: INC
7870: ST_TO_ADDR
7871: LD_INT 1
7873: PUSH
7874: FOR_DOWNTO
7875: IFFALSE 7920
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7877: LD_ADDR_VAR 0 6
7881: PUSH
7882: LD_VAR 0 6
7886: PPUSH
7887: LD_VAR 0 9
7891: PUSH
7892: LD_VAR 0 7
7896: MINUS
7897: PUSH
7898: LD_INT 1
7900: PLUS
7901: PPUSH
7902: LD_VAR 0 9
7906: PUSH
7907: LD_VAR 0 7
7911: ARRAY
7912: PPUSH
7913: CALL_OW 1
7917: ST_TO_ADDR
7918: GO 7874
7920: POP
7921: POP
// end ; tmp := [ ] ;
7922: LD_ADDR_VAR 0 9
7926: PUSH
7927: EMPTY
7928: ST_TO_ADDR
// if mode then
7929: LD_VAR 0 5
7933: IFFALSE 8002
// begin for i = 1 to result do
7935: LD_ADDR_VAR 0 7
7939: PUSH
7940: DOUBLE
7941: LD_INT 1
7943: DEC
7944: ST_TO_ADDR
7945: LD_VAR 0 6
7949: PUSH
7950: FOR_TO
7951: IFFALSE 7990
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7953: LD_ADDR_VAR 0 9
7957: PUSH
7958: LD_VAR 0 9
7962: PPUSH
7963: LD_VAR 0 7
7967: PPUSH
7968: LD_VAR 0 6
7972: PUSH
7973: LD_VAR 0 7
7977: ARRAY
7978: PUSH
7979: LD_INT 1
7981: ARRAY
7982: PPUSH
7983: CALL_OW 1
7987: ST_TO_ADDR
7988: GO 7950
7990: POP
7991: POP
// result := tmp ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 9
8001: ST_TO_ADDR
// end ; end ;
8002: LD_VAR 0 6
8006: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8007: LD_INT 0
8009: PPUSH
8010: PPUSH
8011: PPUSH
8012: PPUSH
8013: PPUSH
8014: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8015: LD_ADDR_VAR 0 5
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: LD_INT 0
8025: PUSH
8026: LD_INT 0
8028: PUSH
8029: EMPTY
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: ST_TO_ADDR
// if not x or not y then
8037: LD_VAR 0 2
8041: NOT
8042: PUSH
8043: LD_VAR 0 3
8047: NOT
8048: OR
8049: IFFALSE 8053
// exit ;
8051: GO 9703
// if not range then
8053: LD_VAR 0 4
8057: NOT
8058: IFFALSE 8068
// range := 10 ;
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_INT 10
8067: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8068: LD_ADDR_VAR 0 8
8072: PUSH
8073: LD_INT 81
8075: PUSH
8076: LD_VAR 0 1
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 92
8087: PUSH
8088: LD_VAR 0 2
8092: PUSH
8093: LD_VAR 0 3
8097: PUSH
8098: LD_VAR 0 4
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 3
8111: PUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 3
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: PPUSH
8131: CALL_OW 69
8135: ST_TO_ADDR
// if not tmp then
8136: LD_VAR 0 8
8140: NOT
8141: IFFALSE 8145
// exit ;
8143: GO 9703
// for i in tmp do
8145: LD_ADDR_VAR 0 6
8149: PUSH
8150: LD_VAR 0 8
8154: PUSH
8155: FOR_IN
8156: IFFALSE 9678
// begin points := [ 0 , 0 , 0 ] ;
8158: LD_ADDR_VAR 0 9
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: LD_INT 0
8168: PUSH
8169: LD_INT 0
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: ST_TO_ADDR
// bpoints := 1 ;
8177: LD_ADDR_VAR 0 10
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8185: LD_VAR 0 6
8189: PPUSH
8190: CALL_OW 247
8194: PUSH
8195: LD_INT 1
8197: DOUBLE
8198: EQUAL
8199: IFTRUE 8203
8201: GO 8781
8203: POP
// begin if GetClass ( i ) = 1 then
8204: LD_VAR 0 6
8208: PPUSH
8209: CALL_OW 257
8213: PUSH
8214: LD_INT 1
8216: EQUAL
8217: IFFALSE 8238
// points := [ 10 , 5 , 3 ] ;
8219: LD_ADDR_VAR 0 9
8223: PUSH
8224: LD_INT 10
8226: PUSH
8227: LD_INT 5
8229: PUSH
8230: LD_INT 3
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8238: LD_VAR 0 6
8242: PPUSH
8243: CALL_OW 257
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: LD_INT 3
8253: PUSH
8254: LD_INT 4
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: IN
8262: IFFALSE 8283
// points := [ 3 , 2 , 1 ] ;
8264: LD_ADDR_VAR 0 9
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: LD_INT 2
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8283: LD_VAR 0 6
8287: PPUSH
8288: CALL_OW 257
8292: PUSH
8293: LD_INT 5
8295: EQUAL
8296: IFFALSE 8317
// points := [ 130 , 5 , 2 ] ;
8298: LD_ADDR_VAR 0 9
8302: PUSH
8303: LD_INT 130
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: LD_INT 2
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8317: LD_VAR 0 6
8321: PPUSH
8322: CALL_OW 257
8326: PUSH
8327: LD_INT 8
8329: EQUAL
8330: IFFALSE 8351
// points := [ 35 , 35 , 30 ] ;
8332: LD_ADDR_VAR 0 9
8336: PUSH
8337: LD_INT 35
8339: PUSH
8340: LD_INT 35
8342: PUSH
8343: LD_INT 30
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8351: LD_VAR 0 6
8355: PPUSH
8356: CALL_OW 257
8360: PUSH
8361: LD_INT 9
8363: EQUAL
8364: IFFALSE 8385
// points := [ 20 , 55 , 40 ] ;
8366: LD_ADDR_VAR 0 9
8370: PUSH
8371: LD_INT 20
8373: PUSH
8374: LD_INT 55
8376: PUSH
8377: LD_INT 40
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8385: LD_VAR 0 6
8389: PPUSH
8390: CALL_OW 257
8394: PUSH
8395: LD_INT 12
8397: PUSH
8398: LD_INT 16
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: IN
8405: IFFALSE 8426
// points := [ 5 , 3 , 2 ] ;
8407: LD_ADDR_VAR 0 9
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: LD_INT 2
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8426: LD_VAR 0 6
8430: PPUSH
8431: CALL_OW 257
8435: PUSH
8436: LD_INT 17
8438: EQUAL
8439: IFFALSE 8460
// points := [ 100 , 50 , 75 ] ;
8441: LD_ADDR_VAR 0 9
8445: PUSH
8446: LD_INT 100
8448: PUSH
8449: LD_INT 50
8451: PUSH
8452: LD_INT 75
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8460: LD_VAR 0 6
8464: PPUSH
8465: CALL_OW 257
8469: PUSH
8470: LD_INT 15
8472: EQUAL
8473: IFFALSE 8494
// points := [ 10 , 5 , 3 ] ;
8475: LD_ADDR_VAR 0 9
8479: PUSH
8480: LD_INT 10
8482: PUSH
8483: LD_INT 5
8485: PUSH
8486: LD_INT 3
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8494: LD_VAR 0 6
8498: PPUSH
8499: CALL_OW 257
8503: PUSH
8504: LD_INT 14
8506: EQUAL
8507: IFFALSE 8528
// points := [ 10 , 0 , 0 ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 10
8516: PUSH
8517: LD_INT 0
8519: PUSH
8520: LD_INT 0
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8528: LD_VAR 0 6
8532: PPUSH
8533: CALL_OW 257
8537: PUSH
8538: LD_INT 11
8540: EQUAL
8541: IFFALSE 8562
// points := [ 30 , 10 , 5 ] ;
8543: LD_ADDR_VAR 0 9
8547: PUSH
8548: LD_INT 30
8550: PUSH
8551: LD_INT 10
8553: PUSH
8554: LD_INT 5
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: LIST
8561: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_INT 5
8569: PPUSH
8570: CALL_OW 321
8574: PUSH
8575: LD_INT 2
8577: EQUAL
8578: IFFALSE 8595
// bpoints := bpoints * 1.8 ;
8580: LD_ADDR_VAR 0 10
8584: PUSH
8585: LD_VAR 0 10
8589: PUSH
8590: LD_REAL  1.80000000000000E+0000
8593: MUL
8594: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8595: LD_VAR 0 6
8599: PPUSH
8600: CALL_OW 257
8604: PUSH
8605: LD_INT 1
8607: PUSH
8608: LD_INT 2
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: LD_INT 4
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: IN
8623: PUSH
8624: LD_VAR 0 1
8628: PPUSH
8629: LD_INT 51
8631: PPUSH
8632: CALL_OW 321
8636: PUSH
8637: LD_INT 2
8639: EQUAL
8640: AND
8641: IFFALSE 8658
// bpoints := bpoints * 1.2 ;
8643: LD_ADDR_VAR 0 10
8647: PUSH
8648: LD_VAR 0 10
8652: PUSH
8653: LD_REAL  1.20000000000000E+0000
8656: MUL
8657: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8658: LD_VAR 0 6
8662: PPUSH
8663: CALL_OW 257
8667: PUSH
8668: LD_INT 5
8670: PUSH
8671: LD_INT 7
8673: PUSH
8674: LD_INT 9
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: LIST
8681: IN
8682: PUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: LD_INT 52
8690: PPUSH
8691: CALL_OW 321
8695: PUSH
8696: LD_INT 2
8698: EQUAL
8699: AND
8700: IFFALSE 8717
// bpoints := bpoints * 1.5 ;
8702: LD_ADDR_VAR 0 10
8706: PUSH
8707: LD_VAR 0 10
8711: PUSH
8712: LD_REAL  1.50000000000000E+0000
8715: MUL
8716: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8717: LD_VAR 0 1
8721: PPUSH
8722: LD_INT 66
8724: PPUSH
8725: CALL_OW 321
8729: PUSH
8730: LD_INT 2
8732: EQUAL
8733: IFFALSE 8750
// bpoints := bpoints * 1.1 ;
8735: LD_ADDR_VAR 0 10
8739: PUSH
8740: LD_VAR 0 10
8744: PUSH
8745: LD_REAL  1.10000000000000E+0000
8748: MUL
8749: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8750: LD_ADDR_VAR 0 10
8754: PUSH
8755: LD_VAR 0 10
8759: PUSH
8760: LD_VAR 0 6
8764: PPUSH
8765: LD_INT 1
8767: PPUSH
8768: CALL_OW 259
8772: PUSH
8773: LD_REAL  1.15000000000000E+0000
8776: MUL
8777: MUL
8778: ST_TO_ADDR
// end ; unit_vehicle :
8779: GO 9607
8781: LD_INT 2
8783: DOUBLE
8784: EQUAL
8785: IFTRUE 8789
8787: GO 9595
8789: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8790: LD_VAR 0 6
8794: PPUSH
8795: CALL_OW 264
8799: PUSH
8800: LD_INT 2
8802: PUSH
8803: LD_INT 42
8805: PUSH
8806: LD_INT 24
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: IN
8814: IFFALSE 8835
// points := [ 25 , 5 , 3 ] ;
8816: LD_ADDR_VAR 0 9
8820: PUSH
8821: LD_INT 25
8823: PUSH
8824: LD_INT 5
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8835: LD_VAR 0 6
8839: PPUSH
8840: CALL_OW 264
8844: PUSH
8845: LD_INT 4
8847: PUSH
8848: LD_INT 43
8850: PUSH
8851: LD_INT 25
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: IN
8859: IFFALSE 8880
// points := [ 40 , 15 , 5 ] ;
8861: LD_ADDR_VAR 0 9
8865: PUSH
8866: LD_INT 40
8868: PUSH
8869: LD_INT 15
8871: PUSH
8872: LD_INT 5
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8880: LD_VAR 0 6
8884: PPUSH
8885: CALL_OW 264
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: LD_INT 23
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: IN
8900: IFFALSE 8921
// points := [ 7 , 25 , 8 ] ;
8902: LD_ADDR_VAR 0 9
8906: PUSH
8907: LD_INT 7
8909: PUSH
8910: LD_INT 25
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8921: LD_VAR 0 6
8925: PPUSH
8926: CALL_OW 264
8930: PUSH
8931: LD_INT 5
8933: PUSH
8934: LD_INT 27
8936: PUSH
8937: LD_INT 44
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: IN
8945: IFFALSE 8966
// points := [ 14 , 50 , 16 ] ;
8947: LD_ADDR_VAR 0 9
8951: PUSH
8952: LD_INT 14
8954: PUSH
8955: LD_INT 50
8957: PUSH
8958: LD_INT 16
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8966: LD_VAR 0 6
8970: PPUSH
8971: CALL_OW 264
8975: PUSH
8976: LD_INT 6
8978: PUSH
8979: LD_INT 46
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: IN
8986: IFFALSE 9007
// points := [ 32 , 120 , 70 ] ;
8988: LD_ADDR_VAR 0 9
8992: PUSH
8993: LD_INT 32
8995: PUSH
8996: LD_INT 120
8998: PUSH
8999: LD_INT 70
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9007: LD_VAR 0 6
9011: PPUSH
9012: CALL_OW 264
9016: PUSH
9017: LD_INT 7
9019: PUSH
9020: LD_INT 28
9022: PUSH
9023: LD_INT 45
9025: PUSH
9026: LD_INT 92
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: IN
9035: IFFALSE 9056
// points := [ 35 , 20 , 45 ] ;
9037: LD_ADDR_VAR 0 9
9041: PUSH
9042: LD_INT 35
9044: PUSH
9045: LD_INT 20
9047: PUSH
9048: LD_INT 45
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9056: LD_VAR 0 6
9060: PPUSH
9061: CALL_OW 264
9065: PUSH
9066: LD_INT 47
9068: PUSH
9069: EMPTY
9070: LIST
9071: IN
9072: IFFALSE 9093
// points := [ 67 , 45 , 75 ] ;
9074: LD_ADDR_VAR 0 9
9078: PUSH
9079: LD_INT 67
9081: PUSH
9082: LD_INT 45
9084: PUSH
9085: LD_INT 75
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: LIST
9092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9093: LD_VAR 0 6
9097: PPUSH
9098: CALL_OW 264
9102: PUSH
9103: LD_INT 26
9105: PUSH
9106: EMPTY
9107: LIST
9108: IN
9109: IFFALSE 9130
// points := [ 120 , 30 , 80 ] ;
9111: LD_ADDR_VAR 0 9
9115: PUSH
9116: LD_INT 120
9118: PUSH
9119: LD_INT 30
9121: PUSH
9122: LD_INT 80
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9130: LD_VAR 0 6
9134: PPUSH
9135: CALL_OW 264
9139: PUSH
9140: LD_INT 22
9142: PUSH
9143: EMPTY
9144: LIST
9145: IN
9146: IFFALSE 9167
// points := [ 40 , 1 , 1 ] ;
9148: LD_ADDR_VAR 0 9
9152: PUSH
9153: LD_INT 40
9155: PUSH
9156: LD_INT 1
9158: PUSH
9159: LD_INT 1
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9167: LD_VAR 0 6
9171: PPUSH
9172: CALL_OW 264
9176: PUSH
9177: LD_INT 29
9179: PUSH
9180: EMPTY
9181: LIST
9182: IN
9183: IFFALSE 9204
// points := [ 70 , 200 , 400 ] ;
9185: LD_ADDR_VAR 0 9
9189: PUSH
9190: LD_INT 70
9192: PUSH
9193: LD_INT 200
9195: PUSH
9196: LD_INT 400
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9204: LD_VAR 0 6
9208: PPUSH
9209: CALL_OW 264
9213: PUSH
9214: LD_INT 14
9216: PUSH
9217: LD_INT 53
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: IN
9224: IFFALSE 9245
// points := [ 40 , 10 , 20 ] ;
9226: LD_ADDR_VAR 0 9
9230: PUSH
9231: LD_INT 40
9233: PUSH
9234: LD_INT 10
9236: PUSH
9237: LD_INT 20
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9245: LD_VAR 0 6
9249: PPUSH
9250: CALL_OW 264
9254: PUSH
9255: LD_INT 9
9257: PUSH
9258: EMPTY
9259: LIST
9260: IN
9261: IFFALSE 9282
// points := [ 5 , 70 , 20 ] ;
9263: LD_ADDR_VAR 0 9
9267: PUSH
9268: LD_INT 5
9270: PUSH
9271: LD_INT 70
9273: PUSH
9274: LD_INT 20
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9282: LD_VAR 0 6
9286: PPUSH
9287: CALL_OW 264
9291: PUSH
9292: LD_INT 10
9294: PUSH
9295: EMPTY
9296: LIST
9297: IN
9298: IFFALSE 9319
// points := [ 35 , 110 , 70 ] ;
9300: LD_ADDR_VAR 0 9
9304: PUSH
9305: LD_INT 35
9307: PUSH
9308: LD_INT 110
9310: PUSH
9311: LD_INT 70
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9319: LD_VAR 0 6
9323: PPUSH
9324: CALL_OW 265
9328: PUSH
9329: LD_INT 25
9331: EQUAL
9332: IFFALSE 9353
// points := [ 80 , 65 , 100 ] ;
9334: LD_ADDR_VAR 0 9
9338: PUSH
9339: LD_INT 80
9341: PUSH
9342: LD_INT 65
9344: PUSH
9345: LD_INT 100
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9353: LD_VAR 0 6
9357: PPUSH
9358: CALL_OW 263
9362: PUSH
9363: LD_INT 1
9365: EQUAL
9366: IFFALSE 9401
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9368: LD_ADDR_VAR 0 10
9372: PUSH
9373: LD_VAR 0 10
9377: PUSH
9378: LD_VAR 0 6
9382: PPUSH
9383: CALL_OW 311
9387: PPUSH
9388: LD_INT 3
9390: PPUSH
9391: CALL_OW 259
9395: PUSH
9396: LD_INT 4
9398: MUL
9399: MUL
9400: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9401: LD_VAR 0 6
9405: PPUSH
9406: CALL_OW 263
9410: PUSH
9411: LD_INT 2
9413: EQUAL
9414: IFFALSE 9465
// begin j := IsControledBy ( i ) ;
9416: LD_ADDR_VAR 0 7
9420: PUSH
9421: LD_VAR 0 6
9425: PPUSH
9426: CALL_OW 312
9430: ST_TO_ADDR
// if j then
9431: LD_VAR 0 7
9435: IFFALSE 9465
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9437: LD_ADDR_VAR 0 10
9441: PUSH
9442: LD_VAR 0 10
9446: PUSH
9447: LD_VAR 0 7
9451: PPUSH
9452: LD_INT 3
9454: PPUSH
9455: CALL_OW 259
9459: PUSH
9460: LD_INT 3
9462: MUL
9463: MUL
9464: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9465: LD_VAR 0 6
9469: PPUSH
9470: CALL_OW 264
9474: PUSH
9475: LD_INT 5
9477: PUSH
9478: LD_INT 6
9480: PUSH
9481: LD_INT 46
9483: PUSH
9484: LD_INT 44
9486: PUSH
9487: LD_INT 47
9489: PUSH
9490: LD_INT 45
9492: PUSH
9493: LD_INT 28
9495: PUSH
9496: LD_INT 7
9498: PUSH
9499: LD_INT 27
9501: PUSH
9502: LD_INT 29
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: IN
9517: PUSH
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_INT 52
9525: PPUSH
9526: CALL_OW 321
9530: PUSH
9531: LD_INT 2
9533: EQUAL
9534: AND
9535: IFFALSE 9552
// bpoints := bpoints * 1.2 ;
9537: LD_ADDR_VAR 0 10
9541: PUSH
9542: LD_VAR 0 10
9546: PUSH
9547: LD_REAL  1.20000000000000E+0000
9550: MUL
9551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9552: LD_VAR 0 6
9556: PPUSH
9557: CALL_OW 264
9561: PUSH
9562: LD_INT 6
9564: PUSH
9565: LD_INT 46
9567: PUSH
9568: LD_INT 47
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: IN
9576: IFFALSE 9593
// bpoints := bpoints * 1.2 ;
9578: LD_ADDR_VAR 0 10
9582: PUSH
9583: LD_VAR 0 10
9587: PUSH
9588: LD_REAL  1.20000000000000E+0000
9591: MUL
9592: ST_TO_ADDR
// end ; unit_building :
9593: GO 9607
9595: LD_INT 3
9597: DOUBLE
9598: EQUAL
9599: IFTRUE 9603
9601: GO 9606
9603: POP
// ; end ;
9604: GO 9607
9606: POP
// for j = 1 to 3 do
9607: LD_ADDR_VAR 0 7
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 3
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9674
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9623: LD_ADDR_VAR 0 5
9627: PUSH
9628: LD_VAR 0 5
9632: PPUSH
9633: LD_VAR 0 7
9637: PPUSH
9638: LD_VAR 0 5
9642: PUSH
9643: LD_VAR 0 7
9647: ARRAY
9648: PUSH
9649: LD_VAR 0 9
9653: PUSH
9654: LD_VAR 0 7
9658: ARRAY
9659: PUSH
9660: LD_VAR 0 10
9664: MUL
9665: PLUS
9666: PPUSH
9667: CALL_OW 1
9671: ST_TO_ADDR
9672: GO 9620
9674: POP
9675: POP
// end ;
9676: GO 8155
9678: POP
9679: POP
// result := Replace ( result , 4 , tmp ) ;
9680: LD_ADDR_VAR 0 5
9684: PUSH
9685: LD_VAR 0 5
9689: PPUSH
9690: LD_INT 4
9692: PPUSH
9693: LD_VAR 0 8
9697: PPUSH
9698: CALL_OW 1
9702: ST_TO_ADDR
// end ;
9703: LD_VAR 0 5
9707: RET
// export function DangerAtRange ( unit , range ) ; begin
9708: LD_INT 0
9710: PPUSH
// if not unit then
9711: LD_VAR 0 1
9715: NOT
9716: IFFALSE 9720
// exit ;
9718: GO 9765
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9720: LD_ADDR_VAR 0 3
9724: PUSH
9725: LD_VAR 0 1
9729: PPUSH
9730: CALL_OW 255
9734: PPUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 250
9744: PPUSH
9745: LD_VAR 0 1
9749: PPUSH
9750: CALL_OW 251
9754: PPUSH
9755: LD_VAR 0 2
9759: PPUSH
9760: CALL 8007 0 4
9764: ST_TO_ADDR
// end ;
9765: LD_VAR 0 3
9769: RET
// export function DangerInArea ( side , area ) ; begin
9770: LD_INT 0
9772: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: LD_VAR 0 2
9782: PPUSH
9783: LD_INT 81
9785: PUSH
9786: LD_VAR 0 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PPUSH
9795: CALL_OW 70
9799: ST_TO_ADDR
// end ;
9800: LD_VAR 0 3
9804: RET
// export function IsExtension ( b ) ; begin
9805: LD_INT 0
9807: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9808: LD_ADDR_VAR 0 2
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: LD_INT 23
9820: PUSH
9821: LD_INT 20
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 17
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 19
9838: PUSH
9839: LD_INT 16
9841: PUSH
9842: LD_INT 25
9844: PUSH
9845: LD_INT 18
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: IN
9860: ST_TO_ADDR
// end ;
9861: LD_VAR 0 2
9865: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9866: LD_INT 0
9868: PPUSH
9869: PPUSH
9870: PPUSH
// result := [ ] ;
9871: LD_ADDR_VAR 0 4
9875: PUSH
9876: EMPTY
9877: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9878: LD_ADDR_VAR 0 5
9882: PUSH
9883: LD_VAR 0 2
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 70
9902: ST_TO_ADDR
// if not tmp then
9903: LD_VAR 0 5
9907: NOT
9908: IFFALSE 9912
// exit ;
9910: GO 9976
// if checkLink then
9912: LD_VAR 0 3
9916: IFFALSE 9966
// begin for i in tmp do
9918: LD_ADDR_VAR 0 6
9922: PUSH
9923: LD_VAR 0 5
9927: PUSH
9928: FOR_IN
9929: IFFALSE 9964
// if GetBase ( i ) <> base then
9931: LD_VAR 0 6
9935: PPUSH
9936: CALL_OW 274
9940: PUSH
9941: LD_VAR 0 1
9945: NONEQUAL
9946: IFFALSE 9962
// ComLinkToBase ( base , i ) ;
9948: LD_VAR 0 1
9952: PPUSH
9953: LD_VAR 0 6
9957: PPUSH
9958: CALL_OW 169
9962: GO 9928
9964: POP
9965: POP
// end ; result := tmp ;
9966: LD_ADDR_VAR 0 4
9970: PUSH
9971: LD_VAR 0 5
9975: ST_TO_ADDR
// end ;
9976: LD_VAR 0 4
9980: RET
// export function ComComplete ( units , b ) ; var i ; begin
9981: LD_INT 0
9983: PPUSH
9984: PPUSH
// if not units then
9985: LD_VAR 0 1
9989: NOT
9990: IFFALSE 9994
// exit ;
9992: GO 10084
// for i in units do
9994: LD_ADDR_VAR 0 4
9998: PUSH
9999: LD_VAR 0 1
10003: PUSH
10004: FOR_IN
10005: IFFALSE 10082
// if BuildingStatus ( b ) = bs_build then
10007: LD_VAR 0 2
10011: PPUSH
10012: CALL_OW 461
10016: PUSH
10017: LD_INT 1
10019: EQUAL
10020: IFFALSE 10080
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10022: LD_VAR 0 4
10026: PPUSH
10027: LD_STRING h
10029: PUSH
10030: LD_VAR 0 2
10034: PPUSH
10035: CALL_OW 250
10039: PUSH
10040: LD_VAR 0 2
10044: PPUSH
10045: CALL_OW 251
10049: PUSH
10050: LD_VAR 0 2
10054: PUSH
10055: LD_INT 0
10057: PUSH
10058: LD_INT 0
10060: PUSH
10061: LD_INT 0
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: PUSH
10073: EMPTY
10074: LIST
10075: PPUSH
10076: CALL_OW 446
10080: GO 10004
10082: POP
10083: POP
// end ;
10084: LD_VAR 0 3
10088: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10089: LD_INT 0
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
10096: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10097: LD_VAR 0 1
10101: NOT
10102: PUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: CALL_OW 263
10112: PUSH
10113: LD_INT 2
10115: NONEQUAL
10116: OR
10117: IFFALSE 10121
// exit ;
10119: GO 10437
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10121: LD_ADDR_VAR 0 6
10125: PUSH
10126: LD_INT 22
10128: PUSH
10129: LD_VAR 0 1
10133: PPUSH
10134: CALL_OW 255
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 30
10148: PUSH
10149: LD_INT 36
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 34
10158: PUSH
10159: LD_INT 31
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 69
10179: ST_TO_ADDR
// if not tmp then
10180: LD_VAR 0 6
10184: NOT
10185: IFFALSE 10189
// exit ;
10187: GO 10437
// result := [ ] ;
10189: LD_ADDR_VAR 0 2
10193: PUSH
10194: EMPTY
10195: ST_TO_ADDR
// for i in tmp do
10196: LD_ADDR_VAR 0 3
10200: PUSH
10201: LD_VAR 0 6
10205: PUSH
10206: FOR_IN
10207: IFFALSE 10278
// begin t := UnitsInside ( i ) ;
10209: LD_ADDR_VAR 0 4
10213: PUSH
10214: LD_VAR 0 3
10218: PPUSH
10219: CALL_OW 313
10223: ST_TO_ADDR
// if t then
10224: LD_VAR 0 4
10228: IFFALSE 10276
// for j in t do
10230: LD_ADDR_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: PUSH
10240: FOR_IN
10241: IFFALSE 10274
// result := Replace ( result , result + 1 , j ) ;
10243: LD_ADDR_VAR 0 2
10247: PUSH
10248: LD_VAR 0 2
10252: PPUSH
10253: LD_VAR 0 2
10257: PUSH
10258: LD_INT 1
10260: PLUS
10261: PPUSH
10262: LD_VAR 0 7
10266: PPUSH
10267: CALL_OW 1
10271: ST_TO_ADDR
10272: GO 10240
10274: POP
10275: POP
// end ;
10276: GO 10206
10278: POP
10279: POP
// if not result then
10280: LD_VAR 0 2
10284: NOT
10285: IFFALSE 10289
// exit ;
10287: GO 10437
// mech := result [ 1 ] ;
10289: LD_ADDR_VAR 0 5
10293: PUSH
10294: LD_VAR 0 2
10298: PUSH
10299: LD_INT 1
10301: ARRAY
10302: ST_TO_ADDR
// if result > 1 then
10303: LD_VAR 0 2
10307: PUSH
10308: LD_INT 1
10310: GREATER
10311: IFFALSE 10423
// begin for i = 2 to result do
10313: LD_ADDR_VAR 0 3
10317: PUSH
10318: DOUBLE
10319: LD_INT 2
10321: DEC
10322: ST_TO_ADDR
10323: LD_VAR 0 2
10327: PUSH
10328: FOR_TO
10329: IFFALSE 10421
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10331: LD_ADDR_VAR 0 4
10335: PUSH
10336: LD_VAR 0 2
10340: PUSH
10341: LD_VAR 0 3
10345: ARRAY
10346: PPUSH
10347: LD_INT 3
10349: PPUSH
10350: CALL_OW 259
10354: PUSH
10355: LD_VAR 0 2
10359: PUSH
10360: LD_VAR 0 3
10364: ARRAY
10365: PPUSH
10366: CALL_OW 432
10370: MINUS
10371: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10372: LD_VAR 0 4
10376: PUSH
10377: LD_VAR 0 5
10381: PPUSH
10382: LD_INT 3
10384: PPUSH
10385: CALL_OW 259
10389: PUSH
10390: LD_VAR 0 5
10394: PPUSH
10395: CALL_OW 432
10399: MINUS
10400: GREATEREQUAL
10401: IFFALSE 10419
// mech := result [ i ] ;
10403: LD_ADDR_VAR 0 5
10407: PUSH
10408: LD_VAR 0 2
10412: PUSH
10413: LD_VAR 0 3
10417: ARRAY
10418: ST_TO_ADDR
// end ;
10419: GO 10328
10421: POP
10422: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10423: LD_VAR 0 1
10427: PPUSH
10428: LD_VAR 0 5
10432: PPUSH
10433: CALL_OW 135
// end ;
10437: LD_VAR 0 2
10441: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10442: LD_INT 0
10444: PPUSH
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
10451: PPUSH
10452: PPUSH
10453: PPUSH
10454: PPUSH
10455: PPUSH
10456: PPUSH
// result := [ ] ;
10457: LD_ADDR_VAR 0 7
10461: PUSH
10462: EMPTY
10463: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 266
10473: PUSH
10474: LD_INT 0
10476: PUSH
10477: LD_INT 1
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: IN
10484: NOT
10485: IFFALSE 10489
// exit ;
10487: GO 12123
// if name then
10489: LD_VAR 0 3
10493: IFFALSE 10509
// SetBName ( base_dep , name ) ;
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_VAR 0 3
10504: PPUSH
10505: CALL_OW 500
// base := GetBase ( base_dep ) ;
10509: LD_ADDR_VAR 0 15
10513: PUSH
10514: LD_VAR 0 1
10518: PPUSH
10519: CALL_OW 274
10523: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10524: LD_ADDR_VAR 0 16
10528: PUSH
10529: LD_VAR 0 1
10533: PPUSH
10534: CALL_OW 255
10538: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10539: LD_ADDR_VAR 0 17
10543: PUSH
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 248
10553: ST_TO_ADDR
// if sources then
10554: LD_VAR 0 5
10558: IFFALSE 10605
// for i = 1 to 3 do
10560: LD_ADDR_VAR 0 8
10564: PUSH
10565: DOUBLE
10566: LD_INT 1
10568: DEC
10569: ST_TO_ADDR
10570: LD_INT 3
10572: PUSH
10573: FOR_TO
10574: IFFALSE 10603
// AddResourceType ( base , i , sources [ i ] ) ;
10576: LD_VAR 0 15
10580: PPUSH
10581: LD_VAR 0 8
10585: PPUSH
10586: LD_VAR 0 5
10590: PUSH
10591: LD_VAR 0 8
10595: ARRAY
10596: PPUSH
10597: CALL_OW 276
10601: GO 10573
10603: POP
10604: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10605: LD_ADDR_VAR 0 18
10609: PUSH
10610: LD_VAR 0 15
10614: PPUSH
10615: LD_VAR 0 2
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL 9866 0 3
10627: ST_TO_ADDR
// InitHc ;
10628: CALL_OW 19
// InitUc ;
10632: CALL_OW 18
// uc_side := side ;
10636: LD_ADDR_OWVAR 20
10640: PUSH
10641: LD_VAR 0 16
10645: ST_TO_ADDR
// uc_nation := nation ;
10646: LD_ADDR_OWVAR 21
10650: PUSH
10651: LD_VAR 0 17
10655: ST_TO_ADDR
// if buildings then
10656: LD_VAR 0 18
10660: IFFALSE 11982
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10662: LD_ADDR_VAR 0 19
10666: PUSH
10667: LD_VAR 0 18
10671: PPUSH
10672: LD_INT 2
10674: PUSH
10675: LD_INT 30
10677: PUSH
10678: LD_INT 29
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 30
10687: PUSH
10688: LD_INT 30
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 72
10704: ST_TO_ADDR
// if tmp then
10705: LD_VAR 0 19
10709: IFFALSE 10757
// for i in tmp do
10711: LD_ADDR_VAR 0 8
10715: PUSH
10716: LD_VAR 0 19
10720: PUSH
10721: FOR_IN
10722: IFFALSE 10755
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10724: LD_VAR 0 8
10728: PPUSH
10729: CALL_OW 250
10733: PPUSH
10734: LD_VAR 0 8
10738: PPUSH
10739: CALL_OW 251
10743: PPUSH
10744: LD_VAR 0 16
10748: PPUSH
10749: CALL_OW 441
10753: GO 10721
10755: POP
10756: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10757: LD_VAR 0 18
10761: PPUSH
10762: LD_INT 2
10764: PUSH
10765: LD_INT 30
10767: PUSH
10768: LD_INT 32
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 30
10777: PUSH
10778: LD_INT 33
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: PPUSH
10790: CALL_OW 72
10794: IFFALSE 10882
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10796: LD_ADDR_VAR 0 8
10800: PUSH
10801: LD_VAR 0 18
10805: PPUSH
10806: LD_INT 2
10808: PUSH
10809: LD_INT 30
10811: PUSH
10812: LD_INT 32
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 33
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PPUSH
10834: CALL_OW 72
10838: PUSH
10839: FOR_IN
10840: IFFALSE 10880
// begin if not GetBWeapon ( i ) then
10842: LD_VAR 0 8
10846: PPUSH
10847: CALL_OW 269
10851: NOT
10852: IFFALSE 10878
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10854: LD_VAR 0 8
10858: PPUSH
10859: LD_VAR 0 8
10863: PPUSH
10864: LD_VAR 0 2
10868: PPUSH
10869: CALL 12128 0 2
10873: PPUSH
10874: CALL_OW 431
// end ;
10878: GO 10839
10880: POP
10881: POP
// end ; for i = 1 to personel do
10882: LD_ADDR_VAR 0 8
10886: PUSH
10887: DOUBLE
10888: LD_INT 1
10890: DEC
10891: ST_TO_ADDR
10892: LD_VAR 0 6
10896: PUSH
10897: FOR_TO
10898: IFFALSE 11962
// begin if i > 4 then
10900: LD_VAR 0 8
10904: PUSH
10905: LD_INT 4
10907: GREATER
10908: IFFALSE 10912
// break ;
10910: GO 11962
// case i of 1 :
10912: LD_VAR 0 8
10916: PUSH
10917: LD_INT 1
10919: DOUBLE
10920: EQUAL
10921: IFTRUE 10925
10923: GO 11005
10925: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10926: LD_ADDR_VAR 0 12
10930: PUSH
10931: LD_VAR 0 18
10935: PPUSH
10936: LD_INT 22
10938: PUSH
10939: LD_VAR 0 16
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 58
10950: PUSH
10951: EMPTY
10952: LIST
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: LD_INT 30
10959: PUSH
10960: LD_INT 32
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 30
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 30
10979: PUSH
10980: LD_INT 5
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: PPUSH
10998: CALL_OW 72
11002: ST_TO_ADDR
11003: GO 11227
11005: LD_INT 2
11007: DOUBLE
11008: EQUAL
11009: IFTRUE 11013
11011: GO 11075
11013: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11014: LD_ADDR_VAR 0 12
11018: PUSH
11019: LD_VAR 0 18
11023: PPUSH
11024: LD_INT 22
11026: PUSH
11027: LD_VAR 0 16
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 2
11038: PUSH
11039: LD_INT 30
11041: PUSH
11042: LD_INT 0
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 30
11051: PUSH
11052: LD_INT 1
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 72
11072: ST_TO_ADDR
11073: GO 11227
11075: LD_INT 3
11077: DOUBLE
11078: EQUAL
11079: IFTRUE 11083
11081: GO 11145
11083: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11084: LD_ADDR_VAR 0 12
11088: PUSH
11089: LD_VAR 0 18
11093: PPUSH
11094: LD_INT 22
11096: PUSH
11097: LD_VAR 0 16
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 2
11108: PUSH
11109: LD_INT 30
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 30
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PPUSH
11138: CALL_OW 72
11142: ST_TO_ADDR
11143: GO 11227
11145: LD_INT 4
11147: DOUBLE
11148: EQUAL
11149: IFTRUE 11153
11151: GO 11226
11153: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11154: LD_ADDR_VAR 0 12
11158: PUSH
11159: LD_VAR 0 18
11163: PPUSH
11164: LD_INT 22
11166: PUSH
11167: LD_VAR 0 16
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: LD_INT 30
11181: PUSH
11182: LD_INT 6
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 30
11191: PUSH
11192: LD_INT 7
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 30
11201: PUSH
11202: LD_INT 8
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PPUSH
11219: CALL_OW 72
11223: ST_TO_ADDR
11224: GO 11227
11226: POP
// if i = 1 then
11227: LD_VAR 0 8
11231: PUSH
11232: LD_INT 1
11234: EQUAL
11235: IFFALSE 11346
// begin tmp := [ ] ;
11237: LD_ADDR_VAR 0 19
11241: PUSH
11242: EMPTY
11243: ST_TO_ADDR
// for j in f do
11244: LD_ADDR_VAR 0 9
11248: PUSH
11249: LD_VAR 0 12
11253: PUSH
11254: FOR_IN
11255: IFFALSE 11328
// if GetBType ( j ) = b_bunker then
11257: LD_VAR 0 9
11261: PPUSH
11262: CALL_OW 266
11266: PUSH
11267: LD_INT 32
11269: EQUAL
11270: IFFALSE 11297
// tmp := Insert ( tmp , 1 , j ) else
11272: LD_ADDR_VAR 0 19
11276: PUSH
11277: LD_VAR 0 19
11281: PPUSH
11282: LD_INT 1
11284: PPUSH
11285: LD_VAR 0 9
11289: PPUSH
11290: CALL_OW 2
11294: ST_TO_ADDR
11295: GO 11326
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11297: LD_ADDR_VAR 0 19
11301: PUSH
11302: LD_VAR 0 19
11306: PPUSH
11307: LD_VAR 0 19
11311: PUSH
11312: LD_INT 1
11314: PLUS
11315: PPUSH
11316: LD_VAR 0 9
11320: PPUSH
11321: CALL_OW 2
11325: ST_TO_ADDR
11326: GO 11254
11328: POP
11329: POP
// if tmp then
11330: LD_VAR 0 19
11334: IFFALSE 11346
// f := tmp ;
11336: LD_ADDR_VAR 0 12
11340: PUSH
11341: LD_VAR 0 19
11345: ST_TO_ADDR
// end ; x := personel [ i ] ;
11346: LD_ADDR_VAR 0 13
11350: PUSH
11351: LD_VAR 0 6
11355: PUSH
11356: LD_VAR 0 8
11360: ARRAY
11361: ST_TO_ADDR
// if x = - 1 then
11362: LD_VAR 0 13
11366: PUSH
11367: LD_INT 1
11369: NEG
11370: EQUAL
11371: IFFALSE 11580
// begin for j in f do
11373: LD_ADDR_VAR 0 9
11377: PUSH
11378: LD_VAR 0 12
11382: PUSH
11383: FOR_IN
11384: IFFALSE 11576
// repeat InitHc ;
11386: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11390: LD_VAR 0 9
11394: PPUSH
11395: CALL_OW 266
11399: PUSH
11400: LD_INT 5
11402: EQUAL
11403: IFFALSE 11473
// begin if UnitsInside ( j ) < 3 then
11405: LD_VAR 0 9
11409: PPUSH
11410: CALL_OW 313
11414: PUSH
11415: LD_INT 3
11417: LESS
11418: IFFALSE 11454
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11420: LD_INT 0
11422: PPUSH
11423: LD_INT 5
11425: PUSH
11426: LD_INT 8
11428: PUSH
11429: LD_INT 9
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: LD_VAR 0 17
11441: ARRAY
11442: PPUSH
11443: LD_VAR 0 4
11447: PPUSH
11448: CALL_OW 380
11452: GO 11471
// PrepareHuman ( false , i , skill ) ;
11454: LD_INT 0
11456: PPUSH
11457: LD_VAR 0 8
11461: PPUSH
11462: LD_VAR 0 4
11466: PPUSH
11467: CALL_OW 380
// end else
11471: GO 11490
// PrepareHuman ( false , i , skill ) ;
11473: LD_INT 0
11475: PPUSH
11476: LD_VAR 0 8
11480: PPUSH
11481: LD_VAR 0 4
11485: PPUSH
11486: CALL_OW 380
// un := CreateHuman ;
11490: LD_ADDR_VAR 0 14
11494: PUSH
11495: CALL_OW 44
11499: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11500: LD_ADDR_VAR 0 7
11504: PUSH
11505: LD_VAR 0 7
11509: PPUSH
11510: LD_INT 1
11512: PPUSH
11513: LD_VAR 0 14
11517: PPUSH
11518: CALL_OW 2
11522: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11523: LD_VAR 0 14
11527: PPUSH
11528: LD_VAR 0 9
11532: PPUSH
11533: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11537: LD_VAR 0 9
11541: PPUSH
11542: CALL_OW 313
11546: PUSH
11547: LD_INT 6
11549: EQUAL
11550: PUSH
11551: LD_VAR 0 9
11555: PPUSH
11556: CALL_OW 266
11560: PUSH
11561: LD_INT 32
11563: PUSH
11564: LD_INT 31
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: IN
11571: OR
11572: IFFALSE 11386
11574: GO 11383
11576: POP
11577: POP
// end else
11578: GO 11960
// for j = 1 to x do
11580: LD_ADDR_VAR 0 9
11584: PUSH
11585: DOUBLE
11586: LD_INT 1
11588: DEC
11589: ST_TO_ADDR
11590: LD_VAR 0 13
11594: PUSH
11595: FOR_TO
11596: IFFALSE 11958
// begin InitHc ;
11598: CALL_OW 19
// if not f then
11602: LD_VAR 0 12
11606: NOT
11607: IFFALSE 11696
// begin PrepareHuman ( false , i , skill ) ;
11609: LD_INT 0
11611: PPUSH
11612: LD_VAR 0 8
11616: PPUSH
11617: LD_VAR 0 4
11621: PPUSH
11622: CALL_OW 380
// un := CreateHuman ;
11626: LD_ADDR_VAR 0 14
11630: PUSH
11631: CALL_OW 44
11635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11636: LD_ADDR_VAR 0 7
11640: PUSH
11641: LD_VAR 0 7
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: LD_VAR 0 14
11653: PPUSH
11654: CALL_OW 2
11658: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11659: LD_VAR 0 14
11663: PPUSH
11664: LD_VAR 0 1
11668: PPUSH
11669: CALL_OW 250
11673: PPUSH
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 251
11683: PPUSH
11684: LD_INT 10
11686: PPUSH
11687: LD_INT 0
11689: PPUSH
11690: CALL_OW 50
// continue ;
11694: GO 11595
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11696: LD_VAR 0 12
11700: PUSH
11701: LD_INT 1
11703: ARRAY
11704: PPUSH
11705: CALL_OW 313
11709: PUSH
11710: LD_VAR 0 12
11714: PUSH
11715: LD_INT 1
11717: ARRAY
11718: PPUSH
11719: CALL_OW 266
11723: PUSH
11724: LD_INT 32
11726: PUSH
11727: LD_INT 31
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: IN
11734: AND
11735: PUSH
11736: LD_VAR 0 12
11740: PUSH
11741: LD_INT 1
11743: ARRAY
11744: PPUSH
11745: CALL_OW 313
11749: PUSH
11750: LD_INT 6
11752: EQUAL
11753: OR
11754: IFFALSE 11774
// f := Delete ( f , 1 ) ;
11756: LD_ADDR_VAR 0 12
11760: PUSH
11761: LD_VAR 0 12
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 3
11773: ST_TO_ADDR
// if not f then
11774: LD_VAR 0 12
11778: NOT
11779: IFFALSE 11797
// begin x := x + 2 ;
11781: LD_ADDR_VAR 0 13
11785: PUSH
11786: LD_VAR 0 13
11790: PUSH
11791: LD_INT 2
11793: PLUS
11794: ST_TO_ADDR
// continue ;
11795: GO 11595
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11797: LD_VAR 0 12
11801: PUSH
11802: LD_INT 1
11804: ARRAY
11805: PPUSH
11806: CALL_OW 266
11810: PUSH
11811: LD_INT 5
11813: EQUAL
11814: IFFALSE 11888
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11816: LD_VAR 0 12
11820: PUSH
11821: LD_INT 1
11823: ARRAY
11824: PPUSH
11825: CALL_OW 313
11829: PUSH
11830: LD_INT 3
11832: LESS
11833: IFFALSE 11869
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11835: LD_INT 0
11837: PPUSH
11838: LD_INT 5
11840: PUSH
11841: LD_INT 8
11843: PUSH
11844: LD_INT 9
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: PUSH
11852: LD_VAR 0 17
11856: ARRAY
11857: PPUSH
11858: LD_VAR 0 4
11862: PPUSH
11863: CALL_OW 380
11867: GO 11886
// PrepareHuman ( false , i , skill ) ;
11869: LD_INT 0
11871: PPUSH
11872: LD_VAR 0 8
11876: PPUSH
11877: LD_VAR 0 4
11881: PPUSH
11882: CALL_OW 380
// end else
11886: GO 11905
// PrepareHuman ( false , i , skill ) ;
11888: LD_INT 0
11890: PPUSH
11891: LD_VAR 0 8
11895: PPUSH
11896: LD_VAR 0 4
11900: PPUSH
11901: CALL_OW 380
// un := CreateHuman ;
11905: LD_ADDR_VAR 0 14
11909: PUSH
11910: CALL_OW 44
11914: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11915: LD_ADDR_VAR 0 7
11919: PUSH
11920: LD_VAR 0 7
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: LD_VAR 0 14
11932: PPUSH
11933: CALL_OW 2
11937: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11938: LD_VAR 0 14
11942: PPUSH
11943: LD_VAR 0 12
11947: PUSH
11948: LD_INT 1
11950: ARRAY
11951: PPUSH
11952: CALL_OW 52
// end ;
11956: GO 11595
11958: POP
11959: POP
// end ;
11960: GO 10897
11962: POP
11963: POP
// result := result ^ buildings ;
11964: LD_ADDR_VAR 0 7
11968: PUSH
11969: LD_VAR 0 7
11973: PUSH
11974: LD_VAR 0 18
11978: ADD
11979: ST_TO_ADDR
// end else
11980: GO 12123
// begin for i = 1 to personel do
11982: LD_ADDR_VAR 0 8
11986: PUSH
11987: DOUBLE
11988: LD_INT 1
11990: DEC
11991: ST_TO_ADDR
11992: LD_VAR 0 6
11996: PUSH
11997: FOR_TO
11998: IFFALSE 12121
// begin if i > 4 then
12000: LD_VAR 0 8
12004: PUSH
12005: LD_INT 4
12007: GREATER
12008: IFFALSE 12012
// break ;
12010: GO 12121
// x := personel [ i ] ;
12012: LD_ADDR_VAR 0 13
12016: PUSH
12017: LD_VAR 0 6
12021: PUSH
12022: LD_VAR 0 8
12026: ARRAY
12027: ST_TO_ADDR
// if x = - 1 then
12028: LD_VAR 0 13
12032: PUSH
12033: LD_INT 1
12035: NEG
12036: EQUAL
12037: IFFALSE 12041
// continue ;
12039: GO 11997
// PrepareHuman ( false , i , skill ) ;
12041: LD_INT 0
12043: PPUSH
12044: LD_VAR 0 8
12048: PPUSH
12049: LD_VAR 0 4
12053: PPUSH
12054: CALL_OW 380
// un := CreateHuman ;
12058: LD_ADDR_VAR 0 14
12062: PUSH
12063: CALL_OW 44
12067: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12068: LD_VAR 0 14
12072: PPUSH
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 250
12082: PPUSH
12083: LD_VAR 0 1
12087: PPUSH
12088: CALL_OW 251
12092: PPUSH
12093: LD_INT 10
12095: PPUSH
12096: LD_INT 0
12098: PPUSH
12099: CALL_OW 50
// result := result ^ un ;
12103: LD_ADDR_VAR 0 7
12107: PUSH
12108: LD_VAR 0 7
12112: PUSH
12113: LD_VAR 0 14
12117: ADD
12118: ST_TO_ADDR
// end ;
12119: GO 11997
12121: POP
12122: POP
// end ; end ;
12123: LD_VAR 0 7
12127: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12128: LD_INT 0
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
12138: PPUSH
12139: PPUSH
12140: PPUSH
12141: PPUSH
12142: PPUSH
12143: PPUSH
12144: PPUSH
12145: PPUSH
// result := false ;
12146: LD_ADDR_VAR 0 3
12150: PUSH
12151: LD_INT 0
12153: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12154: LD_VAR 0 1
12158: NOT
12159: PUSH
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 266
12169: PUSH
12170: LD_INT 32
12172: PUSH
12173: LD_INT 33
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: IN
12180: NOT
12181: OR
12182: IFFALSE 12186
// exit ;
12184: GO 13295
// nat := GetNation ( tower ) ;
12186: LD_ADDR_VAR 0 12
12190: PUSH
12191: LD_VAR 0 1
12195: PPUSH
12196: CALL_OW 248
12200: ST_TO_ADDR
// side := GetSide ( tower ) ;
12201: LD_ADDR_VAR 0 16
12205: PUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 255
12215: ST_TO_ADDR
// x := GetX ( tower ) ;
12216: LD_ADDR_VAR 0 10
12220: PUSH
12221: LD_VAR 0 1
12225: PPUSH
12226: CALL_OW 250
12230: ST_TO_ADDR
// y := GetY ( tower ) ;
12231: LD_ADDR_VAR 0 11
12235: PUSH
12236: LD_VAR 0 1
12240: PPUSH
12241: CALL_OW 251
12245: ST_TO_ADDR
// if not x or not y then
12246: LD_VAR 0 10
12250: NOT
12251: PUSH
12252: LD_VAR 0 11
12256: NOT
12257: OR
12258: IFFALSE 12262
// exit ;
12260: GO 13295
// weapon := 0 ;
12262: LD_ADDR_VAR 0 18
12266: PUSH
12267: LD_INT 0
12269: ST_TO_ADDR
// fac_list := [ ] ;
12270: LD_ADDR_VAR 0 17
12274: PUSH
12275: EMPTY
12276: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12277: LD_ADDR_VAR 0 6
12281: PUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 274
12291: PPUSH
12292: LD_VAR 0 2
12296: PPUSH
12297: LD_INT 0
12299: PPUSH
12300: CALL 9866 0 3
12304: PPUSH
12305: LD_INT 30
12307: PUSH
12308: LD_INT 3
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 72
12319: ST_TO_ADDR
// if not factories then
12320: LD_VAR 0 6
12324: NOT
12325: IFFALSE 12329
// exit ;
12327: GO 13295
// for i in factories do
12329: LD_ADDR_VAR 0 8
12333: PUSH
12334: LD_VAR 0 6
12338: PUSH
12339: FOR_IN
12340: IFFALSE 12365
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12342: LD_ADDR_VAR 0 17
12346: PUSH
12347: LD_VAR 0 17
12351: PUSH
12352: LD_VAR 0 8
12356: PPUSH
12357: CALL_OW 478
12361: UNION
12362: ST_TO_ADDR
12363: GO 12339
12365: POP
12366: POP
// if not fac_list then
12367: LD_VAR 0 17
12371: NOT
12372: IFFALSE 12376
// exit ;
12374: GO 13295
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12376: LD_ADDR_VAR 0 5
12380: PUSH
12381: LD_INT 4
12383: PUSH
12384: LD_INT 5
12386: PUSH
12387: LD_INT 9
12389: PUSH
12390: LD_INT 10
12392: PUSH
12393: LD_INT 6
12395: PUSH
12396: LD_INT 7
12398: PUSH
12399: LD_INT 11
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 27
12413: PUSH
12414: LD_INT 28
12416: PUSH
12417: LD_INT 26
12419: PUSH
12420: LD_INT 30
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 43
12431: PUSH
12432: LD_INT 44
12434: PUSH
12435: LD_INT 46
12437: PUSH
12438: LD_INT 45
12440: PUSH
12441: LD_INT 47
12443: PUSH
12444: LD_INT 49
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: LD_VAR 0 12
12464: ARRAY
12465: ST_TO_ADDR
// list := list isect fac_list ;
12466: LD_ADDR_VAR 0 5
12470: PUSH
12471: LD_VAR 0 5
12475: PUSH
12476: LD_VAR 0 17
12480: ISECT
12481: ST_TO_ADDR
// if not list then
12482: LD_VAR 0 5
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 13295
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12491: LD_VAR 0 12
12495: PUSH
12496: LD_INT 3
12498: EQUAL
12499: PUSH
12500: LD_INT 49
12502: PUSH
12503: LD_VAR 0 5
12507: IN
12508: AND
12509: PUSH
12510: LD_INT 31
12512: PPUSH
12513: LD_VAR 0 16
12517: PPUSH
12518: CALL_OW 321
12522: PUSH
12523: LD_INT 2
12525: EQUAL
12526: AND
12527: IFFALSE 12587
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12529: LD_INT 22
12531: PUSH
12532: LD_VAR 0 16
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 35
12543: PUSH
12544: LD_INT 49
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 91
12553: PUSH
12554: LD_VAR 0 1
12558: PUSH
12559: LD_INT 10
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 69
12576: NOT
12577: IFFALSE 12587
// weapon := ru_time_lapser ;
12579: LD_ADDR_VAR 0 18
12583: PUSH
12584: LD_INT 49
12586: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12587: LD_VAR 0 12
12591: PUSH
12592: LD_INT 1
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: IN
12602: PUSH
12603: LD_INT 11
12605: PUSH
12606: LD_VAR 0 5
12610: IN
12611: PUSH
12612: LD_INT 30
12614: PUSH
12615: LD_VAR 0 5
12619: IN
12620: OR
12621: AND
12622: PUSH
12623: LD_INT 6
12625: PPUSH
12626: LD_VAR 0 16
12630: PPUSH
12631: CALL_OW 321
12635: PUSH
12636: LD_INT 2
12638: EQUAL
12639: AND
12640: IFFALSE 12805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12642: LD_INT 22
12644: PUSH
12645: LD_VAR 0 16
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 2
12656: PUSH
12657: LD_INT 35
12659: PUSH
12660: LD_INT 11
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 35
12669: PUSH
12670: LD_INT 30
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 91
12684: PUSH
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 18
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: PPUSH
12703: CALL_OW 69
12707: NOT
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_VAR 0 16
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: LD_INT 30
12726: PUSH
12727: LD_INT 32
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 30
12736: PUSH
12737: LD_INT 33
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 91
12751: PUSH
12752: LD_VAR 0 1
12756: PUSH
12757: LD_INT 12
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: PPUSH
12773: CALL_OW 69
12777: PUSH
12778: LD_INT 2
12780: GREATER
12781: AND
12782: IFFALSE 12805
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12784: LD_ADDR_VAR 0 18
12788: PUSH
12789: LD_INT 11
12791: PUSH
12792: LD_INT 30
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: LD_VAR 0 12
12803: ARRAY
12804: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12805: LD_VAR 0 18
12809: NOT
12810: PUSH
12811: LD_INT 40
12813: PPUSH
12814: LD_VAR 0 16
12818: PPUSH
12819: CALL_OW 321
12823: PUSH
12824: LD_INT 2
12826: EQUAL
12827: AND
12828: PUSH
12829: LD_INT 7
12831: PUSH
12832: LD_VAR 0 5
12836: IN
12837: PUSH
12838: LD_INT 28
12840: PUSH
12841: LD_VAR 0 5
12845: IN
12846: OR
12847: PUSH
12848: LD_INT 45
12850: PUSH
12851: LD_VAR 0 5
12855: IN
12856: OR
12857: AND
12858: IFFALSE 13112
// begin hex := GetHexInfo ( x , y ) ;
12860: LD_ADDR_VAR 0 4
12864: PUSH
12865: LD_VAR 0 10
12869: PPUSH
12870: LD_VAR 0 11
12874: PPUSH
12875: CALL_OW 546
12879: ST_TO_ADDR
// if hex [ 1 ] then
12880: LD_VAR 0 4
12884: PUSH
12885: LD_INT 1
12887: ARRAY
12888: IFFALSE 12892
// exit ;
12890: GO 13295
// height := hex [ 2 ] ;
12892: LD_ADDR_VAR 0 15
12896: PUSH
12897: LD_VAR 0 4
12901: PUSH
12902: LD_INT 2
12904: ARRAY
12905: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12906: LD_ADDR_VAR 0 14
12910: PUSH
12911: LD_INT 0
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: LD_INT 5
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: ST_TO_ADDR
// for i in tmp do
12929: LD_ADDR_VAR 0 8
12933: PUSH
12934: LD_VAR 0 14
12938: PUSH
12939: FOR_IN
12940: IFFALSE 13110
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12942: LD_ADDR_VAR 0 9
12946: PUSH
12947: LD_VAR 0 10
12951: PPUSH
12952: LD_VAR 0 8
12956: PPUSH
12957: LD_INT 5
12959: PPUSH
12960: CALL_OW 272
12964: PUSH
12965: LD_VAR 0 11
12969: PPUSH
12970: LD_VAR 0 8
12974: PPUSH
12975: LD_INT 5
12977: PPUSH
12978: CALL_OW 273
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12987: LD_VAR 0 9
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PPUSH
12996: LD_VAR 0 9
13000: PUSH
13001: LD_INT 2
13003: ARRAY
13004: PPUSH
13005: CALL_OW 488
13009: IFFALSE 13108
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13011: LD_ADDR_VAR 0 4
13015: PUSH
13016: LD_VAR 0 9
13020: PUSH
13021: LD_INT 1
13023: ARRAY
13024: PPUSH
13025: LD_VAR 0 9
13029: PUSH
13030: LD_INT 2
13032: ARRAY
13033: PPUSH
13034: CALL_OW 546
13038: ST_TO_ADDR
// if hex [ 1 ] then
13039: LD_VAR 0 4
13043: PUSH
13044: LD_INT 1
13046: ARRAY
13047: IFFALSE 13051
// continue ;
13049: GO 12939
// h := hex [ 2 ] ;
13051: LD_ADDR_VAR 0 13
13055: PUSH
13056: LD_VAR 0 4
13060: PUSH
13061: LD_INT 2
13063: ARRAY
13064: ST_TO_ADDR
// if h + 7 < height then
13065: LD_VAR 0 13
13069: PUSH
13070: LD_INT 7
13072: PLUS
13073: PUSH
13074: LD_VAR 0 15
13078: LESS
13079: IFFALSE 13108
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13081: LD_ADDR_VAR 0 18
13085: PUSH
13086: LD_INT 7
13088: PUSH
13089: LD_INT 28
13091: PUSH
13092: LD_INT 45
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PUSH
13100: LD_VAR 0 12
13104: ARRAY
13105: ST_TO_ADDR
// break ;
13106: GO 13110
// end ; end ; end ;
13108: GO 12939
13110: POP
13111: POP
// end ; if not weapon then
13112: LD_VAR 0 18
13116: NOT
13117: IFFALSE 13177
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13119: LD_ADDR_VAR 0 5
13123: PUSH
13124: LD_VAR 0 5
13128: PUSH
13129: LD_INT 11
13131: PUSH
13132: LD_INT 30
13134: PUSH
13135: LD_INT 49
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: DIFF
13143: ST_TO_ADDR
// if not list then
13144: LD_VAR 0 5
13148: NOT
13149: IFFALSE 13153
// exit ;
13151: GO 13295
// weapon := list [ rand ( 1 , list ) ] ;
13153: LD_ADDR_VAR 0 18
13157: PUSH
13158: LD_VAR 0 5
13162: PUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_VAR 0 5
13170: PPUSH
13171: CALL_OW 12
13175: ARRAY
13176: ST_TO_ADDR
// end ; if weapon then
13177: LD_VAR 0 18
13181: IFFALSE 13295
// begin tmp := CostOfWeapon ( weapon ) ;
13183: LD_ADDR_VAR 0 14
13187: PUSH
13188: LD_VAR 0 18
13192: PPUSH
13193: CALL_OW 451
13197: ST_TO_ADDR
// j := GetBase ( tower ) ;
13198: LD_ADDR_VAR 0 9
13202: PUSH
13203: LD_VAR 0 1
13207: PPUSH
13208: CALL_OW 274
13212: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13213: LD_VAR 0 9
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 275
13225: PUSH
13226: LD_VAR 0 14
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: GREATEREQUAL
13235: PUSH
13236: LD_VAR 0 9
13240: PPUSH
13241: LD_INT 2
13243: PPUSH
13244: CALL_OW 275
13248: PUSH
13249: LD_VAR 0 14
13253: PUSH
13254: LD_INT 2
13256: ARRAY
13257: GREATEREQUAL
13258: AND
13259: PUSH
13260: LD_VAR 0 9
13264: PPUSH
13265: LD_INT 3
13267: PPUSH
13268: CALL_OW 275
13272: PUSH
13273: LD_VAR 0 14
13277: PUSH
13278: LD_INT 3
13280: ARRAY
13281: GREATEREQUAL
13282: AND
13283: IFFALSE 13295
// result := weapon ;
13285: LD_ADDR_VAR 0 3
13289: PUSH
13290: LD_VAR 0 18
13294: ST_TO_ADDR
// end ; end ;
13295: LD_VAR 0 3
13299: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13300: LD_INT 0
13302: PPUSH
13303: PPUSH
// result := true ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// if array1 = array2 then
13312: LD_VAR 0 1
13316: PUSH
13317: LD_VAR 0 2
13321: EQUAL
13322: IFFALSE 13382
// begin for i = 1 to array1 do
13324: LD_ADDR_VAR 0 4
13328: PUSH
13329: DOUBLE
13330: LD_INT 1
13332: DEC
13333: ST_TO_ADDR
13334: LD_VAR 0 1
13338: PUSH
13339: FOR_TO
13340: IFFALSE 13378
// if array1 [ i ] <> array2 [ i ] then
13342: LD_VAR 0 1
13346: PUSH
13347: LD_VAR 0 4
13351: ARRAY
13352: PUSH
13353: LD_VAR 0 2
13357: PUSH
13358: LD_VAR 0 4
13362: ARRAY
13363: NONEQUAL
13364: IFFALSE 13376
// begin result := false ;
13366: LD_ADDR_VAR 0 3
13370: PUSH
13371: LD_INT 0
13373: ST_TO_ADDR
// break ;
13374: GO 13378
// end ;
13376: GO 13339
13378: POP
13379: POP
// end else
13380: GO 13390
// result := false ;
13382: LD_ADDR_VAR 0 3
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// end ;
13390: LD_VAR 0 3
13394: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13395: LD_INT 0
13397: PPUSH
13398: PPUSH
// if not array1 or not array2 then
13399: LD_VAR 0 1
13403: NOT
13404: PUSH
13405: LD_VAR 0 2
13409: NOT
13410: OR
13411: IFFALSE 13415
// exit ;
13413: GO 13479
// result := true ;
13415: LD_ADDR_VAR 0 3
13419: PUSH
13420: LD_INT 1
13422: ST_TO_ADDR
// for i = 1 to array1 do
13423: LD_ADDR_VAR 0 4
13427: PUSH
13428: DOUBLE
13429: LD_INT 1
13431: DEC
13432: ST_TO_ADDR
13433: LD_VAR 0 1
13437: PUSH
13438: FOR_TO
13439: IFFALSE 13477
// if array1 [ i ] <> array2 [ i ] then
13441: LD_VAR 0 1
13445: PUSH
13446: LD_VAR 0 4
13450: ARRAY
13451: PUSH
13452: LD_VAR 0 2
13456: PUSH
13457: LD_VAR 0 4
13461: ARRAY
13462: NONEQUAL
13463: IFFALSE 13475
// begin result := false ;
13465: LD_ADDR_VAR 0 3
13469: PUSH
13470: LD_INT 0
13472: ST_TO_ADDR
// break ;
13473: GO 13477
// end ;
13475: GO 13438
13477: POP
13478: POP
// end ;
13479: LD_VAR 0 3
13483: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13484: LD_INT 0
13486: PPUSH
13487: PPUSH
13488: PPUSH
// pom := GetBase ( fac ) ;
13489: LD_ADDR_VAR 0 5
13493: PUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 274
13503: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13504: LD_ADDR_VAR 0 4
13508: PUSH
13509: LD_VAR 0 2
13513: PUSH
13514: LD_INT 1
13516: ARRAY
13517: PPUSH
13518: LD_VAR 0 2
13522: PUSH
13523: LD_INT 2
13525: ARRAY
13526: PPUSH
13527: LD_VAR 0 2
13531: PUSH
13532: LD_INT 3
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 2
13540: PUSH
13541: LD_INT 4
13543: ARRAY
13544: PPUSH
13545: CALL_OW 449
13549: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13550: LD_ADDR_VAR 0 3
13554: PUSH
13555: LD_VAR 0 5
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 275
13567: PUSH
13568: LD_VAR 0 4
13572: PUSH
13573: LD_INT 1
13575: ARRAY
13576: GREATEREQUAL
13577: PUSH
13578: LD_VAR 0 5
13582: PPUSH
13583: LD_INT 2
13585: PPUSH
13586: CALL_OW 275
13590: PUSH
13591: LD_VAR 0 4
13595: PUSH
13596: LD_INT 2
13598: ARRAY
13599: GREATEREQUAL
13600: AND
13601: PUSH
13602: LD_VAR 0 5
13606: PPUSH
13607: LD_INT 3
13609: PPUSH
13610: CALL_OW 275
13614: PUSH
13615: LD_VAR 0 4
13619: PUSH
13620: LD_INT 3
13622: ARRAY
13623: GREATEREQUAL
13624: AND
13625: ST_TO_ADDR
// end ;
13626: LD_VAR 0 3
13630: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13631: LD_INT 0
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
// pom := GetBase ( building ) ;
13637: LD_ADDR_VAR 0 3
13641: PUSH
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 274
13651: ST_TO_ADDR
// if not pom then
13652: LD_VAR 0 3
13656: NOT
13657: IFFALSE 13661
// exit ;
13659: GO 13831
// btype := GetBType ( building ) ;
13661: LD_ADDR_VAR 0 5
13665: PUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 266
13675: ST_TO_ADDR
// if btype = b_armoury then
13676: LD_VAR 0 5
13680: PUSH
13681: LD_INT 4
13683: EQUAL
13684: IFFALSE 13694
// btype := b_barracks ;
13686: LD_ADDR_VAR 0 5
13690: PUSH
13691: LD_INT 5
13693: ST_TO_ADDR
// if btype = b_depot then
13694: LD_VAR 0 5
13698: PUSH
13699: LD_INT 0
13701: EQUAL
13702: IFFALSE 13712
// btype := b_warehouse ;
13704: LD_ADDR_VAR 0 5
13708: PUSH
13709: LD_INT 1
13711: ST_TO_ADDR
// if btype = b_workshop then
13712: LD_VAR 0 5
13716: PUSH
13717: LD_INT 2
13719: EQUAL
13720: IFFALSE 13730
// btype := b_factory ;
13722: LD_ADDR_VAR 0 5
13726: PUSH
13727: LD_INT 3
13729: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13730: LD_ADDR_VAR 0 4
13734: PUSH
13735: LD_VAR 0 5
13739: PPUSH
13740: LD_VAR 0 1
13744: PPUSH
13745: CALL_OW 248
13749: PPUSH
13750: CALL_OW 450
13754: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 275
13772: PUSH
13773: LD_VAR 0 4
13777: PUSH
13778: LD_INT 1
13780: ARRAY
13781: GREATEREQUAL
13782: PUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 2
13790: PPUSH
13791: CALL_OW 275
13795: PUSH
13796: LD_VAR 0 4
13800: PUSH
13801: LD_INT 2
13803: ARRAY
13804: GREATEREQUAL
13805: AND
13806: PUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: LD_INT 3
13814: PPUSH
13815: CALL_OW 275
13819: PUSH
13820: LD_VAR 0 4
13824: PUSH
13825: LD_INT 3
13827: ARRAY
13828: GREATEREQUAL
13829: AND
13830: ST_TO_ADDR
// end ;
13831: LD_VAR 0 2
13835: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13836: LD_INT 0
13838: PPUSH
13839: PPUSH
13840: PPUSH
// pom := GetBase ( building ) ;
13841: LD_ADDR_VAR 0 4
13845: PUSH
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 274
13855: ST_TO_ADDR
// if not pom then
13856: LD_VAR 0 4
13860: NOT
13861: IFFALSE 13865
// exit ;
13863: GO 13966
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13865: LD_ADDR_VAR 0 5
13869: PUSH
13870: LD_VAR 0 2
13874: PPUSH
13875: LD_VAR 0 1
13879: PPUSH
13880: CALL_OW 248
13884: PPUSH
13885: CALL_OW 450
13889: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: LD_VAR 0 4
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 275
13907: PUSH
13908: LD_VAR 0 5
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: GREATEREQUAL
13917: PUSH
13918: LD_VAR 0 4
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 275
13930: PUSH
13931: LD_VAR 0 5
13935: PUSH
13936: LD_INT 2
13938: ARRAY
13939: GREATEREQUAL
13940: AND
13941: PUSH
13942: LD_VAR 0 4
13946: PPUSH
13947: LD_INT 3
13949: PPUSH
13950: CALL_OW 275
13954: PUSH
13955: LD_VAR 0 5
13959: PUSH
13960: LD_INT 3
13962: ARRAY
13963: GREATEREQUAL
13964: AND
13965: ST_TO_ADDR
// end ;
13966: LD_VAR 0 3
13970: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13971: LD_INT 0
13973: PPUSH
13974: PPUSH
13975: PPUSH
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
13982: PPUSH
13983: PPUSH
// result := false ;
13984: LD_ADDR_VAR 0 8
13988: PUSH
13989: LD_INT 0
13991: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13992: LD_VAR 0 5
13996: NOT
13997: PUSH
13998: LD_VAR 0 1
14002: NOT
14003: OR
14004: PUSH
14005: LD_VAR 0 2
14009: NOT
14010: OR
14011: PUSH
14012: LD_VAR 0 3
14016: NOT
14017: OR
14018: IFFALSE 14022
// exit ;
14020: GO 14836
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14022: LD_ADDR_VAR 0 14
14026: PUSH
14027: LD_VAR 0 1
14031: PPUSH
14032: LD_VAR 0 2
14036: PPUSH
14037: LD_VAR 0 3
14041: PPUSH
14042: LD_VAR 0 4
14046: PPUSH
14047: LD_VAR 0 5
14051: PUSH
14052: LD_INT 1
14054: ARRAY
14055: PPUSH
14056: CALL_OW 248
14060: PPUSH
14061: LD_INT 0
14063: PPUSH
14064: CALL 16089 0 6
14068: ST_TO_ADDR
// if not hexes then
14069: LD_VAR 0 14
14073: NOT
14074: IFFALSE 14078
// exit ;
14076: GO 14836
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14078: LD_ADDR_VAR 0 17
14082: PUSH
14083: LD_VAR 0 5
14087: PPUSH
14088: LD_INT 22
14090: PUSH
14091: LD_VAR 0 13
14095: PPUSH
14096: CALL_OW 255
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 2
14107: PUSH
14108: LD_INT 30
14110: PUSH
14111: LD_INT 0
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 30
14120: PUSH
14121: LD_INT 1
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PPUSH
14137: CALL_OW 72
14141: ST_TO_ADDR
// for i = 1 to hexes do
14142: LD_ADDR_VAR 0 9
14146: PUSH
14147: DOUBLE
14148: LD_INT 1
14150: DEC
14151: ST_TO_ADDR
14152: LD_VAR 0 14
14156: PUSH
14157: FOR_TO
14158: IFFALSE 14834
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14160: LD_ADDR_VAR 0 13
14164: PUSH
14165: LD_VAR 0 14
14169: PUSH
14170: LD_VAR 0 9
14174: ARRAY
14175: PUSH
14176: LD_INT 1
14178: ARRAY
14179: PPUSH
14180: LD_VAR 0 14
14184: PUSH
14185: LD_VAR 0 9
14189: ARRAY
14190: PUSH
14191: LD_INT 2
14193: ARRAY
14194: PPUSH
14195: CALL_OW 428
14199: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14200: LD_VAR 0 14
14204: PUSH
14205: LD_VAR 0 9
14209: ARRAY
14210: PUSH
14211: LD_INT 1
14213: ARRAY
14214: PPUSH
14215: LD_VAR 0 14
14219: PUSH
14220: LD_VAR 0 9
14224: ARRAY
14225: PUSH
14226: LD_INT 2
14228: ARRAY
14229: PPUSH
14230: CALL_OW 351
14234: PUSH
14235: LD_VAR 0 14
14239: PUSH
14240: LD_VAR 0 9
14244: ARRAY
14245: PUSH
14246: LD_INT 1
14248: ARRAY
14249: PPUSH
14250: LD_VAR 0 14
14254: PUSH
14255: LD_VAR 0 9
14259: ARRAY
14260: PUSH
14261: LD_INT 2
14263: ARRAY
14264: PPUSH
14265: CALL_OW 488
14269: NOT
14270: OR
14271: PUSH
14272: LD_VAR 0 13
14276: PPUSH
14277: CALL_OW 247
14281: PUSH
14282: LD_INT 3
14284: EQUAL
14285: OR
14286: IFFALSE 14292
// exit ;
14288: POP
14289: POP
14290: GO 14836
// if not tmp then
14292: LD_VAR 0 13
14296: NOT
14297: IFFALSE 14301
// continue ;
14299: GO 14157
// result := true ;
14301: LD_ADDR_VAR 0 8
14305: PUSH
14306: LD_INT 1
14308: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14309: LD_VAR 0 6
14313: PUSH
14314: LD_VAR 0 13
14318: PPUSH
14319: CALL_OW 247
14323: PUSH
14324: LD_INT 2
14326: EQUAL
14327: AND
14328: PUSH
14329: LD_VAR 0 13
14333: PPUSH
14334: CALL_OW 263
14338: PUSH
14339: LD_INT 1
14341: EQUAL
14342: AND
14343: IFFALSE 14507
// begin if IsDrivenBy ( tmp ) then
14345: LD_VAR 0 13
14349: PPUSH
14350: CALL_OW 311
14354: IFFALSE 14358
// continue ;
14356: GO 14157
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14358: LD_VAR 0 6
14362: PPUSH
14363: LD_INT 3
14365: PUSH
14366: LD_INT 60
14368: PUSH
14369: EMPTY
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 3
14378: PUSH
14379: LD_INT 55
14381: PUSH
14382: EMPTY
14383: LIST
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 72
14397: IFFALSE 14505
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14399: LD_ADDR_VAR 0 18
14403: PUSH
14404: LD_VAR 0 6
14408: PPUSH
14409: LD_INT 3
14411: PUSH
14412: LD_INT 60
14414: PUSH
14415: EMPTY
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 3
14424: PUSH
14425: LD_INT 55
14427: PUSH
14428: EMPTY
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 72
14443: PUSH
14444: LD_INT 1
14446: ARRAY
14447: ST_TO_ADDR
// if IsInUnit ( driver ) then
14448: LD_VAR 0 18
14452: PPUSH
14453: CALL_OW 310
14457: IFFALSE 14468
// ComExit ( driver ) ;
14459: LD_VAR 0 18
14463: PPUSH
14464: CALL 39881 0 1
// AddComEnterUnit ( driver , tmp ) ;
14468: LD_VAR 0 18
14472: PPUSH
14473: LD_VAR 0 13
14477: PPUSH
14478: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14482: LD_VAR 0 18
14486: PPUSH
14487: LD_VAR 0 7
14491: PPUSH
14492: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14496: LD_VAR 0 18
14500: PPUSH
14501: CALL_OW 181
// end ; continue ;
14505: GO 14157
// end ; if not cleaners or not tmp in cleaners then
14507: LD_VAR 0 6
14511: NOT
14512: PUSH
14513: LD_VAR 0 13
14517: PUSH
14518: LD_VAR 0 6
14522: IN
14523: NOT
14524: OR
14525: IFFALSE 14832
// begin if dep then
14527: LD_VAR 0 17
14531: IFFALSE 14667
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14533: LD_ADDR_VAR 0 16
14537: PUSH
14538: LD_VAR 0 17
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: PPUSH
14547: CALL_OW 250
14551: PPUSH
14552: LD_VAR 0 17
14556: PUSH
14557: LD_INT 1
14559: ARRAY
14560: PPUSH
14561: CALL_OW 254
14565: PPUSH
14566: LD_INT 5
14568: PPUSH
14569: CALL_OW 272
14573: PUSH
14574: LD_VAR 0 17
14578: PUSH
14579: LD_INT 1
14581: ARRAY
14582: PPUSH
14583: CALL_OW 251
14587: PPUSH
14588: LD_VAR 0 17
14592: PUSH
14593: LD_INT 1
14595: ARRAY
14596: PPUSH
14597: CALL_OW 254
14601: PPUSH
14602: LD_INT 5
14604: PPUSH
14605: CALL_OW 273
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14614: LD_VAR 0 16
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PPUSH
14623: LD_VAR 0 16
14627: PUSH
14628: LD_INT 2
14630: ARRAY
14631: PPUSH
14632: CALL_OW 488
14636: IFFALSE 14667
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14638: LD_VAR 0 13
14642: PPUSH
14643: LD_VAR 0 16
14647: PUSH
14648: LD_INT 1
14650: ARRAY
14651: PPUSH
14652: LD_VAR 0 16
14656: PUSH
14657: LD_INT 2
14659: ARRAY
14660: PPUSH
14661: CALL_OW 111
// continue ;
14665: GO 14157
// end ; end ; r := GetDir ( tmp ) ;
14667: LD_ADDR_VAR 0 15
14671: PUSH
14672: LD_VAR 0 13
14676: PPUSH
14677: CALL_OW 254
14681: ST_TO_ADDR
// if r = 5 then
14682: LD_VAR 0 15
14686: PUSH
14687: LD_INT 5
14689: EQUAL
14690: IFFALSE 14700
// r := 0 ;
14692: LD_ADDR_VAR 0 15
14696: PUSH
14697: LD_INT 0
14699: ST_TO_ADDR
// for j = r to 5 do
14700: LD_ADDR_VAR 0 10
14704: PUSH
14705: DOUBLE
14706: LD_VAR 0 15
14710: DEC
14711: ST_TO_ADDR
14712: LD_INT 5
14714: PUSH
14715: FOR_TO
14716: IFFALSE 14830
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14718: LD_ADDR_VAR 0 11
14722: PUSH
14723: LD_VAR 0 13
14727: PPUSH
14728: CALL_OW 250
14732: PPUSH
14733: LD_VAR 0 10
14737: PPUSH
14738: LD_INT 2
14740: PPUSH
14741: CALL_OW 272
14745: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14746: LD_ADDR_VAR 0 12
14750: PUSH
14751: LD_VAR 0 13
14755: PPUSH
14756: CALL_OW 251
14760: PPUSH
14761: LD_VAR 0 10
14765: PPUSH
14766: LD_INT 2
14768: PPUSH
14769: CALL_OW 273
14773: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14774: LD_VAR 0 11
14778: PPUSH
14779: LD_VAR 0 12
14783: PPUSH
14784: CALL_OW 488
14788: PUSH
14789: LD_VAR 0 11
14793: PPUSH
14794: LD_VAR 0 12
14798: PPUSH
14799: CALL_OW 428
14803: NOT
14804: AND
14805: IFFALSE 14828
// begin ComMoveXY ( tmp , _x , _y ) ;
14807: LD_VAR 0 13
14811: PPUSH
14812: LD_VAR 0 11
14816: PPUSH
14817: LD_VAR 0 12
14821: PPUSH
14822: CALL_OW 111
// break ;
14826: GO 14830
// end ; end ;
14828: GO 14715
14830: POP
14831: POP
// end ; end ;
14832: GO 14157
14834: POP
14835: POP
// end ;
14836: LD_VAR 0 8
14840: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14841: LD_INT 0
14843: PPUSH
// result := true ;
14844: LD_ADDR_VAR 0 3
14848: PUSH
14849: LD_INT 1
14851: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14852: LD_VAR 0 2
14856: PUSH
14857: LD_INT 24
14859: DOUBLE
14860: EQUAL
14861: IFTRUE 14871
14863: LD_INT 33
14865: DOUBLE
14866: EQUAL
14867: IFTRUE 14871
14869: GO 14896
14871: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14872: LD_ADDR_VAR 0 3
14876: PUSH
14877: LD_INT 32
14879: PPUSH
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 321
14889: PUSH
14890: LD_INT 2
14892: EQUAL
14893: ST_TO_ADDR
14894: GO 15212
14896: LD_INT 20
14898: DOUBLE
14899: EQUAL
14900: IFTRUE 14904
14902: GO 14929
14904: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14905: LD_ADDR_VAR 0 3
14909: PUSH
14910: LD_INT 6
14912: PPUSH
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 321
14922: PUSH
14923: LD_INT 2
14925: EQUAL
14926: ST_TO_ADDR
14927: GO 15212
14929: LD_INT 22
14931: DOUBLE
14932: EQUAL
14933: IFTRUE 14943
14935: LD_INT 36
14937: DOUBLE
14938: EQUAL
14939: IFTRUE 14943
14941: GO 14968
14943: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14944: LD_ADDR_VAR 0 3
14948: PUSH
14949: LD_INT 15
14951: PPUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 321
14961: PUSH
14962: LD_INT 2
14964: EQUAL
14965: ST_TO_ADDR
14966: GO 15212
14968: LD_INT 30
14970: DOUBLE
14971: EQUAL
14972: IFTRUE 14976
14974: GO 15001
14976: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14977: LD_ADDR_VAR 0 3
14981: PUSH
14982: LD_INT 20
14984: PPUSH
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 321
14994: PUSH
14995: LD_INT 2
14997: EQUAL
14998: ST_TO_ADDR
14999: GO 15212
15001: LD_INT 28
15003: DOUBLE
15004: EQUAL
15005: IFTRUE 15015
15007: LD_INT 21
15009: DOUBLE
15010: EQUAL
15011: IFTRUE 15015
15013: GO 15040
15015: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_INT 21
15023: PPUSH
15024: LD_VAR 0 1
15028: PPUSH
15029: CALL_OW 321
15033: PUSH
15034: LD_INT 2
15036: EQUAL
15037: ST_TO_ADDR
15038: GO 15212
15040: LD_INT 16
15042: DOUBLE
15043: EQUAL
15044: IFTRUE 15048
15046: GO 15073
15048: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15049: LD_ADDR_VAR 0 3
15053: PUSH
15054: LD_INT 84
15056: PPUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 321
15066: PUSH
15067: LD_INT 2
15069: EQUAL
15070: ST_TO_ADDR
15071: GO 15212
15073: LD_INT 19
15075: DOUBLE
15076: EQUAL
15077: IFTRUE 15087
15079: LD_INT 23
15081: DOUBLE
15082: EQUAL
15083: IFTRUE 15087
15085: GO 15112
15087: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15088: LD_ADDR_VAR 0 3
15092: PUSH
15093: LD_INT 83
15095: PPUSH
15096: LD_VAR 0 1
15100: PPUSH
15101: CALL_OW 321
15105: PUSH
15106: LD_INT 2
15108: EQUAL
15109: ST_TO_ADDR
15110: GO 15212
15112: LD_INT 17
15114: DOUBLE
15115: EQUAL
15116: IFTRUE 15120
15118: GO 15145
15120: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15121: LD_ADDR_VAR 0 3
15125: PUSH
15126: LD_INT 39
15128: PPUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 321
15138: PUSH
15139: LD_INT 2
15141: EQUAL
15142: ST_TO_ADDR
15143: GO 15212
15145: LD_INT 18
15147: DOUBLE
15148: EQUAL
15149: IFTRUE 15153
15151: GO 15178
15153: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15154: LD_ADDR_VAR 0 3
15158: PUSH
15159: LD_INT 40
15161: PPUSH
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 321
15171: PUSH
15172: LD_INT 2
15174: EQUAL
15175: ST_TO_ADDR
15176: GO 15212
15178: LD_INT 27
15180: DOUBLE
15181: EQUAL
15182: IFTRUE 15186
15184: GO 15211
15186: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15187: LD_ADDR_VAR 0 3
15191: PUSH
15192: LD_INT 35
15194: PPUSH
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 321
15204: PUSH
15205: LD_INT 2
15207: EQUAL
15208: ST_TO_ADDR
15209: GO 15212
15211: POP
// end ;
15212: LD_VAR 0 3
15216: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15217: LD_INT 0
15219: PPUSH
15220: PPUSH
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
// result := false ;
15230: LD_ADDR_VAR 0 6
15234: PUSH
15235: LD_INT 0
15237: ST_TO_ADDR
// if btype = b_depot then
15238: LD_VAR 0 2
15242: PUSH
15243: LD_INT 0
15245: EQUAL
15246: IFFALSE 15258
// begin result := true ;
15248: LD_ADDR_VAR 0 6
15252: PUSH
15253: LD_INT 1
15255: ST_TO_ADDR
// exit ;
15256: GO 16084
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15258: LD_VAR 0 1
15262: NOT
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 266
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: IN
15284: NOT
15285: OR
15286: PUSH
15287: LD_VAR 0 2
15291: NOT
15292: OR
15293: PUSH
15294: LD_VAR 0 5
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: LD_INT 5
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: IN
15325: NOT
15326: OR
15327: PUSH
15328: LD_VAR 0 3
15332: PPUSH
15333: LD_VAR 0 4
15337: PPUSH
15338: CALL_OW 488
15342: NOT
15343: OR
15344: IFFALSE 15348
// exit ;
15346: GO 16084
// side := GetSide ( depot ) ;
15348: LD_ADDR_VAR 0 9
15352: PUSH
15353: LD_VAR 0 1
15357: PPUSH
15358: CALL_OW 255
15362: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15363: LD_VAR 0 9
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL 14841 0 2
15377: NOT
15378: IFFALSE 15382
// exit ;
15380: GO 16084
// pom := GetBase ( depot ) ;
15382: LD_ADDR_VAR 0 10
15386: PUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 274
15396: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15397: LD_ADDR_VAR 0 11
15401: PUSH
15402: LD_VAR 0 2
15406: PPUSH
15407: LD_VAR 0 1
15411: PPUSH
15412: CALL_OW 248
15416: PPUSH
15417: CALL_OW 450
15421: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15422: LD_VAR 0 10
15426: PPUSH
15427: LD_INT 1
15429: PPUSH
15430: CALL_OW 275
15434: PUSH
15435: LD_VAR 0 11
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: GREATEREQUAL
15444: PUSH
15445: LD_VAR 0 10
15449: PPUSH
15450: LD_INT 2
15452: PPUSH
15453: CALL_OW 275
15457: PUSH
15458: LD_VAR 0 11
15462: PUSH
15463: LD_INT 2
15465: ARRAY
15466: GREATEREQUAL
15467: AND
15468: PUSH
15469: LD_VAR 0 10
15473: PPUSH
15474: LD_INT 3
15476: PPUSH
15477: CALL_OW 275
15481: PUSH
15482: LD_VAR 0 11
15486: PUSH
15487: LD_INT 3
15489: ARRAY
15490: GREATEREQUAL
15491: AND
15492: NOT
15493: IFFALSE 15497
// exit ;
15495: GO 16084
// if GetBType ( depot ) = b_depot then
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 266
15506: PUSH
15507: LD_INT 0
15509: EQUAL
15510: IFFALSE 15522
// dist := 28 else
15512: LD_ADDR_VAR 0 14
15516: PUSH
15517: LD_INT 28
15519: ST_TO_ADDR
15520: GO 15530
// dist := 36 ;
15522: LD_ADDR_VAR 0 14
15526: PUSH
15527: LD_INT 36
15529: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15530: LD_VAR 0 1
15534: PPUSH
15535: LD_VAR 0 3
15539: PPUSH
15540: LD_VAR 0 4
15544: PPUSH
15545: CALL_OW 297
15549: PUSH
15550: LD_VAR 0 14
15554: GREATER
15555: IFFALSE 15559
// exit ;
15557: GO 16084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15559: LD_ADDR_VAR 0 12
15563: PUSH
15564: LD_VAR 0 2
15568: PPUSH
15569: LD_VAR 0 3
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: LD_VAR 0 5
15583: PPUSH
15584: LD_VAR 0 1
15588: PPUSH
15589: CALL_OW 248
15593: PPUSH
15594: LD_INT 0
15596: PPUSH
15597: CALL 16089 0 6
15601: ST_TO_ADDR
// if not hexes then
15602: LD_VAR 0 12
15606: NOT
15607: IFFALSE 15611
// exit ;
15609: GO 16084
// hex := GetHexInfo ( x , y ) ;
15611: LD_ADDR_VAR 0 15
15615: PUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_VAR 0 4
15625: PPUSH
15626: CALL_OW 546
15630: ST_TO_ADDR
// if hex [ 1 ] then
15631: LD_VAR 0 15
15635: PUSH
15636: LD_INT 1
15638: ARRAY
15639: IFFALSE 15643
// exit ;
15641: GO 16084
// height := hex [ 2 ] ;
15643: LD_ADDR_VAR 0 13
15647: PUSH
15648: LD_VAR 0 15
15652: PUSH
15653: LD_INT 2
15655: ARRAY
15656: ST_TO_ADDR
// for i = 1 to hexes do
15657: LD_ADDR_VAR 0 7
15661: PUSH
15662: DOUBLE
15663: LD_INT 1
15665: DEC
15666: ST_TO_ADDR
15667: LD_VAR 0 12
15671: PUSH
15672: FOR_TO
15673: IFFALSE 16003
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15675: LD_VAR 0 12
15679: PUSH
15680: LD_VAR 0 7
15684: ARRAY
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_VAR 0 12
15694: PUSH
15695: LD_VAR 0 7
15699: ARRAY
15700: PUSH
15701: LD_INT 2
15703: ARRAY
15704: PPUSH
15705: CALL_OW 488
15709: NOT
15710: PUSH
15711: LD_VAR 0 12
15715: PUSH
15716: LD_VAR 0 7
15720: ARRAY
15721: PUSH
15722: LD_INT 1
15724: ARRAY
15725: PPUSH
15726: LD_VAR 0 12
15730: PUSH
15731: LD_VAR 0 7
15735: ARRAY
15736: PUSH
15737: LD_INT 2
15739: ARRAY
15740: PPUSH
15741: CALL_OW 428
15745: PUSH
15746: LD_INT 0
15748: GREATER
15749: OR
15750: PUSH
15751: LD_VAR 0 12
15755: PUSH
15756: LD_VAR 0 7
15760: ARRAY
15761: PUSH
15762: LD_INT 1
15764: ARRAY
15765: PPUSH
15766: LD_VAR 0 12
15770: PUSH
15771: LD_VAR 0 7
15775: ARRAY
15776: PUSH
15777: LD_INT 2
15779: ARRAY
15780: PPUSH
15781: CALL_OW 351
15785: OR
15786: IFFALSE 15792
// exit ;
15788: POP
15789: POP
15790: GO 16084
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15792: LD_ADDR_VAR 0 8
15796: PUSH
15797: LD_VAR 0 12
15801: PUSH
15802: LD_VAR 0 7
15806: ARRAY
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_VAR 0 12
15816: PUSH
15817: LD_VAR 0 7
15821: ARRAY
15822: PUSH
15823: LD_INT 2
15825: ARRAY
15826: PPUSH
15827: CALL_OW 546
15831: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15832: LD_VAR 0 8
15836: PUSH
15837: LD_INT 1
15839: ARRAY
15840: PUSH
15841: LD_VAR 0 8
15845: PUSH
15846: LD_INT 2
15848: ARRAY
15849: PUSH
15850: LD_VAR 0 13
15854: PUSH
15855: LD_INT 2
15857: PLUS
15858: GREATER
15859: OR
15860: PUSH
15861: LD_VAR 0 8
15865: PUSH
15866: LD_INT 2
15868: ARRAY
15869: PUSH
15870: LD_VAR 0 13
15874: PUSH
15875: LD_INT 2
15877: MINUS
15878: LESS
15879: OR
15880: PUSH
15881: LD_VAR 0 8
15885: PUSH
15886: LD_INT 3
15888: ARRAY
15889: PUSH
15890: LD_INT 0
15892: PUSH
15893: LD_INT 8
15895: PUSH
15896: LD_INT 9
15898: PUSH
15899: LD_INT 10
15901: PUSH
15902: LD_INT 11
15904: PUSH
15905: LD_INT 12
15907: PUSH
15908: LD_INT 13
15910: PUSH
15911: LD_INT 16
15913: PUSH
15914: LD_INT 17
15916: PUSH
15917: LD_INT 18
15919: PUSH
15920: LD_INT 19
15922: PUSH
15923: LD_INT 20
15925: PUSH
15926: LD_INT 21
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: IN
15944: NOT
15945: OR
15946: PUSH
15947: LD_VAR 0 8
15951: PUSH
15952: LD_INT 5
15954: ARRAY
15955: NOT
15956: OR
15957: PUSH
15958: LD_VAR 0 8
15962: PUSH
15963: LD_INT 6
15965: ARRAY
15966: PUSH
15967: LD_INT 1
15969: PUSH
15970: LD_INT 2
15972: PUSH
15973: LD_INT 7
15975: PUSH
15976: LD_INT 9
15978: PUSH
15979: LD_INT 10
15981: PUSH
15982: LD_INT 11
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: IN
15993: NOT
15994: OR
15995: IFFALSE 16001
// exit ;
15997: POP
15998: POP
15999: GO 16084
// end ;
16001: GO 15672
16003: POP
16004: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16005: LD_VAR 0 9
16009: PPUSH
16010: LD_VAR 0 3
16014: PPUSH
16015: LD_VAR 0 4
16019: PPUSH
16020: LD_INT 20
16022: PPUSH
16023: CALL 8007 0 4
16027: PUSH
16028: LD_INT 4
16030: ARRAY
16031: IFFALSE 16035
// exit ;
16033: GO 16084
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16035: LD_VAR 0 2
16039: PUSH
16040: LD_INT 29
16042: PUSH
16043: LD_INT 30
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: IN
16050: PUSH
16051: LD_VAR 0 3
16055: PPUSH
16056: LD_VAR 0 4
16060: PPUSH
16061: LD_VAR 0 9
16065: PPUSH
16066: CALL_OW 440
16070: NOT
16071: AND
16072: IFFALSE 16076
// exit ;
16074: GO 16084
// result := true ;
16076: LD_ADDR_VAR 0 6
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// end ;
16084: LD_VAR 0 6
16088: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
16104: PPUSH
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
// result = [ ] ;
16149: LD_ADDR_VAR 0 7
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// temp_list = [ ] ;
16156: LD_ADDR_VAR 0 9
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16163: LD_VAR 0 4
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: LD_INT 2
16176: PUSH
16177: LD_INT 3
16179: PUSH
16180: LD_INT 4
16182: PUSH
16183: LD_INT 5
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: IN
16194: NOT
16195: PUSH
16196: LD_VAR 0 1
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: IN
16211: PUSH
16212: LD_VAR 0 5
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: LD_INT 2
16222: PUSH
16223: LD_INT 3
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: LIST
16230: IN
16231: NOT
16232: AND
16233: OR
16234: IFFALSE 16238
// exit ;
16236: GO 34629
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16238: LD_VAR 0 1
16242: PUSH
16243: LD_INT 6
16245: PUSH
16246: LD_INT 7
16248: PUSH
16249: LD_INT 8
16251: PUSH
16252: LD_INT 13
16254: PUSH
16255: LD_INT 12
16257: PUSH
16258: LD_INT 15
16260: PUSH
16261: LD_INT 11
16263: PUSH
16264: LD_INT 14
16266: PUSH
16267: LD_INT 10
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: IN
16281: IFFALSE 16291
// btype = b_lab ;
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_INT 6
16290: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16291: LD_VAR 0 6
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: LD_INT 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: IN
16310: NOT
16311: PUSH
16312: LD_VAR 0 1
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: LD_INT 2
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: LD_INT 6
16331: PUSH
16332: LD_INT 36
16334: PUSH
16335: LD_INT 4
16337: PUSH
16338: LD_INT 5
16340: PUSH
16341: LD_INT 31
16343: PUSH
16344: LD_INT 32
16346: PUSH
16347: LD_INT 33
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: IN
16363: NOT
16364: PUSH
16365: LD_VAR 0 6
16369: PUSH
16370: LD_INT 1
16372: EQUAL
16373: AND
16374: OR
16375: PUSH
16376: LD_VAR 0 1
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: LD_INT 3
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: IN
16391: NOT
16392: PUSH
16393: LD_VAR 0 6
16397: PUSH
16398: LD_INT 2
16400: EQUAL
16401: AND
16402: OR
16403: IFFALSE 16413
// mode = 0 ;
16405: LD_ADDR_VAR 0 6
16409: PUSH
16410: LD_INT 0
16412: ST_TO_ADDR
// case mode of 0 :
16413: LD_VAR 0 6
16417: PUSH
16418: LD_INT 0
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 27879
16426: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16427: LD_ADDR_VAR 0 11
16431: PUSH
16432: LD_INT 0
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: LD_INT 1
16447: NEG
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: PUSH
16456: LD_INT 0
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 1
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 1
16485: NEG
16486: PUSH
16487: LD_INT 0
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 1
16496: NEG
16497: PUSH
16498: LD_INT 1
16500: NEG
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 1
16508: NEG
16509: PUSH
16510: LD_INT 2
16512: NEG
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 0
16520: PUSH
16521: LD_INT 2
16523: NEG
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 1
16531: PUSH
16532: LD_INT 1
16534: NEG
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 0
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 1
16562: NEG
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: LD_INT 3
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: LD_INT 3
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 1
16593: NEG
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16620: LD_ADDR_VAR 0 12
16624: PUSH
16625: LD_INT 0
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: LD_INT 1
16640: NEG
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 0
16668: PUSH
16669: LD_INT 1
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 1
16678: NEG
16679: PUSH
16680: LD_INT 0
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 1
16689: NEG
16690: PUSH
16691: LD_INT 1
16693: NEG
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: LD_INT 1
16704: NEG
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 2
16712: PUSH
16713: LD_INT 0
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: NEG
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 2
16743: NEG
16744: PUSH
16745: LD_INT 0
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 2
16754: NEG
16755: PUSH
16756: LD_INT 1
16758: NEG
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 2
16766: NEG
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 3
16777: NEG
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 3
16788: NEG
16789: PUSH
16790: LD_INT 1
16792: NEG
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16816: LD_ADDR_VAR 0 13
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 0
16833: PUSH
16834: LD_INT 1
16836: NEG
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: LD_INT 0
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 0
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 1
16874: NEG
16875: PUSH
16876: LD_INT 0
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 1
16885: NEG
16886: PUSH
16887: LD_INT 1
16889: NEG
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 1
16897: NEG
16898: PUSH
16899: LD_INT 2
16901: NEG
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: LD_INT 2
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 2
16939: NEG
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 2
16951: NEG
16952: PUSH
16953: LD_INT 2
16955: NEG
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 2
16963: NEG
16964: PUSH
16965: LD_INT 3
16967: NEG
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 3
16975: NEG
16976: PUSH
16977: LD_INT 2
16979: NEG
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 3
16987: NEG
16988: PUSH
16989: LD_INT 3
16991: NEG
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17015: LD_ADDR_VAR 0 14
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: LD_INT 1
17035: NEG
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: LD_INT 1
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 0
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 1
17073: NEG
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 1
17084: NEG
17085: PUSH
17086: LD_INT 1
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 1
17096: NEG
17097: PUSH
17098: LD_INT 2
17100: NEG
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: LD_INT 1
17122: NEG
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 0
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 1
17161: NEG
17162: PUSH
17163: LD_INT 3
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 0
17173: PUSH
17174: LD_INT 3
17176: NEG
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: LD_INT 2
17187: NEG
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17211: LD_ADDR_VAR 0 15
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 0
17228: PUSH
17229: LD_INT 1
17231: NEG
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 1
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: NEG
17270: PUSH
17271: LD_INT 0
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: LD_INT 1
17284: NEG
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: LD_INT 1
17295: NEG
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: NEG
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 2
17334: NEG
17335: PUSH
17336: LD_INT 0
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: NEG
17346: PUSH
17347: LD_INT 1
17349: NEG
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: LD_INT 1
17360: NEG
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 0
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 3
17378: PUSH
17379: LD_INT 1
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17404: LD_ADDR_VAR 0 16
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 0
17421: PUSH
17422: LD_INT 1
17424: NEG
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 1
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: NEG
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 1
17473: NEG
17474: PUSH
17475: LD_INT 1
17477: NEG
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: LD_INT 2
17489: NEG
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 2
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: NEG
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: NEG
17540: PUSH
17541: LD_INT 2
17543: NEG
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 3
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 3
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: LD_INT 3
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17597: LD_ADDR_VAR 0 17
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: LD_INT 1
17617: NEG
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 1
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: NEG
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 1
17666: NEG
17667: PUSH
17668: LD_INT 1
17670: NEG
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 1
17678: NEG
17679: PUSH
17680: LD_INT 2
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 0
17690: PUSH
17691: LD_INT 2
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: LD_INT 1
17704: NEG
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 2
17732: PUSH
17733: LD_INT 2
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: LD_INT 2
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: LD_INT 2
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 1
17762: NEG
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 2
17773: NEG
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 2
17784: NEG
17785: PUSH
17786: LD_INT 1
17788: NEG
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 2
17796: NEG
17797: PUSH
17798: LD_INT 2
17800: NEG
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17827: LD_ADDR_VAR 0 18
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: LD_INT 1
17847: NEG
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: LD_INT 1
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 1
17908: NEG
17909: PUSH
17910: LD_INT 2
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: LD_INT 2
17923: NEG
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 0
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 1
17992: NEG
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: LD_INT 0
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 2
18014: NEG
18015: PUSH
18016: LD_INT 1
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: NEG
18027: PUSH
18028: LD_INT 2
18030: NEG
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18057: LD_ADDR_VAR 0 19
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: LD_INT 1
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: NEG
18139: PUSH
18140: LD_INT 2
18142: NEG
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 0
18150: PUSH
18151: LD_INT 2
18153: NEG
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: LD_INT 2
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 1
18222: NEG
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: NEG
18245: PUSH
18246: LD_INT 1
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: LD_INT 2
18260: NEG
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18287: LD_ADDR_VAR 0 20
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: LD_INT 2
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: LD_INT 2
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 2
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: NEG
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: LD_INT 1
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18517: LD_ADDR_VAR 0 21
18521: PUSH
18522: LD_INT 0
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: LD_INT 1
18537: NEG
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 0
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 1
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: LD_INT 2
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: LD_INT 2
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: LD_INT 1
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 2
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 2
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 2
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: NEG
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18747: LD_ADDR_VAR 0 22
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: LD_INT 2
18832: NEG
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 2
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: LD_INT 1
18854: NEG
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 2
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 2
18946: NEG
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18977: LD_ADDR_VAR 0 23
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: LD_INT 1
19050: NEG
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: LD_INT 2
19062: NEG
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 0
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: LD_INT 1
19084: NEG
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 2
19112: PUSH
19113: LD_INT 2
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 2
19153: NEG
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: NEG
19165: PUSH
19166: LD_INT 1
19168: NEG
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 2
19176: NEG
19177: PUSH
19178: LD_INT 2
19180: NEG
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: LD_INT 3
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: LD_INT 3
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19257: LD_ADDR_VAR 0 24
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: LD_INT 1
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: NEG
19316: PUSH
19317: LD_INT 0
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: NEG
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 1
19338: NEG
19339: PUSH
19340: LD_INT 2
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 2
19353: NEG
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: LD_INT 1
19364: NEG
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 2
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: LD_INT 2
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: LD_INT 2
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 2
19433: NEG
19434: PUSH
19435: LD_INT 0
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 2
19444: NEG
19445: PUSH
19446: LD_INT 1
19448: NEG
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 2
19456: NEG
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: LD_INT 2
19471: NEG
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 3
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 3
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19533: LD_ADDR_VAR 0 25
19537: PUSH
19538: LD_INT 0
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: LD_INT 1
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: LD_INT 1
19640: NEG
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: LD_INT 1
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: LD_INT 2
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: LD_INT 1
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 2
19709: NEG
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: NEG
19721: PUSH
19722: LD_INT 1
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: NEG
19733: PUSH
19734: LD_INT 2
19736: NEG
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 3
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 3
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 3
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19807: LD_ADDR_VAR 0 26
19811: PUSH
19812: LD_INT 0
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 1
19865: NEG
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: LD_INT 2
19892: NEG
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: LD_INT 2
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: NEG
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 2
19994: NEG
19995: PUSH
19996: LD_INT 1
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 2
20006: NEG
20007: PUSH
20008: LD_INT 2
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: LD_INT 3
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: LD_INT 3
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 2
20049: NEG
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20083: LD_ADDR_VAR 0 27
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 1
20164: NEG
20165: PUSH
20166: LD_INT 2
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 2
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 2
20218: PUSH
20219: LD_INT 2
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 1
20248: NEG
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: NEG
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 2
20282: NEG
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 1
20294: NEG
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 2
20305: NEG
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 3
20316: NEG
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 3
20328: NEG
20329: PUSH
20330: LD_INT 2
20332: NEG
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20363: LD_ADDR_VAR 0 28
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: LD_INT 1
20383: NEG
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: NEG
20433: PUSH
20434: LD_INT 1
20436: NEG
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: LD_INT 2
20448: NEG
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: LD_INT 2
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: PUSH
20489: LD_INT 1
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: NEG
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 2
20550: NEG
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: NEG
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 2
20574: NEG
20575: PUSH
20576: LD_INT 3
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: LD_INT 3
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 3
20598: NEG
20599: PUSH
20600: LD_INT 1
20602: NEG
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 3
20610: NEG
20611: PUSH
20612: LD_INT 2
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20645: LD_ADDR_VAR 0 29
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 1
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 0
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 1
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 2
20811: NEG
20812: PUSH
20813: LD_INT 1
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 2
20823: NEG
20824: PUSH
20825: LD_INT 2
20827: NEG
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 2
20835: NEG
20836: PUSH
20837: LD_INT 3
20839: NEG
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: LD_INT 1
20850: NEG
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 3
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: LD_INT 3
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 3
20889: NEG
20890: PUSH
20891: LD_INT 2
20893: NEG
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20924: LD_ADDR_VAR 0 30
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: NEG
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: LD_INT 2
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 1
21031: NEG
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 2
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: PUSH
21070: LD_INT 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 1
21079: NEG
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 2
21090: NEG
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 2
21101: NEG
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: LD_INT 3
21117: NEG
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 2
21128: NEG
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 3
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: LD_INT 3
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 2
21156: NEG
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 3
21167: NEG
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21202: LD_ADDR_VAR 0 31
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: NEG
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: LD_INT 2
21287: NEG
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: LD_INT 1
21298: NEG
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: LD_INT 0
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: NEG
21368: PUSH
21369: LD_INT 1
21371: NEG
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 2
21379: NEG
21380: PUSH
21381: LD_INT 2
21383: NEG
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 2
21391: NEG
21392: PUSH
21393: LD_INT 3
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 3
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 3
21445: NEG
21446: PUSH
21447: LD_INT 2
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21480: LD_ADDR_VAR 0 32
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 1
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: LD_INT 1
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 1
21538: NEG
21539: PUSH
21540: LD_INT 0
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: LD_INT 1
21553: NEG
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 1
21561: NEG
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: LD_INT 1
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 2
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: LD_INT 2
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: LD_INT 1
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 2
21646: NEG
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 2
21657: NEG
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 1
21669: NEG
21670: PUSH
21671: LD_INT 3
21673: NEG
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: LD_INT 2
21684: NEG
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 3
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: LD_INT 3
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 2
21712: NEG
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 3
21723: NEG
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21758: LD_ADDR_VAR 0 33
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 1
21786: PUSH
21787: LD_INT 0
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 1
21816: NEG
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 1
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: NEG
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 2
21924: NEG
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 2
21936: NEG
21937: PUSH
21938: LD_INT 2
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 2
21948: NEG
21949: PUSH
21950: LD_INT 3
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 1
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 3
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: LD_INT 3
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 3
22002: NEG
22003: PUSH
22004: LD_INT 2
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22037: LD_ADDR_VAR 0 34
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 2
22193: NEG
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: LD_INT 2
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: LD_INT 3
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 2
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 3
22251: PUSH
22252: LD_INT 2
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: LD_INT 3
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: NEG
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 3
22282: NEG
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22317: LD_ADDR_VAR 0 35
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: NEG
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22429: LD_ADDR_VAR 0 36
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: LD_INT 1
22449: NEG
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: LD_INT 1
22502: NEG
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22541: LD_ADDR_VAR 0 37
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: NEG
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22653: LD_ADDR_VAR 0 38
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 1
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: LD_INT 1
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: LD_INT 1
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 2
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 2
22744: NEG
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22765: LD_ADDR_VAR 0 39
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: NEG
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 2
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22877: LD_ADDR_VAR 0 40
22881: PUSH
22882: LD_INT 0
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: NEG
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22989: LD_ADDR_VAR 0 41
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: LD_INT 0
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 0
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 1
23070: NEG
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 2
23103: PUSH
23104: LD_INT 1
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 2
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 2
23155: NEG
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 2
23167: NEG
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: NEG
23180: PUSH
23181: LD_INT 3
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 2
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 3
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: LD_INT 3
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: LD_INT 3
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 3
23263: NEG
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 3
23274: NEG
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 3
23286: NEG
23287: PUSH
23288: LD_INT 2
23290: NEG
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 3
23298: NEG
23299: PUSH
23300: LD_INT 3
23302: NEG
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23339: LD_ADDR_VAR 0 42
23343: PUSH
23344: LD_INT 0
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: NEG
23421: PUSH
23422: LD_INT 2
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: LD_INT 3
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: LD_INT 3
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: LD_INT 3
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: LD_INT 2
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 3
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: LD_INT 3
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 3
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: LD_INT 3
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 3
23636: NEG
23637: PUSH
23638: LD_INT 2
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 3
23648: NEG
23649: PUSH
23650: LD_INT 3
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23689: LD_ADDR_VAR 0 43
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 0
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: LD_INT 2
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 2
23855: NEG
23856: PUSH
23857: LD_INT 0
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: LD_INT 3
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 3
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 2
23904: NEG
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 3
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 3
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 3
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 3
23985: NEG
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 3
23996: NEG
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24037: LD_ADDR_VAR 0 44
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 2
24192: NEG
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 2
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: NEG
24228: PUSH
24229: LD_INT 3
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 2
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 3
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 2
24300: NEG
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 3
24311: NEG
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 3
24322: NEG
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 3
24334: NEG
24335: PUSH
24336: LD_INT 2
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 3
24346: NEG
24347: PUSH
24348: LD_INT 3
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24387: LD_ADDR_VAR 0 45
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: LD_INT 2
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: NEG
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: NEG
24578: PUSH
24579: LD_INT 3
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 3
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 3
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 2
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 3
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 3
24633: PUSH
24634: LD_INT 3
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 3
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 3
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 3
24684: NEG
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 3
24696: NEG
24697: PUSH
24698: LD_INT 3
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24737: LD_ADDR_VAR 0 46
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: NEG
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: LD_INT 3
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 3
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 2
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 3
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: LD_INT 3
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: NEG
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 3
25033: NEG
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 3
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25085: LD_ADDR_VAR 0 47
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 2
25200: NEG
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: LD_INT 2
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25236: LD_ADDR_VAR 0 48
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: LD_INT 2
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25383: LD_ADDR_VAR 0 49
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25527: LD_ADDR_VAR 0 50
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: LD_INT 0
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: LD_INT 1
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: LD_INT 2
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: LD_INT 2
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25671: LD_ADDR_VAR 0 51
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: NEG
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: NEG
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25818: LD_ADDR_VAR 0 52
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: LD_INT 1
25838: NEG
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: NEG
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: LD_INT 1
25891: NEG
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 2
25922: NEG
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 2
25933: NEG
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: LD_INT 2
25949: NEG
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25969: LD_ADDR_VAR 0 53
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 2
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: LD_INT 2
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: NEG
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26199: LD_ADDR_VAR 0 54
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: LD_INT 2
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: NEG
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: LD_INT 2
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26429: LD_ADDR_VAR 0 55
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: LD_INT 2
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 2
26616: NEG
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: LD_INT 2
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26659: LD_ADDR_VAR 0 56
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 2
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: LD_INT 2
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 2
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 2
26846: NEG
26847: PUSH
26848: LD_INT 1
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26889: LD_ADDR_VAR 0 57
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: LD_INT 2
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27119: LD_ADDR_VAR 0 58
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 0
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 2
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: LD_INT 2
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: NEG
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 2
27318: NEG
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27349: LD_ADDR_VAR 0 59
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: LD_INT 1
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27437: LD_ADDR_VAR 0 60
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: LD_INT 1
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27525: LD_ADDR_VAR 0 61
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27613: LD_ADDR_VAR 0 62
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27701: LD_ADDR_VAR 0 63
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27789: LD_ADDR_VAR 0 64
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: ST_TO_ADDR
// end ; 1 :
27877: GO 33774
27879: LD_INT 1
27881: DOUBLE
27882: EQUAL
27883: IFTRUE 27887
27885: GO 30510
27887: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27888: LD_ADDR_VAR 0 11
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 3
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 3
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27932: LD_ADDR_VAR 0 12
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 3
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27973: LD_ADDR_VAR 0 13
27977: PUSH
27978: LD_INT 3
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 3
27990: PUSH
27991: LD_INT 3
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 3
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28013: LD_ADDR_VAR 0 14
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 3
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: LD_INT 2
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28054: LD_ADDR_VAR 0 15
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 3
28072: NEG
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 3
28083: NEG
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28098: LD_ADDR_VAR 0 16
28102: PUSH
28103: LD_INT 2
28105: NEG
28106: PUSH
28107: LD_INT 3
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 3
28117: NEG
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 3
28129: NEG
28130: PUSH
28131: LD_INT 3
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28144: LD_ADDR_VAR 0 17
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 3
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 3
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28188: LD_ADDR_VAR 0 18
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 1
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 3
28206: PUSH
28207: LD_INT 0
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 3
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28229: LD_ADDR_VAR 0 19
28233: PUSH
28234: LD_INT 3
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 3
28246: PUSH
28247: LD_INT 3
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 3
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28269: LD_ADDR_VAR 0 20
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 3
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 3
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28310: LD_ADDR_VAR 0 21
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 3
28328: NEG
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 3
28339: NEG
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28354: LD_ADDR_VAR 0 22
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: LD_INT 3
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 3
28373: NEG
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 3
28385: NEG
28386: PUSH
28387: LD_INT 3
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28400: LD_ADDR_VAR 0 23
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 3
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: LD_INT 4
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 3
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28444: LD_ADDR_VAR 0 24
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 3
28461: PUSH
28462: LD_INT 1
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 4
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28485: LD_ADDR_VAR 0 25
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: LD_INT 3
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 4
28502: PUSH
28503: LD_INT 3
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 3
28512: PUSH
28513: LD_INT 4
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28525: LD_ADDR_VAR 0 26
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 4
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28566: LD_ADDR_VAR 0 27
28570: PUSH
28571: LD_INT 3
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 3
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 4
28595: NEG
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28610: LD_ADDR_VAR 0 28
28614: PUSH
28615: LD_INT 3
28617: NEG
28618: PUSH
28619: LD_INT 3
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 3
28629: NEG
28630: PUSH
28631: LD_INT 4
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 4
28641: NEG
28642: PUSH
28643: LD_INT 3
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28656: LD_ADDR_VAR 0 29
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: LD_INT 3
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: LD_INT 3
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: LD_INT 2
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 4
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 4
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 3
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: LD_INT 5
28735: NEG
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: LD_INT 5
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: LD_INT 4
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: LD_INT 6
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: LD_INT 6
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: LD_INT 5
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28811: LD_ADDR_VAR 0 30
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 3
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 3
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 4
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 4
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 4
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 5
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 5
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 5
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 6
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 6
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28954: LD_ADDR_VAR 0 31
28958: PUSH
28959: LD_INT 3
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: LD_INT 3
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: LD_INT 3
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 4
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 4
29001: PUSH
29002: LD_INT 4
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: LD_INT 4
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 5
29021: PUSH
29022: LD_INT 4
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 5
29031: PUSH
29032: LD_INT 5
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 4
29041: PUSH
29042: LD_INT 5
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 6
29051: PUSH
29052: LD_INT 5
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 6
29061: PUSH
29062: LD_INT 6
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 5
29071: PUSH
29072: LD_INT 6
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29093: LD_ADDR_VAR 0 32
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 3
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: LD_INT 3
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 4
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 4
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: LD_INT 3
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: LD_INT 5
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 5
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 4
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 6
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 6
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 5
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29236: LD_ADDR_VAR 0 33
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 3
29254: NEG
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 3
29265: NEG
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 3
29277: NEG
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 4
29288: NEG
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 4
29299: NEG
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 4
29311: NEG
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 5
29322: NEG
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 5
29333: NEG
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 5
29345: NEG
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 6
29356: NEG
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 6
29367: NEG
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29391: LD_ADDR_VAR 0 34
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: LD_INT 3
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 3
29410: NEG
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 3
29422: NEG
29423: PUSH
29424: LD_INT 3
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 3
29434: NEG
29435: PUSH
29436: LD_INT 4
29438: NEG
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 4
29446: NEG
29447: PUSH
29448: LD_INT 3
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 4
29458: NEG
29459: PUSH
29460: LD_INT 4
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 4
29470: NEG
29471: PUSH
29472: LD_INT 5
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 5
29482: NEG
29483: PUSH
29484: LD_INT 4
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 5
29494: NEG
29495: PUSH
29496: LD_INT 5
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 5
29506: NEG
29507: PUSH
29508: LD_INT 6
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 6
29518: NEG
29519: PUSH
29520: LD_INT 5
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 6
29530: NEG
29531: PUSH
29532: LD_INT 6
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29554: LD_ADDR_VAR 0 41
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29598: LD_ADDR_VAR 0 42
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29639: LD_ADDR_VAR 0 43
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29679: LD_ADDR_VAR 0 44
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 3
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: LIST
29719: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29720: LD_ADDR_VAR 0 45
29724: PUSH
29725: LD_INT 2
29727: NEG
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 3
29749: NEG
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29764: LD_ADDR_VAR 0 46
29768: PUSH
29769: LD_INT 2
29771: NEG
29772: PUSH
29773: LD_INT 2
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 3
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: NEG
29796: PUSH
29797: LD_INT 2
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29810: LD_ADDR_VAR 0 47
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: LD_INT 3
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29843: LD_ADDR_VAR 0 48
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 2
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29874: LD_ADDR_VAR 0 49
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29903: LD_ADDR_VAR 0 50
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29932: LD_ADDR_VAR 0 51
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: NEG
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29963: LD_ADDR_VAR 0 52
29967: PUSH
29968: LD_INT 3
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 3
29982: NEG
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29996: LD_ADDR_VAR 0 53
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 0
30015: PUSH
30016: LD_INT 3
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: LD_INT 2
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30040: LD_ADDR_VAR 0 54
30044: PUSH
30045: LD_INT 2
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30081: LD_ADDR_VAR 0 55
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: LD_INT 3
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: LD_INT 3
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30121: LD_ADDR_VAR 0 56
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 3
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 3
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30162: LD_ADDR_VAR 0 57
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 3
30180: NEG
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 3
30191: NEG
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30206: LD_ADDR_VAR 0 58
30210: PUSH
30211: LD_INT 2
30213: NEG
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: NEG
30226: PUSH
30227: LD_INT 2
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 3
30237: NEG
30238: PUSH
30239: LD_INT 3
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30252: LD_ADDR_VAR 0 59
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: LD_INT 2
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30296: LD_ADDR_VAR 0 60
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30337: LD_ADDR_VAR 0 61
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30377: LD_ADDR_VAR 0 62
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30418: LD_ADDR_VAR 0 63
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30462: LD_ADDR_VAR 0 64
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 2
30481: NEG
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// end ; 2 :
30508: GO 33774
30510: LD_INT 2
30512: DOUBLE
30513: EQUAL
30514: IFTRUE 30518
30516: GO 33773
30518: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30519: LD_ADDR_VAR 0 29
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 4
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 5
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 4
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 3
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 5
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 3
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 3
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: LD_INT 3
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 4
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: LD_INT 4
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 4
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: LD_INT 4
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 4
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 4
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 5
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 5
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 4
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 3
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: LD_INT 5
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 3
30802: NEG
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 2
30825: NEG
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 4
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 4
30881: NEG
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 4
30904: NEG
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 4
30916: NEG
30917: PUSH
30918: LD_INT 5
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 3
30928: NEG
30929: PUSH
30930: LD_INT 4
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 4
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 5
30964: NEG
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 5
30976: NEG
30977: PUSH
30978: LD_INT 5
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: NEG
30989: PUSH
30990: LD_INT 5
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 5
31000: NEG
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31057: LD_ADDR_VAR 0 30
31061: PUSH
31062: LD_INT 4
31064: PUSH
31065: LD_INT 4
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 4
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 5
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 5
31094: PUSH
31095: LD_INT 5
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 4
31104: PUSH
31105: LD_INT 5
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 4
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 3
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 5
31134: PUSH
31135: LD_INT 3
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: LD_INT 5
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 3
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 3
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 4
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 4
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: LD_INT 4
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 2
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 4
31247: NEG
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 4
31258: NEG
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 3
31270: NEG
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: NEG
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 4
31292: NEG
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 5
31303: NEG
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 5
31314: NEG
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 5
31326: NEG
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 3
31338: NEG
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: LD_INT 3
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 3
31361: NEG
31362: PUSH
31363: LD_INT 4
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: LD_INT 3
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 4
31409: NEG
31410: PUSH
31411: LD_INT 3
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 4
31421: NEG
31422: PUSH
31423: LD_INT 4
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 2
31433: NEG
31434: PUSH
31435: LD_INT 4
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 4
31445: NEG
31446: PUSH
31447: LD_INT 2
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: LD_INT 4
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 0
31468: PUSH
31469: LD_INT 5
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 1
31479: PUSH
31480: LD_INT 4
31482: NEG
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 3
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 3
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: LD_INT 4
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: LD_INT 5
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 3
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: LD_INT 5
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31604: LD_ADDR_VAR 0 31
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: LD_INT 4
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: LD_INT 3
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: LD_INT 5
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 5
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: LD_INT 4
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 3
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 5
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: NEG
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: NEG
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: NEG
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 4
31760: NEG
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 4
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 4
31783: NEG
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 4
31806: NEG
31807: PUSH
31808: LD_INT 4
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 4
31818: NEG
31819: PUSH
31820: LD_INT 5
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 3
31830: NEG
31831: PUSH
31832: LD_INT 4
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: LD_INT 3
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: LD_INT 3
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 5
31866: NEG
31867: PUSH
31868: LD_INT 4
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 5
31878: NEG
31879: PUSH
31880: LD_INT 5
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 3
31890: NEG
31891: PUSH
31892: LD_INT 5
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 5
31902: NEG
31903: PUSH
31904: LD_INT 3
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: LD_INT 3
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: LD_INT 4
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: LD_INT 3
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: LD_INT 2
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: LD_INT 3
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: LD_INT 4
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 4
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 4
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 4
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 5
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 5
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 3
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 3
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: LD_INT 2
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 5
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32154: LD_ADDR_VAR 0 32
32158: PUSH
32159: LD_INT 4
32161: NEG
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 4
32172: NEG
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 3
32195: NEG
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 4
32206: NEG
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 5
32217: NEG
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 5
32228: NEG
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 5
32240: NEG
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 3
32263: NEG
32264: PUSH
32265: LD_INT 3
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: NEG
32276: PUSH
32277: LD_INT 4
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: LD_INT 3
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 2
32299: NEG
32300: PUSH
32301: LD_INT 2
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 3
32311: NEG
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 4
32323: NEG
32324: PUSH
32325: LD_INT 3
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 4
32335: NEG
32336: PUSH
32337: LD_INT 4
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 4
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 4
32359: NEG
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 4
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 5
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 4
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 3
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 3
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: LD_INT 4
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 5
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: LD_INT 5
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 4
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 4
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 4
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 4
32566: PUSH
32567: LD_INT 4
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 4
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 5
32586: PUSH
32587: LD_INT 4
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 5
32596: PUSH
32597: LD_INT 5
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 4
32606: PUSH
32607: LD_INT 5
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: LD_INT 4
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 3
32626: PUSH
32627: LD_INT 3
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 5
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: LD_INT 5
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32701: LD_ADDR_VAR 0 33
32705: PUSH
32706: LD_INT 4
32708: NEG
32709: PUSH
32710: LD_INT 4
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 4
32720: NEG
32721: PUSH
32722: LD_INT 5
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: LD_INT 4
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 3
32744: NEG
32745: PUSH
32746: LD_INT 3
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 4
32756: NEG
32757: PUSH
32758: LD_INT 3
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 5
32768: NEG
32769: PUSH
32770: LD_INT 4
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 5
32780: NEG
32781: PUSH
32782: LD_INT 5
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 3
32792: NEG
32793: PUSH
32794: LD_INT 5
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 5
32804: NEG
32805: PUSH
32806: LD_INT 3
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 3
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: LD_INT 4
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: NEG
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: LD_INT 4
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 2
32906: NEG
32907: PUSH
32908: LD_INT 4
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 4
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 4
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 5
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 5
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 4
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 5
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 3
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 4
33031: PUSH
33032: LD_INT 3
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: LD_INT 4
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: LD_INT 4
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 4
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 4
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 4
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: LD_INT 4
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 5
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 5
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 4
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: LD_INT 3
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 5
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33239: LD_ADDR_VAR 0 34
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 4
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 5
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 4
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 3
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 3
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: LD_INT 4
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 5
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: LD_INT 3
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 5
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 3
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 3
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 4
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 4
33441: PUSH
33442: LD_INT 4
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 4
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 5
33461: PUSH
33462: LD_INT 4
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 5
33471: PUSH
33472: LD_INT 5
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 4
33481: PUSH
33482: LD_INT 5
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: LD_INT 4
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 3
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 5
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: LD_INT 5
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 3
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: LD_INT 4
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 4
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: LD_INT 4
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 4
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 4
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 3
33647: NEG
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 3
33658: NEG
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 4
33669: NEG
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 5
33680: NEG
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 5
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 5
33703: NEG
33704: PUSH
33705: LD_INT 2
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
// end ; end ;
33771: GO 33774
33773: POP
// case btype of b_depot , b_warehouse :
33774: LD_VAR 0 1
33778: PUSH
33779: LD_INT 0
33781: DOUBLE
33782: EQUAL
33783: IFTRUE 33793
33785: LD_INT 1
33787: DOUBLE
33788: EQUAL
33789: IFTRUE 33793
33791: GO 33994
33793: POP
// case nation of nation_american :
33794: LD_VAR 0 5
33798: PUSH
33799: LD_INT 1
33801: DOUBLE
33802: EQUAL
33803: IFTRUE 33807
33805: GO 33863
33807: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33808: LD_ADDR_VAR 0 9
33812: PUSH
33813: LD_VAR 0 11
33817: PUSH
33818: LD_VAR 0 12
33822: PUSH
33823: LD_VAR 0 13
33827: PUSH
33828: LD_VAR 0 14
33832: PUSH
33833: LD_VAR 0 15
33837: PUSH
33838: LD_VAR 0 16
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: PUSH
33851: LD_VAR 0 4
33855: PUSH
33856: LD_INT 1
33858: PLUS
33859: ARRAY
33860: ST_TO_ADDR
33861: GO 33992
33863: LD_INT 2
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33871
33869: GO 33927
33871: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33872: LD_ADDR_VAR 0 9
33876: PUSH
33877: LD_VAR 0 17
33881: PUSH
33882: LD_VAR 0 18
33886: PUSH
33887: LD_VAR 0 19
33891: PUSH
33892: LD_VAR 0 20
33896: PUSH
33897: LD_VAR 0 21
33901: PUSH
33902: LD_VAR 0 22
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: PUSH
33915: LD_VAR 0 4
33919: PUSH
33920: LD_INT 1
33922: PLUS
33923: ARRAY
33924: ST_TO_ADDR
33925: GO 33992
33927: LD_INT 3
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33991
33935: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33936: LD_ADDR_VAR 0 9
33940: PUSH
33941: LD_VAR 0 23
33945: PUSH
33946: LD_VAR 0 24
33950: PUSH
33951: LD_VAR 0 25
33955: PUSH
33956: LD_VAR 0 26
33960: PUSH
33961: LD_VAR 0 27
33965: PUSH
33966: LD_VAR 0 28
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: PUSH
33979: LD_VAR 0 4
33983: PUSH
33984: LD_INT 1
33986: PLUS
33987: ARRAY
33988: ST_TO_ADDR
33989: GO 33992
33991: POP
33992: GO 34547
33994: LD_INT 2
33996: DOUBLE
33997: EQUAL
33998: IFTRUE 34008
34000: LD_INT 3
34002: DOUBLE
34003: EQUAL
34004: IFTRUE 34008
34006: GO 34064
34008: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34009: LD_ADDR_VAR 0 9
34013: PUSH
34014: LD_VAR 0 29
34018: PUSH
34019: LD_VAR 0 30
34023: PUSH
34024: LD_VAR 0 31
34028: PUSH
34029: LD_VAR 0 32
34033: PUSH
34034: LD_VAR 0 33
34038: PUSH
34039: LD_VAR 0 34
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: PUSH
34052: LD_VAR 0 4
34056: PUSH
34057: LD_INT 1
34059: PLUS
34060: ARRAY
34061: ST_TO_ADDR
34062: GO 34547
34064: LD_INT 16
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34126
34070: LD_INT 17
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34126
34076: LD_INT 18
34078: DOUBLE
34079: EQUAL
34080: IFTRUE 34126
34082: LD_INT 19
34084: DOUBLE
34085: EQUAL
34086: IFTRUE 34126
34088: LD_INT 22
34090: DOUBLE
34091: EQUAL
34092: IFTRUE 34126
34094: LD_INT 20
34096: DOUBLE
34097: EQUAL
34098: IFTRUE 34126
34100: LD_INT 21
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34126
34106: LD_INT 23
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34126
34112: LD_INT 24
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34126
34118: LD_INT 25
34120: DOUBLE
34121: EQUAL
34122: IFTRUE 34126
34124: GO 34182
34126: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34127: LD_ADDR_VAR 0 9
34131: PUSH
34132: LD_VAR 0 35
34136: PUSH
34137: LD_VAR 0 36
34141: PUSH
34142: LD_VAR 0 37
34146: PUSH
34147: LD_VAR 0 38
34151: PUSH
34152: LD_VAR 0 39
34156: PUSH
34157: LD_VAR 0 40
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: PUSH
34170: LD_VAR 0 4
34174: PUSH
34175: LD_INT 1
34177: PLUS
34178: ARRAY
34179: ST_TO_ADDR
34180: GO 34547
34182: LD_INT 6
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34238
34188: LD_INT 7
34190: DOUBLE
34191: EQUAL
34192: IFTRUE 34238
34194: LD_INT 8
34196: DOUBLE
34197: EQUAL
34198: IFTRUE 34238
34200: LD_INT 13
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34238
34206: LD_INT 12
34208: DOUBLE
34209: EQUAL
34210: IFTRUE 34238
34212: LD_INT 15
34214: DOUBLE
34215: EQUAL
34216: IFTRUE 34238
34218: LD_INT 11
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34238
34224: LD_INT 14
34226: DOUBLE
34227: EQUAL
34228: IFTRUE 34238
34230: LD_INT 10
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34294
34238: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34239: LD_ADDR_VAR 0 9
34243: PUSH
34244: LD_VAR 0 41
34248: PUSH
34249: LD_VAR 0 42
34253: PUSH
34254: LD_VAR 0 43
34258: PUSH
34259: LD_VAR 0 44
34263: PUSH
34264: LD_VAR 0 45
34268: PUSH
34269: LD_VAR 0 46
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: PUSH
34282: LD_VAR 0 4
34286: PUSH
34287: LD_INT 1
34289: PLUS
34290: ARRAY
34291: ST_TO_ADDR
34292: GO 34547
34294: LD_INT 36
34296: DOUBLE
34297: EQUAL
34298: IFTRUE 34302
34300: GO 34358
34302: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34303: LD_ADDR_VAR 0 9
34307: PUSH
34308: LD_VAR 0 47
34312: PUSH
34313: LD_VAR 0 48
34317: PUSH
34318: LD_VAR 0 49
34322: PUSH
34323: LD_VAR 0 50
34327: PUSH
34328: LD_VAR 0 51
34332: PUSH
34333: LD_VAR 0 52
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: PUSH
34346: LD_VAR 0 4
34350: PUSH
34351: LD_INT 1
34353: PLUS
34354: ARRAY
34355: ST_TO_ADDR
34356: GO 34547
34358: LD_INT 4
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34384
34364: LD_INT 5
34366: DOUBLE
34367: EQUAL
34368: IFTRUE 34384
34370: LD_INT 34
34372: DOUBLE
34373: EQUAL
34374: IFTRUE 34384
34376: LD_INT 37
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34440
34384: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34385: LD_ADDR_VAR 0 9
34389: PUSH
34390: LD_VAR 0 53
34394: PUSH
34395: LD_VAR 0 54
34399: PUSH
34400: LD_VAR 0 55
34404: PUSH
34405: LD_VAR 0 56
34409: PUSH
34410: LD_VAR 0 57
34414: PUSH
34415: LD_VAR 0 58
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: PUSH
34428: LD_VAR 0 4
34432: PUSH
34433: LD_INT 1
34435: PLUS
34436: ARRAY
34437: ST_TO_ADDR
34438: GO 34547
34440: LD_INT 31
34442: DOUBLE
34443: EQUAL
34444: IFTRUE 34490
34446: LD_INT 32
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34490
34452: LD_INT 33
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34490
34458: LD_INT 27
34460: DOUBLE
34461: EQUAL
34462: IFTRUE 34490
34464: LD_INT 26
34466: DOUBLE
34467: EQUAL
34468: IFTRUE 34490
34470: LD_INT 28
34472: DOUBLE
34473: EQUAL
34474: IFTRUE 34490
34476: LD_INT 29
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34490
34482: LD_INT 30
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34490
34488: GO 34546
34490: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34491: LD_ADDR_VAR 0 9
34495: PUSH
34496: LD_VAR 0 59
34500: PUSH
34501: LD_VAR 0 60
34505: PUSH
34506: LD_VAR 0 61
34510: PUSH
34511: LD_VAR 0 62
34515: PUSH
34516: LD_VAR 0 63
34520: PUSH
34521: LD_VAR 0 64
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: PUSH
34534: LD_VAR 0 4
34538: PUSH
34539: LD_INT 1
34541: PLUS
34542: ARRAY
34543: ST_TO_ADDR
34544: GO 34547
34546: POP
// temp_list2 = [ ] ;
34547: LD_ADDR_VAR 0 10
34551: PUSH
34552: EMPTY
34553: ST_TO_ADDR
// for i in temp_list do
34554: LD_ADDR_VAR 0 8
34558: PUSH
34559: LD_VAR 0 9
34563: PUSH
34564: FOR_IN
34565: IFFALSE 34617
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34567: LD_ADDR_VAR 0 10
34571: PUSH
34572: LD_VAR 0 10
34576: PUSH
34577: LD_VAR 0 8
34581: PUSH
34582: LD_INT 1
34584: ARRAY
34585: PUSH
34586: LD_VAR 0 2
34590: PLUS
34591: PUSH
34592: LD_VAR 0 8
34596: PUSH
34597: LD_INT 2
34599: ARRAY
34600: PUSH
34601: LD_VAR 0 3
34605: PLUS
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: EMPTY
34612: LIST
34613: ADD
34614: ST_TO_ADDR
34615: GO 34564
34617: POP
34618: POP
// result = temp_list2 ;
34619: LD_ADDR_VAR 0 7
34623: PUSH
34624: LD_VAR 0 10
34628: ST_TO_ADDR
// end ;
34629: LD_VAR 0 7
34633: RET
// export function EnemyInRange ( unit , dist ) ; begin
34634: LD_INT 0
34636: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 255
34651: PPUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 250
34661: PPUSH
34662: LD_VAR 0 1
34666: PPUSH
34667: CALL_OW 251
34671: PPUSH
34672: LD_VAR 0 2
34676: PPUSH
34677: CALL 8007 0 4
34681: PUSH
34682: LD_INT 4
34684: ARRAY
34685: ST_TO_ADDR
// end ;
34686: LD_VAR 0 3
34690: RET
// export function PlayerSeeMe ( unit ) ; begin
34691: LD_INT 0
34693: PPUSH
// result := See ( your_side , unit ) ;
34694: LD_ADDR_VAR 0 2
34698: PUSH
34699: LD_OWVAR 2
34703: PPUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 292
34713: ST_TO_ADDR
// end ;
34714: LD_VAR 0 2
34718: RET
// export function ReverseDir ( unit ) ; begin
34719: LD_INT 0
34721: PPUSH
// if not unit then
34722: LD_VAR 0 1
34726: NOT
34727: IFFALSE 34731
// exit ;
34729: GO 34754
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34731: LD_ADDR_VAR 0 2
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 254
34745: PUSH
34746: LD_INT 3
34748: PLUS
34749: PUSH
34750: LD_INT 6
34752: MOD
34753: ST_TO_ADDR
// end ;
34754: LD_VAR 0 2
34758: RET
// export function ReverseArray ( array ) ; var i ; begin
34759: LD_INT 0
34761: PPUSH
34762: PPUSH
// if not array then
34763: LD_VAR 0 1
34767: NOT
34768: IFFALSE 34772
// exit ;
34770: GO 34827
// result := [ ] ;
34772: LD_ADDR_VAR 0 2
34776: PUSH
34777: EMPTY
34778: ST_TO_ADDR
// for i := array downto 1 do
34779: LD_ADDR_VAR 0 3
34783: PUSH
34784: DOUBLE
34785: LD_VAR 0 1
34789: INC
34790: ST_TO_ADDR
34791: LD_INT 1
34793: PUSH
34794: FOR_DOWNTO
34795: IFFALSE 34825
// result := Join ( result , array [ i ] ) ;
34797: LD_ADDR_VAR 0 2
34801: PUSH
34802: LD_VAR 0 2
34806: PPUSH
34807: LD_VAR 0 1
34811: PUSH
34812: LD_VAR 0 3
34816: ARRAY
34817: PPUSH
34818: CALL 39483 0 2
34822: ST_TO_ADDR
34823: GO 34794
34825: POP
34826: POP
// end ;
34827: LD_VAR 0 2
34831: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34832: LD_INT 0
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
// if not unit or not hexes then
34840: LD_VAR 0 1
34844: NOT
34845: PUSH
34846: LD_VAR 0 2
34850: NOT
34851: OR
34852: IFFALSE 34856
// exit ;
34854: GO 34979
// dist := 9999 ;
34856: LD_ADDR_VAR 0 5
34860: PUSH
34861: LD_INT 9999
34863: ST_TO_ADDR
// for i = 1 to hexes do
34864: LD_ADDR_VAR 0 4
34868: PUSH
34869: DOUBLE
34870: LD_INT 1
34872: DEC
34873: ST_TO_ADDR
34874: LD_VAR 0 2
34878: PUSH
34879: FOR_TO
34880: IFFALSE 34967
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34882: LD_ADDR_VAR 0 6
34886: PUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: LD_VAR 0 2
34896: PUSH
34897: LD_VAR 0 4
34901: ARRAY
34902: PUSH
34903: LD_INT 1
34905: ARRAY
34906: PPUSH
34907: LD_VAR 0 2
34911: PUSH
34912: LD_VAR 0 4
34916: ARRAY
34917: PUSH
34918: LD_INT 2
34920: ARRAY
34921: PPUSH
34922: CALL_OW 297
34926: ST_TO_ADDR
// if tdist < dist then
34927: LD_VAR 0 6
34931: PUSH
34932: LD_VAR 0 5
34936: LESS
34937: IFFALSE 34965
// begin hex := hexes [ i ] ;
34939: LD_ADDR_VAR 0 8
34943: PUSH
34944: LD_VAR 0 2
34948: PUSH
34949: LD_VAR 0 4
34953: ARRAY
34954: ST_TO_ADDR
// dist := tdist ;
34955: LD_ADDR_VAR 0 5
34959: PUSH
34960: LD_VAR 0 6
34964: ST_TO_ADDR
// end ; end ;
34965: GO 34879
34967: POP
34968: POP
// result := hex ;
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_VAR 0 8
34978: ST_TO_ADDR
// end ;
34979: LD_VAR 0 3
34983: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34984: LD_INT 0
34986: PPUSH
34987: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34988: LD_VAR 0 1
34992: NOT
34993: PUSH
34994: LD_VAR 0 1
34998: PUSH
34999: LD_INT 21
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 23
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PPUSH
35023: CALL_OW 69
35027: IN
35028: NOT
35029: OR
35030: IFFALSE 35034
// exit ;
35032: GO 35081
// for i = 1 to 3 do
35034: LD_ADDR_VAR 0 3
35038: PUSH
35039: DOUBLE
35040: LD_INT 1
35042: DEC
35043: ST_TO_ADDR
35044: LD_INT 3
35046: PUSH
35047: FOR_TO
35048: IFFALSE 35079
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35050: LD_VAR 0 1
35054: PPUSH
35055: CALL_OW 250
35059: PPUSH
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 251
35069: PPUSH
35070: LD_INT 1
35072: PPUSH
35073: CALL_OW 453
35077: GO 35047
35079: POP
35080: POP
// end ;
35081: LD_VAR 0 2
35085: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35094: LD_VAR 0 1
35098: NOT
35099: PUSH
35100: LD_VAR 0 2
35104: NOT
35105: OR
35106: PUSH
35107: LD_VAR 0 1
35111: PPUSH
35112: CALL_OW 314
35116: OR
35117: IFFALSE 35121
// exit ;
35119: GO 35588
// if GetLives ( i ) < 250 then
35121: LD_VAR 0 4
35125: PPUSH
35126: CALL_OW 256
35130: PUSH
35131: LD_INT 250
35133: LESS
35134: IFFALSE 35147
// begin ComAutodestruct ( i ) ;
35136: LD_VAR 0 4
35140: PPUSH
35141: CALL 34984 0 1
// exit ;
35145: GO 35588
// end ; x := GetX ( enemy_unit ) ;
35147: LD_ADDR_VAR 0 7
35151: PUSH
35152: LD_VAR 0 2
35156: PPUSH
35157: CALL_OW 250
35161: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35162: LD_ADDR_VAR 0 8
35166: PUSH
35167: LD_VAR 0 2
35171: PPUSH
35172: CALL_OW 251
35176: ST_TO_ADDR
// if not x or not y then
35177: LD_VAR 0 7
35181: NOT
35182: PUSH
35183: LD_VAR 0 8
35187: NOT
35188: OR
35189: IFFALSE 35193
// exit ;
35191: GO 35588
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35193: LD_ADDR_VAR 0 6
35197: PUSH
35198: LD_VAR 0 7
35202: PPUSH
35203: LD_INT 0
35205: PPUSH
35206: LD_INT 4
35208: PPUSH
35209: CALL_OW 272
35213: PUSH
35214: LD_VAR 0 8
35218: PPUSH
35219: LD_INT 0
35221: PPUSH
35222: LD_INT 4
35224: PPUSH
35225: CALL_OW 273
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_VAR 0 7
35238: PPUSH
35239: LD_INT 1
35241: PPUSH
35242: LD_INT 4
35244: PPUSH
35245: CALL_OW 272
35249: PUSH
35250: LD_VAR 0 8
35254: PPUSH
35255: LD_INT 1
35257: PPUSH
35258: LD_INT 4
35260: PPUSH
35261: CALL_OW 273
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_VAR 0 7
35274: PPUSH
35275: LD_INT 2
35277: PPUSH
35278: LD_INT 4
35280: PPUSH
35281: CALL_OW 272
35285: PUSH
35286: LD_VAR 0 8
35290: PPUSH
35291: LD_INT 2
35293: PPUSH
35294: LD_INT 4
35296: PPUSH
35297: CALL_OW 273
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_VAR 0 7
35310: PPUSH
35311: LD_INT 3
35313: PPUSH
35314: LD_INT 4
35316: PPUSH
35317: CALL_OW 272
35321: PUSH
35322: LD_VAR 0 8
35326: PPUSH
35327: LD_INT 3
35329: PPUSH
35330: LD_INT 4
35332: PPUSH
35333: CALL_OW 273
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_VAR 0 7
35346: PPUSH
35347: LD_INT 4
35349: PPUSH
35350: LD_INT 4
35352: PPUSH
35353: CALL_OW 272
35357: PUSH
35358: LD_VAR 0 8
35362: PPUSH
35363: LD_INT 4
35365: PPUSH
35366: LD_INT 4
35368: PPUSH
35369: CALL_OW 273
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_VAR 0 7
35382: PPUSH
35383: LD_INT 5
35385: PPUSH
35386: LD_INT 4
35388: PPUSH
35389: CALL_OW 272
35393: PUSH
35394: LD_VAR 0 8
35398: PPUSH
35399: LD_INT 5
35401: PPUSH
35402: LD_INT 4
35404: PPUSH
35405: CALL_OW 273
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: ST_TO_ADDR
// for i = tmp downto 1 do
35422: LD_ADDR_VAR 0 4
35426: PUSH
35427: DOUBLE
35428: LD_VAR 0 6
35432: INC
35433: ST_TO_ADDR
35434: LD_INT 1
35436: PUSH
35437: FOR_DOWNTO
35438: IFFALSE 35539
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35440: LD_VAR 0 6
35444: PUSH
35445: LD_VAR 0 4
35449: ARRAY
35450: PUSH
35451: LD_INT 1
35453: ARRAY
35454: PPUSH
35455: LD_VAR 0 6
35459: PUSH
35460: LD_VAR 0 4
35464: ARRAY
35465: PUSH
35466: LD_INT 2
35468: ARRAY
35469: PPUSH
35470: CALL_OW 488
35474: NOT
35475: PUSH
35476: LD_VAR 0 6
35480: PUSH
35481: LD_VAR 0 4
35485: ARRAY
35486: PUSH
35487: LD_INT 1
35489: ARRAY
35490: PPUSH
35491: LD_VAR 0 6
35495: PUSH
35496: LD_VAR 0 4
35500: ARRAY
35501: PUSH
35502: LD_INT 2
35504: ARRAY
35505: PPUSH
35506: CALL_OW 428
35510: PUSH
35511: LD_INT 0
35513: NONEQUAL
35514: OR
35515: IFFALSE 35537
// tmp := Delete ( tmp , i ) ;
35517: LD_ADDR_VAR 0 6
35521: PUSH
35522: LD_VAR 0 6
35526: PPUSH
35527: LD_VAR 0 4
35531: PPUSH
35532: CALL_OW 3
35536: ST_TO_ADDR
35537: GO 35437
35539: POP
35540: POP
// j := GetClosestHex ( unit , tmp ) ;
35541: LD_ADDR_VAR 0 5
35545: PUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: LD_VAR 0 6
35555: PPUSH
35556: CALL 34832 0 2
35560: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35561: LD_VAR 0 1
35565: PPUSH
35566: LD_VAR 0 5
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PPUSH
35575: LD_VAR 0 5
35579: PUSH
35580: LD_INT 2
35582: ARRAY
35583: PPUSH
35584: CALL_OW 111
// end ;
35588: LD_VAR 0 3
35592: RET
// export function PrepareApemanSoldier ( ) ; begin
35593: LD_INT 0
35595: PPUSH
// uc_nation := 0 ;
35596: LD_ADDR_OWVAR 21
35600: PUSH
35601: LD_INT 0
35603: ST_TO_ADDR
// hc_sex := sex_male ;
35604: LD_ADDR_OWVAR 27
35608: PUSH
35609: LD_INT 1
35611: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35612: LD_ADDR_OWVAR 28
35616: PUSH
35617: LD_INT 15
35619: ST_TO_ADDR
// hc_gallery :=  ;
35620: LD_ADDR_OWVAR 33
35624: PUSH
35625: LD_STRING 
35627: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35628: LD_ADDR_OWVAR 31
35632: PUSH
35633: LD_INT 0
35635: PPUSH
35636: LD_INT 3
35638: PPUSH
35639: CALL_OW 12
35643: PUSH
35644: LD_INT 0
35646: PPUSH
35647: LD_INT 3
35649: PPUSH
35650: CALL_OW 12
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// end ;
35667: LD_VAR 0 1
35671: RET
// export function PrepareApemanEngineer ( ) ; begin
35672: LD_INT 0
35674: PPUSH
// uc_nation := 0 ;
35675: LD_ADDR_OWVAR 21
35679: PUSH
35680: LD_INT 0
35682: ST_TO_ADDR
// hc_sex := sex_male ;
35683: LD_ADDR_OWVAR 27
35687: PUSH
35688: LD_INT 1
35690: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35691: LD_ADDR_OWVAR 28
35695: PUSH
35696: LD_INT 16
35698: ST_TO_ADDR
// hc_gallery :=  ;
35699: LD_ADDR_OWVAR 33
35703: PUSH
35704: LD_STRING 
35706: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35707: LD_ADDR_OWVAR 31
35711: PUSH
35712: LD_INT 0
35714: PPUSH
35715: LD_INT 3
35717: PPUSH
35718: CALL_OW 12
35722: PUSH
35723: LD_INT 0
35725: PPUSH
35726: LD_INT 3
35728: PPUSH
35729: CALL_OW 12
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
// end ;
35746: LD_VAR 0 1
35750: RET
// export function PrepareApeman ( agressivity ) ; begin
35751: LD_INT 0
35753: PPUSH
// uc_side := 0 ;
35754: LD_ADDR_OWVAR 20
35758: PUSH
35759: LD_INT 0
35761: ST_TO_ADDR
// uc_nation := 0 ;
35762: LD_ADDR_OWVAR 21
35766: PUSH
35767: LD_INT 0
35769: ST_TO_ADDR
// hc_sex := sex_male ;
35770: LD_ADDR_OWVAR 27
35774: PUSH
35775: LD_INT 1
35777: ST_TO_ADDR
// hc_class := class_apeman ;
35778: LD_ADDR_OWVAR 28
35782: PUSH
35783: LD_INT 12
35785: ST_TO_ADDR
// hc_gallery :=  ;
35786: LD_ADDR_OWVAR 33
35790: PUSH
35791: LD_STRING 
35793: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35794: LD_ADDR_OWVAR 35
35798: PUSH
35799: LD_VAR 0 1
35803: NEG
35804: PPUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 12
35814: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35815: LD_ADDR_OWVAR 31
35819: PUSH
35820: LD_INT 0
35822: PPUSH
35823: LD_INT 3
35825: PPUSH
35826: CALL_OW 12
35830: PUSH
35831: LD_INT 0
35833: PPUSH
35834: LD_INT 3
35836: PPUSH
35837: CALL_OW 12
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
// end ;
35854: LD_VAR 0 2
35858: RET
// export function PrepareTiger ( agressivity ) ; begin
35859: LD_INT 0
35861: PPUSH
// uc_side := 0 ;
35862: LD_ADDR_OWVAR 20
35866: PUSH
35867: LD_INT 0
35869: ST_TO_ADDR
// uc_nation := 0 ;
35870: LD_ADDR_OWVAR 21
35874: PUSH
35875: LD_INT 0
35877: ST_TO_ADDR
// hc_class := class_tiger ;
35878: LD_ADDR_OWVAR 28
35882: PUSH
35883: LD_INT 14
35885: ST_TO_ADDR
// hc_gallery :=  ;
35886: LD_ADDR_OWVAR 33
35890: PUSH
35891: LD_STRING 
35893: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35894: LD_ADDR_OWVAR 35
35898: PUSH
35899: LD_VAR 0 1
35903: NEG
35904: PPUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 12
35914: ST_TO_ADDR
// end ;
35915: LD_VAR 0 2
35919: RET
// export function PrepareEnchidna ( ) ; begin
35920: LD_INT 0
35922: PPUSH
// uc_side := 0 ;
35923: LD_ADDR_OWVAR 20
35927: PUSH
35928: LD_INT 0
35930: ST_TO_ADDR
// uc_nation := 0 ;
35931: LD_ADDR_OWVAR 21
35935: PUSH
35936: LD_INT 0
35938: ST_TO_ADDR
// hc_class := class_baggie ;
35939: LD_ADDR_OWVAR 28
35943: PUSH
35944: LD_INT 13
35946: ST_TO_ADDR
// hc_gallery :=  ;
35947: LD_ADDR_OWVAR 33
35951: PUSH
35952: LD_STRING 
35954: ST_TO_ADDR
// end ;
35955: LD_VAR 0 1
35959: RET
// export function PrepareFrog ( ) ; begin
35960: LD_INT 0
35962: PPUSH
// uc_side := 0 ;
35963: LD_ADDR_OWVAR 20
35967: PUSH
35968: LD_INT 0
35970: ST_TO_ADDR
// uc_nation := 0 ;
35971: LD_ADDR_OWVAR 21
35975: PUSH
35976: LD_INT 0
35978: ST_TO_ADDR
// hc_class := class_frog ;
35979: LD_ADDR_OWVAR 28
35983: PUSH
35984: LD_INT 19
35986: ST_TO_ADDR
// hc_gallery :=  ;
35987: LD_ADDR_OWVAR 33
35991: PUSH
35992: LD_STRING 
35994: ST_TO_ADDR
// end ;
35995: LD_VAR 0 1
35999: RET
// export function PrepareFish ( ) ; begin
36000: LD_INT 0
36002: PPUSH
// uc_side := 0 ;
36003: LD_ADDR_OWVAR 20
36007: PUSH
36008: LD_INT 0
36010: ST_TO_ADDR
// uc_nation := 0 ;
36011: LD_ADDR_OWVAR 21
36015: PUSH
36016: LD_INT 0
36018: ST_TO_ADDR
// hc_class := class_fish ;
36019: LD_ADDR_OWVAR 28
36023: PUSH
36024: LD_INT 20
36026: ST_TO_ADDR
// hc_gallery :=  ;
36027: LD_ADDR_OWVAR 33
36031: PUSH
36032: LD_STRING 
36034: ST_TO_ADDR
// end ;
36035: LD_VAR 0 1
36039: RET
// export function PrepareBird ( ) ; begin
36040: LD_INT 0
36042: PPUSH
// uc_side := 0 ;
36043: LD_ADDR_OWVAR 20
36047: PUSH
36048: LD_INT 0
36050: ST_TO_ADDR
// uc_nation := 0 ;
36051: LD_ADDR_OWVAR 21
36055: PUSH
36056: LD_INT 0
36058: ST_TO_ADDR
// hc_class := class_phororhacos ;
36059: LD_ADDR_OWVAR 28
36063: PUSH
36064: LD_INT 18
36066: ST_TO_ADDR
// hc_gallery :=  ;
36067: LD_ADDR_OWVAR 33
36071: PUSH
36072: LD_STRING 
36074: ST_TO_ADDR
// end ;
36075: LD_VAR 0 1
36079: RET
// export function PrepareHorse ( ) ; begin
36080: LD_INT 0
36082: PPUSH
// uc_side := 0 ;
36083: LD_ADDR_OWVAR 20
36087: PUSH
36088: LD_INT 0
36090: ST_TO_ADDR
// uc_nation := 0 ;
36091: LD_ADDR_OWVAR 21
36095: PUSH
36096: LD_INT 0
36098: ST_TO_ADDR
// hc_class := class_horse ;
36099: LD_ADDR_OWVAR 28
36103: PUSH
36104: LD_INT 21
36106: ST_TO_ADDR
// hc_gallery :=  ;
36107: LD_ADDR_OWVAR 33
36111: PUSH
36112: LD_STRING 
36114: ST_TO_ADDR
// end ;
36115: LD_VAR 0 1
36119: RET
// export function PrepareMastodont ( ) ; begin
36120: LD_INT 0
36122: PPUSH
// uc_side := 0 ;
36123: LD_ADDR_OWVAR 20
36127: PUSH
36128: LD_INT 0
36130: ST_TO_ADDR
// uc_nation := 0 ;
36131: LD_ADDR_OWVAR 21
36135: PUSH
36136: LD_INT 0
36138: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36139: LD_ADDR_OWVAR 37
36143: PUSH
36144: LD_INT 31
36146: ST_TO_ADDR
// vc_control := control_rider ;
36147: LD_ADDR_OWVAR 38
36151: PUSH
36152: LD_INT 4
36154: ST_TO_ADDR
// end ;
36155: LD_VAR 0 1
36159: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36160: LD_INT 0
36162: PPUSH
36163: PPUSH
36164: PPUSH
// uc_side = 0 ;
36165: LD_ADDR_OWVAR 20
36169: PUSH
36170: LD_INT 0
36172: ST_TO_ADDR
// uc_nation = 0 ;
36173: LD_ADDR_OWVAR 21
36177: PUSH
36178: LD_INT 0
36180: ST_TO_ADDR
// InitHc_All ( ) ;
36181: CALL_OW 584
// InitVc ;
36185: CALL_OW 20
// if mastodonts then
36189: LD_VAR 0 6
36193: IFFALSE 36260
// for i = 1 to mastodonts do
36195: LD_ADDR_VAR 0 11
36199: PUSH
36200: DOUBLE
36201: LD_INT 1
36203: DEC
36204: ST_TO_ADDR
36205: LD_VAR 0 6
36209: PUSH
36210: FOR_TO
36211: IFFALSE 36258
// begin vc_chassis := 31 ;
36213: LD_ADDR_OWVAR 37
36217: PUSH
36218: LD_INT 31
36220: ST_TO_ADDR
// vc_control := control_rider ;
36221: LD_ADDR_OWVAR 38
36225: PUSH
36226: LD_INT 4
36228: ST_TO_ADDR
// animal := CreateVehicle ;
36229: LD_ADDR_VAR 0 12
36233: PUSH
36234: CALL_OW 45
36238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36239: LD_VAR 0 12
36243: PPUSH
36244: LD_VAR 0 8
36248: PPUSH
36249: LD_INT 0
36251: PPUSH
36252: CALL 38388 0 3
// end ;
36256: GO 36210
36258: POP
36259: POP
// if horses then
36260: LD_VAR 0 5
36264: IFFALSE 36331
// for i = 1 to horses do
36266: LD_ADDR_VAR 0 11
36270: PUSH
36271: DOUBLE
36272: LD_INT 1
36274: DEC
36275: ST_TO_ADDR
36276: LD_VAR 0 5
36280: PUSH
36281: FOR_TO
36282: IFFALSE 36329
// begin hc_class := 21 ;
36284: LD_ADDR_OWVAR 28
36288: PUSH
36289: LD_INT 21
36291: ST_TO_ADDR
// hc_gallery :=  ;
36292: LD_ADDR_OWVAR 33
36296: PUSH
36297: LD_STRING 
36299: ST_TO_ADDR
// animal := CreateHuman ;
36300: LD_ADDR_VAR 0 12
36304: PUSH
36305: CALL_OW 44
36309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36310: LD_VAR 0 12
36314: PPUSH
36315: LD_VAR 0 8
36319: PPUSH
36320: LD_INT 0
36322: PPUSH
36323: CALL 38388 0 3
// end ;
36327: GO 36281
36329: POP
36330: POP
// if birds then
36331: LD_VAR 0 1
36335: IFFALSE 36402
// for i = 1 to birds do
36337: LD_ADDR_VAR 0 11
36341: PUSH
36342: DOUBLE
36343: LD_INT 1
36345: DEC
36346: ST_TO_ADDR
36347: LD_VAR 0 1
36351: PUSH
36352: FOR_TO
36353: IFFALSE 36400
// begin hc_class := 18 ;
36355: LD_ADDR_OWVAR 28
36359: PUSH
36360: LD_INT 18
36362: ST_TO_ADDR
// hc_gallery =  ;
36363: LD_ADDR_OWVAR 33
36367: PUSH
36368: LD_STRING 
36370: ST_TO_ADDR
// animal := CreateHuman ;
36371: LD_ADDR_VAR 0 12
36375: PUSH
36376: CALL_OW 44
36380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36381: LD_VAR 0 12
36385: PPUSH
36386: LD_VAR 0 8
36390: PPUSH
36391: LD_INT 0
36393: PPUSH
36394: CALL 38388 0 3
// end ;
36398: GO 36352
36400: POP
36401: POP
// if tigers then
36402: LD_VAR 0 2
36406: IFFALSE 36490
// for i = 1 to tigers do
36408: LD_ADDR_VAR 0 11
36412: PUSH
36413: DOUBLE
36414: LD_INT 1
36416: DEC
36417: ST_TO_ADDR
36418: LD_VAR 0 2
36422: PUSH
36423: FOR_TO
36424: IFFALSE 36488
// begin hc_class = class_tiger ;
36426: LD_ADDR_OWVAR 28
36430: PUSH
36431: LD_INT 14
36433: ST_TO_ADDR
// hc_gallery =  ;
36434: LD_ADDR_OWVAR 33
36438: PUSH
36439: LD_STRING 
36441: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36442: LD_ADDR_OWVAR 35
36446: PUSH
36447: LD_INT 7
36449: NEG
36450: PPUSH
36451: LD_INT 7
36453: PPUSH
36454: CALL_OW 12
36458: ST_TO_ADDR
// animal := CreateHuman ;
36459: LD_ADDR_VAR 0 12
36463: PUSH
36464: CALL_OW 44
36468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36469: LD_VAR 0 12
36473: PPUSH
36474: LD_VAR 0 8
36478: PPUSH
36479: LD_INT 0
36481: PPUSH
36482: CALL 38388 0 3
// end ;
36486: GO 36423
36488: POP
36489: POP
// if apemans then
36490: LD_VAR 0 3
36494: IFFALSE 36617
// for i = 1 to apemans do
36496: LD_ADDR_VAR 0 11
36500: PUSH
36501: DOUBLE
36502: LD_INT 1
36504: DEC
36505: ST_TO_ADDR
36506: LD_VAR 0 3
36510: PUSH
36511: FOR_TO
36512: IFFALSE 36615
// begin hc_class = class_apeman ;
36514: LD_ADDR_OWVAR 28
36518: PUSH
36519: LD_INT 12
36521: ST_TO_ADDR
// hc_gallery =  ;
36522: LD_ADDR_OWVAR 33
36526: PUSH
36527: LD_STRING 
36529: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36530: LD_ADDR_OWVAR 35
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PPUSH
36539: LD_INT 2
36541: PPUSH
36542: CALL_OW 12
36546: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36547: LD_ADDR_OWVAR 31
36551: PUSH
36552: LD_INT 1
36554: PPUSH
36555: LD_INT 3
36557: PPUSH
36558: CALL_OW 12
36562: PUSH
36563: LD_INT 1
36565: PPUSH
36566: LD_INT 3
36568: PPUSH
36569: CALL_OW 12
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: ST_TO_ADDR
// animal := CreateHuman ;
36586: LD_ADDR_VAR 0 12
36590: PUSH
36591: CALL_OW 44
36595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36596: LD_VAR 0 12
36600: PPUSH
36601: LD_VAR 0 8
36605: PPUSH
36606: LD_INT 0
36608: PPUSH
36609: CALL 38388 0 3
// end ;
36613: GO 36511
36615: POP
36616: POP
// if enchidnas then
36617: LD_VAR 0 4
36621: IFFALSE 36688
// for i = 1 to enchidnas do
36623: LD_ADDR_VAR 0 11
36627: PUSH
36628: DOUBLE
36629: LD_INT 1
36631: DEC
36632: ST_TO_ADDR
36633: LD_VAR 0 4
36637: PUSH
36638: FOR_TO
36639: IFFALSE 36686
// begin hc_class = 13 ;
36641: LD_ADDR_OWVAR 28
36645: PUSH
36646: LD_INT 13
36648: ST_TO_ADDR
// hc_gallery =  ;
36649: LD_ADDR_OWVAR 33
36653: PUSH
36654: LD_STRING 
36656: ST_TO_ADDR
// animal := CreateHuman ;
36657: LD_ADDR_VAR 0 12
36661: PUSH
36662: CALL_OW 44
36666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36667: LD_VAR 0 12
36671: PPUSH
36672: LD_VAR 0 8
36676: PPUSH
36677: LD_INT 0
36679: PPUSH
36680: CALL 38388 0 3
// end ;
36684: GO 36638
36686: POP
36687: POP
// if fishes then
36688: LD_VAR 0 7
36692: IFFALSE 36759
// for i = 1 to fishes do
36694: LD_ADDR_VAR 0 11
36698: PUSH
36699: DOUBLE
36700: LD_INT 1
36702: DEC
36703: ST_TO_ADDR
36704: LD_VAR 0 7
36708: PUSH
36709: FOR_TO
36710: IFFALSE 36757
// begin hc_class = 20 ;
36712: LD_ADDR_OWVAR 28
36716: PUSH
36717: LD_INT 20
36719: ST_TO_ADDR
// hc_gallery =  ;
36720: LD_ADDR_OWVAR 33
36724: PUSH
36725: LD_STRING 
36727: ST_TO_ADDR
// animal := CreateHuman ;
36728: LD_ADDR_VAR 0 12
36732: PUSH
36733: CALL_OW 44
36737: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36738: LD_VAR 0 12
36742: PPUSH
36743: LD_VAR 0 9
36747: PPUSH
36748: LD_INT 0
36750: PPUSH
36751: CALL 38388 0 3
// end ;
36755: GO 36709
36757: POP
36758: POP
// end ;
36759: LD_VAR 0 10
36763: RET
// export function WantHeal ( sci , unit ) ; begin
36764: LD_INT 0
36766: PPUSH
// if GetTaskList ( sci ) > 0 then
36767: LD_VAR 0 1
36771: PPUSH
36772: CALL_OW 437
36776: PUSH
36777: LD_INT 0
36779: GREATER
36780: IFFALSE 36850
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36782: LD_VAR 0 1
36786: PPUSH
36787: CALL_OW 437
36791: PUSH
36792: LD_INT 1
36794: ARRAY
36795: PUSH
36796: LD_INT 1
36798: ARRAY
36799: PUSH
36800: LD_STRING l
36802: EQUAL
36803: PUSH
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL_OW 437
36813: PUSH
36814: LD_INT 1
36816: ARRAY
36817: PUSH
36818: LD_INT 4
36820: ARRAY
36821: PUSH
36822: LD_VAR 0 2
36826: EQUAL
36827: AND
36828: IFFALSE 36840
// result := true else
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_INT 1
36837: ST_TO_ADDR
36838: GO 36848
// result := false ;
36840: LD_ADDR_VAR 0 3
36844: PUSH
36845: LD_INT 0
36847: ST_TO_ADDR
// end else
36848: GO 36858
// result := false ;
36850: LD_ADDR_VAR 0 3
36854: PUSH
36855: LD_INT 0
36857: ST_TO_ADDR
// end ;
36858: LD_VAR 0 3
36862: RET
// export function HealTarget ( sci ) ; begin
36863: LD_INT 0
36865: PPUSH
// if not sci then
36866: LD_VAR 0 1
36870: NOT
36871: IFFALSE 36875
// exit ;
36873: GO 36940
// result := 0 ;
36875: LD_ADDR_VAR 0 2
36879: PUSH
36880: LD_INT 0
36882: ST_TO_ADDR
// if GetTaskList ( sci ) then
36883: LD_VAR 0 1
36887: PPUSH
36888: CALL_OW 437
36892: IFFALSE 36940
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 437
36903: PUSH
36904: LD_INT 1
36906: ARRAY
36907: PUSH
36908: LD_INT 1
36910: ARRAY
36911: PUSH
36912: LD_STRING l
36914: EQUAL
36915: IFFALSE 36940
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36917: LD_ADDR_VAR 0 2
36921: PUSH
36922: LD_VAR 0 1
36926: PPUSH
36927: CALL_OW 437
36931: PUSH
36932: LD_INT 1
36934: ARRAY
36935: PUSH
36936: LD_INT 4
36938: ARRAY
36939: ST_TO_ADDR
// end ;
36940: LD_VAR 0 2
36944: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36945: LD_INT 0
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
// if not base_units then
36951: LD_VAR 0 1
36955: NOT
36956: IFFALSE 36960
// exit ;
36958: GO 37047
// result := false ;
36960: LD_ADDR_VAR 0 2
36964: PUSH
36965: LD_INT 0
36967: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36968: LD_ADDR_VAR 0 5
36972: PUSH
36973: LD_VAR 0 1
36977: PPUSH
36978: LD_INT 21
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PPUSH
36988: CALL_OW 72
36992: ST_TO_ADDR
// if not tmp then
36993: LD_VAR 0 5
36997: NOT
36998: IFFALSE 37002
// exit ;
37000: GO 37047
// for i in tmp do
37002: LD_ADDR_VAR 0 3
37006: PUSH
37007: LD_VAR 0 5
37011: PUSH
37012: FOR_IN
37013: IFFALSE 37045
// begin result := EnemyInRange ( i , 22 ) ;
37015: LD_ADDR_VAR 0 2
37019: PUSH
37020: LD_VAR 0 3
37024: PPUSH
37025: LD_INT 22
37027: PPUSH
37028: CALL 34634 0 2
37032: ST_TO_ADDR
// if result then
37033: LD_VAR 0 2
37037: IFFALSE 37043
// exit ;
37039: POP
37040: POP
37041: GO 37047
// end ;
37043: GO 37012
37045: POP
37046: POP
// end ;
37047: LD_VAR 0 2
37051: RET
// export function FilterByTag ( units , tag ) ; begin
37052: LD_INT 0
37054: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37055: LD_ADDR_VAR 0 3
37059: PUSH
37060: LD_VAR 0 1
37064: PPUSH
37065: LD_INT 120
37067: PUSH
37068: LD_VAR 0 2
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PPUSH
37077: CALL_OW 72
37081: ST_TO_ADDR
// end ;
37082: LD_VAR 0 3
37086: RET
// export function IsDriver ( un ) ; begin
37087: LD_INT 0
37089: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37090: LD_ADDR_VAR 0 2
37094: PUSH
37095: LD_VAR 0 1
37099: PUSH
37100: LD_INT 55
37102: PUSH
37103: EMPTY
37104: LIST
37105: PPUSH
37106: CALL_OW 69
37110: IN
37111: ST_TO_ADDR
// end ;
37112: LD_VAR 0 2
37116: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37117: LD_INT 0
37119: PPUSH
37120: PPUSH
// list := [ ] ;
37121: LD_ADDR_VAR 0 5
37125: PUSH
37126: EMPTY
37127: ST_TO_ADDR
// case d of 0 :
37128: LD_VAR 0 3
37132: PUSH
37133: LD_INT 0
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37274
37141: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37142: LD_ADDR_VAR 0 5
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: LD_INT 4
37154: MINUS
37155: PUSH
37156: LD_VAR 0 2
37160: PUSH
37161: LD_INT 4
37163: MINUS
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: PUSH
37173: LD_VAR 0 1
37177: PUSH
37178: LD_INT 3
37180: MINUS
37181: PUSH
37182: LD_VAR 0 2
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: LD_VAR 0 1
37199: PUSH
37200: LD_INT 4
37202: PLUS
37203: PUSH
37204: LD_VAR 0 2
37208: PUSH
37209: LD_INT 4
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: PUSH
37217: LD_VAR 0 1
37221: PUSH
37222: LD_INT 3
37224: PLUS
37225: PUSH
37226: LD_VAR 0 2
37230: PUSH
37231: LD_INT 3
37233: PLUS
37234: PUSH
37235: LD_INT 5
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: LD_VAR 0 1
37247: PUSH
37248: LD_VAR 0 2
37252: PUSH
37253: LD_INT 4
37255: PLUS
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
// end ; 1 :
37272: GO 37972
37274: LD_INT 1
37276: DOUBLE
37277: EQUAL
37278: IFTRUE 37282
37280: GO 37415
37282: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37283: LD_ADDR_VAR 0 5
37287: PUSH
37288: LD_VAR 0 1
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 4
37300: MINUS
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: PUSH
37310: LD_VAR 0 1
37314: PUSH
37315: LD_INT 3
37317: MINUS
37318: PUSH
37319: LD_VAR 0 2
37323: PUSH
37324: LD_INT 3
37326: MINUS
37327: PUSH
37328: LD_INT 2
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: PUSH
37336: LD_VAR 0 1
37340: PUSH
37341: LD_INT 4
37343: MINUS
37344: PUSH
37345: LD_VAR 0 2
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PUSH
37358: LD_VAR 0 1
37362: PUSH
37363: LD_VAR 0 2
37367: PUSH
37368: LD_INT 3
37370: PLUS
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: PUSH
37380: LD_VAR 0 1
37384: PUSH
37385: LD_INT 4
37387: PLUS
37388: PUSH
37389: LD_VAR 0 2
37393: PUSH
37394: LD_INT 4
37396: PLUS
37397: PUSH
37398: LD_INT 5
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// end ; 2 :
37413: GO 37972
37415: LD_INT 2
37417: DOUBLE
37418: EQUAL
37419: IFTRUE 37423
37421: GO 37552
37423: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37424: LD_ADDR_VAR 0 5
37428: PUSH
37429: LD_VAR 0 1
37433: PUSH
37434: LD_VAR 0 2
37438: PUSH
37439: LD_INT 3
37441: MINUS
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PUSH
37451: LD_VAR 0 1
37455: PUSH
37456: LD_INT 4
37458: PLUS
37459: PUSH
37460: LD_VAR 0 2
37464: PUSH
37465: LD_INT 4
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PUSH
37473: LD_VAR 0 1
37477: PUSH
37478: LD_VAR 0 2
37482: PUSH
37483: LD_INT 4
37485: PLUS
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PUSH
37495: LD_VAR 0 1
37499: PUSH
37500: LD_INT 3
37502: MINUS
37503: PUSH
37504: LD_VAR 0 2
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: PUSH
37517: LD_VAR 0 1
37521: PUSH
37522: LD_INT 4
37524: MINUS
37525: PUSH
37526: LD_VAR 0 2
37530: PUSH
37531: LD_INT 4
37533: MINUS
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: ST_TO_ADDR
// end ; 3 :
37550: GO 37972
37552: LD_INT 3
37554: DOUBLE
37555: EQUAL
37556: IFTRUE 37560
37558: GO 37693
37560: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37561: LD_ADDR_VAR 0 5
37565: PUSH
37566: LD_VAR 0 1
37570: PUSH
37571: LD_INT 3
37573: PLUS
37574: PUSH
37575: LD_VAR 0 2
37579: PUSH
37580: LD_INT 4
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: LD_INT 4
37595: PLUS
37596: PUSH
37597: LD_VAR 0 2
37601: PUSH
37602: LD_INT 4
37604: PLUS
37605: PUSH
37606: LD_INT 5
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: PUSH
37614: LD_VAR 0 1
37618: PUSH
37619: LD_INT 4
37621: MINUS
37622: PUSH
37623: LD_VAR 0 2
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: PUSH
37636: LD_VAR 0 1
37640: PUSH
37641: LD_VAR 0 2
37645: PUSH
37646: LD_INT 4
37648: MINUS
37649: PUSH
37650: LD_INT 3
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: PUSH
37658: LD_VAR 0 1
37662: PUSH
37663: LD_INT 3
37665: MINUS
37666: PUSH
37667: LD_VAR 0 2
37671: PUSH
37672: LD_INT 3
37674: MINUS
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: ST_TO_ADDR
// end ; 4 :
37691: GO 37972
37693: LD_INT 4
37695: DOUBLE
37696: EQUAL
37697: IFTRUE 37701
37699: GO 37834
37701: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37702: LD_ADDR_VAR 0 5
37706: PUSH
37707: LD_VAR 0 1
37711: PUSH
37712: LD_VAR 0 2
37716: PUSH
37717: LD_INT 4
37719: PLUS
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: PUSH
37729: LD_VAR 0 1
37733: PUSH
37734: LD_INT 3
37736: PLUS
37737: PUSH
37738: LD_VAR 0 2
37742: PUSH
37743: LD_INT 3
37745: PLUS
37746: PUSH
37747: LD_INT 5
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: PUSH
37755: LD_VAR 0 1
37759: PUSH
37760: LD_INT 4
37762: PLUS
37763: PUSH
37764: LD_VAR 0 2
37768: PUSH
37769: LD_INT 4
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: PUSH
37777: LD_VAR 0 1
37781: PUSH
37782: LD_VAR 0 2
37786: PUSH
37787: LD_INT 3
37789: MINUS
37790: PUSH
37791: LD_INT 3
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: PUSH
37799: LD_VAR 0 1
37803: PUSH
37804: LD_INT 4
37806: MINUS
37807: PUSH
37808: LD_VAR 0 2
37812: PUSH
37813: LD_INT 4
37815: MINUS
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// end ; 5 :
37832: GO 37972
37834: LD_INT 5
37836: DOUBLE
37837: EQUAL
37838: IFTRUE 37842
37840: GO 37971
37842: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37843: LD_ADDR_VAR 0 5
37847: PUSH
37848: LD_VAR 0 1
37852: PUSH
37853: LD_INT 4
37855: MINUS
37856: PUSH
37857: LD_VAR 0 2
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: PUSH
37870: LD_VAR 0 1
37874: PUSH
37875: LD_VAR 0 2
37879: PUSH
37880: LD_INT 4
37882: MINUS
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: PUSH
37892: LD_VAR 0 1
37896: PUSH
37897: LD_INT 4
37899: PLUS
37900: PUSH
37901: LD_VAR 0 2
37905: PUSH
37906: LD_INT 4
37908: PLUS
37909: PUSH
37910: LD_INT 5
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: PUSH
37918: LD_VAR 0 1
37922: PUSH
37923: LD_INT 3
37925: PLUS
37926: PUSH
37927: LD_VAR 0 2
37931: PUSH
37932: LD_INT 4
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: PUSH
37940: LD_VAR 0 1
37944: PUSH
37945: LD_VAR 0 2
37949: PUSH
37950: LD_INT 3
37952: PLUS
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: ST_TO_ADDR
// end ; end ;
37969: GO 37972
37971: POP
// result := list ;
37972: LD_ADDR_VAR 0 4
37976: PUSH
37977: LD_VAR 0 5
37981: ST_TO_ADDR
// end ;
37982: LD_VAR 0 4
37986: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37987: LD_INT 0
37989: PPUSH
37990: PPUSH
37991: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37992: LD_VAR 0 1
37996: NOT
37997: PUSH
37998: LD_VAR 0 2
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: LD_INT 4
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: IN
38021: NOT
38022: OR
38023: IFFALSE 38027
// exit ;
38025: GO 38110
// tmp := [ ] ;
38027: LD_ADDR_VAR 0 5
38031: PUSH
38032: EMPTY
38033: ST_TO_ADDR
// for i in units do
38034: LD_ADDR_VAR 0 4
38038: PUSH
38039: LD_VAR 0 1
38043: PUSH
38044: FOR_IN
38045: IFFALSE 38079
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38047: LD_ADDR_VAR 0 5
38051: PUSH
38052: LD_VAR 0 5
38056: PPUSH
38057: LD_VAR 0 4
38061: PPUSH
38062: LD_VAR 0 2
38066: PPUSH
38067: CALL_OW 259
38071: PPUSH
38072: CALL 39483 0 2
38076: ST_TO_ADDR
38077: GO 38044
38079: POP
38080: POP
// if not tmp then
38081: LD_VAR 0 5
38085: NOT
38086: IFFALSE 38090
// exit ;
38088: GO 38110
// result := SortListByListDesc ( units , tmp ) ;
38090: LD_ADDR_VAR 0 3
38094: PUSH
38095: LD_VAR 0 1
38099: PPUSH
38100: LD_VAR 0 5
38104: PPUSH
38105: CALL_OW 77
38109: ST_TO_ADDR
// end ;
38110: LD_VAR 0 3
38114: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38115: LD_INT 0
38117: PPUSH
38118: PPUSH
38119: PPUSH
// result := false ;
38120: LD_ADDR_VAR 0 3
38124: PUSH
38125: LD_INT 0
38127: ST_TO_ADDR
// if not building then
38128: LD_VAR 0 2
38132: NOT
38133: IFFALSE 38137
// exit ;
38135: GO 38275
// x := GetX ( building ) ;
38137: LD_ADDR_VAR 0 4
38141: PUSH
38142: LD_VAR 0 2
38146: PPUSH
38147: CALL_OW 250
38151: ST_TO_ADDR
// y := GetY ( building ) ;
38152: LD_ADDR_VAR 0 5
38156: PUSH
38157: LD_VAR 0 2
38161: PPUSH
38162: CALL_OW 251
38166: ST_TO_ADDR
// if not x or not y then
38167: LD_VAR 0 4
38171: NOT
38172: PUSH
38173: LD_VAR 0 5
38177: NOT
38178: OR
38179: IFFALSE 38183
// exit ;
38181: GO 38275
// if GetTaskList ( unit ) then
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 437
38192: IFFALSE 38275
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38194: LD_STRING e
38196: PUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 437
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: PUSH
38211: LD_INT 1
38213: ARRAY
38214: EQUAL
38215: PUSH
38216: LD_VAR 0 4
38220: PUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 437
38230: PUSH
38231: LD_INT 1
38233: ARRAY
38234: PUSH
38235: LD_INT 2
38237: ARRAY
38238: EQUAL
38239: AND
38240: PUSH
38241: LD_VAR 0 5
38245: PUSH
38246: LD_VAR 0 1
38250: PPUSH
38251: CALL_OW 437
38255: PUSH
38256: LD_INT 1
38258: ARRAY
38259: PUSH
38260: LD_INT 3
38262: ARRAY
38263: EQUAL
38264: AND
38265: IFFALSE 38275
// result := true end ;
38267: LD_ADDR_VAR 0 3
38271: PUSH
38272: LD_INT 1
38274: ST_TO_ADDR
// end ;
38275: LD_VAR 0 3
38279: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38280: LD_INT 0
38282: PPUSH
// result := false ;
38283: LD_ADDR_VAR 0 4
38287: PUSH
38288: LD_INT 0
38290: ST_TO_ADDR
// if GetTaskList ( unit ) then
38291: LD_VAR 0 1
38295: PPUSH
38296: CALL_OW 437
38300: IFFALSE 38383
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38302: LD_STRING M
38304: PUSH
38305: LD_VAR 0 1
38309: PPUSH
38310: CALL_OW 437
38314: PUSH
38315: LD_INT 1
38317: ARRAY
38318: PUSH
38319: LD_INT 1
38321: ARRAY
38322: EQUAL
38323: PUSH
38324: LD_VAR 0 2
38328: PUSH
38329: LD_VAR 0 1
38333: PPUSH
38334: CALL_OW 437
38338: PUSH
38339: LD_INT 1
38341: ARRAY
38342: PUSH
38343: LD_INT 2
38345: ARRAY
38346: EQUAL
38347: AND
38348: PUSH
38349: LD_VAR 0 3
38353: PUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL_OW 437
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PUSH
38368: LD_INT 3
38370: ARRAY
38371: EQUAL
38372: AND
38373: IFFALSE 38383
// result := true ;
38375: LD_ADDR_VAR 0 4
38379: PUSH
38380: LD_INT 1
38382: ST_TO_ADDR
// end ; end ;
38383: LD_VAR 0 4
38387: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38388: LD_INT 0
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
// if not unit or not area then
38394: LD_VAR 0 1
38398: NOT
38399: PUSH
38400: LD_VAR 0 2
38404: NOT
38405: OR
38406: IFFALSE 38410
// exit ;
38408: GO 38586
// tmp := AreaToList ( area , i ) ;
38410: LD_ADDR_VAR 0 6
38414: PUSH
38415: LD_VAR 0 2
38419: PPUSH
38420: LD_VAR 0 5
38424: PPUSH
38425: CALL_OW 517
38429: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38430: LD_ADDR_VAR 0 5
38434: PUSH
38435: DOUBLE
38436: LD_INT 1
38438: DEC
38439: ST_TO_ADDR
38440: LD_VAR 0 6
38444: PUSH
38445: LD_INT 1
38447: ARRAY
38448: PUSH
38449: FOR_TO
38450: IFFALSE 38584
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38452: LD_ADDR_VAR 0 7
38456: PUSH
38457: LD_VAR 0 6
38461: PUSH
38462: LD_INT 1
38464: ARRAY
38465: PUSH
38466: LD_VAR 0 5
38470: ARRAY
38471: PUSH
38472: LD_VAR 0 6
38476: PUSH
38477: LD_INT 2
38479: ARRAY
38480: PUSH
38481: LD_VAR 0 5
38485: ARRAY
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38491: LD_INT 92
38493: PUSH
38494: LD_VAR 0 7
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: PUSH
38503: LD_VAR 0 7
38507: PUSH
38508: LD_INT 2
38510: ARRAY
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: PPUSH
38521: CALL_OW 69
38525: PUSH
38526: LD_INT 0
38528: EQUAL
38529: IFFALSE 38582
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38531: LD_VAR 0 1
38535: PPUSH
38536: LD_VAR 0 7
38540: PUSH
38541: LD_INT 1
38543: ARRAY
38544: PPUSH
38545: LD_VAR 0 7
38549: PUSH
38550: LD_INT 2
38552: ARRAY
38553: PPUSH
38554: LD_VAR 0 3
38558: PPUSH
38559: CALL_OW 48
// result := IsPlaced ( unit ) ;
38563: LD_ADDR_VAR 0 4
38567: PUSH
38568: LD_VAR 0 1
38572: PPUSH
38573: CALL_OW 305
38577: ST_TO_ADDR
// exit ;
38578: POP
38579: POP
38580: GO 38586
// end ; end ;
38582: GO 38449
38584: POP
38585: POP
// end ;
38586: LD_VAR 0 4
38590: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38591: LD_INT 0
38593: PPUSH
38594: PPUSH
38595: PPUSH
// if not side or side > 8 then
38596: LD_VAR 0 1
38600: NOT
38601: PUSH
38602: LD_VAR 0 1
38606: PUSH
38607: LD_INT 8
38609: GREATER
38610: OR
38611: IFFALSE 38615
// exit ;
38613: GO 38802
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38615: LD_ADDR_VAR 0 4
38619: PUSH
38620: LD_INT 22
38622: PUSH
38623: LD_VAR 0 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 21
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PPUSH
38646: CALL_OW 69
38650: ST_TO_ADDR
// if not tmp then
38651: LD_VAR 0 4
38655: NOT
38656: IFFALSE 38660
// exit ;
38658: GO 38802
// enable_addtolog := true ;
38660: LD_ADDR_OWVAR 81
38664: PUSH
38665: LD_INT 1
38667: ST_TO_ADDR
// AddToLog ( [ ) ;
38668: LD_STRING [
38670: PPUSH
38671: CALL_OW 561
// for i in tmp do
38675: LD_ADDR_VAR 0 3
38679: PUSH
38680: LD_VAR 0 4
38684: PUSH
38685: FOR_IN
38686: IFFALSE 38793
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38688: LD_STRING [
38690: PUSH
38691: LD_VAR 0 3
38695: PPUSH
38696: CALL_OW 266
38700: STR
38701: PUSH
38702: LD_STRING , 
38704: STR
38705: PUSH
38706: LD_VAR 0 3
38710: PPUSH
38711: CALL_OW 250
38715: STR
38716: PUSH
38717: LD_STRING , 
38719: STR
38720: PUSH
38721: LD_VAR 0 3
38725: PPUSH
38726: CALL_OW 251
38730: STR
38731: PUSH
38732: LD_STRING , 
38734: STR
38735: PUSH
38736: LD_VAR 0 3
38740: PPUSH
38741: CALL_OW 254
38745: STR
38746: PUSH
38747: LD_STRING , 
38749: STR
38750: PUSH
38751: LD_VAR 0 3
38755: PPUSH
38756: LD_INT 1
38758: PPUSH
38759: CALL_OW 268
38763: STR
38764: PUSH
38765: LD_STRING , 
38767: STR
38768: PUSH
38769: LD_VAR 0 3
38773: PPUSH
38774: LD_INT 2
38776: PPUSH
38777: CALL_OW 268
38781: STR
38782: PUSH
38783: LD_STRING ],
38785: STR
38786: PPUSH
38787: CALL_OW 561
// end ;
38791: GO 38685
38793: POP
38794: POP
// AddToLog ( ]; ) ;
38795: LD_STRING ];
38797: PPUSH
38798: CALL_OW 561
// end ;
38802: LD_VAR 0 2
38806: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38807: LD_INT 0
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
38813: PPUSH
// if not area or not rate or not max then
38814: LD_VAR 0 1
38818: NOT
38819: PUSH
38820: LD_VAR 0 2
38824: NOT
38825: OR
38826: PUSH
38827: LD_VAR 0 4
38831: NOT
38832: OR
38833: IFFALSE 38837
// exit ;
38835: GO 39026
// while 1 do
38837: LD_INT 1
38839: IFFALSE 39026
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38841: LD_ADDR_VAR 0 9
38845: PUSH
38846: LD_VAR 0 1
38850: PPUSH
38851: LD_INT 1
38853: PPUSH
38854: CALL_OW 287
38858: PUSH
38859: LD_INT 10
38861: MUL
38862: ST_TO_ADDR
// r := rate / 10 ;
38863: LD_ADDR_VAR 0 7
38867: PUSH
38868: LD_VAR 0 2
38872: PUSH
38873: LD_INT 10
38875: DIVREAL
38876: ST_TO_ADDR
// time := 1 1$00 ;
38877: LD_ADDR_VAR 0 8
38881: PUSH
38882: LD_INT 2100
38884: ST_TO_ADDR
// if amount < min then
38885: LD_VAR 0 9
38889: PUSH
38890: LD_VAR 0 3
38894: LESS
38895: IFFALSE 38913
// r := r * 2 else
38897: LD_ADDR_VAR 0 7
38901: PUSH
38902: LD_VAR 0 7
38906: PUSH
38907: LD_INT 2
38909: MUL
38910: ST_TO_ADDR
38911: GO 38939
// if amount > max then
38913: LD_VAR 0 9
38917: PUSH
38918: LD_VAR 0 4
38922: GREATER
38923: IFFALSE 38939
// r := r / 2 ;
38925: LD_ADDR_VAR 0 7
38929: PUSH
38930: LD_VAR 0 7
38934: PUSH
38935: LD_INT 2
38937: DIVREAL
38938: ST_TO_ADDR
// time := time / r ;
38939: LD_ADDR_VAR 0 8
38943: PUSH
38944: LD_VAR 0 8
38948: PUSH
38949: LD_VAR 0 7
38953: DIVREAL
38954: ST_TO_ADDR
// if time < 0 then
38955: LD_VAR 0 8
38959: PUSH
38960: LD_INT 0
38962: LESS
38963: IFFALSE 38980
// time := time * - 1 ;
38965: LD_ADDR_VAR 0 8
38969: PUSH
38970: LD_VAR 0 8
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: MUL
38979: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38980: LD_VAR 0 8
38984: PUSH
38985: LD_INT 35
38987: PPUSH
38988: LD_INT 875
38990: PPUSH
38991: CALL_OW 12
38995: PLUS
38996: PPUSH
38997: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39001: LD_INT 1
39003: PPUSH
39004: LD_INT 5
39006: PPUSH
39007: CALL_OW 12
39011: PPUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: LD_INT 1
39019: PPUSH
39020: CALL_OW 55
// end ;
39024: GO 38837
// end ;
39026: LD_VAR 0 5
39030: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39031: LD_INT 0
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
39040: PPUSH
// if not turrets or not factories then
39041: LD_VAR 0 1
39045: NOT
39046: PUSH
39047: LD_VAR 0 2
39051: NOT
39052: OR
39053: IFFALSE 39057
// exit ;
39055: GO 39364
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39057: LD_ADDR_VAR 0 10
39061: PUSH
39062: LD_INT 5
39064: PUSH
39065: LD_INT 6
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: LD_INT 4
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: LD_INT 5
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 24
39099: PUSH
39100: LD_INT 25
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 23
39109: PUSH
39110: LD_INT 27
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 42
39123: PUSH
39124: LD_INT 43
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 44
39133: PUSH
39134: LD_INT 46
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 45
39143: PUSH
39144: LD_INT 47
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: ST_TO_ADDR
// result := [ ] ;
39161: LD_ADDR_VAR 0 3
39165: PUSH
39166: EMPTY
39167: ST_TO_ADDR
// for i in turrets do
39168: LD_ADDR_VAR 0 4
39172: PUSH
39173: LD_VAR 0 1
39177: PUSH
39178: FOR_IN
39179: IFFALSE 39362
// begin nat := GetNation ( i ) ;
39181: LD_ADDR_VAR 0 7
39185: PUSH
39186: LD_VAR 0 4
39190: PPUSH
39191: CALL_OW 248
39195: ST_TO_ADDR
// weapon := 0 ;
39196: LD_ADDR_VAR 0 8
39200: PUSH
39201: LD_INT 0
39203: ST_TO_ADDR
// if not nat then
39204: LD_VAR 0 7
39208: NOT
39209: IFFALSE 39213
// continue ;
39211: GO 39178
// for j in list [ nat ] do
39213: LD_ADDR_VAR 0 5
39217: PUSH
39218: LD_VAR 0 10
39222: PUSH
39223: LD_VAR 0 7
39227: ARRAY
39228: PUSH
39229: FOR_IN
39230: IFFALSE 39271
// if GetBWeapon ( i ) = j [ 1 ] then
39232: LD_VAR 0 4
39236: PPUSH
39237: CALL_OW 269
39241: PUSH
39242: LD_VAR 0 5
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: EQUAL
39251: IFFALSE 39269
// begin weapon := j [ 2 ] ;
39253: LD_ADDR_VAR 0 8
39257: PUSH
39258: LD_VAR 0 5
39262: PUSH
39263: LD_INT 2
39265: ARRAY
39266: ST_TO_ADDR
// break ;
39267: GO 39271
// end ;
39269: GO 39229
39271: POP
39272: POP
// if not weapon then
39273: LD_VAR 0 8
39277: NOT
39278: IFFALSE 39282
// continue ;
39280: GO 39178
// for k in factories do
39282: LD_ADDR_VAR 0 6
39286: PUSH
39287: LD_VAR 0 2
39291: PUSH
39292: FOR_IN
39293: IFFALSE 39358
// begin weapons := AvailableWeaponList ( k ) ;
39295: LD_ADDR_VAR 0 9
39299: PUSH
39300: LD_VAR 0 6
39304: PPUSH
39305: CALL_OW 478
39309: ST_TO_ADDR
// if not weapons then
39310: LD_VAR 0 9
39314: NOT
39315: IFFALSE 39319
// continue ;
39317: GO 39292
// if weapon in weapons then
39319: LD_VAR 0 8
39323: PUSH
39324: LD_VAR 0 9
39328: IN
39329: IFFALSE 39356
// begin result := [ i , weapon ] ;
39331: LD_ADDR_VAR 0 3
39335: PUSH
39336: LD_VAR 0 4
39340: PUSH
39341: LD_VAR 0 8
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// exit ;
39350: POP
39351: POP
39352: POP
39353: POP
39354: GO 39364
// end ; end ;
39356: GO 39292
39358: POP
39359: POP
// end ;
39360: GO 39178
39362: POP
39363: POP
// end ;
39364: LD_VAR 0 3
39368: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39369: LD_INT 0
39371: PPUSH
// if not side or side > 8 then
39372: LD_VAR 0 3
39376: NOT
39377: PUSH
39378: LD_VAR 0 3
39382: PUSH
39383: LD_INT 8
39385: GREATER
39386: OR
39387: IFFALSE 39391
// exit ;
39389: GO 39450
// if not range then
39391: LD_VAR 0 4
39395: NOT
39396: IFFALSE 39407
// range := - 12 ;
39398: LD_ADDR_VAR 0 4
39402: PUSH
39403: LD_INT 12
39405: NEG
39406: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39407: LD_VAR 0 1
39411: PPUSH
39412: LD_VAR 0 2
39416: PPUSH
39417: LD_VAR 0 3
39421: PPUSH
39422: LD_VAR 0 4
39426: PPUSH
39427: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39431: LD_VAR 0 1
39435: PPUSH
39436: LD_VAR 0 2
39440: PPUSH
39441: LD_VAR 0 3
39445: PPUSH
39446: CALL_OW 331
// end ;
39450: LD_VAR 0 5
39454: RET
// export function Video ( mode ) ; begin
39455: LD_INT 0
39457: PPUSH
// ingame_video = mode ;
39458: LD_ADDR_OWVAR 52
39462: PUSH
39463: LD_VAR 0 1
39467: ST_TO_ADDR
// interface_hidden = mode ;
39468: LD_ADDR_OWVAR 54
39472: PUSH
39473: LD_VAR 0 1
39477: ST_TO_ADDR
// end ;
39478: LD_VAR 0 2
39482: RET
// export function Join ( array , element ) ; begin
39483: LD_INT 0
39485: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39486: LD_ADDR_VAR 0 3
39490: PUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: LD_VAR 0 1
39500: PUSH
39501: LD_INT 1
39503: PLUS
39504: PPUSH
39505: LD_VAR 0 2
39509: PPUSH
39510: CALL_OW 1
39514: ST_TO_ADDR
// end ;
39515: LD_VAR 0 3
39519: RET
// export function JoinUnion ( array , element ) ; begin
39520: LD_INT 0
39522: PPUSH
// result := array union element ;
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_VAR 0 1
39532: PUSH
39533: LD_VAR 0 2
39537: UNION
39538: ST_TO_ADDR
// end ;
39539: LD_VAR 0 3
39543: RET
// export function GetBehemoths ( side ) ; begin
39544: LD_INT 0
39546: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39547: LD_ADDR_VAR 0 2
39551: PUSH
39552: LD_INT 22
39554: PUSH
39555: LD_VAR 0 1
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 31
39566: PUSH
39567: LD_INT 25
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PPUSH
39578: CALL_OW 69
39582: ST_TO_ADDR
// end ;
39583: LD_VAR 0 2
39587: RET
// export function Shuffle ( array ) ; var i , index ; begin
39588: LD_INT 0
39590: PPUSH
39591: PPUSH
39592: PPUSH
// result := [ ] ;
39593: LD_ADDR_VAR 0 2
39597: PUSH
39598: EMPTY
39599: ST_TO_ADDR
// if not array then
39600: LD_VAR 0 1
39604: NOT
39605: IFFALSE 39609
// exit ;
39607: GO 39708
// Randomize ;
39609: CALL_OW 10
// for i = array downto 1 do
39613: LD_ADDR_VAR 0 3
39617: PUSH
39618: DOUBLE
39619: LD_VAR 0 1
39623: INC
39624: ST_TO_ADDR
39625: LD_INT 1
39627: PUSH
39628: FOR_DOWNTO
39629: IFFALSE 39706
// begin index := rand ( 1 , array ) ;
39631: LD_ADDR_VAR 0 4
39635: PUSH
39636: LD_INT 1
39638: PPUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 12
39648: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39649: LD_ADDR_VAR 0 2
39653: PUSH
39654: LD_VAR 0 2
39658: PPUSH
39659: LD_VAR 0 2
39663: PUSH
39664: LD_INT 1
39666: PLUS
39667: PPUSH
39668: LD_VAR 0 1
39672: PUSH
39673: LD_VAR 0 4
39677: ARRAY
39678: PPUSH
39679: CALL_OW 2
39683: ST_TO_ADDR
// array := Delete ( array , index ) ;
39684: LD_ADDR_VAR 0 1
39688: PUSH
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_VAR 0 4
39698: PPUSH
39699: CALL_OW 3
39703: ST_TO_ADDR
// end ;
39704: GO 39628
39706: POP
39707: POP
// end ;
39708: LD_VAR 0 2
39712: RET
// export function GetBaseMaterials ( base ) ; begin
39713: LD_INT 0
39715: PPUSH
// result := [ 0 , 0 , 0 ] ;
39716: LD_ADDR_VAR 0 2
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: ST_TO_ADDR
// if not base then
39735: LD_VAR 0 1
39739: NOT
39740: IFFALSE 39744
// exit ;
39742: GO 39793
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39744: LD_ADDR_VAR 0 2
39748: PUSH
39749: LD_VAR 0 1
39753: PPUSH
39754: LD_INT 1
39756: PPUSH
39757: CALL_OW 275
39761: PUSH
39762: LD_VAR 0 1
39766: PPUSH
39767: LD_INT 2
39769: PPUSH
39770: CALL_OW 275
39774: PUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: LD_INT 3
39782: PPUSH
39783: CALL_OW 275
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// end ;
39793: LD_VAR 0 2
39797: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39798: LD_INT 0
39800: PPUSH
39801: PPUSH
// result := array ;
39802: LD_ADDR_VAR 0 3
39806: PUSH
39807: LD_VAR 0 1
39811: ST_TO_ADDR
// if size >= result then
39812: LD_VAR 0 2
39816: PUSH
39817: LD_VAR 0 3
39821: GREATEREQUAL
39822: IFFALSE 39826
// exit ;
39824: GO 39876
// if size then
39826: LD_VAR 0 2
39830: IFFALSE 39876
// for i := array downto size do
39832: LD_ADDR_VAR 0 4
39836: PUSH
39837: DOUBLE
39838: LD_VAR 0 1
39842: INC
39843: ST_TO_ADDR
39844: LD_VAR 0 2
39848: PUSH
39849: FOR_DOWNTO
39850: IFFALSE 39874
// result := Delete ( result , result ) ;
39852: LD_ADDR_VAR 0 3
39856: PUSH
39857: LD_VAR 0 3
39861: PPUSH
39862: LD_VAR 0 3
39866: PPUSH
39867: CALL_OW 3
39871: ST_TO_ADDR
39872: GO 39849
39874: POP
39875: POP
// end ;
39876: LD_VAR 0 3
39880: RET
// export function ComExit ( unit ) ; var tmp ; begin
39881: LD_INT 0
39883: PPUSH
39884: PPUSH
// if not IsInUnit ( unit ) then
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 310
39894: NOT
39895: IFFALSE 39899
// exit ;
39897: GO 39959
// tmp := IsInUnit ( unit ) ;
39899: LD_ADDR_VAR 0 3
39903: PUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 310
39913: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39914: LD_VAR 0 3
39918: PPUSH
39919: CALL_OW 247
39923: PUSH
39924: LD_INT 2
39926: EQUAL
39927: IFFALSE 39940
// ComExitVehicle ( unit ) else
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 121
39938: GO 39949
// ComExitBuilding ( unit ) ;
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL_OW 122
// result := tmp ;
39949: LD_ADDR_VAR 0 2
39953: PUSH
39954: LD_VAR 0 3
39958: ST_TO_ADDR
// end ;
39959: LD_VAR 0 2
39963: RET
// export function ComExitAll ( units ) ; var i ; begin
39964: LD_INT 0
39966: PPUSH
39967: PPUSH
// if not units then
39968: LD_VAR 0 1
39972: NOT
39973: IFFALSE 39977
// exit ;
39975: GO 40003
// for i in units do
39977: LD_ADDR_VAR 0 3
39981: PUSH
39982: LD_VAR 0 1
39986: PUSH
39987: FOR_IN
39988: IFFALSE 40001
// ComExit ( i ) ;
39990: LD_VAR 0 3
39994: PPUSH
39995: CALL 39881 0 1
39999: GO 39987
40001: POP
40002: POP
// end ;
40003: LD_VAR 0 2
40007: RET
// export function ResetHc ; begin
40008: LD_INT 0
40010: PPUSH
// InitHc ;
40011: CALL_OW 19
// hc_importance := 0 ;
40015: LD_ADDR_OWVAR 32
40019: PUSH
40020: LD_INT 0
40022: ST_TO_ADDR
// end ;
40023: LD_VAR 0 1
40027: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40028: LD_INT 0
40030: PPUSH
40031: PPUSH
40032: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40033: LD_ADDR_VAR 0 6
40037: PUSH
40038: LD_VAR 0 1
40042: PUSH
40043: LD_VAR 0 3
40047: PLUS
40048: PUSH
40049: LD_INT 2
40051: DIV
40052: ST_TO_ADDR
// if _x < 0 then
40053: LD_VAR 0 6
40057: PUSH
40058: LD_INT 0
40060: LESS
40061: IFFALSE 40078
// _x := _x * - 1 ;
40063: LD_ADDR_VAR 0 6
40067: PUSH
40068: LD_VAR 0 6
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: MUL
40077: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40078: LD_ADDR_VAR 0 7
40082: PUSH
40083: LD_VAR 0 2
40087: PUSH
40088: LD_VAR 0 4
40092: PLUS
40093: PUSH
40094: LD_INT 2
40096: DIV
40097: ST_TO_ADDR
// if _y < 0 then
40098: LD_VAR 0 7
40102: PUSH
40103: LD_INT 0
40105: LESS
40106: IFFALSE 40123
// _y := _y * - 1 ;
40108: LD_ADDR_VAR 0 7
40112: PUSH
40113: LD_VAR 0 7
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: MUL
40122: ST_TO_ADDR
// result := [ _x , _y ] ;
40123: LD_ADDR_VAR 0 5
40127: PUSH
40128: LD_VAR 0 6
40132: PUSH
40133: LD_VAR 0 7
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: ST_TO_ADDR
// end ;
40142: LD_VAR 0 5
40146: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40147: LD_INT 0
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
// task := GetTaskList ( unit ) ;
40153: LD_ADDR_VAR 0 7
40157: PUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: CALL_OW 437
40167: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40168: LD_VAR 0 7
40172: NOT
40173: PUSH
40174: LD_VAR 0 1
40178: PPUSH
40179: LD_VAR 0 2
40183: PPUSH
40184: CALL_OW 308
40188: NOT
40189: AND
40190: IFFALSE 40194
// exit ;
40192: GO 40312
// if IsInArea ( unit , area ) then
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_VAR 0 2
40203: PPUSH
40204: CALL_OW 308
40208: IFFALSE 40226
// begin ComMoveToArea ( unit , goAway ) ;
40210: LD_VAR 0 1
40214: PPUSH
40215: LD_VAR 0 3
40219: PPUSH
40220: CALL_OW 113
// exit ;
40224: GO 40312
// end ; if task [ 1 ] [ 1 ] <> M then
40226: LD_VAR 0 7
40230: PUSH
40231: LD_INT 1
40233: ARRAY
40234: PUSH
40235: LD_INT 1
40237: ARRAY
40238: PUSH
40239: LD_STRING M
40241: NONEQUAL
40242: IFFALSE 40246
// exit ;
40244: GO 40312
// x := task [ 1 ] [ 2 ] ;
40246: LD_ADDR_VAR 0 5
40250: PUSH
40251: LD_VAR 0 7
40255: PUSH
40256: LD_INT 1
40258: ARRAY
40259: PUSH
40260: LD_INT 2
40262: ARRAY
40263: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40264: LD_ADDR_VAR 0 6
40268: PUSH
40269: LD_VAR 0 7
40273: PUSH
40274: LD_INT 1
40276: ARRAY
40277: PUSH
40278: LD_INT 3
40280: ARRAY
40281: ST_TO_ADDR
// if InArea ( x , y , area ) then
40282: LD_VAR 0 5
40286: PPUSH
40287: LD_VAR 0 6
40291: PPUSH
40292: LD_VAR 0 2
40296: PPUSH
40297: CALL_OW 309
40301: IFFALSE 40312
// ComStop ( unit ) ;
40303: LD_VAR 0 1
40307: PPUSH
40308: CALL_OW 141
// end ;
40312: LD_VAR 0 4
40316: RET
// export function Abs ( value ) ; begin
40317: LD_INT 0
40319: PPUSH
// result := value ;
40320: LD_ADDR_VAR 0 2
40324: PUSH
40325: LD_VAR 0 1
40329: ST_TO_ADDR
// if value < 0 then
40330: LD_VAR 0 1
40334: PUSH
40335: LD_INT 0
40337: LESS
40338: IFFALSE 40355
// result := value * - 1 ;
40340: LD_ADDR_VAR 0 2
40344: PUSH
40345: LD_VAR 0 1
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: MUL
40354: ST_TO_ADDR
// end ;
40355: LD_VAR 0 2
40359: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40360: LD_INT 0
40362: PPUSH
40363: PPUSH
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
40369: PPUSH
// if not unit or not building then
40370: LD_VAR 0 1
40374: NOT
40375: PUSH
40376: LD_VAR 0 2
40380: NOT
40381: OR
40382: IFFALSE 40386
// exit ;
40384: GO 40612
// x := GetX ( building ) ;
40386: LD_ADDR_VAR 0 4
40390: PUSH
40391: LD_VAR 0 2
40395: PPUSH
40396: CALL_OW 250
40400: ST_TO_ADDR
// y := GetY ( building ) ;
40401: LD_ADDR_VAR 0 6
40405: PUSH
40406: LD_VAR 0 2
40410: PPUSH
40411: CALL_OW 251
40415: ST_TO_ADDR
// d := GetDir ( building ) ;
40416: LD_ADDR_VAR 0 8
40420: PUSH
40421: LD_VAR 0 2
40425: PPUSH
40426: CALL_OW 254
40430: ST_TO_ADDR
// r := 4 ;
40431: LD_ADDR_VAR 0 9
40435: PUSH
40436: LD_INT 4
40438: ST_TO_ADDR
// for i := 1 to 5 do
40439: LD_ADDR_VAR 0 10
40443: PUSH
40444: DOUBLE
40445: LD_INT 1
40447: DEC
40448: ST_TO_ADDR
40449: LD_INT 5
40451: PUSH
40452: FOR_TO
40453: IFFALSE 40610
// begin _x := ShiftX ( x , d , r + i ) ;
40455: LD_ADDR_VAR 0 5
40459: PUSH
40460: LD_VAR 0 4
40464: PPUSH
40465: LD_VAR 0 8
40469: PPUSH
40470: LD_VAR 0 9
40474: PUSH
40475: LD_VAR 0 10
40479: PLUS
40480: PPUSH
40481: CALL_OW 272
40485: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40486: LD_ADDR_VAR 0 7
40490: PUSH
40491: LD_VAR 0 6
40495: PPUSH
40496: LD_VAR 0 8
40500: PPUSH
40501: LD_VAR 0 9
40505: PUSH
40506: LD_VAR 0 10
40510: PLUS
40511: PPUSH
40512: CALL_OW 273
40516: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40517: LD_VAR 0 5
40521: PPUSH
40522: LD_VAR 0 7
40526: PPUSH
40527: CALL_OW 488
40531: PUSH
40532: LD_VAR 0 5
40536: PPUSH
40537: LD_VAR 0 7
40541: PPUSH
40542: CALL_OW 428
40546: PPUSH
40547: CALL_OW 247
40551: PUSH
40552: LD_INT 3
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: IN
40562: NOT
40563: AND
40564: IFFALSE 40608
// begin ComMoveXY ( unit , _x , _y ) ;
40566: LD_VAR 0 1
40570: PPUSH
40571: LD_VAR 0 5
40575: PPUSH
40576: LD_VAR 0 7
40580: PPUSH
40581: CALL_OW 111
// result := [ _x , _y ] ;
40585: LD_ADDR_VAR 0 3
40589: PUSH
40590: LD_VAR 0 5
40594: PUSH
40595: LD_VAR 0 7
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// exit ;
40604: POP
40605: POP
40606: GO 40612
// end ; end ;
40608: GO 40452
40610: POP
40611: POP
// end ;
40612: LD_VAR 0 3
40616: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40617: LD_INT 0
40619: PPUSH
40620: PPUSH
40621: PPUSH
// result := 0 ;
40622: LD_ADDR_VAR 0 3
40626: PUSH
40627: LD_INT 0
40629: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40630: LD_VAR 0 1
40634: PUSH
40635: LD_INT 0
40637: LESS
40638: PUSH
40639: LD_VAR 0 1
40643: PUSH
40644: LD_INT 8
40646: GREATER
40647: OR
40648: PUSH
40649: LD_VAR 0 2
40653: PUSH
40654: LD_INT 0
40656: LESS
40657: OR
40658: PUSH
40659: LD_VAR 0 2
40663: PUSH
40664: LD_INT 8
40666: GREATER
40667: OR
40668: IFFALSE 40672
// exit ;
40670: GO 40747
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40672: LD_ADDR_VAR 0 4
40676: PUSH
40677: LD_INT 22
40679: PUSH
40680: LD_VAR 0 2
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PPUSH
40689: CALL_OW 69
40693: PUSH
40694: FOR_IN
40695: IFFALSE 40745
// begin un := UnitShoot ( i ) ;
40697: LD_ADDR_VAR 0 5
40701: PUSH
40702: LD_VAR 0 4
40706: PPUSH
40707: CALL_OW 504
40711: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40712: LD_VAR 0 5
40716: PPUSH
40717: CALL_OW 255
40721: PUSH
40722: LD_VAR 0 1
40726: EQUAL
40727: IFFALSE 40743
// begin result := un ;
40729: LD_ADDR_VAR 0 3
40733: PUSH
40734: LD_VAR 0 5
40738: ST_TO_ADDR
// exit ;
40739: POP
40740: POP
40741: GO 40747
// end ; end ;
40743: GO 40694
40745: POP
40746: POP
// end ;
40747: LD_VAR 0 3
40751: RET
// export function GetCargoBay ( units ) ; begin
40752: LD_INT 0
40754: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40755: LD_ADDR_VAR 0 2
40759: PUSH
40760: LD_VAR 0 1
40764: PPUSH
40765: LD_INT 2
40767: PUSH
40768: LD_INT 34
40770: PUSH
40771: LD_INT 12
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 34
40780: PUSH
40781: LD_INT 51
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 34
40790: PUSH
40791: LD_INT 32
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 34
40800: PUSH
40801: LD_INT 89
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: PPUSH
40815: CALL_OW 72
40819: ST_TO_ADDR
// end ;
40820: LD_VAR 0 2
40824: RET
// export function Negate ( value ) ; begin
40825: LD_INT 0
40827: PPUSH
// result := not value ;
40828: LD_ADDR_VAR 0 2
40832: PUSH
40833: LD_VAR 0 1
40837: NOT
40838: ST_TO_ADDR
// end ;
40839: LD_VAR 0 2
40843: RET
// export function Inc ( value ) ; begin
40844: LD_INT 0
40846: PPUSH
// result := value + 1 ;
40847: LD_ADDR_VAR 0 2
40851: PUSH
40852: LD_VAR 0 1
40856: PUSH
40857: LD_INT 1
40859: PLUS
40860: ST_TO_ADDR
// end ;
40861: LD_VAR 0 2
40865: RET
// export function Dec ( value ) ; begin
40866: LD_INT 0
40868: PPUSH
// result := value - 1 ;
40869: LD_ADDR_VAR 0 2
40873: PUSH
40874: LD_VAR 0 1
40878: PUSH
40879: LD_INT 1
40881: MINUS
40882: ST_TO_ADDR
// end ;
40883: LD_VAR 0 2
40887: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40888: LD_INT 0
40890: PPUSH
40891: PPUSH
40892: PPUSH
40893: PPUSH
40894: PPUSH
40895: PPUSH
40896: PPUSH
40897: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40898: LD_VAR 0 1
40902: PPUSH
40903: LD_VAR 0 2
40907: PPUSH
40908: CALL_OW 488
40912: NOT
40913: PUSH
40914: LD_VAR 0 3
40918: PPUSH
40919: LD_VAR 0 4
40923: PPUSH
40924: CALL_OW 488
40928: NOT
40929: OR
40930: IFFALSE 40943
// begin result := - 1 ;
40932: LD_ADDR_VAR 0 5
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: ST_TO_ADDR
// exit ;
40941: GO 41178
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40943: LD_ADDR_VAR 0 12
40947: PUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: LD_VAR 0 2
40957: PPUSH
40958: LD_VAR 0 3
40962: PPUSH
40963: LD_VAR 0 4
40967: PPUSH
40968: CALL 40028 0 4
40972: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40973: LD_ADDR_VAR 0 11
40977: PUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: LD_VAR 0 2
40987: PPUSH
40988: LD_VAR 0 12
40992: PUSH
40993: LD_INT 1
40995: ARRAY
40996: PPUSH
40997: LD_VAR 0 12
41001: PUSH
41002: LD_INT 2
41004: ARRAY
41005: PPUSH
41006: CALL_OW 298
41010: ST_TO_ADDR
// distance := 9999 ;
41011: LD_ADDR_VAR 0 10
41015: PUSH
41016: LD_INT 9999
41018: ST_TO_ADDR
// for i := 0 to 5 do
41019: LD_ADDR_VAR 0 6
41023: PUSH
41024: DOUBLE
41025: LD_INT 0
41027: DEC
41028: ST_TO_ADDR
41029: LD_INT 5
41031: PUSH
41032: FOR_TO
41033: IFFALSE 41176
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41035: LD_ADDR_VAR 0 7
41039: PUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: LD_VAR 0 6
41049: PPUSH
41050: LD_VAR 0 11
41054: PPUSH
41055: CALL_OW 272
41059: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41060: LD_ADDR_VAR 0 8
41064: PUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: LD_VAR 0 6
41074: PPUSH
41075: LD_VAR 0 11
41079: PPUSH
41080: CALL_OW 273
41084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41085: LD_VAR 0 7
41089: PPUSH
41090: LD_VAR 0 8
41094: PPUSH
41095: CALL_OW 488
41099: NOT
41100: IFFALSE 41104
// continue ;
41102: GO 41032
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41104: LD_ADDR_VAR 0 9
41108: PUSH
41109: LD_VAR 0 12
41113: PUSH
41114: LD_INT 1
41116: ARRAY
41117: PPUSH
41118: LD_VAR 0 12
41122: PUSH
41123: LD_INT 2
41125: ARRAY
41126: PPUSH
41127: LD_VAR 0 7
41131: PPUSH
41132: LD_VAR 0 8
41136: PPUSH
41137: CALL_OW 298
41141: ST_TO_ADDR
// if tmp < distance then
41142: LD_VAR 0 9
41146: PUSH
41147: LD_VAR 0 10
41151: LESS
41152: IFFALSE 41174
// begin result := i ;
41154: LD_ADDR_VAR 0 5
41158: PUSH
41159: LD_VAR 0 6
41163: ST_TO_ADDR
// distance := tmp ;
41164: LD_ADDR_VAR 0 10
41168: PUSH
41169: LD_VAR 0 9
41173: ST_TO_ADDR
// end ; end ;
41174: GO 41032
41176: POP
41177: POP
// end ;
41178: LD_VAR 0 5
41182: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41183: LD_INT 0
41185: PPUSH
41186: PPUSH
// if not driver or not IsInUnit ( driver ) then
41187: LD_VAR 0 1
41191: NOT
41192: PUSH
41193: LD_VAR 0 1
41197: PPUSH
41198: CALL_OW 310
41202: NOT
41203: OR
41204: IFFALSE 41208
// exit ;
41206: GO 41298
// vehicle := IsInUnit ( driver ) ;
41208: LD_ADDR_VAR 0 3
41212: PUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 310
41222: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41223: LD_VAR 0 1
41227: PPUSH
41228: LD_STRING \
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: PUSH
41258: LD_STRING E
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_VAR 0 3
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PPUSH
41294: CALL_OW 446
// end ;
41298: LD_VAR 0 2
41302: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41303: LD_INT 0
41305: PPUSH
41306: PPUSH
// if not driver or not IsInUnit ( driver ) then
41307: LD_VAR 0 1
41311: NOT
41312: PUSH
41313: LD_VAR 0 1
41317: PPUSH
41318: CALL_OW 310
41322: NOT
41323: OR
41324: IFFALSE 41328
// exit ;
41326: GO 41418
// vehicle := IsInUnit ( driver ) ;
41328: LD_ADDR_VAR 0 3
41332: PUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 310
41342: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41343: LD_VAR 0 1
41347: PPUSH
41348: LD_STRING \
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: PUSH
41378: LD_STRING E
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_VAR 0 3
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PPUSH
41414: CALL_OW 447
// end ;
41418: LD_VAR 0 2
41422: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41423: LD_INT 0
41425: PPUSH
41426: PPUSH
41427: PPUSH
// tmp := [ ] ;
41428: LD_ADDR_VAR 0 5
41432: PUSH
41433: EMPTY
41434: ST_TO_ADDR
// for i in units do
41435: LD_ADDR_VAR 0 4
41439: PUSH
41440: LD_VAR 0 1
41444: PUSH
41445: FOR_IN
41446: IFFALSE 41484
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41448: LD_ADDR_VAR 0 5
41452: PUSH
41453: LD_VAR 0 5
41457: PPUSH
41458: LD_VAR 0 5
41462: PUSH
41463: LD_INT 1
41465: PLUS
41466: PPUSH
41467: LD_VAR 0 4
41471: PPUSH
41472: CALL_OW 256
41476: PPUSH
41477: CALL_OW 2
41481: ST_TO_ADDR
41482: GO 41445
41484: POP
41485: POP
// if not tmp then
41486: LD_VAR 0 5
41490: NOT
41491: IFFALSE 41495
// exit ;
41493: GO 41543
// if asc then
41495: LD_VAR 0 2
41499: IFFALSE 41523
// result := SortListByListAsc ( units , tmp ) else
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 1
41510: PPUSH
41511: LD_VAR 0 5
41515: PPUSH
41516: CALL_OW 76
41520: ST_TO_ADDR
41521: GO 41543
// result := SortListByListDesc ( units , tmp ) ;
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_VAR 0 1
41532: PPUSH
41533: LD_VAR 0 5
41537: PPUSH
41538: CALL_OW 77
41542: ST_TO_ADDR
// end ;
41543: LD_VAR 0 3
41547: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41548: LD_INT 0
41550: PPUSH
41551: PPUSH
// task := GetTaskList ( mech ) ;
41552: LD_ADDR_VAR 0 4
41556: PUSH
41557: LD_VAR 0 1
41561: PPUSH
41562: CALL_OW 437
41566: ST_TO_ADDR
// if not task then
41567: LD_VAR 0 4
41571: NOT
41572: IFFALSE 41576
// exit ;
41574: GO 41618
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41576: LD_ADDR_VAR 0 3
41580: PUSH
41581: LD_VAR 0 4
41585: PUSH
41586: LD_INT 1
41588: ARRAY
41589: PUSH
41590: LD_INT 1
41592: ARRAY
41593: PUSH
41594: LD_STRING r
41596: EQUAL
41597: PUSH
41598: LD_VAR 0 4
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: PUSH
41607: LD_INT 4
41609: ARRAY
41610: PUSH
41611: LD_VAR 0 2
41615: EQUAL
41616: AND
41617: ST_TO_ADDR
// end ;
41618: LD_VAR 0 3
41622: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41623: LD_INT 0
41625: PPUSH
// SetDir ( unit , d ) ;
41626: LD_VAR 0 1
41630: PPUSH
41631: LD_VAR 0 4
41635: PPUSH
41636: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41640: LD_VAR 0 1
41644: PPUSH
41645: LD_VAR 0 2
41649: PPUSH
41650: LD_VAR 0 3
41654: PPUSH
41655: LD_VAR 0 5
41659: PPUSH
41660: CALL_OW 48
// end ;
41664: LD_VAR 0 6
41668: RET
// export function ToNaturalNumber ( number ) ; begin
41669: LD_INT 0
41671: PPUSH
// result := number div 1 ;
41672: LD_ADDR_VAR 0 2
41676: PUSH
41677: LD_VAR 0 1
41681: PUSH
41682: LD_INT 1
41684: DIV
41685: ST_TO_ADDR
// if number < 0 then
41686: LD_VAR 0 1
41690: PUSH
41691: LD_INT 0
41693: LESS
41694: IFFALSE 41704
// result := 0 ;
41696: LD_ADDR_VAR 0 2
41700: PUSH
41701: LD_INT 0
41703: ST_TO_ADDR
// end ;
41704: LD_VAR 0 2
41708: RET
// export function SortByClass ( units , class ) ; var un ; begin
41709: LD_INT 0
41711: PPUSH
41712: PPUSH
// if not units or not class then
41713: LD_VAR 0 1
41717: NOT
41718: PUSH
41719: LD_VAR 0 2
41723: NOT
41724: OR
41725: IFFALSE 41729
// exit ;
41727: GO 41824
// result := [ ] ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: EMPTY
41735: ST_TO_ADDR
// for un in units do
41736: LD_ADDR_VAR 0 4
41740: PUSH
41741: LD_VAR 0 1
41745: PUSH
41746: FOR_IN
41747: IFFALSE 41822
// if GetClass ( un ) = class then
41749: LD_VAR 0 4
41753: PPUSH
41754: CALL_OW 257
41758: PUSH
41759: LD_VAR 0 2
41763: EQUAL
41764: IFFALSE 41791
// result := Insert ( result , 1 , un ) else
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_VAR 0 3
41775: PPUSH
41776: LD_INT 1
41778: PPUSH
41779: LD_VAR 0 4
41783: PPUSH
41784: CALL_OW 2
41788: ST_TO_ADDR
41789: GO 41820
// result := Replace ( result , result + 1 , un ) ;
41791: LD_ADDR_VAR 0 3
41795: PUSH
41796: LD_VAR 0 3
41800: PPUSH
41801: LD_VAR 0 3
41805: PUSH
41806: LD_INT 1
41808: PLUS
41809: PPUSH
41810: LD_VAR 0 4
41814: PPUSH
41815: CALL_OW 1
41819: ST_TO_ADDR
41820: GO 41746
41822: POP
41823: POP
// end ;
41824: LD_VAR 0 3
41828: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41829: LD_INT 0
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
// result := [ ] ;
41838: LD_ADDR_VAR 0 4
41842: PUSH
41843: EMPTY
41844: ST_TO_ADDR
// if x - r < 0 then
41845: LD_VAR 0 1
41849: PUSH
41850: LD_VAR 0 3
41854: MINUS
41855: PUSH
41856: LD_INT 0
41858: LESS
41859: IFFALSE 41871
// min_x := 0 else
41861: LD_ADDR_VAR 0 8
41865: PUSH
41866: LD_INT 0
41868: ST_TO_ADDR
41869: GO 41887
// min_x := x - r ;
41871: LD_ADDR_VAR 0 8
41875: PUSH
41876: LD_VAR 0 1
41880: PUSH
41881: LD_VAR 0 3
41885: MINUS
41886: ST_TO_ADDR
// if y - r < 0 then
41887: LD_VAR 0 2
41891: PUSH
41892: LD_VAR 0 3
41896: MINUS
41897: PUSH
41898: LD_INT 0
41900: LESS
41901: IFFALSE 41913
// min_y := 0 else
41903: LD_ADDR_VAR 0 7
41907: PUSH
41908: LD_INT 0
41910: ST_TO_ADDR
41911: GO 41929
// min_y := y - r ;
41913: LD_ADDR_VAR 0 7
41917: PUSH
41918: LD_VAR 0 2
41922: PUSH
41923: LD_VAR 0 3
41927: MINUS
41928: ST_TO_ADDR
// max_x := x + r ;
41929: LD_ADDR_VAR 0 9
41933: PUSH
41934: LD_VAR 0 1
41938: PUSH
41939: LD_VAR 0 3
41943: PLUS
41944: ST_TO_ADDR
// max_y := y + r ;
41945: LD_ADDR_VAR 0 10
41949: PUSH
41950: LD_VAR 0 2
41954: PUSH
41955: LD_VAR 0 3
41959: PLUS
41960: ST_TO_ADDR
// for _x = min_x to max_x do
41961: LD_ADDR_VAR 0 5
41965: PUSH
41966: DOUBLE
41967: LD_VAR 0 8
41971: DEC
41972: ST_TO_ADDR
41973: LD_VAR 0 9
41977: PUSH
41978: FOR_TO
41979: IFFALSE 42080
// for _y = min_y to max_y do
41981: LD_ADDR_VAR 0 6
41985: PUSH
41986: DOUBLE
41987: LD_VAR 0 7
41991: DEC
41992: ST_TO_ADDR
41993: LD_VAR 0 10
41997: PUSH
41998: FOR_TO
41999: IFFALSE 42076
// begin if not ValidHex ( _x , _y ) then
42001: LD_VAR 0 5
42005: PPUSH
42006: LD_VAR 0 6
42010: PPUSH
42011: CALL_OW 488
42015: NOT
42016: IFFALSE 42020
// continue ;
42018: GO 41998
// if GetResourceTypeXY ( _x , _y ) then
42020: LD_VAR 0 5
42024: PPUSH
42025: LD_VAR 0 6
42029: PPUSH
42030: CALL_OW 283
42034: IFFALSE 42074
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42036: LD_ADDR_VAR 0 4
42040: PUSH
42041: LD_VAR 0 4
42045: PPUSH
42046: LD_VAR 0 4
42050: PUSH
42051: LD_INT 1
42053: PLUS
42054: PPUSH
42055: LD_VAR 0 5
42059: PUSH
42060: LD_VAR 0 6
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PPUSH
42069: CALL_OW 1
42073: ST_TO_ADDR
// end ;
42074: GO 41998
42076: POP
42077: POP
42078: GO 41978
42080: POP
42081: POP
// end ;
42082: LD_VAR 0 4
42086: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42087: LD_INT 0
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
// if not units then
42097: LD_VAR 0 1
42101: NOT
42102: IFFALSE 42106
// exit ;
42104: GO 42630
// result := UnitFilter ( units , [ f_ok ] ) ;
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_VAR 0 1
42115: PPUSH
42116: LD_INT 50
42118: PUSH
42119: EMPTY
42120: LIST
42121: PPUSH
42122: CALL_OW 72
42126: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42127: LD_ADDR_VAR 0 8
42131: PUSH
42132: LD_VAR 0 1
42136: PUSH
42137: LD_INT 1
42139: ARRAY
42140: PPUSH
42141: CALL_OW 255
42145: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42146: LD_ADDR_VAR 0 10
42150: PUSH
42151: LD_INT 29
42153: PUSH
42154: LD_INT 91
42156: PUSH
42157: LD_INT 49
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// if not result then
42165: LD_VAR 0 3
42169: NOT
42170: IFFALSE 42174
// exit ;
42172: GO 42630
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42174: LD_ADDR_VAR 0 5
42178: PUSH
42179: LD_INT 81
42181: PUSH
42182: LD_VAR 0 8
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PPUSH
42191: CALL_OW 69
42195: ST_TO_ADDR
// for i in result do
42196: LD_ADDR_VAR 0 4
42200: PUSH
42201: LD_VAR 0 3
42205: PUSH
42206: FOR_IN
42207: IFFALSE 42628
// begin tag := GetTag ( i ) + 1 ;
42209: LD_ADDR_VAR 0 9
42213: PUSH
42214: LD_VAR 0 4
42218: PPUSH
42219: CALL_OW 110
42223: PUSH
42224: LD_INT 1
42226: PLUS
42227: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42228: LD_ADDR_VAR 0 7
42232: PUSH
42233: LD_VAR 0 4
42237: PPUSH
42238: CALL_OW 250
42242: PPUSH
42243: LD_VAR 0 4
42247: PPUSH
42248: CALL_OW 251
42252: PPUSH
42253: LD_INT 6
42255: PPUSH
42256: CALL 41829 0 3
42260: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42261: LD_VAR 0 4
42265: PPUSH
42266: CALL_OW 247
42270: PUSH
42271: LD_INT 2
42273: EQUAL
42274: PUSH
42275: LD_VAR 0 7
42279: AND
42280: PUSH
42281: LD_VAR 0 4
42285: PPUSH
42286: CALL_OW 264
42290: PUSH
42291: LD_VAR 0 10
42295: IN
42296: NOT
42297: AND
42298: IFFALSE 42337
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42300: LD_VAR 0 4
42304: PPUSH
42305: LD_VAR 0 7
42309: PUSH
42310: LD_INT 1
42312: ARRAY
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: PPUSH
42318: LD_VAR 0 7
42322: PUSH
42323: LD_INT 1
42325: ARRAY
42326: PUSH
42327: LD_INT 2
42329: ARRAY
42330: PPUSH
42331: CALL_OW 116
42335: GO 42626
// if path > tag then
42337: LD_VAR 0 2
42341: PUSH
42342: LD_VAR 0 9
42346: GREATER
42347: IFFALSE 42555
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42349: LD_ADDR_VAR 0 6
42353: PUSH
42354: LD_VAR 0 5
42358: PPUSH
42359: LD_INT 91
42361: PUSH
42362: LD_VAR 0 4
42366: PUSH
42367: LD_INT 8
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: LIST
42374: PPUSH
42375: CALL_OW 72
42379: ST_TO_ADDR
// if nearEnemy then
42380: LD_VAR 0 6
42384: IFFALSE 42453
// begin if GetWeapon ( i ) = ru_time_lapser then
42386: LD_VAR 0 4
42390: PPUSH
42391: CALL_OW 264
42395: PUSH
42396: LD_INT 49
42398: EQUAL
42399: IFFALSE 42427
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42401: LD_VAR 0 4
42405: PPUSH
42406: LD_VAR 0 6
42410: PPUSH
42411: LD_VAR 0 4
42415: PPUSH
42416: CALL_OW 74
42420: PPUSH
42421: CALL_OW 112
42425: GO 42451
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42427: LD_VAR 0 4
42431: PPUSH
42432: LD_VAR 0 6
42436: PPUSH
42437: LD_VAR 0 4
42441: PPUSH
42442: CALL_OW 74
42446: PPUSH
42447: CALL 43555 0 2
// end else
42451: GO 42553
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42453: LD_VAR 0 4
42457: PPUSH
42458: LD_VAR 0 2
42462: PUSH
42463: LD_VAR 0 9
42467: ARRAY
42468: PUSH
42469: LD_INT 1
42471: ARRAY
42472: PPUSH
42473: LD_VAR 0 2
42477: PUSH
42478: LD_VAR 0 9
42482: ARRAY
42483: PUSH
42484: LD_INT 2
42486: ARRAY
42487: PPUSH
42488: CALL_OW 297
42492: PUSH
42493: LD_INT 6
42495: GREATER
42496: IFFALSE 42539
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42498: LD_VAR 0 4
42502: PPUSH
42503: LD_VAR 0 2
42507: PUSH
42508: LD_VAR 0 9
42512: ARRAY
42513: PUSH
42514: LD_INT 1
42516: ARRAY
42517: PPUSH
42518: LD_VAR 0 2
42522: PUSH
42523: LD_VAR 0 9
42527: ARRAY
42528: PUSH
42529: LD_INT 2
42531: ARRAY
42532: PPUSH
42533: CALL_OW 114
42537: GO 42553
// SetTag ( i , tag ) ;
42539: LD_VAR 0 4
42543: PPUSH
42544: LD_VAR 0 9
42548: PPUSH
42549: CALL_OW 109
// end else
42553: GO 42626
// if enemy then
42555: LD_VAR 0 5
42559: IFFALSE 42626
// begin if GetWeapon ( i ) = ru_time_lapser then
42561: LD_VAR 0 4
42565: PPUSH
42566: CALL_OW 264
42570: PUSH
42571: LD_INT 49
42573: EQUAL
42574: IFFALSE 42602
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42576: LD_VAR 0 4
42580: PPUSH
42581: LD_VAR 0 5
42585: PPUSH
42586: LD_VAR 0 4
42590: PPUSH
42591: CALL_OW 74
42595: PPUSH
42596: CALL_OW 112
42600: GO 42626
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42602: LD_VAR 0 4
42606: PPUSH
42607: LD_VAR 0 5
42611: PPUSH
42612: LD_VAR 0 4
42616: PPUSH
42617: CALL_OW 74
42621: PPUSH
42622: CALL 43555 0 2
// end ; end ;
42626: GO 42206
42628: POP
42629: POP
// end ;
42630: LD_VAR 0 3
42634: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
42639: PPUSH
// if not unit or IsInUnit ( unit ) then
42640: LD_VAR 0 1
42644: NOT
42645: PUSH
42646: LD_VAR 0 1
42650: PPUSH
42651: CALL_OW 310
42655: OR
42656: IFFALSE 42660
// exit ;
42658: GO 42751
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42660: LD_ADDR_VAR 0 4
42664: PUSH
42665: LD_VAR 0 1
42669: PPUSH
42670: CALL_OW 250
42674: PPUSH
42675: LD_VAR 0 2
42679: PPUSH
42680: LD_INT 1
42682: PPUSH
42683: CALL_OW 272
42687: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42688: LD_ADDR_VAR 0 5
42692: PUSH
42693: LD_VAR 0 1
42697: PPUSH
42698: CALL_OW 251
42702: PPUSH
42703: LD_VAR 0 2
42707: PPUSH
42708: LD_INT 1
42710: PPUSH
42711: CALL_OW 273
42715: ST_TO_ADDR
// if ValidHex ( x , y ) then
42716: LD_VAR 0 4
42720: PPUSH
42721: LD_VAR 0 5
42725: PPUSH
42726: CALL_OW 488
42730: IFFALSE 42751
// ComTurnXY ( unit , x , y ) ;
42732: LD_VAR 0 1
42736: PPUSH
42737: LD_VAR 0 4
42741: PPUSH
42742: LD_VAR 0 5
42746: PPUSH
42747: CALL_OW 118
// end ;
42751: LD_VAR 0 3
42755: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42756: LD_INT 0
42758: PPUSH
42759: PPUSH
// result := false ;
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: LD_INT 0
42767: ST_TO_ADDR
// if not units then
42768: LD_VAR 0 2
42772: NOT
42773: IFFALSE 42777
// exit ;
42775: GO 42822
// for i in units do
42777: LD_ADDR_VAR 0 4
42781: PUSH
42782: LD_VAR 0 2
42786: PUSH
42787: FOR_IN
42788: IFFALSE 42820
// if See ( side , i ) then
42790: LD_VAR 0 1
42794: PPUSH
42795: LD_VAR 0 4
42799: PPUSH
42800: CALL_OW 292
42804: IFFALSE 42818
// begin result := true ;
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 1
42813: ST_TO_ADDR
// exit ;
42814: POP
42815: POP
42816: GO 42822
// end ;
42818: GO 42787
42820: POP
42821: POP
// end ;
42822: LD_VAR 0 3
42826: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42827: LD_INT 0
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
// if not unit or not points then
42833: LD_VAR 0 1
42837: NOT
42838: PUSH
42839: LD_VAR 0 2
42843: NOT
42844: OR
42845: IFFALSE 42849
// exit ;
42847: GO 42939
// dist := 99999 ;
42849: LD_ADDR_VAR 0 5
42853: PUSH
42854: LD_INT 99999
42856: ST_TO_ADDR
// for i in points do
42857: LD_ADDR_VAR 0 4
42861: PUSH
42862: LD_VAR 0 2
42866: PUSH
42867: FOR_IN
42868: IFFALSE 42937
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42870: LD_ADDR_VAR 0 6
42874: PUSH
42875: LD_VAR 0 1
42879: PPUSH
42880: LD_VAR 0 4
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: PPUSH
42889: LD_VAR 0 4
42893: PUSH
42894: LD_INT 2
42896: ARRAY
42897: PPUSH
42898: CALL_OW 297
42902: ST_TO_ADDR
// if tmpDist < dist then
42903: LD_VAR 0 6
42907: PUSH
42908: LD_VAR 0 5
42912: LESS
42913: IFFALSE 42935
// begin result := i ;
42915: LD_ADDR_VAR 0 3
42919: PUSH
42920: LD_VAR 0 4
42924: ST_TO_ADDR
// dist := tmpDist ;
42925: LD_ADDR_VAR 0 5
42929: PUSH
42930: LD_VAR 0 6
42934: ST_TO_ADDR
// end ; end ;
42935: GO 42867
42937: POP
42938: POP
// end ;
42939: LD_VAR 0 3
42943: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42944: LD_INT 0
42946: PPUSH
// uc_side := side ;
42947: LD_ADDR_OWVAR 20
42951: PUSH
42952: LD_VAR 0 1
42956: ST_TO_ADDR
// uc_nation := 3 ;
42957: LD_ADDR_OWVAR 21
42961: PUSH
42962: LD_INT 3
42964: ST_TO_ADDR
// vc_chassis := 25 ;
42965: LD_ADDR_OWVAR 37
42969: PUSH
42970: LD_INT 25
42972: ST_TO_ADDR
// vc_engine := engine_siberite ;
42973: LD_ADDR_OWVAR 39
42977: PUSH
42978: LD_INT 3
42980: ST_TO_ADDR
// vc_control := control_computer ;
42981: LD_ADDR_OWVAR 38
42985: PUSH
42986: LD_INT 3
42988: ST_TO_ADDR
// vc_weapon := 59 ;
42989: LD_ADDR_OWVAR 40
42993: PUSH
42994: LD_INT 59
42996: ST_TO_ADDR
// result := CreateVehicle ;
42997: LD_ADDR_VAR 0 5
43001: PUSH
43002: CALL_OW 45
43006: ST_TO_ADDR
// SetDir ( result , d ) ;
43007: LD_VAR 0 5
43011: PPUSH
43012: LD_VAR 0 4
43016: PPUSH
43017: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43021: LD_VAR 0 5
43025: PPUSH
43026: LD_VAR 0 2
43030: PPUSH
43031: LD_VAR 0 3
43035: PPUSH
43036: LD_INT 0
43038: PPUSH
43039: CALL_OW 48
// end ;
43043: LD_VAR 0 5
43047: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43048: LD_INT 0
43050: PPUSH
43051: PPUSH
43052: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43053: LD_ADDR_VAR 0 2
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43076: LD_VAR 0 1
43080: NOT
43081: PUSH
43082: LD_VAR 0 1
43086: PPUSH
43087: CALL_OW 264
43091: PUSH
43092: LD_INT 12
43094: PUSH
43095: LD_INT 51
43097: PUSH
43098: LD_INT 32
43100: PUSH
43101: LD_INT 89
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: IN
43110: NOT
43111: OR
43112: IFFALSE 43116
// exit ;
43114: GO 43214
// for i := 1 to 3 do
43116: LD_ADDR_VAR 0 3
43120: PUSH
43121: DOUBLE
43122: LD_INT 1
43124: DEC
43125: ST_TO_ADDR
43126: LD_INT 3
43128: PUSH
43129: FOR_TO
43130: IFFALSE 43212
// begin tmp := GetCargo ( cargo , i ) ;
43132: LD_ADDR_VAR 0 4
43136: PUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: LD_VAR 0 3
43146: PPUSH
43147: CALL_OW 289
43151: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43152: LD_ADDR_VAR 0 2
43156: PUSH
43157: LD_VAR 0 2
43161: PPUSH
43162: LD_VAR 0 3
43166: PPUSH
43167: LD_VAR 0 4
43171: PPUSH
43172: CALL_OW 1
43176: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43177: LD_ADDR_VAR 0 2
43181: PUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: LD_INT 4
43189: PPUSH
43190: LD_VAR 0 2
43194: PUSH
43195: LD_INT 4
43197: ARRAY
43198: PUSH
43199: LD_VAR 0 4
43203: PLUS
43204: PPUSH
43205: CALL_OW 1
43209: ST_TO_ADDR
// end ;
43210: GO 43129
43212: POP
43213: POP
// end ;
43214: LD_VAR 0 2
43218: RET
// export function Length ( array ) ; begin
43219: LD_INT 0
43221: PPUSH
// result := array + 0 ;
43222: LD_ADDR_VAR 0 2
43226: PUSH
43227: LD_VAR 0 1
43231: PUSH
43232: LD_INT 0
43234: PLUS
43235: ST_TO_ADDR
// end ;
43236: LD_VAR 0 2
43240: RET
// export function PrepareArray ( array ) ; begin
43241: LD_INT 0
43243: PPUSH
// result := array diff 0 ;
43244: LD_ADDR_VAR 0 2
43248: PUSH
43249: LD_VAR 0 1
43253: PUSH
43254: LD_INT 0
43256: DIFF
43257: ST_TO_ADDR
// if not result [ 1 ] then
43258: LD_VAR 0 2
43262: PUSH
43263: LD_INT 1
43265: ARRAY
43266: NOT
43267: IFFALSE 43287
// result := Delete ( result , 1 ) ;
43269: LD_ADDR_VAR 0 2
43273: PUSH
43274: LD_VAR 0 2
43278: PPUSH
43279: LD_INT 1
43281: PPUSH
43282: CALL_OW 3
43286: ST_TO_ADDR
// end ;
43287: LD_VAR 0 2
43291: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43292: LD_INT 0
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
// sibRocketRange := 25 ;
43298: LD_ADDR_VAR 0 6
43302: PUSH
43303: LD_INT 25
43305: ST_TO_ADDR
// result := false ;
43306: LD_ADDR_VAR 0 4
43310: PUSH
43311: LD_INT 0
43313: ST_TO_ADDR
// for i := 0 to 5 do
43314: LD_ADDR_VAR 0 5
43318: PUSH
43319: DOUBLE
43320: LD_INT 0
43322: DEC
43323: ST_TO_ADDR
43324: LD_INT 5
43326: PUSH
43327: FOR_TO
43328: IFFALSE 43395
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43330: LD_VAR 0 1
43334: PPUSH
43335: LD_VAR 0 5
43339: PPUSH
43340: LD_VAR 0 6
43344: PPUSH
43345: CALL_OW 272
43349: PPUSH
43350: LD_VAR 0 2
43354: PPUSH
43355: LD_VAR 0 5
43359: PPUSH
43360: LD_VAR 0 6
43364: PPUSH
43365: CALL_OW 273
43369: PPUSH
43370: LD_VAR 0 3
43374: PPUSH
43375: CALL_OW 309
43379: IFFALSE 43393
// begin result := true ;
43381: LD_ADDR_VAR 0 4
43385: PUSH
43386: LD_INT 1
43388: ST_TO_ADDR
// exit ;
43389: POP
43390: POP
43391: GO 43397
// end ;
43393: GO 43327
43395: POP
43396: POP
// end ;
43397: LD_VAR 0 4
43401: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43402: LD_INT 0
43404: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43405: LD_VAR 0 1
43409: PPUSH
43410: LD_VAR 0 2
43414: PPUSH
43415: LD_INT 0
43417: PPUSH
43418: LD_INT 0
43420: PPUSH
43421: LD_INT 1
43423: PPUSH
43424: LD_INT 0
43426: PPUSH
43427: CALL_OW 587
// end ;
43431: LD_VAR 0 3
43435: RET
// export function CenterOnNow ( unit ) ; begin
43436: LD_INT 0
43438: PPUSH
// result := IsInUnit ( unit ) ;
43439: LD_ADDR_VAR 0 2
43443: PUSH
43444: LD_VAR 0 1
43448: PPUSH
43449: CALL_OW 310
43453: ST_TO_ADDR
// if not result then
43454: LD_VAR 0 2
43458: NOT
43459: IFFALSE 43471
// result := unit ;
43461: LD_ADDR_VAR 0 2
43465: PUSH
43466: LD_VAR 0 1
43470: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 87
// end ;
43480: LD_VAR 0 2
43484: RET
// export function ComMoveHex ( unit , hex ) ; begin
43485: LD_INT 0
43487: PPUSH
// if not hex then
43488: LD_VAR 0 2
43492: NOT
43493: IFFALSE 43497
// exit ;
43495: GO 43550
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43497: LD_VAR 0 2
43501: PUSH
43502: LD_INT 1
43504: ARRAY
43505: PPUSH
43506: LD_VAR 0 2
43510: PUSH
43511: LD_INT 2
43513: ARRAY
43514: PPUSH
43515: CALL_OW 428
43519: IFFALSE 43523
// exit ;
43521: GO 43550
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43523: LD_VAR 0 1
43527: PPUSH
43528: LD_VAR 0 2
43532: PUSH
43533: LD_INT 1
43535: ARRAY
43536: PPUSH
43537: LD_VAR 0 2
43541: PUSH
43542: LD_INT 2
43544: ARRAY
43545: PPUSH
43546: CALL_OW 111
// end ;
43550: LD_VAR 0 3
43554: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43555: LD_INT 0
43557: PPUSH
43558: PPUSH
43559: PPUSH
// if not unit or not enemy then
43560: LD_VAR 0 1
43564: NOT
43565: PUSH
43566: LD_VAR 0 2
43570: NOT
43571: OR
43572: IFFALSE 43576
// exit ;
43574: GO 43700
// x := GetX ( enemy ) ;
43576: LD_ADDR_VAR 0 4
43580: PUSH
43581: LD_VAR 0 2
43585: PPUSH
43586: CALL_OW 250
43590: ST_TO_ADDR
// y := GetY ( enemy ) ;
43591: LD_ADDR_VAR 0 5
43595: PUSH
43596: LD_VAR 0 2
43600: PPUSH
43601: CALL_OW 251
43605: ST_TO_ADDR
// if ValidHex ( x , y ) then
43606: LD_VAR 0 4
43610: PPUSH
43611: LD_VAR 0 5
43615: PPUSH
43616: CALL_OW 488
43620: IFFALSE 43700
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
43622: LD_VAR 0 2
43626: PPUSH
43627: CALL_OW 247
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: IN
43642: PUSH
43643: LD_VAR 0 1
43647: PPUSH
43648: CALL_OW 255
43652: PPUSH
43653: LD_VAR 0 2
43657: PPUSH
43658: CALL_OW 292
43662: AND
43663: IFFALSE 43681
// ComAttackUnit ( unit , enemy ) else
43665: LD_VAR 0 1
43669: PPUSH
43670: LD_VAR 0 2
43674: PPUSH
43675: CALL_OW 115
43679: GO 43700
// ComAgressiveMove ( unit , x , y ) ;
43681: LD_VAR 0 1
43685: PPUSH
43686: LD_VAR 0 4
43690: PPUSH
43691: LD_VAR 0 5
43695: PPUSH
43696: CALL_OW 114
// end ;
43700: LD_VAR 0 3
43704: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43705: LD_INT 0
43707: PPUSH
43708: PPUSH
43709: PPUSH
// list := AreaToList ( area , 0 ) ;
43710: LD_ADDR_VAR 0 5
43714: PUSH
43715: LD_VAR 0 1
43719: PPUSH
43720: LD_INT 0
43722: PPUSH
43723: CALL_OW 517
43727: ST_TO_ADDR
// if not list then
43728: LD_VAR 0 5
43732: NOT
43733: IFFALSE 43737
// exit ;
43735: GO 43867
// if all then
43737: LD_VAR 0 2
43741: IFFALSE 43829
// begin for i := 1 to list [ 1 ] do
43743: LD_ADDR_VAR 0 4
43747: PUSH
43748: DOUBLE
43749: LD_INT 1
43751: DEC
43752: ST_TO_ADDR
43753: LD_VAR 0 5
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: PUSH
43762: FOR_TO
43763: IFFALSE 43825
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43765: LD_ADDR_VAR 0 3
43769: PUSH
43770: LD_VAR 0 3
43774: PPUSH
43775: LD_VAR 0 3
43779: PUSH
43780: LD_INT 1
43782: PLUS
43783: PPUSH
43784: LD_VAR 0 5
43788: PUSH
43789: LD_INT 1
43791: ARRAY
43792: PUSH
43793: LD_VAR 0 4
43797: ARRAY
43798: PUSH
43799: LD_VAR 0 5
43803: PUSH
43804: LD_INT 2
43806: ARRAY
43807: PUSH
43808: LD_VAR 0 4
43812: ARRAY
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PPUSH
43818: CALL_OW 1
43822: ST_TO_ADDR
43823: GO 43762
43825: POP
43826: POP
// exit ;
43827: GO 43867
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43829: LD_ADDR_VAR 0 3
43833: PUSH
43834: LD_VAR 0 5
43838: PUSH
43839: LD_INT 1
43841: ARRAY
43842: PUSH
43843: LD_INT 1
43845: ARRAY
43846: PUSH
43847: LD_VAR 0 5
43851: PUSH
43852: LD_INT 2
43854: ARRAY
43855: PUSH
43856: LD_INT 1
43858: ARRAY
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: ST_TO_ADDR
// end ;
43867: LD_VAR 0 3
43871: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43872: LD_INT 0
43874: PPUSH
43875: PPUSH
// list := AreaToList ( area , 0 ) ;
43876: LD_ADDR_VAR 0 4
43880: PUSH
43881: LD_VAR 0 1
43885: PPUSH
43886: LD_INT 0
43888: PPUSH
43889: CALL_OW 517
43893: ST_TO_ADDR
// if not list then
43894: LD_VAR 0 4
43898: NOT
43899: IFFALSE 43903
// exit ;
43901: GO 43944
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_VAR 0 4
43912: PUSH
43913: LD_INT 1
43915: ARRAY
43916: PUSH
43917: LD_INT 1
43919: ARRAY
43920: PUSH
43921: LD_VAR 0 4
43925: PUSH
43926: LD_INT 2
43928: ARRAY
43929: PUSH
43930: LD_INT 1
43932: ARRAY
43933: PUSH
43934: LD_VAR 0 2
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: ST_TO_ADDR
// end ;
43944: LD_VAR 0 3
43948: RET
// export function First ( array ) ; begin
43949: LD_INT 0
43951: PPUSH
// if not array then
43952: LD_VAR 0 1
43956: NOT
43957: IFFALSE 43961
// exit ;
43959: GO 43975
// result := array [ 1 ] ;
43961: LD_ADDR_VAR 0 2
43965: PUSH
43966: LD_VAR 0 1
43970: PUSH
43971: LD_INT 1
43973: ARRAY
43974: ST_TO_ADDR
// end ;
43975: LD_VAR 0 2
43979: RET
// export function Last ( array ) ; begin
43980: LD_INT 0
43982: PPUSH
// if not array then
43983: LD_VAR 0 1
43987: NOT
43988: IFFALSE 43992
// exit ;
43990: GO 44008
// result := array [ array ] ;
43992: LD_ADDR_VAR 0 2
43996: PUSH
43997: LD_VAR 0 1
44001: PUSH
44002: LD_VAR 0 1
44006: ARRAY
44007: ST_TO_ADDR
// end ;
44008: LD_VAR 0 2
44012: RET
