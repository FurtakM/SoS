// var konec ; var J , P ; var You ; var testslez ; export debug ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// ChangeMap ( 1 , %_cont ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_STRING %_cont
  19: PPUSH
  20: CALL_OW 340
// AnimateTrees ( true ) ;
  24: LD_INT 1
  26: PPUSH
  27: CALL_OW 573
// RevealFogArea ( You , FOGAR ) ;
  31: LD_LOC 4
  35: PPUSH
  36: LD_INT 5
  38: PPUSH
  39: CALL_OW 332
// You = 1 ;
  43: LD_ADDR_LOC 4
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// konec = false ;
  51: LD_ADDR_LOC 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// testslez = false ;
  59: LD_ADDR_LOC 5
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// J = nacti_osobu ( JMM ) ;
  67: LD_ADDR_LOC 2
  71: PUSH
  72: LD_STRING JMM
  74: PPUSH
  75: CALL 1003 0 1
  79: ST_TO_ADDR
// P = NewCharacter ( Powell ) ;
  80: LD_ADDR_LOC 3
  84: PUSH
  85: LD_STRING Powell
  87: PPUSH
  88: CALL_OW 25
  92: ST_TO_ADDR
// InGameOn ;
  93: CALL_OW 8
// PlaceHumanInUnit ( J , auto4 ) ;
  97: LD_LOC 2
 101: PPUSH
 102: LD_INT 28
 104: PPUSH
 105: CALL_OW 52
// PlaceHumanInUnit ( P , auto2 ) ;
 109: LD_LOC 3
 113: PPUSH
 114: LD_INT 26
 116: PPUSH
 117: CALL_OW 52
// wait ( 0 0$1 ) ;
 121: LD_INT 35
 123: PPUSH
 124: CALL_OW 67
// CenterOnXY ( 42 , 40 ) ;
 128: LD_INT 42
 130: PPUSH
 131: LD_INT 40
 133: PPUSH
 134: CALL_OW 84
// wait ( 0 0$1 ) ;
 138: LD_INT 35
 140: PPUSH
 141: CALL_OW 67
// ComMoveXY ( auto3 , 33 , 31 ) ;
 145: LD_INT 31
 147: PPUSH
 148: LD_INT 33
 150: PPUSH
 151: LD_INT 31
 153: PPUSH
 154: CALL_OW 111
// ComMoveXY ( auto1 , 35 , 33 ) ;
 158: LD_INT 24
 160: PPUSH
 161: LD_INT 35
 163: PPUSH
 164: LD_INT 33
 166: PPUSH
 167: CALL_OW 111
// ComMoveXY ( auto2 , 36 , 35 ) ;
 171: LD_INT 26
 173: PPUSH
 174: LD_INT 36
 176: PPUSH
 177: LD_INT 35
 179: PPUSH
 180: CALL_OW 111
// ComMoveXY ( auto4 , 39 , 40 ) ;
 184: LD_INT 28
 186: PPUSH
 187: LD_INT 39
 189: PPUSH
 190: LD_INT 40
 192: PPUSH
 193: CALL_OW 111
// ComMoveXY ( auto5 , 42 , 43 ) ;
 197: LD_INT 29
 199: PPUSH
 200: LD_INT 42
 202: PPUSH
 203: LD_INT 43
 205: PPUSH
 206: CALL_OW 111
// AddComExitVehicle ( auto4 ) ;
 210: LD_INT 28
 212: PPUSH
 213: CALL_OW 181
// AddComExitVehicle ( auto2 ) ;
 217: LD_INT 26
 219: PPUSH
 220: CALL_OW 181
// end ;
 224: END
// every 0 0$1 trigger FilterUnitsInArea ( STOP , [ [ f_side , You ] ] ) > 0 do
 225: LD_INT 1
 227: PPUSH
 228: LD_INT 22
 230: PUSH
 231: LD_LOC 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: PUSH
 240: EMPTY
 241: LIST
 242: PPUSH
 243: CALL_OW 70
 247: PUSH
 248: LD_INT 0
 250: GREATER
 251: IFFALSE 266
 253: GO 255
 255: DISABLE
// begin CenterOnXY ( 38 , 37 ) ;
 256: LD_INT 38
 258: PPUSH
 259: LD_INT 37
 261: PPUSH
 262: CALL_OW 84
// end ;
 266: END
// every 0 0$1 trigger FilterUnitsInArea ( STOP , [ [ f_side , You ] ] ) = 7 do
 267: LD_INT 1
 269: PPUSH
 270: LD_INT 22
 272: PUSH
 273: LD_LOC 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: EMPTY
 283: LIST
 284: PPUSH
 285: CALL_OW 70
 289: PUSH
 290: LD_INT 7
 292: EQUAL
 293: IFFALSE 364
 295: GO 297
 297: DISABLE
// begin ComMoveXY ( J , 67 , 55 ) ;
 298: LD_LOC 2
 302: PPUSH
 303: LD_INT 67
 305: PPUSH
 306: LD_INT 55
 308: PPUSH
 309: CALL_OW 111
// ComMoveXY ( P , 67 , 56 ) ;
 313: LD_LOC 3
 317: PPUSH
 318: LD_INT 67
 320: PPUSH
 321: LD_INT 56
 323: PPUSH
 324: CALL_OW 111
// AddComTurnUnit ( J , P ) ;
 328: LD_LOC 2
 332: PPUSH
 333: LD_LOC 3
 337: PPUSH
 338: CALL_OW 179
// AddComTurnUnit ( P , J ) ;
 342: LD_LOC 3
 346: PPUSH
 347: LD_LOC 2
 351: PPUSH
 352: CALL_OW 179
// testslez = true ;
 356: LD_ADDR_LOC 5
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// end ;
 364: END
// every 0 0$0.5 trigger FilterUnitsInArea ( kecy , [ [ f_side , You ] ] ) = 2 do
 365: LD_INT 3
 367: PPUSH
 368: LD_INT 22
 370: PUSH
 371: LD_LOC 4
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: PPUSH
 383: CALL_OW 70
 387: PUSH
 388: LD_INT 2
 390: EQUAL
 391: IFFALSE 796
 393: GO 395
 395: DISABLE
// begin CenterNowOnUnits ( J ) ;
 396: LD_LOC 2
 400: PPUSH
 401: CALL_OW 87
// Say ( P , D1-Pow-1 ) ;
 405: LD_LOC 3
 409: PPUSH
 410: LD_STRING D1-Pow-1
 412: PPUSH
 413: CALL_OW 88
// Say ( J , D1-JMM-1 ) ;
 417: LD_LOC 2
 421: PPUSH
 422: LD_STRING D1-JMM-1
 424: PPUSH
 425: CALL_OW 88
// Say ( P , D1-Pow-2 ) ;
 429: LD_LOC 3
 433: PPUSH
 434: LD_STRING D1-Pow-2
 436: PPUSH
 437: CALL_OW 88
// Say ( J , D1-JMM-2 ) ;
 441: LD_LOC 2
 445: PPUSH
 446: LD_STRING D1-JMM-2
 448: PPUSH
 449: CALL_OW 88
// Say ( P , D1-Pow-3 ) ;
 453: LD_LOC 3
 457: PPUSH
 458: LD_STRING D1-Pow-3
 460: PPUSH
 461: CALL_OW 88
// Say ( J , D1-JMM-3 ) ;
 465: LD_LOC 2
 469: PPUSH
 470: LD_STRING D1-JMM-3
 472: PPUSH
 473: CALL_OW 88
// Say ( P , D1-Pow-4 ) ;
 477: LD_LOC 3
 481: PPUSH
 482: LD_STRING D1-Pow-4
 484: PPUSH
 485: CALL_OW 88
// Say ( J , D1-JMM-4 ) ;
 489: LD_LOC 2
 493: PPUSH
 494: LD_STRING D1-JMM-4
 496: PPUSH
 497: CALL_OW 88
// Say ( P , D1-Pow-5 ) ;
 501: LD_LOC 3
 505: PPUSH
 506: LD_STRING D1-Pow-5
 508: PPUSH
 509: CALL_OW 88
// Say ( J , D1-JMM-5 ) ;
 513: LD_LOC 2
 517: PPUSH
 518: LD_STRING D1-JMM-5
 520: PPUSH
 521: CALL_OW 88
// Say ( P , D1-Pow-6 ) ;
 525: LD_LOC 3
 529: PPUSH
 530: LD_STRING D1-Pow-6
 532: PPUSH
 533: CALL_OW 88
// Say ( J , D1-JMM-6 ) ;
 537: LD_LOC 2
 541: PPUSH
 542: LD_STRING D1-JMM-6
 544: PPUSH
 545: CALL_OW 88
// Say ( P , D1-Pow-7 ) ;
 549: LD_LOC 3
 553: PPUSH
 554: LD_STRING D1-Pow-7
 556: PPUSH
 557: CALL_OW 88
// Say ( J , D1-JMM-7 ) ;
 561: LD_LOC 2
 565: PPUSH
 566: LD_STRING D1-JMM-7
 568: PPUSH
 569: CALL_OW 88
// Say ( P , D1-Pow-8 ) ;
 573: LD_LOC 3
 577: PPUSH
 578: LD_STRING D1-Pow-8
 580: PPUSH
 581: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 585: LD_INT 18
 587: PPUSH
 588: CALL_OW 67
// Query ( QLetter ) ;
 592: LD_STRING QLetter
 594: PPUSH
 595: CALL_OW 97
// Say ( P , D1aa-Pow-1 ) ;
 599: LD_LOC 3
 603: PPUSH
 604: LD_STRING D1aa-Pow-1
 606: PPUSH
 607: CALL_OW 88
// Say ( J , D1aa-JMM-1 ) ;
 611: LD_LOC 2
 615: PPUSH
 616: LD_STRING D1aa-JMM-1
 618: PPUSH
 619: CALL_OW 88
// Say ( P , D1aa-Pow-2 ) ;
 623: LD_LOC 3
 627: PPUSH
 628: LD_STRING D1aa-Pow-2
 630: PPUSH
 631: CALL_OW 88
// Say ( J , D1aa-JMM-2 ) ;
 635: LD_LOC 2
 639: PPUSH
 640: LD_STRING D1aa-JMM-2
 642: PPUSH
 643: CALL_OW 88
// Say ( P , D1aa-Pow-3 ) ;
 647: LD_LOC 3
 651: PPUSH
 652: LD_STRING D1aa-Pow-3
 654: PPUSH
 655: CALL_OW 88
// Say ( J , D1aa-JMM-3 ) ;
 659: LD_LOC 2
 663: PPUSH
 664: LD_STRING D1aa-JMM-3
 666: PPUSH
 667: CALL_OW 88
// Say ( P , D1aa-Pow-4 ) ;
 671: LD_LOC 3
 675: PPUSH
 676: LD_STRING D1aa-Pow-4
 678: PPUSH
 679: CALL_OW 88
// Say ( J , D1aa-JMM-4 ) ;
 683: LD_LOC 2
 687: PPUSH
 688: LD_STRING D1aa-JMM-4
 690: PPUSH
 691: CALL_OW 88
// Say ( P , D1aa-Pow-5 ) ;
 695: LD_LOC 3
 699: PPUSH
 700: LD_STRING D1aa-Pow-5
 702: PPUSH
 703: CALL_OW 88
// Say ( J , D1aa-JMM-5 ) ;
 707: LD_LOC 2
 711: PPUSH
 712: LD_STRING D1aa-JMM-5
 714: PPUSH
 715: CALL_OW 88
// Say ( P , D1aa-Pow-6 ) ;
 719: LD_LOC 3
 723: PPUSH
 724: LD_STRING D1aa-Pow-6
 726: PPUSH
 727: CALL_OW 88
// wait ( 0 0$1 ) ;
 731: LD_INT 35
 733: PPUSH
 734: CALL_OW 67
// ComFree ( [ P , J ] ) ;
 738: LD_LOC 3
 742: PUSH
 743: LD_LOC 2
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PPUSH
 752: CALL_OW 139
// ComEnterUnit ( J , auto4 ) ;
 756: LD_LOC 2
 760: PPUSH
 761: LD_INT 28
 763: PPUSH
 764: CALL_OW 120
// ComEnterUnit ( P , auto2 ) ;
 768: LD_LOC 3
 772: PPUSH
 773: LD_INT 26
 775: PPUSH
 776: CALL_OW 120
// testslez = true ;
 780: LD_ADDR_LOC 5
 784: PUSH
 785: LD_INT 1
 787: ST_TO_ADDR
// konec = true ;
 788: LD_ADDR_LOC 1
 792: PUSH
 793: LD_INT 1
 795: ST_TO_ADDR
// end ;
 796: END
// every 0 0$1 trigger konec and IsDrivenBy ( auto4 ) = J and IsDrivenBy ( auto2 ) = P do var i ;
 797: LD_LOC 1
 801: PUSH
 802: LD_INT 28
 804: PPUSH
 805: CALL_OW 311
 809: PUSH
 810: LD_LOC 2
 814: EQUAL
 815: AND
 816: PUSH
 817: LD_INT 26
 819: PPUSH
 820: CALL_OW 311
 824: PUSH
 825: LD_LOC 3
 829: EQUAL
 830: AND
 831: IFFALSE 1000
 833: GO 835
 835: DISABLE
 836: LD_INT 0
 838: PPUSH
// begin CenterOnUnits ( auto2 ) ;
 839: LD_INT 26
 841: PPUSH
 842: CALL_OW 85
// for i in [ auto3 , auto1 , auto2 , auto4 , auto5 ] do
 846: LD_ADDR_VAR 0 1
 850: PUSH
 851: LD_INT 31
 853: PUSH
 854: LD_INT 24
 856: PUSH
 857: LD_INT 26
 859: PUSH
 860: LD_INT 28
 862: PUSH
 863: LD_INT 29
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: PUSH
 873: FOR_IN
 874: IFFALSE 981
// begin ComMoveXY ( [ auto1 , auto3 , auto5 , auto2 , auto4 ] , 31 , 27 ) ;
 876: LD_INT 24
 878: PUSH
 879: LD_INT 31
 881: PUSH
 882: LD_INT 29
 884: PUSH
 885: LD_INT 26
 887: PUSH
 888: LD_INT 28
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PPUSH
 898: LD_INT 31
 900: PPUSH
 901: LD_INT 27
 903: PPUSH
 904: CALL_OW 111
// AddComMoveXY ( [ auto1 , auto3 , auto5 , auto2 , auto4 ] , 26 , 21 ) ;
 908: LD_INT 24
 910: PUSH
 911: LD_INT 31
 913: PUSH
 914: LD_INT 29
 916: PUSH
 917: LD_INT 26
 919: PUSH
 920: LD_INT 28
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: PPUSH
 930: LD_INT 26
 932: PPUSH
 933: LD_INT 21
 935: PPUSH
 936: CALL_OW 171
// AddComMoveXY ( [ auto1 , auto3 , auto5 , auto2 , auto4 ] , 12 , 18 ) ;
 940: LD_INT 24
 942: PUSH
 943: LD_INT 31
 945: PUSH
 946: LD_INT 29
 948: PUSH
 949: LD_INT 26
 951: PUSH
 952: LD_INT 28
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PPUSH
 962: LD_INT 12
 964: PPUSH
 965: LD_INT 18
 967: PPUSH
 968: CALL_OW 171
// wait ( 0 0$0.3 ) ;
 972: LD_INT 10
 974: PPUSH
 975: CALL_OW 67
// end ;
 979: GO 873
 981: POP
 982: POP
// wait ( 0 0$2 ) ;
 983: LD_INT 70
 985: PPUSH
 986: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 990: LD_STRING 1
 992: PPUSH
 993: LD_STRING %_cont
 995: PPUSH
 996: CALL_OW 340
// end ;
1000: PPOPN 1
1002: END
// function nacti_osobu ( ident ) ; begin
1003: LD_INT 0
1005: PPUSH
// if CheckCharacterSet ( ident ) then
1006: LD_VAR 0 1
1010: PPUSH
1011: CALL_OW 29
1015: IFFALSE 1034
// result := CreateCharacter ( ident ) else
1017: LD_ADDR_VAR 0 2
1021: PUSH
1022: LD_VAR 0 1
1026: PPUSH
1027: CALL_OW 34
1031: ST_TO_ADDR
1032: GO 1042
// result := 0 ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_INT 0
1041: ST_TO_ADDR
// end ;
1042: LD_VAR 0 2
1046: RET
// every 0 0$0.1 trigger testslez and FilterUnitsInArea ( slez , [ [ f_side , You ] ] ) > 1 do
1047: LD_LOC 5
1051: PUSH
1052: LD_INT 4
1054: PPUSH
1055: LD_INT 22
1057: PUSH
1058: LD_LOC 4
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: PPUSH
1070: CALL_OW 70
1074: PUSH
1075: LD_INT 1
1077: GREATER
1078: AND
1079: IFFALSE 1103
1081: GO 1083
1083: DISABLE
// begin CenterOnXY ( 54 , 44 ) ;
1084: LD_INT 54
1086: PPUSH
1087: LD_INT 44
1089: PPUSH
1090: CALL_OW 84
// testslez = false ;
1094: LD_ADDR_LOC 5
1098: PUSH
1099: LD_INT 0
1101: ST_TO_ADDR
// enable ;
1102: ENABLE
// end ;
1103: END
