// var konec ; var J , P ; var You ; var testslez ; export debug ; starting begin debug := false ;
   0: LD_ADDR_EXP 1
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// ChangeMap ( 1 , %_cont ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_STRING %_cont
  19: PPUSH
  20: CALL_OW 340
// RevealFogArea ( You , FOGAR ) ;
  24: LD_LOC 4
  28: PPUSH
  29: LD_INT 5
  31: PPUSH
  32: CALL_OW 332
// You = 1 ;
  36: LD_ADDR_LOC 4
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// konec = false ;
  44: LD_ADDR_LOC 1
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// testslez = false ;
  52: LD_ADDR_LOC 5
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// J = nacti_osobu ( JMM ) ;
  60: LD_ADDR_LOC 2
  64: PUSH
  65: LD_STRING JMM
  67: PPUSH
  68: CALL 996 0 1
  72: ST_TO_ADDR
// P = NewCharacter ( Powell ) ;
  73: LD_ADDR_LOC 3
  77: PUSH
  78: LD_STRING Powell
  80: PPUSH
  81: CALL_OW 25
  85: ST_TO_ADDR
// InGameOn ;
  86: CALL_OW 8
// PlaceHumanInUnit ( J , auto4 ) ;
  90: LD_LOC 2
  94: PPUSH
  95: LD_INT 28
  97: PPUSH
  98: CALL_OW 52
// PlaceHumanInUnit ( P , auto2 ) ;
 102: LD_LOC 3
 106: PPUSH
 107: LD_INT 26
 109: PPUSH
 110: CALL_OW 52
// wait ( 0 0$1 ) ;
 114: LD_INT 35
 116: PPUSH
 117: CALL_OW 67
// CenterOnXY ( 42 , 40 ) ;
 121: LD_INT 42
 123: PPUSH
 124: LD_INT 40
 126: PPUSH
 127: CALL_OW 84
// wait ( 0 0$1 ) ;
 131: LD_INT 35
 133: PPUSH
 134: CALL_OW 67
// ComMoveXY ( auto3 , 33 , 31 ) ;
 138: LD_INT 31
 140: PPUSH
 141: LD_INT 33
 143: PPUSH
 144: LD_INT 31
 146: PPUSH
 147: CALL_OW 111
// ComMoveXY ( auto1 , 35 , 33 ) ;
 151: LD_INT 24
 153: PPUSH
 154: LD_INT 35
 156: PPUSH
 157: LD_INT 33
 159: PPUSH
 160: CALL_OW 111
// ComMoveXY ( auto2 , 36 , 35 ) ;
 164: LD_INT 26
 166: PPUSH
 167: LD_INT 36
 169: PPUSH
 170: LD_INT 35
 172: PPUSH
 173: CALL_OW 111
// ComMoveXY ( auto4 , 39 , 40 ) ;
 177: LD_INT 28
 179: PPUSH
 180: LD_INT 39
 182: PPUSH
 183: LD_INT 40
 185: PPUSH
 186: CALL_OW 111
// ComMoveXY ( auto5 , 42 , 43 ) ;
 190: LD_INT 29
 192: PPUSH
 193: LD_INT 42
 195: PPUSH
 196: LD_INT 43
 198: PPUSH
 199: CALL_OW 111
// AddComExitVehicle ( auto4 ) ;
 203: LD_INT 28
 205: PPUSH
 206: CALL_OW 181
// AddComExitVehicle ( auto2 ) ;
 210: LD_INT 26
 212: PPUSH
 213: CALL_OW 181
// end ;
 217: END
// every 0 0$1 trigger FilterUnitsInArea ( STOP , [ [ f_side , You ] ] ) > 0 do
 218: LD_INT 1
 220: PPUSH
 221: LD_INT 22
 223: PUSH
 224: LD_LOC 4
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PUSH
 233: EMPTY
 234: LIST
 235: PPUSH
 236: CALL_OW 70
 240: PUSH
 241: LD_INT 0
 243: GREATER
 244: IFFALSE 259
 246: GO 248
 248: DISABLE
// begin CenterOnXY ( 38 , 37 ) ;
 249: LD_INT 38
 251: PPUSH
 252: LD_INT 37
 254: PPUSH
 255: CALL_OW 84
// end ;
 259: END
// every 0 0$1 trigger FilterUnitsInArea ( STOP , [ [ f_side , You ] ] ) = 7 do
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 22
 265: PUSH
 266: LD_LOC 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: EMPTY
 276: LIST
 277: PPUSH
 278: CALL_OW 70
 282: PUSH
 283: LD_INT 7
 285: EQUAL
 286: IFFALSE 357
 288: GO 290
 290: DISABLE
// begin ComMoveXY ( J , 67 , 55 ) ;
 291: LD_LOC 2
 295: PPUSH
 296: LD_INT 67
 298: PPUSH
 299: LD_INT 55
 301: PPUSH
 302: CALL_OW 111
// ComMoveXY ( P , 67 , 56 ) ;
 306: LD_LOC 3
 310: PPUSH
 311: LD_INT 67
 313: PPUSH
 314: LD_INT 56
 316: PPUSH
 317: CALL_OW 111
// AddComTurnUnit ( J , P ) ;
 321: LD_LOC 2
 325: PPUSH
 326: LD_LOC 3
 330: PPUSH
 331: CALL_OW 179
// AddComTurnUnit ( P , J ) ;
 335: LD_LOC 3
 339: PPUSH
 340: LD_LOC 2
 344: PPUSH
 345: CALL_OW 179
// testslez = true ;
 349: LD_ADDR_LOC 5
 353: PUSH
 354: LD_INT 1
 356: ST_TO_ADDR
// end ;
 357: END
// every 0 0$0.5 trigger FilterUnitsInArea ( kecy , [ [ f_side , You ] ] ) = 2 do
 358: LD_INT 3
 360: PPUSH
 361: LD_INT 22
 363: PUSH
 364: LD_LOC 4
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: PPUSH
 376: CALL_OW 70
 380: PUSH
 381: LD_INT 2
 383: EQUAL
 384: IFFALSE 789
 386: GO 388
 388: DISABLE
// begin CenterNowOnUnits ( J ) ;
 389: LD_LOC 2
 393: PPUSH
 394: CALL_OW 87
// Say ( P , D1-Pow-1 ) ;
 398: LD_LOC 3
 402: PPUSH
 403: LD_STRING D1-Pow-1
 405: PPUSH
 406: CALL_OW 88
// Say ( J , D1-JMM-1 ) ;
 410: LD_LOC 2
 414: PPUSH
 415: LD_STRING D1-JMM-1
 417: PPUSH
 418: CALL_OW 88
// Say ( P , D1-Pow-2 ) ;
 422: LD_LOC 3
 426: PPUSH
 427: LD_STRING D1-Pow-2
 429: PPUSH
 430: CALL_OW 88
// Say ( J , D1-JMM-2 ) ;
 434: LD_LOC 2
 438: PPUSH
 439: LD_STRING D1-JMM-2
 441: PPUSH
 442: CALL_OW 88
// Say ( P , D1-Pow-3 ) ;
 446: LD_LOC 3
 450: PPUSH
 451: LD_STRING D1-Pow-3
 453: PPUSH
 454: CALL_OW 88
// Say ( J , D1-JMM-3 ) ;
 458: LD_LOC 2
 462: PPUSH
 463: LD_STRING D1-JMM-3
 465: PPUSH
 466: CALL_OW 88
// Say ( P , D1-Pow-4 ) ;
 470: LD_LOC 3
 474: PPUSH
 475: LD_STRING D1-Pow-4
 477: PPUSH
 478: CALL_OW 88
// Say ( J , D1-JMM-4 ) ;
 482: LD_LOC 2
 486: PPUSH
 487: LD_STRING D1-JMM-4
 489: PPUSH
 490: CALL_OW 88
// Say ( P , D1-Pow-5 ) ;
 494: LD_LOC 3
 498: PPUSH
 499: LD_STRING D1-Pow-5
 501: PPUSH
 502: CALL_OW 88
// Say ( J , D1-JMM-5 ) ;
 506: LD_LOC 2
 510: PPUSH
 511: LD_STRING D1-JMM-5
 513: PPUSH
 514: CALL_OW 88
// Say ( P , D1-Pow-6 ) ;
 518: LD_LOC 3
 522: PPUSH
 523: LD_STRING D1-Pow-6
 525: PPUSH
 526: CALL_OW 88
// Say ( J , D1-JMM-6 ) ;
 530: LD_LOC 2
 534: PPUSH
 535: LD_STRING D1-JMM-6
 537: PPUSH
 538: CALL_OW 88
// Say ( P , D1-Pow-7 ) ;
 542: LD_LOC 3
 546: PPUSH
 547: LD_STRING D1-Pow-7
 549: PPUSH
 550: CALL_OW 88
// Say ( J , D1-JMM-7 ) ;
 554: LD_LOC 2
 558: PPUSH
 559: LD_STRING D1-JMM-7
 561: PPUSH
 562: CALL_OW 88
// Say ( P , D1-Pow-8 ) ;
 566: LD_LOC 3
 570: PPUSH
 571: LD_STRING D1-Pow-8
 573: PPUSH
 574: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 578: LD_INT 18
 580: PPUSH
 581: CALL_OW 67
// Query ( QLetter ) ;
 585: LD_STRING QLetter
 587: PPUSH
 588: CALL_OW 97
// Say ( P , D1aa-Pow-1 ) ;
 592: LD_LOC 3
 596: PPUSH
 597: LD_STRING D1aa-Pow-1
 599: PPUSH
 600: CALL_OW 88
// Say ( J , D1aa-JMM-1 ) ;
 604: LD_LOC 2
 608: PPUSH
 609: LD_STRING D1aa-JMM-1
 611: PPUSH
 612: CALL_OW 88
// Say ( P , D1aa-Pow-2 ) ;
 616: LD_LOC 3
 620: PPUSH
 621: LD_STRING D1aa-Pow-2
 623: PPUSH
 624: CALL_OW 88
// Say ( J , D1aa-JMM-2 ) ;
 628: LD_LOC 2
 632: PPUSH
 633: LD_STRING D1aa-JMM-2
 635: PPUSH
 636: CALL_OW 88
// Say ( P , D1aa-Pow-3 ) ;
 640: LD_LOC 3
 644: PPUSH
 645: LD_STRING D1aa-Pow-3
 647: PPUSH
 648: CALL_OW 88
// Say ( J , D1aa-JMM-3 ) ;
 652: LD_LOC 2
 656: PPUSH
 657: LD_STRING D1aa-JMM-3
 659: PPUSH
 660: CALL_OW 88
// Say ( P , D1aa-Pow-4 ) ;
 664: LD_LOC 3
 668: PPUSH
 669: LD_STRING D1aa-Pow-4
 671: PPUSH
 672: CALL_OW 88
// Say ( J , D1aa-JMM-4 ) ;
 676: LD_LOC 2
 680: PPUSH
 681: LD_STRING D1aa-JMM-4
 683: PPUSH
 684: CALL_OW 88
// Say ( P , D1aa-Pow-5 ) ;
 688: LD_LOC 3
 692: PPUSH
 693: LD_STRING D1aa-Pow-5
 695: PPUSH
 696: CALL_OW 88
// Say ( J , D1aa-JMM-5 ) ;
 700: LD_LOC 2
 704: PPUSH
 705: LD_STRING D1aa-JMM-5
 707: PPUSH
 708: CALL_OW 88
// Say ( P , D1aa-Pow-6 ) ;
 712: LD_LOC 3
 716: PPUSH
 717: LD_STRING D1aa-Pow-6
 719: PPUSH
 720: CALL_OW 88
// wait ( 0 0$1 ) ;
 724: LD_INT 35
 726: PPUSH
 727: CALL_OW 67
// ComFree ( [ P , J ] ) ;
 731: LD_LOC 3
 735: PUSH
 736: LD_LOC 2
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: PPUSH
 745: CALL_OW 139
// ComEnterUnit ( J , auto4 ) ;
 749: LD_LOC 2
 753: PPUSH
 754: LD_INT 28
 756: PPUSH
 757: CALL_OW 120
// ComEnterUnit ( P , auto2 ) ;
 761: LD_LOC 3
 765: PPUSH
 766: LD_INT 26
 768: PPUSH
 769: CALL_OW 120
// testslez = true ;
 773: LD_ADDR_LOC 5
 777: PUSH
 778: LD_INT 1
 780: ST_TO_ADDR
// konec = true ;
 781: LD_ADDR_LOC 1
 785: PUSH
 786: LD_INT 1
 788: ST_TO_ADDR
// end ;
 789: END
// every 0 0$1 trigger konec and IsDrivenBy ( auto4 ) = J and IsDrivenBy ( auto2 ) = P do var i ;
 790: LD_LOC 1
 794: PUSH
 795: LD_INT 28
 797: PPUSH
 798: CALL_OW 311
 802: PUSH
 803: LD_LOC 2
 807: EQUAL
 808: AND
 809: PUSH
 810: LD_INT 26
 812: PPUSH
 813: CALL_OW 311
 817: PUSH
 818: LD_LOC 3
 822: EQUAL
 823: AND
 824: IFFALSE 993
 826: GO 828
 828: DISABLE
 829: LD_INT 0
 831: PPUSH
// begin CenterOnUnits ( auto2 ) ;
 832: LD_INT 26
 834: PPUSH
 835: CALL_OW 85
// for i in [ auto3 , auto1 , auto2 , auto4 , auto5 ] do
 839: LD_ADDR_VAR 0 1
 843: PUSH
 844: LD_INT 31
 846: PUSH
 847: LD_INT 24
 849: PUSH
 850: LD_INT 26
 852: PUSH
 853: LD_INT 28
 855: PUSH
 856: LD_INT 29
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: FOR_IN
 867: IFFALSE 974
// begin ComMoveXY ( [ auto1 , auto3 , auto5 , auto2 , auto4 ] , 31 , 27 ) ;
 869: LD_INT 24
 871: PUSH
 872: LD_INT 31
 874: PUSH
 875: LD_INT 29
 877: PUSH
 878: LD_INT 26
 880: PUSH
 881: LD_INT 28
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: PPUSH
 891: LD_INT 31
 893: PPUSH
 894: LD_INT 27
 896: PPUSH
 897: CALL_OW 111
// AddComMoveXY ( [ auto1 , auto3 , auto5 , auto2 , auto4 ] , 26 , 21 ) ;
 901: LD_INT 24
 903: PUSH
 904: LD_INT 31
 906: PUSH
 907: LD_INT 29
 909: PUSH
 910: LD_INT 26
 912: PUSH
 913: LD_INT 28
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: PPUSH
 923: LD_INT 26
 925: PPUSH
 926: LD_INT 21
 928: PPUSH
 929: CALL_OW 171
// AddComMoveXY ( [ auto1 , auto3 , auto5 , auto2 , auto4 ] , 12 , 18 ) ;
 933: LD_INT 24
 935: PUSH
 936: LD_INT 31
 938: PUSH
 939: LD_INT 29
 941: PUSH
 942: LD_INT 26
 944: PUSH
 945: LD_INT 28
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: PPUSH
 955: LD_INT 12
 957: PPUSH
 958: LD_INT 18
 960: PPUSH
 961: CALL_OW 171
// wait ( 0 0$0.3 ) ;
 965: LD_INT 10
 967: PPUSH
 968: CALL_OW 67
// end ;
 972: GO 866
 974: POP
 975: POP
// wait ( 0 0$2 ) ;
 976: LD_INT 70
 978: PPUSH
 979: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
 983: LD_STRING 1
 985: PPUSH
 986: LD_STRING %_cont
 988: PPUSH
 989: CALL_OW 340
// end ;
 993: PPOPN 1
 995: END
// function nacti_osobu ( ident ) ; begin
 996: LD_INT 0
 998: PPUSH
// if CheckCharacterSet ( ident ) then
 999: LD_VAR 0 1
1003: PPUSH
1004: CALL_OW 29
1008: IFFALSE 1027
// result := CreateCharacter ( ident ) else
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_VAR 0 1
1019: PPUSH
1020: CALL_OW 34
1024: ST_TO_ADDR
1025: GO 1035
// result := 0 ;
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_INT 0
1034: ST_TO_ADDR
// end ;
1035: LD_VAR 0 2
1039: RET
// every 0 0$0.1 trigger testslez and FilterUnitsInArea ( slez , [ [ f_side , You ] ] ) > 1 do
1040: LD_LOC 5
1044: PUSH
1045: LD_INT 4
1047: PPUSH
1048: LD_INT 22
1050: PUSH
1051: LD_LOC 4
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: PPUSH
1063: CALL_OW 70
1067: PUSH
1068: LD_INT 1
1070: GREATER
1071: AND
1072: IFFALSE 1096
1074: GO 1076
1076: DISABLE
// begin CenterOnXY ( 54 , 44 ) ;
1077: LD_INT 54
1079: PPUSH
1080: LD_INT 44
1082: PPUSH
1083: CALL_OW 84
// testslez = false ;
1087: LD_ADDR_LOC 5
1091: PUSH
1092: LD_INT 0
1094: ST_TO_ADDR
// enable ;
1095: ENABLE
// end ;
1096: END
