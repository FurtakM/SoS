// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3847 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3704 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// on enterbuilding ( b , un ) do begin if b = eon then
3409: LD_VAR 0 1
3413: PUSH
3414: LD_INT 14
3416: EQUAL
3417: IFFALSE 3526
// case un of john :
3419: LD_VAR 0 2
3423: PUSH
3424: LD_LOC 3
3428: DOUBLE
3429: EQUAL
3430: IFTRUE 3434
3432: GO 3516
3434: POP
// if not killhim then
3435: LD_LOC 16
3439: NOT
3440: IFFALSE 3473
// begin wait ( 0 0$1.3 ) ;
3442: LD_INT 46
3444: PPUSH
3445: CALL_OW 67
// savecharacters ( john , JMM ) ;
3449: LD_LOC 3
3453: PPUSH
3454: LD_STRING JMM
3456: PPUSH
3457: CALL_OW 38
// changemap ( 1 , %_cont ) ;
3461: LD_STRING 1
3463: PPUSH
3464: LD_STRING %_cont
3466: PPUSH
3467: CALL_OW 340
// end else
3471: GO 3514
// begin placeunitxy ( john , 76 , 34 , false ) ;
3473: LD_LOC 3
3477: PPUSH
3478: LD_INT 76
3480: PPUSH
3481: LD_INT 34
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3491: LD_LOC 11
3495: PUSH
3496: LD_LOC 10
3500: PUSH
3501: EMPTY
3502: LIST
3503: ADD
3504: PPUSH
3505: LD_LOC 3
3509: PPUSH
3510: CALL_OW 115
// end ; else
3514: GO 3526
3516: POP
// RemoveUnit ( un ) ; end ;
3517: LD_VAR 0 2
3521: PPUSH
3522: CALL_OW 64
// end ;
3526: PPOPN 2
3528: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3529: LD_VAR 0 1
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_INT 4
3545: EQUAL
3546: AND
3547: PUSH
3548: LD_LOC 16
3552: PUSH
3553: LD_INT 0
3555: EQUAL
3556: AND
3557: IFFALSE 3651
// begin wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// music_class = 1 ;
3566: LD_ADDR_OWVAR 72
3570: PUSH
3571: LD_INT 1
3573: ST_TO_ADDR
// DialogueOn ;
3574: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3578: LD_LOC 5
3582: PPUSH
3583: LD_STRING DXAttack-Sik-1
3585: PPUSH
3586: CALL_OW 88
// dialogueoff ;
3590: CALL_OW 7
// killhim = true ;
3594: LD_ADDR_LOC 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3602: LD_LOC 1
3606: PPUSH
3607: LD_LOC 2
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_INT 1
3617: PPUSH
3618: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3622: LD_LOC 11
3626: PUSH
3627: LD_LOC 10
3631: PUSH
3632: LD_EXP 1
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: ADD
3641: PPUSH
3642: LD_LOC 3
3646: PPUSH
3647: CALL_OW 115
// end ; end ;
3651: PPOPN 2
3653: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3654: LD_VAR 0 2
3658: PUSH
3659: LD_LOC 3
3663: EQUAL
3664: IFFALSE 3701
// begin async ;
3666: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3667: LD_LOC 4
3671: PPUSH
3672: LD_STRING DXComments-Joan-1
3674: PPUSH
3675: CALL_OW 88
// ComExitVehicle ( john ) ;
3679: LD_LOC 3
3683: PPUSH
3684: CALL_OW 121
// SetSide ( veh , 4 ) ;
3688: LD_VAR 0 1
3692: PPUSH
3693: LD_INT 4
3695: PPUSH
3696: CALL_OW 235
// sync ;
3700: SYNC
// end ; end ; end_of_file
3701: PPOPN 2
3703: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3704: LD_INT 0
3706: PPUSH
// uc_side := 4 ;
3707: LD_ADDR_OWVAR 20
3711: PUSH
3712: LD_INT 4
3714: ST_TO_ADDR
// uc_nation := nation_american ;
3715: LD_ADDR_OWVAR 21
3719: PUSH
3720: LD_INT 1
3722: ST_TO_ADDR
// hc_importance = 50 ;
3723: LD_ADDR_OWVAR 32
3727: PUSH
3728: LD_INT 50
3730: ST_TO_ADDR
// hc_sex = sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_class = 1 ;
3739: LD_ADDR_OWVAR 28
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3747: LD_ADDR_OWVAR 30
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3770: LD_ADDR_OWVAR 31
3774: PUSH
3775: LD_INT 7
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3793: LD_ADDR_OWVAR 29
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 11
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: ST_TO_ADDR
// hc_name := Officer2 ;
3808: LD_ADDR_OWVAR 26
3812: PUSH
3813: LD_STRING Officer2
3815: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3816: LD_ADDR_OWVAR 33
3820: PUSH
3821: LD_STRING AmGalRemake
3823: ST_TO_ADDR
// hc_face_number := 3 ;
3824: LD_ADDR_OWVAR 34
3828: PUSH
3829: LD_INT 3
3831: ST_TO_ADDR
// off2 := CreateHuman ;
3832: LD_ADDR_EXP 1
3836: PUSH
3837: CALL_OW 44
3841: ST_TO_ADDR
// end ;
3842: LD_VAR 0 1
3846: RET
// export function CreatePersonnel ; begin
3847: LD_INT 0
3849: PPUSH
// uc_side := 4 ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_INT 4
3857: ST_TO_ADDR
// uc_nation := nation_american ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// hc_importance = 10 ;
3866: LD_ADDR_OWVAR 32
3870: PUSH
3871: LD_INT 10
3873: ST_TO_ADDR
// hc_name :=  ;
3874: LD_ADDR_OWVAR 26
3878: PUSH
3879: LD_STRING 
3881: ST_TO_ADDR
// hc_gallery :=  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3890: LD_INT 1
3892: PPUSH
3893: LD_INT 2
3895: NEG
3896: PPUSH
3897: CALL_OW 382
// engi1 := CreateHuman ;
3901: LD_ADDR_EXP 2
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 2
3916: NEG
3917: PPUSH
3918: CALL_OW 382
// engi2 := CreateHuman ;
3922: LD_ADDR_EXP 3
3926: PUSH
3927: CALL_OW 44
3931: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
3932: LD_EXP 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
3944: LD_EXP 3
3948: PPUSH
3949: LD_INT 10
3951: PPUSH
3952: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 1
3961: NEG
3962: PPUSH
3963: CALL_OW 383
// truckdriver := CreateHuman ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
3977: LD_EXP 4
3981: PPUSH
3982: LD_INT 27
3984: PPUSH
3985: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
3989: LD_INT 27
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 100
3997: PPUSH
3998: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: CALL_OW 381
// hc_class = class_sniper ;
4012: LD_ADDR_OWVAR 28
4016: PUSH
4017: LD_INT 5
4019: ST_TO_ADDR
// snip1 := CreateHuman ;
4020: LD_ADDR_EXP 6
4024: PUSH
4025: CALL_OW 44
4029: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4030: LD_INT 2
4032: PPUSH
4033: LD_INT 3
4035: PPUSH
4036: CALL_OW 381
// hc_class = class_sniper ;
4040: LD_ADDR_OWVAR 28
4044: PUSH
4045: LD_INT 5
4047: ST_TO_ADDR
// snip2 := CreateHuman ;
4048: LD_ADDR_EXP 7
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4058: LD_EXP 6
4062: PPUSH
4063: LD_INT 47
4065: PPUSH
4066: LD_INT 17
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4076: LD_EXP 7
4080: PPUSH
4081: LD_INT 29
4083: PPUSH
4084: LD_INT 31
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4094: LD_EXP 6
4098: PUSH
4099: LD_EXP 7
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: CALL_OW 381
// sol1 := CreateHuman ;
4122: LD_ADDR_EXP 8
4126: PUSH
4127: CALL_OW 44
4131: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_INT 2
4139: PPUSH
4140: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4144: LD_EXP 8
4148: PPUSH
4149: LD_INT 15
4151: PPUSH
4152: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 3
4161: PPUSH
4162: CALL_OW 381
// sol2 := CreateHuman ;
4166: LD_ADDR_EXP 9
4170: PUSH
4171: CALL_OW 44
4175: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 381
// sol3 := CreateHuman ;
4186: LD_ADDR_EXP 10
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4196: LD_EXP 9
4200: PPUSH
4201: LD_INT 40
4203: PPUSH
4204: LD_INT 42
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4214: LD_EXP 10
4218: PPUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 34
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// pat1 := CreateHuman ;
4242: LD_ADDR_EXP 11
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4252: LD_INT 1
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: CALL_OW 381
// pat2 := CreateHuman ;
4262: LD_ADDR_EXP 12
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4272: LD_EXP 11
4276: PPUSH
4277: LD_INT 29
4279: PPUSH
4280: LD_INT 6
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4290: LD_EXP 12
4294: PPUSH
4295: LD_INT 30
4297: PPUSH
4298: LD_INT 7
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4308: LD_ADDR_EXP 13
4312: PUSH
4313: LD_EXP 11
4317: PUSH
4318: LD_EXP 12
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4327: LD_ADDR_EXP 14
4331: PUSH
4332: LD_EXP 2
4336: PUSH
4337: LD_EXP 3
4341: PUSH
4342: LD_EXP 8
4346: PUSH
4347: LD_EXP 9
4351: PUSH
4352: LD_EXP 10
4356: PUSH
4357: LD_EXP 6
4361: PUSH
4362: LD_EXP 7
4366: PUSH
4367: LD_EXP 13
4371: PUSH
4372: LD_EXP 4
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// end ;
4388: LD_VAR 0 1
4392: RET
// every 0 0$1 do
4393: GO 4395
4395: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4396: LD_EXP 13
4400: PPUSH
4401: LD_INT 64
4403: PPUSH
4404: LD_INT 22
4406: PPUSH
4407: CALL_OW 171
// wait ( 0 0$25 ) ;
4411: LD_INT 875
4413: PPUSH
4414: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4418: LD_EXP 13
4422: PPUSH
4423: LD_INT 30
4425: PPUSH
4426: LD_INT 8
4428: PPUSH
4429: CALL_OW 171
// wait ( 0 0$25 ) ;
4433: LD_INT 875
4435: PPUSH
4436: CALL_OW 67
// enable ;
4440: ENABLE
// end ;
4441: END
// every 0 0$1 do
4442: GO 4444
4444: DISABLE
// begin SetLives ( truck , 550 ) ;
4445: LD_INT 27
4447: PPUSH
4448: LD_INT 550
4450: PPUSH
4451: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4455: LD_INT 27
4457: PPUSH
4458: LD_INT 42
4460: PPUSH
4461: LD_INT 35
4463: PPUSH
4464: CALL_OW 111
// AddComUnload ( truck ) ;
4468: LD_INT 27
4470: PPUSH
4471: CALL_OW 219
// Wait ( 0 0$8 ) ;
4475: LD_INT 280
4477: PPUSH
4478: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4482: LD_EXP 2
4486: PUSH
4487: LD_EXP 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: LD_INT 45
4498: PPUSH
4499: LD_INT 36
4501: PPUSH
4502: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4506: LD_EXP 4
4510: PPUSH
4511: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4515: LD_EXP 4
4519: PPUSH
4520: LD_INT 40
4522: PPUSH
4523: LD_INT 33
4525: PPUSH
4526: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4537: LD_EXP 4
4541: PPUSH
4542: LD_INT 27
4544: PPUSH
4545: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4549: LD_INT 27
4551: PPUSH
4552: CALL_OW 256
4556: PUSH
4557: LD_INT 1000
4559: EQUAL
4560: IFFALSE 4530
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4562: LD_EXP 2
4566: PUSH
4567: LD_EXP 3
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: LD_INT 10
4578: PPUSH
4579: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4590: LD_INT 27
4592: PPUSH
4593: CALL_OW 311
4597: NOT
4598: IFFALSE 4583
// ComEnterUnit ( truckdriver , truck ) ;
4600: LD_EXP 4
4604: PPUSH
4605: LD_INT 27
4607: PPUSH
4608: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4612: LD_EXP 4
4616: PPUSH
4617: LD_INT 74
4619: PPUSH
4620: LD_INT 52
4622: PPUSH
4623: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4627: LD_EXP 4
4631: PPUSH
4632: LD_INT 90
4634: PPUSH
4635: LD_INT 58
4637: PPUSH
4638: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4642: LD_EXP 4
4646: PPUSH
4647: LD_INT 98
4649: PPUSH
4650: LD_INT 61
4652: PPUSH
4653: CALL_OW 171
// end ;
4657: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4658: LD_INT 7
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: IFFALSE 4723
4677: GO 4679
4679: DISABLE
4680: LD_INT 0
4682: PPUSH
// begin enable ;
4683: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: LD_INT 7
4691: PPUSH
4692: LD_INT 22
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4721
// RemoveUnit ( i ) ;
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 64
4719: GO 4707
4721: POP
4722: POP
// end ;
4723: PPOPN 1
4725: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4726: LD_INT 22
4728: PUSH
4729: LD_INT 4
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: LD_INT 1000
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 21
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: IFFALSE 4852
4774: GO 4776
4776: DISABLE
4777: LD_INT 0
4779: PPUSH
// begin enable ;
4780: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4781: LD_ADDR_VAR 0 1
4785: PUSH
4786: LD_INT 22
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 24
4801: PUSH
4802: LD_INT 1000
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 69
4832: PUSH
4833: FOR_IN
4834: IFFALSE 4850
// SetLives ( i , 1000 ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_INT 1000
4843: PPUSH
4844: CALL_OW 234
4848: GO 4833
4850: POP
4851: POP
// end ; end_of_file
4852: PPOPN 1
4854: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4855: GO 4857
4857: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4858: LD_STRING initStreamRollete();
4860: PPUSH
4861: CALL_OW 559
// InitStreamMode ;
4865: CALL 4874 0 0
// DefineStreamItems ( ) ;
4869: CALL 5314 0 0
// end ;
4873: END
// function InitStreamMode ; begin
4874: LD_INT 0
4876: PPUSH
// streamModeActive := false ;
4877: LD_ADDR_EXP 15
4881: PUSH
4882: LD_INT 0
4884: ST_TO_ADDR
// normalCounter := 36 ;
4885: LD_ADDR_EXP 16
4889: PUSH
4890: LD_INT 36
4892: ST_TO_ADDR
// hardcoreCounter := 16 ;
4893: LD_ADDR_EXP 17
4897: PUSH
4898: LD_INT 16
4900: ST_TO_ADDR
// sRocket := false ;
4901: LD_ADDR_EXP 20
4905: PUSH
4906: LD_INT 0
4908: ST_TO_ADDR
// sSpeed := false ;
4909: LD_ADDR_EXP 19
4913: PUSH
4914: LD_INT 0
4916: ST_TO_ADDR
// sEngine := false ;
4917: LD_ADDR_EXP 21
4921: PUSH
4922: LD_INT 0
4924: ST_TO_ADDR
// sSpec := false ;
4925: LD_ADDR_EXP 18
4929: PUSH
4930: LD_INT 0
4932: ST_TO_ADDR
// sLevel := false ;
4933: LD_ADDR_EXP 22
4937: PUSH
4938: LD_INT 0
4940: ST_TO_ADDR
// sArmoury := false ;
4941: LD_ADDR_EXP 23
4945: PUSH
4946: LD_INT 0
4948: ST_TO_ADDR
// sRadar := false ;
4949: LD_ADDR_EXP 24
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// sBunker := false ;
4957: LD_ADDR_EXP 25
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// sHack := false ;
4965: LD_ADDR_EXP 26
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// sFire := false ;
4973: LD_ADDR_EXP 27
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// sRefresh := false ;
4981: LD_ADDR_EXP 28
4985: PUSH
4986: LD_INT 0
4988: ST_TO_ADDR
// sExp := false ;
4989: LD_ADDR_EXP 29
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// sDepot := false ;
4997: LD_ADDR_EXP 30
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
// sFlag := false ;
5005: LD_ADDR_EXP 31
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// sKamikadze := false ;
5013: LD_ADDR_EXP 39
5017: PUSH
5018: LD_INT 0
5020: ST_TO_ADDR
// sTroll := false ;
5021: LD_ADDR_EXP 40
5025: PUSH
5026: LD_INT 0
5028: ST_TO_ADDR
// sSlow := false ;
5029: LD_ADDR_EXP 41
5033: PUSH
5034: LD_INT 0
5036: ST_TO_ADDR
// sLack := false ;
5037: LD_ADDR_EXP 42
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// sTank := false ;
5045: LD_ADDR_EXP 44
5049: PUSH
5050: LD_INT 0
5052: ST_TO_ADDR
// sRemote := false ;
5053: LD_ADDR_EXP 45
5057: PUSH
5058: LD_INT 0
5060: ST_TO_ADDR
// sPowell := false ;
5061: LD_ADDR_EXP 46
5065: PUSH
5066: LD_INT 0
5068: ST_TO_ADDR
// sTeleport := false ;
5069: LD_ADDR_EXP 49
5073: PUSH
5074: LD_INT 0
5076: ST_TO_ADDR
// sOilTower := false ;
5077: LD_ADDR_EXP 51
5081: PUSH
5082: LD_INT 0
5084: ST_TO_ADDR
// sShovel := false ;
5085: LD_ADDR_EXP 52
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
// sSheik := false ;
5093: LD_ADDR_EXP 53
5097: PUSH
5098: LD_INT 0
5100: ST_TO_ADDR
// sEarthquake := false ;
5101: LD_ADDR_EXP 55
5105: PUSH
5106: LD_INT 0
5108: ST_TO_ADDR
// sAI := false ;
5109: LD_ADDR_EXP 56
5113: PUSH
5114: LD_INT 0
5116: ST_TO_ADDR
// sCargo := false ;
5117: LD_ADDR_EXP 59
5121: PUSH
5122: LD_INT 0
5124: ST_TO_ADDR
// sDLaser := false ;
5125: LD_ADDR_EXP 60
5129: PUSH
5130: LD_INT 0
5132: ST_TO_ADDR
// sExchange := false ;
5133: LD_ADDR_EXP 61
5137: PUSH
5138: LD_INT 0
5140: ST_TO_ADDR
// sFac := false ;
5141: LD_ADDR_EXP 62
5145: PUSH
5146: LD_INT 0
5148: ST_TO_ADDR
// sPower := false ;
5149: LD_ADDR_EXP 63
5153: PUSH
5154: LD_INT 0
5156: ST_TO_ADDR
// sRandom := false ;
5157: LD_ADDR_EXP 64
5161: PUSH
5162: LD_INT 0
5164: ST_TO_ADDR
// sShield := false ;
5165: LD_ADDR_EXP 65
5169: PUSH
5170: LD_INT 0
5172: ST_TO_ADDR
// sTime := false ;
5173: LD_ADDR_EXP 66
5177: PUSH
5178: LD_INT 0
5180: ST_TO_ADDR
// sTools := false ;
5181: LD_ADDR_EXP 67
5185: PUSH
5186: LD_INT 0
5188: ST_TO_ADDR
// sSold := false ;
5189: LD_ADDR_EXP 32
5193: PUSH
5194: LD_INT 0
5196: ST_TO_ADDR
// sDiff := false ;
5197: LD_ADDR_EXP 33
5201: PUSH
5202: LD_INT 0
5204: ST_TO_ADDR
// sFog := false ;
5205: LD_ADDR_EXP 36
5209: PUSH
5210: LD_INT 0
5212: ST_TO_ADDR
// sReset := false ;
5213: LD_ADDR_EXP 37
5217: PUSH
5218: LD_INT 0
5220: ST_TO_ADDR
// sSun := false ;
5221: LD_ADDR_EXP 38
5225: PUSH
5226: LD_INT 0
5228: ST_TO_ADDR
// sTiger := false ;
5229: LD_ADDR_EXP 34
5233: PUSH
5234: LD_INT 0
5236: ST_TO_ADDR
// sBomb := false ;
5237: LD_ADDR_EXP 35
5241: PUSH
5242: LD_INT 0
5244: ST_TO_ADDR
// sWound := false ;
5245: LD_ADDR_EXP 43
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// sBetray := false ;
5253: LD_ADDR_EXP 47
5257: PUSH
5258: LD_INT 0
5260: ST_TO_ADDR
// sContamin := false ;
5261: LD_ADDR_EXP 48
5265: PUSH
5266: LD_INT 0
5268: ST_TO_ADDR
// sOil := false ;
5269: LD_ADDR_EXP 50
5273: PUSH
5274: LD_INT 0
5276: ST_TO_ADDR
// sStu := false ;
5277: LD_ADDR_EXP 54
5281: PUSH
5282: LD_INT 0
5284: ST_TO_ADDR
// sBazooka := false ;
5285: LD_ADDR_EXP 57
5289: PUSH
5290: LD_INT 0
5292: ST_TO_ADDR
// sMortar := false ;
5293: LD_ADDR_EXP 58
5297: PUSH
5298: LD_INT 0
5300: ST_TO_ADDR
// sRanger := false ;
5301: LD_ADDR_EXP 68
5305: PUSH
5306: LD_INT 0
5308: ST_TO_ADDR
// end ;
5309: LD_VAR 0 1
5313: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
5318: PPUSH
5319: PPUSH
5320: PPUSH
// result := [ ] ;
5321: LD_ADDR_VAR 0 1
5325: PUSH
5326: EMPTY
5327: ST_TO_ADDR
// if campaign_id = 1 then
5328: LD_OWVAR 69
5332: PUSH
5333: LD_INT 1
5335: EQUAL
5336: IFFALSE 8274
// begin case mission_number of 1 :
5338: LD_OWVAR 70
5342: PUSH
5343: LD_INT 1
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5415
5351: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_INT 2
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 12
5368: PUSH
5369: LD_INT 15
5371: PUSH
5372: LD_INT 16
5374: PUSH
5375: LD_INT 22
5377: PUSH
5378: LD_INT 23
5380: PUSH
5381: LD_INT 26
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 101
5397: PUSH
5398: LD_INT 102
5400: PUSH
5401: LD_INT 106
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: ST_TO_ADDR
5413: GO 8272
5415: LD_INT 2
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5495
5423: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: LD_INT 11
5437: PUSH
5438: LD_INT 12
5440: PUSH
5441: LD_INT 15
5443: PUSH
5444: LD_INT 16
5446: PUSH
5447: LD_INT 22
5449: PUSH
5450: LD_INT 23
5452: PUSH
5453: LD_INT 26
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 101
5469: PUSH
5470: LD_INT 102
5472: PUSH
5473: LD_INT 105
5475: PUSH
5476: LD_INT 106
5478: PUSH
5479: LD_INT 108
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: ST_TO_ADDR
5493: GO 8272
5495: LD_INT 3
5497: DOUBLE
5498: EQUAL
5499: IFTRUE 5503
5501: GO 5579
5503: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5504: LD_ADDR_VAR 0 1
5508: PUSH
5509: LD_INT 2
5511: PUSH
5512: LD_INT 4
5514: PUSH
5515: LD_INT 5
5517: PUSH
5518: LD_INT 11
5520: PUSH
5521: LD_INT 12
5523: PUSH
5524: LD_INT 15
5526: PUSH
5527: LD_INT 16
5529: PUSH
5530: LD_INT 22
5532: PUSH
5533: LD_INT 26
5535: PUSH
5536: LD_INT 36
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 101
5553: PUSH
5554: LD_INT 102
5556: PUSH
5557: LD_INT 105
5559: PUSH
5560: LD_INT 106
5562: PUSH
5563: LD_INT 108
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: ST_TO_ADDR
5577: GO 8272
5579: LD_INT 4
5581: DOUBLE
5582: EQUAL
5583: IFTRUE 5587
5585: GO 5671
5587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5588: LD_ADDR_VAR 0 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 4
5598: PUSH
5599: LD_INT 5
5601: PUSH
5602: LD_INT 8
5604: PUSH
5605: LD_INT 11
5607: PUSH
5608: LD_INT 12
5610: PUSH
5611: LD_INT 15
5613: PUSH
5614: LD_INT 16
5616: PUSH
5617: LD_INT 22
5619: PUSH
5620: LD_INT 23
5622: PUSH
5623: LD_INT 26
5625: PUSH
5626: LD_INT 36
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 101
5645: PUSH
5646: LD_INT 102
5648: PUSH
5649: LD_INT 105
5651: PUSH
5652: LD_INT 106
5654: PUSH
5655: LD_INT 108
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: ST_TO_ADDR
5669: GO 8272
5671: LD_INT 5
5673: DOUBLE
5674: EQUAL
5675: IFTRUE 5679
5677: GO 5779
5679: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5680: LD_ADDR_VAR 0 1
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 4
5690: PUSH
5691: LD_INT 5
5693: PUSH
5694: LD_INT 6
5696: PUSH
5697: LD_INT 8
5699: PUSH
5700: LD_INT 11
5702: PUSH
5703: LD_INT 12
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: LD_INT 16
5711: PUSH
5712: LD_INT 22
5714: PUSH
5715: LD_INT 23
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 26
5723: PUSH
5724: LD_INT 36
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 101
5745: PUSH
5746: LD_INT 102
5748: PUSH
5749: LD_INT 105
5751: PUSH
5752: LD_INT 106
5754: PUSH
5755: LD_INT 108
5757: PUSH
5758: LD_INT 109
5760: PUSH
5761: LD_INT 112
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 8272
5779: LD_INT 6
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5907
5787: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: LD_INT 8
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 12
5813: PUSH
5814: LD_INT 15
5816: PUSH
5817: LD_INT 16
5819: PUSH
5820: LD_INT 20
5822: PUSH
5823: LD_INT 21
5825: PUSH
5826: LD_INT 22
5828: PUSH
5829: LD_INT 23
5831: PUSH
5832: LD_INT 25
5834: PUSH
5835: LD_INT 26
5837: PUSH
5838: LD_INT 30
5840: PUSH
5841: LD_INT 31
5843: PUSH
5844: LD_INT 32
5846: PUSH
5847: LD_INT 36
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 101
5873: PUSH
5874: LD_INT 102
5876: PUSH
5877: LD_INT 105
5879: PUSH
5880: LD_INT 106
5882: PUSH
5883: LD_INT 108
5885: PUSH
5886: LD_INT 109
5888: PUSH
5889: LD_INT 112
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: ST_TO_ADDR
5905: GO 8272
5907: LD_INT 7
5909: DOUBLE
5910: EQUAL
5911: IFTRUE 5915
5913: GO 6015
5915: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5916: LD_ADDR_VAR 0 1
5920: PUSH
5921: LD_INT 2
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: LD_INT 7
5932: PUSH
5933: LD_INT 11
5935: PUSH
5936: LD_INT 12
5938: PUSH
5939: LD_INT 15
5941: PUSH
5942: LD_INT 16
5944: PUSH
5945: LD_INT 20
5947: PUSH
5948: LD_INT 21
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_INT 23
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: PUSH
5979: LD_INT 101
5981: PUSH
5982: LD_INT 102
5984: PUSH
5985: LD_INT 103
5987: PUSH
5988: LD_INT 105
5990: PUSH
5991: LD_INT 106
5993: PUSH
5994: LD_INT 108
5996: PUSH
5997: LD_INT 112
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
6013: GO 8272
6015: LD_INT 8
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6151
6023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 5
6037: PUSH
6038: LD_INT 6
6040: PUSH
6041: LD_INT 7
6043: PUSH
6044: LD_INT 8
6046: PUSH
6047: LD_INT 11
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: LD_INT 15
6055: PUSH
6056: LD_INT 16
6058: PUSH
6059: LD_INT 20
6061: PUSH
6062: LD_INT 21
6064: PUSH
6065: LD_INT 22
6067: PUSH
6068: LD_INT 23
6070: PUSH
6071: LD_INT 25
6073: PUSH
6074: LD_INT 26
6076: PUSH
6077: LD_INT 30
6079: PUSH
6080: LD_INT 31
6082: PUSH
6083: LD_INT 32
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 101
6113: PUSH
6114: LD_INT 102
6116: PUSH
6117: LD_INT 103
6119: PUSH
6120: LD_INT 105
6122: PUSH
6123: LD_INT 106
6125: PUSH
6126: LD_INT 108
6128: PUSH
6129: LD_INT 109
6131: PUSH
6132: LD_INT 112
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 8272
6151: LD_INT 9
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6295
6159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6160: LD_ADDR_VAR 0 1
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 6
6176: PUSH
6177: LD_INT 7
6179: PUSH
6180: LD_INT 8
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 15
6191: PUSH
6192: LD_INT 16
6194: PUSH
6195: LD_INT 20
6197: PUSH
6198: LD_INT 21
6200: PUSH
6201: LD_INT 22
6203: PUSH
6204: LD_INT 23
6206: PUSH
6207: LD_INT 25
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 28
6215: PUSH
6216: LD_INT 30
6218: PUSH
6219: LD_INT 31
6221: PUSH
6222: LD_INT 32
6224: PUSH
6225: LD_INT 36
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 101
6253: PUSH
6254: LD_INT 102
6256: PUSH
6257: LD_INT 103
6259: PUSH
6260: LD_INT 105
6262: PUSH
6263: LD_INT 106
6265: PUSH
6266: LD_INT 108
6268: PUSH
6269: LD_INT 109
6271: PUSH
6272: LD_INT 112
6274: PUSH
6275: LD_INT 114
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: ST_TO_ADDR
6293: GO 8272
6295: LD_INT 10
6297: DOUBLE
6298: EQUAL
6299: IFTRUE 6303
6301: GO 6487
6303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: PUSH
6312: LD_INT 4
6314: PUSH
6315: LD_INT 5
6317: PUSH
6318: LD_INT 6
6320: PUSH
6321: LD_INT 7
6323: PUSH
6324: LD_INT 8
6326: PUSH
6327: LD_INT 9
6329: PUSH
6330: LD_INT 10
6332: PUSH
6333: LD_INT 11
6335: PUSH
6336: LD_INT 12
6338: PUSH
6339: LD_INT 13
6341: PUSH
6342: LD_INT 14
6344: PUSH
6345: LD_INT 15
6347: PUSH
6348: LD_INT 16
6350: PUSH
6351: LD_INT 17
6353: PUSH
6354: LD_INT 18
6356: PUSH
6357: LD_INT 19
6359: PUSH
6360: LD_INT 20
6362: PUSH
6363: LD_INT 21
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_INT 23
6371: PUSH
6372: LD_INT 24
6374: PUSH
6375: LD_INT 25
6377: PUSH
6378: LD_INT 26
6380: PUSH
6381: LD_INT 28
6383: PUSH
6384: LD_INT 30
6386: PUSH
6387: LD_INT 31
6389: PUSH
6390: LD_INT 32
6392: PUSH
6393: LD_INT 36
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 101
6429: PUSH
6430: LD_INT 102
6432: PUSH
6433: LD_INT 103
6435: PUSH
6436: LD_INT 104
6438: PUSH
6439: LD_INT 105
6441: PUSH
6442: LD_INT 106
6444: PUSH
6445: LD_INT 107
6447: PUSH
6448: LD_INT 108
6450: PUSH
6451: LD_INT 109
6453: PUSH
6454: LD_INT 110
6456: PUSH
6457: LD_INT 111
6459: PUSH
6460: LD_INT 112
6462: PUSH
6463: LD_INT 114
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: ST_TO_ADDR
6485: GO 8272
6487: LD_INT 11
6489: DOUBLE
6490: EQUAL
6491: IFTRUE 6495
6493: GO 6687
6495: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6496: LD_ADDR_VAR 0 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: LD_INT 6
6515: PUSH
6516: LD_INT 7
6518: PUSH
6519: LD_INT 8
6521: PUSH
6522: LD_INT 9
6524: PUSH
6525: LD_INT 10
6527: PUSH
6528: LD_INT 11
6530: PUSH
6531: LD_INT 12
6533: PUSH
6534: LD_INT 13
6536: PUSH
6537: LD_INT 14
6539: PUSH
6540: LD_INT 15
6542: PUSH
6543: LD_INT 16
6545: PUSH
6546: LD_INT 17
6548: PUSH
6549: LD_INT 18
6551: PUSH
6552: LD_INT 19
6554: PUSH
6555: LD_INT 20
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_INT 23
6566: PUSH
6567: LD_INT 24
6569: PUSH
6570: LD_INT 25
6572: PUSH
6573: LD_INT 26
6575: PUSH
6576: LD_INT 28
6578: PUSH
6579: LD_INT 30
6581: PUSH
6582: LD_INT 31
6584: PUSH
6585: LD_INT 32
6587: PUSH
6588: LD_INT 34
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PUSH
6627: LD_INT 101
6629: PUSH
6630: LD_INT 102
6632: PUSH
6633: LD_INT 103
6635: PUSH
6636: LD_INT 104
6638: PUSH
6639: LD_INT 105
6641: PUSH
6642: LD_INT 106
6644: PUSH
6645: LD_INT 107
6647: PUSH
6648: LD_INT 108
6650: PUSH
6651: LD_INT 109
6653: PUSH
6654: LD_INT 110
6656: PUSH
6657: LD_INT 111
6659: PUSH
6660: LD_INT 112
6662: PUSH
6663: LD_INT 114
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 8272
6687: LD_INT 12
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6903
6695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_INT 1
6703: PUSH
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: LD_INT 5
6715: PUSH
6716: LD_INT 6
6718: PUSH
6719: LD_INT 7
6721: PUSH
6722: LD_INT 8
6724: PUSH
6725: LD_INT 9
6727: PUSH
6728: LD_INT 10
6730: PUSH
6731: LD_INT 11
6733: PUSH
6734: LD_INT 12
6736: PUSH
6737: LD_INT 13
6739: PUSH
6740: LD_INT 14
6742: PUSH
6743: LD_INT 15
6745: PUSH
6746: LD_INT 16
6748: PUSH
6749: LD_INT 17
6751: PUSH
6752: LD_INT 18
6754: PUSH
6755: LD_INT 19
6757: PUSH
6758: LD_INT 20
6760: PUSH
6761: LD_INT 21
6763: PUSH
6764: LD_INT 22
6766: PUSH
6767: LD_INT 23
6769: PUSH
6770: LD_INT 24
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 26
6778: PUSH
6779: LD_INT 27
6781: PUSH
6782: LD_INT 28
6784: PUSH
6785: LD_INT 30
6787: PUSH
6788: LD_INT 31
6790: PUSH
6791: LD_INT 32
6793: PUSH
6794: LD_INT 33
6796: PUSH
6797: LD_INT 34
6799: PUSH
6800: LD_INT 36
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 101
6841: PUSH
6842: LD_INT 102
6844: PUSH
6845: LD_INT 103
6847: PUSH
6848: LD_INT 104
6850: PUSH
6851: LD_INT 105
6853: PUSH
6854: LD_INT 106
6856: PUSH
6857: LD_INT 107
6859: PUSH
6860: LD_INT 108
6862: PUSH
6863: LD_INT 109
6865: PUSH
6866: LD_INT 110
6868: PUSH
6869: LD_INT 111
6871: PUSH
6872: LD_INT 112
6874: PUSH
6875: LD_INT 113
6877: PUSH
6878: LD_INT 114
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: ST_TO_ADDR
6901: GO 8272
6903: LD_INT 13
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7107
6911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6912: LD_ADDR_VAR 0 1
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 4
6928: PUSH
6929: LD_INT 5
6931: PUSH
6932: LD_INT 8
6934: PUSH
6935: LD_INT 9
6937: PUSH
6938: LD_INT 10
6940: PUSH
6941: LD_INT 11
6943: PUSH
6944: LD_INT 12
6946: PUSH
6947: LD_INT 14
6949: PUSH
6950: LD_INT 15
6952: PUSH
6953: LD_INT 16
6955: PUSH
6956: LD_INT 17
6958: PUSH
6959: LD_INT 18
6961: PUSH
6962: LD_INT 19
6964: PUSH
6965: LD_INT 20
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 23
6976: PUSH
6977: LD_INT 24
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 26
6985: PUSH
6986: LD_INT 27
6988: PUSH
6989: LD_INT 28
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 31
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: LD_INT 33
7003: PUSH
7004: LD_INT 34
7006: PUSH
7007: LD_INT 36
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 101
7045: PUSH
7046: LD_INT 102
7048: PUSH
7049: LD_INT 103
7051: PUSH
7052: LD_INT 104
7054: PUSH
7055: LD_INT 105
7057: PUSH
7058: LD_INT 106
7060: PUSH
7061: LD_INT 107
7063: PUSH
7064: LD_INT 108
7066: PUSH
7067: LD_INT 109
7069: PUSH
7070: LD_INT 110
7072: PUSH
7073: LD_INT 111
7075: PUSH
7076: LD_INT 112
7078: PUSH
7079: LD_INT 113
7081: PUSH
7082: LD_INT 114
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: ST_TO_ADDR
7105: GO 8272
7107: LD_INT 14
7109: DOUBLE
7110: EQUAL
7111: IFTRUE 7115
7113: GO 7327
7115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7116: LD_ADDR_VAR 0 1
7120: PUSH
7121: LD_INT 1
7123: PUSH
7124: LD_INT 2
7126: PUSH
7127: LD_INT 3
7129: PUSH
7130: LD_INT 4
7132: PUSH
7133: LD_INT 5
7135: PUSH
7136: LD_INT 6
7138: PUSH
7139: LD_INT 7
7141: PUSH
7142: LD_INT 8
7144: PUSH
7145: LD_INT 9
7147: PUSH
7148: LD_INT 10
7150: PUSH
7151: LD_INT 11
7153: PUSH
7154: LD_INT 12
7156: PUSH
7157: LD_INT 13
7159: PUSH
7160: LD_INT 14
7162: PUSH
7163: LD_INT 15
7165: PUSH
7166: LD_INT 16
7168: PUSH
7169: LD_INT 17
7171: PUSH
7172: LD_INT 18
7174: PUSH
7175: LD_INT 19
7177: PUSH
7178: LD_INT 20
7180: PUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 23
7189: PUSH
7190: LD_INT 24
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 26
7198: PUSH
7199: LD_INT 27
7201: PUSH
7202: LD_INT 28
7204: PUSH
7205: LD_INT 29
7207: PUSH
7208: LD_INT 30
7210: PUSH
7211: LD_INT 31
7213: PUSH
7214: LD_INT 32
7216: PUSH
7217: LD_INT 33
7219: PUSH
7220: LD_INT 34
7222: PUSH
7223: LD_INT 36
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 102
7268: PUSH
7269: LD_INT 103
7271: PUSH
7272: LD_INT 104
7274: PUSH
7275: LD_INT 105
7277: PUSH
7278: LD_INT 106
7280: PUSH
7281: LD_INT 107
7283: PUSH
7284: LD_INT 108
7286: PUSH
7287: LD_INT 109
7289: PUSH
7290: LD_INT 110
7292: PUSH
7293: LD_INT 111
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 113
7301: PUSH
7302: LD_INT 114
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 8272
7327: LD_INT 15
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7547
7335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7336: LD_ADDR_VAR 0 1
7340: PUSH
7341: LD_INT 1
7343: PUSH
7344: LD_INT 2
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: LD_INT 4
7352: PUSH
7353: LD_INT 5
7355: PUSH
7356: LD_INT 6
7358: PUSH
7359: LD_INT 7
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 9
7367: PUSH
7368: LD_INT 10
7370: PUSH
7371: LD_INT 11
7373: PUSH
7374: LD_INT 12
7376: PUSH
7377: LD_INT 13
7379: PUSH
7380: LD_INT 14
7382: PUSH
7383: LD_INT 15
7385: PUSH
7386: LD_INT 16
7388: PUSH
7389: LD_INT 17
7391: PUSH
7392: LD_INT 18
7394: PUSH
7395: LD_INT 19
7397: PUSH
7398: LD_INT 20
7400: PUSH
7401: LD_INT 21
7403: PUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 24
7412: PUSH
7413: LD_INT 25
7415: PUSH
7416: LD_INT 26
7418: PUSH
7419: LD_INT 27
7421: PUSH
7422: LD_INT 28
7424: PUSH
7425: LD_INT 29
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 31
7433: PUSH
7434: LD_INT 32
7436: PUSH
7437: LD_INT 33
7439: PUSH
7440: LD_INT 34
7442: PUSH
7443: LD_INT 36
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 101
7485: PUSH
7486: LD_INT 102
7488: PUSH
7489: LD_INT 103
7491: PUSH
7492: LD_INT 104
7494: PUSH
7495: LD_INT 105
7497: PUSH
7498: LD_INT 106
7500: PUSH
7501: LD_INT 107
7503: PUSH
7504: LD_INT 108
7506: PUSH
7507: LD_INT 109
7509: PUSH
7510: LD_INT 110
7512: PUSH
7513: LD_INT 111
7515: PUSH
7516: LD_INT 112
7518: PUSH
7519: LD_INT 113
7521: PUSH
7522: LD_INT 114
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
7545: GO 8272
7547: LD_INT 16
7549: DOUBLE
7550: EQUAL
7551: IFTRUE 7555
7553: GO 7679
7555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7556: LD_ADDR_VAR 0 1
7560: PUSH
7561: LD_INT 2
7563: PUSH
7564: LD_INT 4
7566: PUSH
7567: LD_INT 5
7569: PUSH
7570: LD_INT 7
7572: PUSH
7573: LD_INT 11
7575: PUSH
7576: LD_INT 12
7578: PUSH
7579: LD_INT 15
7581: PUSH
7582: LD_INT 16
7584: PUSH
7585: LD_INT 20
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 22
7593: PUSH
7594: LD_INT 23
7596: PUSH
7597: LD_INT 25
7599: PUSH
7600: LD_INT 26
7602: PUSH
7603: LD_INT 30
7605: PUSH
7606: LD_INT 31
7608: PUSH
7609: LD_INT 32
7611: PUSH
7612: LD_INT 33
7614: PUSH
7615: LD_INT 34
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 101
7641: PUSH
7642: LD_INT 102
7644: PUSH
7645: LD_INT 103
7647: PUSH
7648: LD_INT 106
7650: PUSH
7651: LD_INT 108
7653: PUSH
7654: LD_INT 112
7656: PUSH
7657: LD_INT 113
7659: PUSH
7660: LD_INT 114
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: ST_TO_ADDR
7677: GO 8272
7679: LD_INT 17
7681: DOUBLE
7682: EQUAL
7683: IFTRUE 7687
7685: GO 7899
7687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7688: LD_ADDR_VAR 0 1
7692: PUSH
7693: LD_INT 1
7695: PUSH
7696: LD_INT 2
7698: PUSH
7699: LD_INT 3
7701: PUSH
7702: LD_INT 4
7704: PUSH
7705: LD_INT 5
7707: PUSH
7708: LD_INT 6
7710: PUSH
7711: LD_INT 7
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: LD_INT 9
7719: PUSH
7720: LD_INT 10
7722: PUSH
7723: LD_INT 11
7725: PUSH
7726: LD_INT 12
7728: PUSH
7729: LD_INT 13
7731: PUSH
7732: LD_INT 14
7734: PUSH
7735: LD_INT 15
7737: PUSH
7738: LD_INT 16
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: LD_INT 18
7746: PUSH
7747: LD_INT 19
7749: PUSH
7750: LD_INT 20
7752: PUSH
7753: LD_INT 21
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 23
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 26
7770: PUSH
7771: LD_INT 27
7773: PUSH
7774: LD_INT 28
7776: PUSH
7777: LD_INT 29
7779: PUSH
7780: LD_INT 30
7782: PUSH
7783: LD_INT 31
7785: PUSH
7786: LD_INT 32
7788: PUSH
7789: LD_INT 33
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 101
7837: PUSH
7838: LD_INT 102
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 104
7846: PUSH
7847: LD_INT 105
7849: PUSH
7850: LD_INT 106
7852: PUSH
7853: LD_INT 107
7855: PUSH
7856: LD_INT 108
7858: PUSH
7859: LD_INT 109
7861: PUSH
7862: LD_INT 110
7864: PUSH
7865: LD_INT 111
7867: PUSH
7868: LD_INT 112
7870: PUSH
7871: LD_INT 113
7873: PUSH
7874: LD_INT 114
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: ST_TO_ADDR
7897: GO 8272
7899: LD_INT 18
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 8043
7907: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7908: LD_ADDR_VAR 0 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 4
7918: PUSH
7919: LD_INT 5
7921: PUSH
7922: LD_INT 7
7924: PUSH
7925: LD_INT 11
7927: PUSH
7928: LD_INT 12
7930: PUSH
7931: LD_INT 15
7933: PUSH
7934: LD_INT 16
7936: PUSH
7937: LD_INT 20
7939: PUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_INT 23
7948: PUSH
7949: LD_INT 25
7951: PUSH
7952: LD_INT 26
7954: PUSH
7955: LD_INT 30
7957: PUSH
7958: LD_INT 31
7960: PUSH
7961: LD_INT 32
7963: PUSH
7964: LD_INT 33
7966: PUSH
7967: LD_INT 34
7969: PUSH
7970: LD_INT 35
7972: PUSH
7973: LD_INT 36
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 101
8001: PUSH
8002: LD_INT 102
8004: PUSH
8005: LD_INT 103
8007: PUSH
8008: LD_INT 106
8010: PUSH
8011: LD_INT 108
8013: PUSH
8014: LD_INT 112
8016: PUSH
8017: LD_INT 113
8019: PUSH
8020: LD_INT 114
8022: PUSH
8023: LD_INT 115
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: ST_TO_ADDR
8041: GO 8272
8043: LD_INT 19
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8271
8051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: LD_INT 4
8068: PUSH
8069: LD_INT 5
8071: PUSH
8072: LD_INT 6
8074: PUSH
8075: LD_INT 7
8077: PUSH
8078: LD_INT 8
8080: PUSH
8081: LD_INT 9
8083: PUSH
8084: LD_INT 10
8086: PUSH
8087: LD_INT 11
8089: PUSH
8090: LD_INT 12
8092: PUSH
8093: LD_INT 13
8095: PUSH
8096: LD_INT 14
8098: PUSH
8099: LD_INT 15
8101: PUSH
8102: LD_INT 16
8104: PUSH
8105: LD_INT 17
8107: PUSH
8108: LD_INT 18
8110: PUSH
8111: LD_INT 19
8113: PUSH
8114: LD_INT 20
8116: PUSH
8117: LD_INT 21
8119: PUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 23
8125: PUSH
8126: LD_INT 24
8128: PUSH
8129: LD_INT 25
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 27
8137: PUSH
8138: LD_INT 28
8140: PUSH
8141: LD_INT 29
8143: PUSH
8144: LD_INT 30
8146: PUSH
8147: LD_INT 31
8149: PUSH
8150: LD_INT 32
8152: PUSH
8153: LD_INT 33
8155: PUSH
8156: LD_INT 34
8158: PUSH
8159: LD_INT 35
8161: PUSH
8162: LD_INT 36
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: PUSH
8203: LD_INT 101
8205: PUSH
8206: LD_INT 102
8208: PUSH
8209: LD_INT 103
8211: PUSH
8212: LD_INT 104
8214: PUSH
8215: LD_INT 105
8217: PUSH
8218: LD_INT 106
8220: PUSH
8221: LD_INT 107
8223: PUSH
8224: LD_INT 108
8226: PUSH
8227: LD_INT 109
8229: PUSH
8230: LD_INT 110
8232: PUSH
8233: LD_INT 111
8235: PUSH
8236: LD_INT 112
8238: PUSH
8239: LD_INT 113
8241: PUSH
8242: LD_INT 114
8244: PUSH
8245: LD_INT 115
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: ST_TO_ADDR
8269: GO 8272
8271: POP
// end else
8272: GO 8491
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8274: LD_ADDR_VAR 0 1
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: LD_INT 2
8284: PUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 4
8290: PUSH
8291: LD_INT 5
8293: PUSH
8294: LD_INT 6
8296: PUSH
8297: LD_INT 7
8299: PUSH
8300: LD_INT 8
8302: PUSH
8303: LD_INT 9
8305: PUSH
8306: LD_INT 10
8308: PUSH
8309: LD_INT 11
8311: PUSH
8312: LD_INT 12
8314: PUSH
8315: LD_INT 13
8317: PUSH
8318: LD_INT 14
8320: PUSH
8321: LD_INT 15
8323: PUSH
8324: LD_INT 16
8326: PUSH
8327: LD_INT 17
8329: PUSH
8330: LD_INT 18
8332: PUSH
8333: LD_INT 19
8335: PUSH
8336: LD_INT 20
8338: PUSH
8339: LD_INT 21
8341: PUSH
8342: LD_INT 22
8344: PUSH
8345: LD_INT 23
8347: PUSH
8348: LD_INT 24
8350: PUSH
8351: LD_INT 25
8353: PUSH
8354: LD_INT 26
8356: PUSH
8357: LD_INT 27
8359: PUSH
8360: LD_INT 28
8362: PUSH
8363: LD_INT 29
8365: PUSH
8366: LD_INT 30
8368: PUSH
8369: LD_INT 31
8371: PUSH
8372: LD_INT 32
8374: PUSH
8375: LD_INT 33
8377: PUSH
8378: LD_INT 34
8380: PUSH
8381: LD_INT 35
8383: PUSH
8384: LD_INT 36
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 101
8427: PUSH
8428: LD_INT 102
8430: PUSH
8431: LD_INT 103
8433: PUSH
8434: LD_INT 104
8436: PUSH
8437: LD_INT 105
8439: PUSH
8440: LD_INT 106
8442: PUSH
8443: LD_INT 107
8445: PUSH
8446: LD_INT 108
8448: PUSH
8449: LD_INT 109
8451: PUSH
8452: LD_INT 110
8454: PUSH
8455: LD_INT 111
8457: PUSH
8458: LD_INT 112
8460: PUSH
8461: LD_INT 113
8463: PUSH
8464: LD_INT 114
8466: PUSH
8467: LD_INT 115
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: ST_TO_ADDR
// if result then
8491: LD_VAR 0 1
8495: IFFALSE 8784
// begin normal :=  ;
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: LD_STRING 
8504: ST_TO_ADDR
// hardcore :=  ;
8505: LD_ADDR_VAR 0 4
8509: PUSH
8510: LD_STRING 
8512: ST_TO_ADDR
// for i = 1 to normalCounter do
8513: LD_ADDR_VAR 0 5
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_EXP 16
8527: PUSH
8528: FOR_TO
8529: IFFALSE 8630
// begin tmp := 0 ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_STRING 0
8538: ST_TO_ADDR
// if result [ 1 ] then
8539: LD_VAR 0 1
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: IFFALSE 8612
// if result [ 1 ] [ 1 ] = i then
8549: LD_VAR 0 1
8553: PUSH
8554: LD_INT 1
8556: ARRAY
8557: PUSH
8558: LD_INT 1
8560: ARRAY
8561: PUSH
8562: LD_VAR 0 5
8566: EQUAL
8567: IFFALSE 8612
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8569: LD_ADDR_VAR 0 1
8573: PUSH
8574: LD_VAR 0 1
8578: PPUSH
8579: LD_INT 1
8581: PPUSH
8582: LD_VAR 0 1
8586: PUSH
8587: LD_INT 1
8589: ARRAY
8590: PPUSH
8591: LD_INT 1
8593: PPUSH
8594: CALL_OW 3
8598: PPUSH
8599: CALL_OW 1
8603: ST_TO_ADDR
// tmp := 1 ;
8604: LD_ADDR_VAR 0 2
8608: PUSH
8609: LD_STRING 1
8611: ST_TO_ADDR
// end ; normal := normal & tmp ;
8612: LD_ADDR_VAR 0 3
8616: PUSH
8617: LD_VAR 0 3
8621: PUSH
8622: LD_VAR 0 2
8626: STR
8627: ST_TO_ADDR
// end ;
8628: GO 8528
8630: POP
8631: POP
// for i = 1 to hardcoreCounter do
8632: LD_ADDR_VAR 0 5
8636: PUSH
8637: DOUBLE
8638: LD_INT 1
8640: DEC
8641: ST_TO_ADDR
8642: LD_EXP 17
8646: PUSH
8647: FOR_TO
8648: IFFALSE 8753
// begin tmp := 0 ;
8650: LD_ADDR_VAR 0 2
8654: PUSH
8655: LD_STRING 0
8657: ST_TO_ADDR
// if result [ 2 ] then
8658: LD_VAR 0 1
8662: PUSH
8663: LD_INT 2
8665: ARRAY
8666: IFFALSE 8735
// if result [ 2 ] [ 1 ] = 100 + i then
8668: LD_VAR 0 1
8672: PUSH
8673: LD_INT 2
8675: ARRAY
8676: PUSH
8677: LD_INT 1
8679: ARRAY
8680: PUSH
8681: LD_INT 100
8683: PUSH
8684: LD_VAR 0 5
8688: PLUS
8689: EQUAL
8690: IFFALSE 8735
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8692: LD_ADDR_VAR 0 1
8696: PUSH
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_INT 2
8704: PPUSH
8705: LD_VAR 0 1
8709: PUSH
8710: LD_INT 2
8712: ARRAY
8713: PPUSH
8714: LD_INT 1
8716: PPUSH
8717: CALL_OW 3
8721: PPUSH
8722: CALL_OW 1
8726: ST_TO_ADDR
// tmp := 1 ;
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: LD_STRING 1
8734: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8735: LD_ADDR_VAR 0 4
8739: PUSH
8740: LD_VAR 0 4
8744: PUSH
8745: LD_VAR 0 2
8749: STR
8750: ST_TO_ADDR
// end ;
8751: GO 8647
8753: POP
8754: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8755: LD_STRING getStreamItemsFromMission("
8757: PUSH
8758: LD_VAR 0 3
8762: STR
8763: PUSH
8764: LD_STRING ","
8766: STR
8767: PUSH
8768: LD_VAR 0 4
8772: STR
8773: PUSH
8774: LD_STRING ")
8776: STR
8777: PPUSH
8778: CALL_OW 559
// end else
8782: GO 8791
// ToLua ( getStreamItemsFromMission("","") ) ;
8784: LD_STRING getStreamItemsFromMission("","")
8786: PPUSH
8787: CALL_OW 559
// end ;
8791: LD_VAR 0 1
8795: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8796: LD_VAR 0 2
8800: PUSH
8801: LD_INT 100
8803: EQUAL
8804: IFFALSE 9753
// begin if not StreamModeActive then
8806: LD_EXP 15
8810: NOT
8811: IFFALSE 8821
// StreamModeActive := true ;
8813: LD_ADDR_EXP 15
8817: PUSH
8818: LD_INT 1
8820: ST_TO_ADDR
// if p3 = 0 then
8821: LD_VAR 0 3
8825: PUSH
8826: LD_INT 0
8828: EQUAL
8829: IFFALSE 8835
// InitStreamMode ;
8831: CALL 4874 0 0
// if p3 = 1 then
8835: LD_VAR 0 3
8839: PUSH
8840: LD_INT 1
8842: EQUAL
8843: IFFALSE 8853
// sRocket := true ;
8845: LD_ADDR_EXP 20
8849: PUSH
8850: LD_INT 1
8852: ST_TO_ADDR
// if p3 = 2 then
8853: LD_VAR 0 3
8857: PUSH
8858: LD_INT 2
8860: EQUAL
8861: IFFALSE 8871
// sSpeed := true ;
8863: LD_ADDR_EXP 19
8867: PUSH
8868: LD_INT 1
8870: ST_TO_ADDR
// if p3 = 3 then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_INT 3
8878: EQUAL
8879: IFFALSE 8889
// sEngine := true ;
8881: LD_ADDR_EXP 21
8885: PUSH
8886: LD_INT 1
8888: ST_TO_ADDR
// if p3 = 4 then
8889: LD_VAR 0 3
8893: PUSH
8894: LD_INT 4
8896: EQUAL
8897: IFFALSE 8907
// sSpec := true ;
8899: LD_ADDR_EXP 18
8903: PUSH
8904: LD_INT 1
8906: ST_TO_ADDR
// if p3 = 5 then
8907: LD_VAR 0 3
8911: PUSH
8912: LD_INT 5
8914: EQUAL
8915: IFFALSE 8925
// sLevel := true ;
8917: LD_ADDR_EXP 22
8921: PUSH
8922: LD_INT 1
8924: ST_TO_ADDR
// if p3 = 6 then
8925: LD_VAR 0 3
8929: PUSH
8930: LD_INT 6
8932: EQUAL
8933: IFFALSE 8943
// sArmoury := true ;
8935: LD_ADDR_EXP 23
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// if p3 = 7 then
8943: LD_VAR 0 3
8947: PUSH
8948: LD_INT 7
8950: EQUAL
8951: IFFALSE 8961
// sRadar := true ;
8953: LD_ADDR_EXP 24
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// if p3 = 8 then
8961: LD_VAR 0 3
8965: PUSH
8966: LD_INT 8
8968: EQUAL
8969: IFFALSE 8979
// sBunker := true ;
8971: LD_ADDR_EXP 25
8975: PUSH
8976: LD_INT 1
8978: ST_TO_ADDR
// if p3 = 9 then
8979: LD_VAR 0 3
8983: PUSH
8984: LD_INT 9
8986: EQUAL
8987: IFFALSE 8997
// sHack := true ;
8989: LD_ADDR_EXP 26
8993: PUSH
8994: LD_INT 1
8996: ST_TO_ADDR
// if p3 = 10 then
8997: LD_VAR 0 3
9001: PUSH
9002: LD_INT 10
9004: EQUAL
9005: IFFALSE 9015
// sFire := true ;
9007: LD_ADDR_EXP 27
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// if p3 = 11 then
9015: LD_VAR 0 3
9019: PUSH
9020: LD_INT 11
9022: EQUAL
9023: IFFALSE 9033
// sRefresh := true ;
9025: LD_ADDR_EXP 28
9029: PUSH
9030: LD_INT 1
9032: ST_TO_ADDR
// if p3 = 12 then
9033: LD_VAR 0 3
9037: PUSH
9038: LD_INT 12
9040: EQUAL
9041: IFFALSE 9051
// sExp := true ;
9043: LD_ADDR_EXP 29
9047: PUSH
9048: LD_INT 1
9050: ST_TO_ADDR
// if p3 = 13 then
9051: LD_VAR 0 3
9055: PUSH
9056: LD_INT 13
9058: EQUAL
9059: IFFALSE 9069
// sDepot := true ;
9061: LD_ADDR_EXP 30
9065: PUSH
9066: LD_INT 1
9068: ST_TO_ADDR
// if p3 = 14 then
9069: LD_VAR 0 3
9073: PUSH
9074: LD_INT 14
9076: EQUAL
9077: IFFALSE 9087
// sFlag := true ;
9079: LD_ADDR_EXP 31
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// if p3 = 15 then
9087: LD_VAR 0 3
9091: PUSH
9092: LD_INT 15
9094: EQUAL
9095: IFFALSE 9105
// sKamikadze := true ;
9097: LD_ADDR_EXP 39
9101: PUSH
9102: LD_INT 1
9104: ST_TO_ADDR
// if p3 = 16 then
9105: LD_VAR 0 3
9109: PUSH
9110: LD_INT 16
9112: EQUAL
9113: IFFALSE 9123
// sTroll := true ;
9115: LD_ADDR_EXP 40
9119: PUSH
9120: LD_INT 1
9122: ST_TO_ADDR
// if p3 = 17 then
9123: LD_VAR 0 3
9127: PUSH
9128: LD_INT 17
9130: EQUAL
9131: IFFALSE 9141
// sSlow := true ;
9133: LD_ADDR_EXP 41
9137: PUSH
9138: LD_INT 1
9140: ST_TO_ADDR
// if p3 = 18 then
9141: LD_VAR 0 3
9145: PUSH
9146: LD_INT 18
9148: EQUAL
9149: IFFALSE 9159
// sLack := true ;
9151: LD_ADDR_EXP 42
9155: PUSH
9156: LD_INT 1
9158: ST_TO_ADDR
// if p3 = 19 then
9159: LD_VAR 0 3
9163: PUSH
9164: LD_INT 19
9166: EQUAL
9167: IFFALSE 9177
// sTank := true ;
9169: LD_ADDR_EXP 44
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// if p3 = 20 then
9177: LD_VAR 0 3
9181: PUSH
9182: LD_INT 20
9184: EQUAL
9185: IFFALSE 9195
// sRemote := true ;
9187: LD_ADDR_EXP 45
9191: PUSH
9192: LD_INT 1
9194: ST_TO_ADDR
// if p3 = 21 then
9195: LD_VAR 0 3
9199: PUSH
9200: LD_INT 21
9202: EQUAL
9203: IFFALSE 9213
// sPowell := true ;
9205: LD_ADDR_EXP 46
9209: PUSH
9210: LD_INT 1
9212: ST_TO_ADDR
// if p3 = 22 then
9213: LD_VAR 0 3
9217: PUSH
9218: LD_INT 22
9220: EQUAL
9221: IFFALSE 9231
// sTeleport := true ;
9223: LD_ADDR_EXP 49
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// if p3 = 23 then
9231: LD_VAR 0 3
9235: PUSH
9236: LD_INT 23
9238: EQUAL
9239: IFFALSE 9249
// sOilTower := true ;
9241: LD_ADDR_EXP 51
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// if p3 = 24 then
9249: LD_VAR 0 3
9253: PUSH
9254: LD_INT 24
9256: EQUAL
9257: IFFALSE 9267
// sShovel := true ;
9259: LD_ADDR_EXP 52
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// if p3 = 25 then
9267: LD_VAR 0 3
9271: PUSH
9272: LD_INT 25
9274: EQUAL
9275: IFFALSE 9285
// sSheik := true ;
9277: LD_ADDR_EXP 53
9281: PUSH
9282: LD_INT 1
9284: ST_TO_ADDR
// if p3 = 26 then
9285: LD_VAR 0 3
9289: PUSH
9290: LD_INT 26
9292: EQUAL
9293: IFFALSE 9303
// sEarthquake := true ;
9295: LD_ADDR_EXP 55
9299: PUSH
9300: LD_INT 1
9302: ST_TO_ADDR
// if p3 = 27 then
9303: LD_VAR 0 3
9307: PUSH
9308: LD_INT 27
9310: EQUAL
9311: IFFALSE 9321
// sAI := true ;
9313: LD_ADDR_EXP 56
9317: PUSH
9318: LD_INT 1
9320: ST_TO_ADDR
// if p3 = 28 then
9321: LD_VAR 0 3
9325: PUSH
9326: LD_INT 28
9328: EQUAL
9329: IFFALSE 9339
// sCargo := true ;
9331: LD_ADDR_EXP 59
9335: PUSH
9336: LD_INT 1
9338: ST_TO_ADDR
// if p3 = 29 then
9339: LD_VAR 0 3
9343: PUSH
9344: LD_INT 29
9346: EQUAL
9347: IFFALSE 9357
// sDLaser := true ;
9349: LD_ADDR_EXP 60
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// if p3 = 30 then
9357: LD_VAR 0 3
9361: PUSH
9362: LD_INT 30
9364: EQUAL
9365: IFFALSE 9375
// sExchange := true ;
9367: LD_ADDR_EXP 61
9371: PUSH
9372: LD_INT 1
9374: ST_TO_ADDR
// if p3 = 31 then
9375: LD_VAR 0 3
9379: PUSH
9380: LD_INT 31
9382: EQUAL
9383: IFFALSE 9393
// sFac := true ;
9385: LD_ADDR_EXP 62
9389: PUSH
9390: LD_INT 1
9392: ST_TO_ADDR
// if p3 = 32 then
9393: LD_VAR 0 3
9397: PUSH
9398: LD_INT 32
9400: EQUAL
9401: IFFALSE 9411
// sPower := true ;
9403: LD_ADDR_EXP 63
9407: PUSH
9408: LD_INT 1
9410: ST_TO_ADDR
// if p3 = 33 then
9411: LD_VAR 0 3
9415: PUSH
9416: LD_INT 33
9418: EQUAL
9419: IFFALSE 9429
// sRandom := true ;
9421: LD_ADDR_EXP 64
9425: PUSH
9426: LD_INT 1
9428: ST_TO_ADDR
// if p3 = 34 then
9429: LD_VAR 0 3
9433: PUSH
9434: LD_INT 34
9436: EQUAL
9437: IFFALSE 9447
// sShield := true ;
9439: LD_ADDR_EXP 65
9443: PUSH
9444: LD_INT 1
9446: ST_TO_ADDR
// if p3 = 35 then
9447: LD_VAR 0 3
9451: PUSH
9452: LD_INT 35
9454: EQUAL
9455: IFFALSE 9465
// sTime := true ;
9457: LD_ADDR_EXP 66
9461: PUSH
9462: LD_INT 1
9464: ST_TO_ADDR
// if p3 = 36 then
9465: LD_VAR 0 3
9469: PUSH
9470: LD_INT 36
9472: EQUAL
9473: IFFALSE 9483
// sTools := true ;
9475: LD_ADDR_EXP 67
9479: PUSH
9480: LD_INT 1
9482: ST_TO_ADDR
// if p3 = 101 then
9483: LD_VAR 0 3
9487: PUSH
9488: LD_INT 101
9490: EQUAL
9491: IFFALSE 9501
// sSold := true ;
9493: LD_ADDR_EXP 32
9497: PUSH
9498: LD_INT 1
9500: ST_TO_ADDR
// if p3 = 102 then
9501: LD_VAR 0 3
9505: PUSH
9506: LD_INT 102
9508: EQUAL
9509: IFFALSE 9519
// sDiff := true ;
9511: LD_ADDR_EXP 33
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// if p3 = 103 then
9519: LD_VAR 0 3
9523: PUSH
9524: LD_INT 103
9526: EQUAL
9527: IFFALSE 9537
// sFog := true ;
9529: LD_ADDR_EXP 36
9533: PUSH
9534: LD_INT 1
9536: ST_TO_ADDR
// if p3 = 104 then
9537: LD_VAR 0 3
9541: PUSH
9542: LD_INT 104
9544: EQUAL
9545: IFFALSE 9555
// sReset := true ;
9547: LD_ADDR_EXP 37
9551: PUSH
9552: LD_INT 1
9554: ST_TO_ADDR
// if p3 = 105 then
9555: LD_VAR 0 3
9559: PUSH
9560: LD_INT 105
9562: EQUAL
9563: IFFALSE 9573
// sSun := true ;
9565: LD_ADDR_EXP 38
9569: PUSH
9570: LD_INT 1
9572: ST_TO_ADDR
// if p3 = 106 then
9573: LD_VAR 0 3
9577: PUSH
9578: LD_INT 106
9580: EQUAL
9581: IFFALSE 9591
// sTiger := true ;
9583: LD_ADDR_EXP 34
9587: PUSH
9588: LD_INT 1
9590: ST_TO_ADDR
// if p3 = 107 then
9591: LD_VAR 0 3
9595: PUSH
9596: LD_INT 107
9598: EQUAL
9599: IFFALSE 9609
// sBomb := true ;
9601: LD_ADDR_EXP 35
9605: PUSH
9606: LD_INT 1
9608: ST_TO_ADDR
// if p3 = 108 then
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 108
9616: EQUAL
9617: IFFALSE 9627
// sWound := true ;
9619: LD_ADDR_EXP 43
9623: PUSH
9624: LD_INT 1
9626: ST_TO_ADDR
// if p3 = 109 then
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 109
9634: EQUAL
9635: IFFALSE 9645
// sBetray := true ;
9637: LD_ADDR_EXP 47
9641: PUSH
9642: LD_INT 1
9644: ST_TO_ADDR
// if p3 = 110 then
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 110
9652: EQUAL
9653: IFFALSE 9663
// sContamin := true ;
9655: LD_ADDR_EXP 48
9659: PUSH
9660: LD_INT 1
9662: ST_TO_ADDR
// if p3 = 111 then
9663: LD_VAR 0 3
9667: PUSH
9668: LD_INT 111
9670: EQUAL
9671: IFFALSE 9681
// sOil := true ;
9673: LD_ADDR_EXP 50
9677: PUSH
9678: LD_INT 1
9680: ST_TO_ADDR
// if p3 = 112 then
9681: LD_VAR 0 3
9685: PUSH
9686: LD_INT 112
9688: EQUAL
9689: IFFALSE 9699
// sStu := true ;
9691: LD_ADDR_EXP 54
9695: PUSH
9696: LD_INT 1
9698: ST_TO_ADDR
// if p3 = 113 then
9699: LD_VAR 0 3
9703: PUSH
9704: LD_INT 113
9706: EQUAL
9707: IFFALSE 9717
// sBazooka := true ;
9709: LD_ADDR_EXP 57
9713: PUSH
9714: LD_INT 1
9716: ST_TO_ADDR
// if p3 = 114 then
9717: LD_VAR 0 3
9721: PUSH
9722: LD_INT 114
9724: EQUAL
9725: IFFALSE 9735
// sMortar := true ;
9727: LD_ADDR_EXP 58
9731: PUSH
9732: LD_INT 1
9734: ST_TO_ADDR
// if p3 = 115 then
9735: LD_VAR 0 3
9739: PUSH
9740: LD_INT 115
9742: EQUAL
9743: IFFALSE 9753
// sRanger := true ;
9745: LD_ADDR_EXP 68
9749: PUSH
9750: LD_INT 1
9752: ST_TO_ADDR
// end ; end ;
9753: PPOPN 6
9755: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9756: LD_EXP 15
9760: PUSH
9761: LD_EXP 20
9765: AND
9766: IFFALSE 9890
9768: GO 9770
9770: DISABLE
9771: LD_INT 0
9773: PPUSH
9774: PPUSH
// begin enable ;
9775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_OWVAR 2
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 2
9795: PUSH
9796: LD_INT 34
9798: PUSH
9799: LD_INT 7
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 34
9808: PUSH
9809: LD_INT 45
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 34
9818: PUSH
9819: LD_INT 28
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 34
9828: PUSH
9829: LD_INT 47
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if not tmp then
9852: LD_VAR 0 2
9856: NOT
9857: IFFALSE 9861
// exit ;
9859: GO 9890
// for i in tmp do
9861: LD_ADDR_VAR 0 1
9865: PUSH
9866: LD_VAR 0 2
9870: PUSH
9871: FOR_IN
9872: IFFALSE 9888
// begin SetLives ( i , 0 ) ;
9874: LD_VAR 0 1
9878: PPUSH
9879: LD_INT 0
9881: PPUSH
9882: CALL_OW 234
// end ;
9886: GO 9871
9888: POP
9889: POP
// end ;
9890: PPOPN 2
9892: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9893: LD_EXP 15
9897: PUSH
9898: LD_EXP 21
9902: AND
9903: IFFALSE 9987
9905: GO 9907
9907: DISABLE
9908: LD_INT 0
9910: PPUSH
9911: PPUSH
// begin enable ;
9912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9913: LD_ADDR_VAR 0 2
9917: PUSH
9918: LD_INT 22
9920: PUSH
9921: LD_OWVAR 2
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 32
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: ST_TO_ADDR
// if not tmp then
9949: LD_VAR 0 2
9953: NOT
9954: IFFALSE 9958
// exit ;
9956: GO 9987
// for i in tmp do
9958: LD_ADDR_VAR 0 1
9962: PUSH
9963: LD_VAR 0 2
9967: PUSH
9968: FOR_IN
9969: IFFALSE 9985
// begin SetLives ( i , 0 ) ;
9971: LD_VAR 0 1
9975: PPUSH
9976: LD_INT 0
9978: PPUSH
9979: CALL_OW 234
// end ;
9983: GO 9968
9985: POP
9986: POP
// end ;
9987: PPOPN 2
9989: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9990: LD_EXP 15
9994: PUSH
9995: LD_EXP 18
9999: AND
10000: IFFALSE 10093
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
// begin enable ;
10008: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10009: LD_ADDR_VAR 0 1
10013: PUSH
10014: LD_INT 22
10016: PUSH
10017: LD_OWVAR 2
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 2
10028: PUSH
10029: LD_INT 25
10031: PUSH
10032: LD_INT 5
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 25
10041: PUSH
10042: LD_INT 9
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 25
10051: PUSH
10052: LD_INT 8
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PUSH
10074: FOR_IN
10075: IFFALSE 10091
// begin SetClass ( i , 1 ) ;
10077: LD_VAR 0 1
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: CALL_OW 336
// end ;
10089: GO 10074
10091: POP
10092: POP
// end ;
10093: PPOPN 1
10095: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10096: LD_EXP 15
10100: PUSH
10101: LD_EXP 19
10105: AND
10106: PUSH
10107: LD_OWVAR 65
10111: PUSH
10112: LD_INT 7
10114: LESS
10115: AND
10116: IFFALSE 10130
10118: GO 10120
10120: DISABLE
// begin enable ;
10121: ENABLE
// game_speed := 7 ;
10122: LD_ADDR_OWVAR 65
10126: PUSH
10127: LD_INT 7
10129: ST_TO_ADDR
// end ;
10130: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10131: LD_EXP 15
10135: PUSH
10136: LD_EXP 22
10140: AND
10141: IFFALSE 10343
10143: GO 10145
10145: DISABLE
10146: LD_INT 0
10148: PPUSH
10149: PPUSH
10150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10151: LD_ADDR_VAR 0 3
10155: PUSH
10156: LD_INT 81
10158: PUSH
10159: LD_OWVAR 2
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 21
10170: PUSH
10171: LD_INT 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: ST_TO_ADDR
// if not tmp then
10187: LD_VAR 0 3
10191: NOT
10192: IFFALSE 10196
// exit ;
10194: GO 10343
// if tmp > 5 then
10196: LD_VAR 0 3
10200: PUSH
10201: LD_INT 5
10203: GREATER
10204: IFFALSE 10216
// k := 5 else
10206: LD_ADDR_VAR 0 2
10210: PUSH
10211: LD_INT 5
10213: ST_TO_ADDR
10214: GO 10226
// k := tmp ;
10216: LD_ADDR_VAR 0 2
10220: PUSH
10221: LD_VAR 0 3
10225: ST_TO_ADDR
// for i := 1 to k do
10226: LD_ADDR_VAR 0 1
10230: PUSH
10231: DOUBLE
10232: LD_INT 1
10234: DEC
10235: ST_TO_ADDR
10236: LD_VAR 0 2
10240: PUSH
10241: FOR_TO
10242: IFFALSE 10341
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10244: LD_VAR 0 3
10248: PUSH
10249: LD_VAR 0 1
10253: ARRAY
10254: PPUSH
10255: LD_VAR 0 1
10259: PUSH
10260: LD_INT 4
10262: MOD
10263: PUSH
10264: LD_INT 1
10266: PLUS
10267: PPUSH
10268: CALL_OW 259
10272: PUSH
10273: LD_INT 10
10275: LESS
10276: IFFALSE 10339
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10278: LD_VAR 0 3
10282: PUSH
10283: LD_VAR 0 1
10287: ARRAY
10288: PPUSH
10289: LD_VAR 0 1
10293: PUSH
10294: LD_INT 4
10296: MOD
10297: PUSH
10298: LD_INT 1
10300: PLUS
10301: PPUSH
10302: LD_VAR 0 3
10306: PUSH
10307: LD_VAR 0 1
10311: ARRAY
10312: PPUSH
10313: LD_VAR 0 1
10317: PUSH
10318: LD_INT 4
10320: MOD
10321: PUSH
10322: LD_INT 1
10324: PLUS
10325: PPUSH
10326: CALL_OW 259
10330: PUSH
10331: LD_INT 1
10333: PLUS
10334: PPUSH
10335: CALL_OW 237
10339: GO 10241
10341: POP
10342: POP
// end ;
10343: PPOPN 3
10345: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10346: LD_EXP 15
10350: PUSH
10351: LD_EXP 23
10355: AND
10356: IFFALSE 10376
10358: GO 10360
10360: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10361: LD_INT 4
10363: PPUSH
10364: LD_OWVAR 2
10368: PPUSH
10369: LD_INT 0
10371: PPUSH
10372: CALL_OW 324
10376: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10377: LD_EXP 15
10381: PUSH
10382: LD_EXP 52
10386: AND
10387: IFFALSE 10407
10389: GO 10391
10391: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10392: LD_INT 19
10394: PPUSH
10395: LD_OWVAR 2
10399: PPUSH
10400: LD_INT 0
10402: PPUSH
10403: CALL_OW 324
10407: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10408: LD_EXP 15
10412: PUSH
10413: LD_EXP 24
10417: AND
10418: IFFALSE 10520
10420: GO 10422
10422: DISABLE
10423: LD_INT 0
10425: PPUSH
10426: PPUSH
// begin enable ;
10427: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: LD_INT 22
10435: PUSH
10436: LD_OWVAR 2
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 2
10447: PUSH
10448: LD_INT 34
10450: PUSH
10451: LD_INT 11
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 34
10460: PUSH
10461: LD_INT 30
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PPUSH
10477: CALL_OW 69
10481: ST_TO_ADDR
// if not tmp then
10482: LD_VAR 0 2
10486: NOT
10487: IFFALSE 10491
// exit ;
10489: GO 10520
// for i in tmp do
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_VAR 0 2
10500: PUSH
10501: FOR_IN
10502: IFFALSE 10518
// begin SetLives ( i , 0 ) ;
10504: LD_VAR 0 1
10508: PPUSH
10509: LD_INT 0
10511: PPUSH
10512: CALL_OW 234
// end ;
10516: GO 10501
10518: POP
10519: POP
// end ;
10520: PPOPN 2
10522: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10523: LD_EXP 15
10527: PUSH
10528: LD_EXP 25
10532: AND
10533: IFFALSE 10553
10535: GO 10537
10537: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10538: LD_INT 32
10540: PPUSH
10541: LD_OWVAR 2
10545: PPUSH
10546: LD_INT 0
10548: PPUSH
10549: CALL_OW 324
10553: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10554: LD_EXP 15
10558: PUSH
10559: LD_EXP 26
10563: AND
10564: IFFALSE 10745
10566: GO 10568
10568: DISABLE
10569: LD_INT 0
10571: PPUSH
10572: PPUSH
10573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_INT 22
10581: PUSH
10582: LD_OWVAR 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 33
10593: PUSH
10594: LD_INT 3
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 69
10609: ST_TO_ADDR
// if not tmp then
10610: LD_VAR 0 2
10614: NOT
10615: IFFALSE 10619
// exit ;
10617: GO 10745
// side := 0 ;
10619: LD_ADDR_VAR 0 3
10623: PUSH
10624: LD_INT 0
10626: ST_TO_ADDR
// for i := 1 to 8 do
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: DOUBLE
10633: LD_INT 1
10635: DEC
10636: ST_TO_ADDR
10637: LD_INT 8
10639: PUSH
10640: FOR_TO
10641: IFFALSE 10689
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10643: LD_OWVAR 2
10647: PUSH
10648: LD_VAR 0 1
10652: NONEQUAL
10653: PUSH
10654: LD_OWVAR 2
10658: PPUSH
10659: LD_VAR 0 1
10663: PPUSH
10664: CALL_OW 81
10668: PUSH
10669: LD_INT 2
10671: EQUAL
10672: AND
10673: IFFALSE 10687
// begin side := i ;
10675: LD_ADDR_VAR 0 3
10679: PUSH
10680: LD_VAR 0 1
10684: ST_TO_ADDR
// break ;
10685: GO 10689
// end ;
10687: GO 10640
10689: POP
10690: POP
// if not side then
10691: LD_VAR 0 3
10695: NOT
10696: IFFALSE 10700
// exit ;
10698: GO 10745
// for i := 1 to tmp do
10700: LD_ADDR_VAR 0 1
10704: PUSH
10705: DOUBLE
10706: LD_INT 1
10708: DEC
10709: ST_TO_ADDR
10710: LD_VAR 0 2
10714: PUSH
10715: FOR_TO
10716: IFFALSE 10743
// if Prob ( 60 ) then
10718: LD_INT 60
10720: PPUSH
10721: CALL_OW 13
10725: IFFALSE 10741
// SetSide ( i , side ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: CALL_OW 235
10741: GO 10715
10743: POP
10744: POP
// end ;
10745: PPOPN 3
10747: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10748: LD_EXP 15
10752: PUSH
10753: LD_EXP 28
10757: AND
10758: IFFALSE 10877
10760: GO 10762
10762: DISABLE
10763: LD_INT 0
10765: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10766: LD_ADDR_VAR 0 1
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_OWVAR 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 21
10785: PUSH
10786: LD_INT 1
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: LD_INT 23
10798: PUSH
10799: LD_INT 0
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: PPUSH
10815: CALL_OW 69
10819: PUSH
10820: FOR_IN
10821: IFFALSE 10875
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10823: LD_VAR 0 1
10827: PPUSH
10828: CALL_OW 257
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: LD_INT 3
10841: PUSH
10842: LD_INT 4
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: IN
10851: IFFALSE 10873
// SetClass ( un , rand ( 1 , 4 ) ) ;
10853: LD_VAR 0 1
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: LD_INT 4
10863: PPUSH
10864: CALL_OW 12
10868: PPUSH
10869: CALL_OW 336
10873: GO 10820
10875: POP
10876: POP
// end ;
10877: PPOPN 1
10879: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10880: LD_EXP 15
10884: PUSH
10885: LD_EXP 27
10889: AND
10890: IFFALSE 10969
10892: GO 10894
10894: DISABLE
10895: LD_INT 0
10897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10898: LD_ADDR_VAR 0 1
10902: PUSH
10903: LD_INT 22
10905: PUSH
10906: LD_OWVAR 2
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 21
10917: PUSH
10918: LD_INT 3
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 69
10933: ST_TO_ADDR
// if not tmp then
10934: LD_VAR 0 1
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 10969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10943: LD_VAR 0 1
10947: PUSH
10948: LD_INT 1
10950: PPUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 12
10960: ARRAY
10961: PPUSH
10962: LD_INT 100
10964: PPUSH
10965: CALL_OW 234
// end ;
10969: PPOPN 1
10971: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10972: LD_EXP 15
10976: PUSH
10977: LD_EXP 29
10981: AND
10982: IFFALSE 11080
10984: GO 10986
10986: DISABLE
10987: LD_INT 0
10989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10990: LD_ADDR_VAR 0 1
10994: PUSH
10995: LD_INT 22
10997: PUSH
10998: LD_OWVAR 2
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 21
11009: PUSH
11010: LD_INT 1
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PPUSH
11021: CALL_OW 69
11025: ST_TO_ADDR
// if not tmp then
11026: LD_VAR 0 1
11030: NOT
11031: IFFALSE 11035
// exit ;
11033: GO 11080
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11035: LD_VAR 0 1
11039: PUSH
11040: LD_INT 1
11042: PPUSH
11043: LD_VAR 0 1
11047: PPUSH
11048: CALL_OW 12
11052: ARRAY
11053: PPUSH
11054: LD_INT 1
11056: PPUSH
11057: LD_INT 4
11059: PPUSH
11060: CALL_OW 12
11064: PPUSH
11065: LD_INT 3000
11067: PPUSH
11068: LD_INT 9000
11070: PPUSH
11071: CALL_OW 12
11075: PPUSH
11076: CALL_OW 492
// end ;
11080: PPOPN 1
11082: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11083: LD_EXP 15
11087: PUSH
11088: LD_EXP 30
11092: AND
11093: IFFALSE 11113
11095: GO 11097
11097: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11098: LD_INT 1
11100: PPUSH
11101: LD_OWVAR 2
11105: PPUSH
11106: LD_INT 0
11108: PPUSH
11109: CALL_OW 324
11113: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11114: LD_EXP 15
11118: PUSH
11119: LD_EXP 31
11123: AND
11124: IFFALSE 11207
11126: GO 11128
11128: DISABLE
11129: LD_INT 0
11131: PPUSH
11132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_OWVAR 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 3
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: ST_TO_ADDR
// if not tmp then
11169: LD_VAR 0 2
11173: NOT
11174: IFFALSE 11178
// exit ;
11176: GO 11207
// for i in tmp do
11178: LD_ADDR_VAR 0 1
11182: PUSH
11183: LD_VAR 0 2
11187: PUSH
11188: FOR_IN
11189: IFFALSE 11205
// SetBLevel ( i , 10 ) ;
11191: LD_VAR 0 1
11195: PPUSH
11196: LD_INT 10
11198: PPUSH
11199: CALL_OW 241
11203: GO 11188
11205: POP
11206: POP
// end ;
11207: PPOPN 2
11209: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11210: LD_EXP 15
11214: PUSH
11215: LD_EXP 32
11219: AND
11220: IFFALSE 11331
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
11228: PPUSH
11229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: LD_INT 22
11237: PUSH
11238: LD_OWVAR 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: ST_TO_ADDR
// if not tmp then
11266: LD_VAR 0 3
11270: NOT
11271: IFFALSE 11275
// exit ;
11273: GO 11331
// un := tmp [ rand ( 1 , tmp ) ] ;
11275: LD_ADDR_VAR 0 2
11279: PUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_INT 1
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: CALL_OW 12
11297: ARRAY
11298: ST_TO_ADDR
// if Crawls ( un ) then
11299: LD_VAR 0 2
11303: PPUSH
11304: CALL_OW 318
11308: IFFALSE 11319
// ComWalk ( un ) ;
11310: LD_VAR 0 2
11314: PPUSH
11315: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11319: LD_VAR 0 2
11323: PPUSH
11324: LD_INT 5
11326: PPUSH
11327: CALL_OW 336
// end ;
11331: PPOPN 3
11333: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11334: LD_EXP 15
11338: PUSH
11339: LD_EXP 33
11343: AND
11344: PUSH
11345: LD_OWVAR 67
11349: PUSH
11350: LD_INT 3
11352: LESS
11353: AND
11354: IFFALSE 11373
11356: GO 11358
11358: DISABLE
// Difficulty := Difficulty + 1 ;
11359: LD_ADDR_OWVAR 67
11363: PUSH
11364: LD_OWVAR 67
11368: PUSH
11369: LD_INT 1
11371: PLUS
11372: ST_TO_ADDR
11373: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11374: LD_EXP 15
11378: PUSH
11379: LD_EXP 34
11383: AND
11384: IFFALSE 11487
11386: GO 11388
11388: DISABLE
11389: LD_INT 0
11391: PPUSH
// begin for i := 1 to 5 do
11392: LD_ADDR_VAR 0 1
11396: PUSH
11397: DOUBLE
11398: LD_INT 1
11400: DEC
11401: ST_TO_ADDR
11402: LD_INT 5
11404: PUSH
11405: FOR_TO
11406: IFFALSE 11485
// begin uc_nation := nation_nature ;
11408: LD_ADDR_OWVAR 21
11412: PUSH
11413: LD_INT 0
11415: ST_TO_ADDR
// uc_side := 0 ;
11416: LD_ADDR_OWVAR 20
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11424: LD_ADDR_OWVAR 29
11428: PUSH
11429: LD_INT 12
11431: PUSH
11432: LD_INT 12
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: ST_TO_ADDR
// hc_agressivity := 20 ;
11439: LD_ADDR_OWVAR 35
11443: PUSH
11444: LD_INT 20
11446: ST_TO_ADDR
// hc_class := class_tiger ;
11447: LD_ADDR_OWVAR 28
11451: PUSH
11452: LD_INT 14
11454: ST_TO_ADDR
// hc_gallery :=  ;
11455: LD_ADDR_OWVAR 33
11459: PUSH
11460: LD_STRING 
11462: ST_TO_ADDR
// hc_name :=  ;
11463: LD_ADDR_OWVAR 26
11467: PUSH
11468: LD_STRING 
11470: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11471: CALL_OW 44
11475: PPUSH
11476: LD_INT 0
11478: PPUSH
11479: CALL_OW 51
// end ;
11483: GO 11405
11485: POP
11486: POP
// end ;
11487: PPOPN 1
11489: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11490: LD_EXP 15
11494: PUSH
11495: LD_EXP 35
11499: AND
11500: IFFALSE 11509
11502: GO 11504
11504: DISABLE
// StreamSibBomb ;
11505: CALL 11510 0 0
11509: END
// export function StreamSibBomb ; var i , x , y ; begin
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
// result := false ;
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// for i := 1 to 16 do
11524: LD_ADDR_VAR 0 2
11528: PUSH
11529: DOUBLE
11530: LD_INT 1
11532: DEC
11533: ST_TO_ADDR
11534: LD_INT 16
11536: PUSH
11537: FOR_TO
11538: IFFALSE 11737
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11540: LD_ADDR_VAR 0 3
11544: PUSH
11545: LD_INT 10
11547: PUSH
11548: LD_INT 20
11550: PUSH
11551: LD_INT 30
11553: PUSH
11554: LD_INT 40
11556: PUSH
11557: LD_INT 50
11559: PUSH
11560: LD_INT 60
11562: PUSH
11563: LD_INT 70
11565: PUSH
11566: LD_INT 80
11568: PUSH
11569: LD_INT 90
11571: PUSH
11572: LD_INT 100
11574: PUSH
11575: LD_INT 110
11577: PUSH
11578: LD_INT 120
11580: PUSH
11581: LD_INT 130
11583: PUSH
11584: LD_INT 140
11586: PUSH
11587: LD_INT 150
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 1
11609: PPUSH
11610: LD_INT 15
11612: PPUSH
11613: CALL_OW 12
11617: ARRAY
11618: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11619: LD_ADDR_VAR 0 4
11623: PUSH
11624: LD_INT 10
11626: PUSH
11627: LD_INT 20
11629: PUSH
11630: LD_INT 30
11632: PUSH
11633: LD_INT 40
11635: PUSH
11636: LD_INT 50
11638: PUSH
11639: LD_INT 60
11641: PUSH
11642: LD_INT 70
11644: PUSH
11645: LD_INT 80
11647: PUSH
11648: LD_INT 90
11650: PUSH
11651: LD_INT 100
11653: PUSH
11654: LD_INT 110
11656: PUSH
11657: LD_INT 120
11659: PUSH
11660: LD_INT 130
11662: PUSH
11663: LD_INT 140
11665: PUSH
11666: LD_INT 150
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 1
11688: PPUSH
11689: LD_INT 15
11691: PPUSH
11692: CALL_OW 12
11696: ARRAY
11697: ST_TO_ADDR
// if ValidHex ( x , y ) then
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_VAR 0 4
11707: PPUSH
11708: CALL_OW 488
11712: IFFALSE 11735
// begin result := [ x , y ] ;
11714: LD_ADDR_VAR 0 1
11718: PUSH
11719: LD_VAR 0 3
11723: PUSH
11724: LD_VAR 0 4
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: ST_TO_ADDR
// break ;
11733: GO 11737
// end ; end ;
11735: GO 11537
11737: POP
11738: POP
// if result then
11739: LD_VAR 0 1
11743: IFFALSE 11803
// begin ToLua ( playSibBomb() ) ;
11745: LD_STRING playSibBomb()
11747: PPUSH
11748: CALL_OW 559
// wait ( 0 0$14 ) ;
11752: LD_INT 490
11754: PPUSH
11755: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11759: LD_VAR 0 1
11763: PUSH
11764: LD_INT 1
11766: ARRAY
11767: PPUSH
11768: LD_VAR 0 1
11772: PUSH
11773: LD_INT 2
11775: ARRAY
11776: PPUSH
11777: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11781: LD_VAR 0 1
11785: PUSH
11786: LD_INT 1
11788: ARRAY
11789: PPUSH
11790: LD_VAR 0 1
11794: PUSH
11795: LD_INT 2
11797: ARRAY
11798: PPUSH
11799: CALL_OW 429
// end ; end ;
11803: LD_VAR 0 1
11807: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11808: LD_EXP 15
11812: PUSH
11813: LD_EXP 37
11817: AND
11818: IFFALSE 11830
11820: GO 11822
11822: DISABLE
// YouLost (  ) ;
11823: LD_STRING 
11825: PPUSH
11826: CALL_OW 104
11830: END
// every 0 0$1 trigger StreamModeActive and sFog do
11831: LD_EXP 15
11835: PUSH
11836: LD_EXP 36
11840: AND
11841: IFFALSE 11855
11843: GO 11845
11845: DISABLE
// FogOff ( your_side ) ;
11846: LD_OWVAR 2
11850: PPUSH
11851: CALL_OW 344
11855: END
// every 0 0$1 trigger StreamModeActive and sSun do
11856: LD_EXP 15
11860: PUSH
11861: LD_EXP 38
11865: AND
11866: IFFALSE 11894
11868: GO 11870
11870: DISABLE
// begin solar_recharge_percent := 0 ;
11871: LD_ADDR_OWVAR 79
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11879: LD_INT 10500
11881: PPUSH
11882: CALL_OW 67
// solar_recharge_percent := 100 ;
11886: LD_ADDR_OWVAR 79
11890: PUSH
11891: LD_INT 100
11893: ST_TO_ADDR
// end ;
11894: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11895: LD_EXP 15
11899: PUSH
11900: LD_EXP 39
11904: AND
11905: IFFALSE 12144
11907: GO 11909
11909: DISABLE
11910: LD_INT 0
11912: PPUSH
11913: PPUSH
11914: PPUSH
// begin tmp := [ ] ;
11915: LD_ADDR_VAR 0 3
11919: PUSH
11920: EMPTY
11921: ST_TO_ADDR
// for i := 1 to 6 do
11922: LD_ADDR_VAR 0 1
11926: PUSH
11927: DOUBLE
11928: LD_INT 1
11930: DEC
11931: ST_TO_ADDR
11932: LD_INT 6
11934: PUSH
11935: FOR_TO
11936: IFFALSE 12041
// begin uc_nation := nation_nature ;
11938: LD_ADDR_OWVAR 21
11942: PUSH
11943: LD_INT 0
11945: ST_TO_ADDR
// uc_side := 0 ;
11946: LD_ADDR_OWVAR 20
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11954: LD_ADDR_OWVAR 29
11958: PUSH
11959: LD_INT 12
11961: PUSH
11962: LD_INT 12
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: ST_TO_ADDR
// hc_agressivity := 20 ;
11969: LD_ADDR_OWVAR 35
11973: PUSH
11974: LD_INT 20
11976: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11977: LD_ADDR_OWVAR 28
11981: PUSH
11982: LD_INT 17
11984: ST_TO_ADDR
// hc_gallery :=  ;
11985: LD_ADDR_OWVAR 33
11989: PUSH
11990: LD_STRING 
11992: ST_TO_ADDR
// hc_name :=  ;
11993: LD_ADDR_OWVAR 26
11997: PUSH
11998: LD_STRING 
12000: ST_TO_ADDR
// un := CreateHuman ;
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: CALL_OW 44
12010: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 51
// tmp := tmp ^ un ;
12023: LD_ADDR_VAR 0 3
12027: PUSH
12028: LD_VAR 0 3
12032: PUSH
12033: LD_VAR 0 2
12037: ADD
12038: ST_TO_ADDR
// end ;
12039: GO 11935
12041: POP
12042: POP
// repeat wait ( 0 0$1 ) ;
12043: LD_INT 35
12045: PPUSH
12046: CALL_OW 67
// for un in tmp do
12050: LD_ADDR_VAR 0 2
12054: PUSH
12055: LD_VAR 0 3
12059: PUSH
12060: FOR_IN
12061: IFFALSE 12135
// begin if IsDead ( un ) then
12063: LD_VAR 0 2
12067: PPUSH
12068: CALL_OW 301
12072: IFFALSE 12092
// begin tmp := tmp diff un ;
12074: LD_ADDR_VAR 0 3
12078: PUSH
12079: LD_VAR 0 3
12083: PUSH
12084: LD_VAR 0 2
12088: DIFF
12089: ST_TO_ADDR
// continue ;
12090: GO 12060
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12092: LD_VAR 0 2
12096: PPUSH
12097: LD_INT 3
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 0
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 69
12118: PPUSH
12119: LD_VAR 0 2
12123: PPUSH
12124: CALL_OW 74
12128: PPUSH
12129: CALL_OW 115
// end ;
12133: GO 12060
12135: POP
12136: POP
// until not tmp ;
12137: LD_VAR 0 3
12141: NOT
12142: IFFALSE 12043
// end ;
12144: PPOPN 3
12146: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12147: LD_EXP 15
12151: PUSH
12152: LD_EXP 40
12156: AND
12157: IFFALSE 12211
12159: GO 12161
12161: DISABLE
// begin ToLua ( displayTroll(); ) ;
12162: LD_STRING displayTroll();
12164: PPUSH
12165: CALL_OW 559
// wait ( 3 3$00 ) ;
12169: LD_INT 6300
12171: PPUSH
12172: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12176: LD_STRING hideTroll();
12178: PPUSH
12179: CALL_OW 559
// wait ( 1 1$00 ) ;
12183: LD_INT 2100
12185: PPUSH
12186: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12190: LD_STRING displayTroll();
12192: PPUSH
12193: CALL_OW 559
// wait ( 1 1$00 ) ;
12197: LD_INT 2100
12199: PPUSH
12200: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12204: LD_STRING hideTroll();
12206: PPUSH
12207: CALL_OW 559
// end ;
12211: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12212: LD_EXP 15
12216: PUSH
12217: LD_EXP 41
12221: AND
12222: IFFALSE 12285
12224: GO 12226
12226: DISABLE
12227: LD_INT 0
12229: PPUSH
// begin p := 0 ;
12230: LD_ADDR_VAR 0 1
12234: PUSH
12235: LD_INT 0
12237: ST_TO_ADDR
// repeat game_speed := 1 ;
12238: LD_ADDR_OWVAR 65
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12246: LD_INT 35
12248: PPUSH
12249: CALL_OW 67
// p := p + 1 ;
12253: LD_ADDR_VAR 0 1
12257: PUSH
12258: LD_VAR 0 1
12262: PUSH
12263: LD_INT 1
12265: PLUS
12266: ST_TO_ADDR
// until p >= 60 ;
12267: LD_VAR 0 1
12271: PUSH
12272: LD_INT 60
12274: GREATEREQUAL
12275: IFFALSE 12238
// game_speed := 4 ;
12277: LD_ADDR_OWVAR 65
12281: PUSH
12282: LD_INT 4
12284: ST_TO_ADDR
// end ;
12285: PPOPN 1
12287: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12288: LD_EXP 15
12292: PUSH
12293: LD_EXP 42
12297: AND
12298: IFFALSE 12444
12300: GO 12302
12302: DISABLE
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12307: LD_ADDR_VAR 0 1
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_OWVAR 2
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: LD_INT 30
12329: PUSH
12330: LD_INT 0
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 30
12339: PUSH
12340: LD_INT 1
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PPUSH
12356: CALL_OW 69
12360: ST_TO_ADDR
// if not depot then
12361: LD_VAR 0 1
12365: NOT
12366: IFFALSE 12370
// exit ;
12368: GO 12444
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12370: LD_ADDR_VAR 0 2
12374: PUSH
12375: LD_VAR 0 1
12379: PUSH
12380: LD_INT 1
12382: PPUSH
12383: LD_VAR 0 1
12387: PPUSH
12388: CALL_OW 12
12392: ARRAY
12393: PPUSH
12394: CALL_OW 274
12398: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12399: LD_VAR 0 2
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: LD_INT 0
12409: PPUSH
12410: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12414: LD_VAR 0 2
12418: PPUSH
12419: LD_INT 2
12421: PPUSH
12422: LD_INT 0
12424: PPUSH
12425: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12429: LD_VAR 0 2
12433: PPUSH
12434: LD_INT 3
12436: PPUSH
12437: LD_INT 0
12439: PPUSH
12440: CALL_OW 277
// end ;
12444: PPOPN 2
12446: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12447: LD_EXP 15
12451: PUSH
12452: LD_EXP 43
12456: AND
12457: IFFALSE 12554
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_OWVAR 2
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 21
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: LD_INT 23
12497: PUSH
12498: LD_INT 0
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: ST_TO_ADDR
// if not tmp then
12519: LD_VAR 0 1
12523: NOT
12524: IFFALSE 12528
// exit ;
12526: GO 12554
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12528: LD_VAR 0 1
12532: PUSH
12533: LD_INT 1
12535: PPUSH
12536: LD_VAR 0 1
12540: PPUSH
12541: CALL_OW 12
12545: ARRAY
12546: PPUSH
12547: LD_INT 200
12549: PPUSH
12550: CALL_OW 234
// end ;
12554: PPOPN 1
12556: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12557: LD_EXP 15
12561: PUSH
12562: LD_EXP 44
12566: AND
12567: IFFALSE 12646
12569: GO 12571
12571: DISABLE
12572: LD_INT 0
12574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12575: LD_ADDR_VAR 0 1
12579: PUSH
12580: LD_INT 22
12582: PUSH
12583: LD_OWVAR 2
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 21
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PPUSH
12606: CALL_OW 69
12610: ST_TO_ADDR
// if not tmp then
12611: LD_VAR 0 1
12615: NOT
12616: IFFALSE 12620
// exit ;
12618: GO 12646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12620: LD_VAR 0 1
12624: PUSH
12625: LD_INT 1
12627: PPUSH
12628: LD_VAR 0 1
12632: PPUSH
12633: CALL_OW 12
12637: ARRAY
12638: PPUSH
12639: LD_INT 60
12641: PPUSH
12642: CALL_OW 234
// end ;
12646: PPOPN 1
12648: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12649: LD_EXP 15
12653: PUSH
12654: LD_EXP 45
12658: AND
12659: IFFALSE 12758
12661: GO 12663
12663: DISABLE
12664: LD_INT 0
12666: PPUSH
12667: PPUSH
// begin enable ;
12668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12669: LD_ADDR_VAR 0 1
12673: PUSH
12674: LD_INT 22
12676: PUSH
12677: LD_OWVAR 2
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 61
12688: PUSH
12689: EMPTY
12690: LIST
12691: PUSH
12692: LD_INT 33
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 69
12711: ST_TO_ADDR
// if not tmp then
12712: LD_VAR 0 1
12716: NOT
12717: IFFALSE 12721
// exit ;
12719: GO 12758
// for i in tmp do
12721: LD_ADDR_VAR 0 2
12725: PUSH
12726: LD_VAR 0 1
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12756
// if IsControledBy ( i ) then
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 312
12743: IFFALSE 12754
// ComUnlink ( i ) ;
12745: LD_VAR 0 2
12749: PPUSH
12750: CALL_OW 136
12754: GO 12731
12756: POP
12757: POP
// end ;
12758: PPOPN 2
12760: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12761: LD_EXP 15
12765: PUSH
12766: LD_EXP 46
12770: AND
12771: IFFALSE 12911
12773: GO 12775
12775: DISABLE
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
// begin ToLua ( displayPowell(); ) ;
12780: LD_STRING displayPowell();
12782: PPUSH
12783: CALL_OW 559
// uc_side := 0 ;
12787: LD_ADDR_OWVAR 20
12791: PUSH
12792: LD_INT 0
12794: ST_TO_ADDR
// uc_nation := 2 ;
12795: LD_ADDR_OWVAR 21
12799: PUSH
12800: LD_INT 2
12802: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12803: LD_ADDR_OWVAR 37
12807: PUSH
12808: LD_INT 14
12810: ST_TO_ADDR
// vc_engine := engine_siberite ;
12811: LD_ADDR_OWVAR 39
12815: PUSH
12816: LD_INT 3
12818: ST_TO_ADDR
// vc_control := control_apeman ;
12819: LD_ADDR_OWVAR 38
12823: PUSH
12824: LD_INT 5
12826: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12827: LD_ADDR_OWVAR 40
12831: PUSH
12832: LD_INT 29
12834: ST_TO_ADDR
// un := CreateVehicle ;
12835: LD_ADDR_VAR 0 2
12839: PUSH
12840: CALL_OW 45
12844: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12845: LD_VAR 0 2
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12857: LD_INT 35
12859: PPUSH
12860: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12864: LD_VAR 0 2
12868: PPUSH
12869: LD_INT 22
12871: PUSH
12872: LD_OWVAR 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PPUSH
12886: LD_VAR 0 2
12890: PPUSH
12891: CALL_OW 74
12895: PPUSH
12896: CALL_OW 115
// until IsDead ( un ) ;
12900: LD_VAR 0 2
12904: PPUSH
12905: CALL_OW 301
12909: IFFALSE 12857
// end ;
12911: PPOPN 2
12913: END
// every 0 0$1 trigger StreamModeActive and sStu do
12914: LD_EXP 15
12918: PUSH
12919: LD_EXP 54
12923: AND
12924: IFFALSE 12940
12926: GO 12928
12928: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12929: LD_STRING displayStucuk();
12931: PPUSH
12932: CALL_OW 559
// ResetFog ;
12936: CALL_OW 335
// end ;
12940: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12941: LD_EXP 15
12945: PUSH
12946: LD_EXP 47
12950: AND
12951: IFFALSE 13092
12953: GO 12955
12955: DISABLE
12956: LD_INT 0
12958: PPUSH
12959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12960: LD_ADDR_VAR 0 2
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_OWVAR 2
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 21
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: ST_TO_ADDR
// if not tmp then
12996: LD_VAR 0 2
13000: NOT
13001: IFFALSE 13005
// exit ;
13003: GO 13092
// un := tmp [ rand ( 1 , tmp ) ] ;
13005: LD_ADDR_VAR 0 1
13009: PUSH
13010: LD_VAR 0 2
13014: PUSH
13015: LD_INT 1
13017: PPUSH
13018: LD_VAR 0 2
13022: PPUSH
13023: CALL_OW 12
13027: ARRAY
13028: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13029: LD_VAR 0 1
13033: PPUSH
13034: LD_INT 0
13036: PPUSH
13037: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13041: LD_VAR 0 1
13045: PPUSH
13046: LD_OWVAR 3
13050: PUSH
13051: LD_VAR 0 1
13055: DIFF
13056: PPUSH
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 74
13066: PPUSH
13067: CALL_OW 115
// wait ( 0 0$20 ) ;
13071: LD_INT 700
13073: PPUSH
13074: CALL_OW 67
// SetSide ( un , your_side ) ;
13078: LD_VAR 0 1
13082: PPUSH
13083: LD_OWVAR 2
13087: PPUSH
13088: CALL_OW 235
// end ;
13092: PPOPN 2
13094: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13095: LD_EXP 15
13099: PUSH
13100: LD_EXP 48
13104: AND
13105: IFFALSE 13211
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13113: LD_ADDR_VAR 0 1
13117: PUSH
13118: LD_INT 22
13120: PUSH
13121: LD_OWVAR 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 30
13135: PUSH
13136: LD_INT 0
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 30
13145: PUSH
13146: LD_INT 1
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PPUSH
13162: CALL_OW 69
13166: ST_TO_ADDR
// if not depot then
13167: LD_VAR 0 1
13171: NOT
13172: IFFALSE 13176
// exit ;
13174: GO 13211
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13176: LD_VAR 0 1
13180: PUSH
13181: LD_INT 1
13183: ARRAY
13184: PPUSH
13185: CALL_OW 250
13189: PPUSH
13190: LD_VAR 0 1
13194: PUSH
13195: LD_INT 1
13197: ARRAY
13198: PPUSH
13199: CALL_OW 251
13203: PPUSH
13204: LD_INT 70
13206: PPUSH
13207: CALL_OW 495
// end ;
13211: PPOPN 1
13213: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13214: LD_EXP 15
13218: PUSH
13219: LD_EXP 49
13223: AND
13224: IFFALSE 13435
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
13232: PPUSH
13233: PPUSH
13234: PPUSH
13235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13236: LD_ADDR_VAR 0 5
13240: PUSH
13241: LD_INT 22
13243: PUSH
13244: LD_OWVAR 2
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: ST_TO_ADDR
// if not tmp then
13272: LD_VAR 0 5
13276: NOT
13277: IFFALSE 13281
// exit ;
13279: GO 13435
// for i in tmp do
13281: LD_ADDR_VAR 0 1
13285: PUSH
13286: LD_VAR 0 5
13290: PUSH
13291: FOR_IN
13292: IFFALSE 13433
// begin d := rand ( 0 , 5 ) ;
13294: LD_ADDR_VAR 0 4
13298: PUSH
13299: LD_INT 0
13301: PPUSH
13302: LD_INT 5
13304: PPUSH
13305: CALL_OW 12
13309: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13310: LD_ADDR_VAR 0 2
13314: PUSH
13315: LD_VAR 0 1
13319: PPUSH
13320: CALL_OW 250
13324: PPUSH
13325: LD_VAR 0 4
13329: PPUSH
13330: LD_INT 3
13332: PPUSH
13333: LD_INT 12
13335: PPUSH
13336: CALL_OW 12
13340: PPUSH
13341: CALL_OW 272
13345: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13346: LD_ADDR_VAR 0 3
13350: PUSH
13351: LD_VAR 0 1
13355: PPUSH
13356: CALL_OW 251
13360: PPUSH
13361: LD_VAR 0 4
13365: PPUSH
13366: LD_INT 3
13368: PPUSH
13369: LD_INT 12
13371: PPUSH
13372: CALL_OW 12
13376: PPUSH
13377: CALL_OW 273
13381: ST_TO_ADDR
// if ValidHex ( x , y ) then
13382: LD_VAR 0 2
13386: PPUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: CALL_OW 488
13396: IFFALSE 13431
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13398: LD_VAR 0 1
13402: PPUSH
13403: LD_VAR 0 2
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 3
13415: PPUSH
13416: LD_INT 6
13418: PPUSH
13419: CALL_OW 12
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 483
// end ;
13431: GO 13291
13433: POP
13434: POP
// end ;
13435: PPOPN 5
13437: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13438: LD_EXP 15
13442: PUSH
13443: LD_EXP 50
13447: AND
13448: IFFALSE 13542
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
13456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13457: LD_ADDR_VAR 0 2
13461: PUSH
13462: LD_INT 22
13464: PUSH
13465: LD_OWVAR 2
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 32
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: PPUSH
13499: CALL_OW 69
13503: ST_TO_ADDR
// if not tmp then
13504: LD_VAR 0 2
13508: NOT
13509: IFFALSE 13513
// exit ;
13511: GO 13542
// for i in tmp do
13513: LD_ADDR_VAR 0 1
13517: PUSH
13518: LD_VAR 0 2
13522: PUSH
13523: FOR_IN
13524: IFFALSE 13540
// SetFuel ( i , 0 ) ;
13526: LD_VAR 0 1
13530: PPUSH
13531: LD_INT 0
13533: PPUSH
13534: CALL_OW 240
13538: GO 13523
13540: POP
13541: POP
// end ;
13542: PPOPN 2
13544: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13545: LD_EXP 15
13549: PUSH
13550: LD_EXP 51
13554: AND
13555: IFFALSE 13621
13557: GO 13559
13559: DISABLE
13560: LD_INT 0
13562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13563: LD_ADDR_VAR 0 1
13567: PUSH
13568: LD_INT 22
13570: PUSH
13571: LD_OWVAR 2
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 30
13582: PUSH
13583: LD_INT 29
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 69
13598: ST_TO_ADDR
// if not tmp then
13599: LD_VAR 0 1
13603: NOT
13604: IFFALSE 13608
// exit ;
13606: GO 13621
// DestroyUnit ( tmp [ 1 ] ) ;
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: CALL_OW 65
// end ;
13621: PPOPN 1
13623: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13624: LD_EXP 15
13628: PUSH
13629: LD_EXP 53
13633: AND
13634: IFFALSE 13763
13636: GO 13638
13638: DISABLE
13639: LD_INT 0
13641: PPUSH
// begin uc_side := 0 ;
13642: LD_ADDR_OWVAR 20
13646: PUSH
13647: LD_INT 0
13649: ST_TO_ADDR
// uc_nation := nation_arabian ;
13650: LD_ADDR_OWVAR 21
13654: PUSH
13655: LD_INT 2
13657: ST_TO_ADDR
// hc_gallery :=  ;
13658: LD_ADDR_OWVAR 33
13662: PUSH
13663: LD_STRING 
13665: ST_TO_ADDR
// hc_name :=  ;
13666: LD_ADDR_OWVAR 26
13670: PUSH
13671: LD_STRING 
13673: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13674: LD_INT 1
13676: PPUSH
13677: LD_INT 11
13679: PPUSH
13680: LD_INT 10
13682: PPUSH
13683: CALL_OW 380
// un := CreateHuman ;
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: CALL_OW 44
13696: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13697: LD_VAR 0 1
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13709: LD_INT 35
13711: PPUSH
13712: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13716: LD_VAR 0 1
13720: PPUSH
13721: LD_INT 22
13723: PUSH
13724: LD_OWVAR 2
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: PPUSH
13738: LD_VAR 0 1
13742: PPUSH
13743: CALL_OW 74
13747: PPUSH
13748: CALL_OW 115
// until IsDead ( un ) ;
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 301
13761: IFFALSE 13709
// end ;
13763: PPOPN 1
13765: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13766: LD_EXP 15
13770: PUSH
13771: LD_EXP 55
13775: AND
13776: IFFALSE 13788
13778: GO 13780
13780: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13781: LD_STRING earthquake(getX(game), 0, 32)
13783: PPUSH
13784: CALL_OW 559
13788: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13789: LD_EXP 15
13793: PUSH
13794: LD_EXP 56
13798: AND
13799: IFFALSE 13890
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
// begin enable ;
13807: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13808: LD_ADDR_VAR 0 1
13812: PUSH
13813: LD_INT 22
13815: PUSH
13816: LD_OWVAR 2
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 21
13827: PUSH
13828: LD_INT 2
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 33
13837: PUSH
13838: LD_INT 3
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: PPUSH
13850: CALL_OW 69
13854: ST_TO_ADDR
// if not tmp then
13855: LD_VAR 0 1
13859: NOT
13860: IFFALSE 13864
// exit ;
13862: GO 13890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13864: LD_VAR 0 1
13868: PUSH
13869: LD_INT 1
13871: PPUSH
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 12
13881: ARRAY
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: CALL_OW 234
// end ;
13890: PPOPN 1
13892: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13893: LD_EXP 15
13897: PUSH
13898: LD_EXP 57
13902: AND
13903: IFFALSE 14044
13905: GO 13907
13907: DISABLE
13908: LD_INT 0
13910: PPUSH
13911: PPUSH
13912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13913: LD_ADDR_VAR 0 3
13917: PUSH
13918: LD_INT 22
13920: PUSH
13921: LD_OWVAR 2
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 25
13932: PUSH
13933: LD_INT 1
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 69
13948: ST_TO_ADDR
// if not tmp then
13949: LD_VAR 0 3
13953: NOT
13954: IFFALSE 13958
// exit ;
13956: GO 14044
// un := tmp [ rand ( 1 , tmp ) ] ;
13958: LD_ADDR_VAR 0 2
13962: PUSH
13963: LD_VAR 0 3
13967: PUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: CALL_OW 12
13980: ARRAY
13981: ST_TO_ADDR
// if Crawls ( un ) then
13982: LD_VAR 0 2
13986: PPUSH
13987: CALL_OW 318
13991: IFFALSE 14002
// ComWalk ( un ) ;
13993: LD_VAR 0 2
13997: PPUSH
13998: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14002: LD_VAR 0 2
14006: PPUSH
14007: LD_INT 9
14009: PPUSH
14010: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14014: LD_INT 28
14016: PPUSH
14017: LD_OWVAR 2
14021: PPUSH
14022: LD_INT 2
14024: PPUSH
14025: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14029: LD_INT 29
14031: PPUSH
14032: LD_OWVAR 2
14036: PPUSH
14037: LD_INT 2
14039: PPUSH
14040: CALL_OW 322
// end ;
14044: PPOPN 3
14046: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14047: LD_EXP 15
14051: PUSH
14052: LD_EXP 58
14056: AND
14057: IFFALSE 14168
14059: GO 14061
14061: DISABLE
14062: LD_INT 0
14064: PPUSH
14065: PPUSH
14066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14067: LD_ADDR_VAR 0 3
14071: PUSH
14072: LD_INT 22
14074: PUSH
14075: LD_OWVAR 2
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 25
14086: PUSH
14087: LD_INT 1
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PPUSH
14098: CALL_OW 69
14102: ST_TO_ADDR
// if not tmp then
14103: LD_VAR 0 3
14107: NOT
14108: IFFALSE 14112
// exit ;
14110: GO 14168
// un := tmp [ rand ( 1 , tmp ) ] ;
14112: LD_ADDR_VAR 0 2
14116: PUSH
14117: LD_VAR 0 3
14121: PUSH
14122: LD_INT 1
14124: PPUSH
14125: LD_VAR 0 3
14129: PPUSH
14130: CALL_OW 12
14134: ARRAY
14135: ST_TO_ADDR
// if Crawls ( un ) then
14136: LD_VAR 0 2
14140: PPUSH
14141: CALL_OW 318
14145: IFFALSE 14156
// ComWalk ( un ) ;
14147: LD_VAR 0 2
14151: PPUSH
14152: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14156: LD_VAR 0 2
14160: PPUSH
14161: LD_INT 8
14163: PPUSH
14164: CALL_OW 336
// end ;
14168: PPOPN 3
14170: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14171: LD_EXP 15
14175: PUSH
14176: LD_EXP 59
14180: AND
14181: IFFALSE 14325
14183: GO 14185
14185: DISABLE
14186: LD_INT 0
14188: PPUSH
14189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_OWVAR 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 21
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: LD_INT 34
14222: PUSH
14223: LD_INT 12
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 34
14232: PUSH
14233: LD_INT 51
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 34
14242: PUSH
14243: LD_INT 32
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// if not tmp then
14266: LD_VAR 0 2
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 14325
// for i in tmp do
14275: LD_ADDR_VAR 0 1
14279: PUSH
14280: LD_VAR 0 2
14284: PUSH
14285: FOR_IN
14286: IFFALSE 14323
// if GetCargo ( i , mat_artifact ) = 0 then
14288: LD_VAR 0 1
14292: PPUSH
14293: LD_INT 4
14295: PPUSH
14296: CALL_OW 289
14300: PUSH
14301: LD_INT 0
14303: EQUAL
14304: IFFALSE 14321
// SetCargo ( i , mat_siberit , 100 ) ;
14306: LD_VAR 0 1
14310: PPUSH
14311: LD_INT 3
14313: PPUSH
14314: LD_INT 100
14316: PPUSH
14317: CALL_OW 290
14321: GO 14285
14323: POP
14324: POP
// end ;
14325: PPOPN 2
14327: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14328: LD_EXP 15
14332: PUSH
14333: LD_EXP 60
14337: AND
14338: IFFALSE 14491
14340: GO 14342
14342: DISABLE
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14347: LD_ADDR_VAR 0 2
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 69
14368: ST_TO_ADDR
// if not tmp then
14369: LD_VAR 0 2
14373: NOT
14374: IFFALSE 14378
// exit ;
14376: GO 14491
// for i := 1 to 2 do
14378: LD_ADDR_VAR 0 1
14382: PUSH
14383: DOUBLE
14384: LD_INT 1
14386: DEC
14387: ST_TO_ADDR
14388: LD_INT 2
14390: PUSH
14391: FOR_TO
14392: IFFALSE 14489
// begin uc_side := your_side ;
14394: LD_ADDR_OWVAR 20
14398: PUSH
14399: LD_OWVAR 2
14403: ST_TO_ADDR
// uc_nation := nation_american ;
14404: LD_ADDR_OWVAR 21
14408: PUSH
14409: LD_INT 1
14411: ST_TO_ADDR
// vc_chassis := us_morphling ;
14412: LD_ADDR_OWVAR 37
14416: PUSH
14417: LD_INT 5
14419: ST_TO_ADDR
// vc_engine := engine_siberite ;
14420: LD_ADDR_OWVAR 39
14424: PUSH
14425: LD_INT 3
14427: ST_TO_ADDR
// vc_control := control_computer ;
14428: LD_ADDR_OWVAR 38
14432: PUSH
14433: LD_INT 3
14435: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14436: LD_ADDR_OWVAR 40
14440: PUSH
14441: LD_INT 10
14443: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
14444: CALL_OW 45
14448: PPUSH
14449: LD_VAR 0 2
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: PPUSH
14458: CALL_OW 250
14462: PPUSH
14463: LD_VAR 0 2
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PPUSH
14472: CALL_OW 251
14476: PPUSH
14477: LD_INT 12
14479: PPUSH
14480: LD_INT 1
14482: PPUSH
14483: CALL_OW 50
// end ;
14487: GO 14391
14489: POP
14490: POP
// end ;
14491: PPOPN 2
14493: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14494: LD_EXP 15
14498: PUSH
14499: LD_EXP 61
14503: AND
14504: IFFALSE 14726
14506: GO 14508
14508: DISABLE
14509: LD_INT 0
14511: PPUSH
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14517: LD_ADDR_VAR 0 6
14521: PUSH
14522: LD_INT 22
14524: PUSH
14525: LD_OWVAR 2
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 21
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 3
14546: PUSH
14547: LD_INT 23
14549: PUSH
14550: LD_INT 0
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: PPUSH
14566: CALL_OW 69
14570: ST_TO_ADDR
// if not tmp then
14571: LD_VAR 0 6
14575: NOT
14576: IFFALSE 14580
// exit ;
14578: GO 14726
// s1 := rand ( 1 , 4 ) ;
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_INT 1
14587: PPUSH
14588: LD_INT 4
14590: PPUSH
14591: CALL_OW 12
14595: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14596: LD_ADDR_VAR 0 4
14600: PUSH
14601: LD_VAR 0 6
14605: PUSH
14606: LD_INT 1
14608: ARRAY
14609: PPUSH
14610: LD_VAR 0 2
14614: PPUSH
14615: CALL_OW 259
14619: ST_TO_ADDR
// if s1 = 1 then
14620: LD_VAR 0 2
14624: PUSH
14625: LD_INT 1
14627: EQUAL
14628: IFFALSE 14648
// s2 := rand ( 2 , 4 ) else
14630: LD_ADDR_VAR 0 3
14634: PUSH
14635: LD_INT 2
14637: PPUSH
14638: LD_INT 4
14640: PPUSH
14641: CALL_OW 12
14645: ST_TO_ADDR
14646: GO 14656
// s2 := 1 ;
14648: LD_ADDR_VAR 0 3
14652: PUSH
14653: LD_INT 1
14655: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14656: LD_ADDR_VAR 0 5
14660: PUSH
14661: LD_VAR 0 6
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PPUSH
14670: LD_VAR 0 3
14674: PPUSH
14675: CALL_OW 259
14679: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14680: LD_VAR 0 6
14684: PUSH
14685: LD_INT 1
14687: ARRAY
14688: PPUSH
14689: LD_VAR 0 2
14693: PPUSH
14694: LD_VAR 0 5
14698: PPUSH
14699: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14703: LD_VAR 0 6
14707: PUSH
14708: LD_INT 1
14710: ARRAY
14711: PPUSH
14712: LD_VAR 0 3
14716: PPUSH
14717: LD_VAR 0 4
14721: PPUSH
14722: CALL_OW 237
// end ;
14726: PPOPN 6
14728: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14729: LD_EXP 15
14733: PUSH
14734: LD_EXP 62
14738: AND
14739: IFFALSE 14818
14741: GO 14743
14743: DISABLE
14744: LD_INT 0
14746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_INT 22
14754: PUSH
14755: LD_OWVAR 2
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 30
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: ST_TO_ADDR
// if not tmp then
14783: LD_VAR 0 1
14787: NOT
14788: IFFALSE 14792
// exit ;
14790: GO 14818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14792: LD_VAR 0 1
14796: PUSH
14797: LD_INT 1
14799: PPUSH
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL_OW 12
14809: ARRAY
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 234
// end ;
14818: PPOPN 1
14820: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14821: LD_EXP 15
14825: PUSH
14826: LD_EXP 63
14830: AND
14831: IFFALSE 14943
14833: GO 14835
14835: DISABLE
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14840: LD_ADDR_VAR 0 2
14844: PUSH
14845: LD_INT 22
14847: PUSH
14848: LD_OWVAR 2
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 30
14862: PUSH
14863: LD_INT 27
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 30
14872: PUSH
14873: LD_INT 26
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 30
14882: PUSH
14883: LD_INT 28
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 69
14904: ST_TO_ADDR
// if not tmp then
14905: LD_VAR 0 2
14909: NOT
14910: IFFALSE 14914
// exit ;
14912: GO 14943
// for i in tmp do
14914: LD_ADDR_VAR 0 1
14918: PUSH
14919: LD_VAR 0 2
14923: PUSH
14924: FOR_IN
14925: IFFALSE 14941
// SetLives ( i , 1 ) ;
14927: LD_VAR 0 1
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 234
14939: GO 14924
14941: POP
14942: POP
// end ;
14943: PPOPN 2
14945: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14946: LD_EXP 15
14950: PUSH
14951: LD_EXP 64
14955: AND
14956: IFFALSE 15230
14958: GO 14960
14960: DISABLE
14961: LD_INT 0
14963: PPUSH
14964: PPUSH
14965: PPUSH
// begin i := rand ( 1 , 7 ) ;
14966: LD_ADDR_VAR 0 1
14970: PUSH
14971: LD_INT 1
14973: PPUSH
14974: LD_INT 7
14976: PPUSH
14977: CALL_OW 12
14981: ST_TO_ADDR
// case i of 1 :
14982: LD_VAR 0 1
14986: PUSH
14987: LD_INT 1
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15005
14995: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14996: LD_STRING earthquake(getX(game), 0, 32)
14998: PPUSH
14999: CALL_OW 559
15003: GO 15230
15005: LD_INT 2
15007: DOUBLE
15008: EQUAL
15009: IFTRUE 15013
15011: GO 15027
15013: POP
// begin ToLua ( displayStucuk(); ) ;
15014: LD_STRING displayStucuk();
15016: PPUSH
15017: CALL_OW 559
// ResetFog ;
15021: CALL_OW 335
// end ; 3 :
15025: GO 15230
15027: LD_INT 3
15029: DOUBLE
15030: EQUAL
15031: IFTRUE 15035
15033: GO 15139
15035: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15036: LD_ADDR_VAR 0 2
15040: PUSH
15041: LD_INT 22
15043: PUSH
15044: LD_OWVAR 2
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 25
15055: PUSH
15056: LD_INT 1
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PPUSH
15067: CALL_OW 69
15071: ST_TO_ADDR
// if not tmp then
15072: LD_VAR 0 2
15076: NOT
15077: IFFALSE 15081
// exit ;
15079: GO 15230
// un := tmp [ rand ( 1 , tmp ) ] ;
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: LD_VAR 0 2
15090: PUSH
15091: LD_INT 1
15093: PPUSH
15094: LD_VAR 0 2
15098: PPUSH
15099: CALL_OW 12
15103: ARRAY
15104: ST_TO_ADDR
// if Crawls ( un ) then
15105: LD_VAR 0 3
15109: PPUSH
15110: CALL_OW 318
15114: IFFALSE 15125
// ComWalk ( un ) ;
15116: LD_VAR 0 3
15120: PPUSH
15121: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15125: LD_VAR 0 3
15129: PPUSH
15130: LD_INT 8
15132: PPUSH
15133: CALL_OW 336
// end ; 4 :
15137: GO 15230
15139: LD_INT 4
15141: DOUBLE
15142: EQUAL
15143: IFTRUE 15147
15145: GO 15208
15147: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15148: LD_ADDR_VAR 0 2
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_OWVAR 2
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 30
15167: PUSH
15168: LD_INT 29
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: ST_TO_ADDR
// if not tmp then
15184: LD_VAR 0 2
15188: NOT
15189: IFFALSE 15193
// exit ;
15191: GO 15230
// DestroyUnit ( tmp [ 1 ] ) ;
15193: LD_VAR 0 2
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: CALL_OW 65
// end ; 5 .. 7 :
15206: GO 15230
15208: LD_INT 5
15210: DOUBLE
15211: GREATEREQUAL
15212: IFFALSE 15220
15214: LD_INT 7
15216: DOUBLE
15217: LESSEQUAL
15218: IFTRUE 15222
15220: GO 15229
15222: POP
// StreamSibBomb ; end ;
15223: CALL 11510 0 0
15227: GO 15230
15229: POP
// end ;
15230: PPOPN 3
15232: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15233: LD_EXP 15
15237: PUSH
15238: LD_EXP 65
15242: AND
15243: IFFALSE 15399
15245: GO 15247
15247: DISABLE
15248: LD_INT 0
15250: PPUSH
15251: PPUSH
15252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15253: LD_ADDR_VAR 0 2
15257: PUSH
15258: LD_INT 81
15260: PUSH
15261: LD_OWVAR 2
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 2
15272: PUSH
15273: LD_INT 21
15275: PUSH
15276: LD_INT 1
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 21
15285: PUSH
15286: LD_INT 2
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PPUSH
15302: CALL_OW 69
15306: ST_TO_ADDR
// if not tmp then
15307: LD_VAR 0 2
15311: NOT
15312: IFFALSE 15316
// exit ;
15314: GO 15399
// p := 0 ;
15316: LD_ADDR_VAR 0 3
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// p := p + 1 ;
15331: LD_ADDR_VAR 0 3
15335: PUSH
15336: LD_VAR 0 3
15340: PUSH
15341: LD_INT 1
15343: PLUS
15344: ST_TO_ADDR
// for i in tmp do
15345: LD_ADDR_VAR 0 1
15349: PUSH
15350: LD_VAR 0 2
15354: PUSH
15355: FOR_IN
15356: IFFALSE 15387
// if GetLives ( i ) < 1000 then
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL_OW 256
15367: PUSH
15368: LD_INT 1000
15370: LESS
15371: IFFALSE 15385
// SetLives ( i , 1000 ) ;
15373: LD_VAR 0 1
15377: PPUSH
15378: LD_INT 1000
15380: PPUSH
15381: CALL_OW 234
15385: GO 15355
15387: POP
15388: POP
// until p > 20 ;
15389: LD_VAR 0 3
15393: PUSH
15394: LD_INT 20
15396: GREATER
15397: IFFALSE 15324
// end ;
15399: PPOPN 3
15401: END
// every 0 0$1 trigger StreamModeActive and sTime do
15402: LD_EXP 15
15406: PUSH
15407: LD_EXP 66
15411: AND
15412: IFFALSE 15447
15414: GO 15416
15416: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15417: LD_INT 28
15419: PPUSH
15420: LD_OWVAR 2
15424: PPUSH
15425: LD_INT 2
15427: PPUSH
15428: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15432: LD_INT 30
15434: PPUSH
15435: LD_OWVAR 2
15439: PPUSH
15440: LD_INT 2
15442: PPUSH
15443: CALL_OW 322
// end ;
15447: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15448: LD_EXP 15
15452: PUSH
15453: LD_EXP 67
15457: AND
15458: IFFALSE 15579
15460: GO 15462
15462: DISABLE
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 22
15474: PUSH
15475: LD_OWVAR 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 21
15486: PUSH
15487: LD_INT 1
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 3
15496: PUSH
15497: LD_INT 23
15499: PUSH
15500: LD_INT 0
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PPUSH
15516: CALL_OW 69
15520: ST_TO_ADDR
// if not tmp then
15521: LD_VAR 0 2
15525: NOT
15526: IFFALSE 15530
// exit ;
15528: GO 15579
// for i in tmp do
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_VAR 0 2
15539: PUSH
15540: FOR_IN
15541: IFFALSE 15577
// begin if Crawls ( i ) then
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL_OW 318
15552: IFFALSE 15563
// ComWalk ( i ) ;
15554: LD_VAR 0 1
15558: PPUSH
15559: CALL_OW 138
// SetClass ( i , 2 ) ;
15563: LD_VAR 0 1
15567: PPUSH
15568: LD_INT 2
15570: PPUSH
15571: CALL_OW 336
// end ;
15575: GO 15540
15577: POP
15578: POP
// end ;
15579: PPOPN 2
15581: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15582: LD_EXP 15
15586: PUSH
15587: LD_EXP 68
15591: AND
15592: IFFALSE 15873
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15602: LD_OWVAR 2
15606: PPUSH
15607: LD_INT 9
15609: PPUSH
15610: LD_INT 1
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15620: LD_INT 9
15622: PPUSH
15623: LD_OWVAR 2
15627: PPUSH
15628: CALL_OW 343
// uc_side := 9 ;
15632: LD_ADDR_OWVAR 20
15636: PUSH
15637: LD_INT 9
15639: ST_TO_ADDR
// uc_nation := 2 ;
15640: LD_ADDR_OWVAR 21
15644: PUSH
15645: LD_INT 2
15647: ST_TO_ADDR
// hc_name := Dark Warrior ;
15648: LD_ADDR_OWVAR 26
15652: PUSH
15653: LD_STRING Dark Warrior
15655: ST_TO_ADDR
// hc_gallery :=  ;
15656: LD_ADDR_OWVAR 33
15660: PUSH
15661: LD_STRING 
15663: ST_TO_ADDR
// hc_noskilllimit := true ;
15664: LD_ADDR_OWVAR 76
15668: PUSH
15669: LD_INT 1
15671: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15672: LD_ADDR_OWVAR 31
15676: PUSH
15677: LD_INT 30
15679: PUSH
15680: LD_INT 30
15682: PUSH
15683: LD_INT 30
15685: PUSH
15686: LD_INT 30
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: ST_TO_ADDR
// un := CreateHuman ;
15695: LD_ADDR_VAR 0 3
15699: PUSH
15700: CALL_OW 44
15704: ST_TO_ADDR
// hc_noskilllimit := false ;
15705: LD_ADDR_OWVAR 76
15709: PUSH
15710: LD_INT 0
15712: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15713: LD_VAR 0 3
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 51
// p := 0 ;
15725: LD_ADDR_VAR 0 2
15729: PUSH
15730: LD_INT 0
15732: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15733: LD_INT 35
15735: PPUSH
15736: CALL_OW 67
// p := p + 1 ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_VAR 0 2
15749: PUSH
15750: LD_INT 1
15752: PLUS
15753: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15754: LD_VAR 0 3
15758: PPUSH
15759: CALL_OW 256
15763: PUSH
15764: LD_INT 1000
15766: LESS
15767: IFFALSE 15781
// SetLives ( un , 1000 ) ;
15769: LD_VAR 0 3
15773: PPUSH
15774: LD_INT 1000
15776: PPUSH
15777: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15781: LD_VAR 0 3
15785: PPUSH
15786: LD_INT 81
15788: PUSH
15789: LD_OWVAR 2
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 91
15800: PUSH
15801: LD_VAR 0 3
15805: PUSH
15806: LD_INT 30
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: CALL_OW 74
15832: PPUSH
15833: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15837: LD_VAR 0 2
15841: PUSH
15842: LD_INT 60
15844: GREATER
15845: PUSH
15846: LD_VAR 0 3
15850: PPUSH
15851: CALL_OW 301
15855: OR
15856: IFFALSE 15733
// if un then
15858: LD_VAR 0 3
15862: IFFALSE 15873
// RemoveUnit ( un ) ;
15864: LD_VAR 0 3
15868: PPUSH
15869: CALL_OW 64
// end ;
15873: PPOPN 3
15875: END
