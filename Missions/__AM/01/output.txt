// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export globalGameSaveCounter ; every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// every 0 0$1 do
4985: GO 4987
4987: DISABLE
// begin globalGameSaveCounter := 0 ;
4988: LD_ADDR_EXP 15
4992: PUSH
4993: LD_INT 0
4995: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4996: LD_STRING setGameSaveCounter(0)
4998: PPUSH
4999: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5003: LD_STRING initStreamRollete();
5005: PPUSH
5006: CALL_OW 559
// InitStreamMode ;
5010: CALL 6336 0 0
// DefineStreamItems ( false ) ;
5014: LD_INT 0
5016: PPUSH
5017: CALL 6800 0 1
// end ;
5021: END
// export function SOS_MapStart ( ) ; begin
5022: LD_INT 0
5024: PPUSH
// if streamModeActive then
5025: LD_EXP 16
5029: IFFALSE 5038
// DefineStreamItems ( true ) ;
5031: LD_INT 1
5033: PPUSH
5034: CALL 6800 0 1
// UpdateLuaVariables ( ) ;
5038: CALL 5055 0 0
// UpdateFactoryWaypoints ( ) ;
5042: CALL 19661 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5046: CALL 19918 0 0
// end ;
5050: LD_VAR 0 1
5054: RET
// function UpdateLuaVariables ( ) ; begin
5055: LD_INT 0
5057: PPUSH
// if globalGameSaveCounter then
5058: LD_EXP 15
5062: IFFALSE 5096
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5064: LD_ADDR_EXP 15
5068: PUSH
5069: LD_EXP 15
5073: PPUSH
5074: CALL 64038 0 1
5078: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5079: LD_STRING setGameSaveCounter(
5081: PUSH
5082: LD_EXP 15
5086: STR
5087: PUSH
5088: LD_STRING )
5090: STR
5091: PPUSH
5092: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5096: LD_STRING setGameDifficulty(
5098: PUSH
5099: LD_OWVAR 67
5103: STR
5104: PUSH
5105: LD_STRING )
5107: STR
5108: PPUSH
5109: CALL_OW 559
// end ;
5113: LD_VAR 0 1
5117: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5118: LD_INT 0
5120: PPUSH
// if p2 = stream_mode then
5121: LD_VAR 0 2
5125: PUSH
5126: LD_INT 100
5128: EQUAL
5129: IFFALSE 6132
// begin if not StreamModeActive then
5131: LD_EXP 16
5135: NOT
5136: IFFALSE 5146
// StreamModeActive := true ;
5138: LD_ADDR_EXP 16
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 0 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: IFFALSE 5160
// InitStreamMode ;
5156: CALL 6336 0 0
// if p3 = 1 then
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 1
5167: EQUAL
5168: IFFALSE 5178
// sRocket := true ;
5170: LD_ADDR_EXP 21
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if p3 = 2 then
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 2
5185: EQUAL
5186: IFFALSE 5196
// sSpeed := true ;
5188: LD_ADDR_EXP 20
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// if p3 = 3 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 3
5203: EQUAL
5204: IFFALSE 5214
// sEngine := true ;
5206: LD_ADDR_EXP 22
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// if p3 = 4 then
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 4
5221: EQUAL
5222: IFFALSE 5232
// sSpec := true ;
5224: LD_ADDR_EXP 19
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// if p3 = 5 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 5
5239: EQUAL
5240: IFFALSE 5250
// sLevel := true ;
5242: LD_ADDR_EXP 23
5246: PUSH
5247: LD_INT 1
5249: ST_TO_ADDR
// if p3 = 6 then
5250: LD_VAR 0 3
5254: PUSH
5255: LD_INT 6
5257: EQUAL
5258: IFFALSE 5268
// sArmoury := true ;
5260: LD_ADDR_EXP 24
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// if p3 = 7 then
5268: LD_VAR 0 3
5272: PUSH
5273: LD_INT 7
5275: EQUAL
5276: IFFALSE 5286
// sRadar := true ;
5278: LD_ADDR_EXP 25
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// if p3 = 8 then
5286: LD_VAR 0 3
5290: PUSH
5291: LD_INT 8
5293: EQUAL
5294: IFFALSE 5304
// sBunker := true ;
5296: LD_ADDR_EXP 26
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// if p3 = 9 then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 9
5311: EQUAL
5312: IFFALSE 5322
// sHack := true ;
5314: LD_ADDR_EXP 27
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// if p3 = 10 then
5322: LD_VAR 0 3
5326: PUSH
5327: LD_INT 10
5329: EQUAL
5330: IFFALSE 5340
// sFire := true ;
5332: LD_ADDR_EXP 28
5336: PUSH
5337: LD_INT 1
5339: ST_TO_ADDR
// if p3 = 11 then
5340: LD_VAR 0 3
5344: PUSH
5345: LD_INT 11
5347: EQUAL
5348: IFFALSE 5358
// sRefresh := true ;
5350: LD_ADDR_EXP 29
5354: PUSH
5355: LD_INT 1
5357: ST_TO_ADDR
// if p3 = 12 then
5358: LD_VAR 0 3
5362: PUSH
5363: LD_INT 12
5365: EQUAL
5366: IFFALSE 5376
// sExp := true ;
5368: LD_ADDR_EXP 30
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// if p3 = 13 then
5376: LD_VAR 0 3
5380: PUSH
5381: LD_INT 13
5383: EQUAL
5384: IFFALSE 5394
// sDepot := true ;
5386: LD_ADDR_EXP 31
5390: PUSH
5391: LD_INT 1
5393: ST_TO_ADDR
// if p3 = 14 then
5394: LD_VAR 0 3
5398: PUSH
5399: LD_INT 14
5401: EQUAL
5402: IFFALSE 5412
// sFlag := true ;
5404: LD_ADDR_EXP 32
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// if p3 = 15 then
5412: LD_VAR 0 3
5416: PUSH
5417: LD_INT 15
5419: EQUAL
5420: IFFALSE 5430
// sKamikadze := true ;
5422: LD_ADDR_EXP 40
5426: PUSH
5427: LD_INT 1
5429: ST_TO_ADDR
// if p3 = 16 then
5430: LD_VAR 0 3
5434: PUSH
5435: LD_INT 16
5437: EQUAL
5438: IFFALSE 5448
// sTroll := true ;
5440: LD_ADDR_EXP 41
5444: PUSH
5445: LD_INT 1
5447: ST_TO_ADDR
// if p3 = 17 then
5448: LD_VAR 0 3
5452: PUSH
5453: LD_INT 17
5455: EQUAL
5456: IFFALSE 5466
// sSlow := true ;
5458: LD_ADDR_EXP 42
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// if p3 = 18 then
5466: LD_VAR 0 3
5470: PUSH
5471: LD_INT 18
5473: EQUAL
5474: IFFALSE 5484
// sLack := true ;
5476: LD_ADDR_EXP 43
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// if p3 = 19 then
5484: LD_VAR 0 3
5488: PUSH
5489: LD_INT 19
5491: EQUAL
5492: IFFALSE 5502
// sTank := true ;
5494: LD_ADDR_EXP 45
5498: PUSH
5499: LD_INT 1
5501: ST_TO_ADDR
// if p3 = 20 then
5502: LD_VAR 0 3
5506: PUSH
5507: LD_INT 20
5509: EQUAL
5510: IFFALSE 5520
// sRemote := true ;
5512: LD_ADDR_EXP 46
5516: PUSH
5517: LD_INT 1
5519: ST_TO_ADDR
// if p3 = 21 then
5520: LD_VAR 0 3
5524: PUSH
5525: LD_INT 21
5527: EQUAL
5528: IFFALSE 5538
// sPowell := true ;
5530: LD_ADDR_EXP 47
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// if p3 = 22 then
5538: LD_VAR 0 3
5542: PUSH
5543: LD_INT 22
5545: EQUAL
5546: IFFALSE 5556
// sTeleport := true ;
5548: LD_ADDR_EXP 50
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// if p3 = 23 then
5556: LD_VAR 0 3
5560: PUSH
5561: LD_INT 23
5563: EQUAL
5564: IFFALSE 5574
// sOilTower := true ;
5566: LD_ADDR_EXP 52
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// if p3 = 24 then
5574: LD_VAR 0 3
5578: PUSH
5579: LD_INT 24
5581: EQUAL
5582: IFFALSE 5592
// sShovel := true ;
5584: LD_ADDR_EXP 53
5588: PUSH
5589: LD_INT 1
5591: ST_TO_ADDR
// if p3 = 25 then
5592: LD_VAR 0 3
5596: PUSH
5597: LD_INT 25
5599: EQUAL
5600: IFFALSE 5610
// sSheik := true ;
5602: LD_ADDR_EXP 54
5606: PUSH
5607: LD_INT 1
5609: ST_TO_ADDR
// if p3 = 26 then
5610: LD_VAR 0 3
5614: PUSH
5615: LD_INT 26
5617: EQUAL
5618: IFFALSE 5628
// sEarthquake := true ;
5620: LD_ADDR_EXP 56
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// if p3 = 27 then
5628: LD_VAR 0 3
5632: PUSH
5633: LD_INT 27
5635: EQUAL
5636: IFFALSE 5646
// sAI := true ;
5638: LD_ADDR_EXP 57
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// if p3 = 28 then
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 28
5653: EQUAL
5654: IFFALSE 5664
// sCargo := true ;
5656: LD_ADDR_EXP 60
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// if p3 = 29 then
5664: LD_VAR 0 3
5668: PUSH
5669: LD_INT 29
5671: EQUAL
5672: IFFALSE 5682
// sDLaser := true ;
5674: LD_ADDR_EXP 61
5678: PUSH
5679: LD_INT 1
5681: ST_TO_ADDR
// if p3 = 30 then
5682: LD_VAR 0 3
5686: PUSH
5687: LD_INT 30
5689: EQUAL
5690: IFFALSE 5700
// sExchange := true ;
5692: LD_ADDR_EXP 62
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// if p3 = 31 then
5700: LD_VAR 0 3
5704: PUSH
5705: LD_INT 31
5707: EQUAL
5708: IFFALSE 5718
// sFac := true ;
5710: LD_ADDR_EXP 63
5714: PUSH
5715: LD_INT 1
5717: ST_TO_ADDR
// if p3 = 32 then
5718: LD_VAR 0 3
5722: PUSH
5723: LD_INT 32
5725: EQUAL
5726: IFFALSE 5736
// sPower := true ;
5728: LD_ADDR_EXP 64
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// if p3 = 33 then
5736: LD_VAR 0 3
5740: PUSH
5741: LD_INT 33
5743: EQUAL
5744: IFFALSE 5754
// sRandom := true ;
5746: LD_ADDR_EXP 65
5750: PUSH
5751: LD_INT 1
5753: ST_TO_ADDR
// if p3 = 34 then
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 34
5761: EQUAL
5762: IFFALSE 5772
// sShield := true ;
5764: LD_ADDR_EXP 66
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// if p3 = 35 then
5772: LD_VAR 0 3
5776: PUSH
5777: LD_INT 35
5779: EQUAL
5780: IFFALSE 5790
// sTime := true ;
5782: LD_ADDR_EXP 67
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// if p3 = 36 then
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 36
5797: EQUAL
5798: IFFALSE 5808
// sTools := true ;
5800: LD_ADDR_EXP 68
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// if p3 = 101 then
5808: LD_VAR 0 3
5812: PUSH
5813: LD_INT 101
5815: EQUAL
5816: IFFALSE 5826
// sSold := true ;
5818: LD_ADDR_EXP 33
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// if p3 = 102 then
5826: LD_VAR 0 3
5830: PUSH
5831: LD_INT 102
5833: EQUAL
5834: IFFALSE 5844
// sDiff := true ;
5836: LD_ADDR_EXP 34
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// if p3 = 103 then
5844: LD_VAR 0 3
5848: PUSH
5849: LD_INT 103
5851: EQUAL
5852: IFFALSE 5862
// sFog := true ;
5854: LD_ADDR_EXP 37
5858: PUSH
5859: LD_INT 1
5861: ST_TO_ADDR
// if p3 = 104 then
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 104
5869: EQUAL
5870: IFFALSE 5880
// sReset := true ;
5872: LD_ADDR_EXP 38
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// if p3 = 105 then
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 105
5887: EQUAL
5888: IFFALSE 5898
// sSun := true ;
5890: LD_ADDR_EXP 39
5894: PUSH
5895: LD_INT 1
5897: ST_TO_ADDR
// if p3 = 106 then
5898: LD_VAR 0 3
5902: PUSH
5903: LD_INT 106
5905: EQUAL
5906: IFFALSE 5916
// sTiger := true ;
5908: LD_ADDR_EXP 35
5912: PUSH
5913: LD_INT 1
5915: ST_TO_ADDR
// if p3 = 107 then
5916: LD_VAR 0 3
5920: PUSH
5921: LD_INT 107
5923: EQUAL
5924: IFFALSE 5934
// sBomb := true ;
5926: LD_ADDR_EXP 36
5930: PUSH
5931: LD_INT 1
5933: ST_TO_ADDR
// if p3 = 108 then
5934: LD_VAR 0 3
5938: PUSH
5939: LD_INT 108
5941: EQUAL
5942: IFFALSE 5952
// sWound := true ;
5944: LD_ADDR_EXP 44
5948: PUSH
5949: LD_INT 1
5951: ST_TO_ADDR
// if p3 = 109 then
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 109
5959: EQUAL
5960: IFFALSE 5970
// sBetray := true ;
5962: LD_ADDR_EXP 48
5966: PUSH
5967: LD_INT 1
5969: ST_TO_ADDR
// if p3 = 110 then
5970: LD_VAR 0 3
5974: PUSH
5975: LD_INT 110
5977: EQUAL
5978: IFFALSE 5988
// sContamin := true ;
5980: LD_ADDR_EXP 49
5984: PUSH
5985: LD_INT 1
5987: ST_TO_ADDR
// if p3 = 111 then
5988: LD_VAR 0 3
5992: PUSH
5993: LD_INT 111
5995: EQUAL
5996: IFFALSE 6006
// sOil := true ;
5998: LD_ADDR_EXP 51
6002: PUSH
6003: LD_INT 1
6005: ST_TO_ADDR
// if p3 = 112 then
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 112
6013: EQUAL
6014: IFFALSE 6024
// sStu := true ;
6016: LD_ADDR_EXP 55
6020: PUSH
6021: LD_INT 1
6023: ST_TO_ADDR
// if p3 = 113 then
6024: LD_VAR 0 3
6028: PUSH
6029: LD_INT 113
6031: EQUAL
6032: IFFALSE 6042
// sBazooka := true ;
6034: LD_ADDR_EXP 58
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// if p3 = 114 then
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 114
6049: EQUAL
6050: IFFALSE 6060
// sMortar := true ;
6052: LD_ADDR_EXP 59
6056: PUSH
6057: LD_INT 1
6059: ST_TO_ADDR
// if p3 = 115 then
6060: LD_VAR 0 3
6064: PUSH
6065: LD_INT 115
6067: EQUAL
6068: IFFALSE 6078
// sRanger := true ;
6070: LD_ADDR_EXP 69
6074: PUSH
6075: LD_INT 1
6077: ST_TO_ADDR
// if p3 = 116 then
6078: LD_VAR 0 3
6082: PUSH
6083: LD_INT 116
6085: EQUAL
6086: IFFALSE 6096
// sComputer := true ;
6088: LD_ADDR_EXP 70
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// if p3 = 117 then
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 117
6103: EQUAL
6104: IFFALSE 6114
// s30 := true ;
6106: LD_ADDR_EXP 71
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// if p3 = 118 then
6114: LD_VAR 0 3
6118: PUSH
6119: LD_INT 118
6121: EQUAL
6122: IFFALSE 6132
// s60 := true ;
6124: LD_ADDR_EXP 72
6128: PUSH
6129: LD_INT 1
6131: ST_TO_ADDR
// end ; if p2 = hack_mode then
6132: LD_VAR 0 2
6136: PUSH
6137: LD_INT 101
6139: EQUAL
6140: IFFALSE 6268
// begin case p3 of 1 :
6142: LD_VAR 0 3
6146: PUSH
6147: LD_INT 1
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6162
6155: POP
// hHackUnlimitedResources ; 2 :
6156: CALL 18407 0 0
6160: GO 6268
6162: LD_INT 2
6164: DOUBLE
6165: EQUAL
6166: IFTRUE 6170
6168: GO 6177
6170: POP
// hHackSetLevel10 ; 3 :
6171: CALL 18540 0 0
6175: GO 6268
6177: LD_INT 3
6179: DOUBLE
6180: EQUAL
6181: IFTRUE 6185
6183: GO 6192
6185: POP
// hHackSetLevel10YourUnits ; 4 :
6186: CALL 18625 0 0
6190: GO 6268
6192: LD_INT 4
6194: DOUBLE
6195: EQUAL
6196: IFTRUE 6200
6198: GO 6207
6200: POP
// hHackInvincible ; 5 :
6201: CALL 19073 0 0
6205: GO 6268
6207: LD_INT 5
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6222
6215: POP
// hHackInvisible ; 6 :
6216: CALL 19184 0 0
6220: GO 6268
6222: LD_INT 6
6224: DOUBLE
6225: EQUAL
6226: IFTRUE 6230
6228: GO 6237
6230: POP
// hHackChangeYourSide ; 7 :
6231: CALL 19241 0 0
6235: GO 6268
6237: LD_INT 7
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6252
6245: POP
// hHackChangeUnitSide ; 8 :
6246: CALL 19283 0 0
6250: GO 6268
6252: LD_INT 8
6254: DOUBLE
6255: EQUAL
6256: IFTRUE 6260
6258: GO 6267
6260: POP
// hHackFog ; end ;
6261: CALL 19384 0 0
6265: GO 6268
6267: POP
// end ; if p2 = game_save_mode then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 102
6275: EQUAL
6276: IFFALSE 6331
// begin if p3 = 1 then
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 1
6285: EQUAL
6286: IFFALSE 6298
// globalGameSaveCounter := p4 ;
6288: LD_ADDR_EXP 15
6292: PUSH
6293: LD_VAR 0 4
6297: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6298: LD_VAR 0 3
6302: PUSH
6303: LD_INT 2
6305: EQUAL
6306: PUSH
6307: LD_EXP 15
6311: AND
6312: IFFALSE 6331
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6314: LD_STRING setGameSaveCounter(
6316: PUSH
6317: LD_EXP 15
6321: STR
6322: PUSH
6323: LD_STRING )
6325: STR
6326: PPUSH
6327: CALL_OW 559
// end ; end ;
6331: LD_VAR 0 7
6335: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6336: LD_INT 0
6338: PPUSH
// streamModeActive := false ;
6339: LD_ADDR_EXP 16
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// normalCounter := 36 ;
6347: LD_ADDR_EXP 17
6351: PUSH
6352: LD_INT 36
6354: ST_TO_ADDR
// hardcoreCounter := 18 ;
6355: LD_ADDR_EXP 18
6359: PUSH
6360: LD_INT 18
6362: ST_TO_ADDR
// sRocket := false ;
6363: LD_ADDR_EXP 21
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// sSpeed := false ;
6371: LD_ADDR_EXP 20
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// sEngine := false ;
6379: LD_ADDR_EXP 22
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// sSpec := false ;
6387: LD_ADDR_EXP 19
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// sLevel := false ;
6395: LD_ADDR_EXP 23
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// sArmoury := false ;
6403: LD_ADDR_EXP 24
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// sRadar := false ;
6411: LD_ADDR_EXP 25
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// sBunker := false ;
6419: LD_ADDR_EXP 26
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// sHack := false ;
6427: LD_ADDR_EXP 27
6431: PUSH
6432: LD_INT 0
6434: ST_TO_ADDR
// sFire := false ;
6435: LD_ADDR_EXP 28
6439: PUSH
6440: LD_INT 0
6442: ST_TO_ADDR
// sRefresh := false ;
6443: LD_ADDR_EXP 29
6447: PUSH
6448: LD_INT 0
6450: ST_TO_ADDR
// sExp := false ;
6451: LD_ADDR_EXP 30
6455: PUSH
6456: LD_INT 0
6458: ST_TO_ADDR
// sDepot := false ;
6459: LD_ADDR_EXP 31
6463: PUSH
6464: LD_INT 0
6466: ST_TO_ADDR
// sFlag := false ;
6467: LD_ADDR_EXP 32
6471: PUSH
6472: LD_INT 0
6474: ST_TO_ADDR
// sKamikadze := false ;
6475: LD_ADDR_EXP 40
6479: PUSH
6480: LD_INT 0
6482: ST_TO_ADDR
// sTroll := false ;
6483: LD_ADDR_EXP 41
6487: PUSH
6488: LD_INT 0
6490: ST_TO_ADDR
// sSlow := false ;
6491: LD_ADDR_EXP 42
6495: PUSH
6496: LD_INT 0
6498: ST_TO_ADDR
// sLack := false ;
6499: LD_ADDR_EXP 43
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// sTank := false ;
6507: LD_ADDR_EXP 45
6511: PUSH
6512: LD_INT 0
6514: ST_TO_ADDR
// sRemote := false ;
6515: LD_ADDR_EXP 46
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// sPowell := false ;
6523: LD_ADDR_EXP 47
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// sTeleport := false ;
6531: LD_ADDR_EXP 50
6535: PUSH
6536: LD_INT 0
6538: ST_TO_ADDR
// sOilTower := false ;
6539: LD_ADDR_EXP 52
6543: PUSH
6544: LD_INT 0
6546: ST_TO_ADDR
// sShovel := false ;
6547: LD_ADDR_EXP 53
6551: PUSH
6552: LD_INT 0
6554: ST_TO_ADDR
// sSheik := false ;
6555: LD_ADDR_EXP 54
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// sEarthquake := false ;
6563: LD_ADDR_EXP 56
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// sAI := false ;
6571: LD_ADDR_EXP 57
6575: PUSH
6576: LD_INT 0
6578: ST_TO_ADDR
// sCargo := false ;
6579: LD_ADDR_EXP 60
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// sDLaser := false ;
6587: LD_ADDR_EXP 61
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// sExchange := false ;
6595: LD_ADDR_EXP 62
6599: PUSH
6600: LD_INT 0
6602: ST_TO_ADDR
// sFac := false ;
6603: LD_ADDR_EXP 63
6607: PUSH
6608: LD_INT 0
6610: ST_TO_ADDR
// sPower := false ;
6611: LD_ADDR_EXP 64
6615: PUSH
6616: LD_INT 0
6618: ST_TO_ADDR
// sRandom := false ;
6619: LD_ADDR_EXP 65
6623: PUSH
6624: LD_INT 0
6626: ST_TO_ADDR
// sShield := false ;
6627: LD_ADDR_EXP 66
6631: PUSH
6632: LD_INT 0
6634: ST_TO_ADDR
// sTime := false ;
6635: LD_ADDR_EXP 67
6639: PUSH
6640: LD_INT 0
6642: ST_TO_ADDR
// sTools := false ;
6643: LD_ADDR_EXP 68
6647: PUSH
6648: LD_INT 0
6650: ST_TO_ADDR
// sSold := false ;
6651: LD_ADDR_EXP 33
6655: PUSH
6656: LD_INT 0
6658: ST_TO_ADDR
// sDiff := false ;
6659: LD_ADDR_EXP 34
6663: PUSH
6664: LD_INT 0
6666: ST_TO_ADDR
// sFog := false ;
6667: LD_ADDR_EXP 37
6671: PUSH
6672: LD_INT 0
6674: ST_TO_ADDR
// sReset := false ;
6675: LD_ADDR_EXP 38
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// sSun := false ;
6683: LD_ADDR_EXP 39
6687: PUSH
6688: LD_INT 0
6690: ST_TO_ADDR
// sTiger := false ;
6691: LD_ADDR_EXP 35
6695: PUSH
6696: LD_INT 0
6698: ST_TO_ADDR
// sBomb := false ;
6699: LD_ADDR_EXP 36
6703: PUSH
6704: LD_INT 0
6706: ST_TO_ADDR
// sWound := false ;
6707: LD_ADDR_EXP 44
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// sBetray := false ;
6715: LD_ADDR_EXP 48
6719: PUSH
6720: LD_INT 0
6722: ST_TO_ADDR
// sContamin := false ;
6723: LD_ADDR_EXP 49
6727: PUSH
6728: LD_INT 0
6730: ST_TO_ADDR
// sOil := false ;
6731: LD_ADDR_EXP 51
6735: PUSH
6736: LD_INT 0
6738: ST_TO_ADDR
// sStu := false ;
6739: LD_ADDR_EXP 55
6743: PUSH
6744: LD_INT 0
6746: ST_TO_ADDR
// sBazooka := false ;
6747: LD_ADDR_EXP 58
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// sMortar := false ;
6755: LD_ADDR_EXP 59
6759: PUSH
6760: LD_INT 0
6762: ST_TO_ADDR
// sRanger := false ;
6763: LD_ADDR_EXP 69
6767: PUSH
6768: LD_INT 0
6770: ST_TO_ADDR
// sComputer := false ;
6771: LD_ADDR_EXP 70
6775: PUSH
6776: LD_INT 0
6778: ST_TO_ADDR
// s30 := false ;
6779: LD_ADDR_EXP 71
6783: PUSH
6784: LD_INT 0
6786: ST_TO_ADDR
// s60 := false ;
6787: LD_ADDR_EXP 72
6791: PUSH
6792: LD_INT 0
6794: ST_TO_ADDR
// end ;
6795: LD_VAR 0 1
6799: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6800: LD_INT 0
6802: PPUSH
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
// result := [ ] ;
6809: LD_ADDR_VAR 0 2
6813: PUSH
6814: EMPTY
6815: ST_TO_ADDR
// if campaign_id = 1 then
6816: LD_OWVAR 69
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: IFFALSE 9990
// begin case mission_number of 1 :
6826: LD_OWVAR 70
6830: PUSH
6831: LD_INT 1
6833: DOUBLE
6834: EQUAL
6835: IFTRUE 6839
6837: GO 6915
6839: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 4
6850: PUSH
6851: LD_INT 11
6853: PUSH
6854: LD_INT 12
6856: PUSH
6857: LD_INT 15
6859: PUSH
6860: LD_INT 16
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_INT 23
6868: PUSH
6869: LD_INT 26
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 101
6885: PUSH
6886: LD_INT 102
6888: PUSH
6889: LD_INT 106
6891: PUSH
6892: LD_INT 116
6894: PUSH
6895: LD_INT 117
6897: PUSH
6898: LD_INT 118
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: ST_TO_ADDR
6913: GO 9988
6915: LD_INT 2
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 7007
6923: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6924: LD_ADDR_VAR 0 2
6928: PUSH
6929: LD_INT 2
6931: PUSH
6932: LD_INT 4
6934: PUSH
6935: LD_INT 11
6937: PUSH
6938: LD_INT 12
6940: PUSH
6941: LD_INT 15
6943: PUSH
6944: LD_INT 16
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 23
6952: PUSH
6953: LD_INT 26
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 101
6969: PUSH
6970: LD_INT 102
6972: PUSH
6973: LD_INT 105
6975: PUSH
6976: LD_INT 106
6978: PUSH
6979: LD_INT 108
6981: PUSH
6982: LD_INT 116
6984: PUSH
6985: LD_INT 117
6987: PUSH
6988: LD_INT 118
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: ST_TO_ADDR
7005: GO 9988
7007: LD_INT 3
7009: DOUBLE
7010: EQUAL
7011: IFTRUE 7015
7013: GO 7103
7015: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_INT 2
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: LD_INT 5
7029: PUSH
7030: LD_INT 11
7032: PUSH
7033: LD_INT 12
7035: PUSH
7036: LD_INT 15
7038: PUSH
7039: LD_INT 16
7041: PUSH
7042: LD_INT 22
7044: PUSH
7045: LD_INT 26
7047: PUSH
7048: LD_INT 36
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 101
7065: PUSH
7066: LD_INT 102
7068: PUSH
7069: LD_INT 105
7071: PUSH
7072: LD_INT 106
7074: PUSH
7075: LD_INT 108
7077: PUSH
7078: LD_INT 116
7080: PUSH
7081: LD_INT 117
7083: PUSH
7084: LD_INT 118
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 9988
7103: LD_INT 4
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7207
7111: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 4
7122: PUSH
7123: LD_INT 5
7125: PUSH
7126: LD_INT 8
7128: PUSH
7129: LD_INT 11
7131: PUSH
7132: LD_INT 12
7134: PUSH
7135: LD_INT 15
7137: PUSH
7138: LD_INT 16
7140: PUSH
7141: LD_INT 22
7143: PUSH
7144: LD_INT 23
7146: PUSH
7147: LD_INT 26
7149: PUSH
7150: LD_INT 36
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 101
7169: PUSH
7170: LD_INT 102
7172: PUSH
7173: LD_INT 105
7175: PUSH
7176: LD_INT 106
7178: PUSH
7179: LD_INT 108
7181: PUSH
7182: LD_INT 116
7184: PUSH
7185: LD_INT 117
7187: PUSH
7188: LD_INT 118
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: ST_TO_ADDR
7205: GO 9988
7207: LD_INT 5
7209: DOUBLE
7210: EQUAL
7211: IFTRUE 7215
7213: GO 7327
7215: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7216: LD_ADDR_VAR 0 2
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_INT 4
7226: PUSH
7227: LD_INT 5
7229: PUSH
7230: LD_INT 6
7232: PUSH
7233: LD_INT 8
7235: PUSH
7236: LD_INT 11
7238: PUSH
7239: LD_INT 12
7241: PUSH
7242: LD_INT 15
7244: PUSH
7245: LD_INT 16
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_INT 23
7253: PUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 36
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 101
7281: PUSH
7282: LD_INT 102
7284: PUSH
7285: LD_INT 105
7287: PUSH
7288: LD_INT 106
7290: PUSH
7291: LD_INT 108
7293: PUSH
7294: LD_INT 109
7296: PUSH
7297: LD_INT 112
7299: PUSH
7300: LD_INT 116
7302: PUSH
7303: LD_INT 117
7305: PUSH
7306: LD_INT 118
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 9988
7327: LD_INT 6
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7467
7335: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: LD_INT 4
7346: PUSH
7347: LD_INT 5
7349: PUSH
7350: LD_INT 6
7352: PUSH
7353: LD_INT 8
7355: PUSH
7356: LD_INT 11
7358: PUSH
7359: LD_INT 12
7361: PUSH
7362: LD_INT 15
7364: PUSH
7365: LD_INT 16
7367: PUSH
7368: LD_INT 20
7370: PUSH
7371: LD_INT 21
7373: PUSH
7374: LD_INT 22
7376: PUSH
7377: LD_INT 23
7379: PUSH
7380: LD_INT 25
7382: PUSH
7383: LD_INT 26
7385: PUSH
7386: LD_INT 30
7388: PUSH
7389: LD_INT 31
7391: PUSH
7392: LD_INT 32
7394: PUSH
7395: LD_INT 36
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 101
7421: PUSH
7422: LD_INT 102
7424: PUSH
7425: LD_INT 105
7427: PUSH
7428: LD_INT 106
7430: PUSH
7431: LD_INT 108
7433: PUSH
7434: LD_INT 109
7436: PUSH
7437: LD_INT 112
7439: PUSH
7440: LD_INT 116
7442: PUSH
7443: LD_INT 117
7445: PUSH
7446: LD_INT 118
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: ST_TO_ADDR
7465: GO 9988
7467: LD_INT 7
7469: DOUBLE
7470: EQUAL
7471: IFTRUE 7475
7473: GO 7587
7475: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7476: LD_ADDR_VAR 0 2
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 5
7489: PUSH
7490: LD_INT 7
7492: PUSH
7493: LD_INT 11
7495: PUSH
7496: LD_INT 12
7498: PUSH
7499: LD_INT 15
7501: PUSH
7502: LD_INT 16
7504: PUSH
7505: LD_INT 20
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 22
7513: PUSH
7514: LD_INT 23
7516: PUSH
7517: LD_INT 25
7519: PUSH
7520: LD_INT 26
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 101
7541: PUSH
7542: LD_INT 102
7544: PUSH
7545: LD_INT 103
7547: PUSH
7548: LD_INT 105
7550: PUSH
7551: LD_INT 106
7553: PUSH
7554: LD_INT 108
7556: PUSH
7557: LD_INT 112
7559: PUSH
7560: LD_INT 116
7562: PUSH
7563: LD_INT 117
7565: PUSH
7566: LD_INT 118
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: ST_TO_ADDR
7585: GO 9988
7587: LD_INT 8
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7735
7595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7596: LD_ADDR_VAR 0 2
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: LD_INT 4
7606: PUSH
7607: LD_INT 5
7609: PUSH
7610: LD_INT 6
7612: PUSH
7613: LD_INT 7
7615: PUSH
7616: LD_INT 8
7618: PUSH
7619: LD_INT 11
7621: PUSH
7622: LD_INT 12
7624: PUSH
7625: LD_INT 15
7627: PUSH
7628: LD_INT 16
7630: PUSH
7631: LD_INT 20
7633: PUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 22
7639: PUSH
7640: LD_INT 23
7642: PUSH
7643: LD_INT 25
7645: PUSH
7646: LD_INT 26
7648: PUSH
7649: LD_INT 30
7651: PUSH
7652: LD_INT 31
7654: PUSH
7655: LD_INT 32
7657: PUSH
7658: LD_INT 36
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 101
7685: PUSH
7686: LD_INT 102
7688: PUSH
7689: LD_INT 103
7691: PUSH
7692: LD_INT 105
7694: PUSH
7695: LD_INT 106
7697: PUSH
7698: LD_INT 108
7700: PUSH
7701: LD_INT 109
7703: PUSH
7704: LD_INT 112
7706: PUSH
7707: LD_INT 116
7709: PUSH
7710: LD_INT 117
7712: PUSH
7713: LD_INT 118
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: ST_TO_ADDR
7733: GO 9988
7735: LD_INT 9
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7891
7743: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7744: LD_ADDR_VAR 0 2
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 4
7754: PUSH
7755: LD_INT 5
7757: PUSH
7758: LD_INT 6
7760: PUSH
7761: LD_INT 7
7763: PUSH
7764: LD_INT 8
7766: PUSH
7767: LD_INT 11
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 15
7775: PUSH
7776: LD_INT 16
7778: PUSH
7779: LD_INT 20
7781: PUSH
7782: LD_INT 21
7784: PUSH
7785: LD_INT 22
7787: PUSH
7788: LD_INT 23
7790: PUSH
7791: LD_INT 25
7793: PUSH
7794: LD_INT 26
7796: PUSH
7797: LD_INT 28
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 31
7805: PUSH
7806: LD_INT 32
7808: PUSH
7809: LD_INT 36
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 101
7837: PUSH
7838: LD_INT 102
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 105
7846: PUSH
7847: LD_INT 106
7849: PUSH
7850: LD_INT 108
7852: PUSH
7853: LD_INT 109
7855: PUSH
7856: LD_INT 112
7858: PUSH
7859: LD_INT 114
7861: PUSH
7862: LD_INT 116
7864: PUSH
7865: LD_INT 117
7867: PUSH
7868: LD_INT 118
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9988
7891: LD_INT 10
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8095
7899: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7900: LD_ADDR_VAR 0 2
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 4
7910: PUSH
7911: LD_INT 5
7913: PUSH
7914: LD_INT 6
7916: PUSH
7917: LD_INT 7
7919: PUSH
7920: LD_INT 8
7922: PUSH
7923: LD_INT 9
7925: PUSH
7926: LD_INT 10
7928: PUSH
7929: LD_INT 11
7931: PUSH
7932: LD_INT 12
7934: PUSH
7935: LD_INT 13
7937: PUSH
7938: LD_INT 14
7940: PUSH
7941: LD_INT 15
7943: PUSH
7944: LD_INT 16
7946: PUSH
7947: LD_INT 17
7949: PUSH
7950: LD_INT 18
7952: PUSH
7953: LD_INT 19
7955: PUSH
7956: LD_INT 20
7958: PUSH
7959: LD_INT 21
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_INT 23
7967: PUSH
7968: LD_INT 24
7970: PUSH
7971: LD_INT 25
7973: PUSH
7974: LD_INT 26
7976: PUSH
7977: LD_INT 28
7979: PUSH
7980: LD_INT 30
7982: PUSH
7983: LD_INT 31
7985: PUSH
7986: LD_INT 32
7988: PUSH
7989: LD_INT 36
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 101
8025: PUSH
8026: LD_INT 102
8028: PUSH
8029: LD_INT 103
8031: PUSH
8032: LD_INT 104
8034: PUSH
8035: LD_INT 105
8037: PUSH
8038: LD_INT 106
8040: PUSH
8041: LD_INT 107
8043: PUSH
8044: LD_INT 108
8046: PUSH
8047: LD_INT 109
8049: PUSH
8050: LD_INT 110
8052: PUSH
8053: LD_INT 111
8055: PUSH
8056: LD_INT 112
8058: PUSH
8059: LD_INT 114
8061: PUSH
8062: LD_INT 116
8064: PUSH
8065: LD_INT 117
8067: PUSH
8068: LD_INT 118
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: ST_TO_ADDR
8093: GO 9988
8095: LD_INT 11
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8307
8103: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: LD_INT 4
8117: PUSH
8118: LD_INT 5
8120: PUSH
8121: LD_INT 6
8123: PUSH
8124: LD_INT 7
8126: PUSH
8127: LD_INT 8
8129: PUSH
8130: LD_INT 9
8132: PUSH
8133: LD_INT 10
8135: PUSH
8136: LD_INT 11
8138: PUSH
8139: LD_INT 12
8141: PUSH
8142: LD_INT 13
8144: PUSH
8145: LD_INT 14
8147: PUSH
8148: LD_INT 15
8150: PUSH
8151: LD_INT 16
8153: PUSH
8154: LD_INT 17
8156: PUSH
8157: LD_INT 18
8159: PUSH
8160: LD_INT 19
8162: PUSH
8163: LD_INT 20
8165: PUSH
8166: LD_INT 21
8168: PUSH
8169: LD_INT 22
8171: PUSH
8172: LD_INT 23
8174: PUSH
8175: LD_INT 24
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 26
8183: PUSH
8184: LD_INT 28
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 31
8192: PUSH
8193: LD_INT 32
8195: PUSH
8196: LD_INT 34
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 101
8237: PUSH
8238: LD_INT 102
8240: PUSH
8241: LD_INT 103
8243: PUSH
8244: LD_INT 104
8246: PUSH
8247: LD_INT 105
8249: PUSH
8250: LD_INT 106
8252: PUSH
8253: LD_INT 107
8255: PUSH
8256: LD_INT 108
8258: PUSH
8259: LD_INT 109
8261: PUSH
8262: LD_INT 110
8264: PUSH
8265: LD_INT 111
8267: PUSH
8268: LD_INT 112
8270: PUSH
8271: LD_INT 114
8273: PUSH
8274: LD_INT 116
8276: PUSH
8277: LD_INT 117
8279: PUSH
8280: LD_INT 118
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
8305: GO 9988
8307: LD_INT 12
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8535
8315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8316: LD_ADDR_VAR 0 2
8320: PUSH
8321: LD_INT 1
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 3
8329: PUSH
8330: LD_INT 4
8332: PUSH
8333: LD_INT 5
8335: PUSH
8336: LD_INT 6
8338: PUSH
8339: LD_INT 7
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 9
8347: PUSH
8348: LD_INT 10
8350: PUSH
8351: LD_INT 11
8353: PUSH
8354: LD_INT 12
8356: PUSH
8357: LD_INT 13
8359: PUSH
8360: LD_INT 14
8362: PUSH
8363: LD_INT 15
8365: PUSH
8366: LD_INT 16
8368: PUSH
8369: LD_INT 17
8371: PUSH
8372: LD_INT 18
8374: PUSH
8375: LD_INT 19
8377: PUSH
8378: LD_INT 20
8380: PUSH
8381: LD_INT 21
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_INT 23
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: LD_INT 25
8395: PUSH
8396: LD_INT 26
8398: PUSH
8399: LD_INT 27
8401: PUSH
8402: LD_INT 28
8404: PUSH
8405: LD_INT 30
8407: PUSH
8408: LD_INT 31
8410: PUSH
8411: LD_INT 32
8413: PUSH
8414: LD_INT 33
8416: PUSH
8417: LD_INT 34
8419: PUSH
8420: LD_INT 36
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 101
8461: PUSH
8462: LD_INT 102
8464: PUSH
8465: LD_INT 103
8467: PUSH
8468: LD_INT 104
8470: PUSH
8471: LD_INT 105
8473: PUSH
8474: LD_INT 106
8476: PUSH
8477: LD_INT 107
8479: PUSH
8480: LD_INT 108
8482: PUSH
8483: LD_INT 109
8485: PUSH
8486: LD_INT 110
8488: PUSH
8489: LD_INT 111
8491: PUSH
8492: LD_INT 112
8494: PUSH
8495: LD_INT 113
8497: PUSH
8498: LD_INT 114
8500: PUSH
8501: LD_INT 116
8503: PUSH
8504: LD_INT 117
8506: PUSH
8507: LD_INT 118
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: ST_TO_ADDR
8533: GO 9988
8535: LD_INT 13
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8751
8543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: LD_INT 2
8554: PUSH
8555: LD_INT 3
8557: PUSH
8558: LD_INT 4
8560: PUSH
8561: LD_INT 5
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: LD_INT 9
8569: PUSH
8570: LD_INT 10
8572: PUSH
8573: LD_INT 11
8575: PUSH
8576: LD_INT 12
8578: PUSH
8579: LD_INT 14
8581: PUSH
8582: LD_INT 15
8584: PUSH
8585: LD_INT 16
8587: PUSH
8588: LD_INT 17
8590: PUSH
8591: LD_INT 18
8593: PUSH
8594: LD_INT 19
8596: PUSH
8597: LD_INT 20
8599: PUSH
8600: LD_INT 21
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 23
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 26
8617: PUSH
8618: LD_INT 27
8620: PUSH
8621: LD_INT 28
8623: PUSH
8624: LD_INT 30
8626: PUSH
8627: LD_INT 31
8629: PUSH
8630: LD_INT 32
8632: PUSH
8633: LD_INT 33
8635: PUSH
8636: LD_INT 34
8638: PUSH
8639: LD_INT 36
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 101
8677: PUSH
8678: LD_INT 102
8680: PUSH
8681: LD_INT 103
8683: PUSH
8684: LD_INT 104
8686: PUSH
8687: LD_INT 105
8689: PUSH
8690: LD_INT 106
8692: PUSH
8693: LD_INT 107
8695: PUSH
8696: LD_INT 108
8698: PUSH
8699: LD_INT 109
8701: PUSH
8702: LD_INT 110
8704: PUSH
8705: LD_INT 111
8707: PUSH
8708: LD_INT 112
8710: PUSH
8711: LD_INT 113
8713: PUSH
8714: LD_INT 114
8716: PUSH
8717: LD_INT 116
8719: PUSH
8720: LD_INT 117
8722: PUSH
8723: LD_INT 118
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9988
8751: LD_INT 14
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8983
8759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: LD_INT 3
8773: PUSH
8774: LD_INT 4
8776: PUSH
8777: LD_INT 5
8779: PUSH
8780: LD_INT 6
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 8
8788: PUSH
8789: LD_INT 9
8791: PUSH
8792: LD_INT 10
8794: PUSH
8795: LD_INT 11
8797: PUSH
8798: LD_INT 12
8800: PUSH
8801: LD_INT 13
8803: PUSH
8804: LD_INT 14
8806: PUSH
8807: LD_INT 15
8809: PUSH
8810: LD_INT 16
8812: PUSH
8813: LD_INT 17
8815: PUSH
8816: LD_INT 18
8818: PUSH
8819: LD_INT 19
8821: PUSH
8822: LD_INT 20
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_INT 23
8833: PUSH
8834: LD_INT 24
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 26
8842: PUSH
8843: LD_INT 27
8845: PUSH
8846: LD_INT 28
8848: PUSH
8849: LD_INT 29
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 31
8857: PUSH
8858: LD_INT 32
8860: PUSH
8861: LD_INT 33
8863: PUSH
8864: LD_INT 34
8866: PUSH
8867: LD_INT 36
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 101
8909: PUSH
8910: LD_INT 102
8912: PUSH
8913: LD_INT 103
8915: PUSH
8916: LD_INT 104
8918: PUSH
8919: LD_INT 105
8921: PUSH
8922: LD_INT 106
8924: PUSH
8925: LD_INT 107
8927: PUSH
8928: LD_INT 108
8930: PUSH
8931: LD_INT 109
8933: PUSH
8934: LD_INT 110
8936: PUSH
8937: LD_INT 111
8939: PUSH
8940: LD_INT 112
8942: PUSH
8943: LD_INT 113
8945: PUSH
8946: LD_INT 114
8948: PUSH
8949: LD_INT 116
8951: PUSH
8952: LD_INT 117
8954: PUSH
8955: LD_INT 118
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: ST_TO_ADDR
8981: GO 9988
8983: LD_INT 15
8985: DOUBLE
8986: EQUAL
8987: IFTRUE 8991
8989: GO 9215
8991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8992: LD_ADDR_VAR 0 2
8996: PUSH
8997: LD_INT 1
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: LD_INT 4
9008: PUSH
9009: LD_INT 5
9011: PUSH
9012: LD_INT 6
9014: PUSH
9015: LD_INT 7
9017: PUSH
9018: LD_INT 8
9020: PUSH
9021: LD_INT 9
9023: PUSH
9024: LD_INT 10
9026: PUSH
9027: LD_INT 11
9029: PUSH
9030: LD_INT 12
9032: PUSH
9033: LD_INT 13
9035: PUSH
9036: LD_INT 14
9038: PUSH
9039: LD_INT 15
9041: PUSH
9042: LD_INT 16
9044: PUSH
9045: LD_INT 17
9047: PUSH
9048: LD_INT 18
9050: PUSH
9051: LD_INT 19
9053: PUSH
9054: LD_INT 20
9056: PUSH
9057: LD_INT 21
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 23
9065: PUSH
9066: LD_INT 24
9068: PUSH
9069: LD_INT 25
9071: PUSH
9072: LD_INT 26
9074: PUSH
9075: LD_INT 27
9077: PUSH
9078: LD_INT 28
9080: PUSH
9081: LD_INT 29
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: LD_INT 31
9089: PUSH
9090: LD_INT 32
9092: PUSH
9093: LD_INT 33
9095: PUSH
9096: LD_INT 34
9098: PUSH
9099: LD_INT 36
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 101
9141: PUSH
9142: LD_INT 102
9144: PUSH
9145: LD_INT 103
9147: PUSH
9148: LD_INT 104
9150: PUSH
9151: LD_INT 105
9153: PUSH
9154: LD_INT 106
9156: PUSH
9157: LD_INT 107
9159: PUSH
9160: LD_INT 108
9162: PUSH
9163: LD_INT 109
9165: PUSH
9166: LD_INT 110
9168: PUSH
9169: LD_INT 111
9171: PUSH
9172: LD_INT 112
9174: PUSH
9175: LD_INT 113
9177: PUSH
9178: LD_INT 114
9180: PUSH
9181: LD_INT 116
9183: PUSH
9184: LD_INT 117
9186: PUSH
9187: LD_INT 118
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: ST_TO_ADDR
9213: GO 9988
9215: LD_INT 16
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9359
9223: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 4
9234: PUSH
9235: LD_INT 5
9237: PUSH
9238: LD_INT 7
9240: PUSH
9241: LD_INT 11
9243: PUSH
9244: LD_INT 12
9246: PUSH
9247: LD_INT 15
9249: PUSH
9250: LD_INT 16
9252: PUSH
9253: LD_INT 20
9255: PUSH
9256: LD_INT 21
9258: PUSH
9259: LD_INT 22
9261: PUSH
9262: LD_INT 23
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 26
9270: PUSH
9271: LD_INT 30
9273: PUSH
9274: LD_INT 31
9276: PUSH
9277: LD_INT 32
9279: PUSH
9280: LD_INT 33
9282: PUSH
9283: LD_INT 34
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 101
9309: PUSH
9310: LD_INT 102
9312: PUSH
9313: LD_INT 103
9315: PUSH
9316: LD_INT 106
9318: PUSH
9319: LD_INT 108
9321: PUSH
9322: LD_INT 112
9324: PUSH
9325: LD_INT 113
9327: PUSH
9328: LD_INT 114
9330: PUSH
9331: LD_INT 116
9333: PUSH
9334: LD_INT 117
9336: PUSH
9337: LD_INT 118
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: ST_TO_ADDR
9357: GO 9988
9359: LD_INT 17
9361: DOUBLE
9362: EQUAL
9363: IFTRUE 9367
9365: GO 9591
9367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_INT 1
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: LD_INT 4
9384: PUSH
9385: LD_INT 5
9387: PUSH
9388: LD_INT 6
9390: PUSH
9391: LD_INT 7
9393: PUSH
9394: LD_INT 8
9396: PUSH
9397: LD_INT 9
9399: PUSH
9400: LD_INT 10
9402: PUSH
9403: LD_INT 11
9405: PUSH
9406: LD_INT 12
9408: PUSH
9409: LD_INT 13
9411: PUSH
9412: LD_INT 14
9414: PUSH
9415: LD_INT 15
9417: PUSH
9418: LD_INT 16
9420: PUSH
9421: LD_INT 17
9423: PUSH
9424: LD_INT 18
9426: PUSH
9427: LD_INT 19
9429: PUSH
9430: LD_INT 20
9432: PUSH
9433: LD_INT 21
9435: PUSH
9436: LD_INT 22
9438: PUSH
9439: LD_INT 23
9441: PUSH
9442: LD_INT 24
9444: PUSH
9445: LD_INT 25
9447: PUSH
9448: LD_INT 26
9450: PUSH
9451: LD_INT 27
9453: PUSH
9454: LD_INT 28
9456: PUSH
9457: LD_INT 29
9459: PUSH
9460: LD_INT 30
9462: PUSH
9463: LD_INT 31
9465: PUSH
9466: LD_INT 32
9468: PUSH
9469: LD_INT 33
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 36
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 101
9517: PUSH
9518: LD_INT 102
9520: PUSH
9521: LD_INT 103
9523: PUSH
9524: LD_INT 104
9526: PUSH
9527: LD_INT 105
9529: PUSH
9530: LD_INT 106
9532: PUSH
9533: LD_INT 107
9535: PUSH
9536: LD_INT 108
9538: PUSH
9539: LD_INT 109
9541: PUSH
9542: LD_INT 110
9544: PUSH
9545: LD_INT 111
9547: PUSH
9548: LD_INT 112
9550: PUSH
9551: LD_INT 113
9553: PUSH
9554: LD_INT 114
9556: PUSH
9557: LD_INT 116
9559: PUSH
9560: LD_INT 117
9562: PUSH
9563: LD_INT 118
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: ST_TO_ADDR
9589: GO 9988
9591: LD_INT 18
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9747
9599: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 4
9610: PUSH
9611: LD_INT 5
9613: PUSH
9614: LD_INT 7
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: LD_INT 12
9622: PUSH
9623: LD_INT 15
9625: PUSH
9626: LD_INT 16
9628: PUSH
9629: LD_INT 20
9631: PUSH
9632: LD_INT 21
9634: PUSH
9635: LD_INT 22
9637: PUSH
9638: LD_INT 23
9640: PUSH
9641: LD_INT 25
9643: PUSH
9644: LD_INT 26
9646: PUSH
9647: LD_INT 30
9649: PUSH
9650: LD_INT 31
9652: PUSH
9653: LD_INT 32
9655: PUSH
9656: LD_INT 33
9658: PUSH
9659: LD_INT 34
9661: PUSH
9662: LD_INT 35
9664: PUSH
9665: LD_INT 36
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 101
9693: PUSH
9694: LD_INT 102
9696: PUSH
9697: LD_INT 103
9699: PUSH
9700: LD_INT 106
9702: PUSH
9703: LD_INT 108
9705: PUSH
9706: LD_INT 112
9708: PUSH
9709: LD_INT 113
9711: PUSH
9712: LD_INT 114
9714: PUSH
9715: LD_INT 115
9717: PUSH
9718: LD_INT 116
9720: PUSH
9721: LD_INT 117
9723: PUSH
9724: LD_INT 118
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: ST_TO_ADDR
9745: GO 9988
9747: LD_INT 19
9749: DOUBLE
9750: EQUAL
9751: IFTRUE 9755
9753: GO 9987
9755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: LD_INT 2
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: LD_INT 4
9772: PUSH
9773: LD_INT 5
9775: PUSH
9776: LD_INT 6
9778: PUSH
9779: LD_INT 7
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: LD_INT 9
9787: PUSH
9788: LD_INT 10
9790: PUSH
9791: LD_INT 11
9793: PUSH
9794: LD_INT 12
9796: PUSH
9797: LD_INT 13
9799: PUSH
9800: LD_INT 14
9802: PUSH
9803: LD_INT 15
9805: PUSH
9806: LD_INT 16
9808: PUSH
9809: LD_INT 17
9811: PUSH
9812: LD_INT 18
9814: PUSH
9815: LD_INT 19
9817: PUSH
9818: LD_INT 20
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 26
9838: PUSH
9839: LD_INT 27
9841: PUSH
9842: LD_INT 28
9844: PUSH
9845: LD_INT 29
9847: PUSH
9848: LD_INT 30
9850: PUSH
9851: LD_INT 31
9853: PUSH
9854: LD_INT 32
9856: PUSH
9857: LD_INT 33
9859: PUSH
9860: LD_INT 34
9862: PUSH
9863: LD_INT 35
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 101
9909: PUSH
9910: LD_INT 102
9912: PUSH
9913: LD_INT 103
9915: PUSH
9916: LD_INT 104
9918: PUSH
9919: LD_INT 105
9921: PUSH
9922: LD_INT 106
9924: PUSH
9925: LD_INT 107
9927: PUSH
9928: LD_INT 108
9930: PUSH
9931: LD_INT 109
9933: PUSH
9934: LD_INT 110
9936: PUSH
9937: LD_INT 111
9939: PUSH
9940: LD_INT 112
9942: PUSH
9943: LD_INT 113
9945: PUSH
9946: LD_INT 114
9948: PUSH
9949: LD_INT 115
9951: PUSH
9952: LD_INT 116
9954: PUSH
9955: LD_INT 117
9957: PUSH
9958: LD_INT 118
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: ST_TO_ADDR
9985: GO 9988
9987: POP
// end else
9988: GO 10219
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9990: LD_ADDR_VAR 0 2
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: LD_INT 4
10006: PUSH
10007: LD_INT 5
10009: PUSH
10010: LD_INT 6
10012: PUSH
10013: LD_INT 7
10015: PUSH
10016: LD_INT 8
10018: PUSH
10019: LD_INT 9
10021: PUSH
10022: LD_INT 10
10024: PUSH
10025: LD_INT 11
10027: PUSH
10028: LD_INT 12
10030: PUSH
10031: LD_INT 13
10033: PUSH
10034: LD_INT 14
10036: PUSH
10037: LD_INT 15
10039: PUSH
10040: LD_INT 16
10042: PUSH
10043: LD_INT 17
10045: PUSH
10046: LD_INT 18
10048: PUSH
10049: LD_INT 19
10051: PUSH
10052: LD_INT 20
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 22
10060: PUSH
10061: LD_INT 23
10063: PUSH
10064: LD_INT 24
10066: PUSH
10067: LD_INT 25
10069: PUSH
10070: LD_INT 26
10072: PUSH
10073: LD_INT 27
10075: PUSH
10076: LD_INT 28
10078: PUSH
10079: LD_INT 29
10081: PUSH
10082: LD_INT 30
10084: PUSH
10085: LD_INT 31
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 33
10093: PUSH
10094: LD_INT 34
10096: PUSH
10097: LD_INT 35
10099: PUSH
10100: LD_INT 36
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 101
10143: PUSH
10144: LD_INT 102
10146: PUSH
10147: LD_INT 103
10149: PUSH
10150: LD_INT 104
10152: PUSH
10153: LD_INT 105
10155: PUSH
10156: LD_INT 106
10158: PUSH
10159: LD_INT 107
10161: PUSH
10162: LD_INT 108
10164: PUSH
10165: LD_INT 109
10167: PUSH
10168: LD_INT 110
10170: PUSH
10171: LD_INT 111
10173: PUSH
10174: LD_INT 112
10176: PUSH
10177: LD_INT 113
10179: PUSH
10180: LD_INT 114
10182: PUSH
10183: LD_INT 115
10185: PUSH
10186: LD_INT 116
10188: PUSH
10189: LD_INT 117
10191: PUSH
10192: LD_INT 118
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: ST_TO_ADDR
// if result then
10219: LD_VAR 0 2
10223: IFFALSE 11009
// begin normal :=  ;
10225: LD_ADDR_VAR 0 5
10229: PUSH
10230: LD_STRING 
10232: ST_TO_ADDR
// hardcore :=  ;
10233: LD_ADDR_VAR 0 6
10237: PUSH
10238: LD_STRING 
10240: ST_TO_ADDR
// active :=  ;
10241: LD_ADDR_VAR 0 7
10245: PUSH
10246: LD_STRING 
10248: ST_TO_ADDR
// for i = 1 to normalCounter do
10249: LD_ADDR_VAR 0 8
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_EXP 17
10263: PUSH
10264: FOR_TO
10265: IFFALSE 10366
// begin tmp := 0 ;
10267: LD_ADDR_VAR 0 3
10271: PUSH
10272: LD_STRING 0
10274: ST_TO_ADDR
// if result [ 1 ] then
10275: LD_VAR 0 2
10279: PUSH
10280: LD_INT 1
10282: ARRAY
10283: IFFALSE 10348
// if result [ 1 ] [ 1 ] = i then
10285: LD_VAR 0 2
10289: PUSH
10290: LD_INT 1
10292: ARRAY
10293: PUSH
10294: LD_INT 1
10296: ARRAY
10297: PUSH
10298: LD_VAR 0 8
10302: EQUAL
10303: IFFALSE 10348
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10305: LD_ADDR_VAR 0 2
10309: PUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: LD_VAR 0 2
10322: PUSH
10323: LD_INT 1
10325: ARRAY
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 3
10334: PPUSH
10335: CALL_OW 1
10339: ST_TO_ADDR
// tmp := 1 ;
10340: LD_ADDR_VAR 0 3
10344: PUSH
10345: LD_STRING 1
10347: ST_TO_ADDR
// end ; normal := normal & tmp ;
10348: LD_ADDR_VAR 0 5
10352: PUSH
10353: LD_VAR 0 5
10357: PUSH
10358: LD_VAR 0 3
10362: STR
10363: ST_TO_ADDR
// end ;
10364: GO 10264
10366: POP
10367: POP
// for i = 1 to hardcoreCounter do
10368: LD_ADDR_VAR 0 8
10372: PUSH
10373: DOUBLE
10374: LD_INT 1
10376: DEC
10377: ST_TO_ADDR
10378: LD_EXP 18
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10489
// begin tmp := 0 ;
10386: LD_ADDR_VAR 0 3
10390: PUSH
10391: LD_STRING 0
10393: ST_TO_ADDR
// if result [ 2 ] then
10394: LD_VAR 0 2
10398: PUSH
10399: LD_INT 2
10401: ARRAY
10402: IFFALSE 10471
// if result [ 2 ] [ 1 ] = 100 + i then
10404: LD_VAR 0 2
10408: PUSH
10409: LD_INT 2
10411: ARRAY
10412: PUSH
10413: LD_INT 1
10415: ARRAY
10416: PUSH
10417: LD_INT 100
10419: PUSH
10420: LD_VAR 0 8
10424: PLUS
10425: EQUAL
10426: IFFALSE 10471
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: LD_VAR 0 2
10445: PUSH
10446: LD_INT 2
10448: ARRAY
10449: PPUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 3
10457: PPUSH
10458: CALL_OW 1
10462: ST_TO_ADDR
// tmp := 1 ;
10463: LD_ADDR_VAR 0 3
10467: PUSH
10468: LD_STRING 1
10470: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10471: LD_ADDR_VAR 0 6
10475: PUSH
10476: LD_VAR 0 6
10480: PUSH
10481: LD_VAR 0 3
10485: STR
10486: ST_TO_ADDR
// end ;
10487: GO 10383
10489: POP
10490: POP
// if isGameLoad then
10491: LD_VAR 0 1
10495: IFFALSE 10970
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10497: LD_ADDR_VAR 0 4
10501: PUSH
10502: LD_EXP 21
10506: PUSH
10507: LD_EXP 20
10511: PUSH
10512: LD_EXP 22
10516: PUSH
10517: LD_EXP 19
10521: PUSH
10522: LD_EXP 23
10526: PUSH
10527: LD_EXP 24
10531: PUSH
10532: LD_EXP 25
10536: PUSH
10537: LD_EXP 26
10541: PUSH
10542: LD_EXP 27
10546: PUSH
10547: LD_EXP 28
10551: PUSH
10552: LD_EXP 29
10556: PUSH
10557: LD_EXP 30
10561: PUSH
10562: LD_EXP 31
10566: PUSH
10567: LD_EXP 32
10571: PUSH
10572: LD_EXP 40
10576: PUSH
10577: LD_EXP 41
10581: PUSH
10582: LD_EXP 42
10586: PUSH
10587: LD_EXP 43
10591: PUSH
10592: LD_EXP 45
10596: PUSH
10597: LD_EXP 46
10601: PUSH
10602: LD_EXP 47
10606: PUSH
10607: LD_EXP 50
10611: PUSH
10612: LD_EXP 52
10616: PUSH
10617: LD_EXP 53
10621: PUSH
10622: LD_EXP 54
10626: PUSH
10627: LD_EXP 56
10631: PUSH
10632: LD_EXP 57
10636: PUSH
10637: LD_EXP 60
10641: PUSH
10642: LD_EXP 61
10646: PUSH
10647: LD_EXP 62
10651: PUSH
10652: LD_EXP 63
10656: PUSH
10657: LD_EXP 64
10661: PUSH
10662: LD_EXP 65
10666: PUSH
10667: LD_EXP 66
10671: PUSH
10672: LD_EXP 67
10676: PUSH
10677: LD_EXP 68
10681: PUSH
10682: LD_EXP 33
10686: PUSH
10687: LD_EXP 34
10691: PUSH
10692: LD_EXP 37
10696: PUSH
10697: LD_EXP 38
10701: PUSH
10702: LD_EXP 39
10706: PUSH
10707: LD_EXP 35
10711: PUSH
10712: LD_EXP 36
10716: PUSH
10717: LD_EXP 44
10721: PUSH
10722: LD_EXP 48
10726: PUSH
10727: LD_EXP 49
10731: PUSH
10732: LD_EXP 51
10736: PUSH
10737: LD_EXP 55
10741: PUSH
10742: LD_EXP 58
10746: PUSH
10747: LD_EXP 59
10751: PUSH
10752: LD_EXP 69
10756: PUSH
10757: LD_EXP 70
10761: PUSH
10762: LD_EXP 71
10766: PUSH
10767: LD_EXP 72
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: ST_TO_ADDR
// tmp :=  ;
10828: LD_ADDR_VAR 0 3
10832: PUSH
10833: LD_STRING 
10835: ST_TO_ADDR
// for i = 1 to normalCounter do
10836: LD_ADDR_VAR 0 8
10840: PUSH
10841: DOUBLE
10842: LD_INT 1
10844: DEC
10845: ST_TO_ADDR
10846: LD_EXP 17
10850: PUSH
10851: FOR_TO
10852: IFFALSE 10888
// begin if flags [ i ] then
10854: LD_VAR 0 4
10858: PUSH
10859: LD_VAR 0 8
10863: ARRAY
10864: IFFALSE 10886
// tmp := tmp & i & ; ;
10866: LD_ADDR_VAR 0 3
10870: PUSH
10871: LD_VAR 0 3
10875: PUSH
10876: LD_VAR 0 8
10880: STR
10881: PUSH
10882: LD_STRING ;
10884: STR
10885: ST_TO_ADDR
// end ;
10886: GO 10851
10888: POP
10889: POP
// for i = 1 to hardcoreCounter do
10890: LD_ADDR_VAR 0 8
10894: PUSH
10895: DOUBLE
10896: LD_INT 1
10898: DEC
10899: ST_TO_ADDR
10900: LD_EXP 18
10904: PUSH
10905: FOR_TO
10906: IFFALSE 10952
// begin if flags [ normalCounter + i ] then
10908: LD_VAR 0 4
10912: PUSH
10913: LD_EXP 17
10917: PUSH
10918: LD_VAR 0 8
10922: PLUS
10923: ARRAY
10924: IFFALSE 10950
// tmp := tmp & ( 100 + i ) & ; ;
10926: LD_ADDR_VAR 0 3
10930: PUSH
10931: LD_VAR 0 3
10935: PUSH
10936: LD_INT 100
10938: PUSH
10939: LD_VAR 0 8
10943: PLUS
10944: STR
10945: PUSH
10946: LD_STRING ;
10948: STR
10949: ST_TO_ADDR
// end ;
10950: GO 10905
10952: POP
10953: POP
// if tmp then
10954: LD_VAR 0 3
10958: IFFALSE 10970
// active := tmp ;
10960: LD_ADDR_VAR 0 7
10964: PUSH
10965: LD_VAR 0 3
10969: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10970: LD_STRING getStreamItemsFromMission("
10972: PUSH
10973: LD_VAR 0 5
10977: STR
10978: PUSH
10979: LD_STRING ","
10981: STR
10982: PUSH
10983: LD_VAR 0 6
10987: STR
10988: PUSH
10989: LD_STRING ","
10991: STR
10992: PUSH
10993: LD_VAR 0 7
10997: STR
10998: PUSH
10999: LD_STRING ")
11001: STR
11002: PPUSH
11003: CALL_OW 559
// end else
11007: GO 11016
// ToLua ( getStreamItemsFromMission("","","") ) ;
11009: LD_STRING getStreamItemsFromMission("","","")
11011: PPUSH
11012: CALL_OW 559
// end ;
11016: LD_VAR 0 2
11020: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11021: LD_EXP 16
11025: PUSH
11026: LD_EXP 21
11030: AND
11031: IFFALSE 11155
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
11039: PPUSH
// begin enable ;
11040: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11041: LD_ADDR_VAR 0 2
11045: PUSH
11046: LD_INT 22
11048: PUSH
11049: LD_OWVAR 2
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 2
11060: PUSH
11061: LD_INT 34
11063: PUSH
11064: LD_INT 7
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 34
11073: PUSH
11074: LD_INT 45
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 34
11083: PUSH
11084: LD_INT 28
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 34
11093: PUSH
11094: LD_INT 47
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: ST_TO_ADDR
// if not tmp then
11117: LD_VAR 0 2
11121: NOT
11122: IFFALSE 11126
// exit ;
11124: GO 11155
// for i in tmp do
11126: LD_ADDR_VAR 0 1
11130: PUSH
11131: LD_VAR 0 2
11135: PUSH
11136: FOR_IN
11137: IFFALSE 11153
// begin SetLives ( i , 0 ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 0
11146: PPUSH
11147: CALL_OW 234
// end ;
11151: GO 11136
11153: POP
11154: POP
// end ;
11155: PPOPN 2
11157: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11158: LD_EXP 16
11162: PUSH
11163: LD_EXP 22
11167: AND
11168: IFFALSE 11252
11170: GO 11172
11172: DISABLE
11173: LD_INT 0
11175: PPUSH
11176: PPUSH
// begin enable ;
11177: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11178: LD_ADDR_VAR 0 2
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_OWVAR 2
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 32
11197: PUSH
11198: LD_INT 3
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PPUSH
11209: CALL_OW 69
11213: ST_TO_ADDR
// if not tmp then
11214: LD_VAR 0 2
11218: NOT
11219: IFFALSE 11223
// exit ;
11221: GO 11252
// for i in tmp do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_VAR 0 2
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11250
// begin SetLives ( i , 0 ) ;
11236: LD_VAR 0 1
11240: PPUSH
11241: LD_INT 0
11243: PPUSH
11244: CALL_OW 234
// end ;
11248: GO 11233
11250: POP
11251: POP
// end ;
11252: PPOPN 2
11254: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11255: LD_EXP 16
11259: PUSH
11260: LD_EXP 19
11264: AND
11265: IFFALSE 11358
11267: GO 11269
11269: DISABLE
11270: LD_INT 0
11272: PPUSH
// begin enable ;
11273: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11274: LD_ADDR_VAR 0 1
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_OWVAR 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 25
11296: PUSH
11297: LD_INT 5
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 9
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 25
11316: PUSH
11317: LD_INT 8
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: PUSH
11339: FOR_IN
11340: IFFALSE 11356
// begin SetClass ( i , 1 ) ;
11342: LD_VAR 0 1
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 336
// end ;
11354: GO 11339
11356: POP
11357: POP
// end ;
11358: PPOPN 1
11360: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11361: LD_EXP 16
11365: PUSH
11366: LD_EXP 20
11370: AND
11371: PUSH
11372: LD_OWVAR 65
11376: PUSH
11377: LD_INT 7
11379: LESS
11380: AND
11381: IFFALSE 11395
11383: GO 11385
11385: DISABLE
// begin enable ;
11386: ENABLE
// game_speed := 7 ;
11387: LD_ADDR_OWVAR 65
11391: PUSH
11392: LD_INT 7
11394: ST_TO_ADDR
// end ;
11395: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11396: LD_EXP 16
11400: PUSH
11401: LD_EXP 23
11405: AND
11406: IFFALSE 11608
11408: GO 11410
11410: DISABLE
11411: LD_INT 0
11413: PPUSH
11414: PPUSH
11415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_INT 81
11423: PUSH
11424: LD_OWVAR 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 1
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 69
11451: ST_TO_ADDR
// if not tmp then
11452: LD_VAR 0 3
11456: NOT
11457: IFFALSE 11461
// exit ;
11459: GO 11608
// if tmp > 5 then
11461: LD_VAR 0 3
11465: PUSH
11466: LD_INT 5
11468: GREATER
11469: IFFALSE 11481
// k := 5 else
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: LD_INT 5
11478: ST_TO_ADDR
11479: GO 11491
// k := tmp ;
11481: LD_ADDR_VAR 0 2
11485: PUSH
11486: LD_VAR 0 3
11490: ST_TO_ADDR
// for i := 1 to k do
11491: LD_ADDR_VAR 0 1
11495: PUSH
11496: DOUBLE
11497: LD_INT 1
11499: DEC
11500: ST_TO_ADDR
11501: LD_VAR 0 2
11505: PUSH
11506: FOR_TO
11507: IFFALSE 11606
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_VAR 0 1
11518: ARRAY
11519: PPUSH
11520: LD_VAR 0 1
11524: PUSH
11525: LD_INT 4
11527: MOD
11528: PUSH
11529: LD_INT 1
11531: PLUS
11532: PPUSH
11533: CALL_OW 259
11537: PUSH
11538: LD_INT 10
11540: LESS
11541: IFFALSE 11604
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11543: LD_VAR 0 3
11547: PUSH
11548: LD_VAR 0 1
11552: ARRAY
11553: PPUSH
11554: LD_VAR 0 1
11558: PUSH
11559: LD_INT 4
11561: MOD
11562: PUSH
11563: LD_INT 1
11565: PLUS
11566: PPUSH
11567: LD_VAR 0 3
11571: PUSH
11572: LD_VAR 0 1
11576: ARRAY
11577: PPUSH
11578: LD_VAR 0 1
11582: PUSH
11583: LD_INT 4
11585: MOD
11586: PUSH
11587: LD_INT 1
11589: PLUS
11590: PPUSH
11591: CALL_OW 259
11595: PUSH
11596: LD_INT 1
11598: PLUS
11599: PPUSH
11600: CALL_OW 237
11604: GO 11506
11606: POP
11607: POP
// end ;
11608: PPOPN 3
11610: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11611: LD_EXP 16
11615: PUSH
11616: LD_EXP 24
11620: AND
11621: IFFALSE 11641
11623: GO 11625
11625: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11626: LD_INT 4
11628: PPUSH
11629: LD_OWVAR 2
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 324
11641: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11642: LD_EXP 16
11646: PUSH
11647: LD_EXP 53
11651: AND
11652: IFFALSE 11672
11654: GO 11656
11656: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11657: LD_INT 19
11659: PPUSH
11660: LD_OWVAR 2
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: CALL_OW 324
11672: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11673: LD_EXP 16
11677: PUSH
11678: LD_EXP 25
11682: AND
11683: IFFALSE 11785
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
// begin enable ;
11692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11693: LD_ADDR_VAR 0 2
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_OWVAR 2
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 34
11715: PUSH
11716: LD_INT 11
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 34
11725: PUSH
11726: LD_INT 30
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 69
11746: ST_TO_ADDR
// if not tmp then
11747: LD_VAR 0 2
11751: NOT
11752: IFFALSE 11756
// exit ;
11754: GO 11785
// for i in tmp do
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_VAR 0 2
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11783
// begin SetLives ( i , 0 ) ;
11769: LD_VAR 0 1
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL_OW 234
// end ;
11781: GO 11766
11783: POP
11784: POP
// end ;
11785: PPOPN 2
11787: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11788: LD_EXP 16
11792: PUSH
11793: LD_EXP 26
11797: AND
11798: IFFALSE 11818
11800: GO 11802
11802: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11803: LD_INT 32
11805: PPUSH
11806: LD_OWVAR 2
11810: PPUSH
11811: LD_INT 0
11813: PPUSH
11814: CALL_OW 324
11818: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11819: LD_EXP 16
11823: PUSH
11824: LD_EXP 27
11828: AND
11829: IFFALSE 12010
11831: GO 11833
11833: DISABLE
11834: LD_INT 0
11836: PPUSH
11837: PPUSH
11838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11839: LD_ADDR_VAR 0 2
11843: PUSH
11844: LD_INT 22
11846: PUSH
11847: LD_OWVAR 2
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 33
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: ST_TO_ADDR
// if not tmp then
11875: LD_VAR 0 2
11879: NOT
11880: IFFALSE 11884
// exit ;
11882: GO 12010
// side := 0 ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_INT 0
11891: ST_TO_ADDR
// for i := 1 to 8 do
11892: LD_ADDR_VAR 0 1
11896: PUSH
11897: DOUBLE
11898: LD_INT 1
11900: DEC
11901: ST_TO_ADDR
11902: LD_INT 8
11904: PUSH
11905: FOR_TO
11906: IFFALSE 11954
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11908: LD_OWVAR 2
11912: PUSH
11913: LD_VAR 0 1
11917: NONEQUAL
11918: PUSH
11919: LD_OWVAR 2
11923: PPUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 81
11933: PUSH
11934: LD_INT 2
11936: EQUAL
11937: AND
11938: IFFALSE 11952
// begin side := i ;
11940: LD_ADDR_VAR 0 3
11944: PUSH
11945: LD_VAR 0 1
11949: ST_TO_ADDR
// break ;
11950: GO 11954
// end ;
11952: GO 11905
11954: POP
11955: POP
// if not side then
11956: LD_VAR 0 3
11960: NOT
11961: IFFALSE 11965
// exit ;
11963: GO 12010
// for i := 1 to tmp do
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: DOUBLE
11971: LD_INT 1
11973: DEC
11974: ST_TO_ADDR
11975: LD_VAR 0 2
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12008
// if Prob ( 60 ) then
11983: LD_INT 60
11985: PPUSH
11986: CALL_OW 13
11990: IFFALSE 12006
// SetSide ( i , side ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: CALL_OW 235
12006: GO 11980
12008: POP
12009: POP
// end ;
12010: PPOPN 3
12012: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12013: LD_EXP 16
12017: PUSH
12018: LD_EXP 29
12022: AND
12023: IFFALSE 12142
12025: GO 12027
12027: DISABLE
12028: LD_INT 0
12030: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12031: LD_ADDR_VAR 0 1
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: LD_OWVAR 2
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 21
12050: PUSH
12051: LD_INT 1
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: LD_INT 23
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 69
12084: PUSH
12085: FOR_IN
12086: IFFALSE 12140
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 257
12097: PUSH
12098: LD_INT 1
12100: PUSH
12101: LD_INT 2
12103: PUSH
12104: LD_INT 3
12106: PUSH
12107: LD_INT 4
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: IN
12116: IFFALSE 12138
// SetClass ( un , rand ( 1 , 4 ) ) ;
12118: LD_VAR 0 1
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_INT 4
12128: PPUSH
12129: CALL_OW 12
12133: PPUSH
12134: CALL_OW 336
12138: GO 12085
12140: POP
12141: POP
// end ;
12142: PPOPN 1
12144: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12145: LD_EXP 16
12149: PUSH
12150: LD_EXP 28
12154: AND
12155: IFFALSE 12234
12157: GO 12159
12159: DISABLE
12160: LD_INT 0
12162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12163: LD_ADDR_VAR 0 1
12167: PUSH
12168: LD_INT 22
12170: PUSH
12171: LD_OWVAR 2
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 21
12182: PUSH
12183: LD_INT 3
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PPUSH
12194: CALL_OW 69
12198: ST_TO_ADDR
// if not tmp then
12199: LD_VAR 0 1
12203: NOT
12204: IFFALSE 12208
// exit ;
12206: GO 12234
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 1
12215: PPUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 12
12225: ARRAY
12226: PPUSH
12227: LD_INT 100
12229: PPUSH
12230: CALL_OW 234
// end ;
12234: PPOPN 1
12236: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12237: LD_EXP 16
12241: PUSH
12242: LD_EXP 30
12246: AND
12247: IFFALSE 12345
12249: GO 12251
12251: DISABLE
12252: LD_INT 0
12254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12255: LD_ADDR_VAR 0 1
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: LD_OWVAR 2
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 21
12274: PUSH
12275: LD_INT 1
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: ST_TO_ADDR
// if not tmp then
12291: LD_VAR 0 1
12295: NOT
12296: IFFALSE 12300
// exit ;
12298: GO 12345
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12300: LD_VAR 0 1
12304: PUSH
12305: LD_INT 1
12307: PPUSH
12308: LD_VAR 0 1
12312: PPUSH
12313: CALL_OW 12
12317: ARRAY
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 4
12324: PPUSH
12325: CALL_OW 12
12329: PPUSH
12330: LD_INT 3000
12332: PPUSH
12333: LD_INT 9000
12335: PPUSH
12336: CALL_OW 12
12340: PPUSH
12341: CALL_OW 492
// end ;
12345: PPOPN 1
12347: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12348: LD_EXP 16
12352: PUSH
12353: LD_EXP 31
12357: AND
12358: IFFALSE 12378
12360: GO 12362
12362: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12363: LD_INT 1
12365: PPUSH
12366: LD_OWVAR 2
12370: PPUSH
12371: LD_INT 0
12373: PPUSH
12374: CALL_OW 324
12378: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12379: LD_EXP 16
12383: PUSH
12384: LD_EXP 32
12388: AND
12389: IFFALSE 12472
12391: GO 12393
12393: DISABLE
12394: LD_INT 0
12396: PPUSH
12397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_OWVAR 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: ST_TO_ADDR
// if not tmp then
12434: LD_VAR 0 2
12438: NOT
12439: IFFALSE 12443
// exit ;
12441: GO 12472
// for i in tmp do
12443: LD_ADDR_VAR 0 1
12447: PUSH
12448: LD_VAR 0 2
12452: PUSH
12453: FOR_IN
12454: IFFALSE 12470
// SetBLevel ( i , 10 ) ;
12456: LD_VAR 0 1
12460: PPUSH
12461: LD_INT 10
12463: PPUSH
12464: CALL_OW 241
12468: GO 12453
12470: POP
12471: POP
// end ;
12472: PPOPN 2
12474: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12475: LD_EXP 16
12479: PUSH
12480: LD_EXP 33
12484: AND
12485: IFFALSE 12596
12487: GO 12489
12489: DISABLE
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
12494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12495: LD_ADDR_VAR 0 3
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: LD_OWVAR 2
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 25
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: ST_TO_ADDR
// if not tmp then
12531: LD_VAR 0 3
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12596
// un := tmp [ rand ( 1 , tmp ) ] ;
12540: LD_ADDR_VAR 0 2
12544: PUSH
12545: LD_VAR 0 3
12549: PUSH
12550: LD_INT 1
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: CALL_OW 12
12562: ARRAY
12563: ST_TO_ADDR
// if Crawls ( un ) then
12564: LD_VAR 0 2
12568: PPUSH
12569: CALL_OW 318
12573: IFFALSE 12584
// ComWalk ( un ) ;
12575: LD_VAR 0 2
12579: PPUSH
12580: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12584: LD_VAR 0 2
12588: PPUSH
12589: LD_INT 5
12591: PPUSH
12592: CALL_OW 336
// end ;
12596: PPOPN 3
12598: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12599: LD_EXP 16
12603: PUSH
12604: LD_EXP 34
12608: AND
12609: PUSH
12610: LD_OWVAR 67
12614: PUSH
12615: LD_INT 4
12617: LESS
12618: AND
12619: IFFALSE 12638
12621: GO 12623
12623: DISABLE
// begin Difficulty := Difficulty + 1 ;
12624: LD_ADDR_OWVAR 67
12628: PUSH
12629: LD_OWVAR 67
12633: PUSH
12634: LD_INT 1
12636: PLUS
12637: ST_TO_ADDR
// end ;
12638: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12639: LD_EXP 16
12643: PUSH
12644: LD_EXP 35
12648: AND
12649: IFFALSE 12752
12651: GO 12653
12653: DISABLE
12654: LD_INT 0
12656: PPUSH
// begin for i := 1 to 5 do
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: DOUBLE
12663: LD_INT 1
12665: DEC
12666: ST_TO_ADDR
12667: LD_INT 5
12669: PUSH
12670: FOR_TO
12671: IFFALSE 12750
// begin uc_nation := nation_nature ;
12673: LD_ADDR_OWVAR 21
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// uc_side := 0 ;
12681: LD_ADDR_OWVAR 20
12685: PUSH
12686: LD_INT 0
12688: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12689: LD_ADDR_OWVAR 29
12693: PUSH
12694: LD_INT 12
12696: PUSH
12697: LD_INT 12
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: ST_TO_ADDR
// hc_agressivity := 20 ;
12704: LD_ADDR_OWVAR 35
12708: PUSH
12709: LD_INT 20
12711: ST_TO_ADDR
// hc_class := class_tiger ;
12712: LD_ADDR_OWVAR 28
12716: PUSH
12717: LD_INT 14
12719: ST_TO_ADDR
// hc_gallery :=  ;
12720: LD_ADDR_OWVAR 33
12724: PUSH
12725: LD_STRING 
12727: ST_TO_ADDR
// hc_name :=  ;
12728: LD_ADDR_OWVAR 26
12732: PUSH
12733: LD_STRING 
12735: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12736: CALL_OW 44
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 51
// end ;
12748: GO 12670
12750: POP
12751: POP
// end ;
12752: PPOPN 1
12754: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12755: LD_EXP 16
12759: PUSH
12760: LD_EXP 36
12764: AND
12765: IFFALSE 12774
12767: GO 12769
12769: DISABLE
// StreamSibBomb ;
12770: CALL 12775 0 0
12774: END
// export function StreamSibBomb ; var i , x , y ; begin
12775: LD_INT 0
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// result := false ;
12781: LD_ADDR_VAR 0 1
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// for i := 1 to 16 do
12789: LD_ADDR_VAR 0 2
12793: PUSH
12794: DOUBLE
12795: LD_INT 1
12797: DEC
12798: ST_TO_ADDR
12799: LD_INT 16
12801: PUSH
12802: FOR_TO
12803: IFFALSE 13002
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: LD_INT 10
12812: PUSH
12813: LD_INT 20
12815: PUSH
12816: LD_INT 30
12818: PUSH
12819: LD_INT 40
12821: PUSH
12822: LD_INT 50
12824: PUSH
12825: LD_INT 60
12827: PUSH
12828: LD_INT 70
12830: PUSH
12831: LD_INT 80
12833: PUSH
12834: LD_INT 90
12836: PUSH
12837: LD_INT 100
12839: PUSH
12840: LD_INT 110
12842: PUSH
12843: LD_INT 120
12845: PUSH
12846: LD_INT 130
12848: PUSH
12849: LD_INT 140
12851: PUSH
12852: LD_INT 150
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 1
12874: PPUSH
12875: LD_INT 15
12877: PPUSH
12878: CALL_OW 12
12882: ARRAY
12883: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12884: LD_ADDR_VAR 0 4
12888: PUSH
12889: LD_INT 10
12891: PUSH
12892: LD_INT 20
12894: PUSH
12895: LD_INT 30
12897: PUSH
12898: LD_INT 40
12900: PUSH
12901: LD_INT 50
12903: PUSH
12904: LD_INT 60
12906: PUSH
12907: LD_INT 70
12909: PUSH
12910: LD_INT 80
12912: PUSH
12913: LD_INT 90
12915: PUSH
12916: LD_INT 100
12918: PUSH
12919: LD_INT 110
12921: PUSH
12922: LD_INT 120
12924: PUSH
12925: LD_INT 130
12927: PUSH
12928: LD_INT 140
12930: PUSH
12931: LD_INT 150
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_INT 15
12956: PPUSH
12957: CALL_OW 12
12961: ARRAY
12962: ST_TO_ADDR
// if ValidHex ( x , y ) then
12963: LD_VAR 0 3
12967: PPUSH
12968: LD_VAR 0 4
12972: PPUSH
12973: CALL_OW 488
12977: IFFALSE 13000
// begin result := [ x , y ] ;
12979: LD_ADDR_VAR 0 1
12983: PUSH
12984: LD_VAR 0 3
12988: PUSH
12989: LD_VAR 0 4
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// break ;
12998: GO 13002
// end ; end ;
13000: GO 12802
13002: POP
13003: POP
// if result then
13004: LD_VAR 0 1
13008: IFFALSE 13068
// begin ToLua ( playSibBomb() ) ;
13010: LD_STRING playSibBomb()
13012: PPUSH
13013: CALL_OW 559
// wait ( 0 0$14 ) ;
13017: LD_INT 490
13019: PPUSH
13020: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13024: LD_VAR 0 1
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: LD_VAR 0 1
13037: PUSH
13038: LD_INT 2
13040: ARRAY
13041: PPUSH
13042: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13046: LD_VAR 0 1
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: LD_VAR 0 1
13059: PUSH
13060: LD_INT 2
13062: ARRAY
13063: PPUSH
13064: CALL_OW 429
// end ; end ;
13068: LD_VAR 0 1
13072: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13073: LD_EXP 16
13077: PUSH
13078: LD_EXP 38
13082: AND
13083: IFFALSE 13095
13085: GO 13087
13087: DISABLE
// YouLost (  ) ;
13088: LD_STRING 
13090: PPUSH
13091: CALL_OW 104
13095: END
// every 0 0$1 trigger StreamModeActive and sFog do
13096: LD_EXP 16
13100: PUSH
13101: LD_EXP 37
13105: AND
13106: IFFALSE 13120
13108: GO 13110
13110: DISABLE
// FogOff ( your_side ) ;
13111: LD_OWVAR 2
13115: PPUSH
13116: CALL_OW 344
13120: END
// every 0 0$1 trigger StreamModeActive and sSun do
13121: LD_EXP 16
13125: PUSH
13126: LD_EXP 39
13130: AND
13131: IFFALSE 13159
13133: GO 13135
13135: DISABLE
// begin solar_recharge_percent := 0 ;
13136: LD_ADDR_OWVAR 79
13140: PUSH
13141: LD_INT 0
13143: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13144: LD_INT 10500
13146: PPUSH
13147: CALL_OW 67
// solar_recharge_percent := 100 ;
13151: LD_ADDR_OWVAR 79
13155: PUSH
13156: LD_INT 100
13158: ST_TO_ADDR
// end ;
13159: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13160: LD_EXP 16
13164: PUSH
13165: LD_EXP 40
13169: AND
13170: IFFALSE 13409
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
13179: PPUSH
// begin tmp := [ ] ;
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: EMPTY
13186: ST_TO_ADDR
// for i := 1 to 6 do
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_INT 6
13199: PUSH
13200: FOR_TO
13201: IFFALSE 13306
// begin uc_nation := nation_nature ;
13203: LD_ADDR_OWVAR 21
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// uc_side := 0 ;
13211: LD_ADDR_OWVAR 20
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13219: LD_ADDR_OWVAR 29
13223: PUSH
13224: LD_INT 12
13226: PUSH
13227: LD_INT 12
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: ST_TO_ADDR
// hc_agressivity := 20 ;
13234: LD_ADDR_OWVAR 35
13238: PUSH
13239: LD_INT 20
13241: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13242: LD_ADDR_OWVAR 28
13246: PUSH
13247: LD_INT 17
13249: ST_TO_ADDR
// hc_gallery :=  ;
13250: LD_ADDR_OWVAR 33
13254: PUSH
13255: LD_STRING 
13257: ST_TO_ADDR
// hc_name :=  ;
13258: LD_ADDR_OWVAR 26
13262: PUSH
13263: LD_STRING 
13265: ST_TO_ADDR
// un := CreateHuman ;
13266: LD_ADDR_VAR 0 2
13270: PUSH
13271: CALL_OW 44
13275: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13276: LD_VAR 0 2
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: CALL_OW 51
// tmp := tmp ^ un ;
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: LD_VAR 0 3
13297: PUSH
13298: LD_VAR 0 2
13302: ADD
13303: ST_TO_ADDR
// end ;
13304: GO 13200
13306: POP
13307: POP
// repeat wait ( 0 0$1 ) ;
13308: LD_INT 35
13310: PPUSH
13311: CALL_OW 67
// for un in tmp do
13315: LD_ADDR_VAR 0 2
13319: PUSH
13320: LD_VAR 0 3
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13400
// begin if IsDead ( un ) then
13328: LD_VAR 0 2
13332: PPUSH
13333: CALL_OW 301
13337: IFFALSE 13357
// begin tmp := tmp diff un ;
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: LD_VAR 0 3
13348: PUSH
13349: LD_VAR 0 2
13353: DIFF
13354: ST_TO_ADDR
// continue ;
13355: GO 13325
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13357: LD_VAR 0 2
13361: PPUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 0
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PPUSH
13384: LD_VAR 0 2
13388: PPUSH
13389: CALL_OW 74
13393: PPUSH
13394: CALL_OW 115
// end ;
13398: GO 13325
13400: POP
13401: POP
// until not tmp ;
13402: LD_VAR 0 3
13406: NOT
13407: IFFALSE 13308
// end ;
13409: PPOPN 3
13411: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13412: LD_EXP 16
13416: PUSH
13417: LD_EXP 41
13421: AND
13422: IFFALSE 13476
13424: GO 13426
13426: DISABLE
// begin ToLua ( displayTroll(); ) ;
13427: LD_STRING displayTroll();
13429: PPUSH
13430: CALL_OW 559
// wait ( 3 3$00 ) ;
13434: LD_INT 6300
13436: PPUSH
13437: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13441: LD_STRING hideTroll();
13443: PPUSH
13444: CALL_OW 559
// wait ( 1 1$00 ) ;
13448: LD_INT 2100
13450: PPUSH
13451: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13455: LD_STRING displayTroll();
13457: PPUSH
13458: CALL_OW 559
// wait ( 1 1$00 ) ;
13462: LD_INT 2100
13464: PPUSH
13465: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13469: LD_STRING hideTroll();
13471: PPUSH
13472: CALL_OW 559
// end ;
13476: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13477: LD_EXP 16
13481: PUSH
13482: LD_EXP 42
13486: AND
13487: IFFALSE 13550
13489: GO 13491
13491: DISABLE
13492: LD_INT 0
13494: PPUSH
// begin p := 0 ;
13495: LD_ADDR_VAR 0 1
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// repeat game_speed := 1 ;
13503: LD_ADDR_OWVAR 65
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13511: LD_INT 35
13513: PPUSH
13514: CALL_OW 67
// p := p + 1 ;
13518: LD_ADDR_VAR 0 1
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: LD_INT 1
13530: PLUS
13531: ST_TO_ADDR
// until p >= 60 ;
13532: LD_VAR 0 1
13536: PUSH
13537: LD_INT 60
13539: GREATEREQUAL
13540: IFFALSE 13503
// game_speed := 4 ;
13542: LD_ADDR_OWVAR 65
13546: PUSH
13547: LD_INT 4
13549: ST_TO_ADDR
// end ;
13550: PPOPN 1
13552: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13553: LD_EXP 16
13557: PUSH
13558: LD_EXP 43
13562: AND
13563: IFFALSE 13709
13565: GO 13567
13567: DISABLE
13568: LD_INT 0
13570: PPUSH
13571: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_OWVAR 2
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 2
13591: PUSH
13592: LD_INT 30
13594: PUSH
13595: LD_INT 0
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 30
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: ST_TO_ADDR
// if not depot then
13626: LD_VAR 0 1
13630: NOT
13631: IFFALSE 13635
// exit ;
13633: GO 13709
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13635: LD_ADDR_VAR 0 2
13639: PUSH
13640: LD_VAR 0 1
13644: PUSH
13645: LD_INT 1
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 12
13657: ARRAY
13658: PPUSH
13659: CALL_OW 274
13663: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13664: LD_VAR 0 2
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_INT 0
13674: PPUSH
13675: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13679: LD_VAR 0 2
13683: PPUSH
13684: LD_INT 2
13686: PPUSH
13687: LD_INT 0
13689: PPUSH
13690: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13694: LD_VAR 0 2
13698: PPUSH
13699: LD_INT 3
13701: PPUSH
13702: LD_INT 0
13704: PPUSH
13705: CALL_OW 277
// end ;
13709: PPOPN 2
13711: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13712: LD_EXP 16
13716: PUSH
13717: LD_EXP 44
13721: AND
13722: IFFALSE 13819
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_INT 22
13737: PUSH
13738: LD_OWVAR 2
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 21
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 3
13759: PUSH
13760: LD_INT 23
13762: PUSH
13763: LD_INT 0
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: ST_TO_ADDR
// if not tmp then
13784: LD_VAR 0 1
13788: NOT
13789: IFFALSE 13793
// exit ;
13791: GO 13819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13793: LD_VAR 0 1
13797: PUSH
13798: LD_INT 1
13800: PPUSH
13801: LD_VAR 0 1
13805: PPUSH
13806: CALL_OW 12
13810: ARRAY
13811: PPUSH
13812: LD_INT 200
13814: PPUSH
13815: CALL_OW 234
// end ;
13819: PPOPN 1
13821: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13822: LD_EXP 16
13826: PUSH
13827: LD_EXP 45
13831: AND
13832: IFFALSE 13911
13834: GO 13836
13836: DISABLE
13837: LD_INT 0
13839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13840: LD_ADDR_VAR 0 1
13844: PUSH
13845: LD_INT 22
13847: PUSH
13848: LD_OWVAR 2
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 21
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 69
13875: ST_TO_ADDR
// if not tmp then
13876: LD_VAR 0 1
13880: NOT
13881: IFFALSE 13885
// exit ;
13883: GO 13911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13885: LD_VAR 0 1
13889: PUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_VAR 0 1
13897: PPUSH
13898: CALL_OW 12
13902: ARRAY
13903: PPUSH
13904: LD_INT 60
13906: PPUSH
13907: CALL_OW 234
// end ;
13911: PPOPN 1
13913: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13914: LD_EXP 16
13918: PUSH
13919: LD_EXP 46
13923: AND
13924: IFFALSE 14023
13926: GO 13928
13928: DISABLE
13929: LD_INT 0
13931: PPUSH
13932: PPUSH
// begin enable ;
13933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13934: LD_ADDR_VAR 0 1
13938: PUSH
13939: LD_INT 22
13941: PUSH
13942: LD_OWVAR 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 61
13953: PUSH
13954: EMPTY
13955: LIST
13956: PUSH
13957: LD_INT 33
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// if not tmp then
13977: LD_VAR 0 1
13981: NOT
13982: IFFALSE 13986
// exit ;
13984: GO 14023
// for i in tmp do
13986: LD_ADDR_VAR 0 2
13990: PUSH
13991: LD_VAR 0 1
13995: PUSH
13996: FOR_IN
13997: IFFALSE 14021
// if IsControledBy ( i ) then
13999: LD_VAR 0 2
14003: PPUSH
14004: CALL_OW 312
14008: IFFALSE 14019
// ComUnlink ( i ) ;
14010: LD_VAR 0 2
14014: PPUSH
14015: CALL_OW 136
14019: GO 13996
14021: POP
14022: POP
// end ;
14023: PPOPN 2
14025: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14026: LD_EXP 16
14030: PUSH
14031: LD_EXP 47
14035: AND
14036: IFFALSE 14176
14038: GO 14040
14040: DISABLE
14041: LD_INT 0
14043: PPUSH
14044: PPUSH
// begin ToLua ( displayPowell(); ) ;
14045: LD_STRING displayPowell();
14047: PPUSH
14048: CALL_OW 559
// uc_side := 0 ;
14052: LD_ADDR_OWVAR 20
14056: PUSH
14057: LD_INT 0
14059: ST_TO_ADDR
// uc_nation := 2 ;
14060: LD_ADDR_OWVAR 21
14064: PUSH
14065: LD_INT 2
14067: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14068: LD_ADDR_OWVAR 37
14072: PUSH
14073: LD_INT 14
14075: ST_TO_ADDR
// vc_engine := engine_siberite ;
14076: LD_ADDR_OWVAR 39
14080: PUSH
14081: LD_INT 3
14083: ST_TO_ADDR
// vc_control := control_apeman ;
14084: LD_ADDR_OWVAR 38
14088: PUSH
14089: LD_INT 5
14091: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14092: LD_ADDR_OWVAR 40
14096: PUSH
14097: LD_INT 29
14099: ST_TO_ADDR
// un := CreateVehicle ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: CALL_OW 45
14109: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14110: LD_VAR 0 2
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14122: LD_INT 35
14124: PPUSH
14125: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14129: LD_VAR 0 2
14133: PPUSH
14134: LD_INT 22
14136: PUSH
14137: LD_OWVAR 2
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PPUSH
14146: CALL_OW 69
14150: PPUSH
14151: LD_VAR 0 2
14155: PPUSH
14156: CALL_OW 74
14160: PPUSH
14161: CALL_OW 115
// until IsDead ( un ) ;
14165: LD_VAR 0 2
14169: PPUSH
14170: CALL_OW 301
14174: IFFALSE 14122
// end ;
14176: PPOPN 2
14178: END
// every 0 0$1 trigger StreamModeActive and sStu do
14179: LD_EXP 16
14183: PUSH
14184: LD_EXP 55
14188: AND
14189: IFFALSE 14205
14191: GO 14193
14193: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14194: LD_STRING displayStucuk();
14196: PPUSH
14197: CALL_OW 559
// ResetFog ;
14201: CALL_OW 335
// end ;
14205: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14206: LD_EXP 16
14210: PUSH
14211: LD_EXP 48
14215: AND
14216: IFFALSE 14357
14218: GO 14220
14220: DISABLE
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14225: LD_ADDR_VAR 0 2
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 21
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 2
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14357
// un := tmp [ rand ( 1 , tmp ) ] ;
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_VAR 0 2
14279: PUSH
14280: LD_INT 1
14282: PPUSH
14283: LD_VAR 0 2
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14294: LD_VAR 0 1
14298: PPUSH
14299: LD_INT 0
14301: PPUSH
14302: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14306: LD_VAR 0 1
14310: PPUSH
14311: LD_OWVAR 3
14315: PUSH
14316: LD_VAR 0 1
14320: DIFF
14321: PPUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 74
14331: PPUSH
14332: CALL_OW 115
// wait ( 0 0$20 ) ;
14336: LD_INT 700
14338: PPUSH
14339: CALL_OW 67
// SetSide ( un , your_side ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: LD_OWVAR 2
14352: PPUSH
14353: CALL_OW 235
// end ;
14357: PPOPN 2
14359: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14360: LD_EXP 16
14364: PUSH
14365: LD_EXP 49
14369: AND
14370: IFFALSE 14476
14372: GO 14374
14374: DISABLE
14375: LD_INT 0
14377: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14378: LD_ADDR_VAR 0 1
14382: PUSH
14383: LD_INT 22
14385: PUSH
14386: LD_OWVAR 2
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: LD_INT 0
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 30
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 69
14431: ST_TO_ADDR
// if not depot then
14432: LD_VAR 0 1
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14476
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14441: LD_VAR 0 1
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: CALL_OW 250
14454: PPUSH
14455: LD_VAR 0 1
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: PPUSH
14464: CALL_OW 251
14468: PPUSH
14469: LD_INT 70
14471: PPUSH
14472: CALL_OW 495
// end ;
14476: PPOPN 1
14478: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14479: LD_EXP 16
14483: PUSH
14484: LD_EXP 50
14488: AND
14489: IFFALSE 14700
14491: GO 14493
14493: DISABLE
14494: LD_INT 0
14496: PPUSH
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14501: LD_ADDR_VAR 0 5
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_OWVAR 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 21
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: ST_TO_ADDR
// if not tmp then
14537: LD_VAR 0 5
14541: NOT
14542: IFFALSE 14546
// exit ;
14544: GO 14700
// for i in tmp do
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_VAR 0 5
14555: PUSH
14556: FOR_IN
14557: IFFALSE 14698
// begin d := rand ( 0 , 5 ) ;
14559: LD_ADDR_VAR 0 4
14563: PUSH
14564: LD_INT 0
14566: PPUSH
14567: LD_INT 5
14569: PPUSH
14570: CALL_OW 12
14574: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: CALL_OW 250
14589: PPUSH
14590: LD_VAR 0 4
14594: PPUSH
14595: LD_INT 3
14597: PPUSH
14598: LD_INT 12
14600: PPUSH
14601: CALL_OW 12
14605: PPUSH
14606: CALL_OW 272
14610: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14611: LD_ADDR_VAR 0 3
14615: PUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: CALL_OW 251
14625: PPUSH
14626: LD_VAR 0 4
14630: PPUSH
14631: LD_INT 3
14633: PPUSH
14634: LD_INT 12
14636: PPUSH
14637: CALL_OW 12
14641: PPUSH
14642: CALL_OW 273
14646: ST_TO_ADDR
// if ValidHex ( x , y ) then
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_VAR 0 3
14656: PPUSH
14657: CALL_OW 488
14661: IFFALSE 14696
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_VAR 0 2
14672: PPUSH
14673: LD_VAR 0 3
14677: PPUSH
14678: LD_INT 3
14680: PPUSH
14681: LD_INT 6
14683: PPUSH
14684: CALL_OW 12
14688: PPUSH
14689: LD_INT 1
14691: PPUSH
14692: CALL_OW 483
// end ;
14696: GO 14556
14698: POP
14699: POP
// end ;
14700: PPOPN 5
14702: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14703: LD_EXP 16
14707: PUSH
14708: LD_EXP 51
14712: AND
14713: IFFALSE 14807
14715: GO 14717
14717: DISABLE
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_OWVAR 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 32
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: PPUSH
14764: CALL_OW 69
14768: ST_TO_ADDR
// if not tmp then
14769: LD_VAR 0 2
14773: NOT
14774: IFFALSE 14778
// exit ;
14776: GO 14807
// for i in tmp do
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_VAR 0 2
14787: PUSH
14788: FOR_IN
14789: IFFALSE 14805
// SetFuel ( i , 0 ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: LD_INT 0
14798: PPUSH
14799: CALL_OW 240
14803: GO 14788
14805: POP
14806: POP
// end ;
14807: PPOPN 2
14809: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14810: LD_EXP 16
14814: PUSH
14815: LD_EXP 52
14819: AND
14820: IFFALSE 14886
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14828: LD_ADDR_VAR 0 1
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_OWVAR 2
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 29
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: ST_TO_ADDR
// if not tmp then
14864: LD_VAR 0 1
14868: NOT
14869: IFFALSE 14873
// exit ;
14871: GO 14886
// DestroyUnit ( tmp [ 1 ] ) ;
14873: LD_VAR 0 1
14877: PUSH
14878: LD_INT 1
14880: ARRAY
14881: PPUSH
14882: CALL_OW 65
// end ;
14886: PPOPN 1
14888: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14889: LD_EXP 16
14893: PUSH
14894: LD_EXP 54
14898: AND
14899: IFFALSE 15028
14901: GO 14903
14903: DISABLE
14904: LD_INT 0
14906: PPUSH
// begin uc_side := 0 ;
14907: LD_ADDR_OWVAR 20
14911: PUSH
14912: LD_INT 0
14914: ST_TO_ADDR
// uc_nation := nation_arabian ;
14915: LD_ADDR_OWVAR 21
14919: PUSH
14920: LD_INT 2
14922: ST_TO_ADDR
// hc_gallery :=  ;
14923: LD_ADDR_OWVAR 33
14927: PUSH
14928: LD_STRING 
14930: ST_TO_ADDR
// hc_name :=  ;
14931: LD_ADDR_OWVAR 26
14935: PUSH
14936: LD_STRING 
14938: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14939: LD_INT 1
14941: PPUSH
14942: LD_INT 11
14944: PPUSH
14945: LD_INT 10
14947: PPUSH
14948: CALL_OW 380
// un := CreateHuman ;
14952: LD_ADDR_VAR 0 1
14956: PUSH
14957: CALL_OW 44
14961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14962: LD_VAR 0 1
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14974: LD_INT 35
14976: PPUSH
14977: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14981: LD_VAR 0 1
14985: PPUSH
14986: LD_INT 22
14988: PUSH
14989: LD_OWVAR 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PPUSH
14998: CALL_OW 69
15002: PPUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 74
15012: PPUSH
15013: CALL_OW 115
// until IsDead ( un ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: CALL_OW 301
15026: IFFALSE 14974
// end ;
15028: PPOPN 1
15030: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15031: LD_EXP 16
15035: PUSH
15036: LD_EXP 56
15040: AND
15041: IFFALSE 15053
15043: GO 15045
15045: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15046: LD_STRING earthquake(getX(game), 0, 32)
15048: PPUSH
15049: CALL_OW 559
15053: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15054: LD_EXP 16
15058: PUSH
15059: LD_EXP 57
15063: AND
15064: IFFALSE 15155
15066: GO 15068
15068: DISABLE
15069: LD_INT 0
15071: PPUSH
// begin enable ;
15072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15073: LD_ADDR_VAR 0 1
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_OWVAR 2
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 2
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 33
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: ST_TO_ADDR
// if not tmp then
15120: LD_VAR 0 1
15124: NOT
15125: IFFALSE 15129
// exit ;
15127: GO 15155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15129: LD_VAR 0 1
15133: PUSH
15134: LD_INT 1
15136: PPUSH
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 12
15146: ARRAY
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 234
// end ;
15155: PPOPN 1
15157: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15158: LD_EXP 16
15162: PUSH
15163: LD_EXP 58
15167: AND
15168: IFFALSE 15309
15170: GO 15172
15172: DISABLE
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
15177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_OWVAR 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 3
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15309
// un := tmp [ rand ( 1 , tmp ) ] ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: CALL_OW 12
15245: ARRAY
15246: ST_TO_ADDR
// if Crawls ( un ) then
15247: LD_VAR 0 2
15251: PPUSH
15252: CALL_OW 318
15256: IFFALSE 15267
// ComWalk ( un ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 9
15274: PPUSH
15275: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15279: LD_INT 28
15281: PPUSH
15282: LD_OWVAR 2
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15294: LD_INT 29
15296: PPUSH
15297: LD_OWVAR 2
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 322
// end ;
15309: PPOPN 3
15311: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15312: LD_EXP 16
15316: PUSH
15317: LD_EXP 59
15321: AND
15322: IFFALSE 15433
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
15331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15332: LD_ADDR_VAR 0 3
15336: PUSH
15337: LD_INT 22
15339: PUSH
15340: LD_OWVAR 2
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 25
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
// if not tmp then
15368: LD_VAR 0 3
15372: NOT
15373: IFFALSE 15377
// exit ;
15375: GO 15433
// un := tmp [ rand ( 1 , tmp ) ] ;
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 1
15389: PPUSH
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 12
15399: ARRAY
15400: ST_TO_ADDR
// if Crawls ( un ) then
15401: LD_VAR 0 2
15405: PPUSH
15406: CALL_OW 318
15410: IFFALSE 15421
// ComWalk ( un ) ;
15412: LD_VAR 0 2
15416: PPUSH
15417: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15421: LD_VAR 0 2
15425: PPUSH
15426: LD_INT 8
15428: PPUSH
15429: CALL_OW 336
// end ;
15433: PPOPN 3
15435: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15436: LD_EXP 16
15440: PUSH
15441: LD_EXP 60
15445: AND
15446: IFFALSE 15590
15448: GO 15450
15450: DISABLE
15451: LD_INT 0
15453: PPUSH
15454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15455: LD_ADDR_VAR 0 2
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_OWVAR 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 2
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: LD_INT 34
15487: PUSH
15488: LD_INT 12
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 34
15497: PUSH
15498: LD_INT 51
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 34
15507: PUSH
15508: LD_INT 32
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: ST_TO_ADDR
// if not tmp then
15531: LD_VAR 0 2
15535: NOT
15536: IFFALSE 15540
// exit ;
15538: GO 15590
// for i in tmp do
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: FOR_IN
15551: IFFALSE 15588
// if GetCargo ( i , mat_artifact ) = 0 then
15553: LD_VAR 0 1
15557: PPUSH
15558: LD_INT 4
15560: PPUSH
15561: CALL_OW 289
15565: PUSH
15566: LD_INT 0
15568: EQUAL
15569: IFFALSE 15586
// SetCargo ( i , mat_siberit , 100 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 3
15578: PPUSH
15579: LD_INT 100
15581: PPUSH
15582: CALL_OW 290
15586: GO 15550
15588: POP
15589: POP
// end ;
15590: PPOPN 2
15592: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15593: LD_EXP 16
15597: PUSH
15598: LD_EXP 61
15602: AND
15603: IFFALSE 15786
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
15611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 22
15619: PUSH
15620: LD_OWVAR 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 69
15633: ST_TO_ADDR
// if not tmp then
15634: LD_VAR 0 2
15638: NOT
15639: IFFALSE 15643
// exit ;
15641: GO 15786
// for i := 1 to 2 do
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: DOUBLE
15649: LD_INT 1
15651: DEC
15652: ST_TO_ADDR
15653: LD_INT 2
15655: PUSH
15656: FOR_TO
15657: IFFALSE 15784
// begin uc_side := your_side ;
15659: LD_ADDR_OWVAR 20
15663: PUSH
15664: LD_OWVAR 2
15668: ST_TO_ADDR
// uc_nation := nation_american ;
15669: LD_ADDR_OWVAR 21
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// vc_chassis := us_morphling ;
15677: LD_ADDR_OWVAR 37
15681: PUSH
15682: LD_INT 5
15684: ST_TO_ADDR
// vc_engine := engine_siberite ;
15685: LD_ADDR_OWVAR 39
15689: PUSH
15690: LD_INT 3
15692: ST_TO_ADDR
// vc_control := control_computer ;
15693: LD_ADDR_OWVAR 38
15697: PUSH
15698: LD_INT 3
15700: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15701: LD_ADDR_OWVAR 40
15705: PUSH
15706: LD_INT 10
15708: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15709: LD_VAR 0 2
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PPUSH
15718: CALL_OW 310
15722: NOT
15723: IFFALSE 15770
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15725: CALL_OW 45
15729: PPUSH
15730: LD_VAR 0 2
15734: PUSH
15735: LD_INT 1
15737: ARRAY
15738: PPUSH
15739: CALL_OW 250
15743: PPUSH
15744: LD_VAR 0 2
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: CALL_OW 251
15757: PPUSH
15758: LD_INT 12
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 50
15768: GO 15782
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15770: CALL_OW 45
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: CALL_OW 51
// end ;
15782: GO 15656
15784: POP
15785: POP
// end ;
15786: PPOPN 2
15788: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15789: LD_EXP 16
15793: PUSH
15794: LD_EXP 62
15798: AND
15799: IFFALSE 16021
15801: GO 15803
15803: DISABLE
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
15811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15812: LD_ADDR_VAR 0 6
15816: PUSH
15817: LD_INT 22
15819: PUSH
15820: LD_OWVAR 2
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 21
15831: PUSH
15832: LD_INT 1
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: LD_INT 23
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: ST_TO_ADDR
// if not tmp then
15866: LD_VAR 0 6
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 16021
// s1 := rand ( 1 , 4 ) ;
15875: LD_ADDR_VAR 0 2
15879: PUSH
15880: LD_INT 1
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 12
15890: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15891: LD_ADDR_VAR 0 4
15895: PUSH
15896: LD_VAR 0 6
15900: PUSH
15901: LD_INT 1
15903: ARRAY
15904: PPUSH
15905: LD_VAR 0 2
15909: PPUSH
15910: CALL_OW 259
15914: ST_TO_ADDR
// if s1 = 1 then
15915: LD_VAR 0 2
15919: PUSH
15920: LD_INT 1
15922: EQUAL
15923: IFFALSE 15943
// s2 := rand ( 2 , 4 ) else
15925: LD_ADDR_VAR 0 3
15929: PUSH
15930: LD_INT 2
15932: PPUSH
15933: LD_INT 4
15935: PPUSH
15936: CALL_OW 12
15940: ST_TO_ADDR
15941: GO 15951
// s2 := 1 ;
15943: LD_ADDR_VAR 0 3
15947: PUSH
15948: LD_INT 1
15950: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15951: LD_ADDR_VAR 0 5
15955: PUSH
15956: LD_VAR 0 6
15960: PUSH
15961: LD_INT 1
15963: ARRAY
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: CALL_OW 259
15974: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15975: LD_VAR 0 6
15979: PUSH
15980: LD_INT 1
15982: ARRAY
15983: PPUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: LD_VAR 0 5
15993: PPUSH
15994: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15998: LD_VAR 0 6
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 237
// end ;
16021: PPOPN 6
16023: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16024: LD_EXP 16
16028: PUSH
16029: LD_EXP 63
16033: AND
16034: IFFALSE 16113
16036: GO 16038
16038: DISABLE
16039: LD_INT 0
16041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16042: LD_ADDR_VAR 0 1
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_OWVAR 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 30
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 69
16077: ST_TO_ADDR
// if not tmp then
16078: LD_VAR 0 1
16082: NOT
16083: IFFALSE 16087
// exit ;
16085: GO 16113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 1
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 12
16104: ARRAY
16105: PPUSH
16106: LD_INT 1
16108: PPUSH
16109: CALL_OW 234
// end ;
16113: PPOPN 1
16115: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16116: LD_EXP 16
16120: PUSH
16121: LD_EXP 64
16125: AND
16126: IFFALSE 16238
16128: GO 16130
16130: DISABLE
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_OWVAR 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 30
16157: PUSH
16158: LD_INT 27
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 30
16167: PUSH
16168: LD_INT 26
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 30
16177: PUSH
16178: LD_INT 28
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PPUSH
16195: CALL_OW 69
16199: ST_TO_ADDR
// if not tmp then
16200: LD_VAR 0 2
16204: NOT
16205: IFFALSE 16209
// exit ;
16207: GO 16238
// for i in tmp do
16209: LD_ADDR_VAR 0 1
16213: PUSH
16214: LD_VAR 0 2
16218: PUSH
16219: FOR_IN
16220: IFFALSE 16236
// SetLives ( i , 1 ) ;
16222: LD_VAR 0 1
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 234
16234: GO 16219
16236: POP
16237: POP
// end ;
16238: PPOPN 2
16240: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16241: LD_EXP 16
16245: PUSH
16246: LD_EXP 65
16250: AND
16251: IFFALSE 16538
16253: GO 16255
16255: DISABLE
16256: LD_INT 0
16258: PPUSH
16259: PPUSH
16260: PPUSH
// begin i := rand ( 1 , 7 ) ;
16261: LD_ADDR_VAR 0 1
16265: PUSH
16266: LD_INT 1
16268: PPUSH
16269: LD_INT 7
16271: PPUSH
16272: CALL_OW 12
16276: ST_TO_ADDR
// case i of 1 :
16277: LD_VAR 0 1
16281: PUSH
16282: LD_INT 1
16284: DOUBLE
16285: EQUAL
16286: IFTRUE 16290
16288: GO 16300
16290: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16291: LD_STRING earthquake(getX(game), 0, 32)
16293: PPUSH
16294: CALL_OW 559
16298: GO 16538
16300: LD_INT 2
16302: DOUBLE
16303: EQUAL
16304: IFTRUE 16308
16306: GO 16322
16308: POP
// begin ToLua ( displayStucuk(); ) ;
16309: LD_STRING displayStucuk();
16311: PPUSH
16312: CALL_OW 559
// ResetFog ;
16316: CALL_OW 335
// end ; 3 :
16320: GO 16538
16322: LD_INT 3
16324: DOUBLE
16325: EQUAL
16326: IFTRUE 16330
16328: GO 16434
16330: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_INT 22
16338: PUSH
16339: LD_OWVAR 2
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 25
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 69
16366: ST_TO_ADDR
// if not tmp then
16367: LD_VAR 0 2
16371: NOT
16372: IFFALSE 16376
// exit ;
16374: GO 16538
// un := tmp [ rand ( 1 , tmp ) ] ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_VAR 0 2
16385: PUSH
16386: LD_INT 1
16388: PPUSH
16389: LD_VAR 0 2
16393: PPUSH
16394: CALL_OW 12
16398: ARRAY
16399: ST_TO_ADDR
// if Crawls ( un ) then
16400: LD_VAR 0 3
16404: PPUSH
16405: CALL_OW 318
16409: IFFALSE 16420
// ComWalk ( un ) ;
16411: LD_VAR 0 3
16415: PPUSH
16416: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16420: LD_VAR 0 3
16424: PPUSH
16425: LD_INT 8
16427: PPUSH
16428: CALL_OW 336
// end ; 4 :
16432: GO 16538
16434: LD_INT 4
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16516
16442: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 30
16462: PUSH
16463: LD_INT 29
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: ST_TO_ADDR
// if not tmp then
16479: LD_VAR 0 2
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16538
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16488: LD_VAR 0 2
16492: PUSH
16493: LD_INT 1
16495: ARRAY
16496: PPUSH
16497: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16501: LD_VAR 0 2
16505: PUSH
16506: LD_INT 1
16508: ARRAY
16509: PPUSH
16510: CALL_OW 65
// end ; 5 .. 7 :
16514: GO 16538
16516: LD_INT 5
16518: DOUBLE
16519: GREATEREQUAL
16520: IFFALSE 16528
16522: LD_INT 7
16524: DOUBLE
16525: LESSEQUAL
16526: IFTRUE 16530
16528: GO 16537
16530: POP
// StreamSibBomb ; end ;
16531: CALL 12775 0 0
16535: GO 16538
16537: POP
// end ;
16538: PPOPN 3
16540: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16541: LD_EXP 16
16545: PUSH
16546: LD_EXP 66
16550: AND
16551: IFFALSE 16707
16553: GO 16555
16555: DISABLE
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
16560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16561: LD_ADDR_VAR 0 2
16565: PUSH
16566: LD_INT 81
16568: PUSH
16569: LD_OWVAR 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 69
16614: ST_TO_ADDR
// if not tmp then
16615: LD_VAR 0 2
16619: NOT
16620: IFFALSE 16624
// exit ;
16622: GO 16707
// p := 0 ;
16624: LD_ADDR_VAR 0 3
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16632: LD_INT 35
16634: PPUSH
16635: CALL_OW 67
// p := p + 1 ;
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: LD_VAR 0 3
16648: PUSH
16649: LD_INT 1
16651: PLUS
16652: ST_TO_ADDR
// for i in tmp do
16653: LD_ADDR_VAR 0 1
16657: PUSH
16658: LD_VAR 0 2
16662: PUSH
16663: FOR_IN
16664: IFFALSE 16695
// if GetLives ( i ) < 1000 then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 256
16675: PUSH
16676: LD_INT 1000
16678: LESS
16679: IFFALSE 16693
// SetLives ( i , 1000 ) ;
16681: LD_VAR 0 1
16685: PPUSH
16686: LD_INT 1000
16688: PPUSH
16689: CALL_OW 234
16693: GO 16663
16695: POP
16696: POP
// until p > 20 ;
16697: LD_VAR 0 3
16701: PUSH
16702: LD_INT 20
16704: GREATER
16705: IFFALSE 16632
// end ;
16707: PPOPN 3
16709: END
// every 0 0$1 trigger StreamModeActive and sTime do
16710: LD_EXP 16
16714: PUSH
16715: LD_EXP 67
16719: AND
16720: IFFALSE 16755
16722: GO 16724
16724: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16725: LD_INT 28
16727: PPUSH
16728: LD_OWVAR 2
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16740: LD_INT 30
16742: PPUSH
16743: LD_OWVAR 2
16747: PPUSH
16748: LD_INT 2
16750: PPUSH
16751: CALL_OW 322
// end ;
16755: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16756: LD_EXP 16
16760: PUSH
16761: LD_EXP 68
16765: AND
16766: IFFALSE 16887
16768: GO 16770
16770: DISABLE
16771: LD_INT 0
16773: PPUSH
16774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16775: LD_ADDR_VAR 0 2
16779: PUSH
16780: LD_INT 22
16782: PUSH
16783: LD_OWVAR 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 21
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 3
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: LD_INT 0
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: PPUSH
16824: CALL_OW 69
16828: ST_TO_ADDR
// if not tmp then
16829: LD_VAR 0 2
16833: NOT
16834: IFFALSE 16838
// exit ;
16836: GO 16887
// for i in tmp do
16838: LD_ADDR_VAR 0 1
16842: PUSH
16843: LD_VAR 0 2
16847: PUSH
16848: FOR_IN
16849: IFFALSE 16885
// begin if Crawls ( i ) then
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 318
16860: IFFALSE 16871
// ComWalk ( i ) ;
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 138
// SetClass ( i , 2 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 2
16878: PPUSH
16879: CALL_OW 336
// end ;
16883: GO 16848
16885: POP
16886: POP
// end ;
16887: PPOPN 2
16889: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16890: LD_EXP 16
16894: PUSH
16895: LD_EXP 69
16899: AND
16900: IFFALSE 17188
16902: GO 16904
16904: DISABLE
16905: LD_INT 0
16907: PPUSH
16908: PPUSH
16909: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16910: LD_OWVAR 2
16914: PPUSH
16915: LD_INT 9
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16928: LD_INT 9
16930: PPUSH
16931: LD_OWVAR 2
16935: PPUSH
16936: CALL_OW 343
// uc_side := 9 ;
16940: LD_ADDR_OWVAR 20
16944: PUSH
16945: LD_INT 9
16947: ST_TO_ADDR
// uc_nation := 2 ;
16948: LD_ADDR_OWVAR 21
16952: PUSH
16953: LD_INT 2
16955: ST_TO_ADDR
// hc_name := Dark Warrior ;
16956: LD_ADDR_OWVAR 26
16960: PUSH
16961: LD_STRING Dark Warrior
16963: ST_TO_ADDR
// hc_gallery :=  ;
16964: LD_ADDR_OWVAR 33
16968: PUSH
16969: LD_STRING 
16971: ST_TO_ADDR
// hc_noskilllimit := true ;
16972: LD_ADDR_OWVAR 76
16976: PUSH
16977: LD_INT 1
16979: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16980: LD_ADDR_OWVAR 31
16984: PUSH
16985: LD_INT 30
16987: PUSH
16988: LD_INT 30
16990: PUSH
16991: LD_INT 30
16993: PUSH
16994: LD_INT 30
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// un := CreateHuman ;
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: CALL_OW 44
17012: ST_TO_ADDR
// hc_noskilllimit := false ;
17013: LD_ADDR_OWVAR 76
17017: PUSH
17018: LD_INT 0
17020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 1
17028: PPUSH
17029: CALL_OW 51
// ToLua ( playRanger() ) ;
17033: LD_STRING playRanger()
17035: PPUSH
17036: CALL_OW 559
// p := 0 ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17048: LD_INT 35
17050: PPUSH
17051: CALL_OW 67
// p := p + 1 ;
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_VAR 0 2
17064: PUSH
17065: LD_INT 1
17067: PLUS
17068: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17069: LD_VAR 0 3
17073: PPUSH
17074: CALL_OW 256
17078: PUSH
17079: LD_INT 1000
17081: LESS
17082: IFFALSE 17096
// SetLives ( un , 1000 ) ;
17084: LD_VAR 0 3
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17096: LD_VAR 0 3
17100: PPUSH
17101: LD_INT 81
17103: PUSH
17104: LD_OWVAR 2
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 91
17115: PUSH
17116: LD_VAR 0 3
17120: PUSH
17121: LD_INT 30
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 69
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 74
17147: PPUSH
17148: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17152: LD_VAR 0 2
17156: PUSH
17157: LD_INT 80
17159: GREATER
17160: PUSH
17161: LD_VAR 0 3
17165: PPUSH
17166: CALL_OW 301
17170: OR
17171: IFFALSE 17048
// if un then
17173: LD_VAR 0 3
17177: IFFALSE 17188
// RemoveUnit ( un ) ;
17179: LD_VAR 0 3
17183: PPUSH
17184: CALL_OW 64
// end ;
17188: PPOPN 3
17190: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17191: LD_EXP 70
17195: IFFALSE 17311
17197: GO 17199
17199: DISABLE
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 81
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 21
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17241: LD_STRING playComputer()
17243: PPUSH
17244: CALL_OW 559
// if not tmp then
17248: LD_VAR 0 2
17252: NOT
17253: IFFALSE 17257
// exit ;
17255: GO 17311
// for i in tmp do
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_VAR 0 2
17266: PUSH
17267: FOR_IN
17268: IFFALSE 17309
// for j := 1 to 4 do
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: DOUBLE
17276: LD_INT 1
17278: DEC
17279: ST_TO_ADDR
17280: LD_INT 4
17282: PUSH
17283: FOR_TO
17284: IFFALSE 17305
// SetSkill ( i , j , 10 ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: LD_INT 10
17298: PPUSH
17299: CALL_OW 237
17303: GO 17283
17305: POP
17306: POP
17307: GO 17267
17309: POP
17310: POP
// end ;
17311: PPOPN 3
17313: END
// every 0 0$1 trigger s30 do var i , tmp ;
17314: LD_EXP 71
17318: IFFALSE 17387
17320: GO 17322
17322: DISABLE
17323: LD_INT 0
17325: PPUSH
17326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 22
17334: PUSH
17335: LD_OWVAR 2
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PPUSH
17344: CALL_OW 69
17348: ST_TO_ADDR
// if not tmp then
17349: LD_VAR 0 2
17353: NOT
17354: IFFALSE 17358
// exit ;
17356: GO 17387
// for i in tmp do
17358: LD_ADDR_VAR 0 1
17362: PUSH
17363: LD_VAR 0 2
17367: PUSH
17368: FOR_IN
17369: IFFALSE 17385
// SetLives ( i , 300 ) ;
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 300
17378: PPUSH
17379: CALL_OW 234
17383: GO 17368
17385: POP
17386: POP
// end ;
17387: PPOPN 2
17389: END
// every 0 0$1 trigger s60 do var i , tmp ;
17390: LD_EXP 72
17394: IFFALSE 17463
17396: GO 17398
17398: DISABLE
17399: LD_INT 0
17401: PPUSH
17402: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17403: LD_ADDR_VAR 0 2
17407: PUSH
17408: LD_INT 22
17410: PUSH
17411: LD_OWVAR 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PPUSH
17420: CALL_OW 69
17424: ST_TO_ADDR
// if not tmp then
17425: LD_VAR 0 2
17429: NOT
17430: IFFALSE 17434
// exit ;
17432: GO 17463
// for i in tmp do
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_VAR 0 2
17443: PUSH
17444: FOR_IN
17445: IFFALSE 17461
// SetLives ( i , 600 ) ;
17447: LD_VAR 0 1
17451: PPUSH
17452: LD_INT 600
17454: PPUSH
17455: CALL_OW 234
17459: GO 17444
17461: POP
17462: POP
// end ;
17463: PPOPN 2
17465: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17466: LD_INT 0
17468: PPUSH
// case cmd of 301 :
17469: LD_VAR 0 1
17473: PUSH
17474: LD_INT 301
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17514
17482: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17483: LD_VAR 0 6
17487: PPUSH
17488: LD_VAR 0 7
17492: PPUSH
17493: LD_VAR 0 8
17497: PPUSH
17498: LD_VAR 0 4
17502: PPUSH
17503: LD_VAR 0 5
17507: PPUSH
17508: CALL 18715 0 5
17512: GO 17635
17514: LD_INT 302
17516: DOUBLE
17517: EQUAL
17518: IFTRUE 17522
17520: GO 17559
17522: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17523: LD_VAR 0 6
17527: PPUSH
17528: LD_VAR 0 7
17532: PPUSH
17533: LD_VAR 0 8
17537: PPUSH
17538: LD_VAR 0 9
17542: PPUSH
17543: LD_VAR 0 4
17547: PPUSH
17548: LD_VAR 0 5
17552: PPUSH
17553: CALL 18806 0 6
17557: GO 17635
17559: LD_INT 303
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17604
17567: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17568: LD_VAR 0 6
17572: PPUSH
17573: LD_VAR 0 7
17577: PPUSH
17578: LD_VAR 0 8
17582: PPUSH
17583: LD_VAR 0 9
17587: PPUSH
17588: LD_VAR 0 4
17592: PPUSH
17593: LD_VAR 0 5
17597: PPUSH
17598: CALL 17640 0 6
17602: GO 17635
17604: LD_INT 304
17606: DOUBLE
17607: EQUAL
17608: IFTRUE 17612
17610: GO 17634
17612: POP
// hHackTeleport ( unit , x , y ) ; end ;
17613: LD_VAR 0 2
17617: PPUSH
17618: LD_VAR 0 4
17622: PPUSH
17623: LD_VAR 0 5
17627: PPUSH
17628: CALL 19399 0 3
17632: GO 17635
17634: POP
// end ;
17635: LD_VAR 0 12
17639: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17640: LD_INT 0
17642: PPUSH
17643: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17644: LD_VAR 0 1
17648: PUSH
17649: LD_INT 1
17651: LESS
17652: PUSH
17653: LD_VAR 0 1
17657: PUSH
17658: LD_INT 3
17660: GREATER
17661: OR
17662: PUSH
17663: LD_VAR 0 5
17667: PPUSH
17668: LD_VAR 0 6
17672: PPUSH
17673: CALL_OW 428
17677: OR
17678: IFFALSE 17682
// exit ;
17680: GO 18402
// uc_side := your_side ;
17682: LD_ADDR_OWVAR 20
17686: PUSH
17687: LD_OWVAR 2
17691: ST_TO_ADDR
// uc_nation := nation ;
17692: LD_ADDR_OWVAR 21
17696: PUSH
17697: LD_VAR 0 1
17701: ST_TO_ADDR
// bc_level = 1 ;
17702: LD_ADDR_OWVAR 43
17706: PUSH
17707: LD_INT 1
17709: ST_TO_ADDR
// case btype of 1 :
17710: LD_VAR 0 2
17714: PUSH
17715: LD_INT 1
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17734
17723: POP
// bc_type := b_depot ; 2 :
17724: LD_ADDR_OWVAR 42
17728: PUSH
17729: LD_INT 0
17731: ST_TO_ADDR
17732: GO 18346
17734: LD_INT 2
17736: DOUBLE
17737: EQUAL
17738: IFTRUE 17742
17740: GO 17753
17742: POP
// bc_type := b_warehouse ; 3 :
17743: LD_ADDR_OWVAR 42
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
17751: GO 18346
17753: LD_INT 3
17755: DOUBLE
17756: EQUAL
17757: IFTRUE 17761
17759: GO 17772
17761: POP
// bc_type := b_lab ; 4 .. 9 :
17762: LD_ADDR_OWVAR 42
17766: PUSH
17767: LD_INT 6
17769: ST_TO_ADDR
17770: GO 18346
17772: LD_INT 4
17774: DOUBLE
17775: GREATEREQUAL
17776: IFFALSE 17784
17778: LD_INT 9
17780: DOUBLE
17781: LESSEQUAL
17782: IFTRUE 17786
17784: GO 17838
17786: POP
// begin bc_type := b_lab_half ;
17787: LD_ADDR_OWVAR 42
17791: PUSH
17792: LD_INT 7
17794: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17795: LD_ADDR_OWVAR 44
17799: PUSH
17800: LD_INT 10
17802: PUSH
17803: LD_INT 11
17805: PUSH
17806: LD_INT 12
17808: PUSH
17809: LD_INT 15
17811: PUSH
17812: LD_INT 14
17814: PUSH
17815: LD_INT 13
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: LD_VAR 0 2
17830: PUSH
17831: LD_INT 3
17833: MINUS
17834: ARRAY
17835: ST_TO_ADDR
// end ; 10 .. 13 :
17836: GO 18346
17838: LD_INT 10
17840: DOUBLE
17841: GREATEREQUAL
17842: IFFALSE 17850
17844: LD_INT 13
17846: DOUBLE
17847: LESSEQUAL
17848: IFTRUE 17852
17850: GO 17929
17852: POP
// begin bc_type := b_lab_full ;
17853: LD_ADDR_OWVAR 42
17857: PUSH
17858: LD_INT 8
17860: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17861: LD_ADDR_OWVAR 44
17865: PUSH
17866: LD_INT 10
17868: PUSH
17869: LD_INT 12
17871: PUSH
17872: LD_INT 14
17874: PUSH
17875: LD_INT 13
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: PUSH
17884: LD_VAR 0 2
17888: PUSH
17889: LD_INT 9
17891: MINUS
17892: ARRAY
17893: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17894: LD_ADDR_OWVAR 45
17898: PUSH
17899: LD_INT 11
17901: PUSH
17902: LD_INT 15
17904: PUSH
17905: LD_INT 12
17907: PUSH
17908: LD_INT 15
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: PUSH
17917: LD_VAR 0 2
17921: PUSH
17922: LD_INT 9
17924: MINUS
17925: ARRAY
17926: ST_TO_ADDR
// end ; 14 :
17927: GO 18346
17929: LD_INT 14
17931: DOUBLE
17932: EQUAL
17933: IFTRUE 17937
17935: GO 17948
17937: POP
// bc_type := b_workshop ; 15 :
17938: LD_ADDR_OWVAR 42
17942: PUSH
17943: LD_INT 2
17945: ST_TO_ADDR
17946: GO 18346
17948: LD_INT 15
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 17967
17956: POP
// bc_type := b_factory ; 16 :
17957: LD_ADDR_OWVAR 42
17961: PUSH
17962: LD_INT 3
17964: ST_TO_ADDR
17965: GO 18346
17967: LD_INT 16
17969: DOUBLE
17970: EQUAL
17971: IFTRUE 17975
17973: GO 17986
17975: POP
// bc_type := b_ext_gun ; 17 :
17976: LD_ADDR_OWVAR 42
17980: PUSH
17981: LD_INT 17
17983: ST_TO_ADDR
17984: GO 18346
17986: LD_INT 17
17988: DOUBLE
17989: EQUAL
17990: IFTRUE 17994
17992: GO 18022
17994: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17995: LD_ADDR_OWVAR 42
17999: PUSH
18000: LD_INT 19
18002: PUSH
18003: LD_INT 23
18005: PUSH
18006: LD_INT 19
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: PUSH
18014: LD_VAR 0 1
18018: ARRAY
18019: ST_TO_ADDR
18020: GO 18346
18022: LD_INT 18
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18041
18030: POP
// bc_type := b_ext_radar ; 19 :
18031: LD_ADDR_OWVAR 42
18035: PUSH
18036: LD_INT 20
18038: ST_TO_ADDR
18039: GO 18346
18041: LD_INT 19
18043: DOUBLE
18044: EQUAL
18045: IFTRUE 18049
18047: GO 18060
18049: POP
// bc_type := b_ext_radio ; 20 :
18050: LD_ADDR_OWVAR 42
18054: PUSH
18055: LD_INT 22
18057: ST_TO_ADDR
18058: GO 18346
18060: LD_INT 20
18062: DOUBLE
18063: EQUAL
18064: IFTRUE 18068
18066: GO 18079
18068: POP
// bc_type := b_ext_siberium ; 21 :
18069: LD_ADDR_OWVAR 42
18073: PUSH
18074: LD_INT 21
18076: ST_TO_ADDR
18077: GO 18346
18079: LD_INT 21
18081: DOUBLE
18082: EQUAL
18083: IFTRUE 18087
18085: GO 18098
18087: POP
// bc_type := b_ext_computer ; 22 :
18088: LD_ADDR_OWVAR 42
18092: PUSH
18093: LD_INT 24
18095: ST_TO_ADDR
18096: GO 18346
18098: LD_INT 22
18100: DOUBLE
18101: EQUAL
18102: IFTRUE 18106
18104: GO 18117
18106: POP
// bc_type := b_ext_track ; 23 :
18107: LD_ADDR_OWVAR 42
18111: PUSH
18112: LD_INT 16
18114: ST_TO_ADDR
18115: GO 18346
18117: LD_INT 23
18119: DOUBLE
18120: EQUAL
18121: IFTRUE 18125
18123: GO 18136
18125: POP
// bc_type := b_ext_laser ; 24 :
18126: LD_ADDR_OWVAR 42
18130: PUSH
18131: LD_INT 25
18133: ST_TO_ADDR
18134: GO 18346
18136: LD_INT 24
18138: DOUBLE
18139: EQUAL
18140: IFTRUE 18144
18142: GO 18155
18144: POP
// bc_type := b_control_tower ; 25 :
18145: LD_ADDR_OWVAR 42
18149: PUSH
18150: LD_INT 36
18152: ST_TO_ADDR
18153: GO 18346
18155: LD_INT 25
18157: DOUBLE
18158: EQUAL
18159: IFTRUE 18163
18161: GO 18174
18163: POP
// bc_type := b_breastwork ; 26 :
18164: LD_ADDR_OWVAR 42
18168: PUSH
18169: LD_INT 31
18171: ST_TO_ADDR
18172: GO 18346
18174: LD_INT 26
18176: DOUBLE
18177: EQUAL
18178: IFTRUE 18182
18180: GO 18193
18182: POP
// bc_type := b_bunker ; 27 :
18183: LD_ADDR_OWVAR 42
18187: PUSH
18188: LD_INT 32
18190: ST_TO_ADDR
18191: GO 18346
18193: LD_INT 27
18195: DOUBLE
18196: EQUAL
18197: IFTRUE 18201
18199: GO 18212
18201: POP
// bc_type := b_turret ; 28 :
18202: LD_ADDR_OWVAR 42
18206: PUSH
18207: LD_INT 33
18209: ST_TO_ADDR
18210: GO 18346
18212: LD_INT 28
18214: DOUBLE
18215: EQUAL
18216: IFTRUE 18220
18218: GO 18231
18220: POP
// bc_type := b_armoury ; 29 :
18221: LD_ADDR_OWVAR 42
18225: PUSH
18226: LD_INT 4
18228: ST_TO_ADDR
18229: GO 18346
18231: LD_INT 29
18233: DOUBLE
18234: EQUAL
18235: IFTRUE 18239
18237: GO 18250
18239: POP
// bc_type := b_barracks ; 30 :
18240: LD_ADDR_OWVAR 42
18244: PUSH
18245: LD_INT 5
18247: ST_TO_ADDR
18248: GO 18346
18250: LD_INT 30
18252: DOUBLE
18253: EQUAL
18254: IFTRUE 18258
18256: GO 18269
18258: POP
// bc_type := b_solar_power ; 31 :
18259: LD_ADDR_OWVAR 42
18263: PUSH
18264: LD_INT 27
18266: ST_TO_ADDR
18267: GO 18346
18269: LD_INT 31
18271: DOUBLE
18272: EQUAL
18273: IFTRUE 18277
18275: GO 18288
18277: POP
// bc_type := b_oil_power ; 32 :
18278: LD_ADDR_OWVAR 42
18282: PUSH
18283: LD_INT 26
18285: ST_TO_ADDR
18286: GO 18346
18288: LD_INT 32
18290: DOUBLE
18291: EQUAL
18292: IFTRUE 18296
18294: GO 18307
18296: POP
// bc_type := b_siberite_power ; 33 :
18297: LD_ADDR_OWVAR 42
18301: PUSH
18302: LD_INT 28
18304: ST_TO_ADDR
18305: GO 18346
18307: LD_INT 33
18309: DOUBLE
18310: EQUAL
18311: IFTRUE 18315
18313: GO 18326
18315: POP
// bc_type := b_oil_mine ; 34 :
18316: LD_ADDR_OWVAR 42
18320: PUSH
18321: LD_INT 29
18323: ST_TO_ADDR
18324: GO 18346
18326: LD_INT 34
18328: DOUBLE
18329: EQUAL
18330: IFTRUE 18334
18332: GO 18345
18334: POP
// bc_type := b_siberite_mine ; end ;
18335: LD_ADDR_OWVAR 42
18339: PUSH
18340: LD_INT 30
18342: ST_TO_ADDR
18343: GO 18346
18345: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18346: LD_ADDR_VAR 0 8
18350: PUSH
18351: LD_VAR 0 5
18355: PPUSH
18356: LD_VAR 0 6
18360: PPUSH
18361: LD_VAR 0 3
18365: PPUSH
18366: CALL_OW 47
18370: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18371: LD_OWVAR 42
18375: PUSH
18376: LD_INT 32
18378: PUSH
18379: LD_INT 33
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: IN
18386: IFFALSE 18402
// PlaceWeaponTurret ( b , weapon ) ;
18388: LD_VAR 0 8
18392: PPUSH
18393: LD_VAR 0 4
18397: PPUSH
18398: CALL_OW 431
// end ;
18402: LD_VAR 0 7
18406: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18407: LD_INT 0
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18413: LD_ADDR_VAR 0 4
18417: PUSH
18418: LD_INT 22
18420: PUSH
18421: LD_OWVAR 2
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 2
18432: PUSH
18433: LD_INT 30
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 30
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PPUSH
18462: CALL_OW 69
18466: ST_TO_ADDR
// if not tmp then
18467: LD_VAR 0 4
18471: NOT
18472: IFFALSE 18476
// exit ;
18474: GO 18535
// for i in tmp do
18476: LD_ADDR_VAR 0 2
18480: PUSH
18481: LD_VAR 0 4
18485: PUSH
18486: FOR_IN
18487: IFFALSE 18533
// for j = 1 to 3 do
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: DOUBLE
18495: LD_INT 1
18497: DEC
18498: ST_TO_ADDR
18499: LD_INT 3
18501: PUSH
18502: FOR_TO
18503: IFFALSE 18529
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18505: LD_VAR 0 2
18509: PPUSH
18510: CALL_OW 274
18514: PPUSH
18515: LD_VAR 0 3
18519: PPUSH
18520: LD_INT 99999
18522: PPUSH
18523: CALL_OW 277
18527: GO 18502
18529: POP
18530: POP
18531: GO 18486
18533: POP
18534: POP
// end ;
18535: LD_VAR 0 1
18539: RET
// export function hHackSetLevel10 ; var i , j ; begin
18540: LD_INT 0
18542: PPUSH
18543: PPUSH
18544: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 69
18564: PUSH
18565: FOR_IN
18566: IFFALSE 18618
// if IsSelected ( i ) then
18568: LD_VAR 0 2
18572: PPUSH
18573: CALL_OW 306
18577: IFFALSE 18616
// begin for j := 1 to 4 do
18579: LD_ADDR_VAR 0 3
18583: PUSH
18584: DOUBLE
18585: LD_INT 1
18587: DEC
18588: ST_TO_ADDR
18589: LD_INT 4
18591: PUSH
18592: FOR_TO
18593: IFFALSE 18614
// SetSkill ( i , j , 10 ) ;
18595: LD_VAR 0 2
18599: PPUSH
18600: LD_VAR 0 3
18604: PPUSH
18605: LD_INT 10
18607: PPUSH
18608: CALL_OW 237
18612: GO 18592
18614: POP
18615: POP
// end ;
18616: GO 18565
18618: POP
18619: POP
// end ;
18620: LD_VAR 0 1
18624: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18625: LD_INT 0
18627: PPUSH
18628: PPUSH
18629: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18630: LD_ADDR_VAR 0 2
18634: PUSH
18635: LD_INT 22
18637: PUSH
18638: LD_OWVAR 2
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 21
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PPUSH
18661: CALL_OW 69
18665: PUSH
18666: FOR_IN
18667: IFFALSE 18708
// begin for j := 1 to 4 do
18669: LD_ADDR_VAR 0 3
18673: PUSH
18674: DOUBLE
18675: LD_INT 1
18677: DEC
18678: ST_TO_ADDR
18679: LD_INT 4
18681: PUSH
18682: FOR_TO
18683: IFFALSE 18704
// SetSkill ( i , j , 10 ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_VAR 0 3
18694: PPUSH
18695: LD_INT 10
18697: PPUSH
18698: CALL_OW 237
18702: GO 18682
18704: POP
18705: POP
// end ;
18706: GO 18666
18708: POP
18709: POP
// end ;
18710: LD_VAR 0 1
18714: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18715: LD_INT 0
18717: PPUSH
// uc_side := your_side ;
18718: LD_ADDR_OWVAR 20
18722: PUSH
18723: LD_OWVAR 2
18727: ST_TO_ADDR
// uc_nation := nation ;
18728: LD_ADDR_OWVAR 21
18732: PUSH
18733: LD_VAR 0 1
18737: ST_TO_ADDR
// InitHc ;
18738: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18742: LD_INT 0
18744: PPUSH
18745: LD_VAR 0 2
18749: PPUSH
18750: LD_VAR 0 3
18754: PPUSH
18755: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18759: LD_VAR 0 4
18763: PPUSH
18764: LD_VAR 0 5
18768: PPUSH
18769: CALL_OW 428
18773: PUSH
18774: LD_INT 0
18776: EQUAL
18777: IFFALSE 18801
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18779: CALL_OW 44
18783: PPUSH
18784: LD_VAR 0 4
18788: PPUSH
18789: LD_VAR 0 5
18793: PPUSH
18794: LD_INT 1
18796: PPUSH
18797: CALL_OW 48
// end ;
18801: LD_VAR 0 6
18805: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
// uc_side := your_side ;
18810: LD_ADDR_OWVAR 20
18814: PUSH
18815: LD_OWVAR 2
18819: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18820: LD_VAR 0 1
18824: PUSH
18825: LD_INT 1
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: LD_INT 3
18833: PUSH
18834: LD_INT 4
18836: PUSH
18837: LD_INT 5
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: IN
18847: IFFALSE 18859
// uc_nation := nation_american else
18849: LD_ADDR_OWVAR 21
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
18857: GO 18902
// if chassis in [ 11 , 12 , 13 , 14 ] then
18859: LD_VAR 0 1
18863: PUSH
18864: LD_INT 11
18866: PUSH
18867: LD_INT 12
18869: PUSH
18870: LD_INT 13
18872: PUSH
18873: LD_INT 14
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: IN
18882: IFFALSE 18894
// uc_nation := nation_arabian else
18884: LD_ADDR_OWVAR 21
18888: PUSH
18889: LD_INT 2
18891: ST_TO_ADDR
18892: GO 18902
// uc_nation := nation_russian ;
18894: LD_ADDR_OWVAR 21
18898: PUSH
18899: LD_INT 3
18901: ST_TO_ADDR
// vc_chassis := chassis ;
18902: LD_ADDR_OWVAR 37
18906: PUSH
18907: LD_VAR 0 1
18911: ST_TO_ADDR
// vc_engine := engine ;
18912: LD_ADDR_OWVAR 39
18916: PUSH
18917: LD_VAR 0 2
18921: ST_TO_ADDR
// vc_control := control ;
18922: LD_ADDR_OWVAR 38
18926: PUSH
18927: LD_VAR 0 3
18931: ST_TO_ADDR
// vc_weapon := weapon ;
18932: LD_ADDR_OWVAR 40
18936: PUSH
18937: LD_VAR 0 4
18941: ST_TO_ADDR
// un := CreateVehicle ;
18942: LD_ADDR_VAR 0 8
18946: PUSH
18947: CALL_OW 45
18951: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18952: LD_VAR 0 8
18956: PPUSH
18957: LD_INT 0
18959: PPUSH
18960: LD_INT 5
18962: PPUSH
18963: CALL_OW 12
18967: PPUSH
18968: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18972: LD_VAR 0 8
18976: PPUSH
18977: LD_VAR 0 5
18981: PPUSH
18982: LD_VAR 0 6
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 48
// end ;
18994: LD_VAR 0 7
18998: RET
// export hInvincible ; every 1 do
18999: GO 19001
19001: DISABLE
// hInvincible := [ ] ;
19002: LD_ADDR_EXP 73
19006: PUSH
19007: EMPTY
19008: ST_TO_ADDR
19009: END
// every 10 do var i ;
19010: GO 19012
19012: DISABLE
19013: LD_INT 0
19015: PPUSH
// begin enable ;
19016: ENABLE
// if not hInvincible then
19017: LD_EXP 73
19021: NOT
19022: IFFALSE 19026
// exit ;
19024: GO 19070
// for i in hInvincible do
19026: LD_ADDR_VAR 0 1
19030: PUSH
19031: LD_EXP 73
19035: PUSH
19036: FOR_IN
19037: IFFALSE 19068
// if GetLives ( i ) < 1000 then
19039: LD_VAR 0 1
19043: PPUSH
19044: CALL_OW 256
19048: PUSH
19049: LD_INT 1000
19051: LESS
19052: IFFALSE 19066
// SetLives ( i , 1000 ) ;
19054: LD_VAR 0 1
19058: PPUSH
19059: LD_INT 1000
19061: PPUSH
19062: CALL_OW 234
19066: GO 19036
19068: POP
19069: POP
// end ;
19070: PPOPN 1
19072: END
// export function hHackInvincible ; var i ; begin
19073: LD_INT 0
19075: PPUSH
19076: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19077: LD_ADDR_VAR 0 2
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 21
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: LIST
19109: PPUSH
19110: CALL_OW 69
19114: PUSH
19115: FOR_IN
19116: IFFALSE 19177
// if IsSelected ( i ) then
19118: LD_VAR 0 2
19122: PPUSH
19123: CALL_OW 306
19127: IFFALSE 19175
// begin if i in hInvincible then
19129: LD_VAR 0 2
19133: PUSH
19134: LD_EXP 73
19138: IN
19139: IFFALSE 19159
// hInvincible := hInvincible diff i else
19141: LD_ADDR_EXP 73
19145: PUSH
19146: LD_EXP 73
19150: PUSH
19151: LD_VAR 0 2
19155: DIFF
19156: ST_TO_ADDR
19157: GO 19175
// hInvincible := hInvincible union i ;
19159: LD_ADDR_EXP 73
19163: PUSH
19164: LD_EXP 73
19168: PUSH
19169: LD_VAR 0 2
19173: UNION
19174: ST_TO_ADDR
// end ;
19175: GO 19115
19177: POP
19178: POP
// end ;
19179: LD_VAR 0 1
19183: RET
// export function hHackInvisible ; var i , j ; begin
19184: LD_INT 0
19186: PPUSH
19187: PPUSH
19188: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19189: LD_ADDR_VAR 0 2
19193: PUSH
19194: LD_INT 21
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PPUSH
19204: CALL_OW 69
19208: PUSH
19209: FOR_IN
19210: IFFALSE 19234
// if IsSelected ( i ) then
19212: LD_VAR 0 2
19216: PPUSH
19217: CALL_OW 306
19221: IFFALSE 19232
// ComForceInvisible ( i ) ;
19223: LD_VAR 0 2
19227: PPUSH
19228: CALL_OW 496
19232: GO 19209
19234: POP
19235: POP
// end ;
19236: LD_VAR 0 1
19240: RET
// export function hHackChangeYourSide ; begin
19241: LD_INT 0
19243: PPUSH
// if your_side = 8 then
19244: LD_OWVAR 2
19248: PUSH
19249: LD_INT 8
19251: EQUAL
19252: IFFALSE 19264
// your_side := 0 else
19254: LD_ADDR_OWVAR 2
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
19262: GO 19278
// your_side := your_side + 1 ;
19264: LD_ADDR_OWVAR 2
19268: PUSH
19269: LD_OWVAR 2
19273: PUSH
19274: LD_INT 1
19276: PLUS
19277: ST_TO_ADDR
// end ;
19278: LD_VAR 0 1
19282: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19283: LD_INT 0
19285: PPUSH
19286: PPUSH
19287: PPUSH
// for i in all_units do
19288: LD_ADDR_VAR 0 2
19292: PUSH
19293: LD_OWVAR 3
19297: PUSH
19298: FOR_IN
19299: IFFALSE 19377
// if IsSelected ( i ) then
19301: LD_VAR 0 2
19305: PPUSH
19306: CALL_OW 306
19310: IFFALSE 19375
// begin j := GetSide ( i ) ;
19312: LD_ADDR_VAR 0 3
19316: PUSH
19317: LD_VAR 0 2
19321: PPUSH
19322: CALL_OW 255
19326: ST_TO_ADDR
// if j = 8 then
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 8
19334: EQUAL
19335: IFFALSE 19347
// j := 0 else
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
19345: GO 19361
// j := j + 1 ;
19347: LD_ADDR_VAR 0 3
19351: PUSH
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 1
19359: PLUS
19360: ST_TO_ADDR
// SetSide ( i , j ) ;
19361: LD_VAR 0 2
19365: PPUSH
19366: LD_VAR 0 3
19370: PPUSH
19371: CALL_OW 235
// end ;
19375: GO 19298
19377: POP
19378: POP
// end ;
19379: LD_VAR 0 1
19383: RET
// export function hHackFog ; begin
19384: LD_INT 0
19386: PPUSH
// FogOff ( true ) ;
19387: LD_INT 1
19389: PPUSH
19390: CALL_OW 344
// end ;
19394: LD_VAR 0 1
19398: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19399: LD_INT 0
19401: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19402: LD_VAR 0 1
19406: PPUSH
19407: LD_VAR 0 2
19411: PPUSH
19412: LD_VAR 0 3
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 483
// CenterOnXY ( x , y ) ;
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_VAR 0 3
19436: PPUSH
19437: CALL_OW 84
// end ;
19441: LD_VAR 0 4
19445: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19446: LD_INT 0
19448: PPUSH
19449: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19450: LD_VAR 0 1
19454: NOT
19455: PUSH
19456: LD_VAR 0 2
19460: PPUSH
19461: LD_VAR 0 3
19465: PPUSH
19466: CALL_OW 488
19470: NOT
19471: OR
19472: PUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 266
19482: PUSH
19483: LD_INT 3
19485: NONEQUAL
19486: PUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 247
19496: PUSH
19497: LD_INT 1
19499: EQUAL
19500: NOT
19501: AND
19502: OR
19503: IFFALSE 19507
// exit ;
19505: GO 19656
// if GetType ( factory ) = unit_human then
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 247
19516: PUSH
19517: LD_INT 1
19519: EQUAL
19520: IFFALSE 19537
// factory := IsInUnit ( factory ) ;
19522: LD_ADDR_VAR 0 1
19526: PUSH
19527: LD_VAR 0 1
19531: PPUSH
19532: CALL_OW 310
19536: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19537: LD_VAR 0 1
19541: PPUSH
19542: CALL_OW 266
19546: PUSH
19547: LD_INT 3
19549: NONEQUAL
19550: IFFALSE 19554
// exit ;
19552: GO 19656
// if HexInfo ( x , y ) = factory then
19554: LD_VAR 0 2
19558: PPUSH
19559: LD_VAR 0 3
19563: PPUSH
19564: CALL_OW 428
19568: PUSH
19569: LD_VAR 0 1
19573: EQUAL
19574: IFFALSE 19601
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19576: LD_ADDR_EXP 74
19580: PUSH
19581: LD_EXP 74
19585: PPUSH
19586: LD_VAR 0 1
19590: PPUSH
19591: LD_INT 0
19593: PPUSH
19594: CALL_OW 1
19598: ST_TO_ADDR
19599: GO 19652
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19601: LD_ADDR_EXP 74
19605: PUSH
19606: LD_EXP 74
19610: PPUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 255
19625: PUSH
19626: LD_VAR 0 1
19630: PUSH
19631: LD_VAR 0 2
19635: PUSH
19636: LD_VAR 0 3
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 1
19651: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19652: CALL 19661 0 0
// end ;
19656: LD_VAR 0 4
19660: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19661: LD_INT 0
19663: PPUSH
19664: PPUSH
19665: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19666: LD_STRING resetFactoryWaypoint();
19668: PPUSH
19669: CALL_OW 559
// if factoryWaypoints then
19673: LD_EXP 74
19677: IFFALSE 19803
// begin list := PrepareArray ( factoryWaypoints ) ;
19679: LD_ADDR_VAR 0 3
19683: PUSH
19684: LD_EXP 74
19688: PPUSH
19689: CALL 66435 0 1
19693: ST_TO_ADDR
// for i := 1 to list do
19694: LD_ADDR_VAR 0 2
19698: PUSH
19699: DOUBLE
19700: LD_INT 1
19702: DEC
19703: ST_TO_ADDR
19704: LD_VAR 0 3
19708: PUSH
19709: FOR_TO
19710: IFFALSE 19801
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19712: LD_STRING setFactoryWaypointXY(
19714: PUSH
19715: LD_VAR 0 3
19719: PUSH
19720: LD_VAR 0 2
19724: ARRAY
19725: PUSH
19726: LD_INT 1
19728: ARRAY
19729: STR
19730: PUSH
19731: LD_STRING ,
19733: STR
19734: PUSH
19735: LD_VAR 0 3
19739: PUSH
19740: LD_VAR 0 2
19744: ARRAY
19745: PUSH
19746: LD_INT 2
19748: ARRAY
19749: STR
19750: PUSH
19751: LD_STRING ,
19753: STR
19754: PUSH
19755: LD_VAR 0 3
19759: PUSH
19760: LD_VAR 0 2
19764: ARRAY
19765: PUSH
19766: LD_INT 3
19768: ARRAY
19769: STR
19770: PUSH
19771: LD_STRING ,
19773: STR
19774: PUSH
19775: LD_VAR 0 3
19779: PUSH
19780: LD_VAR 0 2
19784: ARRAY
19785: PUSH
19786: LD_INT 4
19788: ARRAY
19789: STR
19790: PUSH
19791: LD_STRING )
19793: STR
19794: PPUSH
19795: CALL_OW 559
19799: GO 19709
19801: POP
19802: POP
// end ; end ;
19803: LD_VAR 0 1
19807: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19808: LD_INT 0
19810: PPUSH
// if HexInfo ( x , y ) = warehouse then
19811: LD_VAR 0 2
19815: PPUSH
19816: LD_VAR 0 3
19820: PPUSH
19821: CALL_OW 428
19825: PUSH
19826: LD_VAR 0 1
19830: EQUAL
19831: IFFALSE 19858
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19833: LD_ADDR_EXP 75
19837: PUSH
19838: LD_EXP 75
19842: PPUSH
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_INT 0
19850: PPUSH
19851: CALL_OW 1
19855: ST_TO_ADDR
19856: GO 19909
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19858: LD_ADDR_EXP 75
19862: PUSH
19863: LD_EXP 75
19867: PPUSH
19868: LD_VAR 0 1
19872: PPUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 255
19882: PUSH
19883: LD_VAR 0 1
19887: PUSH
19888: LD_VAR 0 2
19892: PUSH
19893: LD_VAR 0 3
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: PPUSH
19904: CALL_OW 1
19908: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19909: CALL 19918 0 0
// end ;
19913: LD_VAR 0 4
19917: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19918: LD_INT 0
19920: PPUSH
19921: PPUSH
19922: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19923: LD_STRING resetWarehouseGatheringPoints();
19925: PPUSH
19926: CALL_OW 559
// if warehouseGatheringPoints then
19930: LD_EXP 75
19934: IFFALSE 20060
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_EXP 75
19945: PPUSH
19946: CALL 66435 0 1
19950: ST_TO_ADDR
// for i := 1 to list do
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: DOUBLE
19957: LD_INT 1
19959: DEC
19960: ST_TO_ADDR
19961: LD_VAR 0 3
19965: PUSH
19966: FOR_TO
19967: IFFALSE 20058
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19969: LD_STRING setWarehouseGatheringPointXY(
19971: PUSH
19972: LD_VAR 0 3
19976: PUSH
19977: LD_VAR 0 2
19981: ARRAY
19982: PUSH
19983: LD_INT 1
19985: ARRAY
19986: STR
19987: PUSH
19988: LD_STRING ,
19990: STR
19991: PUSH
19992: LD_VAR 0 3
19996: PUSH
19997: LD_VAR 0 2
20001: ARRAY
20002: PUSH
20003: LD_INT 2
20005: ARRAY
20006: STR
20007: PUSH
20008: LD_STRING ,
20010: STR
20011: PUSH
20012: LD_VAR 0 3
20016: PUSH
20017: LD_VAR 0 2
20021: ARRAY
20022: PUSH
20023: LD_INT 3
20025: ARRAY
20026: STR
20027: PUSH
20028: LD_STRING ,
20030: STR
20031: PUSH
20032: LD_VAR 0 3
20036: PUSH
20037: LD_VAR 0 2
20041: ARRAY
20042: PUSH
20043: LD_INT 4
20045: ARRAY
20046: STR
20047: PUSH
20048: LD_STRING )
20050: STR
20051: PPUSH
20052: CALL_OW 559
20056: GO 19966
20058: POP
20059: POP
// end ; end ;
20060: LD_VAR 0 1
20064: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20065: LD_EXP 75
20069: IFFALSE 20754
20071: GO 20073
20073: DISABLE
20074: LD_INT 0
20076: PPUSH
20077: PPUSH
20078: PPUSH
20079: PPUSH
20080: PPUSH
20081: PPUSH
20082: PPUSH
20083: PPUSH
20084: PPUSH
// begin enable ;
20085: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: LD_EXP 75
20095: PPUSH
20096: CALL 66435 0 1
20100: ST_TO_ADDR
// if not list then
20101: LD_VAR 0 3
20105: NOT
20106: IFFALSE 20110
// exit ;
20108: GO 20754
// for i := 1 to list do
20110: LD_ADDR_VAR 0 1
20114: PUSH
20115: DOUBLE
20116: LD_INT 1
20118: DEC
20119: ST_TO_ADDR
20120: LD_VAR 0 3
20124: PUSH
20125: FOR_TO
20126: IFFALSE 20752
// begin depot := list [ i ] [ 2 ] ;
20128: LD_ADDR_VAR 0 8
20132: PUSH
20133: LD_VAR 0 3
20137: PUSH
20138: LD_VAR 0 1
20142: ARRAY
20143: PUSH
20144: LD_INT 2
20146: ARRAY
20147: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20148: LD_ADDR_VAR 0 5
20152: PUSH
20153: LD_VAR 0 3
20157: PUSH
20158: LD_VAR 0 1
20162: ARRAY
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20168: LD_VAR 0 8
20172: PPUSH
20173: CALL_OW 301
20177: PUSH
20178: LD_VAR 0 5
20182: PUSH
20183: LD_VAR 0 8
20187: PPUSH
20188: CALL_OW 255
20192: NONEQUAL
20193: OR
20194: IFFALSE 20223
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20196: LD_ADDR_EXP 75
20200: PUSH
20201: LD_EXP 75
20205: PPUSH
20206: LD_VAR 0 8
20210: PPUSH
20211: LD_INT 0
20213: PPUSH
20214: CALL_OW 1
20218: ST_TO_ADDR
// exit ;
20219: POP
20220: POP
20221: GO 20754
// end ; x := list [ i ] [ 3 ] ;
20223: LD_ADDR_VAR 0 6
20227: PUSH
20228: LD_VAR 0 3
20232: PUSH
20233: LD_VAR 0 1
20237: ARRAY
20238: PUSH
20239: LD_INT 3
20241: ARRAY
20242: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20243: LD_ADDR_VAR 0 7
20247: PUSH
20248: LD_VAR 0 3
20252: PUSH
20253: LD_VAR 0 1
20257: ARRAY
20258: PUSH
20259: LD_INT 4
20261: ARRAY
20262: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20263: LD_ADDR_VAR 0 9
20267: PUSH
20268: LD_VAR 0 6
20272: PPUSH
20273: LD_VAR 0 7
20277: PPUSH
20278: LD_INT 16
20280: PPUSH
20281: CALL 65023 0 3
20285: ST_TO_ADDR
// if not cratesNearbyPoint then
20286: LD_VAR 0 9
20290: NOT
20291: IFFALSE 20297
// exit ;
20293: POP
20294: POP
20295: GO 20754
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20297: LD_ADDR_VAR 0 4
20301: PUSH
20302: LD_INT 22
20304: PUSH
20305: LD_VAR 0 5
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 3
20316: PUSH
20317: LD_INT 60
20319: PUSH
20320: EMPTY
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 91
20329: PUSH
20330: LD_VAR 0 8
20334: PUSH
20335: LD_INT 6
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 2
20345: PUSH
20346: LD_INT 25
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 25
20358: PUSH
20359: LD_INT 16
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: PPUSH
20377: CALL_OW 69
20381: PUSH
20382: LD_VAR 0 8
20386: PPUSH
20387: CALL_OW 313
20391: PPUSH
20392: LD_INT 3
20394: PUSH
20395: LD_INT 60
20397: PUSH
20398: EMPTY
20399: LIST
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: LD_INT 25
20410: PUSH
20411: LD_INT 2
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 25
20420: PUSH
20421: LD_INT 16
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PPUSH
20437: CALL_OW 72
20441: UNION
20442: ST_TO_ADDR
// if tmp then
20443: LD_VAR 0 4
20447: IFFALSE 20527
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20449: LD_ADDR_VAR 0 4
20453: PUSH
20454: LD_VAR 0 4
20458: PPUSH
20459: LD_INT 3
20461: PPUSH
20462: CALL 62992 0 2
20466: ST_TO_ADDR
// for j in tmp do
20467: LD_ADDR_VAR 0 2
20471: PUSH
20472: LD_VAR 0 4
20476: PUSH
20477: FOR_IN
20478: IFFALSE 20521
// begin if IsInUnit ( j ) then
20480: LD_VAR 0 2
20484: PPUSH
20485: CALL_OW 310
20489: IFFALSE 20500
// ComExit ( j ) ;
20491: LD_VAR 0 2
20495: PPUSH
20496: CALL 63075 0 1
// AddComCollect ( j , x , y ) ;
20500: LD_VAR 0 2
20504: PPUSH
20505: LD_VAR 0 6
20509: PPUSH
20510: LD_VAR 0 7
20514: PPUSH
20515: CALL_OW 177
// end ;
20519: GO 20477
20521: POP
20522: POP
// exit ;
20523: POP
20524: POP
20525: GO 20754
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20527: LD_ADDR_VAR 0 4
20531: PUSH
20532: LD_INT 22
20534: PUSH
20535: LD_VAR 0 5
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 91
20546: PUSH
20547: LD_VAR 0 8
20551: PUSH
20552: LD_INT 8
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 2
20562: PUSH
20563: LD_INT 34
20565: PUSH
20566: LD_INT 12
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 34
20575: PUSH
20576: LD_INT 51
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 34
20585: PUSH
20586: LD_INT 32
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 34
20595: PUSH
20596: LD_INT 89
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: PPUSH
20615: CALL_OW 69
20619: ST_TO_ADDR
// if tmp then
20620: LD_VAR 0 4
20624: IFFALSE 20750
// begin for j in tmp do
20626: LD_ADDR_VAR 0 2
20630: PUSH
20631: LD_VAR 0 4
20635: PUSH
20636: FOR_IN
20637: IFFALSE 20748
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20639: LD_VAR 0 2
20643: PPUSH
20644: CALL_OW 262
20648: PUSH
20649: LD_INT 3
20651: EQUAL
20652: PUSH
20653: LD_VAR 0 2
20657: PPUSH
20658: CALL_OW 261
20662: PUSH
20663: LD_INT 20
20665: GREATER
20666: OR
20667: PUSH
20668: LD_VAR 0 2
20672: PPUSH
20673: CALL_OW 314
20677: NOT
20678: AND
20679: PUSH
20680: LD_VAR 0 2
20684: PPUSH
20685: CALL_OW 263
20689: PUSH
20690: LD_INT 1
20692: NONEQUAL
20693: PUSH
20694: LD_VAR 0 2
20698: PPUSH
20699: CALL_OW 311
20703: OR
20704: AND
20705: IFFALSE 20746
// begin ComCollect ( j , x , y ) ;
20707: LD_VAR 0 2
20711: PPUSH
20712: LD_VAR 0 6
20716: PPUSH
20717: LD_VAR 0 7
20721: PPUSH
20722: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20726: LD_VAR 0 2
20730: PPUSH
20731: LD_VAR 0 8
20735: PPUSH
20736: CALL_OW 172
// exit ;
20740: POP
20741: POP
20742: POP
20743: POP
20744: GO 20754
// end ;
20746: GO 20636
20748: POP
20749: POP
// end ; end ;
20750: GO 20125
20752: POP
20753: POP
// end ; end_of_file
20754: PPOPN 9
20756: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20757: LD_INT 0
20759: PPUSH
20760: PPUSH
20761: PPUSH
20762: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 264
20772: PUSH
20773: LD_INT 91
20775: EQUAL
20776: IFFALSE 20848
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20778: LD_INT 68
20780: PPUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: CALL_OW 255
20790: PPUSH
20791: CALL_OW 321
20795: PUSH
20796: LD_INT 2
20798: EQUAL
20799: IFFALSE 20811
// eff := 70 else
20801: LD_ADDR_VAR 0 4
20805: PUSH
20806: LD_INT 70
20808: ST_TO_ADDR
20809: GO 20819
// eff := 30 ;
20811: LD_ADDR_VAR 0 4
20815: PUSH
20816: LD_INT 30
20818: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20819: LD_VAR 0 1
20823: PPUSH
20824: CALL_OW 250
20828: PPUSH
20829: LD_VAR 0 1
20833: PPUSH
20834: CALL_OW 251
20838: PPUSH
20839: LD_VAR 0 4
20843: PPUSH
20844: CALL_OW 495
// end ; end ;
20848: LD_VAR 0 2
20852: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20853: LD_INT 0
20855: PPUSH
// end ;
20856: LD_VAR 0 4
20860: RET
// export function SOS_Command ( cmd ) ; begin
20861: LD_INT 0
20863: PPUSH
// end ;
20864: LD_VAR 0 2
20868: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20869: LD_INT 0
20871: PPUSH
// end ;
20872: LD_VAR 0 6
20876: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
// if not vehicle or not factory then
20881: LD_VAR 0 1
20885: NOT
20886: PUSH
20887: LD_VAR 0 2
20891: NOT
20892: OR
20893: IFFALSE 20897
// exit ;
20895: GO 21128
// if factoryWaypoints >= factory then
20897: LD_EXP 74
20901: PUSH
20902: LD_VAR 0 2
20906: GREATEREQUAL
20907: IFFALSE 21128
// if factoryWaypoints [ factory ] then
20909: LD_EXP 74
20913: PUSH
20914: LD_VAR 0 2
20918: ARRAY
20919: IFFALSE 21128
// begin if GetControl ( vehicle ) = control_manual then
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 263
20930: PUSH
20931: LD_INT 1
20933: EQUAL
20934: IFFALSE 21015
// begin driver := IsDrivenBy ( vehicle ) ;
20936: LD_ADDR_VAR 0 4
20940: PUSH
20941: LD_VAR 0 1
20945: PPUSH
20946: CALL_OW 311
20950: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20951: LD_VAR 0 4
20955: PPUSH
20956: LD_EXP 74
20960: PUSH
20961: LD_VAR 0 2
20965: ARRAY
20966: PUSH
20967: LD_INT 3
20969: ARRAY
20970: PPUSH
20971: LD_EXP 74
20975: PUSH
20976: LD_VAR 0 2
20980: ARRAY
20981: PUSH
20982: LD_INT 4
20984: ARRAY
20985: PPUSH
20986: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20990: LD_VAR 0 4
20994: PPUSH
20995: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20999: LD_VAR 0 4
21003: PPUSH
21004: LD_VAR 0 2
21008: PPUSH
21009: CALL_OW 180
// end else
21013: GO 21128
// if GetControl ( vehicle ) = control_remote then
21015: LD_VAR 0 1
21019: PPUSH
21020: CALL_OW 263
21024: PUSH
21025: LD_INT 2
21027: EQUAL
21028: IFFALSE 21089
// begin wait ( 0 0$2 ) ;
21030: LD_INT 70
21032: PPUSH
21033: CALL_OW 67
// if Connect ( vehicle ) then
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL 33315 0 1
21046: IFFALSE 21087
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21048: LD_VAR 0 1
21052: PPUSH
21053: LD_EXP 74
21057: PUSH
21058: LD_VAR 0 2
21062: ARRAY
21063: PUSH
21064: LD_INT 3
21066: ARRAY
21067: PPUSH
21068: LD_EXP 74
21072: PUSH
21073: LD_VAR 0 2
21077: ARRAY
21078: PUSH
21079: LD_INT 4
21081: ARRAY
21082: PPUSH
21083: CALL_OW 171
// end else
21087: GO 21128
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21089: LD_VAR 0 1
21093: PPUSH
21094: LD_EXP 74
21098: PUSH
21099: LD_VAR 0 2
21103: ARRAY
21104: PUSH
21105: LD_INT 3
21107: ARRAY
21108: PPUSH
21109: LD_EXP 74
21113: PUSH
21114: LD_VAR 0 2
21118: ARRAY
21119: PUSH
21120: LD_INT 4
21122: ARRAY
21123: PPUSH
21124: CALL_OW 171
// end ; end ;
21128: LD_VAR 0 3
21132: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21133: LD_INT 0
21135: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21136: LD_VAR 0 1
21140: PUSH
21141: LD_INT 250
21143: EQUAL
21144: PUSH
21145: LD_VAR 0 2
21149: PPUSH
21150: CALL_OW 264
21154: PUSH
21155: LD_INT 81
21157: EQUAL
21158: AND
21159: IFFALSE 21180
// MinerPlaceMine ( unit , x , y ) ;
21161: LD_VAR 0 2
21165: PPUSH
21166: LD_VAR 0 4
21170: PPUSH
21171: LD_VAR 0 5
21175: PPUSH
21176: CALL 23565 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21180: LD_VAR 0 1
21184: PUSH
21185: LD_INT 251
21187: EQUAL
21188: PUSH
21189: LD_VAR 0 2
21193: PPUSH
21194: CALL_OW 264
21198: PUSH
21199: LD_INT 81
21201: EQUAL
21202: AND
21203: IFFALSE 21224
// MinerDetonateMine ( unit , x , y ) ;
21205: LD_VAR 0 2
21209: PPUSH
21210: LD_VAR 0 4
21214: PPUSH
21215: LD_VAR 0 5
21219: PPUSH
21220: CALL 23840 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21224: LD_VAR 0 1
21228: PUSH
21229: LD_INT 252
21231: EQUAL
21232: PUSH
21233: LD_VAR 0 2
21237: PPUSH
21238: CALL_OW 264
21242: PUSH
21243: LD_INT 81
21245: EQUAL
21246: AND
21247: IFFALSE 21268
// MinerCreateMinefield ( unit , x , y ) ;
21249: LD_VAR 0 2
21253: PPUSH
21254: LD_VAR 0 4
21258: PPUSH
21259: LD_VAR 0 5
21263: PPUSH
21264: CALL 24257 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21268: LD_VAR 0 1
21272: PUSH
21273: LD_INT 253
21275: EQUAL
21276: PUSH
21277: LD_VAR 0 2
21281: PPUSH
21282: CALL_OW 257
21286: PUSH
21287: LD_INT 5
21289: EQUAL
21290: AND
21291: IFFALSE 21312
// ComBinocular ( unit , x , y ) ;
21293: LD_VAR 0 2
21297: PPUSH
21298: LD_VAR 0 4
21302: PPUSH
21303: LD_VAR 0 5
21307: PPUSH
21308: CALL 24626 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21312: LD_VAR 0 1
21316: PUSH
21317: LD_INT 254
21319: EQUAL
21320: PUSH
21321: LD_VAR 0 2
21325: PPUSH
21326: CALL_OW 264
21330: PUSH
21331: LD_INT 99
21333: EQUAL
21334: AND
21335: PUSH
21336: LD_VAR 0 3
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 3
21348: EQUAL
21349: AND
21350: IFFALSE 21366
// HackDestroyVehicle ( unit , selectedUnit ) ;
21352: LD_VAR 0 2
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: CALL 22929 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21366: LD_VAR 0 1
21370: PUSH
21371: LD_INT 255
21373: EQUAL
21374: PUSH
21375: LD_VAR 0 2
21379: PPUSH
21380: CALL_OW 264
21384: PUSH
21385: LD_INT 14
21387: PUSH
21388: LD_INT 53
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: IN
21395: AND
21396: PUSH
21397: LD_VAR 0 4
21401: PPUSH
21402: LD_VAR 0 5
21406: PPUSH
21407: CALL_OW 488
21411: AND
21412: IFFALSE 21436
// CutTreeXYR ( unit , x , y , 12 ) ;
21414: LD_VAR 0 2
21418: PPUSH
21419: LD_VAR 0 4
21423: PPUSH
21424: LD_VAR 0 5
21428: PPUSH
21429: LD_INT 12
21431: PPUSH
21432: CALL 21499 0 4
// if cmd = 256 then
21436: LD_VAR 0 1
21440: PUSH
21441: LD_INT 256
21443: EQUAL
21444: IFFALSE 21465
// SetFactoryWaypoint ( unit , x , y ) ;
21446: LD_VAR 0 2
21450: PPUSH
21451: LD_VAR 0 4
21455: PPUSH
21456: LD_VAR 0 5
21460: PPUSH
21461: CALL 19446 0 3
// if cmd = 257 then
21465: LD_VAR 0 1
21469: PUSH
21470: LD_INT 257
21472: EQUAL
21473: IFFALSE 21494
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21475: LD_VAR 0 2
21479: PPUSH
21480: LD_VAR 0 4
21484: PPUSH
21485: LD_VAR 0 5
21489: PPUSH
21490: CALL 19808 0 3
// end ;
21494: LD_VAR 0 6
21498: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21499: LD_INT 0
21501: PPUSH
21502: PPUSH
21503: PPUSH
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
21508: PPUSH
21509: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21510: LD_VAR 0 1
21514: NOT
21515: PUSH
21516: LD_VAR 0 2
21520: PPUSH
21521: LD_VAR 0 3
21525: PPUSH
21526: CALL_OW 488
21530: NOT
21531: OR
21532: PUSH
21533: LD_VAR 0 4
21537: NOT
21538: OR
21539: IFFALSE 21543
// exit ;
21541: GO 21883
// list := [ ] ;
21543: LD_ADDR_VAR 0 13
21547: PUSH
21548: EMPTY
21549: ST_TO_ADDR
// if x - r < 0 then
21550: LD_VAR 0 2
21554: PUSH
21555: LD_VAR 0 4
21559: MINUS
21560: PUSH
21561: LD_INT 0
21563: LESS
21564: IFFALSE 21576
// min_x := 0 else
21566: LD_ADDR_VAR 0 7
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
21574: GO 21592
// min_x := x - r ;
21576: LD_ADDR_VAR 0 7
21580: PUSH
21581: LD_VAR 0 2
21585: PUSH
21586: LD_VAR 0 4
21590: MINUS
21591: ST_TO_ADDR
// if y - r < 0 then
21592: LD_VAR 0 3
21596: PUSH
21597: LD_VAR 0 4
21601: MINUS
21602: PUSH
21603: LD_INT 0
21605: LESS
21606: IFFALSE 21618
// min_y := 0 else
21608: LD_ADDR_VAR 0 8
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
21616: GO 21634
// min_y := y - r ;
21618: LD_ADDR_VAR 0 8
21622: PUSH
21623: LD_VAR 0 3
21627: PUSH
21628: LD_VAR 0 4
21632: MINUS
21633: ST_TO_ADDR
// max_x := x + r ;
21634: LD_ADDR_VAR 0 9
21638: PUSH
21639: LD_VAR 0 2
21643: PUSH
21644: LD_VAR 0 4
21648: PLUS
21649: ST_TO_ADDR
// max_y := y + r ;
21650: LD_ADDR_VAR 0 10
21654: PUSH
21655: LD_VAR 0 3
21659: PUSH
21660: LD_VAR 0 4
21664: PLUS
21665: ST_TO_ADDR
// for _x = min_x to max_x do
21666: LD_ADDR_VAR 0 11
21670: PUSH
21671: DOUBLE
21672: LD_VAR 0 7
21676: DEC
21677: ST_TO_ADDR
21678: LD_VAR 0 9
21682: PUSH
21683: FOR_TO
21684: IFFALSE 21801
// for _y = min_y to max_y do
21686: LD_ADDR_VAR 0 12
21690: PUSH
21691: DOUBLE
21692: LD_VAR 0 8
21696: DEC
21697: ST_TO_ADDR
21698: LD_VAR 0 10
21702: PUSH
21703: FOR_TO
21704: IFFALSE 21797
// begin if not ValidHex ( _x , _y ) then
21706: LD_VAR 0 11
21710: PPUSH
21711: LD_VAR 0 12
21715: PPUSH
21716: CALL_OW 488
21720: NOT
21721: IFFALSE 21725
// continue ;
21723: GO 21703
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21725: LD_VAR 0 11
21729: PPUSH
21730: LD_VAR 0 12
21734: PPUSH
21735: CALL_OW 351
21739: PUSH
21740: LD_VAR 0 11
21744: PPUSH
21745: LD_VAR 0 12
21749: PPUSH
21750: CALL_OW 554
21754: AND
21755: IFFALSE 21795
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21757: LD_ADDR_VAR 0 13
21761: PUSH
21762: LD_VAR 0 13
21766: PPUSH
21767: LD_VAR 0 13
21771: PUSH
21772: LD_INT 1
21774: PLUS
21775: PPUSH
21776: LD_VAR 0 11
21780: PUSH
21781: LD_VAR 0 12
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PPUSH
21790: CALL_OW 2
21794: ST_TO_ADDR
// end ;
21795: GO 21703
21797: POP
21798: POP
21799: GO 21683
21801: POP
21802: POP
// if not list then
21803: LD_VAR 0 13
21807: NOT
21808: IFFALSE 21812
// exit ;
21810: GO 21883
// for i in list do
21812: LD_ADDR_VAR 0 6
21816: PUSH
21817: LD_VAR 0 13
21821: PUSH
21822: FOR_IN
21823: IFFALSE 21881
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21825: LD_VAR 0 1
21829: PPUSH
21830: LD_STRING M
21832: PUSH
21833: LD_VAR 0 6
21837: PUSH
21838: LD_INT 1
21840: ARRAY
21841: PUSH
21842: LD_VAR 0 6
21846: PUSH
21847: LD_INT 2
21849: ARRAY
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: LD_INT 0
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: PPUSH
21875: CALL_OW 447
21879: GO 21822
21881: POP
21882: POP
// end ;
21883: LD_VAR 0 5
21887: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21888: LD_EXP 77
21892: NOT
21893: IFFALSE 21943
21895: GO 21897
21897: DISABLE
// begin initHack := true ;
21898: LD_ADDR_EXP 77
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// hackTanks := [ ] ;
21906: LD_ADDR_EXP 78
21910: PUSH
21911: EMPTY
21912: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21913: LD_ADDR_EXP 79
21917: PUSH
21918: EMPTY
21919: ST_TO_ADDR
// hackLimit := 3 ;
21920: LD_ADDR_EXP 80
21924: PUSH
21925: LD_INT 3
21927: ST_TO_ADDR
// hackDist := 12 ;
21928: LD_ADDR_EXP 81
21932: PUSH
21933: LD_INT 12
21935: ST_TO_ADDR
// hackCounter := [ ] ;
21936: LD_ADDR_EXP 82
21940: PUSH
21941: EMPTY
21942: ST_TO_ADDR
// end ;
21943: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21944: LD_EXP 77
21948: PUSH
21949: LD_INT 34
21951: PUSH
21952: LD_INT 99
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PPUSH
21959: CALL_OW 69
21963: AND
21964: IFFALSE 22217
21966: GO 21968
21968: DISABLE
21969: LD_INT 0
21971: PPUSH
21972: PPUSH
// begin enable ;
21973: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21974: LD_ADDR_VAR 0 1
21978: PUSH
21979: LD_INT 34
21981: PUSH
21982: LD_INT 99
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PPUSH
21989: CALL_OW 69
21993: PUSH
21994: FOR_IN
21995: IFFALSE 22215
// begin if not i in hackTanks then
21997: LD_VAR 0 1
22001: PUSH
22002: LD_EXP 78
22006: IN
22007: NOT
22008: IFFALSE 22091
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22010: LD_ADDR_EXP 78
22014: PUSH
22015: LD_EXP 78
22019: PPUSH
22020: LD_EXP 78
22024: PUSH
22025: LD_INT 1
22027: PLUS
22028: PPUSH
22029: LD_VAR 0 1
22033: PPUSH
22034: CALL_OW 1
22038: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22039: LD_ADDR_EXP 79
22043: PUSH
22044: LD_EXP 79
22048: PPUSH
22049: LD_EXP 79
22053: PUSH
22054: LD_INT 1
22056: PLUS
22057: PPUSH
22058: EMPTY
22059: PPUSH
22060: CALL_OW 1
22064: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22065: LD_ADDR_EXP 82
22069: PUSH
22070: LD_EXP 82
22074: PPUSH
22075: LD_EXP 82
22079: PUSH
22080: LD_INT 1
22082: PLUS
22083: PPUSH
22084: EMPTY
22085: PPUSH
22086: CALL_OW 1
22090: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22091: LD_VAR 0 1
22095: PPUSH
22096: CALL_OW 302
22100: NOT
22101: IFFALSE 22114
// begin HackUnlinkAll ( i ) ;
22103: LD_VAR 0 1
22107: PPUSH
22108: CALL 22220 0 1
// continue ;
22112: GO 21994
// end ; HackCheckCapturedStatus ( i ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: CALL 22663 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22123: LD_ADDR_VAR 0 2
22127: PUSH
22128: LD_INT 81
22130: PUSH
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL_OW 255
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 33
22147: PUSH
22148: LD_INT 3
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 91
22157: PUSH
22158: LD_VAR 0 1
22162: PUSH
22163: LD_EXP 81
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 50
22175: PUSH
22176: EMPTY
22177: LIST
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: ST_TO_ADDR
// if not tmp then
22190: LD_VAR 0 2
22194: NOT
22195: IFFALSE 22199
// continue ;
22197: GO 21994
// HackLink ( i , tmp ) ;
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_VAR 0 2
22208: PPUSH
22209: CALL 22356 0 2
// end ;
22213: GO 21994
22215: POP
22216: POP
// end ;
22217: PPOPN 2
22219: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22220: LD_INT 0
22222: PPUSH
22223: PPUSH
22224: PPUSH
// if not hack in hackTanks then
22225: LD_VAR 0 1
22229: PUSH
22230: LD_EXP 78
22234: IN
22235: NOT
22236: IFFALSE 22240
// exit ;
22238: GO 22351
// index := GetElementIndex ( hackTanks , hack ) ;
22240: LD_ADDR_VAR 0 4
22244: PUSH
22245: LD_EXP 78
22249: PPUSH
22250: LD_VAR 0 1
22254: PPUSH
22255: CALL 30131 0 2
22259: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22260: LD_EXP 79
22264: PUSH
22265: LD_VAR 0 4
22269: ARRAY
22270: IFFALSE 22351
// begin for i in hackTanksCaptured [ index ] do
22272: LD_ADDR_VAR 0 3
22276: PUSH
22277: LD_EXP 79
22281: PUSH
22282: LD_VAR 0 4
22286: ARRAY
22287: PUSH
22288: FOR_IN
22289: IFFALSE 22315
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22291: LD_VAR 0 3
22295: PUSH
22296: LD_INT 1
22298: ARRAY
22299: PPUSH
22300: LD_VAR 0 3
22304: PUSH
22305: LD_INT 2
22307: ARRAY
22308: PPUSH
22309: CALL_OW 235
22313: GO 22288
22315: POP
22316: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22317: LD_ADDR_EXP 79
22321: PUSH
22322: LD_EXP 79
22326: PPUSH
22327: LD_VAR 0 4
22331: PPUSH
22332: EMPTY
22333: PPUSH
22334: CALL_OW 1
22338: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22339: LD_VAR 0 1
22343: PPUSH
22344: LD_INT 0
22346: PPUSH
22347: CALL_OW 505
// end ; end ;
22351: LD_VAR 0 2
22355: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22356: LD_INT 0
22358: PPUSH
22359: PPUSH
22360: PPUSH
// if not hack in hackTanks or not vehicles then
22361: LD_VAR 0 1
22365: PUSH
22366: LD_EXP 78
22370: IN
22371: NOT
22372: PUSH
22373: LD_VAR 0 2
22377: NOT
22378: OR
22379: IFFALSE 22383
// exit ;
22381: GO 22658
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22383: LD_ADDR_VAR 0 2
22387: PUSH
22388: LD_VAR 0 1
22392: PPUSH
22393: LD_VAR 0 2
22397: PPUSH
22398: LD_INT 1
22400: PPUSH
22401: LD_INT 1
22403: PPUSH
22404: CALL 30781 0 4
22408: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22409: LD_ADDR_VAR 0 5
22413: PUSH
22414: LD_EXP 78
22418: PPUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL 30131 0 2
22428: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22429: LD_EXP 79
22433: PUSH
22434: LD_VAR 0 5
22438: ARRAY
22439: PUSH
22440: LD_EXP 80
22444: LESS
22445: IFFALSE 22634
// begin for i := 1 to vehicles do
22447: LD_ADDR_VAR 0 4
22451: PUSH
22452: DOUBLE
22453: LD_INT 1
22455: DEC
22456: ST_TO_ADDR
22457: LD_VAR 0 2
22461: PUSH
22462: FOR_TO
22463: IFFALSE 22632
// begin if hackTanksCaptured [ index ] = hackLimit then
22465: LD_EXP 79
22469: PUSH
22470: LD_VAR 0 5
22474: ARRAY
22475: PUSH
22476: LD_EXP 80
22480: EQUAL
22481: IFFALSE 22485
// break ;
22483: GO 22632
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22485: LD_ADDR_EXP 82
22489: PUSH
22490: LD_EXP 82
22494: PPUSH
22495: LD_VAR 0 5
22499: PPUSH
22500: LD_EXP 82
22504: PUSH
22505: LD_VAR 0 5
22509: ARRAY
22510: PUSH
22511: LD_INT 1
22513: PLUS
22514: PPUSH
22515: CALL_OW 1
22519: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22520: LD_ADDR_EXP 79
22524: PUSH
22525: LD_EXP 79
22529: PPUSH
22530: LD_VAR 0 5
22534: PUSH
22535: LD_EXP 79
22539: PUSH
22540: LD_VAR 0 5
22544: ARRAY
22545: PUSH
22546: LD_INT 1
22548: PLUS
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PPUSH
22554: LD_VAR 0 2
22558: PUSH
22559: LD_VAR 0 4
22563: ARRAY
22564: PUSH
22565: LD_VAR 0 2
22569: PUSH
22570: LD_VAR 0 4
22574: ARRAY
22575: PPUSH
22576: CALL_OW 255
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PPUSH
22585: CALL 30346 0 3
22589: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22590: LD_VAR 0 2
22594: PUSH
22595: LD_VAR 0 4
22599: ARRAY
22600: PPUSH
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 255
22610: PPUSH
22611: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22615: LD_VAR 0 2
22619: PUSH
22620: LD_VAR 0 4
22624: ARRAY
22625: PPUSH
22626: CALL_OW 141
// end ;
22630: GO 22462
22632: POP
22633: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22634: LD_VAR 0 1
22638: PPUSH
22639: LD_EXP 79
22643: PUSH
22644: LD_VAR 0 5
22648: ARRAY
22649: PUSH
22650: LD_INT 0
22652: PLUS
22653: PPUSH
22654: CALL_OW 505
// end ;
22658: LD_VAR 0 3
22662: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22663: LD_INT 0
22665: PPUSH
22666: PPUSH
22667: PPUSH
22668: PPUSH
// if not hack in hackTanks then
22669: LD_VAR 0 1
22673: PUSH
22674: LD_EXP 78
22678: IN
22679: NOT
22680: IFFALSE 22684
// exit ;
22682: GO 22924
// index := GetElementIndex ( hackTanks , hack ) ;
22684: LD_ADDR_VAR 0 4
22688: PUSH
22689: LD_EXP 78
22693: PPUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL 30131 0 2
22703: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22704: LD_ADDR_VAR 0 3
22708: PUSH
22709: DOUBLE
22710: LD_EXP 79
22714: PUSH
22715: LD_VAR 0 4
22719: ARRAY
22720: INC
22721: ST_TO_ADDR
22722: LD_INT 1
22724: PUSH
22725: FOR_DOWNTO
22726: IFFALSE 22898
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22728: LD_ADDR_VAR 0 5
22732: PUSH
22733: LD_EXP 79
22737: PUSH
22738: LD_VAR 0 4
22742: ARRAY
22743: PUSH
22744: LD_VAR 0 3
22748: ARRAY
22749: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22750: LD_VAR 0 5
22754: PUSH
22755: LD_INT 1
22757: ARRAY
22758: PPUSH
22759: CALL_OW 302
22763: NOT
22764: PUSH
22765: LD_VAR 0 5
22769: PUSH
22770: LD_INT 1
22772: ARRAY
22773: PPUSH
22774: CALL_OW 255
22778: PUSH
22779: LD_VAR 0 1
22783: PPUSH
22784: CALL_OW 255
22788: NONEQUAL
22789: OR
22790: IFFALSE 22896
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22792: LD_VAR 0 5
22796: PUSH
22797: LD_INT 1
22799: ARRAY
22800: PPUSH
22801: CALL_OW 305
22805: PUSH
22806: LD_VAR 0 5
22810: PUSH
22811: LD_INT 1
22813: ARRAY
22814: PPUSH
22815: CALL_OW 255
22819: PUSH
22820: LD_VAR 0 1
22824: PPUSH
22825: CALL_OW 255
22829: EQUAL
22830: AND
22831: IFFALSE 22855
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22833: LD_VAR 0 5
22837: PUSH
22838: LD_INT 1
22840: ARRAY
22841: PPUSH
22842: LD_VAR 0 5
22846: PUSH
22847: LD_INT 2
22849: ARRAY
22850: PPUSH
22851: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22855: LD_ADDR_EXP 79
22859: PUSH
22860: LD_EXP 79
22864: PPUSH
22865: LD_VAR 0 4
22869: PPUSH
22870: LD_EXP 79
22874: PUSH
22875: LD_VAR 0 4
22879: ARRAY
22880: PPUSH
22881: LD_VAR 0 3
22885: PPUSH
22886: CALL_OW 3
22890: PPUSH
22891: CALL_OW 1
22895: ST_TO_ADDR
// end ; end ;
22896: GO 22725
22898: POP
22899: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_EXP 79
22909: PUSH
22910: LD_VAR 0 4
22914: ARRAY
22915: PUSH
22916: LD_INT 0
22918: PLUS
22919: PPUSH
22920: CALL_OW 505
// end ;
22924: LD_VAR 0 2
22928: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22929: LD_INT 0
22931: PPUSH
22932: PPUSH
22933: PPUSH
22934: PPUSH
// if not hack in hackTanks then
22935: LD_VAR 0 1
22939: PUSH
22940: LD_EXP 78
22944: IN
22945: NOT
22946: IFFALSE 22950
// exit ;
22948: GO 23035
// index := GetElementIndex ( hackTanks , hack ) ;
22950: LD_ADDR_VAR 0 5
22954: PUSH
22955: LD_EXP 78
22959: PPUSH
22960: LD_VAR 0 1
22964: PPUSH
22965: CALL 30131 0 2
22969: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22970: LD_ADDR_VAR 0 4
22974: PUSH
22975: DOUBLE
22976: LD_INT 1
22978: DEC
22979: ST_TO_ADDR
22980: LD_EXP 79
22984: PUSH
22985: LD_VAR 0 5
22989: ARRAY
22990: PUSH
22991: FOR_TO
22992: IFFALSE 23033
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22994: LD_EXP 79
22998: PUSH
22999: LD_VAR 0 5
23003: ARRAY
23004: PUSH
23005: LD_VAR 0 4
23009: ARRAY
23010: PUSH
23011: LD_INT 1
23013: ARRAY
23014: PUSH
23015: LD_VAR 0 2
23019: EQUAL
23020: IFFALSE 23031
// KillUnit ( vehicle ) ;
23022: LD_VAR 0 2
23026: PPUSH
23027: CALL_OW 66
23031: GO 22991
23033: POP
23034: POP
// end ;
23035: LD_VAR 0 3
23039: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23040: LD_EXP 83
23044: NOT
23045: IFFALSE 23080
23047: GO 23049
23049: DISABLE
// begin initMiner := true ;
23050: LD_ADDR_EXP 83
23054: PUSH
23055: LD_INT 1
23057: ST_TO_ADDR
// minersList := [ ] ;
23058: LD_ADDR_EXP 84
23062: PUSH
23063: EMPTY
23064: ST_TO_ADDR
// minerMinesList := [ ] ;
23065: LD_ADDR_EXP 85
23069: PUSH
23070: EMPTY
23071: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23072: LD_ADDR_EXP 86
23076: PUSH
23077: LD_INT 5
23079: ST_TO_ADDR
// end ;
23080: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23081: LD_EXP 83
23085: PUSH
23086: LD_INT 34
23088: PUSH
23089: LD_INT 81
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PPUSH
23096: CALL_OW 69
23100: AND
23101: IFFALSE 23562
23103: GO 23105
23105: DISABLE
23106: LD_INT 0
23108: PPUSH
23109: PPUSH
23110: PPUSH
23111: PPUSH
// begin enable ;
23112: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23113: LD_ADDR_VAR 0 1
23117: PUSH
23118: LD_INT 34
23120: PUSH
23121: LD_INT 81
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PPUSH
23128: CALL_OW 69
23132: PUSH
23133: FOR_IN
23134: IFFALSE 23206
// begin if not i in minersList then
23136: LD_VAR 0 1
23140: PUSH
23141: LD_EXP 84
23145: IN
23146: NOT
23147: IFFALSE 23204
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23149: LD_ADDR_EXP 84
23153: PUSH
23154: LD_EXP 84
23158: PPUSH
23159: LD_EXP 84
23163: PUSH
23164: LD_INT 1
23166: PLUS
23167: PPUSH
23168: LD_VAR 0 1
23172: PPUSH
23173: CALL_OW 1
23177: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23178: LD_ADDR_EXP 85
23182: PUSH
23183: LD_EXP 85
23187: PPUSH
23188: LD_EXP 85
23192: PUSH
23193: LD_INT 1
23195: PLUS
23196: PPUSH
23197: EMPTY
23198: PPUSH
23199: CALL_OW 1
23203: ST_TO_ADDR
// end end ;
23204: GO 23133
23206: POP
23207: POP
// for i := minerMinesList downto 1 do
23208: LD_ADDR_VAR 0 1
23212: PUSH
23213: DOUBLE
23214: LD_EXP 85
23218: INC
23219: ST_TO_ADDR
23220: LD_INT 1
23222: PUSH
23223: FOR_DOWNTO
23224: IFFALSE 23560
// begin if IsLive ( minersList [ i ] ) then
23226: LD_EXP 84
23230: PUSH
23231: LD_VAR 0 1
23235: ARRAY
23236: PPUSH
23237: CALL_OW 300
23241: IFFALSE 23269
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23243: LD_EXP 84
23247: PUSH
23248: LD_VAR 0 1
23252: ARRAY
23253: PPUSH
23254: LD_EXP 85
23258: PUSH
23259: LD_VAR 0 1
23263: ARRAY
23264: PPUSH
23265: CALL_OW 505
// if not minerMinesList [ i ] then
23269: LD_EXP 85
23273: PUSH
23274: LD_VAR 0 1
23278: ARRAY
23279: NOT
23280: IFFALSE 23284
// continue ;
23282: GO 23223
// for j := minerMinesList [ i ] downto 1 do
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: DOUBLE
23290: LD_EXP 85
23294: PUSH
23295: LD_VAR 0 1
23299: ARRAY
23300: INC
23301: ST_TO_ADDR
23302: LD_INT 1
23304: PUSH
23305: FOR_DOWNTO
23306: IFFALSE 23556
// begin side := GetSide ( minersList [ i ] ) ;
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: LD_EXP 84
23317: PUSH
23318: LD_VAR 0 1
23322: ARRAY
23323: PPUSH
23324: CALL_OW 255
23328: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23329: LD_ADDR_VAR 0 4
23333: PUSH
23334: LD_EXP 85
23338: PUSH
23339: LD_VAR 0 1
23343: ARRAY
23344: PUSH
23345: LD_VAR 0 2
23349: ARRAY
23350: PUSH
23351: LD_INT 1
23353: ARRAY
23354: PPUSH
23355: LD_EXP 85
23359: PUSH
23360: LD_VAR 0 1
23364: ARRAY
23365: PUSH
23366: LD_VAR 0 2
23370: ARRAY
23371: PUSH
23372: LD_INT 2
23374: ARRAY
23375: PPUSH
23376: CALL_OW 428
23380: ST_TO_ADDR
// if not tmp then
23381: LD_VAR 0 4
23385: NOT
23386: IFFALSE 23390
// continue ;
23388: GO 23305
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23390: LD_VAR 0 4
23394: PUSH
23395: LD_INT 81
23397: PUSH
23398: LD_VAR 0 3
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PPUSH
23407: CALL_OW 69
23411: IN
23412: PUSH
23413: LD_EXP 85
23417: PUSH
23418: LD_VAR 0 1
23422: ARRAY
23423: PUSH
23424: LD_VAR 0 2
23428: ARRAY
23429: PUSH
23430: LD_INT 1
23432: ARRAY
23433: PPUSH
23434: LD_EXP 85
23438: PUSH
23439: LD_VAR 0 1
23443: ARRAY
23444: PUSH
23445: LD_VAR 0 2
23449: ARRAY
23450: PUSH
23451: LD_INT 2
23453: ARRAY
23454: PPUSH
23455: CALL_OW 458
23459: AND
23460: IFFALSE 23554
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23462: LD_EXP 85
23466: PUSH
23467: LD_VAR 0 1
23471: ARRAY
23472: PUSH
23473: LD_VAR 0 2
23477: ARRAY
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: PPUSH
23483: LD_EXP 85
23487: PUSH
23488: LD_VAR 0 1
23492: ARRAY
23493: PUSH
23494: LD_VAR 0 2
23498: ARRAY
23499: PUSH
23500: LD_INT 2
23502: ARRAY
23503: PPUSH
23504: LD_VAR 0 3
23508: PPUSH
23509: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23513: LD_ADDR_EXP 85
23517: PUSH
23518: LD_EXP 85
23522: PPUSH
23523: LD_VAR 0 1
23527: PPUSH
23528: LD_EXP 85
23532: PUSH
23533: LD_VAR 0 1
23537: ARRAY
23538: PPUSH
23539: LD_VAR 0 2
23543: PPUSH
23544: CALL_OW 3
23548: PPUSH
23549: CALL_OW 1
23553: ST_TO_ADDR
// end ; end ;
23554: GO 23305
23556: POP
23557: POP
// end ;
23558: GO 23223
23560: POP
23561: POP
// end ;
23562: PPOPN 4
23564: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23565: LD_INT 0
23567: PPUSH
23568: PPUSH
// result := false ;
23569: LD_ADDR_VAR 0 4
23573: PUSH
23574: LD_INT 0
23576: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23577: LD_VAR 0 1
23581: PPUSH
23582: CALL_OW 264
23586: PUSH
23587: LD_INT 81
23589: EQUAL
23590: NOT
23591: IFFALSE 23595
// exit ;
23593: GO 23835
// index := GetElementIndex ( minersList , unit ) ;
23595: LD_ADDR_VAR 0 5
23599: PUSH
23600: LD_EXP 84
23604: PPUSH
23605: LD_VAR 0 1
23609: PPUSH
23610: CALL 30131 0 2
23614: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23615: LD_EXP 85
23619: PUSH
23620: LD_VAR 0 5
23624: ARRAY
23625: PUSH
23626: LD_EXP 86
23630: GREATEREQUAL
23631: IFFALSE 23635
// exit ;
23633: GO 23835
// ComMoveXY ( unit , x , y ) ;
23635: LD_VAR 0 1
23639: PPUSH
23640: LD_VAR 0 2
23644: PPUSH
23645: LD_VAR 0 3
23649: PPUSH
23650: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23654: LD_INT 35
23656: PPUSH
23657: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23661: LD_VAR 0 1
23665: PPUSH
23666: LD_VAR 0 2
23670: PPUSH
23671: LD_VAR 0 3
23675: PPUSH
23676: CALL 61486 0 3
23680: NOT
23681: PUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL_OW 314
23691: AND
23692: IFFALSE 23696
// exit ;
23694: GO 23835
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 3
23705: PPUSH
23706: CALL_OW 428
23710: PUSH
23711: LD_VAR 0 1
23715: EQUAL
23716: PUSH
23717: LD_VAR 0 1
23721: PPUSH
23722: CALL_OW 314
23726: NOT
23727: AND
23728: IFFALSE 23654
// PlaySoundXY ( x , y , PlantMine ) ;
23730: LD_VAR 0 2
23734: PPUSH
23735: LD_VAR 0 3
23739: PPUSH
23740: LD_STRING PlantMine
23742: PPUSH
23743: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23747: LD_VAR 0 2
23751: PPUSH
23752: LD_VAR 0 3
23756: PPUSH
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 255
23766: PPUSH
23767: LD_INT 0
23769: PPUSH
23770: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23774: LD_ADDR_EXP 85
23778: PUSH
23779: LD_EXP 85
23783: PPUSH
23784: LD_VAR 0 5
23788: PUSH
23789: LD_EXP 85
23793: PUSH
23794: LD_VAR 0 5
23798: ARRAY
23799: PUSH
23800: LD_INT 1
23802: PLUS
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PPUSH
23808: LD_VAR 0 2
23812: PUSH
23813: LD_VAR 0 3
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PPUSH
23822: CALL 30346 0 3
23826: ST_TO_ADDR
// result := true ;
23827: LD_ADDR_VAR 0 4
23831: PUSH
23832: LD_INT 1
23834: ST_TO_ADDR
// end ;
23835: LD_VAR 0 4
23839: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23840: LD_INT 0
23842: PPUSH
23843: PPUSH
23844: PPUSH
// if not unit in minersList then
23845: LD_VAR 0 1
23849: PUSH
23850: LD_EXP 84
23854: IN
23855: NOT
23856: IFFALSE 23860
// exit ;
23858: GO 24252
// index := GetElementIndex ( minersList , unit ) ;
23860: LD_ADDR_VAR 0 6
23864: PUSH
23865: LD_EXP 84
23869: PPUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL 30131 0 2
23879: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23880: LD_ADDR_VAR 0 5
23884: PUSH
23885: DOUBLE
23886: LD_EXP 85
23890: PUSH
23891: LD_VAR 0 6
23895: ARRAY
23896: INC
23897: ST_TO_ADDR
23898: LD_INT 1
23900: PUSH
23901: FOR_DOWNTO
23902: IFFALSE 24063
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23904: LD_EXP 85
23908: PUSH
23909: LD_VAR 0 6
23913: ARRAY
23914: PUSH
23915: LD_VAR 0 5
23919: ARRAY
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PUSH
23925: LD_VAR 0 2
23929: EQUAL
23930: PUSH
23931: LD_EXP 85
23935: PUSH
23936: LD_VAR 0 6
23940: ARRAY
23941: PUSH
23942: LD_VAR 0 5
23946: ARRAY
23947: PUSH
23948: LD_INT 2
23950: ARRAY
23951: PUSH
23952: LD_VAR 0 3
23956: EQUAL
23957: AND
23958: IFFALSE 24061
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23960: LD_EXP 85
23964: PUSH
23965: LD_VAR 0 6
23969: ARRAY
23970: PUSH
23971: LD_VAR 0 5
23975: ARRAY
23976: PUSH
23977: LD_INT 1
23979: ARRAY
23980: PPUSH
23981: LD_EXP 85
23985: PUSH
23986: LD_VAR 0 6
23990: ARRAY
23991: PUSH
23992: LD_VAR 0 5
23996: ARRAY
23997: PUSH
23998: LD_INT 2
24000: ARRAY
24001: PPUSH
24002: LD_VAR 0 1
24006: PPUSH
24007: CALL_OW 255
24011: PPUSH
24012: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24016: LD_ADDR_EXP 85
24020: PUSH
24021: LD_EXP 85
24025: PPUSH
24026: LD_VAR 0 6
24030: PPUSH
24031: LD_EXP 85
24035: PUSH
24036: LD_VAR 0 6
24040: ARRAY
24041: PPUSH
24042: LD_VAR 0 5
24046: PPUSH
24047: CALL_OW 3
24051: PPUSH
24052: CALL_OW 1
24056: ST_TO_ADDR
// exit ;
24057: POP
24058: POP
24059: GO 24252
// end ; end ;
24061: GO 23901
24063: POP
24064: POP
// for i := minerMinesList [ index ] downto 1 do
24065: LD_ADDR_VAR 0 5
24069: PUSH
24070: DOUBLE
24071: LD_EXP 85
24075: PUSH
24076: LD_VAR 0 6
24080: ARRAY
24081: INC
24082: ST_TO_ADDR
24083: LD_INT 1
24085: PUSH
24086: FOR_DOWNTO
24087: IFFALSE 24250
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24089: LD_EXP 85
24093: PUSH
24094: LD_VAR 0 6
24098: ARRAY
24099: PUSH
24100: LD_VAR 0 5
24104: ARRAY
24105: PUSH
24106: LD_INT 1
24108: ARRAY
24109: PPUSH
24110: LD_EXP 85
24114: PUSH
24115: LD_VAR 0 6
24119: ARRAY
24120: PUSH
24121: LD_VAR 0 5
24125: ARRAY
24126: PUSH
24127: LD_INT 2
24129: ARRAY
24130: PPUSH
24131: LD_VAR 0 2
24135: PPUSH
24136: LD_VAR 0 3
24140: PPUSH
24141: CALL_OW 298
24145: PUSH
24146: LD_INT 6
24148: LESS
24149: IFFALSE 24248
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24151: LD_EXP 85
24155: PUSH
24156: LD_VAR 0 6
24160: ARRAY
24161: PUSH
24162: LD_VAR 0 5
24166: ARRAY
24167: PUSH
24168: LD_INT 1
24170: ARRAY
24171: PPUSH
24172: LD_EXP 85
24176: PUSH
24177: LD_VAR 0 6
24181: ARRAY
24182: PUSH
24183: LD_VAR 0 5
24187: ARRAY
24188: PUSH
24189: LD_INT 2
24191: ARRAY
24192: PPUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL_OW 255
24202: PPUSH
24203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24207: LD_ADDR_EXP 85
24211: PUSH
24212: LD_EXP 85
24216: PPUSH
24217: LD_VAR 0 6
24221: PPUSH
24222: LD_EXP 85
24226: PUSH
24227: LD_VAR 0 6
24231: ARRAY
24232: PPUSH
24233: LD_VAR 0 5
24237: PPUSH
24238: CALL_OW 3
24242: PPUSH
24243: CALL_OW 1
24247: ST_TO_ADDR
// end ; end ;
24248: GO 24086
24250: POP
24251: POP
// end ;
24252: LD_VAR 0 4
24256: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24257: LD_INT 0
24259: PPUSH
24260: PPUSH
24261: PPUSH
24262: PPUSH
24263: PPUSH
24264: PPUSH
24265: PPUSH
24266: PPUSH
24267: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 264
24277: PUSH
24278: LD_INT 81
24280: EQUAL
24281: NOT
24282: PUSH
24283: LD_VAR 0 1
24287: PUSH
24288: LD_EXP 84
24292: IN
24293: NOT
24294: OR
24295: IFFALSE 24299
// exit ;
24297: GO 24621
// index := GetElementIndex ( minersList , unit ) ;
24299: LD_ADDR_VAR 0 6
24303: PUSH
24304: LD_EXP 84
24308: PPUSH
24309: LD_VAR 0 1
24313: PPUSH
24314: CALL 30131 0 2
24318: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24319: LD_ADDR_VAR 0 8
24323: PUSH
24324: LD_EXP 86
24328: PUSH
24329: LD_EXP 85
24333: PUSH
24334: LD_VAR 0 6
24338: ARRAY
24339: MINUS
24340: ST_TO_ADDR
// if not minesFreeAmount then
24341: LD_VAR 0 8
24345: NOT
24346: IFFALSE 24350
// exit ;
24348: GO 24621
// tmp := [ ] ;
24350: LD_ADDR_VAR 0 7
24354: PUSH
24355: EMPTY
24356: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24357: LD_ADDR_VAR 0 5
24361: PUSH
24362: DOUBLE
24363: LD_INT 1
24365: DEC
24366: ST_TO_ADDR
24367: LD_VAR 0 8
24371: PUSH
24372: FOR_TO
24373: IFFALSE 24568
// begin _d := rand ( 0 , 5 ) ;
24375: LD_ADDR_VAR 0 11
24379: PUSH
24380: LD_INT 0
24382: PPUSH
24383: LD_INT 5
24385: PPUSH
24386: CALL_OW 12
24390: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24391: LD_ADDR_VAR 0 12
24395: PUSH
24396: LD_INT 2
24398: PPUSH
24399: LD_INT 6
24401: PPUSH
24402: CALL_OW 12
24406: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24407: LD_ADDR_VAR 0 9
24411: PUSH
24412: LD_VAR 0 2
24416: PPUSH
24417: LD_VAR 0 11
24421: PPUSH
24422: LD_VAR 0 12
24426: PPUSH
24427: CALL_OW 272
24431: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24432: LD_ADDR_VAR 0 10
24436: PUSH
24437: LD_VAR 0 3
24441: PPUSH
24442: LD_VAR 0 11
24446: PPUSH
24447: LD_VAR 0 12
24451: PPUSH
24452: CALL_OW 273
24456: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24457: LD_VAR 0 9
24461: PPUSH
24462: LD_VAR 0 10
24466: PPUSH
24467: CALL_OW 488
24471: PUSH
24472: LD_VAR 0 9
24476: PUSH
24477: LD_VAR 0 10
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_VAR 0 7
24490: IN
24491: NOT
24492: AND
24493: PUSH
24494: LD_VAR 0 9
24498: PPUSH
24499: LD_VAR 0 10
24503: PPUSH
24504: CALL_OW 458
24508: NOT
24509: AND
24510: IFFALSE 24552
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24512: LD_ADDR_VAR 0 7
24516: PUSH
24517: LD_VAR 0 7
24521: PPUSH
24522: LD_VAR 0 7
24526: PUSH
24527: LD_INT 1
24529: PLUS
24530: PPUSH
24531: LD_VAR 0 9
24535: PUSH
24536: LD_VAR 0 10
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PPUSH
24545: CALL_OW 1
24549: ST_TO_ADDR
24550: GO 24566
// i := i - 1 ;
24552: LD_ADDR_VAR 0 5
24556: PUSH
24557: LD_VAR 0 5
24561: PUSH
24562: LD_INT 1
24564: MINUS
24565: ST_TO_ADDR
// end ;
24566: GO 24372
24568: POP
24569: POP
// for i in tmp do
24570: LD_ADDR_VAR 0 5
24574: PUSH
24575: LD_VAR 0 7
24579: PUSH
24580: FOR_IN
24581: IFFALSE 24619
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24583: LD_VAR 0 1
24587: PPUSH
24588: LD_VAR 0 5
24592: PUSH
24593: LD_INT 1
24595: ARRAY
24596: PPUSH
24597: LD_VAR 0 5
24601: PUSH
24602: LD_INT 2
24604: ARRAY
24605: PPUSH
24606: CALL 23565 0 3
24610: NOT
24611: IFFALSE 24617
// exit ;
24613: POP
24614: POP
24615: GO 24621
24617: GO 24580
24619: POP
24620: POP
// end ;
24621: LD_VAR 0 4
24625: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24626: LD_INT 0
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
// if not GetClass ( unit ) = class_sniper then
24635: LD_VAR 0 1
24639: PPUSH
24640: CALL_OW 257
24644: PUSH
24645: LD_INT 5
24647: EQUAL
24648: NOT
24649: IFFALSE 24653
// exit ;
24651: GO 25041
// dist := 8 ;
24653: LD_ADDR_VAR 0 5
24657: PUSH
24658: LD_INT 8
24660: ST_TO_ADDR
// viewRange := 12 ;
24661: LD_ADDR_VAR 0 7
24665: PUSH
24666: LD_INT 12
24668: ST_TO_ADDR
// side := GetSide ( unit ) ;
24669: LD_ADDR_VAR 0 6
24673: PUSH
24674: LD_VAR 0 1
24678: PPUSH
24679: CALL_OW 255
24683: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24684: LD_INT 61
24686: PPUSH
24687: LD_VAR 0 6
24691: PPUSH
24692: CALL_OW 321
24696: PUSH
24697: LD_INT 2
24699: EQUAL
24700: IFFALSE 24710
// viewRange := 16 ;
24702: LD_ADDR_VAR 0 7
24706: PUSH
24707: LD_INT 16
24709: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24710: LD_VAR 0 1
24714: PPUSH
24715: LD_VAR 0 2
24719: PPUSH
24720: LD_VAR 0 3
24724: PPUSH
24725: CALL_OW 297
24729: PUSH
24730: LD_VAR 0 5
24734: GREATER
24735: IFFALSE 24814
// begin ComMoveXY ( unit , x , y ) ;
24737: LD_VAR 0 1
24741: PPUSH
24742: LD_VAR 0 2
24746: PPUSH
24747: LD_VAR 0 3
24751: PPUSH
24752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24756: LD_INT 35
24758: PPUSH
24759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24763: LD_VAR 0 1
24767: PPUSH
24768: LD_VAR 0 2
24772: PPUSH
24773: LD_VAR 0 3
24777: PPUSH
24778: CALL 61486 0 3
24782: NOT
24783: IFFALSE 24787
// exit ;
24785: GO 25041
// until GetDistUnitXY ( unit , x , y ) < dist ;
24787: LD_VAR 0 1
24791: PPUSH
24792: LD_VAR 0 2
24796: PPUSH
24797: LD_VAR 0 3
24801: PPUSH
24802: CALL_OW 297
24806: PUSH
24807: LD_VAR 0 5
24811: LESS
24812: IFFALSE 24756
// end ; ComTurnXY ( unit , x , y ) ;
24814: LD_VAR 0 1
24818: PPUSH
24819: LD_VAR 0 2
24823: PPUSH
24824: LD_VAR 0 3
24828: PPUSH
24829: CALL_OW 118
// wait ( 5 ) ;
24833: LD_INT 5
24835: PPUSH
24836: CALL_OW 67
// _d := GetDir ( unit ) ;
24840: LD_ADDR_VAR 0 10
24844: PUSH
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 254
24854: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24855: LD_ADDR_VAR 0 8
24859: PUSH
24860: LD_VAR 0 1
24864: PPUSH
24865: CALL_OW 250
24869: PPUSH
24870: LD_VAR 0 10
24874: PPUSH
24875: LD_VAR 0 5
24879: PPUSH
24880: CALL_OW 272
24884: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24885: LD_ADDR_VAR 0 9
24889: PUSH
24890: LD_VAR 0 1
24894: PPUSH
24895: CALL_OW 251
24899: PPUSH
24900: LD_VAR 0 10
24904: PPUSH
24905: LD_VAR 0 5
24909: PPUSH
24910: CALL_OW 273
24914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24915: LD_VAR 0 8
24919: PPUSH
24920: LD_VAR 0 9
24924: PPUSH
24925: CALL_OW 488
24929: NOT
24930: IFFALSE 24934
// exit ;
24932: GO 25041
// ComAnimCustom ( unit , 1 ) ;
24934: LD_VAR 0 1
24938: PPUSH
24939: LD_INT 1
24941: PPUSH
24942: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24946: LD_VAR 0 8
24950: PPUSH
24951: LD_VAR 0 9
24955: PPUSH
24956: LD_VAR 0 6
24960: PPUSH
24961: LD_VAR 0 7
24965: PPUSH
24966: CALL_OW 330
// repeat wait ( 1 ) ;
24970: LD_INT 1
24972: PPUSH
24973: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24977: LD_VAR 0 1
24981: PPUSH
24982: CALL_OW 316
24986: PUSH
24987: LD_VAR 0 1
24991: PPUSH
24992: CALL_OW 314
24996: OR
24997: PUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: CALL_OW 302
25007: NOT
25008: OR
25009: PUSH
25010: LD_VAR 0 1
25014: PPUSH
25015: CALL_OW 301
25019: OR
25020: IFFALSE 24970
// RemoveSeeing ( _x , _y , side ) ;
25022: LD_VAR 0 8
25026: PPUSH
25027: LD_VAR 0 9
25031: PPUSH
25032: LD_VAR 0 6
25036: PPUSH
25037: CALL_OW 331
// end ; end_of_file
25041: LD_VAR 0 4
25045: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25046: LD_VAR 0 1
25050: PUSH
25051: LD_INT 200
25053: DOUBLE
25054: GREATEREQUAL
25055: IFFALSE 25063
25057: LD_INT 299
25059: DOUBLE
25060: LESSEQUAL
25061: IFTRUE 25065
25063: GO 25097
25065: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25066: LD_VAR 0 1
25070: PPUSH
25071: LD_VAR 0 2
25075: PPUSH
25076: LD_VAR 0 3
25080: PPUSH
25081: LD_VAR 0 4
25085: PPUSH
25086: LD_VAR 0 5
25090: PPUSH
25091: CALL 21133 0 5
25095: GO 25174
25097: LD_INT 300
25099: DOUBLE
25100: GREATEREQUAL
25101: IFFALSE 25109
25103: LD_INT 399
25105: DOUBLE
25106: LESSEQUAL
25107: IFTRUE 25111
25109: GO 25173
25111: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25112: LD_VAR 0 1
25116: PPUSH
25117: LD_VAR 0 2
25121: PPUSH
25122: LD_VAR 0 3
25126: PPUSH
25127: LD_VAR 0 4
25131: PPUSH
25132: LD_VAR 0 5
25136: PPUSH
25137: LD_VAR 0 6
25141: PPUSH
25142: LD_VAR 0 7
25146: PPUSH
25147: LD_VAR 0 8
25151: PPUSH
25152: LD_VAR 0 9
25156: PPUSH
25157: LD_VAR 0 10
25161: PPUSH
25162: LD_VAR 0 11
25166: PPUSH
25167: CALL 17466 0 11
25171: GO 25174
25173: POP
// end ;
25174: PPOPN 11
25176: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25177: LD_VAR 0 1
25181: PPUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: LD_VAR 0 4
25196: PPUSH
25197: LD_VAR 0 5
25201: PPUSH
25202: CALL 20869 0 5
// end ; end_of_file
25206: PPOPN 5
25208: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25209: LD_INT 0
25211: PPUSH
25212: PPUSH
// if exist_mode then
25213: LD_VAR 0 2
25217: IFFALSE 25242
// unit := CreateCharacter ( prefix & ident ) else
25219: LD_ADDR_VAR 0 5
25223: PUSH
25224: LD_VAR 0 3
25228: PUSH
25229: LD_VAR 0 1
25233: STR
25234: PPUSH
25235: CALL_OW 34
25239: ST_TO_ADDR
25240: GO 25257
// unit := NewCharacter ( ident ) ;
25242: LD_ADDR_VAR 0 5
25246: PUSH
25247: LD_VAR 0 1
25251: PPUSH
25252: CALL_OW 25
25256: ST_TO_ADDR
// result := unit ;
25257: LD_ADDR_VAR 0 4
25261: PUSH
25262: LD_VAR 0 5
25266: ST_TO_ADDR
// end ;
25267: LD_VAR 0 4
25271: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25272: LD_INT 0
25274: PPUSH
25275: PPUSH
// if not side or not nation then
25276: LD_VAR 0 1
25280: NOT
25281: PUSH
25282: LD_VAR 0 2
25286: NOT
25287: OR
25288: IFFALSE 25292
// exit ;
25290: GO 26060
// case nation of nation_american :
25292: LD_VAR 0 2
25296: PUSH
25297: LD_INT 1
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25519
25305: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25306: LD_ADDR_VAR 0 4
25310: PUSH
25311: LD_INT 35
25313: PUSH
25314: LD_INT 45
25316: PUSH
25317: LD_INT 46
25319: PUSH
25320: LD_INT 47
25322: PUSH
25323: LD_INT 82
25325: PUSH
25326: LD_INT 83
25328: PUSH
25329: LD_INT 84
25331: PUSH
25332: LD_INT 85
25334: PUSH
25335: LD_INT 86
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: LD_INT 6
25346: PUSH
25347: LD_INT 15
25349: PUSH
25350: LD_INT 16
25352: PUSH
25353: LD_INT 7
25355: PUSH
25356: LD_INT 12
25358: PUSH
25359: LD_INT 13
25361: PUSH
25362: LD_INT 10
25364: PUSH
25365: LD_INT 14
25367: PUSH
25368: LD_INT 20
25370: PUSH
25371: LD_INT 21
25373: PUSH
25374: LD_INT 22
25376: PUSH
25377: LD_INT 25
25379: PUSH
25380: LD_INT 32
25382: PUSH
25383: LD_INT 27
25385: PUSH
25386: LD_INT 36
25388: PUSH
25389: LD_INT 69
25391: PUSH
25392: LD_INT 39
25394: PUSH
25395: LD_INT 34
25397: PUSH
25398: LD_INT 40
25400: PUSH
25401: LD_INT 48
25403: PUSH
25404: LD_INT 49
25406: PUSH
25407: LD_INT 50
25409: PUSH
25410: LD_INT 51
25412: PUSH
25413: LD_INT 52
25415: PUSH
25416: LD_INT 53
25418: PUSH
25419: LD_INT 54
25421: PUSH
25422: LD_INT 55
25424: PUSH
25425: LD_INT 56
25427: PUSH
25428: LD_INT 57
25430: PUSH
25431: LD_INT 58
25433: PUSH
25434: LD_INT 59
25436: PUSH
25437: LD_INT 60
25439: PUSH
25440: LD_INT 61
25442: PUSH
25443: LD_INT 62
25445: PUSH
25446: LD_INT 80
25448: PUSH
25449: LD_INT 82
25451: PUSH
25452: LD_INT 83
25454: PUSH
25455: LD_INT 84
25457: PUSH
25458: LD_INT 85
25460: PUSH
25461: LD_INT 86
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: ST_TO_ADDR
25517: GO 25984
25519: LD_INT 2
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25753
25527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25528: LD_ADDR_VAR 0 4
25532: PUSH
25533: LD_INT 35
25535: PUSH
25536: LD_INT 45
25538: PUSH
25539: LD_INT 46
25541: PUSH
25542: LD_INT 47
25544: PUSH
25545: LD_INT 82
25547: PUSH
25548: LD_INT 83
25550: PUSH
25551: LD_INT 84
25553: PUSH
25554: LD_INT 85
25556: PUSH
25557: LD_INT 87
25559: PUSH
25560: LD_INT 70
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: LD_INT 11
25568: PUSH
25569: LD_INT 3
25571: PUSH
25572: LD_INT 4
25574: PUSH
25575: LD_INT 5
25577: PUSH
25578: LD_INT 6
25580: PUSH
25581: LD_INT 15
25583: PUSH
25584: LD_INT 18
25586: PUSH
25587: LD_INT 7
25589: PUSH
25590: LD_INT 17
25592: PUSH
25593: LD_INT 8
25595: PUSH
25596: LD_INT 20
25598: PUSH
25599: LD_INT 21
25601: PUSH
25602: LD_INT 22
25604: PUSH
25605: LD_INT 72
25607: PUSH
25608: LD_INT 26
25610: PUSH
25611: LD_INT 69
25613: PUSH
25614: LD_INT 39
25616: PUSH
25617: LD_INT 40
25619: PUSH
25620: LD_INT 41
25622: PUSH
25623: LD_INT 42
25625: PUSH
25626: LD_INT 43
25628: PUSH
25629: LD_INT 48
25631: PUSH
25632: LD_INT 49
25634: PUSH
25635: LD_INT 50
25637: PUSH
25638: LD_INT 51
25640: PUSH
25641: LD_INT 52
25643: PUSH
25644: LD_INT 53
25646: PUSH
25647: LD_INT 54
25649: PUSH
25650: LD_INT 55
25652: PUSH
25653: LD_INT 56
25655: PUSH
25656: LD_INT 60
25658: PUSH
25659: LD_INT 61
25661: PUSH
25662: LD_INT 62
25664: PUSH
25665: LD_INT 66
25667: PUSH
25668: LD_INT 67
25670: PUSH
25671: LD_INT 68
25673: PUSH
25674: LD_INT 81
25676: PUSH
25677: LD_INT 82
25679: PUSH
25680: LD_INT 83
25682: PUSH
25683: LD_INT 84
25685: PUSH
25686: LD_INT 85
25688: PUSH
25689: LD_INT 87
25691: PUSH
25692: LD_INT 88
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: ST_TO_ADDR
25751: GO 25984
25753: LD_INT 3
25755: DOUBLE
25756: EQUAL
25757: IFTRUE 25761
25759: GO 25983
25761: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25762: LD_ADDR_VAR 0 4
25766: PUSH
25767: LD_INT 46
25769: PUSH
25770: LD_INT 47
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 82
25781: PUSH
25782: LD_INT 83
25784: PUSH
25785: LD_INT 84
25787: PUSH
25788: LD_INT 85
25790: PUSH
25791: LD_INT 86
25793: PUSH
25794: LD_INT 11
25796: PUSH
25797: LD_INT 9
25799: PUSH
25800: LD_INT 20
25802: PUSH
25803: LD_INT 19
25805: PUSH
25806: LD_INT 21
25808: PUSH
25809: LD_INT 24
25811: PUSH
25812: LD_INT 22
25814: PUSH
25815: LD_INT 25
25817: PUSH
25818: LD_INT 28
25820: PUSH
25821: LD_INT 29
25823: PUSH
25824: LD_INT 30
25826: PUSH
25827: LD_INT 31
25829: PUSH
25830: LD_INT 37
25832: PUSH
25833: LD_INT 38
25835: PUSH
25836: LD_INT 32
25838: PUSH
25839: LD_INT 27
25841: PUSH
25842: LD_INT 33
25844: PUSH
25845: LD_INT 69
25847: PUSH
25848: LD_INT 39
25850: PUSH
25851: LD_INT 34
25853: PUSH
25854: LD_INT 40
25856: PUSH
25857: LD_INT 71
25859: PUSH
25860: LD_INT 23
25862: PUSH
25863: LD_INT 44
25865: PUSH
25866: LD_INT 48
25868: PUSH
25869: LD_INT 49
25871: PUSH
25872: LD_INT 50
25874: PUSH
25875: LD_INT 51
25877: PUSH
25878: LD_INT 52
25880: PUSH
25881: LD_INT 53
25883: PUSH
25884: LD_INT 54
25886: PUSH
25887: LD_INT 55
25889: PUSH
25890: LD_INT 56
25892: PUSH
25893: LD_INT 57
25895: PUSH
25896: LD_INT 58
25898: PUSH
25899: LD_INT 59
25901: PUSH
25902: LD_INT 63
25904: PUSH
25905: LD_INT 64
25907: PUSH
25908: LD_INT 65
25910: PUSH
25911: LD_INT 82
25913: PUSH
25914: LD_INT 83
25916: PUSH
25917: LD_INT 84
25919: PUSH
25920: LD_INT 85
25922: PUSH
25923: LD_INT 86
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: ST_TO_ADDR
25981: GO 25984
25983: POP
// if state > - 1 and state < 3 then
25984: LD_VAR 0 3
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: GREATER
25993: PUSH
25994: LD_VAR 0 3
25998: PUSH
25999: LD_INT 3
26001: LESS
26002: AND
26003: IFFALSE 26060
// for i in result do
26005: LD_ADDR_VAR 0 5
26009: PUSH
26010: LD_VAR 0 4
26014: PUSH
26015: FOR_IN
26016: IFFALSE 26058
// if GetTech ( i , side ) <> state then
26018: LD_VAR 0 5
26022: PPUSH
26023: LD_VAR 0 1
26027: PPUSH
26028: CALL_OW 321
26032: PUSH
26033: LD_VAR 0 3
26037: NONEQUAL
26038: IFFALSE 26056
// result := result diff i ;
26040: LD_ADDR_VAR 0 4
26044: PUSH
26045: LD_VAR 0 4
26049: PUSH
26050: LD_VAR 0 5
26054: DIFF
26055: ST_TO_ADDR
26056: GO 26015
26058: POP
26059: POP
// end ;
26060: LD_VAR 0 4
26064: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26065: LD_INT 0
26067: PPUSH
26068: PPUSH
26069: PPUSH
// result := true ;
26070: LD_ADDR_VAR 0 3
26074: PUSH
26075: LD_INT 1
26077: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26078: LD_ADDR_VAR 0 5
26082: PUSH
26083: LD_VAR 0 2
26087: PPUSH
26088: CALL_OW 480
26092: ST_TO_ADDR
// if not tmp then
26093: LD_VAR 0 5
26097: NOT
26098: IFFALSE 26102
// exit ;
26100: GO 26151
// for i in tmp do
26102: LD_ADDR_VAR 0 4
26106: PUSH
26107: LD_VAR 0 5
26111: PUSH
26112: FOR_IN
26113: IFFALSE 26149
// if GetTech ( i , side ) <> state_researched then
26115: LD_VAR 0 4
26119: PPUSH
26120: LD_VAR 0 1
26124: PPUSH
26125: CALL_OW 321
26129: PUSH
26130: LD_INT 2
26132: NONEQUAL
26133: IFFALSE 26147
// begin result := false ;
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_INT 0
26142: ST_TO_ADDR
// exit ;
26143: POP
26144: POP
26145: GO 26151
// end ;
26147: GO 26112
26149: POP
26150: POP
// end ;
26151: LD_VAR 0 3
26155: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26156: LD_INT 0
26158: PPUSH
26159: PPUSH
26160: PPUSH
26161: PPUSH
26162: PPUSH
26163: PPUSH
26164: PPUSH
26165: PPUSH
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
26170: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26171: LD_VAR 0 1
26175: NOT
26176: PUSH
26177: LD_VAR 0 1
26181: PPUSH
26182: CALL_OW 257
26186: PUSH
26187: LD_INT 9
26189: NONEQUAL
26190: OR
26191: IFFALSE 26195
// exit ;
26193: GO 26768
// side := GetSide ( unit ) ;
26195: LD_ADDR_VAR 0 9
26199: PUSH
26200: LD_VAR 0 1
26204: PPUSH
26205: CALL_OW 255
26209: ST_TO_ADDR
// tech_space := tech_spacanom ;
26210: LD_ADDR_VAR 0 12
26214: PUSH
26215: LD_INT 29
26217: ST_TO_ADDR
// tech_time := tech_taurad ;
26218: LD_ADDR_VAR 0 13
26222: PUSH
26223: LD_INT 28
26225: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26226: LD_ADDR_VAR 0 11
26230: PUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 310
26240: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26241: LD_VAR 0 11
26245: PPUSH
26246: CALL_OW 247
26250: PUSH
26251: LD_INT 2
26253: EQUAL
26254: IFFALSE 26258
// exit ;
26256: GO 26768
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26258: LD_ADDR_VAR 0 8
26262: PUSH
26263: LD_INT 81
26265: PUSH
26266: LD_VAR 0 9
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 3
26277: PUSH
26278: LD_INT 21
26280: PUSH
26281: LD_INT 3
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PPUSH
26296: CALL_OW 69
26300: ST_TO_ADDR
// if not tmp then
26301: LD_VAR 0 8
26305: NOT
26306: IFFALSE 26310
// exit ;
26308: GO 26768
// if in_unit then
26310: LD_VAR 0 11
26314: IFFALSE 26338
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26316: LD_ADDR_VAR 0 10
26320: PUSH
26321: LD_VAR 0 8
26325: PPUSH
26326: LD_VAR 0 11
26330: PPUSH
26331: CALL_OW 74
26335: ST_TO_ADDR
26336: GO 26358
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26338: LD_ADDR_VAR 0 10
26342: PUSH
26343: LD_VAR 0 8
26347: PPUSH
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL_OW 74
26357: ST_TO_ADDR
// if not enemy then
26358: LD_VAR 0 10
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 26768
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26367: LD_VAR 0 11
26371: PUSH
26372: LD_VAR 0 11
26376: PPUSH
26377: LD_VAR 0 10
26381: PPUSH
26382: CALL_OW 296
26386: PUSH
26387: LD_INT 13
26389: GREATER
26390: AND
26391: PUSH
26392: LD_VAR 0 1
26396: PPUSH
26397: LD_VAR 0 10
26401: PPUSH
26402: CALL_OW 296
26406: PUSH
26407: LD_INT 12
26409: GREATER
26410: OR
26411: IFFALSE 26415
// exit ;
26413: GO 26768
// missile := [ 1 ] ;
26415: LD_ADDR_VAR 0 14
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26426: LD_VAR 0 9
26430: PPUSH
26431: LD_VAR 0 12
26435: PPUSH
26436: CALL_OW 325
26440: IFFALSE 26469
// missile := Replace ( missile , missile + 1 , 2 ) ;
26442: LD_ADDR_VAR 0 14
26446: PUSH
26447: LD_VAR 0 14
26451: PPUSH
26452: LD_VAR 0 14
26456: PUSH
26457: LD_INT 1
26459: PLUS
26460: PPUSH
26461: LD_INT 2
26463: PPUSH
26464: CALL_OW 1
26468: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26469: LD_VAR 0 9
26473: PPUSH
26474: LD_VAR 0 13
26478: PPUSH
26479: CALL_OW 325
26483: PUSH
26484: LD_VAR 0 10
26488: PPUSH
26489: CALL_OW 255
26493: PPUSH
26494: LD_VAR 0 13
26498: PPUSH
26499: CALL_OW 325
26503: NOT
26504: AND
26505: IFFALSE 26534
// missile := Replace ( missile , missile + 1 , 3 ) ;
26507: LD_ADDR_VAR 0 14
26511: PUSH
26512: LD_VAR 0 14
26516: PPUSH
26517: LD_VAR 0 14
26521: PUSH
26522: LD_INT 1
26524: PLUS
26525: PPUSH
26526: LD_INT 3
26528: PPUSH
26529: CALL_OW 1
26533: ST_TO_ADDR
// if missile < 2 then
26534: LD_VAR 0 14
26538: PUSH
26539: LD_INT 2
26541: LESS
26542: IFFALSE 26546
// exit ;
26544: GO 26768
// x := GetX ( enemy ) ;
26546: LD_ADDR_VAR 0 4
26550: PUSH
26551: LD_VAR 0 10
26555: PPUSH
26556: CALL_OW 250
26560: ST_TO_ADDR
// y := GetY ( enemy ) ;
26561: LD_ADDR_VAR 0 5
26565: PUSH
26566: LD_VAR 0 10
26570: PPUSH
26571: CALL_OW 251
26575: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26576: LD_ADDR_VAR 0 6
26580: PUSH
26581: LD_VAR 0 4
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PPUSH
26590: LD_INT 1
26592: PPUSH
26593: CALL_OW 12
26597: PLUS
26598: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26599: LD_ADDR_VAR 0 7
26603: PUSH
26604: LD_VAR 0 5
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PPUSH
26613: LD_INT 1
26615: PPUSH
26616: CALL_OW 12
26620: PLUS
26621: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26622: LD_VAR 0 6
26626: PPUSH
26627: LD_VAR 0 7
26631: PPUSH
26632: CALL_OW 488
26636: NOT
26637: IFFALSE 26659
// begin _x := x ;
26639: LD_ADDR_VAR 0 6
26643: PUSH
26644: LD_VAR 0 4
26648: ST_TO_ADDR
// _y := y ;
26649: LD_ADDR_VAR 0 7
26653: PUSH
26654: LD_VAR 0 5
26658: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26659: LD_ADDR_VAR 0 3
26663: PUSH
26664: LD_INT 1
26666: PPUSH
26667: LD_VAR 0 14
26671: PPUSH
26672: CALL_OW 12
26676: ST_TO_ADDR
// case i of 1 :
26677: LD_VAR 0 3
26681: PUSH
26682: LD_INT 1
26684: DOUBLE
26685: EQUAL
26686: IFTRUE 26690
26688: GO 26707
26690: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26691: LD_VAR 0 1
26695: PPUSH
26696: LD_VAR 0 10
26700: PPUSH
26701: CALL_OW 115
26705: GO 26768
26707: LD_INT 2
26709: DOUBLE
26710: EQUAL
26711: IFTRUE 26715
26713: GO 26737
26715: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26716: LD_VAR 0 1
26720: PPUSH
26721: LD_VAR 0 6
26725: PPUSH
26726: LD_VAR 0 7
26730: PPUSH
26731: CALL_OW 153
26735: GO 26768
26737: LD_INT 3
26739: DOUBLE
26740: EQUAL
26741: IFTRUE 26745
26743: GO 26767
26745: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26746: LD_VAR 0 1
26750: PPUSH
26751: LD_VAR 0 6
26755: PPUSH
26756: LD_VAR 0 7
26760: PPUSH
26761: CALL_OW 154
26765: GO 26768
26767: POP
// end ;
26768: LD_VAR 0 2
26772: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26773: LD_INT 0
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
26780: PPUSH
// if not unit or not building then
26781: LD_VAR 0 1
26785: NOT
26786: PUSH
26787: LD_VAR 0 2
26791: NOT
26792: OR
26793: IFFALSE 26797
// exit ;
26795: GO 26955
// x := GetX ( building ) ;
26797: LD_ADDR_VAR 0 5
26801: PUSH
26802: LD_VAR 0 2
26806: PPUSH
26807: CALL_OW 250
26811: ST_TO_ADDR
// y := GetY ( building ) ;
26812: LD_ADDR_VAR 0 6
26816: PUSH
26817: LD_VAR 0 2
26821: PPUSH
26822: CALL_OW 251
26826: ST_TO_ADDR
// for i = 0 to 5 do
26827: LD_ADDR_VAR 0 4
26831: PUSH
26832: DOUBLE
26833: LD_INT 0
26835: DEC
26836: ST_TO_ADDR
26837: LD_INT 5
26839: PUSH
26840: FOR_TO
26841: IFFALSE 26953
// begin _x := ShiftX ( x , i , 3 ) ;
26843: LD_ADDR_VAR 0 7
26847: PUSH
26848: LD_VAR 0 5
26852: PPUSH
26853: LD_VAR 0 4
26857: PPUSH
26858: LD_INT 3
26860: PPUSH
26861: CALL_OW 272
26865: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26866: LD_ADDR_VAR 0 8
26870: PUSH
26871: LD_VAR 0 6
26875: PPUSH
26876: LD_VAR 0 4
26880: PPUSH
26881: LD_INT 3
26883: PPUSH
26884: CALL_OW 273
26888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26889: LD_VAR 0 7
26893: PPUSH
26894: LD_VAR 0 8
26898: PPUSH
26899: CALL_OW 488
26903: NOT
26904: IFFALSE 26908
// continue ;
26906: GO 26840
// if HexInfo ( _x , _y ) = 0 then
26908: LD_VAR 0 7
26912: PPUSH
26913: LD_VAR 0 8
26917: PPUSH
26918: CALL_OW 428
26922: PUSH
26923: LD_INT 0
26925: EQUAL
26926: IFFALSE 26951
// begin ComMoveXY ( unit , _x , _y ) ;
26928: LD_VAR 0 1
26932: PPUSH
26933: LD_VAR 0 7
26937: PPUSH
26938: LD_VAR 0 8
26942: PPUSH
26943: CALL_OW 111
// exit ;
26947: POP
26948: POP
26949: GO 26955
// end ; end ;
26951: GO 26840
26953: POP
26954: POP
// end ;
26955: LD_VAR 0 3
26959: RET
// export function ScanBase ( side , base_area ) ; begin
26960: LD_INT 0
26962: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26963: LD_ADDR_VAR 0 3
26967: PUSH
26968: LD_VAR 0 2
26972: PPUSH
26973: LD_INT 81
26975: PUSH
26976: LD_VAR 0 1
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PPUSH
26985: CALL_OW 70
26989: ST_TO_ADDR
// end ;
26990: LD_VAR 0 3
26994: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
// result := false ;
27001: LD_ADDR_VAR 0 2
27005: PUSH
27006: LD_INT 0
27008: ST_TO_ADDR
// side := GetSide ( unit ) ;
27009: LD_ADDR_VAR 0 3
27013: PUSH
27014: LD_VAR 0 1
27018: PPUSH
27019: CALL_OW 255
27023: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27024: LD_ADDR_VAR 0 4
27028: PUSH
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL_OW 248
27038: ST_TO_ADDR
// case nat of 1 :
27039: LD_VAR 0 4
27043: PUSH
27044: LD_INT 1
27046: DOUBLE
27047: EQUAL
27048: IFTRUE 27052
27050: GO 27063
27052: POP
// tech := tech_lassight ; 2 :
27053: LD_ADDR_VAR 0 5
27057: PUSH
27058: LD_INT 12
27060: ST_TO_ADDR
27061: GO 27102
27063: LD_INT 2
27065: DOUBLE
27066: EQUAL
27067: IFTRUE 27071
27069: GO 27082
27071: POP
// tech := tech_mortar ; 3 :
27072: LD_ADDR_VAR 0 5
27076: PUSH
27077: LD_INT 41
27079: ST_TO_ADDR
27080: GO 27102
27082: LD_INT 3
27084: DOUBLE
27085: EQUAL
27086: IFTRUE 27090
27088: GO 27101
27090: POP
// tech := tech_bazooka ; end ;
27091: LD_ADDR_VAR 0 5
27095: PUSH
27096: LD_INT 44
27098: ST_TO_ADDR
27099: GO 27102
27101: POP
// if Researched ( side , tech ) then
27102: LD_VAR 0 3
27106: PPUSH
27107: LD_VAR 0 5
27111: PPUSH
27112: CALL_OW 325
27116: IFFALSE 27143
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27118: LD_ADDR_VAR 0 2
27122: PUSH
27123: LD_INT 5
27125: PUSH
27126: LD_INT 8
27128: PUSH
27129: LD_INT 9
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: PUSH
27137: LD_VAR 0 4
27141: ARRAY
27142: ST_TO_ADDR
// end ;
27143: LD_VAR 0 2
27147: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27148: LD_INT 0
27150: PPUSH
27151: PPUSH
27152: PPUSH
// if not mines then
27153: LD_VAR 0 2
27157: NOT
27158: IFFALSE 27162
// exit ;
27160: GO 27306
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27162: LD_ADDR_VAR 0 5
27166: PUSH
27167: LD_INT 81
27169: PUSH
27170: LD_VAR 0 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: LD_INT 21
27184: PUSH
27185: LD_INT 3
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PPUSH
27200: CALL_OW 69
27204: ST_TO_ADDR
// for i in mines do
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_VAR 0 2
27214: PUSH
27215: FOR_IN
27216: IFFALSE 27304
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27218: LD_VAR 0 4
27222: PUSH
27223: LD_INT 1
27225: ARRAY
27226: PPUSH
27227: LD_VAR 0 4
27231: PUSH
27232: LD_INT 2
27234: ARRAY
27235: PPUSH
27236: CALL_OW 458
27240: NOT
27241: IFFALSE 27245
// continue ;
27243: GO 27215
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27245: LD_VAR 0 4
27249: PUSH
27250: LD_INT 1
27252: ARRAY
27253: PPUSH
27254: LD_VAR 0 4
27258: PUSH
27259: LD_INT 2
27261: ARRAY
27262: PPUSH
27263: CALL_OW 428
27267: PUSH
27268: LD_VAR 0 5
27272: IN
27273: IFFALSE 27302
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27275: LD_VAR 0 4
27279: PUSH
27280: LD_INT 1
27282: ARRAY
27283: PPUSH
27284: LD_VAR 0 4
27288: PUSH
27289: LD_INT 2
27291: ARRAY
27292: PPUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 456
// end ;
27302: GO 27215
27304: POP
27305: POP
// end ;
27306: LD_VAR 0 3
27310: RET
// export function Count ( array ) ; var i ; begin
27311: LD_INT 0
27313: PPUSH
27314: PPUSH
// result := 0 ;
27315: LD_ADDR_VAR 0 2
27319: PUSH
27320: LD_INT 0
27322: ST_TO_ADDR
// for i in array do
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_VAR 0 1
27332: PUSH
27333: FOR_IN
27334: IFFALSE 27358
// if i then
27336: LD_VAR 0 3
27340: IFFALSE 27356
// result := result + 1 ;
27342: LD_ADDR_VAR 0 2
27346: PUSH
27347: LD_VAR 0 2
27351: PUSH
27352: LD_INT 1
27354: PLUS
27355: ST_TO_ADDR
27356: GO 27333
27358: POP
27359: POP
// end ;
27360: LD_VAR 0 2
27364: RET
// export function IsEmpty ( building ) ; begin
27365: LD_INT 0
27367: PPUSH
// if not building then
27368: LD_VAR 0 1
27372: NOT
27373: IFFALSE 27377
// exit ;
27375: GO 27420
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27377: LD_ADDR_VAR 0 2
27381: PUSH
27382: LD_VAR 0 1
27386: PUSH
27387: LD_INT 22
27389: PUSH
27390: LD_VAR 0 1
27394: PPUSH
27395: CALL_OW 255
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 58
27406: PUSH
27407: EMPTY
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PPUSH
27414: CALL_OW 69
27418: IN
27419: ST_TO_ADDR
// end ;
27420: LD_VAR 0 2
27424: RET
// export function IsNotFull ( building ) ; var places ; begin
27425: LD_INT 0
27427: PPUSH
27428: PPUSH
// if not building then
27429: LD_VAR 0 1
27433: NOT
27434: IFFALSE 27438
// exit ;
27436: GO 27609
// result := false ;
27438: LD_ADDR_VAR 0 2
27442: PUSH
27443: LD_INT 0
27445: ST_TO_ADDR
// places := 0 ;
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_INT 0
27453: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27454: LD_VAR 0 1
27458: PPUSH
27459: CALL_OW 266
27463: PUSH
27464: LD_INT 0
27466: DOUBLE
27467: EQUAL
27468: IFTRUE 27526
27470: LD_INT 1
27472: DOUBLE
27473: EQUAL
27474: IFTRUE 27526
27476: LD_INT 6
27478: DOUBLE
27479: EQUAL
27480: IFTRUE 27526
27482: LD_INT 7
27484: DOUBLE
27485: EQUAL
27486: IFTRUE 27526
27488: LD_INT 8
27490: DOUBLE
27491: EQUAL
27492: IFTRUE 27526
27494: LD_INT 4
27496: DOUBLE
27497: EQUAL
27498: IFTRUE 27526
27500: LD_INT 5
27502: DOUBLE
27503: EQUAL
27504: IFTRUE 27526
27506: LD_INT 2
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27526
27512: LD_INT 3
27514: DOUBLE
27515: EQUAL
27516: IFTRUE 27526
27518: LD_INT 35
27520: DOUBLE
27521: EQUAL
27522: IFTRUE 27526
27524: GO 27537
27526: POP
// places := 6 ; b_bunker , b_breastwork :
27527: LD_ADDR_VAR 0 3
27531: PUSH
27532: LD_INT 6
27534: ST_TO_ADDR
27535: GO 27582
27537: LD_INT 32
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27551
27543: LD_INT 31
27545: DOUBLE
27546: EQUAL
27547: IFTRUE 27551
27549: GO 27562
27551: POP
// places := 1 ; b_control_tower :
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: LD_INT 1
27559: ST_TO_ADDR
27560: GO 27582
27562: LD_INT 36
27564: DOUBLE
27565: EQUAL
27566: IFTRUE 27570
27568: GO 27581
27570: POP
// places := 3 ; end ;
27571: LD_ADDR_VAR 0 3
27575: PUSH
27576: LD_INT 3
27578: ST_TO_ADDR
27579: GO 27582
27581: POP
// if places then
27582: LD_VAR 0 3
27586: IFFALSE 27609
// result := UnitsInside ( building ) < places ;
27588: LD_ADDR_VAR 0 2
27592: PUSH
27593: LD_VAR 0 1
27597: PPUSH
27598: CALL_OW 313
27602: PUSH
27603: LD_VAR 0 3
27607: LESS
27608: ST_TO_ADDR
// end ;
27609: LD_VAR 0 2
27613: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
// tmp := [ ] ;
27620: LD_ADDR_VAR 0 3
27624: PUSH
27625: EMPTY
27626: ST_TO_ADDR
// list := [ ] ;
27627: LD_ADDR_VAR 0 5
27631: PUSH
27632: EMPTY
27633: ST_TO_ADDR
// for i = 16 to 25 do
27634: LD_ADDR_VAR 0 4
27638: PUSH
27639: DOUBLE
27640: LD_INT 16
27642: DEC
27643: ST_TO_ADDR
27644: LD_INT 25
27646: PUSH
27647: FOR_TO
27648: IFFALSE 27721
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27650: LD_ADDR_VAR 0 3
27654: PUSH
27655: LD_VAR 0 3
27659: PUSH
27660: LD_INT 22
27662: PUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL_OW 255
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 91
27679: PUSH
27680: LD_VAR 0 1
27684: PUSH
27685: LD_INT 6
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 30
27695: PUSH
27696: LD_VAR 0 4
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: PUSH
27710: EMPTY
27711: LIST
27712: PPUSH
27713: CALL_OW 69
27717: ADD
27718: ST_TO_ADDR
27719: GO 27647
27721: POP
27722: POP
// for i = 1 to tmp do
27723: LD_ADDR_VAR 0 4
27727: PUSH
27728: DOUBLE
27729: LD_INT 1
27731: DEC
27732: ST_TO_ADDR
27733: LD_VAR 0 3
27737: PUSH
27738: FOR_TO
27739: IFFALSE 27827
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27741: LD_ADDR_VAR 0 5
27745: PUSH
27746: LD_VAR 0 5
27750: PUSH
27751: LD_VAR 0 3
27755: PUSH
27756: LD_VAR 0 4
27760: ARRAY
27761: PPUSH
27762: CALL_OW 266
27766: PUSH
27767: LD_VAR 0 3
27771: PUSH
27772: LD_VAR 0 4
27776: ARRAY
27777: PPUSH
27778: CALL_OW 250
27782: PUSH
27783: LD_VAR 0 3
27787: PUSH
27788: LD_VAR 0 4
27792: ARRAY
27793: PPUSH
27794: CALL_OW 251
27798: PUSH
27799: LD_VAR 0 3
27803: PUSH
27804: LD_VAR 0 4
27808: ARRAY
27809: PPUSH
27810: CALL_OW 254
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: ADD
27824: ST_TO_ADDR
27825: GO 27738
27827: POP
27828: POP
// result := list ;
27829: LD_ADDR_VAR 0 2
27833: PUSH
27834: LD_VAR 0 5
27838: ST_TO_ADDR
// end ;
27839: LD_VAR 0 2
27843: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27844: LD_INT 0
27846: PPUSH
27847: PPUSH
27848: PPUSH
27849: PPUSH
27850: PPUSH
27851: PPUSH
27852: PPUSH
// if not factory then
27853: LD_VAR 0 1
27857: NOT
27858: IFFALSE 27862
// exit ;
27860: GO 28455
// if control = control_apeman then
27862: LD_VAR 0 4
27866: PUSH
27867: LD_INT 5
27869: EQUAL
27870: IFFALSE 27979
// begin tmp := UnitsInside ( factory ) ;
27872: LD_ADDR_VAR 0 8
27876: PUSH
27877: LD_VAR 0 1
27881: PPUSH
27882: CALL_OW 313
27886: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27887: LD_VAR 0 8
27891: PPUSH
27892: LD_INT 25
27894: PUSH
27895: LD_INT 12
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PPUSH
27902: CALL_OW 72
27906: NOT
27907: IFFALSE 27917
// control := control_manual ;
27909: LD_ADDR_VAR 0 4
27913: PUSH
27914: LD_INT 1
27916: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27917: LD_ADDR_VAR 0 8
27921: PUSH
27922: LD_VAR 0 1
27926: PPUSH
27927: CALL 27614 0 1
27931: ST_TO_ADDR
// if tmp then
27932: LD_VAR 0 8
27936: IFFALSE 27979
// begin for i in tmp do
27938: LD_ADDR_VAR 0 7
27942: PUSH
27943: LD_VAR 0 8
27947: PUSH
27948: FOR_IN
27949: IFFALSE 27977
// if i [ 1 ] = b_ext_radio then
27951: LD_VAR 0 7
27955: PUSH
27956: LD_INT 1
27958: ARRAY
27959: PUSH
27960: LD_INT 22
27962: EQUAL
27963: IFFALSE 27975
// begin control := control_remote ;
27965: LD_ADDR_VAR 0 4
27969: PUSH
27970: LD_INT 2
27972: ST_TO_ADDR
// break ;
27973: GO 27977
// end ;
27975: GO 27948
27977: POP
27978: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27979: LD_VAR 0 1
27983: PPUSH
27984: LD_VAR 0 2
27988: PPUSH
27989: LD_VAR 0 3
27993: PPUSH
27994: LD_VAR 0 4
27998: PPUSH
27999: LD_VAR 0 5
28003: PPUSH
28004: CALL_OW 448
28008: IFFALSE 28043
// begin result := [ chassis , engine , control , weapon ] ;
28010: LD_ADDR_VAR 0 6
28014: PUSH
28015: LD_VAR 0 2
28019: PUSH
28020: LD_VAR 0 3
28024: PUSH
28025: LD_VAR 0 4
28029: PUSH
28030: LD_VAR 0 5
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: ST_TO_ADDR
// exit ;
28041: GO 28455
// end ; _chassis := AvailableChassisList ( factory ) ;
28043: LD_ADDR_VAR 0 9
28047: PUSH
28048: LD_VAR 0 1
28052: PPUSH
28053: CALL_OW 475
28057: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28058: LD_ADDR_VAR 0 11
28062: PUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 476
28072: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28073: LD_ADDR_VAR 0 12
28077: PUSH
28078: LD_VAR 0 1
28082: PPUSH
28083: CALL_OW 477
28087: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28088: LD_ADDR_VAR 0 10
28092: PUSH
28093: LD_VAR 0 1
28097: PPUSH
28098: CALL_OW 478
28102: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28103: LD_VAR 0 9
28107: NOT
28108: PUSH
28109: LD_VAR 0 11
28113: NOT
28114: OR
28115: PUSH
28116: LD_VAR 0 12
28120: NOT
28121: OR
28122: PUSH
28123: LD_VAR 0 10
28127: NOT
28128: OR
28129: IFFALSE 28164
// begin result := [ chassis , engine , control , weapon ] ;
28131: LD_ADDR_VAR 0 6
28135: PUSH
28136: LD_VAR 0 2
28140: PUSH
28141: LD_VAR 0 3
28145: PUSH
28146: LD_VAR 0 4
28150: PUSH
28151: LD_VAR 0 5
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: ST_TO_ADDR
// exit ;
28162: GO 28455
// end ; if not chassis in _chassis then
28164: LD_VAR 0 2
28168: PUSH
28169: LD_VAR 0 9
28173: IN
28174: NOT
28175: IFFALSE 28201
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: LD_VAR 0 9
28186: PUSH
28187: LD_INT 1
28189: PPUSH
28190: LD_VAR 0 9
28194: PPUSH
28195: CALL_OW 12
28199: ARRAY
28200: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28201: LD_VAR 0 2
28205: PPUSH
28206: LD_VAR 0 3
28210: PPUSH
28211: CALL 28460 0 2
28215: NOT
28216: IFFALSE 28275
// repeat engine := _engine [ 1 ] ;
28218: LD_ADDR_VAR 0 3
28222: PUSH
28223: LD_VAR 0 11
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28232: LD_ADDR_VAR 0 11
28236: PUSH
28237: LD_VAR 0 11
28241: PPUSH
28242: LD_INT 1
28244: PPUSH
28245: CALL_OW 3
28249: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28250: LD_VAR 0 2
28254: PPUSH
28255: LD_VAR 0 3
28259: PPUSH
28260: CALL 28460 0 2
28264: PUSH
28265: LD_VAR 0 11
28269: PUSH
28270: EMPTY
28271: EQUAL
28272: OR
28273: IFFALSE 28218
// if not control in _control then
28275: LD_VAR 0 4
28279: PUSH
28280: LD_VAR 0 12
28284: IN
28285: NOT
28286: IFFALSE 28312
// control := _control [ rand ( 1 , _control ) ] ;
28288: LD_ADDR_VAR 0 4
28292: PUSH
28293: LD_VAR 0 12
28297: PUSH
28298: LD_INT 1
28300: PPUSH
28301: LD_VAR 0 12
28305: PPUSH
28306: CALL_OW 12
28310: ARRAY
28311: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28312: LD_VAR 0 2
28316: PPUSH
28317: LD_VAR 0 5
28321: PPUSH
28322: CALL 28680 0 2
28326: NOT
28327: IFFALSE 28386
// repeat weapon := _weapon [ 1 ] ;
28329: LD_ADDR_VAR 0 5
28333: PUSH
28334: LD_VAR 0 10
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28343: LD_ADDR_VAR 0 10
28347: PUSH
28348: LD_VAR 0 10
28352: PPUSH
28353: LD_INT 1
28355: PPUSH
28356: CALL_OW 3
28360: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28361: LD_VAR 0 2
28365: PPUSH
28366: LD_VAR 0 5
28370: PPUSH
28371: CALL 28680 0 2
28375: PUSH
28376: LD_VAR 0 10
28380: PUSH
28381: EMPTY
28382: EQUAL
28383: OR
28384: IFFALSE 28329
// result := [ ] ;
28386: LD_ADDR_VAR 0 6
28390: PUSH
28391: EMPTY
28392: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28393: LD_VAR 0 1
28397: PPUSH
28398: LD_VAR 0 2
28402: PPUSH
28403: LD_VAR 0 3
28407: PPUSH
28408: LD_VAR 0 4
28412: PPUSH
28413: LD_VAR 0 5
28417: PPUSH
28418: CALL_OW 448
28422: IFFALSE 28455
// result := [ chassis , engine , control , weapon ] ;
28424: LD_ADDR_VAR 0 6
28428: PUSH
28429: LD_VAR 0 2
28433: PUSH
28434: LD_VAR 0 3
28438: PUSH
28439: LD_VAR 0 4
28443: PUSH
28444: LD_VAR 0 5
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// end ;
28455: LD_VAR 0 6
28459: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28460: LD_INT 0
28462: PPUSH
// if not chassis or not engine then
28463: LD_VAR 0 1
28467: NOT
28468: PUSH
28469: LD_VAR 0 2
28473: NOT
28474: OR
28475: IFFALSE 28479
// exit ;
28477: GO 28675
// case engine of engine_solar :
28479: LD_VAR 0 2
28483: PUSH
28484: LD_INT 2
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28530
28492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28493: LD_ADDR_VAR 0 3
28497: PUSH
28498: LD_INT 11
28500: PUSH
28501: LD_INT 12
28503: PUSH
28504: LD_INT 13
28506: PUSH
28507: LD_INT 14
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
28528: GO 28659
28530: LD_INT 1
28532: DOUBLE
28533: EQUAL
28534: IFTRUE 28538
28536: GO 28600
28538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28539: LD_ADDR_VAR 0 3
28543: PUSH
28544: LD_INT 11
28546: PUSH
28547: LD_INT 12
28549: PUSH
28550: LD_INT 13
28552: PUSH
28553: LD_INT 14
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: LD_INT 3
28564: PUSH
28565: LD_INT 4
28567: PUSH
28568: LD_INT 5
28570: PUSH
28571: LD_INT 21
28573: PUSH
28574: LD_INT 23
28576: PUSH
28577: LD_INT 22
28579: PUSH
28580: LD_INT 24
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
28598: GO 28659
28600: LD_INT 3
28602: DOUBLE
28603: EQUAL
28604: IFTRUE 28608
28606: GO 28658
28608: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28609: LD_ADDR_VAR 0 3
28613: PUSH
28614: LD_INT 13
28616: PUSH
28617: LD_INT 14
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: LD_INT 4
28628: PUSH
28629: LD_INT 5
28631: PUSH
28632: LD_INT 21
28634: PUSH
28635: LD_INT 22
28637: PUSH
28638: LD_INT 23
28640: PUSH
28641: LD_INT 24
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
28656: GO 28659
28658: POP
// result := ( chassis in result ) ;
28659: LD_ADDR_VAR 0 3
28663: PUSH
28664: LD_VAR 0 1
28668: PUSH
28669: LD_VAR 0 3
28673: IN
28674: ST_TO_ADDR
// end ;
28675: LD_VAR 0 3
28679: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28680: LD_INT 0
28682: PPUSH
// if not chassis or not weapon then
28683: LD_VAR 0 1
28687: NOT
28688: PUSH
28689: LD_VAR 0 2
28693: NOT
28694: OR
28695: IFFALSE 28699
// exit ;
28697: GO 29759
// case weapon of us_machine_gun :
28699: LD_VAR 0 2
28703: PUSH
28704: LD_INT 2
28706: DOUBLE
28707: EQUAL
28708: IFTRUE 28712
28710: GO 28742
28712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28713: LD_ADDR_VAR 0 3
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 3
28726: PUSH
28727: LD_INT 4
28729: PUSH
28730: LD_INT 5
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
28740: GO 29743
28742: LD_INT 3
28744: DOUBLE
28745: EQUAL
28746: IFTRUE 28750
28748: GO 28780
28750: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28751: LD_ADDR_VAR 0 3
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: LD_INT 3
28764: PUSH
28765: LD_INT 4
28767: PUSH
28768: LD_INT 5
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: ST_TO_ADDR
28778: GO 29743
28780: LD_INT 11
28782: DOUBLE
28783: EQUAL
28784: IFTRUE 28788
28786: GO 28818
28788: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28789: LD_ADDR_VAR 0 3
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 3
28802: PUSH
28803: LD_INT 4
28805: PUSH
28806: LD_INT 5
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
28816: GO 29743
28818: LD_INT 4
28820: DOUBLE
28821: EQUAL
28822: IFTRUE 28826
28824: GO 28852
28826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28827: LD_ADDR_VAR 0 3
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: LD_INT 4
28840: PUSH
28841: LD_INT 5
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
28850: GO 29743
28852: LD_INT 5
28854: DOUBLE
28855: EQUAL
28856: IFTRUE 28860
28858: GO 28886
28860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28861: LD_ADDR_VAR 0 3
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: LD_INT 3
28871: PUSH
28872: LD_INT 4
28874: PUSH
28875: LD_INT 5
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
28884: GO 29743
28886: LD_INT 9
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28920
28894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: LD_INT 3
28905: PUSH
28906: LD_INT 4
28908: PUSH
28909: LD_INT 5
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: ST_TO_ADDR
28918: GO 29743
28920: LD_INT 7
28922: DOUBLE
28923: EQUAL
28924: IFTRUE 28928
28926: GO 28954
28928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28929: LD_ADDR_VAR 0 3
28933: PUSH
28934: LD_INT 2
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 4
28942: PUSH
28943: LD_INT 5
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: ST_TO_ADDR
28952: GO 29743
28954: LD_INT 12
28956: DOUBLE
28957: EQUAL
28958: IFTRUE 28962
28960: GO 28988
28962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28963: LD_ADDR_VAR 0 3
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: LD_INT 4
28976: PUSH
28977: LD_INT 5
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: ST_TO_ADDR
28986: GO 29743
28988: LD_INT 13
28990: DOUBLE
28991: EQUAL
28992: IFTRUE 28996
28994: GO 29022
28996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28997: LD_ADDR_VAR 0 3
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: LD_INT 4
29010: PUSH
29011: LD_INT 5
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: ST_TO_ADDR
29020: GO 29743
29022: LD_INT 14
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29030
29028: GO 29048
29030: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29031: LD_ADDR_VAR 0 3
29035: PUSH
29036: LD_INT 4
29038: PUSH
29039: LD_INT 5
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: ST_TO_ADDR
29046: GO 29743
29048: LD_INT 6
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29056
29054: GO 29074
29056: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29057: LD_ADDR_VAR 0 3
29061: PUSH
29062: LD_INT 4
29064: PUSH
29065: LD_INT 5
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: ST_TO_ADDR
29072: GO 29743
29074: LD_INT 10
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29082
29080: GO 29100
29082: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29083: LD_ADDR_VAR 0 3
29087: PUSH
29088: LD_INT 4
29090: PUSH
29091: LD_INT 5
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: ST_TO_ADDR
29098: GO 29743
29100: LD_INT 22
29102: DOUBLE
29103: EQUAL
29104: IFTRUE 29108
29106: GO 29134
29108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_INT 11
29116: PUSH
29117: LD_INT 12
29119: PUSH
29120: LD_INT 13
29122: PUSH
29123: LD_INT 14
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: ST_TO_ADDR
29132: GO 29743
29134: LD_INT 23
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29168
29142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29143: LD_ADDR_VAR 0 3
29147: PUSH
29148: LD_INT 11
29150: PUSH
29151: LD_INT 12
29153: PUSH
29154: LD_INT 13
29156: PUSH
29157: LD_INT 14
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: ST_TO_ADDR
29166: GO 29743
29168: LD_INT 24
29170: DOUBLE
29171: EQUAL
29172: IFTRUE 29176
29174: GO 29202
29176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29177: LD_ADDR_VAR 0 3
29181: PUSH
29182: LD_INT 11
29184: PUSH
29185: LD_INT 12
29187: PUSH
29188: LD_INT 13
29190: PUSH
29191: LD_INT 14
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: ST_TO_ADDR
29200: GO 29743
29202: LD_INT 30
29204: DOUBLE
29205: EQUAL
29206: IFTRUE 29210
29208: GO 29236
29210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: LD_INT 11
29218: PUSH
29219: LD_INT 12
29221: PUSH
29222: LD_INT 13
29224: PUSH
29225: LD_INT 14
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: ST_TO_ADDR
29234: GO 29743
29236: LD_INT 25
29238: DOUBLE
29239: EQUAL
29240: IFTRUE 29244
29242: GO 29262
29244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29245: LD_ADDR_VAR 0 3
29249: PUSH
29250: LD_INT 13
29252: PUSH
29253: LD_INT 14
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: ST_TO_ADDR
29260: GO 29743
29262: LD_INT 27
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29288
29270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29271: LD_ADDR_VAR 0 3
29275: PUSH
29276: LD_INT 13
29278: PUSH
29279: LD_INT 14
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: ST_TO_ADDR
29286: GO 29743
29288: LD_INT 92
29290: DOUBLE
29291: EQUAL
29292: IFTRUE 29296
29294: GO 29322
29296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29297: LD_ADDR_VAR 0 3
29301: PUSH
29302: LD_INT 11
29304: PUSH
29305: LD_INT 12
29307: PUSH
29308: LD_INT 13
29310: PUSH
29311: LD_INT 14
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
29320: GO 29743
29322: LD_INT 28
29324: DOUBLE
29325: EQUAL
29326: IFTRUE 29330
29328: GO 29348
29330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: LD_INT 13
29338: PUSH
29339: LD_INT 14
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: ST_TO_ADDR
29346: GO 29743
29348: LD_INT 29
29350: DOUBLE
29351: EQUAL
29352: IFTRUE 29356
29354: GO 29374
29356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29357: LD_ADDR_VAR 0 3
29361: PUSH
29362: LD_INT 13
29364: PUSH
29365: LD_INT 14
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: ST_TO_ADDR
29372: GO 29743
29374: LD_INT 31
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29400
29382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 13
29390: PUSH
29391: LD_INT 14
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: ST_TO_ADDR
29398: GO 29743
29400: LD_INT 26
29402: DOUBLE
29403: EQUAL
29404: IFTRUE 29408
29406: GO 29426
29408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29409: LD_ADDR_VAR 0 3
29413: PUSH
29414: LD_INT 13
29416: PUSH
29417: LD_INT 14
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: ST_TO_ADDR
29424: GO 29743
29426: LD_INT 42
29428: DOUBLE
29429: EQUAL
29430: IFTRUE 29434
29432: GO 29460
29434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29435: LD_ADDR_VAR 0 3
29439: PUSH
29440: LD_INT 21
29442: PUSH
29443: LD_INT 22
29445: PUSH
29446: LD_INT 23
29448: PUSH
29449: LD_INT 24
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: ST_TO_ADDR
29458: GO 29743
29460: LD_INT 43
29462: DOUBLE
29463: EQUAL
29464: IFTRUE 29468
29466: GO 29494
29468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29469: LD_ADDR_VAR 0 3
29473: PUSH
29474: LD_INT 21
29476: PUSH
29477: LD_INT 22
29479: PUSH
29480: LD_INT 23
29482: PUSH
29483: LD_INT 24
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 29743
29494: LD_INT 44
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29528
29502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 21
29510: PUSH
29511: LD_INT 22
29513: PUSH
29514: LD_INT 23
29516: PUSH
29517: LD_INT 24
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
29526: GO 29743
29528: LD_INT 45
29530: DOUBLE
29531: EQUAL
29532: IFTRUE 29536
29534: GO 29562
29536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 21
29544: PUSH
29545: LD_INT 22
29547: PUSH
29548: LD_INT 23
29550: PUSH
29551: LD_INT 24
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
29560: GO 29743
29562: LD_INT 49
29564: DOUBLE
29565: EQUAL
29566: IFTRUE 29570
29568: GO 29596
29570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29571: LD_ADDR_VAR 0 3
29575: PUSH
29576: LD_INT 21
29578: PUSH
29579: LD_INT 22
29581: PUSH
29582: LD_INT 23
29584: PUSH
29585: LD_INT 24
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: ST_TO_ADDR
29594: GO 29743
29596: LD_INT 51
29598: DOUBLE
29599: EQUAL
29600: IFTRUE 29604
29602: GO 29630
29604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29605: LD_ADDR_VAR 0 3
29609: PUSH
29610: LD_INT 21
29612: PUSH
29613: LD_INT 22
29615: PUSH
29616: LD_INT 23
29618: PUSH
29619: LD_INT 24
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
29628: GO 29743
29630: LD_INT 52
29632: DOUBLE
29633: EQUAL
29634: IFTRUE 29638
29636: GO 29664
29638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29639: LD_ADDR_VAR 0 3
29643: PUSH
29644: LD_INT 21
29646: PUSH
29647: LD_INT 22
29649: PUSH
29650: LD_INT 23
29652: PUSH
29653: LD_INT 24
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: ST_TO_ADDR
29662: GO 29743
29664: LD_INT 53
29666: DOUBLE
29667: EQUAL
29668: IFTRUE 29672
29670: GO 29690
29672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29673: LD_ADDR_VAR 0 3
29677: PUSH
29678: LD_INT 23
29680: PUSH
29681: LD_INT 24
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: ST_TO_ADDR
29688: GO 29743
29690: LD_INT 46
29692: DOUBLE
29693: EQUAL
29694: IFTRUE 29698
29696: GO 29716
29698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29699: LD_ADDR_VAR 0 3
29703: PUSH
29704: LD_INT 23
29706: PUSH
29707: LD_INT 24
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: ST_TO_ADDR
29714: GO 29743
29716: LD_INT 47
29718: DOUBLE
29719: EQUAL
29720: IFTRUE 29724
29722: GO 29742
29724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 23
29732: PUSH
29733: LD_INT 24
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: ST_TO_ADDR
29740: GO 29743
29742: POP
// result := ( chassis in result ) ;
29743: LD_ADDR_VAR 0 3
29747: PUSH
29748: LD_VAR 0 1
29752: PUSH
29753: LD_VAR 0 3
29757: IN
29758: ST_TO_ADDR
// end ;
29759: LD_VAR 0 3
29763: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29764: LD_INT 0
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
29771: PPUSH
29772: PPUSH
// result := array ;
29773: LD_ADDR_VAR 0 5
29777: PUSH
29778: LD_VAR 0 1
29782: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29783: LD_VAR 0 1
29787: NOT
29788: PUSH
29789: LD_VAR 0 2
29793: NOT
29794: OR
29795: PUSH
29796: LD_VAR 0 3
29800: NOT
29801: OR
29802: PUSH
29803: LD_VAR 0 2
29807: PUSH
29808: LD_VAR 0 1
29812: GREATER
29813: OR
29814: PUSH
29815: LD_VAR 0 3
29819: PUSH
29820: LD_VAR 0 1
29824: GREATER
29825: OR
29826: IFFALSE 29830
// exit ;
29828: GO 30126
// if direction then
29830: LD_VAR 0 4
29834: IFFALSE 29898
// begin d := 1 ;
29836: LD_ADDR_VAR 0 9
29840: PUSH
29841: LD_INT 1
29843: ST_TO_ADDR
// if i_from > i_to then
29844: LD_VAR 0 2
29848: PUSH
29849: LD_VAR 0 3
29853: GREATER
29854: IFFALSE 29880
// length := ( array - i_from ) + i_to else
29856: LD_ADDR_VAR 0 11
29860: PUSH
29861: LD_VAR 0 1
29865: PUSH
29866: LD_VAR 0 2
29870: MINUS
29871: PUSH
29872: LD_VAR 0 3
29876: PLUS
29877: ST_TO_ADDR
29878: GO 29896
// length := i_to - i_from ;
29880: LD_ADDR_VAR 0 11
29884: PUSH
29885: LD_VAR 0 3
29889: PUSH
29890: LD_VAR 0 2
29894: MINUS
29895: ST_TO_ADDR
// end else
29896: GO 29959
// begin d := - 1 ;
29898: LD_ADDR_VAR 0 9
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: ST_TO_ADDR
// if i_from > i_to then
29907: LD_VAR 0 2
29911: PUSH
29912: LD_VAR 0 3
29916: GREATER
29917: IFFALSE 29937
// length := i_from - i_to else
29919: LD_ADDR_VAR 0 11
29923: PUSH
29924: LD_VAR 0 2
29928: PUSH
29929: LD_VAR 0 3
29933: MINUS
29934: ST_TO_ADDR
29935: GO 29959
// length := ( array - i_to ) + i_from ;
29937: LD_ADDR_VAR 0 11
29941: PUSH
29942: LD_VAR 0 1
29946: PUSH
29947: LD_VAR 0 3
29951: MINUS
29952: PUSH
29953: LD_VAR 0 2
29957: PLUS
29958: ST_TO_ADDR
// end ; if not length then
29959: LD_VAR 0 11
29963: NOT
29964: IFFALSE 29968
// exit ;
29966: GO 30126
// tmp := array ;
29968: LD_ADDR_VAR 0 10
29972: PUSH
29973: LD_VAR 0 1
29977: ST_TO_ADDR
// for i = 1 to length do
29978: LD_ADDR_VAR 0 6
29982: PUSH
29983: DOUBLE
29984: LD_INT 1
29986: DEC
29987: ST_TO_ADDR
29988: LD_VAR 0 11
29992: PUSH
29993: FOR_TO
29994: IFFALSE 30114
// begin for j = 1 to array do
29996: LD_ADDR_VAR 0 7
30000: PUSH
30001: DOUBLE
30002: LD_INT 1
30004: DEC
30005: ST_TO_ADDR
30006: LD_VAR 0 1
30010: PUSH
30011: FOR_TO
30012: IFFALSE 30100
// begin k := j + d ;
30014: LD_ADDR_VAR 0 8
30018: PUSH
30019: LD_VAR 0 7
30023: PUSH
30024: LD_VAR 0 9
30028: PLUS
30029: ST_TO_ADDR
// if k > array then
30030: LD_VAR 0 8
30034: PUSH
30035: LD_VAR 0 1
30039: GREATER
30040: IFFALSE 30050
// k := 1 ;
30042: LD_ADDR_VAR 0 8
30046: PUSH
30047: LD_INT 1
30049: ST_TO_ADDR
// if not k then
30050: LD_VAR 0 8
30054: NOT
30055: IFFALSE 30067
// k := array ;
30057: LD_ADDR_VAR 0 8
30061: PUSH
30062: LD_VAR 0 1
30066: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30067: LD_ADDR_VAR 0 10
30071: PUSH
30072: LD_VAR 0 10
30076: PPUSH
30077: LD_VAR 0 8
30081: PPUSH
30082: LD_VAR 0 1
30086: PUSH
30087: LD_VAR 0 7
30091: ARRAY
30092: PPUSH
30093: CALL_OW 1
30097: ST_TO_ADDR
// end ;
30098: GO 30011
30100: POP
30101: POP
// array := tmp ;
30102: LD_ADDR_VAR 0 1
30106: PUSH
30107: LD_VAR 0 10
30111: ST_TO_ADDR
// end ;
30112: GO 29993
30114: POP
30115: POP
// result := array ;
30116: LD_ADDR_VAR 0 5
30120: PUSH
30121: LD_VAR 0 1
30125: ST_TO_ADDR
// end ;
30126: LD_VAR 0 5
30130: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30131: LD_INT 0
30133: PPUSH
30134: PPUSH
// result := 0 ;
30135: LD_ADDR_VAR 0 3
30139: PUSH
30140: LD_INT 0
30142: ST_TO_ADDR
// if not array or not value in array then
30143: LD_VAR 0 1
30147: NOT
30148: PUSH
30149: LD_VAR 0 2
30153: PUSH
30154: LD_VAR 0 1
30158: IN
30159: NOT
30160: OR
30161: IFFALSE 30165
// exit ;
30163: GO 30219
// for i = 1 to array do
30165: LD_ADDR_VAR 0 4
30169: PUSH
30170: DOUBLE
30171: LD_INT 1
30173: DEC
30174: ST_TO_ADDR
30175: LD_VAR 0 1
30179: PUSH
30180: FOR_TO
30181: IFFALSE 30217
// if value = array [ i ] then
30183: LD_VAR 0 2
30187: PUSH
30188: LD_VAR 0 1
30192: PUSH
30193: LD_VAR 0 4
30197: ARRAY
30198: EQUAL
30199: IFFALSE 30215
// begin result := i ;
30201: LD_ADDR_VAR 0 3
30205: PUSH
30206: LD_VAR 0 4
30210: ST_TO_ADDR
// exit ;
30211: POP
30212: POP
30213: GO 30219
// end ;
30215: GO 30180
30217: POP
30218: POP
// end ;
30219: LD_VAR 0 3
30223: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30224: LD_INT 0
30226: PPUSH
// vc_chassis := chassis ;
30227: LD_ADDR_OWVAR 37
30231: PUSH
30232: LD_VAR 0 1
30236: ST_TO_ADDR
// vc_engine := engine ;
30237: LD_ADDR_OWVAR 39
30241: PUSH
30242: LD_VAR 0 2
30246: ST_TO_ADDR
// vc_control := control ;
30247: LD_ADDR_OWVAR 38
30251: PUSH
30252: LD_VAR 0 3
30256: ST_TO_ADDR
// vc_weapon := weapon ;
30257: LD_ADDR_OWVAR 40
30261: PUSH
30262: LD_VAR 0 4
30266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30267: LD_ADDR_OWVAR 41
30271: PUSH
30272: LD_VAR 0 5
30276: ST_TO_ADDR
// end ;
30277: LD_VAR 0 6
30281: RET
// export function WantPlant ( unit ) ; var task ; begin
30282: LD_INT 0
30284: PPUSH
30285: PPUSH
// result := false ;
30286: LD_ADDR_VAR 0 2
30290: PUSH
30291: LD_INT 0
30293: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: LD_VAR 0 1
30303: PPUSH
30304: CALL_OW 437
30308: ST_TO_ADDR
// if task then
30309: LD_VAR 0 3
30313: IFFALSE 30341
// if task [ 1 ] [ 1 ] = p then
30315: LD_VAR 0 3
30319: PUSH
30320: LD_INT 1
30322: ARRAY
30323: PUSH
30324: LD_INT 1
30326: ARRAY
30327: PUSH
30328: LD_STRING p
30330: EQUAL
30331: IFFALSE 30341
// result := true ;
30333: LD_ADDR_VAR 0 2
30337: PUSH
30338: LD_INT 1
30340: ST_TO_ADDR
// end ;
30341: LD_VAR 0 2
30345: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30346: LD_INT 0
30348: PPUSH
30349: PPUSH
30350: PPUSH
30351: PPUSH
// if pos < 1 then
30352: LD_VAR 0 2
30356: PUSH
30357: LD_INT 1
30359: LESS
30360: IFFALSE 30364
// exit ;
30362: GO 30667
// if pos = 1 then
30364: LD_VAR 0 2
30368: PUSH
30369: LD_INT 1
30371: EQUAL
30372: IFFALSE 30405
// result := Replace ( arr , pos [ 1 ] , value ) else
30374: LD_ADDR_VAR 0 4
30378: PUSH
30379: LD_VAR 0 1
30383: PPUSH
30384: LD_VAR 0 2
30388: PUSH
30389: LD_INT 1
30391: ARRAY
30392: PPUSH
30393: LD_VAR 0 3
30397: PPUSH
30398: CALL_OW 1
30402: ST_TO_ADDR
30403: GO 30667
// begin tmp := arr ;
30405: LD_ADDR_VAR 0 6
30409: PUSH
30410: LD_VAR 0 1
30414: ST_TO_ADDR
// s_arr := [ tmp ] ;
30415: LD_ADDR_VAR 0 7
30419: PUSH
30420: LD_VAR 0 6
30424: PUSH
30425: EMPTY
30426: LIST
30427: ST_TO_ADDR
// for i = 1 to pos - 1 do
30428: LD_ADDR_VAR 0 5
30432: PUSH
30433: DOUBLE
30434: LD_INT 1
30436: DEC
30437: ST_TO_ADDR
30438: LD_VAR 0 2
30442: PUSH
30443: LD_INT 1
30445: MINUS
30446: PUSH
30447: FOR_TO
30448: IFFALSE 30493
// begin tmp := tmp [ pos [ i ] ] ;
30450: LD_ADDR_VAR 0 6
30454: PUSH
30455: LD_VAR 0 6
30459: PUSH
30460: LD_VAR 0 2
30464: PUSH
30465: LD_VAR 0 5
30469: ARRAY
30470: ARRAY
30471: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30472: LD_ADDR_VAR 0 7
30476: PUSH
30477: LD_VAR 0 7
30481: PUSH
30482: LD_VAR 0 6
30486: PUSH
30487: EMPTY
30488: LIST
30489: ADD
30490: ST_TO_ADDR
// end ;
30491: GO 30447
30493: POP
30494: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30495: LD_ADDR_VAR 0 6
30499: PUSH
30500: LD_VAR 0 6
30504: PPUSH
30505: LD_VAR 0 2
30509: PUSH
30510: LD_VAR 0 2
30514: ARRAY
30515: PPUSH
30516: LD_VAR 0 3
30520: PPUSH
30521: CALL_OW 1
30525: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30526: LD_ADDR_VAR 0 7
30530: PUSH
30531: LD_VAR 0 7
30535: PPUSH
30536: LD_VAR 0 7
30540: PPUSH
30541: LD_VAR 0 6
30545: PPUSH
30546: CALL_OW 1
30550: ST_TO_ADDR
// for i = s_arr downto 2 do
30551: LD_ADDR_VAR 0 5
30555: PUSH
30556: DOUBLE
30557: LD_VAR 0 7
30561: INC
30562: ST_TO_ADDR
30563: LD_INT 2
30565: PUSH
30566: FOR_DOWNTO
30567: IFFALSE 30651
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30569: LD_ADDR_VAR 0 6
30573: PUSH
30574: LD_VAR 0 7
30578: PUSH
30579: LD_VAR 0 5
30583: PUSH
30584: LD_INT 1
30586: MINUS
30587: ARRAY
30588: PPUSH
30589: LD_VAR 0 2
30593: PUSH
30594: LD_VAR 0 5
30598: PUSH
30599: LD_INT 1
30601: MINUS
30602: ARRAY
30603: PPUSH
30604: LD_VAR 0 7
30608: PUSH
30609: LD_VAR 0 5
30613: ARRAY
30614: PPUSH
30615: CALL_OW 1
30619: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30620: LD_ADDR_VAR 0 7
30624: PUSH
30625: LD_VAR 0 7
30629: PPUSH
30630: LD_VAR 0 5
30634: PUSH
30635: LD_INT 1
30637: MINUS
30638: PPUSH
30639: LD_VAR 0 6
30643: PPUSH
30644: CALL_OW 1
30648: ST_TO_ADDR
// end ;
30649: GO 30566
30651: POP
30652: POP
// result := s_arr [ 1 ] ;
30653: LD_ADDR_VAR 0 4
30657: PUSH
30658: LD_VAR 0 7
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: ST_TO_ADDR
// end ; end ;
30667: LD_VAR 0 4
30671: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30672: LD_INT 0
30674: PPUSH
30675: PPUSH
// if not list then
30676: LD_VAR 0 1
30680: NOT
30681: IFFALSE 30685
// exit ;
30683: GO 30776
// i := list [ pos1 ] ;
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 1
30694: PUSH
30695: LD_VAR 0 2
30699: ARRAY
30700: ST_TO_ADDR
// if not i then
30701: LD_VAR 0 5
30705: NOT
30706: IFFALSE 30710
// exit ;
30708: GO 30776
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30710: LD_ADDR_VAR 0 1
30714: PUSH
30715: LD_VAR 0 1
30719: PPUSH
30720: LD_VAR 0 2
30724: PPUSH
30725: LD_VAR 0 1
30729: PUSH
30730: LD_VAR 0 3
30734: ARRAY
30735: PPUSH
30736: CALL_OW 1
30740: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30741: LD_ADDR_VAR 0 1
30745: PUSH
30746: LD_VAR 0 1
30750: PPUSH
30751: LD_VAR 0 3
30755: PPUSH
30756: LD_VAR 0 5
30760: PPUSH
30761: CALL_OW 1
30765: ST_TO_ADDR
// result := list ;
30766: LD_ADDR_VAR 0 4
30770: PUSH
30771: LD_VAR 0 1
30775: ST_TO_ADDR
// end ;
30776: LD_VAR 0 4
30780: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30781: LD_INT 0
30783: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30784: LD_ADDR_VAR 0 5
30788: PUSH
30789: LD_VAR 0 1
30793: PPUSH
30794: CALL_OW 250
30798: PPUSH
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 251
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 3
30818: PPUSH
30819: LD_VAR 0 4
30823: PPUSH
30824: CALL 30834 0 5
30828: ST_TO_ADDR
// end ;
30829: LD_VAR 0 5
30833: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30834: LD_INT 0
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
// if not list then
30840: LD_VAR 0 3
30844: NOT
30845: IFFALSE 30849
// exit ;
30847: GO 31237
// result := [ ] ;
30849: LD_ADDR_VAR 0 6
30853: PUSH
30854: EMPTY
30855: ST_TO_ADDR
// for i in list do
30856: LD_ADDR_VAR 0 7
30860: PUSH
30861: LD_VAR 0 3
30865: PUSH
30866: FOR_IN
30867: IFFALSE 31069
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30869: LD_ADDR_VAR 0 9
30873: PUSH
30874: LD_VAR 0 7
30878: PPUSH
30879: LD_VAR 0 1
30883: PPUSH
30884: LD_VAR 0 2
30888: PPUSH
30889: CALL_OW 297
30893: ST_TO_ADDR
// if not result then
30894: LD_VAR 0 6
30898: NOT
30899: IFFALSE 30925
// result := [ [ i , tmp ] ] else
30901: LD_ADDR_VAR 0 6
30905: PUSH
30906: LD_VAR 0 7
30910: PUSH
30911: LD_VAR 0 9
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: ST_TO_ADDR
30923: GO 31067
// begin if result [ result ] [ 2 ] < tmp then
30925: LD_VAR 0 6
30929: PUSH
30930: LD_VAR 0 6
30934: ARRAY
30935: PUSH
30936: LD_INT 2
30938: ARRAY
30939: PUSH
30940: LD_VAR 0 9
30944: LESS
30945: IFFALSE 30987
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30947: LD_ADDR_VAR 0 6
30951: PUSH
30952: LD_VAR 0 6
30956: PPUSH
30957: LD_VAR 0 6
30961: PUSH
30962: LD_INT 1
30964: PLUS
30965: PPUSH
30966: LD_VAR 0 7
30970: PUSH
30971: LD_VAR 0 9
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PPUSH
30980: CALL_OW 2
30984: ST_TO_ADDR
30985: GO 31067
// for j = 1 to result do
30987: LD_ADDR_VAR 0 8
30991: PUSH
30992: DOUBLE
30993: LD_INT 1
30995: DEC
30996: ST_TO_ADDR
30997: LD_VAR 0 6
31001: PUSH
31002: FOR_TO
31003: IFFALSE 31065
// begin if tmp < result [ j ] [ 2 ] then
31005: LD_VAR 0 9
31009: PUSH
31010: LD_VAR 0 6
31014: PUSH
31015: LD_VAR 0 8
31019: ARRAY
31020: PUSH
31021: LD_INT 2
31023: ARRAY
31024: LESS
31025: IFFALSE 31063
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31027: LD_ADDR_VAR 0 6
31031: PUSH
31032: LD_VAR 0 6
31036: PPUSH
31037: LD_VAR 0 8
31041: PPUSH
31042: LD_VAR 0 7
31046: PUSH
31047: LD_VAR 0 9
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PPUSH
31056: CALL_OW 2
31060: ST_TO_ADDR
// break ;
31061: GO 31065
// end ; end ;
31063: GO 31002
31065: POP
31066: POP
// end ; end ;
31067: GO 30866
31069: POP
31070: POP
// if result and not asc then
31071: LD_VAR 0 6
31075: PUSH
31076: LD_VAR 0 4
31080: NOT
31081: AND
31082: IFFALSE 31157
// begin tmp := result ;
31084: LD_ADDR_VAR 0 9
31088: PUSH
31089: LD_VAR 0 6
31093: ST_TO_ADDR
// for i = tmp downto 1 do
31094: LD_ADDR_VAR 0 7
31098: PUSH
31099: DOUBLE
31100: LD_VAR 0 9
31104: INC
31105: ST_TO_ADDR
31106: LD_INT 1
31108: PUSH
31109: FOR_DOWNTO
31110: IFFALSE 31155
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31112: LD_ADDR_VAR 0 6
31116: PUSH
31117: LD_VAR 0 6
31121: PPUSH
31122: LD_VAR 0 9
31126: PUSH
31127: LD_VAR 0 7
31131: MINUS
31132: PUSH
31133: LD_INT 1
31135: PLUS
31136: PPUSH
31137: LD_VAR 0 9
31141: PUSH
31142: LD_VAR 0 7
31146: ARRAY
31147: PPUSH
31148: CALL_OW 1
31152: ST_TO_ADDR
31153: GO 31109
31155: POP
31156: POP
// end ; tmp := [ ] ;
31157: LD_ADDR_VAR 0 9
31161: PUSH
31162: EMPTY
31163: ST_TO_ADDR
// if mode then
31164: LD_VAR 0 5
31168: IFFALSE 31237
// begin for i = 1 to result do
31170: LD_ADDR_VAR 0 7
31174: PUSH
31175: DOUBLE
31176: LD_INT 1
31178: DEC
31179: ST_TO_ADDR
31180: LD_VAR 0 6
31184: PUSH
31185: FOR_TO
31186: IFFALSE 31225
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31188: LD_ADDR_VAR 0 9
31192: PUSH
31193: LD_VAR 0 9
31197: PPUSH
31198: LD_VAR 0 7
31202: PPUSH
31203: LD_VAR 0 6
31207: PUSH
31208: LD_VAR 0 7
31212: ARRAY
31213: PUSH
31214: LD_INT 1
31216: ARRAY
31217: PPUSH
31218: CALL_OW 1
31222: ST_TO_ADDR
31223: GO 31185
31225: POP
31226: POP
// result := tmp ;
31227: LD_ADDR_VAR 0 6
31231: PUSH
31232: LD_VAR 0 9
31236: ST_TO_ADDR
// end ; end ;
31237: LD_VAR 0 6
31241: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31242: LD_INT 0
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31250: LD_ADDR_VAR 0 5
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: EMPTY
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// if not x or not y then
31272: LD_VAR 0 2
31276: NOT
31277: PUSH
31278: LD_VAR 0 3
31282: NOT
31283: OR
31284: IFFALSE 31288
// exit ;
31286: GO 32938
// if not range then
31288: LD_VAR 0 4
31292: NOT
31293: IFFALSE 31303
// range := 10 ;
31295: LD_ADDR_VAR 0 4
31299: PUSH
31300: LD_INT 10
31302: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31303: LD_ADDR_VAR 0 8
31307: PUSH
31308: LD_INT 81
31310: PUSH
31311: LD_VAR 0 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 92
31322: PUSH
31323: LD_VAR 0 2
31327: PUSH
31328: LD_VAR 0 3
31332: PUSH
31333: LD_VAR 0 4
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 3
31346: PUSH
31347: LD_INT 21
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 69
31370: ST_TO_ADDR
// if not tmp then
31371: LD_VAR 0 8
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 32938
// for i in tmp do
31380: LD_ADDR_VAR 0 6
31384: PUSH
31385: LD_VAR 0 8
31389: PUSH
31390: FOR_IN
31391: IFFALSE 32913
// begin points := [ 0 , 0 , 0 ] ;
31393: LD_ADDR_VAR 0 9
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
// bpoints := 1 ;
31412: LD_ADDR_VAR 0 10
31416: PUSH
31417: LD_INT 1
31419: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31420: LD_VAR 0 6
31424: PPUSH
31425: CALL_OW 247
31429: PUSH
31430: LD_INT 1
31432: DOUBLE
31433: EQUAL
31434: IFTRUE 31438
31436: GO 32016
31438: POP
// begin if GetClass ( i ) = 1 then
31439: LD_VAR 0 6
31443: PPUSH
31444: CALL_OW 257
31448: PUSH
31449: LD_INT 1
31451: EQUAL
31452: IFFALSE 31473
// points := [ 10 , 5 , 3 ] ;
31454: LD_ADDR_VAR 0 9
31458: PUSH
31459: LD_INT 10
31461: PUSH
31462: LD_INT 5
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31473: LD_VAR 0 6
31477: PPUSH
31478: CALL_OW 257
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 4
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: IN
31497: IFFALSE 31518
// points := [ 3 , 2 , 1 ] ;
31499: LD_ADDR_VAR 0 9
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31518: LD_VAR 0 6
31522: PPUSH
31523: CALL_OW 257
31527: PUSH
31528: LD_INT 5
31530: EQUAL
31531: IFFALSE 31552
// points := [ 130 , 5 , 2 ] ;
31533: LD_ADDR_VAR 0 9
31537: PUSH
31538: LD_INT 130
31540: PUSH
31541: LD_INT 5
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31552: LD_VAR 0 6
31556: PPUSH
31557: CALL_OW 257
31561: PUSH
31562: LD_INT 8
31564: EQUAL
31565: IFFALSE 31586
// points := [ 35 , 35 , 30 ] ;
31567: LD_ADDR_VAR 0 9
31571: PUSH
31572: LD_INT 35
31574: PUSH
31575: LD_INT 35
31577: PUSH
31578: LD_INT 30
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31586: LD_VAR 0 6
31590: PPUSH
31591: CALL_OW 257
31595: PUSH
31596: LD_INT 9
31598: EQUAL
31599: IFFALSE 31620
// points := [ 20 , 55 , 40 ] ;
31601: LD_ADDR_VAR 0 9
31605: PUSH
31606: LD_INT 20
31608: PUSH
31609: LD_INT 55
31611: PUSH
31612: LD_INT 40
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31620: LD_VAR 0 6
31624: PPUSH
31625: CALL_OW 257
31629: PUSH
31630: LD_INT 12
31632: PUSH
31633: LD_INT 16
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: IN
31640: IFFALSE 31661
// points := [ 5 , 3 , 2 ] ;
31642: LD_ADDR_VAR 0 9
31646: PUSH
31647: LD_INT 5
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31661: LD_VAR 0 6
31665: PPUSH
31666: CALL_OW 257
31670: PUSH
31671: LD_INT 17
31673: EQUAL
31674: IFFALSE 31695
// points := [ 100 , 50 , 75 ] ;
31676: LD_ADDR_VAR 0 9
31680: PUSH
31681: LD_INT 100
31683: PUSH
31684: LD_INT 50
31686: PUSH
31687: LD_INT 75
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: LIST
31694: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31695: LD_VAR 0 6
31699: PPUSH
31700: CALL_OW 257
31704: PUSH
31705: LD_INT 15
31707: EQUAL
31708: IFFALSE 31729
// points := [ 10 , 5 , 3 ] ;
31710: LD_ADDR_VAR 0 9
31714: PUSH
31715: LD_INT 10
31717: PUSH
31718: LD_INT 5
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31729: LD_VAR 0 6
31733: PPUSH
31734: CALL_OW 257
31738: PUSH
31739: LD_INT 14
31741: EQUAL
31742: IFFALSE 31763
// points := [ 10 , 0 , 0 ] ;
31744: LD_ADDR_VAR 0 9
31748: PUSH
31749: LD_INT 10
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31763: LD_VAR 0 6
31767: PPUSH
31768: CALL_OW 257
31772: PUSH
31773: LD_INT 11
31775: EQUAL
31776: IFFALSE 31797
// points := [ 30 , 10 , 5 ] ;
31778: LD_ADDR_VAR 0 9
31782: PUSH
31783: LD_INT 30
31785: PUSH
31786: LD_INT 10
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31797: LD_VAR 0 1
31801: PPUSH
31802: LD_INT 5
31804: PPUSH
31805: CALL_OW 321
31809: PUSH
31810: LD_INT 2
31812: EQUAL
31813: IFFALSE 31830
// bpoints := bpoints * 1.8 ;
31815: LD_ADDR_VAR 0 10
31819: PUSH
31820: LD_VAR 0 10
31824: PUSH
31825: LD_REAL  1.80000000000000E+0000
31828: MUL
31829: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31830: LD_VAR 0 6
31834: PPUSH
31835: CALL_OW 257
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 3
31848: PUSH
31849: LD_INT 4
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: IN
31858: PUSH
31859: LD_VAR 0 1
31863: PPUSH
31864: LD_INT 51
31866: PPUSH
31867: CALL_OW 321
31871: PUSH
31872: LD_INT 2
31874: EQUAL
31875: AND
31876: IFFALSE 31893
// bpoints := bpoints * 1.2 ;
31878: LD_ADDR_VAR 0 10
31882: PUSH
31883: LD_VAR 0 10
31887: PUSH
31888: LD_REAL  1.20000000000000E+0000
31891: MUL
31892: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31893: LD_VAR 0 6
31897: PPUSH
31898: CALL_OW 257
31902: PUSH
31903: LD_INT 5
31905: PUSH
31906: LD_INT 7
31908: PUSH
31909: LD_INT 9
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: IN
31917: PUSH
31918: LD_VAR 0 1
31922: PPUSH
31923: LD_INT 52
31925: PPUSH
31926: CALL_OW 321
31930: PUSH
31931: LD_INT 2
31933: EQUAL
31934: AND
31935: IFFALSE 31952
// bpoints := bpoints * 1.5 ;
31937: LD_ADDR_VAR 0 10
31941: PUSH
31942: LD_VAR 0 10
31946: PUSH
31947: LD_REAL  1.50000000000000E+0000
31950: MUL
31951: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31952: LD_VAR 0 1
31956: PPUSH
31957: LD_INT 66
31959: PPUSH
31960: CALL_OW 321
31964: PUSH
31965: LD_INT 2
31967: EQUAL
31968: IFFALSE 31985
// bpoints := bpoints * 1.1 ;
31970: LD_ADDR_VAR 0 10
31974: PUSH
31975: LD_VAR 0 10
31979: PUSH
31980: LD_REAL  1.10000000000000E+0000
31983: MUL
31984: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31985: LD_ADDR_VAR 0 10
31989: PUSH
31990: LD_VAR 0 10
31994: PUSH
31995: LD_VAR 0 6
31999: PPUSH
32000: LD_INT 1
32002: PPUSH
32003: CALL_OW 259
32007: PUSH
32008: LD_REAL  1.15000000000000E+0000
32011: MUL
32012: MUL
32013: ST_TO_ADDR
// end ; unit_vehicle :
32014: GO 32842
32016: LD_INT 2
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 32830
32024: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32025: LD_VAR 0 6
32029: PPUSH
32030: CALL_OW 264
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 42
32040: PUSH
32041: LD_INT 24
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: IN
32049: IFFALSE 32070
// points := [ 25 , 5 , 3 ] ;
32051: LD_ADDR_VAR 0 9
32055: PUSH
32056: LD_INT 25
32058: PUSH
32059: LD_INT 5
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32070: LD_VAR 0 6
32074: PPUSH
32075: CALL_OW 264
32079: PUSH
32080: LD_INT 4
32082: PUSH
32083: LD_INT 43
32085: PUSH
32086: LD_INT 25
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: IN
32094: IFFALSE 32115
// points := [ 40 , 15 , 5 ] ;
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_INT 40
32103: PUSH
32104: LD_INT 15
32106: PUSH
32107: LD_INT 5
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32115: LD_VAR 0 6
32119: PPUSH
32120: CALL_OW 264
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 23
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: IN
32135: IFFALSE 32156
// points := [ 7 , 25 , 8 ] ;
32137: LD_ADDR_VAR 0 9
32141: PUSH
32142: LD_INT 7
32144: PUSH
32145: LD_INT 25
32147: PUSH
32148: LD_INT 8
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32156: LD_VAR 0 6
32160: PPUSH
32161: CALL_OW 264
32165: PUSH
32166: LD_INT 5
32168: PUSH
32169: LD_INT 27
32171: PUSH
32172: LD_INT 44
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: IN
32180: IFFALSE 32201
// points := [ 14 , 50 , 16 ] ;
32182: LD_ADDR_VAR 0 9
32186: PUSH
32187: LD_INT 14
32189: PUSH
32190: LD_INT 50
32192: PUSH
32193: LD_INT 16
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32201: LD_VAR 0 6
32205: PPUSH
32206: CALL_OW 264
32210: PUSH
32211: LD_INT 6
32213: PUSH
32214: LD_INT 46
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: IN
32221: IFFALSE 32242
// points := [ 32 , 120 , 70 ] ;
32223: LD_ADDR_VAR 0 9
32227: PUSH
32228: LD_INT 32
32230: PUSH
32231: LD_INT 120
32233: PUSH
32234: LD_INT 70
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32242: LD_VAR 0 6
32246: PPUSH
32247: CALL_OW 264
32251: PUSH
32252: LD_INT 7
32254: PUSH
32255: LD_INT 28
32257: PUSH
32258: LD_INT 45
32260: PUSH
32261: LD_INT 92
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: IN
32270: IFFALSE 32291
// points := [ 35 , 20 , 45 ] ;
32272: LD_ADDR_VAR 0 9
32276: PUSH
32277: LD_INT 35
32279: PUSH
32280: LD_INT 20
32282: PUSH
32283: LD_INT 45
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32291: LD_VAR 0 6
32295: PPUSH
32296: CALL_OW 264
32300: PUSH
32301: LD_INT 47
32303: PUSH
32304: EMPTY
32305: LIST
32306: IN
32307: IFFALSE 32328
// points := [ 67 , 45 , 75 ] ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_INT 67
32316: PUSH
32317: LD_INT 45
32319: PUSH
32320: LD_INT 75
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32328: LD_VAR 0 6
32332: PPUSH
32333: CALL_OW 264
32337: PUSH
32338: LD_INT 26
32340: PUSH
32341: EMPTY
32342: LIST
32343: IN
32344: IFFALSE 32365
// points := [ 120 , 30 , 80 ] ;
32346: LD_ADDR_VAR 0 9
32350: PUSH
32351: LD_INT 120
32353: PUSH
32354: LD_INT 30
32356: PUSH
32357: LD_INT 80
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32365: LD_VAR 0 6
32369: PPUSH
32370: CALL_OW 264
32374: PUSH
32375: LD_INT 22
32377: PUSH
32378: EMPTY
32379: LIST
32380: IN
32381: IFFALSE 32402
// points := [ 40 , 1 , 1 ] ;
32383: LD_ADDR_VAR 0 9
32387: PUSH
32388: LD_INT 40
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32402: LD_VAR 0 6
32406: PPUSH
32407: CALL_OW 264
32411: PUSH
32412: LD_INT 29
32414: PUSH
32415: EMPTY
32416: LIST
32417: IN
32418: IFFALSE 32439
// points := [ 70 , 200 , 400 ] ;
32420: LD_ADDR_VAR 0 9
32424: PUSH
32425: LD_INT 70
32427: PUSH
32428: LD_INT 200
32430: PUSH
32431: LD_INT 400
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32439: LD_VAR 0 6
32443: PPUSH
32444: CALL_OW 264
32448: PUSH
32449: LD_INT 14
32451: PUSH
32452: LD_INT 53
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: IN
32459: IFFALSE 32480
// points := [ 40 , 10 , 20 ] ;
32461: LD_ADDR_VAR 0 9
32465: PUSH
32466: LD_INT 40
32468: PUSH
32469: LD_INT 10
32471: PUSH
32472: LD_INT 20
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: LIST
32479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32480: LD_VAR 0 6
32484: PPUSH
32485: CALL_OW 264
32489: PUSH
32490: LD_INT 9
32492: PUSH
32493: EMPTY
32494: LIST
32495: IN
32496: IFFALSE 32517
// points := [ 5 , 70 , 20 ] ;
32498: LD_ADDR_VAR 0 9
32502: PUSH
32503: LD_INT 5
32505: PUSH
32506: LD_INT 70
32508: PUSH
32509: LD_INT 20
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32517: LD_VAR 0 6
32521: PPUSH
32522: CALL_OW 264
32526: PUSH
32527: LD_INT 10
32529: PUSH
32530: EMPTY
32531: LIST
32532: IN
32533: IFFALSE 32554
// points := [ 35 , 110 , 70 ] ;
32535: LD_ADDR_VAR 0 9
32539: PUSH
32540: LD_INT 35
32542: PUSH
32543: LD_INT 110
32545: PUSH
32546: LD_INT 70
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32554: LD_VAR 0 6
32558: PPUSH
32559: CALL_OW 265
32563: PUSH
32564: LD_INT 25
32566: EQUAL
32567: IFFALSE 32588
// points := [ 80 , 65 , 100 ] ;
32569: LD_ADDR_VAR 0 9
32573: PUSH
32574: LD_INT 80
32576: PUSH
32577: LD_INT 65
32579: PUSH
32580: LD_INT 100
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: LIST
32587: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32588: LD_VAR 0 6
32592: PPUSH
32593: CALL_OW 263
32597: PUSH
32598: LD_INT 1
32600: EQUAL
32601: IFFALSE 32636
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32603: LD_ADDR_VAR 0 10
32607: PUSH
32608: LD_VAR 0 10
32612: PUSH
32613: LD_VAR 0 6
32617: PPUSH
32618: CALL_OW 311
32622: PPUSH
32623: LD_INT 3
32625: PPUSH
32626: CALL_OW 259
32630: PUSH
32631: LD_INT 4
32633: MUL
32634: MUL
32635: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32636: LD_VAR 0 6
32640: PPUSH
32641: CALL_OW 263
32645: PUSH
32646: LD_INT 2
32648: EQUAL
32649: IFFALSE 32700
// begin j := IsControledBy ( i ) ;
32651: LD_ADDR_VAR 0 7
32655: PUSH
32656: LD_VAR 0 6
32660: PPUSH
32661: CALL_OW 312
32665: ST_TO_ADDR
// if j then
32666: LD_VAR 0 7
32670: IFFALSE 32700
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32672: LD_ADDR_VAR 0 10
32676: PUSH
32677: LD_VAR 0 10
32681: PUSH
32682: LD_VAR 0 7
32686: PPUSH
32687: LD_INT 3
32689: PPUSH
32690: CALL_OW 259
32694: PUSH
32695: LD_INT 3
32697: MUL
32698: MUL
32699: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32700: LD_VAR 0 6
32704: PPUSH
32705: CALL_OW 264
32709: PUSH
32710: LD_INT 5
32712: PUSH
32713: LD_INT 6
32715: PUSH
32716: LD_INT 46
32718: PUSH
32719: LD_INT 44
32721: PUSH
32722: LD_INT 47
32724: PUSH
32725: LD_INT 45
32727: PUSH
32728: LD_INT 28
32730: PUSH
32731: LD_INT 7
32733: PUSH
32734: LD_INT 27
32736: PUSH
32737: LD_INT 29
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: IN
32752: PUSH
32753: LD_VAR 0 1
32757: PPUSH
32758: LD_INT 52
32760: PPUSH
32761: CALL_OW 321
32765: PUSH
32766: LD_INT 2
32768: EQUAL
32769: AND
32770: IFFALSE 32787
// bpoints := bpoints * 1.2 ;
32772: LD_ADDR_VAR 0 10
32776: PUSH
32777: LD_VAR 0 10
32781: PUSH
32782: LD_REAL  1.20000000000000E+0000
32785: MUL
32786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32787: LD_VAR 0 6
32791: PPUSH
32792: CALL_OW 264
32796: PUSH
32797: LD_INT 6
32799: PUSH
32800: LD_INT 46
32802: PUSH
32803: LD_INT 47
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: IN
32811: IFFALSE 32828
// bpoints := bpoints * 1.2 ;
32813: LD_ADDR_VAR 0 10
32817: PUSH
32818: LD_VAR 0 10
32822: PUSH
32823: LD_REAL  1.20000000000000E+0000
32826: MUL
32827: ST_TO_ADDR
// end ; unit_building :
32828: GO 32842
32830: LD_INT 3
32832: DOUBLE
32833: EQUAL
32834: IFTRUE 32838
32836: GO 32841
32838: POP
// ; end ;
32839: GO 32842
32841: POP
// for j = 1 to 3 do
32842: LD_ADDR_VAR 0 7
32846: PUSH
32847: DOUBLE
32848: LD_INT 1
32850: DEC
32851: ST_TO_ADDR
32852: LD_INT 3
32854: PUSH
32855: FOR_TO
32856: IFFALSE 32909
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32858: LD_ADDR_VAR 0 5
32862: PUSH
32863: LD_VAR 0 5
32867: PPUSH
32868: LD_VAR 0 7
32872: PPUSH
32873: LD_VAR 0 5
32877: PUSH
32878: LD_VAR 0 7
32882: ARRAY
32883: PUSH
32884: LD_VAR 0 9
32888: PUSH
32889: LD_VAR 0 7
32893: ARRAY
32894: PUSH
32895: LD_VAR 0 10
32899: MUL
32900: PLUS
32901: PPUSH
32902: CALL_OW 1
32906: ST_TO_ADDR
32907: GO 32855
32909: POP
32910: POP
// end ;
32911: GO 31390
32913: POP
32914: POP
// result := Replace ( result , 4 , tmp ) ;
32915: LD_ADDR_VAR 0 5
32919: PUSH
32920: LD_VAR 0 5
32924: PPUSH
32925: LD_INT 4
32927: PPUSH
32928: LD_VAR 0 8
32932: PPUSH
32933: CALL_OW 1
32937: ST_TO_ADDR
// end ;
32938: LD_VAR 0 5
32942: RET
// export function DangerAtRange ( unit , range ) ; begin
32943: LD_INT 0
32945: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 255
32960: PPUSH
32961: LD_VAR 0 1
32965: PPUSH
32966: CALL_OW 250
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 251
32980: PPUSH
32981: LD_VAR 0 2
32985: PPUSH
32986: CALL 31242 0 4
32990: ST_TO_ADDR
// end ;
32991: LD_VAR 0 3
32995: RET
// export function DangerInArea ( side , area ) ; begin
32996: LD_INT 0
32998: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32999: LD_ADDR_VAR 0 3
33003: PUSH
33004: LD_VAR 0 2
33008: PPUSH
33009: LD_INT 81
33011: PUSH
33012: LD_VAR 0 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PPUSH
33021: CALL_OW 70
33025: ST_TO_ADDR
// end ;
33026: LD_VAR 0 3
33030: RET
// export function IsExtension ( b ) ; begin
33031: LD_INT 0
33033: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33034: LD_ADDR_VAR 0 2
33038: PUSH
33039: LD_VAR 0 1
33043: PUSH
33044: LD_INT 23
33046: PUSH
33047: LD_INT 20
33049: PUSH
33050: LD_INT 22
33052: PUSH
33053: LD_INT 17
33055: PUSH
33056: LD_INT 24
33058: PUSH
33059: LD_INT 21
33061: PUSH
33062: LD_INT 19
33064: PUSH
33065: LD_INT 16
33067: PUSH
33068: LD_INT 25
33070: PUSH
33071: LD_INT 18
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: IN
33086: ST_TO_ADDR
// end ;
33087: LD_VAR 0 2
33091: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33092: LD_INT 0
33094: PPUSH
33095: PPUSH
33096: PPUSH
// result := [ ] ;
33097: LD_ADDR_VAR 0 4
33101: PUSH
33102: EMPTY
33103: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33104: LD_ADDR_VAR 0 5
33108: PUSH
33109: LD_VAR 0 2
33113: PPUSH
33114: LD_INT 21
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PPUSH
33124: CALL_OW 70
33128: ST_TO_ADDR
// if not tmp then
33129: LD_VAR 0 5
33133: NOT
33134: IFFALSE 33138
// exit ;
33136: GO 33202
// if checkLink then
33138: LD_VAR 0 3
33142: IFFALSE 33192
// begin for i in tmp do
33144: LD_ADDR_VAR 0 6
33148: PUSH
33149: LD_VAR 0 5
33153: PUSH
33154: FOR_IN
33155: IFFALSE 33190
// if GetBase ( i ) <> base then
33157: LD_VAR 0 6
33161: PPUSH
33162: CALL_OW 274
33166: PUSH
33167: LD_VAR 0 1
33171: NONEQUAL
33172: IFFALSE 33188
// ComLinkToBase ( base , i ) ;
33174: LD_VAR 0 1
33178: PPUSH
33179: LD_VAR 0 6
33183: PPUSH
33184: CALL_OW 169
33188: GO 33154
33190: POP
33191: POP
// end ; result := tmp ;
33192: LD_ADDR_VAR 0 4
33196: PUSH
33197: LD_VAR 0 5
33201: ST_TO_ADDR
// end ;
33202: LD_VAR 0 4
33206: RET
// export function ComComplete ( units , b ) ; var i ; begin
33207: LD_INT 0
33209: PPUSH
33210: PPUSH
// if not units then
33211: LD_VAR 0 1
33215: NOT
33216: IFFALSE 33220
// exit ;
33218: GO 33310
// for i in units do
33220: LD_ADDR_VAR 0 4
33224: PUSH
33225: LD_VAR 0 1
33229: PUSH
33230: FOR_IN
33231: IFFALSE 33308
// if BuildingStatus ( b ) = bs_build then
33233: LD_VAR 0 2
33237: PPUSH
33238: CALL_OW 461
33242: PUSH
33243: LD_INT 1
33245: EQUAL
33246: IFFALSE 33306
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33248: LD_VAR 0 4
33252: PPUSH
33253: LD_STRING h
33255: PUSH
33256: LD_VAR 0 2
33260: PPUSH
33261: CALL_OW 250
33265: PUSH
33266: LD_VAR 0 2
33270: PPUSH
33271: CALL_OW 251
33275: PUSH
33276: LD_VAR 0 2
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: PUSH
33299: EMPTY
33300: LIST
33301: PPUSH
33302: CALL_OW 446
33306: GO 33230
33308: POP
33309: POP
// end ;
33310: LD_VAR 0 3
33314: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33315: LD_INT 0
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33323: LD_VAR 0 1
33327: NOT
33328: PUSH
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 263
33338: PUSH
33339: LD_INT 2
33341: NONEQUAL
33342: OR
33343: IFFALSE 33347
// exit ;
33345: GO 33663
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33347: LD_ADDR_VAR 0 6
33351: PUSH
33352: LD_INT 22
33354: PUSH
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 255
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 30
33374: PUSH
33375: LD_INT 36
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 34
33384: PUSH
33385: LD_INT 31
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PPUSH
33401: CALL_OW 69
33405: ST_TO_ADDR
// if not tmp then
33406: LD_VAR 0 6
33410: NOT
33411: IFFALSE 33415
// exit ;
33413: GO 33663
// result := [ ] ;
33415: LD_ADDR_VAR 0 2
33419: PUSH
33420: EMPTY
33421: ST_TO_ADDR
// for i in tmp do
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_VAR 0 6
33431: PUSH
33432: FOR_IN
33433: IFFALSE 33504
// begin t := UnitsInside ( i ) ;
33435: LD_ADDR_VAR 0 4
33439: PUSH
33440: LD_VAR 0 3
33444: PPUSH
33445: CALL_OW 313
33449: ST_TO_ADDR
// if t then
33450: LD_VAR 0 4
33454: IFFALSE 33502
// for j in t do
33456: LD_ADDR_VAR 0 7
33460: PUSH
33461: LD_VAR 0 4
33465: PUSH
33466: FOR_IN
33467: IFFALSE 33500
// result := Replace ( result , result + 1 , j ) ;
33469: LD_ADDR_VAR 0 2
33473: PUSH
33474: LD_VAR 0 2
33478: PPUSH
33479: LD_VAR 0 2
33483: PUSH
33484: LD_INT 1
33486: PLUS
33487: PPUSH
33488: LD_VAR 0 7
33492: PPUSH
33493: CALL_OW 1
33497: ST_TO_ADDR
33498: GO 33466
33500: POP
33501: POP
// end ;
33502: GO 33432
33504: POP
33505: POP
// if not result then
33506: LD_VAR 0 2
33510: NOT
33511: IFFALSE 33515
// exit ;
33513: GO 33663
// mech := result [ 1 ] ;
33515: LD_ADDR_VAR 0 5
33519: PUSH
33520: LD_VAR 0 2
33524: PUSH
33525: LD_INT 1
33527: ARRAY
33528: ST_TO_ADDR
// if result > 1 then
33529: LD_VAR 0 2
33533: PUSH
33534: LD_INT 1
33536: GREATER
33537: IFFALSE 33649
// begin for i = 2 to result do
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: DOUBLE
33545: LD_INT 2
33547: DEC
33548: ST_TO_ADDR
33549: LD_VAR 0 2
33553: PUSH
33554: FOR_TO
33555: IFFALSE 33647
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_VAR 0 2
33566: PUSH
33567: LD_VAR 0 3
33571: ARRAY
33572: PPUSH
33573: LD_INT 3
33575: PPUSH
33576: CALL_OW 259
33580: PUSH
33581: LD_VAR 0 2
33585: PUSH
33586: LD_VAR 0 3
33590: ARRAY
33591: PPUSH
33592: CALL_OW 432
33596: MINUS
33597: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33598: LD_VAR 0 4
33602: PUSH
33603: LD_VAR 0 5
33607: PPUSH
33608: LD_INT 3
33610: PPUSH
33611: CALL_OW 259
33615: PUSH
33616: LD_VAR 0 5
33620: PPUSH
33621: CALL_OW 432
33625: MINUS
33626: GREATEREQUAL
33627: IFFALSE 33645
// mech := result [ i ] ;
33629: LD_ADDR_VAR 0 5
33633: PUSH
33634: LD_VAR 0 2
33638: PUSH
33639: LD_VAR 0 3
33643: ARRAY
33644: ST_TO_ADDR
// end ;
33645: GO 33554
33647: POP
33648: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33649: LD_VAR 0 1
33653: PPUSH
33654: LD_VAR 0 5
33658: PPUSH
33659: CALL_OW 135
// end ;
33663: LD_VAR 0 2
33667: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33668: LD_INT 0
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
// result := [ ] ;
33683: LD_ADDR_VAR 0 7
33687: PUSH
33688: EMPTY
33689: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33690: LD_VAR 0 1
33694: PPUSH
33695: CALL_OW 266
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: IN
33710: NOT
33711: IFFALSE 33715
// exit ;
33713: GO 35349
// if name then
33715: LD_VAR 0 3
33719: IFFALSE 33735
// SetBName ( base_dep , name ) ;
33721: LD_VAR 0 1
33725: PPUSH
33726: LD_VAR 0 3
33730: PPUSH
33731: CALL_OW 500
// base := GetBase ( base_dep ) ;
33735: LD_ADDR_VAR 0 15
33739: PUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL_OW 274
33749: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33750: LD_ADDR_VAR 0 16
33754: PUSH
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL_OW 255
33764: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33765: LD_ADDR_VAR 0 17
33769: PUSH
33770: LD_VAR 0 1
33774: PPUSH
33775: CALL_OW 248
33779: ST_TO_ADDR
// if sources then
33780: LD_VAR 0 5
33784: IFFALSE 33831
// for i = 1 to 3 do
33786: LD_ADDR_VAR 0 8
33790: PUSH
33791: DOUBLE
33792: LD_INT 1
33794: DEC
33795: ST_TO_ADDR
33796: LD_INT 3
33798: PUSH
33799: FOR_TO
33800: IFFALSE 33829
// AddResourceType ( base , i , sources [ i ] ) ;
33802: LD_VAR 0 15
33806: PPUSH
33807: LD_VAR 0 8
33811: PPUSH
33812: LD_VAR 0 5
33816: PUSH
33817: LD_VAR 0 8
33821: ARRAY
33822: PPUSH
33823: CALL_OW 276
33827: GO 33799
33829: POP
33830: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33831: LD_ADDR_VAR 0 18
33835: PUSH
33836: LD_VAR 0 15
33840: PPUSH
33841: LD_VAR 0 2
33845: PPUSH
33846: LD_INT 1
33848: PPUSH
33849: CALL 33092 0 3
33853: ST_TO_ADDR
// InitHc ;
33854: CALL_OW 19
// InitUc ;
33858: CALL_OW 18
// uc_side := side ;
33862: LD_ADDR_OWVAR 20
33866: PUSH
33867: LD_VAR 0 16
33871: ST_TO_ADDR
// uc_nation := nation ;
33872: LD_ADDR_OWVAR 21
33876: PUSH
33877: LD_VAR 0 17
33881: ST_TO_ADDR
// if buildings then
33882: LD_VAR 0 18
33886: IFFALSE 35208
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33888: LD_ADDR_VAR 0 19
33892: PUSH
33893: LD_VAR 0 18
33897: PPUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 30
33903: PUSH
33904: LD_INT 29
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 30
33913: PUSH
33914: LD_INT 30
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: PPUSH
33926: CALL_OW 72
33930: ST_TO_ADDR
// if tmp then
33931: LD_VAR 0 19
33935: IFFALSE 33983
// for i in tmp do
33937: LD_ADDR_VAR 0 8
33941: PUSH
33942: LD_VAR 0 19
33946: PUSH
33947: FOR_IN
33948: IFFALSE 33981
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33950: LD_VAR 0 8
33954: PPUSH
33955: CALL_OW 250
33959: PPUSH
33960: LD_VAR 0 8
33964: PPUSH
33965: CALL_OW 251
33969: PPUSH
33970: LD_VAR 0 16
33974: PPUSH
33975: CALL_OW 441
33979: GO 33947
33981: POP
33982: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33983: LD_VAR 0 18
33987: PPUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 30
33993: PUSH
33994: LD_INT 32
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 30
34003: PUSH
34004: LD_INT 33
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: PPUSH
34016: CALL_OW 72
34020: IFFALSE 34108
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34022: LD_ADDR_VAR 0 8
34026: PUSH
34027: LD_VAR 0 18
34031: PPUSH
34032: LD_INT 2
34034: PUSH
34035: LD_INT 30
34037: PUSH
34038: LD_INT 32
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 30
34047: PUSH
34048: LD_INT 33
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: PPUSH
34060: CALL_OW 72
34064: PUSH
34065: FOR_IN
34066: IFFALSE 34106
// begin if not GetBWeapon ( i ) then
34068: LD_VAR 0 8
34072: PPUSH
34073: CALL_OW 269
34077: NOT
34078: IFFALSE 34104
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34080: LD_VAR 0 8
34084: PPUSH
34085: LD_VAR 0 8
34089: PPUSH
34090: LD_VAR 0 2
34094: PPUSH
34095: CALL 35354 0 2
34099: PPUSH
34100: CALL_OW 431
// end ;
34104: GO 34065
34106: POP
34107: POP
// end ; for i = 1 to personel do
34108: LD_ADDR_VAR 0 8
34112: PUSH
34113: DOUBLE
34114: LD_INT 1
34116: DEC
34117: ST_TO_ADDR
34118: LD_VAR 0 6
34122: PUSH
34123: FOR_TO
34124: IFFALSE 35188
// begin if i > 4 then
34126: LD_VAR 0 8
34130: PUSH
34131: LD_INT 4
34133: GREATER
34134: IFFALSE 34138
// break ;
34136: GO 35188
// case i of 1 :
34138: LD_VAR 0 8
34142: PUSH
34143: LD_INT 1
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34231
34151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34152: LD_ADDR_VAR 0 12
34156: PUSH
34157: LD_VAR 0 18
34161: PPUSH
34162: LD_INT 22
34164: PUSH
34165: LD_VAR 0 16
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 58
34176: PUSH
34177: EMPTY
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: LD_INT 30
34185: PUSH
34186: LD_INT 32
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 30
34195: PUSH
34196: LD_INT 4
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 30
34205: PUSH
34206: LD_INT 5
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: PPUSH
34224: CALL_OW 72
34228: ST_TO_ADDR
34229: GO 34453
34231: LD_INT 2
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34239
34237: GO 34301
34239: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34240: LD_ADDR_VAR 0 12
34244: PUSH
34245: LD_VAR 0 18
34249: PPUSH
34250: LD_INT 22
34252: PUSH
34253: LD_VAR 0 16
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 2
34264: PUSH
34265: LD_INT 30
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 30
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PPUSH
34294: CALL_OW 72
34298: ST_TO_ADDR
34299: GO 34453
34301: LD_INT 3
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34309
34307: GO 34371
34309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34310: LD_ADDR_VAR 0 12
34314: PUSH
34315: LD_VAR 0 18
34319: PPUSH
34320: LD_INT 22
34322: PUSH
34323: LD_VAR 0 16
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 30
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 30
34347: PUSH
34348: LD_INT 3
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PPUSH
34364: CALL_OW 72
34368: ST_TO_ADDR
34369: GO 34453
34371: LD_INT 4
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34379
34377: GO 34452
34379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34380: LD_ADDR_VAR 0 12
34384: PUSH
34385: LD_VAR 0 18
34389: PPUSH
34390: LD_INT 22
34392: PUSH
34393: LD_VAR 0 16
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: LD_INT 30
34407: PUSH
34408: LD_INT 6
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 30
34417: PUSH
34418: LD_INT 7
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 30
34427: PUSH
34428: LD_INT 8
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PPUSH
34445: CALL_OW 72
34449: ST_TO_ADDR
34450: GO 34453
34452: POP
// if i = 1 then
34453: LD_VAR 0 8
34457: PUSH
34458: LD_INT 1
34460: EQUAL
34461: IFFALSE 34572
// begin tmp := [ ] ;
34463: LD_ADDR_VAR 0 19
34467: PUSH
34468: EMPTY
34469: ST_TO_ADDR
// for j in f do
34470: LD_ADDR_VAR 0 9
34474: PUSH
34475: LD_VAR 0 12
34479: PUSH
34480: FOR_IN
34481: IFFALSE 34554
// if GetBType ( j ) = b_bunker then
34483: LD_VAR 0 9
34487: PPUSH
34488: CALL_OW 266
34492: PUSH
34493: LD_INT 32
34495: EQUAL
34496: IFFALSE 34523
// tmp := Insert ( tmp , 1 , j ) else
34498: LD_ADDR_VAR 0 19
34502: PUSH
34503: LD_VAR 0 19
34507: PPUSH
34508: LD_INT 1
34510: PPUSH
34511: LD_VAR 0 9
34515: PPUSH
34516: CALL_OW 2
34520: ST_TO_ADDR
34521: GO 34552
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34523: LD_ADDR_VAR 0 19
34527: PUSH
34528: LD_VAR 0 19
34532: PPUSH
34533: LD_VAR 0 19
34537: PUSH
34538: LD_INT 1
34540: PLUS
34541: PPUSH
34542: LD_VAR 0 9
34546: PPUSH
34547: CALL_OW 2
34551: ST_TO_ADDR
34552: GO 34480
34554: POP
34555: POP
// if tmp then
34556: LD_VAR 0 19
34560: IFFALSE 34572
// f := tmp ;
34562: LD_ADDR_VAR 0 12
34566: PUSH
34567: LD_VAR 0 19
34571: ST_TO_ADDR
// end ; x := personel [ i ] ;
34572: LD_ADDR_VAR 0 13
34576: PUSH
34577: LD_VAR 0 6
34581: PUSH
34582: LD_VAR 0 8
34586: ARRAY
34587: ST_TO_ADDR
// if x = - 1 then
34588: LD_VAR 0 13
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: EQUAL
34597: IFFALSE 34806
// begin for j in f do
34599: LD_ADDR_VAR 0 9
34603: PUSH
34604: LD_VAR 0 12
34608: PUSH
34609: FOR_IN
34610: IFFALSE 34802
// repeat InitHc ;
34612: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34616: LD_VAR 0 9
34620: PPUSH
34621: CALL_OW 266
34625: PUSH
34626: LD_INT 5
34628: EQUAL
34629: IFFALSE 34699
// begin if UnitsInside ( j ) < 3 then
34631: LD_VAR 0 9
34635: PPUSH
34636: CALL_OW 313
34640: PUSH
34641: LD_INT 3
34643: LESS
34644: IFFALSE 34680
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34646: LD_INT 0
34648: PPUSH
34649: LD_INT 5
34651: PUSH
34652: LD_INT 8
34654: PUSH
34655: LD_INT 9
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: PUSH
34663: LD_VAR 0 17
34667: ARRAY
34668: PPUSH
34669: LD_VAR 0 4
34673: PPUSH
34674: CALL_OW 380
34678: GO 34697
// PrepareHuman ( false , i , skill ) ;
34680: LD_INT 0
34682: PPUSH
34683: LD_VAR 0 8
34687: PPUSH
34688: LD_VAR 0 4
34692: PPUSH
34693: CALL_OW 380
// end else
34697: GO 34716
// PrepareHuman ( false , i , skill ) ;
34699: LD_INT 0
34701: PPUSH
34702: LD_VAR 0 8
34706: PPUSH
34707: LD_VAR 0 4
34711: PPUSH
34712: CALL_OW 380
// un := CreateHuman ;
34716: LD_ADDR_VAR 0 14
34720: PUSH
34721: CALL_OW 44
34725: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34726: LD_ADDR_VAR 0 7
34730: PUSH
34731: LD_VAR 0 7
34735: PPUSH
34736: LD_INT 1
34738: PPUSH
34739: LD_VAR 0 14
34743: PPUSH
34744: CALL_OW 2
34748: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34749: LD_VAR 0 14
34753: PPUSH
34754: LD_VAR 0 9
34758: PPUSH
34759: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34763: LD_VAR 0 9
34767: PPUSH
34768: CALL_OW 313
34772: PUSH
34773: LD_INT 6
34775: EQUAL
34776: PUSH
34777: LD_VAR 0 9
34781: PPUSH
34782: CALL_OW 266
34786: PUSH
34787: LD_INT 32
34789: PUSH
34790: LD_INT 31
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: IN
34797: OR
34798: IFFALSE 34612
34800: GO 34609
34802: POP
34803: POP
// end else
34804: GO 35186
// for j = 1 to x do
34806: LD_ADDR_VAR 0 9
34810: PUSH
34811: DOUBLE
34812: LD_INT 1
34814: DEC
34815: ST_TO_ADDR
34816: LD_VAR 0 13
34820: PUSH
34821: FOR_TO
34822: IFFALSE 35184
// begin InitHc ;
34824: CALL_OW 19
// if not f then
34828: LD_VAR 0 12
34832: NOT
34833: IFFALSE 34922
// begin PrepareHuman ( false , i , skill ) ;
34835: LD_INT 0
34837: PPUSH
34838: LD_VAR 0 8
34842: PPUSH
34843: LD_VAR 0 4
34847: PPUSH
34848: CALL_OW 380
// un := CreateHuman ;
34852: LD_ADDR_VAR 0 14
34856: PUSH
34857: CALL_OW 44
34861: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34862: LD_ADDR_VAR 0 7
34866: PUSH
34867: LD_VAR 0 7
34871: PPUSH
34872: LD_INT 1
34874: PPUSH
34875: LD_VAR 0 14
34879: PPUSH
34880: CALL_OW 2
34884: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34885: LD_VAR 0 14
34889: PPUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 250
34899: PPUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: CALL_OW 251
34909: PPUSH
34910: LD_INT 10
34912: PPUSH
34913: LD_INT 0
34915: PPUSH
34916: CALL_OW 50
// continue ;
34920: GO 34821
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34922: LD_VAR 0 12
34926: PUSH
34927: LD_INT 1
34929: ARRAY
34930: PPUSH
34931: CALL_OW 313
34935: PUSH
34936: LD_VAR 0 12
34940: PUSH
34941: LD_INT 1
34943: ARRAY
34944: PPUSH
34945: CALL_OW 266
34949: PUSH
34950: LD_INT 32
34952: PUSH
34953: LD_INT 31
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: IN
34960: AND
34961: PUSH
34962: LD_VAR 0 12
34966: PUSH
34967: LD_INT 1
34969: ARRAY
34970: PPUSH
34971: CALL_OW 313
34975: PUSH
34976: LD_INT 6
34978: EQUAL
34979: OR
34980: IFFALSE 35000
// f := Delete ( f , 1 ) ;
34982: LD_ADDR_VAR 0 12
34986: PUSH
34987: LD_VAR 0 12
34991: PPUSH
34992: LD_INT 1
34994: PPUSH
34995: CALL_OW 3
34999: ST_TO_ADDR
// if not f then
35000: LD_VAR 0 12
35004: NOT
35005: IFFALSE 35023
// begin x := x + 2 ;
35007: LD_ADDR_VAR 0 13
35011: PUSH
35012: LD_VAR 0 13
35016: PUSH
35017: LD_INT 2
35019: PLUS
35020: ST_TO_ADDR
// continue ;
35021: GO 34821
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35023: LD_VAR 0 12
35027: PUSH
35028: LD_INT 1
35030: ARRAY
35031: PPUSH
35032: CALL_OW 266
35036: PUSH
35037: LD_INT 5
35039: EQUAL
35040: IFFALSE 35114
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35042: LD_VAR 0 12
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: PPUSH
35051: CALL_OW 313
35055: PUSH
35056: LD_INT 3
35058: LESS
35059: IFFALSE 35095
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35061: LD_INT 0
35063: PPUSH
35064: LD_INT 5
35066: PUSH
35067: LD_INT 8
35069: PUSH
35070: LD_INT 9
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: PUSH
35078: LD_VAR 0 17
35082: ARRAY
35083: PPUSH
35084: LD_VAR 0 4
35088: PPUSH
35089: CALL_OW 380
35093: GO 35112
// PrepareHuman ( false , i , skill ) ;
35095: LD_INT 0
35097: PPUSH
35098: LD_VAR 0 8
35102: PPUSH
35103: LD_VAR 0 4
35107: PPUSH
35108: CALL_OW 380
// end else
35112: GO 35131
// PrepareHuman ( false , i , skill ) ;
35114: LD_INT 0
35116: PPUSH
35117: LD_VAR 0 8
35121: PPUSH
35122: LD_VAR 0 4
35126: PPUSH
35127: CALL_OW 380
// un := CreateHuman ;
35131: LD_ADDR_VAR 0 14
35135: PUSH
35136: CALL_OW 44
35140: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35141: LD_ADDR_VAR 0 7
35145: PUSH
35146: LD_VAR 0 7
35150: PPUSH
35151: LD_INT 1
35153: PPUSH
35154: LD_VAR 0 14
35158: PPUSH
35159: CALL_OW 2
35163: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35164: LD_VAR 0 14
35168: PPUSH
35169: LD_VAR 0 12
35173: PUSH
35174: LD_INT 1
35176: ARRAY
35177: PPUSH
35178: CALL_OW 52
// end ;
35182: GO 34821
35184: POP
35185: POP
// end ;
35186: GO 34123
35188: POP
35189: POP
// result := result ^ buildings ;
35190: LD_ADDR_VAR 0 7
35194: PUSH
35195: LD_VAR 0 7
35199: PUSH
35200: LD_VAR 0 18
35204: ADD
35205: ST_TO_ADDR
// end else
35206: GO 35349
// begin for i = 1 to personel do
35208: LD_ADDR_VAR 0 8
35212: PUSH
35213: DOUBLE
35214: LD_INT 1
35216: DEC
35217: ST_TO_ADDR
35218: LD_VAR 0 6
35222: PUSH
35223: FOR_TO
35224: IFFALSE 35347
// begin if i > 4 then
35226: LD_VAR 0 8
35230: PUSH
35231: LD_INT 4
35233: GREATER
35234: IFFALSE 35238
// break ;
35236: GO 35347
// x := personel [ i ] ;
35238: LD_ADDR_VAR 0 13
35242: PUSH
35243: LD_VAR 0 6
35247: PUSH
35248: LD_VAR 0 8
35252: ARRAY
35253: ST_TO_ADDR
// if x = - 1 then
35254: LD_VAR 0 13
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: EQUAL
35263: IFFALSE 35267
// continue ;
35265: GO 35223
// PrepareHuman ( false , i , skill ) ;
35267: LD_INT 0
35269: PPUSH
35270: LD_VAR 0 8
35274: PPUSH
35275: LD_VAR 0 4
35279: PPUSH
35280: CALL_OW 380
// un := CreateHuman ;
35284: LD_ADDR_VAR 0 14
35288: PUSH
35289: CALL_OW 44
35293: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35294: LD_VAR 0 14
35298: PPUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 250
35308: PPUSH
35309: LD_VAR 0 1
35313: PPUSH
35314: CALL_OW 251
35318: PPUSH
35319: LD_INT 10
35321: PPUSH
35322: LD_INT 0
35324: PPUSH
35325: CALL_OW 50
// result := result ^ un ;
35329: LD_ADDR_VAR 0 7
35333: PUSH
35334: LD_VAR 0 7
35338: PUSH
35339: LD_VAR 0 14
35343: ADD
35344: ST_TO_ADDR
// end ;
35345: GO 35223
35347: POP
35348: POP
// end ; end ;
35349: LD_VAR 0 7
35353: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35354: LD_INT 0
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
// result := false ;
35372: LD_ADDR_VAR 0 3
35376: PUSH
35377: LD_INT 0
35379: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35380: LD_VAR 0 1
35384: NOT
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 266
35395: PUSH
35396: LD_INT 32
35398: PUSH
35399: LD_INT 33
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: IN
35406: NOT
35407: OR
35408: IFFALSE 35412
// exit ;
35410: GO 36521
// nat := GetNation ( tower ) ;
35412: LD_ADDR_VAR 0 12
35416: PUSH
35417: LD_VAR 0 1
35421: PPUSH
35422: CALL_OW 248
35426: ST_TO_ADDR
// side := GetSide ( tower ) ;
35427: LD_ADDR_VAR 0 16
35431: PUSH
35432: LD_VAR 0 1
35436: PPUSH
35437: CALL_OW 255
35441: ST_TO_ADDR
// x := GetX ( tower ) ;
35442: LD_ADDR_VAR 0 10
35446: PUSH
35447: LD_VAR 0 1
35451: PPUSH
35452: CALL_OW 250
35456: ST_TO_ADDR
// y := GetY ( tower ) ;
35457: LD_ADDR_VAR 0 11
35461: PUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 251
35471: ST_TO_ADDR
// if not x or not y then
35472: LD_VAR 0 10
35476: NOT
35477: PUSH
35478: LD_VAR 0 11
35482: NOT
35483: OR
35484: IFFALSE 35488
// exit ;
35486: GO 36521
// weapon := 0 ;
35488: LD_ADDR_VAR 0 18
35492: PUSH
35493: LD_INT 0
35495: ST_TO_ADDR
// fac_list := [ ] ;
35496: LD_ADDR_VAR 0 17
35500: PUSH
35501: EMPTY
35502: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35503: LD_ADDR_VAR 0 6
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: CALL_OW 274
35517: PPUSH
35518: LD_VAR 0 2
35522: PPUSH
35523: LD_INT 0
35525: PPUSH
35526: CALL 33092 0 3
35530: PPUSH
35531: LD_INT 30
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PPUSH
35541: CALL_OW 72
35545: ST_TO_ADDR
// if not factories then
35546: LD_VAR 0 6
35550: NOT
35551: IFFALSE 35555
// exit ;
35553: GO 36521
// for i in factories do
35555: LD_ADDR_VAR 0 8
35559: PUSH
35560: LD_VAR 0 6
35564: PUSH
35565: FOR_IN
35566: IFFALSE 35591
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35568: LD_ADDR_VAR 0 17
35572: PUSH
35573: LD_VAR 0 17
35577: PUSH
35578: LD_VAR 0 8
35582: PPUSH
35583: CALL_OW 478
35587: UNION
35588: ST_TO_ADDR
35589: GO 35565
35591: POP
35592: POP
// if not fac_list then
35593: LD_VAR 0 17
35597: NOT
35598: IFFALSE 35602
// exit ;
35600: GO 36521
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35602: LD_ADDR_VAR 0 5
35606: PUSH
35607: LD_INT 4
35609: PUSH
35610: LD_INT 5
35612: PUSH
35613: LD_INT 9
35615: PUSH
35616: LD_INT 10
35618: PUSH
35619: LD_INT 6
35621: PUSH
35622: LD_INT 7
35624: PUSH
35625: LD_INT 11
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 27
35639: PUSH
35640: LD_INT 28
35642: PUSH
35643: LD_INT 26
35645: PUSH
35646: LD_INT 30
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 43
35657: PUSH
35658: LD_INT 44
35660: PUSH
35661: LD_INT 46
35663: PUSH
35664: LD_INT 45
35666: PUSH
35667: LD_INT 47
35669: PUSH
35670: LD_INT 49
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: LIST
35685: PUSH
35686: LD_VAR 0 12
35690: ARRAY
35691: ST_TO_ADDR
// list := list isect fac_list ;
35692: LD_ADDR_VAR 0 5
35696: PUSH
35697: LD_VAR 0 5
35701: PUSH
35702: LD_VAR 0 17
35706: ISECT
35707: ST_TO_ADDR
// if not list then
35708: LD_VAR 0 5
35712: NOT
35713: IFFALSE 35717
// exit ;
35715: GO 36521
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35717: LD_VAR 0 12
35721: PUSH
35722: LD_INT 3
35724: EQUAL
35725: PUSH
35726: LD_INT 49
35728: PUSH
35729: LD_VAR 0 5
35733: IN
35734: AND
35735: PUSH
35736: LD_INT 31
35738: PPUSH
35739: LD_VAR 0 16
35743: PPUSH
35744: CALL_OW 321
35748: PUSH
35749: LD_INT 2
35751: EQUAL
35752: AND
35753: IFFALSE 35813
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35755: LD_INT 22
35757: PUSH
35758: LD_VAR 0 16
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 35
35769: PUSH
35770: LD_INT 49
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 91
35779: PUSH
35780: LD_VAR 0 1
35784: PUSH
35785: LD_INT 10
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: PPUSH
35798: CALL_OW 69
35802: NOT
35803: IFFALSE 35813
// weapon := ru_time_lapser ;
35805: LD_ADDR_VAR 0 18
35809: PUSH
35810: LD_INT 49
35812: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35813: LD_VAR 0 12
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: IN
35828: PUSH
35829: LD_INT 11
35831: PUSH
35832: LD_VAR 0 5
35836: IN
35837: PUSH
35838: LD_INT 30
35840: PUSH
35841: LD_VAR 0 5
35845: IN
35846: OR
35847: AND
35848: PUSH
35849: LD_INT 6
35851: PPUSH
35852: LD_VAR 0 16
35856: PPUSH
35857: CALL_OW 321
35861: PUSH
35862: LD_INT 2
35864: EQUAL
35865: AND
35866: IFFALSE 36031
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35868: LD_INT 22
35870: PUSH
35871: LD_VAR 0 16
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: LD_INT 35
35885: PUSH
35886: LD_INT 11
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 35
35895: PUSH
35896: LD_INT 30
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 91
35910: PUSH
35911: LD_VAR 0 1
35915: PUSH
35916: LD_INT 18
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: PPUSH
35929: CALL_OW 69
35933: NOT
35934: PUSH
35935: LD_INT 22
35937: PUSH
35938: LD_VAR 0 16
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 30
35952: PUSH
35953: LD_INT 32
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 30
35962: PUSH
35963: LD_INT 33
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 91
35977: PUSH
35978: LD_VAR 0 1
35982: PUSH
35983: LD_INT 12
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: PUSH
35996: EMPTY
35997: LIST
35998: PPUSH
35999: CALL_OW 69
36003: PUSH
36004: LD_INT 2
36006: GREATER
36007: AND
36008: IFFALSE 36031
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36010: LD_ADDR_VAR 0 18
36014: PUSH
36015: LD_INT 11
36017: PUSH
36018: LD_INT 30
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_VAR 0 12
36029: ARRAY
36030: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36031: LD_VAR 0 18
36035: NOT
36036: PUSH
36037: LD_INT 40
36039: PPUSH
36040: LD_VAR 0 16
36044: PPUSH
36045: CALL_OW 321
36049: PUSH
36050: LD_INT 2
36052: EQUAL
36053: AND
36054: PUSH
36055: LD_INT 7
36057: PUSH
36058: LD_VAR 0 5
36062: IN
36063: PUSH
36064: LD_INT 28
36066: PUSH
36067: LD_VAR 0 5
36071: IN
36072: OR
36073: PUSH
36074: LD_INT 45
36076: PUSH
36077: LD_VAR 0 5
36081: IN
36082: OR
36083: AND
36084: IFFALSE 36338
// begin hex := GetHexInfo ( x , y ) ;
36086: LD_ADDR_VAR 0 4
36090: PUSH
36091: LD_VAR 0 10
36095: PPUSH
36096: LD_VAR 0 11
36100: PPUSH
36101: CALL_OW 546
36105: ST_TO_ADDR
// if hex [ 1 ] then
36106: LD_VAR 0 4
36110: PUSH
36111: LD_INT 1
36113: ARRAY
36114: IFFALSE 36118
// exit ;
36116: GO 36521
// height := hex [ 2 ] ;
36118: LD_ADDR_VAR 0 15
36122: PUSH
36123: LD_VAR 0 4
36127: PUSH
36128: LD_INT 2
36130: ARRAY
36131: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36132: LD_ADDR_VAR 0 14
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: LD_INT 3
36145: PUSH
36146: LD_INT 5
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: ST_TO_ADDR
// for i in tmp do
36155: LD_ADDR_VAR 0 8
36159: PUSH
36160: LD_VAR 0 14
36164: PUSH
36165: FOR_IN
36166: IFFALSE 36336
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36168: LD_ADDR_VAR 0 9
36172: PUSH
36173: LD_VAR 0 10
36177: PPUSH
36178: LD_VAR 0 8
36182: PPUSH
36183: LD_INT 5
36185: PPUSH
36186: CALL_OW 272
36190: PUSH
36191: LD_VAR 0 11
36195: PPUSH
36196: LD_VAR 0 8
36200: PPUSH
36201: LD_INT 5
36203: PPUSH
36204: CALL_OW 273
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36213: LD_VAR 0 9
36217: PUSH
36218: LD_INT 1
36220: ARRAY
36221: PPUSH
36222: LD_VAR 0 9
36226: PUSH
36227: LD_INT 2
36229: ARRAY
36230: PPUSH
36231: CALL_OW 488
36235: IFFALSE 36334
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36237: LD_ADDR_VAR 0 4
36241: PUSH
36242: LD_VAR 0 9
36246: PUSH
36247: LD_INT 1
36249: ARRAY
36250: PPUSH
36251: LD_VAR 0 9
36255: PUSH
36256: LD_INT 2
36258: ARRAY
36259: PPUSH
36260: CALL_OW 546
36264: ST_TO_ADDR
// if hex [ 1 ] then
36265: LD_VAR 0 4
36269: PUSH
36270: LD_INT 1
36272: ARRAY
36273: IFFALSE 36277
// continue ;
36275: GO 36165
// h := hex [ 2 ] ;
36277: LD_ADDR_VAR 0 13
36281: PUSH
36282: LD_VAR 0 4
36286: PUSH
36287: LD_INT 2
36289: ARRAY
36290: ST_TO_ADDR
// if h + 7 < height then
36291: LD_VAR 0 13
36295: PUSH
36296: LD_INT 7
36298: PLUS
36299: PUSH
36300: LD_VAR 0 15
36304: LESS
36305: IFFALSE 36334
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36307: LD_ADDR_VAR 0 18
36311: PUSH
36312: LD_INT 7
36314: PUSH
36315: LD_INT 28
36317: PUSH
36318: LD_INT 45
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: PUSH
36326: LD_VAR 0 12
36330: ARRAY
36331: ST_TO_ADDR
// break ;
36332: GO 36336
// end ; end ; end ;
36334: GO 36165
36336: POP
36337: POP
// end ; if not weapon then
36338: LD_VAR 0 18
36342: NOT
36343: IFFALSE 36403
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36345: LD_ADDR_VAR 0 5
36349: PUSH
36350: LD_VAR 0 5
36354: PUSH
36355: LD_INT 11
36357: PUSH
36358: LD_INT 30
36360: PUSH
36361: LD_INT 49
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: DIFF
36369: ST_TO_ADDR
// if not list then
36370: LD_VAR 0 5
36374: NOT
36375: IFFALSE 36379
// exit ;
36377: GO 36521
// weapon := list [ rand ( 1 , list ) ] ;
36379: LD_ADDR_VAR 0 18
36383: PUSH
36384: LD_VAR 0 5
36388: PUSH
36389: LD_INT 1
36391: PPUSH
36392: LD_VAR 0 5
36396: PPUSH
36397: CALL_OW 12
36401: ARRAY
36402: ST_TO_ADDR
// end ; if weapon then
36403: LD_VAR 0 18
36407: IFFALSE 36521
// begin tmp := CostOfWeapon ( weapon ) ;
36409: LD_ADDR_VAR 0 14
36413: PUSH
36414: LD_VAR 0 18
36418: PPUSH
36419: CALL_OW 451
36423: ST_TO_ADDR
// j := GetBase ( tower ) ;
36424: LD_ADDR_VAR 0 9
36428: PUSH
36429: LD_VAR 0 1
36433: PPUSH
36434: CALL_OW 274
36438: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36439: LD_VAR 0 9
36443: PPUSH
36444: LD_INT 1
36446: PPUSH
36447: CALL_OW 275
36451: PUSH
36452: LD_VAR 0 14
36456: PUSH
36457: LD_INT 1
36459: ARRAY
36460: GREATEREQUAL
36461: PUSH
36462: LD_VAR 0 9
36466: PPUSH
36467: LD_INT 2
36469: PPUSH
36470: CALL_OW 275
36474: PUSH
36475: LD_VAR 0 14
36479: PUSH
36480: LD_INT 2
36482: ARRAY
36483: GREATEREQUAL
36484: AND
36485: PUSH
36486: LD_VAR 0 9
36490: PPUSH
36491: LD_INT 3
36493: PPUSH
36494: CALL_OW 275
36498: PUSH
36499: LD_VAR 0 14
36503: PUSH
36504: LD_INT 3
36506: ARRAY
36507: GREATEREQUAL
36508: AND
36509: IFFALSE 36521
// result := weapon ;
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_VAR 0 18
36520: ST_TO_ADDR
// end ; end ;
36521: LD_VAR 0 3
36525: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36526: LD_INT 0
36528: PPUSH
36529: PPUSH
// result := true ;
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_INT 1
36537: ST_TO_ADDR
// if array1 = array2 then
36538: LD_VAR 0 1
36542: PUSH
36543: LD_VAR 0 2
36547: EQUAL
36548: IFFALSE 36608
// begin for i = 1 to array1 do
36550: LD_ADDR_VAR 0 4
36554: PUSH
36555: DOUBLE
36556: LD_INT 1
36558: DEC
36559: ST_TO_ADDR
36560: LD_VAR 0 1
36564: PUSH
36565: FOR_TO
36566: IFFALSE 36604
// if array1 [ i ] <> array2 [ i ] then
36568: LD_VAR 0 1
36572: PUSH
36573: LD_VAR 0 4
36577: ARRAY
36578: PUSH
36579: LD_VAR 0 2
36583: PUSH
36584: LD_VAR 0 4
36588: ARRAY
36589: NONEQUAL
36590: IFFALSE 36602
// begin result := false ;
36592: LD_ADDR_VAR 0 3
36596: PUSH
36597: LD_INT 0
36599: ST_TO_ADDR
// break ;
36600: GO 36604
// end ;
36602: GO 36565
36604: POP
36605: POP
// end else
36606: GO 36616
// result := false ;
36608: LD_ADDR_VAR 0 3
36612: PUSH
36613: LD_INT 0
36615: ST_TO_ADDR
// end ;
36616: LD_VAR 0 3
36620: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36621: LD_INT 0
36623: PPUSH
36624: PPUSH
// if not array1 or not array2 then
36625: LD_VAR 0 1
36629: NOT
36630: PUSH
36631: LD_VAR 0 2
36635: NOT
36636: OR
36637: IFFALSE 36641
// exit ;
36639: GO 36705
// result := true ;
36641: LD_ADDR_VAR 0 3
36645: PUSH
36646: LD_INT 1
36648: ST_TO_ADDR
// for i = 1 to array1 do
36649: LD_ADDR_VAR 0 4
36653: PUSH
36654: DOUBLE
36655: LD_INT 1
36657: DEC
36658: ST_TO_ADDR
36659: LD_VAR 0 1
36663: PUSH
36664: FOR_TO
36665: IFFALSE 36703
// if array1 [ i ] <> array2 [ i ] then
36667: LD_VAR 0 1
36671: PUSH
36672: LD_VAR 0 4
36676: ARRAY
36677: PUSH
36678: LD_VAR 0 2
36682: PUSH
36683: LD_VAR 0 4
36687: ARRAY
36688: NONEQUAL
36689: IFFALSE 36701
// begin result := false ;
36691: LD_ADDR_VAR 0 3
36695: PUSH
36696: LD_INT 0
36698: ST_TO_ADDR
// break ;
36699: GO 36703
// end ;
36701: GO 36664
36703: POP
36704: POP
// end ;
36705: LD_VAR 0 3
36709: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36710: LD_INT 0
36712: PPUSH
36713: PPUSH
36714: PPUSH
// pom := GetBase ( fac ) ;
36715: LD_ADDR_VAR 0 5
36719: PUSH
36720: LD_VAR 0 1
36724: PPUSH
36725: CALL_OW 274
36729: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36730: LD_ADDR_VAR 0 4
36734: PUSH
36735: LD_VAR 0 2
36739: PUSH
36740: LD_INT 1
36742: ARRAY
36743: PPUSH
36744: LD_VAR 0 2
36748: PUSH
36749: LD_INT 2
36751: ARRAY
36752: PPUSH
36753: LD_VAR 0 2
36757: PUSH
36758: LD_INT 3
36760: ARRAY
36761: PPUSH
36762: LD_VAR 0 2
36766: PUSH
36767: LD_INT 4
36769: ARRAY
36770: PPUSH
36771: CALL_OW 449
36775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36776: LD_ADDR_VAR 0 3
36780: PUSH
36781: LD_VAR 0 5
36785: PPUSH
36786: LD_INT 1
36788: PPUSH
36789: CALL_OW 275
36793: PUSH
36794: LD_VAR 0 4
36798: PUSH
36799: LD_INT 1
36801: ARRAY
36802: GREATEREQUAL
36803: PUSH
36804: LD_VAR 0 5
36808: PPUSH
36809: LD_INT 2
36811: PPUSH
36812: CALL_OW 275
36816: PUSH
36817: LD_VAR 0 4
36821: PUSH
36822: LD_INT 2
36824: ARRAY
36825: GREATEREQUAL
36826: AND
36827: PUSH
36828: LD_VAR 0 5
36832: PPUSH
36833: LD_INT 3
36835: PPUSH
36836: CALL_OW 275
36840: PUSH
36841: LD_VAR 0 4
36845: PUSH
36846: LD_INT 3
36848: ARRAY
36849: GREATEREQUAL
36850: AND
36851: ST_TO_ADDR
// end ;
36852: LD_VAR 0 3
36856: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36857: LD_INT 0
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
// pom := GetBase ( building ) ;
36863: LD_ADDR_VAR 0 3
36867: PUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 274
36877: ST_TO_ADDR
// if not pom then
36878: LD_VAR 0 3
36882: NOT
36883: IFFALSE 36887
// exit ;
36885: GO 37057
// btype := GetBType ( building ) ;
36887: LD_ADDR_VAR 0 5
36891: PUSH
36892: LD_VAR 0 1
36896: PPUSH
36897: CALL_OW 266
36901: ST_TO_ADDR
// if btype = b_armoury then
36902: LD_VAR 0 5
36906: PUSH
36907: LD_INT 4
36909: EQUAL
36910: IFFALSE 36920
// btype := b_barracks ;
36912: LD_ADDR_VAR 0 5
36916: PUSH
36917: LD_INT 5
36919: ST_TO_ADDR
// if btype = b_depot then
36920: LD_VAR 0 5
36924: PUSH
36925: LD_INT 0
36927: EQUAL
36928: IFFALSE 36938
// btype := b_warehouse ;
36930: LD_ADDR_VAR 0 5
36934: PUSH
36935: LD_INT 1
36937: ST_TO_ADDR
// if btype = b_workshop then
36938: LD_VAR 0 5
36942: PUSH
36943: LD_INT 2
36945: EQUAL
36946: IFFALSE 36956
// btype := b_factory ;
36948: LD_ADDR_VAR 0 5
36952: PUSH
36953: LD_INT 3
36955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36956: LD_ADDR_VAR 0 4
36960: PUSH
36961: LD_VAR 0 5
36965: PPUSH
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL_OW 248
36975: PPUSH
36976: CALL_OW 450
36980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36981: LD_ADDR_VAR 0 2
36985: PUSH
36986: LD_VAR 0 3
36990: PPUSH
36991: LD_INT 1
36993: PPUSH
36994: CALL_OW 275
36998: PUSH
36999: LD_VAR 0 4
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: GREATEREQUAL
37008: PUSH
37009: LD_VAR 0 3
37013: PPUSH
37014: LD_INT 2
37016: PPUSH
37017: CALL_OW 275
37021: PUSH
37022: LD_VAR 0 4
37026: PUSH
37027: LD_INT 2
37029: ARRAY
37030: GREATEREQUAL
37031: AND
37032: PUSH
37033: LD_VAR 0 3
37037: PPUSH
37038: LD_INT 3
37040: PPUSH
37041: CALL_OW 275
37045: PUSH
37046: LD_VAR 0 4
37050: PUSH
37051: LD_INT 3
37053: ARRAY
37054: GREATEREQUAL
37055: AND
37056: ST_TO_ADDR
// end ;
37057: LD_VAR 0 2
37061: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37062: LD_INT 0
37064: PPUSH
37065: PPUSH
37066: PPUSH
// pom := GetBase ( building ) ;
37067: LD_ADDR_VAR 0 4
37071: PUSH
37072: LD_VAR 0 1
37076: PPUSH
37077: CALL_OW 274
37081: ST_TO_ADDR
// if not pom then
37082: LD_VAR 0 4
37086: NOT
37087: IFFALSE 37091
// exit ;
37089: GO 37192
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37091: LD_ADDR_VAR 0 5
37095: PUSH
37096: LD_VAR 0 2
37100: PPUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: CALL_OW 248
37110: PPUSH
37111: CALL_OW 450
37115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37116: LD_ADDR_VAR 0 3
37120: PUSH
37121: LD_VAR 0 4
37125: PPUSH
37126: LD_INT 1
37128: PPUSH
37129: CALL_OW 275
37133: PUSH
37134: LD_VAR 0 5
37138: PUSH
37139: LD_INT 1
37141: ARRAY
37142: GREATEREQUAL
37143: PUSH
37144: LD_VAR 0 4
37148: PPUSH
37149: LD_INT 2
37151: PPUSH
37152: CALL_OW 275
37156: PUSH
37157: LD_VAR 0 5
37161: PUSH
37162: LD_INT 2
37164: ARRAY
37165: GREATEREQUAL
37166: AND
37167: PUSH
37168: LD_VAR 0 4
37172: PPUSH
37173: LD_INT 3
37175: PPUSH
37176: CALL_OW 275
37180: PUSH
37181: LD_VAR 0 5
37185: PUSH
37186: LD_INT 3
37188: ARRAY
37189: GREATEREQUAL
37190: AND
37191: ST_TO_ADDR
// end ;
37192: LD_VAR 0 3
37196: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37197: LD_INT 0
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
// result := false ;
37210: LD_ADDR_VAR 0 8
37214: PUSH
37215: LD_INT 0
37217: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37218: LD_VAR 0 5
37222: NOT
37223: PUSH
37224: LD_VAR 0 1
37228: NOT
37229: OR
37230: PUSH
37231: LD_VAR 0 2
37235: NOT
37236: OR
37237: PUSH
37238: LD_VAR 0 3
37242: NOT
37243: OR
37244: IFFALSE 37248
// exit ;
37246: GO 38062
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37248: LD_ADDR_VAR 0 14
37252: PUSH
37253: LD_VAR 0 1
37257: PPUSH
37258: LD_VAR 0 2
37262: PPUSH
37263: LD_VAR 0 3
37267: PPUSH
37268: LD_VAR 0 4
37272: PPUSH
37273: LD_VAR 0 5
37277: PUSH
37278: LD_INT 1
37280: ARRAY
37281: PPUSH
37282: CALL_OW 248
37286: PPUSH
37287: LD_INT 0
37289: PPUSH
37290: CALL 39295 0 6
37294: ST_TO_ADDR
// if not hexes then
37295: LD_VAR 0 14
37299: NOT
37300: IFFALSE 37304
// exit ;
37302: GO 38062
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37304: LD_ADDR_VAR 0 17
37308: PUSH
37309: LD_VAR 0 5
37313: PPUSH
37314: LD_INT 22
37316: PUSH
37317: LD_VAR 0 13
37321: PPUSH
37322: CALL_OW 255
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 30
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 30
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PPUSH
37363: CALL_OW 72
37367: ST_TO_ADDR
// for i = 1 to hexes do
37368: LD_ADDR_VAR 0 9
37372: PUSH
37373: DOUBLE
37374: LD_INT 1
37376: DEC
37377: ST_TO_ADDR
37378: LD_VAR 0 14
37382: PUSH
37383: FOR_TO
37384: IFFALSE 38060
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37386: LD_ADDR_VAR 0 13
37390: PUSH
37391: LD_VAR 0 14
37395: PUSH
37396: LD_VAR 0 9
37400: ARRAY
37401: PUSH
37402: LD_INT 1
37404: ARRAY
37405: PPUSH
37406: LD_VAR 0 14
37410: PUSH
37411: LD_VAR 0 9
37415: ARRAY
37416: PUSH
37417: LD_INT 2
37419: ARRAY
37420: PPUSH
37421: CALL_OW 428
37425: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37426: LD_VAR 0 14
37430: PUSH
37431: LD_VAR 0 9
37435: ARRAY
37436: PUSH
37437: LD_INT 1
37439: ARRAY
37440: PPUSH
37441: LD_VAR 0 14
37445: PUSH
37446: LD_VAR 0 9
37450: ARRAY
37451: PUSH
37452: LD_INT 2
37454: ARRAY
37455: PPUSH
37456: CALL_OW 351
37460: PUSH
37461: LD_VAR 0 14
37465: PUSH
37466: LD_VAR 0 9
37470: ARRAY
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: PPUSH
37476: LD_VAR 0 14
37480: PUSH
37481: LD_VAR 0 9
37485: ARRAY
37486: PUSH
37487: LD_INT 2
37489: ARRAY
37490: PPUSH
37491: CALL_OW 488
37495: NOT
37496: OR
37497: PUSH
37498: LD_VAR 0 13
37502: PPUSH
37503: CALL_OW 247
37507: PUSH
37508: LD_INT 3
37510: EQUAL
37511: OR
37512: IFFALSE 37518
// exit ;
37514: POP
37515: POP
37516: GO 38062
// if not tmp then
37518: LD_VAR 0 13
37522: NOT
37523: IFFALSE 37527
// continue ;
37525: GO 37383
// result := true ;
37527: LD_ADDR_VAR 0 8
37531: PUSH
37532: LD_INT 1
37534: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37535: LD_VAR 0 6
37539: PUSH
37540: LD_VAR 0 13
37544: PPUSH
37545: CALL_OW 247
37549: PUSH
37550: LD_INT 2
37552: EQUAL
37553: AND
37554: PUSH
37555: LD_VAR 0 13
37559: PPUSH
37560: CALL_OW 263
37564: PUSH
37565: LD_INT 1
37567: EQUAL
37568: AND
37569: IFFALSE 37733
// begin if IsDrivenBy ( tmp ) then
37571: LD_VAR 0 13
37575: PPUSH
37576: CALL_OW 311
37580: IFFALSE 37584
// continue ;
37582: GO 37383
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37584: LD_VAR 0 6
37588: PPUSH
37589: LD_INT 3
37591: PUSH
37592: LD_INT 60
37594: PUSH
37595: EMPTY
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: LD_INT 55
37607: PUSH
37608: EMPTY
37609: LIST
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PPUSH
37619: CALL_OW 72
37623: IFFALSE 37731
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37625: LD_ADDR_VAR 0 18
37629: PUSH
37630: LD_VAR 0 6
37634: PPUSH
37635: LD_INT 3
37637: PUSH
37638: LD_INT 60
37640: PUSH
37641: EMPTY
37642: LIST
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 3
37650: PUSH
37651: LD_INT 55
37653: PUSH
37654: EMPTY
37655: LIST
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PPUSH
37665: CALL_OW 72
37669: PUSH
37670: LD_INT 1
37672: ARRAY
37673: ST_TO_ADDR
// if IsInUnit ( driver ) then
37674: LD_VAR 0 18
37678: PPUSH
37679: CALL_OW 310
37683: IFFALSE 37694
// ComExit ( driver ) ;
37685: LD_VAR 0 18
37689: PPUSH
37690: CALL 63075 0 1
// AddComEnterUnit ( driver , tmp ) ;
37694: LD_VAR 0 18
37698: PPUSH
37699: LD_VAR 0 13
37703: PPUSH
37704: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37708: LD_VAR 0 18
37712: PPUSH
37713: LD_VAR 0 7
37717: PPUSH
37718: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37722: LD_VAR 0 18
37726: PPUSH
37727: CALL_OW 181
// end ; continue ;
37731: GO 37383
// end ; if not cleaners or not tmp in cleaners then
37733: LD_VAR 0 6
37737: NOT
37738: PUSH
37739: LD_VAR 0 13
37743: PUSH
37744: LD_VAR 0 6
37748: IN
37749: NOT
37750: OR
37751: IFFALSE 38058
// begin if dep then
37753: LD_VAR 0 17
37757: IFFALSE 37893
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37759: LD_ADDR_VAR 0 16
37763: PUSH
37764: LD_VAR 0 17
37768: PUSH
37769: LD_INT 1
37771: ARRAY
37772: PPUSH
37773: CALL_OW 250
37777: PPUSH
37778: LD_VAR 0 17
37782: PUSH
37783: LD_INT 1
37785: ARRAY
37786: PPUSH
37787: CALL_OW 254
37791: PPUSH
37792: LD_INT 5
37794: PPUSH
37795: CALL_OW 272
37799: PUSH
37800: LD_VAR 0 17
37804: PUSH
37805: LD_INT 1
37807: ARRAY
37808: PPUSH
37809: CALL_OW 251
37813: PPUSH
37814: LD_VAR 0 17
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PPUSH
37823: CALL_OW 254
37827: PPUSH
37828: LD_INT 5
37830: PPUSH
37831: CALL_OW 273
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37840: LD_VAR 0 16
37844: PUSH
37845: LD_INT 1
37847: ARRAY
37848: PPUSH
37849: LD_VAR 0 16
37853: PUSH
37854: LD_INT 2
37856: ARRAY
37857: PPUSH
37858: CALL_OW 488
37862: IFFALSE 37893
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37864: LD_VAR 0 13
37868: PPUSH
37869: LD_VAR 0 16
37873: PUSH
37874: LD_INT 1
37876: ARRAY
37877: PPUSH
37878: LD_VAR 0 16
37882: PUSH
37883: LD_INT 2
37885: ARRAY
37886: PPUSH
37887: CALL_OW 111
// continue ;
37891: GO 37383
// end ; end ; r := GetDir ( tmp ) ;
37893: LD_ADDR_VAR 0 15
37897: PUSH
37898: LD_VAR 0 13
37902: PPUSH
37903: CALL_OW 254
37907: ST_TO_ADDR
// if r = 5 then
37908: LD_VAR 0 15
37912: PUSH
37913: LD_INT 5
37915: EQUAL
37916: IFFALSE 37926
// r := 0 ;
37918: LD_ADDR_VAR 0 15
37922: PUSH
37923: LD_INT 0
37925: ST_TO_ADDR
// for j = r to 5 do
37926: LD_ADDR_VAR 0 10
37930: PUSH
37931: DOUBLE
37932: LD_VAR 0 15
37936: DEC
37937: ST_TO_ADDR
37938: LD_INT 5
37940: PUSH
37941: FOR_TO
37942: IFFALSE 38056
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37944: LD_ADDR_VAR 0 11
37948: PUSH
37949: LD_VAR 0 13
37953: PPUSH
37954: CALL_OW 250
37958: PPUSH
37959: LD_VAR 0 10
37963: PPUSH
37964: LD_INT 2
37966: PPUSH
37967: CALL_OW 272
37971: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37972: LD_ADDR_VAR 0 12
37976: PUSH
37977: LD_VAR 0 13
37981: PPUSH
37982: CALL_OW 251
37986: PPUSH
37987: LD_VAR 0 10
37991: PPUSH
37992: LD_INT 2
37994: PPUSH
37995: CALL_OW 273
37999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38000: LD_VAR 0 11
38004: PPUSH
38005: LD_VAR 0 12
38009: PPUSH
38010: CALL_OW 488
38014: PUSH
38015: LD_VAR 0 11
38019: PPUSH
38020: LD_VAR 0 12
38024: PPUSH
38025: CALL_OW 428
38029: NOT
38030: AND
38031: IFFALSE 38054
// begin ComMoveXY ( tmp , _x , _y ) ;
38033: LD_VAR 0 13
38037: PPUSH
38038: LD_VAR 0 11
38042: PPUSH
38043: LD_VAR 0 12
38047: PPUSH
38048: CALL_OW 111
// break ;
38052: GO 38056
// end ; end ;
38054: GO 37941
38056: POP
38057: POP
// end ; end ;
38058: GO 37383
38060: POP
38061: POP
// end ;
38062: LD_VAR 0 8
38066: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38067: LD_INT 0
38069: PPUSH
// result := true ;
38070: LD_ADDR_VAR 0 3
38074: PUSH
38075: LD_INT 1
38077: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38078: LD_VAR 0 2
38082: PUSH
38083: LD_INT 24
38085: DOUBLE
38086: EQUAL
38087: IFTRUE 38097
38089: LD_INT 33
38091: DOUBLE
38092: EQUAL
38093: IFTRUE 38097
38095: GO 38122
38097: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38098: LD_ADDR_VAR 0 3
38102: PUSH
38103: LD_INT 32
38105: PPUSH
38106: LD_VAR 0 1
38110: PPUSH
38111: CALL_OW 321
38115: PUSH
38116: LD_INT 2
38118: EQUAL
38119: ST_TO_ADDR
38120: GO 38438
38122: LD_INT 20
38124: DOUBLE
38125: EQUAL
38126: IFTRUE 38130
38128: GO 38155
38130: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38131: LD_ADDR_VAR 0 3
38135: PUSH
38136: LD_INT 6
38138: PPUSH
38139: LD_VAR 0 1
38143: PPUSH
38144: CALL_OW 321
38148: PUSH
38149: LD_INT 2
38151: EQUAL
38152: ST_TO_ADDR
38153: GO 38438
38155: LD_INT 22
38157: DOUBLE
38158: EQUAL
38159: IFTRUE 38169
38161: LD_INT 36
38163: DOUBLE
38164: EQUAL
38165: IFTRUE 38169
38167: GO 38194
38169: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38170: LD_ADDR_VAR 0 3
38174: PUSH
38175: LD_INT 15
38177: PPUSH
38178: LD_VAR 0 1
38182: PPUSH
38183: CALL_OW 321
38187: PUSH
38188: LD_INT 2
38190: EQUAL
38191: ST_TO_ADDR
38192: GO 38438
38194: LD_INT 30
38196: DOUBLE
38197: EQUAL
38198: IFTRUE 38202
38200: GO 38227
38202: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38203: LD_ADDR_VAR 0 3
38207: PUSH
38208: LD_INT 20
38210: PPUSH
38211: LD_VAR 0 1
38215: PPUSH
38216: CALL_OW 321
38220: PUSH
38221: LD_INT 2
38223: EQUAL
38224: ST_TO_ADDR
38225: GO 38438
38227: LD_INT 28
38229: DOUBLE
38230: EQUAL
38231: IFTRUE 38241
38233: LD_INT 21
38235: DOUBLE
38236: EQUAL
38237: IFTRUE 38241
38239: GO 38266
38241: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38242: LD_ADDR_VAR 0 3
38246: PUSH
38247: LD_INT 21
38249: PPUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 321
38259: PUSH
38260: LD_INT 2
38262: EQUAL
38263: ST_TO_ADDR
38264: GO 38438
38266: LD_INT 16
38268: DOUBLE
38269: EQUAL
38270: IFTRUE 38274
38272: GO 38299
38274: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38275: LD_ADDR_VAR 0 3
38279: PUSH
38280: LD_INT 84
38282: PPUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL_OW 321
38292: PUSH
38293: LD_INT 2
38295: EQUAL
38296: ST_TO_ADDR
38297: GO 38438
38299: LD_INT 19
38301: DOUBLE
38302: EQUAL
38303: IFTRUE 38313
38305: LD_INT 23
38307: DOUBLE
38308: EQUAL
38309: IFTRUE 38313
38311: GO 38338
38313: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38314: LD_ADDR_VAR 0 3
38318: PUSH
38319: LD_INT 83
38321: PPUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 321
38331: PUSH
38332: LD_INT 2
38334: EQUAL
38335: ST_TO_ADDR
38336: GO 38438
38338: LD_INT 17
38340: DOUBLE
38341: EQUAL
38342: IFTRUE 38346
38344: GO 38371
38346: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38347: LD_ADDR_VAR 0 3
38351: PUSH
38352: LD_INT 39
38354: PPUSH
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 321
38364: PUSH
38365: LD_INT 2
38367: EQUAL
38368: ST_TO_ADDR
38369: GO 38438
38371: LD_INT 18
38373: DOUBLE
38374: EQUAL
38375: IFTRUE 38379
38377: GO 38404
38379: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38380: LD_ADDR_VAR 0 3
38384: PUSH
38385: LD_INT 40
38387: PPUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: CALL_OW 321
38397: PUSH
38398: LD_INT 2
38400: EQUAL
38401: ST_TO_ADDR
38402: GO 38438
38404: LD_INT 27
38406: DOUBLE
38407: EQUAL
38408: IFTRUE 38412
38410: GO 38437
38412: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38413: LD_ADDR_VAR 0 3
38417: PUSH
38418: LD_INT 35
38420: PPUSH
38421: LD_VAR 0 1
38425: PPUSH
38426: CALL_OW 321
38430: PUSH
38431: LD_INT 2
38433: EQUAL
38434: ST_TO_ADDR
38435: GO 38438
38437: POP
// end ;
38438: LD_VAR 0 3
38442: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38443: LD_INT 0
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
// result := false ;
38456: LD_ADDR_VAR 0 6
38460: PUSH
38461: LD_INT 0
38463: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38464: LD_VAR 0 1
38468: NOT
38469: PUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 266
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: IN
38490: NOT
38491: OR
38492: PUSH
38493: LD_VAR 0 2
38497: NOT
38498: OR
38499: PUSH
38500: LD_VAR 0 5
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: LD_INT 4
38519: PUSH
38520: LD_INT 5
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: IN
38531: NOT
38532: OR
38533: PUSH
38534: LD_VAR 0 3
38538: PPUSH
38539: LD_VAR 0 4
38543: PPUSH
38544: CALL_OW 488
38548: NOT
38549: OR
38550: IFFALSE 38554
// exit ;
38552: GO 39290
// side := GetSide ( depot ) ;
38554: LD_ADDR_VAR 0 9
38558: PUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 255
38568: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38569: LD_VAR 0 9
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: CALL 38067 0 2
38583: NOT
38584: IFFALSE 38588
// exit ;
38586: GO 39290
// pom := GetBase ( depot ) ;
38588: LD_ADDR_VAR 0 10
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 274
38602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38603: LD_ADDR_VAR 0 11
38607: PUSH
38608: LD_VAR 0 2
38612: PPUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 248
38622: PPUSH
38623: CALL_OW 450
38627: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38628: LD_VAR 0 10
38632: PPUSH
38633: LD_INT 1
38635: PPUSH
38636: CALL_OW 275
38640: PUSH
38641: LD_VAR 0 11
38645: PUSH
38646: LD_INT 1
38648: ARRAY
38649: GREATEREQUAL
38650: PUSH
38651: LD_VAR 0 10
38655: PPUSH
38656: LD_INT 2
38658: PPUSH
38659: CALL_OW 275
38663: PUSH
38664: LD_VAR 0 11
38668: PUSH
38669: LD_INT 2
38671: ARRAY
38672: GREATEREQUAL
38673: AND
38674: PUSH
38675: LD_VAR 0 10
38679: PPUSH
38680: LD_INT 3
38682: PPUSH
38683: CALL_OW 275
38687: PUSH
38688: LD_VAR 0 11
38692: PUSH
38693: LD_INT 3
38695: ARRAY
38696: GREATEREQUAL
38697: AND
38698: NOT
38699: IFFALSE 38703
// exit ;
38701: GO 39290
// if GetBType ( depot ) = b_depot then
38703: LD_VAR 0 1
38707: PPUSH
38708: CALL_OW 266
38712: PUSH
38713: LD_INT 0
38715: EQUAL
38716: IFFALSE 38728
// dist := 28 else
38718: LD_ADDR_VAR 0 14
38722: PUSH
38723: LD_INT 28
38725: ST_TO_ADDR
38726: GO 38736
// dist := 36 ;
38728: LD_ADDR_VAR 0 14
38732: PUSH
38733: LD_INT 36
38735: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38736: LD_VAR 0 1
38740: PPUSH
38741: LD_VAR 0 3
38745: PPUSH
38746: LD_VAR 0 4
38750: PPUSH
38751: CALL_OW 297
38755: PUSH
38756: LD_VAR 0 14
38760: GREATER
38761: IFFALSE 38765
// exit ;
38763: GO 39290
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38765: LD_ADDR_VAR 0 12
38769: PUSH
38770: LD_VAR 0 2
38774: PPUSH
38775: LD_VAR 0 3
38779: PPUSH
38780: LD_VAR 0 4
38784: PPUSH
38785: LD_VAR 0 5
38789: PPUSH
38790: LD_VAR 0 1
38794: PPUSH
38795: CALL_OW 248
38799: PPUSH
38800: LD_INT 0
38802: PPUSH
38803: CALL 39295 0 6
38807: ST_TO_ADDR
// if not hexes then
38808: LD_VAR 0 12
38812: NOT
38813: IFFALSE 38817
// exit ;
38815: GO 39290
// hex := GetHexInfo ( x , y ) ;
38817: LD_ADDR_VAR 0 15
38821: PUSH
38822: LD_VAR 0 3
38826: PPUSH
38827: LD_VAR 0 4
38831: PPUSH
38832: CALL_OW 546
38836: ST_TO_ADDR
// if hex [ 1 ] then
38837: LD_VAR 0 15
38841: PUSH
38842: LD_INT 1
38844: ARRAY
38845: IFFALSE 38849
// exit ;
38847: GO 39290
// height := hex [ 2 ] ;
38849: LD_ADDR_VAR 0 13
38853: PUSH
38854: LD_VAR 0 15
38858: PUSH
38859: LD_INT 2
38861: ARRAY
38862: ST_TO_ADDR
// for i = 1 to hexes do
38863: LD_ADDR_VAR 0 7
38867: PUSH
38868: DOUBLE
38869: LD_INT 1
38871: DEC
38872: ST_TO_ADDR
38873: LD_VAR 0 12
38877: PUSH
38878: FOR_TO
38879: IFFALSE 39209
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38881: LD_VAR 0 12
38885: PUSH
38886: LD_VAR 0 7
38890: ARRAY
38891: PUSH
38892: LD_INT 1
38894: ARRAY
38895: PPUSH
38896: LD_VAR 0 12
38900: PUSH
38901: LD_VAR 0 7
38905: ARRAY
38906: PUSH
38907: LD_INT 2
38909: ARRAY
38910: PPUSH
38911: CALL_OW 488
38915: NOT
38916: PUSH
38917: LD_VAR 0 12
38921: PUSH
38922: LD_VAR 0 7
38926: ARRAY
38927: PUSH
38928: LD_INT 1
38930: ARRAY
38931: PPUSH
38932: LD_VAR 0 12
38936: PUSH
38937: LD_VAR 0 7
38941: ARRAY
38942: PUSH
38943: LD_INT 2
38945: ARRAY
38946: PPUSH
38947: CALL_OW 428
38951: PUSH
38952: LD_INT 0
38954: GREATER
38955: OR
38956: PUSH
38957: LD_VAR 0 12
38961: PUSH
38962: LD_VAR 0 7
38966: ARRAY
38967: PUSH
38968: LD_INT 1
38970: ARRAY
38971: PPUSH
38972: LD_VAR 0 12
38976: PUSH
38977: LD_VAR 0 7
38981: ARRAY
38982: PUSH
38983: LD_INT 2
38985: ARRAY
38986: PPUSH
38987: CALL_OW 351
38991: OR
38992: IFFALSE 38998
// exit ;
38994: POP
38995: POP
38996: GO 39290
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38998: LD_ADDR_VAR 0 8
39002: PUSH
39003: LD_VAR 0 12
39007: PUSH
39008: LD_VAR 0 7
39012: ARRAY
39013: PUSH
39014: LD_INT 1
39016: ARRAY
39017: PPUSH
39018: LD_VAR 0 12
39022: PUSH
39023: LD_VAR 0 7
39027: ARRAY
39028: PUSH
39029: LD_INT 2
39031: ARRAY
39032: PPUSH
39033: CALL_OW 546
39037: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39038: LD_VAR 0 8
39042: PUSH
39043: LD_INT 1
39045: ARRAY
39046: PUSH
39047: LD_VAR 0 8
39051: PUSH
39052: LD_INT 2
39054: ARRAY
39055: PUSH
39056: LD_VAR 0 13
39060: PUSH
39061: LD_INT 2
39063: PLUS
39064: GREATER
39065: OR
39066: PUSH
39067: LD_VAR 0 8
39071: PUSH
39072: LD_INT 2
39074: ARRAY
39075: PUSH
39076: LD_VAR 0 13
39080: PUSH
39081: LD_INT 2
39083: MINUS
39084: LESS
39085: OR
39086: PUSH
39087: LD_VAR 0 8
39091: PUSH
39092: LD_INT 3
39094: ARRAY
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 8
39101: PUSH
39102: LD_INT 9
39104: PUSH
39105: LD_INT 10
39107: PUSH
39108: LD_INT 11
39110: PUSH
39111: LD_INT 12
39113: PUSH
39114: LD_INT 13
39116: PUSH
39117: LD_INT 16
39119: PUSH
39120: LD_INT 17
39122: PUSH
39123: LD_INT 18
39125: PUSH
39126: LD_INT 19
39128: PUSH
39129: LD_INT 20
39131: PUSH
39132: LD_INT 21
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: IN
39150: NOT
39151: OR
39152: PUSH
39153: LD_VAR 0 8
39157: PUSH
39158: LD_INT 5
39160: ARRAY
39161: NOT
39162: OR
39163: PUSH
39164: LD_VAR 0 8
39168: PUSH
39169: LD_INT 6
39171: ARRAY
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 7
39181: PUSH
39182: LD_INT 9
39184: PUSH
39185: LD_INT 10
39187: PUSH
39188: LD_INT 11
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: IN
39199: NOT
39200: OR
39201: IFFALSE 39207
// exit ;
39203: POP
39204: POP
39205: GO 39290
// end ;
39207: GO 38878
39209: POP
39210: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39211: LD_VAR 0 9
39215: PPUSH
39216: LD_VAR 0 3
39220: PPUSH
39221: LD_VAR 0 4
39225: PPUSH
39226: LD_INT 20
39228: PPUSH
39229: CALL 31242 0 4
39233: PUSH
39234: LD_INT 4
39236: ARRAY
39237: IFFALSE 39241
// exit ;
39239: GO 39290
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 29
39248: PUSH
39249: LD_INT 30
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: IN
39256: PUSH
39257: LD_VAR 0 3
39261: PPUSH
39262: LD_VAR 0 4
39266: PPUSH
39267: LD_VAR 0 9
39271: PPUSH
39272: CALL_OW 440
39276: NOT
39277: AND
39278: IFFALSE 39282
// exit ;
39280: GO 39290
// result := true ;
39282: LD_ADDR_VAR 0 6
39286: PUSH
39287: LD_INT 1
39289: ST_TO_ADDR
// end ;
39290: LD_VAR 0 6
39294: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39295: LD_INT 0
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
39328: PPUSH
39329: PPUSH
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
// result = [ ] ;
39355: LD_ADDR_VAR 0 7
39359: PUSH
39360: EMPTY
39361: ST_TO_ADDR
// temp_list = [ ] ;
39362: LD_ADDR_VAR 0 9
39366: PUSH
39367: EMPTY
39368: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39369: LD_VAR 0 4
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 3
39385: PUSH
39386: LD_INT 4
39388: PUSH
39389: LD_INT 5
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: IN
39400: NOT
39401: PUSH
39402: LD_VAR 0 1
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: IN
39417: PUSH
39418: LD_VAR 0 5
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: IN
39437: NOT
39438: AND
39439: OR
39440: IFFALSE 39444
// exit ;
39442: GO 57835
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39444: LD_VAR 0 1
39448: PUSH
39449: LD_INT 6
39451: PUSH
39452: LD_INT 7
39454: PUSH
39455: LD_INT 8
39457: PUSH
39458: LD_INT 13
39460: PUSH
39461: LD_INT 12
39463: PUSH
39464: LD_INT 15
39466: PUSH
39467: LD_INT 11
39469: PUSH
39470: LD_INT 14
39472: PUSH
39473: LD_INT 10
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: IN
39487: IFFALSE 39497
// btype = b_lab ;
39489: LD_ADDR_VAR 0 1
39493: PUSH
39494: LD_INT 6
39496: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39497: LD_VAR 0 6
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: IN
39516: NOT
39517: PUSH
39518: LD_VAR 0 1
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: LD_INT 3
39534: PUSH
39535: LD_INT 6
39537: PUSH
39538: LD_INT 36
39540: PUSH
39541: LD_INT 4
39543: PUSH
39544: LD_INT 5
39546: PUSH
39547: LD_INT 31
39549: PUSH
39550: LD_INT 32
39552: PUSH
39553: LD_INT 33
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: IN
39569: NOT
39570: PUSH
39571: LD_VAR 0 6
39575: PUSH
39576: LD_INT 1
39578: EQUAL
39579: AND
39580: OR
39581: PUSH
39582: LD_VAR 0 1
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: LD_INT 3
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: IN
39597: NOT
39598: PUSH
39599: LD_VAR 0 6
39603: PUSH
39604: LD_INT 2
39606: EQUAL
39607: AND
39608: OR
39609: IFFALSE 39619
// mode = 0 ;
39611: LD_ADDR_VAR 0 6
39615: PUSH
39616: LD_INT 0
39618: ST_TO_ADDR
// case mode of 0 :
39619: LD_VAR 0 6
39623: PUSH
39624: LD_INT 0
39626: DOUBLE
39627: EQUAL
39628: IFTRUE 39632
39630: GO 51085
39632: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39633: LD_ADDR_VAR 0 11
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 3
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39826: LD_ADDR_VAR 0 12
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: NEG
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 3
39994: NEG
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40022: LD_ADDR_VAR 0 13
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: LD_INT 3
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 3
40181: NEG
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 3
40193: NEG
40194: PUSH
40195: LD_INT 3
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40221: LD_ADDR_VAR 0 14
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 3
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40417: LD_ADDR_VAR 0 15
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 3
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40610: LD_ADDR_VAR 0 16
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: NEG
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 3
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: LD_INT 3
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: LD_INT 3
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40803: LD_ADDR_VAR 0 17
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41033: LD_ADDR_VAR 0 18
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: LD_INT 2
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41263: LD_ADDR_VAR 0 19
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41493: LD_ADDR_VAR 0 20
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41723: LD_ADDR_VAR 0 21
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41953: LD_ADDR_VAR 0 22
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42183: LD_ADDR_VAR 0 23
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 2
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: LD_INT 3
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 3
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42463: LD_ADDR_VAR 0 24
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 3
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42739: LD_ADDR_VAR 0 25
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 3
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 3
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43013: LD_ADDR_VAR 0 26
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43289: LD_ADDR_VAR 0 27
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 3
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 3
43534: NEG
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43569: LD_ADDR_VAR 0 28
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 3
43804: NEG
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 3
43816: NEG
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43851: LD_ADDR_VAR 0 29
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 3
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 3
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 3
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44130: LD_ADDR_VAR 0 30
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 3
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44408: LD_ADDR_VAR 0 31
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 3
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 3
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44686: LD_ADDR_VAR 0 32
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 3
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 3
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 3
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44964: LD_ADDR_VAR 0 33
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: LD_INT 3
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 3
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45243: LD_ADDR_VAR 0 34
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 3
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45523: LD_ADDR_VAR 0 35
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45635: LD_ADDR_VAR 0 36
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45747: LD_ADDR_VAR 0 37
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45859: LD_ADDR_VAR 0 38
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45971: LD_ADDR_VAR 0 39
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46083: LD_ADDR_VAR 0 40
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46195: LD_ADDR_VAR 0 41
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: NEG
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46545: LD_ADDR_VAR 0 42
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 3
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: LD_INT 3
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 3
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: NEG
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46895: LD_ADDR_VAR 0 43
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 3
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47243: LD_ADDR_VAR 0 44
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: NEG
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: NEG
47553: PUSH
47554: LD_INT 3
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47593: LD_ADDR_VAR 0 45
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: LD_INT 3
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 3
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47943: LD_ADDR_VAR 0 46
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: NEG
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48291: LD_ADDR_VAR 0 47
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48442: LD_ADDR_VAR 0 48
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48589: LD_ADDR_VAR 0 49
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48733: LD_ADDR_VAR 0 50
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48877: LD_ADDR_VAR 0 51
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49024: LD_ADDR_VAR 0 52
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49175: LD_ADDR_VAR 0 53
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49405: LD_ADDR_VAR 0 54
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49635: LD_ADDR_VAR 0 55
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49865: LD_ADDR_VAR 0 56
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50095: LD_ADDR_VAR 0 57
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50325: LD_ADDR_VAR 0 58
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 1
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50555: LD_ADDR_VAR 0 59
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50643: LD_ADDR_VAR 0 60
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50731: LD_ADDR_VAR 0 61
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50819: LD_ADDR_VAR 0 62
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50907: LD_ADDR_VAR 0 63
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50995: LD_ADDR_VAR 0 64
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// end ; 1 :
51083: GO 56980
51085: LD_INT 1
51087: DOUBLE
51088: EQUAL
51089: IFTRUE 51093
51091: GO 53716
51093: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51094: LD_ADDR_VAR 0 11
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51138: LD_ADDR_VAR 0 12
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51179: LD_ADDR_VAR 0 13
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51219: LD_ADDR_VAR 0 14
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51260: LD_ADDR_VAR 0 15
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51304: LD_ADDR_VAR 0 16
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: LD_INT 3
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: NEG
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51350: LD_ADDR_VAR 0 17
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: LIST
51393: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51394: LD_ADDR_VAR 0 18
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51435: LD_ADDR_VAR 0 19
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 3
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51475: LD_ADDR_VAR 0 20
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 3
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51516: LD_ADDR_VAR 0 21
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 3
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51560: LD_ADDR_VAR 0 22
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 3
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 3
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: LD_INT 3
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51606: LD_ADDR_VAR 0 23
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 4
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: LIST
51649: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51650: LD_ADDR_VAR 0 24
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51691: LD_ADDR_VAR 0 25
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 4
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51731: LD_ADDR_VAR 0 26
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 4
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51772: LD_ADDR_VAR 0 27
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 4
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51816: LD_ADDR_VAR 0 28
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: LD_INT 4
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 4
51847: NEG
51848: PUSH
51849: LD_INT 3
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51862: LD_ADDR_VAR 0 29
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 4
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 4
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 3
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 5
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 5
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 4
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 6
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 6
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 5
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52017: LD_ADDR_VAR 0 30
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 4
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 4
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 5
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 5
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 5
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 6
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 6
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52160: LD_ADDR_VAR 0 31
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 4
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 4
52207: PUSH
52208: LD_INT 4
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: LD_INT 4
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 5
52227: PUSH
52228: LD_INT 4
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 5
52237: PUSH
52238: LD_INT 5
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: LD_INT 5
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 6
52257: PUSH
52258: LD_INT 5
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 6
52267: PUSH
52268: LD_INT 6
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 5
52277: PUSH
52278: LD_INT 6
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52299: LD_ADDR_VAR 0 32
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 3
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 4
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 4
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 5
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 5
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 4
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 6
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 6
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 5
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52442: LD_ADDR_VAR 0 33
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 4
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 5
52528: NEG
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 5
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 5
52551: NEG
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 6
52562: NEG
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 6
52573: NEG
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52597: LD_ADDR_VAR 0 34
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: LD_INT 4
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 4
52652: NEG
52653: PUSH
52654: LD_INT 3
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 4
52664: NEG
52665: PUSH
52666: LD_INT 4
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 4
52676: NEG
52677: PUSH
52678: LD_INT 5
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 5
52688: NEG
52689: PUSH
52690: LD_INT 4
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 5
52700: NEG
52701: PUSH
52702: LD_INT 5
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 5
52712: NEG
52713: PUSH
52714: LD_INT 6
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 6
52724: NEG
52725: PUSH
52726: LD_INT 5
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 6
52736: NEG
52737: PUSH
52738: LD_INT 6
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52760: LD_ADDR_VAR 0 41
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 3
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52804: LD_ADDR_VAR 0 42
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52845: LD_ADDR_VAR 0 43
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52885: LD_ADDR_VAR 0 44
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52926: LD_ADDR_VAR 0 45
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52970: LD_ADDR_VAR 0 46
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 2
52989: NEG
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 3
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53016: LD_ADDR_VAR 0 47
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53049: LD_ADDR_VAR 0 48
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 2
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53080: LD_ADDR_VAR 0 49
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53109: LD_ADDR_VAR 0 50
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53138: LD_ADDR_VAR 0 51
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53169: LD_ADDR_VAR 0 52
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53202: LD_ADDR_VAR 0 53
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53246: LD_ADDR_VAR 0 54
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53287: LD_ADDR_VAR 0 55
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 3
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53327: LD_ADDR_VAR 0 56
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 3
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53368: LD_ADDR_VAR 0 57
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53412: LD_ADDR_VAR 0 58
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: NEG
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53458: LD_ADDR_VAR 0 59
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53502: LD_ADDR_VAR 0 60
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53543: LD_ADDR_VAR 0 61
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53583: LD_ADDR_VAR 0 62
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53624: LD_ADDR_VAR 0 63
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53668: LD_ADDR_VAR 0 64
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: ST_TO_ADDR
// end ; 2 :
53714: GO 56980
53716: LD_INT 2
53718: DOUBLE
53719: EQUAL
53720: IFTRUE 53724
53722: GO 56979
53724: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53725: LD_ADDR_VAR 0 29
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 5
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 5
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 4
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 5
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 4
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: LD_INT 4
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: LD_INT 4
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 4
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: LD_INT 4
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 4
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 4
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 5
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 5
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 5
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 4
54064: NEG
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 4
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 4
54087: NEG
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 4
54110: NEG
54111: PUSH
54112: LD_INT 4
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: LD_INT 5
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 3
54134: NEG
54135: PUSH
54136: LD_INT 4
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 4
54158: NEG
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: NEG
54171: PUSH
54172: LD_INT 4
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 5
54182: NEG
54183: PUSH
54184: LD_INT 5
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: LD_INT 5
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 5
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54263: LD_ADDR_VAR 0 30
54267: PUSH
54268: LD_INT 4
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 4
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 5
54290: PUSH
54291: LD_INT 4
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: LD_INT 5
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 4
54310: PUSH
54311: LD_INT 5
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 4
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 5
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 4
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 4
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: LD_INT 4
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 4
54453: NEG
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 4
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 5
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 5
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 5
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 3
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 3
54555: NEG
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: LD_INT 4
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 4
54615: NEG
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: NEG
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 4
54651: NEG
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 4
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 5
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 4
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 4
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 5
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 5
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54810: LD_ADDR_VAR 0 31
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 4
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 4
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 5
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 5
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 4
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 3
54910: NEG
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 3
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 4
54966: NEG
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 4
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 4
54989: NEG
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 4
55012: NEG
55013: PUSH
55014: LD_INT 4
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: LD_INT 5
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: LD_INT 4
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: NEG
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: NEG
55061: PUSH
55062: LD_INT 3
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 5
55072: NEG
55073: PUSH
55074: LD_INT 4
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 5
55084: NEG
55085: PUSH
55086: LD_INT 5
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: LD_INT 5
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: NEG
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 3
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: LD_INT 2
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 4
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 5
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 5
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 4
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 5
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55360: LD_ADDR_VAR 0 32
55364: PUSH
55365: LD_INT 4
55367: NEG
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 4
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 4
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 5
55423: NEG
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 5
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 5
55446: NEG
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: LD_INT 4
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 4
55529: NEG
55530: PUSH
55531: LD_INT 3
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 4
55541: NEG
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 4
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 4
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 5
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 4
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 4
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 5
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: LD_INT 5
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 4
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 4
55772: PUSH
55773: LD_INT 4
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 4
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 5
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 5
55802: PUSH
55803: LD_INT 5
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 4
55812: PUSH
55813: LD_INT 5
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: LD_INT 4
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: LD_INT 3
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 5
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 5
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55907: LD_ADDR_VAR 0 33
55911: PUSH
55912: LD_INT 4
55914: NEG
55915: PUSH
55916: LD_INT 4
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 4
55926: NEG
55927: PUSH
55928: LD_INT 5
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 4
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: NEG
55951: PUSH
55952: LD_INT 3
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: NEG
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 5
55974: NEG
55975: PUSH
55976: LD_INT 4
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 5
55986: NEG
55987: PUSH
55988: LD_INT 5
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: LD_INT 5
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: NEG
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 4
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 4
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 4
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 4
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 5
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 5
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 4
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 5
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 4
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: LD_INT 4
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 4
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 4
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 4
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 5
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 5
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: LD_INT 5
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56445: LD_ADDR_VAR 0 34
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 4
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 5
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 4
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 5
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 5
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 3
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 4
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 4
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 4
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: LD_INT 4
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 5
56667: PUSH
56668: LD_INT 4
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 5
56677: PUSH
56678: LD_INT 5
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: LD_INT 5
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 4
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 5
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 3
56727: PUSH
56728: LD_INT 5
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 4
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 4
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 3
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 4
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 4
56830: NEG
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 4
56841: NEG
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 4
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 5
56886: NEG
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 5
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 5
56909: NEG
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// end ; end ;
56977: GO 56980
56979: POP
// case btype of b_depot , b_warehouse :
56980: LD_VAR 0 1
56984: PUSH
56985: LD_INT 0
56987: DOUBLE
56988: EQUAL
56989: IFTRUE 56999
56991: LD_INT 1
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 56999
56997: GO 57200
56999: POP
// case nation of nation_american :
57000: LD_VAR 0 5
57004: PUSH
57005: LD_INT 1
57007: DOUBLE
57008: EQUAL
57009: IFTRUE 57013
57011: GO 57069
57013: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57014: LD_ADDR_VAR 0 9
57018: PUSH
57019: LD_VAR 0 11
57023: PUSH
57024: LD_VAR 0 12
57028: PUSH
57029: LD_VAR 0 13
57033: PUSH
57034: LD_VAR 0 14
57038: PUSH
57039: LD_VAR 0 15
57043: PUSH
57044: LD_VAR 0 16
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: PUSH
57057: LD_VAR 0 4
57061: PUSH
57062: LD_INT 1
57064: PLUS
57065: ARRAY
57066: ST_TO_ADDR
57067: GO 57198
57069: LD_INT 2
57071: DOUBLE
57072: EQUAL
57073: IFTRUE 57077
57075: GO 57133
57077: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57078: LD_ADDR_VAR 0 9
57082: PUSH
57083: LD_VAR 0 17
57087: PUSH
57088: LD_VAR 0 18
57092: PUSH
57093: LD_VAR 0 19
57097: PUSH
57098: LD_VAR 0 20
57102: PUSH
57103: LD_VAR 0 21
57107: PUSH
57108: LD_VAR 0 22
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: PUSH
57121: LD_VAR 0 4
57125: PUSH
57126: LD_INT 1
57128: PLUS
57129: ARRAY
57130: ST_TO_ADDR
57131: GO 57198
57133: LD_INT 3
57135: DOUBLE
57136: EQUAL
57137: IFTRUE 57141
57139: GO 57197
57141: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57142: LD_ADDR_VAR 0 9
57146: PUSH
57147: LD_VAR 0 23
57151: PUSH
57152: LD_VAR 0 24
57156: PUSH
57157: LD_VAR 0 25
57161: PUSH
57162: LD_VAR 0 26
57166: PUSH
57167: LD_VAR 0 27
57171: PUSH
57172: LD_VAR 0 28
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: PUSH
57185: LD_VAR 0 4
57189: PUSH
57190: LD_INT 1
57192: PLUS
57193: ARRAY
57194: ST_TO_ADDR
57195: GO 57198
57197: POP
57198: GO 57753
57200: LD_INT 2
57202: DOUBLE
57203: EQUAL
57204: IFTRUE 57214
57206: LD_INT 3
57208: DOUBLE
57209: EQUAL
57210: IFTRUE 57214
57212: GO 57270
57214: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57215: LD_ADDR_VAR 0 9
57219: PUSH
57220: LD_VAR 0 29
57224: PUSH
57225: LD_VAR 0 30
57229: PUSH
57230: LD_VAR 0 31
57234: PUSH
57235: LD_VAR 0 32
57239: PUSH
57240: LD_VAR 0 33
57244: PUSH
57245: LD_VAR 0 34
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: PUSH
57258: LD_VAR 0 4
57262: PUSH
57263: LD_INT 1
57265: PLUS
57266: ARRAY
57267: ST_TO_ADDR
57268: GO 57753
57270: LD_INT 16
57272: DOUBLE
57273: EQUAL
57274: IFTRUE 57332
57276: LD_INT 17
57278: DOUBLE
57279: EQUAL
57280: IFTRUE 57332
57282: LD_INT 18
57284: DOUBLE
57285: EQUAL
57286: IFTRUE 57332
57288: LD_INT 19
57290: DOUBLE
57291: EQUAL
57292: IFTRUE 57332
57294: LD_INT 22
57296: DOUBLE
57297: EQUAL
57298: IFTRUE 57332
57300: LD_INT 20
57302: DOUBLE
57303: EQUAL
57304: IFTRUE 57332
57306: LD_INT 21
57308: DOUBLE
57309: EQUAL
57310: IFTRUE 57332
57312: LD_INT 23
57314: DOUBLE
57315: EQUAL
57316: IFTRUE 57332
57318: LD_INT 24
57320: DOUBLE
57321: EQUAL
57322: IFTRUE 57332
57324: LD_INT 25
57326: DOUBLE
57327: EQUAL
57328: IFTRUE 57332
57330: GO 57388
57332: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57333: LD_ADDR_VAR 0 9
57337: PUSH
57338: LD_VAR 0 35
57342: PUSH
57343: LD_VAR 0 36
57347: PUSH
57348: LD_VAR 0 37
57352: PUSH
57353: LD_VAR 0 38
57357: PUSH
57358: LD_VAR 0 39
57362: PUSH
57363: LD_VAR 0 40
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: PUSH
57376: LD_VAR 0 4
57380: PUSH
57381: LD_INT 1
57383: PLUS
57384: ARRAY
57385: ST_TO_ADDR
57386: GO 57753
57388: LD_INT 6
57390: DOUBLE
57391: EQUAL
57392: IFTRUE 57444
57394: LD_INT 7
57396: DOUBLE
57397: EQUAL
57398: IFTRUE 57444
57400: LD_INT 8
57402: DOUBLE
57403: EQUAL
57404: IFTRUE 57444
57406: LD_INT 13
57408: DOUBLE
57409: EQUAL
57410: IFTRUE 57444
57412: LD_INT 12
57414: DOUBLE
57415: EQUAL
57416: IFTRUE 57444
57418: LD_INT 15
57420: DOUBLE
57421: EQUAL
57422: IFTRUE 57444
57424: LD_INT 11
57426: DOUBLE
57427: EQUAL
57428: IFTRUE 57444
57430: LD_INT 14
57432: DOUBLE
57433: EQUAL
57434: IFTRUE 57444
57436: LD_INT 10
57438: DOUBLE
57439: EQUAL
57440: IFTRUE 57444
57442: GO 57500
57444: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57445: LD_ADDR_VAR 0 9
57449: PUSH
57450: LD_VAR 0 41
57454: PUSH
57455: LD_VAR 0 42
57459: PUSH
57460: LD_VAR 0 43
57464: PUSH
57465: LD_VAR 0 44
57469: PUSH
57470: LD_VAR 0 45
57474: PUSH
57475: LD_VAR 0 46
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: PUSH
57488: LD_VAR 0 4
57492: PUSH
57493: LD_INT 1
57495: PLUS
57496: ARRAY
57497: ST_TO_ADDR
57498: GO 57753
57500: LD_INT 36
57502: DOUBLE
57503: EQUAL
57504: IFTRUE 57508
57506: GO 57564
57508: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57509: LD_ADDR_VAR 0 9
57513: PUSH
57514: LD_VAR 0 47
57518: PUSH
57519: LD_VAR 0 48
57523: PUSH
57524: LD_VAR 0 49
57528: PUSH
57529: LD_VAR 0 50
57533: PUSH
57534: LD_VAR 0 51
57538: PUSH
57539: LD_VAR 0 52
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: PUSH
57552: LD_VAR 0 4
57556: PUSH
57557: LD_INT 1
57559: PLUS
57560: ARRAY
57561: ST_TO_ADDR
57562: GO 57753
57564: LD_INT 4
57566: DOUBLE
57567: EQUAL
57568: IFTRUE 57590
57570: LD_INT 5
57572: DOUBLE
57573: EQUAL
57574: IFTRUE 57590
57576: LD_INT 34
57578: DOUBLE
57579: EQUAL
57580: IFTRUE 57590
57582: LD_INT 37
57584: DOUBLE
57585: EQUAL
57586: IFTRUE 57590
57588: GO 57646
57590: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57591: LD_ADDR_VAR 0 9
57595: PUSH
57596: LD_VAR 0 53
57600: PUSH
57601: LD_VAR 0 54
57605: PUSH
57606: LD_VAR 0 55
57610: PUSH
57611: LD_VAR 0 56
57615: PUSH
57616: LD_VAR 0 57
57620: PUSH
57621: LD_VAR 0 58
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: PUSH
57634: LD_VAR 0 4
57638: PUSH
57639: LD_INT 1
57641: PLUS
57642: ARRAY
57643: ST_TO_ADDR
57644: GO 57753
57646: LD_INT 31
57648: DOUBLE
57649: EQUAL
57650: IFTRUE 57696
57652: LD_INT 32
57654: DOUBLE
57655: EQUAL
57656: IFTRUE 57696
57658: LD_INT 33
57660: DOUBLE
57661: EQUAL
57662: IFTRUE 57696
57664: LD_INT 27
57666: DOUBLE
57667: EQUAL
57668: IFTRUE 57696
57670: LD_INT 26
57672: DOUBLE
57673: EQUAL
57674: IFTRUE 57696
57676: LD_INT 28
57678: DOUBLE
57679: EQUAL
57680: IFTRUE 57696
57682: LD_INT 29
57684: DOUBLE
57685: EQUAL
57686: IFTRUE 57696
57688: LD_INT 30
57690: DOUBLE
57691: EQUAL
57692: IFTRUE 57696
57694: GO 57752
57696: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57697: LD_ADDR_VAR 0 9
57701: PUSH
57702: LD_VAR 0 59
57706: PUSH
57707: LD_VAR 0 60
57711: PUSH
57712: LD_VAR 0 61
57716: PUSH
57717: LD_VAR 0 62
57721: PUSH
57722: LD_VAR 0 63
57726: PUSH
57727: LD_VAR 0 64
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: PUSH
57740: LD_VAR 0 4
57744: PUSH
57745: LD_INT 1
57747: PLUS
57748: ARRAY
57749: ST_TO_ADDR
57750: GO 57753
57752: POP
// temp_list2 = [ ] ;
57753: LD_ADDR_VAR 0 10
57757: PUSH
57758: EMPTY
57759: ST_TO_ADDR
// for i in temp_list do
57760: LD_ADDR_VAR 0 8
57764: PUSH
57765: LD_VAR 0 9
57769: PUSH
57770: FOR_IN
57771: IFFALSE 57823
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57773: LD_ADDR_VAR 0 10
57777: PUSH
57778: LD_VAR 0 10
57782: PUSH
57783: LD_VAR 0 8
57787: PUSH
57788: LD_INT 1
57790: ARRAY
57791: PUSH
57792: LD_VAR 0 2
57796: PLUS
57797: PUSH
57798: LD_VAR 0 8
57802: PUSH
57803: LD_INT 2
57805: ARRAY
57806: PUSH
57807: LD_VAR 0 3
57811: PLUS
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: ADD
57820: ST_TO_ADDR
57821: GO 57770
57823: POP
57824: POP
// result = temp_list2 ;
57825: LD_ADDR_VAR 0 7
57829: PUSH
57830: LD_VAR 0 10
57834: ST_TO_ADDR
// end ;
57835: LD_VAR 0 7
57839: RET
// export function EnemyInRange ( unit , dist ) ; begin
57840: LD_INT 0
57842: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57843: LD_ADDR_VAR 0 3
57847: PUSH
57848: LD_VAR 0 1
57852: PPUSH
57853: CALL_OW 255
57857: PPUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: CALL_OW 250
57867: PPUSH
57868: LD_VAR 0 1
57872: PPUSH
57873: CALL_OW 251
57877: PPUSH
57878: LD_VAR 0 2
57882: PPUSH
57883: CALL 31242 0 4
57887: PUSH
57888: LD_INT 4
57890: ARRAY
57891: ST_TO_ADDR
// end ;
57892: LD_VAR 0 3
57896: RET
// export function PlayerSeeMe ( unit ) ; begin
57897: LD_INT 0
57899: PPUSH
// result := See ( your_side , unit ) ;
57900: LD_ADDR_VAR 0 2
57904: PUSH
57905: LD_OWVAR 2
57909: PPUSH
57910: LD_VAR 0 1
57914: PPUSH
57915: CALL_OW 292
57919: ST_TO_ADDR
// end ;
57920: LD_VAR 0 2
57924: RET
// export function ReverseDir ( unit ) ; begin
57925: LD_INT 0
57927: PPUSH
// if not unit then
57928: LD_VAR 0 1
57932: NOT
57933: IFFALSE 57937
// exit ;
57935: GO 57960
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57937: LD_ADDR_VAR 0 2
57941: PUSH
57942: LD_VAR 0 1
57946: PPUSH
57947: CALL_OW 254
57951: PUSH
57952: LD_INT 3
57954: PLUS
57955: PUSH
57956: LD_INT 6
57958: MOD
57959: ST_TO_ADDR
// end ;
57960: LD_VAR 0 2
57964: RET
// export function ReverseArray ( array ) ; var i ; begin
57965: LD_INT 0
57967: PPUSH
57968: PPUSH
// if not array then
57969: LD_VAR 0 1
57973: NOT
57974: IFFALSE 57978
// exit ;
57976: GO 58033
// result := [ ] ;
57978: LD_ADDR_VAR 0 2
57982: PUSH
57983: EMPTY
57984: ST_TO_ADDR
// for i := array downto 1 do
57985: LD_ADDR_VAR 0 3
57989: PUSH
57990: DOUBLE
57991: LD_VAR 0 1
57995: INC
57996: ST_TO_ADDR
57997: LD_INT 1
57999: PUSH
58000: FOR_DOWNTO
58001: IFFALSE 58031
// result := Join ( result , array [ i ] ) ;
58003: LD_ADDR_VAR 0 2
58007: PUSH
58008: LD_VAR 0 2
58012: PPUSH
58013: LD_VAR 0 1
58017: PUSH
58018: LD_VAR 0 3
58022: ARRAY
58023: PPUSH
58024: CALL 62677 0 2
58028: ST_TO_ADDR
58029: GO 58000
58031: POP
58032: POP
// end ;
58033: LD_VAR 0 2
58037: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58038: LD_INT 0
58040: PPUSH
58041: PPUSH
58042: PPUSH
58043: PPUSH
58044: PPUSH
58045: PPUSH
// if not unit or not hexes then
58046: LD_VAR 0 1
58050: NOT
58051: PUSH
58052: LD_VAR 0 2
58056: NOT
58057: OR
58058: IFFALSE 58062
// exit ;
58060: GO 58185
// dist := 9999 ;
58062: LD_ADDR_VAR 0 5
58066: PUSH
58067: LD_INT 9999
58069: ST_TO_ADDR
// for i = 1 to hexes do
58070: LD_ADDR_VAR 0 4
58074: PUSH
58075: DOUBLE
58076: LD_INT 1
58078: DEC
58079: ST_TO_ADDR
58080: LD_VAR 0 2
58084: PUSH
58085: FOR_TO
58086: IFFALSE 58173
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58088: LD_ADDR_VAR 0 6
58092: PUSH
58093: LD_VAR 0 1
58097: PPUSH
58098: LD_VAR 0 2
58102: PUSH
58103: LD_VAR 0 4
58107: ARRAY
58108: PUSH
58109: LD_INT 1
58111: ARRAY
58112: PPUSH
58113: LD_VAR 0 2
58117: PUSH
58118: LD_VAR 0 4
58122: ARRAY
58123: PUSH
58124: LD_INT 2
58126: ARRAY
58127: PPUSH
58128: CALL_OW 297
58132: ST_TO_ADDR
// if tdist < dist then
58133: LD_VAR 0 6
58137: PUSH
58138: LD_VAR 0 5
58142: LESS
58143: IFFALSE 58171
// begin hex := hexes [ i ] ;
58145: LD_ADDR_VAR 0 8
58149: PUSH
58150: LD_VAR 0 2
58154: PUSH
58155: LD_VAR 0 4
58159: ARRAY
58160: ST_TO_ADDR
// dist := tdist ;
58161: LD_ADDR_VAR 0 5
58165: PUSH
58166: LD_VAR 0 6
58170: ST_TO_ADDR
// end ; end ;
58171: GO 58085
58173: POP
58174: POP
// result := hex ;
58175: LD_ADDR_VAR 0 3
58179: PUSH
58180: LD_VAR 0 8
58184: ST_TO_ADDR
// end ;
58185: LD_VAR 0 3
58189: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58190: LD_INT 0
58192: PPUSH
58193: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58194: LD_VAR 0 1
58198: NOT
58199: PUSH
58200: LD_VAR 0 1
58204: PUSH
58205: LD_INT 21
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 23
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PPUSH
58229: CALL_OW 69
58233: IN
58234: NOT
58235: OR
58236: IFFALSE 58240
// exit ;
58238: GO 58287
// for i = 1 to 3 do
58240: LD_ADDR_VAR 0 3
58244: PUSH
58245: DOUBLE
58246: LD_INT 1
58248: DEC
58249: ST_TO_ADDR
58250: LD_INT 3
58252: PUSH
58253: FOR_TO
58254: IFFALSE 58285
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58256: LD_VAR 0 1
58260: PPUSH
58261: CALL_OW 250
58265: PPUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: CALL_OW 251
58275: PPUSH
58276: LD_INT 1
58278: PPUSH
58279: CALL_OW 453
58283: GO 58253
58285: POP
58286: POP
// end ;
58287: LD_VAR 0 2
58291: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58292: LD_INT 0
58294: PPUSH
58295: PPUSH
58296: PPUSH
58297: PPUSH
58298: PPUSH
58299: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58300: LD_VAR 0 1
58304: NOT
58305: PUSH
58306: LD_VAR 0 2
58310: NOT
58311: OR
58312: PUSH
58313: LD_VAR 0 1
58317: PPUSH
58318: CALL_OW 314
58322: OR
58323: IFFALSE 58327
// exit ;
58325: GO 58794
// if GetLives ( i ) < 250 then
58327: LD_VAR 0 4
58331: PPUSH
58332: CALL_OW 256
58336: PUSH
58337: LD_INT 250
58339: LESS
58340: IFFALSE 58353
// begin ComAutodestruct ( i ) ;
58342: LD_VAR 0 4
58346: PPUSH
58347: CALL 58190 0 1
// exit ;
58351: GO 58794
// end ; x := GetX ( enemy_unit ) ;
58353: LD_ADDR_VAR 0 7
58357: PUSH
58358: LD_VAR 0 2
58362: PPUSH
58363: CALL_OW 250
58367: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58368: LD_ADDR_VAR 0 8
58372: PUSH
58373: LD_VAR 0 2
58377: PPUSH
58378: CALL_OW 251
58382: ST_TO_ADDR
// if not x or not y then
58383: LD_VAR 0 7
58387: NOT
58388: PUSH
58389: LD_VAR 0 8
58393: NOT
58394: OR
58395: IFFALSE 58399
// exit ;
58397: GO 58794
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58399: LD_ADDR_VAR 0 6
58403: PUSH
58404: LD_VAR 0 7
58408: PPUSH
58409: LD_INT 0
58411: PPUSH
58412: LD_INT 4
58414: PPUSH
58415: CALL_OW 272
58419: PUSH
58420: LD_VAR 0 8
58424: PPUSH
58425: LD_INT 0
58427: PPUSH
58428: LD_INT 4
58430: PPUSH
58431: CALL_OW 273
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_VAR 0 7
58444: PPUSH
58445: LD_INT 1
58447: PPUSH
58448: LD_INT 4
58450: PPUSH
58451: CALL_OW 272
58455: PUSH
58456: LD_VAR 0 8
58460: PPUSH
58461: LD_INT 1
58463: PPUSH
58464: LD_INT 4
58466: PPUSH
58467: CALL_OW 273
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_VAR 0 7
58480: PPUSH
58481: LD_INT 2
58483: PPUSH
58484: LD_INT 4
58486: PPUSH
58487: CALL_OW 272
58491: PUSH
58492: LD_VAR 0 8
58496: PPUSH
58497: LD_INT 2
58499: PPUSH
58500: LD_INT 4
58502: PPUSH
58503: CALL_OW 273
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_VAR 0 7
58516: PPUSH
58517: LD_INT 3
58519: PPUSH
58520: LD_INT 4
58522: PPUSH
58523: CALL_OW 272
58527: PUSH
58528: LD_VAR 0 8
58532: PPUSH
58533: LD_INT 3
58535: PPUSH
58536: LD_INT 4
58538: PPUSH
58539: CALL_OW 273
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_VAR 0 7
58552: PPUSH
58553: LD_INT 4
58555: PPUSH
58556: LD_INT 4
58558: PPUSH
58559: CALL_OW 272
58563: PUSH
58564: LD_VAR 0 8
58568: PPUSH
58569: LD_INT 4
58571: PPUSH
58572: LD_INT 4
58574: PPUSH
58575: CALL_OW 273
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_VAR 0 7
58588: PPUSH
58589: LD_INT 5
58591: PPUSH
58592: LD_INT 4
58594: PPUSH
58595: CALL_OW 272
58599: PUSH
58600: LD_VAR 0 8
58604: PPUSH
58605: LD_INT 5
58607: PPUSH
58608: LD_INT 4
58610: PPUSH
58611: CALL_OW 273
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: ST_TO_ADDR
// for i = tmp downto 1 do
58628: LD_ADDR_VAR 0 4
58632: PUSH
58633: DOUBLE
58634: LD_VAR 0 6
58638: INC
58639: ST_TO_ADDR
58640: LD_INT 1
58642: PUSH
58643: FOR_DOWNTO
58644: IFFALSE 58745
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58646: LD_VAR 0 6
58650: PUSH
58651: LD_VAR 0 4
58655: ARRAY
58656: PUSH
58657: LD_INT 1
58659: ARRAY
58660: PPUSH
58661: LD_VAR 0 6
58665: PUSH
58666: LD_VAR 0 4
58670: ARRAY
58671: PUSH
58672: LD_INT 2
58674: ARRAY
58675: PPUSH
58676: CALL_OW 488
58680: NOT
58681: PUSH
58682: LD_VAR 0 6
58686: PUSH
58687: LD_VAR 0 4
58691: ARRAY
58692: PUSH
58693: LD_INT 1
58695: ARRAY
58696: PPUSH
58697: LD_VAR 0 6
58701: PUSH
58702: LD_VAR 0 4
58706: ARRAY
58707: PUSH
58708: LD_INT 2
58710: ARRAY
58711: PPUSH
58712: CALL_OW 428
58716: PUSH
58717: LD_INT 0
58719: NONEQUAL
58720: OR
58721: IFFALSE 58743
// tmp := Delete ( tmp , i ) ;
58723: LD_ADDR_VAR 0 6
58727: PUSH
58728: LD_VAR 0 6
58732: PPUSH
58733: LD_VAR 0 4
58737: PPUSH
58738: CALL_OW 3
58742: ST_TO_ADDR
58743: GO 58643
58745: POP
58746: POP
// j := GetClosestHex ( unit , tmp ) ;
58747: LD_ADDR_VAR 0 5
58751: PUSH
58752: LD_VAR 0 1
58756: PPUSH
58757: LD_VAR 0 6
58761: PPUSH
58762: CALL 58038 0 2
58766: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58767: LD_VAR 0 1
58771: PPUSH
58772: LD_VAR 0 5
58776: PUSH
58777: LD_INT 1
58779: ARRAY
58780: PPUSH
58781: LD_VAR 0 5
58785: PUSH
58786: LD_INT 2
58788: ARRAY
58789: PPUSH
58790: CALL_OW 111
// end ;
58794: LD_VAR 0 3
58798: RET
// export function PrepareApemanSoldier ( ) ; begin
58799: LD_INT 0
58801: PPUSH
// uc_nation := 0 ;
58802: LD_ADDR_OWVAR 21
58806: PUSH
58807: LD_INT 0
58809: ST_TO_ADDR
// hc_sex := sex_male ;
58810: LD_ADDR_OWVAR 27
58814: PUSH
58815: LD_INT 1
58817: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58818: LD_ADDR_OWVAR 28
58822: PUSH
58823: LD_INT 15
58825: ST_TO_ADDR
// hc_gallery :=  ;
58826: LD_ADDR_OWVAR 33
58830: PUSH
58831: LD_STRING 
58833: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58834: LD_ADDR_OWVAR 31
58838: PUSH
58839: LD_INT 0
58841: PPUSH
58842: LD_INT 3
58844: PPUSH
58845: CALL_OW 12
58849: PUSH
58850: LD_INT 0
58852: PPUSH
58853: LD_INT 3
58855: PPUSH
58856: CALL_OW 12
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: ST_TO_ADDR
// end ;
58873: LD_VAR 0 1
58877: RET
// export function PrepareApemanEngineer ( ) ; begin
58878: LD_INT 0
58880: PPUSH
// uc_nation := 0 ;
58881: LD_ADDR_OWVAR 21
58885: PUSH
58886: LD_INT 0
58888: ST_TO_ADDR
// hc_sex := sex_male ;
58889: LD_ADDR_OWVAR 27
58893: PUSH
58894: LD_INT 1
58896: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58897: LD_ADDR_OWVAR 28
58901: PUSH
58902: LD_INT 16
58904: ST_TO_ADDR
// hc_gallery :=  ;
58905: LD_ADDR_OWVAR 33
58909: PUSH
58910: LD_STRING 
58912: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58913: LD_ADDR_OWVAR 31
58917: PUSH
58918: LD_INT 0
58920: PPUSH
58921: LD_INT 3
58923: PPUSH
58924: CALL_OW 12
58928: PUSH
58929: LD_INT 0
58931: PPUSH
58932: LD_INT 3
58934: PPUSH
58935: CALL_OW 12
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// end ;
58952: LD_VAR 0 1
58956: RET
// export function PrepareApeman ( agressivity ) ; begin
58957: LD_INT 0
58959: PPUSH
// uc_side := 0 ;
58960: LD_ADDR_OWVAR 20
58964: PUSH
58965: LD_INT 0
58967: ST_TO_ADDR
// uc_nation := 0 ;
58968: LD_ADDR_OWVAR 21
58972: PUSH
58973: LD_INT 0
58975: ST_TO_ADDR
// hc_sex := sex_male ;
58976: LD_ADDR_OWVAR 27
58980: PUSH
58981: LD_INT 1
58983: ST_TO_ADDR
// hc_class := class_apeman ;
58984: LD_ADDR_OWVAR 28
58988: PUSH
58989: LD_INT 12
58991: ST_TO_ADDR
// hc_gallery :=  ;
58992: LD_ADDR_OWVAR 33
58996: PUSH
58997: LD_STRING 
58999: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59000: LD_ADDR_OWVAR 35
59004: PUSH
59005: LD_VAR 0 1
59009: NEG
59010: PPUSH
59011: LD_VAR 0 1
59015: PPUSH
59016: CALL_OW 12
59020: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59021: LD_ADDR_OWVAR 31
59025: PUSH
59026: LD_INT 0
59028: PPUSH
59029: LD_INT 3
59031: PPUSH
59032: CALL_OW 12
59036: PUSH
59037: LD_INT 0
59039: PPUSH
59040: LD_INT 3
59042: PPUSH
59043: CALL_OW 12
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: ST_TO_ADDR
// end ;
59060: LD_VAR 0 2
59064: RET
// export function PrepareTiger ( agressivity ) ; begin
59065: LD_INT 0
59067: PPUSH
// uc_side := 0 ;
59068: LD_ADDR_OWVAR 20
59072: PUSH
59073: LD_INT 0
59075: ST_TO_ADDR
// uc_nation := 0 ;
59076: LD_ADDR_OWVAR 21
59080: PUSH
59081: LD_INT 0
59083: ST_TO_ADDR
// hc_class := class_tiger ;
59084: LD_ADDR_OWVAR 28
59088: PUSH
59089: LD_INT 14
59091: ST_TO_ADDR
// hc_gallery :=  ;
59092: LD_ADDR_OWVAR 33
59096: PUSH
59097: LD_STRING 
59099: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59100: LD_ADDR_OWVAR 35
59104: PUSH
59105: LD_VAR 0 1
59109: NEG
59110: PPUSH
59111: LD_VAR 0 1
59115: PPUSH
59116: CALL_OW 12
59120: ST_TO_ADDR
// end ;
59121: LD_VAR 0 2
59125: RET
// export function PrepareEnchidna ( ) ; begin
59126: LD_INT 0
59128: PPUSH
// uc_side := 0 ;
59129: LD_ADDR_OWVAR 20
59133: PUSH
59134: LD_INT 0
59136: ST_TO_ADDR
// uc_nation := 0 ;
59137: LD_ADDR_OWVAR 21
59141: PUSH
59142: LD_INT 0
59144: ST_TO_ADDR
// hc_class := class_baggie ;
59145: LD_ADDR_OWVAR 28
59149: PUSH
59150: LD_INT 13
59152: ST_TO_ADDR
// hc_gallery :=  ;
59153: LD_ADDR_OWVAR 33
59157: PUSH
59158: LD_STRING 
59160: ST_TO_ADDR
// end ;
59161: LD_VAR 0 1
59165: RET
// export function PrepareFrog ( ) ; begin
59166: LD_INT 0
59168: PPUSH
// uc_side := 0 ;
59169: LD_ADDR_OWVAR 20
59173: PUSH
59174: LD_INT 0
59176: ST_TO_ADDR
// uc_nation := 0 ;
59177: LD_ADDR_OWVAR 21
59181: PUSH
59182: LD_INT 0
59184: ST_TO_ADDR
// hc_class := class_frog ;
59185: LD_ADDR_OWVAR 28
59189: PUSH
59190: LD_INT 19
59192: ST_TO_ADDR
// hc_gallery :=  ;
59193: LD_ADDR_OWVAR 33
59197: PUSH
59198: LD_STRING 
59200: ST_TO_ADDR
// end ;
59201: LD_VAR 0 1
59205: RET
// export function PrepareFish ( ) ; begin
59206: LD_INT 0
59208: PPUSH
// uc_side := 0 ;
59209: LD_ADDR_OWVAR 20
59213: PUSH
59214: LD_INT 0
59216: ST_TO_ADDR
// uc_nation := 0 ;
59217: LD_ADDR_OWVAR 21
59221: PUSH
59222: LD_INT 0
59224: ST_TO_ADDR
// hc_class := class_fish ;
59225: LD_ADDR_OWVAR 28
59229: PUSH
59230: LD_INT 20
59232: ST_TO_ADDR
// hc_gallery :=  ;
59233: LD_ADDR_OWVAR 33
59237: PUSH
59238: LD_STRING 
59240: ST_TO_ADDR
// end ;
59241: LD_VAR 0 1
59245: RET
// export function PrepareBird ( ) ; begin
59246: LD_INT 0
59248: PPUSH
// uc_side := 0 ;
59249: LD_ADDR_OWVAR 20
59253: PUSH
59254: LD_INT 0
59256: ST_TO_ADDR
// uc_nation := 0 ;
59257: LD_ADDR_OWVAR 21
59261: PUSH
59262: LD_INT 0
59264: ST_TO_ADDR
// hc_class := class_phororhacos ;
59265: LD_ADDR_OWVAR 28
59269: PUSH
59270: LD_INT 18
59272: ST_TO_ADDR
// hc_gallery :=  ;
59273: LD_ADDR_OWVAR 33
59277: PUSH
59278: LD_STRING 
59280: ST_TO_ADDR
// end ;
59281: LD_VAR 0 1
59285: RET
// export function PrepareHorse ( ) ; begin
59286: LD_INT 0
59288: PPUSH
// uc_side := 0 ;
59289: LD_ADDR_OWVAR 20
59293: PUSH
59294: LD_INT 0
59296: ST_TO_ADDR
// uc_nation := 0 ;
59297: LD_ADDR_OWVAR 21
59301: PUSH
59302: LD_INT 0
59304: ST_TO_ADDR
// hc_class := class_horse ;
59305: LD_ADDR_OWVAR 28
59309: PUSH
59310: LD_INT 21
59312: ST_TO_ADDR
// hc_gallery :=  ;
59313: LD_ADDR_OWVAR 33
59317: PUSH
59318: LD_STRING 
59320: ST_TO_ADDR
// end ;
59321: LD_VAR 0 1
59325: RET
// export function PrepareMastodont ( ) ; begin
59326: LD_INT 0
59328: PPUSH
// uc_side := 0 ;
59329: LD_ADDR_OWVAR 20
59333: PUSH
59334: LD_INT 0
59336: ST_TO_ADDR
// uc_nation := 0 ;
59337: LD_ADDR_OWVAR 21
59341: PUSH
59342: LD_INT 0
59344: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59345: LD_ADDR_OWVAR 37
59349: PUSH
59350: LD_INT 31
59352: ST_TO_ADDR
// vc_control := control_rider ;
59353: LD_ADDR_OWVAR 38
59357: PUSH
59358: LD_INT 4
59360: ST_TO_ADDR
// end ;
59361: LD_VAR 0 1
59365: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59366: LD_INT 0
59368: PPUSH
59369: PPUSH
59370: PPUSH
// uc_side = 0 ;
59371: LD_ADDR_OWVAR 20
59375: PUSH
59376: LD_INT 0
59378: ST_TO_ADDR
// uc_nation = 0 ;
59379: LD_ADDR_OWVAR 21
59383: PUSH
59384: LD_INT 0
59386: ST_TO_ADDR
// InitHc_All ( ) ;
59387: CALL_OW 584
// InitVc ;
59391: CALL_OW 20
// if mastodonts then
59395: LD_VAR 0 6
59399: IFFALSE 59466
// for i = 1 to mastodonts do
59401: LD_ADDR_VAR 0 11
59405: PUSH
59406: DOUBLE
59407: LD_INT 1
59409: DEC
59410: ST_TO_ADDR
59411: LD_VAR 0 6
59415: PUSH
59416: FOR_TO
59417: IFFALSE 59464
// begin vc_chassis := 31 ;
59419: LD_ADDR_OWVAR 37
59423: PUSH
59424: LD_INT 31
59426: ST_TO_ADDR
// vc_control := control_rider ;
59427: LD_ADDR_OWVAR 38
59431: PUSH
59432: LD_INT 4
59434: ST_TO_ADDR
// animal := CreateVehicle ;
59435: LD_ADDR_VAR 0 12
59439: PUSH
59440: CALL_OW 45
59444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59445: LD_VAR 0 12
59449: PPUSH
59450: LD_VAR 0 8
59454: PPUSH
59455: LD_INT 0
59457: PPUSH
59458: CALL 61594 0 3
// end ;
59462: GO 59416
59464: POP
59465: POP
// if horses then
59466: LD_VAR 0 5
59470: IFFALSE 59537
// for i = 1 to horses do
59472: LD_ADDR_VAR 0 11
59476: PUSH
59477: DOUBLE
59478: LD_INT 1
59480: DEC
59481: ST_TO_ADDR
59482: LD_VAR 0 5
59486: PUSH
59487: FOR_TO
59488: IFFALSE 59535
// begin hc_class := 21 ;
59490: LD_ADDR_OWVAR 28
59494: PUSH
59495: LD_INT 21
59497: ST_TO_ADDR
// hc_gallery :=  ;
59498: LD_ADDR_OWVAR 33
59502: PUSH
59503: LD_STRING 
59505: ST_TO_ADDR
// animal := CreateHuman ;
59506: LD_ADDR_VAR 0 12
59510: PUSH
59511: CALL_OW 44
59515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59516: LD_VAR 0 12
59520: PPUSH
59521: LD_VAR 0 8
59525: PPUSH
59526: LD_INT 0
59528: PPUSH
59529: CALL 61594 0 3
// end ;
59533: GO 59487
59535: POP
59536: POP
// if birds then
59537: LD_VAR 0 1
59541: IFFALSE 59608
// for i = 1 to birds do
59543: LD_ADDR_VAR 0 11
59547: PUSH
59548: DOUBLE
59549: LD_INT 1
59551: DEC
59552: ST_TO_ADDR
59553: LD_VAR 0 1
59557: PUSH
59558: FOR_TO
59559: IFFALSE 59606
// begin hc_class = 18 ;
59561: LD_ADDR_OWVAR 28
59565: PUSH
59566: LD_INT 18
59568: ST_TO_ADDR
// hc_gallery =  ;
59569: LD_ADDR_OWVAR 33
59573: PUSH
59574: LD_STRING 
59576: ST_TO_ADDR
// animal := CreateHuman ;
59577: LD_ADDR_VAR 0 12
59581: PUSH
59582: CALL_OW 44
59586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59587: LD_VAR 0 12
59591: PPUSH
59592: LD_VAR 0 8
59596: PPUSH
59597: LD_INT 0
59599: PPUSH
59600: CALL 61594 0 3
// end ;
59604: GO 59558
59606: POP
59607: POP
// if tigers then
59608: LD_VAR 0 2
59612: IFFALSE 59696
// for i = 1 to tigers do
59614: LD_ADDR_VAR 0 11
59618: PUSH
59619: DOUBLE
59620: LD_INT 1
59622: DEC
59623: ST_TO_ADDR
59624: LD_VAR 0 2
59628: PUSH
59629: FOR_TO
59630: IFFALSE 59694
// begin hc_class = class_tiger ;
59632: LD_ADDR_OWVAR 28
59636: PUSH
59637: LD_INT 14
59639: ST_TO_ADDR
// hc_gallery =  ;
59640: LD_ADDR_OWVAR 33
59644: PUSH
59645: LD_STRING 
59647: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59648: LD_ADDR_OWVAR 35
59652: PUSH
59653: LD_INT 7
59655: NEG
59656: PPUSH
59657: LD_INT 7
59659: PPUSH
59660: CALL_OW 12
59664: ST_TO_ADDR
// animal := CreateHuman ;
59665: LD_ADDR_VAR 0 12
59669: PUSH
59670: CALL_OW 44
59674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59675: LD_VAR 0 12
59679: PPUSH
59680: LD_VAR 0 8
59684: PPUSH
59685: LD_INT 0
59687: PPUSH
59688: CALL 61594 0 3
// end ;
59692: GO 59629
59694: POP
59695: POP
// if apemans then
59696: LD_VAR 0 3
59700: IFFALSE 59823
// for i = 1 to apemans do
59702: LD_ADDR_VAR 0 11
59706: PUSH
59707: DOUBLE
59708: LD_INT 1
59710: DEC
59711: ST_TO_ADDR
59712: LD_VAR 0 3
59716: PUSH
59717: FOR_TO
59718: IFFALSE 59821
// begin hc_class = class_apeman ;
59720: LD_ADDR_OWVAR 28
59724: PUSH
59725: LD_INT 12
59727: ST_TO_ADDR
// hc_gallery =  ;
59728: LD_ADDR_OWVAR 33
59732: PUSH
59733: LD_STRING 
59735: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59736: LD_ADDR_OWVAR 35
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PPUSH
59745: LD_INT 2
59747: PPUSH
59748: CALL_OW 12
59752: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59753: LD_ADDR_OWVAR 31
59757: PUSH
59758: LD_INT 1
59760: PPUSH
59761: LD_INT 3
59763: PPUSH
59764: CALL_OW 12
59768: PUSH
59769: LD_INT 1
59771: PPUSH
59772: LD_INT 3
59774: PPUSH
59775: CALL_OW 12
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: ST_TO_ADDR
// animal := CreateHuman ;
59792: LD_ADDR_VAR 0 12
59796: PUSH
59797: CALL_OW 44
59801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59802: LD_VAR 0 12
59806: PPUSH
59807: LD_VAR 0 8
59811: PPUSH
59812: LD_INT 0
59814: PPUSH
59815: CALL 61594 0 3
// end ;
59819: GO 59717
59821: POP
59822: POP
// if enchidnas then
59823: LD_VAR 0 4
59827: IFFALSE 59894
// for i = 1 to enchidnas do
59829: LD_ADDR_VAR 0 11
59833: PUSH
59834: DOUBLE
59835: LD_INT 1
59837: DEC
59838: ST_TO_ADDR
59839: LD_VAR 0 4
59843: PUSH
59844: FOR_TO
59845: IFFALSE 59892
// begin hc_class = 13 ;
59847: LD_ADDR_OWVAR 28
59851: PUSH
59852: LD_INT 13
59854: ST_TO_ADDR
// hc_gallery =  ;
59855: LD_ADDR_OWVAR 33
59859: PUSH
59860: LD_STRING 
59862: ST_TO_ADDR
// animal := CreateHuman ;
59863: LD_ADDR_VAR 0 12
59867: PUSH
59868: CALL_OW 44
59872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59873: LD_VAR 0 12
59877: PPUSH
59878: LD_VAR 0 8
59882: PPUSH
59883: LD_INT 0
59885: PPUSH
59886: CALL 61594 0 3
// end ;
59890: GO 59844
59892: POP
59893: POP
// if fishes then
59894: LD_VAR 0 7
59898: IFFALSE 59965
// for i = 1 to fishes do
59900: LD_ADDR_VAR 0 11
59904: PUSH
59905: DOUBLE
59906: LD_INT 1
59908: DEC
59909: ST_TO_ADDR
59910: LD_VAR 0 7
59914: PUSH
59915: FOR_TO
59916: IFFALSE 59963
// begin hc_class = 20 ;
59918: LD_ADDR_OWVAR 28
59922: PUSH
59923: LD_INT 20
59925: ST_TO_ADDR
// hc_gallery =  ;
59926: LD_ADDR_OWVAR 33
59930: PUSH
59931: LD_STRING 
59933: ST_TO_ADDR
// animal := CreateHuman ;
59934: LD_ADDR_VAR 0 12
59938: PUSH
59939: CALL_OW 44
59943: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59944: LD_VAR 0 12
59948: PPUSH
59949: LD_VAR 0 9
59953: PPUSH
59954: LD_INT 0
59956: PPUSH
59957: CALL 61594 0 3
// end ;
59961: GO 59915
59963: POP
59964: POP
// end ;
59965: LD_VAR 0 10
59969: RET
// export function WantHeal ( sci , unit ) ; begin
59970: LD_INT 0
59972: PPUSH
// if GetTaskList ( sci ) > 0 then
59973: LD_VAR 0 1
59977: PPUSH
59978: CALL_OW 437
59982: PUSH
59983: LD_INT 0
59985: GREATER
59986: IFFALSE 60056
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59988: LD_VAR 0 1
59992: PPUSH
59993: CALL_OW 437
59997: PUSH
59998: LD_INT 1
60000: ARRAY
60001: PUSH
60002: LD_INT 1
60004: ARRAY
60005: PUSH
60006: LD_STRING l
60008: EQUAL
60009: PUSH
60010: LD_VAR 0 1
60014: PPUSH
60015: CALL_OW 437
60019: PUSH
60020: LD_INT 1
60022: ARRAY
60023: PUSH
60024: LD_INT 4
60026: ARRAY
60027: PUSH
60028: LD_VAR 0 2
60032: EQUAL
60033: AND
60034: IFFALSE 60046
// result := true else
60036: LD_ADDR_VAR 0 3
60040: PUSH
60041: LD_INT 1
60043: ST_TO_ADDR
60044: GO 60054
// result := false ;
60046: LD_ADDR_VAR 0 3
60050: PUSH
60051: LD_INT 0
60053: ST_TO_ADDR
// end else
60054: GO 60064
// result := false ;
60056: LD_ADDR_VAR 0 3
60060: PUSH
60061: LD_INT 0
60063: ST_TO_ADDR
// end ;
60064: LD_VAR 0 3
60068: RET
// export function HealTarget ( sci ) ; begin
60069: LD_INT 0
60071: PPUSH
// if not sci then
60072: LD_VAR 0 1
60076: NOT
60077: IFFALSE 60081
// exit ;
60079: GO 60146
// result := 0 ;
60081: LD_ADDR_VAR 0 2
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// if GetTaskList ( sci ) then
60089: LD_VAR 0 1
60093: PPUSH
60094: CALL_OW 437
60098: IFFALSE 60146
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60100: LD_VAR 0 1
60104: PPUSH
60105: CALL_OW 437
60109: PUSH
60110: LD_INT 1
60112: ARRAY
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: PUSH
60118: LD_STRING l
60120: EQUAL
60121: IFFALSE 60146
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: LD_VAR 0 1
60132: PPUSH
60133: CALL_OW 437
60137: PUSH
60138: LD_INT 1
60140: ARRAY
60141: PUSH
60142: LD_INT 4
60144: ARRAY
60145: ST_TO_ADDR
// end ;
60146: LD_VAR 0 2
60150: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60151: LD_INT 0
60153: PPUSH
60154: PPUSH
60155: PPUSH
60156: PPUSH
// if not base_units then
60157: LD_VAR 0 1
60161: NOT
60162: IFFALSE 60166
// exit ;
60164: GO 60253
// result := false ;
60166: LD_ADDR_VAR 0 2
60170: PUSH
60171: LD_INT 0
60173: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60174: LD_ADDR_VAR 0 5
60178: PUSH
60179: LD_VAR 0 1
60183: PPUSH
60184: LD_INT 21
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PPUSH
60194: CALL_OW 72
60198: ST_TO_ADDR
// if not tmp then
60199: LD_VAR 0 5
60203: NOT
60204: IFFALSE 60208
// exit ;
60206: GO 60253
// for i in tmp do
60208: LD_ADDR_VAR 0 3
60212: PUSH
60213: LD_VAR 0 5
60217: PUSH
60218: FOR_IN
60219: IFFALSE 60251
// begin result := EnemyInRange ( i , 22 ) ;
60221: LD_ADDR_VAR 0 2
60225: PUSH
60226: LD_VAR 0 3
60230: PPUSH
60231: LD_INT 22
60233: PPUSH
60234: CALL 57840 0 2
60238: ST_TO_ADDR
// if result then
60239: LD_VAR 0 2
60243: IFFALSE 60249
// exit ;
60245: POP
60246: POP
60247: GO 60253
// end ;
60249: GO 60218
60251: POP
60252: POP
// end ;
60253: LD_VAR 0 2
60257: RET
// export function FilterByTag ( units , tag ) ; begin
60258: LD_INT 0
60260: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60261: LD_ADDR_VAR 0 3
60265: PUSH
60266: LD_VAR 0 1
60270: PPUSH
60271: LD_INT 120
60273: PUSH
60274: LD_VAR 0 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PPUSH
60283: CALL_OW 72
60287: ST_TO_ADDR
// end ;
60288: LD_VAR 0 3
60292: RET
// export function IsDriver ( un ) ; begin
60293: LD_INT 0
60295: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60296: LD_ADDR_VAR 0 2
60300: PUSH
60301: LD_VAR 0 1
60305: PUSH
60306: LD_INT 55
60308: PUSH
60309: EMPTY
60310: LIST
60311: PPUSH
60312: CALL_OW 69
60316: IN
60317: ST_TO_ADDR
// end ;
60318: LD_VAR 0 2
60322: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60323: LD_INT 0
60325: PPUSH
60326: PPUSH
// list := [ ] ;
60327: LD_ADDR_VAR 0 5
60331: PUSH
60332: EMPTY
60333: ST_TO_ADDR
// case d of 0 :
60334: LD_VAR 0 3
60338: PUSH
60339: LD_INT 0
60341: DOUBLE
60342: EQUAL
60343: IFTRUE 60347
60345: GO 60480
60347: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60348: LD_ADDR_VAR 0 5
60352: PUSH
60353: LD_VAR 0 1
60357: PUSH
60358: LD_INT 4
60360: MINUS
60361: PUSH
60362: LD_VAR 0 2
60366: PUSH
60367: LD_INT 4
60369: MINUS
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: PUSH
60379: LD_VAR 0 1
60383: PUSH
60384: LD_INT 3
60386: MINUS
60387: PUSH
60388: LD_VAR 0 2
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: PUSH
60401: LD_VAR 0 1
60405: PUSH
60406: LD_INT 4
60408: PLUS
60409: PUSH
60410: LD_VAR 0 2
60414: PUSH
60415: LD_INT 4
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: LIST
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: LD_INT 3
60430: PLUS
60431: PUSH
60432: LD_VAR 0 2
60436: PUSH
60437: LD_INT 3
60439: PLUS
60440: PUSH
60441: LD_INT 5
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: PUSH
60449: LD_VAR 0 1
60453: PUSH
60454: LD_VAR 0 2
60458: PUSH
60459: LD_INT 4
60461: PLUS
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: ST_TO_ADDR
// end ; 1 :
60478: GO 61178
60480: LD_INT 1
60482: DOUBLE
60483: EQUAL
60484: IFTRUE 60488
60486: GO 60621
60488: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60489: LD_ADDR_VAR 0 5
60493: PUSH
60494: LD_VAR 0 1
60498: PUSH
60499: LD_VAR 0 2
60503: PUSH
60504: LD_INT 4
60506: MINUS
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: LIST
60515: PUSH
60516: LD_VAR 0 1
60520: PUSH
60521: LD_INT 3
60523: MINUS
60524: PUSH
60525: LD_VAR 0 2
60529: PUSH
60530: LD_INT 3
60532: MINUS
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: LIST
60541: PUSH
60542: LD_VAR 0 1
60546: PUSH
60547: LD_INT 4
60549: MINUS
60550: PUSH
60551: LD_VAR 0 2
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: PUSH
60564: LD_VAR 0 1
60568: PUSH
60569: LD_VAR 0 2
60573: PUSH
60574: LD_INT 3
60576: PLUS
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: PUSH
60586: LD_VAR 0 1
60590: PUSH
60591: LD_INT 4
60593: PLUS
60594: PUSH
60595: LD_VAR 0 2
60599: PUSH
60600: LD_INT 4
60602: PLUS
60603: PUSH
60604: LD_INT 5
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: ST_TO_ADDR
// end ; 2 :
60619: GO 61178
60621: LD_INT 2
60623: DOUBLE
60624: EQUAL
60625: IFTRUE 60629
60627: GO 60758
60629: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60630: LD_ADDR_VAR 0 5
60634: PUSH
60635: LD_VAR 0 1
60639: PUSH
60640: LD_VAR 0 2
60644: PUSH
60645: LD_INT 3
60647: MINUS
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: PUSH
60657: LD_VAR 0 1
60661: PUSH
60662: LD_INT 4
60664: PLUS
60665: PUSH
60666: LD_VAR 0 2
60670: PUSH
60671: LD_INT 4
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: LD_VAR 0 1
60683: PUSH
60684: LD_VAR 0 2
60688: PUSH
60689: LD_INT 4
60691: PLUS
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: PUSH
60701: LD_VAR 0 1
60705: PUSH
60706: LD_INT 3
60708: MINUS
60709: PUSH
60710: LD_VAR 0 2
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: PUSH
60723: LD_VAR 0 1
60727: PUSH
60728: LD_INT 4
60730: MINUS
60731: PUSH
60732: LD_VAR 0 2
60736: PUSH
60737: LD_INT 4
60739: MINUS
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: LIST
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: ST_TO_ADDR
// end ; 3 :
60756: GO 61178
60758: LD_INT 3
60760: DOUBLE
60761: EQUAL
60762: IFTRUE 60766
60764: GO 60899
60766: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60767: LD_ADDR_VAR 0 5
60771: PUSH
60772: LD_VAR 0 1
60776: PUSH
60777: LD_INT 3
60779: PLUS
60780: PUSH
60781: LD_VAR 0 2
60785: PUSH
60786: LD_INT 4
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: PUSH
60794: LD_VAR 0 1
60798: PUSH
60799: LD_INT 4
60801: PLUS
60802: PUSH
60803: LD_VAR 0 2
60807: PUSH
60808: LD_INT 4
60810: PLUS
60811: PUSH
60812: LD_INT 5
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: PUSH
60820: LD_VAR 0 1
60824: PUSH
60825: LD_INT 4
60827: MINUS
60828: PUSH
60829: LD_VAR 0 2
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: LIST
60841: PUSH
60842: LD_VAR 0 1
60846: PUSH
60847: LD_VAR 0 2
60851: PUSH
60852: LD_INT 4
60854: MINUS
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: LIST
60863: PUSH
60864: LD_VAR 0 1
60868: PUSH
60869: LD_INT 3
60871: MINUS
60872: PUSH
60873: LD_VAR 0 2
60877: PUSH
60878: LD_INT 3
60880: MINUS
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: ST_TO_ADDR
// end ; 4 :
60897: GO 61178
60899: LD_INT 4
60901: DOUBLE
60902: EQUAL
60903: IFTRUE 60907
60905: GO 61040
60907: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60908: LD_ADDR_VAR 0 5
60912: PUSH
60913: LD_VAR 0 1
60917: PUSH
60918: LD_VAR 0 2
60922: PUSH
60923: LD_INT 4
60925: PLUS
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: LIST
60934: PUSH
60935: LD_VAR 0 1
60939: PUSH
60940: LD_INT 3
60942: PLUS
60943: PUSH
60944: LD_VAR 0 2
60948: PUSH
60949: LD_INT 3
60951: PLUS
60952: PUSH
60953: LD_INT 5
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: PUSH
60961: LD_VAR 0 1
60965: PUSH
60966: LD_INT 4
60968: PLUS
60969: PUSH
60970: LD_VAR 0 2
60974: PUSH
60975: LD_INT 4
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: LD_VAR 0 1
60987: PUSH
60988: LD_VAR 0 2
60992: PUSH
60993: LD_INT 3
60995: MINUS
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: PUSH
61005: LD_VAR 0 1
61009: PUSH
61010: LD_INT 4
61012: MINUS
61013: PUSH
61014: LD_VAR 0 2
61018: PUSH
61019: LD_INT 4
61021: MINUS
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: ST_TO_ADDR
// end ; 5 :
61038: GO 61178
61040: LD_INT 5
61042: DOUBLE
61043: EQUAL
61044: IFTRUE 61048
61046: GO 61177
61048: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61049: LD_ADDR_VAR 0 5
61053: PUSH
61054: LD_VAR 0 1
61058: PUSH
61059: LD_INT 4
61061: MINUS
61062: PUSH
61063: LD_VAR 0 2
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: LIST
61075: PUSH
61076: LD_VAR 0 1
61080: PUSH
61081: LD_VAR 0 2
61085: PUSH
61086: LD_INT 4
61088: MINUS
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: PUSH
61098: LD_VAR 0 1
61102: PUSH
61103: LD_INT 4
61105: PLUS
61106: PUSH
61107: LD_VAR 0 2
61111: PUSH
61112: LD_INT 4
61114: PLUS
61115: PUSH
61116: LD_INT 5
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: PUSH
61124: LD_VAR 0 1
61128: PUSH
61129: LD_INT 3
61131: PLUS
61132: PUSH
61133: LD_VAR 0 2
61137: PUSH
61138: LD_INT 4
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: PUSH
61146: LD_VAR 0 1
61150: PUSH
61151: LD_VAR 0 2
61155: PUSH
61156: LD_INT 3
61158: PLUS
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: ST_TO_ADDR
// end ; end ;
61175: GO 61178
61177: POP
// result := list ;
61178: LD_ADDR_VAR 0 4
61182: PUSH
61183: LD_VAR 0 5
61187: ST_TO_ADDR
// end ;
61188: LD_VAR 0 4
61192: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61193: LD_INT 0
61195: PPUSH
61196: PPUSH
61197: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61198: LD_VAR 0 1
61202: NOT
61203: PUSH
61204: LD_VAR 0 2
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 3
61217: PUSH
61218: LD_INT 4
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: IN
61227: NOT
61228: OR
61229: IFFALSE 61233
// exit ;
61231: GO 61316
// tmp := [ ] ;
61233: LD_ADDR_VAR 0 5
61237: PUSH
61238: EMPTY
61239: ST_TO_ADDR
// for i in units do
61240: LD_ADDR_VAR 0 4
61244: PUSH
61245: LD_VAR 0 1
61249: PUSH
61250: FOR_IN
61251: IFFALSE 61285
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61253: LD_ADDR_VAR 0 5
61257: PUSH
61258: LD_VAR 0 5
61262: PPUSH
61263: LD_VAR 0 4
61267: PPUSH
61268: LD_VAR 0 2
61272: PPUSH
61273: CALL_OW 259
61277: PPUSH
61278: CALL 62677 0 2
61282: ST_TO_ADDR
61283: GO 61250
61285: POP
61286: POP
// if not tmp then
61287: LD_VAR 0 5
61291: NOT
61292: IFFALSE 61296
// exit ;
61294: GO 61316
// result := SortListByListDesc ( units , tmp ) ;
61296: LD_ADDR_VAR 0 3
61300: PUSH
61301: LD_VAR 0 1
61305: PPUSH
61306: LD_VAR 0 5
61310: PPUSH
61311: CALL_OW 77
61315: ST_TO_ADDR
// end ;
61316: LD_VAR 0 3
61320: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
61325: PPUSH
// result := false ;
61326: LD_ADDR_VAR 0 3
61330: PUSH
61331: LD_INT 0
61333: ST_TO_ADDR
// if not building then
61334: LD_VAR 0 2
61338: NOT
61339: IFFALSE 61343
// exit ;
61341: GO 61481
// x := GetX ( building ) ;
61343: LD_ADDR_VAR 0 4
61347: PUSH
61348: LD_VAR 0 2
61352: PPUSH
61353: CALL_OW 250
61357: ST_TO_ADDR
// y := GetY ( building ) ;
61358: LD_ADDR_VAR 0 5
61362: PUSH
61363: LD_VAR 0 2
61367: PPUSH
61368: CALL_OW 251
61372: ST_TO_ADDR
// if not x or not y then
61373: LD_VAR 0 4
61377: NOT
61378: PUSH
61379: LD_VAR 0 5
61383: NOT
61384: OR
61385: IFFALSE 61389
// exit ;
61387: GO 61481
// if GetTaskList ( unit ) then
61389: LD_VAR 0 1
61393: PPUSH
61394: CALL_OW 437
61398: IFFALSE 61481
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61400: LD_STRING e
61402: PUSH
61403: LD_VAR 0 1
61407: PPUSH
61408: CALL_OW 437
61412: PUSH
61413: LD_INT 1
61415: ARRAY
61416: PUSH
61417: LD_INT 1
61419: ARRAY
61420: EQUAL
61421: PUSH
61422: LD_VAR 0 4
61426: PUSH
61427: LD_VAR 0 1
61431: PPUSH
61432: CALL_OW 437
61436: PUSH
61437: LD_INT 1
61439: ARRAY
61440: PUSH
61441: LD_INT 2
61443: ARRAY
61444: EQUAL
61445: AND
61446: PUSH
61447: LD_VAR 0 5
61451: PUSH
61452: LD_VAR 0 1
61456: PPUSH
61457: CALL_OW 437
61461: PUSH
61462: LD_INT 1
61464: ARRAY
61465: PUSH
61466: LD_INT 3
61468: ARRAY
61469: EQUAL
61470: AND
61471: IFFALSE 61481
// result := true end ;
61473: LD_ADDR_VAR 0 3
61477: PUSH
61478: LD_INT 1
61480: ST_TO_ADDR
// end ;
61481: LD_VAR 0 3
61485: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61486: LD_INT 0
61488: PPUSH
// result := false ;
61489: LD_ADDR_VAR 0 4
61493: PUSH
61494: LD_INT 0
61496: ST_TO_ADDR
// if GetTaskList ( unit ) then
61497: LD_VAR 0 1
61501: PPUSH
61502: CALL_OW 437
61506: IFFALSE 61589
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61508: LD_STRING M
61510: PUSH
61511: LD_VAR 0 1
61515: PPUSH
61516: CALL_OW 437
61520: PUSH
61521: LD_INT 1
61523: ARRAY
61524: PUSH
61525: LD_INT 1
61527: ARRAY
61528: EQUAL
61529: PUSH
61530: LD_VAR 0 2
61534: PUSH
61535: LD_VAR 0 1
61539: PPUSH
61540: CALL_OW 437
61544: PUSH
61545: LD_INT 1
61547: ARRAY
61548: PUSH
61549: LD_INT 2
61551: ARRAY
61552: EQUAL
61553: AND
61554: PUSH
61555: LD_VAR 0 3
61559: PUSH
61560: LD_VAR 0 1
61564: PPUSH
61565: CALL_OW 437
61569: PUSH
61570: LD_INT 1
61572: ARRAY
61573: PUSH
61574: LD_INT 3
61576: ARRAY
61577: EQUAL
61578: AND
61579: IFFALSE 61589
// result := true ;
61581: LD_ADDR_VAR 0 4
61585: PUSH
61586: LD_INT 1
61588: ST_TO_ADDR
// end ; end ;
61589: LD_VAR 0 4
61593: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61594: LD_INT 0
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
// if not unit or not area then
61600: LD_VAR 0 1
61604: NOT
61605: PUSH
61606: LD_VAR 0 2
61610: NOT
61611: OR
61612: IFFALSE 61616
// exit ;
61614: GO 61780
// tmp := AreaToList ( area , i ) ;
61616: LD_ADDR_VAR 0 6
61620: PUSH
61621: LD_VAR 0 2
61625: PPUSH
61626: LD_VAR 0 5
61630: PPUSH
61631: CALL_OW 517
61635: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61636: LD_ADDR_VAR 0 5
61640: PUSH
61641: DOUBLE
61642: LD_INT 1
61644: DEC
61645: ST_TO_ADDR
61646: LD_VAR 0 6
61650: PUSH
61651: LD_INT 1
61653: ARRAY
61654: PUSH
61655: FOR_TO
61656: IFFALSE 61778
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61658: LD_ADDR_VAR 0 7
61662: PUSH
61663: LD_VAR 0 6
61667: PUSH
61668: LD_INT 1
61670: ARRAY
61671: PUSH
61672: LD_VAR 0 5
61676: ARRAY
61677: PUSH
61678: LD_VAR 0 6
61682: PUSH
61683: LD_INT 2
61685: ARRAY
61686: PUSH
61687: LD_VAR 0 5
61691: ARRAY
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61697: LD_VAR 0 7
61701: PUSH
61702: LD_INT 1
61704: ARRAY
61705: PPUSH
61706: LD_VAR 0 7
61710: PUSH
61711: LD_INT 2
61713: ARRAY
61714: PPUSH
61715: CALL_OW 428
61719: PUSH
61720: LD_INT 0
61722: EQUAL
61723: IFFALSE 61776
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61725: LD_VAR 0 1
61729: PPUSH
61730: LD_VAR 0 7
61734: PUSH
61735: LD_INT 1
61737: ARRAY
61738: PPUSH
61739: LD_VAR 0 7
61743: PUSH
61744: LD_INT 2
61746: ARRAY
61747: PPUSH
61748: LD_VAR 0 3
61752: PPUSH
61753: CALL_OW 48
// result := IsPlaced ( unit ) ;
61757: LD_ADDR_VAR 0 4
61761: PUSH
61762: LD_VAR 0 1
61766: PPUSH
61767: CALL_OW 305
61771: ST_TO_ADDR
// exit ;
61772: POP
61773: POP
61774: GO 61780
// end ; end ;
61776: GO 61655
61778: POP
61779: POP
// end ;
61780: LD_VAR 0 4
61784: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61785: LD_INT 0
61787: PPUSH
61788: PPUSH
61789: PPUSH
// if not side or side > 8 then
61790: LD_VAR 0 1
61794: NOT
61795: PUSH
61796: LD_VAR 0 1
61800: PUSH
61801: LD_INT 8
61803: GREATER
61804: OR
61805: IFFALSE 61809
// exit ;
61807: GO 61996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61809: LD_ADDR_VAR 0 4
61813: PUSH
61814: LD_INT 22
61816: PUSH
61817: LD_VAR 0 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 21
61828: PUSH
61829: LD_INT 3
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PPUSH
61840: CALL_OW 69
61844: ST_TO_ADDR
// if not tmp then
61845: LD_VAR 0 4
61849: NOT
61850: IFFALSE 61854
// exit ;
61852: GO 61996
// enable_addtolog := true ;
61854: LD_ADDR_OWVAR 81
61858: PUSH
61859: LD_INT 1
61861: ST_TO_ADDR
// AddToLog ( [ ) ;
61862: LD_STRING [
61864: PPUSH
61865: CALL_OW 561
// for i in tmp do
61869: LD_ADDR_VAR 0 3
61873: PUSH
61874: LD_VAR 0 4
61878: PUSH
61879: FOR_IN
61880: IFFALSE 61987
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61882: LD_STRING [
61884: PUSH
61885: LD_VAR 0 3
61889: PPUSH
61890: CALL_OW 266
61894: STR
61895: PUSH
61896: LD_STRING , 
61898: STR
61899: PUSH
61900: LD_VAR 0 3
61904: PPUSH
61905: CALL_OW 250
61909: STR
61910: PUSH
61911: LD_STRING , 
61913: STR
61914: PUSH
61915: LD_VAR 0 3
61919: PPUSH
61920: CALL_OW 251
61924: STR
61925: PUSH
61926: LD_STRING , 
61928: STR
61929: PUSH
61930: LD_VAR 0 3
61934: PPUSH
61935: CALL_OW 254
61939: STR
61940: PUSH
61941: LD_STRING , 
61943: STR
61944: PUSH
61945: LD_VAR 0 3
61949: PPUSH
61950: LD_INT 1
61952: PPUSH
61953: CALL_OW 268
61957: STR
61958: PUSH
61959: LD_STRING , 
61961: STR
61962: PUSH
61963: LD_VAR 0 3
61967: PPUSH
61968: LD_INT 2
61970: PPUSH
61971: CALL_OW 268
61975: STR
61976: PUSH
61977: LD_STRING ],
61979: STR
61980: PPUSH
61981: CALL_OW 561
// end ;
61985: GO 61879
61987: POP
61988: POP
// AddToLog ( ]; ) ;
61989: LD_STRING ];
61991: PPUSH
61992: CALL_OW 561
// end ;
61996: LD_VAR 0 2
62000: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62001: LD_INT 0
62003: PPUSH
62004: PPUSH
62005: PPUSH
62006: PPUSH
62007: PPUSH
// if not area or not rate or not max then
62008: LD_VAR 0 1
62012: NOT
62013: PUSH
62014: LD_VAR 0 2
62018: NOT
62019: OR
62020: PUSH
62021: LD_VAR 0 4
62025: NOT
62026: OR
62027: IFFALSE 62031
// exit ;
62029: GO 62220
// while 1 do
62031: LD_INT 1
62033: IFFALSE 62220
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62035: LD_ADDR_VAR 0 9
62039: PUSH
62040: LD_VAR 0 1
62044: PPUSH
62045: LD_INT 1
62047: PPUSH
62048: CALL_OW 287
62052: PUSH
62053: LD_INT 10
62055: MUL
62056: ST_TO_ADDR
// r := rate / 10 ;
62057: LD_ADDR_VAR 0 7
62061: PUSH
62062: LD_VAR 0 2
62066: PUSH
62067: LD_INT 10
62069: DIVREAL
62070: ST_TO_ADDR
// time := 1 1$00 ;
62071: LD_ADDR_VAR 0 8
62075: PUSH
62076: LD_INT 2100
62078: ST_TO_ADDR
// if amount < min then
62079: LD_VAR 0 9
62083: PUSH
62084: LD_VAR 0 3
62088: LESS
62089: IFFALSE 62107
// r := r * 2 else
62091: LD_ADDR_VAR 0 7
62095: PUSH
62096: LD_VAR 0 7
62100: PUSH
62101: LD_INT 2
62103: MUL
62104: ST_TO_ADDR
62105: GO 62133
// if amount > max then
62107: LD_VAR 0 9
62111: PUSH
62112: LD_VAR 0 4
62116: GREATER
62117: IFFALSE 62133
// r := r / 2 ;
62119: LD_ADDR_VAR 0 7
62123: PUSH
62124: LD_VAR 0 7
62128: PUSH
62129: LD_INT 2
62131: DIVREAL
62132: ST_TO_ADDR
// time := time / r ;
62133: LD_ADDR_VAR 0 8
62137: PUSH
62138: LD_VAR 0 8
62142: PUSH
62143: LD_VAR 0 7
62147: DIVREAL
62148: ST_TO_ADDR
// if time < 0 then
62149: LD_VAR 0 8
62153: PUSH
62154: LD_INT 0
62156: LESS
62157: IFFALSE 62174
// time := time * - 1 ;
62159: LD_ADDR_VAR 0 8
62163: PUSH
62164: LD_VAR 0 8
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: MUL
62173: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62174: LD_VAR 0 8
62178: PUSH
62179: LD_INT 35
62181: PPUSH
62182: LD_INT 875
62184: PPUSH
62185: CALL_OW 12
62189: PLUS
62190: PPUSH
62191: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62195: LD_INT 1
62197: PPUSH
62198: LD_INT 5
62200: PPUSH
62201: CALL_OW 12
62205: PPUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: LD_INT 1
62213: PPUSH
62214: CALL_OW 55
// end ;
62218: GO 62031
// end ;
62220: LD_VAR 0 5
62224: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62225: LD_INT 0
62227: PPUSH
62228: PPUSH
62229: PPUSH
62230: PPUSH
62231: PPUSH
62232: PPUSH
62233: PPUSH
62234: PPUSH
// if not turrets or not factories then
62235: LD_VAR 0 1
62239: NOT
62240: PUSH
62241: LD_VAR 0 2
62245: NOT
62246: OR
62247: IFFALSE 62251
// exit ;
62249: GO 62558
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62251: LD_ADDR_VAR 0 10
62255: PUSH
62256: LD_INT 5
62258: PUSH
62259: LD_INT 6
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 4
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 3
62278: PUSH
62279: LD_INT 5
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 24
62293: PUSH
62294: LD_INT 25
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 23
62303: PUSH
62304: LD_INT 27
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 42
62317: PUSH
62318: LD_INT 43
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 44
62327: PUSH
62328: LD_INT 46
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 45
62337: PUSH
62338: LD_INT 47
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: ST_TO_ADDR
// result := [ ] ;
62355: LD_ADDR_VAR 0 3
62359: PUSH
62360: EMPTY
62361: ST_TO_ADDR
// for i in turrets do
62362: LD_ADDR_VAR 0 4
62366: PUSH
62367: LD_VAR 0 1
62371: PUSH
62372: FOR_IN
62373: IFFALSE 62556
// begin nat := GetNation ( i ) ;
62375: LD_ADDR_VAR 0 7
62379: PUSH
62380: LD_VAR 0 4
62384: PPUSH
62385: CALL_OW 248
62389: ST_TO_ADDR
// weapon := 0 ;
62390: LD_ADDR_VAR 0 8
62394: PUSH
62395: LD_INT 0
62397: ST_TO_ADDR
// if not nat then
62398: LD_VAR 0 7
62402: NOT
62403: IFFALSE 62407
// continue ;
62405: GO 62372
// for j in list [ nat ] do
62407: LD_ADDR_VAR 0 5
62411: PUSH
62412: LD_VAR 0 10
62416: PUSH
62417: LD_VAR 0 7
62421: ARRAY
62422: PUSH
62423: FOR_IN
62424: IFFALSE 62465
// if GetBWeapon ( i ) = j [ 1 ] then
62426: LD_VAR 0 4
62430: PPUSH
62431: CALL_OW 269
62435: PUSH
62436: LD_VAR 0 5
62440: PUSH
62441: LD_INT 1
62443: ARRAY
62444: EQUAL
62445: IFFALSE 62463
// begin weapon := j [ 2 ] ;
62447: LD_ADDR_VAR 0 8
62451: PUSH
62452: LD_VAR 0 5
62456: PUSH
62457: LD_INT 2
62459: ARRAY
62460: ST_TO_ADDR
// break ;
62461: GO 62465
// end ;
62463: GO 62423
62465: POP
62466: POP
// if not weapon then
62467: LD_VAR 0 8
62471: NOT
62472: IFFALSE 62476
// continue ;
62474: GO 62372
// for k in factories do
62476: LD_ADDR_VAR 0 6
62480: PUSH
62481: LD_VAR 0 2
62485: PUSH
62486: FOR_IN
62487: IFFALSE 62552
// begin weapons := AvailableWeaponList ( k ) ;
62489: LD_ADDR_VAR 0 9
62493: PUSH
62494: LD_VAR 0 6
62498: PPUSH
62499: CALL_OW 478
62503: ST_TO_ADDR
// if not weapons then
62504: LD_VAR 0 9
62508: NOT
62509: IFFALSE 62513
// continue ;
62511: GO 62486
// if weapon in weapons then
62513: LD_VAR 0 8
62517: PUSH
62518: LD_VAR 0 9
62522: IN
62523: IFFALSE 62550
// begin result := [ i , weapon ] ;
62525: LD_ADDR_VAR 0 3
62529: PUSH
62530: LD_VAR 0 4
62534: PUSH
62535: LD_VAR 0 8
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: ST_TO_ADDR
// exit ;
62544: POP
62545: POP
62546: POP
62547: POP
62548: GO 62558
// end ; end ;
62550: GO 62486
62552: POP
62553: POP
// end ;
62554: GO 62372
62556: POP
62557: POP
// end ;
62558: LD_VAR 0 3
62562: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62563: LD_INT 0
62565: PPUSH
// if not side or side > 8 then
62566: LD_VAR 0 3
62570: NOT
62571: PUSH
62572: LD_VAR 0 3
62576: PUSH
62577: LD_INT 8
62579: GREATER
62580: OR
62581: IFFALSE 62585
// exit ;
62583: GO 62644
// if not range then
62585: LD_VAR 0 4
62589: NOT
62590: IFFALSE 62601
// range := - 12 ;
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: LD_INT 12
62599: NEG
62600: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62601: LD_VAR 0 1
62605: PPUSH
62606: LD_VAR 0 2
62610: PPUSH
62611: LD_VAR 0 3
62615: PPUSH
62616: LD_VAR 0 4
62620: PPUSH
62621: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62625: LD_VAR 0 1
62629: PPUSH
62630: LD_VAR 0 2
62634: PPUSH
62635: LD_VAR 0 3
62639: PPUSH
62640: CALL_OW 331
// end ;
62644: LD_VAR 0 5
62648: RET
// export function Video ( mode ) ; begin
62649: LD_INT 0
62651: PPUSH
// ingame_video = mode ;
62652: LD_ADDR_OWVAR 52
62656: PUSH
62657: LD_VAR 0 1
62661: ST_TO_ADDR
// interface_hidden = mode ;
62662: LD_ADDR_OWVAR 54
62666: PUSH
62667: LD_VAR 0 1
62671: ST_TO_ADDR
// end ;
62672: LD_VAR 0 2
62676: RET
// export function Join ( array , element ) ; begin
62677: LD_INT 0
62679: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62680: LD_ADDR_VAR 0 3
62684: PUSH
62685: LD_VAR 0 1
62689: PPUSH
62690: LD_VAR 0 1
62694: PUSH
62695: LD_INT 1
62697: PLUS
62698: PPUSH
62699: LD_VAR 0 2
62703: PPUSH
62704: CALL_OW 1
62708: ST_TO_ADDR
// end ;
62709: LD_VAR 0 3
62713: RET
// export function JoinUnion ( array , element ) ; begin
62714: LD_INT 0
62716: PPUSH
// result := array union element ;
62717: LD_ADDR_VAR 0 3
62721: PUSH
62722: LD_VAR 0 1
62726: PUSH
62727: LD_VAR 0 2
62731: UNION
62732: ST_TO_ADDR
// end ;
62733: LD_VAR 0 3
62737: RET
// export function GetBehemoths ( side ) ; begin
62738: LD_INT 0
62740: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62741: LD_ADDR_VAR 0 2
62745: PUSH
62746: LD_INT 22
62748: PUSH
62749: LD_VAR 0 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 31
62760: PUSH
62761: LD_INT 25
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PPUSH
62772: CALL_OW 69
62776: ST_TO_ADDR
// end ;
62777: LD_VAR 0 2
62781: RET
// export function Shuffle ( array ) ; var i , index ; begin
62782: LD_INT 0
62784: PPUSH
62785: PPUSH
62786: PPUSH
// result := [ ] ;
62787: LD_ADDR_VAR 0 2
62791: PUSH
62792: EMPTY
62793: ST_TO_ADDR
// if not array then
62794: LD_VAR 0 1
62798: NOT
62799: IFFALSE 62803
// exit ;
62801: GO 62902
// Randomize ;
62803: CALL_OW 10
// for i = array downto 1 do
62807: LD_ADDR_VAR 0 3
62811: PUSH
62812: DOUBLE
62813: LD_VAR 0 1
62817: INC
62818: ST_TO_ADDR
62819: LD_INT 1
62821: PUSH
62822: FOR_DOWNTO
62823: IFFALSE 62900
// begin index := rand ( 1 , array ) ;
62825: LD_ADDR_VAR 0 4
62829: PUSH
62830: LD_INT 1
62832: PPUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: CALL_OW 12
62842: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62843: LD_ADDR_VAR 0 2
62847: PUSH
62848: LD_VAR 0 2
62852: PPUSH
62853: LD_VAR 0 2
62857: PUSH
62858: LD_INT 1
62860: PLUS
62861: PPUSH
62862: LD_VAR 0 1
62866: PUSH
62867: LD_VAR 0 4
62871: ARRAY
62872: PPUSH
62873: CALL_OW 2
62877: ST_TO_ADDR
// array := Delete ( array , index ) ;
62878: LD_ADDR_VAR 0 1
62882: PUSH
62883: LD_VAR 0 1
62887: PPUSH
62888: LD_VAR 0 4
62892: PPUSH
62893: CALL_OW 3
62897: ST_TO_ADDR
// end ;
62898: GO 62822
62900: POP
62901: POP
// end ;
62902: LD_VAR 0 2
62906: RET
// export function GetBaseMaterials ( base ) ; begin
62907: LD_INT 0
62909: PPUSH
// result := [ 0 , 0 , 0 ] ;
62910: LD_ADDR_VAR 0 2
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// if not base then
62929: LD_VAR 0 1
62933: NOT
62934: IFFALSE 62938
// exit ;
62936: GO 62987
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62938: LD_ADDR_VAR 0 2
62942: PUSH
62943: LD_VAR 0 1
62947: PPUSH
62948: LD_INT 1
62950: PPUSH
62951: CALL_OW 275
62955: PUSH
62956: LD_VAR 0 1
62960: PPUSH
62961: LD_INT 2
62963: PPUSH
62964: CALL_OW 275
62968: PUSH
62969: LD_VAR 0 1
62973: PPUSH
62974: LD_INT 3
62976: PPUSH
62977: CALL_OW 275
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: LIST
62986: ST_TO_ADDR
// end ;
62987: LD_VAR 0 2
62991: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62992: LD_INT 0
62994: PPUSH
62995: PPUSH
// result := array ;
62996: LD_ADDR_VAR 0 3
63000: PUSH
63001: LD_VAR 0 1
63005: ST_TO_ADDR
// if size >= result then
63006: LD_VAR 0 2
63010: PUSH
63011: LD_VAR 0 3
63015: GREATEREQUAL
63016: IFFALSE 63020
// exit ;
63018: GO 63070
// if size then
63020: LD_VAR 0 2
63024: IFFALSE 63070
// for i := array downto size do
63026: LD_ADDR_VAR 0 4
63030: PUSH
63031: DOUBLE
63032: LD_VAR 0 1
63036: INC
63037: ST_TO_ADDR
63038: LD_VAR 0 2
63042: PUSH
63043: FOR_DOWNTO
63044: IFFALSE 63068
// result := Delete ( result , result ) ;
63046: LD_ADDR_VAR 0 3
63050: PUSH
63051: LD_VAR 0 3
63055: PPUSH
63056: LD_VAR 0 3
63060: PPUSH
63061: CALL_OW 3
63065: ST_TO_ADDR
63066: GO 63043
63068: POP
63069: POP
// end ;
63070: LD_VAR 0 3
63074: RET
// export function ComExit ( unit ) ; var tmp ; begin
63075: LD_INT 0
63077: PPUSH
63078: PPUSH
// if not IsInUnit ( unit ) then
63079: LD_VAR 0 1
63083: PPUSH
63084: CALL_OW 310
63088: NOT
63089: IFFALSE 63093
// exit ;
63091: GO 63153
// tmp := IsInUnit ( unit ) ;
63093: LD_ADDR_VAR 0 3
63097: PUSH
63098: LD_VAR 0 1
63102: PPUSH
63103: CALL_OW 310
63107: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63108: LD_VAR 0 3
63112: PPUSH
63113: CALL_OW 247
63117: PUSH
63118: LD_INT 2
63120: EQUAL
63121: IFFALSE 63134
// ComExitVehicle ( unit ) else
63123: LD_VAR 0 1
63127: PPUSH
63128: CALL_OW 121
63132: GO 63143
// ComExitBuilding ( unit ) ;
63134: LD_VAR 0 1
63138: PPUSH
63139: CALL_OW 122
// result := tmp ;
63143: LD_ADDR_VAR 0 2
63147: PUSH
63148: LD_VAR 0 3
63152: ST_TO_ADDR
// end ;
63153: LD_VAR 0 2
63157: RET
// export function ComExitAll ( units ) ; var i ; begin
63158: LD_INT 0
63160: PPUSH
63161: PPUSH
// if not units then
63162: LD_VAR 0 1
63166: NOT
63167: IFFALSE 63171
// exit ;
63169: GO 63197
// for i in units do
63171: LD_ADDR_VAR 0 3
63175: PUSH
63176: LD_VAR 0 1
63180: PUSH
63181: FOR_IN
63182: IFFALSE 63195
// ComExit ( i ) ;
63184: LD_VAR 0 3
63188: PPUSH
63189: CALL 63075 0 1
63193: GO 63181
63195: POP
63196: POP
// end ;
63197: LD_VAR 0 2
63201: RET
// export function ResetHc ; begin
63202: LD_INT 0
63204: PPUSH
// InitHc ;
63205: CALL_OW 19
// hc_importance := 0 ;
63209: LD_ADDR_OWVAR 32
63213: PUSH
63214: LD_INT 0
63216: ST_TO_ADDR
// end ;
63217: LD_VAR 0 1
63221: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63222: LD_INT 0
63224: PPUSH
63225: PPUSH
63226: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63227: LD_ADDR_VAR 0 6
63231: PUSH
63232: LD_VAR 0 1
63236: PUSH
63237: LD_VAR 0 3
63241: PLUS
63242: PUSH
63243: LD_INT 2
63245: DIV
63246: ST_TO_ADDR
// if _x < 0 then
63247: LD_VAR 0 6
63251: PUSH
63252: LD_INT 0
63254: LESS
63255: IFFALSE 63272
// _x := _x * - 1 ;
63257: LD_ADDR_VAR 0 6
63261: PUSH
63262: LD_VAR 0 6
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: MUL
63271: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63272: LD_ADDR_VAR 0 7
63276: PUSH
63277: LD_VAR 0 2
63281: PUSH
63282: LD_VAR 0 4
63286: PLUS
63287: PUSH
63288: LD_INT 2
63290: DIV
63291: ST_TO_ADDR
// if _y < 0 then
63292: LD_VAR 0 7
63296: PUSH
63297: LD_INT 0
63299: LESS
63300: IFFALSE 63317
// _y := _y * - 1 ;
63302: LD_ADDR_VAR 0 7
63306: PUSH
63307: LD_VAR 0 7
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: MUL
63316: ST_TO_ADDR
// result := [ _x , _y ] ;
63317: LD_ADDR_VAR 0 5
63321: PUSH
63322: LD_VAR 0 6
63326: PUSH
63327: LD_VAR 0 7
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// end ;
63336: LD_VAR 0 5
63340: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63341: LD_INT 0
63343: PPUSH
63344: PPUSH
63345: PPUSH
63346: PPUSH
// task := GetTaskList ( unit ) ;
63347: LD_ADDR_VAR 0 7
63351: PUSH
63352: LD_VAR 0 1
63356: PPUSH
63357: CALL_OW 437
63361: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63362: LD_VAR 0 7
63366: NOT
63367: PUSH
63368: LD_VAR 0 1
63372: PPUSH
63373: LD_VAR 0 2
63377: PPUSH
63378: CALL_OW 308
63382: NOT
63383: AND
63384: IFFALSE 63388
// exit ;
63386: GO 63506
// if IsInArea ( unit , area ) then
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_VAR 0 2
63397: PPUSH
63398: CALL_OW 308
63402: IFFALSE 63420
// begin ComMoveToArea ( unit , goAway ) ;
63404: LD_VAR 0 1
63408: PPUSH
63409: LD_VAR 0 3
63413: PPUSH
63414: CALL_OW 113
// exit ;
63418: GO 63506
// end ; if task [ 1 ] [ 1 ] <> M then
63420: LD_VAR 0 7
63424: PUSH
63425: LD_INT 1
63427: ARRAY
63428: PUSH
63429: LD_INT 1
63431: ARRAY
63432: PUSH
63433: LD_STRING M
63435: NONEQUAL
63436: IFFALSE 63440
// exit ;
63438: GO 63506
// x := task [ 1 ] [ 2 ] ;
63440: LD_ADDR_VAR 0 5
63444: PUSH
63445: LD_VAR 0 7
63449: PUSH
63450: LD_INT 1
63452: ARRAY
63453: PUSH
63454: LD_INT 2
63456: ARRAY
63457: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63458: LD_ADDR_VAR 0 6
63462: PUSH
63463: LD_VAR 0 7
63467: PUSH
63468: LD_INT 1
63470: ARRAY
63471: PUSH
63472: LD_INT 3
63474: ARRAY
63475: ST_TO_ADDR
// if InArea ( x , y , area ) then
63476: LD_VAR 0 5
63480: PPUSH
63481: LD_VAR 0 6
63485: PPUSH
63486: LD_VAR 0 2
63490: PPUSH
63491: CALL_OW 309
63495: IFFALSE 63506
// ComStop ( unit ) ;
63497: LD_VAR 0 1
63501: PPUSH
63502: CALL_OW 141
// end ;
63506: LD_VAR 0 4
63510: RET
// export function Abs ( value ) ; begin
63511: LD_INT 0
63513: PPUSH
// result := value ;
63514: LD_ADDR_VAR 0 2
63518: PUSH
63519: LD_VAR 0 1
63523: ST_TO_ADDR
// if value < 0 then
63524: LD_VAR 0 1
63528: PUSH
63529: LD_INT 0
63531: LESS
63532: IFFALSE 63549
// result := value * - 1 ;
63534: LD_ADDR_VAR 0 2
63538: PUSH
63539: LD_VAR 0 1
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: MUL
63548: ST_TO_ADDR
// end ;
63549: LD_VAR 0 2
63553: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63554: LD_INT 0
63556: PPUSH
63557: PPUSH
63558: PPUSH
63559: PPUSH
63560: PPUSH
63561: PPUSH
63562: PPUSH
63563: PPUSH
// if not unit or not building then
63564: LD_VAR 0 1
63568: NOT
63569: PUSH
63570: LD_VAR 0 2
63574: NOT
63575: OR
63576: IFFALSE 63580
// exit ;
63578: GO 63806
// x := GetX ( building ) ;
63580: LD_ADDR_VAR 0 4
63584: PUSH
63585: LD_VAR 0 2
63589: PPUSH
63590: CALL_OW 250
63594: ST_TO_ADDR
// y := GetY ( building ) ;
63595: LD_ADDR_VAR 0 6
63599: PUSH
63600: LD_VAR 0 2
63604: PPUSH
63605: CALL_OW 251
63609: ST_TO_ADDR
// d := GetDir ( building ) ;
63610: LD_ADDR_VAR 0 8
63614: PUSH
63615: LD_VAR 0 2
63619: PPUSH
63620: CALL_OW 254
63624: ST_TO_ADDR
// r := 4 ;
63625: LD_ADDR_VAR 0 9
63629: PUSH
63630: LD_INT 4
63632: ST_TO_ADDR
// for i := 1 to 5 do
63633: LD_ADDR_VAR 0 10
63637: PUSH
63638: DOUBLE
63639: LD_INT 1
63641: DEC
63642: ST_TO_ADDR
63643: LD_INT 5
63645: PUSH
63646: FOR_TO
63647: IFFALSE 63804
// begin _x := ShiftX ( x , d , r + i ) ;
63649: LD_ADDR_VAR 0 5
63653: PUSH
63654: LD_VAR 0 4
63658: PPUSH
63659: LD_VAR 0 8
63663: PPUSH
63664: LD_VAR 0 9
63668: PUSH
63669: LD_VAR 0 10
63673: PLUS
63674: PPUSH
63675: CALL_OW 272
63679: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63680: LD_ADDR_VAR 0 7
63684: PUSH
63685: LD_VAR 0 6
63689: PPUSH
63690: LD_VAR 0 8
63694: PPUSH
63695: LD_VAR 0 9
63699: PUSH
63700: LD_VAR 0 10
63704: PLUS
63705: PPUSH
63706: CALL_OW 273
63710: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63711: LD_VAR 0 5
63715: PPUSH
63716: LD_VAR 0 7
63720: PPUSH
63721: CALL_OW 488
63725: PUSH
63726: LD_VAR 0 5
63730: PPUSH
63731: LD_VAR 0 7
63735: PPUSH
63736: CALL_OW 428
63740: PPUSH
63741: CALL_OW 247
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: IN
63756: NOT
63757: AND
63758: IFFALSE 63802
// begin ComMoveXY ( unit , _x , _y ) ;
63760: LD_VAR 0 1
63764: PPUSH
63765: LD_VAR 0 5
63769: PPUSH
63770: LD_VAR 0 7
63774: PPUSH
63775: CALL_OW 111
// result := [ _x , _y ] ;
63779: LD_ADDR_VAR 0 3
63783: PUSH
63784: LD_VAR 0 5
63788: PUSH
63789: LD_VAR 0 7
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: ST_TO_ADDR
// exit ;
63798: POP
63799: POP
63800: GO 63806
// end ; end ;
63802: GO 63646
63804: POP
63805: POP
// end ;
63806: LD_VAR 0 3
63810: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63811: LD_INT 0
63813: PPUSH
63814: PPUSH
63815: PPUSH
// result := 0 ;
63816: LD_ADDR_VAR 0 3
63820: PUSH
63821: LD_INT 0
63823: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63824: LD_VAR 0 1
63828: PUSH
63829: LD_INT 0
63831: LESS
63832: PUSH
63833: LD_VAR 0 1
63837: PUSH
63838: LD_INT 8
63840: GREATER
63841: OR
63842: PUSH
63843: LD_VAR 0 2
63847: PUSH
63848: LD_INT 0
63850: LESS
63851: OR
63852: PUSH
63853: LD_VAR 0 2
63857: PUSH
63858: LD_INT 8
63860: GREATER
63861: OR
63862: IFFALSE 63866
// exit ;
63864: GO 63941
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63866: LD_ADDR_VAR 0 4
63870: PUSH
63871: LD_INT 22
63873: PUSH
63874: LD_VAR 0 2
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PPUSH
63883: CALL_OW 69
63887: PUSH
63888: FOR_IN
63889: IFFALSE 63939
// begin un := UnitShoot ( i ) ;
63891: LD_ADDR_VAR 0 5
63895: PUSH
63896: LD_VAR 0 4
63900: PPUSH
63901: CALL_OW 504
63905: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63906: LD_VAR 0 5
63910: PPUSH
63911: CALL_OW 255
63915: PUSH
63916: LD_VAR 0 1
63920: EQUAL
63921: IFFALSE 63937
// begin result := un ;
63923: LD_ADDR_VAR 0 3
63927: PUSH
63928: LD_VAR 0 5
63932: ST_TO_ADDR
// exit ;
63933: POP
63934: POP
63935: GO 63941
// end ; end ;
63937: GO 63888
63939: POP
63940: POP
// end ;
63941: LD_VAR 0 3
63945: RET
// export function GetCargoBay ( units ) ; begin
63946: LD_INT 0
63948: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63949: LD_ADDR_VAR 0 2
63953: PUSH
63954: LD_VAR 0 1
63958: PPUSH
63959: LD_INT 2
63961: PUSH
63962: LD_INT 34
63964: PUSH
63965: LD_INT 12
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 34
63974: PUSH
63975: LD_INT 51
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 34
63984: PUSH
63985: LD_INT 32
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 34
63994: PUSH
63995: LD_INT 89
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: PPUSH
64009: CALL_OW 72
64013: ST_TO_ADDR
// end ;
64014: LD_VAR 0 2
64018: RET
// export function Negate ( value ) ; begin
64019: LD_INT 0
64021: PPUSH
// result := not value ;
64022: LD_ADDR_VAR 0 2
64026: PUSH
64027: LD_VAR 0 1
64031: NOT
64032: ST_TO_ADDR
// end ;
64033: LD_VAR 0 2
64037: RET
// export function Inc ( value ) ; begin
64038: LD_INT 0
64040: PPUSH
// result := value + 1 ;
64041: LD_ADDR_VAR 0 2
64045: PUSH
64046: LD_VAR 0 1
64050: PUSH
64051: LD_INT 1
64053: PLUS
64054: ST_TO_ADDR
// end ;
64055: LD_VAR 0 2
64059: RET
// export function Dec ( value ) ; begin
64060: LD_INT 0
64062: PPUSH
// result := value - 1 ;
64063: LD_ADDR_VAR 0 2
64067: PUSH
64068: LD_VAR 0 1
64072: PUSH
64073: LD_INT 1
64075: MINUS
64076: ST_TO_ADDR
// end ;
64077: LD_VAR 0 2
64081: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64082: LD_INT 0
64084: PPUSH
64085: PPUSH
64086: PPUSH
64087: PPUSH
64088: PPUSH
64089: PPUSH
64090: PPUSH
64091: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64092: LD_VAR 0 1
64096: PPUSH
64097: LD_VAR 0 2
64101: PPUSH
64102: CALL_OW 488
64106: NOT
64107: PUSH
64108: LD_VAR 0 3
64112: PPUSH
64113: LD_VAR 0 4
64117: PPUSH
64118: CALL_OW 488
64122: NOT
64123: OR
64124: IFFALSE 64137
// begin result := - 1 ;
64126: LD_ADDR_VAR 0 5
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: ST_TO_ADDR
// exit ;
64135: GO 64372
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64137: LD_ADDR_VAR 0 12
64141: PUSH
64142: LD_VAR 0 1
64146: PPUSH
64147: LD_VAR 0 2
64151: PPUSH
64152: LD_VAR 0 3
64156: PPUSH
64157: LD_VAR 0 4
64161: PPUSH
64162: CALL 63222 0 4
64166: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64167: LD_ADDR_VAR 0 11
64171: PUSH
64172: LD_VAR 0 1
64176: PPUSH
64177: LD_VAR 0 2
64181: PPUSH
64182: LD_VAR 0 12
64186: PUSH
64187: LD_INT 1
64189: ARRAY
64190: PPUSH
64191: LD_VAR 0 12
64195: PUSH
64196: LD_INT 2
64198: ARRAY
64199: PPUSH
64200: CALL_OW 298
64204: ST_TO_ADDR
// distance := 9999 ;
64205: LD_ADDR_VAR 0 10
64209: PUSH
64210: LD_INT 9999
64212: ST_TO_ADDR
// for i := 0 to 5 do
64213: LD_ADDR_VAR 0 6
64217: PUSH
64218: DOUBLE
64219: LD_INT 0
64221: DEC
64222: ST_TO_ADDR
64223: LD_INT 5
64225: PUSH
64226: FOR_TO
64227: IFFALSE 64370
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64229: LD_ADDR_VAR 0 7
64233: PUSH
64234: LD_VAR 0 1
64238: PPUSH
64239: LD_VAR 0 6
64243: PPUSH
64244: LD_VAR 0 11
64248: PPUSH
64249: CALL_OW 272
64253: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64254: LD_ADDR_VAR 0 8
64258: PUSH
64259: LD_VAR 0 2
64263: PPUSH
64264: LD_VAR 0 6
64268: PPUSH
64269: LD_VAR 0 11
64273: PPUSH
64274: CALL_OW 273
64278: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64279: LD_VAR 0 7
64283: PPUSH
64284: LD_VAR 0 8
64288: PPUSH
64289: CALL_OW 488
64293: NOT
64294: IFFALSE 64298
// continue ;
64296: GO 64226
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64298: LD_ADDR_VAR 0 9
64302: PUSH
64303: LD_VAR 0 12
64307: PUSH
64308: LD_INT 1
64310: ARRAY
64311: PPUSH
64312: LD_VAR 0 12
64316: PUSH
64317: LD_INT 2
64319: ARRAY
64320: PPUSH
64321: LD_VAR 0 7
64325: PPUSH
64326: LD_VAR 0 8
64330: PPUSH
64331: CALL_OW 298
64335: ST_TO_ADDR
// if tmp < distance then
64336: LD_VAR 0 9
64340: PUSH
64341: LD_VAR 0 10
64345: LESS
64346: IFFALSE 64368
// begin result := i ;
64348: LD_ADDR_VAR 0 5
64352: PUSH
64353: LD_VAR 0 6
64357: ST_TO_ADDR
// distance := tmp ;
64358: LD_ADDR_VAR 0 10
64362: PUSH
64363: LD_VAR 0 9
64367: ST_TO_ADDR
// end ; end ;
64368: GO 64226
64370: POP
64371: POP
// end ;
64372: LD_VAR 0 5
64376: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64377: LD_INT 0
64379: PPUSH
64380: PPUSH
// if not driver or not IsInUnit ( driver ) then
64381: LD_VAR 0 1
64385: NOT
64386: PUSH
64387: LD_VAR 0 1
64391: PPUSH
64392: CALL_OW 310
64396: NOT
64397: OR
64398: IFFALSE 64402
// exit ;
64400: GO 64492
// vehicle := IsInUnit ( driver ) ;
64402: LD_ADDR_VAR 0 3
64406: PUSH
64407: LD_VAR 0 1
64411: PPUSH
64412: CALL_OW 310
64416: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64417: LD_VAR 0 1
64421: PPUSH
64422: LD_STRING \
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: PUSH
64452: LD_STRING E
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_VAR 0 3
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PPUSH
64488: CALL_OW 446
// end ;
64492: LD_VAR 0 2
64496: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64497: LD_INT 0
64499: PPUSH
64500: PPUSH
// if not driver or not IsInUnit ( driver ) then
64501: LD_VAR 0 1
64505: NOT
64506: PUSH
64507: LD_VAR 0 1
64511: PPUSH
64512: CALL_OW 310
64516: NOT
64517: OR
64518: IFFALSE 64522
// exit ;
64520: GO 64612
// vehicle := IsInUnit ( driver ) ;
64522: LD_ADDR_VAR 0 3
64526: PUSH
64527: LD_VAR 0 1
64531: PPUSH
64532: CALL_OW 310
64536: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64537: LD_VAR 0 1
64541: PPUSH
64542: LD_STRING \
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: PUSH
64572: LD_STRING E
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_VAR 0 3
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PPUSH
64608: CALL_OW 447
// end ;
64612: LD_VAR 0 2
64616: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64617: LD_INT 0
64619: PPUSH
64620: PPUSH
64621: PPUSH
// tmp := [ ] ;
64622: LD_ADDR_VAR 0 5
64626: PUSH
64627: EMPTY
64628: ST_TO_ADDR
// for i in units do
64629: LD_ADDR_VAR 0 4
64633: PUSH
64634: LD_VAR 0 1
64638: PUSH
64639: FOR_IN
64640: IFFALSE 64678
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64642: LD_ADDR_VAR 0 5
64646: PUSH
64647: LD_VAR 0 5
64651: PPUSH
64652: LD_VAR 0 5
64656: PUSH
64657: LD_INT 1
64659: PLUS
64660: PPUSH
64661: LD_VAR 0 4
64665: PPUSH
64666: CALL_OW 256
64670: PPUSH
64671: CALL_OW 2
64675: ST_TO_ADDR
64676: GO 64639
64678: POP
64679: POP
// if not tmp then
64680: LD_VAR 0 5
64684: NOT
64685: IFFALSE 64689
// exit ;
64687: GO 64737
// if asc then
64689: LD_VAR 0 2
64693: IFFALSE 64717
// result := SortListByListAsc ( units , tmp ) else
64695: LD_ADDR_VAR 0 3
64699: PUSH
64700: LD_VAR 0 1
64704: PPUSH
64705: LD_VAR 0 5
64709: PPUSH
64710: CALL_OW 76
64714: ST_TO_ADDR
64715: GO 64737
// result := SortListByListDesc ( units , tmp ) ;
64717: LD_ADDR_VAR 0 3
64721: PUSH
64722: LD_VAR 0 1
64726: PPUSH
64727: LD_VAR 0 5
64731: PPUSH
64732: CALL_OW 77
64736: ST_TO_ADDR
// end ;
64737: LD_VAR 0 3
64741: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64742: LD_INT 0
64744: PPUSH
64745: PPUSH
// task := GetTaskList ( mech ) ;
64746: LD_ADDR_VAR 0 4
64750: PUSH
64751: LD_VAR 0 1
64755: PPUSH
64756: CALL_OW 437
64760: ST_TO_ADDR
// if not task then
64761: LD_VAR 0 4
64765: NOT
64766: IFFALSE 64770
// exit ;
64768: GO 64812
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64770: LD_ADDR_VAR 0 3
64774: PUSH
64775: LD_VAR 0 4
64779: PUSH
64780: LD_INT 1
64782: ARRAY
64783: PUSH
64784: LD_INT 1
64786: ARRAY
64787: PUSH
64788: LD_STRING r
64790: EQUAL
64791: PUSH
64792: LD_VAR 0 4
64796: PUSH
64797: LD_INT 1
64799: ARRAY
64800: PUSH
64801: LD_INT 4
64803: ARRAY
64804: PUSH
64805: LD_VAR 0 2
64809: EQUAL
64810: AND
64811: ST_TO_ADDR
// end ;
64812: LD_VAR 0 3
64816: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64817: LD_INT 0
64819: PPUSH
// SetDir ( unit , d ) ;
64820: LD_VAR 0 1
64824: PPUSH
64825: LD_VAR 0 4
64829: PPUSH
64830: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64834: LD_VAR 0 1
64838: PPUSH
64839: LD_VAR 0 2
64843: PPUSH
64844: LD_VAR 0 3
64848: PPUSH
64849: LD_VAR 0 5
64853: PPUSH
64854: CALL_OW 48
// end ;
64858: LD_VAR 0 6
64862: RET
// export function ToNaturalNumber ( number ) ; begin
64863: LD_INT 0
64865: PPUSH
// result := number div 1 ;
64866: LD_ADDR_VAR 0 2
64870: PUSH
64871: LD_VAR 0 1
64875: PUSH
64876: LD_INT 1
64878: DIV
64879: ST_TO_ADDR
// if number < 0 then
64880: LD_VAR 0 1
64884: PUSH
64885: LD_INT 0
64887: LESS
64888: IFFALSE 64898
// result := 0 ;
64890: LD_ADDR_VAR 0 2
64894: PUSH
64895: LD_INT 0
64897: ST_TO_ADDR
// end ;
64898: LD_VAR 0 2
64902: RET
// export function SortByClass ( units , class ) ; var un ; begin
64903: LD_INT 0
64905: PPUSH
64906: PPUSH
// if not units or not class then
64907: LD_VAR 0 1
64911: NOT
64912: PUSH
64913: LD_VAR 0 2
64917: NOT
64918: OR
64919: IFFALSE 64923
// exit ;
64921: GO 65018
// result := [ ] ;
64923: LD_ADDR_VAR 0 3
64927: PUSH
64928: EMPTY
64929: ST_TO_ADDR
// for un in units do
64930: LD_ADDR_VAR 0 4
64934: PUSH
64935: LD_VAR 0 1
64939: PUSH
64940: FOR_IN
64941: IFFALSE 65016
// if GetClass ( un ) = class then
64943: LD_VAR 0 4
64947: PPUSH
64948: CALL_OW 257
64952: PUSH
64953: LD_VAR 0 2
64957: EQUAL
64958: IFFALSE 64985
// result := Insert ( result , 1 , un ) else
64960: LD_ADDR_VAR 0 3
64964: PUSH
64965: LD_VAR 0 3
64969: PPUSH
64970: LD_INT 1
64972: PPUSH
64973: LD_VAR 0 4
64977: PPUSH
64978: CALL_OW 2
64982: ST_TO_ADDR
64983: GO 65014
// result := Replace ( result , result + 1 , un ) ;
64985: LD_ADDR_VAR 0 3
64989: PUSH
64990: LD_VAR 0 3
64994: PPUSH
64995: LD_VAR 0 3
64999: PUSH
65000: LD_INT 1
65002: PLUS
65003: PPUSH
65004: LD_VAR 0 4
65008: PPUSH
65009: CALL_OW 1
65013: ST_TO_ADDR
65014: GO 64940
65016: POP
65017: POP
// end ;
65018: LD_VAR 0 3
65022: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65023: LD_INT 0
65025: PPUSH
65026: PPUSH
65027: PPUSH
65028: PPUSH
65029: PPUSH
65030: PPUSH
65031: PPUSH
// result := [ ] ;
65032: LD_ADDR_VAR 0 4
65036: PUSH
65037: EMPTY
65038: ST_TO_ADDR
// if x - r < 0 then
65039: LD_VAR 0 1
65043: PUSH
65044: LD_VAR 0 3
65048: MINUS
65049: PUSH
65050: LD_INT 0
65052: LESS
65053: IFFALSE 65065
// min_x := 0 else
65055: LD_ADDR_VAR 0 8
65059: PUSH
65060: LD_INT 0
65062: ST_TO_ADDR
65063: GO 65081
// min_x := x - r ;
65065: LD_ADDR_VAR 0 8
65069: PUSH
65070: LD_VAR 0 1
65074: PUSH
65075: LD_VAR 0 3
65079: MINUS
65080: ST_TO_ADDR
// if y - r < 0 then
65081: LD_VAR 0 2
65085: PUSH
65086: LD_VAR 0 3
65090: MINUS
65091: PUSH
65092: LD_INT 0
65094: LESS
65095: IFFALSE 65107
// min_y := 0 else
65097: LD_ADDR_VAR 0 7
65101: PUSH
65102: LD_INT 0
65104: ST_TO_ADDR
65105: GO 65123
// min_y := y - r ;
65107: LD_ADDR_VAR 0 7
65111: PUSH
65112: LD_VAR 0 2
65116: PUSH
65117: LD_VAR 0 3
65121: MINUS
65122: ST_TO_ADDR
// max_x := x + r ;
65123: LD_ADDR_VAR 0 9
65127: PUSH
65128: LD_VAR 0 1
65132: PUSH
65133: LD_VAR 0 3
65137: PLUS
65138: ST_TO_ADDR
// max_y := y + r ;
65139: LD_ADDR_VAR 0 10
65143: PUSH
65144: LD_VAR 0 2
65148: PUSH
65149: LD_VAR 0 3
65153: PLUS
65154: ST_TO_ADDR
// for _x = min_x to max_x do
65155: LD_ADDR_VAR 0 5
65159: PUSH
65160: DOUBLE
65161: LD_VAR 0 8
65165: DEC
65166: ST_TO_ADDR
65167: LD_VAR 0 9
65171: PUSH
65172: FOR_TO
65173: IFFALSE 65274
// for _y = min_y to max_y do
65175: LD_ADDR_VAR 0 6
65179: PUSH
65180: DOUBLE
65181: LD_VAR 0 7
65185: DEC
65186: ST_TO_ADDR
65187: LD_VAR 0 10
65191: PUSH
65192: FOR_TO
65193: IFFALSE 65270
// begin if not ValidHex ( _x , _y ) then
65195: LD_VAR 0 5
65199: PPUSH
65200: LD_VAR 0 6
65204: PPUSH
65205: CALL_OW 488
65209: NOT
65210: IFFALSE 65214
// continue ;
65212: GO 65192
// if GetResourceTypeXY ( _x , _y ) then
65214: LD_VAR 0 5
65218: PPUSH
65219: LD_VAR 0 6
65223: PPUSH
65224: CALL_OW 283
65228: IFFALSE 65268
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65230: LD_ADDR_VAR 0 4
65234: PUSH
65235: LD_VAR 0 4
65239: PPUSH
65240: LD_VAR 0 4
65244: PUSH
65245: LD_INT 1
65247: PLUS
65248: PPUSH
65249: LD_VAR 0 5
65253: PUSH
65254: LD_VAR 0 6
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PPUSH
65263: CALL_OW 1
65267: ST_TO_ADDR
// end ;
65268: GO 65192
65270: POP
65271: POP
65272: GO 65172
65274: POP
65275: POP
// end ;
65276: LD_VAR 0 4
65280: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65281: LD_INT 0
65283: PPUSH
65284: PPUSH
65285: PPUSH
65286: PPUSH
65287: PPUSH
65288: PPUSH
65289: PPUSH
65290: PPUSH
// if not units then
65291: LD_VAR 0 1
65295: NOT
65296: IFFALSE 65300
// exit ;
65298: GO 65824
// result := UnitFilter ( units , [ f_ok ] ) ;
65300: LD_ADDR_VAR 0 3
65304: PUSH
65305: LD_VAR 0 1
65309: PPUSH
65310: LD_INT 50
65312: PUSH
65313: EMPTY
65314: LIST
65315: PPUSH
65316: CALL_OW 72
65320: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65321: LD_ADDR_VAR 0 8
65325: PUSH
65326: LD_VAR 0 1
65330: PUSH
65331: LD_INT 1
65333: ARRAY
65334: PPUSH
65335: CALL_OW 255
65339: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65340: LD_ADDR_VAR 0 10
65344: PUSH
65345: LD_INT 29
65347: PUSH
65348: LD_INT 91
65350: PUSH
65351: LD_INT 49
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: ST_TO_ADDR
// if not result then
65359: LD_VAR 0 3
65363: NOT
65364: IFFALSE 65368
// exit ;
65366: GO 65824
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65368: LD_ADDR_VAR 0 5
65372: PUSH
65373: LD_INT 81
65375: PUSH
65376: LD_VAR 0 8
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PPUSH
65385: CALL_OW 69
65389: ST_TO_ADDR
// for i in result do
65390: LD_ADDR_VAR 0 4
65394: PUSH
65395: LD_VAR 0 3
65399: PUSH
65400: FOR_IN
65401: IFFALSE 65822
// begin tag := GetTag ( i ) + 1 ;
65403: LD_ADDR_VAR 0 9
65407: PUSH
65408: LD_VAR 0 4
65412: PPUSH
65413: CALL_OW 110
65417: PUSH
65418: LD_INT 1
65420: PLUS
65421: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65422: LD_ADDR_VAR 0 7
65426: PUSH
65427: LD_VAR 0 4
65431: PPUSH
65432: CALL_OW 250
65436: PPUSH
65437: LD_VAR 0 4
65441: PPUSH
65442: CALL_OW 251
65446: PPUSH
65447: LD_INT 6
65449: PPUSH
65450: CALL 65023 0 3
65454: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65455: LD_VAR 0 4
65459: PPUSH
65460: CALL_OW 247
65464: PUSH
65465: LD_INT 2
65467: EQUAL
65468: PUSH
65469: LD_VAR 0 7
65473: AND
65474: PUSH
65475: LD_VAR 0 4
65479: PPUSH
65480: CALL_OW 264
65484: PUSH
65485: LD_VAR 0 10
65489: IN
65490: NOT
65491: AND
65492: IFFALSE 65531
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65494: LD_VAR 0 4
65498: PPUSH
65499: LD_VAR 0 7
65503: PUSH
65504: LD_INT 1
65506: ARRAY
65507: PUSH
65508: LD_INT 1
65510: ARRAY
65511: PPUSH
65512: LD_VAR 0 7
65516: PUSH
65517: LD_INT 1
65519: ARRAY
65520: PUSH
65521: LD_INT 2
65523: ARRAY
65524: PPUSH
65525: CALL_OW 116
65529: GO 65820
// if path > tag then
65531: LD_VAR 0 2
65535: PUSH
65536: LD_VAR 0 9
65540: GREATER
65541: IFFALSE 65749
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65543: LD_ADDR_VAR 0 6
65547: PUSH
65548: LD_VAR 0 5
65552: PPUSH
65553: LD_INT 91
65555: PUSH
65556: LD_VAR 0 4
65560: PUSH
65561: LD_INT 8
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: PPUSH
65569: CALL_OW 72
65573: ST_TO_ADDR
// if nearEnemy then
65574: LD_VAR 0 6
65578: IFFALSE 65647
// begin if GetWeapon ( i ) = ru_time_lapser then
65580: LD_VAR 0 4
65584: PPUSH
65585: CALL_OW 264
65589: PUSH
65590: LD_INT 49
65592: EQUAL
65593: IFFALSE 65621
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65595: LD_VAR 0 4
65599: PPUSH
65600: LD_VAR 0 6
65604: PPUSH
65605: LD_VAR 0 4
65609: PPUSH
65610: CALL_OW 74
65614: PPUSH
65615: CALL_OW 112
65619: GO 65645
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65621: LD_VAR 0 4
65625: PPUSH
65626: LD_VAR 0 6
65630: PPUSH
65631: LD_VAR 0 4
65635: PPUSH
65636: CALL_OW 74
65640: PPUSH
65641: CALL_OW 115
// end else
65645: GO 65747
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65647: LD_VAR 0 4
65651: PPUSH
65652: LD_VAR 0 2
65656: PUSH
65657: LD_VAR 0 9
65661: ARRAY
65662: PUSH
65663: LD_INT 1
65665: ARRAY
65666: PPUSH
65667: LD_VAR 0 2
65671: PUSH
65672: LD_VAR 0 9
65676: ARRAY
65677: PUSH
65678: LD_INT 2
65680: ARRAY
65681: PPUSH
65682: CALL_OW 297
65686: PUSH
65687: LD_INT 6
65689: GREATER
65690: IFFALSE 65733
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65692: LD_VAR 0 4
65696: PPUSH
65697: LD_VAR 0 2
65701: PUSH
65702: LD_VAR 0 9
65706: ARRAY
65707: PUSH
65708: LD_INT 1
65710: ARRAY
65711: PPUSH
65712: LD_VAR 0 2
65716: PUSH
65717: LD_VAR 0 9
65721: ARRAY
65722: PUSH
65723: LD_INT 2
65725: ARRAY
65726: PPUSH
65727: CALL_OW 114
65731: GO 65747
// SetTag ( i , tag ) ;
65733: LD_VAR 0 4
65737: PPUSH
65738: LD_VAR 0 9
65742: PPUSH
65743: CALL_OW 109
// end else
65747: GO 65820
// if enemy then
65749: LD_VAR 0 5
65753: IFFALSE 65820
// begin if GetWeapon ( i ) = ru_time_lapser then
65755: LD_VAR 0 4
65759: PPUSH
65760: CALL_OW 264
65764: PUSH
65765: LD_INT 49
65767: EQUAL
65768: IFFALSE 65796
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65770: LD_VAR 0 4
65774: PPUSH
65775: LD_VAR 0 5
65779: PPUSH
65780: LD_VAR 0 4
65784: PPUSH
65785: CALL_OW 74
65789: PPUSH
65790: CALL_OW 112
65794: GO 65820
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65796: LD_VAR 0 4
65800: PPUSH
65801: LD_VAR 0 5
65805: PPUSH
65806: LD_VAR 0 4
65810: PPUSH
65811: CALL_OW 74
65815: PPUSH
65816: CALL_OW 115
// end ; end ;
65820: GO 65400
65822: POP
65823: POP
// end ;
65824: LD_VAR 0 3
65828: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65829: LD_INT 0
65831: PPUSH
65832: PPUSH
65833: PPUSH
// if not unit or IsInUnit ( unit ) then
65834: LD_VAR 0 1
65838: NOT
65839: PUSH
65840: LD_VAR 0 1
65844: PPUSH
65845: CALL_OW 310
65849: OR
65850: IFFALSE 65854
// exit ;
65852: GO 65945
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65854: LD_ADDR_VAR 0 4
65858: PUSH
65859: LD_VAR 0 1
65863: PPUSH
65864: CALL_OW 250
65868: PPUSH
65869: LD_VAR 0 2
65873: PPUSH
65874: LD_INT 1
65876: PPUSH
65877: CALL_OW 272
65881: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65882: LD_ADDR_VAR 0 5
65886: PUSH
65887: LD_VAR 0 1
65891: PPUSH
65892: CALL_OW 251
65896: PPUSH
65897: LD_VAR 0 2
65901: PPUSH
65902: LD_INT 1
65904: PPUSH
65905: CALL_OW 273
65909: ST_TO_ADDR
// if ValidHex ( x , y ) then
65910: LD_VAR 0 4
65914: PPUSH
65915: LD_VAR 0 5
65919: PPUSH
65920: CALL_OW 488
65924: IFFALSE 65945
// ComTurnXY ( unit , x , y ) ;
65926: LD_VAR 0 1
65930: PPUSH
65931: LD_VAR 0 4
65935: PPUSH
65936: LD_VAR 0 5
65940: PPUSH
65941: CALL_OW 118
// end ;
65945: LD_VAR 0 3
65949: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65950: LD_INT 0
65952: PPUSH
65953: PPUSH
// result := false ;
65954: LD_ADDR_VAR 0 3
65958: PUSH
65959: LD_INT 0
65961: ST_TO_ADDR
// if not units then
65962: LD_VAR 0 2
65966: NOT
65967: IFFALSE 65971
// exit ;
65969: GO 66016
// for i in units do
65971: LD_ADDR_VAR 0 4
65975: PUSH
65976: LD_VAR 0 2
65980: PUSH
65981: FOR_IN
65982: IFFALSE 66014
// if See ( side , i ) then
65984: LD_VAR 0 1
65988: PPUSH
65989: LD_VAR 0 4
65993: PPUSH
65994: CALL_OW 292
65998: IFFALSE 66012
// begin result := true ;
66000: LD_ADDR_VAR 0 3
66004: PUSH
66005: LD_INT 1
66007: ST_TO_ADDR
// exit ;
66008: POP
66009: POP
66010: GO 66016
// end ;
66012: GO 65981
66014: POP
66015: POP
// end ;
66016: LD_VAR 0 3
66020: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66021: LD_INT 0
66023: PPUSH
66024: PPUSH
66025: PPUSH
66026: PPUSH
// if not unit or not points then
66027: LD_VAR 0 1
66031: NOT
66032: PUSH
66033: LD_VAR 0 2
66037: NOT
66038: OR
66039: IFFALSE 66043
// exit ;
66041: GO 66133
// dist := 99999 ;
66043: LD_ADDR_VAR 0 5
66047: PUSH
66048: LD_INT 99999
66050: ST_TO_ADDR
// for i in points do
66051: LD_ADDR_VAR 0 4
66055: PUSH
66056: LD_VAR 0 2
66060: PUSH
66061: FOR_IN
66062: IFFALSE 66131
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66064: LD_ADDR_VAR 0 6
66068: PUSH
66069: LD_VAR 0 1
66073: PPUSH
66074: LD_VAR 0 4
66078: PUSH
66079: LD_INT 1
66081: ARRAY
66082: PPUSH
66083: LD_VAR 0 4
66087: PUSH
66088: LD_INT 2
66090: ARRAY
66091: PPUSH
66092: CALL_OW 297
66096: ST_TO_ADDR
// if tmpDist < dist then
66097: LD_VAR 0 6
66101: PUSH
66102: LD_VAR 0 5
66106: LESS
66107: IFFALSE 66129
// begin result := i ;
66109: LD_ADDR_VAR 0 3
66113: PUSH
66114: LD_VAR 0 4
66118: ST_TO_ADDR
// dist := tmpDist ;
66119: LD_ADDR_VAR 0 5
66123: PUSH
66124: LD_VAR 0 6
66128: ST_TO_ADDR
// end ; end ;
66129: GO 66061
66131: POP
66132: POP
// end ;
66133: LD_VAR 0 3
66137: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66138: LD_INT 0
66140: PPUSH
// uc_side := side ;
66141: LD_ADDR_OWVAR 20
66145: PUSH
66146: LD_VAR 0 1
66150: ST_TO_ADDR
// uc_nation := 3 ;
66151: LD_ADDR_OWVAR 21
66155: PUSH
66156: LD_INT 3
66158: ST_TO_ADDR
// vc_chassis := 25 ;
66159: LD_ADDR_OWVAR 37
66163: PUSH
66164: LD_INT 25
66166: ST_TO_ADDR
// vc_engine := engine_siberite ;
66167: LD_ADDR_OWVAR 39
66171: PUSH
66172: LD_INT 3
66174: ST_TO_ADDR
// vc_control := control_computer ;
66175: LD_ADDR_OWVAR 38
66179: PUSH
66180: LD_INT 3
66182: ST_TO_ADDR
// vc_weapon := 59 ;
66183: LD_ADDR_OWVAR 40
66187: PUSH
66188: LD_INT 59
66190: ST_TO_ADDR
// result := CreateVehicle ;
66191: LD_ADDR_VAR 0 5
66195: PUSH
66196: CALL_OW 45
66200: ST_TO_ADDR
// SetDir ( result , d ) ;
66201: LD_VAR 0 5
66205: PPUSH
66206: LD_VAR 0 4
66210: PPUSH
66211: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66215: LD_VAR 0 5
66219: PPUSH
66220: LD_VAR 0 2
66224: PPUSH
66225: LD_VAR 0 3
66229: PPUSH
66230: LD_INT 0
66232: PPUSH
66233: CALL_OW 48
// end ;
66237: LD_VAR 0 5
66241: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66242: LD_INT 0
66244: PPUSH
66245: PPUSH
66246: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66247: LD_ADDR_VAR 0 2
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66270: LD_VAR 0 1
66274: NOT
66275: PUSH
66276: LD_VAR 0 1
66280: PPUSH
66281: CALL_OW 264
66285: PUSH
66286: LD_INT 12
66288: PUSH
66289: LD_INT 51
66291: PUSH
66292: LD_INT 32
66294: PUSH
66295: LD_INT 89
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: IN
66304: NOT
66305: OR
66306: IFFALSE 66310
// exit ;
66308: GO 66408
// for i := 1 to 3 do
66310: LD_ADDR_VAR 0 3
66314: PUSH
66315: DOUBLE
66316: LD_INT 1
66318: DEC
66319: ST_TO_ADDR
66320: LD_INT 3
66322: PUSH
66323: FOR_TO
66324: IFFALSE 66406
// begin tmp := GetCargo ( cargo , i ) ;
66326: LD_ADDR_VAR 0 4
66330: PUSH
66331: LD_VAR 0 1
66335: PPUSH
66336: LD_VAR 0 3
66340: PPUSH
66341: CALL_OW 289
66345: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66346: LD_ADDR_VAR 0 2
66350: PUSH
66351: LD_VAR 0 2
66355: PPUSH
66356: LD_VAR 0 3
66360: PPUSH
66361: LD_VAR 0 4
66365: PPUSH
66366: CALL_OW 1
66370: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66371: LD_ADDR_VAR 0 2
66375: PUSH
66376: LD_VAR 0 2
66380: PPUSH
66381: LD_INT 4
66383: PPUSH
66384: LD_VAR 0 2
66388: PUSH
66389: LD_INT 4
66391: ARRAY
66392: PUSH
66393: LD_VAR 0 4
66397: PLUS
66398: PPUSH
66399: CALL_OW 1
66403: ST_TO_ADDR
// end ;
66404: GO 66323
66406: POP
66407: POP
// end ;
66408: LD_VAR 0 2
66412: RET
// export function Length ( array ) ; begin
66413: LD_INT 0
66415: PPUSH
// result := array + 0 ;
66416: LD_ADDR_VAR 0 2
66420: PUSH
66421: LD_VAR 0 1
66425: PUSH
66426: LD_INT 0
66428: PLUS
66429: ST_TO_ADDR
// end ;
66430: LD_VAR 0 2
66434: RET
// export function PrepareArray ( array ) ; begin
66435: LD_INT 0
66437: PPUSH
// result := array diff 0 ;
66438: LD_ADDR_VAR 0 2
66442: PUSH
66443: LD_VAR 0 1
66447: PUSH
66448: LD_INT 0
66450: DIFF
66451: ST_TO_ADDR
// if not result [ 1 ] then
66452: LD_VAR 0 2
66456: PUSH
66457: LD_INT 1
66459: ARRAY
66460: NOT
66461: IFFALSE 66481
// result := Delete ( result , 1 ) ;
66463: LD_ADDR_VAR 0 2
66467: PUSH
66468: LD_VAR 0 2
66472: PPUSH
66473: LD_INT 1
66475: PPUSH
66476: CALL_OW 3
66480: ST_TO_ADDR
// end ;
66481: LD_VAR 0 2
66485: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66486: LD_INT 0
66488: PPUSH
66489: PPUSH
66490: PPUSH
66491: PPUSH
// sibRocketRange := 25 ;
66492: LD_ADDR_VAR 0 6
66496: PUSH
66497: LD_INT 25
66499: ST_TO_ADDR
// result := false ;
66500: LD_ADDR_VAR 0 4
66504: PUSH
66505: LD_INT 0
66507: ST_TO_ADDR
// for i := 0 to 5 do
66508: LD_ADDR_VAR 0 5
66512: PUSH
66513: DOUBLE
66514: LD_INT 0
66516: DEC
66517: ST_TO_ADDR
66518: LD_INT 5
66520: PUSH
66521: FOR_TO
66522: IFFALSE 66589
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66524: LD_VAR 0 1
66528: PPUSH
66529: LD_VAR 0 5
66533: PPUSH
66534: LD_VAR 0 6
66538: PPUSH
66539: CALL_OW 272
66543: PPUSH
66544: LD_VAR 0 2
66548: PPUSH
66549: LD_VAR 0 5
66553: PPUSH
66554: LD_VAR 0 6
66558: PPUSH
66559: CALL_OW 273
66563: PPUSH
66564: LD_VAR 0 3
66568: PPUSH
66569: CALL_OW 309
66573: IFFALSE 66587
// begin result := true ;
66575: LD_ADDR_VAR 0 4
66579: PUSH
66580: LD_INT 1
66582: ST_TO_ADDR
// exit ;
66583: POP
66584: POP
66585: GO 66591
// end ;
66587: GO 66521
66589: POP
66590: POP
// end ;
66591: LD_VAR 0 4
66595: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66596: LD_INT 0
66598: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66599: LD_VAR 0 1
66603: PPUSH
66604: LD_VAR 0 2
66608: PPUSH
66609: LD_INT 0
66611: PPUSH
66612: LD_INT 0
66614: PPUSH
66615: LD_INT 1
66617: PPUSH
66618: LD_INT 0
66620: PPUSH
66621: CALL_OW 587
// end ; end_of_file
66625: LD_VAR 0 3
66629: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66630: LD_VAR 0 1
66634: PPUSH
66635: LD_VAR 0 2
66639: PPUSH
66640: LD_VAR 0 3
66644: PPUSH
66645: LD_VAR 0 4
66649: PPUSH
66650: LD_VAR 0 5
66654: PPUSH
66655: LD_VAR 0 6
66659: PPUSH
66660: CALL 5118 0 6
// end ;
66664: PPOPN 6
66666: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66667: LD_INT 0
66669: PPUSH
// begin if not units then
66670: LD_VAR 0 1
66674: NOT
66675: IFFALSE 66679
// exit ;
66677: GO 66679
// end ;
66679: PPOPN 7
66681: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66682: CALL 5022 0 0
// end ;
66686: PPOPN 1
66688: END
