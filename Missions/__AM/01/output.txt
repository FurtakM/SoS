// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export globalGameSaveCounter ; every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// every 0 0$1 do
4985: GO 4987
4987: DISABLE
// begin globalGameSaveCounter := 0 ;
4988: LD_ADDR_EXP 15
4992: PUSH
4993: LD_INT 0
4995: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4996: LD_STRING setGameSaveCounter(0)
4998: PPUSH
4999: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5003: LD_STRING initStreamRollete();
5005: PPUSH
5006: CALL_OW 559
// InitStreamMode ;
5010: CALL 6353 0 0
// DefineStreamItems ( false ) ;
5014: LD_INT 0
5016: PPUSH
5017: CALL 6817 0 1
// end ;
5021: END
// export function SOS_MapStart ( ) ; begin
5022: LD_INT 0
5024: PPUSH
// if streamModeActive then
5025: LD_EXP 16
5029: IFFALSE 5038
// DefineStreamItems ( true ) ;
5031: LD_INT 1
5033: PPUSH
5034: CALL 6817 0 1
// UpdateLuaVariables ( ) ;
5038: CALL 5055 0 0
// UpdateFactoryWaypoints ( ) ;
5042: CALL 19686 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5046: CALL 19943 0 0
// end ;
5050: LD_VAR 0 1
5054: RET
// function UpdateLuaVariables ( ) ; begin
5055: LD_INT 0
5057: PPUSH
// if globalGameSaveCounter then
5058: LD_EXP 15
5062: IFFALSE 5096
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5064: LD_ADDR_EXP 15
5068: PUSH
5069: LD_EXP 15
5073: PPUSH
5074: CALL 64891 0 1
5078: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5079: LD_STRING setGameSaveCounter(
5081: PUSH
5082: LD_EXP 15
5086: STR
5087: PUSH
5088: LD_STRING )
5090: STR
5091: PPUSH
5092: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5096: LD_STRING setGameDifficulty(
5098: PUSH
5099: LD_OWVAR 67
5103: STR
5104: PUSH
5105: LD_STRING )
5107: STR
5108: PPUSH
5109: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5113: LD_STRING displayDifficulty(
5115: PUSH
5116: LD_OWVAR 67
5120: STR
5121: PUSH
5122: LD_STRING )
5124: STR
5125: PPUSH
5126: CALL_OW 559
// end ;
5130: LD_VAR 0 1
5134: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5135: LD_INT 0
5137: PPUSH
// if p2 = stream_mode then
5138: LD_VAR 0 2
5142: PUSH
5143: LD_INT 100
5145: EQUAL
5146: IFFALSE 6149
// begin if not StreamModeActive then
5148: LD_EXP 16
5152: NOT
5153: IFFALSE 5163
// StreamModeActive := true ;
5155: LD_ADDR_EXP 16
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// if p3 = 0 then
5163: LD_VAR 0 3
5167: PUSH
5168: LD_INT 0
5170: EQUAL
5171: IFFALSE 5177
// InitStreamMode ;
5173: CALL 6353 0 0
// if p3 = 1 then
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 1
5184: EQUAL
5185: IFFALSE 5195
// sRocket := true ;
5187: LD_ADDR_EXP 21
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// if p3 = 2 then
5195: LD_VAR 0 3
5199: PUSH
5200: LD_INT 2
5202: EQUAL
5203: IFFALSE 5213
// sSpeed := true ;
5205: LD_ADDR_EXP 20
5209: PUSH
5210: LD_INT 1
5212: ST_TO_ADDR
// if p3 = 3 then
5213: LD_VAR 0 3
5217: PUSH
5218: LD_INT 3
5220: EQUAL
5221: IFFALSE 5231
// sEngine := true ;
5223: LD_ADDR_EXP 22
5227: PUSH
5228: LD_INT 1
5230: ST_TO_ADDR
// if p3 = 4 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 4
5238: EQUAL
5239: IFFALSE 5249
// sSpec := true ;
5241: LD_ADDR_EXP 19
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if p3 = 5 then
5249: LD_VAR 0 3
5253: PUSH
5254: LD_INT 5
5256: EQUAL
5257: IFFALSE 5267
// sLevel := true ;
5259: LD_ADDR_EXP 23
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if p3 = 6 then
5267: LD_VAR 0 3
5271: PUSH
5272: LD_INT 6
5274: EQUAL
5275: IFFALSE 5285
// sArmoury := true ;
5277: LD_ADDR_EXP 24
5281: PUSH
5282: LD_INT 1
5284: ST_TO_ADDR
// if p3 = 7 then
5285: LD_VAR 0 3
5289: PUSH
5290: LD_INT 7
5292: EQUAL
5293: IFFALSE 5303
// sRadar := true ;
5295: LD_ADDR_EXP 25
5299: PUSH
5300: LD_INT 1
5302: ST_TO_ADDR
// if p3 = 8 then
5303: LD_VAR 0 3
5307: PUSH
5308: LD_INT 8
5310: EQUAL
5311: IFFALSE 5321
// sBunker := true ;
5313: LD_ADDR_EXP 26
5317: PUSH
5318: LD_INT 1
5320: ST_TO_ADDR
// if p3 = 9 then
5321: LD_VAR 0 3
5325: PUSH
5326: LD_INT 9
5328: EQUAL
5329: IFFALSE 5339
// sHack := true ;
5331: LD_ADDR_EXP 27
5335: PUSH
5336: LD_INT 1
5338: ST_TO_ADDR
// if p3 = 10 then
5339: LD_VAR 0 3
5343: PUSH
5344: LD_INT 10
5346: EQUAL
5347: IFFALSE 5357
// sFire := true ;
5349: LD_ADDR_EXP 28
5353: PUSH
5354: LD_INT 1
5356: ST_TO_ADDR
// if p3 = 11 then
5357: LD_VAR 0 3
5361: PUSH
5362: LD_INT 11
5364: EQUAL
5365: IFFALSE 5375
// sRefresh := true ;
5367: LD_ADDR_EXP 29
5371: PUSH
5372: LD_INT 1
5374: ST_TO_ADDR
// if p3 = 12 then
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 12
5382: EQUAL
5383: IFFALSE 5393
// sExp := true ;
5385: LD_ADDR_EXP 30
5389: PUSH
5390: LD_INT 1
5392: ST_TO_ADDR
// if p3 = 13 then
5393: LD_VAR 0 3
5397: PUSH
5398: LD_INT 13
5400: EQUAL
5401: IFFALSE 5411
// sDepot := true ;
5403: LD_ADDR_EXP 31
5407: PUSH
5408: LD_INT 1
5410: ST_TO_ADDR
// if p3 = 14 then
5411: LD_VAR 0 3
5415: PUSH
5416: LD_INT 14
5418: EQUAL
5419: IFFALSE 5429
// sFlag := true ;
5421: LD_ADDR_EXP 32
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// if p3 = 15 then
5429: LD_VAR 0 3
5433: PUSH
5434: LD_INT 15
5436: EQUAL
5437: IFFALSE 5447
// sKamikadze := true ;
5439: LD_ADDR_EXP 40
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// if p3 = 16 then
5447: LD_VAR 0 3
5451: PUSH
5452: LD_INT 16
5454: EQUAL
5455: IFFALSE 5465
// sTroll := true ;
5457: LD_ADDR_EXP 41
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// if p3 = 17 then
5465: LD_VAR 0 3
5469: PUSH
5470: LD_INT 17
5472: EQUAL
5473: IFFALSE 5483
// sSlow := true ;
5475: LD_ADDR_EXP 42
5479: PUSH
5480: LD_INT 1
5482: ST_TO_ADDR
// if p3 = 18 then
5483: LD_VAR 0 3
5487: PUSH
5488: LD_INT 18
5490: EQUAL
5491: IFFALSE 5501
// sLack := true ;
5493: LD_ADDR_EXP 43
5497: PUSH
5498: LD_INT 1
5500: ST_TO_ADDR
// if p3 = 19 then
5501: LD_VAR 0 3
5505: PUSH
5506: LD_INT 19
5508: EQUAL
5509: IFFALSE 5519
// sTank := true ;
5511: LD_ADDR_EXP 45
5515: PUSH
5516: LD_INT 1
5518: ST_TO_ADDR
// if p3 = 20 then
5519: LD_VAR 0 3
5523: PUSH
5524: LD_INT 20
5526: EQUAL
5527: IFFALSE 5537
// sRemote := true ;
5529: LD_ADDR_EXP 46
5533: PUSH
5534: LD_INT 1
5536: ST_TO_ADDR
// if p3 = 21 then
5537: LD_VAR 0 3
5541: PUSH
5542: LD_INT 21
5544: EQUAL
5545: IFFALSE 5555
// sPowell := true ;
5547: LD_ADDR_EXP 47
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// if p3 = 22 then
5555: LD_VAR 0 3
5559: PUSH
5560: LD_INT 22
5562: EQUAL
5563: IFFALSE 5573
// sTeleport := true ;
5565: LD_ADDR_EXP 50
5569: PUSH
5570: LD_INT 1
5572: ST_TO_ADDR
// if p3 = 23 then
5573: LD_VAR 0 3
5577: PUSH
5578: LD_INT 23
5580: EQUAL
5581: IFFALSE 5591
// sOilTower := true ;
5583: LD_ADDR_EXP 52
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// if p3 = 24 then
5591: LD_VAR 0 3
5595: PUSH
5596: LD_INT 24
5598: EQUAL
5599: IFFALSE 5609
// sShovel := true ;
5601: LD_ADDR_EXP 53
5605: PUSH
5606: LD_INT 1
5608: ST_TO_ADDR
// if p3 = 25 then
5609: LD_VAR 0 3
5613: PUSH
5614: LD_INT 25
5616: EQUAL
5617: IFFALSE 5627
// sSheik := true ;
5619: LD_ADDR_EXP 54
5623: PUSH
5624: LD_INT 1
5626: ST_TO_ADDR
// if p3 = 26 then
5627: LD_VAR 0 3
5631: PUSH
5632: LD_INT 26
5634: EQUAL
5635: IFFALSE 5645
// sEarthquake := true ;
5637: LD_ADDR_EXP 56
5641: PUSH
5642: LD_INT 1
5644: ST_TO_ADDR
// if p3 = 27 then
5645: LD_VAR 0 3
5649: PUSH
5650: LD_INT 27
5652: EQUAL
5653: IFFALSE 5663
// sAI := true ;
5655: LD_ADDR_EXP 57
5659: PUSH
5660: LD_INT 1
5662: ST_TO_ADDR
// if p3 = 28 then
5663: LD_VAR 0 3
5667: PUSH
5668: LD_INT 28
5670: EQUAL
5671: IFFALSE 5681
// sCargo := true ;
5673: LD_ADDR_EXP 60
5677: PUSH
5678: LD_INT 1
5680: ST_TO_ADDR
// if p3 = 29 then
5681: LD_VAR 0 3
5685: PUSH
5686: LD_INT 29
5688: EQUAL
5689: IFFALSE 5699
// sDLaser := true ;
5691: LD_ADDR_EXP 61
5695: PUSH
5696: LD_INT 1
5698: ST_TO_ADDR
// if p3 = 30 then
5699: LD_VAR 0 3
5703: PUSH
5704: LD_INT 30
5706: EQUAL
5707: IFFALSE 5717
// sExchange := true ;
5709: LD_ADDR_EXP 62
5713: PUSH
5714: LD_INT 1
5716: ST_TO_ADDR
// if p3 = 31 then
5717: LD_VAR 0 3
5721: PUSH
5722: LD_INT 31
5724: EQUAL
5725: IFFALSE 5735
// sFac := true ;
5727: LD_ADDR_EXP 63
5731: PUSH
5732: LD_INT 1
5734: ST_TO_ADDR
// if p3 = 32 then
5735: LD_VAR 0 3
5739: PUSH
5740: LD_INT 32
5742: EQUAL
5743: IFFALSE 5753
// sPower := true ;
5745: LD_ADDR_EXP 64
5749: PUSH
5750: LD_INT 1
5752: ST_TO_ADDR
// if p3 = 33 then
5753: LD_VAR 0 3
5757: PUSH
5758: LD_INT 33
5760: EQUAL
5761: IFFALSE 5771
// sRandom := true ;
5763: LD_ADDR_EXP 65
5767: PUSH
5768: LD_INT 1
5770: ST_TO_ADDR
// if p3 = 34 then
5771: LD_VAR 0 3
5775: PUSH
5776: LD_INT 34
5778: EQUAL
5779: IFFALSE 5789
// sShield := true ;
5781: LD_ADDR_EXP 66
5785: PUSH
5786: LD_INT 1
5788: ST_TO_ADDR
// if p3 = 35 then
5789: LD_VAR 0 3
5793: PUSH
5794: LD_INT 35
5796: EQUAL
5797: IFFALSE 5807
// sTime := true ;
5799: LD_ADDR_EXP 67
5803: PUSH
5804: LD_INT 1
5806: ST_TO_ADDR
// if p3 = 36 then
5807: LD_VAR 0 3
5811: PUSH
5812: LD_INT 36
5814: EQUAL
5815: IFFALSE 5825
// sTools := true ;
5817: LD_ADDR_EXP 68
5821: PUSH
5822: LD_INT 1
5824: ST_TO_ADDR
// if p3 = 101 then
5825: LD_VAR 0 3
5829: PUSH
5830: LD_INT 101
5832: EQUAL
5833: IFFALSE 5843
// sSold := true ;
5835: LD_ADDR_EXP 33
5839: PUSH
5840: LD_INT 1
5842: ST_TO_ADDR
// if p3 = 102 then
5843: LD_VAR 0 3
5847: PUSH
5848: LD_INT 102
5850: EQUAL
5851: IFFALSE 5861
// sDiff := true ;
5853: LD_ADDR_EXP 34
5857: PUSH
5858: LD_INT 1
5860: ST_TO_ADDR
// if p3 = 103 then
5861: LD_VAR 0 3
5865: PUSH
5866: LD_INT 103
5868: EQUAL
5869: IFFALSE 5879
// sFog := true ;
5871: LD_ADDR_EXP 37
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// if p3 = 104 then
5879: LD_VAR 0 3
5883: PUSH
5884: LD_INT 104
5886: EQUAL
5887: IFFALSE 5897
// sReset := true ;
5889: LD_ADDR_EXP 38
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// if p3 = 105 then
5897: LD_VAR 0 3
5901: PUSH
5902: LD_INT 105
5904: EQUAL
5905: IFFALSE 5915
// sSun := true ;
5907: LD_ADDR_EXP 39
5911: PUSH
5912: LD_INT 1
5914: ST_TO_ADDR
// if p3 = 106 then
5915: LD_VAR 0 3
5919: PUSH
5920: LD_INT 106
5922: EQUAL
5923: IFFALSE 5933
// sTiger := true ;
5925: LD_ADDR_EXP 35
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// if p3 = 107 then
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 107
5940: EQUAL
5941: IFFALSE 5951
// sBomb := true ;
5943: LD_ADDR_EXP 36
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// if p3 = 108 then
5951: LD_VAR 0 3
5955: PUSH
5956: LD_INT 108
5958: EQUAL
5959: IFFALSE 5969
// sWound := true ;
5961: LD_ADDR_EXP 44
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if p3 = 109 then
5969: LD_VAR 0 3
5973: PUSH
5974: LD_INT 109
5976: EQUAL
5977: IFFALSE 5987
// sBetray := true ;
5979: LD_ADDR_EXP 48
5983: PUSH
5984: LD_INT 1
5986: ST_TO_ADDR
// if p3 = 110 then
5987: LD_VAR 0 3
5991: PUSH
5992: LD_INT 110
5994: EQUAL
5995: IFFALSE 6005
// sContamin := true ;
5997: LD_ADDR_EXP 49
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// if p3 = 111 then
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 111
6012: EQUAL
6013: IFFALSE 6023
// sOil := true ;
6015: LD_ADDR_EXP 51
6019: PUSH
6020: LD_INT 1
6022: ST_TO_ADDR
// if p3 = 112 then
6023: LD_VAR 0 3
6027: PUSH
6028: LD_INT 112
6030: EQUAL
6031: IFFALSE 6041
// sStu := true ;
6033: LD_ADDR_EXP 55
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// if p3 = 113 then
6041: LD_VAR 0 3
6045: PUSH
6046: LD_INT 113
6048: EQUAL
6049: IFFALSE 6059
// sBazooka := true ;
6051: LD_ADDR_EXP 58
6055: PUSH
6056: LD_INT 1
6058: ST_TO_ADDR
// if p3 = 114 then
6059: LD_VAR 0 3
6063: PUSH
6064: LD_INT 114
6066: EQUAL
6067: IFFALSE 6077
// sMortar := true ;
6069: LD_ADDR_EXP 59
6073: PUSH
6074: LD_INT 1
6076: ST_TO_ADDR
// if p3 = 115 then
6077: LD_VAR 0 3
6081: PUSH
6082: LD_INT 115
6084: EQUAL
6085: IFFALSE 6095
// sRanger := true ;
6087: LD_ADDR_EXP 69
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// if p3 = 116 then
6095: LD_VAR 0 3
6099: PUSH
6100: LD_INT 116
6102: EQUAL
6103: IFFALSE 6113
// sComputer := true ;
6105: LD_ADDR_EXP 70
6109: PUSH
6110: LD_INT 1
6112: ST_TO_ADDR
// if p3 = 117 then
6113: LD_VAR 0 3
6117: PUSH
6118: LD_INT 117
6120: EQUAL
6121: IFFALSE 6131
// s30 := true ;
6123: LD_ADDR_EXP 71
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// if p3 = 118 then
6131: LD_VAR 0 3
6135: PUSH
6136: LD_INT 118
6138: EQUAL
6139: IFFALSE 6149
// s60 := true ;
6141: LD_ADDR_EXP 72
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// end ; if p2 = hack_mode then
6149: LD_VAR 0 2
6153: PUSH
6154: LD_INT 101
6156: EQUAL
6157: IFFALSE 6285
// begin case p3 of 1 :
6159: LD_VAR 0 3
6163: PUSH
6164: LD_INT 1
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6179
6172: POP
// hHackUnlimitedResources ; 2 :
6173: CALL 18432 0 0
6177: GO 6285
6179: LD_INT 2
6181: DOUBLE
6182: EQUAL
6183: IFTRUE 6187
6185: GO 6194
6187: POP
// hHackSetLevel10 ; 3 :
6188: CALL 18565 0 0
6192: GO 6285
6194: LD_INT 3
6196: DOUBLE
6197: EQUAL
6198: IFTRUE 6202
6200: GO 6209
6202: POP
// hHackSetLevel10YourUnits ; 4 :
6203: CALL 18650 0 0
6207: GO 6285
6209: LD_INT 4
6211: DOUBLE
6212: EQUAL
6213: IFTRUE 6217
6215: GO 6224
6217: POP
// hHackInvincible ; 5 :
6218: CALL 19098 0 0
6222: GO 6285
6224: LD_INT 5
6226: DOUBLE
6227: EQUAL
6228: IFTRUE 6232
6230: GO 6239
6232: POP
// hHackInvisible ; 6 :
6233: CALL 19209 0 0
6237: GO 6285
6239: LD_INT 6
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6254
6247: POP
// hHackChangeYourSide ; 7 :
6248: CALL 19266 0 0
6252: GO 6285
6254: LD_INT 7
6256: DOUBLE
6257: EQUAL
6258: IFTRUE 6262
6260: GO 6269
6262: POP
// hHackChangeUnitSide ; 8 :
6263: CALL 19308 0 0
6267: GO 6285
6269: LD_INT 8
6271: DOUBLE
6272: EQUAL
6273: IFTRUE 6277
6275: GO 6284
6277: POP
// hHackFog ; end ;
6278: CALL 19409 0 0
6282: GO 6285
6284: POP
// end ; if p2 = game_save_mode then
6285: LD_VAR 0 2
6289: PUSH
6290: LD_INT 102
6292: EQUAL
6293: IFFALSE 6348
// begin if p3 = 1 then
6295: LD_VAR 0 3
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6315
// globalGameSaveCounter := p4 ;
6305: LD_ADDR_EXP 15
6309: PUSH
6310: LD_VAR 0 4
6314: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6315: LD_VAR 0 3
6319: PUSH
6320: LD_INT 2
6322: EQUAL
6323: PUSH
6324: LD_EXP 15
6328: AND
6329: IFFALSE 6348
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6331: LD_STRING setGameSaveCounter(
6333: PUSH
6334: LD_EXP 15
6338: STR
6339: PUSH
6340: LD_STRING )
6342: STR
6343: PPUSH
6344: CALL_OW 559
// end ; end ;
6348: LD_VAR 0 7
6352: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6353: LD_INT 0
6355: PPUSH
// streamModeActive := false ;
6356: LD_ADDR_EXP 16
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// normalCounter := 36 ;
6364: LD_ADDR_EXP 17
6368: PUSH
6369: LD_INT 36
6371: ST_TO_ADDR
// hardcoreCounter := 18 ;
6372: LD_ADDR_EXP 18
6376: PUSH
6377: LD_INT 18
6379: ST_TO_ADDR
// sRocket := false ;
6380: LD_ADDR_EXP 21
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// sSpeed := false ;
6388: LD_ADDR_EXP 20
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// sEngine := false ;
6396: LD_ADDR_EXP 22
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// sSpec := false ;
6404: LD_ADDR_EXP 19
6408: PUSH
6409: LD_INT 0
6411: ST_TO_ADDR
// sLevel := false ;
6412: LD_ADDR_EXP 23
6416: PUSH
6417: LD_INT 0
6419: ST_TO_ADDR
// sArmoury := false ;
6420: LD_ADDR_EXP 24
6424: PUSH
6425: LD_INT 0
6427: ST_TO_ADDR
// sRadar := false ;
6428: LD_ADDR_EXP 25
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// sBunker := false ;
6436: LD_ADDR_EXP 26
6440: PUSH
6441: LD_INT 0
6443: ST_TO_ADDR
// sHack := false ;
6444: LD_ADDR_EXP 27
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// sFire := false ;
6452: LD_ADDR_EXP 28
6456: PUSH
6457: LD_INT 0
6459: ST_TO_ADDR
// sRefresh := false ;
6460: LD_ADDR_EXP 29
6464: PUSH
6465: LD_INT 0
6467: ST_TO_ADDR
// sExp := false ;
6468: LD_ADDR_EXP 30
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// sDepot := false ;
6476: LD_ADDR_EXP 31
6480: PUSH
6481: LD_INT 0
6483: ST_TO_ADDR
// sFlag := false ;
6484: LD_ADDR_EXP 32
6488: PUSH
6489: LD_INT 0
6491: ST_TO_ADDR
// sKamikadze := false ;
6492: LD_ADDR_EXP 40
6496: PUSH
6497: LD_INT 0
6499: ST_TO_ADDR
// sTroll := false ;
6500: LD_ADDR_EXP 41
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// sSlow := false ;
6508: LD_ADDR_EXP 42
6512: PUSH
6513: LD_INT 0
6515: ST_TO_ADDR
// sLack := false ;
6516: LD_ADDR_EXP 43
6520: PUSH
6521: LD_INT 0
6523: ST_TO_ADDR
// sTank := false ;
6524: LD_ADDR_EXP 45
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// sRemote := false ;
6532: LD_ADDR_EXP 46
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// sPowell := false ;
6540: LD_ADDR_EXP 47
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// sTeleport := false ;
6548: LD_ADDR_EXP 50
6552: PUSH
6553: LD_INT 0
6555: ST_TO_ADDR
// sOilTower := false ;
6556: LD_ADDR_EXP 52
6560: PUSH
6561: LD_INT 0
6563: ST_TO_ADDR
// sShovel := false ;
6564: LD_ADDR_EXP 53
6568: PUSH
6569: LD_INT 0
6571: ST_TO_ADDR
// sSheik := false ;
6572: LD_ADDR_EXP 54
6576: PUSH
6577: LD_INT 0
6579: ST_TO_ADDR
// sEarthquake := false ;
6580: LD_ADDR_EXP 56
6584: PUSH
6585: LD_INT 0
6587: ST_TO_ADDR
// sAI := false ;
6588: LD_ADDR_EXP 57
6592: PUSH
6593: LD_INT 0
6595: ST_TO_ADDR
// sCargo := false ;
6596: LD_ADDR_EXP 60
6600: PUSH
6601: LD_INT 0
6603: ST_TO_ADDR
// sDLaser := false ;
6604: LD_ADDR_EXP 61
6608: PUSH
6609: LD_INT 0
6611: ST_TO_ADDR
// sExchange := false ;
6612: LD_ADDR_EXP 62
6616: PUSH
6617: LD_INT 0
6619: ST_TO_ADDR
// sFac := false ;
6620: LD_ADDR_EXP 63
6624: PUSH
6625: LD_INT 0
6627: ST_TO_ADDR
// sPower := false ;
6628: LD_ADDR_EXP 64
6632: PUSH
6633: LD_INT 0
6635: ST_TO_ADDR
// sRandom := false ;
6636: LD_ADDR_EXP 65
6640: PUSH
6641: LD_INT 0
6643: ST_TO_ADDR
// sShield := false ;
6644: LD_ADDR_EXP 66
6648: PUSH
6649: LD_INT 0
6651: ST_TO_ADDR
// sTime := false ;
6652: LD_ADDR_EXP 67
6656: PUSH
6657: LD_INT 0
6659: ST_TO_ADDR
// sTools := false ;
6660: LD_ADDR_EXP 68
6664: PUSH
6665: LD_INT 0
6667: ST_TO_ADDR
// sSold := false ;
6668: LD_ADDR_EXP 33
6672: PUSH
6673: LD_INT 0
6675: ST_TO_ADDR
// sDiff := false ;
6676: LD_ADDR_EXP 34
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// sFog := false ;
6684: LD_ADDR_EXP 37
6688: PUSH
6689: LD_INT 0
6691: ST_TO_ADDR
// sReset := false ;
6692: LD_ADDR_EXP 38
6696: PUSH
6697: LD_INT 0
6699: ST_TO_ADDR
// sSun := false ;
6700: LD_ADDR_EXP 39
6704: PUSH
6705: LD_INT 0
6707: ST_TO_ADDR
// sTiger := false ;
6708: LD_ADDR_EXP 35
6712: PUSH
6713: LD_INT 0
6715: ST_TO_ADDR
// sBomb := false ;
6716: LD_ADDR_EXP 36
6720: PUSH
6721: LD_INT 0
6723: ST_TO_ADDR
// sWound := false ;
6724: LD_ADDR_EXP 44
6728: PUSH
6729: LD_INT 0
6731: ST_TO_ADDR
// sBetray := false ;
6732: LD_ADDR_EXP 48
6736: PUSH
6737: LD_INT 0
6739: ST_TO_ADDR
// sContamin := false ;
6740: LD_ADDR_EXP 49
6744: PUSH
6745: LD_INT 0
6747: ST_TO_ADDR
// sOil := false ;
6748: LD_ADDR_EXP 51
6752: PUSH
6753: LD_INT 0
6755: ST_TO_ADDR
// sStu := false ;
6756: LD_ADDR_EXP 55
6760: PUSH
6761: LD_INT 0
6763: ST_TO_ADDR
// sBazooka := false ;
6764: LD_ADDR_EXP 58
6768: PUSH
6769: LD_INT 0
6771: ST_TO_ADDR
// sMortar := false ;
6772: LD_ADDR_EXP 59
6776: PUSH
6777: LD_INT 0
6779: ST_TO_ADDR
// sRanger := false ;
6780: LD_ADDR_EXP 69
6784: PUSH
6785: LD_INT 0
6787: ST_TO_ADDR
// sComputer := false ;
6788: LD_ADDR_EXP 70
6792: PUSH
6793: LD_INT 0
6795: ST_TO_ADDR
// s30 := false ;
6796: LD_ADDR_EXP 71
6800: PUSH
6801: LD_INT 0
6803: ST_TO_ADDR
// s60 := false ;
6804: LD_ADDR_EXP 72
6808: PUSH
6809: LD_INT 0
6811: ST_TO_ADDR
// end ;
6812: LD_VAR 0 1
6816: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6817: LD_INT 0
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
// result := [ ] ;
6826: LD_ADDR_VAR 0 2
6830: PUSH
6831: EMPTY
6832: ST_TO_ADDR
// if campaign_id = 1 then
6833: LD_OWVAR 69
6837: PUSH
6838: LD_INT 1
6840: EQUAL
6841: IFFALSE 10007
// begin case mission_number of 1 :
6843: LD_OWVAR 70
6847: PUSH
6848: LD_INT 1
6850: DOUBLE
6851: EQUAL
6852: IFTRUE 6856
6854: GO 6932
6856: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6857: LD_ADDR_VAR 0 2
6861: PUSH
6862: LD_INT 2
6864: PUSH
6865: LD_INT 4
6867: PUSH
6868: LD_INT 11
6870: PUSH
6871: LD_INT 12
6873: PUSH
6874: LD_INT 15
6876: PUSH
6877: LD_INT 16
6879: PUSH
6880: LD_INT 22
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 26
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 101
6902: PUSH
6903: LD_INT 102
6905: PUSH
6906: LD_INT 106
6908: PUSH
6909: LD_INT 116
6911: PUSH
6912: LD_INT 117
6914: PUSH
6915: LD_INT 118
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 10005
6932: LD_INT 2
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 7024
6940: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6941: LD_ADDR_VAR 0 2
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: LD_INT 4
6951: PUSH
6952: LD_INT 11
6954: PUSH
6955: LD_INT 12
6957: PUSH
6958: LD_INT 15
6960: PUSH
6961: LD_INT 16
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 23
6969: PUSH
6970: LD_INT 26
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 101
6986: PUSH
6987: LD_INT 102
6989: PUSH
6990: LD_INT 105
6992: PUSH
6993: LD_INT 106
6995: PUSH
6996: LD_INT 108
6998: PUSH
6999: LD_INT 116
7001: PUSH
7002: LD_INT 117
7004: PUSH
7005: LD_INT 118
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: ST_TO_ADDR
7022: GO 10005
7024: LD_INT 3
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7120
7032: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7033: LD_ADDR_VAR 0 2
7037: PUSH
7038: LD_INT 2
7040: PUSH
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 11
7049: PUSH
7050: LD_INT 12
7052: PUSH
7053: LD_INT 15
7055: PUSH
7056: LD_INT 16
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_INT 26
7064: PUSH
7065: LD_INT 36
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 101
7082: PUSH
7083: LD_INT 102
7085: PUSH
7086: LD_INT 105
7088: PUSH
7089: LD_INT 106
7091: PUSH
7092: LD_INT 108
7094: PUSH
7095: LD_INT 116
7097: PUSH
7098: LD_INT 117
7100: PUSH
7101: LD_INT 118
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: ST_TO_ADDR
7118: GO 10005
7120: LD_INT 4
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7128
7126: GO 7224
7128: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: LD_INT 2
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: LD_INT 5
7142: PUSH
7143: LD_INT 8
7145: PUSH
7146: LD_INT 11
7148: PUSH
7149: LD_INT 12
7151: PUSH
7152: LD_INT 15
7154: PUSH
7155: LD_INT 16
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_INT 23
7163: PUSH
7164: LD_INT 26
7166: PUSH
7167: LD_INT 36
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 101
7186: PUSH
7187: LD_INT 102
7189: PUSH
7190: LD_INT 105
7192: PUSH
7193: LD_INT 106
7195: PUSH
7196: LD_INT 108
7198: PUSH
7199: LD_INT 116
7201: PUSH
7202: LD_INT 117
7204: PUSH
7205: LD_INT 118
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: ST_TO_ADDR
7222: GO 10005
7224: LD_INT 5
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7344
7232: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7233: LD_ADDR_VAR 0 2
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: LD_INT 4
7243: PUSH
7244: LD_INT 5
7246: PUSH
7247: LD_INT 6
7249: PUSH
7250: LD_INT 8
7252: PUSH
7253: LD_INT 11
7255: PUSH
7256: LD_INT 12
7258: PUSH
7259: LD_INT 15
7261: PUSH
7262: LD_INT 16
7264: PUSH
7265: LD_INT 22
7267: PUSH
7268: LD_INT 23
7270: PUSH
7271: LD_INT 25
7273: PUSH
7274: LD_INT 26
7276: PUSH
7277: LD_INT 36
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 101
7298: PUSH
7299: LD_INT 102
7301: PUSH
7302: LD_INT 105
7304: PUSH
7305: LD_INT 106
7307: PUSH
7308: LD_INT 108
7310: PUSH
7311: LD_INT 109
7313: PUSH
7314: LD_INT 112
7316: PUSH
7317: LD_INT 116
7319: PUSH
7320: LD_INT 117
7322: PUSH
7323: LD_INT 118
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: ST_TO_ADDR
7342: GO 10005
7344: LD_INT 6
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7484
7352: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7353: LD_ADDR_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: LD_INT 4
7363: PUSH
7364: LD_INT 5
7366: PUSH
7367: LD_INT 6
7369: PUSH
7370: LD_INT 8
7372: PUSH
7373: LD_INT 11
7375: PUSH
7376: LD_INT 12
7378: PUSH
7379: LD_INT 15
7381: PUSH
7382: LD_INT 16
7384: PUSH
7385: LD_INT 20
7387: PUSH
7388: LD_INT 21
7390: PUSH
7391: LD_INT 22
7393: PUSH
7394: LD_INT 23
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 26
7402: PUSH
7403: LD_INT 30
7405: PUSH
7406: LD_INT 31
7408: PUSH
7409: LD_INT 32
7411: PUSH
7412: LD_INT 36
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 101
7438: PUSH
7439: LD_INT 102
7441: PUSH
7442: LD_INT 105
7444: PUSH
7445: LD_INT 106
7447: PUSH
7448: LD_INT 108
7450: PUSH
7451: LD_INT 109
7453: PUSH
7454: LD_INT 112
7456: PUSH
7457: LD_INT 116
7459: PUSH
7460: LD_INT 117
7462: PUSH
7463: LD_INT 118
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: ST_TO_ADDR
7482: GO 10005
7484: LD_INT 7
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7604
7492: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7493: LD_ADDR_VAR 0 2
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 4
7503: PUSH
7504: LD_INT 5
7506: PUSH
7507: LD_INT 7
7509: PUSH
7510: LD_INT 11
7512: PUSH
7513: LD_INT 12
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 20
7524: PUSH
7525: LD_INT 21
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: LD_INT 23
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 26
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 101
7558: PUSH
7559: LD_INT 102
7561: PUSH
7562: LD_INT 103
7564: PUSH
7565: LD_INT 105
7567: PUSH
7568: LD_INT 106
7570: PUSH
7571: LD_INT 108
7573: PUSH
7574: LD_INT 112
7576: PUSH
7577: LD_INT 116
7579: PUSH
7580: LD_INT 117
7582: PUSH
7583: LD_INT 118
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: ST_TO_ADDR
7602: GO 10005
7604: LD_INT 8
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7752
7612: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7613: LD_ADDR_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: LD_INT 4
7623: PUSH
7624: LD_INT 5
7626: PUSH
7627: LD_INT 6
7629: PUSH
7630: LD_INT 7
7632: PUSH
7633: LD_INT 8
7635: PUSH
7636: LD_INT 11
7638: PUSH
7639: LD_INT 12
7641: PUSH
7642: LD_INT 15
7644: PUSH
7645: LD_INT 16
7647: PUSH
7648: LD_INT 20
7650: PUSH
7651: LD_INT 21
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 23
7659: PUSH
7660: LD_INT 25
7662: PUSH
7663: LD_INT 26
7665: PUSH
7666: LD_INT 30
7668: PUSH
7669: LD_INT 31
7671: PUSH
7672: LD_INT 32
7674: PUSH
7675: LD_INT 36
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 101
7702: PUSH
7703: LD_INT 102
7705: PUSH
7706: LD_INT 103
7708: PUSH
7709: LD_INT 105
7711: PUSH
7712: LD_INT 106
7714: PUSH
7715: LD_INT 108
7717: PUSH
7718: LD_INT 109
7720: PUSH
7721: LD_INT 112
7723: PUSH
7724: LD_INT 116
7726: PUSH
7727: LD_INT 117
7729: PUSH
7730: LD_INT 118
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: ST_TO_ADDR
7750: GO 10005
7752: LD_INT 9
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7908
7760: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7761: LD_ADDR_VAR 0 2
7765: PUSH
7766: LD_INT 2
7768: PUSH
7769: LD_INT 4
7771: PUSH
7772: LD_INT 5
7774: PUSH
7775: LD_INT 6
7777: PUSH
7778: LD_INT 7
7780: PUSH
7781: LD_INT 8
7783: PUSH
7784: LD_INT 11
7786: PUSH
7787: LD_INT 12
7789: PUSH
7790: LD_INT 15
7792: PUSH
7793: LD_INT 16
7795: PUSH
7796: LD_INT 20
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_INT 23
7807: PUSH
7808: LD_INT 25
7810: PUSH
7811: LD_INT 26
7813: PUSH
7814: LD_INT 28
7816: PUSH
7817: LD_INT 30
7819: PUSH
7820: LD_INT 31
7822: PUSH
7823: LD_INT 32
7825: PUSH
7826: LD_INT 36
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 101
7854: PUSH
7855: LD_INT 102
7857: PUSH
7858: LD_INT 103
7860: PUSH
7861: LD_INT 105
7863: PUSH
7864: LD_INT 106
7866: PUSH
7867: LD_INT 108
7869: PUSH
7870: LD_INT 109
7872: PUSH
7873: LD_INT 112
7875: PUSH
7876: LD_INT 114
7878: PUSH
7879: LD_INT 116
7881: PUSH
7882: LD_INT 117
7884: PUSH
7885: LD_INT 118
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: ST_TO_ADDR
7906: GO 10005
7908: LD_INT 10
7910: DOUBLE
7911: EQUAL
7912: IFTRUE 7916
7914: GO 8112
7916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7917: LD_ADDR_VAR 0 2
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: LD_INT 4
7927: PUSH
7928: LD_INT 5
7930: PUSH
7931: LD_INT 6
7933: PUSH
7934: LD_INT 7
7936: PUSH
7937: LD_INT 8
7939: PUSH
7940: LD_INT 9
7942: PUSH
7943: LD_INT 10
7945: PUSH
7946: LD_INT 11
7948: PUSH
7949: LD_INT 12
7951: PUSH
7952: LD_INT 13
7954: PUSH
7955: LD_INT 14
7957: PUSH
7958: LD_INT 15
7960: PUSH
7961: LD_INT 16
7963: PUSH
7964: LD_INT 17
7966: PUSH
7967: LD_INT 18
7969: PUSH
7970: LD_INT 19
7972: PUSH
7973: LD_INT 20
7975: PUSH
7976: LD_INT 21
7978: PUSH
7979: LD_INT 22
7981: PUSH
7982: LD_INT 23
7984: PUSH
7985: LD_INT 24
7987: PUSH
7988: LD_INT 25
7990: PUSH
7991: LD_INT 26
7993: PUSH
7994: LD_INT 28
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 31
8002: PUSH
8003: LD_INT 32
8005: PUSH
8006: LD_INT 36
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 101
8042: PUSH
8043: LD_INT 102
8045: PUSH
8046: LD_INT 103
8048: PUSH
8049: LD_INT 104
8051: PUSH
8052: LD_INT 105
8054: PUSH
8055: LD_INT 106
8057: PUSH
8058: LD_INT 107
8060: PUSH
8061: LD_INT 108
8063: PUSH
8064: LD_INT 109
8066: PUSH
8067: LD_INT 110
8069: PUSH
8070: LD_INT 111
8072: PUSH
8073: LD_INT 112
8075: PUSH
8076: LD_INT 114
8078: PUSH
8079: LD_INT 116
8081: PUSH
8082: LD_INT 117
8084: PUSH
8085: LD_INT 118
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: ST_TO_ADDR
8110: GO 10005
8112: LD_INT 11
8114: DOUBLE
8115: EQUAL
8116: IFTRUE 8120
8118: GO 8324
8120: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_INT 2
8128: PUSH
8129: LD_INT 3
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: LD_INT 6
8140: PUSH
8141: LD_INT 7
8143: PUSH
8144: LD_INT 8
8146: PUSH
8147: LD_INT 9
8149: PUSH
8150: LD_INT 10
8152: PUSH
8153: LD_INT 11
8155: PUSH
8156: LD_INT 12
8158: PUSH
8159: LD_INT 13
8161: PUSH
8162: LD_INT 14
8164: PUSH
8165: LD_INT 15
8167: PUSH
8168: LD_INT 16
8170: PUSH
8171: LD_INT 17
8173: PUSH
8174: LD_INT 18
8176: PUSH
8177: LD_INT 19
8179: PUSH
8180: LD_INT 20
8182: PUSH
8183: LD_INT 21
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 23
8191: PUSH
8192: LD_INT 24
8194: PUSH
8195: LD_INT 25
8197: PUSH
8198: LD_INT 26
8200: PUSH
8201: LD_INT 28
8203: PUSH
8204: LD_INT 30
8206: PUSH
8207: LD_INT 31
8209: PUSH
8210: LD_INT 32
8212: PUSH
8213: LD_INT 34
8215: PUSH
8216: LD_INT 36
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 101
8254: PUSH
8255: LD_INT 102
8257: PUSH
8258: LD_INT 103
8260: PUSH
8261: LD_INT 104
8263: PUSH
8264: LD_INT 105
8266: PUSH
8267: LD_INT 106
8269: PUSH
8270: LD_INT 107
8272: PUSH
8273: LD_INT 108
8275: PUSH
8276: LD_INT 109
8278: PUSH
8279: LD_INT 110
8281: PUSH
8282: LD_INT 111
8284: PUSH
8285: LD_INT 112
8287: PUSH
8288: LD_INT 114
8290: PUSH
8291: LD_INT 116
8293: PUSH
8294: LD_INT 117
8296: PUSH
8297: LD_INT 118
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: ST_TO_ADDR
8322: GO 10005
8324: LD_INT 12
8326: DOUBLE
8327: EQUAL
8328: IFTRUE 8332
8330: GO 8552
8332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8333: LD_ADDR_VAR 0 2
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 4
8349: PUSH
8350: LD_INT 5
8352: PUSH
8353: LD_INT 6
8355: PUSH
8356: LD_INT 7
8358: PUSH
8359: LD_INT 8
8361: PUSH
8362: LD_INT 9
8364: PUSH
8365: LD_INT 10
8367: PUSH
8368: LD_INT 11
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: LD_INT 13
8376: PUSH
8377: LD_INT 14
8379: PUSH
8380: LD_INT 15
8382: PUSH
8383: LD_INT 16
8385: PUSH
8386: LD_INT 17
8388: PUSH
8389: LD_INT 18
8391: PUSH
8392: LD_INT 19
8394: PUSH
8395: LD_INT 20
8397: PUSH
8398: LD_INT 21
8400: PUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 23
8406: PUSH
8407: LD_INT 24
8409: PUSH
8410: LD_INT 25
8412: PUSH
8413: LD_INT 26
8415: PUSH
8416: LD_INT 27
8418: PUSH
8419: LD_INT 28
8421: PUSH
8422: LD_INT 30
8424: PUSH
8425: LD_INT 31
8427: PUSH
8428: LD_INT 32
8430: PUSH
8431: LD_INT 33
8433: PUSH
8434: LD_INT 34
8436: PUSH
8437: LD_INT 36
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 101
8478: PUSH
8479: LD_INT 102
8481: PUSH
8482: LD_INT 103
8484: PUSH
8485: LD_INT 104
8487: PUSH
8488: LD_INT 105
8490: PUSH
8491: LD_INT 106
8493: PUSH
8494: LD_INT 107
8496: PUSH
8497: LD_INT 108
8499: PUSH
8500: LD_INT 109
8502: PUSH
8503: LD_INT 110
8505: PUSH
8506: LD_INT 111
8508: PUSH
8509: LD_INT 112
8511: PUSH
8512: LD_INT 113
8514: PUSH
8515: LD_INT 114
8517: PUSH
8518: LD_INT 116
8520: PUSH
8521: LD_INT 117
8523: PUSH
8524: LD_INT 118
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: ST_TO_ADDR
8550: GO 10005
8552: LD_INT 13
8554: DOUBLE
8555: EQUAL
8556: IFTRUE 8560
8558: GO 8768
8560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: LD_INT 1
8568: PUSH
8569: LD_INT 2
8571: PUSH
8572: LD_INT 3
8574: PUSH
8575: LD_INT 4
8577: PUSH
8578: LD_INT 5
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: LD_INT 9
8586: PUSH
8587: LD_INT 10
8589: PUSH
8590: LD_INT 11
8592: PUSH
8593: LD_INT 12
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: LD_INT 15
8601: PUSH
8602: LD_INT 16
8604: PUSH
8605: LD_INT 17
8607: PUSH
8608: LD_INT 18
8610: PUSH
8611: LD_INT 19
8613: PUSH
8614: LD_INT 20
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_INT 23
8625: PUSH
8626: LD_INT 24
8628: PUSH
8629: LD_INT 25
8631: PUSH
8632: LD_INT 26
8634: PUSH
8635: LD_INT 27
8637: PUSH
8638: LD_INT 28
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 31
8646: PUSH
8647: LD_INT 32
8649: PUSH
8650: LD_INT 33
8652: PUSH
8653: LD_INT 34
8655: PUSH
8656: LD_INT 36
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 101
8694: PUSH
8695: LD_INT 102
8697: PUSH
8698: LD_INT 103
8700: PUSH
8701: LD_INT 104
8703: PUSH
8704: LD_INT 105
8706: PUSH
8707: LD_INT 106
8709: PUSH
8710: LD_INT 107
8712: PUSH
8713: LD_INT 108
8715: PUSH
8716: LD_INT 109
8718: PUSH
8719: LD_INT 110
8721: PUSH
8722: LD_INT 111
8724: PUSH
8725: LD_INT 112
8727: PUSH
8728: LD_INT 113
8730: PUSH
8731: LD_INT 114
8733: PUSH
8734: LD_INT 116
8736: PUSH
8737: LD_INT 117
8739: PUSH
8740: LD_INT 118
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: ST_TO_ADDR
8766: GO 10005
8768: LD_INT 14
8770: DOUBLE
8771: EQUAL
8772: IFTRUE 8776
8774: GO 9000
8776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8777: LD_ADDR_VAR 0 2
8781: PUSH
8782: LD_INT 1
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: LD_INT 5
8796: PUSH
8797: LD_INT 6
8799: PUSH
8800: LD_INT 7
8802: PUSH
8803: LD_INT 8
8805: PUSH
8806: LD_INT 9
8808: PUSH
8809: LD_INT 10
8811: PUSH
8812: LD_INT 11
8814: PUSH
8815: LD_INT 12
8817: PUSH
8818: LD_INT 13
8820: PUSH
8821: LD_INT 14
8823: PUSH
8824: LD_INT 15
8826: PUSH
8827: LD_INT 16
8829: PUSH
8830: LD_INT 17
8832: PUSH
8833: LD_INT 18
8835: PUSH
8836: LD_INT 19
8838: PUSH
8839: LD_INT 20
8841: PUSH
8842: LD_INT 21
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 23
8850: PUSH
8851: LD_INT 24
8853: PUSH
8854: LD_INT 25
8856: PUSH
8857: LD_INT 26
8859: PUSH
8860: LD_INT 27
8862: PUSH
8863: LD_INT 28
8865: PUSH
8866: LD_INT 29
8868: PUSH
8869: LD_INT 30
8871: PUSH
8872: LD_INT 31
8874: PUSH
8875: LD_INT 32
8877: PUSH
8878: LD_INT 33
8880: PUSH
8881: LD_INT 34
8883: PUSH
8884: LD_INT 36
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 101
8926: PUSH
8927: LD_INT 102
8929: PUSH
8930: LD_INT 103
8932: PUSH
8933: LD_INT 104
8935: PUSH
8936: LD_INT 105
8938: PUSH
8939: LD_INT 106
8941: PUSH
8942: LD_INT 107
8944: PUSH
8945: LD_INT 108
8947: PUSH
8948: LD_INT 109
8950: PUSH
8951: LD_INT 110
8953: PUSH
8954: LD_INT 111
8956: PUSH
8957: LD_INT 112
8959: PUSH
8960: LD_INT 113
8962: PUSH
8963: LD_INT 114
8965: PUSH
8966: LD_INT 116
8968: PUSH
8969: LD_INT 117
8971: PUSH
8972: LD_INT 118
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: ST_TO_ADDR
8998: GO 10005
9000: LD_INT 15
9002: DOUBLE
9003: EQUAL
9004: IFTRUE 9008
9006: GO 9232
9008: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 4
9025: PUSH
9026: LD_INT 5
9028: PUSH
9029: LD_INT 6
9031: PUSH
9032: LD_INT 7
9034: PUSH
9035: LD_INT 8
9037: PUSH
9038: LD_INT 9
9040: PUSH
9041: LD_INT 10
9043: PUSH
9044: LD_INT 11
9046: PUSH
9047: LD_INT 12
9049: PUSH
9050: LD_INT 13
9052: PUSH
9053: LD_INT 14
9055: PUSH
9056: LD_INT 15
9058: PUSH
9059: LD_INT 16
9061: PUSH
9062: LD_INT 17
9064: PUSH
9065: LD_INT 18
9067: PUSH
9068: LD_INT 19
9070: PUSH
9071: LD_INT 20
9073: PUSH
9074: LD_INT 21
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 26
9091: PUSH
9092: LD_INT 27
9094: PUSH
9095: LD_INT 28
9097: PUSH
9098: LD_INT 29
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 31
9106: PUSH
9107: LD_INT 32
9109: PUSH
9110: LD_INT 33
9112: PUSH
9113: LD_INT 34
9115: PUSH
9116: LD_INT 36
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 101
9158: PUSH
9159: LD_INT 102
9161: PUSH
9162: LD_INT 103
9164: PUSH
9165: LD_INT 104
9167: PUSH
9168: LD_INT 105
9170: PUSH
9171: LD_INT 106
9173: PUSH
9174: LD_INT 107
9176: PUSH
9177: LD_INT 108
9179: PUSH
9180: LD_INT 109
9182: PUSH
9183: LD_INT 110
9185: PUSH
9186: LD_INT 111
9188: PUSH
9189: LD_INT 112
9191: PUSH
9192: LD_INT 113
9194: PUSH
9195: LD_INT 114
9197: PUSH
9198: LD_INT 116
9200: PUSH
9201: LD_INT 117
9203: PUSH
9204: LD_INT 118
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: ST_TO_ADDR
9230: GO 10005
9232: LD_INT 16
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9376
9240: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: LD_INT 4
9251: PUSH
9252: LD_INT 5
9254: PUSH
9255: LD_INT 7
9257: PUSH
9258: LD_INT 11
9260: PUSH
9261: LD_INT 12
9263: PUSH
9264: LD_INT 15
9266: PUSH
9267: LD_INT 16
9269: PUSH
9270: LD_INT 20
9272: PUSH
9273: LD_INT 21
9275: PUSH
9276: LD_INT 22
9278: PUSH
9279: LD_INT 23
9281: PUSH
9282: LD_INT 25
9284: PUSH
9285: LD_INT 26
9287: PUSH
9288: LD_INT 30
9290: PUSH
9291: LD_INT 31
9293: PUSH
9294: LD_INT 32
9296: PUSH
9297: LD_INT 33
9299: PUSH
9300: LD_INT 34
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 101
9326: PUSH
9327: LD_INT 102
9329: PUSH
9330: LD_INT 103
9332: PUSH
9333: LD_INT 106
9335: PUSH
9336: LD_INT 108
9338: PUSH
9339: LD_INT 112
9341: PUSH
9342: LD_INT 113
9344: PUSH
9345: LD_INT 114
9347: PUSH
9348: LD_INT 116
9350: PUSH
9351: LD_INT 117
9353: PUSH
9354: LD_INT 118
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: ST_TO_ADDR
9374: GO 10005
9376: LD_INT 17
9378: DOUBLE
9379: EQUAL
9380: IFTRUE 9384
9382: GO 9608
9384: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9385: LD_ADDR_VAR 0 2
9389: PUSH
9390: LD_INT 1
9392: PUSH
9393: LD_INT 2
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: LD_INT 4
9401: PUSH
9402: LD_INT 5
9404: PUSH
9405: LD_INT 6
9407: PUSH
9408: LD_INT 7
9410: PUSH
9411: LD_INT 8
9413: PUSH
9414: LD_INT 9
9416: PUSH
9417: LD_INT 10
9419: PUSH
9420: LD_INT 11
9422: PUSH
9423: LD_INT 12
9425: PUSH
9426: LD_INT 13
9428: PUSH
9429: LD_INT 14
9431: PUSH
9432: LD_INT 15
9434: PUSH
9435: LD_INT 16
9437: PUSH
9438: LD_INT 17
9440: PUSH
9441: LD_INT 18
9443: PUSH
9444: LD_INT 19
9446: PUSH
9447: LD_INT 20
9449: PUSH
9450: LD_INT 21
9452: PUSH
9453: LD_INT 22
9455: PUSH
9456: LD_INT 23
9458: PUSH
9459: LD_INT 24
9461: PUSH
9462: LD_INT 25
9464: PUSH
9465: LD_INT 26
9467: PUSH
9468: LD_INT 27
9470: PUSH
9471: LD_INT 28
9473: PUSH
9474: LD_INT 29
9476: PUSH
9477: LD_INT 30
9479: PUSH
9480: LD_INT 31
9482: PUSH
9483: LD_INT 32
9485: PUSH
9486: LD_INT 33
9488: PUSH
9489: LD_INT 34
9491: PUSH
9492: LD_INT 36
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 101
9534: PUSH
9535: LD_INT 102
9537: PUSH
9538: LD_INT 103
9540: PUSH
9541: LD_INT 104
9543: PUSH
9544: LD_INT 105
9546: PUSH
9547: LD_INT 106
9549: PUSH
9550: LD_INT 107
9552: PUSH
9553: LD_INT 108
9555: PUSH
9556: LD_INT 109
9558: PUSH
9559: LD_INT 110
9561: PUSH
9562: LD_INT 111
9564: PUSH
9565: LD_INT 112
9567: PUSH
9568: LD_INT 113
9570: PUSH
9571: LD_INT 114
9573: PUSH
9574: LD_INT 116
9576: PUSH
9577: LD_INT 117
9579: PUSH
9580: LD_INT 118
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: ST_TO_ADDR
9606: GO 10005
9608: LD_INT 18
9610: DOUBLE
9611: EQUAL
9612: IFTRUE 9616
9614: GO 9764
9616: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9617: LD_ADDR_VAR 0 2
9621: PUSH
9622: LD_INT 2
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 11
9636: PUSH
9637: LD_INT 12
9639: PUSH
9640: LD_INT 15
9642: PUSH
9643: LD_INT 16
9645: PUSH
9646: LD_INT 20
9648: PUSH
9649: LD_INT 21
9651: PUSH
9652: LD_INT 22
9654: PUSH
9655: LD_INT 23
9657: PUSH
9658: LD_INT 25
9660: PUSH
9661: LD_INT 26
9663: PUSH
9664: LD_INT 30
9666: PUSH
9667: LD_INT 31
9669: PUSH
9670: LD_INT 32
9672: PUSH
9673: LD_INT 33
9675: PUSH
9676: LD_INT 34
9678: PUSH
9679: LD_INT 35
9681: PUSH
9682: LD_INT 36
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 101
9710: PUSH
9711: LD_INT 102
9713: PUSH
9714: LD_INT 103
9716: PUSH
9717: LD_INT 106
9719: PUSH
9720: LD_INT 108
9722: PUSH
9723: LD_INT 112
9725: PUSH
9726: LD_INT 113
9728: PUSH
9729: LD_INT 114
9731: PUSH
9732: LD_INT 115
9734: PUSH
9735: LD_INT 116
9737: PUSH
9738: LD_INT 117
9740: PUSH
9741: LD_INT 118
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: ST_TO_ADDR
9762: GO 10005
9764: LD_INT 19
9766: DOUBLE
9767: EQUAL
9768: IFTRUE 9772
9770: GO 10004
9772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9773: LD_ADDR_VAR 0 2
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: LD_INT 4
9789: PUSH
9790: LD_INT 5
9792: PUSH
9793: LD_INT 6
9795: PUSH
9796: LD_INT 7
9798: PUSH
9799: LD_INT 8
9801: PUSH
9802: LD_INT 9
9804: PUSH
9805: LD_INT 10
9807: PUSH
9808: LD_INT 11
9810: PUSH
9811: LD_INT 12
9813: PUSH
9814: LD_INT 13
9816: PUSH
9817: LD_INT 14
9819: PUSH
9820: LD_INT 15
9822: PUSH
9823: LD_INT 16
9825: PUSH
9826: LD_INT 17
9828: PUSH
9829: LD_INT 18
9831: PUSH
9832: LD_INT 19
9834: PUSH
9835: LD_INT 20
9837: PUSH
9838: LD_INT 21
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 23
9846: PUSH
9847: LD_INT 24
9849: PUSH
9850: LD_INT 25
9852: PUSH
9853: LD_INT 26
9855: PUSH
9856: LD_INT 27
9858: PUSH
9859: LD_INT 28
9861: PUSH
9862: LD_INT 29
9864: PUSH
9865: LD_INT 30
9867: PUSH
9868: LD_INT 31
9870: PUSH
9871: LD_INT 32
9873: PUSH
9874: LD_INT 33
9876: PUSH
9877: LD_INT 34
9879: PUSH
9880: LD_INT 35
9882: PUSH
9883: LD_INT 36
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 101
9926: PUSH
9927: LD_INT 102
9929: PUSH
9930: LD_INT 103
9932: PUSH
9933: LD_INT 104
9935: PUSH
9936: LD_INT 105
9938: PUSH
9939: LD_INT 106
9941: PUSH
9942: LD_INT 107
9944: PUSH
9945: LD_INT 108
9947: PUSH
9948: LD_INT 109
9950: PUSH
9951: LD_INT 110
9953: PUSH
9954: LD_INT 111
9956: PUSH
9957: LD_INT 112
9959: PUSH
9960: LD_INT 113
9962: PUSH
9963: LD_INT 114
9965: PUSH
9966: LD_INT 115
9968: PUSH
9969: LD_INT 116
9971: PUSH
9972: LD_INT 117
9974: PUSH
9975: LD_INT 118
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: ST_TO_ADDR
10002: GO 10005
10004: POP
// end else
10005: GO 10236
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10007: LD_ADDR_VAR 0 2
10011: PUSH
10012: LD_INT 1
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 4
10023: PUSH
10024: LD_INT 5
10026: PUSH
10027: LD_INT 6
10029: PUSH
10030: LD_INT 7
10032: PUSH
10033: LD_INT 8
10035: PUSH
10036: LD_INT 9
10038: PUSH
10039: LD_INT 10
10041: PUSH
10042: LD_INT 11
10044: PUSH
10045: LD_INT 12
10047: PUSH
10048: LD_INT 13
10050: PUSH
10051: LD_INT 14
10053: PUSH
10054: LD_INT 15
10056: PUSH
10057: LD_INT 16
10059: PUSH
10060: LD_INT 17
10062: PUSH
10063: LD_INT 18
10065: PUSH
10066: LD_INT 19
10068: PUSH
10069: LD_INT 20
10071: PUSH
10072: LD_INT 21
10074: PUSH
10075: LD_INT 22
10077: PUSH
10078: LD_INT 23
10080: PUSH
10081: LD_INT 24
10083: PUSH
10084: LD_INT 25
10086: PUSH
10087: LD_INT 26
10089: PUSH
10090: LD_INT 27
10092: PUSH
10093: LD_INT 28
10095: PUSH
10096: LD_INT 29
10098: PUSH
10099: LD_INT 30
10101: PUSH
10102: LD_INT 31
10104: PUSH
10105: LD_INT 32
10107: PUSH
10108: LD_INT 33
10110: PUSH
10111: LD_INT 34
10113: PUSH
10114: LD_INT 35
10116: PUSH
10117: LD_INT 36
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 101
10160: PUSH
10161: LD_INT 102
10163: PUSH
10164: LD_INT 103
10166: PUSH
10167: LD_INT 104
10169: PUSH
10170: LD_INT 105
10172: PUSH
10173: LD_INT 106
10175: PUSH
10176: LD_INT 107
10178: PUSH
10179: LD_INT 108
10181: PUSH
10182: LD_INT 109
10184: PUSH
10185: LD_INT 110
10187: PUSH
10188: LD_INT 111
10190: PUSH
10191: LD_INT 112
10193: PUSH
10194: LD_INT 113
10196: PUSH
10197: LD_INT 114
10199: PUSH
10200: LD_INT 115
10202: PUSH
10203: LD_INT 116
10205: PUSH
10206: LD_INT 117
10208: PUSH
10209: LD_INT 118
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: ST_TO_ADDR
// if result then
10236: LD_VAR 0 2
10240: IFFALSE 11026
// begin normal :=  ;
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_STRING 
10249: ST_TO_ADDR
// hardcore :=  ;
10250: LD_ADDR_VAR 0 6
10254: PUSH
10255: LD_STRING 
10257: ST_TO_ADDR
// active :=  ;
10258: LD_ADDR_VAR 0 7
10262: PUSH
10263: LD_STRING 
10265: ST_TO_ADDR
// for i = 1 to normalCounter do
10266: LD_ADDR_VAR 0 8
10270: PUSH
10271: DOUBLE
10272: LD_INT 1
10274: DEC
10275: ST_TO_ADDR
10276: LD_EXP 17
10280: PUSH
10281: FOR_TO
10282: IFFALSE 10383
// begin tmp := 0 ;
10284: LD_ADDR_VAR 0 3
10288: PUSH
10289: LD_STRING 0
10291: ST_TO_ADDR
// if result [ 1 ] then
10292: LD_VAR 0 2
10296: PUSH
10297: LD_INT 1
10299: ARRAY
10300: IFFALSE 10365
// if result [ 1 ] [ 1 ] = i then
10302: LD_VAR 0 2
10306: PUSH
10307: LD_INT 1
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: ARRAY
10314: PUSH
10315: LD_VAR 0 8
10319: EQUAL
10320: IFFALSE 10365
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10322: LD_ADDR_VAR 0 2
10326: PUSH
10327: LD_VAR 0 2
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: LD_VAR 0 2
10339: PUSH
10340: LD_INT 1
10342: ARRAY
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: CALL_OW 3
10351: PPUSH
10352: CALL_OW 1
10356: ST_TO_ADDR
// tmp := 1 ;
10357: LD_ADDR_VAR 0 3
10361: PUSH
10362: LD_STRING 1
10364: ST_TO_ADDR
// end ; normal := normal & tmp ;
10365: LD_ADDR_VAR 0 5
10369: PUSH
10370: LD_VAR 0 5
10374: PUSH
10375: LD_VAR 0 3
10379: STR
10380: ST_TO_ADDR
// end ;
10381: GO 10281
10383: POP
10384: POP
// for i = 1 to hardcoreCounter do
10385: LD_ADDR_VAR 0 8
10389: PUSH
10390: DOUBLE
10391: LD_INT 1
10393: DEC
10394: ST_TO_ADDR
10395: LD_EXP 18
10399: PUSH
10400: FOR_TO
10401: IFFALSE 10506
// begin tmp := 0 ;
10403: LD_ADDR_VAR 0 3
10407: PUSH
10408: LD_STRING 0
10410: ST_TO_ADDR
// if result [ 2 ] then
10411: LD_VAR 0 2
10415: PUSH
10416: LD_INT 2
10418: ARRAY
10419: IFFALSE 10488
// if result [ 2 ] [ 1 ] = 100 + i then
10421: LD_VAR 0 2
10425: PUSH
10426: LD_INT 2
10428: ARRAY
10429: PUSH
10430: LD_INT 1
10432: ARRAY
10433: PUSH
10434: LD_INT 100
10436: PUSH
10437: LD_VAR 0 8
10441: PLUS
10442: EQUAL
10443: IFFALSE 10488
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_VAR 0 2
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: LD_VAR 0 2
10462: PUSH
10463: LD_INT 2
10465: ARRAY
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 3
10474: PPUSH
10475: CALL_OW 1
10479: ST_TO_ADDR
// tmp := 1 ;
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_STRING 1
10487: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10488: LD_ADDR_VAR 0 6
10492: PUSH
10493: LD_VAR 0 6
10497: PUSH
10498: LD_VAR 0 3
10502: STR
10503: ST_TO_ADDR
// end ;
10504: GO 10400
10506: POP
10507: POP
// if isGameLoad then
10508: LD_VAR 0 1
10512: IFFALSE 10987
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10514: LD_ADDR_VAR 0 4
10518: PUSH
10519: LD_EXP 21
10523: PUSH
10524: LD_EXP 20
10528: PUSH
10529: LD_EXP 22
10533: PUSH
10534: LD_EXP 19
10538: PUSH
10539: LD_EXP 23
10543: PUSH
10544: LD_EXP 24
10548: PUSH
10549: LD_EXP 25
10553: PUSH
10554: LD_EXP 26
10558: PUSH
10559: LD_EXP 27
10563: PUSH
10564: LD_EXP 28
10568: PUSH
10569: LD_EXP 29
10573: PUSH
10574: LD_EXP 30
10578: PUSH
10579: LD_EXP 31
10583: PUSH
10584: LD_EXP 32
10588: PUSH
10589: LD_EXP 40
10593: PUSH
10594: LD_EXP 41
10598: PUSH
10599: LD_EXP 42
10603: PUSH
10604: LD_EXP 43
10608: PUSH
10609: LD_EXP 45
10613: PUSH
10614: LD_EXP 46
10618: PUSH
10619: LD_EXP 47
10623: PUSH
10624: LD_EXP 50
10628: PUSH
10629: LD_EXP 52
10633: PUSH
10634: LD_EXP 53
10638: PUSH
10639: LD_EXP 54
10643: PUSH
10644: LD_EXP 56
10648: PUSH
10649: LD_EXP 57
10653: PUSH
10654: LD_EXP 60
10658: PUSH
10659: LD_EXP 61
10663: PUSH
10664: LD_EXP 62
10668: PUSH
10669: LD_EXP 63
10673: PUSH
10674: LD_EXP 64
10678: PUSH
10679: LD_EXP 65
10683: PUSH
10684: LD_EXP 66
10688: PUSH
10689: LD_EXP 67
10693: PUSH
10694: LD_EXP 68
10698: PUSH
10699: LD_EXP 33
10703: PUSH
10704: LD_EXP 34
10708: PUSH
10709: LD_EXP 37
10713: PUSH
10714: LD_EXP 38
10718: PUSH
10719: LD_EXP 39
10723: PUSH
10724: LD_EXP 35
10728: PUSH
10729: LD_EXP 36
10733: PUSH
10734: LD_EXP 44
10738: PUSH
10739: LD_EXP 48
10743: PUSH
10744: LD_EXP 49
10748: PUSH
10749: LD_EXP 51
10753: PUSH
10754: LD_EXP 55
10758: PUSH
10759: LD_EXP 58
10763: PUSH
10764: LD_EXP 59
10768: PUSH
10769: LD_EXP 69
10773: PUSH
10774: LD_EXP 70
10778: PUSH
10779: LD_EXP 71
10783: PUSH
10784: LD_EXP 72
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: ST_TO_ADDR
// tmp :=  ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_STRING 
10852: ST_TO_ADDR
// for i = 1 to normalCounter do
10853: LD_ADDR_VAR 0 8
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_EXP 17
10867: PUSH
10868: FOR_TO
10869: IFFALSE 10905
// begin if flags [ i ] then
10871: LD_VAR 0 4
10875: PUSH
10876: LD_VAR 0 8
10880: ARRAY
10881: IFFALSE 10903
// tmp := tmp & i & ; ;
10883: LD_ADDR_VAR 0 3
10887: PUSH
10888: LD_VAR 0 3
10892: PUSH
10893: LD_VAR 0 8
10897: STR
10898: PUSH
10899: LD_STRING ;
10901: STR
10902: ST_TO_ADDR
// end ;
10903: GO 10868
10905: POP
10906: POP
// for i = 1 to hardcoreCounter do
10907: LD_ADDR_VAR 0 8
10911: PUSH
10912: DOUBLE
10913: LD_INT 1
10915: DEC
10916: ST_TO_ADDR
10917: LD_EXP 18
10921: PUSH
10922: FOR_TO
10923: IFFALSE 10969
// begin if flags [ normalCounter + i ] then
10925: LD_VAR 0 4
10929: PUSH
10930: LD_EXP 17
10934: PUSH
10935: LD_VAR 0 8
10939: PLUS
10940: ARRAY
10941: IFFALSE 10967
// tmp := tmp & ( 100 + i ) & ; ;
10943: LD_ADDR_VAR 0 3
10947: PUSH
10948: LD_VAR 0 3
10952: PUSH
10953: LD_INT 100
10955: PUSH
10956: LD_VAR 0 8
10960: PLUS
10961: STR
10962: PUSH
10963: LD_STRING ;
10965: STR
10966: ST_TO_ADDR
// end ;
10967: GO 10922
10969: POP
10970: POP
// if tmp then
10971: LD_VAR 0 3
10975: IFFALSE 10987
// active := tmp ;
10977: LD_ADDR_VAR 0 7
10981: PUSH
10982: LD_VAR 0 3
10986: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10987: LD_STRING getStreamItemsFromMission("
10989: PUSH
10990: LD_VAR 0 5
10994: STR
10995: PUSH
10996: LD_STRING ","
10998: STR
10999: PUSH
11000: LD_VAR 0 6
11004: STR
11005: PUSH
11006: LD_STRING ","
11008: STR
11009: PUSH
11010: LD_VAR 0 7
11014: STR
11015: PUSH
11016: LD_STRING ")
11018: STR
11019: PPUSH
11020: CALL_OW 559
// end else
11024: GO 11033
// ToLua ( getStreamItemsFromMission("","","") ) ;
11026: LD_STRING getStreamItemsFromMission("","","")
11028: PPUSH
11029: CALL_OW 559
// end ;
11033: LD_VAR 0 2
11037: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11038: LD_EXP 16
11042: PUSH
11043: LD_EXP 21
11047: AND
11048: IFFALSE 11172
11050: GO 11052
11052: DISABLE
11053: LD_INT 0
11055: PPUSH
11056: PPUSH
// begin enable ;
11057: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11058: LD_ADDR_VAR 0 2
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_OWVAR 2
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 2
11077: PUSH
11078: LD_INT 34
11080: PUSH
11081: LD_INT 7
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 34
11090: PUSH
11091: LD_INT 45
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 34
11100: PUSH
11101: LD_INT 28
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 34
11110: PUSH
11111: LD_INT 47
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PPUSH
11129: CALL_OW 69
11133: ST_TO_ADDR
// if not tmp then
11134: LD_VAR 0 2
11138: NOT
11139: IFFALSE 11143
// exit ;
11141: GO 11172
// for i in tmp do
11143: LD_ADDR_VAR 0 1
11147: PUSH
11148: LD_VAR 0 2
11152: PUSH
11153: FOR_IN
11154: IFFALSE 11170
// begin SetLives ( i , 0 ) ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_INT 0
11163: PPUSH
11164: CALL_OW 234
// end ;
11168: GO 11153
11170: POP
11171: POP
// end ;
11172: PPOPN 2
11174: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11175: LD_EXP 16
11179: PUSH
11180: LD_EXP 22
11184: AND
11185: IFFALSE 11269
11187: GO 11189
11189: DISABLE
11190: LD_INT 0
11192: PPUSH
11193: PPUSH
// begin enable ;
11194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11195: LD_ADDR_VAR 0 2
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_OWVAR 2
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 32
11214: PUSH
11215: LD_INT 3
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 69
11230: ST_TO_ADDR
// if not tmp then
11231: LD_VAR 0 2
11235: NOT
11236: IFFALSE 11240
// exit ;
11238: GO 11269
// for i in tmp do
11240: LD_ADDR_VAR 0 1
11244: PUSH
11245: LD_VAR 0 2
11249: PUSH
11250: FOR_IN
11251: IFFALSE 11267
// begin SetLives ( i , 0 ) ;
11253: LD_VAR 0 1
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 234
// end ;
11265: GO 11250
11267: POP
11268: POP
// end ;
11269: PPOPN 2
11271: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11272: LD_EXP 16
11276: PUSH
11277: LD_EXP 19
11281: AND
11282: IFFALSE 11375
11284: GO 11286
11286: DISABLE
11287: LD_INT 0
11289: PPUSH
// begin enable ;
11290: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11291: LD_ADDR_VAR 0 1
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_OWVAR 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 2
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 5
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 9
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 8
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: PUSH
11356: FOR_IN
11357: IFFALSE 11373
// begin SetClass ( i , 1 ) ;
11359: LD_VAR 0 1
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 336
// end ;
11371: GO 11356
11373: POP
11374: POP
// end ;
11375: PPOPN 1
11377: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11378: LD_EXP 16
11382: PUSH
11383: LD_EXP 20
11387: AND
11388: PUSH
11389: LD_OWVAR 65
11393: PUSH
11394: LD_INT 7
11396: LESS
11397: AND
11398: IFFALSE 11412
11400: GO 11402
11402: DISABLE
// begin enable ;
11403: ENABLE
// game_speed := 7 ;
11404: LD_ADDR_OWVAR 65
11408: PUSH
11409: LD_INT 7
11411: ST_TO_ADDR
// end ;
11412: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11413: LD_EXP 16
11417: PUSH
11418: LD_EXP 23
11422: AND
11423: IFFALSE 11625
11425: GO 11427
11427: DISABLE
11428: LD_INT 0
11430: PPUSH
11431: PPUSH
11432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11433: LD_ADDR_VAR 0 3
11437: PUSH
11438: LD_INT 81
11440: PUSH
11441: LD_OWVAR 2
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 21
11452: PUSH
11453: LD_INT 1
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 69
11468: ST_TO_ADDR
// if not tmp then
11469: LD_VAR 0 3
11473: NOT
11474: IFFALSE 11478
// exit ;
11476: GO 11625
// if tmp > 5 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 5
11485: GREATER
11486: IFFALSE 11498
// k := 5 else
11488: LD_ADDR_VAR 0 2
11492: PUSH
11493: LD_INT 5
11495: ST_TO_ADDR
11496: GO 11508
// k := tmp ;
11498: LD_ADDR_VAR 0 2
11502: PUSH
11503: LD_VAR 0 3
11507: ST_TO_ADDR
// for i := 1 to k do
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: DOUBLE
11514: LD_INT 1
11516: DEC
11517: ST_TO_ADDR
11518: LD_VAR 0 2
11522: PUSH
11523: FOR_TO
11524: IFFALSE 11623
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11526: LD_VAR 0 3
11530: PUSH
11531: LD_VAR 0 1
11535: ARRAY
11536: PPUSH
11537: LD_VAR 0 1
11541: PUSH
11542: LD_INT 4
11544: MOD
11545: PUSH
11546: LD_INT 1
11548: PLUS
11549: PPUSH
11550: CALL_OW 259
11554: PUSH
11555: LD_INT 10
11557: LESS
11558: IFFALSE 11621
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11560: LD_VAR 0 3
11564: PUSH
11565: LD_VAR 0 1
11569: ARRAY
11570: PPUSH
11571: LD_VAR 0 1
11575: PUSH
11576: LD_INT 4
11578: MOD
11579: PUSH
11580: LD_INT 1
11582: PLUS
11583: PPUSH
11584: LD_VAR 0 3
11588: PUSH
11589: LD_VAR 0 1
11593: ARRAY
11594: PPUSH
11595: LD_VAR 0 1
11599: PUSH
11600: LD_INT 4
11602: MOD
11603: PUSH
11604: LD_INT 1
11606: PLUS
11607: PPUSH
11608: CALL_OW 259
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: PPUSH
11617: CALL_OW 237
11621: GO 11523
11623: POP
11624: POP
// end ;
11625: PPOPN 3
11627: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11628: LD_EXP 16
11632: PUSH
11633: LD_EXP 24
11637: AND
11638: IFFALSE 11658
11640: GO 11642
11642: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11643: LD_INT 4
11645: PPUSH
11646: LD_OWVAR 2
11650: PPUSH
11651: LD_INT 0
11653: PPUSH
11654: CALL_OW 324
11658: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11659: LD_EXP 16
11663: PUSH
11664: LD_EXP 53
11668: AND
11669: IFFALSE 11689
11671: GO 11673
11673: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11674: LD_INT 19
11676: PPUSH
11677: LD_OWVAR 2
11681: PPUSH
11682: LD_INT 0
11684: PPUSH
11685: CALL_OW 324
11689: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11690: LD_EXP 16
11694: PUSH
11695: LD_EXP 25
11699: AND
11700: IFFALSE 11802
11702: GO 11704
11704: DISABLE
11705: LD_INT 0
11707: PPUSH
11708: PPUSH
// begin enable ;
11709: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11710: LD_ADDR_VAR 0 2
11714: PUSH
11715: LD_INT 22
11717: PUSH
11718: LD_OWVAR 2
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 34
11732: PUSH
11733: LD_INT 11
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 34
11742: PUSH
11743: LD_INT 30
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PPUSH
11759: CALL_OW 69
11763: ST_TO_ADDR
// if not tmp then
11764: LD_VAR 0 2
11768: NOT
11769: IFFALSE 11773
// exit ;
11771: GO 11802
// for i in tmp do
11773: LD_ADDR_VAR 0 1
11777: PUSH
11778: LD_VAR 0 2
11782: PUSH
11783: FOR_IN
11784: IFFALSE 11800
// begin SetLives ( i , 0 ) ;
11786: LD_VAR 0 1
11790: PPUSH
11791: LD_INT 0
11793: PPUSH
11794: CALL_OW 234
// end ;
11798: GO 11783
11800: POP
11801: POP
// end ;
11802: PPOPN 2
11804: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11805: LD_EXP 16
11809: PUSH
11810: LD_EXP 26
11814: AND
11815: IFFALSE 11835
11817: GO 11819
11819: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11820: LD_INT 32
11822: PPUSH
11823: LD_OWVAR 2
11827: PPUSH
11828: LD_INT 0
11830: PPUSH
11831: CALL_OW 324
11835: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11836: LD_EXP 16
11840: PUSH
11841: LD_EXP 27
11845: AND
11846: IFFALSE 12027
11848: GO 11850
11850: DISABLE
11851: LD_INT 0
11853: PPUSH
11854: PPUSH
11855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11856: LD_ADDR_VAR 0 2
11860: PUSH
11861: LD_INT 22
11863: PUSH
11864: LD_OWVAR 2
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 33
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 69
11891: ST_TO_ADDR
// if not tmp then
11892: LD_VAR 0 2
11896: NOT
11897: IFFALSE 11901
// exit ;
11899: GO 12027
// side := 0 ;
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: LD_INT 0
11908: ST_TO_ADDR
// for i := 1 to 8 do
11909: LD_ADDR_VAR 0 1
11913: PUSH
11914: DOUBLE
11915: LD_INT 1
11917: DEC
11918: ST_TO_ADDR
11919: LD_INT 8
11921: PUSH
11922: FOR_TO
11923: IFFALSE 11971
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11925: LD_OWVAR 2
11929: PUSH
11930: LD_VAR 0 1
11934: NONEQUAL
11935: PUSH
11936: LD_OWVAR 2
11940: PPUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 81
11950: PUSH
11951: LD_INT 2
11953: EQUAL
11954: AND
11955: IFFALSE 11969
// begin side := i ;
11957: LD_ADDR_VAR 0 3
11961: PUSH
11962: LD_VAR 0 1
11966: ST_TO_ADDR
// break ;
11967: GO 11971
// end ;
11969: GO 11922
11971: POP
11972: POP
// if not side then
11973: LD_VAR 0 3
11977: NOT
11978: IFFALSE 11982
// exit ;
11980: GO 12027
// for i := 1 to tmp do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: DOUBLE
11988: LD_INT 1
11990: DEC
11991: ST_TO_ADDR
11992: LD_VAR 0 2
11996: PUSH
11997: FOR_TO
11998: IFFALSE 12025
// if Prob ( 60 ) then
12000: LD_INT 60
12002: PPUSH
12003: CALL_OW 13
12007: IFFALSE 12023
// SetSide ( i , side ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: CALL_OW 235
12023: GO 11997
12025: POP
12026: POP
// end ;
12027: PPOPN 3
12029: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12030: LD_EXP 16
12034: PUSH
12035: LD_EXP 29
12039: AND
12040: IFFALSE 12159
12042: GO 12044
12044: DISABLE
12045: LD_INT 0
12047: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12048: LD_ADDR_VAR 0 1
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_OWVAR 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 21
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 3
12077: PUSH
12078: LD_INT 23
12080: PUSH
12081: LD_INT 0
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: PUSH
12102: FOR_IN
12103: IFFALSE 12157
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12105: LD_VAR 0 1
12109: PPUSH
12110: CALL_OW 257
12114: PUSH
12115: LD_INT 1
12117: PUSH
12118: LD_INT 2
12120: PUSH
12121: LD_INT 3
12123: PUSH
12124: LD_INT 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: IN
12133: IFFALSE 12155
// SetClass ( un , rand ( 1 , 4 ) ) ;
12135: LD_VAR 0 1
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: LD_INT 4
12145: PPUSH
12146: CALL_OW 12
12150: PPUSH
12151: CALL_OW 336
12155: GO 12102
12157: POP
12158: POP
// end ;
12159: PPOPN 1
12161: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12162: LD_EXP 16
12166: PUSH
12167: LD_EXP 28
12171: AND
12172: IFFALSE 12251
12174: GO 12176
12176: DISABLE
12177: LD_INT 0
12179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12180: LD_ADDR_VAR 0 1
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_OWVAR 2
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 21
12199: PUSH
12200: LD_INT 3
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PPUSH
12211: CALL_OW 69
12215: ST_TO_ADDR
// if not tmp then
12216: LD_VAR 0 1
12220: NOT
12221: IFFALSE 12225
// exit ;
12223: GO 12251
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12225: LD_VAR 0 1
12229: PUSH
12230: LD_INT 1
12232: PPUSH
12233: LD_VAR 0 1
12237: PPUSH
12238: CALL_OW 12
12242: ARRAY
12243: PPUSH
12244: LD_INT 100
12246: PPUSH
12247: CALL_OW 234
// end ;
12251: PPOPN 1
12253: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12254: LD_EXP 16
12258: PUSH
12259: LD_EXP 30
12263: AND
12264: IFFALSE 12362
12266: GO 12268
12268: DISABLE
12269: LD_INT 0
12271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12272: LD_ADDR_VAR 0 1
12276: PUSH
12277: LD_INT 22
12279: PUSH
12280: LD_OWVAR 2
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 21
12291: PUSH
12292: LD_INT 1
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: ST_TO_ADDR
// if not tmp then
12308: LD_VAR 0 1
12312: NOT
12313: IFFALSE 12317
// exit ;
12315: GO 12362
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12317: LD_VAR 0 1
12321: PUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_VAR 0 1
12329: PPUSH
12330: CALL_OW 12
12334: ARRAY
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: LD_INT 4
12341: PPUSH
12342: CALL_OW 12
12346: PPUSH
12347: LD_INT 3000
12349: PPUSH
12350: LD_INT 9000
12352: PPUSH
12353: CALL_OW 12
12357: PPUSH
12358: CALL_OW 492
// end ;
12362: PPOPN 1
12364: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12365: LD_EXP 16
12369: PUSH
12370: LD_EXP 31
12374: AND
12375: IFFALSE 12395
12377: GO 12379
12379: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12380: LD_INT 1
12382: PPUSH
12383: LD_OWVAR 2
12387: PPUSH
12388: LD_INT 0
12390: PPUSH
12391: CALL_OW 324
12395: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12396: LD_EXP 16
12400: PUSH
12401: LD_EXP 32
12405: AND
12406: IFFALSE 12489
12408: GO 12410
12410: DISABLE
12411: LD_INT 0
12413: PPUSH
12414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12415: LD_ADDR_VAR 0 2
12419: PUSH
12420: LD_INT 22
12422: PUSH
12423: LD_OWVAR 2
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 21
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PPUSH
12446: CALL_OW 69
12450: ST_TO_ADDR
// if not tmp then
12451: LD_VAR 0 2
12455: NOT
12456: IFFALSE 12460
// exit ;
12458: GO 12489
// for i in tmp do
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_VAR 0 2
12469: PUSH
12470: FOR_IN
12471: IFFALSE 12487
// SetBLevel ( i , 10 ) ;
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_INT 10
12480: PPUSH
12481: CALL_OW 241
12485: GO 12470
12487: POP
12488: POP
// end ;
12489: PPOPN 2
12491: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12492: LD_EXP 16
12496: PUSH
12497: LD_EXP 33
12501: AND
12502: IFFALSE 12613
12504: GO 12506
12506: DISABLE
12507: LD_INT 0
12509: PPUSH
12510: PPUSH
12511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12512: LD_ADDR_VAR 0 3
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_OWVAR 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 25
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: ST_TO_ADDR
// if not tmp then
12548: LD_VAR 0 3
12552: NOT
12553: IFFALSE 12557
// exit ;
12555: GO 12613
// un := tmp [ rand ( 1 , tmp ) ] ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_VAR 0 3
12566: PUSH
12567: LD_INT 1
12569: PPUSH
12570: LD_VAR 0 3
12574: PPUSH
12575: CALL_OW 12
12579: ARRAY
12580: ST_TO_ADDR
// if Crawls ( un ) then
12581: LD_VAR 0 2
12585: PPUSH
12586: CALL_OW 318
12590: IFFALSE 12601
// ComWalk ( un ) ;
12592: LD_VAR 0 2
12596: PPUSH
12597: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12601: LD_VAR 0 2
12605: PPUSH
12606: LD_INT 5
12608: PPUSH
12609: CALL_OW 336
// end ;
12613: PPOPN 3
12615: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12616: LD_EXP 16
12620: PUSH
12621: LD_EXP 34
12625: AND
12626: PUSH
12627: LD_OWVAR 67
12631: PUSH
12632: LD_INT 4
12634: LESS
12635: AND
12636: IFFALSE 12655
12638: GO 12640
12640: DISABLE
// begin Difficulty := Difficulty + 1 ;
12641: LD_ADDR_OWVAR 67
12645: PUSH
12646: LD_OWVAR 67
12650: PUSH
12651: LD_INT 1
12653: PLUS
12654: ST_TO_ADDR
// end ;
12655: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12656: LD_EXP 16
12660: PUSH
12661: LD_EXP 35
12665: AND
12666: IFFALSE 12769
12668: GO 12670
12670: DISABLE
12671: LD_INT 0
12673: PPUSH
// begin for i := 1 to 5 do
12674: LD_ADDR_VAR 0 1
12678: PUSH
12679: DOUBLE
12680: LD_INT 1
12682: DEC
12683: ST_TO_ADDR
12684: LD_INT 5
12686: PUSH
12687: FOR_TO
12688: IFFALSE 12767
// begin uc_nation := nation_nature ;
12690: LD_ADDR_OWVAR 21
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// uc_side := 0 ;
12698: LD_ADDR_OWVAR 20
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12706: LD_ADDR_OWVAR 29
12710: PUSH
12711: LD_INT 12
12713: PUSH
12714: LD_INT 12
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: ST_TO_ADDR
// hc_agressivity := 20 ;
12721: LD_ADDR_OWVAR 35
12725: PUSH
12726: LD_INT 20
12728: ST_TO_ADDR
// hc_class := class_tiger ;
12729: LD_ADDR_OWVAR 28
12733: PUSH
12734: LD_INT 14
12736: ST_TO_ADDR
// hc_gallery :=  ;
12737: LD_ADDR_OWVAR 33
12741: PUSH
12742: LD_STRING 
12744: ST_TO_ADDR
// hc_name :=  ;
12745: LD_ADDR_OWVAR 26
12749: PUSH
12750: LD_STRING 
12752: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12753: CALL_OW 44
12757: PPUSH
12758: LD_INT 0
12760: PPUSH
12761: CALL_OW 51
// end ;
12765: GO 12687
12767: POP
12768: POP
// end ;
12769: PPOPN 1
12771: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12772: LD_EXP 16
12776: PUSH
12777: LD_EXP 36
12781: AND
12782: IFFALSE 12791
12784: GO 12786
12786: DISABLE
// StreamSibBomb ;
12787: CALL 12792 0 0
12791: END
// export function StreamSibBomb ; var i , x , y ; begin
12792: LD_INT 0
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
// result := false ;
12798: LD_ADDR_VAR 0 1
12802: PUSH
12803: LD_INT 0
12805: ST_TO_ADDR
// for i := 1 to 16 do
12806: LD_ADDR_VAR 0 2
12810: PUSH
12811: DOUBLE
12812: LD_INT 1
12814: DEC
12815: ST_TO_ADDR
12816: LD_INT 16
12818: PUSH
12819: FOR_TO
12820: IFFALSE 13019
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12822: LD_ADDR_VAR 0 3
12826: PUSH
12827: LD_INT 10
12829: PUSH
12830: LD_INT 20
12832: PUSH
12833: LD_INT 30
12835: PUSH
12836: LD_INT 40
12838: PUSH
12839: LD_INT 50
12841: PUSH
12842: LD_INT 60
12844: PUSH
12845: LD_INT 70
12847: PUSH
12848: LD_INT 80
12850: PUSH
12851: LD_INT 90
12853: PUSH
12854: LD_INT 100
12856: PUSH
12857: LD_INT 110
12859: PUSH
12860: LD_INT 120
12862: PUSH
12863: LD_INT 130
12865: PUSH
12866: LD_INT 140
12868: PUSH
12869: LD_INT 150
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_INT 15
12894: PPUSH
12895: CALL_OW 12
12899: ARRAY
12900: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12901: LD_ADDR_VAR 0 4
12905: PUSH
12906: LD_INT 10
12908: PUSH
12909: LD_INT 20
12911: PUSH
12912: LD_INT 30
12914: PUSH
12915: LD_INT 40
12917: PUSH
12918: LD_INT 50
12920: PUSH
12921: LD_INT 60
12923: PUSH
12924: LD_INT 70
12926: PUSH
12927: LD_INT 80
12929: PUSH
12930: LD_INT 90
12932: PUSH
12933: LD_INT 100
12935: PUSH
12936: LD_INT 110
12938: PUSH
12939: LD_INT 120
12941: PUSH
12942: LD_INT 130
12944: PUSH
12945: LD_INT 140
12947: PUSH
12948: LD_INT 150
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 1
12970: PPUSH
12971: LD_INT 15
12973: PPUSH
12974: CALL_OW 12
12978: ARRAY
12979: ST_TO_ADDR
// if ValidHex ( x , y ) then
12980: LD_VAR 0 3
12984: PPUSH
12985: LD_VAR 0 4
12989: PPUSH
12990: CALL_OW 488
12994: IFFALSE 13017
// begin result := [ x , y ] ;
12996: LD_ADDR_VAR 0 1
13000: PUSH
13001: LD_VAR 0 3
13005: PUSH
13006: LD_VAR 0 4
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
// break ;
13015: GO 13019
// end ; end ;
13017: GO 12819
13019: POP
13020: POP
// if result then
13021: LD_VAR 0 1
13025: IFFALSE 13085
// begin ToLua ( playSibBomb() ) ;
13027: LD_STRING playSibBomb()
13029: PPUSH
13030: CALL_OW 559
// wait ( 0 0$14 ) ;
13034: LD_INT 490
13036: PPUSH
13037: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13041: LD_VAR 0 1
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: LD_VAR 0 1
13054: PUSH
13055: LD_INT 2
13057: ARRAY
13058: PPUSH
13059: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13063: LD_VAR 0 1
13067: PUSH
13068: LD_INT 1
13070: ARRAY
13071: PPUSH
13072: LD_VAR 0 1
13076: PUSH
13077: LD_INT 2
13079: ARRAY
13080: PPUSH
13081: CALL_OW 429
// end ; end ;
13085: LD_VAR 0 1
13089: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13090: LD_EXP 16
13094: PUSH
13095: LD_EXP 38
13099: AND
13100: IFFALSE 13112
13102: GO 13104
13104: DISABLE
// YouLost (  ) ;
13105: LD_STRING 
13107: PPUSH
13108: CALL_OW 104
13112: END
// every 0 0$1 trigger StreamModeActive and sFog do
13113: LD_EXP 16
13117: PUSH
13118: LD_EXP 37
13122: AND
13123: IFFALSE 13137
13125: GO 13127
13127: DISABLE
// FogOff ( your_side ) ;
13128: LD_OWVAR 2
13132: PPUSH
13133: CALL_OW 344
13137: END
// every 0 0$1 trigger StreamModeActive and sSun do
13138: LD_EXP 16
13142: PUSH
13143: LD_EXP 39
13147: AND
13148: IFFALSE 13176
13150: GO 13152
13152: DISABLE
// begin solar_recharge_percent := 0 ;
13153: LD_ADDR_OWVAR 79
13157: PUSH
13158: LD_INT 0
13160: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13161: LD_INT 10500
13163: PPUSH
13164: CALL_OW 67
// solar_recharge_percent := 100 ;
13168: LD_ADDR_OWVAR 79
13172: PUSH
13173: LD_INT 100
13175: ST_TO_ADDR
// end ;
13176: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13177: LD_EXP 16
13181: PUSH
13182: LD_EXP 40
13186: AND
13187: IFFALSE 13426
13189: GO 13191
13191: DISABLE
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
13196: PPUSH
// begin tmp := [ ] ;
13197: LD_ADDR_VAR 0 3
13201: PUSH
13202: EMPTY
13203: ST_TO_ADDR
// for i := 1 to 6 do
13204: LD_ADDR_VAR 0 1
13208: PUSH
13209: DOUBLE
13210: LD_INT 1
13212: DEC
13213: ST_TO_ADDR
13214: LD_INT 6
13216: PUSH
13217: FOR_TO
13218: IFFALSE 13323
// begin uc_nation := nation_nature ;
13220: LD_ADDR_OWVAR 21
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// uc_side := 0 ;
13228: LD_ADDR_OWVAR 20
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13236: LD_ADDR_OWVAR 29
13240: PUSH
13241: LD_INT 12
13243: PUSH
13244: LD_INT 12
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: ST_TO_ADDR
// hc_agressivity := 20 ;
13251: LD_ADDR_OWVAR 35
13255: PUSH
13256: LD_INT 20
13258: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13259: LD_ADDR_OWVAR 28
13263: PUSH
13264: LD_INT 17
13266: ST_TO_ADDR
// hc_gallery :=  ;
13267: LD_ADDR_OWVAR 33
13271: PUSH
13272: LD_STRING 
13274: ST_TO_ADDR
// hc_name :=  ;
13275: LD_ADDR_OWVAR 26
13279: PUSH
13280: LD_STRING 
13282: ST_TO_ADDR
// un := CreateHuman ;
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: CALL_OW 44
13292: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: CALL_OW 51
// tmp := tmp ^ un ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: LD_VAR 0 3
13314: PUSH
13315: LD_VAR 0 2
13319: ADD
13320: ST_TO_ADDR
// end ;
13321: GO 13217
13323: POP
13324: POP
// repeat wait ( 0 0$1 ) ;
13325: LD_INT 35
13327: PPUSH
13328: CALL_OW 67
// for un in tmp do
13332: LD_ADDR_VAR 0 2
13336: PUSH
13337: LD_VAR 0 3
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13417
// begin if IsDead ( un ) then
13345: LD_VAR 0 2
13349: PPUSH
13350: CALL_OW 301
13354: IFFALSE 13374
// begin tmp := tmp diff un ;
13356: LD_ADDR_VAR 0 3
13360: PUSH
13361: LD_VAR 0 3
13365: PUSH
13366: LD_VAR 0 2
13370: DIFF
13371: ST_TO_ADDR
// continue ;
13372: GO 13342
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13374: LD_VAR 0 2
13378: PPUSH
13379: LD_INT 3
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 0
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 69
13400: PPUSH
13401: LD_VAR 0 2
13405: PPUSH
13406: CALL_OW 74
13410: PPUSH
13411: CALL_OW 115
// end ;
13415: GO 13342
13417: POP
13418: POP
// until not tmp ;
13419: LD_VAR 0 3
13423: NOT
13424: IFFALSE 13325
// end ;
13426: PPOPN 3
13428: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13429: LD_EXP 16
13433: PUSH
13434: LD_EXP 41
13438: AND
13439: IFFALSE 13493
13441: GO 13443
13443: DISABLE
// begin ToLua ( displayTroll(); ) ;
13444: LD_STRING displayTroll();
13446: PPUSH
13447: CALL_OW 559
// wait ( 3 3$00 ) ;
13451: LD_INT 6300
13453: PPUSH
13454: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13458: LD_STRING hideTroll();
13460: PPUSH
13461: CALL_OW 559
// wait ( 1 1$00 ) ;
13465: LD_INT 2100
13467: PPUSH
13468: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13472: LD_STRING displayTroll();
13474: PPUSH
13475: CALL_OW 559
// wait ( 1 1$00 ) ;
13479: LD_INT 2100
13481: PPUSH
13482: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13486: LD_STRING hideTroll();
13488: PPUSH
13489: CALL_OW 559
// end ;
13493: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13494: LD_EXP 16
13498: PUSH
13499: LD_EXP 42
13503: AND
13504: IFFALSE 13567
13506: GO 13508
13508: DISABLE
13509: LD_INT 0
13511: PPUSH
// begin p := 0 ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: LD_INT 0
13519: ST_TO_ADDR
// repeat game_speed := 1 ;
13520: LD_ADDR_OWVAR 65
13524: PUSH
13525: LD_INT 1
13527: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13528: LD_INT 35
13530: PPUSH
13531: CALL_OW 67
// p := p + 1 ;
13535: LD_ADDR_VAR 0 1
13539: PUSH
13540: LD_VAR 0 1
13544: PUSH
13545: LD_INT 1
13547: PLUS
13548: ST_TO_ADDR
// until p >= 60 ;
13549: LD_VAR 0 1
13553: PUSH
13554: LD_INT 60
13556: GREATEREQUAL
13557: IFFALSE 13520
// game_speed := 4 ;
13559: LD_ADDR_OWVAR 65
13563: PUSH
13564: LD_INT 4
13566: ST_TO_ADDR
// end ;
13567: PPOPN 1
13569: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13570: LD_EXP 16
13574: PUSH
13575: LD_EXP 43
13579: AND
13580: IFFALSE 13726
13582: GO 13584
13584: DISABLE
13585: LD_INT 0
13587: PPUSH
13588: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_OWVAR 2
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 2
13608: PUSH
13609: LD_INT 30
13611: PUSH
13612: LD_INT 0
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 30
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PPUSH
13638: CALL_OW 69
13642: ST_TO_ADDR
// if not depot then
13643: LD_VAR 0 1
13647: NOT
13648: IFFALSE 13652
// exit ;
13650: GO 13726
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13652: LD_ADDR_VAR 0 2
13656: PUSH
13657: LD_VAR 0 1
13661: PUSH
13662: LD_INT 1
13664: PPUSH
13665: LD_VAR 0 1
13669: PPUSH
13670: CALL_OW 12
13674: ARRAY
13675: PPUSH
13676: CALL_OW 274
13680: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13681: LD_VAR 0 2
13685: PPUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_INT 0
13691: PPUSH
13692: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13696: LD_VAR 0 2
13700: PPUSH
13701: LD_INT 2
13703: PPUSH
13704: LD_INT 0
13706: PPUSH
13707: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13711: LD_VAR 0 2
13715: PPUSH
13716: LD_INT 3
13718: PPUSH
13719: LD_INT 0
13721: PPUSH
13722: CALL_OW 277
// end ;
13726: PPOPN 2
13728: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13729: LD_EXP 16
13733: PUSH
13734: LD_EXP 44
13738: AND
13739: IFFALSE 13836
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13747: LD_ADDR_VAR 0 1
13751: PUSH
13752: LD_INT 22
13754: PUSH
13755: LD_OWVAR 2
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 3
13776: PUSH
13777: LD_INT 23
13779: PUSH
13780: LD_INT 0
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: PPUSH
13796: CALL_OW 69
13800: ST_TO_ADDR
// if not tmp then
13801: LD_VAR 0 1
13805: NOT
13806: IFFALSE 13810
// exit ;
13808: GO 13836
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13810: LD_VAR 0 1
13814: PUSH
13815: LD_INT 1
13817: PPUSH
13818: LD_VAR 0 1
13822: PPUSH
13823: CALL_OW 12
13827: ARRAY
13828: PPUSH
13829: LD_INT 200
13831: PPUSH
13832: CALL_OW 234
// end ;
13836: PPOPN 1
13838: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13839: LD_EXP 16
13843: PUSH
13844: LD_EXP 45
13848: AND
13849: IFFALSE 13928
13851: GO 13853
13853: DISABLE
13854: LD_INT 0
13856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13857: LD_ADDR_VAR 0 1
13861: PUSH
13862: LD_INT 22
13864: PUSH
13865: LD_OWVAR 2
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 21
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PPUSH
13888: CALL_OW 69
13892: ST_TO_ADDR
// if not tmp then
13893: LD_VAR 0 1
13897: NOT
13898: IFFALSE 13902
// exit ;
13900: GO 13928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13902: LD_VAR 0 1
13906: PUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 12
13919: ARRAY
13920: PPUSH
13921: LD_INT 60
13923: PPUSH
13924: CALL_OW 234
// end ;
13928: PPOPN 1
13930: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13931: LD_EXP 16
13935: PUSH
13936: LD_EXP 46
13940: AND
13941: IFFALSE 14040
13943: GO 13945
13945: DISABLE
13946: LD_INT 0
13948: PPUSH
13949: PPUSH
// begin enable ;
13950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_OWVAR 2
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 61
13970: PUSH
13971: EMPTY
13972: LIST
13973: PUSH
13974: LD_INT 33
13976: PUSH
13977: LD_INT 2
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: PPUSH
13989: CALL_OW 69
13993: ST_TO_ADDR
// if not tmp then
13994: LD_VAR 0 1
13998: NOT
13999: IFFALSE 14003
// exit ;
14001: GO 14040
// for i in tmp do
14003: LD_ADDR_VAR 0 2
14007: PUSH
14008: LD_VAR 0 1
14012: PUSH
14013: FOR_IN
14014: IFFALSE 14038
// if IsControledBy ( i ) then
14016: LD_VAR 0 2
14020: PPUSH
14021: CALL_OW 312
14025: IFFALSE 14036
// ComUnlink ( i ) ;
14027: LD_VAR 0 2
14031: PPUSH
14032: CALL_OW 136
14036: GO 14013
14038: POP
14039: POP
// end ;
14040: PPOPN 2
14042: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14043: LD_EXP 16
14047: PUSH
14048: LD_EXP 47
14052: AND
14053: IFFALSE 14193
14055: GO 14057
14057: DISABLE
14058: LD_INT 0
14060: PPUSH
14061: PPUSH
// begin ToLua ( displayPowell(); ) ;
14062: LD_STRING displayPowell();
14064: PPUSH
14065: CALL_OW 559
// uc_side := 0 ;
14069: LD_ADDR_OWVAR 20
14073: PUSH
14074: LD_INT 0
14076: ST_TO_ADDR
// uc_nation := 2 ;
14077: LD_ADDR_OWVAR 21
14081: PUSH
14082: LD_INT 2
14084: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14085: LD_ADDR_OWVAR 37
14089: PUSH
14090: LD_INT 14
14092: ST_TO_ADDR
// vc_engine := engine_siberite ;
14093: LD_ADDR_OWVAR 39
14097: PUSH
14098: LD_INT 3
14100: ST_TO_ADDR
// vc_control := control_apeman ;
14101: LD_ADDR_OWVAR 38
14105: PUSH
14106: LD_INT 5
14108: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14109: LD_ADDR_OWVAR 40
14113: PUSH
14114: LD_INT 29
14116: ST_TO_ADDR
// un := CreateVehicle ;
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: CALL_OW 45
14126: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14127: LD_VAR 0 2
14131: PPUSH
14132: LD_INT 1
14134: PPUSH
14135: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14139: LD_INT 35
14141: PPUSH
14142: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14146: LD_VAR 0 2
14150: PPUSH
14151: LD_INT 22
14153: PUSH
14154: LD_OWVAR 2
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PPUSH
14168: LD_VAR 0 2
14172: PPUSH
14173: CALL_OW 74
14177: PPUSH
14178: CALL_OW 115
// until IsDead ( un ) ;
14182: LD_VAR 0 2
14186: PPUSH
14187: CALL_OW 301
14191: IFFALSE 14139
// end ;
14193: PPOPN 2
14195: END
// every 0 0$1 trigger StreamModeActive and sStu do
14196: LD_EXP 16
14200: PUSH
14201: LD_EXP 55
14205: AND
14206: IFFALSE 14222
14208: GO 14210
14210: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14211: LD_STRING displayStucuk();
14213: PPUSH
14214: CALL_OW 559
// ResetFog ;
14218: CALL_OW 335
// end ;
14222: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14223: LD_EXP 16
14227: PUSH
14228: LD_EXP 48
14232: AND
14233: IFFALSE 14374
14235: GO 14237
14237: DISABLE
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: LD_INT 22
14249: PUSH
14250: LD_OWVAR 2
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// if not tmp then
14278: LD_VAR 0 2
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14374
// un := tmp [ rand ( 1 , tmp ) ] ;
14287: LD_ADDR_VAR 0 1
14291: PUSH
14292: LD_VAR 0 2
14296: PUSH
14297: LD_INT 1
14299: PPUSH
14300: LD_VAR 0 2
14304: PPUSH
14305: CALL_OW 12
14309: ARRAY
14310: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_INT 0
14318: PPUSH
14319: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14323: LD_VAR 0 1
14327: PPUSH
14328: LD_OWVAR 3
14332: PUSH
14333: LD_VAR 0 1
14337: DIFF
14338: PPUSH
14339: LD_VAR 0 1
14343: PPUSH
14344: CALL_OW 74
14348: PPUSH
14349: CALL_OW 115
// wait ( 0 0$20 ) ;
14353: LD_INT 700
14355: PPUSH
14356: CALL_OW 67
// SetSide ( un , your_side ) ;
14360: LD_VAR 0 1
14364: PPUSH
14365: LD_OWVAR 2
14369: PPUSH
14370: CALL_OW 235
// end ;
14374: PPOPN 2
14376: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14377: LD_EXP 16
14381: PUSH
14382: LD_EXP 49
14386: AND
14387: IFFALSE 14493
14389: GO 14391
14391: DISABLE
14392: LD_INT 0
14394: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14395: LD_ADDR_VAR 0 1
14399: PUSH
14400: LD_INT 22
14402: PUSH
14403: LD_OWVAR 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: LD_INT 30
14417: PUSH
14418: LD_INT 0
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 30
14427: PUSH
14428: LD_INT 1
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PPUSH
14444: CALL_OW 69
14448: ST_TO_ADDR
// if not depot then
14449: LD_VAR 0 1
14453: NOT
14454: IFFALSE 14458
// exit ;
14456: GO 14493
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14458: LD_VAR 0 1
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PPUSH
14467: CALL_OW 250
14471: PPUSH
14472: LD_VAR 0 1
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PPUSH
14481: CALL_OW 251
14485: PPUSH
14486: LD_INT 70
14488: PPUSH
14489: CALL_OW 495
// end ;
14493: PPOPN 1
14495: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14496: LD_EXP 16
14500: PUSH
14501: LD_EXP 50
14505: AND
14506: IFFALSE 14717
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
14517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14518: LD_ADDR_VAR 0 5
14522: PUSH
14523: LD_INT 22
14525: PUSH
14526: LD_OWVAR 2
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 21
14537: PUSH
14538: LD_INT 1
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: ST_TO_ADDR
// if not tmp then
14554: LD_VAR 0 5
14558: NOT
14559: IFFALSE 14563
// exit ;
14561: GO 14717
// for i in tmp do
14563: LD_ADDR_VAR 0 1
14567: PUSH
14568: LD_VAR 0 5
14572: PUSH
14573: FOR_IN
14574: IFFALSE 14715
// begin d := rand ( 0 , 5 ) ;
14576: LD_ADDR_VAR 0 4
14580: PUSH
14581: LD_INT 0
14583: PPUSH
14584: LD_INT 5
14586: PPUSH
14587: CALL_OW 12
14591: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14592: LD_ADDR_VAR 0 2
14596: PUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: CALL_OW 250
14606: PPUSH
14607: LD_VAR 0 4
14611: PPUSH
14612: LD_INT 3
14614: PPUSH
14615: LD_INT 12
14617: PPUSH
14618: CALL_OW 12
14622: PPUSH
14623: CALL_OW 272
14627: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 251
14642: PPUSH
14643: LD_VAR 0 4
14647: PPUSH
14648: LD_INT 3
14650: PPUSH
14651: LD_INT 12
14653: PPUSH
14654: CALL_OW 12
14658: PPUSH
14659: CALL_OW 273
14663: ST_TO_ADDR
// if ValidHex ( x , y ) then
14664: LD_VAR 0 2
14668: PPUSH
14669: LD_VAR 0 3
14673: PPUSH
14674: CALL_OW 488
14678: IFFALSE 14713
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14680: LD_VAR 0 1
14684: PPUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: LD_VAR 0 3
14694: PPUSH
14695: LD_INT 3
14697: PPUSH
14698: LD_INT 6
14700: PPUSH
14701: CALL_OW 12
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 483
// end ;
14713: GO 14573
14715: POP
14716: POP
// end ;
14717: PPOPN 5
14719: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14720: LD_EXP 16
14724: PUSH
14725: LD_EXP 51
14729: AND
14730: IFFALSE 14824
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14739: LD_ADDR_VAR 0 2
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_OWVAR 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 32
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 2
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: ST_TO_ADDR
// if not tmp then
14786: LD_VAR 0 2
14790: NOT
14791: IFFALSE 14795
// exit ;
14793: GO 14824
// for i in tmp do
14795: LD_ADDR_VAR 0 1
14799: PUSH
14800: LD_VAR 0 2
14804: PUSH
14805: FOR_IN
14806: IFFALSE 14822
// SetFuel ( i , 0 ) ;
14808: LD_VAR 0 1
14812: PPUSH
14813: LD_INT 0
14815: PPUSH
14816: CALL_OW 240
14820: GO 14805
14822: POP
14823: POP
// end ;
14824: PPOPN 2
14826: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14827: LD_EXP 16
14831: PUSH
14832: LD_EXP 52
14836: AND
14837: IFFALSE 14903
14839: GO 14841
14841: DISABLE
14842: LD_INT 0
14844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14845: LD_ADDR_VAR 0 1
14849: PUSH
14850: LD_INT 22
14852: PUSH
14853: LD_OWVAR 2
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 29
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PPUSH
14876: CALL_OW 69
14880: ST_TO_ADDR
// if not tmp then
14881: LD_VAR 0 1
14885: NOT
14886: IFFALSE 14890
// exit ;
14888: GO 14903
// DestroyUnit ( tmp [ 1 ] ) ;
14890: LD_VAR 0 1
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: PPUSH
14899: CALL_OW 65
// end ;
14903: PPOPN 1
14905: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14906: LD_EXP 16
14910: PUSH
14911: LD_EXP 54
14915: AND
14916: IFFALSE 15045
14918: GO 14920
14920: DISABLE
14921: LD_INT 0
14923: PPUSH
// begin uc_side := 0 ;
14924: LD_ADDR_OWVAR 20
14928: PUSH
14929: LD_INT 0
14931: ST_TO_ADDR
// uc_nation := nation_arabian ;
14932: LD_ADDR_OWVAR 21
14936: PUSH
14937: LD_INT 2
14939: ST_TO_ADDR
// hc_gallery :=  ;
14940: LD_ADDR_OWVAR 33
14944: PUSH
14945: LD_STRING 
14947: ST_TO_ADDR
// hc_name :=  ;
14948: LD_ADDR_OWVAR 26
14952: PUSH
14953: LD_STRING 
14955: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14956: LD_INT 1
14958: PPUSH
14959: LD_INT 11
14961: PPUSH
14962: LD_INT 10
14964: PPUSH
14965: CALL_OW 380
// un := CreateHuman ;
14969: LD_ADDR_VAR 0 1
14973: PUSH
14974: CALL_OW 44
14978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14979: LD_VAR 0 1
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14991: LD_INT 35
14993: PPUSH
14994: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_INT 22
15005: PUSH
15006: LD_OWVAR 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 69
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 74
15029: PPUSH
15030: CALL_OW 115
// until IsDead ( un ) ;
15034: LD_VAR 0 1
15038: PPUSH
15039: CALL_OW 301
15043: IFFALSE 14991
// end ;
15045: PPOPN 1
15047: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15048: LD_EXP 16
15052: PUSH
15053: LD_EXP 56
15057: AND
15058: IFFALSE 15070
15060: GO 15062
15062: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15063: LD_STRING earthquake(getX(game), 0, 32)
15065: PPUSH
15066: CALL_OW 559
15070: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15071: LD_EXP 16
15075: PUSH
15076: LD_EXP 57
15080: AND
15081: IFFALSE 15172
15083: GO 15085
15085: DISABLE
15086: LD_INT 0
15088: PPUSH
// begin enable ;
15089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15090: LD_ADDR_VAR 0 1
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_OWVAR 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 21
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 33
15119: PUSH
15120: LD_INT 3
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: LIST
15131: PPUSH
15132: CALL_OW 69
15136: ST_TO_ADDR
// if not tmp then
15137: LD_VAR 0 1
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15146: LD_VAR 0 1
15150: PUSH
15151: LD_INT 1
15153: PPUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 12
15163: ARRAY
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 234
// end ;
15172: PPOPN 1
15174: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15175: LD_EXP 16
15179: PUSH
15180: LD_EXP 58
15184: AND
15185: IFFALSE 15326
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15195: LD_ADDR_VAR 0 3
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 25
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 3
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15326
// un := tmp [ rand ( 1 , tmp ) ] ;
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: CALL_OW 12
15262: ARRAY
15263: ST_TO_ADDR
// if Crawls ( un ) then
15264: LD_VAR 0 2
15268: PPUSH
15269: CALL_OW 318
15273: IFFALSE 15284
// ComWalk ( un ) ;
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15284: LD_VAR 0 2
15288: PPUSH
15289: LD_INT 9
15291: PPUSH
15292: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15296: LD_INT 28
15298: PPUSH
15299: LD_OWVAR 2
15303: PPUSH
15304: LD_INT 2
15306: PPUSH
15307: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15311: LD_INT 29
15313: PPUSH
15314: LD_OWVAR 2
15318: PPUSH
15319: LD_INT 2
15321: PPUSH
15322: CALL_OW 322
// end ;
15326: PPOPN 3
15328: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15329: LD_EXP 16
15333: PUSH
15334: LD_EXP 59
15338: AND
15339: IFFALSE 15450
15341: GO 15343
15343: DISABLE
15344: LD_INT 0
15346: PPUSH
15347: PPUSH
15348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15349: LD_ADDR_VAR 0 3
15353: PUSH
15354: LD_INT 22
15356: PUSH
15357: LD_OWVAR 2
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 69
15384: ST_TO_ADDR
// if not tmp then
15385: LD_VAR 0 3
15389: NOT
15390: IFFALSE 15394
// exit ;
15392: GO 15450
// un := tmp [ rand ( 1 , tmp ) ] ;
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_VAR 0 3
15403: PUSH
15404: LD_INT 1
15406: PPUSH
15407: LD_VAR 0 3
15411: PPUSH
15412: CALL_OW 12
15416: ARRAY
15417: ST_TO_ADDR
// if Crawls ( un ) then
15418: LD_VAR 0 2
15422: PPUSH
15423: CALL_OW 318
15427: IFFALSE 15438
// ComWalk ( un ) ;
15429: LD_VAR 0 2
15433: PPUSH
15434: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15438: LD_VAR 0 2
15442: PPUSH
15443: LD_INT 8
15445: PPUSH
15446: CALL_OW 336
// end ;
15450: PPOPN 3
15452: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15453: LD_EXP 16
15457: PUSH
15458: LD_EXP 60
15462: AND
15463: IFFALSE 15607
15465: GO 15467
15467: DISABLE
15468: LD_INT 0
15470: PPUSH
15471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15472: LD_ADDR_VAR 0 2
15476: PUSH
15477: LD_INT 22
15479: PUSH
15480: LD_OWVAR 2
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: LD_INT 34
15504: PUSH
15505: LD_INT 12
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 34
15514: PUSH
15515: LD_INT 51
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 34
15524: PUSH
15525: LD_INT 32
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: PPUSH
15543: CALL_OW 69
15547: ST_TO_ADDR
// if not tmp then
15548: LD_VAR 0 2
15552: NOT
15553: IFFALSE 15557
// exit ;
15555: GO 15607
// for i in tmp do
15557: LD_ADDR_VAR 0 1
15561: PUSH
15562: LD_VAR 0 2
15566: PUSH
15567: FOR_IN
15568: IFFALSE 15605
// if GetCargo ( i , mat_artifact ) = 0 then
15570: LD_VAR 0 1
15574: PPUSH
15575: LD_INT 4
15577: PPUSH
15578: CALL_OW 289
15582: PUSH
15583: LD_INT 0
15585: EQUAL
15586: IFFALSE 15603
// SetCargo ( i , mat_siberit , 100 ) ;
15588: LD_VAR 0 1
15592: PPUSH
15593: LD_INT 3
15595: PPUSH
15596: LD_INT 100
15598: PPUSH
15599: CALL_OW 290
15603: GO 15567
15605: POP
15606: POP
// end ;
15607: PPOPN 2
15609: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15610: LD_EXP 16
15614: PUSH
15615: LD_EXP 61
15619: AND
15620: IFFALSE 15803
15622: GO 15624
15624: DISABLE
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15629: LD_ADDR_VAR 0 2
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_OWVAR 2
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: ST_TO_ADDR
// if not tmp then
15651: LD_VAR 0 2
15655: NOT
15656: IFFALSE 15660
// exit ;
15658: GO 15803
// for i := 1 to 2 do
15660: LD_ADDR_VAR 0 1
15664: PUSH
15665: DOUBLE
15666: LD_INT 1
15668: DEC
15669: ST_TO_ADDR
15670: LD_INT 2
15672: PUSH
15673: FOR_TO
15674: IFFALSE 15801
// begin uc_side := your_side ;
15676: LD_ADDR_OWVAR 20
15680: PUSH
15681: LD_OWVAR 2
15685: ST_TO_ADDR
// uc_nation := nation_american ;
15686: LD_ADDR_OWVAR 21
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// vc_chassis := us_morphling ;
15694: LD_ADDR_OWVAR 37
15698: PUSH
15699: LD_INT 5
15701: ST_TO_ADDR
// vc_engine := engine_siberite ;
15702: LD_ADDR_OWVAR 39
15706: PUSH
15707: LD_INT 3
15709: ST_TO_ADDR
// vc_control := control_computer ;
15710: LD_ADDR_OWVAR 38
15714: PUSH
15715: LD_INT 3
15717: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15718: LD_ADDR_OWVAR 40
15722: PUSH
15723: LD_INT 10
15725: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15726: LD_VAR 0 2
15730: PUSH
15731: LD_INT 1
15733: ARRAY
15734: PPUSH
15735: CALL_OW 310
15739: NOT
15740: IFFALSE 15787
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15742: CALL_OW 45
15746: PPUSH
15747: LD_VAR 0 2
15751: PUSH
15752: LD_INT 1
15754: ARRAY
15755: PPUSH
15756: CALL_OW 250
15760: PPUSH
15761: LD_VAR 0 2
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PPUSH
15770: CALL_OW 251
15774: PPUSH
15775: LD_INT 12
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: CALL_OW 50
15785: GO 15799
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15787: CALL_OW 45
15791: PPUSH
15792: LD_INT 1
15794: PPUSH
15795: CALL_OW 51
// end ;
15799: GO 15673
15801: POP
15802: POP
// end ;
15803: PPOPN 2
15805: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15806: LD_EXP 16
15810: PUSH
15811: LD_EXP 62
15815: AND
15816: IFFALSE 16038
15818: GO 15820
15820: DISABLE
15821: LD_INT 0
15823: PPUSH
15824: PPUSH
15825: PPUSH
15826: PPUSH
15827: PPUSH
15828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15829: LD_ADDR_VAR 0 6
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_OWVAR 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 3
15858: PUSH
15859: LD_INT 23
15861: PUSH
15862: LD_INT 0
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: ST_TO_ADDR
// if not tmp then
15883: LD_VAR 0 6
15887: NOT
15888: IFFALSE 15892
// exit ;
15890: GO 16038
// s1 := rand ( 1 , 4 ) ;
15892: LD_ADDR_VAR 0 2
15896: PUSH
15897: LD_INT 1
15899: PPUSH
15900: LD_INT 4
15902: PPUSH
15903: CALL_OW 12
15907: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15908: LD_ADDR_VAR 0 4
15912: PUSH
15913: LD_VAR 0 6
15917: PUSH
15918: LD_INT 1
15920: ARRAY
15921: PPUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: CALL_OW 259
15931: ST_TO_ADDR
// if s1 = 1 then
15932: LD_VAR 0 2
15936: PUSH
15937: LD_INT 1
15939: EQUAL
15940: IFFALSE 15960
// s2 := rand ( 2 , 4 ) else
15942: LD_ADDR_VAR 0 3
15946: PUSH
15947: LD_INT 2
15949: PPUSH
15950: LD_INT 4
15952: PPUSH
15953: CALL_OW 12
15957: ST_TO_ADDR
15958: GO 15968
// s2 := 1 ;
15960: LD_ADDR_VAR 0 3
15964: PUSH
15965: LD_INT 1
15967: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15968: LD_ADDR_VAR 0 5
15972: PUSH
15973: LD_VAR 0 6
15977: PUSH
15978: LD_INT 1
15980: ARRAY
15981: PPUSH
15982: LD_VAR 0 3
15986: PPUSH
15987: CALL_OW 259
15991: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15992: LD_VAR 0 6
15996: PUSH
15997: LD_INT 1
15999: ARRAY
16000: PPUSH
16001: LD_VAR 0 2
16005: PPUSH
16006: LD_VAR 0 5
16010: PPUSH
16011: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16015: LD_VAR 0 6
16019: PUSH
16020: LD_INT 1
16022: ARRAY
16023: PPUSH
16024: LD_VAR 0 3
16028: PPUSH
16029: LD_VAR 0 4
16033: PPUSH
16034: CALL_OW 237
// end ;
16038: PPOPN 6
16040: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16041: LD_EXP 16
16045: PUSH
16046: LD_EXP 63
16050: AND
16051: IFFALSE 16130
16053: GO 16055
16055: DISABLE
16056: LD_INT 0
16058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16059: LD_ADDR_VAR 0 1
16063: PUSH
16064: LD_INT 22
16066: PUSH
16067: LD_OWVAR 2
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 30
16078: PUSH
16079: LD_INT 3
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PPUSH
16090: CALL_OW 69
16094: ST_TO_ADDR
// if not tmp then
16095: LD_VAR 0 1
16099: NOT
16100: IFFALSE 16104
// exit ;
16102: GO 16130
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16104: LD_VAR 0 1
16108: PUSH
16109: LD_INT 1
16111: PPUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: CALL_OW 12
16121: ARRAY
16122: PPUSH
16123: LD_INT 1
16125: PPUSH
16126: CALL_OW 234
// end ;
16130: PPOPN 1
16132: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16133: LD_EXP 16
16137: PUSH
16138: LD_EXP 64
16142: AND
16143: IFFALSE 16255
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16152: LD_ADDR_VAR 0 2
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_OWVAR 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: LD_INT 30
16174: PUSH
16175: LD_INT 27
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 30
16184: PUSH
16185: LD_INT 26
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 30
16194: PUSH
16195: LD_INT 28
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PPUSH
16212: CALL_OW 69
16216: ST_TO_ADDR
// if not tmp then
16217: LD_VAR 0 2
16221: NOT
16222: IFFALSE 16226
// exit ;
16224: GO 16255
// for i in tmp do
16226: LD_ADDR_VAR 0 1
16230: PUSH
16231: LD_VAR 0 2
16235: PUSH
16236: FOR_IN
16237: IFFALSE 16253
// SetLives ( i , 1 ) ;
16239: LD_VAR 0 1
16243: PPUSH
16244: LD_INT 1
16246: PPUSH
16247: CALL_OW 234
16251: GO 16236
16253: POP
16254: POP
// end ;
16255: PPOPN 2
16257: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16258: LD_EXP 16
16262: PUSH
16263: LD_EXP 65
16267: AND
16268: IFFALSE 16555
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// begin i := rand ( 1 , 7 ) ;
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_INT 1
16285: PPUSH
16286: LD_INT 7
16288: PPUSH
16289: CALL_OW 12
16293: ST_TO_ADDR
// case i of 1 :
16294: LD_VAR 0 1
16298: PUSH
16299: LD_INT 1
16301: DOUBLE
16302: EQUAL
16303: IFTRUE 16307
16305: GO 16317
16307: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16308: LD_STRING earthquake(getX(game), 0, 32)
16310: PPUSH
16311: CALL_OW 559
16315: GO 16555
16317: LD_INT 2
16319: DOUBLE
16320: EQUAL
16321: IFTRUE 16325
16323: GO 16339
16325: POP
// begin ToLua ( displayStucuk(); ) ;
16326: LD_STRING displayStucuk();
16328: PPUSH
16329: CALL_OW 559
// ResetFog ;
16333: CALL_OW 335
// end ; 3 :
16337: GO 16555
16339: LD_INT 3
16341: DOUBLE
16342: EQUAL
16343: IFTRUE 16347
16345: GO 16451
16347: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16348: LD_ADDR_VAR 0 2
16352: PUSH
16353: LD_INT 22
16355: PUSH
16356: LD_OWVAR 2
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 25
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: ST_TO_ADDR
// if not tmp then
16384: LD_VAR 0 2
16388: NOT
16389: IFFALSE 16393
// exit ;
16391: GO 16555
// un := tmp [ rand ( 1 , tmp ) ] ;
16393: LD_ADDR_VAR 0 3
16397: PUSH
16398: LD_VAR 0 2
16402: PUSH
16403: LD_INT 1
16405: PPUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: CALL_OW 12
16415: ARRAY
16416: ST_TO_ADDR
// if Crawls ( un ) then
16417: LD_VAR 0 3
16421: PPUSH
16422: CALL_OW 318
16426: IFFALSE 16437
// ComWalk ( un ) ;
16428: LD_VAR 0 3
16432: PPUSH
16433: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_INT 8
16444: PPUSH
16445: CALL_OW 336
// end ; 4 :
16449: GO 16555
16451: LD_INT 4
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16533
16459: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_OWVAR 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 30
16479: PUSH
16480: LD_INT 29
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: ST_TO_ADDR
// if not tmp then
16496: LD_VAR 0 2
16500: NOT
16501: IFFALSE 16505
// exit ;
16503: GO 16555
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16505: LD_VAR 0 2
16509: PUSH
16510: LD_INT 1
16512: ARRAY
16513: PPUSH
16514: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16518: LD_VAR 0 2
16522: PUSH
16523: LD_INT 1
16525: ARRAY
16526: PPUSH
16527: CALL_OW 65
// end ; 5 .. 7 :
16531: GO 16555
16533: LD_INT 5
16535: DOUBLE
16536: GREATEREQUAL
16537: IFFALSE 16545
16539: LD_INT 7
16541: DOUBLE
16542: LESSEQUAL
16543: IFTRUE 16547
16545: GO 16554
16547: POP
// StreamSibBomb ; end ;
16548: CALL 12792 0 0
16552: GO 16555
16554: POP
// end ;
16555: PPOPN 3
16557: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16558: LD_EXP 16
16562: PUSH
16563: LD_EXP 66
16567: AND
16568: IFFALSE 16724
16570: GO 16572
16572: DISABLE
16573: LD_INT 0
16575: PPUSH
16576: PPUSH
16577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16578: LD_ADDR_VAR 0 2
16582: PUSH
16583: LD_INT 81
16585: PUSH
16586: LD_OWVAR 2
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: LD_INT 21
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 21
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PPUSH
16627: CALL_OW 69
16631: ST_TO_ADDR
// if not tmp then
16632: LD_VAR 0 2
16636: NOT
16637: IFFALSE 16641
// exit ;
16639: GO 16724
// p := 0 ;
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: LD_INT 0
16648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16649: LD_INT 35
16651: PPUSH
16652: CALL_OW 67
// p := p + 1 ;
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: LD_VAR 0 3
16665: PUSH
16666: LD_INT 1
16668: PLUS
16669: ST_TO_ADDR
// for i in tmp do
16670: LD_ADDR_VAR 0 1
16674: PUSH
16675: LD_VAR 0 2
16679: PUSH
16680: FOR_IN
16681: IFFALSE 16712
// if GetLives ( i ) < 1000 then
16683: LD_VAR 0 1
16687: PPUSH
16688: CALL_OW 256
16692: PUSH
16693: LD_INT 1000
16695: LESS
16696: IFFALSE 16710
// SetLives ( i , 1000 ) ;
16698: LD_VAR 0 1
16702: PPUSH
16703: LD_INT 1000
16705: PPUSH
16706: CALL_OW 234
16710: GO 16680
16712: POP
16713: POP
// until p > 20 ;
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 20
16721: GREATER
16722: IFFALSE 16649
// end ;
16724: PPOPN 3
16726: END
// every 0 0$1 trigger StreamModeActive and sTime do
16727: LD_EXP 16
16731: PUSH
16732: LD_EXP 67
16736: AND
16737: IFFALSE 16772
16739: GO 16741
16741: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16742: LD_INT 28
16744: PPUSH
16745: LD_OWVAR 2
16749: PPUSH
16750: LD_INT 2
16752: PPUSH
16753: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16757: LD_INT 30
16759: PPUSH
16760: LD_OWVAR 2
16764: PPUSH
16765: LD_INT 2
16767: PPUSH
16768: CALL_OW 322
// end ;
16772: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16773: LD_EXP 16
16777: PUSH
16778: LD_EXP 68
16782: AND
16783: IFFALSE 16904
16785: GO 16787
16787: DISABLE
16788: LD_INT 0
16790: PPUSH
16791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16792: LD_ADDR_VAR 0 2
16796: PUSH
16797: LD_INT 22
16799: PUSH
16800: LD_OWVAR 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 21
16811: PUSH
16812: LD_INT 1
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 3
16821: PUSH
16822: LD_INT 23
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 69
16845: ST_TO_ADDR
// if not tmp then
16846: LD_VAR 0 2
16850: NOT
16851: IFFALSE 16855
// exit ;
16853: GO 16904
// for i in tmp do
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: FOR_IN
16866: IFFALSE 16902
// begin if Crawls ( i ) then
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 318
16877: IFFALSE 16888
// ComWalk ( i ) ;
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 138
// SetClass ( i , 2 ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 2
16895: PPUSH
16896: CALL_OW 336
// end ;
16900: GO 16865
16902: POP
16903: POP
// end ;
16904: PPOPN 2
16906: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16907: LD_EXP 16
16911: PUSH
16912: LD_EXP 69
16916: AND
16917: IFFALSE 17205
16919: GO 16921
16921: DISABLE
16922: LD_INT 0
16924: PPUSH
16925: PPUSH
16926: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16927: LD_OWVAR 2
16931: PPUSH
16932: LD_INT 9
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16945: LD_INT 9
16947: PPUSH
16948: LD_OWVAR 2
16952: PPUSH
16953: CALL_OW 343
// uc_side := 9 ;
16957: LD_ADDR_OWVAR 20
16961: PUSH
16962: LD_INT 9
16964: ST_TO_ADDR
// uc_nation := 2 ;
16965: LD_ADDR_OWVAR 21
16969: PUSH
16970: LD_INT 2
16972: ST_TO_ADDR
// hc_name := Dark Warrior ;
16973: LD_ADDR_OWVAR 26
16977: PUSH
16978: LD_STRING Dark Warrior
16980: ST_TO_ADDR
// hc_gallery :=  ;
16981: LD_ADDR_OWVAR 33
16985: PUSH
16986: LD_STRING 
16988: ST_TO_ADDR
// hc_noskilllimit := true ;
16989: LD_ADDR_OWVAR 76
16993: PUSH
16994: LD_INT 1
16996: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16997: LD_ADDR_OWVAR 31
17001: PUSH
17002: LD_INT 30
17004: PUSH
17005: LD_INT 30
17007: PUSH
17008: LD_INT 30
17010: PUSH
17011: LD_INT 30
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: ST_TO_ADDR
// un := CreateHuman ;
17020: LD_ADDR_VAR 0 3
17024: PUSH
17025: CALL_OW 44
17029: ST_TO_ADDR
// hc_noskilllimit := false ;
17030: LD_ADDR_OWVAR 76
17034: PUSH
17035: LD_INT 0
17037: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 1
17045: PPUSH
17046: CALL_OW 51
// ToLua ( playRanger() ) ;
17050: LD_STRING playRanger()
17052: PPUSH
17053: CALL_OW 559
// p := 0 ;
17057: LD_ADDR_VAR 0 2
17061: PUSH
17062: LD_INT 0
17064: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17065: LD_INT 35
17067: PPUSH
17068: CALL_OW 67
// p := p + 1 ;
17072: LD_ADDR_VAR 0 2
17076: PUSH
17077: LD_VAR 0 2
17081: PUSH
17082: LD_INT 1
17084: PLUS
17085: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17086: LD_VAR 0 3
17090: PPUSH
17091: CALL_OW 256
17095: PUSH
17096: LD_INT 1000
17098: LESS
17099: IFFALSE 17113
// SetLives ( un , 1000 ) ;
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_INT 1000
17108: PPUSH
17109: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 81
17120: PUSH
17121: LD_OWVAR 2
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 91
17132: PUSH
17133: LD_VAR 0 3
17137: PUSH
17138: LD_INT 30
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17169: LD_VAR 0 2
17173: PUSH
17174: LD_INT 80
17176: GREATER
17177: PUSH
17178: LD_VAR 0 3
17182: PPUSH
17183: CALL_OW 301
17187: OR
17188: IFFALSE 17065
// if un then
17190: LD_VAR 0 3
17194: IFFALSE 17205
// RemoveUnit ( un ) ;
17196: LD_VAR 0 3
17200: PPUSH
17201: CALL_OW 64
// end ;
17205: PPOPN 3
17207: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17208: LD_EXP 70
17212: IFFALSE 17328
17214: GO 17216
17216: DISABLE
17217: LD_INT 0
17219: PPUSH
17220: PPUSH
17221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_INT 81
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17258: LD_STRING playComputer()
17260: PPUSH
17261: CALL_OW 559
// if not tmp then
17265: LD_VAR 0 2
17269: NOT
17270: IFFALSE 17274
// exit ;
17272: GO 17328
// for i in tmp do
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: LD_VAR 0 2
17283: PUSH
17284: FOR_IN
17285: IFFALSE 17326
// for j := 1 to 4 do
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: DOUBLE
17293: LD_INT 1
17295: DEC
17296: ST_TO_ADDR
17297: LD_INT 4
17299: PUSH
17300: FOR_TO
17301: IFFALSE 17322
// SetSkill ( i , j , 10 ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_INT 10
17315: PPUSH
17316: CALL_OW 237
17320: GO 17300
17322: POP
17323: POP
17324: GO 17284
17326: POP
17327: POP
// end ;
17328: PPOPN 3
17330: END
// every 0 0$1 trigger s30 do var i , tmp ;
17331: LD_EXP 71
17335: IFFALSE 17404
17337: GO 17339
17339: DISABLE
17340: LD_INT 0
17342: PPUSH
17343: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17344: LD_ADDR_VAR 0 2
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: ST_TO_ADDR
// if not tmp then
17366: LD_VAR 0 2
17370: NOT
17371: IFFALSE 17375
// exit ;
17373: GO 17404
// for i in tmp do
17375: LD_ADDR_VAR 0 1
17379: PUSH
17380: LD_VAR 0 2
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17402
// SetLives ( i , 300 ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 300
17395: PPUSH
17396: CALL_OW 234
17400: GO 17385
17402: POP
17403: POP
// end ;
17404: PPOPN 2
17406: END
// every 0 0$1 trigger s60 do var i , tmp ;
17407: LD_EXP 72
17411: IFFALSE 17480
17413: GO 17415
17415: DISABLE
17416: LD_INT 0
17418: PPUSH
17419: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17420: LD_ADDR_VAR 0 2
17424: PUSH
17425: LD_INT 22
17427: PUSH
17428: LD_OWVAR 2
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: ST_TO_ADDR
// if not tmp then
17442: LD_VAR 0 2
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17480
// for i in tmp do
17451: LD_ADDR_VAR 0 1
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: FOR_IN
17462: IFFALSE 17478
// SetLives ( i , 600 ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 600
17471: PPUSH
17472: CALL_OW 234
17476: GO 17461
17478: POP
17479: POP
// end ;
17480: PPOPN 2
17482: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17483: LD_INT 0
17485: PPUSH
// case cmd of 301 :
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 301
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17531
17499: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17500: LD_VAR 0 6
17504: PPUSH
17505: LD_VAR 0 7
17509: PPUSH
17510: LD_VAR 0 8
17514: PPUSH
17515: LD_VAR 0 4
17519: PPUSH
17520: LD_VAR 0 5
17524: PPUSH
17525: CALL 18740 0 5
17529: GO 17652
17531: LD_INT 302
17533: DOUBLE
17534: EQUAL
17535: IFTRUE 17539
17537: GO 17576
17539: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17540: LD_VAR 0 6
17544: PPUSH
17545: LD_VAR 0 7
17549: PPUSH
17550: LD_VAR 0 8
17554: PPUSH
17555: LD_VAR 0 9
17559: PPUSH
17560: LD_VAR 0 4
17564: PPUSH
17565: LD_VAR 0 5
17569: PPUSH
17570: CALL 18831 0 6
17574: GO 17652
17576: LD_INT 303
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 17621
17584: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17585: LD_VAR 0 6
17589: PPUSH
17590: LD_VAR 0 7
17594: PPUSH
17595: LD_VAR 0 8
17599: PPUSH
17600: LD_VAR 0 9
17604: PPUSH
17605: LD_VAR 0 4
17609: PPUSH
17610: LD_VAR 0 5
17614: PPUSH
17615: CALL 17657 0 6
17619: GO 17652
17621: LD_INT 304
17623: DOUBLE
17624: EQUAL
17625: IFTRUE 17629
17627: GO 17651
17629: POP
// hHackTeleport ( unit , x , y ) ; end ;
17630: LD_VAR 0 2
17634: PPUSH
17635: LD_VAR 0 4
17639: PPUSH
17640: LD_VAR 0 5
17644: PPUSH
17645: CALL 19424 0 3
17649: GO 17652
17651: POP
// end ;
17652: LD_VAR 0 12
17656: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17657: LD_INT 0
17659: PPUSH
17660: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17661: LD_VAR 0 1
17665: PUSH
17666: LD_INT 1
17668: LESS
17669: PUSH
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 3
17677: GREATER
17678: OR
17679: PUSH
17680: LD_VAR 0 5
17684: PPUSH
17685: LD_VAR 0 6
17689: PPUSH
17690: CALL_OW 428
17694: OR
17695: IFFALSE 17699
// exit ;
17697: GO 18427
// uc_side := your_side ;
17699: LD_ADDR_OWVAR 20
17703: PUSH
17704: LD_OWVAR 2
17708: ST_TO_ADDR
// uc_nation := nation ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_VAR 0 1
17718: ST_TO_ADDR
// bc_level = 1 ;
17719: LD_ADDR_OWVAR 43
17723: PUSH
17724: LD_INT 1
17726: ST_TO_ADDR
// case btype of 1 :
17727: LD_VAR 0 2
17731: PUSH
17732: LD_INT 1
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17751
17740: POP
// bc_type := b_depot ; 2 :
17741: LD_ADDR_OWVAR 42
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
17749: GO 18371
17751: LD_INT 2
17753: DOUBLE
17754: EQUAL
17755: IFTRUE 17759
17757: GO 17770
17759: POP
// bc_type := b_warehouse ; 3 :
17760: LD_ADDR_OWVAR 42
17764: PUSH
17765: LD_INT 1
17767: ST_TO_ADDR
17768: GO 18371
17770: LD_INT 3
17772: DOUBLE
17773: EQUAL
17774: IFTRUE 17778
17776: GO 17789
17778: POP
// bc_type := b_lab ; 4 .. 9 :
17779: LD_ADDR_OWVAR 42
17783: PUSH
17784: LD_INT 6
17786: ST_TO_ADDR
17787: GO 18371
17789: LD_INT 4
17791: DOUBLE
17792: GREATEREQUAL
17793: IFFALSE 17801
17795: LD_INT 9
17797: DOUBLE
17798: LESSEQUAL
17799: IFTRUE 17803
17801: GO 17863
17803: POP
// begin bc_type := b_lab_half ;
17804: LD_ADDR_OWVAR 42
17808: PUSH
17809: LD_INT 7
17811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17812: LD_ADDR_OWVAR 44
17816: PUSH
17817: LD_INT 10
17819: PUSH
17820: LD_INT 11
17822: PUSH
17823: LD_INT 12
17825: PUSH
17826: LD_INT 15
17828: PUSH
17829: LD_INT 14
17831: PUSH
17832: LD_INT 13
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PUSH
17843: LD_VAR 0 2
17847: PUSH
17848: LD_INT 3
17850: MINUS
17851: ARRAY
17852: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17853: LD_ADDR_OWVAR 45
17857: PUSH
17858: LD_INT 9
17860: ST_TO_ADDR
// end ; 10 .. 13 :
17861: GO 18371
17863: LD_INT 10
17865: DOUBLE
17866: GREATEREQUAL
17867: IFFALSE 17875
17869: LD_INT 13
17871: DOUBLE
17872: LESSEQUAL
17873: IFTRUE 17877
17875: GO 17954
17877: POP
// begin bc_type := b_lab_full ;
17878: LD_ADDR_OWVAR 42
17882: PUSH
17883: LD_INT 8
17885: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17886: LD_ADDR_OWVAR 44
17890: PUSH
17891: LD_INT 10
17893: PUSH
17894: LD_INT 12
17896: PUSH
17897: LD_INT 14
17899: PUSH
17900: LD_INT 13
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: PUSH
17909: LD_VAR 0 2
17913: PUSH
17914: LD_INT 9
17916: MINUS
17917: ARRAY
17918: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17919: LD_ADDR_OWVAR 45
17923: PUSH
17924: LD_INT 11
17926: PUSH
17927: LD_INT 15
17929: PUSH
17930: LD_INT 12
17932: PUSH
17933: LD_INT 15
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: PUSH
17942: LD_VAR 0 2
17946: PUSH
17947: LD_INT 9
17949: MINUS
17950: ARRAY
17951: ST_TO_ADDR
// end ; 14 :
17952: GO 18371
17954: LD_INT 14
17956: DOUBLE
17957: EQUAL
17958: IFTRUE 17962
17960: GO 17973
17962: POP
// bc_type := b_workshop ; 15 :
17963: LD_ADDR_OWVAR 42
17967: PUSH
17968: LD_INT 2
17970: ST_TO_ADDR
17971: GO 18371
17973: LD_INT 15
17975: DOUBLE
17976: EQUAL
17977: IFTRUE 17981
17979: GO 17992
17981: POP
// bc_type := b_factory ; 16 :
17982: LD_ADDR_OWVAR 42
17986: PUSH
17987: LD_INT 3
17989: ST_TO_ADDR
17990: GO 18371
17992: LD_INT 16
17994: DOUBLE
17995: EQUAL
17996: IFTRUE 18000
17998: GO 18011
18000: POP
// bc_type := b_ext_gun ; 17 :
18001: LD_ADDR_OWVAR 42
18005: PUSH
18006: LD_INT 17
18008: ST_TO_ADDR
18009: GO 18371
18011: LD_INT 17
18013: DOUBLE
18014: EQUAL
18015: IFTRUE 18019
18017: GO 18047
18019: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18020: LD_ADDR_OWVAR 42
18024: PUSH
18025: LD_INT 19
18027: PUSH
18028: LD_INT 23
18030: PUSH
18031: LD_INT 19
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: LIST
18038: PUSH
18039: LD_VAR 0 1
18043: ARRAY
18044: ST_TO_ADDR
18045: GO 18371
18047: LD_INT 18
18049: DOUBLE
18050: EQUAL
18051: IFTRUE 18055
18053: GO 18066
18055: POP
// bc_type := b_ext_radar ; 19 :
18056: LD_ADDR_OWVAR 42
18060: PUSH
18061: LD_INT 20
18063: ST_TO_ADDR
18064: GO 18371
18066: LD_INT 19
18068: DOUBLE
18069: EQUAL
18070: IFTRUE 18074
18072: GO 18085
18074: POP
// bc_type := b_ext_radio ; 20 :
18075: LD_ADDR_OWVAR 42
18079: PUSH
18080: LD_INT 22
18082: ST_TO_ADDR
18083: GO 18371
18085: LD_INT 20
18087: DOUBLE
18088: EQUAL
18089: IFTRUE 18093
18091: GO 18104
18093: POP
// bc_type := b_ext_siberium ; 21 :
18094: LD_ADDR_OWVAR 42
18098: PUSH
18099: LD_INT 21
18101: ST_TO_ADDR
18102: GO 18371
18104: LD_INT 21
18106: DOUBLE
18107: EQUAL
18108: IFTRUE 18112
18110: GO 18123
18112: POP
// bc_type := b_ext_computer ; 22 :
18113: LD_ADDR_OWVAR 42
18117: PUSH
18118: LD_INT 24
18120: ST_TO_ADDR
18121: GO 18371
18123: LD_INT 22
18125: DOUBLE
18126: EQUAL
18127: IFTRUE 18131
18129: GO 18142
18131: POP
// bc_type := b_ext_track ; 23 :
18132: LD_ADDR_OWVAR 42
18136: PUSH
18137: LD_INT 16
18139: ST_TO_ADDR
18140: GO 18371
18142: LD_INT 23
18144: DOUBLE
18145: EQUAL
18146: IFTRUE 18150
18148: GO 18161
18150: POP
// bc_type := b_ext_laser ; 24 :
18151: LD_ADDR_OWVAR 42
18155: PUSH
18156: LD_INT 25
18158: ST_TO_ADDR
18159: GO 18371
18161: LD_INT 24
18163: DOUBLE
18164: EQUAL
18165: IFTRUE 18169
18167: GO 18180
18169: POP
// bc_type := b_control_tower ; 25 :
18170: LD_ADDR_OWVAR 42
18174: PUSH
18175: LD_INT 36
18177: ST_TO_ADDR
18178: GO 18371
18180: LD_INT 25
18182: DOUBLE
18183: EQUAL
18184: IFTRUE 18188
18186: GO 18199
18188: POP
// bc_type := b_breastwork ; 26 :
18189: LD_ADDR_OWVAR 42
18193: PUSH
18194: LD_INT 31
18196: ST_TO_ADDR
18197: GO 18371
18199: LD_INT 26
18201: DOUBLE
18202: EQUAL
18203: IFTRUE 18207
18205: GO 18218
18207: POP
// bc_type := b_bunker ; 27 :
18208: LD_ADDR_OWVAR 42
18212: PUSH
18213: LD_INT 32
18215: ST_TO_ADDR
18216: GO 18371
18218: LD_INT 27
18220: DOUBLE
18221: EQUAL
18222: IFTRUE 18226
18224: GO 18237
18226: POP
// bc_type := b_turret ; 28 :
18227: LD_ADDR_OWVAR 42
18231: PUSH
18232: LD_INT 33
18234: ST_TO_ADDR
18235: GO 18371
18237: LD_INT 28
18239: DOUBLE
18240: EQUAL
18241: IFTRUE 18245
18243: GO 18256
18245: POP
// bc_type := b_armoury ; 29 :
18246: LD_ADDR_OWVAR 42
18250: PUSH
18251: LD_INT 4
18253: ST_TO_ADDR
18254: GO 18371
18256: LD_INT 29
18258: DOUBLE
18259: EQUAL
18260: IFTRUE 18264
18262: GO 18275
18264: POP
// bc_type := b_barracks ; 30 :
18265: LD_ADDR_OWVAR 42
18269: PUSH
18270: LD_INT 5
18272: ST_TO_ADDR
18273: GO 18371
18275: LD_INT 30
18277: DOUBLE
18278: EQUAL
18279: IFTRUE 18283
18281: GO 18294
18283: POP
// bc_type := b_solar_power ; 31 :
18284: LD_ADDR_OWVAR 42
18288: PUSH
18289: LD_INT 27
18291: ST_TO_ADDR
18292: GO 18371
18294: LD_INT 31
18296: DOUBLE
18297: EQUAL
18298: IFTRUE 18302
18300: GO 18313
18302: POP
// bc_type := b_oil_power ; 32 :
18303: LD_ADDR_OWVAR 42
18307: PUSH
18308: LD_INT 26
18310: ST_TO_ADDR
18311: GO 18371
18313: LD_INT 32
18315: DOUBLE
18316: EQUAL
18317: IFTRUE 18321
18319: GO 18332
18321: POP
// bc_type := b_siberite_power ; 33 :
18322: LD_ADDR_OWVAR 42
18326: PUSH
18327: LD_INT 28
18329: ST_TO_ADDR
18330: GO 18371
18332: LD_INT 33
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18351
18340: POP
// bc_type := b_oil_mine ; 34 :
18341: LD_ADDR_OWVAR 42
18345: PUSH
18346: LD_INT 29
18348: ST_TO_ADDR
18349: GO 18371
18351: LD_INT 34
18353: DOUBLE
18354: EQUAL
18355: IFTRUE 18359
18357: GO 18370
18359: POP
// bc_type := b_siberite_mine ; end ;
18360: LD_ADDR_OWVAR 42
18364: PUSH
18365: LD_INT 30
18367: ST_TO_ADDR
18368: GO 18371
18370: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18371: LD_ADDR_VAR 0 8
18375: PUSH
18376: LD_VAR 0 5
18380: PPUSH
18381: LD_VAR 0 6
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: CALL_OW 47
18395: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18396: LD_OWVAR 42
18400: PUSH
18401: LD_INT 32
18403: PUSH
18404: LD_INT 33
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: IN
18411: IFFALSE 18427
// PlaceWeaponTurret ( b , weapon ) ;
18413: LD_VAR 0 8
18417: PPUSH
18418: LD_VAR 0 4
18422: PPUSH
18423: CALL_OW 431
// end ;
18427: LD_VAR 0 7
18431: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18438: LD_ADDR_VAR 0 4
18442: PUSH
18443: LD_INT 22
18445: PUSH
18446: LD_OWVAR 2
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 2
18457: PUSH
18458: LD_INT 30
18460: PUSH
18461: LD_INT 0
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 30
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PPUSH
18487: CALL_OW 69
18491: ST_TO_ADDR
// if not tmp then
18492: LD_VAR 0 4
18496: NOT
18497: IFFALSE 18501
// exit ;
18499: GO 18560
// for i in tmp do
18501: LD_ADDR_VAR 0 2
18505: PUSH
18506: LD_VAR 0 4
18510: PUSH
18511: FOR_IN
18512: IFFALSE 18558
// for j = 1 to 3 do
18514: LD_ADDR_VAR 0 3
18518: PUSH
18519: DOUBLE
18520: LD_INT 1
18522: DEC
18523: ST_TO_ADDR
18524: LD_INT 3
18526: PUSH
18527: FOR_TO
18528: IFFALSE 18554
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18530: LD_VAR 0 2
18534: PPUSH
18535: CALL_OW 274
18539: PPUSH
18540: LD_VAR 0 3
18544: PPUSH
18545: LD_INT 99999
18547: PPUSH
18548: CALL_OW 277
18552: GO 18527
18554: POP
18555: POP
18556: GO 18511
18558: POP
18559: POP
// end ;
18560: LD_VAR 0 1
18564: RET
// export function hHackSetLevel10 ; var i , j ; begin
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
18569: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18570: LD_ADDR_VAR 0 2
18574: PUSH
18575: LD_INT 21
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PPUSH
18585: CALL_OW 69
18589: PUSH
18590: FOR_IN
18591: IFFALSE 18643
// if IsSelected ( i ) then
18593: LD_VAR 0 2
18597: PPUSH
18598: CALL_OW 306
18602: IFFALSE 18641
// begin for j := 1 to 4 do
18604: LD_ADDR_VAR 0 3
18608: PUSH
18609: DOUBLE
18610: LD_INT 1
18612: DEC
18613: ST_TO_ADDR
18614: LD_INT 4
18616: PUSH
18617: FOR_TO
18618: IFFALSE 18639
// SetSkill ( i , j , 10 ) ;
18620: LD_VAR 0 2
18624: PPUSH
18625: LD_VAR 0 3
18629: PPUSH
18630: LD_INT 10
18632: PPUSH
18633: CALL_OW 237
18637: GO 18617
18639: POP
18640: POP
// end ;
18641: GO 18590
18643: POP
18644: POP
// end ;
18645: LD_VAR 0 1
18649: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18650: LD_INT 0
18652: PPUSH
18653: PPUSH
18654: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18655: LD_ADDR_VAR 0 2
18659: PUSH
18660: LD_INT 22
18662: PUSH
18663: LD_OWVAR 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PPUSH
18686: CALL_OW 69
18690: PUSH
18691: FOR_IN
18692: IFFALSE 18733
// begin for j := 1 to 4 do
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: DOUBLE
18700: LD_INT 1
18702: DEC
18703: ST_TO_ADDR
18704: LD_INT 4
18706: PUSH
18707: FOR_TO
18708: IFFALSE 18729
// SetSkill ( i , j , 10 ) ;
18710: LD_VAR 0 2
18714: PPUSH
18715: LD_VAR 0 3
18719: PPUSH
18720: LD_INT 10
18722: PPUSH
18723: CALL_OW 237
18727: GO 18707
18729: POP
18730: POP
// end ;
18731: GO 18691
18733: POP
18734: POP
// end ;
18735: LD_VAR 0 1
18739: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18740: LD_INT 0
18742: PPUSH
// uc_side := your_side ;
18743: LD_ADDR_OWVAR 20
18747: PUSH
18748: LD_OWVAR 2
18752: ST_TO_ADDR
// uc_nation := nation ;
18753: LD_ADDR_OWVAR 21
18757: PUSH
18758: LD_VAR 0 1
18762: ST_TO_ADDR
// InitHc ;
18763: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18767: LD_INT 0
18769: PPUSH
18770: LD_VAR 0 2
18774: PPUSH
18775: LD_VAR 0 3
18779: PPUSH
18780: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18784: LD_VAR 0 4
18788: PPUSH
18789: LD_VAR 0 5
18793: PPUSH
18794: CALL_OW 428
18798: PUSH
18799: LD_INT 0
18801: EQUAL
18802: IFFALSE 18826
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18804: CALL_OW 44
18808: PPUSH
18809: LD_VAR 0 4
18813: PPUSH
18814: LD_VAR 0 5
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 48
// end ;
18826: LD_VAR 0 6
18830: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18831: LD_INT 0
18833: PPUSH
18834: PPUSH
// uc_side := your_side ;
18835: LD_ADDR_OWVAR 20
18839: PUSH
18840: LD_OWVAR 2
18844: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: LD_INT 4
18861: PUSH
18862: LD_INT 5
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: IN
18872: IFFALSE 18884
// uc_nation := nation_american else
18874: LD_ADDR_OWVAR 21
18878: PUSH
18879: LD_INT 1
18881: ST_TO_ADDR
18882: GO 18927
// if chassis in [ 11 , 12 , 13 , 14 ] then
18884: LD_VAR 0 1
18888: PUSH
18889: LD_INT 11
18891: PUSH
18892: LD_INT 12
18894: PUSH
18895: LD_INT 13
18897: PUSH
18898: LD_INT 14
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: IN
18907: IFFALSE 18919
// uc_nation := nation_arabian else
18909: LD_ADDR_OWVAR 21
18913: PUSH
18914: LD_INT 2
18916: ST_TO_ADDR
18917: GO 18927
// uc_nation := nation_russian ;
18919: LD_ADDR_OWVAR 21
18923: PUSH
18924: LD_INT 3
18926: ST_TO_ADDR
// vc_chassis := chassis ;
18927: LD_ADDR_OWVAR 37
18931: PUSH
18932: LD_VAR 0 1
18936: ST_TO_ADDR
// vc_engine := engine ;
18937: LD_ADDR_OWVAR 39
18941: PUSH
18942: LD_VAR 0 2
18946: ST_TO_ADDR
// vc_control := control ;
18947: LD_ADDR_OWVAR 38
18951: PUSH
18952: LD_VAR 0 3
18956: ST_TO_ADDR
// vc_weapon := weapon ;
18957: LD_ADDR_OWVAR 40
18961: PUSH
18962: LD_VAR 0 4
18966: ST_TO_ADDR
// un := CreateVehicle ;
18967: LD_ADDR_VAR 0 8
18971: PUSH
18972: CALL_OW 45
18976: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18977: LD_VAR 0 8
18981: PPUSH
18982: LD_INT 0
18984: PPUSH
18985: LD_INT 5
18987: PPUSH
18988: CALL_OW 12
18992: PPUSH
18993: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18997: LD_VAR 0 8
19001: PPUSH
19002: LD_VAR 0 5
19006: PPUSH
19007: LD_VAR 0 6
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 48
// end ;
19019: LD_VAR 0 7
19023: RET
// export hInvincible ; every 1 do
19024: GO 19026
19026: DISABLE
// hInvincible := [ ] ;
19027: LD_ADDR_EXP 73
19031: PUSH
19032: EMPTY
19033: ST_TO_ADDR
19034: END
// every 10 do var i ;
19035: GO 19037
19037: DISABLE
19038: LD_INT 0
19040: PPUSH
// begin enable ;
19041: ENABLE
// if not hInvincible then
19042: LD_EXP 73
19046: NOT
19047: IFFALSE 19051
// exit ;
19049: GO 19095
// for i in hInvincible do
19051: LD_ADDR_VAR 0 1
19055: PUSH
19056: LD_EXP 73
19060: PUSH
19061: FOR_IN
19062: IFFALSE 19093
// if GetLives ( i ) < 1000 then
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 256
19073: PUSH
19074: LD_INT 1000
19076: LESS
19077: IFFALSE 19091
// SetLives ( i , 1000 ) ;
19079: LD_VAR 0 1
19083: PPUSH
19084: LD_INT 1000
19086: PPUSH
19087: CALL_OW 234
19091: GO 19061
19093: POP
19094: POP
// end ;
19095: PPOPN 1
19097: END
// export function hHackInvincible ; var i ; begin
19098: LD_INT 0
19100: PPUSH
19101: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19102: LD_ADDR_VAR 0 2
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_INT 21
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 21
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: PPUSH
19135: CALL_OW 69
19139: PUSH
19140: FOR_IN
19141: IFFALSE 19202
// if IsSelected ( i ) then
19143: LD_VAR 0 2
19147: PPUSH
19148: CALL_OW 306
19152: IFFALSE 19200
// begin if i in hInvincible then
19154: LD_VAR 0 2
19158: PUSH
19159: LD_EXP 73
19163: IN
19164: IFFALSE 19184
// hInvincible := hInvincible diff i else
19166: LD_ADDR_EXP 73
19170: PUSH
19171: LD_EXP 73
19175: PUSH
19176: LD_VAR 0 2
19180: DIFF
19181: ST_TO_ADDR
19182: GO 19200
// hInvincible := hInvincible union i ;
19184: LD_ADDR_EXP 73
19188: PUSH
19189: LD_EXP 73
19193: PUSH
19194: LD_VAR 0 2
19198: UNION
19199: ST_TO_ADDR
// end ;
19200: GO 19140
19202: POP
19203: POP
// end ;
19204: LD_VAR 0 1
19208: RET
// export function hHackInvisible ; var i , j ; begin
19209: LD_INT 0
19211: PPUSH
19212: PPUSH
19213: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19214: LD_ADDR_VAR 0 2
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 69
19233: PUSH
19234: FOR_IN
19235: IFFALSE 19259
// if IsSelected ( i ) then
19237: LD_VAR 0 2
19241: PPUSH
19242: CALL_OW 306
19246: IFFALSE 19257
// ComForceInvisible ( i ) ;
19248: LD_VAR 0 2
19252: PPUSH
19253: CALL_OW 496
19257: GO 19234
19259: POP
19260: POP
// end ;
19261: LD_VAR 0 1
19265: RET
// export function hHackChangeYourSide ; begin
19266: LD_INT 0
19268: PPUSH
// if your_side = 8 then
19269: LD_OWVAR 2
19273: PUSH
19274: LD_INT 8
19276: EQUAL
19277: IFFALSE 19289
// your_side := 0 else
19279: LD_ADDR_OWVAR 2
19283: PUSH
19284: LD_INT 0
19286: ST_TO_ADDR
19287: GO 19303
// your_side := your_side + 1 ;
19289: LD_ADDR_OWVAR 2
19293: PUSH
19294: LD_OWVAR 2
19298: PUSH
19299: LD_INT 1
19301: PLUS
19302: ST_TO_ADDR
// end ;
19303: LD_VAR 0 1
19307: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
// for i in all_units do
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_OWVAR 3
19322: PUSH
19323: FOR_IN
19324: IFFALSE 19402
// if IsSelected ( i ) then
19326: LD_VAR 0 2
19330: PPUSH
19331: CALL_OW 306
19335: IFFALSE 19400
// begin j := GetSide ( i ) ;
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_VAR 0 2
19346: PPUSH
19347: CALL_OW 255
19351: ST_TO_ADDR
// if j = 8 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 8
19359: EQUAL
19360: IFFALSE 19372
// j := 0 else
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: LD_INT 0
19369: ST_TO_ADDR
19370: GO 19386
// j := j + 1 ;
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 1
19384: PLUS
19385: ST_TO_ADDR
// SetSide ( i , j ) ;
19386: LD_VAR 0 2
19390: PPUSH
19391: LD_VAR 0 3
19395: PPUSH
19396: CALL_OW 235
// end ;
19400: GO 19323
19402: POP
19403: POP
// end ;
19404: LD_VAR 0 1
19408: RET
// export function hHackFog ; begin
19409: LD_INT 0
19411: PPUSH
// FogOff ( true ) ;
19412: LD_INT 1
19414: PPUSH
19415: CALL_OW 344
// end ;
19419: LD_VAR 0 1
19423: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19424: LD_INT 0
19426: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19427: LD_VAR 0 1
19431: PPUSH
19432: LD_VAR 0 2
19436: PPUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: LD_INT 1
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 483
// CenterOnXY ( x , y ) ;
19452: LD_VAR 0 2
19456: PPUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: CALL_OW 84
// end ;
19466: LD_VAR 0 4
19470: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19475: LD_VAR 0 1
19479: NOT
19480: PUSH
19481: LD_VAR 0 2
19485: PPUSH
19486: LD_VAR 0 3
19490: PPUSH
19491: CALL_OW 488
19495: NOT
19496: OR
19497: PUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 266
19507: PUSH
19508: LD_INT 3
19510: NONEQUAL
19511: PUSH
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 247
19521: PUSH
19522: LD_INT 1
19524: EQUAL
19525: NOT
19526: AND
19527: OR
19528: IFFALSE 19532
// exit ;
19530: GO 19681
// if GetType ( factory ) = unit_human then
19532: LD_VAR 0 1
19536: PPUSH
19537: CALL_OW 247
19541: PUSH
19542: LD_INT 1
19544: EQUAL
19545: IFFALSE 19562
// factory := IsInUnit ( factory ) ;
19547: LD_ADDR_VAR 0 1
19551: PUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 310
19561: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 266
19571: PUSH
19572: LD_INT 3
19574: NONEQUAL
19575: IFFALSE 19579
// exit ;
19577: GO 19681
// if HexInfo ( x , y ) = factory then
19579: LD_VAR 0 2
19583: PPUSH
19584: LD_VAR 0 3
19588: PPUSH
19589: CALL_OW 428
19593: PUSH
19594: LD_VAR 0 1
19598: EQUAL
19599: IFFALSE 19626
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19601: LD_ADDR_EXP 74
19605: PUSH
19606: LD_EXP 74
19610: PPUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: LD_INT 0
19618: PPUSH
19619: CALL_OW 1
19623: ST_TO_ADDR
19624: GO 19677
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19626: LD_ADDR_EXP 74
19630: PUSH
19631: LD_EXP 74
19635: PPUSH
19636: LD_VAR 0 1
19640: PPUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 255
19650: PUSH
19651: LD_VAR 0 1
19655: PUSH
19656: LD_VAR 0 2
19660: PUSH
19661: LD_VAR 0 3
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: PPUSH
19672: CALL_OW 1
19676: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19677: CALL 19686 0 0
// end ;
19681: LD_VAR 0 4
19685: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19686: LD_INT 0
19688: PPUSH
19689: PPUSH
19690: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19691: LD_STRING resetFactoryWaypoint();
19693: PPUSH
19694: CALL_OW 559
// if factoryWaypoints then
19698: LD_EXP 74
19702: IFFALSE 19828
// begin list := PrepareArray ( factoryWaypoints ) ;
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_EXP 74
19713: PPUSH
19714: CALL 67288 0 1
19718: ST_TO_ADDR
// for i := 1 to list do
19719: LD_ADDR_VAR 0 2
19723: PUSH
19724: DOUBLE
19725: LD_INT 1
19727: DEC
19728: ST_TO_ADDR
19729: LD_VAR 0 3
19733: PUSH
19734: FOR_TO
19735: IFFALSE 19826
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19737: LD_STRING setFactoryWaypointXY(
19739: PUSH
19740: LD_VAR 0 3
19744: PUSH
19745: LD_VAR 0 2
19749: ARRAY
19750: PUSH
19751: LD_INT 1
19753: ARRAY
19754: STR
19755: PUSH
19756: LD_STRING ,
19758: STR
19759: PUSH
19760: LD_VAR 0 3
19764: PUSH
19765: LD_VAR 0 2
19769: ARRAY
19770: PUSH
19771: LD_INT 2
19773: ARRAY
19774: STR
19775: PUSH
19776: LD_STRING ,
19778: STR
19779: PUSH
19780: LD_VAR 0 3
19784: PUSH
19785: LD_VAR 0 2
19789: ARRAY
19790: PUSH
19791: LD_INT 3
19793: ARRAY
19794: STR
19795: PUSH
19796: LD_STRING ,
19798: STR
19799: PUSH
19800: LD_VAR 0 3
19804: PUSH
19805: LD_VAR 0 2
19809: ARRAY
19810: PUSH
19811: LD_INT 4
19813: ARRAY
19814: STR
19815: PUSH
19816: LD_STRING )
19818: STR
19819: PPUSH
19820: CALL_OW 559
19824: GO 19734
19826: POP
19827: POP
// end ; end ;
19828: LD_VAR 0 1
19832: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19833: LD_INT 0
19835: PPUSH
// if HexInfo ( x , y ) = warehouse then
19836: LD_VAR 0 2
19840: PPUSH
19841: LD_VAR 0 3
19845: PPUSH
19846: CALL_OW 428
19850: PUSH
19851: LD_VAR 0 1
19855: EQUAL
19856: IFFALSE 19883
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19858: LD_ADDR_EXP 75
19862: PUSH
19863: LD_EXP 75
19867: PPUSH
19868: LD_VAR 0 1
19872: PPUSH
19873: LD_INT 0
19875: PPUSH
19876: CALL_OW 1
19880: ST_TO_ADDR
19881: GO 19934
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19883: LD_ADDR_EXP 75
19887: PUSH
19888: LD_EXP 75
19892: PPUSH
19893: LD_VAR 0 1
19897: PPUSH
19898: LD_VAR 0 1
19902: PPUSH
19903: CALL_OW 255
19907: PUSH
19908: LD_VAR 0 1
19912: PUSH
19913: LD_VAR 0 2
19917: PUSH
19918: LD_VAR 0 3
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: PPUSH
19929: CALL_OW 1
19933: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19934: CALL 19943 0 0
// end ;
19938: LD_VAR 0 4
19942: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19943: LD_INT 0
19945: PPUSH
19946: PPUSH
19947: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19948: LD_STRING resetWarehouseGatheringPoints();
19950: PPUSH
19951: CALL_OW 559
// if warehouseGatheringPoints then
19955: LD_EXP 75
19959: IFFALSE 20085
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19961: LD_ADDR_VAR 0 3
19965: PUSH
19966: LD_EXP 75
19970: PPUSH
19971: CALL 67288 0 1
19975: ST_TO_ADDR
// for i := 1 to list do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: DOUBLE
19982: LD_INT 1
19984: DEC
19985: ST_TO_ADDR
19986: LD_VAR 0 3
19990: PUSH
19991: FOR_TO
19992: IFFALSE 20083
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19994: LD_STRING setWarehouseGatheringPointXY(
19996: PUSH
19997: LD_VAR 0 3
20001: PUSH
20002: LD_VAR 0 2
20006: ARRAY
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: STR
20012: PUSH
20013: LD_STRING ,
20015: STR
20016: PUSH
20017: LD_VAR 0 3
20021: PUSH
20022: LD_VAR 0 2
20026: ARRAY
20027: PUSH
20028: LD_INT 2
20030: ARRAY
20031: STR
20032: PUSH
20033: LD_STRING ,
20035: STR
20036: PUSH
20037: LD_VAR 0 3
20041: PUSH
20042: LD_VAR 0 2
20046: ARRAY
20047: PUSH
20048: LD_INT 3
20050: ARRAY
20051: STR
20052: PUSH
20053: LD_STRING ,
20055: STR
20056: PUSH
20057: LD_VAR 0 3
20061: PUSH
20062: LD_VAR 0 2
20066: ARRAY
20067: PUSH
20068: LD_INT 4
20070: ARRAY
20071: STR
20072: PUSH
20073: LD_STRING )
20075: STR
20076: PPUSH
20077: CALL_OW 559
20081: GO 19991
20083: POP
20084: POP
// end ; end ;
20085: LD_VAR 0 1
20089: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20090: LD_EXP 75
20094: IFFALSE 20779
20096: GO 20098
20098: DISABLE
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
20103: PPUSH
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
20109: PPUSH
// begin enable ;
20110: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20111: LD_ADDR_VAR 0 3
20115: PUSH
20116: LD_EXP 75
20120: PPUSH
20121: CALL 67288 0 1
20125: ST_TO_ADDR
// if not list then
20126: LD_VAR 0 3
20130: NOT
20131: IFFALSE 20135
// exit ;
20133: GO 20779
// for i := 1 to list do
20135: LD_ADDR_VAR 0 1
20139: PUSH
20140: DOUBLE
20141: LD_INT 1
20143: DEC
20144: ST_TO_ADDR
20145: LD_VAR 0 3
20149: PUSH
20150: FOR_TO
20151: IFFALSE 20777
// begin depot := list [ i ] [ 2 ] ;
20153: LD_ADDR_VAR 0 8
20157: PUSH
20158: LD_VAR 0 3
20162: PUSH
20163: LD_VAR 0 1
20167: ARRAY
20168: PUSH
20169: LD_INT 2
20171: ARRAY
20172: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20173: LD_ADDR_VAR 0 5
20177: PUSH
20178: LD_VAR 0 3
20182: PUSH
20183: LD_VAR 0 1
20187: ARRAY
20188: PUSH
20189: LD_INT 1
20191: ARRAY
20192: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20193: LD_VAR 0 8
20197: PPUSH
20198: CALL_OW 301
20202: PUSH
20203: LD_VAR 0 5
20207: PUSH
20208: LD_VAR 0 8
20212: PPUSH
20213: CALL_OW 255
20217: NONEQUAL
20218: OR
20219: IFFALSE 20248
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20221: LD_ADDR_EXP 75
20225: PUSH
20226: LD_EXP 75
20230: PPUSH
20231: LD_VAR 0 8
20235: PPUSH
20236: LD_INT 0
20238: PPUSH
20239: CALL_OW 1
20243: ST_TO_ADDR
// exit ;
20244: POP
20245: POP
20246: GO 20779
// end ; x := list [ i ] [ 3 ] ;
20248: LD_ADDR_VAR 0 6
20252: PUSH
20253: LD_VAR 0 3
20257: PUSH
20258: LD_VAR 0 1
20262: ARRAY
20263: PUSH
20264: LD_INT 3
20266: ARRAY
20267: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20268: LD_ADDR_VAR 0 7
20272: PUSH
20273: LD_VAR 0 3
20277: PUSH
20278: LD_VAR 0 1
20282: ARRAY
20283: PUSH
20284: LD_INT 4
20286: ARRAY
20287: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20288: LD_ADDR_VAR 0 9
20292: PUSH
20293: LD_VAR 0 6
20297: PPUSH
20298: LD_VAR 0 7
20302: PPUSH
20303: LD_INT 16
20305: PPUSH
20306: CALL 65876 0 3
20310: ST_TO_ADDR
// if not cratesNearbyPoint then
20311: LD_VAR 0 9
20315: NOT
20316: IFFALSE 20322
// exit ;
20318: POP
20319: POP
20320: GO 20779
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20322: LD_ADDR_VAR 0 4
20326: PUSH
20327: LD_INT 22
20329: PUSH
20330: LD_VAR 0 5
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 3
20341: PUSH
20342: LD_INT 60
20344: PUSH
20345: EMPTY
20346: LIST
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 91
20354: PUSH
20355: LD_VAR 0 8
20359: PUSH
20360: LD_INT 6
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 2
20370: PUSH
20371: LD_INT 25
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 25
20383: PUSH
20384: LD_INT 16
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: PPUSH
20402: CALL_OW 69
20406: PUSH
20407: LD_VAR 0 8
20411: PPUSH
20412: CALL_OW 313
20416: PPUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 60
20422: PUSH
20423: EMPTY
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: LD_INT 25
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 16
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PPUSH
20462: CALL_OW 72
20466: UNION
20467: ST_TO_ADDR
// if tmp then
20468: LD_VAR 0 4
20472: IFFALSE 20552
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20474: LD_ADDR_VAR 0 4
20478: PUSH
20479: LD_VAR 0 4
20483: PPUSH
20484: LD_INT 3
20486: PPUSH
20487: CALL 63845 0 2
20491: ST_TO_ADDR
// for j in tmp do
20492: LD_ADDR_VAR 0 2
20496: PUSH
20497: LD_VAR 0 4
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20546
// begin if IsInUnit ( j ) then
20505: LD_VAR 0 2
20509: PPUSH
20510: CALL_OW 310
20514: IFFALSE 20525
// ComExit ( j ) ;
20516: LD_VAR 0 2
20520: PPUSH
20521: CALL 63928 0 1
// AddComCollect ( j , x , y ) ;
20525: LD_VAR 0 2
20529: PPUSH
20530: LD_VAR 0 6
20534: PPUSH
20535: LD_VAR 0 7
20539: PPUSH
20540: CALL_OW 177
// end ;
20544: GO 20502
20546: POP
20547: POP
// exit ;
20548: POP
20549: POP
20550: GO 20779
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20552: LD_ADDR_VAR 0 4
20556: PUSH
20557: LD_INT 22
20559: PUSH
20560: LD_VAR 0 5
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 91
20571: PUSH
20572: LD_VAR 0 8
20576: PUSH
20577: LD_INT 8
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: LD_INT 34
20590: PUSH
20591: LD_INT 12
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 34
20600: PUSH
20601: LD_INT 51
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 34
20610: PUSH
20611: LD_INT 32
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 34
20620: PUSH
20621: LD_INT 89
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: PPUSH
20640: CALL_OW 69
20644: ST_TO_ADDR
// if tmp then
20645: LD_VAR 0 4
20649: IFFALSE 20775
// begin for j in tmp do
20651: LD_ADDR_VAR 0 2
20655: PUSH
20656: LD_VAR 0 4
20660: PUSH
20661: FOR_IN
20662: IFFALSE 20773
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20664: LD_VAR 0 2
20668: PPUSH
20669: CALL_OW 262
20673: PUSH
20674: LD_INT 3
20676: EQUAL
20677: PUSH
20678: LD_VAR 0 2
20682: PPUSH
20683: CALL_OW 261
20687: PUSH
20688: LD_INT 20
20690: GREATER
20691: OR
20692: PUSH
20693: LD_VAR 0 2
20697: PPUSH
20698: CALL_OW 314
20702: NOT
20703: AND
20704: PUSH
20705: LD_VAR 0 2
20709: PPUSH
20710: CALL_OW 263
20714: PUSH
20715: LD_INT 1
20717: NONEQUAL
20718: PUSH
20719: LD_VAR 0 2
20723: PPUSH
20724: CALL_OW 311
20728: OR
20729: AND
20730: IFFALSE 20771
// begin ComCollect ( j , x , y ) ;
20732: LD_VAR 0 2
20736: PPUSH
20737: LD_VAR 0 6
20741: PPUSH
20742: LD_VAR 0 7
20746: PPUSH
20747: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20751: LD_VAR 0 2
20755: PPUSH
20756: LD_VAR 0 8
20760: PPUSH
20761: CALL_OW 172
// exit ;
20765: POP
20766: POP
20767: POP
20768: POP
20769: GO 20779
// end ;
20771: GO 20661
20773: POP
20774: POP
// end ; end ;
20775: GO 20150
20777: POP
20778: POP
// end ; end_of_file
20779: PPOPN 9
20781: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20782: LD_INT 0
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 264
20797: PUSH
20798: LD_INT 91
20800: EQUAL
20801: IFFALSE 20873
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20803: LD_INT 68
20805: PPUSH
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL_OW 255
20815: PPUSH
20816: CALL_OW 321
20820: PUSH
20821: LD_INT 2
20823: EQUAL
20824: IFFALSE 20836
// eff := 70 else
20826: LD_ADDR_VAR 0 4
20830: PUSH
20831: LD_INT 70
20833: ST_TO_ADDR
20834: GO 20844
// eff := 30 ;
20836: LD_ADDR_VAR 0 4
20840: PUSH
20841: LD_INT 30
20843: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20844: LD_VAR 0 1
20848: PPUSH
20849: CALL_OW 250
20853: PPUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 251
20863: PPUSH
20864: LD_VAR 0 4
20868: PPUSH
20869: CALL_OW 495
// end ; end ;
20873: LD_VAR 0 2
20877: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20878: LD_INT 0
20880: PPUSH
// end ;
20881: LD_VAR 0 4
20885: RET
// export function SOS_Command ( cmd ) ; begin
20886: LD_INT 0
20888: PPUSH
// end ;
20889: LD_VAR 0 2
20893: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20894: LD_INT 0
20896: PPUSH
// end ;
20897: LD_VAR 0 6
20901: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20902: LD_INT 0
20904: PPUSH
20905: PPUSH
// if not vehicle or not factory then
20906: LD_VAR 0 1
20910: NOT
20911: PUSH
20912: LD_VAR 0 2
20916: NOT
20917: OR
20918: IFFALSE 20922
// exit ;
20920: GO 21153
// if factoryWaypoints >= factory then
20922: LD_EXP 74
20926: PUSH
20927: LD_VAR 0 2
20931: GREATEREQUAL
20932: IFFALSE 21153
// if factoryWaypoints [ factory ] then
20934: LD_EXP 74
20938: PUSH
20939: LD_VAR 0 2
20943: ARRAY
20944: IFFALSE 21153
// begin if GetControl ( vehicle ) = control_manual then
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 263
20955: PUSH
20956: LD_INT 1
20958: EQUAL
20959: IFFALSE 21040
// begin driver := IsDrivenBy ( vehicle ) ;
20961: LD_ADDR_VAR 0 4
20965: PUSH
20966: LD_VAR 0 1
20970: PPUSH
20971: CALL_OW 311
20975: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20976: LD_VAR 0 4
20980: PPUSH
20981: LD_EXP 74
20985: PUSH
20986: LD_VAR 0 2
20990: ARRAY
20991: PUSH
20992: LD_INT 3
20994: ARRAY
20995: PPUSH
20996: LD_EXP 74
21000: PUSH
21001: LD_VAR 0 2
21005: ARRAY
21006: PUSH
21007: LD_INT 4
21009: ARRAY
21010: PPUSH
21011: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21015: LD_VAR 0 4
21019: PPUSH
21020: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21024: LD_VAR 0 4
21028: PPUSH
21029: LD_VAR 0 2
21033: PPUSH
21034: CALL_OW 180
// end else
21038: GO 21153
// if GetControl ( vehicle ) = control_remote then
21040: LD_VAR 0 1
21044: PPUSH
21045: CALL_OW 263
21049: PUSH
21050: LD_INT 2
21052: EQUAL
21053: IFFALSE 21114
// begin wait ( 0 0$2 ) ;
21055: LD_INT 70
21057: PPUSH
21058: CALL_OW 67
// if Connect ( vehicle ) then
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL 34147 0 1
21071: IFFALSE 21112
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21073: LD_VAR 0 1
21077: PPUSH
21078: LD_EXP 74
21082: PUSH
21083: LD_VAR 0 2
21087: ARRAY
21088: PUSH
21089: LD_INT 3
21091: ARRAY
21092: PPUSH
21093: LD_EXP 74
21097: PUSH
21098: LD_VAR 0 2
21102: ARRAY
21103: PUSH
21104: LD_INT 4
21106: ARRAY
21107: PPUSH
21108: CALL_OW 171
// end else
21112: GO 21153
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21114: LD_VAR 0 1
21118: PPUSH
21119: LD_EXP 74
21123: PUSH
21124: LD_VAR 0 2
21128: ARRAY
21129: PUSH
21130: LD_INT 3
21132: ARRAY
21133: PPUSH
21134: LD_EXP 74
21138: PUSH
21139: LD_VAR 0 2
21143: ARRAY
21144: PUSH
21145: LD_INT 4
21147: ARRAY
21148: PPUSH
21149: CALL_OW 171
// end ; end ;
21153: LD_VAR 0 3
21157: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21158: LD_INT 0
21160: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21161: LD_VAR 0 1
21165: PUSH
21166: LD_INT 250
21168: EQUAL
21169: PUSH
21170: LD_VAR 0 2
21174: PPUSH
21175: CALL_OW 264
21179: PUSH
21180: LD_INT 81
21182: EQUAL
21183: AND
21184: IFFALSE 21205
// MinerPlaceMine ( unit , x , y ) ;
21186: LD_VAR 0 2
21190: PPUSH
21191: LD_VAR 0 4
21195: PPUSH
21196: LD_VAR 0 5
21200: PPUSH
21201: CALL 24195 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21205: LD_VAR 0 1
21209: PUSH
21210: LD_INT 251
21212: EQUAL
21213: PUSH
21214: LD_VAR 0 2
21218: PPUSH
21219: CALL_OW 264
21223: PUSH
21224: LD_INT 81
21226: EQUAL
21227: AND
21228: IFFALSE 21249
// MinerDetonateMine ( unit , x , y ) ;
21230: LD_VAR 0 2
21234: PPUSH
21235: LD_VAR 0 4
21239: PPUSH
21240: LD_VAR 0 5
21244: PPUSH
21245: CALL 24470 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21249: LD_VAR 0 1
21253: PUSH
21254: LD_INT 252
21256: EQUAL
21257: PUSH
21258: LD_VAR 0 2
21262: PPUSH
21263: CALL_OW 264
21267: PUSH
21268: LD_INT 81
21270: EQUAL
21271: AND
21272: IFFALSE 21293
// MinerCreateMinefield ( unit , x , y ) ;
21274: LD_VAR 0 2
21278: PPUSH
21279: LD_VAR 0 4
21283: PPUSH
21284: LD_VAR 0 5
21288: PPUSH
21289: CALL 24887 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21293: LD_VAR 0 1
21297: PUSH
21298: LD_INT 253
21300: EQUAL
21301: PUSH
21302: LD_VAR 0 2
21306: PPUSH
21307: CALL_OW 257
21311: PUSH
21312: LD_INT 5
21314: EQUAL
21315: AND
21316: IFFALSE 21337
// ComBinocular ( unit , x , y ) ;
21318: LD_VAR 0 2
21322: PPUSH
21323: LD_VAR 0 4
21327: PPUSH
21328: LD_VAR 0 5
21332: PPUSH
21333: CALL 25256 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21337: LD_VAR 0 1
21341: PUSH
21342: LD_INT 254
21344: EQUAL
21345: PUSH
21346: LD_VAR 0 2
21350: PPUSH
21351: CALL_OW 264
21355: PUSH
21356: LD_INT 99
21358: EQUAL
21359: AND
21360: PUSH
21361: LD_VAR 0 3
21365: PPUSH
21366: CALL_OW 263
21370: PUSH
21371: LD_INT 3
21373: EQUAL
21374: AND
21375: IFFALSE 21391
// HackDestroyVehicle ( unit , selectedUnit ) ;
21377: LD_VAR 0 2
21381: PPUSH
21382: LD_VAR 0 3
21386: PPUSH
21387: CALL 23559 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21391: LD_VAR 0 1
21395: PUSH
21396: LD_INT 255
21398: EQUAL
21399: PUSH
21400: LD_VAR 0 2
21404: PPUSH
21405: CALL_OW 264
21409: PUSH
21410: LD_INT 14
21412: PUSH
21413: LD_INT 53
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: IN
21420: AND
21421: PUSH
21422: LD_VAR 0 4
21426: PPUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: CALL_OW 488
21436: AND
21437: IFFALSE 21461
// CutTreeXYR ( unit , x , y , 12 ) ;
21439: LD_VAR 0 2
21443: PPUSH
21444: LD_VAR 0 4
21448: PPUSH
21449: LD_VAR 0 5
21453: PPUSH
21454: LD_INT 12
21456: PPUSH
21457: CALL 21556 0 4
// if cmd = 256 then
21461: LD_VAR 0 1
21465: PUSH
21466: LD_INT 256
21468: EQUAL
21469: IFFALSE 21490
// SetFactoryWaypoint ( unit , x , y ) ;
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_VAR 0 4
21480: PPUSH
21481: LD_VAR 0 5
21485: PPUSH
21486: CALL 19471 0 3
// if cmd = 257 then
21490: LD_VAR 0 1
21494: PUSH
21495: LD_INT 257
21497: EQUAL
21498: IFFALSE 21519
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21500: LD_VAR 0 2
21504: PPUSH
21505: LD_VAR 0 4
21509: PPUSH
21510: LD_VAR 0 5
21514: PPUSH
21515: CALL 19833 0 3
// if cmd = 258 then
21519: LD_VAR 0 1
21523: PUSH
21524: LD_INT 258
21526: EQUAL
21527: IFFALSE 21551
// BurnTreeXYR ( unit , x , y , 8 ) ;
21529: LD_VAR 0 2
21533: PPUSH
21534: LD_VAR 0 4
21538: PPUSH
21539: LD_VAR 0 5
21543: PPUSH
21544: LD_INT 8
21546: PPUSH
21547: CALL 21950 0 4
// end ;
21551: LD_VAR 0 6
21555: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21556: LD_INT 0
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 302
21576: NOT
21577: PUSH
21578: LD_VAR 0 2
21582: PPUSH
21583: LD_VAR 0 3
21587: PPUSH
21588: CALL_OW 488
21592: NOT
21593: OR
21594: PUSH
21595: LD_VAR 0 4
21599: NOT
21600: OR
21601: IFFALSE 21605
// exit ;
21603: GO 21945
// list := [ ] ;
21605: LD_ADDR_VAR 0 13
21609: PUSH
21610: EMPTY
21611: ST_TO_ADDR
// if x - r < 0 then
21612: LD_VAR 0 2
21616: PUSH
21617: LD_VAR 0 4
21621: MINUS
21622: PUSH
21623: LD_INT 0
21625: LESS
21626: IFFALSE 21638
// min_x := 0 else
21628: LD_ADDR_VAR 0 7
21632: PUSH
21633: LD_INT 0
21635: ST_TO_ADDR
21636: GO 21654
// min_x := x - r ;
21638: LD_ADDR_VAR 0 7
21642: PUSH
21643: LD_VAR 0 2
21647: PUSH
21648: LD_VAR 0 4
21652: MINUS
21653: ST_TO_ADDR
// if y - r < 0 then
21654: LD_VAR 0 3
21658: PUSH
21659: LD_VAR 0 4
21663: MINUS
21664: PUSH
21665: LD_INT 0
21667: LESS
21668: IFFALSE 21680
// min_y := 0 else
21670: LD_ADDR_VAR 0 8
21674: PUSH
21675: LD_INT 0
21677: ST_TO_ADDR
21678: GO 21696
// min_y := y - r ;
21680: LD_ADDR_VAR 0 8
21684: PUSH
21685: LD_VAR 0 3
21689: PUSH
21690: LD_VAR 0 4
21694: MINUS
21695: ST_TO_ADDR
// max_x := x + r ;
21696: LD_ADDR_VAR 0 9
21700: PUSH
21701: LD_VAR 0 2
21705: PUSH
21706: LD_VAR 0 4
21710: PLUS
21711: ST_TO_ADDR
// max_y := y + r ;
21712: LD_ADDR_VAR 0 10
21716: PUSH
21717: LD_VAR 0 3
21721: PUSH
21722: LD_VAR 0 4
21726: PLUS
21727: ST_TO_ADDR
// for _x = min_x to max_x do
21728: LD_ADDR_VAR 0 11
21732: PUSH
21733: DOUBLE
21734: LD_VAR 0 7
21738: DEC
21739: ST_TO_ADDR
21740: LD_VAR 0 9
21744: PUSH
21745: FOR_TO
21746: IFFALSE 21863
// for _y = min_y to max_y do
21748: LD_ADDR_VAR 0 12
21752: PUSH
21753: DOUBLE
21754: LD_VAR 0 8
21758: DEC
21759: ST_TO_ADDR
21760: LD_VAR 0 10
21764: PUSH
21765: FOR_TO
21766: IFFALSE 21859
// begin if not ValidHex ( _x , _y ) then
21768: LD_VAR 0 11
21772: PPUSH
21773: LD_VAR 0 12
21777: PPUSH
21778: CALL_OW 488
21782: NOT
21783: IFFALSE 21787
// continue ;
21785: GO 21765
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21787: LD_VAR 0 11
21791: PPUSH
21792: LD_VAR 0 12
21796: PPUSH
21797: CALL_OW 351
21801: PUSH
21802: LD_VAR 0 11
21806: PPUSH
21807: LD_VAR 0 12
21811: PPUSH
21812: CALL_OW 554
21816: AND
21817: IFFALSE 21857
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21819: LD_ADDR_VAR 0 13
21823: PUSH
21824: LD_VAR 0 13
21828: PPUSH
21829: LD_VAR 0 13
21833: PUSH
21834: LD_INT 1
21836: PLUS
21837: PPUSH
21838: LD_VAR 0 11
21842: PUSH
21843: LD_VAR 0 12
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PPUSH
21852: CALL_OW 2
21856: ST_TO_ADDR
// end ;
21857: GO 21765
21859: POP
21860: POP
21861: GO 21745
21863: POP
21864: POP
// if not list then
21865: LD_VAR 0 13
21869: NOT
21870: IFFALSE 21874
// exit ;
21872: GO 21945
// for i in list do
21874: LD_ADDR_VAR 0 6
21878: PUSH
21879: LD_VAR 0 13
21883: PUSH
21884: FOR_IN
21885: IFFALSE 21943
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_STRING M
21894: PUSH
21895: LD_VAR 0 6
21899: PUSH
21900: LD_INT 1
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 6
21908: PUSH
21909: LD_INT 2
21911: ARRAY
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: LD_INT 0
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: PPUSH
21937: CALL_OW 447
21941: GO 21884
21943: POP
21944: POP
// end ;
21945: LD_VAR 0 5
21949: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
21950: LD_INT 0
21952: PPUSH
21953: PPUSH
21954: PPUSH
21955: PPUSH
21956: PPUSH
21957: PPUSH
21958: PPUSH
21959: PPUSH
21960: PPUSH
21961: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21962: LD_VAR 0 1
21966: PPUSH
21967: CALL_OW 302
21971: NOT
21972: PUSH
21973: LD_VAR 0 2
21977: PPUSH
21978: LD_VAR 0 3
21982: PPUSH
21983: CALL_OW 488
21987: NOT
21988: OR
21989: PUSH
21990: LD_VAR 0 4
21994: NOT
21995: OR
21996: IFFALSE 22000
// exit ;
21998: GO 22513
// list := [ ] ;
22000: LD_ADDR_VAR 0 13
22004: PUSH
22005: EMPTY
22006: ST_TO_ADDR
// if x - r < 0 then
22007: LD_VAR 0 2
22011: PUSH
22012: LD_VAR 0 4
22016: MINUS
22017: PUSH
22018: LD_INT 0
22020: LESS
22021: IFFALSE 22033
// min_x := 0 else
22023: LD_ADDR_VAR 0 7
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
22031: GO 22049
// min_x := x - r ;
22033: LD_ADDR_VAR 0 7
22037: PUSH
22038: LD_VAR 0 2
22042: PUSH
22043: LD_VAR 0 4
22047: MINUS
22048: ST_TO_ADDR
// if y - r < 0 then
22049: LD_VAR 0 3
22053: PUSH
22054: LD_VAR 0 4
22058: MINUS
22059: PUSH
22060: LD_INT 0
22062: LESS
22063: IFFALSE 22075
// min_y := 0 else
22065: LD_ADDR_VAR 0 8
22069: PUSH
22070: LD_INT 0
22072: ST_TO_ADDR
22073: GO 22091
// min_y := y - r ;
22075: LD_ADDR_VAR 0 8
22079: PUSH
22080: LD_VAR 0 3
22084: PUSH
22085: LD_VAR 0 4
22089: MINUS
22090: ST_TO_ADDR
// max_x := x + r ;
22091: LD_ADDR_VAR 0 9
22095: PUSH
22096: LD_VAR 0 2
22100: PUSH
22101: LD_VAR 0 4
22105: PLUS
22106: ST_TO_ADDR
// max_y := y + r ;
22107: LD_ADDR_VAR 0 10
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_VAR 0 4
22121: PLUS
22122: ST_TO_ADDR
// for _x = min_x to max_x do
22123: LD_ADDR_VAR 0 11
22127: PUSH
22128: DOUBLE
22129: LD_VAR 0 7
22133: DEC
22134: ST_TO_ADDR
22135: LD_VAR 0 9
22139: PUSH
22140: FOR_TO
22141: IFFALSE 22258
// for _y = min_y to max_y do
22143: LD_ADDR_VAR 0 12
22147: PUSH
22148: DOUBLE
22149: LD_VAR 0 8
22153: DEC
22154: ST_TO_ADDR
22155: LD_VAR 0 10
22159: PUSH
22160: FOR_TO
22161: IFFALSE 22254
// begin if not ValidHex ( _x , _y ) then
22163: LD_VAR 0 11
22167: PPUSH
22168: LD_VAR 0 12
22172: PPUSH
22173: CALL_OW 488
22177: NOT
22178: IFFALSE 22182
// continue ;
22180: GO 22160
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22182: LD_VAR 0 11
22186: PPUSH
22187: LD_VAR 0 12
22191: PPUSH
22192: CALL_OW 351
22196: PUSH
22197: LD_VAR 0 11
22201: PPUSH
22202: LD_VAR 0 12
22206: PPUSH
22207: CALL_OW 554
22211: AND
22212: IFFALSE 22252
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22214: LD_ADDR_VAR 0 13
22218: PUSH
22219: LD_VAR 0 13
22223: PPUSH
22224: LD_VAR 0 13
22228: PUSH
22229: LD_INT 1
22231: PLUS
22232: PPUSH
22233: LD_VAR 0 11
22237: PUSH
22238: LD_VAR 0 12
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PPUSH
22247: CALL_OW 2
22251: ST_TO_ADDR
// end ;
22252: GO 22160
22254: POP
22255: POP
22256: GO 22140
22258: POP
22259: POP
// if not list then
22260: LD_VAR 0 13
22264: NOT
22265: IFFALSE 22269
// exit ;
22267: GO 22513
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22269: LD_ADDR_VAR 0 13
22273: PUSH
22274: LD_VAR 0 1
22278: PPUSH
22279: LD_VAR 0 13
22283: PPUSH
22284: LD_INT 1
22286: PPUSH
22287: LD_INT 1
22289: PPUSH
22290: CALL 31289 0 4
22294: ST_TO_ADDR
// ComStop ( flame ) ;
22295: LD_VAR 0 1
22299: PPUSH
22300: CALL_OW 141
// for i in list do
22304: LD_ADDR_VAR 0 6
22308: PUSH
22309: LD_VAR 0 13
22313: PUSH
22314: FOR_IN
22315: IFFALSE 22346
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22317: LD_VAR 0 1
22321: PPUSH
22322: LD_VAR 0 6
22326: PUSH
22327: LD_INT 1
22329: ARRAY
22330: PPUSH
22331: LD_VAR 0 6
22335: PUSH
22336: LD_INT 2
22338: ARRAY
22339: PPUSH
22340: CALL_OW 176
22344: GO 22314
22346: POP
22347: POP
// repeat wait ( 0 0$1 ) ;
22348: LD_INT 35
22350: PPUSH
22351: CALL_OW 67
// task := GetTaskList ( flame ) ;
22355: LD_ADDR_VAR 0 14
22359: PUSH
22360: LD_VAR 0 1
22364: PPUSH
22365: CALL_OW 437
22369: ST_TO_ADDR
// if not task then
22370: LD_VAR 0 14
22374: NOT
22375: IFFALSE 22379
// exit ;
22377: GO 22513
// if task [ 1 ] [ 1 ] <> | then
22379: LD_VAR 0 14
22383: PUSH
22384: LD_INT 1
22386: ARRAY
22387: PUSH
22388: LD_INT 1
22390: ARRAY
22391: PUSH
22392: LD_STRING |
22394: NONEQUAL
22395: IFFALSE 22399
// exit ;
22397: GO 22513
// _x := task [ 1 ] [ 2 ] ;
22399: LD_ADDR_VAR 0 11
22403: PUSH
22404: LD_VAR 0 14
22408: PUSH
22409: LD_INT 1
22411: ARRAY
22412: PUSH
22413: LD_INT 2
22415: ARRAY
22416: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22417: LD_ADDR_VAR 0 12
22421: PUSH
22422: LD_VAR 0 14
22426: PUSH
22427: LD_INT 1
22429: ARRAY
22430: PUSH
22431: LD_INT 3
22433: ARRAY
22434: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22435: LD_VAR 0 11
22439: PPUSH
22440: LD_VAR 0 12
22444: PPUSH
22445: CALL_OW 351
22449: NOT
22450: PUSH
22451: LD_VAR 0 11
22455: PPUSH
22456: LD_VAR 0 12
22460: PPUSH
22461: CALL_OW 554
22465: NOT
22466: OR
22467: IFFALSE 22501
// begin task := Delete ( task , 1 ) ;
22469: LD_ADDR_VAR 0 14
22473: PUSH
22474: LD_VAR 0 14
22478: PPUSH
22479: LD_INT 1
22481: PPUSH
22482: CALL_OW 3
22486: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22487: LD_VAR 0 1
22491: PPUSH
22492: LD_VAR 0 14
22496: PPUSH
22497: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL_OW 314
22510: NOT
22511: IFFALSE 22348
// end ;
22513: LD_VAR 0 5
22517: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22518: LD_EXP 77
22522: NOT
22523: IFFALSE 22573
22525: GO 22527
22527: DISABLE
// begin initHack := true ;
22528: LD_ADDR_EXP 77
22532: PUSH
22533: LD_INT 1
22535: ST_TO_ADDR
// hackTanks := [ ] ;
22536: LD_ADDR_EXP 78
22540: PUSH
22541: EMPTY
22542: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22543: LD_ADDR_EXP 79
22547: PUSH
22548: EMPTY
22549: ST_TO_ADDR
// hackLimit := 3 ;
22550: LD_ADDR_EXP 80
22554: PUSH
22555: LD_INT 3
22557: ST_TO_ADDR
// hackDist := 12 ;
22558: LD_ADDR_EXP 81
22562: PUSH
22563: LD_INT 12
22565: ST_TO_ADDR
// hackCounter := [ ] ;
22566: LD_ADDR_EXP 82
22570: PUSH
22571: EMPTY
22572: ST_TO_ADDR
// end ;
22573: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22574: LD_EXP 77
22578: PUSH
22579: LD_INT 34
22581: PUSH
22582: LD_INT 99
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PPUSH
22589: CALL_OW 69
22593: AND
22594: IFFALSE 22847
22596: GO 22598
22598: DISABLE
22599: LD_INT 0
22601: PPUSH
22602: PPUSH
// begin enable ;
22603: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22604: LD_ADDR_VAR 0 1
22608: PUSH
22609: LD_INT 34
22611: PUSH
22612: LD_INT 99
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PPUSH
22619: CALL_OW 69
22623: PUSH
22624: FOR_IN
22625: IFFALSE 22845
// begin if not i in hackTanks then
22627: LD_VAR 0 1
22631: PUSH
22632: LD_EXP 78
22636: IN
22637: NOT
22638: IFFALSE 22721
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22640: LD_ADDR_EXP 78
22644: PUSH
22645: LD_EXP 78
22649: PPUSH
22650: LD_EXP 78
22654: PUSH
22655: LD_INT 1
22657: PLUS
22658: PPUSH
22659: LD_VAR 0 1
22663: PPUSH
22664: CALL_OW 1
22668: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22669: LD_ADDR_EXP 79
22673: PUSH
22674: LD_EXP 79
22678: PPUSH
22679: LD_EXP 79
22683: PUSH
22684: LD_INT 1
22686: PLUS
22687: PPUSH
22688: EMPTY
22689: PPUSH
22690: CALL_OW 1
22694: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22695: LD_ADDR_EXP 82
22699: PUSH
22700: LD_EXP 82
22704: PPUSH
22705: LD_EXP 82
22709: PUSH
22710: LD_INT 1
22712: PLUS
22713: PPUSH
22714: EMPTY
22715: PPUSH
22716: CALL_OW 1
22720: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22721: LD_VAR 0 1
22725: PPUSH
22726: CALL_OW 302
22730: NOT
22731: IFFALSE 22744
// begin HackUnlinkAll ( i ) ;
22733: LD_VAR 0 1
22737: PPUSH
22738: CALL 22850 0 1
// continue ;
22742: GO 22624
// end ; HackCheckCapturedStatus ( i ) ;
22744: LD_VAR 0 1
22748: PPUSH
22749: CALL 23293 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22753: LD_ADDR_VAR 0 2
22757: PUSH
22758: LD_INT 81
22760: PUSH
22761: LD_VAR 0 1
22765: PPUSH
22766: CALL_OW 255
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 33
22777: PUSH
22778: LD_INT 3
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 91
22787: PUSH
22788: LD_VAR 0 1
22792: PUSH
22793: LD_EXP 81
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 50
22805: PUSH
22806: EMPTY
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: PPUSH
22815: CALL_OW 69
22819: ST_TO_ADDR
// if not tmp then
22820: LD_VAR 0 2
22824: NOT
22825: IFFALSE 22829
// continue ;
22827: GO 22624
// HackLink ( i , tmp ) ;
22829: LD_VAR 0 1
22833: PPUSH
22834: LD_VAR 0 2
22838: PPUSH
22839: CALL 22986 0 2
// end ;
22843: GO 22624
22845: POP
22846: POP
// end ;
22847: PPOPN 2
22849: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22850: LD_INT 0
22852: PPUSH
22853: PPUSH
22854: PPUSH
// if not hack in hackTanks then
22855: LD_VAR 0 1
22859: PUSH
22860: LD_EXP 78
22864: IN
22865: NOT
22866: IFFALSE 22870
// exit ;
22868: GO 22981
// index := GetElementIndex ( hackTanks , hack ) ;
22870: LD_ADDR_VAR 0 4
22874: PUSH
22875: LD_EXP 78
22879: PPUSH
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL 30586 0 2
22889: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22890: LD_EXP 79
22894: PUSH
22895: LD_VAR 0 4
22899: ARRAY
22900: IFFALSE 22981
// begin for i in hackTanksCaptured [ index ] do
22902: LD_ADDR_VAR 0 3
22906: PUSH
22907: LD_EXP 79
22911: PUSH
22912: LD_VAR 0 4
22916: ARRAY
22917: PUSH
22918: FOR_IN
22919: IFFALSE 22945
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22921: LD_VAR 0 3
22925: PUSH
22926: LD_INT 1
22928: ARRAY
22929: PPUSH
22930: LD_VAR 0 3
22934: PUSH
22935: LD_INT 2
22937: ARRAY
22938: PPUSH
22939: CALL_OW 235
22943: GO 22918
22945: POP
22946: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22947: LD_ADDR_EXP 79
22951: PUSH
22952: LD_EXP 79
22956: PPUSH
22957: LD_VAR 0 4
22961: PPUSH
22962: EMPTY
22963: PPUSH
22964: CALL_OW 1
22968: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22969: LD_VAR 0 1
22973: PPUSH
22974: LD_INT 0
22976: PPUSH
22977: CALL_OW 505
// end ; end ;
22981: LD_VAR 0 2
22985: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22986: LD_INT 0
22988: PPUSH
22989: PPUSH
22990: PPUSH
// if not hack in hackTanks or not vehicles then
22991: LD_VAR 0 1
22995: PUSH
22996: LD_EXP 78
23000: IN
23001: NOT
23002: PUSH
23003: LD_VAR 0 2
23007: NOT
23008: OR
23009: IFFALSE 23013
// exit ;
23011: GO 23288
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23013: LD_ADDR_VAR 0 2
23017: PUSH
23018: LD_VAR 0 1
23022: PPUSH
23023: LD_VAR 0 2
23027: PPUSH
23028: LD_INT 1
23030: PPUSH
23031: LD_INT 1
23033: PPUSH
23034: CALL 31236 0 4
23038: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23039: LD_ADDR_VAR 0 5
23043: PUSH
23044: LD_EXP 78
23048: PPUSH
23049: LD_VAR 0 1
23053: PPUSH
23054: CALL 30586 0 2
23058: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23059: LD_EXP 79
23063: PUSH
23064: LD_VAR 0 5
23068: ARRAY
23069: PUSH
23070: LD_EXP 80
23074: LESS
23075: IFFALSE 23264
// begin for i := 1 to vehicles do
23077: LD_ADDR_VAR 0 4
23081: PUSH
23082: DOUBLE
23083: LD_INT 1
23085: DEC
23086: ST_TO_ADDR
23087: LD_VAR 0 2
23091: PUSH
23092: FOR_TO
23093: IFFALSE 23262
// begin if hackTanksCaptured [ index ] = hackLimit then
23095: LD_EXP 79
23099: PUSH
23100: LD_VAR 0 5
23104: ARRAY
23105: PUSH
23106: LD_EXP 80
23110: EQUAL
23111: IFFALSE 23115
// break ;
23113: GO 23262
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23115: LD_ADDR_EXP 82
23119: PUSH
23120: LD_EXP 82
23124: PPUSH
23125: LD_VAR 0 5
23129: PPUSH
23130: LD_EXP 82
23134: PUSH
23135: LD_VAR 0 5
23139: ARRAY
23140: PUSH
23141: LD_INT 1
23143: PLUS
23144: PPUSH
23145: CALL_OW 1
23149: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23150: LD_ADDR_EXP 79
23154: PUSH
23155: LD_EXP 79
23159: PPUSH
23160: LD_VAR 0 5
23164: PUSH
23165: LD_EXP 79
23169: PUSH
23170: LD_VAR 0 5
23174: ARRAY
23175: PUSH
23176: LD_INT 1
23178: PLUS
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PPUSH
23184: LD_VAR 0 2
23188: PUSH
23189: LD_VAR 0 4
23193: ARRAY
23194: PUSH
23195: LD_VAR 0 2
23199: PUSH
23200: LD_VAR 0 4
23204: ARRAY
23205: PPUSH
23206: CALL_OW 255
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PPUSH
23215: CALL 30801 0 3
23219: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23220: LD_VAR 0 2
23224: PUSH
23225: LD_VAR 0 4
23229: ARRAY
23230: PPUSH
23231: LD_VAR 0 1
23235: PPUSH
23236: CALL_OW 255
23240: PPUSH
23241: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23245: LD_VAR 0 2
23249: PUSH
23250: LD_VAR 0 4
23254: ARRAY
23255: PPUSH
23256: CALL_OW 141
// end ;
23260: GO 23092
23262: POP
23263: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23264: LD_VAR 0 1
23268: PPUSH
23269: LD_EXP 79
23273: PUSH
23274: LD_VAR 0 5
23278: ARRAY
23279: PUSH
23280: LD_INT 0
23282: PLUS
23283: PPUSH
23284: CALL_OW 505
// end ;
23288: LD_VAR 0 3
23292: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23293: LD_INT 0
23295: PPUSH
23296: PPUSH
23297: PPUSH
23298: PPUSH
// if not hack in hackTanks then
23299: LD_VAR 0 1
23303: PUSH
23304: LD_EXP 78
23308: IN
23309: NOT
23310: IFFALSE 23314
// exit ;
23312: GO 23554
// index := GetElementIndex ( hackTanks , hack ) ;
23314: LD_ADDR_VAR 0 4
23318: PUSH
23319: LD_EXP 78
23323: PPUSH
23324: LD_VAR 0 1
23328: PPUSH
23329: CALL 30586 0 2
23333: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23334: LD_ADDR_VAR 0 3
23338: PUSH
23339: DOUBLE
23340: LD_EXP 79
23344: PUSH
23345: LD_VAR 0 4
23349: ARRAY
23350: INC
23351: ST_TO_ADDR
23352: LD_INT 1
23354: PUSH
23355: FOR_DOWNTO
23356: IFFALSE 23528
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23358: LD_ADDR_VAR 0 5
23362: PUSH
23363: LD_EXP 79
23367: PUSH
23368: LD_VAR 0 4
23372: ARRAY
23373: PUSH
23374: LD_VAR 0 3
23378: ARRAY
23379: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23380: LD_VAR 0 5
23384: PUSH
23385: LD_INT 1
23387: ARRAY
23388: PPUSH
23389: CALL_OW 302
23393: NOT
23394: PUSH
23395: LD_VAR 0 5
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: PPUSH
23404: CALL_OW 255
23408: PUSH
23409: LD_VAR 0 1
23413: PPUSH
23414: CALL_OW 255
23418: NONEQUAL
23419: OR
23420: IFFALSE 23526
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23422: LD_VAR 0 5
23426: PUSH
23427: LD_INT 1
23429: ARRAY
23430: PPUSH
23431: CALL_OW 305
23435: PUSH
23436: LD_VAR 0 5
23440: PUSH
23441: LD_INT 1
23443: ARRAY
23444: PPUSH
23445: CALL_OW 255
23449: PUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 255
23459: EQUAL
23460: AND
23461: IFFALSE 23485
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23463: LD_VAR 0 5
23467: PUSH
23468: LD_INT 1
23470: ARRAY
23471: PPUSH
23472: LD_VAR 0 5
23476: PUSH
23477: LD_INT 2
23479: ARRAY
23480: PPUSH
23481: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23485: LD_ADDR_EXP 79
23489: PUSH
23490: LD_EXP 79
23494: PPUSH
23495: LD_VAR 0 4
23499: PPUSH
23500: LD_EXP 79
23504: PUSH
23505: LD_VAR 0 4
23509: ARRAY
23510: PPUSH
23511: LD_VAR 0 3
23515: PPUSH
23516: CALL_OW 3
23520: PPUSH
23521: CALL_OW 1
23525: ST_TO_ADDR
// end ; end ;
23526: GO 23355
23528: POP
23529: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23530: LD_VAR 0 1
23534: PPUSH
23535: LD_EXP 79
23539: PUSH
23540: LD_VAR 0 4
23544: ARRAY
23545: PUSH
23546: LD_INT 0
23548: PLUS
23549: PPUSH
23550: CALL_OW 505
// end ;
23554: LD_VAR 0 2
23558: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23559: LD_INT 0
23561: PPUSH
23562: PPUSH
23563: PPUSH
23564: PPUSH
// if not hack in hackTanks then
23565: LD_VAR 0 1
23569: PUSH
23570: LD_EXP 78
23574: IN
23575: NOT
23576: IFFALSE 23580
// exit ;
23578: GO 23665
// index := GetElementIndex ( hackTanks , hack ) ;
23580: LD_ADDR_VAR 0 5
23584: PUSH
23585: LD_EXP 78
23589: PPUSH
23590: LD_VAR 0 1
23594: PPUSH
23595: CALL 30586 0 2
23599: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23600: LD_ADDR_VAR 0 4
23604: PUSH
23605: DOUBLE
23606: LD_INT 1
23608: DEC
23609: ST_TO_ADDR
23610: LD_EXP 79
23614: PUSH
23615: LD_VAR 0 5
23619: ARRAY
23620: PUSH
23621: FOR_TO
23622: IFFALSE 23663
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23624: LD_EXP 79
23628: PUSH
23629: LD_VAR 0 5
23633: ARRAY
23634: PUSH
23635: LD_VAR 0 4
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: PUSH
23645: LD_VAR 0 2
23649: EQUAL
23650: IFFALSE 23661
// KillUnit ( vehicle ) ;
23652: LD_VAR 0 2
23656: PPUSH
23657: CALL_OW 66
23661: GO 23621
23663: POP
23664: POP
// end ;
23665: LD_VAR 0 3
23669: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23670: LD_EXP 83
23674: NOT
23675: IFFALSE 23710
23677: GO 23679
23679: DISABLE
// begin initMiner := true ;
23680: LD_ADDR_EXP 83
23684: PUSH
23685: LD_INT 1
23687: ST_TO_ADDR
// minersList := [ ] ;
23688: LD_ADDR_EXP 84
23692: PUSH
23693: EMPTY
23694: ST_TO_ADDR
// minerMinesList := [ ] ;
23695: LD_ADDR_EXP 85
23699: PUSH
23700: EMPTY
23701: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23702: LD_ADDR_EXP 86
23706: PUSH
23707: LD_INT 5
23709: ST_TO_ADDR
// end ;
23710: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23711: LD_EXP 83
23715: PUSH
23716: LD_INT 34
23718: PUSH
23719: LD_INT 81
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 69
23730: AND
23731: IFFALSE 24192
23733: GO 23735
23735: DISABLE
23736: LD_INT 0
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
// begin enable ;
23742: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23743: LD_ADDR_VAR 0 1
23747: PUSH
23748: LD_INT 34
23750: PUSH
23751: LD_INT 81
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 69
23762: PUSH
23763: FOR_IN
23764: IFFALSE 23836
// begin if not i in minersList then
23766: LD_VAR 0 1
23770: PUSH
23771: LD_EXP 84
23775: IN
23776: NOT
23777: IFFALSE 23834
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23779: LD_ADDR_EXP 84
23783: PUSH
23784: LD_EXP 84
23788: PPUSH
23789: LD_EXP 84
23793: PUSH
23794: LD_INT 1
23796: PLUS
23797: PPUSH
23798: LD_VAR 0 1
23802: PPUSH
23803: CALL_OW 1
23807: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23808: LD_ADDR_EXP 85
23812: PUSH
23813: LD_EXP 85
23817: PPUSH
23818: LD_EXP 85
23822: PUSH
23823: LD_INT 1
23825: PLUS
23826: PPUSH
23827: EMPTY
23828: PPUSH
23829: CALL_OW 1
23833: ST_TO_ADDR
// end end ;
23834: GO 23763
23836: POP
23837: POP
// for i := minerMinesList downto 1 do
23838: LD_ADDR_VAR 0 1
23842: PUSH
23843: DOUBLE
23844: LD_EXP 85
23848: INC
23849: ST_TO_ADDR
23850: LD_INT 1
23852: PUSH
23853: FOR_DOWNTO
23854: IFFALSE 24190
// begin if IsLive ( minersList [ i ] ) then
23856: LD_EXP 84
23860: PUSH
23861: LD_VAR 0 1
23865: ARRAY
23866: PPUSH
23867: CALL_OW 300
23871: IFFALSE 23899
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23873: LD_EXP 84
23877: PUSH
23878: LD_VAR 0 1
23882: ARRAY
23883: PPUSH
23884: LD_EXP 85
23888: PUSH
23889: LD_VAR 0 1
23893: ARRAY
23894: PPUSH
23895: CALL_OW 505
// if not minerMinesList [ i ] then
23899: LD_EXP 85
23903: PUSH
23904: LD_VAR 0 1
23908: ARRAY
23909: NOT
23910: IFFALSE 23914
// continue ;
23912: GO 23853
// for j := minerMinesList [ i ] downto 1 do
23914: LD_ADDR_VAR 0 2
23918: PUSH
23919: DOUBLE
23920: LD_EXP 85
23924: PUSH
23925: LD_VAR 0 1
23929: ARRAY
23930: INC
23931: ST_TO_ADDR
23932: LD_INT 1
23934: PUSH
23935: FOR_DOWNTO
23936: IFFALSE 24186
// begin side := GetSide ( minersList [ i ] ) ;
23938: LD_ADDR_VAR 0 3
23942: PUSH
23943: LD_EXP 84
23947: PUSH
23948: LD_VAR 0 1
23952: ARRAY
23953: PPUSH
23954: CALL_OW 255
23958: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23959: LD_ADDR_VAR 0 4
23963: PUSH
23964: LD_EXP 85
23968: PUSH
23969: LD_VAR 0 1
23973: ARRAY
23974: PUSH
23975: LD_VAR 0 2
23979: ARRAY
23980: PUSH
23981: LD_INT 1
23983: ARRAY
23984: PPUSH
23985: LD_EXP 85
23989: PUSH
23990: LD_VAR 0 1
23994: ARRAY
23995: PUSH
23996: LD_VAR 0 2
24000: ARRAY
24001: PUSH
24002: LD_INT 2
24004: ARRAY
24005: PPUSH
24006: CALL_OW 428
24010: ST_TO_ADDR
// if not tmp then
24011: LD_VAR 0 4
24015: NOT
24016: IFFALSE 24020
// continue ;
24018: GO 23935
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24020: LD_VAR 0 4
24024: PUSH
24025: LD_INT 81
24027: PUSH
24028: LD_VAR 0 3
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PPUSH
24037: CALL_OW 69
24041: IN
24042: PUSH
24043: LD_EXP 85
24047: PUSH
24048: LD_VAR 0 1
24052: ARRAY
24053: PUSH
24054: LD_VAR 0 2
24058: ARRAY
24059: PUSH
24060: LD_INT 1
24062: ARRAY
24063: PPUSH
24064: LD_EXP 85
24068: PUSH
24069: LD_VAR 0 1
24073: ARRAY
24074: PUSH
24075: LD_VAR 0 2
24079: ARRAY
24080: PUSH
24081: LD_INT 2
24083: ARRAY
24084: PPUSH
24085: CALL_OW 458
24089: AND
24090: IFFALSE 24184
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24092: LD_EXP 85
24096: PUSH
24097: LD_VAR 0 1
24101: ARRAY
24102: PUSH
24103: LD_VAR 0 2
24107: ARRAY
24108: PUSH
24109: LD_INT 1
24111: ARRAY
24112: PPUSH
24113: LD_EXP 85
24117: PUSH
24118: LD_VAR 0 1
24122: ARRAY
24123: PUSH
24124: LD_VAR 0 2
24128: ARRAY
24129: PUSH
24130: LD_INT 2
24132: ARRAY
24133: PPUSH
24134: LD_VAR 0 3
24138: PPUSH
24139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24143: LD_ADDR_EXP 85
24147: PUSH
24148: LD_EXP 85
24152: PPUSH
24153: LD_VAR 0 1
24157: PPUSH
24158: LD_EXP 85
24162: PUSH
24163: LD_VAR 0 1
24167: ARRAY
24168: PPUSH
24169: LD_VAR 0 2
24173: PPUSH
24174: CALL_OW 3
24178: PPUSH
24179: CALL_OW 1
24183: ST_TO_ADDR
// end ; end ;
24184: GO 23935
24186: POP
24187: POP
// end ;
24188: GO 23853
24190: POP
24191: POP
// end ;
24192: PPOPN 4
24194: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24195: LD_INT 0
24197: PPUSH
24198: PPUSH
// result := false ;
24199: LD_ADDR_VAR 0 4
24203: PUSH
24204: LD_INT 0
24206: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 264
24216: PUSH
24217: LD_INT 81
24219: EQUAL
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24465
// index := GetElementIndex ( minersList , unit ) ;
24225: LD_ADDR_VAR 0 5
24229: PUSH
24230: LD_EXP 84
24234: PPUSH
24235: LD_VAR 0 1
24239: PPUSH
24240: CALL 30586 0 2
24244: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24245: LD_EXP 85
24249: PUSH
24250: LD_VAR 0 5
24254: ARRAY
24255: PUSH
24256: LD_EXP 86
24260: GREATEREQUAL
24261: IFFALSE 24265
// exit ;
24263: GO 24465
// ComMoveXY ( unit , x , y ) ;
24265: LD_VAR 0 1
24269: PPUSH
24270: LD_VAR 0 2
24274: PPUSH
24275: LD_VAR 0 3
24279: PPUSH
24280: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24284: LD_INT 35
24286: PPUSH
24287: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24291: LD_VAR 0 1
24295: PPUSH
24296: LD_VAR 0 2
24300: PPUSH
24301: LD_VAR 0 3
24305: PPUSH
24306: CALL 62327 0 3
24310: NOT
24311: PUSH
24312: LD_VAR 0 1
24316: PPUSH
24317: CALL_OW 314
24321: AND
24322: IFFALSE 24326
// exit ;
24324: GO 24465
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24326: LD_VAR 0 2
24330: PPUSH
24331: LD_VAR 0 3
24335: PPUSH
24336: CALL_OW 428
24340: PUSH
24341: LD_VAR 0 1
24345: EQUAL
24346: PUSH
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL_OW 314
24356: NOT
24357: AND
24358: IFFALSE 24284
// PlaySoundXY ( x , y , PlantMine ) ;
24360: LD_VAR 0 2
24364: PPUSH
24365: LD_VAR 0 3
24369: PPUSH
24370: LD_STRING PlantMine
24372: PPUSH
24373: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24377: LD_VAR 0 2
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 255
24396: PPUSH
24397: LD_INT 0
24399: PPUSH
24400: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24404: LD_ADDR_EXP 85
24408: PUSH
24409: LD_EXP 85
24413: PPUSH
24414: LD_VAR 0 5
24418: PUSH
24419: LD_EXP 85
24423: PUSH
24424: LD_VAR 0 5
24428: ARRAY
24429: PUSH
24430: LD_INT 1
24432: PLUS
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PPUSH
24438: LD_VAR 0 2
24442: PUSH
24443: LD_VAR 0 3
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PPUSH
24452: CALL 30801 0 3
24456: ST_TO_ADDR
// result := true ;
24457: LD_ADDR_VAR 0 4
24461: PUSH
24462: LD_INT 1
24464: ST_TO_ADDR
// end ;
24465: LD_VAR 0 4
24469: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24470: LD_INT 0
24472: PPUSH
24473: PPUSH
24474: PPUSH
// if not unit in minersList then
24475: LD_VAR 0 1
24479: PUSH
24480: LD_EXP 84
24484: IN
24485: NOT
24486: IFFALSE 24490
// exit ;
24488: GO 24882
// index := GetElementIndex ( minersList , unit ) ;
24490: LD_ADDR_VAR 0 6
24494: PUSH
24495: LD_EXP 84
24499: PPUSH
24500: LD_VAR 0 1
24504: PPUSH
24505: CALL 30586 0 2
24509: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24510: LD_ADDR_VAR 0 5
24514: PUSH
24515: DOUBLE
24516: LD_EXP 85
24520: PUSH
24521: LD_VAR 0 6
24525: ARRAY
24526: INC
24527: ST_TO_ADDR
24528: LD_INT 1
24530: PUSH
24531: FOR_DOWNTO
24532: IFFALSE 24693
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24534: LD_EXP 85
24538: PUSH
24539: LD_VAR 0 6
24543: ARRAY
24544: PUSH
24545: LD_VAR 0 5
24549: ARRAY
24550: PUSH
24551: LD_INT 1
24553: ARRAY
24554: PUSH
24555: LD_VAR 0 2
24559: EQUAL
24560: PUSH
24561: LD_EXP 85
24565: PUSH
24566: LD_VAR 0 6
24570: ARRAY
24571: PUSH
24572: LD_VAR 0 5
24576: ARRAY
24577: PUSH
24578: LD_INT 2
24580: ARRAY
24581: PUSH
24582: LD_VAR 0 3
24586: EQUAL
24587: AND
24588: IFFALSE 24691
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24590: LD_EXP 85
24594: PUSH
24595: LD_VAR 0 6
24599: ARRAY
24600: PUSH
24601: LD_VAR 0 5
24605: ARRAY
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: PPUSH
24611: LD_EXP 85
24615: PUSH
24616: LD_VAR 0 6
24620: ARRAY
24621: PUSH
24622: LD_VAR 0 5
24626: ARRAY
24627: PUSH
24628: LD_INT 2
24630: ARRAY
24631: PPUSH
24632: LD_VAR 0 1
24636: PPUSH
24637: CALL_OW 255
24641: PPUSH
24642: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24646: LD_ADDR_EXP 85
24650: PUSH
24651: LD_EXP 85
24655: PPUSH
24656: LD_VAR 0 6
24660: PPUSH
24661: LD_EXP 85
24665: PUSH
24666: LD_VAR 0 6
24670: ARRAY
24671: PPUSH
24672: LD_VAR 0 5
24676: PPUSH
24677: CALL_OW 3
24681: PPUSH
24682: CALL_OW 1
24686: ST_TO_ADDR
// exit ;
24687: POP
24688: POP
24689: GO 24882
// end ; end ;
24691: GO 24531
24693: POP
24694: POP
// for i := minerMinesList [ index ] downto 1 do
24695: LD_ADDR_VAR 0 5
24699: PUSH
24700: DOUBLE
24701: LD_EXP 85
24705: PUSH
24706: LD_VAR 0 6
24710: ARRAY
24711: INC
24712: ST_TO_ADDR
24713: LD_INT 1
24715: PUSH
24716: FOR_DOWNTO
24717: IFFALSE 24880
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24719: LD_EXP 85
24723: PUSH
24724: LD_VAR 0 6
24728: ARRAY
24729: PUSH
24730: LD_VAR 0 5
24734: ARRAY
24735: PUSH
24736: LD_INT 1
24738: ARRAY
24739: PPUSH
24740: LD_EXP 85
24744: PUSH
24745: LD_VAR 0 6
24749: ARRAY
24750: PUSH
24751: LD_VAR 0 5
24755: ARRAY
24756: PUSH
24757: LD_INT 2
24759: ARRAY
24760: PPUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: LD_VAR 0 3
24770: PPUSH
24771: CALL_OW 298
24775: PUSH
24776: LD_INT 6
24778: LESS
24779: IFFALSE 24878
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24781: LD_EXP 85
24785: PUSH
24786: LD_VAR 0 6
24790: ARRAY
24791: PUSH
24792: LD_VAR 0 5
24796: ARRAY
24797: PUSH
24798: LD_INT 1
24800: ARRAY
24801: PPUSH
24802: LD_EXP 85
24806: PUSH
24807: LD_VAR 0 6
24811: ARRAY
24812: PUSH
24813: LD_VAR 0 5
24817: ARRAY
24818: PUSH
24819: LD_INT 2
24821: ARRAY
24822: PPUSH
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL_OW 255
24832: PPUSH
24833: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24837: LD_ADDR_EXP 85
24841: PUSH
24842: LD_EXP 85
24846: PPUSH
24847: LD_VAR 0 6
24851: PPUSH
24852: LD_EXP 85
24856: PUSH
24857: LD_VAR 0 6
24861: ARRAY
24862: PPUSH
24863: LD_VAR 0 5
24867: PPUSH
24868: CALL_OW 3
24872: PPUSH
24873: CALL_OW 1
24877: ST_TO_ADDR
// end ; end ;
24878: GO 24716
24880: POP
24881: POP
// end ;
24882: LD_VAR 0 4
24886: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24887: LD_INT 0
24889: PPUSH
24890: PPUSH
24891: PPUSH
24892: PPUSH
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
24897: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 264
24907: PUSH
24908: LD_INT 81
24910: EQUAL
24911: NOT
24912: PUSH
24913: LD_VAR 0 1
24917: PUSH
24918: LD_EXP 84
24922: IN
24923: NOT
24924: OR
24925: IFFALSE 24929
// exit ;
24927: GO 25251
// index := GetElementIndex ( minersList , unit ) ;
24929: LD_ADDR_VAR 0 6
24933: PUSH
24934: LD_EXP 84
24938: PPUSH
24939: LD_VAR 0 1
24943: PPUSH
24944: CALL 30586 0 2
24948: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24949: LD_ADDR_VAR 0 8
24953: PUSH
24954: LD_EXP 86
24958: PUSH
24959: LD_EXP 85
24963: PUSH
24964: LD_VAR 0 6
24968: ARRAY
24969: MINUS
24970: ST_TO_ADDR
// if not minesFreeAmount then
24971: LD_VAR 0 8
24975: NOT
24976: IFFALSE 24980
// exit ;
24978: GO 25251
// tmp := [ ] ;
24980: LD_ADDR_VAR 0 7
24984: PUSH
24985: EMPTY
24986: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24987: LD_ADDR_VAR 0 5
24991: PUSH
24992: DOUBLE
24993: LD_INT 1
24995: DEC
24996: ST_TO_ADDR
24997: LD_VAR 0 8
25001: PUSH
25002: FOR_TO
25003: IFFALSE 25198
// begin _d := rand ( 0 , 5 ) ;
25005: LD_ADDR_VAR 0 11
25009: PUSH
25010: LD_INT 0
25012: PPUSH
25013: LD_INT 5
25015: PPUSH
25016: CALL_OW 12
25020: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25021: LD_ADDR_VAR 0 12
25025: PUSH
25026: LD_INT 2
25028: PPUSH
25029: LD_INT 6
25031: PPUSH
25032: CALL_OW 12
25036: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25037: LD_ADDR_VAR 0 9
25041: PUSH
25042: LD_VAR 0 2
25046: PPUSH
25047: LD_VAR 0 11
25051: PPUSH
25052: LD_VAR 0 12
25056: PPUSH
25057: CALL_OW 272
25061: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25062: LD_ADDR_VAR 0 10
25066: PUSH
25067: LD_VAR 0 3
25071: PPUSH
25072: LD_VAR 0 11
25076: PPUSH
25077: LD_VAR 0 12
25081: PPUSH
25082: CALL_OW 273
25086: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25087: LD_VAR 0 9
25091: PPUSH
25092: LD_VAR 0 10
25096: PPUSH
25097: CALL_OW 488
25101: PUSH
25102: LD_VAR 0 9
25106: PUSH
25107: LD_VAR 0 10
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_VAR 0 7
25120: IN
25121: NOT
25122: AND
25123: PUSH
25124: LD_VAR 0 9
25128: PPUSH
25129: LD_VAR 0 10
25133: PPUSH
25134: CALL_OW 458
25138: NOT
25139: AND
25140: IFFALSE 25182
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25142: LD_ADDR_VAR 0 7
25146: PUSH
25147: LD_VAR 0 7
25151: PPUSH
25152: LD_VAR 0 7
25156: PUSH
25157: LD_INT 1
25159: PLUS
25160: PPUSH
25161: LD_VAR 0 9
25165: PUSH
25166: LD_VAR 0 10
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PPUSH
25175: CALL_OW 1
25179: ST_TO_ADDR
25180: GO 25196
// i := i - 1 ;
25182: LD_ADDR_VAR 0 5
25186: PUSH
25187: LD_VAR 0 5
25191: PUSH
25192: LD_INT 1
25194: MINUS
25195: ST_TO_ADDR
// end ;
25196: GO 25002
25198: POP
25199: POP
// for i in tmp do
25200: LD_ADDR_VAR 0 5
25204: PUSH
25205: LD_VAR 0 7
25209: PUSH
25210: FOR_IN
25211: IFFALSE 25249
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25213: LD_VAR 0 1
25217: PPUSH
25218: LD_VAR 0 5
25222: PUSH
25223: LD_INT 1
25225: ARRAY
25226: PPUSH
25227: LD_VAR 0 5
25231: PUSH
25232: LD_INT 2
25234: ARRAY
25235: PPUSH
25236: CALL 24195 0 3
25240: NOT
25241: IFFALSE 25247
// exit ;
25243: POP
25244: POP
25245: GO 25251
25247: GO 25210
25249: POP
25250: POP
// end ;
25251: LD_VAR 0 4
25255: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25256: LD_INT 0
25258: PPUSH
25259: PPUSH
25260: PPUSH
25261: PPUSH
25262: PPUSH
25263: PPUSH
25264: PPUSH
// if not GetClass ( unit ) = class_sniper then
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 257
25274: PUSH
25275: LD_INT 5
25277: EQUAL
25278: NOT
25279: IFFALSE 25283
// exit ;
25281: GO 25671
// dist := 8 ;
25283: LD_ADDR_VAR 0 5
25287: PUSH
25288: LD_INT 8
25290: ST_TO_ADDR
// viewRange := 12 ;
25291: LD_ADDR_VAR 0 7
25295: PUSH
25296: LD_INT 12
25298: ST_TO_ADDR
// side := GetSide ( unit ) ;
25299: LD_ADDR_VAR 0 6
25303: PUSH
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 255
25313: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25314: LD_INT 61
25316: PPUSH
25317: LD_VAR 0 6
25321: PPUSH
25322: CALL_OW 321
25326: PUSH
25327: LD_INT 2
25329: EQUAL
25330: IFFALSE 25340
// viewRange := 16 ;
25332: LD_ADDR_VAR 0 7
25336: PUSH
25337: LD_INT 16
25339: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25340: LD_VAR 0 1
25344: PPUSH
25345: LD_VAR 0 2
25349: PPUSH
25350: LD_VAR 0 3
25354: PPUSH
25355: CALL_OW 297
25359: PUSH
25360: LD_VAR 0 5
25364: GREATER
25365: IFFALSE 25444
// begin ComMoveXY ( unit , x , y ) ;
25367: LD_VAR 0 1
25371: PPUSH
25372: LD_VAR 0 2
25376: PPUSH
25377: LD_VAR 0 3
25381: PPUSH
25382: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25386: LD_INT 35
25388: PPUSH
25389: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25393: LD_VAR 0 1
25397: PPUSH
25398: LD_VAR 0 2
25402: PPUSH
25403: LD_VAR 0 3
25407: PPUSH
25408: CALL 62327 0 3
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 25671
// until GetDistUnitXY ( unit , x , y ) < dist ;
25417: LD_VAR 0 1
25421: PPUSH
25422: LD_VAR 0 2
25426: PPUSH
25427: LD_VAR 0 3
25431: PPUSH
25432: CALL_OW 297
25436: PUSH
25437: LD_VAR 0 5
25441: LESS
25442: IFFALSE 25386
// end ; ComTurnXY ( unit , x , y ) ;
25444: LD_VAR 0 1
25448: PPUSH
25449: LD_VAR 0 2
25453: PPUSH
25454: LD_VAR 0 3
25458: PPUSH
25459: CALL_OW 118
// wait ( 5 ) ;
25463: LD_INT 5
25465: PPUSH
25466: CALL_OW 67
// _d := GetDir ( unit ) ;
25470: LD_ADDR_VAR 0 10
25474: PUSH
25475: LD_VAR 0 1
25479: PPUSH
25480: CALL_OW 254
25484: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25485: LD_ADDR_VAR 0 8
25489: PUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 250
25499: PPUSH
25500: LD_VAR 0 10
25504: PPUSH
25505: LD_VAR 0 5
25509: PPUSH
25510: CALL_OW 272
25514: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25515: LD_ADDR_VAR 0 9
25519: PUSH
25520: LD_VAR 0 1
25524: PPUSH
25525: CALL_OW 251
25529: PPUSH
25530: LD_VAR 0 10
25534: PPUSH
25535: LD_VAR 0 5
25539: PPUSH
25540: CALL_OW 273
25544: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25545: LD_VAR 0 8
25549: PPUSH
25550: LD_VAR 0 9
25554: PPUSH
25555: CALL_OW 488
25559: NOT
25560: IFFALSE 25564
// exit ;
25562: GO 25671
// ComAnimCustom ( unit , 1 ) ;
25564: LD_VAR 0 1
25568: PPUSH
25569: LD_INT 1
25571: PPUSH
25572: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25576: LD_VAR 0 8
25580: PPUSH
25581: LD_VAR 0 9
25585: PPUSH
25586: LD_VAR 0 6
25590: PPUSH
25591: LD_VAR 0 7
25595: PPUSH
25596: CALL_OW 330
// repeat wait ( 1 ) ;
25600: LD_INT 1
25602: PPUSH
25603: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25607: LD_VAR 0 1
25611: PPUSH
25612: CALL_OW 316
25616: PUSH
25617: LD_VAR 0 1
25621: PPUSH
25622: CALL_OW 314
25626: OR
25627: PUSH
25628: LD_VAR 0 1
25632: PPUSH
25633: CALL_OW 302
25637: NOT
25638: OR
25639: PUSH
25640: LD_VAR 0 1
25644: PPUSH
25645: CALL_OW 301
25649: OR
25650: IFFALSE 25600
// RemoveSeeing ( _x , _y , side ) ;
25652: LD_VAR 0 8
25656: PPUSH
25657: LD_VAR 0 9
25661: PPUSH
25662: LD_VAR 0 6
25666: PPUSH
25667: CALL_OW 331
// end ; end_of_file
25671: LD_VAR 0 4
25675: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25676: LD_VAR 0 1
25680: PUSH
25681: LD_INT 200
25683: DOUBLE
25684: GREATEREQUAL
25685: IFFALSE 25693
25687: LD_INT 299
25689: DOUBLE
25690: LESSEQUAL
25691: IFTRUE 25695
25693: GO 25727
25695: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_VAR 0 2
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: LD_VAR 0 4
25715: PPUSH
25716: LD_VAR 0 5
25720: PPUSH
25721: CALL 21158 0 5
25725: GO 25804
25727: LD_INT 300
25729: DOUBLE
25730: GREATEREQUAL
25731: IFFALSE 25739
25733: LD_INT 399
25735: DOUBLE
25736: LESSEQUAL
25737: IFTRUE 25741
25739: GO 25803
25741: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25742: LD_VAR 0 1
25746: PPUSH
25747: LD_VAR 0 2
25751: PPUSH
25752: LD_VAR 0 3
25756: PPUSH
25757: LD_VAR 0 4
25761: PPUSH
25762: LD_VAR 0 5
25766: PPUSH
25767: LD_VAR 0 6
25771: PPUSH
25772: LD_VAR 0 7
25776: PPUSH
25777: LD_VAR 0 8
25781: PPUSH
25782: LD_VAR 0 9
25786: PPUSH
25787: LD_VAR 0 10
25791: PPUSH
25792: LD_VAR 0 11
25796: PPUSH
25797: CALL 17483 0 11
25801: GO 25804
25803: POP
// end ;
25804: PPOPN 11
25806: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: LD_VAR 0 3
25821: PPUSH
25822: LD_VAR 0 4
25826: PPUSH
25827: LD_VAR 0 5
25831: PPUSH
25832: CALL 20894 0 5
// end ; end_of_file
25836: PPOPN 5
25838: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25839: LD_INT 0
25841: PPUSH
25842: PPUSH
// if exist_mode then
25843: LD_VAR 0 2
25847: IFFALSE 25872
// unit := CreateCharacter ( prefix & ident ) else
25849: LD_ADDR_VAR 0 5
25853: PUSH
25854: LD_VAR 0 3
25858: PUSH
25859: LD_VAR 0 1
25863: STR
25864: PPUSH
25865: CALL_OW 34
25869: ST_TO_ADDR
25870: GO 25887
// unit := NewCharacter ( ident ) ;
25872: LD_ADDR_VAR 0 5
25876: PUSH
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 25
25886: ST_TO_ADDR
// result := unit ;
25887: LD_ADDR_VAR 0 4
25891: PUSH
25892: LD_VAR 0 5
25896: ST_TO_ADDR
// end ;
25897: LD_VAR 0 4
25901: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25902: LD_INT 0
25904: PPUSH
25905: PPUSH
// if not side or not nation then
25906: LD_VAR 0 1
25910: NOT
25911: PUSH
25912: LD_VAR 0 2
25916: NOT
25917: OR
25918: IFFALSE 25922
// exit ;
25920: GO 26690
// case nation of nation_american :
25922: LD_VAR 0 2
25926: PUSH
25927: LD_INT 1
25929: DOUBLE
25930: EQUAL
25931: IFTRUE 25935
25933: GO 26149
25935: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25936: LD_ADDR_VAR 0 4
25940: PUSH
25941: LD_INT 35
25943: PUSH
25944: LD_INT 45
25946: PUSH
25947: LD_INT 46
25949: PUSH
25950: LD_INT 47
25952: PUSH
25953: LD_INT 82
25955: PUSH
25956: LD_INT 83
25958: PUSH
25959: LD_INT 84
25961: PUSH
25962: LD_INT 85
25964: PUSH
25965: LD_INT 86
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: LD_INT 6
25976: PUSH
25977: LD_INT 15
25979: PUSH
25980: LD_INT 16
25982: PUSH
25983: LD_INT 7
25985: PUSH
25986: LD_INT 12
25988: PUSH
25989: LD_INT 13
25991: PUSH
25992: LD_INT 10
25994: PUSH
25995: LD_INT 14
25997: PUSH
25998: LD_INT 20
26000: PUSH
26001: LD_INT 21
26003: PUSH
26004: LD_INT 22
26006: PUSH
26007: LD_INT 25
26009: PUSH
26010: LD_INT 32
26012: PUSH
26013: LD_INT 27
26015: PUSH
26016: LD_INT 36
26018: PUSH
26019: LD_INT 69
26021: PUSH
26022: LD_INT 39
26024: PUSH
26025: LD_INT 34
26027: PUSH
26028: LD_INT 40
26030: PUSH
26031: LD_INT 48
26033: PUSH
26034: LD_INT 49
26036: PUSH
26037: LD_INT 50
26039: PUSH
26040: LD_INT 51
26042: PUSH
26043: LD_INT 52
26045: PUSH
26046: LD_INT 53
26048: PUSH
26049: LD_INT 54
26051: PUSH
26052: LD_INT 55
26054: PUSH
26055: LD_INT 56
26057: PUSH
26058: LD_INT 57
26060: PUSH
26061: LD_INT 58
26063: PUSH
26064: LD_INT 59
26066: PUSH
26067: LD_INT 60
26069: PUSH
26070: LD_INT 61
26072: PUSH
26073: LD_INT 62
26075: PUSH
26076: LD_INT 80
26078: PUSH
26079: LD_INT 82
26081: PUSH
26082: LD_INT 83
26084: PUSH
26085: LD_INT 84
26087: PUSH
26088: LD_INT 85
26090: PUSH
26091: LD_INT 86
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: ST_TO_ADDR
26147: GO 26614
26149: LD_INT 2
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26383
26157: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26158: LD_ADDR_VAR 0 4
26162: PUSH
26163: LD_INT 35
26165: PUSH
26166: LD_INT 45
26168: PUSH
26169: LD_INT 46
26171: PUSH
26172: LD_INT 47
26174: PUSH
26175: LD_INT 82
26177: PUSH
26178: LD_INT 83
26180: PUSH
26181: LD_INT 84
26183: PUSH
26184: LD_INT 85
26186: PUSH
26187: LD_INT 87
26189: PUSH
26190: LD_INT 70
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 11
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: LD_INT 4
26204: PUSH
26205: LD_INT 5
26207: PUSH
26208: LD_INT 6
26210: PUSH
26211: LD_INT 15
26213: PUSH
26214: LD_INT 18
26216: PUSH
26217: LD_INT 7
26219: PUSH
26220: LD_INT 17
26222: PUSH
26223: LD_INT 8
26225: PUSH
26226: LD_INT 20
26228: PUSH
26229: LD_INT 21
26231: PUSH
26232: LD_INT 22
26234: PUSH
26235: LD_INT 72
26237: PUSH
26238: LD_INT 26
26240: PUSH
26241: LD_INT 69
26243: PUSH
26244: LD_INT 39
26246: PUSH
26247: LD_INT 40
26249: PUSH
26250: LD_INT 41
26252: PUSH
26253: LD_INT 42
26255: PUSH
26256: LD_INT 43
26258: PUSH
26259: LD_INT 48
26261: PUSH
26262: LD_INT 49
26264: PUSH
26265: LD_INT 50
26267: PUSH
26268: LD_INT 51
26270: PUSH
26271: LD_INT 52
26273: PUSH
26274: LD_INT 53
26276: PUSH
26277: LD_INT 54
26279: PUSH
26280: LD_INT 55
26282: PUSH
26283: LD_INT 56
26285: PUSH
26286: LD_INT 60
26288: PUSH
26289: LD_INT 61
26291: PUSH
26292: LD_INT 62
26294: PUSH
26295: LD_INT 66
26297: PUSH
26298: LD_INT 67
26300: PUSH
26301: LD_INT 68
26303: PUSH
26304: LD_INT 81
26306: PUSH
26307: LD_INT 82
26309: PUSH
26310: LD_INT 83
26312: PUSH
26313: LD_INT 84
26315: PUSH
26316: LD_INT 85
26318: PUSH
26319: LD_INT 87
26321: PUSH
26322: LD_INT 88
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
26381: GO 26614
26383: LD_INT 3
26385: DOUBLE
26386: EQUAL
26387: IFTRUE 26391
26389: GO 26613
26391: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26392: LD_ADDR_VAR 0 4
26396: PUSH
26397: LD_INT 46
26399: PUSH
26400: LD_INT 47
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: LD_INT 82
26411: PUSH
26412: LD_INT 83
26414: PUSH
26415: LD_INT 84
26417: PUSH
26418: LD_INT 85
26420: PUSH
26421: LD_INT 86
26423: PUSH
26424: LD_INT 11
26426: PUSH
26427: LD_INT 9
26429: PUSH
26430: LD_INT 20
26432: PUSH
26433: LD_INT 19
26435: PUSH
26436: LD_INT 21
26438: PUSH
26439: LD_INT 24
26441: PUSH
26442: LD_INT 22
26444: PUSH
26445: LD_INT 25
26447: PUSH
26448: LD_INT 28
26450: PUSH
26451: LD_INT 29
26453: PUSH
26454: LD_INT 30
26456: PUSH
26457: LD_INT 31
26459: PUSH
26460: LD_INT 37
26462: PUSH
26463: LD_INT 38
26465: PUSH
26466: LD_INT 32
26468: PUSH
26469: LD_INT 27
26471: PUSH
26472: LD_INT 33
26474: PUSH
26475: LD_INT 69
26477: PUSH
26478: LD_INT 39
26480: PUSH
26481: LD_INT 34
26483: PUSH
26484: LD_INT 40
26486: PUSH
26487: LD_INT 71
26489: PUSH
26490: LD_INT 23
26492: PUSH
26493: LD_INT 44
26495: PUSH
26496: LD_INT 48
26498: PUSH
26499: LD_INT 49
26501: PUSH
26502: LD_INT 50
26504: PUSH
26505: LD_INT 51
26507: PUSH
26508: LD_INT 52
26510: PUSH
26511: LD_INT 53
26513: PUSH
26514: LD_INT 54
26516: PUSH
26517: LD_INT 55
26519: PUSH
26520: LD_INT 56
26522: PUSH
26523: LD_INT 57
26525: PUSH
26526: LD_INT 58
26528: PUSH
26529: LD_INT 59
26531: PUSH
26532: LD_INT 63
26534: PUSH
26535: LD_INT 64
26537: PUSH
26538: LD_INT 65
26540: PUSH
26541: LD_INT 82
26543: PUSH
26544: LD_INT 83
26546: PUSH
26547: LD_INT 84
26549: PUSH
26550: LD_INT 85
26552: PUSH
26553: LD_INT 86
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: ST_TO_ADDR
26611: GO 26614
26613: POP
// if state > - 1 and state < 3 then
26614: LD_VAR 0 3
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: GREATER
26623: PUSH
26624: LD_VAR 0 3
26628: PUSH
26629: LD_INT 3
26631: LESS
26632: AND
26633: IFFALSE 26690
// for i in result do
26635: LD_ADDR_VAR 0 5
26639: PUSH
26640: LD_VAR 0 4
26644: PUSH
26645: FOR_IN
26646: IFFALSE 26688
// if GetTech ( i , side ) <> state then
26648: LD_VAR 0 5
26652: PPUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 321
26662: PUSH
26663: LD_VAR 0 3
26667: NONEQUAL
26668: IFFALSE 26686
// result := result diff i ;
26670: LD_ADDR_VAR 0 4
26674: PUSH
26675: LD_VAR 0 4
26679: PUSH
26680: LD_VAR 0 5
26684: DIFF
26685: ST_TO_ADDR
26686: GO 26645
26688: POP
26689: POP
// end ;
26690: LD_VAR 0 4
26694: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
// result := true ;
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_INT 1
26707: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26708: LD_ADDR_VAR 0 5
26712: PUSH
26713: LD_VAR 0 2
26717: PPUSH
26718: CALL_OW 480
26722: ST_TO_ADDR
// if not tmp then
26723: LD_VAR 0 5
26727: NOT
26728: IFFALSE 26732
// exit ;
26730: GO 26781
// for i in tmp do
26732: LD_ADDR_VAR 0 4
26736: PUSH
26737: LD_VAR 0 5
26741: PUSH
26742: FOR_IN
26743: IFFALSE 26779
// if GetTech ( i , side ) <> state_researched then
26745: LD_VAR 0 4
26749: PPUSH
26750: LD_VAR 0 1
26754: PPUSH
26755: CALL_OW 321
26759: PUSH
26760: LD_INT 2
26762: NONEQUAL
26763: IFFALSE 26777
// begin result := false ;
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_INT 0
26772: ST_TO_ADDR
// exit ;
26773: POP
26774: POP
26775: GO 26781
// end ;
26777: GO 26742
26779: POP
26780: POP
// end ;
26781: LD_VAR 0 3
26785: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26786: LD_INT 0
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26801: LD_VAR 0 1
26805: NOT
26806: PUSH
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 257
26816: PUSH
26817: LD_INT 9
26819: NONEQUAL
26820: OR
26821: IFFALSE 26825
// exit ;
26823: GO 27398
// side := GetSide ( unit ) ;
26825: LD_ADDR_VAR 0 9
26829: PUSH
26830: LD_VAR 0 1
26834: PPUSH
26835: CALL_OW 255
26839: ST_TO_ADDR
// tech_space := tech_spacanom ;
26840: LD_ADDR_VAR 0 12
26844: PUSH
26845: LD_INT 29
26847: ST_TO_ADDR
// tech_time := tech_taurad ;
26848: LD_ADDR_VAR 0 13
26852: PUSH
26853: LD_INT 28
26855: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26856: LD_ADDR_VAR 0 11
26860: PUSH
26861: LD_VAR 0 1
26865: PPUSH
26866: CALL_OW 310
26870: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26871: LD_VAR 0 11
26875: PPUSH
26876: CALL_OW 247
26880: PUSH
26881: LD_INT 2
26883: EQUAL
26884: IFFALSE 26888
// exit ;
26886: GO 27398
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26888: LD_ADDR_VAR 0 8
26892: PUSH
26893: LD_INT 81
26895: PUSH
26896: LD_VAR 0 9
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 3
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 3
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PPUSH
26926: CALL_OW 69
26930: ST_TO_ADDR
// if not tmp then
26931: LD_VAR 0 8
26935: NOT
26936: IFFALSE 26940
// exit ;
26938: GO 27398
// if in_unit then
26940: LD_VAR 0 11
26944: IFFALSE 26968
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26946: LD_ADDR_VAR 0 10
26950: PUSH
26951: LD_VAR 0 8
26955: PPUSH
26956: LD_VAR 0 11
26960: PPUSH
26961: CALL_OW 74
26965: ST_TO_ADDR
26966: GO 26988
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26968: LD_ADDR_VAR 0 10
26972: PUSH
26973: LD_VAR 0 8
26977: PPUSH
26978: LD_VAR 0 1
26982: PPUSH
26983: CALL_OW 74
26987: ST_TO_ADDR
// if not enemy then
26988: LD_VAR 0 10
26992: NOT
26993: IFFALSE 26997
// exit ;
26995: GO 27398
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26997: LD_VAR 0 11
27001: PUSH
27002: LD_VAR 0 11
27006: PPUSH
27007: LD_VAR 0 10
27011: PPUSH
27012: CALL_OW 296
27016: PUSH
27017: LD_INT 13
27019: GREATER
27020: AND
27021: PUSH
27022: LD_VAR 0 1
27026: PPUSH
27027: LD_VAR 0 10
27031: PPUSH
27032: CALL_OW 296
27036: PUSH
27037: LD_INT 12
27039: GREATER
27040: OR
27041: IFFALSE 27045
// exit ;
27043: GO 27398
// missile := [ 1 ] ;
27045: LD_ADDR_VAR 0 14
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27056: LD_VAR 0 9
27060: PPUSH
27061: LD_VAR 0 12
27065: PPUSH
27066: CALL_OW 325
27070: IFFALSE 27099
// missile := Replace ( missile , missile + 1 , 2 ) ;
27072: LD_ADDR_VAR 0 14
27076: PUSH
27077: LD_VAR 0 14
27081: PPUSH
27082: LD_VAR 0 14
27086: PUSH
27087: LD_INT 1
27089: PLUS
27090: PPUSH
27091: LD_INT 2
27093: PPUSH
27094: CALL_OW 1
27098: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27099: LD_VAR 0 9
27103: PPUSH
27104: LD_VAR 0 13
27108: PPUSH
27109: CALL_OW 325
27113: PUSH
27114: LD_VAR 0 10
27118: PPUSH
27119: CALL_OW 255
27123: PPUSH
27124: LD_VAR 0 13
27128: PPUSH
27129: CALL_OW 325
27133: NOT
27134: AND
27135: IFFALSE 27164
// missile := Replace ( missile , missile + 1 , 3 ) ;
27137: LD_ADDR_VAR 0 14
27141: PUSH
27142: LD_VAR 0 14
27146: PPUSH
27147: LD_VAR 0 14
27151: PUSH
27152: LD_INT 1
27154: PLUS
27155: PPUSH
27156: LD_INT 3
27158: PPUSH
27159: CALL_OW 1
27163: ST_TO_ADDR
// if missile < 2 then
27164: LD_VAR 0 14
27168: PUSH
27169: LD_INT 2
27171: LESS
27172: IFFALSE 27176
// exit ;
27174: GO 27398
// x := GetX ( enemy ) ;
27176: LD_ADDR_VAR 0 4
27180: PUSH
27181: LD_VAR 0 10
27185: PPUSH
27186: CALL_OW 250
27190: ST_TO_ADDR
// y := GetY ( enemy ) ;
27191: LD_ADDR_VAR 0 5
27195: PUSH
27196: LD_VAR 0 10
27200: PPUSH
27201: CALL_OW 251
27205: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27206: LD_ADDR_VAR 0 6
27210: PUSH
27211: LD_VAR 0 4
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PPUSH
27220: LD_INT 1
27222: PPUSH
27223: CALL_OW 12
27227: PLUS
27228: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27229: LD_ADDR_VAR 0 7
27233: PUSH
27234: LD_VAR 0 5
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PPUSH
27243: LD_INT 1
27245: PPUSH
27246: CALL_OW 12
27250: PLUS
27251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27252: LD_VAR 0 6
27256: PPUSH
27257: LD_VAR 0 7
27261: PPUSH
27262: CALL_OW 488
27266: NOT
27267: IFFALSE 27289
// begin _x := x ;
27269: LD_ADDR_VAR 0 6
27273: PUSH
27274: LD_VAR 0 4
27278: ST_TO_ADDR
// _y := y ;
27279: LD_ADDR_VAR 0 7
27283: PUSH
27284: LD_VAR 0 5
27288: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27289: LD_ADDR_VAR 0 3
27293: PUSH
27294: LD_INT 1
27296: PPUSH
27297: LD_VAR 0 14
27301: PPUSH
27302: CALL_OW 12
27306: ST_TO_ADDR
// case i of 1 :
27307: LD_VAR 0 3
27311: PUSH
27312: LD_INT 1
27314: DOUBLE
27315: EQUAL
27316: IFTRUE 27320
27318: GO 27337
27320: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27321: LD_VAR 0 1
27325: PPUSH
27326: LD_VAR 0 10
27330: PPUSH
27331: CALL_OW 115
27335: GO 27398
27337: LD_INT 2
27339: DOUBLE
27340: EQUAL
27341: IFTRUE 27345
27343: GO 27367
27345: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27346: LD_VAR 0 1
27350: PPUSH
27351: LD_VAR 0 6
27355: PPUSH
27356: LD_VAR 0 7
27360: PPUSH
27361: CALL_OW 153
27365: GO 27398
27367: LD_INT 3
27369: DOUBLE
27370: EQUAL
27371: IFTRUE 27375
27373: GO 27397
27375: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27376: LD_VAR 0 1
27380: PPUSH
27381: LD_VAR 0 6
27385: PPUSH
27386: LD_VAR 0 7
27390: PPUSH
27391: CALL_OW 154
27395: GO 27398
27397: POP
// end ;
27398: LD_VAR 0 2
27402: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27403: LD_INT 0
27405: PPUSH
27406: PPUSH
27407: PPUSH
27408: PPUSH
27409: PPUSH
27410: PPUSH
// if not unit or not building then
27411: LD_VAR 0 1
27415: NOT
27416: PUSH
27417: LD_VAR 0 2
27421: NOT
27422: OR
27423: IFFALSE 27427
// exit ;
27425: GO 27585
// x := GetX ( building ) ;
27427: LD_ADDR_VAR 0 5
27431: PUSH
27432: LD_VAR 0 2
27436: PPUSH
27437: CALL_OW 250
27441: ST_TO_ADDR
// y := GetY ( building ) ;
27442: LD_ADDR_VAR 0 6
27446: PUSH
27447: LD_VAR 0 2
27451: PPUSH
27452: CALL_OW 251
27456: ST_TO_ADDR
// for i = 0 to 5 do
27457: LD_ADDR_VAR 0 4
27461: PUSH
27462: DOUBLE
27463: LD_INT 0
27465: DEC
27466: ST_TO_ADDR
27467: LD_INT 5
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27583
// begin _x := ShiftX ( x , i , 3 ) ;
27473: LD_ADDR_VAR 0 7
27477: PUSH
27478: LD_VAR 0 5
27482: PPUSH
27483: LD_VAR 0 4
27487: PPUSH
27488: LD_INT 3
27490: PPUSH
27491: CALL_OW 272
27495: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27496: LD_ADDR_VAR 0 8
27500: PUSH
27501: LD_VAR 0 6
27505: PPUSH
27506: LD_VAR 0 4
27510: PPUSH
27511: LD_INT 3
27513: PPUSH
27514: CALL_OW 273
27518: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27519: LD_VAR 0 7
27523: PPUSH
27524: LD_VAR 0 8
27528: PPUSH
27529: CALL_OW 488
27533: NOT
27534: IFFALSE 27538
// continue ;
27536: GO 27470
// if HexInfo ( _x , _y ) = 0 then
27538: LD_VAR 0 7
27542: PPUSH
27543: LD_VAR 0 8
27547: PPUSH
27548: CALL_OW 428
27552: PUSH
27553: LD_INT 0
27555: EQUAL
27556: IFFALSE 27581
// begin ComMoveXY ( unit , _x , _y ) ;
27558: LD_VAR 0 1
27562: PPUSH
27563: LD_VAR 0 7
27567: PPUSH
27568: LD_VAR 0 8
27572: PPUSH
27573: CALL_OW 111
// exit ;
27577: POP
27578: POP
27579: GO 27585
// end ; end ;
27581: GO 27470
27583: POP
27584: POP
// end ;
27585: LD_VAR 0 3
27589: RET
// export function ScanBase ( side , base_area ) ; begin
27590: LD_INT 0
27592: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_VAR 0 2
27602: PPUSH
27603: LD_INT 81
27605: PUSH
27606: LD_VAR 0 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PPUSH
27615: CALL_OW 70
27619: ST_TO_ADDR
// end ;
27620: LD_VAR 0 3
27624: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27625: LD_INT 0
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
// result := false ;
27631: LD_ADDR_VAR 0 2
27635: PUSH
27636: LD_INT 0
27638: ST_TO_ADDR
// side := GetSide ( unit ) ;
27639: LD_ADDR_VAR 0 3
27643: PUSH
27644: LD_VAR 0 1
27648: PPUSH
27649: CALL_OW 255
27653: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27654: LD_ADDR_VAR 0 4
27658: PUSH
27659: LD_VAR 0 1
27663: PPUSH
27664: CALL_OW 248
27668: ST_TO_ADDR
// case nat of 1 :
27669: LD_VAR 0 4
27673: PUSH
27674: LD_INT 1
27676: DOUBLE
27677: EQUAL
27678: IFTRUE 27682
27680: GO 27693
27682: POP
// tech := tech_lassight ; 2 :
27683: LD_ADDR_VAR 0 5
27687: PUSH
27688: LD_INT 12
27690: ST_TO_ADDR
27691: GO 27732
27693: LD_INT 2
27695: DOUBLE
27696: EQUAL
27697: IFTRUE 27701
27699: GO 27712
27701: POP
// tech := tech_mortar ; 3 :
27702: LD_ADDR_VAR 0 5
27706: PUSH
27707: LD_INT 41
27709: ST_TO_ADDR
27710: GO 27732
27712: LD_INT 3
27714: DOUBLE
27715: EQUAL
27716: IFTRUE 27720
27718: GO 27731
27720: POP
// tech := tech_bazooka ; end ;
27721: LD_ADDR_VAR 0 5
27725: PUSH
27726: LD_INT 44
27728: ST_TO_ADDR
27729: GO 27732
27731: POP
// if Researched ( side , tech ) then
27732: LD_VAR 0 3
27736: PPUSH
27737: LD_VAR 0 5
27741: PPUSH
27742: CALL_OW 325
27746: IFFALSE 27773
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27748: LD_ADDR_VAR 0 2
27752: PUSH
27753: LD_INT 5
27755: PUSH
27756: LD_INT 8
27758: PUSH
27759: LD_INT 9
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: PUSH
27767: LD_VAR 0 4
27771: ARRAY
27772: ST_TO_ADDR
// end ;
27773: LD_VAR 0 2
27777: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27778: LD_INT 0
27780: PPUSH
27781: PPUSH
27782: PPUSH
// if not mines then
27783: LD_VAR 0 2
27787: NOT
27788: IFFALSE 27792
// exit ;
27790: GO 27936
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27792: LD_ADDR_VAR 0 5
27796: PUSH
27797: LD_INT 81
27799: PUSH
27800: LD_VAR 0 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: PUSH
27812: LD_INT 21
27814: PUSH
27815: LD_INT 3
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PPUSH
27830: CALL_OW 69
27834: ST_TO_ADDR
// for i in mines do
27835: LD_ADDR_VAR 0 4
27839: PUSH
27840: LD_VAR 0 2
27844: PUSH
27845: FOR_IN
27846: IFFALSE 27934
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27848: LD_VAR 0 4
27852: PUSH
27853: LD_INT 1
27855: ARRAY
27856: PPUSH
27857: LD_VAR 0 4
27861: PUSH
27862: LD_INT 2
27864: ARRAY
27865: PPUSH
27866: CALL_OW 458
27870: NOT
27871: IFFALSE 27875
// continue ;
27873: GO 27845
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27875: LD_VAR 0 4
27879: PUSH
27880: LD_INT 1
27882: ARRAY
27883: PPUSH
27884: LD_VAR 0 4
27888: PUSH
27889: LD_INT 2
27891: ARRAY
27892: PPUSH
27893: CALL_OW 428
27897: PUSH
27898: LD_VAR 0 5
27902: IN
27903: IFFALSE 27932
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27905: LD_VAR 0 4
27909: PUSH
27910: LD_INT 1
27912: ARRAY
27913: PPUSH
27914: LD_VAR 0 4
27918: PUSH
27919: LD_INT 2
27921: ARRAY
27922: PPUSH
27923: LD_VAR 0 1
27927: PPUSH
27928: CALL_OW 456
// end ;
27932: GO 27845
27934: POP
27935: POP
// end ;
27936: LD_VAR 0 3
27940: RET
// export function Count ( array ) ; begin
27941: LD_INT 0
27943: PPUSH
// result := array + 0 ;
27944: LD_ADDR_VAR 0 2
27948: PUSH
27949: LD_VAR 0 1
27953: PUSH
27954: LD_INT 0
27956: PLUS
27957: ST_TO_ADDR
// end ;
27958: LD_VAR 0 2
27962: RET
// export function IsEmpty ( building ) ; begin
27963: LD_INT 0
27965: PPUSH
// if not building then
27966: LD_VAR 0 1
27970: NOT
27971: IFFALSE 27975
// exit ;
27973: GO 28018
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27975: LD_ADDR_VAR 0 2
27979: PUSH
27980: LD_VAR 0 1
27984: PUSH
27985: LD_INT 22
27987: PUSH
27988: LD_VAR 0 1
27992: PPUSH
27993: CALL_OW 255
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 58
28004: PUSH
28005: EMPTY
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PPUSH
28012: CALL_OW 69
28016: IN
28017: ST_TO_ADDR
// end ;
28018: LD_VAR 0 2
28022: RET
// export function IsNotFull ( building ) ; var places ; begin
28023: LD_INT 0
28025: PPUSH
28026: PPUSH
// if not building then
28027: LD_VAR 0 1
28031: NOT
28032: IFFALSE 28036
// exit ;
28034: GO 28064
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28036: LD_ADDR_VAR 0 2
28040: PUSH
28041: LD_VAR 0 1
28045: PPUSH
28046: LD_INT 3
28048: PUSH
28049: LD_INT 62
28051: PUSH
28052: EMPTY
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PPUSH
28059: CALL_OW 72
28063: ST_TO_ADDR
// end ;
28064: LD_VAR 0 2
28068: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28069: LD_INT 0
28071: PPUSH
28072: PPUSH
28073: PPUSH
28074: PPUSH
// tmp := [ ] ;
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: EMPTY
28081: ST_TO_ADDR
// list := [ ] ;
28082: LD_ADDR_VAR 0 5
28086: PUSH
28087: EMPTY
28088: ST_TO_ADDR
// for i = 16 to 25 do
28089: LD_ADDR_VAR 0 4
28093: PUSH
28094: DOUBLE
28095: LD_INT 16
28097: DEC
28098: ST_TO_ADDR
28099: LD_INT 25
28101: PUSH
28102: FOR_TO
28103: IFFALSE 28176
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28105: LD_ADDR_VAR 0 3
28109: PUSH
28110: LD_VAR 0 3
28114: PUSH
28115: LD_INT 22
28117: PUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 255
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 91
28134: PUSH
28135: LD_VAR 0 1
28139: PUSH
28140: LD_INT 6
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 30
28150: PUSH
28151: LD_VAR 0 4
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: PPUSH
28168: CALL_OW 69
28172: ADD
28173: ST_TO_ADDR
28174: GO 28102
28176: POP
28177: POP
// for i = 1 to tmp do
28178: LD_ADDR_VAR 0 4
28182: PUSH
28183: DOUBLE
28184: LD_INT 1
28186: DEC
28187: ST_TO_ADDR
28188: LD_VAR 0 3
28192: PUSH
28193: FOR_TO
28194: IFFALSE 28282
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28196: LD_ADDR_VAR 0 5
28200: PUSH
28201: LD_VAR 0 5
28205: PUSH
28206: LD_VAR 0 3
28210: PUSH
28211: LD_VAR 0 4
28215: ARRAY
28216: PPUSH
28217: CALL_OW 266
28221: PUSH
28222: LD_VAR 0 3
28226: PUSH
28227: LD_VAR 0 4
28231: ARRAY
28232: PPUSH
28233: CALL_OW 250
28237: PUSH
28238: LD_VAR 0 3
28242: PUSH
28243: LD_VAR 0 4
28247: ARRAY
28248: PPUSH
28249: CALL_OW 251
28253: PUSH
28254: LD_VAR 0 3
28258: PUSH
28259: LD_VAR 0 4
28263: ARRAY
28264: PPUSH
28265: CALL_OW 254
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: ADD
28279: ST_TO_ADDR
28280: GO 28193
28282: POP
28283: POP
// result := list ;
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: LD_VAR 0 5
28293: ST_TO_ADDR
// end ;
28294: LD_VAR 0 2
28298: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28299: LD_INT 0
28301: PPUSH
28302: PPUSH
28303: PPUSH
28304: PPUSH
28305: PPUSH
28306: PPUSH
28307: PPUSH
// if not factory then
28308: LD_VAR 0 1
28312: NOT
28313: IFFALSE 28317
// exit ;
28315: GO 28910
// if control = control_apeman then
28317: LD_VAR 0 4
28321: PUSH
28322: LD_INT 5
28324: EQUAL
28325: IFFALSE 28434
// begin tmp := UnitsInside ( factory ) ;
28327: LD_ADDR_VAR 0 8
28331: PUSH
28332: LD_VAR 0 1
28336: PPUSH
28337: CALL_OW 313
28341: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28342: LD_VAR 0 8
28346: PPUSH
28347: LD_INT 25
28349: PUSH
28350: LD_INT 12
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PPUSH
28357: CALL_OW 72
28361: NOT
28362: IFFALSE 28372
// control := control_manual ;
28364: LD_ADDR_VAR 0 4
28368: PUSH
28369: LD_INT 1
28371: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28372: LD_ADDR_VAR 0 8
28376: PUSH
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL 28069 0 1
28386: ST_TO_ADDR
// if tmp then
28387: LD_VAR 0 8
28391: IFFALSE 28434
// begin for i in tmp do
28393: LD_ADDR_VAR 0 7
28397: PUSH
28398: LD_VAR 0 8
28402: PUSH
28403: FOR_IN
28404: IFFALSE 28432
// if i [ 1 ] = b_ext_radio then
28406: LD_VAR 0 7
28410: PUSH
28411: LD_INT 1
28413: ARRAY
28414: PUSH
28415: LD_INT 22
28417: EQUAL
28418: IFFALSE 28430
// begin control := control_remote ;
28420: LD_ADDR_VAR 0 4
28424: PUSH
28425: LD_INT 2
28427: ST_TO_ADDR
// break ;
28428: GO 28432
// end ;
28430: GO 28403
28432: POP
28433: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28434: LD_VAR 0 1
28438: PPUSH
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_VAR 0 3
28448: PPUSH
28449: LD_VAR 0 4
28453: PPUSH
28454: LD_VAR 0 5
28458: PPUSH
28459: CALL_OW 448
28463: IFFALSE 28498
// begin result := [ chassis , engine , control , weapon ] ;
28465: LD_ADDR_VAR 0 6
28469: PUSH
28470: LD_VAR 0 2
28474: PUSH
28475: LD_VAR 0 3
28479: PUSH
28480: LD_VAR 0 4
28484: PUSH
28485: LD_VAR 0 5
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
// exit ;
28496: GO 28910
// end ; _chassis := AvailableChassisList ( factory ) ;
28498: LD_ADDR_VAR 0 9
28502: PUSH
28503: LD_VAR 0 1
28507: PPUSH
28508: CALL_OW 475
28512: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28513: LD_ADDR_VAR 0 11
28517: PUSH
28518: LD_VAR 0 1
28522: PPUSH
28523: CALL_OW 476
28527: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28528: LD_ADDR_VAR 0 12
28532: PUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: CALL_OW 477
28542: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28543: LD_ADDR_VAR 0 10
28547: PUSH
28548: LD_VAR 0 1
28552: PPUSH
28553: CALL_OW 478
28557: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28558: LD_VAR 0 9
28562: NOT
28563: PUSH
28564: LD_VAR 0 11
28568: NOT
28569: OR
28570: PUSH
28571: LD_VAR 0 12
28575: NOT
28576: OR
28577: PUSH
28578: LD_VAR 0 10
28582: NOT
28583: OR
28584: IFFALSE 28619
// begin result := [ chassis , engine , control , weapon ] ;
28586: LD_ADDR_VAR 0 6
28590: PUSH
28591: LD_VAR 0 2
28595: PUSH
28596: LD_VAR 0 3
28600: PUSH
28601: LD_VAR 0 4
28605: PUSH
28606: LD_VAR 0 5
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: ST_TO_ADDR
// exit ;
28617: GO 28910
// end ; if not chassis in _chassis then
28619: LD_VAR 0 2
28623: PUSH
28624: LD_VAR 0 9
28628: IN
28629: NOT
28630: IFFALSE 28656
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28632: LD_ADDR_VAR 0 2
28636: PUSH
28637: LD_VAR 0 9
28641: PUSH
28642: LD_INT 1
28644: PPUSH
28645: LD_VAR 0 9
28649: PPUSH
28650: CALL_OW 12
28654: ARRAY
28655: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28656: LD_VAR 0 2
28660: PPUSH
28661: LD_VAR 0 3
28665: PPUSH
28666: CALL 28915 0 2
28670: NOT
28671: IFFALSE 28730
// repeat engine := _engine [ 1 ] ;
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_VAR 0 11
28682: PUSH
28683: LD_INT 1
28685: ARRAY
28686: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28687: LD_ADDR_VAR 0 11
28691: PUSH
28692: LD_VAR 0 11
28696: PPUSH
28697: LD_INT 1
28699: PPUSH
28700: CALL_OW 3
28704: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28705: LD_VAR 0 2
28709: PPUSH
28710: LD_VAR 0 3
28714: PPUSH
28715: CALL 28915 0 2
28719: PUSH
28720: LD_VAR 0 11
28724: PUSH
28725: EMPTY
28726: EQUAL
28727: OR
28728: IFFALSE 28673
// if not control in _control then
28730: LD_VAR 0 4
28734: PUSH
28735: LD_VAR 0 12
28739: IN
28740: NOT
28741: IFFALSE 28767
// control := _control [ rand ( 1 , _control ) ] ;
28743: LD_ADDR_VAR 0 4
28747: PUSH
28748: LD_VAR 0 12
28752: PUSH
28753: LD_INT 1
28755: PPUSH
28756: LD_VAR 0 12
28760: PPUSH
28761: CALL_OW 12
28765: ARRAY
28766: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28767: LD_VAR 0 2
28771: PPUSH
28772: LD_VAR 0 5
28776: PPUSH
28777: CALL 29135 0 2
28781: NOT
28782: IFFALSE 28841
// repeat weapon := _weapon [ 1 ] ;
28784: LD_ADDR_VAR 0 5
28788: PUSH
28789: LD_VAR 0 10
28793: PUSH
28794: LD_INT 1
28796: ARRAY
28797: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28798: LD_ADDR_VAR 0 10
28802: PUSH
28803: LD_VAR 0 10
28807: PPUSH
28808: LD_INT 1
28810: PPUSH
28811: CALL_OW 3
28815: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28816: LD_VAR 0 2
28820: PPUSH
28821: LD_VAR 0 5
28825: PPUSH
28826: CALL 29135 0 2
28830: PUSH
28831: LD_VAR 0 10
28835: PUSH
28836: EMPTY
28837: EQUAL
28838: OR
28839: IFFALSE 28784
// result := [ ] ;
28841: LD_ADDR_VAR 0 6
28845: PUSH
28846: EMPTY
28847: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28848: LD_VAR 0 1
28852: PPUSH
28853: LD_VAR 0 2
28857: PPUSH
28858: LD_VAR 0 3
28862: PPUSH
28863: LD_VAR 0 4
28867: PPUSH
28868: LD_VAR 0 5
28872: PPUSH
28873: CALL_OW 448
28877: IFFALSE 28910
// result := [ chassis , engine , control , weapon ] ;
28879: LD_ADDR_VAR 0 6
28883: PUSH
28884: LD_VAR 0 2
28888: PUSH
28889: LD_VAR 0 3
28893: PUSH
28894: LD_VAR 0 4
28898: PUSH
28899: LD_VAR 0 5
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: ST_TO_ADDR
// end ;
28910: LD_VAR 0 6
28914: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28915: LD_INT 0
28917: PPUSH
// if not chassis or not engine then
28918: LD_VAR 0 1
28922: NOT
28923: PUSH
28924: LD_VAR 0 2
28928: NOT
28929: OR
28930: IFFALSE 28934
// exit ;
28932: GO 29130
// case engine of engine_solar :
28934: LD_VAR 0 2
28938: PUSH
28939: LD_INT 2
28941: DOUBLE
28942: EQUAL
28943: IFTRUE 28947
28945: GO 28985
28947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28948: LD_ADDR_VAR 0 3
28952: PUSH
28953: LD_INT 11
28955: PUSH
28956: LD_INT 12
28958: PUSH
28959: LD_INT 13
28961: PUSH
28962: LD_INT 14
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: ST_TO_ADDR
28983: GO 29114
28985: LD_INT 1
28987: DOUBLE
28988: EQUAL
28989: IFTRUE 28993
28991: GO 29055
28993: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28994: LD_ADDR_VAR 0 3
28998: PUSH
28999: LD_INT 11
29001: PUSH
29002: LD_INT 12
29004: PUSH
29005: LD_INT 13
29007: PUSH
29008: LD_INT 14
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: LD_INT 3
29019: PUSH
29020: LD_INT 4
29022: PUSH
29023: LD_INT 5
29025: PUSH
29026: LD_INT 21
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 22
29034: PUSH
29035: LD_INT 24
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: ST_TO_ADDR
29053: GO 29114
29055: LD_INT 3
29057: DOUBLE
29058: EQUAL
29059: IFTRUE 29063
29061: GO 29113
29063: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29064: LD_ADDR_VAR 0 3
29068: PUSH
29069: LD_INT 13
29071: PUSH
29072: LD_INT 14
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 3
29080: PUSH
29081: LD_INT 4
29083: PUSH
29084: LD_INT 5
29086: PUSH
29087: LD_INT 21
29089: PUSH
29090: LD_INT 22
29092: PUSH
29093: LD_INT 23
29095: PUSH
29096: LD_INT 24
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: ST_TO_ADDR
29111: GO 29114
29113: POP
// result := ( chassis in result ) ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_VAR 0 1
29123: PUSH
29124: LD_VAR 0 3
29128: IN
29129: ST_TO_ADDR
// end ;
29130: LD_VAR 0 3
29134: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29135: LD_INT 0
29137: PPUSH
// if not chassis or not weapon then
29138: LD_VAR 0 1
29142: NOT
29143: PUSH
29144: LD_VAR 0 2
29148: NOT
29149: OR
29150: IFFALSE 29154
// exit ;
29152: GO 30214
// case weapon of us_machine_gun :
29154: LD_VAR 0 2
29158: PUSH
29159: LD_INT 2
29161: DOUBLE
29162: EQUAL
29163: IFTRUE 29167
29165: GO 29197
29167: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29168: LD_ADDR_VAR 0 3
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: LD_INT 4
29184: PUSH
29185: LD_INT 5
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
29195: GO 30198
29197: LD_INT 3
29199: DOUBLE
29200: EQUAL
29201: IFTRUE 29205
29203: GO 29235
29205: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 4
29222: PUSH
29223: LD_INT 5
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
29233: GO 30198
29235: LD_INT 11
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29273
29243: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 3
29257: PUSH
29258: LD_INT 4
29260: PUSH
29261: LD_INT 5
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: ST_TO_ADDR
29271: GO 30198
29273: LD_INT 4
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29281
29279: GO 29307
29281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: LD_INT 3
29292: PUSH
29293: LD_INT 4
29295: PUSH
29296: LD_INT 5
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
29305: GO 30198
29307: LD_INT 5
29309: DOUBLE
29310: EQUAL
29311: IFTRUE 29315
29313: GO 29341
29315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 3
29326: PUSH
29327: LD_INT 4
29329: PUSH
29330: LD_INT 5
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: ST_TO_ADDR
29339: GO 30198
29341: LD_INT 9
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 29375
29349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29350: LD_ADDR_VAR 0 3
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: LD_INT 4
29363: PUSH
29364: LD_INT 5
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
29373: GO 30198
29375: LD_INT 7
29377: DOUBLE
29378: EQUAL
29379: IFTRUE 29383
29381: GO 29409
29383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29384: LD_ADDR_VAR 0 3
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: LD_INT 4
29397: PUSH
29398: LD_INT 5
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
29407: GO 30198
29409: LD_INT 12
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29443
29417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: LD_INT 4
29431: PUSH
29432: LD_INT 5
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
29441: GO 30198
29443: LD_INT 13
29445: DOUBLE
29446: EQUAL
29447: IFTRUE 29451
29449: GO 29477
29451: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29452: LD_ADDR_VAR 0 3
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: LD_INT 4
29465: PUSH
29466: LD_INT 5
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: ST_TO_ADDR
29475: GO 30198
29477: LD_INT 14
29479: DOUBLE
29480: EQUAL
29481: IFTRUE 29485
29483: GO 29503
29485: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29486: LD_ADDR_VAR 0 3
29490: PUSH
29491: LD_INT 4
29493: PUSH
29494: LD_INT 5
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: ST_TO_ADDR
29501: GO 30198
29503: LD_INT 6
29505: DOUBLE
29506: EQUAL
29507: IFTRUE 29511
29509: GO 29529
29511: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29512: LD_ADDR_VAR 0 3
29516: PUSH
29517: LD_INT 4
29519: PUSH
29520: LD_INT 5
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: ST_TO_ADDR
29527: GO 30198
29529: LD_INT 10
29531: DOUBLE
29532: EQUAL
29533: IFTRUE 29537
29535: GO 29555
29537: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29538: LD_ADDR_VAR 0 3
29542: PUSH
29543: LD_INT 4
29545: PUSH
29546: LD_INT 5
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: ST_TO_ADDR
29553: GO 30198
29555: LD_INT 22
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 29589
29563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29564: LD_ADDR_VAR 0 3
29568: PUSH
29569: LD_INT 11
29571: PUSH
29572: LD_INT 12
29574: PUSH
29575: LD_INT 13
29577: PUSH
29578: LD_INT 14
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: ST_TO_ADDR
29587: GO 30198
29589: LD_INT 23
29591: DOUBLE
29592: EQUAL
29593: IFTRUE 29597
29595: GO 29623
29597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29598: LD_ADDR_VAR 0 3
29602: PUSH
29603: LD_INT 11
29605: PUSH
29606: LD_INT 12
29608: PUSH
29609: LD_INT 13
29611: PUSH
29612: LD_INT 14
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
29621: GO 30198
29623: LD_INT 24
29625: DOUBLE
29626: EQUAL
29627: IFTRUE 29631
29629: GO 29657
29631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29632: LD_ADDR_VAR 0 3
29636: PUSH
29637: LD_INT 11
29639: PUSH
29640: LD_INT 12
29642: PUSH
29643: LD_INT 13
29645: PUSH
29646: LD_INT 14
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
29655: GO 30198
29657: LD_INT 30
29659: DOUBLE
29660: EQUAL
29661: IFTRUE 29665
29663: GO 29691
29665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29666: LD_ADDR_VAR 0 3
29670: PUSH
29671: LD_INT 11
29673: PUSH
29674: LD_INT 12
29676: PUSH
29677: LD_INT 13
29679: PUSH
29680: LD_INT 14
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
29689: GO 30198
29691: LD_INT 25
29693: DOUBLE
29694: EQUAL
29695: IFTRUE 29699
29697: GO 29717
29699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29700: LD_ADDR_VAR 0 3
29704: PUSH
29705: LD_INT 13
29707: PUSH
29708: LD_INT 14
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: ST_TO_ADDR
29715: GO 30198
29717: LD_INT 27
29719: DOUBLE
29720: EQUAL
29721: IFTRUE 29725
29723: GO 29743
29725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29726: LD_ADDR_VAR 0 3
29730: PUSH
29731: LD_INT 13
29733: PUSH
29734: LD_INT 14
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: ST_TO_ADDR
29741: GO 30198
29743: LD_INT 92
29745: DOUBLE
29746: EQUAL
29747: IFTRUE 29751
29749: GO 29777
29751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29752: LD_ADDR_VAR 0 3
29756: PUSH
29757: LD_INT 11
29759: PUSH
29760: LD_INT 12
29762: PUSH
29763: LD_INT 13
29765: PUSH
29766: LD_INT 14
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
29775: GO 30198
29777: LD_INT 28
29779: DOUBLE
29780: EQUAL
29781: IFTRUE 29785
29783: GO 29803
29785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29786: LD_ADDR_VAR 0 3
29790: PUSH
29791: LD_INT 13
29793: PUSH
29794: LD_INT 14
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: ST_TO_ADDR
29801: GO 30198
29803: LD_INT 29
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 29829
29811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_INT 13
29819: PUSH
29820: LD_INT 14
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: ST_TO_ADDR
29827: GO 30198
29829: LD_INT 31
29831: DOUBLE
29832: EQUAL
29833: IFTRUE 29837
29835: GO 29855
29837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29838: LD_ADDR_VAR 0 3
29842: PUSH
29843: LD_INT 13
29845: PUSH
29846: LD_INT 14
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: ST_TO_ADDR
29853: GO 30198
29855: LD_INT 26
29857: DOUBLE
29858: EQUAL
29859: IFTRUE 29863
29861: GO 29881
29863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29864: LD_ADDR_VAR 0 3
29868: PUSH
29869: LD_INT 13
29871: PUSH
29872: LD_INT 14
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: ST_TO_ADDR
29879: GO 30198
29881: LD_INT 42
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 29915
29889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29890: LD_ADDR_VAR 0 3
29894: PUSH
29895: LD_INT 21
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_INT 23
29903: PUSH
29904: LD_INT 24
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
29913: GO 30198
29915: LD_INT 43
29917: DOUBLE
29918: EQUAL
29919: IFTRUE 29923
29921: GO 29949
29923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: LD_INT 21
29931: PUSH
29932: LD_INT 22
29934: PUSH
29935: LD_INT 23
29937: PUSH
29938: LD_INT 24
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: ST_TO_ADDR
29947: GO 30198
29949: LD_INT 44
29951: DOUBLE
29952: EQUAL
29953: IFTRUE 29957
29955: GO 29983
29957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29958: LD_ADDR_VAR 0 3
29962: PUSH
29963: LD_INT 21
29965: PUSH
29966: LD_INT 22
29968: PUSH
29969: LD_INT 23
29971: PUSH
29972: LD_INT 24
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
29981: GO 30198
29983: LD_INT 45
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 30017
29991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29992: LD_ADDR_VAR 0 3
29996: PUSH
29997: LD_INT 21
29999: PUSH
30000: LD_INT 22
30002: PUSH
30003: LD_INT 23
30005: PUSH
30006: LD_INT 24
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
30015: GO 30198
30017: LD_INT 49
30019: DOUBLE
30020: EQUAL
30021: IFTRUE 30025
30023: GO 30051
30025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30026: LD_ADDR_VAR 0 3
30030: PUSH
30031: LD_INT 21
30033: PUSH
30034: LD_INT 22
30036: PUSH
30037: LD_INT 23
30039: PUSH
30040: LD_INT 24
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
30049: GO 30198
30051: LD_INT 51
30053: DOUBLE
30054: EQUAL
30055: IFTRUE 30059
30057: GO 30085
30059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30060: LD_ADDR_VAR 0 3
30064: PUSH
30065: LD_INT 21
30067: PUSH
30068: LD_INT 22
30070: PUSH
30071: LD_INT 23
30073: PUSH
30074: LD_INT 24
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: ST_TO_ADDR
30083: GO 30198
30085: LD_INT 52
30087: DOUBLE
30088: EQUAL
30089: IFTRUE 30093
30091: GO 30119
30093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30094: LD_ADDR_VAR 0 3
30098: PUSH
30099: LD_INT 21
30101: PUSH
30102: LD_INT 22
30104: PUSH
30105: LD_INT 23
30107: PUSH
30108: LD_INT 24
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: ST_TO_ADDR
30117: GO 30198
30119: LD_INT 53
30121: DOUBLE
30122: EQUAL
30123: IFTRUE 30127
30125: GO 30145
30127: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_INT 23
30135: PUSH
30136: LD_INT 24
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: ST_TO_ADDR
30143: GO 30198
30145: LD_INT 46
30147: DOUBLE
30148: EQUAL
30149: IFTRUE 30153
30151: GO 30171
30153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30154: LD_ADDR_VAR 0 3
30158: PUSH
30159: LD_INT 23
30161: PUSH
30162: LD_INT 24
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: ST_TO_ADDR
30169: GO 30198
30171: LD_INT 47
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30197
30179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30180: LD_ADDR_VAR 0 3
30184: PUSH
30185: LD_INT 23
30187: PUSH
30188: LD_INT 24
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: ST_TO_ADDR
30195: GO 30198
30197: POP
// result := ( chassis in result ) ;
30198: LD_ADDR_VAR 0 3
30202: PUSH
30203: LD_VAR 0 1
30207: PUSH
30208: LD_VAR 0 3
30212: IN
30213: ST_TO_ADDR
// end ;
30214: LD_VAR 0 3
30218: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30219: LD_INT 0
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
// result := array ;
30228: LD_ADDR_VAR 0 5
30232: PUSH
30233: LD_VAR 0 1
30237: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30238: LD_VAR 0 1
30242: NOT
30243: PUSH
30244: LD_VAR 0 2
30248: NOT
30249: OR
30250: PUSH
30251: LD_VAR 0 3
30255: NOT
30256: OR
30257: PUSH
30258: LD_VAR 0 2
30262: PUSH
30263: LD_VAR 0 1
30267: GREATER
30268: OR
30269: PUSH
30270: LD_VAR 0 3
30274: PUSH
30275: LD_VAR 0 1
30279: GREATER
30280: OR
30281: IFFALSE 30285
// exit ;
30283: GO 30581
// if direction then
30285: LD_VAR 0 4
30289: IFFALSE 30353
// begin d := 1 ;
30291: LD_ADDR_VAR 0 9
30295: PUSH
30296: LD_INT 1
30298: ST_TO_ADDR
// if i_from > i_to then
30299: LD_VAR 0 2
30303: PUSH
30304: LD_VAR 0 3
30308: GREATER
30309: IFFALSE 30335
// length := ( array - i_from ) + i_to else
30311: LD_ADDR_VAR 0 11
30315: PUSH
30316: LD_VAR 0 1
30320: PUSH
30321: LD_VAR 0 2
30325: MINUS
30326: PUSH
30327: LD_VAR 0 3
30331: PLUS
30332: ST_TO_ADDR
30333: GO 30351
// length := i_to - i_from ;
30335: LD_ADDR_VAR 0 11
30339: PUSH
30340: LD_VAR 0 3
30344: PUSH
30345: LD_VAR 0 2
30349: MINUS
30350: ST_TO_ADDR
// end else
30351: GO 30414
// begin d := - 1 ;
30353: LD_ADDR_VAR 0 9
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: ST_TO_ADDR
// if i_from > i_to then
30362: LD_VAR 0 2
30366: PUSH
30367: LD_VAR 0 3
30371: GREATER
30372: IFFALSE 30392
// length := i_from - i_to else
30374: LD_ADDR_VAR 0 11
30378: PUSH
30379: LD_VAR 0 2
30383: PUSH
30384: LD_VAR 0 3
30388: MINUS
30389: ST_TO_ADDR
30390: GO 30414
// length := ( array - i_to ) + i_from ;
30392: LD_ADDR_VAR 0 11
30396: PUSH
30397: LD_VAR 0 1
30401: PUSH
30402: LD_VAR 0 3
30406: MINUS
30407: PUSH
30408: LD_VAR 0 2
30412: PLUS
30413: ST_TO_ADDR
// end ; if not length then
30414: LD_VAR 0 11
30418: NOT
30419: IFFALSE 30423
// exit ;
30421: GO 30581
// tmp := array ;
30423: LD_ADDR_VAR 0 10
30427: PUSH
30428: LD_VAR 0 1
30432: ST_TO_ADDR
// for i = 1 to length do
30433: LD_ADDR_VAR 0 6
30437: PUSH
30438: DOUBLE
30439: LD_INT 1
30441: DEC
30442: ST_TO_ADDR
30443: LD_VAR 0 11
30447: PUSH
30448: FOR_TO
30449: IFFALSE 30569
// begin for j = 1 to array do
30451: LD_ADDR_VAR 0 7
30455: PUSH
30456: DOUBLE
30457: LD_INT 1
30459: DEC
30460: ST_TO_ADDR
30461: LD_VAR 0 1
30465: PUSH
30466: FOR_TO
30467: IFFALSE 30555
// begin k := j + d ;
30469: LD_ADDR_VAR 0 8
30473: PUSH
30474: LD_VAR 0 7
30478: PUSH
30479: LD_VAR 0 9
30483: PLUS
30484: ST_TO_ADDR
// if k > array then
30485: LD_VAR 0 8
30489: PUSH
30490: LD_VAR 0 1
30494: GREATER
30495: IFFALSE 30505
// k := 1 ;
30497: LD_ADDR_VAR 0 8
30501: PUSH
30502: LD_INT 1
30504: ST_TO_ADDR
// if not k then
30505: LD_VAR 0 8
30509: NOT
30510: IFFALSE 30522
// k := array ;
30512: LD_ADDR_VAR 0 8
30516: PUSH
30517: LD_VAR 0 1
30521: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30522: LD_ADDR_VAR 0 10
30526: PUSH
30527: LD_VAR 0 10
30531: PPUSH
30532: LD_VAR 0 8
30536: PPUSH
30537: LD_VAR 0 1
30541: PUSH
30542: LD_VAR 0 7
30546: ARRAY
30547: PPUSH
30548: CALL_OW 1
30552: ST_TO_ADDR
// end ;
30553: GO 30466
30555: POP
30556: POP
// array := tmp ;
30557: LD_ADDR_VAR 0 1
30561: PUSH
30562: LD_VAR 0 10
30566: ST_TO_ADDR
// end ;
30567: GO 30448
30569: POP
30570: POP
// result := array ;
30571: LD_ADDR_VAR 0 5
30575: PUSH
30576: LD_VAR 0 1
30580: ST_TO_ADDR
// end ;
30581: LD_VAR 0 5
30585: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30586: LD_INT 0
30588: PPUSH
30589: PPUSH
// result := 0 ;
30590: LD_ADDR_VAR 0 3
30594: PUSH
30595: LD_INT 0
30597: ST_TO_ADDR
// if not array or not value in array then
30598: LD_VAR 0 1
30602: NOT
30603: PUSH
30604: LD_VAR 0 2
30608: PUSH
30609: LD_VAR 0 1
30613: IN
30614: NOT
30615: OR
30616: IFFALSE 30620
// exit ;
30618: GO 30674
// for i = 1 to array do
30620: LD_ADDR_VAR 0 4
30624: PUSH
30625: DOUBLE
30626: LD_INT 1
30628: DEC
30629: ST_TO_ADDR
30630: LD_VAR 0 1
30634: PUSH
30635: FOR_TO
30636: IFFALSE 30672
// if value = array [ i ] then
30638: LD_VAR 0 2
30642: PUSH
30643: LD_VAR 0 1
30647: PUSH
30648: LD_VAR 0 4
30652: ARRAY
30653: EQUAL
30654: IFFALSE 30670
// begin result := i ;
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_VAR 0 4
30665: ST_TO_ADDR
// exit ;
30666: POP
30667: POP
30668: GO 30674
// end ;
30670: GO 30635
30672: POP
30673: POP
// end ;
30674: LD_VAR 0 3
30678: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30679: LD_INT 0
30681: PPUSH
// vc_chassis := chassis ;
30682: LD_ADDR_OWVAR 37
30686: PUSH
30687: LD_VAR 0 1
30691: ST_TO_ADDR
// vc_engine := engine ;
30692: LD_ADDR_OWVAR 39
30696: PUSH
30697: LD_VAR 0 2
30701: ST_TO_ADDR
// vc_control := control ;
30702: LD_ADDR_OWVAR 38
30706: PUSH
30707: LD_VAR 0 3
30711: ST_TO_ADDR
// vc_weapon := weapon ;
30712: LD_ADDR_OWVAR 40
30716: PUSH
30717: LD_VAR 0 4
30721: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30722: LD_ADDR_OWVAR 41
30726: PUSH
30727: LD_VAR 0 5
30731: ST_TO_ADDR
// end ;
30732: LD_VAR 0 6
30736: RET
// export function WantPlant ( unit ) ; var task ; begin
30737: LD_INT 0
30739: PPUSH
30740: PPUSH
// result := false ;
30741: LD_ADDR_VAR 0 2
30745: PUSH
30746: LD_INT 0
30748: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30749: LD_ADDR_VAR 0 3
30753: PUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 437
30763: ST_TO_ADDR
// if task then
30764: LD_VAR 0 3
30768: IFFALSE 30796
// if task [ 1 ] [ 1 ] = p then
30770: LD_VAR 0 3
30774: PUSH
30775: LD_INT 1
30777: ARRAY
30778: PUSH
30779: LD_INT 1
30781: ARRAY
30782: PUSH
30783: LD_STRING p
30785: EQUAL
30786: IFFALSE 30796
// result := true ;
30788: LD_ADDR_VAR 0 2
30792: PUSH
30793: LD_INT 1
30795: ST_TO_ADDR
// end ;
30796: LD_VAR 0 2
30800: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30801: LD_INT 0
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
// if pos < 1 then
30807: LD_VAR 0 2
30811: PUSH
30812: LD_INT 1
30814: LESS
30815: IFFALSE 30819
// exit ;
30817: GO 31122
// if pos = 1 then
30819: LD_VAR 0 2
30823: PUSH
30824: LD_INT 1
30826: EQUAL
30827: IFFALSE 30860
// result := Replace ( arr , pos [ 1 ] , value ) else
30829: LD_ADDR_VAR 0 4
30833: PUSH
30834: LD_VAR 0 1
30838: PPUSH
30839: LD_VAR 0 2
30843: PUSH
30844: LD_INT 1
30846: ARRAY
30847: PPUSH
30848: LD_VAR 0 3
30852: PPUSH
30853: CALL_OW 1
30857: ST_TO_ADDR
30858: GO 31122
// begin tmp := arr ;
30860: LD_ADDR_VAR 0 6
30864: PUSH
30865: LD_VAR 0 1
30869: ST_TO_ADDR
// s_arr := [ tmp ] ;
30870: LD_ADDR_VAR 0 7
30874: PUSH
30875: LD_VAR 0 6
30879: PUSH
30880: EMPTY
30881: LIST
30882: ST_TO_ADDR
// for i = 1 to pos - 1 do
30883: LD_ADDR_VAR 0 5
30887: PUSH
30888: DOUBLE
30889: LD_INT 1
30891: DEC
30892: ST_TO_ADDR
30893: LD_VAR 0 2
30897: PUSH
30898: LD_INT 1
30900: MINUS
30901: PUSH
30902: FOR_TO
30903: IFFALSE 30948
// begin tmp := tmp [ pos [ i ] ] ;
30905: LD_ADDR_VAR 0 6
30909: PUSH
30910: LD_VAR 0 6
30914: PUSH
30915: LD_VAR 0 2
30919: PUSH
30920: LD_VAR 0 5
30924: ARRAY
30925: ARRAY
30926: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30927: LD_ADDR_VAR 0 7
30931: PUSH
30932: LD_VAR 0 7
30936: PUSH
30937: LD_VAR 0 6
30941: PUSH
30942: EMPTY
30943: LIST
30944: ADD
30945: ST_TO_ADDR
// end ;
30946: GO 30902
30948: POP
30949: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30950: LD_ADDR_VAR 0 6
30954: PUSH
30955: LD_VAR 0 6
30959: PPUSH
30960: LD_VAR 0 2
30964: PUSH
30965: LD_VAR 0 2
30969: ARRAY
30970: PPUSH
30971: LD_VAR 0 3
30975: PPUSH
30976: CALL_OW 1
30980: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30981: LD_ADDR_VAR 0 7
30985: PUSH
30986: LD_VAR 0 7
30990: PPUSH
30991: LD_VAR 0 7
30995: PPUSH
30996: LD_VAR 0 6
31000: PPUSH
31001: CALL_OW 1
31005: ST_TO_ADDR
// for i = s_arr downto 2 do
31006: LD_ADDR_VAR 0 5
31010: PUSH
31011: DOUBLE
31012: LD_VAR 0 7
31016: INC
31017: ST_TO_ADDR
31018: LD_INT 2
31020: PUSH
31021: FOR_DOWNTO
31022: IFFALSE 31106
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31024: LD_ADDR_VAR 0 6
31028: PUSH
31029: LD_VAR 0 7
31033: PUSH
31034: LD_VAR 0 5
31038: PUSH
31039: LD_INT 1
31041: MINUS
31042: ARRAY
31043: PPUSH
31044: LD_VAR 0 2
31048: PUSH
31049: LD_VAR 0 5
31053: PUSH
31054: LD_INT 1
31056: MINUS
31057: ARRAY
31058: PPUSH
31059: LD_VAR 0 7
31063: PUSH
31064: LD_VAR 0 5
31068: ARRAY
31069: PPUSH
31070: CALL_OW 1
31074: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31075: LD_ADDR_VAR 0 7
31079: PUSH
31080: LD_VAR 0 7
31084: PPUSH
31085: LD_VAR 0 5
31089: PUSH
31090: LD_INT 1
31092: MINUS
31093: PPUSH
31094: LD_VAR 0 6
31098: PPUSH
31099: CALL_OW 1
31103: ST_TO_ADDR
// end ;
31104: GO 31021
31106: POP
31107: POP
// result := s_arr [ 1 ] ;
31108: LD_ADDR_VAR 0 4
31112: PUSH
31113: LD_VAR 0 7
31117: PUSH
31118: LD_INT 1
31120: ARRAY
31121: ST_TO_ADDR
// end ; end ;
31122: LD_VAR 0 4
31126: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31127: LD_INT 0
31129: PPUSH
31130: PPUSH
// if not list then
31131: LD_VAR 0 1
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31231
// i := list [ pos1 ] ;
31140: LD_ADDR_VAR 0 5
31144: PUSH
31145: LD_VAR 0 1
31149: PUSH
31150: LD_VAR 0 2
31154: ARRAY
31155: ST_TO_ADDR
// if not i then
31156: LD_VAR 0 5
31160: NOT
31161: IFFALSE 31165
// exit ;
31163: GO 31231
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31165: LD_ADDR_VAR 0 1
31169: PUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: LD_VAR 0 2
31179: PPUSH
31180: LD_VAR 0 1
31184: PUSH
31185: LD_VAR 0 3
31189: ARRAY
31190: PPUSH
31191: CALL_OW 1
31195: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31196: LD_ADDR_VAR 0 1
31200: PUSH
31201: LD_VAR 0 1
31205: PPUSH
31206: LD_VAR 0 3
31210: PPUSH
31211: LD_VAR 0 5
31215: PPUSH
31216: CALL_OW 1
31220: ST_TO_ADDR
// result := list ;
31221: LD_ADDR_VAR 0 4
31225: PUSH
31226: LD_VAR 0 1
31230: ST_TO_ADDR
// end ;
31231: LD_VAR 0 4
31235: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31236: LD_INT 0
31238: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31239: LD_ADDR_VAR 0 5
31243: PUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: CALL_OW 250
31253: PPUSH
31254: LD_VAR 0 1
31258: PPUSH
31259: CALL_OW 251
31263: PPUSH
31264: LD_VAR 0 2
31268: PPUSH
31269: LD_VAR 0 3
31273: PPUSH
31274: LD_VAR 0 4
31278: PPUSH
31279: CALL 31657 0 5
31283: ST_TO_ADDR
// end ;
31284: LD_VAR 0 5
31288: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31289: LD_INT 0
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
// if not list or not unit then
31295: LD_VAR 0 2
31299: NOT
31300: PUSH
31301: LD_VAR 0 1
31305: NOT
31306: OR
31307: IFFALSE 31311
// exit ;
31309: GO 31652
// result := [ ] ;
31311: LD_ADDR_VAR 0 5
31315: PUSH
31316: EMPTY
31317: ST_TO_ADDR
// for i in list do
31318: LD_ADDR_VAR 0 6
31322: PUSH
31323: LD_VAR 0 2
31327: PUSH
31328: FOR_IN
31329: IFFALSE 31547
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31331: LD_ADDR_VAR 0 8
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_VAR 0 6
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: LD_VAR 0 6
31354: PUSH
31355: LD_INT 2
31357: ARRAY
31358: PPUSH
31359: CALL_OW 297
31363: ST_TO_ADDR
// if not Count ( result ) then
31364: LD_VAR 0 5
31368: PPUSH
31369: CALL 27941 0 1
31373: NOT
31374: IFFALSE 31407
// begin result := Join ( result , [ i , tmp ] ) ;
31376: LD_ADDR_VAR 0 5
31380: PUSH
31381: LD_VAR 0 5
31385: PPUSH
31386: LD_VAR 0 6
31390: PUSH
31391: LD_VAR 0 8
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PPUSH
31400: CALL 63530 0 2
31404: ST_TO_ADDR
// continue ;
31405: GO 31328
// end ; if result [ result ] [ 2 ] <= tmp then
31407: LD_VAR 0 5
31411: PUSH
31412: LD_VAR 0 5
31416: ARRAY
31417: PUSH
31418: LD_INT 2
31420: ARRAY
31421: PUSH
31422: LD_VAR 0 8
31426: LESSEQUAL
31427: IFFALSE 31460
// result := Join ( result , [ i , tmp ] ) else
31429: LD_ADDR_VAR 0 5
31433: PUSH
31434: LD_VAR 0 5
31438: PPUSH
31439: LD_VAR 0 6
31443: PUSH
31444: LD_VAR 0 8
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PPUSH
31453: CALL 63530 0 2
31457: ST_TO_ADDR
31458: GO 31545
// begin for j := 1 to Count ( result ) do
31460: LD_ADDR_VAR 0 7
31464: PUSH
31465: DOUBLE
31466: LD_INT 1
31468: DEC
31469: ST_TO_ADDR
31470: LD_VAR 0 5
31474: PPUSH
31475: CALL 27941 0 1
31479: PUSH
31480: FOR_TO
31481: IFFALSE 31543
// begin if tmp < result [ j ] [ 2 ] then
31483: LD_VAR 0 8
31487: PUSH
31488: LD_VAR 0 5
31492: PUSH
31493: LD_VAR 0 7
31497: ARRAY
31498: PUSH
31499: LD_INT 2
31501: ARRAY
31502: LESS
31503: IFFALSE 31541
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31505: LD_ADDR_VAR 0 5
31509: PUSH
31510: LD_VAR 0 5
31514: PPUSH
31515: LD_VAR 0 7
31519: PPUSH
31520: LD_VAR 0 6
31524: PUSH
31525: LD_VAR 0 8
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 2
31538: ST_TO_ADDR
// break ;
31539: GO 31543
// end ; end ;
31541: GO 31480
31543: POP
31544: POP
// end ; end ;
31545: GO 31328
31547: POP
31548: POP
// if result and not asc then
31549: LD_VAR 0 5
31553: PUSH
31554: LD_VAR 0 3
31558: NOT
31559: AND
31560: IFFALSE 31577
// result := ReverseArray ( result ) ;
31562: LD_ADDR_VAR 0 5
31566: PUSH
31567: LD_VAR 0 5
31571: PPUSH
31572: CALL 58817 0 1
31576: ST_TO_ADDR
// tmp := [ ] ;
31577: LD_ADDR_VAR 0 8
31581: PUSH
31582: EMPTY
31583: ST_TO_ADDR
// if mode then
31584: LD_VAR 0 4
31588: IFFALSE 31652
// begin for i := 1 to result do
31590: LD_ADDR_VAR 0 6
31594: PUSH
31595: DOUBLE
31596: LD_INT 1
31598: DEC
31599: ST_TO_ADDR
31600: LD_VAR 0 5
31604: PUSH
31605: FOR_TO
31606: IFFALSE 31640
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31608: LD_ADDR_VAR 0 8
31612: PUSH
31613: LD_VAR 0 8
31617: PPUSH
31618: LD_VAR 0 5
31622: PUSH
31623: LD_VAR 0 6
31627: ARRAY
31628: PUSH
31629: LD_INT 1
31631: ARRAY
31632: PPUSH
31633: CALL 63530 0 2
31637: ST_TO_ADDR
31638: GO 31605
31640: POP
31641: POP
// result := tmp ;
31642: LD_ADDR_VAR 0 5
31646: PUSH
31647: LD_VAR 0 8
31651: ST_TO_ADDR
// end ; end ;
31652: LD_VAR 0 5
31656: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31657: LD_INT 0
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
// if not list then
31663: LD_VAR 0 3
31667: NOT
31668: IFFALSE 31672
// exit ;
31670: GO 32060
// result := [ ] ;
31672: LD_ADDR_VAR 0 6
31676: PUSH
31677: EMPTY
31678: ST_TO_ADDR
// for i in list do
31679: LD_ADDR_VAR 0 7
31683: PUSH
31684: LD_VAR 0 3
31688: PUSH
31689: FOR_IN
31690: IFFALSE 31892
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31692: LD_ADDR_VAR 0 9
31696: PUSH
31697: LD_VAR 0 7
31701: PPUSH
31702: LD_VAR 0 1
31706: PPUSH
31707: LD_VAR 0 2
31711: PPUSH
31712: CALL_OW 297
31716: ST_TO_ADDR
// if not result then
31717: LD_VAR 0 6
31721: NOT
31722: IFFALSE 31748
// result := [ [ i , tmp ] ] else
31724: LD_ADDR_VAR 0 6
31728: PUSH
31729: LD_VAR 0 7
31733: PUSH
31734: LD_VAR 0 9
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: ST_TO_ADDR
31746: GO 31890
// begin if result [ result ] [ 2 ] < tmp then
31748: LD_VAR 0 6
31752: PUSH
31753: LD_VAR 0 6
31757: ARRAY
31758: PUSH
31759: LD_INT 2
31761: ARRAY
31762: PUSH
31763: LD_VAR 0 9
31767: LESS
31768: IFFALSE 31810
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31770: LD_ADDR_VAR 0 6
31774: PUSH
31775: LD_VAR 0 6
31779: PPUSH
31780: LD_VAR 0 6
31784: PUSH
31785: LD_INT 1
31787: PLUS
31788: PPUSH
31789: LD_VAR 0 7
31793: PUSH
31794: LD_VAR 0 9
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PPUSH
31803: CALL_OW 2
31807: ST_TO_ADDR
31808: GO 31890
// for j = 1 to result do
31810: LD_ADDR_VAR 0 8
31814: PUSH
31815: DOUBLE
31816: LD_INT 1
31818: DEC
31819: ST_TO_ADDR
31820: LD_VAR 0 6
31824: PUSH
31825: FOR_TO
31826: IFFALSE 31888
// begin if tmp < result [ j ] [ 2 ] then
31828: LD_VAR 0 9
31832: PUSH
31833: LD_VAR 0 6
31837: PUSH
31838: LD_VAR 0 8
31842: ARRAY
31843: PUSH
31844: LD_INT 2
31846: ARRAY
31847: LESS
31848: IFFALSE 31886
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31850: LD_ADDR_VAR 0 6
31854: PUSH
31855: LD_VAR 0 6
31859: PPUSH
31860: LD_VAR 0 8
31864: PPUSH
31865: LD_VAR 0 7
31869: PUSH
31870: LD_VAR 0 9
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PPUSH
31879: CALL_OW 2
31883: ST_TO_ADDR
// break ;
31884: GO 31888
// end ; end ;
31886: GO 31825
31888: POP
31889: POP
// end ; end ;
31890: GO 31689
31892: POP
31893: POP
// if result and not asc then
31894: LD_VAR 0 6
31898: PUSH
31899: LD_VAR 0 4
31903: NOT
31904: AND
31905: IFFALSE 31980
// begin tmp := result ;
31907: LD_ADDR_VAR 0 9
31911: PUSH
31912: LD_VAR 0 6
31916: ST_TO_ADDR
// for i = tmp downto 1 do
31917: LD_ADDR_VAR 0 7
31921: PUSH
31922: DOUBLE
31923: LD_VAR 0 9
31927: INC
31928: ST_TO_ADDR
31929: LD_INT 1
31931: PUSH
31932: FOR_DOWNTO
31933: IFFALSE 31978
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31935: LD_ADDR_VAR 0 6
31939: PUSH
31940: LD_VAR 0 6
31944: PPUSH
31945: LD_VAR 0 9
31949: PUSH
31950: LD_VAR 0 7
31954: MINUS
31955: PUSH
31956: LD_INT 1
31958: PLUS
31959: PPUSH
31960: LD_VAR 0 9
31964: PUSH
31965: LD_VAR 0 7
31969: ARRAY
31970: PPUSH
31971: CALL_OW 1
31975: ST_TO_ADDR
31976: GO 31932
31978: POP
31979: POP
// end ; tmp := [ ] ;
31980: LD_ADDR_VAR 0 9
31984: PUSH
31985: EMPTY
31986: ST_TO_ADDR
// if mode then
31987: LD_VAR 0 5
31991: IFFALSE 32060
// begin for i = 1 to result do
31993: LD_ADDR_VAR 0 7
31997: PUSH
31998: DOUBLE
31999: LD_INT 1
32001: DEC
32002: ST_TO_ADDR
32003: LD_VAR 0 6
32007: PUSH
32008: FOR_TO
32009: IFFALSE 32048
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32011: LD_ADDR_VAR 0 9
32015: PUSH
32016: LD_VAR 0 9
32020: PPUSH
32021: LD_VAR 0 7
32025: PPUSH
32026: LD_VAR 0 6
32030: PUSH
32031: LD_VAR 0 7
32035: ARRAY
32036: PUSH
32037: LD_INT 1
32039: ARRAY
32040: PPUSH
32041: CALL_OW 1
32045: ST_TO_ADDR
32046: GO 32008
32048: POP
32049: POP
// result := tmp ;
32050: LD_ADDR_VAR 0 6
32054: PUSH
32055: LD_VAR 0 9
32059: ST_TO_ADDR
// end ; end ;
32060: LD_VAR 0 6
32064: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32065: LD_INT 0
32067: PPUSH
32068: PPUSH
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32073: LD_ADDR_VAR 0 5
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: ST_TO_ADDR
// if not x or not y then
32095: LD_VAR 0 2
32099: NOT
32100: PUSH
32101: LD_VAR 0 3
32105: NOT
32106: OR
32107: IFFALSE 32111
// exit ;
32109: GO 33761
// if not range then
32111: LD_VAR 0 4
32115: NOT
32116: IFFALSE 32126
// range := 10 ;
32118: LD_ADDR_VAR 0 4
32122: PUSH
32123: LD_INT 10
32125: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32126: LD_ADDR_VAR 0 8
32130: PUSH
32131: LD_INT 81
32133: PUSH
32134: LD_VAR 0 1
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 92
32145: PUSH
32146: LD_VAR 0 2
32150: PUSH
32151: LD_VAR 0 3
32155: PUSH
32156: LD_VAR 0 4
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: LD_INT 21
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: PPUSH
32189: CALL_OW 69
32193: ST_TO_ADDR
// if not tmp then
32194: LD_VAR 0 8
32198: NOT
32199: IFFALSE 32203
// exit ;
32201: GO 33761
// for i in tmp do
32203: LD_ADDR_VAR 0 6
32207: PUSH
32208: LD_VAR 0 8
32212: PUSH
32213: FOR_IN
32214: IFFALSE 33736
// begin points := [ 0 , 0 , 0 ] ;
32216: LD_ADDR_VAR 0 9
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: ST_TO_ADDR
// bpoints := 1 ;
32235: LD_ADDR_VAR 0 10
32239: PUSH
32240: LD_INT 1
32242: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32243: LD_VAR 0 6
32247: PPUSH
32248: CALL_OW 247
32252: PUSH
32253: LD_INT 1
32255: DOUBLE
32256: EQUAL
32257: IFTRUE 32261
32259: GO 32839
32261: POP
// begin if GetClass ( i ) = 1 then
32262: LD_VAR 0 6
32266: PPUSH
32267: CALL_OW 257
32271: PUSH
32272: LD_INT 1
32274: EQUAL
32275: IFFALSE 32296
// points := [ 10 , 5 , 3 ] ;
32277: LD_ADDR_VAR 0 9
32281: PUSH
32282: LD_INT 10
32284: PUSH
32285: LD_INT 5
32287: PUSH
32288: LD_INT 3
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32296: LD_VAR 0 6
32300: PPUSH
32301: CALL_OW 257
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: LD_INT 3
32311: PUSH
32312: LD_INT 4
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: IN
32320: IFFALSE 32341
// points := [ 3 , 2 , 1 ] ;
32322: LD_ADDR_VAR 0 9
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32341: LD_VAR 0 6
32345: PPUSH
32346: CALL_OW 257
32350: PUSH
32351: LD_INT 5
32353: EQUAL
32354: IFFALSE 32375
// points := [ 130 , 5 , 2 ] ;
32356: LD_ADDR_VAR 0 9
32360: PUSH
32361: LD_INT 130
32363: PUSH
32364: LD_INT 5
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32375: LD_VAR 0 6
32379: PPUSH
32380: CALL_OW 257
32384: PUSH
32385: LD_INT 8
32387: EQUAL
32388: IFFALSE 32409
// points := [ 35 , 35 , 30 ] ;
32390: LD_ADDR_VAR 0 9
32394: PUSH
32395: LD_INT 35
32397: PUSH
32398: LD_INT 35
32400: PUSH
32401: LD_INT 30
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32409: LD_VAR 0 6
32413: PPUSH
32414: CALL_OW 257
32418: PUSH
32419: LD_INT 9
32421: EQUAL
32422: IFFALSE 32443
// points := [ 20 , 55 , 40 ] ;
32424: LD_ADDR_VAR 0 9
32428: PUSH
32429: LD_INT 20
32431: PUSH
32432: LD_INT 55
32434: PUSH
32435: LD_INT 40
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32443: LD_VAR 0 6
32447: PPUSH
32448: CALL_OW 257
32452: PUSH
32453: LD_INT 12
32455: PUSH
32456: LD_INT 16
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: IN
32463: IFFALSE 32484
// points := [ 5 , 3 , 2 ] ;
32465: LD_ADDR_VAR 0 9
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32484: LD_VAR 0 6
32488: PPUSH
32489: CALL_OW 257
32493: PUSH
32494: LD_INT 17
32496: EQUAL
32497: IFFALSE 32518
// points := [ 100 , 50 , 75 ] ;
32499: LD_ADDR_VAR 0 9
32503: PUSH
32504: LD_INT 100
32506: PUSH
32507: LD_INT 50
32509: PUSH
32510: LD_INT 75
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32518: LD_VAR 0 6
32522: PPUSH
32523: CALL_OW 257
32527: PUSH
32528: LD_INT 15
32530: EQUAL
32531: IFFALSE 32552
// points := [ 10 , 5 , 3 ] ;
32533: LD_ADDR_VAR 0 9
32537: PUSH
32538: LD_INT 10
32540: PUSH
32541: LD_INT 5
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32552: LD_VAR 0 6
32556: PPUSH
32557: CALL_OW 257
32561: PUSH
32562: LD_INT 14
32564: EQUAL
32565: IFFALSE 32586
// points := [ 10 , 0 , 0 ] ;
32567: LD_ADDR_VAR 0 9
32571: PUSH
32572: LD_INT 10
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32586: LD_VAR 0 6
32590: PPUSH
32591: CALL_OW 257
32595: PUSH
32596: LD_INT 11
32598: EQUAL
32599: IFFALSE 32620
// points := [ 30 , 10 , 5 ] ;
32601: LD_ADDR_VAR 0 9
32605: PUSH
32606: LD_INT 30
32608: PUSH
32609: LD_INT 10
32611: PUSH
32612: LD_INT 5
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32620: LD_VAR 0 1
32624: PPUSH
32625: LD_INT 5
32627: PPUSH
32628: CALL_OW 321
32632: PUSH
32633: LD_INT 2
32635: EQUAL
32636: IFFALSE 32653
// bpoints := bpoints * 1.8 ;
32638: LD_ADDR_VAR 0 10
32642: PUSH
32643: LD_VAR 0 10
32647: PUSH
32648: LD_REAL  1.80000000000000E+0000
32651: MUL
32652: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32653: LD_VAR 0 6
32657: PPUSH
32658: CALL_OW 257
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: LD_INT 4
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: IN
32681: PUSH
32682: LD_VAR 0 1
32686: PPUSH
32687: LD_INT 51
32689: PPUSH
32690: CALL_OW 321
32694: PUSH
32695: LD_INT 2
32697: EQUAL
32698: AND
32699: IFFALSE 32716
// bpoints := bpoints * 1.2 ;
32701: LD_ADDR_VAR 0 10
32705: PUSH
32706: LD_VAR 0 10
32710: PUSH
32711: LD_REAL  1.20000000000000E+0000
32714: MUL
32715: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32716: LD_VAR 0 6
32720: PPUSH
32721: CALL_OW 257
32725: PUSH
32726: LD_INT 5
32728: PUSH
32729: LD_INT 7
32731: PUSH
32732: LD_INT 9
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: LIST
32739: IN
32740: PUSH
32741: LD_VAR 0 1
32745: PPUSH
32746: LD_INT 52
32748: PPUSH
32749: CALL_OW 321
32753: PUSH
32754: LD_INT 2
32756: EQUAL
32757: AND
32758: IFFALSE 32775
// bpoints := bpoints * 1.5 ;
32760: LD_ADDR_VAR 0 10
32764: PUSH
32765: LD_VAR 0 10
32769: PUSH
32770: LD_REAL  1.50000000000000E+0000
32773: MUL
32774: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32775: LD_VAR 0 1
32779: PPUSH
32780: LD_INT 66
32782: PPUSH
32783: CALL_OW 321
32787: PUSH
32788: LD_INT 2
32790: EQUAL
32791: IFFALSE 32808
// bpoints := bpoints * 1.1 ;
32793: LD_ADDR_VAR 0 10
32797: PUSH
32798: LD_VAR 0 10
32802: PUSH
32803: LD_REAL  1.10000000000000E+0000
32806: MUL
32807: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32808: LD_ADDR_VAR 0 10
32812: PUSH
32813: LD_VAR 0 10
32817: PUSH
32818: LD_VAR 0 6
32822: PPUSH
32823: LD_INT 1
32825: PPUSH
32826: CALL_OW 259
32830: PUSH
32831: LD_REAL  1.15000000000000E+0000
32834: MUL
32835: MUL
32836: ST_TO_ADDR
// end ; unit_vehicle :
32837: GO 33665
32839: LD_INT 2
32841: DOUBLE
32842: EQUAL
32843: IFTRUE 32847
32845: GO 33653
32847: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32848: LD_VAR 0 6
32852: PPUSH
32853: CALL_OW 264
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 42
32863: PUSH
32864: LD_INT 24
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: IN
32872: IFFALSE 32893
// points := [ 25 , 5 , 3 ] ;
32874: LD_ADDR_VAR 0 9
32878: PUSH
32879: LD_INT 25
32881: PUSH
32882: LD_INT 5
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32893: LD_VAR 0 6
32897: PPUSH
32898: CALL_OW 264
32902: PUSH
32903: LD_INT 4
32905: PUSH
32906: LD_INT 43
32908: PUSH
32909: LD_INT 25
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: IN
32917: IFFALSE 32938
// points := [ 40 , 15 , 5 ] ;
32919: LD_ADDR_VAR 0 9
32923: PUSH
32924: LD_INT 40
32926: PUSH
32927: LD_INT 15
32929: PUSH
32930: LD_INT 5
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32938: LD_VAR 0 6
32942: PPUSH
32943: CALL_OW 264
32947: PUSH
32948: LD_INT 3
32950: PUSH
32951: LD_INT 23
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: IN
32958: IFFALSE 32979
// points := [ 7 , 25 , 8 ] ;
32960: LD_ADDR_VAR 0 9
32964: PUSH
32965: LD_INT 7
32967: PUSH
32968: LD_INT 25
32970: PUSH
32971: LD_INT 8
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32979: LD_VAR 0 6
32983: PPUSH
32984: CALL_OW 264
32988: PUSH
32989: LD_INT 5
32991: PUSH
32992: LD_INT 27
32994: PUSH
32995: LD_INT 44
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: IN
33003: IFFALSE 33024
// points := [ 14 , 50 , 16 ] ;
33005: LD_ADDR_VAR 0 9
33009: PUSH
33010: LD_INT 14
33012: PUSH
33013: LD_INT 50
33015: PUSH
33016: LD_INT 16
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33024: LD_VAR 0 6
33028: PPUSH
33029: CALL_OW 264
33033: PUSH
33034: LD_INT 6
33036: PUSH
33037: LD_INT 46
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: IN
33044: IFFALSE 33065
// points := [ 32 , 120 , 70 ] ;
33046: LD_ADDR_VAR 0 9
33050: PUSH
33051: LD_INT 32
33053: PUSH
33054: LD_INT 120
33056: PUSH
33057: LD_INT 70
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33065: LD_VAR 0 6
33069: PPUSH
33070: CALL_OW 264
33074: PUSH
33075: LD_INT 7
33077: PUSH
33078: LD_INT 28
33080: PUSH
33081: LD_INT 45
33083: PUSH
33084: LD_INT 92
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: IN
33093: IFFALSE 33114
// points := [ 35 , 20 , 45 ] ;
33095: LD_ADDR_VAR 0 9
33099: PUSH
33100: LD_INT 35
33102: PUSH
33103: LD_INT 20
33105: PUSH
33106: LD_INT 45
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33114: LD_VAR 0 6
33118: PPUSH
33119: CALL_OW 264
33123: PUSH
33124: LD_INT 47
33126: PUSH
33127: EMPTY
33128: LIST
33129: IN
33130: IFFALSE 33151
// points := [ 67 , 45 , 75 ] ;
33132: LD_ADDR_VAR 0 9
33136: PUSH
33137: LD_INT 67
33139: PUSH
33140: LD_INT 45
33142: PUSH
33143: LD_INT 75
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33151: LD_VAR 0 6
33155: PPUSH
33156: CALL_OW 264
33160: PUSH
33161: LD_INT 26
33163: PUSH
33164: EMPTY
33165: LIST
33166: IN
33167: IFFALSE 33188
// points := [ 120 , 30 , 80 ] ;
33169: LD_ADDR_VAR 0 9
33173: PUSH
33174: LD_INT 120
33176: PUSH
33177: LD_INT 30
33179: PUSH
33180: LD_INT 80
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33188: LD_VAR 0 6
33192: PPUSH
33193: CALL_OW 264
33197: PUSH
33198: LD_INT 22
33200: PUSH
33201: EMPTY
33202: LIST
33203: IN
33204: IFFALSE 33225
// points := [ 40 , 1 , 1 ] ;
33206: LD_ADDR_VAR 0 9
33210: PUSH
33211: LD_INT 40
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33225: LD_VAR 0 6
33229: PPUSH
33230: CALL_OW 264
33234: PUSH
33235: LD_INT 29
33237: PUSH
33238: EMPTY
33239: LIST
33240: IN
33241: IFFALSE 33262
// points := [ 70 , 200 , 400 ] ;
33243: LD_ADDR_VAR 0 9
33247: PUSH
33248: LD_INT 70
33250: PUSH
33251: LD_INT 200
33253: PUSH
33254: LD_INT 400
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33262: LD_VAR 0 6
33266: PPUSH
33267: CALL_OW 264
33271: PUSH
33272: LD_INT 14
33274: PUSH
33275: LD_INT 53
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: IN
33282: IFFALSE 33303
// points := [ 40 , 10 , 20 ] ;
33284: LD_ADDR_VAR 0 9
33288: PUSH
33289: LD_INT 40
33291: PUSH
33292: LD_INT 10
33294: PUSH
33295: LD_INT 20
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: LIST
33302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33303: LD_VAR 0 6
33307: PPUSH
33308: CALL_OW 264
33312: PUSH
33313: LD_INT 9
33315: PUSH
33316: EMPTY
33317: LIST
33318: IN
33319: IFFALSE 33340
// points := [ 5 , 70 , 20 ] ;
33321: LD_ADDR_VAR 0 9
33325: PUSH
33326: LD_INT 5
33328: PUSH
33329: LD_INT 70
33331: PUSH
33332: LD_INT 20
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33340: LD_VAR 0 6
33344: PPUSH
33345: CALL_OW 264
33349: PUSH
33350: LD_INT 10
33352: PUSH
33353: EMPTY
33354: LIST
33355: IN
33356: IFFALSE 33377
// points := [ 35 , 110 , 70 ] ;
33358: LD_ADDR_VAR 0 9
33362: PUSH
33363: LD_INT 35
33365: PUSH
33366: LD_INT 110
33368: PUSH
33369: LD_INT 70
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: LIST
33376: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33377: LD_VAR 0 6
33381: PPUSH
33382: CALL_OW 265
33386: PUSH
33387: LD_INT 25
33389: EQUAL
33390: IFFALSE 33411
// points := [ 80 , 65 , 100 ] ;
33392: LD_ADDR_VAR 0 9
33396: PUSH
33397: LD_INT 80
33399: PUSH
33400: LD_INT 65
33402: PUSH
33403: LD_INT 100
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33411: LD_VAR 0 6
33415: PPUSH
33416: CALL_OW 263
33420: PUSH
33421: LD_INT 1
33423: EQUAL
33424: IFFALSE 33459
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33426: LD_ADDR_VAR 0 10
33430: PUSH
33431: LD_VAR 0 10
33435: PUSH
33436: LD_VAR 0 6
33440: PPUSH
33441: CALL_OW 311
33445: PPUSH
33446: LD_INT 3
33448: PPUSH
33449: CALL_OW 259
33453: PUSH
33454: LD_INT 4
33456: MUL
33457: MUL
33458: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33459: LD_VAR 0 6
33463: PPUSH
33464: CALL_OW 263
33468: PUSH
33469: LD_INT 2
33471: EQUAL
33472: IFFALSE 33523
// begin j := IsControledBy ( i ) ;
33474: LD_ADDR_VAR 0 7
33478: PUSH
33479: LD_VAR 0 6
33483: PPUSH
33484: CALL_OW 312
33488: ST_TO_ADDR
// if j then
33489: LD_VAR 0 7
33493: IFFALSE 33523
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33495: LD_ADDR_VAR 0 10
33499: PUSH
33500: LD_VAR 0 10
33504: PUSH
33505: LD_VAR 0 7
33509: PPUSH
33510: LD_INT 3
33512: PPUSH
33513: CALL_OW 259
33517: PUSH
33518: LD_INT 3
33520: MUL
33521: MUL
33522: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33523: LD_VAR 0 6
33527: PPUSH
33528: CALL_OW 264
33532: PUSH
33533: LD_INT 5
33535: PUSH
33536: LD_INT 6
33538: PUSH
33539: LD_INT 46
33541: PUSH
33542: LD_INT 44
33544: PUSH
33545: LD_INT 47
33547: PUSH
33548: LD_INT 45
33550: PUSH
33551: LD_INT 28
33553: PUSH
33554: LD_INT 7
33556: PUSH
33557: LD_INT 27
33559: PUSH
33560: LD_INT 29
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: IN
33575: PUSH
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_INT 52
33583: PPUSH
33584: CALL_OW 321
33588: PUSH
33589: LD_INT 2
33591: EQUAL
33592: AND
33593: IFFALSE 33610
// bpoints := bpoints * 1.2 ;
33595: LD_ADDR_VAR 0 10
33599: PUSH
33600: LD_VAR 0 10
33604: PUSH
33605: LD_REAL  1.20000000000000E+0000
33608: MUL
33609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33610: LD_VAR 0 6
33614: PPUSH
33615: CALL_OW 264
33619: PUSH
33620: LD_INT 6
33622: PUSH
33623: LD_INT 46
33625: PUSH
33626: LD_INT 47
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: IN
33634: IFFALSE 33651
// bpoints := bpoints * 1.2 ;
33636: LD_ADDR_VAR 0 10
33640: PUSH
33641: LD_VAR 0 10
33645: PUSH
33646: LD_REAL  1.20000000000000E+0000
33649: MUL
33650: ST_TO_ADDR
// end ; unit_building :
33651: GO 33665
33653: LD_INT 3
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 33664
33661: POP
// ; end ;
33662: GO 33665
33664: POP
// for j = 1 to 3 do
33665: LD_ADDR_VAR 0 7
33669: PUSH
33670: DOUBLE
33671: LD_INT 1
33673: DEC
33674: ST_TO_ADDR
33675: LD_INT 3
33677: PUSH
33678: FOR_TO
33679: IFFALSE 33732
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33681: LD_ADDR_VAR 0 5
33685: PUSH
33686: LD_VAR 0 5
33690: PPUSH
33691: LD_VAR 0 7
33695: PPUSH
33696: LD_VAR 0 5
33700: PUSH
33701: LD_VAR 0 7
33705: ARRAY
33706: PUSH
33707: LD_VAR 0 9
33711: PUSH
33712: LD_VAR 0 7
33716: ARRAY
33717: PUSH
33718: LD_VAR 0 10
33722: MUL
33723: PLUS
33724: PPUSH
33725: CALL_OW 1
33729: ST_TO_ADDR
33730: GO 33678
33732: POP
33733: POP
// end ;
33734: GO 32213
33736: POP
33737: POP
// result := Replace ( result , 4 , tmp ) ;
33738: LD_ADDR_VAR 0 5
33742: PUSH
33743: LD_VAR 0 5
33747: PPUSH
33748: LD_INT 4
33750: PPUSH
33751: LD_VAR 0 8
33755: PPUSH
33756: CALL_OW 1
33760: ST_TO_ADDR
// end ;
33761: LD_VAR 0 5
33765: RET
// export function DangerAtRange ( unit , range ) ; begin
33766: LD_INT 0
33768: PPUSH
// if not unit then
33769: LD_VAR 0 1
33773: NOT
33774: IFFALSE 33778
// exit ;
33776: GO 33823
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33778: LD_ADDR_VAR 0 3
33782: PUSH
33783: LD_VAR 0 1
33787: PPUSH
33788: CALL_OW 255
33792: PPUSH
33793: LD_VAR 0 1
33797: PPUSH
33798: CALL_OW 250
33802: PPUSH
33803: LD_VAR 0 1
33807: PPUSH
33808: CALL_OW 251
33812: PPUSH
33813: LD_VAR 0 2
33817: PPUSH
33818: CALL 32065 0 4
33822: ST_TO_ADDR
// end ;
33823: LD_VAR 0 3
33827: RET
// export function DangerInArea ( side , area ) ; begin
33828: LD_INT 0
33830: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: LD_VAR 0 2
33840: PPUSH
33841: LD_INT 81
33843: PUSH
33844: LD_VAR 0 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PPUSH
33853: CALL_OW 70
33857: ST_TO_ADDR
// end ;
33858: LD_VAR 0 3
33862: RET
// export function IsExtension ( b ) ; begin
33863: LD_INT 0
33865: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33866: LD_ADDR_VAR 0 2
33870: PUSH
33871: LD_VAR 0 1
33875: PUSH
33876: LD_INT 23
33878: PUSH
33879: LD_INT 20
33881: PUSH
33882: LD_INT 22
33884: PUSH
33885: LD_INT 17
33887: PUSH
33888: LD_INT 24
33890: PUSH
33891: LD_INT 21
33893: PUSH
33894: LD_INT 19
33896: PUSH
33897: LD_INT 16
33899: PUSH
33900: LD_INT 25
33902: PUSH
33903: LD_INT 18
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: IN
33918: ST_TO_ADDR
// end ;
33919: LD_VAR 0 2
33923: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33924: LD_INT 0
33926: PPUSH
33927: PPUSH
33928: PPUSH
// result := [ ] ;
33929: LD_ADDR_VAR 0 4
33933: PUSH
33934: EMPTY
33935: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33936: LD_ADDR_VAR 0 5
33940: PUSH
33941: LD_VAR 0 2
33945: PPUSH
33946: LD_INT 21
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PPUSH
33956: CALL_OW 70
33960: ST_TO_ADDR
// if not tmp then
33961: LD_VAR 0 5
33965: NOT
33966: IFFALSE 33970
// exit ;
33968: GO 34034
// if checkLink then
33970: LD_VAR 0 3
33974: IFFALSE 34024
// begin for i in tmp do
33976: LD_ADDR_VAR 0 6
33980: PUSH
33981: LD_VAR 0 5
33985: PUSH
33986: FOR_IN
33987: IFFALSE 34022
// if GetBase ( i ) <> base then
33989: LD_VAR 0 6
33993: PPUSH
33994: CALL_OW 274
33998: PUSH
33999: LD_VAR 0 1
34003: NONEQUAL
34004: IFFALSE 34020
// ComLinkToBase ( base , i ) ;
34006: LD_VAR 0 1
34010: PPUSH
34011: LD_VAR 0 6
34015: PPUSH
34016: CALL_OW 169
34020: GO 33986
34022: POP
34023: POP
// end ; result := tmp ;
34024: LD_ADDR_VAR 0 4
34028: PUSH
34029: LD_VAR 0 5
34033: ST_TO_ADDR
// end ;
34034: LD_VAR 0 4
34038: RET
// export function ComComplete ( units , b ) ; var i ; begin
34039: LD_INT 0
34041: PPUSH
34042: PPUSH
// if not units then
34043: LD_VAR 0 1
34047: NOT
34048: IFFALSE 34052
// exit ;
34050: GO 34142
// for i in units do
34052: LD_ADDR_VAR 0 4
34056: PUSH
34057: LD_VAR 0 1
34061: PUSH
34062: FOR_IN
34063: IFFALSE 34140
// if BuildingStatus ( b ) = bs_build then
34065: LD_VAR 0 2
34069: PPUSH
34070: CALL_OW 461
34074: PUSH
34075: LD_INT 1
34077: EQUAL
34078: IFFALSE 34138
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34080: LD_VAR 0 4
34084: PPUSH
34085: LD_STRING h
34087: PUSH
34088: LD_VAR 0 2
34092: PPUSH
34093: CALL_OW 250
34097: PUSH
34098: LD_VAR 0 2
34102: PPUSH
34103: CALL_OW 251
34107: PUSH
34108: LD_VAR 0 2
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: PUSH
34131: EMPTY
34132: LIST
34133: PPUSH
34134: CALL_OW 446
34138: GO 34062
34140: POP
34141: POP
// end ;
34142: LD_VAR 0 3
34146: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34147: LD_INT 0
34149: PPUSH
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34155: LD_VAR 0 1
34159: NOT
34160: PUSH
34161: LD_VAR 0 1
34165: PPUSH
34166: CALL_OW 263
34170: PUSH
34171: LD_INT 2
34173: NONEQUAL
34174: OR
34175: IFFALSE 34179
// exit ;
34177: GO 34495
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34179: LD_ADDR_VAR 0 6
34183: PUSH
34184: LD_INT 22
34186: PUSH
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 255
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 30
34206: PUSH
34207: LD_INT 36
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 34
34216: PUSH
34217: LD_INT 31
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 69
34237: ST_TO_ADDR
// if not tmp then
34238: LD_VAR 0 6
34242: NOT
34243: IFFALSE 34247
// exit ;
34245: GO 34495
// result := [ ] ;
34247: LD_ADDR_VAR 0 2
34251: PUSH
34252: EMPTY
34253: ST_TO_ADDR
// for i in tmp do
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_VAR 0 6
34263: PUSH
34264: FOR_IN
34265: IFFALSE 34336
// begin t := UnitsInside ( i ) ;
34267: LD_ADDR_VAR 0 4
34271: PUSH
34272: LD_VAR 0 3
34276: PPUSH
34277: CALL_OW 313
34281: ST_TO_ADDR
// if t then
34282: LD_VAR 0 4
34286: IFFALSE 34334
// for j in t do
34288: LD_ADDR_VAR 0 7
34292: PUSH
34293: LD_VAR 0 4
34297: PUSH
34298: FOR_IN
34299: IFFALSE 34332
// result := Replace ( result , result + 1 , j ) ;
34301: LD_ADDR_VAR 0 2
34305: PUSH
34306: LD_VAR 0 2
34310: PPUSH
34311: LD_VAR 0 2
34315: PUSH
34316: LD_INT 1
34318: PLUS
34319: PPUSH
34320: LD_VAR 0 7
34324: PPUSH
34325: CALL_OW 1
34329: ST_TO_ADDR
34330: GO 34298
34332: POP
34333: POP
// end ;
34334: GO 34264
34336: POP
34337: POP
// if not result then
34338: LD_VAR 0 2
34342: NOT
34343: IFFALSE 34347
// exit ;
34345: GO 34495
// mech := result [ 1 ] ;
34347: LD_ADDR_VAR 0 5
34351: PUSH
34352: LD_VAR 0 2
34356: PUSH
34357: LD_INT 1
34359: ARRAY
34360: ST_TO_ADDR
// if result > 1 then
34361: LD_VAR 0 2
34365: PUSH
34366: LD_INT 1
34368: GREATER
34369: IFFALSE 34481
// begin for i = 2 to result do
34371: LD_ADDR_VAR 0 3
34375: PUSH
34376: DOUBLE
34377: LD_INT 2
34379: DEC
34380: ST_TO_ADDR
34381: LD_VAR 0 2
34385: PUSH
34386: FOR_TO
34387: IFFALSE 34479
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34389: LD_ADDR_VAR 0 4
34393: PUSH
34394: LD_VAR 0 2
34398: PUSH
34399: LD_VAR 0 3
34403: ARRAY
34404: PPUSH
34405: LD_INT 3
34407: PPUSH
34408: CALL_OW 259
34412: PUSH
34413: LD_VAR 0 2
34417: PUSH
34418: LD_VAR 0 3
34422: ARRAY
34423: PPUSH
34424: CALL_OW 432
34428: MINUS
34429: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34430: LD_VAR 0 4
34434: PUSH
34435: LD_VAR 0 5
34439: PPUSH
34440: LD_INT 3
34442: PPUSH
34443: CALL_OW 259
34447: PUSH
34448: LD_VAR 0 5
34452: PPUSH
34453: CALL_OW 432
34457: MINUS
34458: GREATEREQUAL
34459: IFFALSE 34477
// mech := result [ i ] ;
34461: LD_ADDR_VAR 0 5
34465: PUSH
34466: LD_VAR 0 2
34470: PUSH
34471: LD_VAR 0 3
34475: ARRAY
34476: ST_TO_ADDR
// end ;
34477: GO 34386
34479: POP
34480: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34481: LD_VAR 0 1
34485: PPUSH
34486: LD_VAR 0 5
34490: PPUSH
34491: CALL_OW 135
// end ;
34495: LD_VAR 0 2
34499: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34500: LD_INT 0
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
// result := [ ] ;
34515: LD_ADDR_VAR 0 7
34519: PUSH
34520: EMPTY
34521: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL_OW 266
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: IN
34542: NOT
34543: IFFALSE 34547
// exit ;
34545: GO 36181
// if name then
34547: LD_VAR 0 3
34551: IFFALSE 34567
// SetBName ( base_dep , name ) ;
34553: LD_VAR 0 1
34557: PPUSH
34558: LD_VAR 0 3
34562: PPUSH
34563: CALL_OW 500
// base := GetBase ( base_dep ) ;
34567: LD_ADDR_VAR 0 15
34571: PUSH
34572: LD_VAR 0 1
34576: PPUSH
34577: CALL_OW 274
34581: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34582: LD_ADDR_VAR 0 16
34586: PUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: CALL_OW 255
34596: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34597: LD_ADDR_VAR 0 17
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 248
34611: ST_TO_ADDR
// if sources then
34612: LD_VAR 0 5
34616: IFFALSE 34663
// for i = 1 to 3 do
34618: LD_ADDR_VAR 0 8
34622: PUSH
34623: DOUBLE
34624: LD_INT 1
34626: DEC
34627: ST_TO_ADDR
34628: LD_INT 3
34630: PUSH
34631: FOR_TO
34632: IFFALSE 34661
// AddResourceType ( base , i , sources [ i ] ) ;
34634: LD_VAR 0 15
34638: PPUSH
34639: LD_VAR 0 8
34643: PPUSH
34644: LD_VAR 0 5
34648: PUSH
34649: LD_VAR 0 8
34653: ARRAY
34654: PPUSH
34655: CALL_OW 276
34659: GO 34631
34661: POP
34662: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34663: LD_ADDR_VAR 0 18
34667: PUSH
34668: LD_VAR 0 15
34672: PPUSH
34673: LD_VAR 0 2
34677: PPUSH
34678: LD_INT 1
34680: PPUSH
34681: CALL 33924 0 3
34685: ST_TO_ADDR
// InitHc ;
34686: CALL_OW 19
// InitUc ;
34690: CALL_OW 18
// uc_side := side ;
34694: LD_ADDR_OWVAR 20
34698: PUSH
34699: LD_VAR 0 16
34703: ST_TO_ADDR
// uc_nation := nation ;
34704: LD_ADDR_OWVAR 21
34708: PUSH
34709: LD_VAR 0 17
34713: ST_TO_ADDR
// if buildings then
34714: LD_VAR 0 18
34718: IFFALSE 36040
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34720: LD_ADDR_VAR 0 19
34724: PUSH
34725: LD_VAR 0 18
34729: PPUSH
34730: LD_INT 2
34732: PUSH
34733: LD_INT 30
34735: PUSH
34736: LD_INT 29
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 30
34745: PUSH
34746: LD_INT 30
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: PPUSH
34758: CALL_OW 72
34762: ST_TO_ADDR
// if tmp then
34763: LD_VAR 0 19
34767: IFFALSE 34815
// for i in tmp do
34769: LD_ADDR_VAR 0 8
34773: PUSH
34774: LD_VAR 0 19
34778: PUSH
34779: FOR_IN
34780: IFFALSE 34813
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34782: LD_VAR 0 8
34786: PPUSH
34787: CALL_OW 250
34791: PPUSH
34792: LD_VAR 0 8
34796: PPUSH
34797: CALL_OW 251
34801: PPUSH
34802: LD_VAR 0 16
34806: PPUSH
34807: CALL_OW 441
34811: GO 34779
34813: POP
34814: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34815: LD_VAR 0 18
34819: PPUSH
34820: LD_INT 2
34822: PUSH
34823: LD_INT 30
34825: PUSH
34826: LD_INT 32
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 30
34835: PUSH
34836: LD_INT 33
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: PPUSH
34848: CALL_OW 72
34852: IFFALSE 34940
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34854: LD_ADDR_VAR 0 8
34858: PUSH
34859: LD_VAR 0 18
34863: PPUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 30
34869: PUSH
34870: LD_INT 32
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 30
34879: PUSH
34880: LD_INT 33
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: PPUSH
34892: CALL_OW 72
34896: PUSH
34897: FOR_IN
34898: IFFALSE 34938
// begin if not GetBWeapon ( i ) then
34900: LD_VAR 0 8
34904: PPUSH
34905: CALL_OW 269
34909: NOT
34910: IFFALSE 34936
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34912: LD_VAR 0 8
34916: PPUSH
34917: LD_VAR 0 8
34921: PPUSH
34922: LD_VAR 0 2
34926: PPUSH
34927: CALL 36186 0 2
34931: PPUSH
34932: CALL_OW 431
// end ;
34936: GO 34897
34938: POP
34939: POP
// end ; for i = 1 to personel do
34940: LD_ADDR_VAR 0 8
34944: PUSH
34945: DOUBLE
34946: LD_INT 1
34948: DEC
34949: ST_TO_ADDR
34950: LD_VAR 0 6
34954: PUSH
34955: FOR_TO
34956: IFFALSE 36020
// begin if i > 4 then
34958: LD_VAR 0 8
34962: PUSH
34963: LD_INT 4
34965: GREATER
34966: IFFALSE 34970
// break ;
34968: GO 36020
// case i of 1 :
34970: LD_VAR 0 8
34974: PUSH
34975: LD_INT 1
34977: DOUBLE
34978: EQUAL
34979: IFTRUE 34983
34981: GO 35063
34983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34984: LD_ADDR_VAR 0 12
34988: PUSH
34989: LD_VAR 0 18
34993: PPUSH
34994: LD_INT 22
34996: PUSH
34997: LD_VAR 0 16
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 58
35008: PUSH
35009: EMPTY
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 30
35017: PUSH
35018: LD_INT 32
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 30
35027: PUSH
35028: LD_INT 4
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 30
35037: PUSH
35038: LD_INT 5
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: PPUSH
35056: CALL_OW 72
35060: ST_TO_ADDR
35061: GO 35285
35063: LD_INT 2
35065: DOUBLE
35066: EQUAL
35067: IFTRUE 35071
35069: GO 35133
35071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35072: LD_ADDR_VAR 0 12
35076: PUSH
35077: LD_VAR 0 18
35081: PPUSH
35082: LD_INT 22
35084: PUSH
35085: LD_VAR 0 16
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 30
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 30
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PPUSH
35126: CALL_OW 72
35130: ST_TO_ADDR
35131: GO 35285
35133: LD_INT 3
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35203
35141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35142: LD_ADDR_VAR 0 12
35146: PUSH
35147: LD_VAR 0 18
35151: PPUSH
35152: LD_INT 22
35154: PUSH
35155: LD_VAR 0 16
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: LD_INT 30
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 30
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PPUSH
35196: CALL_OW 72
35200: ST_TO_ADDR
35201: GO 35285
35203: LD_INT 4
35205: DOUBLE
35206: EQUAL
35207: IFTRUE 35211
35209: GO 35284
35211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35212: LD_ADDR_VAR 0 12
35216: PUSH
35217: LD_VAR 0 18
35221: PPUSH
35222: LD_INT 22
35224: PUSH
35225: LD_VAR 0 16
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 30
35239: PUSH
35240: LD_INT 6
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 30
35249: PUSH
35250: LD_INT 7
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 30
35259: PUSH
35260: LD_INT 8
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PPUSH
35277: CALL_OW 72
35281: ST_TO_ADDR
35282: GO 35285
35284: POP
// if i = 1 then
35285: LD_VAR 0 8
35289: PUSH
35290: LD_INT 1
35292: EQUAL
35293: IFFALSE 35404
// begin tmp := [ ] ;
35295: LD_ADDR_VAR 0 19
35299: PUSH
35300: EMPTY
35301: ST_TO_ADDR
// for j in f do
35302: LD_ADDR_VAR 0 9
35306: PUSH
35307: LD_VAR 0 12
35311: PUSH
35312: FOR_IN
35313: IFFALSE 35386
// if GetBType ( j ) = b_bunker then
35315: LD_VAR 0 9
35319: PPUSH
35320: CALL_OW 266
35324: PUSH
35325: LD_INT 32
35327: EQUAL
35328: IFFALSE 35355
// tmp := Insert ( tmp , 1 , j ) else
35330: LD_ADDR_VAR 0 19
35334: PUSH
35335: LD_VAR 0 19
35339: PPUSH
35340: LD_INT 1
35342: PPUSH
35343: LD_VAR 0 9
35347: PPUSH
35348: CALL_OW 2
35352: ST_TO_ADDR
35353: GO 35384
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35355: LD_ADDR_VAR 0 19
35359: PUSH
35360: LD_VAR 0 19
35364: PPUSH
35365: LD_VAR 0 19
35369: PUSH
35370: LD_INT 1
35372: PLUS
35373: PPUSH
35374: LD_VAR 0 9
35378: PPUSH
35379: CALL_OW 2
35383: ST_TO_ADDR
35384: GO 35312
35386: POP
35387: POP
// if tmp then
35388: LD_VAR 0 19
35392: IFFALSE 35404
// f := tmp ;
35394: LD_ADDR_VAR 0 12
35398: PUSH
35399: LD_VAR 0 19
35403: ST_TO_ADDR
// end ; x := personel [ i ] ;
35404: LD_ADDR_VAR 0 13
35408: PUSH
35409: LD_VAR 0 6
35413: PUSH
35414: LD_VAR 0 8
35418: ARRAY
35419: ST_TO_ADDR
// if x = - 1 then
35420: LD_VAR 0 13
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: EQUAL
35429: IFFALSE 35638
// begin for j in f do
35431: LD_ADDR_VAR 0 9
35435: PUSH
35436: LD_VAR 0 12
35440: PUSH
35441: FOR_IN
35442: IFFALSE 35634
// repeat InitHc ;
35444: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35448: LD_VAR 0 9
35452: PPUSH
35453: CALL_OW 266
35457: PUSH
35458: LD_INT 5
35460: EQUAL
35461: IFFALSE 35531
// begin if UnitsInside ( j ) < 3 then
35463: LD_VAR 0 9
35467: PPUSH
35468: CALL_OW 313
35472: PUSH
35473: LD_INT 3
35475: LESS
35476: IFFALSE 35512
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35478: LD_INT 0
35480: PPUSH
35481: LD_INT 5
35483: PUSH
35484: LD_INT 8
35486: PUSH
35487: LD_INT 9
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: PUSH
35495: LD_VAR 0 17
35499: ARRAY
35500: PPUSH
35501: LD_VAR 0 4
35505: PPUSH
35506: CALL_OW 380
35510: GO 35529
// PrepareHuman ( false , i , skill ) ;
35512: LD_INT 0
35514: PPUSH
35515: LD_VAR 0 8
35519: PPUSH
35520: LD_VAR 0 4
35524: PPUSH
35525: CALL_OW 380
// end else
35529: GO 35548
// PrepareHuman ( false , i , skill ) ;
35531: LD_INT 0
35533: PPUSH
35534: LD_VAR 0 8
35538: PPUSH
35539: LD_VAR 0 4
35543: PPUSH
35544: CALL_OW 380
// un := CreateHuman ;
35548: LD_ADDR_VAR 0 14
35552: PUSH
35553: CALL_OW 44
35557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35558: LD_ADDR_VAR 0 7
35562: PUSH
35563: LD_VAR 0 7
35567: PPUSH
35568: LD_INT 1
35570: PPUSH
35571: LD_VAR 0 14
35575: PPUSH
35576: CALL_OW 2
35580: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35581: LD_VAR 0 14
35585: PPUSH
35586: LD_VAR 0 9
35590: PPUSH
35591: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35595: LD_VAR 0 9
35599: PPUSH
35600: CALL_OW 313
35604: PUSH
35605: LD_INT 6
35607: EQUAL
35608: PUSH
35609: LD_VAR 0 9
35613: PPUSH
35614: CALL_OW 266
35618: PUSH
35619: LD_INT 32
35621: PUSH
35622: LD_INT 31
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: IN
35629: OR
35630: IFFALSE 35444
35632: GO 35441
35634: POP
35635: POP
// end else
35636: GO 36018
// for j = 1 to x do
35638: LD_ADDR_VAR 0 9
35642: PUSH
35643: DOUBLE
35644: LD_INT 1
35646: DEC
35647: ST_TO_ADDR
35648: LD_VAR 0 13
35652: PUSH
35653: FOR_TO
35654: IFFALSE 36016
// begin InitHc ;
35656: CALL_OW 19
// if not f then
35660: LD_VAR 0 12
35664: NOT
35665: IFFALSE 35754
// begin PrepareHuman ( false , i , skill ) ;
35667: LD_INT 0
35669: PPUSH
35670: LD_VAR 0 8
35674: PPUSH
35675: LD_VAR 0 4
35679: PPUSH
35680: CALL_OW 380
// un := CreateHuman ;
35684: LD_ADDR_VAR 0 14
35688: PUSH
35689: CALL_OW 44
35693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35694: LD_ADDR_VAR 0 7
35698: PUSH
35699: LD_VAR 0 7
35703: PPUSH
35704: LD_INT 1
35706: PPUSH
35707: LD_VAR 0 14
35711: PPUSH
35712: CALL_OW 2
35716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35717: LD_VAR 0 14
35721: PPUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 250
35731: PPUSH
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL_OW 251
35741: PPUSH
35742: LD_INT 10
35744: PPUSH
35745: LD_INT 0
35747: PPUSH
35748: CALL_OW 50
// continue ;
35752: GO 35653
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35754: LD_VAR 0 12
35758: PUSH
35759: LD_INT 1
35761: ARRAY
35762: PPUSH
35763: CALL_OW 313
35767: PUSH
35768: LD_VAR 0 12
35772: PUSH
35773: LD_INT 1
35775: ARRAY
35776: PPUSH
35777: CALL_OW 266
35781: PUSH
35782: LD_INT 32
35784: PUSH
35785: LD_INT 31
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: IN
35792: AND
35793: PUSH
35794: LD_VAR 0 12
35798: PUSH
35799: LD_INT 1
35801: ARRAY
35802: PPUSH
35803: CALL_OW 313
35807: PUSH
35808: LD_INT 6
35810: EQUAL
35811: OR
35812: IFFALSE 35832
// f := Delete ( f , 1 ) ;
35814: LD_ADDR_VAR 0 12
35818: PUSH
35819: LD_VAR 0 12
35823: PPUSH
35824: LD_INT 1
35826: PPUSH
35827: CALL_OW 3
35831: ST_TO_ADDR
// if not f then
35832: LD_VAR 0 12
35836: NOT
35837: IFFALSE 35855
// begin x := x + 2 ;
35839: LD_ADDR_VAR 0 13
35843: PUSH
35844: LD_VAR 0 13
35848: PUSH
35849: LD_INT 2
35851: PLUS
35852: ST_TO_ADDR
// continue ;
35853: GO 35653
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35855: LD_VAR 0 12
35859: PUSH
35860: LD_INT 1
35862: ARRAY
35863: PPUSH
35864: CALL_OW 266
35868: PUSH
35869: LD_INT 5
35871: EQUAL
35872: IFFALSE 35946
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35874: LD_VAR 0 12
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PPUSH
35883: CALL_OW 313
35887: PUSH
35888: LD_INT 3
35890: LESS
35891: IFFALSE 35927
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35893: LD_INT 0
35895: PPUSH
35896: LD_INT 5
35898: PUSH
35899: LD_INT 8
35901: PUSH
35902: LD_INT 9
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: PUSH
35910: LD_VAR 0 17
35914: ARRAY
35915: PPUSH
35916: LD_VAR 0 4
35920: PPUSH
35921: CALL_OW 380
35925: GO 35944
// PrepareHuman ( false , i , skill ) ;
35927: LD_INT 0
35929: PPUSH
35930: LD_VAR 0 8
35934: PPUSH
35935: LD_VAR 0 4
35939: PPUSH
35940: CALL_OW 380
// end else
35944: GO 35963
// PrepareHuman ( false , i , skill ) ;
35946: LD_INT 0
35948: PPUSH
35949: LD_VAR 0 8
35953: PPUSH
35954: LD_VAR 0 4
35958: PPUSH
35959: CALL_OW 380
// un := CreateHuman ;
35963: LD_ADDR_VAR 0 14
35967: PUSH
35968: CALL_OW 44
35972: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35973: LD_ADDR_VAR 0 7
35977: PUSH
35978: LD_VAR 0 7
35982: PPUSH
35983: LD_INT 1
35985: PPUSH
35986: LD_VAR 0 14
35990: PPUSH
35991: CALL_OW 2
35995: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35996: LD_VAR 0 14
36000: PPUSH
36001: LD_VAR 0 12
36005: PUSH
36006: LD_INT 1
36008: ARRAY
36009: PPUSH
36010: CALL_OW 52
// end ;
36014: GO 35653
36016: POP
36017: POP
// end ;
36018: GO 34955
36020: POP
36021: POP
// result := result ^ buildings ;
36022: LD_ADDR_VAR 0 7
36026: PUSH
36027: LD_VAR 0 7
36031: PUSH
36032: LD_VAR 0 18
36036: ADD
36037: ST_TO_ADDR
// end else
36038: GO 36181
// begin for i = 1 to personel do
36040: LD_ADDR_VAR 0 8
36044: PUSH
36045: DOUBLE
36046: LD_INT 1
36048: DEC
36049: ST_TO_ADDR
36050: LD_VAR 0 6
36054: PUSH
36055: FOR_TO
36056: IFFALSE 36179
// begin if i > 4 then
36058: LD_VAR 0 8
36062: PUSH
36063: LD_INT 4
36065: GREATER
36066: IFFALSE 36070
// break ;
36068: GO 36179
// x := personel [ i ] ;
36070: LD_ADDR_VAR 0 13
36074: PUSH
36075: LD_VAR 0 6
36079: PUSH
36080: LD_VAR 0 8
36084: ARRAY
36085: ST_TO_ADDR
// if x = - 1 then
36086: LD_VAR 0 13
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: EQUAL
36095: IFFALSE 36099
// continue ;
36097: GO 36055
// PrepareHuman ( false , i , skill ) ;
36099: LD_INT 0
36101: PPUSH
36102: LD_VAR 0 8
36106: PPUSH
36107: LD_VAR 0 4
36111: PPUSH
36112: CALL_OW 380
// un := CreateHuman ;
36116: LD_ADDR_VAR 0 14
36120: PUSH
36121: CALL_OW 44
36125: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36126: LD_VAR 0 14
36130: PPUSH
36131: LD_VAR 0 1
36135: PPUSH
36136: CALL_OW 250
36140: PPUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 251
36150: PPUSH
36151: LD_INT 10
36153: PPUSH
36154: LD_INT 0
36156: PPUSH
36157: CALL_OW 50
// result := result ^ un ;
36161: LD_ADDR_VAR 0 7
36165: PUSH
36166: LD_VAR 0 7
36170: PUSH
36171: LD_VAR 0 14
36175: ADD
36176: ST_TO_ADDR
// end ;
36177: GO 36055
36179: POP
36180: POP
// end ; end ;
36181: LD_VAR 0 7
36185: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36186: LD_INT 0
36188: PPUSH
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
// result := false ;
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: LD_INT 0
36211: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36212: LD_VAR 0 1
36216: NOT
36217: PUSH
36218: LD_VAR 0 1
36222: PPUSH
36223: CALL_OW 266
36227: PUSH
36228: LD_INT 32
36230: PUSH
36231: LD_INT 33
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: IN
36238: NOT
36239: OR
36240: IFFALSE 36244
// exit ;
36242: GO 37353
// nat := GetNation ( tower ) ;
36244: LD_ADDR_VAR 0 12
36248: PUSH
36249: LD_VAR 0 1
36253: PPUSH
36254: CALL_OW 248
36258: ST_TO_ADDR
// side := GetSide ( tower ) ;
36259: LD_ADDR_VAR 0 16
36263: PUSH
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL_OW 255
36273: ST_TO_ADDR
// x := GetX ( tower ) ;
36274: LD_ADDR_VAR 0 10
36278: PUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL_OW 250
36288: ST_TO_ADDR
// y := GetY ( tower ) ;
36289: LD_ADDR_VAR 0 11
36293: PUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL_OW 251
36303: ST_TO_ADDR
// if not x or not y then
36304: LD_VAR 0 10
36308: NOT
36309: PUSH
36310: LD_VAR 0 11
36314: NOT
36315: OR
36316: IFFALSE 36320
// exit ;
36318: GO 37353
// weapon := 0 ;
36320: LD_ADDR_VAR 0 18
36324: PUSH
36325: LD_INT 0
36327: ST_TO_ADDR
// fac_list := [ ] ;
36328: LD_ADDR_VAR 0 17
36332: PUSH
36333: EMPTY
36334: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36335: LD_ADDR_VAR 0 6
36339: PUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 274
36349: PPUSH
36350: LD_VAR 0 2
36354: PPUSH
36355: LD_INT 0
36357: PPUSH
36358: CALL 33924 0 3
36362: PPUSH
36363: LD_INT 30
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PPUSH
36373: CALL_OW 72
36377: ST_TO_ADDR
// if not factories then
36378: LD_VAR 0 6
36382: NOT
36383: IFFALSE 36387
// exit ;
36385: GO 37353
// for i in factories do
36387: LD_ADDR_VAR 0 8
36391: PUSH
36392: LD_VAR 0 6
36396: PUSH
36397: FOR_IN
36398: IFFALSE 36423
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36400: LD_ADDR_VAR 0 17
36404: PUSH
36405: LD_VAR 0 17
36409: PUSH
36410: LD_VAR 0 8
36414: PPUSH
36415: CALL_OW 478
36419: UNION
36420: ST_TO_ADDR
36421: GO 36397
36423: POP
36424: POP
// if not fac_list then
36425: LD_VAR 0 17
36429: NOT
36430: IFFALSE 36434
// exit ;
36432: GO 37353
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36434: LD_ADDR_VAR 0 5
36438: PUSH
36439: LD_INT 4
36441: PUSH
36442: LD_INT 5
36444: PUSH
36445: LD_INT 9
36447: PUSH
36448: LD_INT 10
36450: PUSH
36451: LD_INT 6
36453: PUSH
36454: LD_INT 7
36456: PUSH
36457: LD_INT 11
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 27
36471: PUSH
36472: LD_INT 28
36474: PUSH
36475: LD_INT 26
36477: PUSH
36478: LD_INT 30
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 43
36489: PUSH
36490: LD_INT 44
36492: PUSH
36493: LD_INT 46
36495: PUSH
36496: LD_INT 45
36498: PUSH
36499: LD_INT 47
36501: PUSH
36502: LD_INT 49
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: PUSH
36518: LD_VAR 0 12
36522: ARRAY
36523: ST_TO_ADDR
// list := list isect fac_list ;
36524: LD_ADDR_VAR 0 5
36528: PUSH
36529: LD_VAR 0 5
36533: PUSH
36534: LD_VAR 0 17
36538: ISECT
36539: ST_TO_ADDR
// if not list then
36540: LD_VAR 0 5
36544: NOT
36545: IFFALSE 36549
// exit ;
36547: GO 37353
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36549: LD_VAR 0 12
36553: PUSH
36554: LD_INT 3
36556: EQUAL
36557: PUSH
36558: LD_INT 49
36560: PUSH
36561: LD_VAR 0 5
36565: IN
36566: AND
36567: PUSH
36568: LD_INT 31
36570: PPUSH
36571: LD_VAR 0 16
36575: PPUSH
36576: CALL_OW 321
36580: PUSH
36581: LD_INT 2
36583: EQUAL
36584: AND
36585: IFFALSE 36645
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36587: LD_INT 22
36589: PUSH
36590: LD_VAR 0 16
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 35
36601: PUSH
36602: LD_INT 49
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 91
36611: PUSH
36612: LD_VAR 0 1
36616: PUSH
36617: LD_INT 10
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: PPUSH
36630: CALL_OW 69
36634: NOT
36635: IFFALSE 36645
// weapon := ru_time_lapser ;
36637: LD_ADDR_VAR 0 18
36641: PUSH
36642: LD_INT 49
36644: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36645: LD_VAR 0 12
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: IN
36660: PUSH
36661: LD_INT 11
36663: PUSH
36664: LD_VAR 0 5
36668: IN
36669: PUSH
36670: LD_INT 30
36672: PUSH
36673: LD_VAR 0 5
36677: IN
36678: OR
36679: AND
36680: PUSH
36681: LD_INT 6
36683: PPUSH
36684: LD_VAR 0 16
36688: PPUSH
36689: CALL_OW 321
36693: PUSH
36694: LD_INT 2
36696: EQUAL
36697: AND
36698: IFFALSE 36863
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36700: LD_INT 22
36702: PUSH
36703: LD_VAR 0 16
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 35
36717: PUSH
36718: LD_INT 11
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 35
36727: PUSH
36728: LD_INT 30
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 91
36742: PUSH
36743: LD_VAR 0 1
36747: PUSH
36748: LD_INT 18
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: PPUSH
36761: CALL_OW 69
36765: NOT
36766: PUSH
36767: LD_INT 22
36769: PUSH
36770: LD_VAR 0 16
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: LD_INT 30
36784: PUSH
36785: LD_INT 32
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 30
36794: PUSH
36795: LD_INT 33
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 91
36809: PUSH
36810: LD_VAR 0 1
36814: PUSH
36815: LD_INT 12
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: PUSH
36828: EMPTY
36829: LIST
36830: PPUSH
36831: CALL_OW 69
36835: PUSH
36836: LD_INT 2
36838: GREATER
36839: AND
36840: IFFALSE 36863
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36842: LD_ADDR_VAR 0 18
36846: PUSH
36847: LD_INT 11
36849: PUSH
36850: LD_INT 30
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_VAR 0 12
36861: ARRAY
36862: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36863: LD_VAR 0 18
36867: NOT
36868: PUSH
36869: LD_INT 40
36871: PPUSH
36872: LD_VAR 0 16
36876: PPUSH
36877: CALL_OW 321
36881: PUSH
36882: LD_INT 2
36884: EQUAL
36885: AND
36886: PUSH
36887: LD_INT 7
36889: PUSH
36890: LD_VAR 0 5
36894: IN
36895: PUSH
36896: LD_INT 28
36898: PUSH
36899: LD_VAR 0 5
36903: IN
36904: OR
36905: PUSH
36906: LD_INT 45
36908: PUSH
36909: LD_VAR 0 5
36913: IN
36914: OR
36915: AND
36916: IFFALSE 37170
// begin hex := GetHexInfo ( x , y ) ;
36918: LD_ADDR_VAR 0 4
36922: PUSH
36923: LD_VAR 0 10
36927: PPUSH
36928: LD_VAR 0 11
36932: PPUSH
36933: CALL_OW 546
36937: ST_TO_ADDR
// if hex [ 1 ] then
36938: LD_VAR 0 4
36942: PUSH
36943: LD_INT 1
36945: ARRAY
36946: IFFALSE 36950
// exit ;
36948: GO 37353
// height := hex [ 2 ] ;
36950: LD_ADDR_VAR 0 15
36954: PUSH
36955: LD_VAR 0 4
36959: PUSH
36960: LD_INT 2
36962: ARRAY
36963: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36964: LD_ADDR_VAR 0 14
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: LD_INT 3
36977: PUSH
36978: LD_INT 5
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: ST_TO_ADDR
// for i in tmp do
36987: LD_ADDR_VAR 0 8
36991: PUSH
36992: LD_VAR 0 14
36996: PUSH
36997: FOR_IN
36998: IFFALSE 37168
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37000: LD_ADDR_VAR 0 9
37004: PUSH
37005: LD_VAR 0 10
37009: PPUSH
37010: LD_VAR 0 8
37014: PPUSH
37015: LD_INT 5
37017: PPUSH
37018: CALL_OW 272
37022: PUSH
37023: LD_VAR 0 11
37027: PPUSH
37028: LD_VAR 0 8
37032: PPUSH
37033: LD_INT 5
37035: PPUSH
37036: CALL_OW 273
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37045: LD_VAR 0 9
37049: PUSH
37050: LD_INT 1
37052: ARRAY
37053: PPUSH
37054: LD_VAR 0 9
37058: PUSH
37059: LD_INT 2
37061: ARRAY
37062: PPUSH
37063: CALL_OW 488
37067: IFFALSE 37166
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37069: LD_ADDR_VAR 0 4
37073: PUSH
37074: LD_VAR 0 9
37078: PUSH
37079: LD_INT 1
37081: ARRAY
37082: PPUSH
37083: LD_VAR 0 9
37087: PUSH
37088: LD_INT 2
37090: ARRAY
37091: PPUSH
37092: CALL_OW 546
37096: ST_TO_ADDR
// if hex [ 1 ] then
37097: LD_VAR 0 4
37101: PUSH
37102: LD_INT 1
37104: ARRAY
37105: IFFALSE 37109
// continue ;
37107: GO 36997
// h := hex [ 2 ] ;
37109: LD_ADDR_VAR 0 13
37113: PUSH
37114: LD_VAR 0 4
37118: PUSH
37119: LD_INT 2
37121: ARRAY
37122: ST_TO_ADDR
// if h + 7 < height then
37123: LD_VAR 0 13
37127: PUSH
37128: LD_INT 7
37130: PLUS
37131: PUSH
37132: LD_VAR 0 15
37136: LESS
37137: IFFALSE 37166
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37139: LD_ADDR_VAR 0 18
37143: PUSH
37144: LD_INT 7
37146: PUSH
37147: LD_INT 28
37149: PUSH
37150: LD_INT 45
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: PUSH
37158: LD_VAR 0 12
37162: ARRAY
37163: ST_TO_ADDR
// break ;
37164: GO 37168
// end ; end ; end ;
37166: GO 36997
37168: POP
37169: POP
// end ; if not weapon then
37170: LD_VAR 0 18
37174: NOT
37175: IFFALSE 37235
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37177: LD_ADDR_VAR 0 5
37181: PUSH
37182: LD_VAR 0 5
37186: PUSH
37187: LD_INT 11
37189: PUSH
37190: LD_INT 30
37192: PUSH
37193: LD_INT 49
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: DIFF
37201: ST_TO_ADDR
// if not list then
37202: LD_VAR 0 5
37206: NOT
37207: IFFALSE 37211
// exit ;
37209: GO 37353
// weapon := list [ rand ( 1 , list ) ] ;
37211: LD_ADDR_VAR 0 18
37215: PUSH
37216: LD_VAR 0 5
37220: PUSH
37221: LD_INT 1
37223: PPUSH
37224: LD_VAR 0 5
37228: PPUSH
37229: CALL_OW 12
37233: ARRAY
37234: ST_TO_ADDR
// end ; if weapon then
37235: LD_VAR 0 18
37239: IFFALSE 37353
// begin tmp := CostOfWeapon ( weapon ) ;
37241: LD_ADDR_VAR 0 14
37245: PUSH
37246: LD_VAR 0 18
37250: PPUSH
37251: CALL_OW 451
37255: ST_TO_ADDR
// j := GetBase ( tower ) ;
37256: LD_ADDR_VAR 0 9
37260: PUSH
37261: LD_VAR 0 1
37265: PPUSH
37266: CALL_OW 274
37270: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37271: LD_VAR 0 9
37275: PPUSH
37276: LD_INT 1
37278: PPUSH
37279: CALL_OW 275
37283: PUSH
37284: LD_VAR 0 14
37288: PUSH
37289: LD_INT 1
37291: ARRAY
37292: GREATEREQUAL
37293: PUSH
37294: LD_VAR 0 9
37298: PPUSH
37299: LD_INT 2
37301: PPUSH
37302: CALL_OW 275
37306: PUSH
37307: LD_VAR 0 14
37311: PUSH
37312: LD_INT 2
37314: ARRAY
37315: GREATEREQUAL
37316: AND
37317: PUSH
37318: LD_VAR 0 9
37322: PPUSH
37323: LD_INT 3
37325: PPUSH
37326: CALL_OW 275
37330: PUSH
37331: LD_VAR 0 14
37335: PUSH
37336: LD_INT 3
37338: ARRAY
37339: GREATEREQUAL
37340: AND
37341: IFFALSE 37353
// result := weapon ;
37343: LD_ADDR_VAR 0 3
37347: PUSH
37348: LD_VAR 0 18
37352: ST_TO_ADDR
// end ; end ;
37353: LD_VAR 0 3
37357: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37358: LD_INT 0
37360: PPUSH
37361: PPUSH
// result := true ;
37362: LD_ADDR_VAR 0 3
37366: PUSH
37367: LD_INT 1
37369: ST_TO_ADDR
// if array1 = array2 then
37370: LD_VAR 0 1
37374: PUSH
37375: LD_VAR 0 2
37379: EQUAL
37380: IFFALSE 37440
// begin for i = 1 to array1 do
37382: LD_ADDR_VAR 0 4
37386: PUSH
37387: DOUBLE
37388: LD_INT 1
37390: DEC
37391: ST_TO_ADDR
37392: LD_VAR 0 1
37396: PUSH
37397: FOR_TO
37398: IFFALSE 37436
// if array1 [ i ] <> array2 [ i ] then
37400: LD_VAR 0 1
37404: PUSH
37405: LD_VAR 0 4
37409: ARRAY
37410: PUSH
37411: LD_VAR 0 2
37415: PUSH
37416: LD_VAR 0 4
37420: ARRAY
37421: NONEQUAL
37422: IFFALSE 37434
// begin result := false ;
37424: LD_ADDR_VAR 0 3
37428: PUSH
37429: LD_INT 0
37431: ST_TO_ADDR
// break ;
37432: GO 37436
// end ;
37434: GO 37397
37436: POP
37437: POP
// end else
37438: GO 37448
// result := false ;
37440: LD_ADDR_VAR 0 3
37444: PUSH
37445: LD_INT 0
37447: ST_TO_ADDR
// end ;
37448: LD_VAR 0 3
37452: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37453: LD_INT 0
37455: PPUSH
37456: PPUSH
// if not array1 or not array2 then
37457: LD_VAR 0 1
37461: NOT
37462: PUSH
37463: LD_VAR 0 2
37467: NOT
37468: OR
37469: IFFALSE 37473
// exit ;
37471: GO 37537
// result := true ;
37473: LD_ADDR_VAR 0 3
37477: PUSH
37478: LD_INT 1
37480: ST_TO_ADDR
// for i = 1 to array1 do
37481: LD_ADDR_VAR 0 4
37485: PUSH
37486: DOUBLE
37487: LD_INT 1
37489: DEC
37490: ST_TO_ADDR
37491: LD_VAR 0 1
37495: PUSH
37496: FOR_TO
37497: IFFALSE 37535
// if array1 [ i ] <> array2 [ i ] then
37499: LD_VAR 0 1
37503: PUSH
37504: LD_VAR 0 4
37508: ARRAY
37509: PUSH
37510: LD_VAR 0 2
37514: PUSH
37515: LD_VAR 0 4
37519: ARRAY
37520: NONEQUAL
37521: IFFALSE 37533
// begin result := false ;
37523: LD_ADDR_VAR 0 3
37527: PUSH
37528: LD_INT 0
37530: ST_TO_ADDR
// break ;
37531: GO 37535
// end ;
37533: GO 37496
37535: POP
37536: POP
// end ;
37537: LD_VAR 0 3
37541: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37542: LD_INT 0
37544: PPUSH
37545: PPUSH
37546: PPUSH
// pom := GetBase ( fac ) ;
37547: LD_ADDR_VAR 0 5
37551: PUSH
37552: LD_VAR 0 1
37556: PPUSH
37557: CALL_OW 274
37561: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37562: LD_ADDR_VAR 0 4
37566: PUSH
37567: LD_VAR 0 2
37571: PUSH
37572: LD_INT 1
37574: ARRAY
37575: PPUSH
37576: LD_VAR 0 2
37580: PUSH
37581: LD_INT 2
37583: ARRAY
37584: PPUSH
37585: LD_VAR 0 2
37589: PUSH
37590: LD_INT 3
37592: ARRAY
37593: PPUSH
37594: LD_VAR 0 2
37598: PUSH
37599: LD_INT 4
37601: ARRAY
37602: PPUSH
37603: CALL_OW 449
37607: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37608: LD_ADDR_VAR 0 3
37612: PUSH
37613: LD_VAR 0 5
37617: PPUSH
37618: LD_INT 1
37620: PPUSH
37621: CALL_OW 275
37625: PUSH
37626: LD_VAR 0 4
37630: PUSH
37631: LD_INT 1
37633: ARRAY
37634: GREATEREQUAL
37635: PUSH
37636: LD_VAR 0 5
37640: PPUSH
37641: LD_INT 2
37643: PPUSH
37644: CALL_OW 275
37648: PUSH
37649: LD_VAR 0 4
37653: PUSH
37654: LD_INT 2
37656: ARRAY
37657: GREATEREQUAL
37658: AND
37659: PUSH
37660: LD_VAR 0 5
37664: PPUSH
37665: LD_INT 3
37667: PPUSH
37668: CALL_OW 275
37672: PUSH
37673: LD_VAR 0 4
37677: PUSH
37678: LD_INT 3
37680: ARRAY
37681: GREATEREQUAL
37682: AND
37683: ST_TO_ADDR
// end ;
37684: LD_VAR 0 3
37688: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37689: LD_INT 0
37691: PPUSH
37692: PPUSH
37693: PPUSH
37694: PPUSH
// pom := GetBase ( building ) ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_VAR 0 1
37704: PPUSH
37705: CALL_OW 274
37709: ST_TO_ADDR
// if not pom then
37710: LD_VAR 0 3
37714: NOT
37715: IFFALSE 37719
// exit ;
37717: GO 37889
// btype := GetBType ( building ) ;
37719: LD_ADDR_VAR 0 5
37723: PUSH
37724: LD_VAR 0 1
37728: PPUSH
37729: CALL_OW 266
37733: ST_TO_ADDR
// if btype = b_armoury then
37734: LD_VAR 0 5
37738: PUSH
37739: LD_INT 4
37741: EQUAL
37742: IFFALSE 37752
// btype := b_barracks ;
37744: LD_ADDR_VAR 0 5
37748: PUSH
37749: LD_INT 5
37751: ST_TO_ADDR
// if btype = b_depot then
37752: LD_VAR 0 5
37756: PUSH
37757: LD_INT 0
37759: EQUAL
37760: IFFALSE 37770
// btype := b_warehouse ;
37762: LD_ADDR_VAR 0 5
37766: PUSH
37767: LD_INT 1
37769: ST_TO_ADDR
// if btype = b_workshop then
37770: LD_VAR 0 5
37774: PUSH
37775: LD_INT 2
37777: EQUAL
37778: IFFALSE 37788
// btype := b_factory ;
37780: LD_ADDR_VAR 0 5
37784: PUSH
37785: LD_INT 3
37787: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37788: LD_ADDR_VAR 0 4
37792: PUSH
37793: LD_VAR 0 5
37797: PPUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 248
37807: PPUSH
37808: CALL_OW 450
37812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37813: LD_ADDR_VAR 0 2
37817: PUSH
37818: LD_VAR 0 3
37822: PPUSH
37823: LD_INT 1
37825: PPUSH
37826: CALL_OW 275
37830: PUSH
37831: LD_VAR 0 4
37835: PUSH
37836: LD_INT 1
37838: ARRAY
37839: GREATEREQUAL
37840: PUSH
37841: LD_VAR 0 3
37845: PPUSH
37846: LD_INT 2
37848: PPUSH
37849: CALL_OW 275
37853: PUSH
37854: LD_VAR 0 4
37858: PUSH
37859: LD_INT 2
37861: ARRAY
37862: GREATEREQUAL
37863: AND
37864: PUSH
37865: LD_VAR 0 3
37869: PPUSH
37870: LD_INT 3
37872: PPUSH
37873: CALL_OW 275
37877: PUSH
37878: LD_VAR 0 4
37882: PUSH
37883: LD_INT 3
37885: ARRAY
37886: GREATEREQUAL
37887: AND
37888: ST_TO_ADDR
// end ;
37889: LD_VAR 0 2
37893: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37894: LD_INT 0
37896: PPUSH
37897: PPUSH
37898: PPUSH
// pom := GetBase ( building ) ;
37899: LD_ADDR_VAR 0 4
37903: PUSH
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 274
37913: ST_TO_ADDR
// if not pom then
37914: LD_VAR 0 4
37918: NOT
37919: IFFALSE 37923
// exit ;
37921: GO 38024
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37923: LD_ADDR_VAR 0 5
37927: PUSH
37928: LD_VAR 0 2
37932: PPUSH
37933: LD_VAR 0 1
37937: PPUSH
37938: CALL_OW 248
37942: PPUSH
37943: CALL_OW 450
37947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37948: LD_ADDR_VAR 0 3
37952: PUSH
37953: LD_VAR 0 4
37957: PPUSH
37958: LD_INT 1
37960: PPUSH
37961: CALL_OW 275
37965: PUSH
37966: LD_VAR 0 5
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: GREATEREQUAL
37975: PUSH
37976: LD_VAR 0 4
37980: PPUSH
37981: LD_INT 2
37983: PPUSH
37984: CALL_OW 275
37988: PUSH
37989: LD_VAR 0 5
37993: PUSH
37994: LD_INT 2
37996: ARRAY
37997: GREATEREQUAL
37998: AND
37999: PUSH
38000: LD_VAR 0 4
38004: PPUSH
38005: LD_INT 3
38007: PPUSH
38008: CALL_OW 275
38012: PUSH
38013: LD_VAR 0 5
38017: PUSH
38018: LD_INT 3
38020: ARRAY
38021: GREATEREQUAL
38022: AND
38023: ST_TO_ADDR
// end ;
38024: LD_VAR 0 3
38028: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38029: LD_INT 0
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
// result := false ;
38042: LD_ADDR_VAR 0 8
38046: PUSH
38047: LD_INT 0
38049: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38050: LD_VAR 0 5
38054: NOT
38055: PUSH
38056: LD_VAR 0 1
38060: NOT
38061: OR
38062: PUSH
38063: LD_VAR 0 2
38067: NOT
38068: OR
38069: PUSH
38070: LD_VAR 0 3
38074: NOT
38075: OR
38076: IFFALSE 38080
// exit ;
38078: GO 38894
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38080: LD_ADDR_VAR 0 14
38084: PUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: LD_VAR 0 2
38094: PPUSH
38095: LD_VAR 0 3
38099: PPUSH
38100: LD_VAR 0 4
38104: PPUSH
38105: LD_VAR 0 5
38109: PUSH
38110: LD_INT 1
38112: ARRAY
38113: PPUSH
38114: CALL_OW 248
38118: PPUSH
38119: LD_INT 0
38121: PPUSH
38122: CALL 40147 0 6
38126: ST_TO_ADDR
// if not hexes then
38127: LD_VAR 0 14
38131: NOT
38132: IFFALSE 38136
// exit ;
38134: GO 38894
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38136: LD_ADDR_VAR 0 17
38140: PUSH
38141: LD_VAR 0 5
38145: PPUSH
38146: LD_INT 22
38148: PUSH
38149: LD_VAR 0 13
38153: PPUSH
38154: CALL_OW 255
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 30
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 30
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PPUSH
38195: CALL_OW 72
38199: ST_TO_ADDR
// for i = 1 to hexes do
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: DOUBLE
38206: LD_INT 1
38208: DEC
38209: ST_TO_ADDR
38210: LD_VAR 0 14
38214: PUSH
38215: FOR_TO
38216: IFFALSE 38892
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38218: LD_ADDR_VAR 0 13
38222: PUSH
38223: LD_VAR 0 14
38227: PUSH
38228: LD_VAR 0 9
38232: ARRAY
38233: PUSH
38234: LD_INT 1
38236: ARRAY
38237: PPUSH
38238: LD_VAR 0 14
38242: PUSH
38243: LD_VAR 0 9
38247: ARRAY
38248: PUSH
38249: LD_INT 2
38251: ARRAY
38252: PPUSH
38253: CALL_OW 428
38257: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38258: LD_VAR 0 14
38262: PUSH
38263: LD_VAR 0 9
38267: ARRAY
38268: PUSH
38269: LD_INT 1
38271: ARRAY
38272: PPUSH
38273: LD_VAR 0 14
38277: PUSH
38278: LD_VAR 0 9
38282: ARRAY
38283: PUSH
38284: LD_INT 2
38286: ARRAY
38287: PPUSH
38288: CALL_OW 351
38292: PUSH
38293: LD_VAR 0 14
38297: PUSH
38298: LD_VAR 0 9
38302: ARRAY
38303: PUSH
38304: LD_INT 1
38306: ARRAY
38307: PPUSH
38308: LD_VAR 0 14
38312: PUSH
38313: LD_VAR 0 9
38317: ARRAY
38318: PUSH
38319: LD_INT 2
38321: ARRAY
38322: PPUSH
38323: CALL_OW 488
38327: NOT
38328: OR
38329: PUSH
38330: LD_VAR 0 13
38334: PPUSH
38335: CALL_OW 247
38339: PUSH
38340: LD_INT 3
38342: EQUAL
38343: OR
38344: IFFALSE 38350
// exit ;
38346: POP
38347: POP
38348: GO 38894
// if not tmp then
38350: LD_VAR 0 13
38354: NOT
38355: IFFALSE 38359
// continue ;
38357: GO 38215
// result := true ;
38359: LD_ADDR_VAR 0 8
38363: PUSH
38364: LD_INT 1
38366: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38367: LD_VAR 0 6
38371: PUSH
38372: LD_VAR 0 13
38376: PPUSH
38377: CALL_OW 247
38381: PUSH
38382: LD_INT 2
38384: EQUAL
38385: AND
38386: PUSH
38387: LD_VAR 0 13
38391: PPUSH
38392: CALL_OW 263
38396: PUSH
38397: LD_INT 1
38399: EQUAL
38400: AND
38401: IFFALSE 38565
// begin if IsDrivenBy ( tmp ) then
38403: LD_VAR 0 13
38407: PPUSH
38408: CALL_OW 311
38412: IFFALSE 38416
// continue ;
38414: GO 38215
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38416: LD_VAR 0 6
38420: PPUSH
38421: LD_INT 3
38423: PUSH
38424: LD_INT 60
38426: PUSH
38427: EMPTY
38428: LIST
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: LD_INT 55
38439: PUSH
38440: EMPTY
38441: LIST
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PPUSH
38451: CALL_OW 72
38455: IFFALSE 38563
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38457: LD_ADDR_VAR 0 18
38461: PUSH
38462: LD_VAR 0 6
38466: PPUSH
38467: LD_INT 3
38469: PUSH
38470: LD_INT 60
38472: PUSH
38473: EMPTY
38474: LIST
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: LD_INT 55
38485: PUSH
38486: EMPTY
38487: LIST
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PPUSH
38497: CALL_OW 72
38501: PUSH
38502: LD_INT 1
38504: ARRAY
38505: ST_TO_ADDR
// if IsInUnit ( driver ) then
38506: LD_VAR 0 18
38510: PPUSH
38511: CALL_OW 310
38515: IFFALSE 38526
// ComExit ( driver ) ;
38517: LD_VAR 0 18
38521: PPUSH
38522: CALL 63928 0 1
// AddComEnterUnit ( driver , tmp ) ;
38526: LD_VAR 0 18
38530: PPUSH
38531: LD_VAR 0 13
38535: PPUSH
38536: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38540: LD_VAR 0 18
38544: PPUSH
38545: LD_VAR 0 7
38549: PPUSH
38550: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38554: LD_VAR 0 18
38558: PPUSH
38559: CALL_OW 181
// end ; continue ;
38563: GO 38215
// end ; if not cleaners or not tmp in cleaners then
38565: LD_VAR 0 6
38569: NOT
38570: PUSH
38571: LD_VAR 0 13
38575: PUSH
38576: LD_VAR 0 6
38580: IN
38581: NOT
38582: OR
38583: IFFALSE 38890
// begin if dep then
38585: LD_VAR 0 17
38589: IFFALSE 38725
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38591: LD_ADDR_VAR 0 16
38595: PUSH
38596: LD_VAR 0 17
38600: PUSH
38601: LD_INT 1
38603: ARRAY
38604: PPUSH
38605: CALL_OW 250
38609: PPUSH
38610: LD_VAR 0 17
38614: PUSH
38615: LD_INT 1
38617: ARRAY
38618: PPUSH
38619: CALL_OW 254
38623: PPUSH
38624: LD_INT 5
38626: PPUSH
38627: CALL_OW 272
38631: PUSH
38632: LD_VAR 0 17
38636: PUSH
38637: LD_INT 1
38639: ARRAY
38640: PPUSH
38641: CALL_OW 251
38645: PPUSH
38646: LD_VAR 0 17
38650: PUSH
38651: LD_INT 1
38653: ARRAY
38654: PPUSH
38655: CALL_OW 254
38659: PPUSH
38660: LD_INT 5
38662: PPUSH
38663: CALL_OW 273
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38672: LD_VAR 0 16
38676: PUSH
38677: LD_INT 1
38679: ARRAY
38680: PPUSH
38681: LD_VAR 0 16
38685: PUSH
38686: LD_INT 2
38688: ARRAY
38689: PPUSH
38690: CALL_OW 488
38694: IFFALSE 38725
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38696: LD_VAR 0 13
38700: PPUSH
38701: LD_VAR 0 16
38705: PUSH
38706: LD_INT 1
38708: ARRAY
38709: PPUSH
38710: LD_VAR 0 16
38714: PUSH
38715: LD_INT 2
38717: ARRAY
38718: PPUSH
38719: CALL_OW 111
// continue ;
38723: GO 38215
// end ; end ; r := GetDir ( tmp ) ;
38725: LD_ADDR_VAR 0 15
38729: PUSH
38730: LD_VAR 0 13
38734: PPUSH
38735: CALL_OW 254
38739: ST_TO_ADDR
// if r = 5 then
38740: LD_VAR 0 15
38744: PUSH
38745: LD_INT 5
38747: EQUAL
38748: IFFALSE 38758
// r := 0 ;
38750: LD_ADDR_VAR 0 15
38754: PUSH
38755: LD_INT 0
38757: ST_TO_ADDR
// for j = r to 5 do
38758: LD_ADDR_VAR 0 10
38762: PUSH
38763: DOUBLE
38764: LD_VAR 0 15
38768: DEC
38769: ST_TO_ADDR
38770: LD_INT 5
38772: PUSH
38773: FOR_TO
38774: IFFALSE 38888
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38776: LD_ADDR_VAR 0 11
38780: PUSH
38781: LD_VAR 0 13
38785: PPUSH
38786: CALL_OW 250
38790: PPUSH
38791: LD_VAR 0 10
38795: PPUSH
38796: LD_INT 2
38798: PPUSH
38799: CALL_OW 272
38803: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38804: LD_ADDR_VAR 0 12
38808: PUSH
38809: LD_VAR 0 13
38813: PPUSH
38814: CALL_OW 251
38818: PPUSH
38819: LD_VAR 0 10
38823: PPUSH
38824: LD_INT 2
38826: PPUSH
38827: CALL_OW 273
38831: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38832: LD_VAR 0 11
38836: PPUSH
38837: LD_VAR 0 12
38841: PPUSH
38842: CALL_OW 488
38846: PUSH
38847: LD_VAR 0 11
38851: PPUSH
38852: LD_VAR 0 12
38856: PPUSH
38857: CALL_OW 428
38861: NOT
38862: AND
38863: IFFALSE 38886
// begin ComMoveXY ( tmp , _x , _y ) ;
38865: LD_VAR 0 13
38869: PPUSH
38870: LD_VAR 0 11
38874: PPUSH
38875: LD_VAR 0 12
38879: PPUSH
38880: CALL_OW 111
// break ;
38884: GO 38888
// end ; end ;
38886: GO 38773
38888: POP
38889: POP
// end ; end ;
38890: GO 38215
38892: POP
38893: POP
// end ;
38894: LD_VAR 0 8
38898: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38899: LD_INT 0
38901: PPUSH
// result := true ;
38902: LD_ADDR_VAR 0 3
38906: PUSH
38907: LD_INT 1
38909: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38910: LD_VAR 0 2
38914: PUSH
38915: LD_INT 24
38917: DOUBLE
38918: EQUAL
38919: IFTRUE 38929
38921: LD_INT 33
38923: DOUBLE
38924: EQUAL
38925: IFTRUE 38929
38927: GO 38954
38929: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38930: LD_ADDR_VAR 0 3
38934: PUSH
38935: LD_INT 32
38937: PPUSH
38938: LD_VAR 0 1
38942: PPUSH
38943: CALL_OW 321
38947: PUSH
38948: LD_INT 2
38950: EQUAL
38951: ST_TO_ADDR
38952: GO 39270
38954: LD_INT 20
38956: DOUBLE
38957: EQUAL
38958: IFTRUE 38962
38960: GO 38987
38962: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38963: LD_ADDR_VAR 0 3
38967: PUSH
38968: LD_INT 6
38970: PPUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 321
38980: PUSH
38981: LD_INT 2
38983: EQUAL
38984: ST_TO_ADDR
38985: GO 39270
38987: LD_INT 22
38989: DOUBLE
38990: EQUAL
38991: IFTRUE 39001
38993: LD_INT 36
38995: DOUBLE
38996: EQUAL
38997: IFTRUE 39001
38999: GO 39026
39001: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39002: LD_ADDR_VAR 0 3
39006: PUSH
39007: LD_INT 15
39009: PPUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 321
39019: PUSH
39020: LD_INT 2
39022: EQUAL
39023: ST_TO_ADDR
39024: GO 39270
39026: LD_INT 30
39028: DOUBLE
39029: EQUAL
39030: IFTRUE 39034
39032: GO 39059
39034: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39035: LD_ADDR_VAR 0 3
39039: PUSH
39040: LD_INT 20
39042: PPUSH
39043: LD_VAR 0 1
39047: PPUSH
39048: CALL_OW 321
39052: PUSH
39053: LD_INT 2
39055: EQUAL
39056: ST_TO_ADDR
39057: GO 39270
39059: LD_INT 28
39061: DOUBLE
39062: EQUAL
39063: IFTRUE 39073
39065: LD_INT 21
39067: DOUBLE
39068: EQUAL
39069: IFTRUE 39073
39071: GO 39098
39073: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39074: LD_ADDR_VAR 0 3
39078: PUSH
39079: LD_INT 21
39081: PPUSH
39082: LD_VAR 0 1
39086: PPUSH
39087: CALL_OW 321
39091: PUSH
39092: LD_INT 2
39094: EQUAL
39095: ST_TO_ADDR
39096: GO 39270
39098: LD_INT 16
39100: DOUBLE
39101: EQUAL
39102: IFTRUE 39106
39104: GO 39131
39106: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39107: LD_ADDR_VAR 0 3
39111: PUSH
39112: LD_INT 84
39114: PPUSH
39115: LD_VAR 0 1
39119: PPUSH
39120: CALL_OW 321
39124: PUSH
39125: LD_INT 2
39127: EQUAL
39128: ST_TO_ADDR
39129: GO 39270
39131: LD_INT 19
39133: DOUBLE
39134: EQUAL
39135: IFTRUE 39145
39137: LD_INT 23
39139: DOUBLE
39140: EQUAL
39141: IFTRUE 39145
39143: GO 39170
39145: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39146: LD_ADDR_VAR 0 3
39150: PUSH
39151: LD_INT 83
39153: PPUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: CALL_OW 321
39163: PUSH
39164: LD_INT 2
39166: EQUAL
39167: ST_TO_ADDR
39168: GO 39270
39170: LD_INT 17
39172: DOUBLE
39173: EQUAL
39174: IFTRUE 39178
39176: GO 39203
39178: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39179: LD_ADDR_VAR 0 3
39183: PUSH
39184: LD_INT 39
39186: PPUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: CALL_OW 321
39196: PUSH
39197: LD_INT 2
39199: EQUAL
39200: ST_TO_ADDR
39201: GO 39270
39203: LD_INT 18
39205: DOUBLE
39206: EQUAL
39207: IFTRUE 39211
39209: GO 39236
39211: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39212: LD_ADDR_VAR 0 3
39216: PUSH
39217: LD_INT 40
39219: PPUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL_OW 321
39229: PUSH
39230: LD_INT 2
39232: EQUAL
39233: ST_TO_ADDR
39234: GO 39270
39236: LD_INT 27
39238: DOUBLE
39239: EQUAL
39240: IFTRUE 39244
39242: GO 39269
39244: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39245: LD_ADDR_VAR 0 3
39249: PUSH
39250: LD_INT 35
39252: PPUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: CALL_OW 321
39262: PUSH
39263: LD_INT 2
39265: EQUAL
39266: ST_TO_ADDR
39267: GO 39270
39269: POP
// end ;
39270: LD_VAR 0 3
39274: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39275: LD_INT 0
39277: PPUSH
39278: PPUSH
39279: PPUSH
39280: PPUSH
39281: PPUSH
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
39286: PPUSH
39287: PPUSH
// result := false ;
39288: LD_ADDR_VAR 0 6
39292: PUSH
39293: LD_INT 0
39295: ST_TO_ADDR
// if btype = b_depot then
39296: LD_VAR 0 2
39300: PUSH
39301: LD_INT 0
39303: EQUAL
39304: IFFALSE 39316
// begin result := true ;
39306: LD_ADDR_VAR 0 6
39310: PUSH
39311: LD_INT 1
39313: ST_TO_ADDR
// exit ;
39314: GO 40142
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39316: LD_VAR 0 1
39320: NOT
39321: PUSH
39322: LD_VAR 0 1
39326: PPUSH
39327: CALL_OW 266
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: IN
39342: NOT
39343: OR
39344: PUSH
39345: LD_VAR 0 2
39349: NOT
39350: OR
39351: PUSH
39352: LD_VAR 0 5
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: LD_INT 4
39371: PUSH
39372: LD_INT 5
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: IN
39383: NOT
39384: OR
39385: PUSH
39386: LD_VAR 0 3
39390: PPUSH
39391: LD_VAR 0 4
39395: PPUSH
39396: CALL_OW 488
39400: NOT
39401: OR
39402: IFFALSE 39406
// exit ;
39404: GO 40142
// side := GetSide ( depot ) ;
39406: LD_ADDR_VAR 0 9
39410: PUSH
39411: LD_VAR 0 1
39415: PPUSH
39416: CALL_OW 255
39420: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39421: LD_VAR 0 9
39425: PPUSH
39426: LD_VAR 0 2
39430: PPUSH
39431: CALL 38899 0 2
39435: NOT
39436: IFFALSE 39440
// exit ;
39438: GO 40142
// pom := GetBase ( depot ) ;
39440: LD_ADDR_VAR 0 10
39444: PUSH
39445: LD_VAR 0 1
39449: PPUSH
39450: CALL_OW 274
39454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39455: LD_ADDR_VAR 0 11
39459: PUSH
39460: LD_VAR 0 2
39464: PPUSH
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 248
39474: PPUSH
39475: CALL_OW 450
39479: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39480: LD_VAR 0 10
39484: PPUSH
39485: LD_INT 1
39487: PPUSH
39488: CALL_OW 275
39492: PUSH
39493: LD_VAR 0 11
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: GREATEREQUAL
39502: PUSH
39503: LD_VAR 0 10
39507: PPUSH
39508: LD_INT 2
39510: PPUSH
39511: CALL_OW 275
39515: PUSH
39516: LD_VAR 0 11
39520: PUSH
39521: LD_INT 2
39523: ARRAY
39524: GREATEREQUAL
39525: AND
39526: PUSH
39527: LD_VAR 0 10
39531: PPUSH
39532: LD_INT 3
39534: PPUSH
39535: CALL_OW 275
39539: PUSH
39540: LD_VAR 0 11
39544: PUSH
39545: LD_INT 3
39547: ARRAY
39548: GREATEREQUAL
39549: AND
39550: NOT
39551: IFFALSE 39555
// exit ;
39553: GO 40142
// if GetBType ( depot ) = b_depot then
39555: LD_VAR 0 1
39559: PPUSH
39560: CALL_OW 266
39564: PUSH
39565: LD_INT 0
39567: EQUAL
39568: IFFALSE 39580
// dist := 28 else
39570: LD_ADDR_VAR 0 14
39574: PUSH
39575: LD_INT 28
39577: ST_TO_ADDR
39578: GO 39588
// dist := 36 ;
39580: LD_ADDR_VAR 0 14
39584: PUSH
39585: LD_INT 36
39587: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39588: LD_VAR 0 1
39592: PPUSH
39593: LD_VAR 0 3
39597: PPUSH
39598: LD_VAR 0 4
39602: PPUSH
39603: CALL_OW 297
39607: PUSH
39608: LD_VAR 0 14
39612: GREATER
39613: IFFALSE 39617
// exit ;
39615: GO 40142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39617: LD_ADDR_VAR 0 12
39621: PUSH
39622: LD_VAR 0 2
39626: PPUSH
39627: LD_VAR 0 3
39631: PPUSH
39632: LD_VAR 0 4
39636: PPUSH
39637: LD_VAR 0 5
39641: PPUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 248
39651: PPUSH
39652: LD_INT 0
39654: PPUSH
39655: CALL 40147 0 6
39659: ST_TO_ADDR
// if not hexes then
39660: LD_VAR 0 12
39664: NOT
39665: IFFALSE 39669
// exit ;
39667: GO 40142
// hex := GetHexInfo ( x , y ) ;
39669: LD_ADDR_VAR 0 15
39673: PUSH
39674: LD_VAR 0 3
39678: PPUSH
39679: LD_VAR 0 4
39683: PPUSH
39684: CALL_OW 546
39688: ST_TO_ADDR
// if hex [ 1 ] then
39689: LD_VAR 0 15
39693: PUSH
39694: LD_INT 1
39696: ARRAY
39697: IFFALSE 39701
// exit ;
39699: GO 40142
// height := hex [ 2 ] ;
39701: LD_ADDR_VAR 0 13
39705: PUSH
39706: LD_VAR 0 15
39710: PUSH
39711: LD_INT 2
39713: ARRAY
39714: ST_TO_ADDR
// for i = 1 to hexes do
39715: LD_ADDR_VAR 0 7
39719: PUSH
39720: DOUBLE
39721: LD_INT 1
39723: DEC
39724: ST_TO_ADDR
39725: LD_VAR 0 12
39729: PUSH
39730: FOR_TO
39731: IFFALSE 40061
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39733: LD_VAR 0 12
39737: PUSH
39738: LD_VAR 0 7
39742: ARRAY
39743: PUSH
39744: LD_INT 1
39746: ARRAY
39747: PPUSH
39748: LD_VAR 0 12
39752: PUSH
39753: LD_VAR 0 7
39757: ARRAY
39758: PUSH
39759: LD_INT 2
39761: ARRAY
39762: PPUSH
39763: CALL_OW 488
39767: NOT
39768: PUSH
39769: LD_VAR 0 12
39773: PUSH
39774: LD_VAR 0 7
39778: ARRAY
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PPUSH
39784: LD_VAR 0 12
39788: PUSH
39789: LD_VAR 0 7
39793: ARRAY
39794: PUSH
39795: LD_INT 2
39797: ARRAY
39798: PPUSH
39799: CALL_OW 428
39803: PUSH
39804: LD_INT 0
39806: GREATER
39807: OR
39808: PUSH
39809: LD_VAR 0 12
39813: PUSH
39814: LD_VAR 0 7
39818: ARRAY
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: PPUSH
39824: LD_VAR 0 12
39828: PUSH
39829: LD_VAR 0 7
39833: ARRAY
39834: PUSH
39835: LD_INT 2
39837: ARRAY
39838: PPUSH
39839: CALL_OW 351
39843: OR
39844: IFFALSE 39850
// exit ;
39846: POP
39847: POP
39848: GO 40142
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39850: LD_ADDR_VAR 0 8
39854: PUSH
39855: LD_VAR 0 12
39859: PUSH
39860: LD_VAR 0 7
39864: ARRAY
39865: PUSH
39866: LD_INT 1
39868: ARRAY
39869: PPUSH
39870: LD_VAR 0 12
39874: PUSH
39875: LD_VAR 0 7
39879: ARRAY
39880: PUSH
39881: LD_INT 2
39883: ARRAY
39884: PPUSH
39885: CALL_OW 546
39889: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39890: LD_VAR 0 8
39894: PUSH
39895: LD_INT 1
39897: ARRAY
39898: PUSH
39899: LD_VAR 0 8
39903: PUSH
39904: LD_INT 2
39906: ARRAY
39907: PUSH
39908: LD_VAR 0 13
39912: PUSH
39913: LD_INT 2
39915: PLUS
39916: GREATER
39917: OR
39918: PUSH
39919: LD_VAR 0 8
39923: PUSH
39924: LD_INT 2
39926: ARRAY
39927: PUSH
39928: LD_VAR 0 13
39932: PUSH
39933: LD_INT 2
39935: MINUS
39936: LESS
39937: OR
39938: PUSH
39939: LD_VAR 0 8
39943: PUSH
39944: LD_INT 3
39946: ARRAY
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 8
39953: PUSH
39954: LD_INT 9
39956: PUSH
39957: LD_INT 10
39959: PUSH
39960: LD_INT 11
39962: PUSH
39963: LD_INT 12
39965: PUSH
39966: LD_INT 13
39968: PUSH
39969: LD_INT 16
39971: PUSH
39972: LD_INT 17
39974: PUSH
39975: LD_INT 18
39977: PUSH
39978: LD_INT 19
39980: PUSH
39981: LD_INT 20
39983: PUSH
39984: LD_INT 21
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: IN
40002: NOT
40003: OR
40004: PUSH
40005: LD_VAR 0 8
40009: PUSH
40010: LD_INT 5
40012: ARRAY
40013: NOT
40014: OR
40015: PUSH
40016: LD_VAR 0 8
40020: PUSH
40021: LD_INT 6
40023: ARRAY
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 7
40033: PUSH
40034: LD_INT 9
40036: PUSH
40037: LD_INT 10
40039: PUSH
40040: LD_INT 11
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: IN
40051: NOT
40052: OR
40053: IFFALSE 40059
// exit ;
40055: POP
40056: POP
40057: GO 40142
// end ;
40059: GO 39730
40061: POP
40062: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40063: LD_VAR 0 9
40067: PPUSH
40068: LD_VAR 0 3
40072: PPUSH
40073: LD_VAR 0 4
40077: PPUSH
40078: LD_INT 20
40080: PPUSH
40081: CALL 32065 0 4
40085: PUSH
40086: LD_INT 4
40088: ARRAY
40089: IFFALSE 40093
// exit ;
40091: GO 40142
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40093: LD_VAR 0 2
40097: PUSH
40098: LD_INT 29
40100: PUSH
40101: LD_INT 30
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: IN
40108: PUSH
40109: LD_VAR 0 3
40113: PPUSH
40114: LD_VAR 0 4
40118: PPUSH
40119: LD_VAR 0 9
40123: PPUSH
40124: CALL_OW 440
40128: NOT
40129: AND
40130: IFFALSE 40134
// exit ;
40132: GO 40142
// result := true ;
40134: LD_ADDR_VAR 0 6
40138: PUSH
40139: LD_INT 1
40141: ST_TO_ADDR
// end ;
40142: LD_VAR 0 6
40146: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40147: LD_INT 0
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
40174: PPUSH
40175: PPUSH
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
// result = [ ] ;
40207: LD_ADDR_VAR 0 7
40211: PUSH
40212: EMPTY
40213: ST_TO_ADDR
// temp_list = [ ] ;
40214: LD_ADDR_VAR 0 9
40218: PUSH
40219: EMPTY
40220: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40221: LD_VAR 0 4
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 4
40240: PUSH
40241: LD_INT 5
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: IN
40252: NOT
40253: PUSH
40254: LD_VAR 0 1
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: IN
40269: PUSH
40270: LD_VAR 0 5
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: LD_INT 3
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: IN
40289: NOT
40290: AND
40291: OR
40292: IFFALSE 40296
// exit ;
40294: GO 58687
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40296: LD_VAR 0 1
40300: PUSH
40301: LD_INT 6
40303: PUSH
40304: LD_INT 7
40306: PUSH
40307: LD_INT 8
40309: PUSH
40310: LD_INT 13
40312: PUSH
40313: LD_INT 12
40315: PUSH
40316: LD_INT 15
40318: PUSH
40319: LD_INT 11
40321: PUSH
40322: LD_INT 14
40324: PUSH
40325: LD_INT 10
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: IN
40339: IFFALSE 40349
// btype = b_lab ;
40341: LD_ADDR_VAR 0 1
40345: PUSH
40346: LD_INT 6
40348: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40349: LD_VAR 0 6
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: IN
40368: NOT
40369: PUSH
40370: LD_VAR 0 1
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 3
40386: PUSH
40387: LD_INT 6
40389: PUSH
40390: LD_INT 36
40392: PUSH
40393: LD_INT 4
40395: PUSH
40396: LD_INT 5
40398: PUSH
40399: LD_INT 31
40401: PUSH
40402: LD_INT 32
40404: PUSH
40405: LD_INT 33
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: IN
40421: NOT
40422: PUSH
40423: LD_VAR 0 6
40427: PUSH
40428: LD_INT 1
40430: EQUAL
40431: AND
40432: OR
40433: PUSH
40434: LD_VAR 0 1
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: LD_INT 3
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: IN
40449: NOT
40450: PUSH
40451: LD_VAR 0 6
40455: PUSH
40456: LD_INT 2
40458: EQUAL
40459: AND
40460: OR
40461: IFFALSE 40471
// mode = 0 ;
40463: LD_ADDR_VAR 0 6
40467: PUSH
40468: LD_INT 0
40470: ST_TO_ADDR
// case mode of 0 :
40471: LD_VAR 0 6
40475: PUSH
40476: LD_INT 0
40478: DOUBLE
40479: EQUAL
40480: IFTRUE 40484
40482: GO 51937
40484: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40485: LD_ADDR_VAR 0 11
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 3
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40678: LD_ADDR_VAR 0 12
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 3
40835: NEG
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40874: LD_ADDR_VAR 0 13
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 3
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41073: LD_ADDR_VAR 0 14
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 3
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41269: LD_ADDR_VAR 0 15
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 3
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41462: LD_ADDR_VAR 0 16
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 3
41619: PUSH
41620: LD_INT 3
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41655: LD_ADDR_VAR 0 17
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41885: LD_ADDR_VAR 0 18
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42115: LD_ADDR_VAR 0 19
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42345: LD_ADDR_VAR 0 20
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42575: LD_ADDR_VAR 0 21
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 2
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42805: LD_ADDR_VAR 0 22
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43035: LD_ADDR_VAR 0 23
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: LD_INT 3
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 3
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43315: LD_ADDR_VAR 0 24
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43591: LD_ADDR_VAR 0 25
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 3
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 3
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43865: LD_ADDR_VAR 0 26
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44141: LD_ADDR_VAR 0 27
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44421: LD_ADDR_VAR 0 28
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 3
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44703: LD_ADDR_VAR 0 29
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 3
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 3
44947: NEG
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44982: LD_ADDR_VAR 0 30
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 3
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45260: LD_ADDR_VAR 0 31
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: LD_INT 3
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 3
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45538: LD_ADDR_VAR 0 32
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 3
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 3
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45816: LD_ADDR_VAR 0 33
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 3
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 3
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46095: LD_ADDR_VAR 0 34
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 3
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 3
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 3
46340: NEG
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46375: LD_ADDR_VAR 0 35
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46487: LD_ADDR_VAR 0 36
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46599: LD_ADDR_VAR 0 37
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46711: LD_ADDR_VAR 0 38
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46823: LD_ADDR_VAR 0 39
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46935: LD_ADDR_VAR 0 40
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47047: LD_ADDR_VAR 0 41
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 3
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 3
47321: NEG
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 3
47332: NEG
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47397: LD_ADDR_VAR 0 42
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 3
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: LD_INT 3
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47747: LD_ADDR_VAR 0 43
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 3
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 3
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 3
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 3
48043: NEG
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 3
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48095: LD_ADDR_VAR 0 44
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: LD_INT 3
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 3
48404: NEG
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48445: LD_ADDR_VAR 0 45
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 3
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 3
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 3
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48795: LD_ADDR_VAR 0 46
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 3
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 3
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 3
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49143: LD_ADDR_VAR 0 47
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49294: LD_ADDR_VAR 0 48
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49441: LD_ADDR_VAR 0 49
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49585: LD_ADDR_VAR 0 50
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49729: LD_ADDR_VAR 0 51
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49876: LD_ADDR_VAR 0 52
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50027: LD_ADDR_VAR 0 53
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50257: LD_ADDR_VAR 0 54
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50487: LD_ADDR_VAR 0 55
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50717: LD_ADDR_VAR 0 56
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50947: LD_ADDR_VAR 0 57
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51177: LD_ADDR_VAR 0 58
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51407: LD_ADDR_VAR 0 59
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51495: LD_ADDR_VAR 0 60
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51583: LD_ADDR_VAR 0 61
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51671: LD_ADDR_VAR 0 62
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51759: LD_ADDR_VAR 0 63
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51847: LD_ADDR_VAR 0 64
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: ST_TO_ADDR
// end ; 1 :
51935: GO 57832
51937: LD_INT 1
51939: DOUBLE
51940: EQUAL
51941: IFTRUE 51945
51943: GO 54568
51945: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51946: LD_ADDR_VAR 0 11
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 3
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 3
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51990: LD_ADDR_VAR 0 12
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52031: LD_ADDR_VAR 0 13
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52071: LD_ADDR_VAR 0 14
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52112: LD_ADDR_VAR 0 15
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52156: LD_ADDR_VAR 0 16
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: NEG
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52202: LD_ADDR_VAR 0 17
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52246: LD_ADDR_VAR 0 18
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52287: LD_ADDR_VAR 0 19
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: LD_INT 3
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52327: LD_ADDR_VAR 0 20
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52368: LD_ADDR_VAR 0 21
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 1
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52412: LD_ADDR_VAR 0 22
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52458: LD_ADDR_VAR 0 23
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 4
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 3
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: LIST
52501: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52502: LD_ADDR_VAR 0 24
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 4
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52543: LD_ADDR_VAR 0 25
52547: PUSH
52548: LD_INT 3
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 4
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: LD_INT 4
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52583: LD_ADDR_VAR 0 26
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 3
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 4
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52624: LD_ADDR_VAR 0 27
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 4
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52668: LD_ADDR_VAR 0 28
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: LD_INT 3
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: LD_INT 4
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 4
52699: NEG
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52714: LD_ADDR_VAR 0 29
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 4
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 4
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 5
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 5
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 4
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 6
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 6
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 5
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52869: LD_ADDR_VAR 0 30
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 4
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 4
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 4
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 5
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 6
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 6
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53012: LD_ADDR_VAR 0 31
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 3
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 4
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 4
53059: PUSH
53060: LD_INT 4
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: PUSH
53070: LD_INT 4
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 5
53079: PUSH
53080: LD_INT 4
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 5
53089: PUSH
53090: LD_INT 5
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 4
53099: PUSH
53100: LD_INT 5
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 6
53109: PUSH
53110: LD_INT 5
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 6
53119: PUSH
53120: LD_INT 6
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 5
53129: PUSH
53130: LD_INT 6
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53151: LD_ADDR_VAR 0 32
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 4
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 4
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 5
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 5
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 6
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 6
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 5
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53294: LD_ADDR_VAR 0 33
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 4
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 4
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 4
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 5
53380: NEG
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 5
53391: NEG
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 5
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 6
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 6
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53449: LD_ADDR_VAR 0 34
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 3
53480: NEG
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: LD_INT 4
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: NEG
53505: PUSH
53506: LD_INT 3
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 4
53516: NEG
53517: PUSH
53518: LD_INT 4
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 4
53528: NEG
53529: PUSH
53530: LD_INT 5
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 5
53540: NEG
53541: PUSH
53542: LD_INT 4
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 5
53552: NEG
53553: PUSH
53554: LD_INT 5
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 5
53564: NEG
53565: PUSH
53566: LD_INT 6
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 6
53576: NEG
53577: PUSH
53578: LD_INT 5
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 6
53588: NEG
53589: PUSH
53590: LD_INT 6
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53612: LD_ADDR_VAR 0 41
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53656: LD_ADDR_VAR 0 42
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: LIST
53696: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53697: LD_ADDR_VAR 0 43
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53737: LD_ADDR_VAR 0 44
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53778: LD_ADDR_VAR 0 45
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53822: LD_ADDR_VAR 0 46
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53868: LD_ADDR_VAR 0 47
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53901: LD_ADDR_VAR 0 48
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53932: LD_ADDR_VAR 0 49
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53961: LD_ADDR_VAR 0 50
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53990: LD_ADDR_VAR 0 51
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54021: LD_ADDR_VAR 0 52
54025: PUSH
54026: LD_INT 3
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: NEG
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54054: LD_ADDR_VAR 0 53
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 3
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54098: LD_ADDR_VAR 0 54
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 3
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54139: LD_ADDR_VAR 0 55
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: LD_INT 3
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54179: LD_ADDR_VAR 0 56
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 3
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54220: LD_ADDR_VAR 0 57
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 3
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54264: LD_ADDR_VAR 0 58
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54310: LD_ADDR_VAR 0 59
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54354: LD_ADDR_VAR 0 60
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54395: LD_ADDR_VAR 0 61
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54435: LD_ADDR_VAR 0 62
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54476: LD_ADDR_VAR 0 63
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54520: LD_ADDR_VAR 0 64
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// end ; 2 :
54566: GO 57832
54568: LD_INT 2
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54576
54574: GO 57831
54576: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54577: LD_ADDR_VAR 0 29
54581: PUSH
54582: LD_INT 4
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 5
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 5
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 4
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 5
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 4
54697: PUSH
54698: LD_INT 3
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 4
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: LD_INT 4
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 4
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 4
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 4
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 4
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 5
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 5
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 4
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 5
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 4
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 4
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 4
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 4
54962: NEG
54963: PUSH
54964: LD_INT 4
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 4
54974: NEG
54975: PUSH
54976: LD_INT 5
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: LD_INT 4
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 4
55010: NEG
55011: PUSH
55012: LD_INT 3
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 5
55022: NEG
55023: PUSH
55024: LD_INT 4
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 5
55034: NEG
55035: PUSH
55036: LD_INT 5
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: LD_INT 5
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 5
55058: NEG
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55115: LD_ADDR_VAR 0 30
55119: PUSH
55120: LD_INT 4
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 4
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 5
55142: PUSH
55143: LD_INT 4
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 5
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 4
55162: PUSH
55163: LD_INT 5
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: LD_INT 4
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 5
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 3
55202: PUSH
55203: LD_INT 5
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 3
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 4
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 4
55305: NEG
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 4
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 4
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 5
55361: NEG
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 5
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 5
55384: NEG
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: NEG
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: NEG
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: LD_INT 4
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 4
55467: NEG
55468: PUSH
55469: LD_INT 3
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 4
55479: NEG
55480: PUSH
55481: LD_INT 4
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 4
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 4
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 5
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 4
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 4
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 5
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 5
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55662: LD_ADDR_VAR 0 31
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 5
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 5
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 4
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 5
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 4
55818: NEG
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 4
55841: NEG
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 4
55864: NEG
55865: PUSH
55866: LD_INT 4
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: NEG
55877: PUSH
55878: LD_INT 5
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: LD_INT 4
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 5
55924: NEG
55925: PUSH
55926: LD_INT 4
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 5
55936: NEG
55937: PUSH
55938: LD_INT 5
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: LD_INT 5
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 5
55960: NEG
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 3
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 4
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 4
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 4
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 4
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 5
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 5
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 4
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 5
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56212: LD_ADDR_VAR 0 32
56216: PUSH
56217: LD_INT 4
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 4
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 3
56242: NEG
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 4
56264: NEG
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 5
56275: NEG
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 5
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 5
56298: NEG
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: NEG
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: LD_INT 4
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 3
56369: NEG
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 4
56381: NEG
56382: PUSH
56383: LD_INT 3
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 4
56393: NEG
56394: PUSH
56395: LD_INT 4
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 4
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 4
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 4
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 5
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 4
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 4
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 5
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 5
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 4
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: LD_INT 4
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 5
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 5
56654: PUSH
56655: LD_INT 5
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 4
56664: PUSH
56665: LD_INT 5
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 5
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56759: LD_ADDR_VAR 0 33
56763: PUSH
56764: LD_INT 4
56766: NEG
56767: PUSH
56768: LD_INT 4
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: LD_INT 5
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: LD_INT 4
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 4
56814: NEG
56815: PUSH
56816: LD_INT 3
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 5
56826: NEG
56827: PUSH
56828: LD_INT 4
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 5
56838: NEG
56839: PUSH
56840: LD_INT 5
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 5
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 5
56862: NEG
56863: PUSH
56864: LD_INT 3
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 3
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 4
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 4
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: LD_INT 4
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 5
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 5
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 4
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: PUSH
57070: LD_INT 3
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 4
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 4
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: LD_INT 4
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 4
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: LD_INT 4
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 5
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 5
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 4
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 5
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57297: LD_ADDR_VAR 0 34
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 4
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 5
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 4
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 3
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 5
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 4
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 4
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: PUSH
57500: LD_INT 4
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 5
57519: PUSH
57520: LD_INT 4
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 5
57529: PUSH
57530: LD_INT 5
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: LD_INT 5
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: LD_INT 4
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 5
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: LD_INT 5
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 3
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 3
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 4
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 4
57682: NEG
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 4
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 4
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 5
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 5
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 5
57761: NEG
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: ST_TO_ADDR
// end ; end ;
57829: GO 57832
57831: POP
// case btype of b_depot , b_warehouse :
57832: LD_VAR 0 1
57836: PUSH
57837: LD_INT 0
57839: DOUBLE
57840: EQUAL
57841: IFTRUE 57851
57843: LD_INT 1
57845: DOUBLE
57846: EQUAL
57847: IFTRUE 57851
57849: GO 58052
57851: POP
// case nation of nation_american :
57852: LD_VAR 0 5
57856: PUSH
57857: LD_INT 1
57859: DOUBLE
57860: EQUAL
57861: IFTRUE 57865
57863: GO 57921
57865: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57866: LD_ADDR_VAR 0 9
57870: PUSH
57871: LD_VAR 0 11
57875: PUSH
57876: LD_VAR 0 12
57880: PUSH
57881: LD_VAR 0 13
57885: PUSH
57886: LD_VAR 0 14
57890: PUSH
57891: LD_VAR 0 15
57895: PUSH
57896: LD_VAR 0 16
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: PUSH
57909: LD_VAR 0 4
57913: PUSH
57914: LD_INT 1
57916: PLUS
57917: ARRAY
57918: ST_TO_ADDR
57919: GO 58050
57921: LD_INT 2
57923: DOUBLE
57924: EQUAL
57925: IFTRUE 57929
57927: GO 57985
57929: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57930: LD_ADDR_VAR 0 9
57934: PUSH
57935: LD_VAR 0 17
57939: PUSH
57940: LD_VAR 0 18
57944: PUSH
57945: LD_VAR 0 19
57949: PUSH
57950: LD_VAR 0 20
57954: PUSH
57955: LD_VAR 0 21
57959: PUSH
57960: LD_VAR 0 22
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: PUSH
57973: LD_VAR 0 4
57977: PUSH
57978: LD_INT 1
57980: PLUS
57981: ARRAY
57982: ST_TO_ADDR
57983: GO 58050
57985: LD_INT 3
57987: DOUBLE
57988: EQUAL
57989: IFTRUE 57993
57991: GO 58049
57993: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57994: LD_ADDR_VAR 0 9
57998: PUSH
57999: LD_VAR 0 23
58003: PUSH
58004: LD_VAR 0 24
58008: PUSH
58009: LD_VAR 0 25
58013: PUSH
58014: LD_VAR 0 26
58018: PUSH
58019: LD_VAR 0 27
58023: PUSH
58024: LD_VAR 0 28
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: PUSH
58037: LD_VAR 0 4
58041: PUSH
58042: LD_INT 1
58044: PLUS
58045: ARRAY
58046: ST_TO_ADDR
58047: GO 58050
58049: POP
58050: GO 58605
58052: LD_INT 2
58054: DOUBLE
58055: EQUAL
58056: IFTRUE 58066
58058: LD_INT 3
58060: DOUBLE
58061: EQUAL
58062: IFTRUE 58066
58064: GO 58122
58066: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58067: LD_ADDR_VAR 0 9
58071: PUSH
58072: LD_VAR 0 29
58076: PUSH
58077: LD_VAR 0 30
58081: PUSH
58082: LD_VAR 0 31
58086: PUSH
58087: LD_VAR 0 32
58091: PUSH
58092: LD_VAR 0 33
58096: PUSH
58097: LD_VAR 0 34
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: PUSH
58110: LD_VAR 0 4
58114: PUSH
58115: LD_INT 1
58117: PLUS
58118: ARRAY
58119: ST_TO_ADDR
58120: GO 58605
58122: LD_INT 16
58124: DOUBLE
58125: EQUAL
58126: IFTRUE 58184
58128: LD_INT 17
58130: DOUBLE
58131: EQUAL
58132: IFTRUE 58184
58134: LD_INT 18
58136: DOUBLE
58137: EQUAL
58138: IFTRUE 58184
58140: LD_INT 19
58142: DOUBLE
58143: EQUAL
58144: IFTRUE 58184
58146: LD_INT 22
58148: DOUBLE
58149: EQUAL
58150: IFTRUE 58184
58152: LD_INT 20
58154: DOUBLE
58155: EQUAL
58156: IFTRUE 58184
58158: LD_INT 21
58160: DOUBLE
58161: EQUAL
58162: IFTRUE 58184
58164: LD_INT 23
58166: DOUBLE
58167: EQUAL
58168: IFTRUE 58184
58170: LD_INT 24
58172: DOUBLE
58173: EQUAL
58174: IFTRUE 58184
58176: LD_INT 25
58178: DOUBLE
58179: EQUAL
58180: IFTRUE 58184
58182: GO 58240
58184: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58185: LD_ADDR_VAR 0 9
58189: PUSH
58190: LD_VAR 0 35
58194: PUSH
58195: LD_VAR 0 36
58199: PUSH
58200: LD_VAR 0 37
58204: PUSH
58205: LD_VAR 0 38
58209: PUSH
58210: LD_VAR 0 39
58214: PUSH
58215: LD_VAR 0 40
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: PUSH
58228: LD_VAR 0 4
58232: PUSH
58233: LD_INT 1
58235: PLUS
58236: ARRAY
58237: ST_TO_ADDR
58238: GO 58605
58240: LD_INT 6
58242: DOUBLE
58243: EQUAL
58244: IFTRUE 58296
58246: LD_INT 7
58248: DOUBLE
58249: EQUAL
58250: IFTRUE 58296
58252: LD_INT 8
58254: DOUBLE
58255: EQUAL
58256: IFTRUE 58296
58258: LD_INT 13
58260: DOUBLE
58261: EQUAL
58262: IFTRUE 58296
58264: LD_INT 12
58266: DOUBLE
58267: EQUAL
58268: IFTRUE 58296
58270: LD_INT 15
58272: DOUBLE
58273: EQUAL
58274: IFTRUE 58296
58276: LD_INT 11
58278: DOUBLE
58279: EQUAL
58280: IFTRUE 58296
58282: LD_INT 14
58284: DOUBLE
58285: EQUAL
58286: IFTRUE 58296
58288: LD_INT 10
58290: DOUBLE
58291: EQUAL
58292: IFTRUE 58296
58294: GO 58352
58296: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58297: LD_ADDR_VAR 0 9
58301: PUSH
58302: LD_VAR 0 41
58306: PUSH
58307: LD_VAR 0 42
58311: PUSH
58312: LD_VAR 0 43
58316: PUSH
58317: LD_VAR 0 44
58321: PUSH
58322: LD_VAR 0 45
58326: PUSH
58327: LD_VAR 0 46
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: PUSH
58340: LD_VAR 0 4
58344: PUSH
58345: LD_INT 1
58347: PLUS
58348: ARRAY
58349: ST_TO_ADDR
58350: GO 58605
58352: LD_INT 36
58354: DOUBLE
58355: EQUAL
58356: IFTRUE 58360
58358: GO 58416
58360: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58361: LD_ADDR_VAR 0 9
58365: PUSH
58366: LD_VAR 0 47
58370: PUSH
58371: LD_VAR 0 48
58375: PUSH
58376: LD_VAR 0 49
58380: PUSH
58381: LD_VAR 0 50
58385: PUSH
58386: LD_VAR 0 51
58390: PUSH
58391: LD_VAR 0 52
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: PUSH
58404: LD_VAR 0 4
58408: PUSH
58409: LD_INT 1
58411: PLUS
58412: ARRAY
58413: ST_TO_ADDR
58414: GO 58605
58416: LD_INT 4
58418: DOUBLE
58419: EQUAL
58420: IFTRUE 58442
58422: LD_INT 5
58424: DOUBLE
58425: EQUAL
58426: IFTRUE 58442
58428: LD_INT 34
58430: DOUBLE
58431: EQUAL
58432: IFTRUE 58442
58434: LD_INT 37
58436: DOUBLE
58437: EQUAL
58438: IFTRUE 58442
58440: GO 58498
58442: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58443: LD_ADDR_VAR 0 9
58447: PUSH
58448: LD_VAR 0 53
58452: PUSH
58453: LD_VAR 0 54
58457: PUSH
58458: LD_VAR 0 55
58462: PUSH
58463: LD_VAR 0 56
58467: PUSH
58468: LD_VAR 0 57
58472: PUSH
58473: LD_VAR 0 58
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: PUSH
58486: LD_VAR 0 4
58490: PUSH
58491: LD_INT 1
58493: PLUS
58494: ARRAY
58495: ST_TO_ADDR
58496: GO 58605
58498: LD_INT 31
58500: DOUBLE
58501: EQUAL
58502: IFTRUE 58548
58504: LD_INT 32
58506: DOUBLE
58507: EQUAL
58508: IFTRUE 58548
58510: LD_INT 33
58512: DOUBLE
58513: EQUAL
58514: IFTRUE 58548
58516: LD_INT 27
58518: DOUBLE
58519: EQUAL
58520: IFTRUE 58548
58522: LD_INT 26
58524: DOUBLE
58525: EQUAL
58526: IFTRUE 58548
58528: LD_INT 28
58530: DOUBLE
58531: EQUAL
58532: IFTRUE 58548
58534: LD_INT 29
58536: DOUBLE
58537: EQUAL
58538: IFTRUE 58548
58540: LD_INT 30
58542: DOUBLE
58543: EQUAL
58544: IFTRUE 58548
58546: GO 58604
58548: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58549: LD_ADDR_VAR 0 9
58553: PUSH
58554: LD_VAR 0 59
58558: PUSH
58559: LD_VAR 0 60
58563: PUSH
58564: LD_VAR 0 61
58568: PUSH
58569: LD_VAR 0 62
58573: PUSH
58574: LD_VAR 0 63
58578: PUSH
58579: LD_VAR 0 64
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: PUSH
58592: LD_VAR 0 4
58596: PUSH
58597: LD_INT 1
58599: PLUS
58600: ARRAY
58601: ST_TO_ADDR
58602: GO 58605
58604: POP
// temp_list2 = [ ] ;
58605: LD_ADDR_VAR 0 10
58609: PUSH
58610: EMPTY
58611: ST_TO_ADDR
// for i in temp_list do
58612: LD_ADDR_VAR 0 8
58616: PUSH
58617: LD_VAR 0 9
58621: PUSH
58622: FOR_IN
58623: IFFALSE 58675
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58625: LD_ADDR_VAR 0 10
58629: PUSH
58630: LD_VAR 0 10
58634: PUSH
58635: LD_VAR 0 8
58639: PUSH
58640: LD_INT 1
58642: ARRAY
58643: PUSH
58644: LD_VAR 0 2
58648: PLUS
58649: PUSH
58650: LD_VAR 0 8
58654: PUSH
58655: LD_INT 2
58657: ARRAY
58658: PUSH
58659: LD_VAR 0 3
58663: PLUS
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: EMPTY
58670: LIST
58671: ADD
58672: ST_TO_ADDR
58673: GO 58622
58675: POP
58676: POP
// result = temp_list2 ;
58677: LD_ADDR_VAR 0 7
58681: PUSH
58682: LD_VAR 0 10
58686: ST_TO_ADDR
// end ;
58687: LD_VAR 0 7
58691: RET
// export function EnemyInRange ( unit , dist ) ; begin
58692: LD_INT 0
58694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58695: LD_ADDR_VAR 0 3
58699: PUSH
58700: LD_VAR 0 1
58704: PPUSH
58705: CALL_OW 255
58709: PPUSH
58710: LD_VAR 0 1
58714: PPUSH
58715: CALL_OW 250
58719: PPUSH
58720: LD_VAR 0 1
58724: PPUSH
58725: CALL_OW 251
58729: PPUSH
58730: LD_VAR 0 2
58734: PPUSH
58735: CALL 32065 0 4
58739: PUSH
58740: LD_INT 4
58742: ARRAY
58743: ST_TO_ADDR
// end ;
58744: LD_VAR 0 3
58748: RET
// export function PlayerSeeMe ( unit ) ; begin
58749: LD_INT 0
58751: PPUSH
// result := See ( your_side , unit ) ;
58752: LD_ADDR_VAR 0 2
58756: PUSH
58757: LD_OWVAR 2
58761: PPUSH
58762: LD_VAR 0 1
58766: PPUSH
58767: CALL_OW 292
58771: ST_TO_ADDR
// end ;
58772: LD_VAR 0 2
58776: RET
// export function ReverseDir ( unit ) ; begin
58777: LD_INT 0
58779: PPUSH
// if not unit then
58780: LD_VAR 0 1
58784: NOT
58785: IFFALSE 58789
// exit ;
58787: GO 58812
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58789: LD_ADDR_VAR 0 2
58793: PUSH
58794: LD_VAR 0 1
58798: PPUSH
58799: CALL_OW 254
58803: PUSH
58804: LD_INT 3
58806: PLUS
58807: PUSH
58808: LD_INT 6
58810: MOD
58811: ST_TO_ADDR
// end ;
58812: LD_VAR 0 2
58816: RET
// export function ReverseArray ( array ) ; var i ; begin
58817: LD_INT 0
58819: PPUSH
58820: PPUSH
// if not array then
58821: LD_VAR 0 1
58825: NOT
58826: IFFALSE 58830
// exit ;
58828: GO 58885
// result := [ ] ;
58830: LD_ADDR_VAR 0 2
58834: PUSH
58835: EMPTY
58836: ST_TO_ADDR
// for i := array downto 1 do
58837: LD_ADDR_VAR 0 3
58841: PUSH
58842: DOUBLE
58843: LD_VAR 0 1
58847: INC
58848: ST_TO_ADDR
58849: LD_INT 1
58851: PUSH
58852: FOR_DOWNTO
58853: IFFALSE 58883
// result := Join ( result , array [ i ] ) ;
58855: LD_ADDR_VAR 0 2
58859: PUSH
58860: LD_VAR 0 2
58864: PPUSH
58865: LD_VAR 0 1
58869: PUSH
58870: LD_VAR 0 3
58874: ARRAY
58875: PPUSH
58876: CALL 63530 0 2
58880: ST_TO_ADDR
58881: GO 58852
58883: POP
58884: POP
// end ;
58885: LD_VAR 0 2
58889: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58890: LD_INT 0
58892: PPUSH
58893: PPUSH
58894: PPUSH
58895: PPUSH
58896: PPUSH
58897: PPUSH
// if not unit or not hexes then
58898: LD_VAR 0 1
58902: NOT
58903: PUSH
58904: LD_VAR 0 2
58908: NOT
58909: OR
58910: IFFALSE 58914
// exit ;
58912: GO 59037
// dist := 9999 ;
58914: LD_ADDR_VAR 0 5
58918: PUSH
58919: LD_INT 9999
58921: ST_TO_ADDR
// for i = 1 to hexes do
58922: LD_ADDR_VAR 0 4
58926: PUSH
58927: DOUBLE
58928: LD_INT 1
58930: DEC
58931: ST_TO_ADDR
58932: LD_VAR 0 2
58936: PUSH
58937: FOR_TO
58938: IFFALSE 59025
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58940: LD_ADDR_VAR 0 6
58944: PUSH
58945: LD_VAR 0 1
58949: PPUSH
58950: LD_VAR 0 2
58954: PUSH
58955: LD_VAR 0 4
58959: ARRAY
58960: PUSH
58961: LD_INT 1
58963: ARRAY
58964: PPUSH
58965: LD_VAR 0 2
58969: PUSH
58970: LD_VAR 0 4
58974: ARRAY
58975: PUSH
58976: LD_INT 2
58978: ARRAY
58979: PPUSH
58980: CALL_OW 297
58984: ST_TO_ADDR
// if tdist < dist then
58985: LD_VAR 0 6
58989: PUSH
58990: LD_VAR 0 5
58994: LESS
58995: IFFALSE 59023
// begin hex := hexes [ i ] ;
58997: LD_ADDR_VAR 0 8
59001: PUSH
59002: LD_VAR 0 2
59006: PUSH
59007: LD_VAR 0 4
59011: ARRAY
59012: ST_TO_ADDR
// dist := tdist ;
59013: LD_ADDR_VAR 0 5
59017: PUSH
59018: LD_VAR 0 6
59022: ST_TO_ADDR
// end ; end ;
59023: GO 58937
59025: POP
59026: POP
// result := hex ;
59027: LD_ADDR_VAR 0 3
59031: PUSH
59032: LD_VAR 0 8
59036: ST_TO_ADDR
// end ;
59037: LD_VAR 0 3
59041: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59042: LD_INT 0
59044: PPUSH
59045: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59046: LD_VAR 0 1
59050: NOT
59051: PUSH
59052: LD_VAR 0 1
59056: PUSH
59057: LD_INT 21
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 23
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PPUSH
59081: CALL_OW 69
59085: IN
59086: NOT
59087: OR
59088: IFFALSE 59092
// exit ;
59090: GO 59139
// for i = 1 to 3 do
59092: LD_ADDR_VAR 0 3
59096: PUSH
59097: DOUBLE
59098: LD_INT 1
59100: DEC
59101: ST_TO_ADDR
59102: LD_INT 3
59104: PUSH
59105: FOR_TO
59106: IFFALSE 59137
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59108: LD_VAR 0 1
59112: PPUSH
59113: CALL_OW 250
59117: PPUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: CALL_OW 251
59127: PPUSH
59128: LD_INT 1
59130: PPUSH
59131: CALL_OW 453
59135: GO 59105
59137: POP
59138: POP
// end ;
59139: LD_VAR 0 2
59143: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59144: LD_INT 0
59146: PPUSH
59147: PPUSH
59148: PPUSH
59149: PPUSH
59150: PPUSH
59151: PPUSH
// if not unit or not enemy_unit then
59152: LD_VAR 0 1
59156: NOT
59157: PUSH
59158: LD_VAR 0 2
59162: NOT
59163: OR
59164: IFFALSE 59168
// exit ;
59166: GO 59635
// if GetLives ( i ) < 250 then
59168: LD_VAR 0 4
59172: PPUSH
59173: CALL_OW 256
59177: PUSH
59178: LD_INT 250
59180: LESS
59181: IFFALSE 59194
// begin ComAutodestruct ( i ) ;
59183: LD_VAR 0 4
59187: PPUSH
59188: CALL 59042 0 1
// exit ;
59192: GO 59635
// end ; x := GetX ( enemy_unit ) ;
59194: LD_ADDR_VAR 0 7
59198: PUSH
59199: LD_VAR 0 2
59203: PPUSH
59204: CALL_OW 250
59208: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59209: LD_ADDR_VAR 0 8
59213: PUSH
59214: LD_VAR 0 2
59218: PPUSH
59219: CALL_OW 251
59223: ST_TO_ADDR
// if not x or not y then
59224: LD_VAR 0 7
59228: NOT
59229: PUSH
59230: LD_VAR 0 8
59234: NOT
59235: OR
59236: IFFALSE 59240
// exit ;
59238: GO 59635
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59240: LD_ADDR_VAR 0 6
59244: PUSH
59245: LD_VAR 0 7
59249: PPUSH
59250: LD_INT 0
59252: PPUSH
59253: LD_INT 4
59255: PPUSH
59256: CALL_OW 272
59260: PUSH
59261: LD_VAR 0 8
59265: PPUSH
59266: LD_INT 0
59268: PPUSH
59269: LD_INT 4
59271: PPUSH
59272: CALL_OW 273
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_VAR 0 7
59285: PPUSH
59286: LD_INT 1
59288: PPUSH
59289: LD_INT 4
59291: PPUSH
59292: CALL_OW 272
59296: PUSH
59297: LD_VAR 0 8
59301: PPUSH
59302: LD_INT 1
59304: PPUSH
59305: LD_INT 4
59307: PPUSH
59308: CALL_OW 273
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_VAR 0 7
59321: PPUSH
59322: LD_INT 2
59324: PPUSH
59325: LD_INT 4
59327: PPUSH
59328: CALL_OW 272
59332: PUSH
59333: LD_VAR 0 8
59337: PPUSH
59338: LD_INT 2
59340: PPUSH
59341: LD_INT 4
59343: PPUSH
59344: CALL_OW 273
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_VAR 0 7
59357: PPUSH
59358: LD_INT 3
59360: PPUSH
59361: LD_INT 4
59363: PPUSH
59364: CALL_OW 272
59368: PUSH
59369: LD_VAR 0 8
59373: PPUSH
59374: LD_INT 3
59376: PPUSH
59377: LD_INT 4
59379: PPUSH
59380: CALL_OW 273
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_VAR 0 7
59393: PPUSH
59394: LD_INT 4
59396: PPUSH
59397: LD_INT 4
59399: PPUSH
59400: CALL_OW 272
59404: PUSH
59405: LD_VAR 0 8
59409: PPUSH
59410: LD_INT 4
59412: PPUSH
59413: LD_INT 4
59415: PPUSH
59416: CALL_OW 273
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_VAR 0 7
59429: PPUSH
59430: LD_INT 5
59432: PPUSH
59433: LD_INT 4
59435: PPUSH
59436: CALL_OW 272
59440: PUSH
59441: LD_VAR 0 8
59445: PPUSH
59446: LD_INT 5
59448: PPUSH
59449: LD_INT 4
59451: PPUSH
59452: CALL_OW 273
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: ST_TO_ADDR
// for i = tmp downto 1 do
59469: LD_ADDR_VAR 0 4
59473: PUSH
59474: DOUBLE
59475: LD_VAR 0 6
59479: INC
59480: ST_TO_ADDR
59481: LD_INT 1
59483: PUSH
59484: FOR_DOWNTO
59485: IFFALSE 59586
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59487: LD_VAR 0 6
59491: PUSH
59492: LD_VAR 0 4
59496: ARRAY
59497: PUSH
59498: LD_INT 1
59500: ARRAY
59501: PPUSH
59502: LD_VAR 0 6
59506: PUSH
59507: LD_VAR 0 4
59511: ARRAY
59512: PUSH
59513: LD_INT 2
59515: ARRAY
59516: PPUSH
59517: CALL_OW 488
59521: NOT
59522: PUSH
59523: LD_VAR 0 6
59527: PUSH
59528: LD_VAR 0 4
59532: ARRAY
59533: PUSH
59534: LD_INT 1
59536: ARRAY
59537: PPUSH
59538: LD_VAR 0 6
59542: PUSH
59543: LD_VAR 0 4
59547: ARRAY
59548: PUSH
59549: LD_INT 2
59551: ARRAY
59552: PPUSH
59553: CALL_OW 428
59557: PUSH
59558: LD_INT 0
59560: NONEQUAL
59561: OR
59562: IFFALSE 59584
// tmp := Delete ( tmp , i ) ;
59564: LD_ADDR_VAR 0 6
59568: PUSH
59569: LD_VAR 0 6
59573: PPUSH
59574: LD_VAR 0 4
59578: PPUSH
59579: CALL_OW 3
59583: ST_TO_ADDR
59584: GO 59484
59586: POP
59587: POP
// j := GetClosestHex ( unit , tmp ) ;
59588: LD_ADDR_VAR 0 5
59592: PUSH
59593: LD_VAR 0 1
59597: PPUSH
59598: LD_VAR 0 6
59602: PPUSH
59603: CALL 58890 0 2
59607: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59608: LD_VAR 0 1
59612: PPUSH
59613: LD_VAR 0 5
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: PPUSH
59622: LD_VAR 0 5
59626: PUSH
59627: LD_INT 2
59629: ARRAY
59630: PPUSH
59631: CALL_OW 111
// end ;
59635: LD_VAR 0 3
59639: RET
// export function PrepareApemanSoldier ( ) ; begin
59640: LD_INT 0
59642: PPUSH
// uc_nation := 0 ;
59643: LD_ADDR_OWVAR 21
59647: PUSH
59648: LD_INT 0
59650: ST_TO_ADDR
// hc_sex := sex_male ;
59651: LD_ADDR_OWVAR 27
59655: PUSH
59656: LD_INT 1
59658: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59659: LD_ADDR_OWVAR 28
59663: PUSH
59664: LD_INT 15
59666: ST_TO_ADDR
// hc_gallery :=  ;
59667: LD_ADDR_OWVAR 33
59671: PUSH
59672: LD_STRING 
59674: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59675: LD_ADDR_OWVAR 31
59679: PUSH
59680: LD_INT 0
59682: PPUSH
59683: LD_INT 3
59685: PPUSH
59686: CALL_OW 12
59690: PUSH
59691: LD_INT 0
59693: PPUSH
59694: LD_INT 3
59696: PPUSH
59697: CALL_OW 12
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: ST_TO_ADDR
// end ;
59714: LD_VAR 0 1
59718: RET
// export function PrepareApemanEngineer ( ) ; begin
59719: LD_INT 0
59721: PPUSH
// uc_nation := 0 ;
59722: LD_ADDR_OWVAR 21
59726: PUSH
59727: LD_INT 0
59729: ST_TO_ADDR
// hc_sex := sex_male ;
59730: LD_ADDR_OWVAR 27
59734: PUSH
59735: LD_INT 1
59737: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59738: LD_ADDR_OWVAR 28
59742: PUSH
59743: LD_INT 16
59745: ST_TO_ADDR
// hc_gallery :=  ;
59746: LD_ADDR_OWVAR 33
59750: PUSH
59751: LD_STRING 
59753: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59754: LD_ADDR_OWVAR 31
59758: PUSH
59759: LD_INT 0
59761: PPUSH
59762: LD_INT 3
59764: PPUSH
59765: CALL_OW 12
59769: PUSH
59770: LD_INT 0
59772: PPUSH
59773: LD_INT 3
59775: PPUSH
59776: CALL_OW 12
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// end ;
59793: LD_VAR 0 1
59797: RET
// export function PrepareApeman ( agressivity ) ; begin
59798: LD_INT 0
59800: PPUSH
// uc_side := 0 ;
59801: LD_ADDR_OWVAR 20
59805: PUSH
59806: LD_INT 0
59808: ST_TO_ADDR
// uc_nation := 0 ;
59809: LD_ADDR_OWVAR 21
59813: PUSH
59814: LD_INT 0
59816: ST_TO_ADDR
// hc_sex := sex_male ;
59817: LD_ADDR_OWVAR 27
59821: PUSH
59822: LD_INT 1
59824: ST_TO_ADDR
// hc_class := class_apeman ;
59825: LD_ADDR_OWVAR 28
59829: PUSH
59830: LD_INT 12
59832: ST_TO_ADDR
// hc_gallery :=  ;
59833: LD_ADDR_OWVAR 33
59837: PUSH
59838: LD_STRING 
59840: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59841: LD_ADDR_OWVAR 35
59845: PUSH
59846: LD_VAR 0 1
59850: NEG
59851: PPUSH
59852: LD_VAR 0 1
59856: PPUSH
59857: CALL_OW 12
59861: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59862: LD_ADDR_OWVAR 31
59866: PUSH
59867: LD_INT 0
59869: PPUSH
59870: LD_INT 3
59872: PPUSH
59873: CALL_OW 12
59877: PUSH
59878: LD_INT 0
59880: PPUSH
59881: LD_INT 3
59883: PPUSH
59884: CALL_OW 12
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// end ;
59901: LD_VAR 0 2
59905: RET
// export function PrepareTiger ( agressivity ) ; begin
59906: LD_INT 0
59908: PPUSH
// uc_side := 0 ;
59909: LD_ADDR_OWVAR 20
59913: PUSH
59914: LD_INT 0
59916: ST_TO_ADDR
// uc_nation := 0 ;
59917: LD_ADDR_OWVAR 21
59921: PUSH
59922: LD_INT 0
59924: ST_TO_ADDR
// hc_class := class_tiger ;
59925: LD_ADDR_OWVAR 28
59929: PUSH
59930: LD_INT 14
59932: ST_TO_ADDR
// hc_gallery :=  ;
59933: LD_ADDR_OWVAR 33
59937: PUSH
59938: LD_STRING 
59940: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59941: LD_ADDR_OWVAR 35
59945: PUSH
59946: LD_VAR 0 1
59950: NEG
59951: PPUSH
59952: LD_VAR 0 1
59956: PPUSH
59957: CALL_OW 12
59961: ST_TO_ADDR
// end ;
59962: LD_VAR 0 2
59966: RET
// export function PrepareEnchidna ( ) ; begin
59967: LD_INT 0
59969: PPUSH
// uc_side := 0 ;
59970: LD_ADDR_OWVAR 20
59974: PUSH
59975: LD_INT 0
59977: ST_TO_ADDR
// uc_nation := 0 ;
59978: LD_ADDR_OWVAR 21
59982: PUSH
59983: LD_INT 0
59985: ST_TO_ADDR
// hc_class := class_baggie ;
59986: LD_ADDR_OWVAR 28
59990: PUSH
59991: LD_INT 13
59993: ST_TO_ADDR
// hc_gallery :=  ;
59994: LD_ADDR_OWVAR 33
59998: PUSH
59999: LD_STRING 
60001: ST_TO_ADDR
// end ;
60002: LD_VAR 0 1
60006: RET
// export function PrepareFrog ( ) ; begin
60007: LD_INT 0
60009: PPUSH
// uc_side := 0 ;
60010: LD_ADDR_OWVAR 20
60014: PUSH
60015: LD_INT 0
60017: ST_TO_ADDR
// uc_nation := 0 ;
60018: LD_ADDR_OWVAR 21
60022: PUSH
60023: LD_INT 0
60025: ST_TO_ADDR
// hc_class := class_frog ;
60026: LD_ADDR_OWVAR 28
60030: PUSH
60031: LD_INT 19
60033: ST_TO_ADDR
// hc_gallery :=  ;
60034: LD_ADDR_OWVAR 33
60038: PUSH
60039: LD_STRING 
60041: ST_TO_ADDR
// end ;
60042: LD_VAR 0 1
60046: RET
// export function PrepareFish ( ) ; begin
60047: LD_INT 0
60049: PPUSH
// uc_side := 0 ;
60050: LD_ADDR_OWVAR 20
60054: PUSH
60055: LD_INT 0
60057: ST_TO_ADDR
// uc_nation := 0 ;
60058: LD_ADDR_OWVAR 21
60062: PUSH
60063: LD_INT 0
60065: ST_TO_ADDR
// hc_class := class_fish ;
60066: LD_ADDR_OWVAR 28
60070: PUSH
60071: LD_INT 20
60073: ST_TO_ADDR
// hc_gallery :=  ;
60074: LD_ADDR_OWVAR 33
60078: PUSH
60079: LD_STRING 
60081: ST_TO_ADDR
// end ;
60082: LD_VAR 0 1
60086: RET
// export function PrepareBird ( ) ; begin
60087: LD_INT 0
60089: PPUSH
// uc_side := 0 ;
60090: LD_ADDR_OWVAR 20
60094: PUSH
60095: LD_INT 0
60097: ST_TO_ADDR
// uc_nation := 0 ;
60098: LD_ADDR_OWVAR 21
60102: PUSH
60103: LD_INT 0
60105: ST_TO_ADDR
// hc_class := class_phororhacos ;
60106: LD_ADDR_OWVAR 28
60110: PUSH
60111: LD_INT 18
60113: ST_TO_ADDR
// hc_gallery :=  ;
60114: LD_ADDR_OWVAR 33
60118: PUSH
60119: LD_STRING 
60121: ST_TO_ADDR
// end ;
60122: LD_VAR 0 1
60126: RET
// export function PrepareHorse ( ) ; begin
60127: LD_INT 0
60129: PPUSH
// uc_side := 0 ;
60130: LD_ADDR_OWVAR 20
60134: PUSH
60135: LD_INT 0
60137: ST_TO_ADDR
// uc_nation := 0 ;
60138: LD_ADDR_OWVAR 21
60142: PUSH
60143: LD_INT 0
60145: ST_TO_ADDR
// hc_class := class_horse ;
60146: LD_ADDR_OWVAR 28
60150: PUSH
60151: LD_INT 21
60153: ST_TO_ADDR
// hc_gallery :=  ;
60154: LD_ADDR_OWVAR 33
60158: PUSH
60159: LD_STRING 
60161: ST_TO_ADDR
// end ;
60162: LD_VAR 0 1
60166: RET
// export function PrepareMastodont ( ) ; begin
60167: LD_INT 0
60169: PPUSH
// uc_side := 0 ;
60170: LD_ADDR_OWVAR 20
60174: PUSH
60175: LD_INT 0
60177: ST_TO_ADDR
// uc_nation := 0 ;
60178: LD_ADDR_OWVAR 21
60182: PUSH
60183: LD_INT 0
60185: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60186: LD_ADDR_OWVAR 37
60190: PUSH
60191: LD_INT 31
60193: ST_TO_ADDR
// vc_control := control_rider ;
60194: LD_ADDR_OWVAR 38
60198: PUSH
60199: LD_INT 4
60201: ST_TO_ADDR
// end ;
60202: LD_VAR 0 1
60206: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60207: LD_INT 0
60209: PPUSH
60210: PPUSH
60211: PPUSH
// uc_side = 0 ;
60212: LD_ADDR_OWVAR 20
60216: PUSH
60217: LD_INT 0
60219: ST_TO_ADDR
// uc_nation = 0 ;
60220: LD_ADDR_OWVAR 21
60224: PUSH
60225: LD_INT 0
60227: ST_TO_ADDR
// InitHc_All ( ) ;
60228: CALL_OW 584
// InitVc ;
60232: CALL_OW 20
// if mastodonts then
60236: LD_VAR 0 6
60240: IFFALSE 60307
// for i = 1 to mastodonts do
60242: LD_ADDR_VAR 0 11
60246: PUSH
60247: DOUBLE
60248: LD_INT 1
60250: DEC
60251: ST_TO_ADDR
60252: LD_VAR 0 6
60256: PUSH
60257: FOR_TO
60258: IFFALSE 60305
// begin vc_chassis := 31 ;
60260: LD_ADDR_OWVAR 37
60264: PUSH
60265: LD_INT 31
60267: ST_TO_ADDR
// vc_control := control_rider ;
60268: LD_ADDR_OWVAR 38
60272: PUSH
60273: LD_INT 4
60275: ST_TO_ADDR
// animal := CreateVehicle ;
60276: LD_ADDR_VAR 0 12
60280: PUSH
60281: CALL_OW 45
60285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60286: LD_VAR 0 12
60290: PPUSH
60291: LD_VAR 0 8
60295: PPUSH
60296: LD_INT 0
60298: PPUSH
60299: CALL 62435 0 3
// end ;
60303: GO 60257
60305: POP
60306: POP
// if horses then
60307: LD_VAR 0 5
60311: IFFALSE 60378
// for i = 1 to horses do
60313: LD_ADDR_VAR 0 11
60317: PUSH
60318: DOUBLE
60319: LD_INT 1
60321: DEC
60322: ST_TO_ADDR
60323: LD_VAR 0 5
60327: PUSH
60328: FOR_TO
60329: IFFALSE 60376
// begin hc_class := 21 ;
60331: LD_ADDR_OWVAR 28
60335: PUSH
60336: LD_INT 21
60338: ST_TO_ADDR
// hc_gallery :=  ;
60339: LD_ADDR_OWVAR 33
60343: PUSH
60344: LD_STRING 
60346: ST_TO_ADDR
// animal := CreateHuman ;
60347: LD_ADDR_VAR 0 12
60351: PUSH
60352: CALL_OW 44
60356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60357: LD_VAR 0 12
60361: PPUSH
60362: LD_VAR 0 8
60366: PPUSH
60367: LD_INT 0
60369: PPUSH
60370: CALL 62435 0 3
// end ;
60374: GO 60328
60376: POP
60377: POP
// if birds then
60378: LD_VAR 0 1
60382: IFFALSE 60449
// for i = 1 to birds do
60384: LD_ADDR_VAR 0 11
60388: PUSH
60389: DOUBLE
60390: LD_INT 1
60392: DEC
60393: ST_TO_ADDR
60394: LD_VAR 0 1
60398: PUSH
60399: FOR_TO
60400: IFFALSE 60447
// begin hc_class := 18 ;
60402: LD_ADDR_OWVAR 28
60406: PUSH
60407: LD_INT 18
60409: ST_TO_ADDR
// hc_gallery =  ;
60410: LD_ADDR_OWVAR 33
60414: PUSH
60415: LD_STRING 
60417: ST_TO_ADDR
// animal := CreateHuman ;
60418: LD_ADDR_VAR 0 12
60422: PUSH
60423: CALL_OW 44
60427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60428: LD_VAR 0 12
60432: PPUSH
60433: LD_VAR 0 8
60437: PPUSH
60438: LD_INT 0
60440: PPUSH
60441: CALL 62435 0 3
// end ;
60445: GO 60399
60447: POP
60448: POP
// if tigers then
60449: LD_VAR 0 2
60453: IFFALSE 60537
// for i = 1 to tigers do
60455: LD_ADDR_VAR 0 11
60459: PUSH
60460: DOUBLE
60461: LD_INT 1
60463: DEC
60464: ST_TO_ADDR
60465: LD_VAR 0 2
60469: PUSH
60470: FOR_TO
60471: IFFALSE 60535
// begin hc_class = class_tiger ;
60473: LD_ADDR_OWVAR 28
60477: PUSH
60478: LD_INT 14
60480: ST_TO_ADDR
// hc_gallery =  ;
60481: LD_ADDR_OWVAR 33
60485: PUSH
60486: LD_STRING 
60488: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60489: LD_ADDR_OWVAR 35
60493: PUSH
60494: LD_INT 7
60496: NEG
60497: PPUSH
60498: LD_INT 7
60500: PPUSH
60501: CALL_OW 12
60505: ST_TO_ADDR
// animal := CreateHuman ;
60506: LD_ADDR_VAR 0 12
60510: PUSH
60511: CALL_OW 44
60515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60516: LD_VAR 0 12
60520: PPUSH
60521: LD_VAR 0 8
60525: PPUSH
60526: LD_INT 0
60528: PPUSH
60529: CALL 62435 0 3
// end ;
60533: GO 60470
60535: POP
60536: POP
// if apemans then
60537: LD_VAR 0 3
60541: IFFALSE 60664
// for i = 1 to apemans do
60543: LD_ADDR_VAR 0 11
60547: PUSH
60548: DOUBLE
60549: LD_INT 1
60551: DEC
60552: ST_TO_ADDR
60553: LD_VAR 0 3
60557: PUSH
60558: FOR_TO
60559: IFFALSE 60662
// begin hc_class = class_apeman ;
60561: LD_ADDR_OWVAR 28
60565: PUSH
60566: LD_INT 12
60568: ST_TO_ADDR
// hc_gallery =  ;
60569: LD_ADDR_OWVAR 33
60573: PUSH
60574: LD_STRING 
60576: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60577: LD_ADDR_OWVAR 35
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PPUSH
60586: LD_INT 2
60588: PPUSH
60589: CALL_OW 12
60593: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60594: LD_ADDR_OWVAR 31
60598: PUSH
60599: LD_INT 1
60601: PPUSH
60602: LD_INT 3
60604: PPUSH
60605: CALL_OW 12
60609: PUSH
60610: LD_INT 1
60612: PPUSH
60613: LD_INT 3
60615: PPUSH
60616: CALL_OW 12
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: ST_TO_ADDR
// animal := CreateHuman ;
60633: LD_ADDR_VAR 0 12
60637: PUSH
60638: CALL_OW 44
60642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60643: LD_VAR 0 12
60647: PPUSH
60648: LD_VAR 0 8
60652: PPUSH
60653: LD_INT 0
60655: PPUSH
60656: CALL 62435 0 3
// end ;
60660: GO 60558
60662: POP
60663: POP
// if enchidnas then
60664: LD_VAR 0 4
60668: IFFALSE 60735
// for i = 1 to enchidnas do
60670: LD_ADDR_VAR 0 11
60674: PUSH
60675: DOUBLE
60676: LD_INT 1
60678: DEC
60679: ST_TO_ADDR
60680: LD_VAR 0 4
60684: PUSH
60685: FOR_TO
60686: IFFALSE 60733
// begin hc_class = 13 ;
60688: LD_ADDR_OWVAR 28
60692: PUSH
60693: LD_INT 13
60695: ST_TO_ADDR
// hc_gallery =  ;
60696: LD_ADDR_OWVAR 33
60700: PUSH
60701: LD_STRING 
60703: ST_TO_ADDR
// animal := CreateHuman ;
60704: LD_ADDR_VAR 0 12
60708: PUSH
60709: CALL_OW 44
60713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60714: LD_VAR 0 12
60718: PPUSH
60719: LD_VAR 0 8
60723: PPUSH
60724: LD_INT 0
60726: PPUSH
60727: CALL 62435 0 3
// end ;
60731: GO 60685
60733: POP
60734: POP
// if fishes then
60735: LD_VAR 0 7
60739: IFFALSE 60806
// for i = 1 to fishes do
60741: LD_ADDR_VAR 0 11
60745: PUSH
60746: DOUBLE
60747: LD_INT 1
60749: DEC
60750: ST_TO_ADDR
60751: LD_VAR 0 7
60755: PUSH
60756: FOR_TO
60757: IFFALSE 60804
// begin hc_class = 20 ;
60759: LD_ADDR_OWVAR 28
60763: PUSH
60764: LD_INT 20
60766: ST_TO_ADDR
// hc_gallery =  ;
60767: LD_ADDR_OWVAR 33
60771: PUSH
60772: LD_STRING 
60774: ST_TO_ADDR
// animal := CreateHuman ;
60775: LD_ADDR_VAR 0 12
60779: PUSH
60780: CALL_OW 44
60784: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60785: LD_VAR 0 12
60789: PPUSH
60790: LD_VAR 0 9
60794: PPUSH
60795: LD_INT 0
60797: PPUSH
60798: CALL 62435 0 3
// end ;
60802: GO 60756
60804: POP
60805: POP
// end ;
60806: LD_VAR 0 10
60810: RET
// export function WantHeal ( sci , unit ) ; begin
60811: LD_INT 0
60813: PPUSH
// if GetTaskList ( sci ) > 0 then
60814: LD_VAR 0 1
60818: PPUSH
60819: CALL_OW 437
60823: PUSH
60824: LD_INT 0
60826: GREATER
60827: IFFALSE 60897
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60829: LD_VAR 0 1
60833: PPUSH
60834: CALL_OW 437
60838: PUSH
60839: LD_INT 1
60841: ARRAY
60842: PUSH
60843: LD_INT 1
60845: ARRAY
60846: PUSH
60847: LD_STRING l
60849: EQUAL
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: CALL_OW 437
60860: PUSH
60861: LD_INT 1
60863: ARRAY
60864: PUSH
60865: LD_INT 4
60867: ARRAY
60868: PUSH
60869: LD_VAR 0 2
60873: EQUAL
60874: AND
60875: IFFALSE 60887
// result := true else
60877: LD_ADDR_VAR 0 3
60881: PUSH
60882: LD_INT 1
60884: ST_TO_ADDR
60885: GO 60895
// result := false ;
60887: LD_ADDR_VAR 0 3
60891: PUSH
60892: LD_INT 0
60894: ST_TO_ADDR
// end else
60895: GO 60905
// result := false ;
60897: LD_ADDR_VAR 0 3
60901: PUSH
60902: LD_INT 0
60904: ST_TO_ADDR
// end ;
60905: LD_VAR 0 3
60909: RET
// export function HealTarget ( sci ) ; begin
60910: LD_INT 0
60912: PPUSH
// if not sci then
60913: LD_VAR 0 1
60917: NOT
60918: IFFALSE 60922
// exit ;
60920: GO 60987
// result := 0 ;
60922: LD_ADDR_VAR 0 2
60926: PUSH
60927: LD_INT 0
60929: ST_TO_ADDR
// if GetTaskList ( sci ) then
60930: LD_VAR 0 1
60934: PPUSH
60935: CALL_OW 437
60939: IFFALSE 60987
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60941: LD_VAR 0 1
60945: PPUSH
60946: CALL_OW 437
60950: PUSH
60951: LD_INT 1
60953: ARRAY
60954: PUSH
60955: LD_INT 1
60957: ARRAY
60958: PUSH
60959: LD_STRING l
60961: EQUAL
60962: IFFALSE 60987
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60964: LD_ADDR_VAR 0 2
60968: PUSH
60969: LD_VAR 0 1
60973: PPUSH
60974: CALL_OW 437
60978: PUSH
60979: LD_INT 1
60981: ARRAY
60982: PUSH
60983: LD_INT 4
60985: ARRAY
60986: ST_TO_ADDR
// end ;
60987: LD_VAR 0 2
60991: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60992: LD_INT 0
60994: PPUSH
60995: PPUSH
60996: PPUSH
60997: PPUSH
// if not base_units then
60998: LD_VAR 0 1
61002: NOT
61003: IFFALSE 61007
// exit ;
61005: GO 61094
// result := false ;
61007: LD_ADDR_VAR 0 2
61011: PUSH
61012: LD_INT 0
61014: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61015: LD_ADDR_VAR 0 5
61019: PUSH
61020: LD_VAR 0 1
61024: PPUSH
61025: LD_INT 21
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PPUSH
61035: CALL_OW 72
61039: ST_TO_ADDR
// if not tmp then
61040: LD_VAR 0 5
61044: NOT
61045: IFFALSE 61049
// exit ;
61047: GO 61094
// for i in tmp do
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_VAR 0 5
61058: PUSH
61059: FOR_IN
61060: IFFALSE 61092
// begin result := EnemyInRange ( i , 22 ) ;
61062: LD_ADDR_VAR 0 2
61066: PUSH
61067: LD_VAR 0 3
61071: PPUSH
61072: LD_INT 22
61074: PPUSH
61075: CALL 58692 0 2
61079: ST_TO_ADDR
// if result then
61080: LD_VAR 0 2
61084: IFFALSE 61090
// exit ;
61086: POP
61087: POP
61088: GO 61094
// end ;
61090: GO 61059
61092: POP
61093: POP
// end ;
61094: LD_VAR 0 2
61098: RET
// export function FilterByTag ( units , tag ) ; begin
61099: LD_INT 0
61101: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61102: LD_ADDR_VAR 0 3
61106: PUSH
61107: LD_VAR 0 1
61111: PPUSH
61112: LD_INT 120
61114: PUSH
61115: LD_VAR 0 2
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PPUSH
61124: CALL_OW 72
61128: ST_TO_ADDR
// end ;
61129: LD_VAR 0 3
61133: RET
// export function IsDriver ( un ) ; begin
61134: LD_INT 0
61136: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61137: LD_ADDR_VAR 0 2
61141: PUSH
61142: LD_VAR 0 1
61146: PUSH
61147: LD_INT 55
61149: PUSH
61150: EMPTY
61151: LIST
61152: PPUSH
61153: CALL_OW 69
61157: IN
61158: ST_TO_ADDR
// end ;
61159: LD_VAR 0 2
61163: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61164: LD_INT 0
61166: PPUSH
61167: PPUSH
// list := [ ] ;
61168: LD_ADDR_VAR 0 5
61172: PUSH
61173: EMPTY
61174: ST_TO_ADDR
// case d of 0 :
61175: LD_VAR 0 3
61179: PUSH
61180: LD_INT 0
61182: DOUBLE
61183: EQUAL
61184: IFTRUE 61188
61186: GO 61321
61188: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61189: LD_ADDR_VAR 0 5
61193: PUSH
61194: LD_VAR 0 1
61198: PUSH
61199: LD_INT 4
61201: MINUS
61202: PUSH
61203: LD_VAR 0 2
61207: PUSH
61208: LD_INT 4
61210: MINUS
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: PUSH
61220: LD_VAR 0 1
61224: PUSH
61225: LD_INT 3
61227: MINUS
61228: PUSH
61229: LD_VAR 0 2
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: PUSH
61242: LD_VAR 0 1
61246: PUSH
61247: LD_INT 4
61249: PLUS
61250: PUSH
61251: LD_VAR 0 2
61255: PUSH
61256: LD_INT 4
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: PUSH
61264: LD_VAR 0 1
61268: PUSH
61269: LD_INT 3
61271: PLUS
61272: PUSH
61273: LD_VAR 0 2
61277: PUSH
61278: LD_INT 3
61280: PLUS
61281: PUSH
61282: LD_INT 5
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: PUSH
61290: LD_VAR 0 1
61294: PUSH
61295: LD_VAR 0 2
61299: PUSH
61300: LD_INT 4
61302: PLUS
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: LIST
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// end ; 1 :
61319: GO 62019
61321: LD_INT 1
61323: DOUBLE
61324: EQUAL
61325: IFTRUE 61329
61327: GO 61462
61329: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61330: LD_ADDR_VAR 0 5
61334: PUSH
61335: LD_VAR 0 1
61339: PUSH
61340: LD_VAR 0 2
61344: PUSH
61345: LD_INT 4
61347: MINUS
61348: PUSH
61349: LD_INT 3
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: LIST
61356: PUSH
61357: LD_VAR 0 1
61361: PUSH
61362: LD_INT 3
61364: MINUS
61365: PUSH
61366: LD_VAR 0 2
61370: PUSH
61371: LD_INT 3
61373: MINUS
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: LIST
61382: PUSH
61383: LD_VAR 0 1
61387: PUSH
61388: LD_INT 4
61390: MINUS
61391: PUSH
61392: LD_VAR 0 2
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: LIST
61404: PUSH
61405: LD_VAR 0 1
61409: PUSH
61410: LD_VAR 0 2
61414: PUSH
61415: LD_INT 3
61417: PLUS
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: LIST
61426: PUSH
61427: LD_VAR 0 1
61431: PUSH
61432: LD_INT 4
61434: PLUS
61435: PUSH
61436: LD_VAR 0 2
61440: PUSH
61441: LD_INT 4
61443: PLUS
61444: PUSH
61445: LD_INT 5
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: ST_TO_ADDR
// end ; 2 :
61460: GO 62019
61462: LD_INT 2
61464: DOUBLE
61465: EQUAL
61466: IFTRUE 61470
61468: GO 61599
61470: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61471: LD_ADDR_VAR 0 5
61475: PUSH
61476: LD_VAR 0 1
61480: PUSH
61481: LD_VAR 0 2
61485: PUSH
61486: LD_INT 3
61488: MINUS
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: LIST
61497: PUSH
61498: LD_VAR 0 1
61502: PUSH
61503: LD_INT 4
61505: PLUS
61506: PUSH
61507: LD_VAR 0 2
61511: PUSH
61512: LD_INT 4
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: LIST
61519: PUSH
61520: LD_VAR 0 1
61524: PUSH
61525: LD_VAR 0 2
61529: PUSH
61530: LD_INT 4
61532: PLUS
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: PUSH
61542: LD_VAR 0 1
61546: PUSH
61547: LD_INT 3
61549: MINUS
61550: PUSH
61551: LD_VAR 0 2
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: PUSH
61564: LD_VAR 0 1
61568: PUSH
61569: LD_INT 4
61571: MINUS
61572: PUSH
61573: LD_VAR 0 2
61577: PUSH
61578: LD_INT 4
61580: MINUS
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: ST_TO_ADDR
// end ; 3 :
61597: GO 62019
61599: LD_INT 3
61601: DOUBLE
61602: EQUAL
61603: IFTRUE 61607
61605: GO 61740
61607: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61608: LD_ADDR_VAR 0 5
61612: PUSH
61613: LD_VAR 0 1
61617: PUSH
61618: LD_INT 3
61620: PLUS
61621: PUSH
61622: LD_VAR 0 2
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: PUSH
61635: LD_VAR 0 1
61639: PUSH
61640: LD_INT 4
61642: PLUS
61643: PUSH
61644: LD_VAR 0 2
61648: PUSH
61649: LD_INT 4
61651: PLUS
61652: PUSH
61653: LD_INT 5
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: PUSH
61661: LD_VAR 0 1
61665: PUSH
61666: LD_INT 4
61668: MINUS
61669: PUSH
61670: LD_VAR 0 2
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: PUSH
61683: LD_VAR 0 1
61687: PUSH
61688: LD_VAR 0 2
61692: PUSH
61693: LD_INT 4
61695: MINUS
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: PUSH
61705: LD_VAR 0 1
61709: PUSH
61710: LD_INT 3
61712: MINUS
61713: PUSH
61714: LD_VAR 0 2
61718: PUSH
61719: LD_INT 3
61721: MINUS
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: LIST
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: ST_TO_ADDR
// end ; 4 :
61738: GO 62019
61740: LD_INT 4
61742: DOUBLE
61743: EQUAL
61744: IFTRUE 61748
61746: GO 61881
61748: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61749: LD_ADDR_VAR 0 5
61753: PUSH
61754: LD_VAR 0 1
61758: PUSH
61759: LD_VAR 0 2
61763: PUSH
61764: LD_INT 4
61766: PLUS
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: PUSH
61776: LD_VAR 0 1
61780: PUSH
61781: LD_INT 3
61783: PLUS
61784: PUSH
61785: LD_VAR 0 2
61789: PUSH
61790: LD_INT 3
61792: PLUS
61793: PUSH
61794: LD_INT 5
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: LIST
61801: PUSH
61802: LD_VAR 0 1
61806: PUSH
61807: LD_INT 4
61809: PLUS
61810: PUSH
61811: LD_VAR 0 2
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: PUSH
61824: LD_VAR 0 1
61828: PUSH
61829: LD_VAR 0 2
61833: PUSH
61834: LD_INT 3
61836: MINUS
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: LD_VAR 0 1
61850: PUSH
61851: LD_INT 4
61853: MINUS
61854: PUSH
61855: LD_VAR 0 2
61859: PUSH
61860: LD_INT 4
61862: MINUS
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: LIST
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: ST_TO_ADDR
// end ; 5 :
61879: GO 62019
61881: LD_INT 5
61883: DOUBLE
61884: EQUAL
61885: IFTRUE 61889
61887: GO 62018
61889: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61890: LD_ADDR_VAR 0 5
61894: PUSH
61895: LD_VAR 0 1
61899: PUSH
61900: LD_INT 4
61902: MINUS
61903: PUSH
61904: LD_VAR 0 2
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: LIST
61916: PUSH
61917: LD_VAR 0 1
61921: PUSH
61922: LD_VAR 0 2
61926: PUSH
61927: LD_INT 4
61929: MINUS
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: PUSH
61939: LD_VAR 0 1
61943: PUSH
61944: LD_INT 4
61946: PLUS
61947: PUSH
61948: LD_VAR 0 2
61952: PUSH
61953: LD_INT 4
61955: PLUS
61956: PUSH
61957: LD_INT 5
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: PUSH
61965: LD_VAR 0 1
61969: PUSH
61970: LD_INT 3
61972: PLUS
61973: PUSH
61974: LD_VAR 0 2
61978: PUSH
61979: LD_INT 4
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: PUSH
61987: LD_VAR 0 1
61991: PUSH
61992: LD_VAR 0 2
61996: PUSH
61997: LD_INT 3
61999: PLUS
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: ST_TO_ADDR
// end ; end ;
62016: GO 62019
62018: POP
// result := list ;
62019: LD_ADDR_VAR 0 4
62023: PUSH
62024: LD_VAR 0 5
62028: ST_TO_ADDR
// end ;
62029: LD_VAR 0 4
62033: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62034: LD_INT 0
62036: PPUSH
62037: PPUSH
62038: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62039: LD_VAR 0 1
62043: NOT
62044: PUSH
62045: LD_VAR 0 2
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: LD_INT 4
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: IN
62068: NOT
62069: OR
62070: IFFALSE 62074
// exit ;
62072: GO 62157
// tmp := [ ] ;
62074: LD_ADDR_VAR 0 5
62078: PUSH
62079: EMPTY
62080: ST_TO_ADDR
// for i in units do
62081: LD_ADDR_VAR 0 4
62085: PUSH
62086: LD_VAR 0 1
62090: PUSH
62091: FOR_IN
62092: IFFALSE 62126
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62094: LD_ADDR_VAR 0 5
62098: PUSH
62099: LD_VAR 0 5
62103: PPUSH
62104: LD_VAR 0 4
62108: PPUSH
62109: LD_VAR 0 2
62113: PPUSH
62114: CALL_OW 259
62118: PPUSH
62119: CALL 63530 0 2
62123: ST_TO_ADDR
62124: GO 62091
62126: POP
62127: POP
// if not tmp then
62128: LD_VAR 0 5
62132: NOT
62133: IFFALSE 62137
// exit ;
62135: GO 62157
// result := SortListByListDesc ( units , tmp ) ;
62137: LD_ADDR_VAR 0 3
62141: PUSH
62142: LD_VAR 0 1
62146: PPUSH
62147: LD_VAR 0 5
62151: PPUSH
62152: CALL_OW 77
62156: ST_TO_ADDR
// end ;
62157: LD_VAR 0 3
62161: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62162: LD_INT 0
62164: PPUSH
62165: PPUSH
62166: PPUSH
// result := false ;
62167: LD_ADDR_VAR 0 3
62171: PUSH
62172: LD_INT 0
62174: ST_TO_ADDR
// if not building then
62175: LD_VAR 0 2
62179: NOT
62180: IFFALSE 62184
// exit ;
62182: GO 62322
// x := GetX ( building ) ;
62184: LD_ADDR_VAR 0 4
62188: PUSH
62189: LD_VAR 0 2
62193: PPUSH
62194: CALL_OW 250
62198: ST_TO_ADDR
// y := GetY ( building ) ;
62199: LD_ADDR_VAR 0 5
62203: PUSH
62204: LD_VAR 0 2
62208: PPUSH
62209: CALL_OW 251
62213: ST_TO_ADDR
// if not x or not y then
62214: LD_VAR 0 4
62218: NOT
62219: PUSH
62220: LD_VAR 0 5
62224: NOT
62225: OR
62226: IFFALSE 62230
// exit ;
62228: GO 62322
// if GetTaskList ( unit ) then
62230: LD_VAR 0 1
62234: PPUSH
62235: CALL_OW 437
62239: IFFALSE 62322
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62241: LD_STRING e
62243: PUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: CALL_OW 437
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: PUSH
62258: LD_INT 1
62260: ARRAY
62261: EQUAL
62262: PUSH
62263: LD_VAR 0 4
62267: PUSH
62268: LD_VAR 0 1
62272: PPUSH
62273: CALL_OW 437
62277: PUSH
62278: LD_INT 1
62280: ARRAY
62281: PUSH
62282: LD_INT 2
62284: ARRAY
62285: EQUAL
62286: AND
62287: PUSH
62288: LD_VAR 0 5
62292: PUSH
62293: LD_VAR 0 1
62297: PPUSH
62298: CALL_OW 437
62302: PUSH
62303: LD_INT 1
62305: ARRAY
62306: PUSH
62307: LD_INT 3
62309: ARRAY
62310: EQUAL
62311: AND
62312: IFFALSE 62322
// result := true end ;
62314: LD_ADDR_VAR 0 3
62318: PUSH
62319: LD_INT 1
62321: ST_TO_ADDR
// end ;
62322: LD_VAR 0 3
62326: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62327: LD_INT 0
62329: PPUSH
// result := false ;
62330: LD_ADDR_VAR 0 4
62334: PUSH
62335: LD_INT 0
62337: ST_TO_ADDR
// if GetTaskList ( unit ) then
62338: LD_VAR 0 1
62342: PPUSH
62343: CALL_OW 437
62347: IFFALSE 62430
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62349: LD_STRING M
62351: PUSH
62352: LD_VAR 0 1
62356: PPUSH
62357: CALL_OW 437
62361: PUSH
62362: LD_INT 1
62364: ARRAY
62365: PUSH
62366: LD_INT 1
62368: ARRAY
62369: EQUAL
62370: PUSH
62371: LD_VAR 0 2
62375: PUSH
62376: LD_VAR 0 1
62380: PPUSH
62381: CALL_OW 437
62385: PUSH
62386: LD_INT 1
62388: ARRAY
62389: PUSH
62390: LD_INT 2
62392: ARRAY
62393: EQUAL
62394: AND
62395: PUSH
62396: LD_VAR 0 3
62400: PUSH
62401: LD_VAR 0 1
62405: PPUSH
62406: CALL_OW 437
62410: PUSH
62411: LD_INT 1
62413: ARRAY
62414: PUSH
62415: LD_INT 3
62417: ARRAY
62418: EQUAL
62419: AND
62420: IFFALSE 62430
// result := true ;
62422: LD_ADDR_VAR 0 4
62426: PUSH
62427: LD_INT 1
62429: ST_TO_ADDR
// end ; end ;
62430: LD_VAR 0 4
62434: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62435: LD_INT 0
62437: PPUSH
62438: PPUSH
62439: PPUSH
62440: PPUSH
// if not unit or not area then
62441: LD_VAR 0 1
62445: NOT
62446: PUSH
62447: LD_VAR 0 2
62451: NOT
62452: OR
62453: IFFALSE 62457
// exit ;
62455: GO 62633
// tmp := AreaToList ( area , i ) ;
62457: LD_ADDR_VAR 0 6
62461: PUSH
62462: LD_VAR 0 2
62466: PPUSH
62467: LD_VAR 0 5
62471: PPUSH
62472: CALL_OW 517
62476: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62477: LD_ADDR_VAR 0 5
62481: PUSH
62482: DOUBLE
62483: LD_INT 1
62485: DEC
62486: ST_TO_ADDR
62487: LD_VAR 0 6
62491: PUSH
62492: LD_INT 1
62494: ARRAY
62495: PUSH
62496: FOR_TO
62497: IFFALSE 62631
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62499: LD_ADDR_VAR 0 7
62503: PUSH
62504: LD_VAR 0 6
62508: PUSH
62509: LD_INT 1
62511: ARRAY
62512: PUSH
62513: LD_VAR 0 5
62517: ARRAY
62518: PUSH
62519: LD_VAR 0 6
62523: PUSH
62524: LD_INT 2
62526: ARRAY
62527: PUSH
62528: LD_VAR 0 5
62532: ARRAY
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62538: LD_INT 92
62540: PUSH
62541: LD_VAR 0 7
62545: PUSH
62546: LD_INT 1
62548: ARRAY
62549: PUSH
62550: LD_VAR 0 7
62554: PUSH
62555: LD_INT 2
62557: ARRAY
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: PPUSH
62568: CALL_OW 69
62572: PUSH
62573: LD_INT 0
62575: EQUAL
62576: IFFALSE 62629
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62578: LD_VAR 0 1
62582: PPUSH
62583: LD_VAR 0 7
62587: PUSH
62588: LD_INT 1
62590: ARRAY
62591: PPUSH
62592: LD_VAR 0 7
62596: PUSH
62597: LD_INT 2
62599: ARRAY
62600: PPUSH
62601: LD_VAR 0 3
62605: PPUSH
62606: CALL_OW 48
// result := IsPlaced ( unit ) ;
62610: LD_ADDR_VAR 0 4
62614: PUSH
62615: LD_VAR 0 1
62619: PPUSH
62620: CALL_OW 305
62624: ST_TO_ADDR
// exit ;
62625: POP
62626: POP
62627: GO 62633
// end ; end ;
62629: GO 62496
62631: POP
62632: POP
// end ;
62633: LD_VAR 0 4
62637: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62638: LD_INT 0
62640: PPUSH
62641: PPUSH
62642: PPUSH
// if not side or side > 8 then
62643: LD_VAR 0 1
62647: NOT
62648: PUSH
62649: LD_VAR 0 1
62653: PUSH
62654: LD_INT 8
62656: GREATER
62657: OR
62658: IFFALSE 62662
// exit ;
62660: GO 62849
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62662: LD_ADDR_VAR 0 4
62666: PUSH
62667: LD_INT 22
62669: PUSH
62670: LD_VAR 0 1
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 21
62681: PUSH
62682: LD_INT 3
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PPUSH
62693: CALL_OW 69
62697: ST_TO_ADDR
// if not tmp then
62698: LD_VAR 0 4
62702: NOT
62703: IFFALSE 62707
// exit ;
62705: GO 62849
// enable_addtolog := true ;
62707: LD_ADDR_OWVAR 81
62711: PUSH
62712: LD_INT 1
62714: ST_TO_ADDR
// AddToLog ( [ ) ;
62715: LD_STRING [
62717: PPUSH
62718: CALL_OW 561
// for i in tmp do
62722: LD_ADDR_VAR 0 3
62726: PUSH
62727: LD_VAR 0 4
62731: PUSH
62732: FOR_IN
62733: IFFALSE 62840
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62735: LD_STRING [
62737: PUSH
62738: LD_VAR 0 3
62742: PPUSH
62743: CALL_OW 266
62747: STR
62748: PUSH
62749: LD_STRING , 
62751: STR
62752: PUSH
62753: LD_VAR 0 3
62757: PPUSH
62758: CALL_OW 250
62762: STR
62763: PUSH
62764: LD_STRING , 
62766: STR
62767: PUSH
62768: LD_VAR 0 3
62772: PPUSH
62773: CALL_OW 251
62777: STR
62778: PUSH
62779: LD_STRING , 
62781: STR
62782: PUSH
62783: LD_VAR 0 3
62787: PPUSH
62788: CALL_OW 254
62792: STR
62793: PUSH
62794: LD_STRING , 
62796: STR
62797: PUSH
62798: LD_VAR 0 3
62802: PPUSH
62803: LD_INT 1
62805: PPUSH
62806: CALL_OW 268
62810: STR
62811: PUSH
62812: LD_STRING , 
62814: STR
62815: PUSH
62816: LD_VAR 0 3
62820: PPUSH
62821: LD_INT 2
62823: PPUSH
62824: CALL_OW 268
62828: STR
62829: PUSH
62830: LD_STRING ],
62832: STR
62833: PPUSH
62834: CALL_OW 561
// end ;
62838: GO 62732
62840: POP
62841: POP
// AddToLog ( ]; ) ;
62842: LD_STRING ];
62844: PPUSH
62845: CALL_OW 561
// end ;
62849: LD_VAR 0 2
62853: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62854: LD_INT 0
62856: PPUSH
62857: PPUSH
62858: PPUSH
62859: PPUSH
62860: PPUSH
// if not area or not rate or not max then
62861: LD_VAR 0 1
62865: NOT
62866: PUSH
62867: LD_VAR 0 2
62871: NOT
62872: OR
62873: PUSH
62874: LD_VAR 0 4
62878: NOT
62879: OR
62880: IFFALSE 62884
// exit ;
62882: GO 63073
// while 1 do
62884: LD_INT 1
62886: IFFALSE 63073
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62888: LD_ADDR_VAR 0 9
62892: PUSH
62893: LD_VAR 0 1
62897: PPUSH
62898: LD_INT 1
62900: PPUSH
62901: CALL_OW 287
62905: PUSH
62906: LD_INT 10
62908: MUL
62909: ST_TO_ADDR
// r := rate / 10 ;
62910: LD_ADDR_VAR 0 7
62914: PUSH
62915: LD_VAR 0 2
62919: PUSH
62920: LD_INT 10
62922: DIVREAL
62923: ST_TO_ADDR
// time := 1 1$00 ;
62924: LD_ADDR_VAR 0 8
62928: PUSH
62929: LD_INT 2100
62931: ST_TO_ADDR
// if amount < min then
62932: LD_VAR 0 9
62936: PUSH
62937: LD_VAR 0 3
62941: LESS
62942: IFFALSE 62960
// r := r * 2 else
62944: LD_ADDR_VAR 0 7
62948: PUSH
62949: LD_VAR 0 7
62953: PUSH
62954: LD_INT 2
62956: MUL
62957: ST_TO_ADDR
62958: GO 62986
// if amount > max then
62960: LD_VAR 0 9
62964: PUSH
62965: LD_VAR 0 4
62969: GREATER
62970: IFFALSE 62986
// r := r / 2 ;
62972: LD_ADDR_VAR 0 7
62976: PUSH
62977: LD_VAR 0 7
62981: PUSH
62982: LD_INT 2
62984: DIVREAL
62985: ST_TO_ADDR
// time := time / r ;
62986: LD_ADDR_VAR 0 8
62990: PUSH
62991: LD_VAR 0 8
62995: PUSH
62996: LD_VAR 0 7
63000: DIVREAL
63001: ST_TO_ADDR
// if time < 0 then
63002: LD_VAR 0 8
63006: PUSH
63007: LD_INT 0
63009: LESS
63010: IFFALSE 63027
// time := time * - 1 ;
63012: LD_ADDR_VAR 0 8
63016: PUSH
63017: LD_VAR 0 8
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: MUL
63026: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63027: LD_VAR 0 8
63031: PUSH
63032: LD_INT 35
63034: PPUSH
63035: LD_INT 875
63037: PPUSH
63038: CALL_OW 12
63042: PLUS
63043: PPUSH
63044: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63048: LD_INT 1
63050: PPUSH
63051: LD_INT 5
63053: PPUSH
63054: CALL_OW 12
63058: PPUSH
63059: LD_VAR 0 1
63063: PPUSH
63064: LD_INT 1
63066: PPUSH
63067: CALL_OW 55
// end ;
63071: GO 62884
// end ;
63073: LD_VAR 0 5
63077: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63078: LD_INT 0
63080: PPUSH
63081: PPUSH
63082: PPUSH
63083: PPUSH
63084: PPUSH
63085: PPUSH
63086: PPUSH
63087: PPUSH
// if not turrets or not factories then
63088: LD_VAR 0 1
63092: NOT
63093: PUSH
63094: LD_VAR 0 2
63098: NOT
63099: OR
63100: IFFALSE 63104
// exit ;
63102: GO 63411
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63104: LD_ADDR_VAR 0 10
63108: PUSH
63109: LD_INT 5
63111: PUSH
63112: LD_INT 6
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: LD_INT 5
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 24
63146: PUSH
63147: LD_INT 25
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 23
63156: PUSH
63157: LD_INT 27
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 42
63170: PUSH
63171: LD_INT 43
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 44
63180: PUSH
63181: LD_INT 46
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 45
63190: PUSH
63191: LD_INT 47
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: LIST
63207: ST_TO_ADDR
// result := [ ] ;
63208: LD_ADDR_VAR 0 3
63212: PUSH
63213: EMPTY
63214: ST_TO_ADDR
// for i in turrets do
63215: LD_ADDR_VAR 0 4
63219: PUSH
63220: LD_VAR 0 1
63224: PUSH
63225: FOR_IN
63226: IFFALSE 63409
// begin nat := GetNation ( i ) ;
63228: LD_ADDR_VAR 0 7
63232: PUSH
63233: LD_VAR 0 4
63237: PPUSH
63238: CALL_OW 248
63242: ST_TO_ADDR
// weapon := 0 ;
63243: LD_ADDR_VAR 0 8
63247: PUSH
63248: LD_INT 0
63250: ST_TO_ADDR
// if not nat then
63251: LD_VAR 0 7
63255: NOT
63256: IFFALSE 63260
// continue ;
63258: GO 63225
// for j in list [ nat ] do
63260: LD_ADDR_VAR 0 5
63264: PUSH
63265: LD_VAR 0 10
63269: PUSH
63270: LD_VAR 0 7
63274: ARRAY
63275: PUSH
63276: FOR_IN
63277: IFFALSE 63318
// if GetBWeapon ( i ) = j [ 1 ] then
63279: LD_VAR 0 4
63283: PPUSH
63284: CALL_OW 269
63288: PUSH
63289: LD_VAR 0 5
63293: PUSH
63294: LD_INT 1
63296: ARRAY
63297: EQUAL
63298: IFFALSE 63316
// begin weapon := j [ 2 ] ;
63300: LD_ADDR_VAR 0 8
63304: PUSH
63305: LD_VAR 0 5
63309: PUSH
63310: LD_INT 2
63312: ARRAY
63313: ST_TO_ADDR
// break ;
63314: GO 63318
// end ;
63316: GO 63276
63318: POP
63319: POP
// if not weapon then
63320: LD_VAR 0 8
63324: NOT
63325: IFFALSE 63329
// continue ;
63327: GO 63225
// for k in factories do
63329: LD_ADDR_VAR 0 6
63333: PUSH
63334: LD_VAR 0 2
63338: PUSH
63339: FOR_IN
63340: IFFALSE 63405
// begin weapons := AvailableWeaponList ( k ) ;
63342: LD_ADDR_VAR 0 9
63346: PUSH
63347: LD_VAR 0 6
63351: PPUSH
63352: CALL_OW 478
63356: ST_TO_ADDR
// if not weapons then
63357: LD_VAR 0 9
63361: NOT
63362: IFFALSE 63366
// continue ;
63364: GO 63339
// if weapon in weapons then
63366: LD_VAR 0 8
63370: PUSH
63371: LD_VAR 0 9
63375: IN
63376: IFFALSE 63403
// begin result := [ i , weapon ] ;
63378: LD_ADDR_VAR 0 3
63382: PUSH
63383: LD_VAR 0 4
63387: PUSH
63388: LD_VAR 0 8
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: ST_TO_ADDR
// exit ;
63397: POP
63398: POP
63399: POP
63400: POP
63401: GO 63411
// end ; end ;
63403: GO 63339
63405: POP
63406: POP
// end ;
63407: GO 63225
63409: POP
63410: POP
// end ;
63411: LD_VAR 0 3
63415: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63416: LD_INT 0
63418: PPUSH
// if not side or side > 8 then
63419: LD_VAR 0 3
63423: NOT
63424: PUSH
63425: LD_VAR 0 3
63429: PUSH
63430: LD_INT 8
63432: GREATER
63433: OR
63434: IFFALSE 63438
// exit ;
63436: GO 63497
// if not range then
63438: LD_VAR 0 4
63442: NOT
63443: IFFALSE 63454
// range := - 12 ;
63445: LD_ADDR_VAR 0 4
63449: PUSH
63450: LD_INT 12
63452: NEG
63453: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63454: LD_VAR 0 1
63458: PPUSH
63459: LD_VAR 0 2
63463: PPUSH
63464: LD_VAR 0 3
63468: PPUSH
63469: LD_VAR 0 4
63473: PPUSH
63474: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63478: LD_VAR 0 1
63482: PPUSH
63483: LD_VAR 0 2
63487: PPUSH
63488: LD_VAR 0 3
63492: PPUSH
63493: CALL_OW 331
// end ;
63497: LD_VAR 0 5
63501: RET
// export function Video ( mode ) ; begin
63502: LD_INT 0
63504: PPUSH
// ingame_video = mode ;
63505: LD_ADDR_OWVAR 52
63509: PUSH
63510: LD_VAR 0 1
63514: ST_TO_ADDR
// interface_hidden = mode ;
63515: LD_ADDR_OWVAR 54
63519: PUSH
63520: LD_VAR 0 1
63524: ST_TO_ADDR
// end ;
63525: LD_VAR 0 2
63529: RET
// export function Join ( array , element ) ; begin
63530: LD_INT 0
63532: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63533: LD_ADDR_VAR 0 3
63537: PUSH
63538: LD_VAR 0 1
63542: PPUSH
63543: LD_VAR 0 1
63547: PUSH
63548: LD_INT 1
63550: PLUS
63551: PPUSH
63552: LD_VAR 0 2
63556: PPUSH
63557: CALL_OW 1
63561: ST_TO_ADDR
// end ;
63562: LD_VAR 0 3
63566: RET
// export function JoinUnion ( array , element ) ; begin
63567: LD_INT 0
63569: PPUSH
// result := array union element ;
63570: LD_ADDR_VAR 0 3
63574: PUSH
63575: LD_VAR 0 1
63579: PUSH
63580: LD_VAR 0 2
63584: UNION
63585: ST_TO_ADDR
// end ;
63586: LD_VAR 0 3
63590: RET
// export function GetBehemoths ( side ) ; begin
63591: LD_INT 0
63593: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63594: LD_ADDR_VAR 0 2
63598: PUSH
63599: LD_INT 22
63601: PUSH
63602: LD_VAR 0 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 31
63613: PUSH
63614: LD_INT 25
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PPUSH
63625: CALL_OW 69
63629: ST_TO_ADDR
// end ;
63630: LD_VAR 0 2
63634: RET
// export function Shuffle ( array ) ; var i , index ; begin
63635: LD_INT 0
63637: PPUSH
63638: PPUSH
63639: PPUSH
// result := [ ] ;
63640: LD_ADDR_VAR 0 2
63644: PUSH
63645: EMPTY
63646: ST_TO_ADDR
// if not array then
63647: LD_VAR 0 1
63651: NOT
63652: IFFALSE 63656
// exit ;
63654: GO 63755
// Randomize ;
63656: CALL_OW 10
// for i = array downto 1 do
63660: LD_ADDR_VAR 0 3
63664: PUSH
63665: DOUBLE
63666: LD_VAR 0 1
63670: INC
63671: ST_TO_ADDR
63672: LD_INT 1
63674: PUSH
63675: FOR_DOWNTO
63676: IFFALSE 63753
// begin index := rand ( 1 , array ) ;
63678: LD_ADDR_VAR 0 4
63682: PUSH
63683: LD_INT 1
63685: PPUSH
63686: LD_VAR 0 1
63690: PPUSH
63691: CALL_OW 12
63695: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63696: LD_ADDR_VAR 0 2
63700: PUSH
63701: LD_VAR 0 2
63705: PPUSH
63706: LD_VAR 0 2
63710: PUSH
63711: LD_INT 1
63713: PLUS
63714: PPUSH
63715: LD_VAR 0 1
63719: PUSH
63720: LD_VAR 0 4
63724: ARRAY
63725: PPUSH
63726: CALL_OW 2
63730: ST_TO_ADDR
// array := Delete ( array , index ) ;
63731: LD_ADDR_VAR 0 1
63735: PUSH
63736: LD_VAR 0 1
63740: PPUSH
63741: LD_VAR 0 4
63745: PPUSH
63746: CALL_OW 3
63750: ST_TO_ADDR
// end ;
63751: GO 63675
63753: POP
63754: POP
// end ;
63755: LD_VAR 0 2
63759: RET
// export function GetBaseMaterials ( base ) ; begin
63760: LD_INT 0
63762: PPUSH
// result := [ 0 , 0 , 0 ] ;
63763: LD_ADDR_VAR 0 2
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// if not base then
63782: LD_VAR 0 1
63786: NOT
63787: IFFALSE 63791
// exit ;
63789: GO 63840
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63791: LD_ADDR_VAR 0 2
63795: PUSH
63796: LD_VAR 0 1
63800: PPUSH
63801: LD_INT 1
63803: PPUSH
63804: CALL_OW 275
63808: PUSH
63809: LD_VAR 0 1
63813: PPUSH
63814: LD_INT 2
63816: PPUSH
63817: CALL_OW 275
63821: PUSH
63822: LD_VAR 0 1
63826: PPUSH
63827: LD_INT 3
63829: PPUSH
63830: CALL_OW 275
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: ST_TO_ADDR
// end ;
63840: LD_VAR 0 2
63844: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63845: LD_INT 0
63847: PPUSH
63848: PPUSH
// result := array ;
63849: LD_ADDR_VAR 0 3
63853: PUSH
63854: LD_VAR 0 1
63858: ST_TO_ADDR
// if size >= result then
63859: LD_VAR 0 2
63863: PUSH
63864: LD_VAR 0 3
63868: GREATEREQUAL
63869: IFFALSE 63873
// exit ;
63871: GO 63923
// if size then
63873: LD_VAR 0 2
63877: IFFALSE 63923
// for i := array downto size do
63879: LD_ADDR_VAR 0 4
63883: PUSH
63884: DOUBLE
63885: LD_VAR 0 1
63889: INC
63890: ST_TO_ADDR
63891: LD_VAR 0 2
63895: PUSH
63896: FOR_DOWNTO
63897: IFFALSE 63921
// result := Delete ( result , result ) ;
63899: LD_ADDR_VAR 0 3
63903: PUSH
63904: LD_VAR 0 3
63908: PPUSH
63909: LD_VAR 0 3
63913: PPUSH
63914: CALL_OW 3
63918: ST_TO_ADDR
63919: GO 63896
63921: POP
63922: POP
// end ;
63923: LD_VAR 0 3
63927: RET
// export function ComExit ( unit ) ; var tmp ; begin
63928: LD_INT 0
63930: PPUSH
63931: PPUSH
// if not IsInUnit ( unit ) then
63932: LD_VAR 0 1
63936: PPUSH
63937: CALL_OW 310
63941: NOT
63942: IFFALSE 63946
// exit ;
63944: GO 64006
// tmp := IsInUnit ( unit ) ;
63946: LD_ADDR_VAR 0 3
63950: PUSH
63951: LD_VAR 0 1
63955: PPUSH
63956: CALL_OW 310
63960: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63961: LD_VAR 0 3
63965: PPUSH
63966: CALL_OW 247
63970: PUSH
63971: LD_INT 2
63973: EQUAL
63974: IFFALSE 63987
// ComExitVehicle ( unit ) else
63976: LD_VAR 0 1
63980: PPUSH
63981: CALL_OW 121
63985: GO 63996
// ComExitBuilding ( unit ) ;
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 122
// result := tmp ;
63996: LD_ADDR_VAR 0 2
64000: PUSH
64001: LD_VAR 0 3
64005: ST_TO_ADDR
// end ;
64006: LD_VAR 0 2
64010: RET
// export function ComExitAll ( units ) ; var i ; begin
64011: LD_INT 0
64013: PPUSH
64014: PPUSH
// if not units then
64015: LD_VAR 0 1
64019: NOT
64020: IFFALSE 64024
// exit ;
64022: GO 64050
// for i in units do
64024: LD_ADDR_VAR 0 3
64028: PUSH
64029: LD_VAR 0 1
64033: PUSH
64034: FOR_IN
64035: IFFALSE 64048
// ComExit ( i ) ;
64037: LD_VAR 0 3
64041: PPUSH
64042: CALL 63928 0 1
64046: GO 64034
64048: POP
64049: POP
// end ;
64050: LD_VAR 0 2
64054: RET
// export function ResetHc ; begin
64055: LD_INT 0
64057: PPUSH
// InitHc ;
64058: CALL_OW 19
// hc_importance := 0 ;
64062: LD_ADDR_OWVAR 32
64066: PUSH
64067: LD_INT 0
64069: ST_TO_ADDR
// end ;
64070: LD_VAR 0 1
64074: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64075: LD_INT 0
64077: PPUSH
64078: PPUSH
64079: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64080: LD_ADDR_VAR 0 6
64084: PUSH
64085: LD_VAR 0 1
64089: PUSH
64090: LD_VAR 0 3
64094: PLUS
64095: PUSH
64096: LD_INT 2
64098: DIV
64099: ST_TO_ADDR
// if _x < 0 then
64100: LD_VAR 0 6
64104: PUSH
64105: LD_INT 0
64107: LESS
64108: IFFALSE 64125
// _x := _x * - 1 ;
64110: LD_ADDR_VAR 0 6
64114: PUSH
64115: LD_VAR 0 6
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: MUL
64124: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64125: LD_ADDR_VAR 0 7
64129: PUSH
64130: LD_VAR 0 2
64134: PUSH
64135: LD_VAR 0 4
64139: PLUS
64140: PUSH
64141: LD_INT 2
64143: DIV
64144: ST_TO_ADDR
// if _y < 0 then
64145: LD_VAR 0 7
64149: PUSH
64150: LD_INT 0
64152: LESS
64153: IFFALSE 64170
// _y := _y * - 1 ;
64155: LD_ADDR_VAR 0 7
64159: PUSH
64160: LD_VAR 0 7
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: MUL
64169: ST_TO_ADDR
// result := [ _x , _y ] ;
64170: LD_ADDR_VAR 0 5
64174: PUSH
64175: LD_VAR 0 6
64179: PUSH
64180: LD_VAR 0 7
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: ST_TO_ADDR
// end ;
64189: LD_VAR 0 5
64193: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64194: LD_INT 0
64196: PPUSH
64197: PPUSH
64198: PPUSH
64199: PPUSH
// task := GetTaskList ( unit ) ;
64200: LD_ADDR_VAR 0 7
64204: PUSH
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 437
64214: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64215: LD_VAR 0 7
64219: NOT
64220: PUSH
64221: LD_VAR 0 1
64225: PPUSH
64226: LD_VAR 0 2
64230: PPUSH
64231: CALL_OW 308
64235: NOT
64236: AND
64237: IFFALSE 64241
// exit ;
64239: GO 64359
// if IsInArea ( unit , area ) then
64241: LD_VAR 0 1
64245: PPUSH
64246: LD_VAR 0 2
64250: PPUSH
64251: CALL_OW 308
64255: IFFALSE 64273
// begin ComMoveToArea ( unit , goAway ) ;
64257: LD_VAR 0 1
64261: PPUSH
64262: LD_VAR 0 3
64266: PPUSH
64267: CALL_OW 113
// exit ;
64271: GO 64359
// end ; if task [ 1 ] [ 1 ] <> M then
64273: LD_VAR 0 7
64277: PUSH
64278: LD_INT 1
64280: ARRAY
64281: PUSH
64282: LD_INT 1
64284: ARRAY
64285: PUSH
64286: LD_STRING M
64288: NONEQUAL
64289: IFFALSE 64293
// exit ;
64291: GO 64359
// x := task [ 1 ] [ 2 ] ;
64293: LD_ADDR_VAR 0 5
64297: PUSH
64298: LD_VAR 0 7
64302: PUSH
64303: LD_INT 1
64305: ARRAY
64306: PUSH
64307: LD_INT 2
64309: ARRAY
64310: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64311: LD_ADDR_VAR 0 6
64315: PUSH
64316: LD_VAR 0 7
64320: PUSH
64321: LD_INT 1
64323: ARRAY
64324: PUSH
64325: LD_INT 3
64327: ARRAY
64328: ST_TO_ADDR
// if InArea ( x , y , area ) then
64329: LD_VAR 0 5
64333: PPUSH
64334: LD_VAR 0 6
64338: PPUSH
64339: LD_VAR 0 2
64343: PPUSH
64344: CALL_OW 309
64348: IFFALSE 64359
// ComStop ( unit ) ;
64350: LD_VAR 0 1
64354: PPUSH
64355: CALL_OW 141
// end ;
64359: LD_VAR 0 4
64363: RET
// export function Abs ( value ) ; begin
64364: LD_INT 0
64366: PPUSH
// result := value ;
64367: LD_ADDR_VAR 0 2
64371: PUSH
64372: LD_VAR 0 1
64376: ST_TO_ADDR
// if value < 0 then
64377: LD_VAR 0 1
64381: PUSH
64382: LD_INT 0
64384: LESS
64385: IFFALSE 64402
// result := value * - 1 ;
64387: LD_ADDR_VAR 0 2
64391: PUSH
64392: LD_VAR 0 1
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: MUL
64401: ST_TO_ADDR
// end ;
64402: LD_VAR 0 2
64406: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64407: LD_INT 0
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
64413: PPUSH
64414: PPUSH
64415: PPUSH
64416: PPUSH
// if not unit or not building then
64417: LD_VAR 0 1
64421: NOT
64422: PUSH
64423: LD_VAR 0 2
64427: NOT
64428: OR
64429: IFFALSE 64433
// exit ;
64431: GO 64659
// x := GetX ( building ) ;
64433: LD_ADDR_VAR 0 4
64437: PUSH
64438: LD_VAR 0 2
64442: PPUSH
64443: CALL_OW 250
64447: ST_TO_ADDR
// y := GetY ( building ) ;
64448: LD_ADDR_VAR 0 6
64452: PUSH
64453: LD_VAR 0 2
64457: PPUSH
64458: CALL_OW 251
64462: ST_TO_ADDR
// d := GetDir ( building ) ;
64463: LD_ADDR_VAR 0 8
64467: PUSH
64468: LD_VAR 0 2
64472: PPUSH
64473: CALL_OW 254
64477: ST_TO_ADDR
// r := 4 ;
64478: LD_ADDR_VAR 0 9
64482: PUSH
64483: LD_INT 4
64485: ST_TO_ADDR
// for i := 1 to 5 do
64486: LD_ADDR_VAR 0 10
64490: PUSH
64491: DOUBLE
64492: LD_INT 1
64494: DEC
64495: ST_TO_ADDR
64496: LD_INT 5
64498: PUSH
64499: FOR_TO
64500: IFFALSE 64657
// begin _x := ShiftX ( x , d , r + i ) ;
64502: LD_ADDR_VAR 0 5
64506: PUSH
64507: LD_VAR 0 4
64511: PPUSH
64512: LD_VAR 0 8
64516: PPUSH
64517: LD_VAR 0 9
64521: PUSH
64522: LD_VAR 0 10
64526: PLUS
64527: PPUSH
64528: CALL_OW 272
64532: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64533: LD_ADDR_VAR 0 7
64537: PUSH
64538: LD_VAR 0 6
64542: PPUSH
64543: LD_VAR 0 8
64547: PPUSH
64548: LD_VAR 0 9
64552: PUSH
64553: LD_VAR 0 10
64557: PLUS
64558: PPUSH
64559: CALL_OW 273
64563: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64564: LD_VAR 0 5
64568: PPUSH
64569: LD_VAR 0 7
64573: PPUSH
64574: CALL_OW 488
64578: PUSH
64579: LD_VAR 0 5
64583: PPUSH
64584: LD_VAR 0 7
64588: PPUSH
64589: CALL_OW 428
64593: PPUSH
64594: CALL_OW 247
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: LD_INT 2
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: IN
64609: NOT
64610: AND
64611: IFFALSE 64655
// begin ComMoveXY ( unit , _x , _y ) ;
64613: LD_VAR 0 1
64617: PPUSH
64618: LD_VAR 0 5
64622: PPUSH
64623: LD_VAR 0 7
64627: PPUSH
64628: CALL_OW 111
// result := [ _x , _y ] ;
64632: LD_ADDR_VAR 0 3
64636: PUSH
64637: LD_VAR 0 5
64641: PUSH
64642: LD_VAR 0 7
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: ST_TO_ADDR
// exit ;
64651: POP
64652: POP
64653: GO 64659
// end ; end ;
64655: GO 64499
64657: POP
64658: POP
// end ;
64659: LD_VAR 0 3
64663: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64664: LD_INT 0
64666: PPUSH
64667: PPUSH
64668: PPUSH
// result := 0 ;
64669: LD_ADDR_VAR 0 3
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64677: LD_VAR 0 1
64681: PUSH
64682: LD_INT 0
64684: LESS
64685: PUSH
64686: LD_VAR 0 1
64690: PUSH
64691: LD_INT 8
64693: GREATER
64694: OR
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_INT 0
64703: LESS
64704: OR
64705: PUSH
64706: LD_VAR 0 2
64710: PUSH
64711: LD_INT 8
64713: GREATER
64714: OR
64715: IFFALSE 64719
// exit ;
64717: GO 64794
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64719: LD_ADDR_VAR 0 4
64723: PUSH
64724: LD_INT 22
64726: PUSH
64727: LD_VAR 0 2
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PPUSH
64736: CALL_OW 69
64740: PUSH
64741: FOR_IN
64742: IFFALSE 64792
// begin un := UnitShoot ( i ) ;
64744: LD_ADDR_VAR 0 5
64748: PUSH
64749: LD_VAR 0 4
64753: PPUSH
64754: CALL_OW 504
64758: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64759: LD_VAR 0 5
64763: PPUSH
64764: CALL_OW 255
64768: PUSH
64769: LD_VAR 0 1
64773: EQUAL
64774: IFFALSE 64790
// begin result := un ;
64776: LD_ADDR_VAR 0 3
64780: PUSH
64781: LD_VAR 0 5
64785: ST_TO_ADDR
// exit ;
64786: POP
64787: POP
64788: GO 64794
// end ; end ;
64790: GO 64741
64792: POP
64793: POP
// end ;
64794: LD_VAR 0 3
64798: RET
// export function GetCargoBay ( units ) ; begin
64799: LD_INT 0
64801: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64802: LD_ADDR_VAR 0 2
64806: PUSH
64807: LD_VAR 0 1
64811: PPUSH
64812: LD_INT 2
64814: PUSH
64815: LD_INT 34
64817: PUSH
64818: LD_INT 12
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 34
64827: PUSH
64828: LD_INT 51
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 34
64837: PUSH
64838: LD_INT 32
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 34
64847: PUSH
64848: LD_INT 89
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: PPUSH
64862: CALL_OW 72
64866: ST_TO_ADDR
// end ;
64867: LD_VAR 0 2
64871: RET
// export function Negate ( value ) ; begin
64872: LD_INT 0
64874: PPUSH
// result := not value ;
64875: LD_ADDR_VAR 0 2
64879: PUSH
64880: LD_VAR 0 1
64884: NOT
64885: ST_TO_ADDR
// end ;
64886: LD_VAR 0 2
64890: RET
// export function Inc ( value ) ; begin
64891: LD_INT 0
64893: PPUSH
// result := value + 1 ;
64894: LD_ADDR_VAR 0 2
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 1
64906: PLUS
64907: ST_TO_ADDR
// end ;
64908: LD_VAR 0 2
64912: RET
// export function Dec ( value ) ; begin
64913: LD_INT 0
64915: PPUSH
// result := value - 1 ;
64916: LD_ADDR_VAR 0 2
64920: PUSH
64921: LD_VAR 0 1
64925: PUSH
64926: LD_INT 1
64928: MINUS
64929: ST_TO_ADDR
// end ;
64930: LD_VAR 0 2
64934: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64935: LD_INT 0
64937: PPUSH
64938: PPUSH
64939: PPUSH
64940: PPUSH
64941: PPUSH
64942: PPUSH
64943: PPUSH
64944: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64945: LD_VAR 0 1
64949: PPUSH
64950: LD_VAR 0 2
64954: PPUSH
64955: CALL_OW 488
64959: NOT
64960: PUSH
64961: LD_VAR 0 3
64965: PPUSH
64966: LD_VAR 0 4
64970: PPUSH
64971: CALL_OW 488
64975: NOT
64976: OR
64977: IFFALSE 64990
// begin result := - 1 ;
64979: LD_ADDR_VAR 0 5
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: ST_TO_ADDR
// exit ;
64988: GO 65225
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64990: LD_ADDR_VAR 0 12
64994: PUSH
64995: LD_VAR 0 1
64999: PPUSH
65000: LD_VAR 0 2
65004: PPUSH
65005: LD_VAR 0 3
65009: PPUSH
65010: LD_VAR 0 4
65014: PPUSH
65015: CALL 64075 0 4
65019: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65020: LD_ADDR_VAR 0 11
65024: PUSH
65025: LD_VAR 0 1
65029: PPUSH
65030: LD_VAR 0 2
65034: PPUSH
65035: LD_VAR 0 12
65039: PUSH
65040: LD_INT 1
65042: ARRAY
65043: PPUSH
65044: LD_VAR 0 12
65048: PUSH
65049: LD_INT 2
65051: ARRAY
65052: PPUSH
65053: CALL_OW 298
65057: ST_TO_ADDR
// distance := 9999 ;
65058: LD_ADDR_VAR 0 10
65062: PUSH
65063: LD_INT 9999
65065: ST_TO_ADDR
// for i := 0 to 5 do
65066: LD_ADDR_VAR 0 6
65070: PUSH
65071: DOUBLE
65072: LD_INT 0
65074: DEC
65075: ST_TO_ADDR
65076: LD_INT 5
65078: PUSH
65079: FOR_TO
65080: IFFALSE 65223
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65082: LD_ADDR_VAR 0 7
65086: PUSH
65087: LD_VAR 0 1
65091: PPUSH
65092: LD_VAR 0 6
65096: PPUSH
65097: LD_VAR 0 11
65101: PPUSH
65102: CALL_OW 272
65106: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65107: LD_ADDR_VAR 0 8
65111: PUSH
65112: LD_VAR 0 2
65116: PPUSH
65117: LD_VAR 0 6
65121: PPUSH
65122: LD_VAR 0 11
65126: PPUSH
65127: CALL_OW 273
65131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65132: LD_VAR 0 7
65136: PPUSH
65137: LD_VAR 0 8
65141: PPUSH
65142: CALL_OW 488
65146: NOT
65147: IFFALSE 65151
// continue ;
65149: GO 65079
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65151: LD_ADDR_VAR 0 9
65155: PUSH
65156: LD_VAR 0 12
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PPUSH
65165: LD_VAR 0 12
65169: PUSH
65170: LD_INT 2
65172: ARRAY
65173: PPUSH
65174: LD_VAR 0 7
65178: PPUSH
65179: LD_VAR 0 8
65183: PPUSH
65184: CALL_OW 298
65188: ST_TO_ADDR
// if tmp < distance then
65189: LD_VAR 0 9
65193: PUSH
65194: LD_VAR 0 10
65198: LESS
65199: IFFALSE 65221
// begin result := i ;
65201: LD_ADDR_VAR 0 5
65205: PUSH
65206: LD_VAR 0 6
65210: ST_TO_ADDR
// distance := tmp ;
65211: LD_ADDR_VAR 0 10
65215: PUSH
65216: LD_VAR 0 9
65220: ST_TO_ADDR
// end ; end ;
65221: GO 65079
65223: POP
65224: POP
// end ;
65225: LD_VAR 0 5
65229: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65230: LD_INT 0
65232: PPUSH
65233: PPUSH
// if not driver or not IsInUnit ( driver ) then
65234: LD_VAR 0 1
65238: NOT
65239: PUSH
65240: LD_VAR 0 1
65244: PPUSH
65245: CALL_OW 310
65249: NOT
65250: OR
65251: IFFALSE 65255
// exit ;
65253: GO 65345
// vehicle := IsInUnit ( driver ) ;
65255: LD_ADDR_VAR 0 3
65259: PUSH
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL_OW 310
65269: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65270: LD_VAR 0 1
65274: PPUSH
65275: LD_STRING \
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: PUSH
65305: LD_STRING E
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 0
65313: PUSH
65314: LD_VAR 0 3
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PPUSH
65341: CALL_OW 446
// end ;
65345: LD_VAR 0 2
65349: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65350: LD_INT 0
65352: PPUSH
65353: PPUSH
// if not driver or not IsInUnit ( driver ) then
65354: LD_VAR 0 1
65358: NOT
65359: PUSH
65360: LD_VAR 0 1
65364: PPUSH
65365: CALL_OW 310
65369: NOT
65370: OR
65371: IFFALSE 65375
// exit ;
65373: GO 65465
// vehicle := IsInUnit ( driver ) ;
65375: LD_ADDR_VAR 0 3
65379: PUSH
65380: LD_VAR 0 1
65384: PPUSH
65385: CALL_OW 310
65389: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65390: LD_VAR 0 1
65394: PPUSH
65395: LD_STRING \
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: PUSH
65425: LD_STRING E
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: LD_VAR 0 3
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PPUSH
65461: CALL_OW 447
// end ;
65465: LD_VAR 0 2
65469: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65470: LD_INT 0
65472: PPUSH
65473: PPUSH
65474: PPUSH
// tmp := [ ] ;
65475: LD_ADDR_VAR 0 5
65479: PUSH
65480: EMPTY
65481: ST_TO_ADDR
// for i in units do
65482: LD_ADDR_VAR 0 4
65486: PUSH
65487: LD_VAR 0 1
65491: PUSH
65492: FOR_IN
65493: IFFALSE 65531
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65495: LD_ADDR_VAR 0 5
65499: PUSH
65500: LD_VAR 0 5
65504: PPUSH
65505: LD_VAR 0 5
65509: PUSH
65510: LD_INT 1
65512: PLUS
65513: PPUSH
65514: LD_VAR 0 4
65518: PPUSH
65519: CALL_OW 256
65523: PPUSH
65524: CALL_OW 2
65528: ST_TO_ADDR
65529: GO 65492
65531: POP
65532: POP
// if not tmp then
65533: LD_VAR 0 5
65537: NOT
65538: IFFALSE 65542
// exit ;
65540: GO 65590
// if asc then
65542: LD_VAR 0 2
65546: IFFALSE 65570
// result := SortListByListAsc ( units , tmp ) else
65548: LD_ADDR_VAR 0 3
65552: PUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: LD_VAR 0 5
65562: PPUSH
65563: CALL_OW 76
65567: ST_TO_ADDR
65568: GO 65590
// result := SortListByListDesc ( units , tmp ) ;
65570: LD_ADDR_VAR 0 3
65574: PUSH
65575: LD_VAR 0 1
65579: PPUSH
65580: LD_VAR 0 5
65584: PPUSH
65585: CALL_OW 77
65589: ST_TO_ADDR
// end ;
65590: LD_VAR 0 3
65594: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65595: LD_INT 0
65597: PPUSH
65598: PPUSH
// task := GetTaskList ( mech ) ;
65599: LD_ADDR_VAR 0 4
65603: PUSH
65604: LD_VAR 0 1
65608: PPUSH
65609: CALL_OW 437
65613: ST_TO_ADDR
// if not task then
65614: LD_VAR 0 4
65618: NOT
65619: IFFALSE 65623
// exit ;
65621: GO 65665
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65623: LD_ADDR_VAR 0 3
65627: PUSH
65628: LD_VAR 0 4
65632: PUSH
65633: LD_INT 1
65635: ARRAY
65636: PUSH
65637: LD_INT 1
65639: ARRAY
65640: PUSH
65641: LD_STRING r
65643: EQUAL
65644: PUSH
65645: LD_VAR 0 4
65649: PUSH
65650: LD_INT 1
65652: ARRAY
65653: PUSH
65654: LD_INT 4
65656: ARRAY
65657: PUSH
65658: LD_VAR 0 2
65662: EQUAL
65663: AND
65664: ST_TO_ADDR
// end ;
65665: LD_VAR 0 3
65669: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65670: LD_INT 0
65672: PPUSH
// SetDir ( unit , d ) ;
65673: LD_VAR 0 1
65677: PPUSH
65678: LD_VAR 0 4
65682: PPUSH
65683: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65687: LD_VAR 0 1
65691: PPUSH
65692: LD_VAR 0 2
65696: PPUSH
65697: LD_VAR 0 3
65701: PPUSH
65702: LD_VAR 0 5
65706: PPUSH
65707: CALL_OW 48
// end ;
65711: LD_VAR 0 6
65715: RET
// export function ToNaturalNumber ( number ) ; begin
65716: LD_INT 0
65718: PPUSH
// result := number div 1 ;
65719: LD_ADDR_VAR 0 2
65723: PUSH
65724: LD_VAR 0 1
65728: PUSH
65729: LD_INT 1
65731: DIV
65732: ST_TO_ADDR
// if number < 0 then
65733: LD_VAR 0 1
65737: PUSH
65738: LD_INT 0
65740: LESS
65741: IFFALSE 65751
// result := 0 ;
65743: LD_ADDR_VAR 0 2
65747: PUSH
65748: LD_INT 0
65750: ST_TO_ADDR
// end ;
65751: LD_VAR 0 2
65755: RET
// export function SortByClass ( units , class ) ; var un ; begin
65756: LD_INT 0
65758: PPUSH
65759: PPUSH
// if not units or not class then
65760: LD_VAR 0 1
65764: NOT
65765: PUSH
65766: LD_VAR 0 2
65770: NOT
65771: OR
65772: IFFALSE 65776
// exit ;
65774: GO 65871
// result := [ ] ;
65776: LD_ADDR_VAR 0 3
65780: PUSH
65781: EMPTY
65782: ST_TO_ADDR
// for un in units do
65783: LD_ADDR_VAR 0 4
65787: PUSH
65788: LD_VAR 0 1
65792: PUSH
65793: FOR_IN
65794: IFFALSE 65869
// if GetClass ( un ) = class then
65796: LD_VAR 0 4
65800: PPUSH
65801: CALL_OW 257
65805: PUSH
65806: LD_VAR 0 2
65810: EQUAL
65811: IFFALSE 65838
// result := Insert ( result , 1 , un ) else
65813: LD_ADDR_VAR 0 3
65817: PUSH
65818: LD_VAR 0 3
65822: PPUSH
65823: LD_INT 1
65825: PPUSH
65826: LD_VAR 0 4
65830: PPUSH
65831: CALL_OW 2
65835: ST_TO_ADDR
65836: GO 65867
// result := Replace ( result , result + 1 , un ) ;
65838: LD_ADDR_VAR 0 3
65842: PUSH
65843: LD_VAR 0 3
65847: PPUSH
65848: LD_VAR 0 3
65852: PUSH
65853: LD_INT 1
65855: PLUS
65856: PPUSH
65857: LD_VAR 0 4
65861: PPUSH
65862: CALL_OW 1
65866: ST_TO_ADDR
65867: GO 65793
65869: POP
65870: POP
// end ;
65871: LD_VAR 0 3
65875: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65876: LD_INT 0
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
65884: PPUSH
// result := [ ] ;
65885: LD_ADDR_VAR 0 4
65889: PUSH
65890: EMPTY
65891: ST_TO_ADDR
// if x - r < 0 then
65892: LD_VAR 0 1
65896: PUSH
65897: LD_VAR 0 3
65901: MINUS
65902: PUSH
65903: LD_INT 0
65905: LESS
65906: IFFALSE 65918
// min_x := 0 else
65908: LD_ADDR_VAR 0 8
65912: PUSH
65913: LD_INT 0
65915: ST_TO_ADDR
65916: GO 65934
// min_x := x - r ;
65918: LD_ADDR_VAR 0 8
65922: PUSH
65923: LD_VAR 0 1
65927: PUSH
65928: LD_VAR 0 3
65932: MINUS
65933: ST_TO_ADDR
// if y - r < 0 then
65934: LD_VAR 0 2
65938: PUSH
65939: LD_VAR 0 3
65943: MINUS
65944: PUSH
65945: LD_INT 0
65947: LESS
65948: IFFALSE 65960
// min_y := 0 else
65950: LD_ADDR_VAR 0 7
65954: PUSH
65955: LD_INT 0
65957: ST_TO_ADDR
65958: GO 65976
// min_y := y - r ;
65960: LD_ADDR_VAR 0 7
65964: PUSH
65965: LD_VAR 0 2
65969: PUSH
65970: LD_VAR 0 3
65974: MINUS
65975: ST_TO_ADDR
// max_x := x + r ;
65976: LD_ADDR_VAR 0 9
65980: PUSH
65981: LD_VAR 0 1
65985: PUSH
65986: LD_VAR 0 3
65990: PLUS
65991: ST_TO_ADDR
// max_y := y + r ;
65992: LD_ADDR_VAR 0 10
65996: PUSH
65997: LD_VAR 0 2
66001: PUSH
66002: LD_VAR 0 3
66006: PLUS
66007: ST_TO_ADDR
// for _x = min_x to max_x do
66008: LD_ADDR_VAR 0 5
66012: PUSH
66013: DOUBLE
66014: LD_VAR 0 8
66018: DEC
66019: ST_TO_ADDR
66020: LD_VAR 0 9
66024: PUSH
66025: FOR_TO
66026: IFFALSE 66127
// for _y = min_y to max_y do
66028: LD_ADDR_VAR 0 6
66032: PUSH
66033: DOUBLE
66034: LD_VAR 0 7
66038: DEC
66039: ST_TO_ADDR
66040: LD_VAR 0 10
66044: PUSH
66045: FOR_TO
66046: IFFALSE 66123
// begin if not ValidHex ( _x , _y ) then
66048: LD_VAR 0 5
66052: PPUSH
66053: LD_VAR 0 6
66057: PPUSH
66058: CALL_OW 488
66062: NOT
66063: IFFALSE 66067
// continue ;
66065: GO 66045
// if GetResourceTypeXY ( _x , _y ) then
66067: LD_VAR 0 5
66071: PPUSH
66072: LD_VAR 0 6
66076: PPUSH
66077: CALL_OW 283
66081: IFFALSE 66121
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66083: LD_ADDR_VAR 0 4
66087: PUSH
66088: LD_VAR 0 4
66092: PPUSH
66093: LD_VAR 0 4
66097: PUSH
66098: LD_INT 1
66100: PLUS
66101: PPUSH
66102: LD_VAR 0 5
66106: PUSH
66107: LD_VAR 0 6
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PPUSH
66116: CALL_OW 1
66120: ST_TO_ADDR
// end ;
66121: GO 66045
66123: POP
66124: POP
66125: GO 66025
66127: POP
66128: POP
// end ;
66129: LD_VAR 0 4
66133: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66134: LD_INT 0
66136: PPUSH
66137: PPUSH
66138: PPUSH
66139: PPUSH
66140: PPUSH
66141: PPUSH
66142: PPUSH
66143: PPUSH
// if not units then
66144: LD_VAR 0 1
66148: NOT
66149: IFFALSE 66153
// exit ;
66151: GO 66677
// result := UnitFilter ( units , [ f_ok ] ) ;
66153: LD_ADDR_VAR 0 3
66157: PUSH
66158: LD_VAR 0 1
66162: PPUSH
66163: LD_INT 50
66165: PUSH
66166: EMPTY
66167: LIST
66168: PPUSH
66169: CALL_OW 72
66173: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66174: LD_ADDR_VAR 0 8
66178: PUSH
66179: LD_VAR 0 1
66183: PUSH
66184: LD_INT 1
66186: ARRAY
66187: PPUSH
66188: CALL_OW 255
66192: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66193: LD_ADDR_VAR 0 10
66197: PUSH
66198: LD_INT 29
66200: PUSH
66201: LD_INT 91
66203: PUSH
66204: LD_INT 49
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// if not result then
66212: LD_VAR 0 3
66216: NOT
66217: IFFALSE 66221
// exit ;
66219: GO 66677
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66221: LD_ADDR_VAR 0 5
66225: PUSH
66226: LD_INT 81
66228: PUSH
66229: LD_VAR 0 8
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PPUSH
66238: CALL_OW 69
66242: ST_TO_ADDR
// for i in result do
66243: LD_ADDR_VAR 0 4
66247: PUSH
66248: LD_VAR 0 3
66252: PUSH
66253: FOR_IN
66254: IFFALSE 66675
// begin tag := GetTag ( i ) + 1 ;
66256: LD_ADDR_VAR 0 9
66260: PUSH
66261: LD_VAR 0 4
66265: PPUSH
66266: CALL_OW 110
66270: PUSH
66271: LD_INT 1
66273: PLUS
66274: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66275: LD_ADDR_VAR 0 7
66279: PUSH
66280: LD_VAR 0 4
66284: PPUSH
66285: CALL_OW 250
66289: PPUSH
66290: LD_VAR 0 4
66294: PPUSH
66295: CALL_OW 251
66299: PPUSH
66300: LD_INT 6
66302: PPUSH
66303: CALL 65876 0 3
66307: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66308: LD_VAR 0 4
66312: PPUSH
66313: CALL_OW 247
66317: PUSH
66318: LD_INT 2
66320: EQUAL
66321: PUSH
66322: LD_VAR 0 7
66326: AND
66327: PUSH
66328: LD_VAR 0 4
66332: PPUSH
66333: CALL_OW 264
66337: PUSH
66338: LD_VAR 0 10
66342: IN
66343: NOT
66344: AND
66345: IFFALSE 66384
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66347: LD_VAR 0 4
66351: PPUSH
66352: LD_VAR 0 7
66356: PUSH
66357: LD_INT 1
66359: ARRAY
66360: PUSH
66361: LD_INT 1
66363: ARRAY
66364: PPUSH
66365: LD_VAR 0 7
66369: PUSH
66370: LD_INT 1
66372: ARRAY
66373: PUSH
66374: LD_INT 2
66376: ARRAY
66377: PPUSH
66378: CALL_OW 116
66382: GO 66673
// if path > tag then
66384: LD_VAR 0 2
66388: PUSH
66389: LD_VAR 0 9
66393: GREATER
66394: IFFALSE 66602
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66396: LD_ADDR_VAR 0 6
66400: PUSH
66401: LD_VAR 0 5
66405: PPUSH
66406: LD_INT 91
66408: PUSH
66409: LD_VAR 0 4
66413: PUSH
66414: LD_INT 8
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: PPUSH
66422: CALL_OW 72
66426: ST_TO_ADDR
// if nearEnemy then
66427: LD_VAR 0 6
66431: IFFALSE 66500
// begin if GetWeapon ( i ) = ru_time_lapser then
66433: LD_VAR 0 4
66437: PPUSH
66438: CALL_OW 264
66442: PUSH
66443: LD_INT 49
66445: EQUAL
66446: IFFALSE 66474
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66448: LD_VAR 0 4
66452: PPUSH
66453: LD_VAR 0 6
66457: PPUSH
66458: LD_VAR 0 4
66462: PPUSH
66463: CALL_OW 74
66467: PPUSH
66468: CALL_OW 112
66472: GO 66498
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66474: LD_VAR 0 4
66478: PPUSH
66479: LD_VAR 0 6
66483: PPUSH
66484: LD_VAR 0 4
66488: PPUSH
66489: CALL_OW 74
66493: PPUSH
66494: CALL 67602 0 2
// end else
66498: GO 66600
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66500: LD_VAR 0 4
66504: PPUSH
66505: LD_VAR 0 2
66509: PUSH
66510: LD_VAR 0 9
66514: ARRAY
66515: PUSH
66516: LD_INT 1
66518: ARRAY
66519: PPUSH
66520: LD_VAR 0 2
66524: PUSH
66525: LD_VAR 0 9
66529: ARRAY
66530: PUSH
66531: LD_INT 2
66533: ARRAY
66534: PPUSH
66535: CALL_OW 297
66539: PUSH
66540: LD_INT 6
66542: GREATER
66543: IFFALSE 66586
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66545: LD_VAR 0 4
66549: PPUSH
66550: LD_VAR 0 2
66554: PUSH
66555: LD_VAR 0 9
66559: ARRAY
66560: PUSH
66561: LD_INT 1
66563: ARRAY
66564: PPUSH
66565: LD_VAR 0 2
66569: PUSH
66570: LD_VAR 0 9
66574: ARRAY
66575: PUSH
66576: LD_INT 2
66578: ARRAY
66579: PPUSH
66580: CALL_OW 114
66584: GO 66600
// SetTag ( i , tag ) ;
66586: LD_VAR 0 4
66590: PPUSH
66591: LD_VAR 0 9
66595: PPUSH
66596: CALL_OW 109
// end else
66600: GO 66673
// if enemy then
66602: LD_VAR 0 5
66606: IFFALSE 66673
// begin if GetWeapon ( i ) = ru_time_lapser then
66608: LD_VAR 0 4
66612: PPUSH
66613: CALL_OW 264
66617: PUSH
66618: LD_INT 49
66620: EQUAL
66621: IFFALSE 66649
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66623: LD_VAR 0 4
66627: PPUSH
66628: LD_VAR 0 5
66632: PPUSH
66633: LD_VAR 0 4
66637: PPUSH
66638: CALL_OW 74
66642: PPUSH
66643: CALL_OW 112
66647: GO 66673
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66649: LD_VAR 0 4
66653: PPUSH
66654: LD_VAR 0 5
66658: PPUSH
66659: LD_VAR 0 4
66663: PPUSH
66664: CALL_OW 74
66668: PPUSH
66669: CALL 67602 0 2
// end ; end ;
66673: GO 66253
66675: POP
66676: POP
// end ;
66677: LD_VAR 0 3
66681: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66682: LD_INT 0
66684: PPUSH
66685: PPUSH
66686: PPUSH
// if not unit or IsInUnit ( unit ) then
66687: LD_VAR 0 1
66691: NOT
66692: PUSH
66693: LD_VAR 0 1
66697: PPUSH
66698: CALL_OW 310
66702: OR
66703: IFFALSE 66707
// exit ;
66705: GO 66798
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66707: LD_ADDR_VAR 0 4
66711: PUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: CALL_OW 250
66721: PPUSH
66722: LD_VAR 0 2
66726: PPUSH
66727: LD_INT 1
66729: PPUSH
66730: CALL_OW 272
66734: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66735: LD_ADDR_VAR 0 5
66739: PUSH
66740: LD_VAR 0 1
66744: PPUSH
66745: CALL_OW 251
66749: PPUSH
66750: LD_VAR 0 2
66754: PPUSH
66755: LD_INT 1
66757: PPUSH
66758: CALL_OW 273
66762: ST_TO_ADDR
// if ValidHex ( x , y ) then
66763: LD_VAR 0 4
66767: PPUSH
66768: LD_VAR 0 5
66772: PPUSH
66773: CALL_OW 488
66777: IFFALSE 66798
// ComTurnXY ( unit , x , y ) ;
66779: LD_VAR 0 1
66783: PPUSH
66784: LD_VAR 0 4
66788: PPUSH
66789: LD_VAR 0 5
66793: PPUSH
66794: CALL_OW 118
// end ;
66798: LD_VAR 0 3
66802: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66803: LD_INT 0
66805: PPUSH
66806: PPUSH
// result := false ;
66807: LD_ADDR_VAR 0 3
66811: PUSH
66812: LD_INT 0
66814: ST_TO_ADDR
// if not units then
66815: LD_VAR 0 2
66819: NOT
66820: IFFALSE 66824
// exit ;
66822: GO 66869
// for i in units do
66824: LD_ADDR_VAR 0 4
66828: PUSH
66829: LD_VAR 0 2
66833: PUSH
66834: FOR_IN
66835: IFFALSE 66867
// if See ( side , i ) then
66837: LD_VAR 0 1
66841: PPUSH
66842: LD_VAR 0 4
66846: PPUSH
66847: CALL_OW 292
66851: IFFALSE 66865
// begin result := true ;
66853: LD_ADDR_VAR 0 3
66857: PUSH
66858: LD_INT 1
66860: ST_TO_ADDR
// exit ;
66861: POP
66862: POP
66863: GO 66869
// end ;
66865: GO 66834
66867: POP
66868: POP
// end ;
66869: LD_VAR 0 3
66873: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66874: LD_INT 0
66876: PPUSH
66877: PPUSH
66878: PPUSH
66879: PPUSH
// if not unit or not points then
66880: LD_VAR 0 1
66884: NOT
66885: PUSH
66886: LD_VAR 0 2
66890: NOT
66891: OR
66892: IFFALSE 66896
// exit ;
66894: GO 66986
// dist := 99999 ;
66896: LD_ADDR_VAR 0 5
66900: PUSH
66901: LD_INT 99999
66903: ST_TO_ADDR
// for i in points do
66904: LD_ADDR_VAR 0 4
66908: PUSH
66909: LD_VAR 0 2
66913: PUSH
66914: FOR_IN
66915: IFFALSE 66984
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66917: LD_ADDR_VAR 0 6
66921: PUSH
66922: LD_VAR 0 1
66926: PPUSH
66927: LD_VAR 0 4
66931: PUSH
66932: LD_INT 1
66934: ARRAY
66935: PPUSH
66936: LD_VAR 0 4
66940: PUSH
66941: LD_INT 2
66943: ARRAY
66944: PPUSH
66945: CALL_OW 297
66949: ST_TO_ADDR
// if tmpDist < dist then
66950: LD_VAR 0 6
66954: PUSH
66955: LD_VAR 0 5
66959: LESS
66960: IFFALSE 66982
// begin result := i ;
66962: LD_ADDR_VAR 0 3
66966: PUSH
66967: LD_VAR 0 4
66971: ST_TO_ADDR
// dist := tmpDist ;
66972: LD_ADDR_VAR 0 5
66976: PUSH
66977: LD_VAR 0 6
66981: ST_TO_ADDR
// end ; end ;
66982: GO 66914
66984: POP
66985: POP
// end ;
66986: LD_VAR 0 3
66990: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66991: LD_INT 0
66993: PPUSH
// uc_side := side ;
66994: LD_ADDR_OWVAR 20
66998: PUSH
66999: LD_VAR 0 1
67003: ST_TO_ADDR
// uc_nation := 3 ;
67004: LD_ADDR_OWVAR 21
67008: PUSH
67009: LD_INT 3
67011: ST_TO_ADDR
// vc_chassis := 25 ;
67012: LD_ADDR_OWVAR 37
67016: PUSH
67017: LD_INT 25
67019: ST_TO_ADDR
// vc_engine := engine_siberite ;
67020: LD_ADDR_OWVAR 39
67024: PUSH
67025: LD_INT 3
67027: ST_TO_ADDR
// vc_control := control_computer ;
67028: LD_ADDR_OWVAR 38
67032: PUSH
67033: LD_INT 3
67035: ST_TO_ADDR
// vc_weapon := 59 ;
67036: LD_ADDR_OWVAR 40
67040: PUSH
67041: LD_INT 59
67043: ST_TO_ADDR
// result := CreateVehicle ;
67044: LD_ADDR_VAR 0 5
67048: PUSH
67049: CALL_OW 45
67053: ST_TO_ADDR
// SetDir ( result , d ) ;
67054: LD_VAR 0 5
67058: PPUSH
67059: LD_VAR 0 4
67063: PPUSH
67064: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67068: LD_VAR 0 5
67072: PPUSH
67073: LD_VAR 0 2
67077: PPUSH
67078: LD_VAR 0 3
67082: PPUSH
67083: LD_INT 0
67085: PPUSH
67086: CALL_OW 48
// end ;
67090: LD_VAR 0 5
67094: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67095: LD_INT 0
67097: PPUSH
67098: PPUSH
67099: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67100: LD_ADDR_VAR 0 2
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67123: LD_VAR 0 1
67127: NOT
67128: PUSH
67129: LD_VAR 0 1
67133: PPUSH
67134: CALL_OW 264
67138: PUSH
67139: LD_INT 12
67141: PUSH
67142: LD_INT 51
67144: PUSH
67145: LD_INT 32
67147: PUSH
67148: LD_INT 89
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: IN
67157: NOT
67158: OR
67159: IFFALSE 67163
// exit ;
67161: GO 67261
// for i := 1 to 3 do
67163: LD_ADDR_VAR 0 3
67167: PUSH
67168: DOUBLE
67169: LD_INT 1
67171: DEC
67172: ST_TO_ADDR
67173: LD_INT 3
67175: PUSH
67176: FOR_TO
67177: IFFALSE 67259
// begin tmp := GetCargo ( cargo , i ) ;
67179: LD_ADDR_VAR 0 4
67183: PUSH
67184: LD_VAR 0 1
67188: PPUSH
67189: LD_VAR 0 3
67193: PPUSH
67194: CALL_OW 289
67198: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67199: LD_ADDR_VAR 0 2
67203: PUSH
67204: LD_VAR 0 2
67208: PPUSH
67209: LD_VAR 0 3
67213: PPUSH
67214: LD_VAR 0 4
67218: PPUSH
67219: CALL_OW 1
67223: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67224: LD_ADDR_VAR 0 2
67228: PUSH
67229: LD_VAR 0 2
67233: PPUSH
67234: LD_INT 4
67236: PPUSH
67237: LD_VAR 0 2
67241: PUSH
67242: LD_INT 4
67244: ARRAY
67245: PUSH
67246: LD_VAR 0 4
67250: PLUS
67251: PPUSH
67252: CALL_OW 1
67256: ST_TO_ADDR
// end ;
67257: GO 67176
67259: POP
67260: POP
// end ;
67261: LD_VAR 0 2
67265: RET
// export function Length ( array ) ; begin
67266: LD_INT 0
67268: PPUSH
// result := array + 0 ;
67269: LD_ADDR_VAR 0 2
67273: PUSH
67274: LD_VAR 0 1
67278: PUSH
67279: LD_INT 0
67281: PLUS
67282: ST_TO_ADDR
// end ;
67283: LD_VAR 0 2
67287: RET
// export function PrepareArray ( array ) ; begin
67288: LD_INT 0
67290: PPUSH
// result := array diff 0 ;
67291: LD_ADDR_VAR 0 2
67295: PUSH
67296: LD_VAR 0 1
67300: PUSH
67301: LD_INT 0
67303: DIFF
67304: ST_TO_ADDR
// if not result [ 1 ] then
67305: LD_VAR 0 2
67309: PUSH
67310: LD_INT 1
67312: ARRAY
67313: NOT
67314: IFFALSE 67334
// result := Delete ( result , 1 ) ;
67316: LD_ADDR_VAR 0 2
67320: PUSH
67321: LD_VAR 0 2
67325: PPUSH
67326: LD_INT 1
67328: PPUSH
67329: CALL_OW 3
67333: ST_TO_ADDR
// end ;
67334: LD_VAR 0 2
67338: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67339: LD_INT 0
67341: PPUSH
67342: PPUSH
67343: PPUSH
67344: PPUSH
// sibRocketRange := 25 ;
67345: LD_ADDR_VAR 0 6
67349: PUSH
67350: LD_INT 25
67352: ST_TO_ADDR
// result := false ;
67353: LD_ADDR_VAR 0 4
67357: PUSH
67358: LD_INT 0
67360: ST_TO_ADDR
// for i := 0 to 5 do
67361: LD_ADDR_VAR 0 5
67365: PUSH
67366: DOUBLE
67367: LD_INT 0
67369: DEC
67370: ST_TO_ADDR
67371: LD_INT 5
67373: PUSH
67374: FOR_TO
67375: IFFALSE 67442
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67377: LD_VAR 0 1
67381: PPUSH
67382: LD_VAR 0 5
67386: PPUSH
67387: LD_VAR 0 6
67391: PPUSH
67392: CALL_OW 272
67396: PPUSH
67397: LD_VAR 0 2
67401: PPUSH
67402: LD_VAR 0 5
67406: PPUSH
67407: LD_VAR 0 6
67411: PPUSH
67412: CALL_OW 273
67416: PPUSH
67417: LD_VAR 0 3
67421: PPUSH
67422: CALL_OW 309
67426: IFFALSE 67440
// begin result := true ;
67428: LD_ADDR_VAR 0 4
67432: PUSH
67433: LD_INT 1
67435: ST_TO_ADDR
// exit ;
67436: POP
67437: POP
67438: GO 67444
// end ;
67440: GO 67374
67442: POP
67443: POP
// end ;
67444: LD_VAR 0 4
67448: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67449: LD_INT 0
67451: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67452: LD_VAR 0 1
67456: PPUSH
67457: LD_VAR 0 2
67461: PPUSH
67462: LD_INT 0
67464: PPUSH
67465: LD_INT 0
67467: PPUSH
67468: LD_INT 1
67470: PPUSH
67471: LD_INT 0
67473: PPUSH
67474: CALL_OW 587
// end ;
67478: LD_VAR 0 3
67482: RET
// export function CenterOnNow ( unit ) ; begin
67483: LD_INT 0
67485: PPUSH
// result := IsInUnit ( unit ) ;
67486: LD_ADDR_VAR 0 2
67490: PUSH
67491: LD_VAR 0 1
67495: PPUSH
67496: CALL_OW 310
67500: ST_TO_ADDR
// if not result then
67501: LD_VAR 0 2
67505: NOT
67506: IFFALSE 67518
// result := unit ;
67508: LD_ADDR_VAR 0 2
67512: PUSH
67513: LD_VAR 0 1
67517: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67518: LD_VAR 0 1
67522: PPUSH
67523: CALL_OW 87
// end ;
67527: LD_VAR 0 2
67531: RET
// export function ComMoveHex ( unit , hex ) ; begin
67532: LD_INT 0
67534: PPUSH
// if not hex then
67535: LD_VAR 0 2
67539: NOT
67540: IFFALSE 67544
// exit ;
67542: GO 67597
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67544: LD_VAR 0 2
67548: PUSH
67549: LD_INT 1
67551: ARRAY
67552: PPUSH
67553: LD_VAR 0 2
67557: PUSH
67558: LD_INT 2
67560: ARRAY
67561: PPUSH
67562: CALL_OW 428
67566: IFFALSE 67570
// exit ;
67568: GO 67597
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67570: LD_VAR 0 1
67574: PPUSH
67575: LD_VAR 0 2
67579: PUSH
67580: LD_INT 1
67582: ARRAY
67583: PPUSH
67584: LD_VAR 0 2
67588: PUSH
67589: LD_INT 2
67591: ARRAY
67592: PPUSH
67593: CALL_OW 111
// end ;
67597: LD_VAR 0 3
67601: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67602: LD_INT 0
67604: PPUSH
67605: PPUSH
67606: PPUSH
// if not unit or not enemy then
67607: LD_VAR 0 1
67611: NOT
67612: PUSH
67613: LD_VAR 0 2
67617: NOT
67618: OR
67619: IFFALSE 67623
// exit ;
67621: GO 67747
// x := GetX ( enemy ) ;
67623: LD_ADDR_VAR 0 4
67627: PUSH
67628: LD_VAR 0 2
67632: PPUSH
67633: CALL_OW 250
67637: ST_TO_ADDR
// y := GetY ( enemy ) ;
67638: LD_ADDR_VAR 0 5
67642: PUSH
67643: LD_VAR 0 2
67647: PPUSH
67648: CALL_OW 251
67652: ST_TO_ADDR
// if ValidHex ( x , y ) then
67653: LD_VAR 0 4
67657: PPUSH
67658: LD_VAR 0 5
67662: PPUSH
67663: CALL_OW 488
67667: IFFALSE 67747
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67669: LD_VAR 0 2
67673: PPUSH
67674: CALL_OW 247
67678: PUSH
67679: LD_INT 3
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: IN
67689: PUSH
67690: LD_VAR 0 1
67694: PPUSH
67695: CALL_OW 255
67699: PPUSH
67700: LD_VAR 0 2
67704: PPUSH
67705: CALL_OW 292
67709: OR
67710: IFFALSE 67728
// ComAttackUnit ( unit , enemy ) else
67712: LD_VAR 0 1
67716: PPUSH
67717: LD_VAR 0 2
67721: PPUSH
67722: CALL_OW 115
67726: GO 67747
// ComAgressiveMove ( unit , x , y ) ;
67728: LD_VAR 0 1
67732: PPUSH
67733: LD_VAR 0 4
67737: PPUSH
67738: LD_VAR 0 5
67742: PPUSH
67743: CALL_OW 114
// end ;
67747: LD_VAR 0 3
67751: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67752: LD_INT 0
67754: PPUSH
67755: PPUSH
67756: PPUSH
// list := AreaToList ( area , 0 ) ;
67757: LD_ADDR_VAR 0 5
67761: PUSH
67762: LD_VAR 0 1
67766: PPUSH
67767: LD_INT 0
67769: PPUSH
67770: CALL_OW 517
67774: ST_TO_ADDR
// if not list then
67775: LD_VAR 0 5
67779: NOT
67780: IFFALSE 67784
// exit ;
67782: GO 67914
// if all then
67784: LD_VAR 0 2
67788: IFFALSE 67876
// begin for i := 1 to list [ 1 ] do
67790: LD_ADDR_VAR 0 4
67794: PUSH
67795: DOUBLE
67796: LD_INT 1
67798: DEC
67799: ST_TO_ADDR
67800: LD_VAR 0 5
67804: PUSH
67805: LD_INT 1
67807: ARRAY
67808: PUSH
67809: FOR_TO
67810: IFFALSE 67872
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67812: LD_ADDR_VAR 0 3
67816: PUSH
67817: LD_VAR 0 3
67821: PPUSH
67822: LD_VAR 0 3
67826: PUSH
67827: LD_INT 1
67829: PLUS
67830: PPUSH
67831: LD_VAR 0 5
67835: PUSH
67836: LD_INT 1
67838: ARRAY
67839: PUSH
67840: LD_VAR 0 4
67844: ARRAY
67845: PUSH
67846: LD_VAR 0 5
67850: PUSH
67851: LD_INT 2
67853: ARRAY
67854: PUSH
67855: LD_VAR 0 4
67859: ARRAY
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PPUSH
67865: CALL_OW 1
67869: ST_TO_ADDR
67870: GO 67809
67872: POP
67873: POP
// exit ;
67874: GO 67914
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67876: LD_ADDR_VAR 0 3
67880: PUSH
67881: LD_VAR 0 5
67885: PUSH
67886: LD_INT 1
67888: ARRAY
67889: PUSH
67890: LD_INT 1
67892: ARRAY
67893: PUSH
67894: LD_VAR 0 5
67898: PUSH
67899: LD_INT 2
67901: ARRAY
67902: PUSH
67903: LD_INT 1
67905: ARRAY
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: ST_TO_ADDR
// end ;
67914: LD_VAR 0 3
67918: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67919: LD_INT 0
67921: PPUSH
67922: PPUSH
// list := AreaToList ( area , 0 ) ;
67923: LD_ADDR_VAR 0 4
67927: PUSH
67928: LD_VAR 0 1
67932: PPUSH
67933: LD_INT 0
67935: PPUSH
67936: CALL_OW 517
67940: ST_TO_ADDR
// if not list then
67941: LD_VAR 0 4
67945: NOT
67946: IFFALSE 67950
// exit ;
67948: GO 67991
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67950: LD_ADDR_VAR 0 3
67954: PUSH
67955: LD_VAR 0 4
67959: PUSH
67960: LD_INT 1
67962: ARRAY
67963: PUSH
67964: LD_INT 1
67966: ARRAY
67967: PUSH
67968: LD_VAR 0 4
67972: PUSH
67973: LD_INT 2
67975: ARRAY
67976: PUSH
67977: LD_INT 1
67979: ARRAY
67980: PUSH
67981: LD_VAR 0 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// end ;
67991: LD_VAR 0 3
67995: RET
// export function First ( array ) ; begin
67996: LD_INT 0
67998: PPUSH
// if not array then
67999: LD_VAR 0 1
68003: NOT
68004: IFFALSE 68008
// exit ;
68006: GO 68022
// result := array [ 1 ] ;
68008: LD_ADDR_VAR 0 2
68012: PUSH
68013: LD_VAR 0 1
68017: PUSH
68018: LD_INT 1
68020: ARRAY
68021: ST_TO_ADDR
// end ;
68022: LD_VAR 0 2
68026: RET
// export function Last ( array ) ; begin
68027: LD_INT 0
68029: PPUSH
// if not array then
68030: LD_VAR 0 1
68034: NOT
68035: IFFALSE 68039
// exit ;
68037: GO 68055
// result := array [ array ] ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_VAR 0 1
68053: ARRAY
68054: ST_TO_ADDR
// end ;
68055: LD_VAR 0 2
68059: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68060: LD_INT 0
68062: PPUSH
68063: PPUSH
// result := [ ] ;
68064: LD_ADDR_VAR 0 5
68068: PUSH
68069: EMPTY
68070: ST_TO_ADDR
// if not array then
68071: LD_VAR 0 1
68075: NOT
68076: IFFALSE 68080
// exit ;
68078: GO 68192
// for i := 1 to array do
68080: LD_ADDR_VAR 0 6
68084: PUSH
68085: DOUBLE
68086: LD_INT 1
68088: DEC
68089: ST_TO_ADDR
68090: LD_VAR 0 1
68094: PUSH
68095: FOR_TO
68096: IFFALSE 68190
// if array [ i ] [ index ] = value then
68098: LD_VAR 0 1
68102: PUSH
68103: LD_VAR 0 6
68107: ARRAY
68108: PUSH
68109: LD_VAR 0 2
68113: ARRAY
68114: PUSH
68115: LD_VAR 0 3
68119: EQUAL
68120: IFFALSE 68188
// begin if indexColumn then
68122: LD_VAR 0 4
68126: IFFALSE 68162
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68128: LD_ADDR_VAR 0 5
68132: PUSH
68133: LD_VAR 0 5
68137: PPUSH
68138: LD_VAR 0 1
68142: PUSH
68143: LD_VAR 0 6
68147: ARRAY
68148: PUSH
68149: LD_VAR 0 4
68153: ARRAY
68154: PPUSH
68155: CALL 63530 0 2
68159: ST_TO_ADDR
68160: GO 68188
// result := Join ( result , array [ i ] ) ;
68162: LD_ADDR_VAR 0 5
68166: PUSH
68167: LD_VAR 0 5
68171: PPUSH
68172: LD_VAR 0 1
68176: PUSH
68177: LD_VAR 0 6
68181: ARRAY
68182: PPUSH
68183: CALL 63530 0 2
68187: ST_TO_ADDR
// end ;
68188: GO 68095
68190: POP
68191: POP
// end ;
68192: LD_VAR 0 5
68196: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68197: LD_INT 0
68199: PPUSH
68200: PPUSH
68201: PPUSH
// if btype = b_depot then
68202: LD_VAR 0 2
68206: PUSH
68207: LD_INT 0
68209: EQUAL
68210: IFFALSE 68222
// begin result := true ;
68212: LD_ADDR_VAR 0 3
68216: PUSH
68217: LD_INT 1
68219: ST_TO_ADDR
// exit ;
68220: GO 68338
// end ; pom := GetBase ( depot ) ;
68222: LD_ADDR_VAR 0 4
68226: PUSH
68227: LD_VAR 0 1
68231: PPUSH
68232: CALL_OW 274
68236: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68237: LD_ADDR_VAR 0 5
68241: PUSH
68242: LD_VAR 0 2
68246: PPUSH
68247: LD_VAR 0 1
68251: PPUSH
68252: CALL_OW 248
68256: PPUSH
68257: CALL_OW 450
68261: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68262: LD_ADDR_VAR 0 3
68266: PUSH
68267: LD_VAR 0 4
68271: PPUSH
68272: LD_INT 1
68274: PPUSH
68275: CALL_OW 275
68279: PUSH
68280: LD_VAR 0 5
68284: PUSH
68285: LD_INT 1
68287: ARRAY
68288: GREATEREQUAL
68289: PUSH
68290: LD_VAR 0 4
68294: PPUSH
68295: LD_INT 2
68297: PPUSH
68298: CALL_OW 275
68302: PUSH
68303: LD_VAR 0 5
68307: PUSH
68308: LD_INT 2
68310: ARRAY
68311: GREATEREQUAL
68312: AND
68313: PUSH
68314: LD_VAR 0 4
68318: PPUSH
68319: LD_INT 3
68321: PPUSH
68322: CALL_OW 275
68326: PUSH
68327: LD_VAR 0 5
68331: PUSH
68332: LD_INT 3
68334: ARRAY
68335: GREATEREQUAL
68336: AND
68337: ST_TO_ADDR
// end ;
68338: LD_VAR 0 3
68342: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68343: LD_INT 0
68345: PPUSH
// if not vehicles or not parkingPoint then
68346: LD_VAR 0 1
68350: NOT
68351: PUSH
68352: LD_VAR 0 2
68356: NOT
68357: OR
68358: IFFALSE 68362
// exit ;
68360: GO 68460
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68362: LD_ADDR_VAR 0 1
68366: PUSH
68367: LD_VAR 0 1
68371: PPUSH
68372: LD_INT 50
68374: PUSH
68375: EMPTY
68376: LIST
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: LD_INT 92
68383: PUSH
68384: LD_VAR 0 2
68388: PUSH
68389: LD_INT 1
68391: ARRAY
68392: PUSH
68393: LD_VAR 0 2
68397: PUSH
68398: LD_INT 2
68400: ARRAY
68401: PUSH
68402: LD_INT 8
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PPUSH
68419: CALL_OW 72
68423: ST_TO_ADDR
// if not vehicles then
68424: LD_VAR 0 1
68428: NOT
68429: IFFALSE 68433
// exit ;
68431: GO 68460
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: LD_VAR 0 2
68442: PUSH
68443: LD_INT 1
68445: ARRAY
68446: PPUSH
68447: LD_VAR 0 2
68451: PUSH
68452: LD_INT 2
68454: ARRAY
68455: PPUSH
68456: CALL_OW 111
// end ;
68460: LD_VAR 0 3
68464: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
68465: LD_INT 0
68467: PPUSH
68468: PPUSH
68469: PPUSH
// if not side or not area then
68470: LD_VAR 0 1
68474: NOT
68475: PUSH
68476: LD_VAR 0 2
68480: NOT
68481: OR
68482: IFFALSE 68486
// exit ;
68484: GO 68605
// tmp := AreaToList ( area , 0 ) ;
68486: LD_ADDR_VAR 0 5
68490: PUSH
68491: LD_VAR 0 2
68495: PPUSH
68496: LD_INT 0
68498: PPUSH
68499: CALL_OW 517
68503: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
68504: LD_ADDR_VAR 0 4
68508: PUSH
68509: DOUBLE
68510: LD_INT 1
68512: DEC
68513: ST_TO_ADDR
68514: LD_VAR 0 5
68518: PUSH
68519: LD_INT 1
68521: ARRAY
68522: PUSH
68523: FOR_TO
68524: IFFALSE 68603
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
68526: LD_VAR 0 5
68530: PUSH
68531: LD_INT 1
68533: ARRAY
68534: PUSH
68535: LD_VAR 0 4
68539: ARRAY
68540: PPUSH
68541: LD_VAR 0 5
68545: PUSH
68546: LD_INT 2
68548: ARRAY
68549: PUSH
68550: LD_VAR 0 4
68554: ARRAY
68555: PPUSH
68556: CALL_OW 351
68560: IFFALSE 68601
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
68562: LD_VAR 0 5
68566: PUSH
68567: LD_INT 1
68569: ARRAY
68570: PUSH
68571: LD_VAR 0 4
68575: ARRAY
68576: PPUSH
68577: LD_VAR 0 5
68581: PUSH
68582: LD_INT 2
68584: ARRAY
68585: PUSH
68586: LD_VAR 0 4
68590: ARRAY
68591: PPUSH
68592: LD_VAR 0 1
68596: PPUSH
68597: CALL_OW 244
// end ;
68601: GO 68523
68603: POP
68604: POP
// end ; end_of_file
68605: LD_VAR 0 3
68609: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68610: LD_VAR 0 1
68614: PPUSH
68615: LD_VAR 0 2
68619: PPUSH
68620: LD_VAR 0 3
68624: PPUSH
68625: LD_VAR 0 4
68629: PPUSH
68630: LD_VAR 0 5
68634: PPUSH
68635: LD_VAR 0 6
68639: PPUSH
68640: CALL 5135 0 6
// end ;
68644: PPOPN 6
68646: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68647: LD_INT 0
68649: PPUSH
// begin if not units then
68650: LD_VAR 0 1
68654: NOT
68655: IFFALSE 68659
// exit ;
68657: GO 68659
// end ;
68659: PPOPN 7
68661: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68662: CALL 5022 0 0
// end ;
68666: PPOPN 1
68668: END
