// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6153 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6131
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 16250 0 0
5948: GO 6131
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 16383 0 0
5963: GO 6131
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 4 :
5974: CALL 16468 0 0
5978: GO 6131
5980: LD_INT 4
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 6010
5988: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
5989: LD_VAR 0 4
5993: PPUSH
5994: LD_VAR 0 5
5998: PPUSH
5999: LD_VAR 0 6
6003: PPUSH
6004: CALL 16558 0 3
6008: GO 6131
6010: LD_INT 5
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackSpawnVehicle ; 6 :
6019: CALL 16619 0 0
6023: GO 6131
6025: LD_INT 6
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackInvincible ; 7 :
6034: CALL 17165 0 0
6038: GO 6131
6040: LD_INT 7
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackInvisible ; 8 :
6049: CALL 17276 0 0
6053: GO 6131
6055: LD_INT 8
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6070
6063: POP
// hHackChangeYourSide ; 9 :
6064: CALL 17333 0 0
6068: GO 6131
6070: LD_INT 9
6072: DOUBLE
6073: EQUAL
6074: IFTRUE 6078
6076: GO 6085
6078: POP
// hHackChangeUnitSide ; 10 :
6079: CALL 17375 0 0
6083: GO 6131
6085: LD_INT 10
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6100
6093: POP
// hHackFog ; 11 :
6094: CALL 17476 0 0
6098: GO 6131
6100: LD_INT 11
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6115
6108: POP
// hHackApeman ; 12 :
6109: CALL 17491 0 0
6113: GO 6131
6115: LD_INT 12
6117: DOUBLE
6118: EQUAL
6119: IFTRUE 6123
6121: GO 6130
6123: POP
// hHackBoom ; end ;
6124: CALL 17576 0 0
6128: GO 6131
6130: POP
// end ; end ;
6131: PPOPN 6
6133: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6134: GO 6136
6136: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6137: LD_STRING initStreamRollete();
6139: PPUSH
6140: CALL_OW 559
// InitStreamMode ;
6144: CALL 6153 0 0
// DefineStreamItems ( ) ;
6148: CALL 6593 0 0
// end ;
6152: END
// function InitStreamMode ; begin
6153: LD_INT 0
6155: PPUSH
// streamModeActive := false ;
6156: LD_ADDR_EXP 15
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// normalCounter := 36 ;
6164: LD_ADDR_EXP 16
6168: PUSH
6169: LD_INT 36
6171: ST_TO_ADDR
// hardcoreCounter := 16 ;
6172: LD_ADDR_EXP 17
6176: PUSH
6177: LD_INT 16
6179: ST_TO_ADDR
// sRocket := false ;
6180: LD_ADDR_EXP 20
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sSpeed := false ;
6188: LD_ADDR_EXP 19
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sEngine := false ;
6196: LD_ADDR_EXP 21
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sSpec := false ;
6204: LD_ADDR_EXP 18
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sLevel := false ;
6212: LD_ADDR_EXP 22
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sArmoury := false ;
6220: LD_ADDR_EXP 23
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sRadar := false ;
6228: LD_ADDR_EXP 24
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sBunker := false ;
6236: LD_ADDR_EXP 25
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sHack := false ;
6244: LD_ADDR_EXP 26
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sFire := false ;
6252: LD_ADDR_EXP 27
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sRefresh := false ;
6260: LD_ADDR_EXP 28
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sExp := false ;
6268: LD_ADDR_EXP 29
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sDepot := false ;
6276: LD_ADDR_EXP 30
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sFlag := false ;
6284: LD_ADDR_EXP 31
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sKamikadze := false ;
6292: LD_ADDR_EXP 39
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sTroll := false ;
6300: LD_ADDR_EXP 40
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// sSlow := false ;
6308: LD_ADDR_EXP 41
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// sLack := false ;
6316: LD_ADDR_EXP 42
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// sTank := false ;
6324: LD_ADDR_EXP 44
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// sRemote := false ;
6332: LD_ADDR_EXP 45
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// sPowell := false ;
6340: LD_ADDR_EXP 46
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// sTeleport := false ;
6348: LD_ADDR_EXP 49
6352: PUSH
6353: LD_INT 0
6355: ST_TO_ADDR
// sOilTower := false ;
6356: LD_ADDR_EXP 51
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// sShovel := false ;
6364: LD_ADDR_EXP 52
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// sSheik := false ;
6372: LD_ADDR_EXP 53
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// sEarthquake := false ;
6380: LD_ADDR_EXP 55
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// sAI := false ;
6388: LD_ADDR_EXP 56
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// sCargo := false ;
6396: LD_ADDR_EXP 59
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// sDLaser := false ;
6404: LD_ADDR_EXP 60
6408: PUSH
6409: LD_INT 0
6411: ST_TO_ADDR
// sExchange := false ;
6412: LD_ADDR_EXP 61
6416: PUSH
6417: LD_INT 0
6419: ST_TO_ADDR
// sFac := false ;
6420: LD_ADDR_EXP 62
6424: PUSH
6425: LD_INT 0
6427: ST_TO_ADDR
// sPower := false ;
6428: LD_ADDR_EXP 63
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// sRandom := false ;
6436: LD_ADDR_EXP 64
6440: PUSH
6441: LD_INT 0
6443: ST_TO_ADDR
// sShield := false ;
6444: LD_ADDR_EXP 65
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// sTime := false ;
6452: LD_ADDR_EXP 66
6456: PUSH
6457: LD_INT 0
6459: ST_TO_ADDR
// sTools := false ;
6460: LD_ADDR_EXP 67
6464: PUSH
6465: LD_INT 0
6467: ST_TO_ADDR
// sSold := false ;
6468: LD_ADDR_EXP 32
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// sDiff := false ;
6476: LD_ADDR_EXP 33
6480: PUSH
6481: LD_INT 0
6483: ST_TO_ADDR
// sFog := false ;
6484: LD_ADDR_EXP 36
6488: PUSH
6489: LD_INT 0
6491: ST_TO_ADDR
// sReset := false ;
6492: LD_ADDR_EXP 37
6496: PUSH
6497: LD_INT 0
6499: ST_TO_ADDR
// sSun := false ;
6500: LD_ADDR_EXP 38
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// sTiger := false ;
6508: LD_ADDR_EXP 34
6512: PUSH
6513: LD_INT 0
6515: ST_TO_ADDR
// sBomb := false ;
6516: LD_ADDR_EXP 35
6520: PUSH
6521: LD_INT 0
6523: ST_TO_ADDR
// sWound := false ;
6524: LD_ADDR_EXP 43
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// sBetray := false ;
6532: LD_ADDR_EXP 47
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// sContamin := false ;
6540: LD_ADDR_EXP 48
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// sOil := false ;
6548: LD_ADDR_EXP 50
6552: PUSH
6553: LD_INT 0
6555: ST_TO_ADDR
// sStu := false ;
6556: LD_ADDR_EXP 54
6560: PUSH
6561: LD_INT 0
6563: ST_TO_ADDR
// sBazooka := false ;
6564: LD_ADDR_EXP 57
6568: PUSH
6569: LD_INT 0
6571: ST_TO_ADDR
// sMortar := false ;
6572: LD_ADDR_EXP 58
6576: PUSH
6577: LD_INT 0
6579: ST_TO_ADDR
// sRanger := false ;
6580: LD_ADDR_EXP 68
6584: PUSH
6585: LD_INT 0
6587: ST_TO_ADDR
// end ;
6588: LD_VAR 0 1
6592: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
// result := [ ] ;
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: EMPTY
6606: ST_TO_ADDR
// if campaign_id = 1 then
6607: LD_OWVAR 69
6611: PUSH
6612: LD_INT 1
6614: EQUAL
6615: IFFALSE 9553
// begin case mission_number of 1 :
6617: LD_OWVAR 70
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6694
6630: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6631: LD_ADDR_VAR 0 1
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 4
6641: PUSH
6642: LD_INT 11
6644: PUSH
6645: LD_INT 12
6647: PUSH
6648: LD_INT 15
6650: PUSH
6651: LD_INT 16
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_INT 23
6659: PUSH
6660: LD_INT 26
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 101
6676: PUSH
6677: LD_INT 102
6679: PUSH
6680: LD_INT 106
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: ST_TO_ADDR
6692: GO 9551
6694: LD_INT 2
6696: DOUBLE
6697: EQUAL
6698: IFTRUE 6702
6700: GO 6774
6702: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6703: LD_ADDR_VAR 0 1
6707: PUSH
6708: LD_INT 2
6710: PUSH
6711: LD_INT 4
6713: PUSH
6714: LD_INT 11
6716: PUSH
6717: LD_INT 12
6719: PUSH
6720: LD_INT 15
6722: PUSH
6723: LD_INT 16
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 23
6731: PUSH
6732: LD_INT 26
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 101
6748: PUSH
6749: LD_INT 102
6751: PUSH
6752: LD_INT 105
6754: PUSH
6755: LD_INT 106
6757: PUSH
6758: LD_INT 108
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: ST_TO_ADDR
6772: GO 9551
6774: LD_INT 3
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6858
6782: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6783: LD_ADDR_VAR 0 1
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: LD_INT 4
6793: PUSH
6794: LD_INT 5
6796: PUSH
6797: LD_INT 11
6799: PUSH
6800: LD_INT 12
6802: PUSH
6803: LD_INT 15
6805: PUSH
6806: LD_INT 16
6808: PUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 26
6814: PUSH
6815: LD_INT 36
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 101
6832: PUSH
6833: LD_INT 102
6835: PUSH
6836: LD_INT 105
6838: PUSH
6839: LD_INT 106
6841: PUSH
6842: LD_INT 108
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: ST_TO_ADDR
6856: GO 9551
6858: LD_INT 4
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6950
6866: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6867: LD_ADDR_VAR 0 1
6871: PUSH
6872: LD_INT 2
6874: PUSH
6875: LD_INT 4
6877: PUSH
6878: LD_INT 5
6880: PUSH
6881: LD_INT 8
6883: PUSH
6884: LD_INT 11
6886: PUSH
6887: LD_INT 12
6889: PUSH
6890: LD_INT 15
6892: PUSH
6893: LD_INT 16
6895: PUSH
6896: LD_INT 22
6898: PUSH
6899: LD_INT 23
6901: PUSH
6902: LD_INT 26
6904: PUSH
6905: LD_INT 36
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 108
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: ST_TO_ADDR
6948: GO 9551
6950: LD_INT 5
6952: DOUBLE
6953: EQUAL
6954: IFTRUE 6958
6956: GO 7058
6958: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6959: LD_ADDR_VAR 0 1
6963: PUSH
6964: LD_INT 2
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: LD_INT 5
6972: PUSH
6973: LD_INT 6
6975: PUSH
6976: LD_INT 8
6978: PUSH
6979: LD_INT 11
6981: PUSH
6982: LD_INT 12
6984: PUSH
6985: LD_INT 15
6987: PUSH
6988: LD_INT 16
6990: PUSH
6991: LD_INT 22
6993: PUSH
6994: LD_INT 23
6996: PUSH
6997: LD_INT 25
6999: PUSH
7000: LD_INT 26
7002: PUSH
7003: LD_INT 36
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 101
7024: PUSH
7025: LD_INT 102
7027: PUSH
7028: LD_INT 105
7030: PUSH
7031: LD_INT 106
7033: PUSH
7034: LD_INT 108
7036: PUSH
7037: LD_INT 109
7039: PUSH
7040: LD_INT 112
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: ST_TO_ADDR
7056: GO 9551
7058: LD_INT 6
7060: DOUBLE
7061: EQUAL
7062: IFTRUE 7066
7064: GO 7186
7066: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7067: LD_ADDR_VAR 0 1
7071: PUSH
7072: LD_INT 2
7074: PUSH
7075: LD_INT 4
7077: PUSH
7078: LD_INT 5
7080: PUSH
7081: LD_INT 6
7083: PUSH
7084: LD_INT 8
7086: PUSH
7087: LD_INT 11
7089: PUSH
7090: LD_INT 12
7092: PUSH
7093: LD_INT 15
7095: PUSH
7096: LD_INT 16
7098: PUSH
7099: LD_INT 20
7101: PUSH
7102: LD_INT 21
7104: PUSH
7105: LD_INT 22
7107: PUSH
7108: LD_INT 23
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 26
7116: PUSH
7117: LD_INT 30
7119: PUSH
7120: LD_INT 31
7122: PUSH
7123: LD_INT 32
7125: PUSH
7126: LD_INT 36
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 101
7152: PUSH
7153: LD_INT 102
7155: PUSH
7156: LD_INT 105
7158: PUSH
7159: LD_INT 106
7161: PUSH
7162: LD_INT 108
7164: PUSH
7165: LD_INT 109
7167: PUSH
7168: LD_INT 112
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 9551
7186: LD_INT 7
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7294
7194: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7195: LD_ADDR_VAR 0 1
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 4
7205: PUSH
7206: LD_INT 5
7208: PUSH
7209: LD_INT 7
7211: PUSH
7212: LD_INT 11
7214: PUSH
7215: LD_INT 12
7217: PUSH
7218: LD_INT 15
7220: PUSH
7221: LD_INT 16
7223: PUSH
7224: LD_INT 20
7226: PUSH
7227: LD_INT 21
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_INT 23
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 26
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 101
7260: PUSH
7261: LD_INT 102
7263: PUSH
7264: LD_INT 103
7266: PUSH
7267: LD_INT 105
7269: PUSH
7270: LD_INT 106
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 112
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 9551
7294: LD_INT 8
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7430
7302: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7303: LD_ADDR_VAR 0 1
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: LD_INT 4
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: LD_INT 11
7328: PUSH
7329: LD_INT 12
7331: PUSH
7332: LD_INT 15
7334: PUSH
7335: LD_INT 16
7337: PUSH
7338: LD_INT 20
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 23
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 26
7355: PUSH
7356: LD_INT 30
7358: PUSH
7359: LD_INT 31
7361: PUSH
7362: LD_INT 32
7364: PUSH
7365: LD_INT 36
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: LD_INT 101
7392: PUSH
7393: LD_INT 102
7395: PUSH
7396: LD_INT 103
7398: PUSH
7399: LD_INT 105
7401: PUSH
7402: LD_INT 106
7404: PUSH
7405: LD_INT 108
7407: PUSH
7408: LD_INT 109
7410: PUSH
7411: LD_INT 112
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: ST_TO_ADDR
7428: GO 9551
7430: LD_INT 9
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7574
7438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7439: LD_ADDR_VAR 0 1
7443: PUSH
7444: LD_INT 2
7446: PUSH
7447: LD_INT 4
7449: PUSH
7450: LD_INT 5
7452: PUSH
7453: LD_INT 6
7455: PUSH
7456: LD_INT 7
7458: PUSH
7459: LD_INT 8
7461: PUSH
7462: LD_INT 11
7464: PUSH
7465: LD_INT 12
7467: PUSH
7468: LD_INT 15
7470: PUSH
7471: LD_INT 16
7473: PUSH
7474: LD_INT 20
7476: PUSH
7477: LD_INT 21
7479: PUSH
7480: LD_INT 22
7482: PUSH
7483: LD_INT 23
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 26
7491: PUSH
7492: LD_INT 28
7494: PUSH
7495: LD_INT 30
7497: PUSH
7498: LD_INT 31
7500: PUSH
7501: LD_INT 32
7503: PUSH
7504: LD_INT 36
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 101
7532: PUSH
7533: LD_INT 102
7535: PUSH
7536: LD_INT 103
7538: PUSH
7539: LD_INT 105
7541: PUSH
7542: LD_INT 106
7544: PUSH
7545: LD_INT 108
7547: PUSH
7548: LD_INT 109
7550: PUSH
7551: LD_INT 112
7553: PUSH
7554: LD_INT 114
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: ST_TO_ADDR
7572: GO 9551
7574: LD_INT 10
7576: DOUBLE
7577: EQUAL
7578: IFTRUE 7582
7580: GO 7766
7582: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7583: LD_ADDR_VAR 0 1
7587: PUSH
7588: LD_INT 2
7590: PUSH
7591: LD_INT 4
7593: PUSH
7594: LD_INT 5
7596: PUSH
7597: LD_INT 6
7599: PUSH
7600: LD_INT 7
7602: PUSH
7603: LD_INT 8
7605: PUSH
7606: LD_INT 9
7608: PUSH
7609: LD_INT 10
7611: PUSH
7612: LD_INT 11
7614: PUSH
7615: LD_INT 12
7617: PUSH
7618: LD_INT 13
7620: PUSH
7621: LD_INT 14
7623: PUSH
7624: LD_INT 15
7626: PUSH
7627: LD_INT 16
7629: PUSH
7630: LD_INT 17
7632: PUSH
7633: LD_INT 18
7635: PUSH
7636: LD_INT 19
7638: PUSH
7639: LD_INT 20
7641: PUSH
7642: LD_INT 21
7644: PUSH
7645: LD_INT 22
7647: PUSH
7648: LD_INT 23
7650: PUSH
7651: LD_INT 24
7653: PUSH
7654: LD_INT 25
7656: PUSH
7657: LD_INT 26
7659: PUSH
7660: LD_INT 28
7662: PUSH
7663: LD_INT 30
7665: PUSH
7666: LD_INT 31
7668: PUSH
7669: LD_INT 32
7671: PUSH
7672: LD_INT 36
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 101
7708: PUSH
7709: LD_INT 102
7711: PUSH
7712: LD_INT 103
7714: PUSH
7715: LD_INT 104
7717: PUSH
7718: LD_INT 105
7720: PUSH
7721: LD_INT 106
7723: PUSH
7724: LD_INT 107
7726: PUSH
7727: LD_INT 108
7729: PUSH
7730: LD_INT 109
7732: PUSH
7733: LD_INT 110
7735: PUSH
7736: LD_INT 111
7738: PUSH
7739: LD_INT 112
7741: PUSH
7742: LD_INT 114
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: ST_TO_ADDR
7764: GO 9551
7766: LD_INT 11
7768: DOUBLE
7769: EQUAL
7770: IFTRUE 7774
7772: GO 7966
7774: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7775: LD_ADDR_VAR 0 1
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 4
7788: PUSH
7789: LD_INT 5
7791: PUSH
7792: LD_INT 6
7794: PUSH
7795: LD_INT 7
7797: PUSH
7798: LD_INT 8
7800: PUSH
7801: LD_INT 9
7803: PUSH
7804: LD_INT 10
7806: PUSH
7807: LD_INT 11
7809: PUSH
7810: LD_INT 12
7812: PUSH
7813: LD_INT 13
7815: PUSH
7816: LD_INT 14
7818: PUSH
7819: LD_INT 15
7821: PUSH
7822: LD_INT 16
7824: PUSH
7825: LD_INT 17
7827: PUSH
7828: LD_INT 18
7830: PUSH
7831: LD_INT 19
7833: PUSH
7834: LD_INT 20
7836: PUSH
7837: LD_INT 21
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_INT 23
7845: PUSH
7846: LD_INT 24
7848: PUSH
7849: LD_INT 25
7851: PUSH
7852: LD_INT 26
7854: PUSH
7855: LD_INT 28
7857: PUSH
7858: LD_INT 30
7860: PUSH
7861: LD_INT 31
7863: PUSH
7864: LD_INT 32
7866: PUSH
7867: LD_INT 34
7869: PUSH
7870: LD_INT 36
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 101
7908: PUSH
7909: LD_INT 102
7911: PUSH
7912: LD_INT 103
7914: PUSH
7915: LD_INT 104
7917: PUSH
7918: LD_INT 105
7920: PUSH
7921: LD_INT 106
7923: PUSH
7924: LD_INT 107
7926: PUSH
7927: LD_INT 108
7929: PUSH
7930: LD_INT 109
7932: PUSH
7933: LD_INT 110
7935: PUSH
7936: LD_INT 111
7938: PUSH
7939: LD_INT 112
7941: PUSH
7942: LD_INT 114
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: ST_TO_ADDR
7964: GO 9551
7966: LD_INT 12
7968: DOUBLE
7969: EQUAL
7970: IFTRUE 7974
7972: GO 8182
7974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7975: LD_ADDR_VAR 0 1
7979: PUSH
7980: LD_INT 1
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 3
7988: PUSH
7989: LD_INT 4
7991: PUSH
7992: LD_INT 5
7994: PUSH
7995: LD_INT 6
7997: PUSH
7998: LD_INT 7
8000: PUSH
8001: LD_INT 8
8003: PUSH
8004: LD_INT 9
8006: PUSH
8007: LD_INT 10
8009: PUSH
8010: LD_INT 11
8012: PUSH
8013: LD_INT 12
8015: PUSH
8016: LD_INT 13
8018: PUSH
8019: LD_INT 14
8021: PUSH
8022: LD_INT 15
8024: PUSH
8025: LD_INT 16
8027: PUSH
8028: LD_INT 17
8030: PUSH
8031: LD_INT 18
8033: PUSH
8034: LD_INT 19
8036: PUSH
8037: LD_INT 20
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 22
8045: PUSH
8046: LD_INT 23
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: LD_INT 25
8054: PUSH
8055: LD_INT 26
8057: PUSH
8058: LD_INT 27
8060: PUSH
8061: LD_INT 28
8063: PUSH
8064: LD_INT 30
8066: PUSH
8067: LD_INT 31
8069: PUSH
8070: LD_INT 32
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 34
8078: PUSH
8079: LD_INT 36
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 101
8120: PUSH
8121: LD_INT 102
8123: PUSH
8124: LD_INT 103
8126: PUSH
8127: LD_INT 104
8129: PUSH
8130: LD_INT 105
8132: PUSH
8133: LD_INT 106
8135: PUSH
8136: LD_INT 107
8138: PUSH
8139: LD_INT 108
8141: PUSH
8142: LD_INT 109
8144: PUSH
8145: LD_INT 110
8147: PUSH
8148: LD_INT 111
8150: PUSH
8151: LD_INT 112
8153: PUSH
8154: LD_INT 113
8156: PUSH
8157: LD_INT 114
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: ST_TO_ADDR
8180: GO 9551
8182: LD_INT 13
8184: DOUBLE
8185: EQUAL
8186: IFTRUE 8190
8188: GO 8386
8190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8191: LD_ADDR_VAR 0 1
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: LD_INT 2
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: LD_INT 4
8207: PUSH
8208: LD_INT 5
8210: PUSH
8211: LD_INT 8
8213: PUSH
8214: LD_INT 9
8216: PUSH
8217: LD_INT 10
8219: PUSH
8220: LD_INT 11
8222: PUSH
8223: LD_INT 12
8225: PUSH
8226: LD_INT 14
8228: PUSH
8229: LD_INT 15
8231: PUSH
8232: LD_INT 16
8234: PUSH
8235: LD_INT 17
8237: PUSH
8238: LD_INT 18
8240: PUSH
8241: LD_INT 19
8243: PUSH
8244: LD_INT 20
8246: PUSH
8247: LD_INT 21
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 23
8255: PUSH
8256: LD_INT 24
8258: PUSH
8259: LD_INT 25
8261: PUSH
8262: LD_INT 26
8264: PUSH
8265: LD_INT 27
8267: PUSH
8268: LD_INT 28
8270: PUSH
8271: LD_INT 30
8273: PUSH
8274: LD_INT 31
8276: PUSH
8277: LD_INT 32
8279: PUSH
8280: LD_INT 33
8282: PUSH
8283: LD_INT 34
8285: PUSH
8286: LD_INT 36
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 101
8324: PUSH
8325: LD_INT 102
8327: PUSH
8328: LD_INT 103
8330: PUSH
8331: LD_INT 104
8333: PUSH
8334: LD_INT 105
8336: PUSH
8337: LD_INT 106
8339: PUSH
8340: LD_INT 107
8342: PUSH
8343: LD_INT 108
8345: PUSH
8346: LD_INT 109
8348: PUSH
8349: LD_INT 110
8351: PUSH
8352: LD_INT 111
8354: PUSH
8355: LD_INT 112
8357: PUSH
8358: LD_INT 113
8360: PUSH
8361: LD_INT 114
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: ST_TO_ADDR
8384: GO 9551
8386: LD_INT 14
8388: DOUBLE
8389: EQUAL
8390: IFTRUE 8394
8392: GO 8606
8394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8395: LD_ADDR_VAR 0 1
8399: PUSH
8400: LD_INT 1
8402: PUSH
8403: LD_INT 2
8405: PUSH
8406: LD_INT 3
8408: PUSH
8409: LD_INT 4
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: LD_INT 6
8417: PUSH
8418: LD_INT 7
8420: PUSH
8421: LD_INT 8
8423: PUSH
8424: LD_INT 9
8426: PUSH
8427: LD_INT 10
8429: PUSH
8430: LD_INT 11
8432: PUSH
8433: LD_INT 12
8435: PUSH
8436: LD_INT 13
8438: PUSH
8439: LD_INT 14
8441: PUSH
8442: LD_INT 15
8444: PUSH
8445: LD_INT 16
8447: PUSH
8448: LD_INT 17
8450: PUSH
8451: LD_INT 18
8453: PUSH
8454: LD_INT 19
8456: PUSH
8457: LD_INT 20
8459: PUSH
8460: LD_INT 21
8462: PUSH
8463: LD_INT 22
8465: PUSH
8466: LD_INT 23
8468: PUSH
8469: LD_INT 24
8471: PUSH
8472: LD_INT 25
8474: PUSH
8475: LD_INT 26
8477: PUSH
8478: LD_INT 27
8480: PUSH
8481: LD_INT 28
8483: PUSH
8484: LD_INT 29
8486: PUSH
8487: LD_INT 30
8489: PUSH
8490: LD_INT 31
8492: PUSH
8493: LD_INT 32
8495: PUSH
8496: LD_INT 33
8498: PUSH
8499: LD_INT 34
8501: PUSH
8502: LD_INT 36
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 101
8544: PUSH
8545: LD_INT 102
8547: PUSH
8548: LD_INT 103
8550: PUSH
8551: LD_INT 104
8553: PUSH
8554: LD_INT 105
8556: PUSH
8557: LD_INT 106
8559: PUSH
8560: LD_INT 107
8562: PUSH
8563: LD_INT 108
8565: PUSH
8566: LD_INT 109
8568: PUSH
8569: LD_INT 110
8571: PUSH
8572: LD_INT 111
8574: PUSH
8575: LD_INT 112
8577: PUSH
8578: LD_INT 113
8580: PUSH
8581: LD_INT 114
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: ST_TO_ADDR
8604: GO 9551
8606: LD_INT 15
8608: DOUBLE
8609: EQUAL
8610: IFTRUE 8614
8612: GO 8826
8614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8615: LD_ADDR_VAR 0 1
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 3
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: LD_INT 6
8637: PUSH
8638: LD_INT 7
8640: PUSH
8641: LD_INT 8
8643: PUSH
8644: LD_INT 9
8646: PUSH
8647: LD_INT 10
8649: PUSH
8650: LD_INT 11
8652: PUSH
8653: LD_INT 12
8655: PUSH
8656: LD_INT 13
8658: PUSH
8659: LD_INT 14
8661: PUSH
8662: LD_INT 15
8664: PUSH
8665: LD_INT 16
8667: PUSH
8668: LD_INT 17
8670: PUSH
8671: LD_INT 18
8673: PUSH
8674: LD_INT 19
8676: PUSH
8677: LD_INT 20
8679: PUSH
8680: LD_INT 21
8682: PUSH
8683: LD_INT 22
8685: PUSH
8686: LD_INT 23
8688: PUSH
8689: LD_INT 24
8691: PUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 26
8697: PUSH
8698: LD_INT 27
8700: PUSH
8701: LD_INT 28
8703: PUSH
8704: LD_INT 29
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 31
8712: PUSH
8713: LD_INT 32
8715: PUSH
8716: LD_INT 33
8718: PUSH
8719: LD_INT 34
8721: PUSH
8722: LD_INT 36
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 101
8764: PUSH
8765: LD_INT 102
8767: PUSH
8768: LD_INT 103
8770: PUSH
8771: LD_INT 104
8773: PUSH
8774: LD_INT 105
8776: PUSH
8777: LD_INT 106
8779: PUSH
8780: LD_INT 107
8782: PUSH
8783: LD_INT 108
8785: PUSH
8786: LD_INT 109
8788: PUSH
8789: LD_INT 110
8791: PUSH
8792: LD_INT 111
8794: PUSH
8795: LD_INT 112
8797: PUSH
8798: LD_INT 113
8800: PUSH
8801: LD_INT 114
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: ST_TO_ADDR
8824: GO 9551
8826: LD_INT 16
8828: DOUBLE
8829: EQUAL
8830: IFTRUE 8834
8832: GO 8958
8834: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8835: LD_ADDR_VAR 0 1
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: LD_INT 4
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: LD_INT 7
8851: PUSH
8852: LD_INT 11
8854: PUSH
8855: LD_INT 12
8857: PUSH
8858: LD_INT 15
8860: PUSH
8861: LD_INT 16
8863: PUSH
8864: LD_INT 20
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 23
8875: PUSH
8876: LD_INT 25
8878: PUSH
8879: LD_INT 26
8881: PUSH
8882: LD_INT 30
8884: PUSH
8885: LD_INT 31
8887: PUSH
8888: LD_INT 32
8890: PUSH
8891: LD_INT 33
8893: PUSH
8894: LD_INT 34
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 101
8920: PUSH
8921: LD_INT 102
8923: PUSH
8924: LD_INT 103
8926: PUSH
8927: LD_INT 106
8929: PUSH
8930: LD_INT 108
8932: PUSH
8933: LD_INT 112
8935: PUSH
8936: LD_INT 113
8938: PUSH
8939: LD_INT 114
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: ST_TO_ADDR
8956: GO 9551
8958: LD_INT 17
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 9178
8966: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8967: LD_ADDR_VAR 0 1
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: LD_INT 2
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: LD_INT 4
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: LD_INT 6
8989: PUSH
8990: LD_INT 7
8992: PUSH
8993: LD_INT 8
8995: PUSH
8996: LD_INT 9
8998: PUSH
8999: LD_INT 10
9001: PUSH
9002: LD_INT 11
9004: PUSH
9005: LD_INT 12
9007: PUSH
9008: LD_INT 13
9010: PUSH
9011: LD_INT 14
9013: PUSH
9014: LD_INT 15
9016: PUSH
9017: LD_INT 16
9019: PUSH
9020: LD_INT 17
9022: PUSH
9023: LD_INT 18
9025: PUSH
9026: LD_INT 19
9028: PUSH
9029: LD_INT 20
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 22
9037: PUSH
9038: LD_INT 23
9040: PUSH
9041: LD_INT 24
9043: PUSH
9044: LD_INT 25
9046: PUSH
9047: LD_INT 26
9049: PUSH
9050: LD_INT 27
9052: PUSH
9053: LD_INT 28
9055: PUSH
9056: LD_INT 29
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 31
9064: PUSH
9065: LD_INT 32
9067: PUSH
9068: LD_INT 33
9070: PUSH
9071: LD_INT 34
9073: PUSH
9074: LD_INT 36
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 101
9116: PUSH
9117: LD_INT 102
9119: PUSH
9120: LD_INT 103
9122: PUSH
9123: LD_INT 104
9125: PUSH
9126: LD_INT 105
9128: PUSH
9129: LD_INT 106
9131: PUSH
9132: LD_INT 107
9134: PUSH
9135: LD_INT 108
9137: PUSH
9138: LD_INT 109
9140: PUSH
9141: LD_INT 110
9143: PUSH
9144: LD_INT 111
9146: PUSH
9147: LD_INT 112
9149: PUSH
9150: LD_INT 113
9152: PUSH
9153: LD_INT 114
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ST_TO_ADDR
9176: GO 9551
9178: LD_INT 18
9180: DOUBLE
9181: EQUAL
9182: IFTRUE 9186
9184: GO 9322
9186: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9187: LD_ADDR_VAR 0 1
9191: PUSH
9192: LD_INT 2
9194: PUSH
9195: LD_INT 4
9197: PUSH
9198: LD_INT 5
9200: PUSH
9201: LD_INT 7
9203: PUSH
9204: LD_INT 11
9206: PUSH
9207: LD_INT 12
9209: PUSH
9210: LD_INT 15
9212: PUSH
9213: LD_INT 16
9215: PUSH
9216: LD_INT 20
9218: PUSH
9219: LD_INT 21
9221: PUSH
9222: LD_INT 22
9224: PUSH
9225: LD_INT 23
9227: PUSH
9228: LD_INT 25
9230: PUSH
9231: LD_INT 26
9233: PUSH
9234: LD_INT 30
9236: PUSH
9237: LD_INT 31
9239: PUSH
9240: LD_INT 32
9242: PUSH
9243: LD_INT 33
9245: PUSH
9246: LD_INT 34
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 36
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 101
9280: PUSH
9281: LD_INT 102
9283: PUSH
9284: LD_INT 103
9286: PUSH
9287: LD_INT 106
9289: PUSH
9290: LD_INT 108
9292: PUSH
9293: LD_INT 112
9295: PUSH
9296: LD_INT 113
9298: PUSH
9299: LD_INT 114
9301: PUSH
9302: LD_INT 115
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: ST_TO_ADDR
9320: GO 9551
9322: LD_INT 19
9324: DOUBLE
9325: EQUAL
9326: IFTRUE 9330
9328: GO 9550
9330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9331: LD_ADDR_VAR 0 1
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: LD_INT 3
9344: PUSH
9345: LD_INT 4
9347: PUSH
9348: LD_INT 5
9350: PUSH
9351: LD_INT 6
9353: PUSH
9354: LD_INT 7
9356: PUSH
9357: LD_INT 8
9359: PUSH
9360: LD_INT 9
9362: PUSH
9363: LD_INT 10
9365: PUSH
9366: LD_INT 11
9368: PUSH
9369: LD_INT 12
9371: PUSH
9372: LD_INT 13
9374: PUSH
9375: LD_INT 14
9377: PUSH
9378: LD_INT 15
9380: PUSH
9381: LD_INT 16
9383: PUSH
9384: LD_INT 17
9386: PUSH
9387: LD_INT 18
9389: PUSH
9390: LD_INT 19
9392: PUSH
9393: LD_INT 20
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 22
9401: PUSH
9402: LD_INT 23
9404: PUSH
9405: LD_INT 24
9407: PUSH
9408: LD_INT 25
9410: PUSH
9411: LD_INT 26
9413: PUSH
9414: LD_INT 27
9416: PUSH
9417: LD_INT 28
9419: PUSH
9420: LD_INT 29
9422: PUSH
9423: LD_INT 30
9425: PUSH
9426: LD_INT 31
9428: PUSH
9429: LD_INT 32
9431: PUSH
9432: LD_INT 33
9434: PUSH
9435: LD_INT 34
9437: PUSH
9438: LD_INT 35
9440: PUSH
9441: LD_INT 36
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: PUSH
9482: LD_INT 101
9484: PUSH
9485: LD_INT 102
9487: PUSH
9488: LD_INT 103
9490: PUSH
9491: LD_INT 104
9493: PUSH
9494: LD_INT 105
9496: PUSH
9497: LD_INT 106
9499: PUSH
9500: LD_INT 107
9502: PUSH
9503: LD_INT 108
9505: PUSH
9506: LD_INT 109
9508: PUSH
9509: LD_INT 110
9511: PUSH
9512: LD_INT 111
9514: PUSH
9515: LD_INT 112
9517: PUSH
9518: LD_INT 113
9520: PUSH
9521: LD_INT 114
9523: PUSH
9524: LD_INT 115
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: ST_TO_ADDR
9548: GO 9551
9550: POP
// end else
9551: GO 9770
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9553: LD_ADDR_VAR 0 1
9557: PUSH
9558: LD_INT 1
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: LD_INT 5
9572: PUSH
9573: LD_INT 6
9575: PUSH
9576: LD_INT 7
9578: PUSH
9579: LD_INT 8
9581: PUSH
9582: LD_INT 9
9584: PUSH
9585: LD_INT 10
9587: PUSH
9588: LD_INT 11
9590: PUSH
9591: LD_INT 12
9593: PUSH
9594: LD_INT 13
9596: PUSH
9597: LD_INT 14
9599: PUSH
9600: LD_INT 15
9602: PUSH
9603: LD_INT 16
9605: PUSH
9606: LD_INT 17
9608: PUSH
9609: LD_INT 18
9611: PUSH
9612: LD_INT 19
9614: PUSH
9615: LD_INT 20
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 22
9623: PUSH
9624: LD_INT 23
9626: PUSH
9627: LD_INT 24
9629: PUSH
9630: LD_INT 25
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: LD_INT 27
9638: PUSH
9639: LD_INT 28
9641: PUSH
9642: LD_INT 29
9644: PUSH
9645: LD_INT 30
9647: PUSH
9648: LD_INT 31
9650: PUSH
9651: LD_INT 32
9653: PUSH
9654: LD_INT 33
9656: PUSH
9657: LD_INT 34
9659: PUSH
9660: LD_INT 35
9662: PUSH
9663: LD_INT 36
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 101
9706: PUSH
9707: LD_INT 102
9709: PUSH
9710: LD_INT 103
9712: PUSH
9713: LD_INT 104
9715: PUSH
9716: LD_INT 105
9718: PUSH
9719: LD_INT 106
9721: PUSH
9722: LD_INT 107
9724: PUSH
9725: LD_INT 108
9727: PUSH
9728: LD_INT 109
9730: PUSH
9731: LD_INT 110
9733: PUSH
9734: LD_INT 111
9736: PUSH
9737: LD_INT 112
9739: PUSH
9740: LD_INT 113
9742: PUSH
9743: LD_INT 114
9745: PUSH
9746: LD_INT 115
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: ST_TO_ADDR
// if result then
9770: LD_VAR 0 1
9774: IFFALSE 10063
// begin normal :=  ;
9776: LD_ADDR_VAR 0 3
9780: PUSH
9781: LD_STRING 
9783: ST_TO_ADDR
// hardcore :=  ;
9784: LD_ADDR_VAR 0 4
9788: PUSH
9789: LD_STRING 
9791: ST_TO_ADDR
// for i = 1 to normalCounter do
9792: LD_ADDR_VAR 0 5
9796: PUSH
9797: DOUBLE
9798: LD_INT 1
9800: DEC
9801: ST_TO_ADDR
9802: LD_EXP 16
9806: PUSH
9807: FOR_TO
9808: IFFALSE 9909
// begin tmp := 0 ;
9810: LD_ADDR_VAR 0 2
9814: PUSH
9815: LD_STRING 0
9817: ST_TO_ADDR
// if result [ 1 ] then
9818: LD_VAR 0 1
9822: PUSH
9823: LD_INT 1
9825: ARRAY
9826: IFFALSE 9891
// if result [ 1 ] [ 1 ] = i then
9828: LD_VAR 0 1
9832: PUSH
9833: LD_INT 1
9835: ARRAY
9836: PUSH
9837: LD_INT 1
9839: ARRAY
9840: PUSH
9841: LD_VAR 0 5
9845: EQUAL
9846: IFFALSE 9891
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9848: LD_ADDR_VAR 0 1
9852: PUSH
9853: LD_VAR 0 1
9857: PPUSH
9858: LD_INT 1
9860: PPUSH
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: ARRAY
9869: PPUSH
9870: LD_INT 1
9872: PPUSH
9873: CALL_OW 3
9877: PPUSH
9878: CALL_OW 1
9882: ST_TO_ADDR
// tmp := 1 ;
9883: LD_ADDR_VAR 0 2
9887: PUSH
9888: LD_STRING 1
9890: ST_TO_ADDR
// end ; normal := normal & tmp ;
9891: LD_ADDR_VAR 0 3
9895: PUSH
9896: LD_VAR 0 3
9900: PUSH
9901: LD_VAR 0 2
9905: STR
9906: ST_TO_ADDR
// end ;
9907: GO 9807
9909: POP
9910: POP
// for i = 1 to hardcoreCounter do
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: DOUBLE
9917: LD_INT 1
9919: DEC
9920: ST_TO_ADDR
9921: LD_EXP 17
9925: PUSH
9926: FOR_TO
9927: IFFALSE 10032
// begin tmp := 0 ;
9929: LD_ADDR_VAR 0 2
9933: PUSH
9934: LD_STRING 0
9936: ST_TO_ADDR
// if result [ 2 ] then
9937: LD_VAR 0 1
9941: PUSH
9942: LD_INT 2
9944: ARRAY
9945: IFFALSE 10014
// if result [ 2 ] [ 1 ] = 100 + i then
9947: LD_VAR 0 1
9951: PUSH
9952: LD_INT 2
9954: ARRAY
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PUSH
9960: LD_INT 100
9962: PUSH
9963: LD_VAR 0 5
9967: PLUS
9968: EQUAL
9969: IFFALSE 10014
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9971: LD_ADDR_VAR 0 1
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: LD_INT 2
9983: PPUSH
9984: LD_VAR 0 1
9988: PUSH
9989: LD_INT 2
9991: ARRAY
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 3
10000: PPUSH
10001: CALL_OW 1
10005: ST_TO_ADDR
// tmp := 1 ;
10006: LD_ADDR_VAR 0 2
10010: PUSH
10011: LD_STRING 1
10013: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10014: LD_ADDR_VAR 0 4
10018: PUSH
10019: LD_VAR 0 4
10023: PUSH
10024: LD_VAR 0 2
10028: STR
10029: ST_TO_ADDR
// end ;
10030: GO 9926
10032: POP
10033: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10034: LD_STRING getStreamItemsFromMission("
10036: PUSH
10037: LD_VAR 0 3
10041: STR
10042: PUSH
10043: LD_STRING ","
10045: STR
10046: PUSH
10047: LD_VAR 0 4
10051: STR
10052: PUSH
10053: LD_STRING ")
10055: STR
10056: PPUSH
10057: CALL_OW 559
// end else
10061: GO 10070
// ToLua ( getStreamItemsFromMission("","") ) ;
10063: LD_STRING getStreamItemsFromMission("","")
10065: PPUSH
10066: CALL_OW 559
// end ;
10070: LD_VAR 0 1
10074: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10075: LD_EXP 15
10079: PUSH
10080: LD_EXP 20
10084: AND
10085: IFFALSE 10209
10087: GO 10089
10089: DISABLE
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
// begin enable ;
10094: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10095: LD_ADDR_VAR 0 2
10099: PUSH
10100: LD_INT 22
10102: PUSH
10103: LD_OWVAR 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 2
10114: PUSH
10115: LD_INT 34
10117: PUSH
10118: LD_INT 7
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 34
10127: PUSH
10128: LD_INT 45
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 34
10137: PUSH
10138: LD_INT 28
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 34
10147: PUSH
10148: LD_INT 47
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: ST_TO_ADDR
// if not tmp then
10171: LD_VAR 0 2
10175: NOT
10176: IFFALSE 10180
// exit ;
10178: GO 10209
// for i in tmp do
10180: LD_ADDR_VAR 0 1
10184: PUSH
10185: LD_VAR 0 2
10189: PUSH
10190: FOR_IN
10191: IFFALSE 10207
// begin SetLives ( i , 0 ) ;
10193: LD_VAR 0 1
10197: PPUSH
10198: LD_INT 0
10200: PPUSH
10201: CALL_OW 234
// end ;
10205: GO 10190
10207: POP
10208: POP
// end ;
10209: PPOPN 2
10211: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10212: LD_EXP 15
10216: PUSH
10217: LD_EXP 21
10221: AND
10222: IFFALSE 10306
10224: GO 10226
10226: DISABLE
10227: LD_INT 0
10229: PPUSH
10230: PPUSH
// begin enable ;
10231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10232: LD_ADDR_VAR 0 2
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_OWVAR 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 32
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PPUSH
10263: CALL_OW 69
10267: ST_TO_ADDR
// if not tmp then
10268: LD_VAR 0 2
10272: NOT
10273: IFFALSE 10277
// exit ;
10275: GO 10306
// for i in tmp do
10277: LD_ADDR_VAR 0 1
10281: PUSH
10282: LD_VAR 0 2
10286: PUSH
10287: FOR_IN
10288: IFFALSE 10304
// begin SetLives ( i , 0 ) ;
10290: LD_VAR 0 1
10294: PPUSH
10295: LD_INT 0
10297: PPUSH
10298: CALL_OW 234
// end ;
10302: GO 10287
10304: POP
10305: POP
// end ;
10306: PPOPN 2
10308: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10309: LD_EXP 15
10313: PUSH
10314: LD_EXP 18
10318: AND
10319: IFFALSE 10412
10321: GO 10323
10323: DISABLE
10324: LD_INT 0
10326: PPUSH
// begin enable ;
10327: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10328: LD_ADDR_VAR 0 1
10332: PUSH
10333: LD_INT 22
10335: PUSH
10336: LD_OWVAR 2
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: LD_INT 25
10350: PUSH
10351: LD_INT 5
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 25
10360: PUSH
10361: LD_INT 9
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 25
10370: PUSH
10371: LD_INT 8
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PUSH
10393: FOR_IN
10394: IFFALSE 10410
// begin SetClass ( i , 1 ) ;
10396: LD_VAR 0 1
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 336
// end ;
10408: GO 10393
10410: POP
10411: POP
// end ;
10412: PPOPN 1
10414: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10415: LD_EXP 15
10419: PUSH
10420: LD_EXP 19
10424: AND
10425: PUSH
10426: LD_OWVAR 65
10430: PUSH
10431: LD_INT 7
10433: LESS
10434: AND
10435: IFFALSE 10449
10437: GO 10439
10439: DISABLE
// begin enable ;
10440: ENABLE
// game_speed := 7 ;
10441: LD_ADDR_OWVAR 65
10445: PUSH
10446: LD_INT 7
10448: ST_TO_ADDR
// end ;
10449: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10450: LD_EXP 15
10454: PUSH
10455: LD_EXP 22
10459: AND
10460: IFFALSE 10662
10462: GO 10464
10464: DISABLE
10465: LD_INT 0
10467: PPUSH
10468: PPUSH
10469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10470: LD_ADDR_VAR 0 3
10474: PUSH
10475: LD_INT 81
10477: PUSH
10478: LD_OWVAR 2
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 21
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PPUSH
10501: CALL_OW 69
10505: ST_TO_ADDR
// if not tmp then
10506: LD_VAR 0 3
10510: NOT
10511: IFFALSE 10515
// exit ;
10513: GO 10662
// if tmp > 5 then
10515: LD_VAR 0 3
10519: PUSH
10520: LD_INT 5
10522: GREATER
10523: IFFALSE 10535
// k := 5 else
10525: LD_ADDR_VAR 0 2
10529: PUSH
10530: LD_INT 5
10532: ST_TO_ADDR
10533: GO 10545
// k := tmp ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: LD_VAR 0 3
10544: ST_TO_ADDR
// for i := 1 to k do
10545: LD_ADDR_VAR 0 1
10549: PUSH
10550: DOUBLE
10551: LD_INT 1
10553: DEC
10554: ST_TO_ADDR
10555: LD_VAR 0 2
10559: PUSH
10560: FOR_TO
10561: IFFALSE 10660
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10563: LD_VAR 0 3
10567: PUSH
10568: LD_VAR 0 1
10572: ARRAY
10573: PPUSH
10574: LD_VAR 0 1
10578: PUSH
10579: LD_INT 4
10581: MOD
10582: PUSH
10583: LD_INT 1
10585: PLUS
10586: PPUSH
10587: CALL_OW 259
10591: PUSH
10592: LD_INT 10
10594: LESS
10595: IFFALSE 10658
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10597: LD_VAR 0 3
10601: PUSH
10602: LD_VAR 0 1
10606: ARRAY
10607: PPUSH
10608: LD_VAR 0 1
10612: PUSH
10613: LD_INT 4
10615: MOD
10616: PUSH
10617: LD_INT 1
10619: PLUS
10620: PPUSH
10621: LD_VAR 0 3
10625: PUSH
10626: LD_VAR 0 1
10630: ARRAY
10631: PPUSH
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 4
10639: MOD
10640: PUSH
10641: LD_INT 1
10643: PLUS
10644: PPUSH
10645: CALL_OW 259
10649: PUSH
10650: LD_INT 1
10652: PLUS
10653: PPUSH
10654: CALL_OW 237
10658: GO 10560
10660: POP
10661: POP
// end ;
10662: PPOPN 3
10664: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10665: LD_EXP 15
10669: PUSH
10670: LD_EXP 23
10674: AND
10675: IFFALSE 10695
10677: GO 10679
10679: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10680: LD_INT 4
10682: PPUSH
10683: LD_OWVAR 2
10687: PPUSH
10688: LD_INT 0
10690: PPUSH
10691: CALL_OW 324
10695: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10696: LD_EXP 15
10700: PUSH
10701: LD_EXP 52
10705: AND
10706: IFFALSE 10726
10708: GO 10710
10710: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10711: LD_INT 19
10713: PPUSH
10714: LD_OWVAR 2
10718: PPUSH
10719: LD_INT 0
10721: PPUSH
10722: CALL_OW 324
10726: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10727: LD_EXP 15
10731: PUSH
10732: LD_EXP 24
10736: AND
10737: IFFALSE 10839
10739: GO 10741
10741: DISABLE
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
// begin enable ;
10746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10747: LD_ADDR_VAR 0 2
10751: PUSH
10752: LD_INT 22
10754: PUSH
10755: LD_OWVAR 2
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 34
10769: PUSH
10770: LD_INT 11
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 34
10779: PUSH
10780: LD_INT 30
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 69
10800: ST_TO_ADDR
// if not tmp then
10801: LD_VAR 0 2
10805: NOT
10806: IFFALSE 10810
// exit ;
10808: GO 10839
// for i in tmp do
10810: LD_ADDR_VAR 0 1
10814: PUSH
10815: LD_VAR 0 2
10819: PUSH
10820: FOR_IN
10821: IFFALSE 10837
// begin SetLives ( i , 0 ) ;
10823: LD_VAR 0 1
10827: PPUSH
10828: LD_INT 0
10830: PPUSH
10831: CALL_OW 234
// end ;
10835: GO 10820
10837: POP
10838: POP
// end ;
10839: PPOPN 2
10841: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10842: LD_EXP 15
10846: PUSH
10847: LD_EXP 25
10851: AND
10852: IFFALSE 10872
10854: GO 10856
10856: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10857: LD_INT 32
10859: PPUSH
10860: LD_OWVAR 2
10864: PPUSH
10865: LD_INT 0
10867: PPUSH
10868: CALL_OW 324
10872: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10873: LD_EXP 15
10877: PUSH
10878: LD_EXP 26
10882: AND
10883: IFFALSE 11064
10885: GO 10887
10887: DISABLE
10888: LD_INT 0
10890: PPUSH
10891: PPUSH
10892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10893: LD_ADDR_VAR 0 2
10897: PUSH
10898: LD_INT 22
10900: PUSH
10901: LD_OWVAR 2
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 33
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 69
10928: ST_TO_ADDR
// if not tmp then
10929: LD_VAR 0 2
10933: NOT
10934: IFFALSE 10938
// exit ;
10936: GO 11064
// side := 0 ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// for i := 1 to 8 do
10946: LD_ADDR_VAR 0 1
10950: PUSH
10951: DOUBLE
10952: LD_INT 1
10954: DEC
10955: ST_TO_ADDR
10956: LD_INT 8
10958: PUSH
10959: FOR_TO
10960: IFFALSE 11008
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10962: LD_OWVAR 2
10966: PUSH
10967: LD_VAR 0 1
10971: NONEQUAL
10972: PUSH
10973: LD_OWVAR 2
10977: PPUSH
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 81
10987: PUSH
10988: LD_INT 2
10990: EQUAL
10991: AND
10992: IFFALSE 11006
// begin side := i ;
10994: LD_ADDR_VAR 0 3
10998: PUSH
10999: LD_VAR 0 1
11003: ST_TO_ADDR
// break ;
11004: GO 11008
// end ;
11006: GO 10959
11008: POP
11009: POP
// if not side then
11010: LD_VAR 0 3
11014: NOT
11015: IFFALSE 11019
// exit ;
11017: GO 11064
// for i := 1 to tmp do
11019: LD_ADDR_VAR 0 1
11023: PUSH
11024: DOUBLE
11025: LD_INT 1
11027: DEC
11028: ST_TO_ADDR
11029: LD_VAR 0 2
11033: PUSH
11034: FOR_TO
11035: IFFALSE 11062
// if Prob ( 60 ) then
11037: LD_INT 60
11039: PPUSH
11040: CALL_OW 13
11044: IFFALSE 11060
// SetSide ( i , side ) ;
11046: LD_VAR 0 1
11050: PPUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 235
11060: GO 11034
11062: POP
11063: POP
// end ;
11064: PPOPN 3
11066: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11067: LD_EXP 15
11071: PUSH
11072: LD_EXP 28
11076: AND
11077: IFFALSE 11196
11079: GO 11081
11081: DISABLE
11082: LD_INT 0
11084: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11085: LD_ADDR_VAR 0 1
11089: PUSH
11090: LD_INT 22
11092: PUSH
11093: LD_OWVAR 2
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 23
11117: PUSH
11118: LD_INT 0
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: PPUSH
11134: CALL_OW 69
11138: PUSH
11139: FOR_IN
11140: IFFALSE 11194
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11142: LD_VAR 0 1
11146: PPUSH
11147: CALL_OW 257
11151: PUSH
11152: LD_INT 1
11154: PUSH
11155: LD_INT 2
11157: PUSH
11158: LD_INT 3
11160: PUSH
11161: LD_INT 4
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: IN
11170: IFFALSE 11192
// SetClass ( un , rand ( 1 , 4 ) ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: LD_INT 4
11182: PPUSH
11183: CALL_OW 12
11187: PPUSH
11188: CALL_OW 336
11192: GO 11139
11194: POP
11195: POP
// end ;
11196: PPOPN 1
11198: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11199: LD_EXP 15
11203: PUSH
11204: LD_EXP 27
11208: AND
11209: IFFALSE 11288
11211: GO 11213
11213: DISABLE
11214: LD_INT 0
11216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 3
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: ST_TO_ADDR
// if not tmp then
11253: LD_VAR 0 1
11257: NOT
11258: IFFALSE 11262
// exit ;
11260: GO 11288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11262: LD_VAR 0 1
11266: PUSH
11267: LD_INT 1
11269: PPUSH
11270: LD_VAR 0 1
11274: PPUSH
11275: CALL_OW 12
11279: ARRAY
11280: PPUSH
11281: LD_INT 100
11283: PPUSH
11284: CALL_OW 234
// end ;
11288: PPOPN 1
11290: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11291: LD_EXP 15
11295: PUSH
11296: LD_EXP 29
11300: AND
11301: IFFALSE 11399
11303: GO 11305
11305: DISABLE
11306: LD_INT 0
11308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11309: LD_ADDR_VAR 0 1
11313: PUSH
11314: LD_INT 22
11316: PUSH
11317: LD_OWVAR 2
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 21
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 69
11344: ST_TO_ADDR
// if not tmp then
11345: LD_VAR 0 1
11349: NOT
11350: IFFALSE 11354
// exit ;
11352: GO 11399
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11354: LD_VAR 0 1
11358: PUSH
11359: LD_INT 1
11361: PPUSH
11362: LD_VAR 0 1
11366: PPUSH
11367: CALL_OW 12
11371: ARRAY
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: LD_INT 4
11378: PPUSH
11379: CALL_OW 12
11383: PPUSH
11384: LD_INT 3000
11386: PPUSH
11387: LD_INT 9000
11389: PPUSH
11390: CALL_OW 12
11394: PPUSH
11395: CALL_OW 492
// end ;
11399: PPOPN 1
11401: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11402: LD_EXP 15
11406: PUSH
11407: LD_EXP 30
11411: AND
11412: IFFALSE 11432
11414: GO 11416
11416: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11417: LD_INT 1
11419: PPUSH
11420: LD_OWVAR 2
11424: PPUSH
11425: LD_INT 0
11427: PPUSH
11428: CALL_OW 324
11432: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11433: LD_EXP 15
11437: PUSH
11438: LD_EXP 31
11442: AND
11443: IFFALSE 11526
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11452: LD_ADDR_VAR 0 2
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_OWVAR 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 21
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 69
11487: ST_TO_ADDR
// if not tmp then
11488: LD_VAR 0 2
11492: NOT
11493: IFFALSE 11497
// exit ;
11495: GO 11526
// for i in tmp do
11497: LD_ADDR_VAR 0 1
11501: PUSH
11502: LD_VAR 0 2
11506: PUSH
11507: FOR_IN
11508: IFFALSE 11524
// SetBLevel ( i , 10 ) ;
11510: LD_VAR 0 1
11514: PPUSH
11515: LD_INT 10
11517: PPUSH
11518: CALL_OW 241
11522: GO 11507
11524: POP
11525: POP
// end ;
11526: PPOPN 2
11528: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11529: LD_EXP 15
11533: PUSH
11534: LD_EXP 32
11538: AND
11539: IFFALSE 11650
11541: GO 11543
11543: DISABLE
11544: LD_INT 0
11546: PPUSH
11547: PPUSH
11548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_INT 22
11556: PUSH
11557: LD_OWVAR 2
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 25
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 69
11584: ST_TO_ADDR
// if not tmp then
11585: LD_VAR 0 3
11589: NOT
11590: IFFALSE 11594
// exit ;
11592: GO 11650
// un := tmp [ rand ( 1 , tmp ) ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 1
11606: PPUSH
11607: LD_VAR 0 3
11611: PPUSH
11612: CALL_OW 12
11616: ARRAY
11617: ST_TO_ADDR
// if Crawls ( un ) then
11618: LD_VAR 0 2
11622: PPUSH
11623: CALL_OW 318
11627: IFFALSE 11638
// ComWalk ( un ) ;
11629: LD_VAR 0 2
11633: PPUSH
11634: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11638: LD_VAR 0 2
11642: PPUSH
11643: LD_INT 5
11645: PPUSH
11646: CALL_OW 336
// end ;
11650: PPOPN 3
11652: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11653: LD_EXP 15
11657: PUSH
11658: LD_EXP 33
11662: AND
11663: PUSH
11664: LD_OWVAR 67
11668: PUSH
11669: LD_INT 3
11671: LESS
11672: AND
11673: IFFALSE 11692
11675: GO 11677
11677: DISABLE
// Difficulty := Difficulty + 1 ;
11678: LD_ADDR_OWVAR 67
11682: PUSH
11683: LD_OWVAR 67
11687: PUSH
11688: LD_INT 1
11690: PLUS
11691: ST_TO_ADDR
11692: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11693: LD_EXP 15
11697: PUSH
11698: LD_EXP 34
11702: AND
11703: IFFALSE 11806
11705: GO 11707
11707: DISABLE
11708: LD_INT 0
11710: PPUSH
// begin for i := 1 to 5 do
11711: LD_ADDR_VAR 0 1
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_INT 5
11723: PUSH
11724: FOR_TO
11725: IFFALSE 11804
// begin uc_nation := nation_nature ;
11727: LD_ADDR_OWVAR 21
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// uc_side := 0 ;
11735: LD_ADDR_OWVAR 20
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11743: LD_ADDR_OWVAR 29
11747: PUSH
11748: LD_INT 12
11750: PUSH
11751: LD_INT 12
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: ST_TO_ADDR
// hc_agressivity := 20 ;
11758: LD_ADDR_OWVAR 35
11762: PUSH
11763: LD_INT 20
11765: ST_TO_ADDR
// hc_class := class_tiger ;
11766: LD_ADDR_OWVAR 28
11770: PUSH
11771: LD_INT 14
11773: ST_TO_ADDR
// hc_gallery :=  ;
11774: LD_ADDR_OWVAR 33
11778: PUSH
11779: LD_STRING 
11781: ST_TO_ADDR
// hc_name :=  ;
11782: LD_ADDR_OWVAR 26
11786: PUSH
11787: LD_STRING 
11789: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11790: CALL_OW 44
11794: PPUSH
11795: LD_INT 0
11797: PPUSH
11798: CALL_OW 51
// end ;
11802: GO 11724
11804: POP
11805: POP
// end ;
11806: PPOPN 1
11808: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11809: LD_EXP 15
11813: PUSH
11814: LD_EXP 35
11818: AND
11819: IFFALSE 11828
11821: GO 11823
11823: DISABLE
// StreamSibBomb ;
11824: CALL 11829 0 0
11828: END
// export function StreamSibBomb ; var i , x , y ; begin
11829: LD_INT 0
11831: PPUSH
11832: PPUSH
11833: PPUSH
11834: PPUSH
// result := false ;
11835: LD_ADDR_VAR 0 1
11839: PUSH
11840: LD_INT 0
11842: ST_TO_ADDR
// for i := 1 to 16 do
11843: LD_ADDR_VAR 0 2
11847: PUSH
11848: DOUBLE
11849: LD_INT 1
11851: DEC
11852: ST_TO_ADDR
11853: LD_INT 16
11855: PUSH
11856: FOR_TO
11857: IFFALSE 12056
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11859: LD_ADDR_VAR 0 3
11863: PUSH
11864: LD_INT 10
11866: PUSH
11867: LD_INT 20
11869: PUSH
11870: LD_INT 30
11872: PUSH
11873: LD_INT 40
11875: PUSH
11876: LD_INT 50
11878: PUSH
11879: LD_INT 60
11881: PUSH
11882: LD_INT 70
11884: PUSH
11885: LD_INT 80
11887: PUSH
11888: LD_INT 90
11890: PUSH
11891: LD_INT 100
11893: PUSH
11894: LD_INT 110
11896: PUSH
11897: LD_INT 120
11899: PUSH
11900: LD_INT 130
11902: PUSH
11903: LD_INT 140
11905: PUSH
11906: LD_INT 150
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 1
11928: PPUSH
11929: LD_INT 15
11931: PPUSH
11932: CALL_OW 12
11936: ARRAY
11937: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11938: LD_ADDR_VAR 0 4
11942: PUSH
11943: LD_INT 10
11945: PUSH
11946: LD_INT 20
11948: PUSH
11949: LD_INT 30
11951: PUSH
11952: LD_INT 40
11954: PUSH
11955: LD_INT 50
11957: PUSH
11958: LD_INT 60
11960: PUSH
11961: LD_INT 70
11963: PUSH
11964: LD_INT 80
11966: PUSH
11967: LD_INT 90
11969: PUSH
11970: LD_INT 100
11972: PUSH
11973: LD_INT 110
11975: PUSH
11976: LD_INT 120
11978: PUSH
11979: LD_INT 130
11981: PUSH
11982: LD_INT 140
11984: PUSH
11985: LD_INT 150
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 1
12007: PPUSH
12008: LD_INT 15
12010: PPUSH
12011: CALL_OW 12
12015: ARRAY
12016: ST_TO_ADDR
// if ValidHex ( x , y ) then
12017: LD_VAR 0 3
12021: PPUSH
12022: LD_VAR 0 4
12026: PPUSH
12027: CALL_OW 488
12031: IFFALSE 12054
// begin result := [ x , y ] ;
12033: LD_ADDR_VAR 0 1
12037: PUSH
12038: LD_VAR 0 3
12042: PUSH
12043: LD_VAR 0 4
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: ST_TO_ADDR
// break ;
12052: GO 12056
// end ; end ;
12054: GO 11856
12056: POP
12057: POP
// if result then
12058: LD_VAR 0 1
12062: IFFALSE 12122
// begin ToLua ( playSibBomb() ) ;
12064: LD_STRING playSibBomb()
12066: PPUSH
12067: CALL_OW 559
// wait ( 0 0$14 ) ;
12071: LD_INT 490
12073: PPUSH
12074: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12078: LD_VAR 0 1
12082: PUSH
12083: LD_INT 1
12085: ARRAY
12086: PPUSH
12087: LD_VAR 0 1
12091: PUSH
12092: LD_INT 2
12094: ARRAY
12095: PPUSH
12096: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12100: LD_VAR 0 1
12104: PUSH
12105: LD_INT 1
12107: ARRAY
12108: PPUSH
12109: LD_VAR 0 1
12113: PUSH
12114: LD_INT 2
12116: ARRAY
12117: PPUSH
12118: CALL_OW 429
// end ; end ;
12122: LD_VAR 0 1
12126: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12127: LD_EXP 15
12131: PUSH
12132: LD_EXP 37
12136: AND
12137: IFFALSE 12149
12139: GO 12141
12141: DISABLE
// YouLost (  ) ;
12142: LD_STRING 
12144: PPUSH
12145: CALL_OW 104
12149: END
// every 0 0$1 trigger StreamModeActive and sFog do
12150: LD_EXP 15
12154: PUSH
12155: LD_EXP 36
12159: AND
12160: IFFALSE 12174
12162: GO 12164
12164: DISABLE
// FogOff ( your_side ) ;
12165: LD_OWVAR 2
12169: PPUSH
12170: CALL_OW 344
12174: END
// every 0 0$1 trigger StreamModeActive and sSun do
12175: LD_EXP 15
12179: PUSH
12180: LD_EXP 38
12184: AND
12185: IFFALSE 12213
12187: GO 12189
12189: DISABLE
// begin solar_recharge_percent := 0 ;
12190: LD_ADDR_OWVAR 79
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12198: LD_INT 10500
12200: PPUSH
12201: CALL_OW 67
// solar_recharge_percent := 100 ;
12205: LD_ADDR_OWVAR 79
12209: PUSH
12210: LD_INT 100
12212: ST_TO_ADDR
// end ;
12213: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12214: LD_EXP 15
12218: PUSH
12219: LD_EXP 39
12223: AND
12224: IFFALSE 12463
12226: GO 12228
12228: DISABLE
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
12233: PPUSH
// begin tmp := [ ] ;
12234: LD_ADDR_VAR 0 3
12238: PUSH
12239: EMPTY
12240: ST_TO_ADDR
// for i := 1 to 6 do
12241: LD_ADDR_VAR 0 1
12245: PUSH
12246: DOUBLE
12247: LD_INT 1
12249: DEC
12250: ST_TO_ADDR
12251: LD_INT 6
12253: PUSH
12254: FOR_TO
12255: IFFALSE 12360
// begin uc_nation := nation_nature ;
12257: LD_ADDR_OWVAR 21
12261: PUSH
12262: LD_INT 0
12264: ST_TO_ADDR
// uc_side := 0 ;
12265: LD_ADDR_OWVAR 20
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12273: LD_ADDR_OWVAR 29
12277: PUSH
12278: LD_INT 12
12280: PUSH
12281: LD_INT 12
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: ST_TO_ADDR
// hc_agressivity := 20 ;
12288: LD_ADDR_OWVAR 35
12292: PUSH
12293: LD_INT 20
12295: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12296: LD_ADDR_OWVAR 28
12300: PUSH
12301: LD_INT 17
12303: ST_TO_ADDR
// hc_gallery :=  ;
12304: LD_ADDR_OWVAR 33
12308: PUSH
12309: LD_STRING 
12311: ST_TO_ADDR
// hc_name :=  ;
12312: LD_ADDR_OWVAR 26
12316: PUSH
12317: LD_STRING 
12319: ST_TO_ADDR
// un := CreateHuman ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: CALL_OW 44
12329: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12330: LD_VAR 0 2
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 51
// tmp := tmp ^ un ;
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: LD_VAR 0 3
12351: PUSH
12352: LD_VAR 0 2
12356: ADD
12357: ST_TO_ADDR
// end ;
12358: GO 12254
12360: POP
12361: POP
// repeat wait ( 0 0$1 ) ;
12362: LD_INT 35
12364: PPUSH
12365: CALL_OW 67
// for un in tmp do
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_VAR 0 3
12378: PUSH
12379: FOR_IN
12380: IFFALSE 12454
// begin if IsDead ( un ) then
12382: LD_VAR 0 2
12386: PPUSH
12387: CALL_OW 301
12391: IFFALSE 12411
// begin tmp := tmp diff un ;
12393: LD_ADDR_VAR 0 3
12397: PUSH
12398: LD_VAR 0 3
12402: PUSH
12403: LD_VAR 0 2
12407: DIFF
12408: ST_TO_ADDR
// continue ;
12409: GO 12379
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12411: LD_VAR 0 2
12415: PPUSH
12416: LD_INT 3
12418: PUSH
12419: LD_INT 22
12421: PUSH
12422: LD_INT 0
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PPUSH
12433: CALL_OW 69
12437: PPUSH
12438: LD_VAR 0 2
12442: PPUSH
12443: CALL_OW 74
12447: PPUSH
12448: CALL_OW 115
// end ;
12452: GO 12379
12454: POP
12455: POP
// until not tmp ;
12456: LD_VAR 0 3
12460: NOT
12461: IFFALSE 12362
// end ;
12463: PPOPN 3
12465: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12466: LD_EXP 15
12470: PUSH
12471: LD_EXP 40
12475: AND
12476: IFFALSE 12530
12478: GO 12480
12480: DISABLE
// begin ToLua ( displayTroll(); ) ;
12481: LD_STRING displayTroll();
12483: PPUSH
12484: CALL_OW 559
// wait ( 3 3$00 ) ;
12488: LD_INT 6300
12490: PPUSH
12491: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12495: LD_STRING hideTroll();
12497: PPUSH
12498: CALL_OW 559
// wait ( 1 1$00 ) ;
12502: LD_INT 2100
12504: PPUSH
12505: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12509: LD_STRING displayTroll();
12511: PPUSH
12512: CALL_OW 559
// wait ( 1 1$00 ) ;
12516: LD_INT 2100
12518: PPUSH
12519: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12523: LD_STRING hideTroll();
12525: PPUSH
12526: CALL_OW 559
// end ;
12530: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12531: LD_EXP 15
12535: PUSH
12536: LD_EXP 41
12540: AND
12541: IFFALSE 12604
12543: GO 12545
12545: DISABLE
12546: LD_INT 0
12548: PPUSH
// begin p := 0 ;
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// repeat game_speed := 1 ;
12557: LD_ADDR_OWVAR 65
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12565: LD_INT 35
12567: PPUSH
12568: CALL_OW 67
// p := p + 1 ;
12572: LD_ADDR_VAR 0 1
12576: PUSH
12577: LD_VAR 0 1
12581: PUSH
12582: LD_INT 1
12584: PLUS
12585: ST_TO_ADDR
// until p >= 60 ;
12586: LD_VAR 0 1
12590: PUSH
12591: LD_INT 60
12593: GREATEREQUAL
12594: IFFALSE 12557
// game_speed := 4 ;
12596: LD_ADDR_OWVAR 65
12600: PUSH
12601: LD_INT 4
12603: ST_TO_ADDR
// end ;
12604: PPOPN 1
12606: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12607: LD_EXP 15
12611: PUSH
12612: LD_EXP 42
12616: AND
12617: IFFALSE 12763
12619: GO 12621
12621: DISABLE
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_INT 22
12633: PUSH
12634: LD_OWVAR 2
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: LD_INT 30
12648: PUSH
12649: LD_INT 0
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 30
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 69
12679: ST_TO_ADDR
// if not depot then
12680: LD_VAR 0 1
12684: NOT
12685: IFFALSE 12689
// exit ;
12687: GO 12763
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12689: LD_ADDR_VAR 0 2
12693: PUSH
12694: LD_VAR 0 1
12698: PUSH
12699: LD_INT 1
12701: PPUSH
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 12
12711: ARRAY
12712: PPUSH
12713: CALL_OW 274
12717: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12718: LD_VAR 0 2
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12733: LD_VAR 0 2
12737: PPUSH
12738: LD_INT 2
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12748: LD_VAR 0 2
12752: PPUSH
12753: LD_INT 3
12755: PPUSH
12756: LD_INT 0
12758: PPUSH
12759: CALL_OW 277
// end ;
12763: PPOPN 2
12765: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12766: LD_EXP 15
12770: PUSH
12771: LD_EXP 43
12775: AND
12776: IFFALSE 12873
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12784: LD_ADDR_VAR 0 1
12788: PUSH
12789: LD_INT 22
12791: PUSH
12792: LD_OWVAR 2
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 1
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: LD_INT 23
12816: PUSH
12817: LD_INT 0
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: LIST
12832: PPUSH
12833: CALL_OW 69
12837: ST_TO_ADDR
// if not tmp then
12838: LD_VAR 0 1
12842: NOT
12843: IFFALSE 12847
// exit ;
12845: GO 12873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12847: LD_VAR 0 1
12851: PUSH
12852: LD_INT 1
12854: PPUSH
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL_OW 12
12864: ARRAY
12865: PPUSH
12866: LD_INT 200
12868: PPUSH
12869: CALL_OW 234
// end ;
12873: PPOPN 1
12875: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12876: LD_EXP 15
12880: PUSH
12881: LD_EXP 44
12885: AND
12886: IFFALSE 12965
12888: GO 12890
12890: DISABLE
12891: LD_INT 0
12893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_INT 22
12901: PUSH
12902: LD_OWVAR 2
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 21
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 69
12929: ST_TO_ADDR
// if not tmp then
12930: LD_VAR 0 1
12934: NOT
12935: IFFALSE 12939
// exit ;
12937: GO 12965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12939: LD_VAR 0 1
12943: PUSH
12944: LD_INT 1
12946: PPUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 12
12956: ARRAY
12957: PPUSH
12958: LD_INT 60
12960: PPUSH
12961: CALL_OW 234
// end ;
12965: PPOPN 1
12967: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12968: LD_EXP 15
12972: PUSH
12973: LD_EXP 45
12977: AND
12978: IFFALSE 13077
12980: GO 12982
12982: DISABLE
12983: LD_INT 0
12985: PPUSH
12986: PPUSH
// begin enable ;
12987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12988: LD_ADDR_VAR 0 1
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_OWVAR 2
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 61
13007: PUSH
13008: EMPTY
13009: LIST
13010: PUSH
13011: LD_INT 33
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 69
13030: ST_TO_ADDR
// if not tmp then
13031: LD_VAR 0 1
13035: NOT
13036: IFFALSE 13040
// exit ;
13038: GO 13077
// for i in tmp do
13040: LD_ADDR_VAR 0 2
13044: PUSH
13045: LD_VAR 0 1
13049: PUSH
13050: FOR_IN
13051: IFFALSE 13075
// if IsControledBy ( i ) then
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL_OW 312
13062: IFFALSE 13073
// ComUnlink ( i ) ;
13064: LD_VAR 0 2
13068: PPUSH
13069: CALL_OW 136
13073: GO 13050
13075: POP
13076: POP
// end ;
13077: PPOPN 2
13079: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13080: LD_EXP 15
13084: PUSH
13085: LD_EXP 46
13089: AND
13090: IFFALSE 13230
13092: GO 13094
13094: DISABLE
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
// begin ToLua ( displayPowell(); ) ;
13099: LD_STRING displayPowell();
13101: PPUSH
13102: CALL_OW 559
// uc_side := 0 ;
13106: LD_ADDR_OWVAR 20
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// uc_nation := 2 ;
13114: LD_ADDR_OWVAR 21
13118: PUSH
13119: LD_INT 2
13121: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13122: LD_ADDR_OWVAR 37
13126: PUSH
13127: LD_INT 14
13129: ST_TO_ADDR
// vc_engine := engine_siberite ;
13130: LD_ADDR_OWVAR 39
13134: PUSH
13135: LD_INT 3
13137: ST_TO_ADDR
// vc_control := control_apeman ;
13138: LD_ADDR_OWVAR 38
13142: PUSH
13143: LD_INT 5
13145: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13146: LD_ADDR_OWVAR 40
13150: PUSH
13151: LD_INT 29
13153: ST_TO_ADDR
// un := CreateVehicle ;
13154: LD_ADDR_VAR 0 2
13158: PUSH
13159: CALL_OW 45
13163: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13164: LD_VAR 0 2
13168: PPUSH
13169: LD_INT 1
13171: PPUSH
13172: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13176: LD_INT 35
13178: PPUSH
13179: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13183: LD_VAR 0 2
13187: PPUSH
13188: LD_INT 22
13190: PUSH
13191: LD_OWVAR 2
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 69
13204: PPUSH
13205: LD_VAR 0 2
13209: PPUSH
13210: CALL_OW 74
13214: PPUSH
13215: CALL_OW 115
// until IsDead ( un ) ;
13219: LD_VAR 0 2
13223: PPUSH
13224: CALL_OW 301
13228: IFFALSE 13176
// end ;
13230: PPOPN 2
13232: END
// every 0 0$1 trigger StreamModeActive and sStu do
13233: LD_EXP 15
13237: PUSH
13238: LD_EXP 54
13242: AND
13243: IFFALSE 13259
13245: GO 13247
13247: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13248: LD_STRING displayStucuk();
13250: PPUSH
13251: CALL_OW 559
// ResetFog ;
13255: CALL_OW 335
// end ;
13259: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13260: LD_EXP 15
13264: PUSH
13265: LD_EXP 47
13269: AND
13270: IFFALSE 13411
13272: GO 13274
13274: DISABLE
13275: LD_INT 0
13277: PPUSH
13278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13279: LD_ADDR_VAR 0 2
13283: PUSH
13284: LD_INT 22
13286: PUSH
13287: LD_OWVAR 2
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 21
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: ST_TO_ADDR
// if not tmp then
13315: LD_VAR 0 2
13319: NOT
13320: IFFALSE 13324
// exit ;
13322: GO 13411
// un := tmp [ rand ( 1 , tmp ) ] ;
13324: LD_ADDR_VAR 0 1
13328: PUSH
13329: LD_VAR 0 2
13333: PUSH
13334: LD_INT 1
13336: PPUSH
13337: LD_VAR 0 2
13341: PPUSH
13342: CALL_OW 12
13346: ARRAY
13347: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_INT 0
13355: PPUSH
13356: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13360: LD_VAR 0 1
13364: PPUSH
13365: LD_OWVAR 3
13369: PUSH
13370: LD_VAR 0 1
13374: DIFF
13375: PPUSH
13376: LD_VAR 0 1
13380: PPUSH
13381: CALL_OW 74
13385: PPUSH
13386: CALL_OW 115
// wait ( 0 0$20 ) ;
13390: LD_INT 700
13392: PPUSH
13393: CALL_OW 67
// SetSide ( un , your_side ) ;
13397: LD_VAR 0 1
13401: PPUSH
13402: LD_OWVAR 2
13406: PPUSH
13407: CALL_OW 235
// end ;
13411: PPOPN 2
13413: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13414: LD_EXP 15
13418: PUSH
13419: LD_EXP 48
13423: AND
13424: IFFALSE 13530
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13432: LD_ADDR_VAR 0 1
13436: PUSH
13437: LD_INT 22
13439: PUSH
13440: LD_OWVAR 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 2
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: LD_INT 0
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 30
13464: PUSH
13465: LD_INT 1
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PPUSH
13481: CALL_OW 69
13485: ST_TO_ADDR
// if not depot then
13486: LD_VAR 0 1
13490: NOT
13491: IFFALSE 13495
// exit ;
13493: GO 13530
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13495: LD_VAR 0 1
13499: PUSH
13500: LD_INT 1
13502: ARRAY
13503: PPUSH
13504: CALL_OW 250
13508: PPUSH
13509: LD_VAR 0 1
13513: PUSH
13514: LD_INT 1
13516: ARRAY
13517: PPUSH
13518: CALL_OW 251
13522: PPUSH
13523: LD_INT 70
13525: PPUSH
13526: CALL_OW 495
// end ;
13530: PPOPN 1
13532: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13533: LD_EXP 15
13537: PUSH
13538: LD_EXP 49
13542: AND
13543: IFFALSE 13754
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
13553: PPUSH
13554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13555: LD_ADDR_VAR 0 5
13559: PUSH
13560: LD_INT 22
13562: PUSH
13563: LD_OWVAR 2
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 21
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PPUSH
13586: CALL_OW 69
13590: ST_TO_ADDR
// if not tmp then
13591: LD_VAR 0 5
13595: NOT
13596: IFFALSE 13600
// exit ;
13598: GO 13754
// for i in tmp do
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: LD_VAR 0 5
13609: PUSH
13610: FOR_IN
13611: IFFALSE 13752
// begin d := rand ( 0 , 5 ) ;
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: LD_INT 0
13620: PPUSH
13621: LD_INT 5
13623: PPUSH
13624: CALL_OW 12
13628: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13629: LD_ADDR_VAR 0 2
13633: PUSH
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL_OW 250
13643: PPUSH
13644: LD_VAR 0 4
13648: PPUSH
13649: LD_INT 3
13651: PPUSH
13652: LD_INT 12
13654: PPUSH
13655: CALL_OW 12
13659: PPUSH
13660: CALL_OW 272
13664: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13665: LD_ADDR_VAR 0 3
13669: PUSH
13670: LD_VAR 0 1
13674: PPUSH
13675: CALL_OW 251
13679: PPUSH
13680: LD_VAR 0 4
13684: PPUSH
13685: LD_INT 3
13687: PPUSH
13688: LD_INT 12
13690: PPUSH
13691: CALL_OW 12
13695: PPUSH
13696: CALL_OW 273
13700: ST_TO_ADDR
// if ValidHex ( x , y ) then
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: CALL_OW 488
13715: IFFALSE 13750
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13717: LD_VAR 0 1
13721: PPUSH
13722: LD_VAR 0 2
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: LD_INT 3
13734: PPUSH
13735: LD_INT 6
13737: PPUSH
13738: CALL_OW 12
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 483
// end ;
13750: GO 13610
13752: POP
13753: POP
// end ;
13754: PPOPN 5
13756: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13757: LD_EXP 15
13761: PUSH
13762: LD_EXP 50
13766: AND
13767: IFFALSE 13861
13769: GO 13771
13771: DISABLE
13772: LD_INT 0
13774: PPUSH
13775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_OWVAR 2
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 32
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: ST_TO_ADDR
// if not tmp then
13823: LD_VAR 0 2
13827: NOT
13828: IFFALSE 13832
// exit ;
13830: GO 13861
// for i in tmp do
13832: LD_ADDR_VAR 0 1
13836: PUSH
13837: LD_VAR 0 2
13841: PUSH
13842: FOR_IN
13843: IFFALSE 13859
// SetFuel ( i , 0 ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_INT 0
13852: PPUSH
13853: CALL_OW 240
13857: GO 13842
13859: POP
13860: POP
// end ;
13861: PPOPN 2
13863: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13864: LD_EXP 15
13868: PUSH
13869: LD_EXP 51
13873: AND
13874: IFFALSE 13940
13876: GO 13878
13878: DISABLE
13879: LD_INT 0
13881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_OWVAR 2
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 30
13901: PUSH
13902: LD_INT 29
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: ST_TO_ADDR
// if not tmp then
13918: LD_VAR 0 1
13922: NOT
13923: IFFALSE 13927
// exit ;
13925: GO 13940
// DestroyUnit ( tmp [ 1 ] ) ;
13927: LD_VAR 0 1
13931: PUSH
13932: LD_INT 1
13934: ARRAY
13935: PPUSH
13936: CALL_OW 65
// end ;
13940: PPOPN 1
13942: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13943: LD_EXP 15
13947: PUSH
13948: LD_EXP 53
13952: AND
13953: IFFALSE 14082
13955: GO 13957
13957: DISABLE
13958: LD_INT 0
13960: PPUSH
// begin uc_side := 0 ;
13961: LD_ADDR_OWVAR 20
13965: PUSH
13966: LD_INT 0
13968: ST_TO_ADDR
// uc_nation := nation_arabian ;
13969: LD_ADDR_OWVAR 21
13973: PUSH
13974: LD_INT 2
13976: ST_TO_ADDR
// hc_gallery :=  ;
13977: LD_ADDR_OWVAR 33
13981: PUSH
13982: LD_STRING 
13984: ST_TO_ADDR
// hc_name :=  ;
13985: LD_ADDR_OWVAR 26
13989: PUSH
13990: LD_STRING 
13992: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13993: LD_INT 1
13995: PPUSH
13996: LD_INT 11
13998: PPUSH
13999: LD_INT 10
14001: PPUSH
14002: CALL_OW 380
// un := CreateHuman ;
14006: LD_ADDR_VAR 0 1
14010: PUSH
14011: CALL_OW 44
14015: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14016: LD_VAR 0 1
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14035: LD_VAR 0 1
14039: PPUSH
14040: LD_INT 22
14042: PUSH
14043: LD_OWVAR 2
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 69
14056: PPUSH
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 74
14066: PPUSH
14067: CALL_OW 115
// until IsDead ( un ) ;
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 301
14080: IFFALSE 14028
// end ;
14082: PPOPN 1
14084: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14085: LD_EXP 15
14089: PUSH
14090: LD_EXP 55
14094: AND
14095: IFFALSE 14107
14097: GO 14099
14099: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14100: LD_STRING earthquake(getX(game), 0, 32)
14102: PPUSH
14103: CALL_OW 559
14107: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14108: LD_EXP 15
14112: PUSH
14113: LD_EXP 56
14117: AND
14118: IFFALSE 14209
14120: GO 14122
14122: DISABLE
14123: LD_INT 0
14125: PPUSH
// begin enable ;
14126: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14127: LD_ADDR_VAR 0 1
14131: PUSH
14132: LD_INT 22
14134: PUSH
14135: LD_OWVAR 2
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 21
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 33
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: PPUSH
14169: CALL_OW 69
14173: ST_TO_ADDR
// if not tmp then
14174: LD_VAR 0 1
14178: NOT
14179: IFFALSE 14183
// exit ;
14181: GO 14209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14183: LD_VAR 0 1
14187: PUSH
14188: LD_INT 1
14190: PPUSH
14191: LD_VAR 0 1
14195: PPUSH
14196: CALL_OW 12
14200: ARRAY
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: CALL_OW 234
// end ;
14209: PPOPN 1
14211: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14212: LD_EXP 15
14216: PUSH
14217: LD_EXP 57
14221: AND
14222: IFFALSE 14363
14224: GO 14226
14226: DISABLE
14227: LD_INT 0
14229: PPUSH
14230: PPUSH
14231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_OWVAR 2
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 25
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 69
14267: ST_TO_ADDR
// if not tmp then
14268: LD_VAR 0 3
14272: NOT
14273: IFFALSE 14277
// exit ;
14275: GO 14363
// un := tmp [ rand ( 1 , tmp ) ] ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_VAR 0 3
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: ST_TO_ADDR
// if Crawls ( un ) then
14301: LD_VAR 0 2
14305: PPUSH
14306: CALL_OW 318
14310: IFFALSE 14321
// ComWalk ( un ) ;
14312: LD_VAR 0 2
14316: PPUSH
14317: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14321: LD_VAR 0 2
14325: PPUSH
14326: LD_INT 9
14328: PPUSH
14329: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14333: LD_INT 28
14335: PPUSH
14336: LD_OWVAR 2
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14348: LD_INT 29
14350: PPUSH
14351: LD_OWVAR 2
14355: PPUSH
14356: LD_INT 2
14358: PPUSH
14359: CALL_OW 322
// end ;
14363: PPOPN 3
14365: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14366: LD_EXP 15
14370: PUSH
14371: LD_EXP 58
14375: AND
14376: IFFALSE 14487
14378: GO 14380
14380: DISABLE
14381: LD_INT 0
14383: PPUSH
14384: PPUSH
14385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14386: LD_ADDR_VAR 0 3
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_OWVAR 2
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 25
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: ST_TO_ADDR
// if not tmp then
14422: LD_VAR 0 3
14426: NOT
14427: IFFALSE 14431
// exit ;
14429: GO 14487
// un := tmp [ rand ( 1 , tmp ) ] ;
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: LD_VAR 0 3
14440: PUSH
14441: LD_INT 1
14443: PPUSH
14444: LD_VAR 0 3
14448: PPUSH
14449: CALL_OW 12
14453: ARRAY
14454: ST_TO_ADDR
// if Crawls ( un ) then
14455: LD_VAR 0 2
14459: PPUSH
14460: CALL_OW 318
14464: IFFALSE 14475
// ComWalk ( un ) ;
14466: LD_VAR 0 2
14470: PPUSH
14471: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14475: LD_VAR 0 2
14479: PPUSH
14480: LD_INT 8
14482: PPUSH
14483: CALL_OW 336
// end ;
14487: PPOPN 3
14489: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14490: LD_EXP 15
14494: PUSH
14495: LD_EXP 59
14499: AND
14500: IFFALSE 14644
14502: GO 14504
14504: DISABLE
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14509: LD_ADDR_VAR 0 2
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_OWVAR 2
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 21
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: LD_INT 34
14541: PUSH
14542: LD_INT 12
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 34
14551: PUSH
14552: LD_INT 51
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 34
14561: PUSH
14562: LD_INT 32
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: ST_TO_ADDR
// if not tmp then
14585: LD_VAR 0 2
14589: NOT
14590: IFFALSE 14594
// exit ;
14592: GO 14644
// for i in tmp do
14594: LD_ADDR_VAR 0 1
14598: PUSH
14599: LD_VAR 0 2
14603: PUSH
14604: FOR_IN
14605: IFFALSE 14642
// if GetCargo ( i , mat_artifact ) = 0 then
14607: LD_VAR 0 1
14611: PPUSH
14612: LD_INT 4
14614: PPUSH
14615: CALL_OW 289
14619: PUSH
14620: LD_INT 0
14622: EQUAL
14623: IFFALSE 14640
// SetCargo ( i , mat_siberit , 100 ) ;
14625: LD_VAR 0 1
14629: PPUSH
14630: LD_INT 3
14632: PPUSH
14633: LD_INT 100
14635: PPUSH
14636: CALL_OW 290
14640: GO 14604
14642: POP
14643: POP
// end ;
14644: PPOPN 2
14646: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14647: LD_EXP 15
14651: PUSH
14652: LD_EXP 60
14656: AND
14657: IFFALSE 14840
14659: GO 14661
14661: DISABLE
14662: LD_INT 0
14664: PPUSH
14665: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_OWVAR 2
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PPUSH
14683: CALL_OW 69
14687: ST_TO_ADDR
// if not tmp then
14688: LD_VAR 0 2
14692: NOT
14693: IFFALSE 14697
// exit ;
14695: GO 14840
// for i := 1 to 2 do
14697: LD_ADDR_VAR 0 1
14701: PUSH
14702: DOUBLE
14703: LD_INT 1
14705: DEC
14706: ST_TO_ADDR
14707: LD_INT 2
14709: PUSH
14710: FOR_TO
14711: IFFALSE 14838
// begin uc_side := your_side ;
14713: LD_ADDR_OWVAR 20
14717: PUSH
14718: LD_OWVAR 2
14722: ST_TO_ADDR
// uc_nation := nation_american ;
14723: LD_ADDR_OWVAR 21
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// vc_chassis := us_morphling ;
14731: LD_ADDR_OWVAR 37
14735: PUSH
14736: LD_INT 5
14738: ST_TO_ADDR
// vc_engine := engine_siberite ;
14739: LD_ADDR_OWVAR 39
14743: PUSH
14744: LD_INT 3
14746: ST_TO_ADDR
// vc_control := control_computer ;
14747: LD_ADDR_OWVAR 38
14751: PUSH
14752: LD_INT 3
14754: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14755: LD_ADDR_OWVAR 40
14759: PUSH
14760: LD_INT 10
14762: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14763: LD_VAR 0 2
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: CALL_OW 310
14776: NOT
14777: IFFALSE 14824
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14779: CALL_OW 45
14783: PPUSH
14784: LD_VAR 0 2
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: CALL_OW 250
14797: PPUSH
14798: LD_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: ARRAY
14806: PPUSH
14807: CALL_OW 251
14811: PPUSH
14812: LD_INT 12
14814: PPUSH
14815: LD_INT 1
14817: PPUSH
14818: CALL_OW 50
14822: GO 14836
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14824: CALL_OW 45
14828: PPUSH
14829: LD_INT 1
14831: PPUSH
14832: CALL_OW 51
// end ;
14836: GO 14710
14838: POP
14839: POP
// end ;
14840: PPOPN 2
14842: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14843: LD_EXP 15
14847: PUSH
14848: LD_EXP 61
14852: AND
14853: IFFALSE 15075
14855: GO 14857
14857: DISABLE
14858: LD_INT 0
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14866: LD_ADDR_VAR 0 6
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_OWVAR 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 21
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: LD_INT 23
14898: PUSH
14899: LD_INT 0
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: ST_TO_ADDR
// if not tmp then
14920: LD_VAR 0 6
14924: NOT
14925: IFFALSE 14929
// exit ;
14927: GO 15075
// s1 := rand ( 1 , 4 ) ;
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_INT 1
14936: PPUSH
14937: LD_INT 4
14939: PPUSH
14940: CALL_OW 12
14944: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14945: LD_ADDR_VAR 0 4
14949: PUSH
14950: LD_VAR 0 6
14954: PUSH
14955: LD_INT 1
14957: ARRAY
14958: PPUSH
14959: LD_VAR 0 2
14963: PPUSH
14964: CALL_OW 259
14968: ST_TO_ADDR
// if s1 = 1 then
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: EQUAL
14977: IFFALSE 14997
// s2 := rand ( 2 , 4 ) else
14979: LD_ADDR_VAR 0 3
14983: PUSH
14984: LD_INT 2
14986: PPUSH
14987: LD_INT 4
14989: PPUSH
14990: CALL_OW 12
14994: ST_TO_ADDR
14995: GO 15005
// s2 := 1 ;
14997: LD_ADDR_VAR 0 3
15001: PUSH
15002: LD_INT 1
15004: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15005: LD_ADDR_VAR 0 5
15009: PUSH
15010: LD_VAR 0 6
15014: PUSH
15015: LD_INT 1
15017: ARRAY
15018: PPUSH
15019: LD_VAR 0 3
15023: PPUSH
15024: CALL_OW 259
15028: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15029: LD_VAR 0 6
15033: PUSH
15034: LD_INT 1
15036: ARRAY
15037: PPUSH
15038: LD_VAR 0 2
15042: PPUSH
15043: LD_VAR 0 5
15047: PPUSH
15048: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15052: LD_VAR 0 6
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_VAR 0 4
15070: PPUSH
15071: CALL_OW 237
// end ;
15075: PPOPN 6
15077: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15078: LD_EXP 15
15082: PUSH
15083: LD_EXP 62
15087: AND
15088: IFFALSE 15167
15090: GO 15092
15092: DISABLE
15093: LD_INT 0
15095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15096: LD_ADDR_VAR 0 1
15100: PUSH
15101: LD_INT 22
15103: PUSH
15104: LD_OWVAR 2
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 30
15115: PUSH
15116: LD_INT 3
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: ST_TO_ADDR
// if not tmp then
15132: LD_VAR 0 1
15136: NOT
15137: IFFALSE 15141
// exit ;
15139: GO 15167
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15141: LD_VAR 0 1
15145: PUSH
15146: LD_INT 1
15148: PPUSH
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 12
15158: ARRAY
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 234
// end ;
15167: PPOPN 1
15169: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15170: LD_EXP 15
15174: PUSH
15175: LD_EXP 63
15179: AND
15180: IFFALSE 15292
15182: GO 15184
15184: DISABLE
15185: LD_INT 0
15187: PPUSH
15188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15189: LD_ADDR_VAR 0 2
15193: PUSH
15194: LD_INT 22
15196: PUSH
15197: LD_OWVAR 2
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: LD_INT 30
15211: PUSH
15212: LD_INT 27
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 26
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: LD_INT 28
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 69
15253: ST_TO_ADDR
// if not tmp then
15254: LD_VAR 0 2
15258: NOT
15259: IFFALSE 15263
// exit ;
15261: GO 15292
// for i in tmp do
15263: LD_ADDR_VAR 0 1
15267: PUSH
15268: LD_VAR 0 2
15272: PUSH
15273: FOR_IN
15274: IFFALSE 15290
// SetLives ( i , 1 ) ;
15276: LD_VAR 0 1
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 234
15288: GO 15273
15290: POP
15291: POP
// end ;
15292: PPOPN 2
15294: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15295: LD_EXP 15
15299: PUSH
15300: LD_EXP 64
15304: AND
15305: IFFALSE 15579
15307: GO 15309
15309: DISABLE
15310: LD_INT 0
15312: PPUSH
15313: PPUSH
15314: PPUSH
// begin i := rand ( 1 , 7 ) ;
15315: LD_ADDR_VAR 0 1
15319: PUSH
15320: LD_INT 1
15322: PPUSH
15323: LD_INT 7
15325: PPUSH
15326: CALL_OW 12
15330: ST_TO_ADDR
// case i of 1 :
15331: LD_VAR 0 1
15335: PUSH
15336: LD_INT 1
15338: DOUBLE
15339: EQUAL
15340: IFTRUE 15344
15342: GO 15354
15344: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15345: LD_STRING earthquake(getX(game), 0, 32)
15347: PPUSH
15348: CALL_OW 559
15352: GO 15579
15354: LD_INT 2
15356: DOUBLE
15357: EQUAL
15358: IFTRUE 15362
15360: GO 15376
15362: POP
// begin ToLua ( displayStucuk(); ) ;
15363: LD_STRING displayStucuk();
15365: PPUSH
15366: CALL_OW 559
// ResetFog ;
15370: CALL_OW 335
// end ; 3 :
15374: GO 15579
15376: LD_INT 3
15378: DOUBLE
15379: EQUAL
15380: IFTRUE 15384
15382: GO 15488
15384: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15385: LD_ADDR_VAR 0 2
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_OWVAR 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 1
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 69
15420: ST_TO_ADDR
// if not tmp then
15421: LD_VAR 0 2
15425: NOT
15426: IFFALSE 15430
// exit ;
15428: GO 15579
// un := tmp [ rand ( 1 , tmp ) ] ;
15430: LD_ADDR_VAR 0 3
15434: PUSH
15435: LD_VAR 0 2
15439: PUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 2
15447: PPUSH
15448: CALL_OW 12
15452: ARRAY
15453: ST_TO_ADDR
// if Crawls ( un ) then
15454: LD_VAR 0 3
15458: PPUSH
15459: CALL_OW 318
15463: IFFALSE 15474
// ComWalk ( un ) ;
15465: LD_VAR 0 3
15469: PPUSH
15470: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15474: LD_VAR 0 3
15478: PPUSH
15479: LD_INT 8
15481: PPUSH
15482: CALL_OW 336
// end ; 4 :
15486: GO 15579
15488: LD_INT 4
15490: DOUBLE
15491: EQUAL
15492: IFTRUE 15496
15494: GO 15557
15496: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15497: LD_ADDR_VAR 0 2
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_OWVAR 2
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 30
15516: PUSH
15517: LD_INT 29
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: ST_TO_ADDR
// if not tmp then
15533: LD_VAR 0 2
15537: NOT
15538: IFFALSE 15542
// exit ;
15540: GO 15579
// DestroyUnit ( tmp [ 1 ] ) ;
15542: LD_VAR 0 2
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: CALL_OW 65
// end ; 5 .. 7 :
15555: GO 15579
15557: LD_INT 5
15559: DOUBLE
15560: GREATEREQUAL
15561: IFFALSE 15569
15563: LD_INT 7
15565: DOUBLE
15566: LESSEQUAL
15567: IFTRUE 15571
15569: GO 15578
15571: POP
// StreamSibBomb ; end ;
15572: CALL 11829 0 0
15576: GO 15579
15578: POP
// end ;
15579: PPOPN 3
15581: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15582: LD_EXP 15
15586: PUSH
15587: LD_EXP 65
15591: AND
15592: IFFALSE 15748
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 81
15609: PUSH
15610: LD_OWVAR 2
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PPUSH
15651: CALL_OW 69
15655: ST_TO_ADDR
// if not tmp then
15656: LD_VAR 0 2
15660: NOT
15661: IFFALSE 15665
// exit ;
15663: GO 15748
// p := 0 ;
15665: LD_ADDR_VAR 0 3
15669: PUSH
15670: LD_INT 0
15672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15673: LD_INT 35
15675: PPUSH
15676: CALL_OW 67
// p := p + 1 ;
15680: LD_ADDR_VAR 0 3
15684: PUSH
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 1
15692: PLUS
15693: ST_TO_ADDR
// for i in tmp do
15694: LD_ADDR_VAR 0 1
15698: PUSH
15699: LD_VAR 0 2
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15736
// if GetLives ( i ) < 1000 then
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL_OW 256
15716: PUSH
15717: LD_INT 1000
15719: LESS
15720: IFFALSE 15734
// SetLives ( i , 1000 ) ;
15722: LD_VAR 0 1
15726: PPUSH
15727: LD_INT 1000
15729: PPUSH
15730: CALL_OW 234
15734: GO 15704
15736: POP
15737: POP
// until p > 20 ;
15738: LD_VAR 0 3
15742: PUSH
15743: LD_INT 20
15745: GREATER
15746: IFFALSE 15673
// end ;
15748: PPOPN 3
15750: END
// every 0 0$1 trigger StreamModeActive and sTime do
15751: LD_EXP 15
15755: PUSH
15756: LD_EXP 66
15760: AND
15761: IFFALSE 15796
15763: GO 15765
15765: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15766: LD_INT 28
15768: PPUSH
15769: LD_OWVAR 2
15773: PPUSH
15774: LD_INT 2
15776: PPUSH
15777: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15781: LD_INT 30
15783: PPUSH
15784: LD_OWVAR 2
15788: PPUSH
15789: LD_INT 2
15791: PPUSH
15792: CALL_OW 322
// end ;
15796: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15797: LD_EXP 15
15801: PUSH
15802: LD_EXP 67
15806: AND
15807: IFFALSE 15928
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15816: LD_ADDR_VAR 0 2
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_OWVAR 2
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 3
15845: PUSH
15846: LD_INT 23
15848: PUSH
15849: LD_INT 0
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: PPUSH
15865: CALL_OW 69
15869: ST_TO_ADDR
// if not tmp then
15870: LD_VAR 0 2
15874: NOT
15875: IFFALSE 15879
// exit ;
15877: GO 15928
// for i in tmp do
15879: LD_ADDR_VAR 0 1
15883: PUSH
15884: LD_VAR 0 2
15888: PUSH
15889: FOR_IN
15890: IFFALSE 15926
// begin if Crawls ( i ) then
15892: LD_VAR 0 1
15896: PPUSH
15897: CALL_OW 318
15901: IFFALSE 15912
// ComWalk ( i ) ;
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 138
// SetClass ( i , 2 ) ;
15912: LD_VAR 0 1
15916: PPUSH
15917: LD_INT 2
15919: PPUSH
15920: CALL_OW 336
// end ;
15924: GO 15889
15926: POP
15927: POP
// end ;
15928: PPOPN 2
15930: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15931: LD_EXP 15
15935: PUSH
15936: LD_EXP 68
15940: AND
15941: IFFALSE 16222
15943: GO 15945
15945: DISABLE
15946: LD_INT 0
15948: PPUSH
15949: PPUSH
15950: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15951: LD_OWVAR 2
15955: PPUSH
15956: LD_INT 9
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15969: LD_INT 9
15971: PPUSH
15972: LD_OWVAR 2
15976: PPUSH
15977: CALL_OW 343
// uc_side := 9 ;
15981: LD_ADDR_OWVAR 20
15985: PUSH
15986: LD_INT 9
15988: ST_TO_ADDR
// uc_nation := 2 ;
15989: LD_ADDR_OWVAR 21
15993: PUSH
15994: LD_INT 2
15996: ST_TO_ADDR
// hc_name := Dark Warrior ;
15997: LD_ADDR_OWVAR 26
16001: PUSH
16002: LD_STRING Dark Warrior
16004: ST_TO_ADDR
// hc_gallery :=  ;
16005: LD_ADDR_OWVAR 33
16009: PUSH
16010: LD_STRING 
16012: ST_TO_ADDR
// hc_noskilllimit := true ;
16013: LD_ADDR_OWVAR 76
16017: PUSH
16018: LD_INT 1
16020: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16021: LD_ADDR_OWVAR 31
16025: PUSH
16026: LD_INT 30
16028: PUSH
16029: LD_INT 30
16031: PUSH
16032: LD_INT 30
16034: PUSH
16035: LD_INT 30
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: ST_TO_ADDR
// un := CreateHuman ;
16044: LD_ADDR_VAR 0 3
16048: PUSH
16049: CALL_OW 44
16053: ST_TO_ADDR
// hc_noskilllimit := false ;
16054: LD_ADDR_OWVAR 76
16058: PUSH
16059: LD_INT 0
16061: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 51
// p := 0 ;
16074: LD_ADDR_VAR 0 2
16078: PUSH
16079: LD_INT 0
16081: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16082: LD_INT 35
16084: PPUSH
16085: CALL_OW 67
// p := p + 1 ;
16089: LD_ADDR_VAR 0 2
16093: PUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_INT 1
16101: PLUS
16102: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16103: LD_VAR 0 3
16107: PPUSH
16108: CALL_OW 256
16112: PUSH
16113: LD_INT 1000
16115: LESS
16116: IFFALSE 16130
// SetLives ( un , 1000 ) ;
16118: LD_VAR 0 3
16122: PPUSH
16123: LD_INT 1000
16125: PPUSH
16126: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 81
16137: PUSH
16138: LD_OWVAR 2
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 91
16149: PUSH
16150: LD_VAR 0 3
16154: PUSH
16155: LD_INT 30
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: CALL_OW 74
16181: PPUSH
16182: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16186: LD_VAR 0 2
16190: PUSH
16191: LD_INT 60
16193: GREATER
16194: PUSH
16195: LD_VAR 0 3
16199: PPUSH
16200: CALL_OW 301
16204: OR
16205: IFFALSE 16082
// if un then
16207: LD_VAR 0 3
16211: IFFALSE 16222
// RemoveUnit ( un ) ;
16213: LD_VAR 0 3
16217: PPUSH
16218: CALL_OW 64
// end ;
16222: PPOPN 3
16224: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y ) ; begin
16225: LD_INT 0
16227: PPUSH
// case cmd of 301 :
16228: LD_VAR 0 1
16232: PUSH
16233: LD_INT 301
16235: DOUBLE
16236: EQUAL
16237: IFTRUE 16241
16239: GO 16244
16241: POP
// ; end ;
16242: GO 16245
16244: POP
// end ;
16245: LD_VAR 0 6
16249: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16250: LD_INT 0
16252: PPUSH
16253: PPUSH
16254: PPUSH
16255: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16256: LD_ADDR_VAR 0 4
16260: PUSH
16261: LD_INT 22
16263: PUSH
16264: LD_OWVAR 2
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: LD_INT 30
16278: PUSH
16279: LD_INT 0
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 30
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 69
16309: ST_TO_ADDR
// if not tmp then
16310: LD_VAR 0 4
16314: NOT
16315: IFFALSE 16319
// exit ;
16317: GO 16378
// for i in tmp do
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_VAR 0 4
16328: PUSH
16329: FOR_IN
16330: IFFALSE 16376
// for j = 1 to 3 do
16332: LD_ADDR_VAR 0 3
16336: PUSH
16337: DOUBLE
16338: LD_INT 1
16340: DEC
16341: ST_TO_ADDR
16342: LD_INT 3
16344: PUSH
16345: FOR_TO
16346: IFFALSE 16372
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16348: LD_VAR 0 2
16352: PPUSH
16353: CALL_OW 274
16357: PPUSH
16358: LD_VAR 0 3
16362: PPUSH
16363: LD_INT 99999
16365: PPUSH
16366: CALL_OW 277
16370: GO 16345
16372: POP
16373: POP
16374: GO 16329
16376: POP
16377: POP
// end ;
16378: LD_VAR 0 1
16382: RET
// export function hHackSetLevel10 ; var i , j ; begin
16383: LD_INT 0
16385: PPUSH
16386: PPUSH
16387: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: LD_INT 21
16395: PUSH
16396: LD_INT 1
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 69
16407: PUSH
16408: FOR_IN
16409: IFFALSE 16461
// if IsSelected ( i ) then
16411: LD_VAR 0 2
16415: PPUSH
16416: CALL_OW 306
16420: IFFALSE 16459
// begin for j := 1 to 4 do
16422: LD_ADDR_VAR 0 3
16426: PUSH
16427: DOUBLE
16428: LD_INT 1
16430: DEC
16431: ST_TO_ADDR
16432: LD_INT 4
16434: PUSH
16435: FOR_TO
16436: IFFALSE 16457
// SetSkill ( i , j , 10 ) ;
16438: LD_VAR 0 2
16442: PPUSH
16443: LD_VAR 0 3
16447: PPUSH
16448: LD_INT 10
16450: PPUSH
16451: CALL_OW 237
16455: GO 16435
16457: POP
16458: POP
// end ;
16459: GO 16408
16461: POP
16462: POP
// end ;
16463: LD_VAR 0 1
16467: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16473: LD_ADDR_VAR 0 2
16477: PUSH
16478: LD_INT 22
16480: PUSH
16481: LD_OWVAR 2
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 21
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PPUSH
16504: CALL_OW 69
16508: PUSH
16509: FOR_IN
16510: IFFALSE 16551
// begin for j := 1 to 4 do
16512: LD_ADDR_VAR 0 3
16516: PUSH
16517: DOUBLE
16518: LD_INT 1
16520: DEC
16521: ST_TO_ADDR
16522: LD_INT 4
16524: PUSH
16525: FOR_TO
16526: IFFALSE 16547
// SetSkill ( i , j , 10 ) ;
16528: LD_VAR 0 2
16532: PPUSH
16533: LD_VAR 0 3
16537: PPUSH
16538: LD_INT 10
16540: PPUSH
16541: CALL_OW 237
16545: GO 16525
16547: POP
16548: POP
// end ;
16549: GO 16509
16551: POP
16552: POP
// end ;
16553: LD_VAR 0 1
16557: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
16558: LD_INT 0
16560: PPUSH
// uc_side := your_side ;
16561: LD_ADDR_OWVAR 20
16565: PUSH
16566: LD_OWVAR 2
16570: ST_TO_ADDR
// uc_nation := nation ;
16571: LD_ADDR_OWVAR 21
16575: PUSH
16576: LD_VAR 0 1
16580: ST_TO_ADDR
// InitHc ;
16581: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16585: LD_INT 0
16587: PPUSH
16588: LD_VAR 0 2
16592: PPUSH
16593: LD_VAR 0 3
16597: PPUSH
16598: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
16602: CALL_OW 44
16606: PPUSH
16607: LD_INT 1
16609: PPUSH
16610: CALL_OW 51
// end ;
16614: LD_VAR 0 4
16618: RET
// export function hHackSpawnVehicle ; begin
16619: LD_INT 0
16621: PPUSH
// uc_side := your_side ;
16622: LD_ADDR_OWVAR 20
16626: PUSH
16627: LD_OWVAR 2
16631: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
16632: LD_ADDR_OWVAR 21
16636: PUSH
16637: LD_INT 1
16639: PPUSH
16640: LD_INT 3
16642: PPUSH
16643: CALL_OW 12
16647: ST_TO_ADDR
// InitVc ;
16648: CALL_OW 20
// case uc_nation of 1 :
16652: LD_OWVAR 21
16656: PUSH
16657: LD_INT 1
16659: DOUBLE
16660: EQUAL
16661: IFTRUE 16665
16663: GO 16809
16665: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
16666: LD_ADDR_OWVAR 37
16670: PUSH
16671: LD_INT 1
16673: PUSH
16674: LD_INT 2
16676: PUSH
16677: LD_INT 3
16679: PUSH
16680: LD_INT 4
16682: PUSH
16683: LD_INT 5
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 1
16695: PPUSH
16696: LD_INT 5
16698: PPUSH
16699: CALL_OW 12
16703: ARRAY
16704: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16705: LD_ADDR_OWVAR 39
16709: PUSH
16710: LD_INT 1
16712: PPUSH
16713: LD_INT 3
16715: PPUSH
16716: CALL_OW 12
16720: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
16721: LD_ADDR_OWVAR 38
16725: PUSH
16726: LD_INT 1
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 1
16742: PPUSH
16743: LD_INT 3
16745: PPUSH
16746: CALL_OW 12
16750: ARRAY
16751: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
16752: LD_ADDR_OWVAR 40
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: LD_INT 4
16762: PUSH
16763: LD_INT 5
16765: PUSH
16766: LD_INT 3
16768: PUSH
16769: LD_INT 7
16771: PUSH
16772: LD_INT 8
16774: PUSH
16775: LD_INT 9
16777: PUSH
16778: LD_INT 10
16780: PUSH
16781: LD_INT 6
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PPUSH
16798: LD_INT 9
16800: PPUSH
16801: CALL_OW 12
16805: ARRAY
16806: ST_TO_ADDR
// end ; 2 :
16807: GO 17074
16809: LD_INT 2
16811: DOUBLE
16812: EQUAL
16813: IFTRUE 16817
16815: GO 16941
16817: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
16818: LD_ADDR_OWVAR 37
16822: PUSH
16823: LD_INT 11
16825: PUSH
16826: LD_INT 12
16828: PUSH
16829: LD_INT 13
16831: PUSH
16832: LD_INT 14
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 1
16843: PPUSH
16844: LD_INT 4
16846: PPUSH
16847: CALL_OW 12
16851: ARRAY
16852: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16853: LD_ADDR_OWVAR 39
16857: PUSH
16858: LD_INT 1
16860: PPUSH
16861: LD_INT 3
16863: PPUSH
16864: CALL_OW 12
16868: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
16869: LD_ADDR_OWVAR 38
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: LD_INT 5
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 1
16890: PPUSH
16891: LD_INT 3
16893: PPUSH
16894: CALL_OW 12
16898: ARRAY
16899: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
16900: LD_ADDR_OWVAR 40
16904: PUSH
16905: LD_INT 24
16907: PUSH
16908: LD_INT 26
16910: PUSH
16911: LD_INT 27
16913: PUSH
16914: LD_INT 28
16916: PUSH
16917: LD_INT 29
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 1
16929: PPUSH
16930: LD_INT 5
16932: PPUSH
16933: CALL_OW 12
16937: ARRAY
16938: ST_TO_ADDR
// end ; 3 :
16939: GO 17074
16941: LD_INT 3
16943: DOUBLE
16944: EQUAL
16945: IFTRUE 16949
16947: GO 17073
16949: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
16950: LD_ADDR_OWVAR 37
16954: PUSH
16955: LD_INT 21
16957: PUSH
16958: LD_INT 23
16960: PUSH
16961: LD_INT 22
16963: PUSH
16964: LD_INT 24
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 1
16975: PPUSH
16976: LD_INT 4
16978: PPUSH
16979: CALL_OW 12
16983: ARRAY
16984: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16985: LD_ADDR_OWVAR 39
16989: PUSH
16990: LD_INT 1
16992: PPUSH
16993: LD_INT 3
16995: PPUSH
16996: CALL_OW 12
17000: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
17001: LD_ADDR_OWVAR 38
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 1
17018: PPUSH
17019: LD_INT 2
17021: PPUSH
17022: CALL_OW 12
17026: ARRAY
17027: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
17028: LD_ADDR_OWVAR 40
17032: PUSH
17033: LD_INT 42
17035: PUSH
17036: LD_INT 43
17038: PUSH
17039: LD_INT 44
17041: PUSH
17042: LD_INT 46
17044: PUSH
17045: LD_INT 48
17047: PUSH
17048: LD_INT 47
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 1
17061: PPUSH
17062: LD_INT 6
17064: PPUSH
17065: CALL_OW 12
17069: ARRAY
17070: ST_TO_ADDR
// end ; end ;
17071: GO 17074
17073: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17074: CALL_OW 45
17078: PPUSH
17079: LD_INT 1
17081: PPUSH
17082: CALL_OW 51
// end ;
17086: LD_VAR 0 1
17090: RET
// export hInvincible ; every 1 do
17091: GO 17093
17093: DISABLE
// hInvincible := [ ] ;
17094: LD_ADDR_EXP 69
17098: PUSH
17099: EMPTY
17100: ST_TO_ADDR
17101: END
// every 10 do var i ;
17102: GO 17104
17104: DISABLE
17105: LD_INT 0
17107: PPUSH
// begin enable ;
17108: ENABLE
// if not hInvincible then
17109: LD_EXP 69
17113: NOT
17114: IFFALSE 17118
// exit ;
17116: GO 17162
// for i in hInvincible do
17118: LD_ADDR_VAR 0 1
17122: PUSH
17123: LD_EXP 69
17127: PUSH
17128: FOR_IN
17129: IFFALSE 17160
// if GetLives ( i ) < 1000 then
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 256
17140: PUSH
17141: LD_INT 1000
17143: LESS
17144: IFFALSE 17158
// SetLives ( i , 1000 ) ;
17146: LD_VAR 0 1
17150: PPUSH
17151: LD_INT 1000
17153: PPUSH
17154: CALL_OW 234
17158: GO 17128
17160: POP
17161: POP
// end ;
17162: PPOPN 1
17164: END
// export function hHackInvincible ; var i ; begin
17165: LD_INT 0
17167: PPUSH
17168: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17169: LD_ADDR_VAR 0 2
17173: PUSH
17174: LD_INT 2
17176: PUSH
17177: LD_INT 21
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 2
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: PPUSH
17202: CALL_OW 69
17206: PUSH
17207: FOR_IN
17208: IFFALSE 17269
// if IsSelected ( i ) then
17210: LD_VAR 0 2
17214: PPUSH
17215: CALL_OW 306
17219: IFFALSE 17267
// begin if i in hInvincible then
17221: LD_VAR 0 2
17225: PUSH
17226: LD_EXP 69
17230: IN
17231: IFFALSE 17251
// hInvincible := hInvincible diff i else
17233: LD_ADDR_EXP 69
17237: PUSH
17238: LD_EXP 69
17242: PUSH
17243: LD_VAR 0 2
17247: DIFF
17248: ST_TO_ADDR
17249: GO 17267
// hInvincible := hInvincible union i ;
17251: LD_ADDR_EXP 69
17255: PUSH
17256: LD_EXP 69
17260: PUSH
17261: LD_VAR 0 2
17265: UNION
17266: ST_TO_ADDR
// end ;
17267: GO 17207
17269: POP
17270: POP
// end ;
17271: LD_VAR 0 1
17275: RET
// export function hHackInvisible ; var i , j ; begin
17276: LD_INT 0
17278: PPUSH
17279: PPUSH
17280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_INT 21
17288: PUSH
17289: LD_INT 1
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PPUSH
17296: CALL_OW 69
17300: PUSH
17301: FOR_IN
17302: IFFALSE 17326
// if IsSelected ( i ) then
17304: LD_VAR 0 2
17308: PPUSH
17309: CALL_OW 306
17313: IFFALSE 17324
// ComForceInvisible ( i ) ;
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 496
17324: GO 17301
17326: POP
17327: POP
// end ;
17328: LD_VAR 0 1
17332: RET
// export function hHackChangeYourSide ; begin
17333: LD_INT 0
17335: PPUSH
// if your_side = 8 then
17336: LD_OWVAR 2
17340: PUSH
17341: LD_INT 8
17343: EQUAL
17344: IFFALSE 17356
// your_side := 0 else
17346: LD_ADDR_OWVAR 2
17350: PUSH
17351: LD_INT 0
17353: ST_TO_ADDR
17354: GO 17370
// your_side := your_side + 1 ;
17356: LD_ADDR_OWVAR 2
17360: PUSH
17361: LD_OWVAR 2
17365: PUSH
17366: LD_INT 1
17368: PLUS
17369: ST_TO_ADDR
// end ;
17370: LD_VAR 0 1
17374: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17375: LD_INT 0
17377: PPUSH
17378: PPUSH
17379: PPUSH
// for i in all_units do
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: LD_OWVAR 3
17389: PUSH
17390: FOR_IN
17391: IFFALSE 17469
// if IsSelected ( i ) then
17393: LD_VAR 0 2
17397: PPUSH
17398: CALL_OW 306
17402: IFFALSE 17467
// begin j := GetSide ( i ) ;
17404: LD_ADDR_VAR 0 3
17408: PUSH
17409: LD_VAR 0 2
17413: PPUSH
17414: CALL_OW 255
17418: ST_TO_ADDR
// if j = 8 then
17419: LD_VAR 0 3
17423: PUSH
17424: LD_INT 8
17426: EQUAL
17427: IFFALSE 17439
// j := 0 else
17429: LD_ADDR_VAR 0 3
17433: PUSH
17434: LD_INT 0
17436: ST_TO_ADDR
17437: GO 17453
// j := j + 1 ;
17439: LD_ADDR_VAR 0 3
17443: PUSH
17444: LD_VAR 0 3
17448: PUSH
17449: LD_INT 1
17451: PLUS
17452: ST_TO_ADDR
// SetSide ( i , j ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: CALL_OW 235
// end ;
17467: GO 17390
17469: POP
17470: POP
// end ;
17471: LD_VAR 0 1
17475: RET
// export function hHackFog ; begin
17476: LD_INT 0
17478: PPUSH
// FogOff ( true ) ;
17479: LD_INT 1
17481: PPUSH
17482: CALL_OW 344
// end ;
17486: LD_VAR 0 1
17490: RET
// export function hHackApeman ; begin
17491: LD_INT 0
17493: PPUSH
// uc_side := your_side ;
17494: LD_ADDR_OWVAR 20
17498: PUSH
17499: LD_OWVAR 2
17503: ST_TO_ADDR
// uc_nation := 0 ;
17504: LD_ADDR_OWVAR 21
17508: PUSH
17509: LD_INT 0
17511: ST_TO_ADDR
// hc_name :=  ;
17512: LD_ADDR_OWVAR 26
17516: PUSH
17517: LD_STRING 
17519: ST_TO_ADDR
// hc_gallery :=  ;
17520: LD_ADDR_OWVAR 33
17524: PUSH
17525: LD_STRING 
17527: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
17528: LD_ADDR_OWVAR 31
17532: PUSH
17533: LD_INT 0
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: ST_TO_ADDR
// hc_class := class_apeman ;
17551: LD_ADDR_OWVAR 28
17555: PUSH
17556: LD_INT 12
17558: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17559: CALL_OW 44
17563: PPUSH
17564: LD_INT 1
17566: PPUSH
17567: CALL_OW 51
// end ;
17571: LD_VAR 0 1
17575: RET
// export function hHackBoom ; begin
17576: LD_INT 0
17578: PPUSH
// uc_side := your_side ;
17579: LD_ADDR_OWVAR 20
17583: PUSH
17584: LD_OWVAR 2
17588: ST_TO_ADDR
// uc_nation := 1 ;
17589: LD_ADDR_OWVAR 21
17593: PUSH
17594: LD_INT 1
17596: ST_TO_ADDR
// vc_chassis := us_morphling ;
17597: LD_ADDR_OWVAR 37
17601: PUSH
17602: LD_INT 5
17604: ST_TO_ADDR
// vc_engine := engine_siberite ;
17605: LD_ADDR_OWVAR 39
17609: PUSH
17610: LD_INT 3
17612: ST_TO_ADDR
// vc_control := control_computer ;
17613: LD_ADDR_OWVAR 38
17617: PUSH
17618: LD_INT 3
17620: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
17621: LD_ADDR_OWVAR 40
17625: PUSH
17626: LD_INT 8
17628: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17629: CALL_OW 45
17633: PPUSH
17634: LD_INT 1
17636: PPUSH
17637: CALL_OW 51
// end ; end_of_file
17641: LD_VAR 0 1
17645: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17646: LD_INT 0
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 264
17661: PUSH
17662: LD_EXP 80
17666: EQUAL
17667: IFFALSE 17739
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17669: LD_INT 68
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 255
17681: PPUSH
17682: CALL_OW 321
17686: PUSH
17687: LD_INT 2
17689: EQUAL
17690: IFFALSE 17702
// eff := 70 else
17692: LD_ADDR_VAR 0 4
17696: PUSH
17697: LD_INT 70
17699: ST_TO_ADDR
17700: GO 17710
// eff := 30 ;
17702: LD_ADDR_VAR 0 4
17706: PUSH
17707: LD_INT 30
17709: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 250
17719: PPUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 251
17729: PPUSH
17730: LD_VAR 0 4
17734: PPUSH
17735: CALL_OW 495
// end ; end ;
17739: LD_VAR 0 2
17743: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17744: LD_INT 0
17746: PPUSH
// end ;
17747: LD_VAR 0 4
17751: RET
// export function SOS_Command ( cmd ) ; begin
17752: LD_INT 0
17754: PPUSH
// end ;
17755: LD_VAR 0 2
17759: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17760: LD_INT 0
17762: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17763: LD_VAR 0 1
17767: PUSH
17768: LD_INT 254
17770: EQUAL
17771: PUSH
17772: LD_VAR 0 2
17776: PPUSH
17777: CALL_OW 264
17781: PUSH
17782: LD_EXP 78
17786: EQUAL
17787: AND
17788: PUSH
17789: LD_VAR 0 3
17793: PPUSH
17794: CALL_OW 263
17798: PUSH
17799: LD_INT 3
17801: EQUAL
17802: AND
17803: IFFALSE 17819
// HackDestroyVehicle ( unit , selectedUnit ) ;
17805: LD_VAR 0 2
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: CALL 19328 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17819: LD_VAR 0 1
17823: PUSH
17824: LD_INT 255
17826: EQUAL
17827: PUSH
17828: LD_VAR 0 2
17832: PPUSH
17833: CALL_OW 264
17837: PUSH
17838: LD_INT 14
17840: PUSH
17841: LD_INT 53
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: IN
17848: AND
17849: PUSH
17850: LD_VAR 0 4
17854: PPUSH
17855: LD_VAR 0 5
17859: PPUSH
17860: CALL_OW 488
17864: AND
17865: IFFALSE 17889
// CutTreeXYR ( unit , x , y , 12 ) ;
17867: LD_VAR 0 2
17871: PPUSH
17872: LD_VAR 0 4
17876: PPUSH
17877: LD_VAR 0 5
17881: PPUSH
17882: LD_INT 12
17884: PPUSH
17885: CALL 17894 0 4
// end ;
17889: LD_VAR 0 6
17893: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17894: LD_INT 0
17896: PPUSH
17897: PPUSH
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17905: LD_VAR 0 1
17909: NOT
17910: PUSH
17911: LD_VAR 0 2
17915: PPUSH
17916: LD_VAR 0 3
17920: PPUSH
17921: CALL_OW 488
17925: NOT
17926: OR
17927: PUSH
17928: LD_VAR 0 4
17932: NOT
17933: OR
17934: IFFALSE 17938
// exit ;
17936: GO 18278
// list := [ ] ;
17938: LD_ADDR_VAR 0 13
17942: PUSH
17943: EMPTY
17944: ST_TO_ADDR
// if x - r < 0 then
17945: LD_VAR 0 2
17949: PUSH
17950: LD_VAR 0 4
17954: MINUS
17955: PUSH
17956: LD_INT 0
17958: LESS
17959: IFFALSE 17971
// min_x := 0 else
17961: LD_ADDR_VAR 0 7
17965: PUSH
17966: LD_INT 0
17968: ST_TO_ADDR
17969: GO 17987
// min_x := x - r ;
17971: LD_ADDR_VAR 0 7
17975: PUSH
17976: LD_VAR 0 2
17980: PUSH
17981: LD_VAR 0 4
17985: MINUS
17986: ST_TO_ADDR
// if y - r < 0 then
17987: LD_VAR 0 3
17991: PUSH
17992: LD_VAR 0 4
17996: MINUS
17997: PUSH
17998: LD_INT 0
18000: LESS
18001: IFFALSE 18013
// min_y := 0 else
18003: LD_ADDR_VAR 0 8
18007: PUSH
18008: LD_INT 0
18010: ST_TO_ADDR
18011: GO 18029
// min_y := y - r ;
18013: LD_ADDR_VAR 0 8
18017: PUSH
18018: LD_VAR 0 3
18022: PUSH
18023: LD_VAR 0 4
18027: MINUS
18028: ST_TO_ADDR
// max_x := x + r ;
18029: LD_ADDR_VAR 0 9
18033: PUSH
18034: LD_VAR 0 2
18038: PUSH
18039: LD_VAR 0 4
18043: PLUS
18044: ST_TO_ADDR
// max_y := y + r ;
18045: LD_ADDR_VAR 0 10
18049: PUSH
18050: LD_VAR 0 3
18054: PUSH
18055: LD_VAR 0 4
18059: PLUS
18060: ST_TO_ADDR
// for _x = min_x to max_x do
18061: LD_ADDR_VAR 0 11
18065: PUSH
18066: DOUBLE
18067: LD_VAR 0 7
18071: DEC
18072: ST_TO_ADDR
18073: LD_VAR 0 9
18077: PUSH
18078: FOR_TO
18079: IFFALSE 18196
// for _y = min_y to max_y do
18081: LD_ADDR_VAR 0 12
18085: PUSH
18086: DOUBLE
18087: LD_VAR 0 8
18091: DEC
18092: ST_TO_ADDR
18093: LD_VAR 0 10
18097: PUSH
18098: FOR_TO
18099: IFFALSE 18192
// begin if not ValidHex ( _x , _y ) then
18101: LD_VAR 0 11
18105: PPUSH
18106: LD_VAR 0 12
18110: PPUSH
18111: CALL_OW 488
18115: NOT
18116: IFFALSE 18120
// continue ;
18118: GO 18098
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18120: LD_VAR 0 11
18124: PPUSH
18125: LD_VAR 0 12
18129: PPUSH
18130: CALL_OW 351
18134: PUSH
18135: LD_VAR 0 11
18139: PPUSH
18140: LD_VAR 0 12
18144: PPUSH
18145: CALL_OW 554
18149: AND
18150: IFFALSE 18190
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18152: LD_ADDR_VAR 0 13
18156: PUSH
18157: LD_VAR 0 13
18161: PPUSH
18162: LD_VAR 0 13
18166: PUSH
18167: LD_INT 1
18169: PLUS
18170: PPUSH
18171: LD_VAR 0 11
18175: PUSH
18176: LD_VAR 0 12
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PPUSH
18185: CALL_OW 2
18189: ST_TO_ADDR
// end ;
18190: GO 18098
18192: POP
18193: POP
18194: GO 18078
18196: POP
18197: POP
// if not list then
18198: LD_VAR 0 13
18202: NOT
18203: IFFALSE 18207
// exit ;
18205: GO 18278
// for i in list do
18207: LD_ADDR_VAR 0 6
18211: PUSH
18212: LD_VAR 0 13
18216: PUSH
18217: FOR_IN
18218: IFFALSE 18276
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18220: LD_VAR 0 1
18224: PPUSH
18225: LD_STRING M
18227: PUSH
18228: LD_VAR 0 6
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PUSH
18237: LD_VAR 0 6
18241: PUSH
18242: LD_INT 2
18244: ARRAY
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: LD_INT 0
18251: PUSH
18252: LD_INT 0
18254: PUSH
18255: LD_INT 0
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: PPUSH
18270: CALL_OW 447
18274: GO 18217
18276: POP
18277: POP
// end ;
18278: LD_VAR 0 5
18282: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18283: LD_EXP 70
18287: NOT
18288: IFFALSE 18338
18290: GO 18292
18292: DISABLE
// begin initHack := true ;
18293: LD_ADDR_EXP 70
18297: PUSH
18298: LD_INT 1
18300: ST_TO_ADDR
// hackTanks := [ ] ;
18301: LD_ADDR_EXP 71
18305: PUSH
18306: EMPTY
18307: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18308: LD_ADDR_EXP 72
18312: PUSH
18313: EMPTY
18314: ST_TO_ADDR
// hackLimit := 3 ;
18315: LD_ADDR_EXP 73
18319: PUSH
18320: LD_INT 3
18322: ST_TO_ADDR
// hackDist := 12 ;
18323: LD_ADDR_EXP 74
18327: PUSH
18328: LD_INT 12
18330: ST_TO_ADDR
// hackCounter := [ ] ;
18331: LD_ADDR_EXP 75
18335: PUSH
18336: EMPTY
18337: ST_TO_ADDR
// end ;
18338: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18339: LD_EXP 70
18343: PUSH
18344: LD_INT 34
18346: PUSH
18347: LD_EXP 78
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PPUSH
18356: CALL_OW 69
18360: AND
18361: IFFALSE 18616
18363: GO 18365
18365: DISABLE
18366: LD_INT 0
18368: PPUSH
18369: PPUSH
// begin enable ;
18370: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18371: LD_ADDR_VAR 0 1
18375: PUSH
18376: LD_INT 34
18378: PUSH
18379: LD_EXP 78
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL_OW 69
18392: PUSH
18393: FOR_IN
18394: IFFALSE 18614
// begin if not i in hackTanks then
18396: LD_VAR 0 1
18400: PUSH
18401: LD_EXP 71
18405: IN
18406: NOT
18407: IFFALSE 18490
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18409: LD_ADDR_EXP 71
18413: PUSH
18414: LD_EXP 71
18418: PPUSH
18419: LD_EXP 71
18423: PUSH
18424: LD_INT 1
18426: PLUS
18427: PPUSH
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 1
18437: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18438: LD_ADDR_EXP 72
18442: PUSH
18443: LD_EXP 72
18447: PPUSH
18448: LD_EXP 72
18452: PUSH
18453: LD_INT 1
18455: PLUS
18456: PPUSH
18457: EMPTY
18458: PPUSH
18459: CALL_OW 1
18463: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18464: LD_ADDR_EXP 75
18468: PUSH
18469: LD_EXP 75
18473: PPUSH
18474: LD_EXP 75
18478: PUSH
18479: LD_INT 1
18481: PLUS
18482: PPUSH
18483: EMPTY
18484: PPUSH
18485: CALL_OW 1
18489: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18490: LD_VAR 0 1
18494: PPUSH
18495: CALL_OW 302
18499: NOT
18500: IFFALSE 18513
// begin HackUnlinkAll ( i ) ;
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL 18619 0 1
// continue ;
18511: GO 18393
// end ; HackCheckCapturedStatus ( i ) ;
18513: LD_VAR 0 1
18517: PPUSH
18518: CALL 19062 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18522: LD_ADDR_VAR 0 2
18526: PUSH
18527: LD_INT 81
18529: PUSH
18530: LD_VAR 0 1
18534: PPUSH
18535: CALL_OW 255
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 33
18546: PUSH
18547: LD_INT 3
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 91
18556: PUSH
18557: LD_VAR 0 1
18561: PUSH
18562: LD_EXP 74
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 50
18574: PUSH
18575: EMPTY
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: PPUSH
18584: CALL_OW 69
18588: ST_TO_ADDR
// if not tmp then
18589: LD_VAR 0 2
18593: NOT
18594: IFFALSE 18598
// continue ;
18596: GO 18393
// HackLink ( i , tmp ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_VAR 0 2
18607: PPUSH
18608: CALL 18755 0 2
// end ;
18612: GO 18393
18614: POP
18615: POP
// end ;
18616: PPOPN 2
18618: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18619: LD_INT 0
18621: PPUSH
18622: PPUSH
18623: PPUSH
// if not hack in hackTanks then
18624: LD_VAR 0 1
18628: PUSH
18629: LD_EXP 71
18633: IN
18634: NOT
18635: IFFALSE 18639
// exit ;
18637: GO 18750
// index := GetElementIndex ( hackTanks , hack ) ;
18639: LD_ADDR_VAR 0 4
18643: PUSH
18644: LD_EXP 71
18648: PPUSH
18649: LD_VAR 0 1
18653: PPUSH
18654: CALL 24444 0 2
18658: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18659: LD_EXP 72
18663: PUSH
18664: LD_VAR 0 4
18668: ARRAY
18669: IFFALSE 18750
// begin for i in hackTanksCaptured [ index ] do
18671: LD_ADDR_VAR 0 3
18675: PUSH
18676: LD_EXP 72
18680: PUSH
18681: LD_VAR 0 4
18685: ARRAY
18686: PUSH
18687: FOR_IN
18688: IFFALSE 18714
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 1
18697: ARRAY
18698: PPUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_INT 2
18706: ARRAY
18707: PPUSH
18708: CALL_OW 235
18712: GO 18687
18714: POP
18715: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18716: LD_ADDR_EXP 72
18720: PUSH
18721: LD_EXP 72
18725: PPUSH
18726: LD_VAR 0 4
18730: PPUSH
18731: EMPTY
18732: PPUSH
18733: CALL_OW 1
18737: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18738: LD_VAR 0 1
18742: PPUSH
18743: LD_INT 0
18745: PPUSH
18746: CALL_OW 505
// end ; end ;
18750: LD_VAR 0 2
18754: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18755: LD_INT 0
18757: PPUSH
18758: PPUSH
18759: PPUSH
// if not hack in hackTanks or not vehicles then
18760: LD_VAR 0 1
18764: PUSH
18765: LD_EXP 71
18769: IN
18770: NOT
18771: PUSH
18772: LD_VAR 0 2
18776: NOT
18777: OR
18778: IFFALSE 18782
// exit ;
18780: GO 19057
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_VAR 0 1
18791: PPUSH
18792: LD_VAR 0 2
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: CALL 25094 0 4
18807: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18808: LD_ADDR_VAR 0 5
18812: PUSH
18813: LD_EXP 71
18817: PPUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL 24444 0 2
18827: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18828: LD_EXP 72
18832: PUSH
18833: LD_VAR 0 5
18837: ARRAY
18838: PUSH
18839: LD_EXP 73
18843: LESS
18844: IFFALSE 19033
// begin for i := 1 to vehicles do
18846: LD_ADDR_VAR 0 4
18850: PUSH
18851: DOUBLE
18852: LD_INT 1
18854: DEC
18855: ST_TO_ADDR
18856: LD_VAR 0 2
18860: PUSH
18861: FOR_TO
18862: IFFALSE 19031
// begin if hackTanksCaptured [ index ] = hackLimit then
18864: LD_EXP 72
18868: PUSH
18869: LD_VAR 0 5
18873: ARRAY
18874: PUSH
18875: LD_EXP 73
18879: EQUAL
18880: IFFALSE 18884
// break ;
18882: GO 19031
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18884: LD_ADDR_EXP 75
18888: PUSH
18889: LD_EXP 75
18893: PPUSH
18894: LD_VAR 0 5
18898: PPUSH
18899: LD_EXP 75
18903: PUSH
18904: LD_VAR 0 5
18908: ARRAY
18909: PUSH
18910: LD_INT 1
18912: PLUS
18913: PPUSH
18914: CALL_OW 1
18918: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18919: LD_ADDR_EXP 72
18923: PUSH
18924: LD_EXP 72
18928: PPUSH
18929: LD_VAR 0 5
18933: PUSH
18934: LD_EXP 72
18938: PUSH
18939: LD_VAR 0 5
18943: ARRAY
18944: PUSH
18945: LD_INT 1
18947: PLUS
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PPUSH
18953: LD_VAR 0 2
18957: PUSH
18958: LD_VAR 0 4
18962: ARRAY
18963: PUSH
18964: LD_VAR 0 2
18968: PUSH
18969: LD_VAR 0 4
18973: ARRAY
18974: PPUSH
18975: CALL_OW 255
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL 24659 0 3
18988: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18989: LD_VAR 0 2
18993: PUSH
18994: LD_VAR 0 4
18998: ARRAY
18999: PPUSH
19000: LD_VAR 0 1
19004: PPUSH
19005: CALL_OW 255
19009: PPUSH
19010: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19014: LD_VAR 0 2
19018: PUSH
19019: LD_VAR 0 4
19023: ARRAY
19024: PPUSH
19025: CALL_OW 141
// end ;
19029: GO 18861
19031: POP
19032: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19033: LD_VAR 0 1
19037: PPUSH
19038: LD_EXP 72
19042: PUSH
19043: LD_VAR 0 5
19047: ARRAY
19048: PUSH
19049: LD_INT 0
19051: PLUS
19052: PPUSH
19053: CALL_OW 505
// end ;
19057: LD_VAR 0 3
19061: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
// if not hack in hackTanks then
19068: LD_VAR 0 1
19072: PUSH
19073: LD_EXP 71
19077: IN
19078: NOT
19079: IFFALSE 19083
// exit ;
19081: GO 19323
// index := GetElementIndex ( hackTanks , hack ) ;
19083: LD_ADDR_VAR 0 4
19087: PUSH
19088: LD_EXP 71
19092: PPUSH
19093: LD_VAR 0 1
19097: PPUSH
19098: CALL 24444 0 2
19102: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19103: LD_ADDR_VAR 0 3
19107: PUSH
19108: DOUBLE
19109: LD_EXP 72
19113: PUSH
19114: LD_VAR 0 4
19118: ARRAY
19119: INC
19120: ST_TO_ADDR
19121: LD_INT 1
19123: PUSH
19124: FOR_DOWNTO
19125: IFFALSE 19297
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19127: LD_ADDR_VAR 0 5
19131: PUSH
19132: LD_EXP 72
19136: PUSH
19137: LD_VAR 0 4
19141: ARRAY
19142: PUSH
19143: LD_VAR 0 3
19147: ARRAY
19148: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19149: LD_VAR 0 5
19153: PUSH
19154: LD_INT 1
19156: ARRAY
19157: PPUSH
19158: CALL_OW 302
19162: NOT
19163: PUSH
19164: LD_VAR 0 5
19168: PUSH
19169: LD_INT 1
19171: ARRAY
19172: PPUSH
19173: CALL_OW 255
19177: PUSH
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 255
19187: NONEQUAL
19188: OR
19189: IFFALSE 19295
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19191: LD_VAR 0 5
19195: PUSH
19196: LD_INT 1
19198: ARRAY
19199: PPUSH
19200: CALL_OW 305
19204: PUSH
19205: LD_VAR 0 5
19209: PUSH
19210: LD_INT 1
19212: ARRAY
19213: PPUSH
19214: CALL_OW 255
19218: PUSH
19219: LD_VAR 0 1
19223: PPUSH
19224: CALL_OW 255
19228: EQUAL
19229: AND
19230: IFFALSE 19254
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19232: LD_VAR 0 5
19236: PUSH
19237: LD_INT 1
19239: ARRAY
19240: PPUSH
19241: LD_VAR 0 5
19245: PUSH
19246: LD_INT 2
19248: ARRAY
19249: PPUSH
19250: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19254: LD_ADDR_EXP 72
19258: PUSH
19259: LD_EXP 72
19263: PPUSH
19264: LD_VAR 0 4
19268: PPUSH
19269: LD_EXP 72
19273: PUSH
19274: LD_VAR 0 4
19278: ARRAY
19279: PPUSH
19280: LD_VAR 0 3
19284: PPUSH
19285: CALL_OW 3
19289: PPUSH
19290: CALL_OW 1
19294: ST_TO_ADDR
// end ; end ;
19295: GO 19124
19297: POP
19298: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_EXP 72
19308: PUSH
19309: LD_VAR 0 4
19313: ARRAY
19314: PUSH
19315: LD_INT 0
19317: PLUS
19318: PPUSH
19319: CALL_OW 505
// end ;
19323: LD_VAR 0 2
19327: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19328: LD_INT 0
19330: PPUSH
19331: PPUSH
19332: PPUSH
19333: PPUSH
// if not hack in hackTanks then
19334: LD_VAR 0 1
19338: PUSH
19339: LD_EXP 71
19343: IN
19344: NOT
19345: IFFALSE 19349
// exit ;
19347: GO 19434
// index := GetElementIndex ( hackTanks , hack ) ;
19349: LD_ADDR_VAR 0 5
19353: PUSH
19354: LD_EXP 71
19358: PPUSH
19359: LD_VAR 0 1
19363: PPUSH
19364: CALL 24444 0 2
19368: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19369: LD_ADDR_VAR 0 4
19373: PUSH
19374: DOUBLE
19375: LD_INT 1
19377: DEC
19378: ST_TO_ADDR
19379: LD_EXP 72
19383: PUSH
19384: LD_VAR 0 5
19388: ARRAY
19389: PUSH
19390: FOR_TO
19391: IFFALSE 19432
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19393: LD_EXP 72
19397: PUSH
19398: LD_VAR 0 5
19402: ARRAY
19403: PUSH
19404: LD_VAR 0 4
19408: ARRAY
19409: PUSH
19410: LD_INT 1
19412: ARRAY
19413: PUSH
19414: LD_VAR 0 2
19418: EQUAL
19419: IFFALSE 19430
// KillUnit ( vehicle ) ;
19421: LD_VAR 0 2
19425: PPUSH
19426: CALL_OW 66
19430: GO 19390
19432: POP
19433: POP
// end ; end_of_file
19434: LD_VAR 0 3
19438: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin display_strings := [ cmd , unit , selectedUnit , x , y ] ;
19439: LD_ADDR_OWVAR 47
19443: PUSH
19444: LD_VAR 0 1
19448: PUSH
19449: LD_VAR 0 2
19453: PUSH
19454: LD_VAR 0 3
19458: PUSH
19459: LD_VAR 0 4
19463: PUSH
19464: LD_VAR 0 5
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: ST_TO_ADDR
// case cmd of 200 .. 299 :
19476: LD_VAR 0 1
19480: PUSH
19481: LD_INT 200
19483: DOUBLE
19484: GREATEREQUAL
19485: IFFALSE 19493
19487: LD_INT 299
19489: DOUBLE
19490: LESSEQUAL
19491: IFTRUE 19495
19493: GO 19527
19495: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19496: LD_VAR 0 1
19500: PPUSH
19501: LD_VAR 0 2
19505: PPUSH
19506: LD_VAR 0 3
19510: PPUSH
19511: LD_VAR 0 4
19515: PPUSH
19516: LD_VAR 0 5
19520: PPUSH
19521: CALL 17760 0 5
19525: GO 19574
19527: LD_INT 300
19529: DOUBLE
19530: GREATEREQUAL
19531: IFFALSE 19539
19533: LD_INT 399
19535: DOUBLE
19536: LESSEQUAL
19537: IFTRUE 19541
19539: GO 19573
19541: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y ) ; end ;
19542: LD_VAR 0 1
19546: PPUSH
19547: LD_VAR 0 2
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 4
19561: PPUSH
19562: LD_VAR 0 5
19566: PPUSH
19567: CALL 16225 0 5
19571: GO 19574
19573: POP
// end ; end_of_file
19574: PPOPN 5
19576: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19577: LD_INT 0
19579: PPUSH
// ar_crane := 88 ;
19580: LD_ADDR_EXP 82
19584: PUSH
19585: LD_INT 88
19587: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19588: LD_ADDR_EXP 77
19592: PUSH
19593: LD_INT 89
19595: ST_TO_ADDR
// us_hack := 99 ;
19596: LD_ADDR_EXP 78
19600: PUSH
19601: LD_INT 99
19603: ST_TO_ADDR
// us_artillery := 97 ;
19604: LD_ADDR_EXP 79
19608: PUSH
19609: LD_INT 97
19611: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19612: LD_ADDR_EXP 80
19616: PUSH
19617: LD_INT 91
19619: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19620: LD_ADDR_EXP 81
19624: PUSH
19625: LD_INT 92
19627: ST_TO_ADDR
// ru_radar := 98 ;
19628: LD_ADDR_EXP 76
19632: PUSH
19633: LD_INT 98
19635: ST_TO_ADDR
// tech_Artillery := 80 ;
19636: LD_ADDR_EXP 83
19640: PUSH
19641: LD_INT 80
19643: ST_TO_ADDR
// tech_RadMat := 81 ;
19644: LD_ADDR_EXP 84
19648: PUSH
19649: LD_INT 81
19651: ST_TO_ADDR
// tech_BasicTools := 82 ;
19652: LD_ADDR_EXP 85
19656: PUSH
19657: LD_INT 82
19659: ST_TO_ADDR
// tech_Cargo := 83 ;
19660: LD_ADDR_EXP 86
19664: PUSH
19665: LD_INT 83
19667: ST_TO_ADDR
// tech_Track := 84 ;
19668: LD_ADDR_EXP 87
19672: PUSH
19673: LD_INT 84
19675: ST_TO_ADDR
// tech_Crane := 85 ;
19676: LD_ADDR_EXP 88
19680: PUSH
19681: LD_INT 85
19683: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19684: LD_ADDR_EXP 89
19688: PUSH
19689: LD_INT 86
19691: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19692: LD_ADDR_EXP 90
19696: PUSH
19697: LD_INT 87
19699: ST_TO_ADDR
// end ;
19700: LD_VAR 0 1
19704: RET
// every 1 do
19705: GO 19707
19707: DISABLE
// InitGlobalVariables ; end_of_file
19708: CALL 19577 0 0
19712: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19713: LD_INT 0
19715: PPUSH
19716: PPUSH
// if exist_mode then
19717: LD_VAR 0 2
19721: IFFALSE 19746
// unit := CreateCharacter ( prefix & ident ) else
19723: LD_ADDR_VAR 0 5
19727: PUSH
19728: LD_VAR 0 3
19732: PUSH
19733: LD_VAR 0 1
19737: STR
19738: PPUSH
19739: CALL_OW 34
19743: ST_TO_ADDR
19744: GO 19761
// unit := NewCharacter ( ident ) ;
19746: LD_ADDR_VAR 0 5
19750: PUSH
19751: LD_VAR 0 1
19755: PPUSH
19756: CALL_OW 25
19760: ST_TO_ADDR
// result := unit ;
19761: LD_ADDR_VAR 0 4
19765: PUSH
19766: LD_VAR 0 5
19770: ST_TO_ADDR
// end ;
19771: LD_VAR 0 4
19775: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19776: LD_INT 0
19778: PPUSH
19779: PPUSH
// if not side or not nation then
19780: LD_VAR 0 1
19784: NOT
19785: PUSH
19786: LD_VAR 0 2
19790: NOT
19791: OR
19792: IFFALSE 19796
// exit ;
19794: GO 20560
// case nation of nation_american :
19796: LD_VAR 0 2
19800: PUSH
19801: LD_INT 1
19803: DOUBLE
19804: EQUAL
19805: IFTRUE 19809
19807: GO 20023
19809: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19810: LD_ADDR_VAR 0 4
19814: PUSH
19815: LD_INT 35
19817: PUSH
19818: LD_INT 45
19820: PUSH
19821: LD_INT 46
19823: PUSH
19824: LD_INT 47
19826: PUSH
19827: LD_INT 82
19829: PUSH
19830: LD_INT 83
19832: PUSH
19833: LD_INT 84
19835: PUSH
19836: LD_INT 85
19838: PUSH
19839: LD_INT 86
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: LD_INT 6
19850: PUSH
19851: LD_INT 15
19853: PUSH
19854: LD_INT 16
19856: PUSH
19857: LD_INT 7
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: LD_INT 13
19865: PUSH
19866: LD_INT 10
19868: PUSH
19869: LD_INT 14
19871: PUSH
19872: LD_INT 20
19874: PUSH
19875: LD_INT 21
19877: PUSH
19878: LD_INT 22
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 32
19886: PUSH
19887: LD_INT 27
19889: PUSH
19890: LD_INT 36
19892: PUSH
19893: LD_INT 69
19895: PUSH
19896: LD_INT 39
19898: PUSH
19899: LD_INT 34
19901: PUSH
19902: LD_INT 40
19904: PUSH
19905: LD_INT 48
19907: PUSH
19908: LD_INT 49
19910: PUSH
19911: LD_INT 50
19913: PUSH
19914: LD_INT 51
19916: PUSH
19917: LD_INT 52
19919: PUSH
19920: LD_INT 53
19922: PUSH
19923: LD_INT 54
19925: PUSH
19926: LD_INT 55
19928: PUSH
19929: LD_INT 56
19931: PUSH
19932: LD_INT 57
19934: PUSH
19935: LD_INT 58
19937: PUSH
19938: LD_INT 59
19940: PUSH
19941: LD_INT 60
19943: PUSH
19944: LD_INT 61
19946: PUSH
19947: LD_INT 62
19949: PUSH
19950: LD_INT 80
19952: PUSH
19953: LD_INT 82
19955: PUSH
19956: LD_INT 83
19958: PUSH
19959: LD_INT 84
19961: PUSH
19962: LD_INT 85
19964: PUSH
19965: LD_INT 86
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: ST_TO_ADDR
20021: GO 20484
20023: LD_INT 2
20025: DOUBLE
20026: EQUAL
20027: IFTRUE 20031
20029: GO 20253
20031: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20032: LD_ADDR_VAR 0 4
20036: PUSH
20037: LD_INT 35
20039: PUSH
20040: LD_INT 45
20042: PUSH
20043: LD_INT 46
20045: PUSH
20046: LD_INT 47
20048: PUSH
20049: LD_INT 82
20051: PUSH
20052: LD_INT 83
20054: PUSH
20055: LD_INT 84
20057: PUSH
20058: LD_INT 85
20060: PUSH
20061: LD_INT 87
20063: PUSH
20064: LD_INT 70
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: LD_INT 11
20072: PUSH
20073: LD_INT 3
20075: PUSH
20076: LD_INT 4
20078: PUSH
20079: LD_INT 5
20081: PUSH
20082: LD_INT 6
20084: PUSH
20085: LD_INT 15
20087: PUSH
20088: LD_INT 18
20090: PUSH
20091: LD_INT 7
20093: PUSH
20094: LD_INT 17
20096: PUSH
20097: LD_INT 8
20099: PUSH
20100: LD_INT 20
20102: PUSH
20103: LD_INT 21
20105: PUSH
20106: LD_INT 22
20108: PUSH
20109: LD_INT 72
20111: PUSH
20112: LD_INT 26
20114: PUSH
20115: LD_INT 69
20117: PUSH
20118: LD_INT 39
20120: PUSH
20121: LD_INT 40
20123: PUSH
20124: LD_INT 41
20126: PUSH
20127: LD_INT 42
20129: PUSH
20130: LD_INT 43
20132: PUSH
20133: LD_INT 48
20135: PUSH
20136: LD_INT 49
20138: PUSH
20139: LD_INT 50
20141: PUSH
20142: LD_INT 51
20144: PUSH
20145: LD_INT 52
20147: PUSH
20148: LD_INT 53
20150: PUSH
20151: LD_INT 54
20153: PUSH
20154: LD_INT 55
20156: PUSH
20157: LD_INT 56
20159: PUSH
20160: LD_INT 60
20162: PUSH
20163: LD_INT 61
20165: PUSH
20166: LD_INT 62
20168: PUSH
20169: LD_INT 66
20171: PUSH
20172: LD_INT 67
20174: PUSH
20175: LD_INT 68
20177: PUSH
20178: LD_INT 81
20180: PUSH
20181: LD_INT 82
20183: PUSH
20184: LD_INT 83
20186: PUSH
20187: LD_INT 84
20189: PUSH
20190: LD_INT 85
20192: PUSH
20193: LD_INT 87
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: ST_TO_ADDR
20251: GO 20484
20253: LD_INT 3
20255: DOUBLE
20256: EQUAL
20257: IFTRUE 20261
20259: GO 20483
20261: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20262: LD_ADDR_VAR 0 4
20266: PUSH
20267: LD_INT 46
20269: PUSH
20270: LD_INT 47
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 82
20281: PUSH
20282: LD_INT 83
20284: PUSH
20285: LD_INT 84
20287: PUSH
20288: LD_INT 85
20290: PUSH
20291: LD_INT 86
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 9
20299: PUSH
20300: LD_INT 20
20302: PUSH
20303: LD_INT 19
20305: PUSH
20306: LD_INT 21
20308: PUSH
20309: LD_INT 24
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_INT 25
20317: PUSH
20318: LD_INT 28
20320: PUSH
20321: LD_INT 29
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 31
20329: PUSH
20330: LD_INT 37
20332: PUSH
20333: LD_INT 38
20335: PUSH
20336: LD_INT 32
20338: PUSH
20339: LD_INT 27
20341: PUSH
20342: LD_INT 33
20344: PUSH
20345: LD_INT 69
20347: PUSH
20348: LD_INT 39
20350: PUSH
20351: LD_INT 34
20353: PUSH
20354: LD_INT 40
20356: PUSH
20357: LD_INT 71
20359: PUSH
20360: LD_INT 23
20362: PUSH
20363: LD_INT 44
20365: PUSH
20366: LD_INT 48
20368: PUSH
20369: LD_INT 49
20371: PUSH
20372: LD_INT 50
20374: PUSH
20375: LD_INT 51
20377: PUSH
20378: LD_INT 52
20380: PUSH
20381: LD_INT 53
20383: PUSH
20384: LD_INT 54
20386: PUSH
20387: LD_INT 55
20389: PUSH
20390: LD_INT 56
20392: PUSH
20393: LD_INT 57
20395: PUSH
20396: LD_INT 58
20398: PUSH
20399: LD_INT 59
20401: PUSH
20402: LD_INT 63
20404: PUSH
20405: LD_INT 64
20407: PUSH
20408: LD_INT 65
20410: PUSH
20411: LD_INT 82
20413: PUSH
20414: LD_INT 83
20416: PUSH
20417: LD_INT 84
20419: PUSH
20420: LD_INT 85
20422: PUSH
20423: LD_INT 86
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: ST_TO_ADDR
20481: GO 20484
20483: POP
// if state > - 1 and state < 3 then
20484: LD_VAR 0 3
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: GREATER
20493: PUSH
20494: LD_VAR 0 3
20498: PUSH
20499: LD_INT 3
20501: LESS
20502: AND
20503: IFFALSE 20560
// for i in result do
20505: LD_ADDR_VAR 0 5
20509: PUSH
20510: LD_VAR 0 4
20514: PUSH
20515: FOR_IN
20516: IFFALSE 20558
// if GetTech ( i , side ) <> state then
20518: LD_VAR 0 5
20522: PPUSH
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL_OW 321
20532: PUSH
20533: LD_VAR 0 3
20537: NONEQUAL
20538: IFFALSE 20556
// result := result diff i ;
20540: LD_ADDR_VAR 0 4
20544: PUSH
20545: LD_VAR 0 4
20549: PUSH
20550: LD_VAR 0 5
20554: DIFF
20555: ST_TO_ADDR
20556: GO 20515
20558: POP
20559: POP
// end ;
20560: LD_VAR 0 4
20564: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
20569: PPUSH
// result := true ;
20570: LD_ADDR_VAR 0 3
20574: PUSH
20575: LD_INT 1
20577: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20578: LD_ADDR_VAR 0 5
20582: PUSH
20583: LD_VAR 0 2
20587: PPUSH
20588: CALL_OW 480
20592: ST_TO_ADDR
// if not tmp then
20593: LD_VAR 0 5
20597: NOT
20598: IFFALSE 20602
// exit ;
20600: GO 20651
// for i in tmp do
20602: LD_ADDR_VAR 0 4
20606: PUSH
20607: LD_VAR 0 5
20611: PUSH
20612: FOR_IN
20613: IFFALSE 20649
// if GetTech ( i , side ) <> state_researched then
20615: LD_VAR 0 4
20619: PPUSH
20620: LD_VAR 0 1
20624: PPUSH
20625: CALL_OW 321
20629: PUSH
20630: LD_INT 2
20632: NONEQUAL
20633: IFFALSE 20647
// begin result := false ;
20635: LD_ADDR_VAR 0 3
20639: PUSH
20640: LD_INT 0
20642: ST_TO_ADDR
// exit ;
20643: POP
20644: POP
20645: GO 20651
// end ;
20647: GO 20612
20649: POP
20650: POP
// end ;
20651: LD_VAR 0 3
20655: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20656: LD_INT 0
20658: PPUSH
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
20663: PPUSH
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
20668: PPUSH
20669: PPUSH
20670: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20671: LD_VAR 0 1
20675: NOT
20676: PUSH
20677: LD_VAR 0 1
20681: PPUSH
20682: CALL_OW 257
20686: PUSH
20687: LD_INT 9
20689: NONEQUAL
20690: OR
20691: IFFALSE 20695
// exit ;
20693: GO 21268
// side := GetSide ( unit ) ;
20695: LD_ADDR_VAR 0 9
20699: PUSH
20700: LD_VAR 0 1
20704: PPUSH
20705: CALL_OW 255
20709: ST_TO_ADDR
// tech_space := tech_spacanom ;
20710: LD_ADDR_VAR 0 12
20714: PUSH
20715: LD_INT 29
20717: ST_TO_ADDR
// tech_time := tech_taurad ;
20718: LD_ADDR_VAR 0 13
20722: PUSH
20723: LD_INT 28
20725: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20726: LD_ADDR_VAR 0 11
20730: PUSH
20731: LD_VAR 0 1
20735: PPUSH
20736: CALL_OW 310
20740: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20741: LD_VAR 0 11
20745: PPUSH
20746: CALL_OW 247
20750: PUSH
20751: LD_INT 2
20753: EQUAL
20754: IFFALSE 20758
// exit ;
20756: GO 21268
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20758: LD_ADDR_VAR 0 8
20762: PUSH
20763: LD_INT 81
20765: PUSH
20766: LD_VAR 0 9
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: LD_INT 21
20780: PUSH
20781: LD_INT 3
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PPUSH
20796: CALL_OW 69
20800: ST_TO_ADDR
// if not tmp then
20801: LD_VAR 0 8
20805: NOT
20806: IFFALSE 20810
// exit ;
20808: GO 21268
// if in_unit then
20810: LD_VAR 0 11
20814: IFFALSE 20838
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20816: LD_ADDR_VAR 0 10
20820: PUSH
20821: LD_VAR 0 8
20825: PPUSH
20826: LD_VAR 0 11
20830: PPUSH
20831: CALL_OW 74
20835: ST_TO_ADDR
20836: GO 20858
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20838: LD_ADDR_VAR 0 10
20842: PUSH
20843: LD_VAR 0 8
20847: PPUSH
20848: LD_VAR 0 1
20852: PPUSH
20853: CALL_OW 74
20857: ST_TO_ADDR
// if not enemy then
20858: LD_VAR 0 10
20862: NOT
20863: IFFALSE 20867
// exit ;
20865: GO 21268
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20867: LD_VAR 0 11
20871: PUSH
20872: LD_VAR 0 11
20876: PPUSH
20877: LD_VAR 0 10
20881: PPUSH
20882: CALL_OW 296
20886: PUSH
20887: LD_INT 13
20889: GREATER
20890: AND
20891: PUSH
20892: LD_VAR 0 1
20896: PPUSH
20897: LD_VAR 0 10
20901: PPUSH
20902: CALL_OW 296
20906: PUSH
20907: LD_INT 12
20909: GREATER
20910: OR
20911: IFFALSE 20915
// exit ;
20913: GO 21268
// missile := [ 1 ] ;
20915: LD_ADDR_VAR 0 14
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: EMPTY
20924: LIST
20925: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20926: LD_VAR 0 9
20930: PPUSH
20931: LD_VAR 0 12
20935: PPUSH
20936: CALL_OW 325
20940: IFFALSE 20969
// missile := Insert ( missile , missile + 1 , 2 ) ;
20942: LD_ADDR_VAR 0 14
20946: PUSH
20947: LD_VAR 0 14
20951: PPUSH
20952: LD_VAR 0 14
20956: PUSH
20957: LD_INT 1
20959: PLUS
20960: PPUSH
20961: LD_INT 2
20963: PPUSH
20964: CALL_OW 2
20968: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20969: LD_VAR 0 9
20973: PPUSH
20974: LD_VAR 0 13
20978: PPUSH
20979: CALL_OW 325
20983: PUSH
20984: LD_VAR 0 10
20988: PPUSH
20989: CALL_OW 255
20993: PPUSH
20994: LD_VAR 0 13
20998: PPUSH
20999: CALL_OW 325
21003: NOT
21004: AND
21005: IFFALSE 21034
// missile := Insert ( missile , missile + 1 , 3 ) ;
21007: LD_ADDR_VAR 0 14
21011: PUSH
21012: LD_VAR 0 14
21016: PPUSH
21017: LD_VAR 0 14
21021: PUSH
21022: LD_INT 1
21024: PLUS
21025: PPUSH
21026: LD_INT 3
21028: PPUSH
21029: CALL_OW 2
21033: ST_TO_ADDR
// if missile < 2 then
21034: LD_VAR 0 14
21038: PUSH
21039: LD_INT 2
21041: LESS
21042: IFFALSE 21046
// exit ;
21044: GO 21268
// x := GetX ( enemy ) ;
21046: LD_ADDR_VAR 0 4
21050: PUSH
21051: LD_VAR 0 10
21055: PPUSH
21056: CALL_OW 250
21060: ST_TO_ADDR
// y := GetY ( enemy ) ;
21061: LD_ADDR_VAR 0 5
21065: PUSH
21066: LD_VAR 0 10
21070: PPUSH
21071: CALL_OW 251
21075: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21076: LD_ADDR_VAR 0 6
21080: PUSH
21081: LD_VAR 0 4
21085: PUSH
21086: LD_INT 1
21088: NEG
21089: PPUSH
21090: LD_INT 1
21092: PPUSH
21093: CALL_OW 12
21097: PLUS
21098: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21099: LD_ADDR_VAR 0 7
21103: PUSH
21104: LD_VAR 0 5
21108: PUSH
21109: LD_INT 1
21111: NEG
21112: PPUSH
21113: LD_INT 1
21115: PPUSH
21116: CALL_OW 12
21120: PLUS
21121: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21122: LD_VAR 0 6
21126: PPUSH
21127: LD_VAR 0 7
21131: PPUSH
21132: CALL_OW 488
21136: NOT
21137: IFFALSE 21159
// begin _x := x ;
21139: LD_ADDR_VAR 0 6
21143: PUSH
21144: LD_VAR 0 4
21148: ST_TO_ADDR
// _y := y ;
21149: LD_ADDR_VAR 0 7
21153: PUSH
21154: LD_VAR 0 5
21158: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 1
21166: PPUSH
21167: LD_VAR 0 14
21171: PPUSH
21172: CALL_OW 12
21176: ST_TO_ADDR
// case i of 1 :
21177: LD_VAR 0 3
21181: PUSH
21182: LD_INT 1
21184: DOUBLE
21185: EQUAL
21186: IFTRUE 21190
21188: GO 21207
21190: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21191: LD_VAR 0 1
21195: PPUSH
21196: LD_VAR 0 10
21200: PPUSH
21201: CALL_OW 115
21205: GO 21268
21207: LD_INT 2
21209: DOUBLE
21210: EQUAL
21211: IFTRUE 21215
21213: GO 21237
21215: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21216: LD_VAR 0 1
21220: PPUSH
21221: LD_VAR 0 6
21225: PPUSH
21226: LD_VAR 0 7
21230: PPUSH
21231: CALL_OW 153
21235: GO 21268
21237: LD_INT 3
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21267
21245: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21246: LD_VAR 0 1
21250: PPUSH
21251: LD_VAR 0 6
21255: PPUSH
21256: LD_VAR 0 7
21260: PPUSH
21261: CALL_OW 154
21265: GO 21268
21267: POP
// end ;
21268: LD_VAR 0 2
21272: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21273: LD_INT 0
21275: PPUSH
21276: PPUSH
21277: PPUSH
21278: PPUSH
21279: PPUSH
21280: PPUSH
// if not unit or not building then
21281: LD_VAR 0 1
21285: NOT
21286: PUSH
21287: LD_VAR 0 2
21291: NOT
21292: OR
21293: IFFALSE 21297
// exit ;
21295: GO 21455
// x := GetX ( building ) ;
21297: LD_ADDR_VAR 0 5
21301: PUSH
21302: LD_VAR 0 2
21306: PPUSH
21307: CALL_OW 250
21311: ST_TO_ADDR
// y := GetY ( building ) ;
21312: LD_ADDR_VAR 0 6
21316: PUSH
21317: LD_VAR 0 2
21321: PPUSH
21322: CALL_OW 251
21326: ST_TO_ADDR
// for i = 0 to 5 do
21327: LD_ADDR_VAR 0 4
21331: PUSH
21332: DOUBLE
21333: LD_INT 0
21335: DEC
21336: ST_TO_ADDR
21337: LD_INT 5
21339: PUSH
21340: FOR_TO
21341: IFFALSE 21453
// begin _x := ShiftX ( x , i , 3 ) ;
21343: LD_ADDR_VAR 0 7
21347: PUSH
21348: LD_VAR 0 5
21352: PPUSH
21353: LD_VAR 0 4
21357: PPUSH
21358: LD_INT 3
21360: PPUSH
21361: CALL_OW 272
21365: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21366: LD_ADDR_VAR 0 8
21370: PUSH
21371: LD_VAR 0 6
21375: PPUSH
21376: LD_VAR 0 4
21380: PPUSH
21381: LD_INT 3
21383: PPUSH
21384: CALL_OW 273
21388: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21389: LD_VAR 0 7
21393: PPUSH
21394: LD_VAR 0 8
21398: PPUSH
21399: CALL_OW 488
21403: NOT
21404: IFFALSE 21408
// continue ;
21406: GO 21340
// if HexInfo ( _x , _y ) = 0 then
21408: LD_VAR 0 7
21412: PPUSH
21413: LD_VAR 0 8
21417: PPUSH
21418: CALL_OW 428
21422: PUSH
21423: LD_INT 0
21425: EQUAL
21426: IFFALSE 21451
// begin ComMoveXY ( unit , _x , _y ) ;
21428: LD_VAR 0 1
21432: PPUSH
21433: LD_VAR 0 7
21437: PPUSH
21438: LD_VAR 0 8
21442: PPUSH
21443: CALL_OW 111
// exit ;
21447: POP
21448: POP
21449: GO 21455
// end ; end ;
21451: GO 21340
21453: POP
21454: POP
// end ;
21455: LD_VAR 0 3
21459: RET
// export function ScanBase ( side , base_area ) ; begin
21460: LD_INT 0
21462: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21463: LD_ADDR_VAR 0 3
21467: PUSH
21468: LD_VAR 0 2
21472: PPUSH
21473: LD_INT 81
21475: PUSH
21476: LD_VAR 0 1
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PPUSH
21485: CALL_OW 70
21489: ST_TO_ADDR
// end ;
21490: LD_VAR 0 3
21494: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21495: LD_INT 0
21497: PPUSH
21498: PPUSH
21499: PPUSH
21500: PPUSH
// result := false ;
21501: LD_ADDR_VAR 0 2
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// side := GetSide ( unit ) ;
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_VAR 0 1
21518: PPUSH
21519: CALL_OW 255
21523: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21524: LD_ADDR_VAR 0 4
21528: PUSH
21529: LD_VAR 0 1
21533: PPUSH
21534: CALL_OW 248
21538: ST_TO_ADDR
// case nat of 1 :
21539: LD_VAR 0 4
21543: PUSH
21544: LD_INT 1
21546: DOUBLE
21547: EQUAL
21548: IFTRUE 21552
21550: GO 21563
21552: POP
// tech := tech_lassight ; 2 :
21553: LD_ADDR_VAR 0 5
21557: PUSH
21558: LD_INT 12
21560: ST_TO_ADDR
21561: GO 21602
21563: LD_INT 2
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21582
21571: POP
// tech := tech_mortar ; 3 :
21572: LD_ADDR_VAR 0 5
21576: PUSH
21577: LD_INT 41
21579: ST_TO_ADDR
21580: GO 21602
21582: LD_INT 3
21584: DOUBLE
21585: EQUAL
21586: IFTRUE 21590
21588: GO 21601
21590: POP
// tech := tech_bazooka ; end ;
21591: LD_ADDR_VAR 0 5
21595: PUSH
21596: LD_INT 44
21598: ST_TO_ADDR
21599: GO 21602
21601: POP
// if Researched ( side , tech ) then
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_VAR 0 5
21611: PPUSH
21612: CALL_OW 325
21616: IFFALSE 21643
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21618: LD_ADDR_VAR 0 2
21622: PUSH
21623: LD_INT 5
21625: PUSH
21626: LD_INT 8
21628: PUSH
21629: LD_INT 9
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: PUSH
21637: LD_VAR 0 4
21641: ARRAY
21642: ST_TO_ADDR
// end ;
21643: LD_VAR 0 2
21647: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21648: LD_INT 0
21650: PPUSH
21651: PPUSH
21652: PPUSH
// if not mines then
21653: LD_VAR 0 2
21657: NOT
21658: IFFALSE 21662
// exit ;
21660: GO 21806
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21662: LD_ADDR_VAR 0 5
21666: PUSH
21667: LD_INT 81
21669: PUSH
21670: LD_VAR 0 1
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 3
21681: PUSH
21682: LD_INT 21
21684: PUSH
21685: LD_INT 3
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: ST_TO_ADDR
// for i in mines do
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: LD_VAR 0 2
21714: PUSH
21715: FOR_IN
21716: IFFALSE 21804
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21718: LD_VAR 0 4
21722: PUSH
21723: LD_INT 1
21725: ARRAY
21726: PPUSH
21727: LD_VAR 0 4
21731: PUSH
21732: LD_INT 2
21734: ARRAY
21735: PPUSH
21736: CALL_OW 458
21740: NOT
21741: IFFALSE 21745
// continue ;
21743: GO 21715
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21745: LD_VAR 0 4
21749: PUSH
21750: LD_INT 1
21752: ARRAY
21753: PPUSH
21754: LD_VAR 0 4
21758: PUSH
21759: LD_INT 2
21761: ARRAY
21762: PPUSH
21763: CALL_OW 428
21767: PUSH
21768: LD_VAR 0 5
21772: IN
21773: IFFALSE 21802
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21775: LD_VAR 0 4
21779: PUSH
21780: LD_INT 1
21782: ARRAY
21783: PPUSH
21784: LD_VAR 0 4
21788: PUSH
21789: LD_INT 2
21791: ARRAY
21792: PPUSH
21793: LD_VAR 0 1
21797: PPUSH
21798: CALL_OW 456
// end ;
21802: GO 21715
21804: POP
21805: POP
// end ;
21806: LD_VAR 0 3
21810: RET
// export function Count ( array ) ; var i ; begin
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
// result := 0 ;
21815: LD_ADDR_VAR 0 2
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// for i in array do
21823: LD_ADDR_VAR 0 3
21827: PUSH
21828: LD_VAR 0 1
21832: PUSH
21833: FOR_IN
21834: IFFALSE 21858
// if i then
21836: LD_VAR 0 3
21840: IFFALSE 21856
// result := result + 1 ;
21842: LD_ADDR_VAR 0 2
21846: PUSH
21847: LD_VAR 0 2
21851: PUSH
21852: LD_INT 1
21854: PLUS
21855: ST_TO_ADDR
21856: GO 21833
21858: POP
21859: POP
// end ;
21860: LD_VAR 0 2
21864: RET
// export function IsEmpty ( building ) ; begin
21865: LD_INT 0
21867: PPUSH
// if not building then
21868: LD_VAR 0 1
21872: NOT
21873: IFFALSE 21877
// exit ;
21875: GO 21920
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21877: LD_ADDR_VAR 0 2
21881: PUSH
21882: LD_VAR 0 1
21886: PUSH
21887: LD_INT 22
21889: PUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 255
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 58
21906: PUSH
21907: EMPTY
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 69
21918: IN
21919: ST_TO_ADDR
// end ;
21920: LD_VAR 0 2
21924: RET
// export function IsNotFull ( building ) ; begin
21925: LD_INT 0
21927: PPUSH
// if not building then
21928: LD_VAR 0 1
21932: NOT
21933: IFFALSE 21937
// exit ;
21935: GO 21956
// result := UnitsInside ( building ) < 6 ;
21937: LD_ADDR_VAR 0 2
21941: PUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 313
21951: PUSH
21952: LD_INT 6
21954: LESS
21955: ST_TO_ADDR
// end ;
21956: LD_VAR 0 2
21960: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
// tmp := [ ] ;
21967: LD_ADDR_VAR 0 3
21971: PUSH
21972: EMPTY
21973: ST_TO_ADDR
// list := [ ] ;
21974: LD_ADDR_VAR 0 5
21978: PUSH
21979: EMPTY
21980: ST_TO_ADDR
// for i = 16 to 25 do
21981: LD_ADDR_VAR 0 4
21985: PUSH
21986: DOUBLE
21987: LD_INT 16
21989: DEC
21990: ST_TO_ADDR
21991: LD_INT 25
21993: PUSH
21994: FOR_TO
21995: IFFALSE 22068
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: LD_VAR 0 3
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 255
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 91
22026: PUSH
22027: LD_VAR 0 1
22031: PUSH
22032: LD_INT 6
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 30
22042: PUSH
22043: LD_VAR 0 4
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: PPUSH
22060: CALL_OW 69
22064: ADD
22065: ST_TO_ADDR
22066: GO 21994
22068: POP
22069: POP
// for i = 1 to tmp do
22070: LD_ADDR_VAR 0 4
22074: PUSH
22075: DOUBLE
22076: LD_INT 1
22078: DEC
22079: ST_TO_ADDR
22080: LD_VAR 0 3
22084: PUSH
22085: FOR_TO
22086: IFFALSE 22174
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22088: LD_ADDR_VAR 0 5
22092: PUSH
22093: LD_VAR 0 5
22097: PUSH
22098: LD_VAR 0 3
22102: PUSH
22103: LD_VAR 0 4
22107: ARRAY
22108: PPUSH
22109: CALL_OW 266
22113: PUSH
22114: LD_VAR 0 3
22118: PUSH
22119: LD_VAR 0 4
22123: ARRAY
22124: PPUSH
22125: CALL_OW 250
22129: PUSH
22130: LD_VAR 0 3
22134: PUSH
22135: LD_VAR 0 4
22139: ARRAY
22140: PPUSH
22141: CALL_OW 251
22145: PUSH
22146: LD_VAR 0 3
22150: PUSH
22151: LD_VAR 0 4
22155: ARRAY
22156: PPUSH
22157: CALL_OW 254
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: EMPTY
22169: LIST
22170: ADD
22171: ST_TO_ADDR
22172: GO 22085
22174: POP
22175: POP
// result := list ;
22176: LD_ADDR_VAR 0 2
22180: PUSH
22181: LD_VAR 0 5
22185: ST_TO_ADDR
// end ;
22186: LD_VAR 0 2
22190: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22191: LD_INT 0
22193: PPUSH
22194: PPUSH
22195: PPUSH
22196: PPUSH
22197: PPUSH
22198: PPUSH
22199: PPUSH
// if not factory then
22200: LD_VAR 0 1
22204: NOT
22205: IFFALSE 22209
// exit ;
22207: GO 22802
// if control = control_apeman then
22209: LD_VAR 0 4
22213: PUSH
22214: LD_INT 5
22216: EQUAL
22217: IFFALSE 22326
// begin tmp := UnitsInside ( factory ) ;
22219: LD_ADDR_VAR 0 8
22223: PUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 313
22233: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22234: LD_VAR 0 8
22238: PPUSH
22239: LD_INT 25
22241: PUSH
22242: LD_INT 12
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PPUSH
22249: CALL_OW 72
22253: NOT
22254: IFFALSE 22264
// control := control_manual ;
22256: LD_ADDR_VAR 0 4
22260: PUSH
22261: LD_INT 1
22263: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22264: LD_ADDR_VAR 0 8
22268: PUSH
22269: LD_VAR 0 1
22273: PPUSH
22274: CALL 21961 0 1
22278: ST_TO_ADDR
// if tmp then
22279: LD_VAR 0 8
22283: IFFALSE 22326
// begin for i in tmp do
22285: LD_ADDR_VAR 0 7
22289: PUSH
22290: LD_VAR 0 8
22294: PUSH
22295: FOR_IN
22296: IFFALSE 22324
// if i [ 1 ] = b_ext_radio then
22298: LD_VAR 0 7
22302: PUSH
22303: LD_INT 1
22305: ARRAY
22306: PUSH
22307: LD_INT 22
22309: EQUAL
22310: IFFALSE 22322
// begin control := control_remote ;
22312: LD_ADDR_VAR 0 4
22316: PUSH
22317: LD_INT 2
22319: ST_TO_ADDR
// break ;
22320: GO 22324
// end ;
22322: GO 22295
22324: POP
22325: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22326: LD_VAR 0 1
22330: PPUSH
22331: LD_VAR 0 2
22335: PPUSH
22336: LD_VAR 0 3
22340: PPUSH
22341: LD_VAR 0 4
22345: PPUSH
22346: LD_VAR 0 5
22350: PPUSH
22351: CALL_OW 448
22355: IFFALSE 22390
// begin result := [ chassis , engine , control , weapon ] ;
22357: LD_ADDR_VAR 0 6
22361: PUSH
22362: LD_VAR 0 2
22366: PUSH
22367: LD_VAR 0 3
22371: PUSH
22372: LD_VAR 0 4
22376: PUSH
22377: LD_VAR 0 5
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: ST_TO_ADDR
// exit ;
22388: GO 22802
// end ; _chassis := AvailableChassisList ( factory ) ;
22390: LD_ADDR_VAR 0 9
22394: PUSH
22395: LD_VAR 0 1
22399: PPUSH
22400: CALL_OW 475
22404: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22405: LD_ADDR_VAR 0 11
22409: PUSH
22410: LD_VAR 0 1
22414: PPUSH
22415: CALL_OW 476
22419: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22420: LD_ADDR_VAR 0 12
22424: PUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 477
22434: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22435: LD_ADDR_VAR 0 10
22439: PUSH
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 478
22449: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22450: LD_VAR 0 9
22454: NOT
22455: PUSH
22456: LD_VAR 0 11
22460: NOT
22461: OR
22462: PUSH
22463: LD_VAR 0 12
22467: NOT
22468: OR
22469: PUSH
22470: LD_VAR 0 10
22474: NOT
22475: OR
22476: IFFALSE 22511
// begin result := [ chassis , engine , control , weapon ] ;
22478: LD_ADDR_VAR 0 6
22482: PUSH
22483: LD_VAR 0 2
22487: PUSH
22488: LD_VAR 0 3
22492: PUSH
22493: LD_VAR 0 4
22497: PUSH
22498: LD_VAR 0 5
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: ST_TO_ADDR
// exit ;
22509: GO 22802
// end ; if not chassis in _chassis then
22511: LD_VAR 0 2
22515: PUSH
22516: LD_VAR 0 9
22520: IN
22521: NOT
22522: IFFALSE 22548
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22524: LD_ADDR_VAR 0 2
22528: PUSH
22529: LD_VAR 0 9
22533: PUSH
22534: LD_INT 1
22536: PPUSH
22537: LD_VAR 0 9
22541: PPUSH
22542: CALL_OW 12
22546: ARRAY
22547: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22548: LD_VAR 0 2
22552: PPUSH
22553: LD_VAR 0 3
22557: PPUSH
22558: CALL 22807 0 2
22562: NOT
22563: IFFALSE 22622
// repeat engine := _engine [ 1 ] ;
22565: LD_ADDR_VAR 0 3
22569: PUSH
22570: LD_VAR 0 11
22574: PUSH
22575: LD_INT 1
22577: ARRAY
22578: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22579: LD_ADDR_VAR 0 11
22583: PUSH
22584: LD_VAR 0 11
22588: PPUSH
22589: LD_INT 1
22591: PPUSH
22592: CALL_OW 3
22596: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22597: LD_VAR 0 2
22601: PPUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: CALL 22807 0 2
22611: PUSH
22612: LD_VAR 0 11
22616: PUSH
22617: EMPTY
22618: EQUAL
22619: OR
22620: IFFALSE 22565
// if not control in _control then
22622: LD_VAR 0 4
22626: PUSH
22627: LD_VAR 0 12
22631: IN
22632: NOT
22633: IFFALSE 22659
// control := _control [ rand ( 1 , _control ) ] ;
22635: LD_ADDR_VAR 0 4
22639: PUSH
22640: LD_VAR 0 12
22644: PUSH
22645: LD_INT 1
22647: PPUSH
22648: LD_VAR 0 12
22652: PPUSH
22653: CALL_OW 12
22657: ARRAY
22658: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22659: LD_VAR 0 2
22663: PPUSH
22664: LD_VAR 0 5
22668: PPUSH
22669: CALL 23027 0 2
22673: NOT
22674: IFFALSE 22733
// repeat weapon := _weapon [ 1 ] ;
22676: LD_ADDR_VAR 0 5
22680: PUSH
22681: LD_VAR 0 10
22685: PUSH
22686: LD_INT 1
22688: ARRAY
22689: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22690: LD_ADDR_VAR 0 10
22694: PUSH
22695: LD_VAR 0 10
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 3
22707: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22708: LD_VAR 0 2
22712: PPUSH
22713: LD_VAR 0 5
22717: PPUSH
22718: CALL 23027 0 2
22722: PUSH
22723: LD_VAR 0 10
22727: PUSH
22728: EMPTY
22729: EQUAL
22730: OR
22731: IFFALSE 22676
// result := [ ] ;
22733: LD_ADDR_VAR 0 6
22737: PUSH
22738: EMPTY
22739: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22740: LD_VAR 0 1
22744: PPUSH
22745: LD_VAR 0 2
22749: PPUSH
22750: LD_VAR 0 3
22754: PPUSH
22755: LD_VAR 0 4
22759: PPUSH
22760: LD_VAR 0 5
22764: PPUSH
22765: CALL_OW 448
22769: IFFALSE 22802
// result := [ chassis , engine , control , weapon ] ;
22771: LD_ADDR_VAR 0 6
22775: PUSH
22776: LD_VAR 0 2
22780: PUSH
22781: LD_VAR 0 3
22785: PUSH
22786: LD_VAR 0 4
22790: PUSH
22791: LD_VAR 0 5
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: ST_TO_ADDR
// end ;
22802: LD_VAR 0 6
22806: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22807: LD_INT 0
22809: PPUSH
// if not chassis or not engine then
22810: LD_VAR 0 1
22814: NOT
22815: PUSH
22816: LD_VAR 0 2
22820: NOT
22821: OR
22822: IFFALSE 22826
// exit ;
22824: GO 23022
// case engine of engine_solar :
22826: LD_VAR 0 2
22830: PUSH
22831: LD_INT 2
22833: DOUBLE
22834: EQUAL
22835: IFTRUE 22839
22837: GO 22877
22839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22840: LD_ADDR_VAR 0 3
22844: PUSH
22845: LD_INT 11
22847: PUSH
22848: LD_INT 12
22850: PUSH
22851: LD_INT 13
22853: PUSH
22854: LD_INT 14
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 3
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: ST_TO_ADDR
22875: GO 23006
22877: LD_INT 1
22879: DOUBLE
22880: EQUAL
22881: IFTRUE 22885
22883: GO 22947
22885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22886: LD_ADDR_VAR 0 3
22890: PUSH
22891: LD_INT 11
22893: PUSH
22894: LD_INT 12
22896: PUSH
22897: LD_INT 13
22899: PUSH
22900: LD_INT 14
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 3
22911: PUSH
22912: LD_INT 4
22914: PUSH
22915: LD_INT 5
22917: PUSH
22918: LD_INT 21
22920: PUSH
22921: LD_INT 23
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 24
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: ST_TO_ADDR
22945: GO 23006
22947: LD_INT 3
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 23005
22955: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22956: LD_ADDR_VAR 0 3
22960: PUSH
22961: LD_INT 13
22963: PUSH
22964: LD_INT 14
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: LD_INT 3
22972: PUSH
22973: LD_INT 4
22975: PUSH
22976: LD_INT 5
22978: PUSH
22979: LD_INT 21
22981: PUSH
22982: LD_INT 22
22984: PUSH
22985: LD_INT 23
22987: PUSH
22988: LD_INT 24
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
23003: GO 23006
23005: POP
// result := ( chassis in result ) ;
23006: LD_ADDR_VAR 0 3
23010: PUSH
23011: LD_VAR 0 1
23015: PUSH
23016: LD_VAR 0 3
23020: IN
23021: ST_TO_ADDR
// end ;
23022: LD_VAR 0 3
23026: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23027: LD_INT 0
23029: PPUSH
// if not chassis or not weapon then
23030: LD_VAR 0 1
23034: NOT
23035: PUSH
23036: LD_VAR 0 2
23040: NOT
23041: OR
23042: IFFALSE 23046
// exit ;
23044: GO 24072
// case weapon of us_machine_gun :
23046: LD_VAR 0 2
23050: PUSH
23051: LD_INT 2
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23089
23059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23060: LD_ADDR_VAR 0 3
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: LD_INT 3
23073: PUSH
23074: LD_INT 4
23076: PUSH
23077: LD_INT 5
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: ST_TO_ADDR
23087: GO 24056
23089: LD_INT 3
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23127
23097: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: LD_INT 3
23111: PUSH
23112: LD_INT 4
23114: PUSH
23115: LD_INT 5
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: ST_TO_ADDR
23125: GO 24056
23127: LD_INT 11
23129: DOUBLE
23130: EQUAL
23131: IFTRUE 23135
23133: GO 23165
23135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23136: LD_ADDR_VAR 0 3
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: LD_INT 3
23149: PUSH
23150: LD_INT 4
23152: PUSH
23153: LD_INT 5
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: ST_TO_ADDR
23163: GO 24056
23165: LD_INT 4
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23199
23173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23174: LD_ADDR_VAR 0 3
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: LD_INT 4
23187: PUSH
23188: LD_INT 5
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: ST_TO_ADDR
23197: GO 24056
23199: LD_INT 5
23201: DOUBLE
23202: EQUAL
23203: IFTRUE 23207
23205: GO 23233
23207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23208: LD_ADDR_VAR 0 3
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: LD_INT 4
23221: PUSH
23222: LD_INT 5
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: ST_TO_ADDR
23231: GO 24056
23233: LD_INT 9
23235: DOUBLE
23236: EQUAL
23237: IFTRUE 23241
23239: GO 23267
23241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23242: LD_ADDR_VAR 0 3
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: LD_INT 4
23255: PUSH
23256: LD_INT 5
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: ST_TO_ADDR
23265: GO 24056
23267: LD_INT 7
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23301
23275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23276: LD_ADDR_VAR 0 3
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 3
23286: PUSH
23287: LD_INT 4
23289: PUSH
23290: LD_INT 5
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: ST_TO_ADDR
23299: GO 24056
23301: LD_INT 12
23303: DOUBLE
23304: EQUAL
23305: IFTRUE 23309
23307: GO 23335
23309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23310: LD_ADDR_VAR 0 3
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: LD_INT 4
23323: PUSH
23324: LD_INT 5
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: ST_TO_ADDR
23333: GO 24056
23335: LD_INT 13
23337: DOUBLE
23338: EQUAL
23339: IFTRUE 23343
23341: GO 23369
23343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23344: LD_ADDR_VAR 0 3
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: LD_INT 4
23357: PUSH
23358: LD_INT 5
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: ST_TO_ADDR
23367: GO 24056
23369: LD_INT 14
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23395
23377: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23378: LD_ADDR_VAR 0 3
23382: PUSH
23383: LD_INT 4
23385: PUSH
23386: LD_INT 5
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 24056
23395: LD_INT 6
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23421
23403: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 4
23411: PUSH
23412: LD_INT 5
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: ST_TO_ADDR
23419: GO 24056
23421: LD_INT 10
23423: DOUBLE
23424: EQUAL
23425: IFTRUE 23429
23427: GO 23447
23429: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23430: LD_ADDR_VAR 0 3
23434: PUSH
23435: LD_INT 4
23437: PUSH
23438: LD_INT 5
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: ST_TO_ADDR
23445: GO 24056
23447: LD_INT 22
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 23481
23455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23456: LD_ADDR_VAR 0 3
23460: PUSH
23461: LD_INT 11
23463: PUSH
23464: LD_INT 12
23466: PUSH
23467: LD_INT 13
23469: PUSH
23470: LD_INT 14
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: ST_TO_ADDR
23479: GO 24056
23481: LD_INT 23
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23515
23489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23490: LD_ADDR_VAR 0 3
23494: PUSH
23495: LD_INT 11
23497: PUSH
23498: LD_INT 12
23500: PUSH
23501: LD_INT 13
23503: PUSH
23504: LD_INT 14
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: ST_TO_ADDR
23513: GO 24056
23515: LD_INT 24
23517: DOUBLE
23518: EQUAL
23519: IFTRUE 23523
23521: GO 23549
23523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23524: LD_ADDR_VAR 0 3
23528: PUSH
23529: LD_INT 11
23531: PUSH
23532: LD_INT 12
23534: PUSH
23535: LD_INT 13
23537: PUSH
23538: LD_INT 14
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: ST_TO_ADDR
23547: GO 24056
23549: LD_INT 30
23551: DOUBLE
23552: EQUAL
23553: IFTRUE 23557
23555: GO 23583
23557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23558: LD_ADDR_VAR 0 3
23562: PUSH
23563: LD_INT 11
23565: PUSH
23566: LD_INT 12
23568: PUSH
23569: LD_INT 13
23571: PUSH
23572: LD_INT 14
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: ST_TO_ADDR
23581: GO 24056
23583: LD_INT 25
23585: DOUBLE
23586: EQUAL
23587: IFTRUE 23591
23589: GO 23609
23591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23592: LD_ADDR_VAR 0 3
23596: PUSH
23597: LD_INT 13
23599: PUSH
23600: LD_INT 14
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: ST_TO_ADDR
23607: GO 24056
23609: LD_INT 27
23611: DOUBLE
23612: EQUAL
23613: IFTRUE 23617
23615: GO 23635
23617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23618: LD_ADDR_VAR 0 3
23622: PUSH
23623: LD_INT 13
23625: PUSH
23626: LD_INT 14
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: ST_TO_ADDR
23633: GO 24056
23635: LD_INT 28
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23661
23643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23644: LD_ADDR_VAR 0 3
23648: PUSH
23649: LD_INT 13
23651: PUSH
23652: LD_INT 14
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: ST_TO_ADDR
23659: GO 24056
23661: LD_INT 29
23663: DOUBLE
23664: EQUAL
23665: IFTRUE 23669
23667: GO 23687
23669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23670: LD_ADDR_VAR 0 3
23674: PUSH
23675: LD_INT 13
23677: PUSH
23678: LD_INT 14
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: ST_TO_ADDR
23685: GO 24056
23687: LD_INT 31
23689: DOUBLE
23690: EQUAL
23691: IFTRUE 23695
23693: GO 23713
23695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23696: LD_ADDR_VAR 0 3
23700: PUSH
23701: LD_INT 13
23703: PUSH
23704: LD_INT 14
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: ST_TO_ADDR
23711: GO 24056
23713: LD_INT 26
23715: DOUBLE
23716: EQUAL
23717: IFTRUE 23721
23719: GO 23739
23721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23722: LD_ADDR_VAR 0 3
23726: PUSH
23727: LD_INT 13
23729: PUSH
23730: LD_INT 14
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: ST_TO_ADDR
23737: GO 24056
23739: LD_INT 42
23741: DOUBLE
23742: EQUAL
23743: IFTRUE 23747
23745: GO 23773
23747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23748: LD_ADDR_VAR 0 3
23752: PUSH
23753: LD_INT 21
23755: PUSH
23756: LD_INT 22
23758: PUSH
23759: LD_INT 23
23761: PUSH
23762: LD_INT 24
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: ST_TO_ADDR
23771: GO 24056
23773: LD_INT 43
23775: DOUBLE
23776: EQUAL
23777: IFTRUE 23781
23779: GO 23807
23781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23782: LD_ADDR_VAR 0 3
23786: PUSH
23787: LD_INT 21
23789: PUSH
23790: LD_INT 22
23792: PUSH
23793: LD_INT 23
23795: PUSH
23796: LD_INT 24
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: ST_TO_ADDR
23805: GO 24056
23807: LD_INT 44
23809: DOUBLE
23810: EQUAL
23811: IFTRUE 23815
23813: GO 23841
23815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23816: LD_ADDR_VAR 0 3
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 23
23829: PUSH
23830: LD_INT 24
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: ST_TO_ADDR
23839: GO 24056
23841: LD_INT 45
23843: DOUBLE
23844: EQUAL
23845: IFTRUE 23849
23847: GO 23875
23849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23850: LD_ADDR_VAR 0 3
23854: PUSH
23855: LD_INT 21
23857: PUSH
23858: LD_INT 22
23860: PUSH
23861: LD_INT 23
23863: PUSH
23864: LD_INT 24
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: ST_TO_ADDR
23873: GO 24056
23875: LD_INT 49
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 23909
23883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23884: LD_ADDR_VAR 0 3
23888: PUSH
23889: LD_INT 21
23891: PUSH
23892: LD_INT 22
23894: PUSH
23895: LD_INT 23
23897: PUSH
23898: LD_INT 24
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: ST_TO_ADDR
23907: GO 24056
23909: LD_INT 51
23911: DOUBLE
23912: EQUAL
23913: IFTRUE 23917
23915: GO 23943
23917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23918: LD_ADDR_VAR 0 3
23922: PUSH
23923: LD_INT 21
23925: PUSH
23926: LD_INT 22
23928: PUSH
23929: LD_INT 23
23931: PUSH
23932: LD_INT 24
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: ST_TO_ADDR
23941: GO 24056
23943: LD_INT 52
23945: DOUBLE
23946: EQUAL
23947: IFTRUE 23951
23949: GO 23977
23951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23952: LD_ADDR_VAR 0 3
23956: PUSH
23957: LD_INT 21
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_INT 23
23965: PUSH
23966: LD_INT 24
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: ST_TO_ADDR
23975: GO 24056
23977: LD_INT 53
23979: DOUBLE
23980: EQUAL
23981: IFTRUE 23985
23983: GO 24003
23985: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23986: LD_ADDR_VAR 0 3
23990: PUSH
23991: LD_INT 23
23993: PUSH
23994: LD_INT 24
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: ST_TO_ADDR
24001: GO 24056
24003: LD_INT 46
24005: DOUBLE
24006: EQUAL
24007: IFTRUE 24011
24009: GO 24029
24011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24012: LD_ADDR_VAR 0 3
24016: PUSH
24017: LD_INT 23
24019: PUSH
24020: LD_INT 24
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: ST_TO_ADDR
24027: GO 24056
24029: LD_INT 47
24031: DOUBLE
24032: EQUAL
24033: IFTRUE 24037
24035: GO 24055
24037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24038: LD_ADDR_VAR 0 3
24042: PUSH
24043: LD_INT 23
24045: PUSH
24046: LD_INT 24
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: ST_TO_ADDR
24053: GO 24056
24055: POP
// result := ( chassis in result ) ;
24056: LD_ADDR_VAR 0 3
24060: PUSH
24061: LD_VAR 0 1
24065: PUSH
24066: LD_VAR 0 3
24070: IN
24071: ST_TO_ADDR
// end ;
24072: LD_VAR 0 3
24076: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
24081: PPUSH
24082: PPUSH
24083: PPUSH
24084: PPUSH
24085: PPUSH
// result := array ;
24086: LD_ADDR_VAR 0 5
24090: PUSH
24091: LD_VAR 0 1
24095: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24096: LD_VAR 0 1
24100: NOT
24101: PUSH
24102: LD_VAR 0 2
24106: NOT
24107: OR
24108: PUSH
24109: LD_VAR 0 3
24113: NOT
24114: OR
24115: PUSH
24116: LD_VAR 0 2
24120: PUSH
24121: LD_VAR 0 1
24125: GREATER
24126: OR
24127: PUSH
24128: LD_VAR 0 3
24132: PUSH
24133: LD_VAR 0 1
24137: GREATER
24138: OR
24139: IFFALSE 24143
// exit ;
24141: GO 24439
// if direction then
24143: LD_VAR 0 4
24147: IFFALSE 24211
// begin d := 1 ;
24149: LD_ADDR_VAR 0 9
24153: PUSH
24154: LD_INT 1
24156: ST_TO_ADDR
// if i_from > i_to then
24157: LD_VAR 0 2
24161: PUSH
24162: LD_VAR 0 3
24166: GREATER
24167: IFFALSE 24193
// length := ( array - i_from ) + i_to else
24169: LD_ADDR_VAR 0 11
24173: PUSH
24174: LD_VAR 0 1
24178: PUSH
24179: LD_VAR 0 2
24183: MINUS
24184: PUSH
24185: LD_VAR 0 3
24189: PLUS
24190: ST_TO_ADDR
24191: GO 24209
// length := i_to - i_from ;
24193: LD_ADDR_VAR 0 11
24197: PUSH
24198: LD_VAR 0 3
24202: PUSH
24203: LD_VAR 0 2
24207: MINUS
24208: ST_TO_ADDR
// end else
24209: GO 24272
// begin d := - 1 ;
24211: LD_ADDR_VAR 0 9
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: ST_TO_ADDR
// if i_from > i_to then
24220: LD_VAR 0 2
24224: PUSH
24225: LD_VAR 0 3
24229: GREATER
24230: IFFALSE 24250
// length := i_from - i_to else
24232: LD_ADDR_VAR 0 11
24236: PUSH
24237: LD_VAR 0 2
24241: PUSH
24242: LD_VAR 0 3
24246: MINUS
24247: ST_TO_ADDR
24248: GO 24272
// length := ( array - i_to ) + i_from ;
24250: LD_ADDR_VAR 0 11
24254: PUSH
24255: LD_VAR 0 1
24259: PUSH
24260: LD_VAR 0 3
24264: MINUS
24265: PUSH
24266: LD_VAR 0 2
24270: PLUS
24271: ST_TO_ADDR
// end ; if not length then
24272: LD_VAR 0 11
24276: NOT
24277: IFFALSE 24281
// exit ;
24279: GO 24439
// tmp := array ;
24281: LD_ADDR_VAR 0 10
24285: PUSH
24286: LD_VAR 0 1
24290: ST_TO_ADDR
// for i = 1 to length do
24291: LD_ADDR_VAR 0 6
24295: PUSH
24296: DOUBLE
24297: LD_INT 1
24299: DEC
24300: ST_TO_ADDR
24301: LD_VAR 0 11
24305: PUSH
24306: FOR_TO
24307: IFFALSE 24427
// begin for j = 1 to array do
24309: LD_ADDR_VAR 0 7
24313: PUSH
24314: DOUBLE
24315: LD_INT 1
24317: DEC
24318: ST_TO_ADDR
24319: LD_VAR 0 1
24323: PUSH
24324: FOR_TO
24325: IFFALSE 24413
// begin k := j + d ;
24327: LD_ADDR_VAR 0 8
24331: PUSH
24332: LD_VAR 0 7
24336: PUSH
24337: LD_VAR 0 9
24341: PLUS
24342: ST_TO_ADDR
// if k > array then
24343: LD_VAR 0 8
24347: PUSH
24348: LD_VAR 0 1
24352: GREATER
24353: IFFALSE 24363
// k := 1 ;
24355: LD_ADDR_VAR 0 8
24359: PUSH
24360: LD_INT 1
24362: ST_TO_ADDR
// if not k then
24363: LD_VAR 0 8
24367: NOT
24368: IFFALSE 24380
// k := array ;
24370: LD_ADDR_VAR 0 8
24374: PUSH
24375: LD_VAR 0 1
24379: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24380: LD_ADDR_VAR 0 10
24384: PUSH
24385: LD_VAR 0 10
24389: PPUSH
24390: LD_VAR 0 8
24394: PPUSH
24395: LD_VAR 0 1
24399: PUSH
24400: LD_VAR 0 7
24404: ARRAY
24405: PPUSH
24406: CALL_OW 1
24410: ST_TO_ADDR
// end ;
24411: GO 24324
24413: POP
24414: POP
// array := tmp ;
24415: LD_ADDR_VAR 0 1
24419: PUSH
24420: LD_VAR 0 10
24424: ST_TO_ADDR
// end ;
24425: GO 24306
24427: POP
24428: POP
// result := array ;
24429: LD_ADDR_VAR 0 5
24433: PUSH
24434: LD_VAR 0 1
24438: ST_TO_ADDR
// end ;
24439: LD_VAR 0 5
24443: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24444: LD_INT 0
24446: PPUSH
24447: PPUSH
// result := 0 ;
24448: LD_ADDR_VAR 0 3
24452: PUSH
24453: LD_INT 0
24455: ST_TO_ADDR
// if not array or not value in array then
24456: LD_VAR 0 1
24460: NOT
24461: PUSH
24462: LD_VAR 0 2
24466: PUSH
24467: LD_VAR 0 1
24471: IN
24472: NOT
24473: OR
24474: IFFALSE 24478
// exit ;
24476: GO 24532
// for i = 1 to array do
24478: LD_ADDR_VAR 0 4
24482: PUSH
24483: DOUBLE
24484: LD_INT 1
24486: DEC
24487: ST_TO_ADDR
24488: LD_VAR 0 1
24492: PUSH
24493: FOR_TO
24494: IFFALSE 24530
// if value = array [ i ] then
24496: LD_VAR 0 2
24500: PUSH
24501: LD_VAR 0 1
24505: PUSH
24506: LD_VAR 0 4
24510: ARRAY
24511: EQUAL
24512: IFFALSE 24528
// begin result := i ;
24514: LD_ADDR_VAR 0 3
24518: PUSH
24519: LD_VAR 0 4
24523: ST_TO_ADDR
// exit ;
24524: POP
24525: POP
24526: GO 24532
// end ;
24528: GO 24493
24530: POP
24531: POP
// end ;
24532: LD_VAR 0 3
24536: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24537: LD_INT 0
24539: PPUSH
// vc_chassis := chassis ;
24540: LD_ADDR_OWVAR 37
24544: PUSH
24545: LD_VAR 0 1
24549: ST_TO_ADDR
// vc_engine := engine ;
24550: LD_ADDR_OWVAR 39
24554: PUSH
24555: LD_VAR 0 2
24559: ST_TO_ADDR
// vc_control := control ;
24560: LD_ADDR_OWVAR 38
24564: PUSH
24565: LD_VAR 0 3
24569: ST_TO_ADDR
// vc_weapon := weapon ;
24570: LD_ADDR_OWVAR 40
24574: PUSH
24575: LD_VAR 0 4
24579: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24580: LD_ADDR_OWVAR 41
24584: PUSH
24585: LD_VAR 0 5
24589: ST_TO_ADDR
// end ;
24590: LD_VAR 0 6
24594: RET
// export function WantPlant ( unit ) ; var task ; begin
24595: LD_INT 0
24597: PPUSH
24598: PPUSH
// result := false ;
24599: LD_ADDR_VAR 0 2
24603: PUSH
24604: LD_INT 0
24606: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24607: LD_ADDR_VAR 0 3
24611: PUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 437
24621: ST_TO_ADDR
// if task then
24622: LD_VAR 0 3
24626: IFFALSE 24654
// if task [ 1 ] [ 1 ] = p then
24628: LD_VAR 0 3
24632: PUSH
24633: LD_INT 1
24635: ARRAY
24636: PUSH
24637: LD_INT 1
24639: ARRAY
24640: PUSH
24641: LD_STRING p
24643: EQUAL
24644: IFFALSE 24654
// result := true ;
24646: LD_ADDR_VAR 0 2
24650: PUSH
24651: LD_INT 1
24653: ST_TO_ADDR
// end ;
24654: LD_VAR 0 2
24658: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24659: LD_INT 0
24661: PPUSH
24662: PPUSH
24663: PPUSH
24664: PPUSH
// if pos < 1 then
24665: LD_VAR 0 2
24669: PUSH
24670: LD_INT 1
24672: LESS
24673: IFFALSE 24677
// exit ;
24675: GO 24980
// if pos = 1 then
24677: LD_VAR 0 2
24681: PUSH
24682: LD_INT 1
24684: EQUAL
24685: IFFALSE 24718
// result := Replace ( arr , pos [ 1 ] , value ) else
24687: LD_ADDR_VAR 0 4
24691: PUSH
24692: LD_VAR 0 1
24696: PPUSH
24697: LD_VAR 0 2
24701: PUSH
24702: LD_INT 1
24704: ARRAY
24705: PPUSH
24706: LD_VAR 0 3
24710: PPUSH
24711: CALL_OW 1
24715: ST_TO_ADDR
24716: GO 24980
// begin tmp := arr ;
24718: LD_ADDR_VAR 0 6
24722: PUSH
24723: LD_VAR 0 1
24727: ST_TO_ADDR
// s_arr := [ tmp ] ;
24728: LD_ADDR_VAR 0 7
24732: PUSH
24733: LD_VAR 0 6
24737: PUSH
24738: EMPTY
24739: LIST
24740: ST_TO_ADDR
// for i = 1 to pos - 1 do
24741: LD_ADDR_VAR 0 5
24745: PUSH
24746: DOUBLE
24747: LD_INT 1
24749: DEC
24750: ST_TO_ADDR
24751: LD_VAR 0 2
24755: PUSH
24756: LD_INT 1
24758: MINUS
24759: PUSH
24760: FOR_TO
24761: IFFALSE 24806
// begin tmp := tmp [ pos [ i ] ] ;
24763: LD_ADDR_VAR 0 6
24767: PUSH
24768: LD_VAR 0 6
24772: PUSH
24773: LD_VAR 0 2
24777: PUSH
24778: LD_VAR 0 5
24782: ARRAY
24783: ARRAY
24784: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24785: LD_ADDR_VAR 0 7
24789: PUSH
24790: LD_VAR 0 7
24794: PUSH
24795: LD_VAR 0 6
24799: PUSH
24800: EMPTY
24801: LIST
24802: ADD
24803: ST_TO_ADDR
// end ;
24804: GO 24760
24806: POP
24807: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24808: LD_ADDR_VAR 0 6
24812: PUSH
24813: LD_VAR 0 6
24817: PPUSH
24818: LD_VAR 0 2
24822: PUSH
24823: LD_VAR 0 2
24827: ARRAY
24828: PPUSH
24829: LD_VAR 0 3
24833: PPUSH
24834: CALL_OW 1
24838: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24839: LD_ADDR_VAR 0 7
24843: PUSH
24844: LD_VAR 0 7
24848: PPUSH
24849: LD_VAR 0 7
24853: PPUSH
24854: LD_VAR 0 6
24858: PPUSH
24859: CALL_OW 1
24863: ST_TO_ADDR
// for i = s_arr downto 2 do
24864: LD_ADDR_VAR 0 5
24868: PUSH
24869: DOUBLE
24870: LD_VAR 0 7
24874: INC
24875: ST_TO_ADDR
24876: LD_INT 2
24878: PUSH
24879: FOR_DOWNTO
24880: IFFALSE 24964
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24882: LD_ADDR_VAR 0 6
24886: PUSH
24887: LD_VAR 0 7
24891: PUSH
24892: LD_VAR 0 5
24896: PUSH
24897: LD_INT 1
24899: MINUS
24900: ARRAY
24901: PPUSH
24902: LD_VAR 0 2
24906: PUSH
24907: LD_VAR 0 5
24911: PUSH
24912: LD_INT 1
24914: MINUS
24915: ARRAY
24916: PPUSH
24917: LD_VAR 0 7
24921: PUSH
24922: LD_VAR 0 5
24926: ARRAY
24927: PPUSH
24928: CALL_OW 1
24932: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24933: LD_ADDR_VAR 0 7
24937: PUSH
24938: LD_VAR 0 7
24942: PPUSH
24943: LD_VAR 0 5
24947: PUSH
24948: LD_INT 1
24950: MINUS
24951: PPUSH
24952: LD_VAR 0 6
24956: PPUSH
24957: CALL_OW 1
24961: ST_TO_ADDR
// end ;
24962: GO 24879
24964: POP
24965: POP
// result := s_arr [ 1 ] ;
24966: LD_ADDR_VAR 0 4
24970: PUSH
24971: LD_VAR 0 7
24975: PUSH
24976: LD_INT 1
24978: ARRAY
24979: ST_TO_ADDR
// end ; end ;
24980: LD_VAR 0 4
24984: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24985: LD_INT 0
24987: PPUSH
24988: PPUSH
// if not list then
24989: LD_VAR 0 1
24993: NOT
24994: IFFALSE 24998
// exit ;
24996: GO 25089
// i := list [ pos1 ] ;
24998: LD_ADDR_VAR 0 5
25002: PUSH
25003: LD_VAR 0 1
25007: PUSH
25008: LD_VAR 0 2
25012: ARRAY
25013: ST_TO_ADDR
// if not i then
25014: LD_VAR 0 5
25018: NOT
25019: IFFALSE 25023
// exit ;
25021: GO 25089
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25023: LD_ADDR_VAR 0 1
25027: PUSH
25028: LD_VAR 0 1
25032: PPUSH
25033: LD_VAR 0 2
25037: PPUSH
25038: LD_VAR 0 1
25042: PUSH
25043: LD_VAR 0 3
25047: ARRAY
25048: PPUSH
25049: CALL_OW 1
25053: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25054: LD_ADDR_VAR 0 1
25058: PUSH
25059: LD_VAR 0 1
25063: PPUSH
25064: LD_VAR 0 3
25068: PPUSH
25069: LD_VAR 0 5
25073: PPUSH
25074: CALL_OW 1
25078: ST_TO_ADDR
// result := list ;
25079: LD_ADDR_VAR 0 4
25083: PUSH
25084: LD_VAR 0 1
25088: ST_TO_ADDR
// end ;
25089: LD_VAR 0 4
25093: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25094: LD_INT 0
25096: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25097: LD_ADDR_VAR 0 5
25101: PUSH
25102: LD_VAR 0 1
25106: PPUSH
25107: CALL_OW 250
25111: PPUSH
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL_OW 251
25121: PPUSH
25122: LD_VAR 0 2
25126: PPUSH
25127: LD_VAR 0 3
25131: PPUSH
25132: LD_VAR 0 4
25136: PPUSH
25137: CALL 25147 0 5
25141: ST_TO_ADDR
// end ;
25142: LD_VAR 0 5
25146: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25147: LD_INT 0
25149: PPUSH
25150: PPUSH
25151: PPUSH
25152: PPUSH
// if not list then
25153: LD_VAR 0 3
25157: NOT
25158: IFFALSE 25162
// exit ;
25160: GO 25550
// result := [ ] ;
25162: LD_ADDR_VAR 0 6
25166: PUSH
25167: EMPTY
25168: ST_TO_ADDR
// for i in list do
25169: LD_ADDR_VAR 0 7
25173: PUSH
25174: LD_VAR 0 3
25178: PUSH
25179: FOR_IN
25180: IFFALSE 25382
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25182: LD_ADDR_VAR 0 9
25186: PUSH
25187: LD_VAR 0 7
25191: PPUSH
25192: LD_VAR 0 1
25196: PPUSH
25197: LD_VAR 0 2
25201: PPUSH
25202: CALL_OW 297
25206: ST_TO_ADDR
// if not result then
25207: LD_VAR 0 6
25211: NOT
25212: IFFALSE 25238
// result := [ [ i , tmp ] ] else
25214: LD_ADDR_VAR 0 6
25218: PUSH
25219: LD_VAR 0 7
25223: PUSH
25224: LD_VAR 0 9
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: ST_TO_ADDR
25236: GO 25380
// begin if result [ result ] [ 2 ] < tmp then
25238: LD_VAR 0 6
25242: PUSH
25243: LD_VAR 0 6
25247: ARRAY
25248: PUSH
25249: LD_INT 2
25251: ARRAY
25252: PUSH
25253: LD_VAR 0 9
25257: LESS
25258: IFFALSE 25300
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25260: LD_ADDR_VAR 0 6
25264: PUSH
25265: LD_VAR 0 6
25269: PPUSH
25270: LD_VAR 0 6
25274: PUSH
25275: LD_INT 1
25277: PLUS
25278: PPUSH
25279: LD_VAR 0 7
25283: PUSH
25284: LD_VAR 0 9
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PPUSH
25293: CALL_OW 2
25297: ST_TO_ADDR
25298: GO 25380
// for j = 1 to result do
25300: LD_ADDR_VAR 0 8
25304: PUSH
25305: DOUBLE
25306: LD_INT 1
25308: DEC
25309: ST_TO_ADDR
25310: LD_VAR 0 6
25314: PUSH
25315: FOR_TO
25316: IFFALSE 25378
// begin if tmp < result [ j ] [ 2 ] then
25318: LD_VAR 0 9
25322: PUSH
25323: LD_VAR 0 6
25327: PUSH
25328: LD_VAR 0 8
25332: ARRAY
25333: PUSH
25334: LD_INT 2
25336: ARRAY
25337: LESS
25338: IFFALSE 25376
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25340: LD_ADDR_VAR 0 6
25344: PUSH
25345: LD_VAR 0 6
25349: PPUSH
25350: LD_VAR 0 8
25354: PPUSH
25355: LD_VAR 0 7
25359: PUSH
25360: LD_VAR 0 9
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PPUSH
25369: CALL_OW 2
25373: ST_TO_ADDR
// break ;
25374: GO 25378
// end ; end ;
25376: GO 25315
25378: POP
25379: POP
// end ; end ;
25380: GO 25179
25382: POP
25383: POP
// if result and not asc then
25384: LD_VAR 0 6
25388: PUSH
25389: LD_VAR 0 4
25393: NOT
25394: AND
25395: IFFALSE 25470
// begin tmp := result ;
25397: LD_ADDR_VAR 0 9
25401: PUSH
25402: LD_VAR 0 6
25406: ST_TO_ADDR
// for i = tmp downto 1 do
25407: LD_ADDR_VAR 0 7
25411: PUSH
25412: DOUBLE
25413: LD_VAR 0 9
25417: INC
25418: ST_TO_ADDR
25419: LD_INT 1
25421: PUSH
25422: FOR_DOWNTO
25423: IFFALSE 25468
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25425: LD_ADDR_VAR 0 6
25429: PUSH
25430: LD_VAR 0 6
25434: PPUSH
25435: LD_VAR 0 9
25439: PUSH
25440: LD_VAR 0 7
25444: MINUS
25445: PUSH
25446: LD_INT 1
25448: PLUS
25449: PPUSH
25450: LD_VAR 0 9
25454: PUSH
25455: LD_VAR 0 7
25459: ARRAY
25460: PPUSH
25461: CALL_OW 1
25465: ST_TO_ADDR
25466: GO 25422
25468: POP
25469: POP
// end ; tmp := [ ] ;
25470: LD_ADDR_VAR 0 9
25474: PUSH
25475: EMPTY
25476: ST_TO_ADDR
// if mode then
25477: LD_VAR 0 5
25481: IFFALSE 25550
// begin for i = 1 to result do
25483: LD_ADDR_VAR 0 7
25487: PUSH
25488: DOUBLE
25489: LD_INT 1
25491: DEC
25492: ST_TO_ADDR
25493: LD_VAR 0 6
25497: PUSH
25498: FOR_TO
25499: IFFALSE 25538
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25501: LD_ADDR_VAR 0 9
25505: PUSH
25506: LD_VAR 0 9
25510: PPUSH
25511: LD_VAR 0 7
25515: PPUSH
25516: LD_VAR 0 6
25520: PUSH
25521: LD_VAR 0 7
25525: ARRAY
25526: PUSH
25527: LD_INT 1
25529: ARRAY
25530: PPUSH
25531: CALL_OW 1
25535: ST_TO_ADDR
25536: GO 25498
25538: POP
25539: POP
// result := tmp ;
25540: LD_ADDR_VAR 0 6
25544: PUSH
25545: LD_VAR 0 9
25549: ST_TO_ADDR
// end ; end ;
25550: LD_VAR 0 6
25554: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25555: LD_INT 0
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
25561: PPUSH
25562: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: ST_TO_ADDR
// if not x or not y then
25585: LD_VAR 0 2
25589: NOT
25590: PUSH
25591: LD_VAR 0 3
25595: NOT
25596: OR
25597: IFFALSE 25601
// exit ;
25599: GO 27247
// if not range then
25601: LD_VAR 0 4
25605: NOT
25606: IFFALSE 25616
// range := 10 ;
25608: LD_ADDR_VAR 0 4
25612: PUSH
25613: LD_INT 10
25615: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25616: LD_ADDR_VAR 0 8
25620: PUSH
25621: LD_INT 81
25623: PUSH
25624: LD_VAR 0 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 92
25635: PUSH
25636: LD_VAR 0 2
25640: PUSH
25641: LD_VAR 0 3
25645: PUSH
25646: LD_VAR 0 4
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 3
25659: PUSH
25660: LD_INT 21
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: PPUSH
25679: CALL_OW 69
25683: ST_TO_ADDR
// if not tmp then
25684: LD_VAR 0 8
25688: NOT
25689: IFFALSE 25693
// exit ;
25691: GO 27247
// for i in tmp do
25693: LD_ADDR_VAR 0 6
25697: PUSH
25698: LD_VAR 0 8
25702: PUSH
25703: FOR_IN
25704: IFFALSE 27222
// begin points := [ 0 , 0 , 0 ] ;
25706: LD_ADDR_VAR 0 9
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: ST_TO_ADDR
// bpoints := 1 ;
25725: LD_ADDR_VAR 0 10
25729: PUSH
25730: LD_INT 1
25732: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25733: LD_VAR 0 6
25737: PPUSH
25738: CALL_OW 247
25742: PUSH
25743: LD_INT 1
25745: DOUBLE
25746: EQUAL
25747: IFTRUE 25751
25749: GO 26329
25751: POP
// begin if GetClass ( i ) = 1 then
25752: LD_VAR 0 6
25756: PPUSH
25757: CALL_OW 257
25761: PUSH
25762: LD_INT 1
25764: EQUAL
25765: IFFALSE 25786
// points := [ 10 , 5 , 3 ] ;
25767: LD_ADDR_VAR 0 9
25771: PUSH
25772: LD_INT 10
25774: PUSH
25775: LD_INT 5
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25786: LD_VAR 0 6
25790: PPUSH
25791: CALL_OW 257
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: LD_INT 3
25801: PUSH
25802: LD_INT 4
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: IN
25810: IFFALSE 25831
// points := [ 3 , 2 , 1 ] ;
25812: LD_ADDR_VAR 0 9
25816: PUSH
25817: LD_INT 3
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25831: LD_VAR 0 6
25835: PPUSH
25836: CALL_OW 257
25840: PUSH
25841: LD_INT 5
25843: EQUAL
25844: IFFALSE 25865
// points := [ 130 , 5 , 2 ] ;
25846: LD_ADDR_VAR 0 9
25850: PUSH
25851: LD_INT 130
25853: PUSH
25854: LD_INT 5
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25865: LD_VAR 0 6
25869: PPUSH
25870: CALL_OW 257
25874: PUSH
25875: LD_INT 8
25877: EQUAL
25878: IFFALSE 25899
// points := [ 35 , 35 , 30 ] ;
25880: LD_ADDR_VAR 0 9
25884: PUSH
25885: LD_INT 35
25887: PUSH
25888: LD_INT 35
25890: PUSH
25891: LD_INT 30
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25899: LD_VAR 0 6
25903: PPUSH
25904: CALL_OW 257
25908: PUSH
25909: LD_INT 9
25911: EQUAL
25912: IFFALSE 25933
// points := [ 20 , 55 , 40 ] ;
25914: LD_ADDR_VAR 0 9
25918: PUSH
25919: LD_INT 20
25921: PUSH
25922: LD_INT 55
25924: PUSH
25925: LD_INT 40
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25933: LD_VAR 0 6
25937: PPUSH
25938: CALL_OW 257
25942: PUSH
25943: LD_INT 12
25945: PUSH
25946: LD_INT 16
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: IN
25953: IFFALSE 25974
// points := [ 5 , 3 , 2 ] ;
25955: LD_ADDR_VAR 0 9
25959: PUSH
25960: LD_INT 5
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25974: LD_VAR 0 6
25978: PPUSH
25979: CALL_OW 257
25983: PUSH
25984: LD_INT 17
25986: EQUAL
25987: IFFALSE 26008
// points := [ 100 , 50 , 75 ] ;
25989: LD_ADDR_VAR 0 9
25993: PUSH
25994: LD_INT 100
25996: PUSH
25997: LD_INT 50
25999: PUSH
26000: LD_INT 75
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26008: LD_VAR 0 6
26012: PPUSH
26013: CALL_OW 257
26017: PUSH
26018: LD_INT 15
26020: EQUAL
26021: IFFALSE 26042
// points := [ 10 , 5 , 3 ] ;
26023: LD_ADDR_VAR 0 9
26027: PUSH
26028: LD_INT 10
26030: PUSH
26031: LD_INT 5
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26042: LD_VAR 0 6
26046: PPUSH
26047: CALL_OW 257
26051: PUSH
26052: LD_INT 14
26054: EQUAL
26055: IFFALSE 26076
// points := [ 10 , 0 , 0 ] ;
26057: LD_ADDR_VAR 0 9
26061: PUSH
26062: LD_INT 10
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26076: LD_VAR 0 6
26080: PPUSH
26081: CALL_OW 257
26085: PUSH
26086: LD_INT 11
26088: EQUAL
26089: IFFALSE 26110
// points := [ 30 , 10 , 5 ] ;
26091: LD_ADDR_VAR 0 9
26095: PUSH
26096: LD_INT 30
26098: PUSH
26099: LD_INT 10
26101: PUSH
26102: LD_INT 5
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26110: LD_VAR 0 1
26114: PPUSH
26115: LD_INT 5
26117: PPUSH
26118: CALL_OW 321
26122: PUSH
26123: LD_INT 2
26125: EQUAL
26126: IFFALSE 26143
// bpoints := bpoints * 1.8 ;
26128: LD_ADDR_VAR 0 10
26132: PUSH
26133: LD_VAR 0 10
26137: PUSH
26138: LD_REAL  1.80000000000000E+0000
26141: MUL
26142: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26143: LD_VAR 0 6
26147: PPUSH
26148: CALL_OW 257
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: LD_INT 3
26161: PUSH
26162: LD_INT 4
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: IN
26171: PUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: LD_INT 51
26179: PPUSH
26180: CALL_OW 321
26184: PUSH
26185: LD_INT 2
26187: EQUAL
26188: AND
26189: IFFALSE 26206
// bpoints := bpoints * 1.2 ;
26191: LD_ADDR_VAR 0 10
26195: PUSH
26196: LD_VAR 0 10
26200: PUSH
26201: LD_REAL  1.20000000000000E+0000
26204: MUL
26205: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26206: LD_VAR 0 6
26210: PPUSH
26211: CALL_OW 257
26215: PUSH
26216: LD_INT 5
26218: PUSH
26219: LD_INT 7
26221: PUSH
26222: LD_INT 9
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: IN
26230: PUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: LD_INT 52
26238: PPUSH
26239: CALL_OW 321
26243: PUSH
26244: LD_INT 2
26246: EQUAL
26247: AND
26248: IFFALSE 26265
// bpoints := bpoints * 1.5 ;
26250: LD_ADDR_VAR 0 10
26254: PUSH
26255: LD_VAR 0 10
26259: PUSH
26260: LD_REAL  1.50000000000000E+0000
26263: MUL
26264: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26265: LD_VAR 0 1
26269: PPUSH
26270: LD_INT 66
26272: PPUSH
26273: CALL_OW 321
26277: PUSH
26278: LD_INT 2
26280: EQUAL
26281: IFFALSE 26298
// bpoints := bpoints * 1.1 ;
26283: LD_ADDR_VAR 0 10
26287: PUSH
26288: LD_VAR 0 10
26292: PUSH
26293: LD_REAL  1.10000000000000E+0000
26296: MUL
26297: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26298: LD_ADDR_VAR 0 10
26302: PUSH
26303: LD_VAR 0 10
26307: PUSH
26308: LD_VAR 0 6
26312: PPUSH
26313: LD_INT 1
26315: PPUSH
26316: CALL_OW 259
26320: PUSH
26321: LD_REAL  1.15000000000000E+0000
26324: MUL
26325: MUL
26326: ST_TO_ADDR
// end ; unit_vehicle :
26327: GO 27151
26329: LD_INT 2
26331: DOUBLE
26332: EQUAL
26333: IFTRUE 26337
26335: GO 27139
26337: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26338: LD_VAR 0 6
26342: PPUSH
26343: CALL_OW 264
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 42
26353: PUSH
26354: LD_INT 24
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: IN
26362: IFFALSE 26383
// points := [ 25 , 5 , 3 ] ;
26364: LD_ADDR_VAR 0 9
26368: PUSH
26369: LD_INT 25
26371: PUSH
26372: LD_INT 5
26374: PUSH
26375: LD_INT 3
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26383: LD_VAR 0 6
26387: PPUSH
26388: CALL_OW 264
26392: PUSH
26393: LD_INT 4
26395: PUSH
26396: LD_INT 43
26398: PUSH
26399: LD_INT 25
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: LIST
26406: IN
26407: IFFALSE 26428
// points := [ 40 , 15 , 5 ] ;
26409: LD_ADDR_VAR 0 9
26413: PUSH
26414: LD_INT 40
26416: PUSH
26417: LD_INT 15
26419: PUSH
26420: LD_INT 5
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26428: LD_VAR 0 6
26432: PPUSH
26433: CALL_OW 264
26437: PUSH
26438: LD_INT 3
26440: PUSH
26441: LD_INT 23
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: IN
26448: IFFALSE 26469
// points := [ 7 , 25 , 8 ] ;
26450: LD_ADDR_VAR 0 9
26454: PUSH
26455: LD_INT 7
26457: PUSH
26458: LD_INT 25
26460: PUSH
26461: LD_INT 8
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26469: LD_VAR 0 6
26473: PPUSH
26474: CALL_OW 264
26478: PUSH
26479: LD_INT 5
26481: PUSH
26482: LD_INT 27
26484: PUSH
26485: LD_INT 44
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: IN
26493: IFFALSE 26514
// points := [ 14 , 50 , 16 ] ;
26495: LD_ADDR_VAR 0 9
26499: PUSH
26500: LD_INT 14
26502: PUSH
26503: LD_INT 50
26505: PUSH
26506: LD_INT 16
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: LIST
26513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26514: LD_VAR 0 6
26518: PPUSH
26519: CALL_OW 264
26523: PUSH
26524: LD_INT 6
26526: PUSH
26527: LD_INT 46
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: IN
26534: IFFALSE 26555
// points := [ 32 , 120 , 70 ] ;
26536: LD_ADDR_VAR 0 9
26540: PUSH
26541: LD_INT 32
26543: PUSH
26544: LD_INT 120
26546: PUSH
26547: LD_INT 70
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26555: LD_VAR 0 6
26559: PPUSH
26560: CALL_OW 264
26564: PUSH
26565: LD_INT 7
26567: PUSH
26568: LD_INT 28
26570: PUSH
26571: LD_INT 45
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: IN
26579: IFFALSE 26600
// points := [ 35 , 20 , 45 ] ;
26581: LD_ADDR_VAR 0 9
26585: PUSH
26586: LD_INT 35
26588: PUSH
26589: LD_INT 20
26591: PUSH
26592: LD_INT 45
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26600: LD_VAR 0 6
26604: PPUSH
26605: CALL_OW 264
26609: PUSH
26610: LD_INT 47
26612: PUSH
26613: EMPTY
26614: LIST
26615: IN
26616: IFFALSE 26637
// points := [ 67 , 45 , 75 ] ;
26618: LD_ADDR_VAR 0 9
26622: PUSH
26623: LD_INT 67
26625: PUSH
26626: LD_INT 45
26628: PUSH
26629: LD_INT 75
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: LIST
26636: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26637: LD_VAR 0 6
26641: PPUSH
26642: CALL_OW 264
26646: PUSH
26647: LD_INT 26
26649: PUSH
26650: EMPTY
26651: LIST
26652: IN
26653: IFFALSE 26674
// points := [ 120 , 30 , 80 ] ;
26655: LD_ADDR_VAR 0 9
26659: PUSH
26660: LD_INT 120
26662: PUSH
26663: LD_INT 30
26665: PUSH
26666: LD_INT 80
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26674: LD_VAR 0 6
26678: PPUSH
26679: CALL_OW 264
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: EMPTY
26688: LIST
26689: IN
26690: IFFALSE 26711
// points := [ 40 , 1 , 1 ] ;
26692: LD_ADDR_VAR 0 9
26696: PUSH
26697: LD_INT 40
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26711: LD_VAR 0 6
26715: PPUSH
26716: CALL_OW 264
26720: PUSH
26721: LD_INT 29
26723: PUSH
26724: EMPTY
26725: LIST
26726: IN
26727: IFFALSE 26748
// points := [ 70 , 200 , 400 ] ;
26729: LD_ADDR_VAR 0 9
26733: PUSH
26734: LD_INT 70
26736: PUSH
26737: LD_INT 200
26739: PUSH
26740: LD_INT 400
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26748: LD_VAR 0 6
26752: PPUSH
26753: CALL_OW 264
26757: PUSH
26758: LD_INT 14
26760: PUSH
26761: LD_INT 53
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: IN
26768: IFFALSE 26789
// points := [ 40 , 10 , 20 ] ;
26770: LD_ADDR_VAR 0 9
26774: PUSH
26775: LD_INT 40
26777: PUSH
26778: LD_INT 10
26780: PUSH
26781: LD_INT 20
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26789: LD_VAR 0 6
26793: PPUSH
26794: CALL_OW 264
26798: PUSH
26799: LD_INT 9
26801: PUSH
26802: EMPTY
26803: LIST
26804: IN
26805: IFFALSE 26826
// points := [ 5 , 70 , 20 ] ;
26807: LD_ADDR_VAR 0 9
26811: PUSH
26812: LD_INT 5
26814: PUSH
26815: LD_INT 70
26817: PUSH
26818: LD_INT 20
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26826: LD_VAR 0 6
26830: PPUSH
26831: CALL_OW 264
26835: PUSH
26836: LD_INT 10
26838: PUSH
26839: EMPTY
26840: LIST
26841: IN
26842: IFFALSE 26863
// points := [ 35 , 110 , 70 ] ;
26844: LD_ADDR_VAR 0 9
26848: PUSH
26849: LD_INT 35
26851: PUSH
26852: LD_INT 110
26854: PUSH
26855: LD_INT 70
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26863: LD_VAR 0 6
26867: PPUSH
26868: CALL_OW 265
26872: PUSH
26873: LD_INT 25
26875: EQUAL
26876: IFFALSE 26897
// points := [ 80 , 65 , 100 ] ;
26878: LD_ADDR_VAR 0 9
26882: PUSH
26883: LD_INT 80
26885: PUSH
26886: LD_INT 65
26888: PUSH
26889: LD_INT 100
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26897: LD_VAR 0 6
26901: PPUSH
26902: CALL_OW 263
26906: PUSH
26907: LD_INT 1
26909: EQUAL
26910: IFFALSE 26945
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26912: LD_ADDR_VAR 0 10
26916: PUSH
26917: LD_VAR 0 10
26921: PUSH
26922: LD_VAR 0 6
26926: PPUSH
26927: CALL_OW 311
26931: PPUSH
26932: LD_INT 3
26934: PPUSH
26935: CALL_OW 259
26939: PUSH
26940: LD_INT 4
26942: MUL
26943: MUL
26944: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26945: LD_VAR 0 6
26949: PPUSH
26950: CALL_OW 263
26954: PUSH
26955: LD_INT 2
26957: EQUAL
26958: IFFALSE 27009
// begin j := IsControledBy ( i ) ;
26960: LD_ADDR_VAR 0 7
26964: PUSH
26965: LD_VAR 0 6
26969: PPUSH
26970: CALL_OW 312
26974: ST_TO_ADDR
// if j then
26975: LD_VAR 0 7
26979: IFFALSE 27009
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26981: LD_ADDR_VAR 0 10
26985: PUSH
26986: LD_VAR 0 10
26990: PUSH
26991: LD_VAR 0 7
26995: PPUSH
26996: LD_INT 3
26998: PPUSH
26999: CALL_OW 259
27003: PUSH
27004: LD_INT 3
27006: MUL
27007: MUL
27008: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27009: LD_VAR 0 6
27013: PPUSH
27014: CALL_OW 264
27018: PUSH
27019: LD_INT 5
27021: PUSH
27022: LD_INT 6
27024: PUSH
27025: LD_INT 46
27027: PUSH
27028: LD_INT 44
27030: PUSH
27031: LD_INT 47
27033: PUSH
27034: LD_INT 45
27036: PUSH
27037: LD_INT 28
27039: PUSH
27040: LD_INT 7
27042: PUSH
27043: LD_INT 27
27045: PUSH
27046: LD_INT 29
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: IN
27061: PUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: LD_INT 52
27069: PPUSH
27070: CALL_OW 321
27074: PUSH
27075: LD_INT 2
27077: EQUAL
27078: AND
27079: IFFALSE 27096
// bpoints := bpoints * 1.2 ;
27081: LD_ADDR_VAR 0 10
27085: PUSH
27086: LD_VAR 0 10
27090: PUSH
27091: LD_REAL  1.20000000000000E+0000
27094: MUL
27095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27096: LD_VAR 0 6
27100: PPUSH
27101: CALL_OW 264
27105: PUSH
27106: LD_INT 6
27108: PUSH
27109: LD_INT 46
27111: PUSH
27112: LD_INT 47
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: LIST
27119: IN
27120: IFFALSE 27137
// bpoints := bpoints * 1.2 ;
27122: LD_ADDR_VAR 0 10
27126: PUSH
27127: LD_VAR 0 10
27131: PUSH
27132: LD_REAL  1.20000000000000E+0000
27135: MUL
27136: ST_TO_ADDR
// end ; unit_building :
27137: GO 27151
27139: LD_INT 3
27141: DOUBLE
27142: EQUAL
27143: IFTRUE 27147
27145: GO 27150
27147: POP
// ; end ;
27148: GO 27151
27150: POP
// for j = 1 to 3 do
27151: LD_ADDR_VAR 0 7
27155: PUSH
27156: DOUBLE
27157: LD_INT 1
27159: DEC
27160: ST_TO_ADDR
27161: LD_INT 3
27163: PUSH
27164: FOR_TO
27165: IFFALSE 27218
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27167: LD_ADDR_VAR 0 5
27171: PUSH
27172: LD_VAR 0 5
27176: PPUSH
27177: LD_VAR 0 7
27181: PPUSH
27182: LD_VAR 0 5
27186: PUSH
27187: LD_VAR 0 7
27191: ARRAY
27192: PUSH
27193: LD_VAR 0 9
27197: PUSH
27198: LD_VAR 0 7
27202: ARRAY
27203: PUSH
27204: LD_VAR 0 10
27208: MUL
27209: PLUS
27210: PPUSH
27211: CALL_OW 1
27215: ST_TO_ADDR
27216: GO 27164
27218: POP
27219: POP
// end ;
27220: GO 25703
27222: POP
27223: POP
// result := Replace ( result , 4 , tmp ) ;
27224: LD_ADDR_VAR 0 5
27228: PUSH
27229: LD_VAR 0 5
27233: PPUSH
27234: LD_INT 4
27236: PPUSH
27237: LD_VAR 0 8
27241: PPUSH
27242: CALL_OW 1
27246: ST_TO_ADDR
// end ;
27247: LD_VAR 0 5
27251: RET
// export function DangerAtRange ( unit , range ) ; begin
27252: LD_INT 0
27254: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: LD_VAR 0 1
27264: PPUSH
27265: CALL_OW 255
27269: PPUSH
27270: LD_VAR 0 1
27274: PPUSH
27275: CALL_OW 250
27279: PPUSH
27280: LD_VAR 0 1
27284: PPUSH
27285: CALL_OW 251
27289: PPUSH
27290: LD_VAR 0 2
27294: PPUSH
27295: CALL 25555 0 4
27299: ST_TO_ADDR
// end ;
27300: LD_VAR 0 3
27304: RET
// export function DangerInArea ( side , area ) ; begin
27305: LD_INT 0
27307: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27308: LD_ADDR_VAR 0 3
27312: PUSH
27313: LD_VAR 0 2
27317: PPUSH
27318: LD_INT 81
27320: PUSH
27321: LD_VAR 0 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 70
27334: ST_TO_ADDR
// end ;
27335: LD_VAR 0 3
27339: RET
// export function IsExtension ( b ) ; begin
27340: LD_INT 0
27342: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27343: LD_ADDR_VAR 0 2
27347: PUSH
27348: LD_VAR 0 1
27352: PUSH
27353: LD_INT 23
27355: PUSH
27356: LD_INT 20
27358: PUSH
27359: LD_INT 22
27361: PUSH
27362: LD_INT 17
27364: PUSH
27365: LD_INT 24
27367: PUSH
27368: LD_INT 21
27370: PUSH
27371: LD_INT 19
27373: PUSH
27374: LD_INT 16
27376: PUSH
27377: LD_INT 25
27379: PUSH
27380: LD_INT 18
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: IN
27395: ST_TO_ADDR
// end ;
27396: LD_VAR 0 2
27400: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27401: LD_INT 0
27403: PPUSH
27404: PPUSH
27405: PPUSH
// result := [ ] ;
27406: LD_ADDR_VAR 0 3
27410: PUSH
27411: EMPTY
27412: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27413: LD_ADDR_VAR 0 4
27417: PUSH
27418: LD_VAR 0 2
27422: PPUSH
27423: LD_INT 21
27425: PUSH
27426: LD_INT 3
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PPUSH
27433: CALL_OW 70
27437: ST_TO_ADDR
// if not tmp then
27438: LD_VAR 0 4
27442: NOT
27443: IFFALSE 27447
// exit ;
27445: GO 27505
// for i in tmp do
27447: LD_ADDR_VAR 0 5
27451: PUSH
27452: LD_VAR 0 4
27456: PUSH
27457: FOR_IN
27458: IFFALSE 27493
// if GetBase ( i ) <> base then
27460: LD_VAR 0 5
27464: PPUSH
27465: CALL_OW 274
27469: PUSH
27470: LD_VAR 0 1
27474: NONEQUAL
27475: IFFALSE 27491
// ComLinkToBase ( base , i ) ;
27477: LD_VAR 0 1
27481: PPUSH
27482: LD_VAR 0 5
27486: PPUSH
27487: CALL_OW 169
27491: GO 27457
27493: POP
27494: POP
// result := tmp ;
27495: LD_ADDR_VAR 0 3
27499: PUSH
27500: LD_VAR 0 4
27504: ST_TO_ADDR
// end ;
27505: LD_VAR 0 3
27509: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
// if BuildingStatus ( b ) = bs_build then
27514: LD_VAR 0 2
27518: PPUSH
27519: CALL_OW 461
27523: PUSH
27524: LD_INT 1
27526: EQUAL
27527: IFFALSE 27587
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27529: LD_VAR 0 1
27533: PPUSH
27534: LD_STRING h
27536: PUSH
27537: LD_VAR 0 2
27541: PPUSH
27542: CALL_OW 250
27546: PUSH
27547: LD_VAR 0 2
27551: PPUSH
27552: CALL_OW 251
27556: PUSH
27557: LD_VAR 0 2
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: PPUSH
27583: CALL_OW 446
// end ;
27587: LD_VAR 0 3
27591: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27592: LD_INT 0
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27600: LD_VAR 0 1
27604: NOT
27605: PUSH
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL_OW 263
27615: PUSH
27616: LD_INT 2
27618: EQUAL
27619: NOT
27620: OR
27621: IFFALSE 27625
// exit ;
27623: GO 27941
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27625: LD_ADDR_VAR 0 6
27629: PUSH
27630: LD_INT 22
27632: PUSH
27633: LD_VAR 0 1
27637: PPUSH
27638: CALL_OW 255
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: LD_INT 30
27652: PUSH
27653: LD_INT 36
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 34
27662: PUSH
27663: LD_INT 31
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PPUSH
27679: CALL_OW 69
27683: ST_TO_ADDR
// if not tmp then
27684: LD_VAR 0 6
27688: NOT
27689: IFFALSE 27693
// exit ;
27691: GO 27941
// result := [ ] ;
27693: LD_ADDR_VAR 0 2
27697: PUSH
27698: EMPTY
27699: ST_TO_ADDR
// for i in tmp do
27700: LD_ADDR_VAR 0 3
27704: PUSH
27705: LD_VAR 0 6
27709: PUSH
27710: FOR_IN
27711: IFFALSE 27782
// begin t := UnitsInside ( i ) ;
27713: LD_ADDR_VAR 0 4
27717: PUSH
27718: LD_VAR 0 3
27722: PPUSH
27723: CALL_OW 313
27727: ST_TO_ADDR
// if t then
27728: LD_VAR 0 4
27732: IFFALSE 27780
// for j in t do
27734: LD_ADDR_VAR 0 7
27738: PUSH
27739: LD_VAR 0 4
27743: PUSH
27744: FOR_IN
27745: IFFALSE 27778
// result := Insert ( result , result + 1 , j ) ;
27747: LD_ADDR_VAR 0 2
27751: PUSH
27752: LD_VAR 0 2
27756: PPUSH
27757: LD_VAR 0 2
27761: PUSH
27762: LD_INT 1
27764: PLUS
27765: PPUSH
27766: LD_VAR 0 7
27770: PPUSH
27771: CALL_OW 2
27775: ST_TO_ADDR
27776: GO 27744
27778: POP
27779: POP
// end ;
27780: GO 27710
27782: POP
27783: POP
// if not result then
27784: LD_VAR 0 2
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 27941
// mech := result [ 1 ] ;
27793: LD_ADDR_VAR 0 5
27797: PUSH
27798: LD_VAR 0 2
27802: PUSH
27803: LD_INT 1
27805: ARRAY
27806: ST_TO_ADDR
// if result > 1 then
27807: LD_VAR 0 2
27811: PUSH
27812: LD_INT 1
27814: GREATER
27815: IFFALSE 27927
// for i = 2 to result do
27817: LD_ADDR_VAR 0 3
27821: PUSH
27822: DOUBLE
27823: LD_INT 2
27825: DEC
27826: ST_TO_ADDR
27827: LD_VAR 0 2
27831: PUSH
27832: FOR_TO
27833: IFFALSE 27925
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27835: LD_ADDR_VAR 0 4
27839: PUSH
27840: LD_VAR 0 2
27844: PUSH
27845: LD_VAR 0 3
27849: ARRAY
27850: PPUSH
27851: LD_INT 3
27853: PPUSH
27854: CALL_OW 259
27858: PUSH
27859: LD_VAR 0 2
27863: PUSH
27864: LD_VAR 0 3
27868: ARRAY
27869: PPUSH
27870: CALL_OW 432
27874: MINUS
27875: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27876: LD_VAR 0 4
27880: PUSH
27881: LD_VAR 0 5
27885: PPUSH
27886: LD_INT 3
27888: PPUSH
27889: CALL_OW 259
27893: PUSH
27894: LD_VAR 0 5
27898: PPUSH
27899: CALL_OW 432
27903: MINUS
27904: GREATEREQUAL
27905: IFFALSE 27923
// mech := result [ i ] ;
27907: LD_ADDR_VAR 0 5
27911: PUSH
27912: LD_VAR 0 2
27916: PUSH
27917: LD_VAR 0 3
27921: ARRAY
27922: ST_TO_ADDR
// end ;
27923: GO 27832
27925: POP
27926: POP
// ComLinkTo ( vehicle , mech ) ;
27927: LD_VAR 0 1
27931: PPUSH
27932: LD_VAR 0 5
27936: PPUSH
27937: CALL_OW 135
// end ;
27941: LD_VAR 0 2
27945: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27946: LD_INT 0
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
27952: PPUSH
27953: PPUSH
27954: PPUSH
27955: PPUSH
27956: PPUSH
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
// result := [ ] ;
27961: LD_ADDR_VAR 0 7
27965: PUSH
27966: EMPTY
27967: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 266
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: IN
27988: NOT
27989: IFFALSE 27993
// exit ;
27991: GO 29624
// if name then
27993: LD_VAR 0 3
27997: IFFALSE 28013
// SetBName ( base_dep , name ) ;
27999: LD_VAR 0 1
28003: PPUSH
28004: LD_VAR 0 3
28008: PPUSH
28009: CALL_OW 500
// base := GetBase ( base_dep ) ;
28013: LD_ADDR_VAR 0 15
28017: PUSH
28018: LD_VAR 0 1
28022: PPUSH
28023: CALL_OW 274
28027: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28028: LD_ADDR_VAR 0 16
28032: PUSH
28033: LD_VAR 0 1
28037: PPUSH
28038: CALL_OW 255
28042: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28043: LD_ADDR_VAR 0 17
28047: PUSH
28048: LD_VAR 0 1
28052: PPUSH
28053: CALL_OW 248
28057: ST_TO_ADDR
// if sources then
28058: LD_VAR 0 5
28062: IFFALSE 28109
// for i = 1 to 3 do
28064: LD_ADDR_VAR 0 8
28068: PUSH
28069: DOUBLE
28070: LD_INT 1
28072: DEC
28073: ST_TO_ADDR
28074: LD_INT 3
28076: PUSH
28077: FOR_TO
28078: IFFALSE 28107
// AddResourceType ( base , i , sources [ i ] ) ;
28080: LD_VAR 0 15
28084: PPUSH
28085: LD_VAR 0 8
28089: PPUSH
28090: LD_VAR 0 5
28094: PUSH
28095: LD_VAR 0 8
28099: ARRAY
28100: PPUSH
28101: CALL_OW 276
28105: GO 28077
28107: POP
28108: POP
// buildings := GetBaseBuildings ( base , area ) ;
28109: LD_ADDR_VAR 0 18
28113: PUSH
28114: LD_VAR 0 15
28118: PPUSH
28119: LD_VAR 0 2
28123: PPUSH
28124: CALL 27401 0 2
28128: ST_TO_ADDR
// InitHc ;
28129: CALL_OW 19
// InitUc ;
28133: CALL_OW 18
// uc_side := side ;
28137: LD_ADDR_OWVAR 20
28141: PUSH
28142: LD_VAR 0 16
28146: ST_TO_ADDR
// uc_nation := nation ;
28147: LD_ADDR_OWVAR 21
28151: PUSH
28152: LD_VAR 0 17
28156: ST_TO_ADDR
// if buildings then
28157: LD_VAR 0 18
28161: IFFALSE 29483
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28163: LD_ADDR_VAR 0 19
28167: PUSH
28168: LD_VAR 0 18
28172: PPUSH
28173: LD_INT 2
28175: PUSH
28176: LD_INT 30
28178: PUSH
28179: LD_INT 29
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 30
28188: PUSH
28189: LD_INT 30
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: PPUSH
28201: CALL_OW 72
28205: ST_TO_ADDR
// if tmp then
28206: LD_VAR 0 19
28210: IFFALSE 28258
// for i in tmp do
28212: LD_ADDR_VAR 0 8
28216: PUSH
28217: LD_VAR 0 19
28221: PUSH
28222: FOR_IN
28223: IFFALSE 28256
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28225: LD_VAR 0 8
28229: PPUSH
28230: CALL_OW 250
28234: PPUSH
28235: LD_VAR 0 8
28239: PPUSH
28240: CALL_OW 251
28244: PPUSH
28245: LD_VAR 0 16
28249: PPUSH
28250: CALL_OW 441
28254: GO 28222
28256: POP
28257: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28258: LD_VAR 0 18
28262: PPUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 30
28268: PUSH
28269: LD_INT 32
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 30
28278: PUSH
28279: LD_INT 33
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL_OW 72
28295: IFFALSE 28383
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28297: LD_ADDR_VAR 0 8
28301: PUSH
28302: LD_VAR 0 18
28306: PPUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 30
28312: PUSH
28313: LD_INT 32
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 30
28322: PUSH
28323: LD_INT 33
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: PPUSH
28335: CALL_OW 72
28339: PUSH
28340: FOR_IN
28341: IFFALSE 28381
// begin if not GetBWeapon ( i ) then
28343: LD_VAR 0 8
28347: PPUSH
28348: CALL_OW 269
28352: NOT
28353: IFFALSE 28379
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28355: LD_VAR 0 8
28359: PPUSH
28360: LD_VAR 0 8
28364: PPUSH
28365: LD_VAR 0 2
28369: PPUSH
28370: CALL 29629 0 2
28374: PPUSH
28375: CALL_OW 431
// end ;
28379: GO 28340
28381: POP
28382: POP
// end ; for i = 1 to personel do
28383: LD_ADDR_VAR 0 8
28387: PUSH
28388: DOUBLE
28389: LD_INT 1
28391: DEC
28392: ST_TO_ADDR
28393: LD_VAR 0 6
28397: PUSH
28398: FOR_TO
28399: IFFALSE 29463
// begin if i > 4 then
28401: LD_VAR 0 8
28405: PUSH
28406: LD_INT 4
28408: GREATER
28409: IFFALSE 28413
// break ;
28411: GO 29463
// case i of 1 :
28413: LD_VAR 0 8
28417: PUSH
28418: LD_INT 1
28420: DOUBLE
28421: EQUAL
28422: IFTRUE 28426
28424: GO 28506
28426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28427: LD_ADDR_VAR 0 12
28431: PUSH
28432: LD_VAR 0 18
28436: PPUSH
28437: LD_INT 22
28439: PUSH
28440: LD_VAR 0 16
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 58
28451: PUSH
28452: EMPTY
28453: LIST
28454: PUSH
28455: LD_INT 2
28457: PUSH
28458: LD_INT 30
28460: PUSH
28461: LD_INT 32
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 30
28470: PUSH
28471: LD_INT 4
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 30
28480: PUSH
28481: LD_INT 5
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: PPUSH
28499: CALL_OW 72
28503: ST_TO_ADDR
28504: GO 28728
28506: LD_INT 2
28508: DOUBLE
28509: EQUAL
28510: IFTRUE 28514
28512: GO 28576
28514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28515: LD_ADDR_VAR 0 12
28519: PUSH
28520: LD_VAR 0 18
28524: PPUSH
28525: LD_INT 22
28527: PUSH
28528: LD_VAR 0 16
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 2
28539: PUSH
28540: LD_INT 30
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 30
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PPUSH
28569: CALL_OW 72
28573: ST_TO_ADDR
28574: GO 28728
28576: LD_INT 3
28578: DOUBLE
28579: EQUAL
28580: IFTRUE 28584
28582: GO 28646
28584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28585: LD_ADDR_VAR 0 12
28589: PUSH
28590: LD_VAR 0 18
28594: PPUSH
28595: LD_INT 22
28597: PUSH
28598: LD_VAR 0 16
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: LD_INT 30
28612: PUSH
28613: LD_INT 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 30
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PPUSH
28639: CALL_OW 72
28643: ST_TO_ADDR
28644: GO 28728
28646: LD_INT 4
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 28727
28654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28655: LD_ADDR_VAR 0 12
28659: PUSH
28660: LD_VAR 0 18
28664: PPUSH
28665: LD_INT 22
28667: PUSH
28668: LD_VAR 0 16
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: LD_INT 30
28682: PUSH
28683: LD_INT 6
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 30
28692: PUSH
28693: LD_INT 7
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 30
28702: PUSH
28703: LD_INT 8
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PPUSH
28720: CALL_OW 72
28724: ST_TO_ADDR
28725: GO 28728
28727: POP
// if i = 1 then
28728: LD_VAR 0 8
28732: PUSH
28733: LD_INT 1
28735: EQUAL
28736: IFFALSE 28847
// begin tmp := [ ] ;
28738: LD_ADDR_VAR 0 19
28742: PUSH
28743: EMPTY
28744: ST_TO_ADDR
// for j in f do
28745: LD_ADDR_VAR 0 9
28749: PUSH
28750: LD_VAR 0 12
28754: PUSH
28755: FOR_IN
28756: IFFALSE 28829
// if GetBType ( j ) = b_bunker then
28758: LD_VAR 0 9
28762: PPUSH
28763: CALL_OW 266
28767: PUSH
28768: LD_INT 32
28770: EQUAL
28771: IFFALSE 28798
// tmp := Insert ( tmp , 1 , j ) else
28773: LD_ADDR_VAR 0 19
28777: PUSH
28778: LD_VAR 0 19
28782: PPUSH
28783: LD_INT 1
28785: PPUSH
28786: LD_VAR 0 9
28790: PPUSH
28791: CALL_OW 2
28795: ST_TO_ADDR
28796: GO 28827
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28798: LD_ADDR_VAR 0 19
28802: PUSH
28803: LD_VAR 0 19
28807: PPUSH
28808: LD_VAR 0 19
28812: PUSH
28813: LD_INT 1
28815: PLUS
28816: PPUSH
28817: LD_VAR 0 9
28821: PPUSH
28822: CALL_OW 2
28826: ST_TO_ADDR
28827: GO 28755
28829: POP
28830: POP
// if tmp then
28831: LD_VAR 0 19
28835: IFFALSE 28847
// f := tmp ;
28837: LD_ADDR_VAR 0 12
28841: PUSH
28842: LD_VAR 0 19
28846: ST_TO_ADDR
// end ; x := personel [ i ] ;
28847: LD_ADDR_VAR 0 13
28851: PUSH
28852: LD_VAR 0 6
28856: PUSH
28857: LD_VAR 0 8
28861: ARRAY
28862: ST_TO_ADDR
// if x = - 1 then
28863: LD_VAR 0 13
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: EQUAL
28872: IFFALSE 29081
// begin for j in f do
28874: LD_ADDR_VAR 0 9
28878: PUSH
28879: LD_VAR 0 12
28883: PUSH
28884: FOR_IN
28885: IFFALSE 29077
// repeat InitHc ;
28887: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28891: LD_VAR 0 9
28895: PPUSH
28896: CALL_OW 266
28900: PUSH
28901: LD_INT 5
28903: EQUAL
28904: IFFALSE 28974
// begin if UnitsInside ( j ) < 3 then
28906: LD_VAR 0 9
28910: PPUSH
28911: CALL_OW 313
28915: PUSH
28916: LD_INT 3
28918: LESS
28919: IFFALSE 28955
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28921: LD_INT 0
28923: PPUSH
28924: LD_INT 5
28926: PUSH
28927: LD_INT 8
28929: PUSH
28930: LD_INT 9
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: PUSH
28938: LD_VAR 0 17
28942: ARRAY
28943: PPUSH
28944: LD_VAR 0 4
28948: PPUSH
28949: CALL_OW 380
28953: GO 28972
// PrepareHuman ( false , i , skill ) ;
28955: LD_INT 0
28957: PPUSH
28958: LD_VAR 0 8
28962: PPUSH
28963: LD_VAR 0 4
28967: PPUSH
28968: CALL_OW 380
// end else
28972: GO 28991
// PrepareHuman ( false , i , skill ) ;
28974: LD_INT 0
28976: PPUSH
28977: LD_VAR 0 8
28981: PPUSH
28982: LD_VAR 0 4
28986: PPUSH
28987: CALL_OW 380
// un := CreateHuman ;
28991: LD_ADDR_VAR 0 14
28995: PUSH
28996: CALL_OW 44
29000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29001: LD_ADDR_VAR 0 7
29005: PUSH
29006: LD_VAR 0 7
29010: PPUSH
29011: LD_INT 1
29013: PPUSH
29014: LD_VAR 0 14
29018: PPUSH
29019: CALL_OW 2
29023: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29024: LD_VAR 0 14
29028: PPUSH
29029: LD_VAR 0 9
29033: PPUSH
29034: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29038: LD_VAR 0 9
29042: PPUSH
29043: CALL_OW 313
29047: PUSH
29048: LD_INT 6
29050: EQUAL
29051: PUSH
29052: LD_VAR 0 9
29056: PPUSH
29057: CALL_OW 266
29061: PUSH
29062: LD_INT 32
29064: PUSH
29065: LD_INT 31
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: IN
29072: OR
29073: IFFALSE 28887
29075: GO 28884
29077: POP
29078: POP
// end else
29079: GO 29461
// for j = 1 to x do
29081: LD_ADDR_VAR 0 9
29085: PUSH
29086: DOUBLE
29087: LD_INT 1
29089: DEC
29090: ST_TO_ADDR
29091: LD_VAR 0 13
29095: PUSH
29096: FOR_TO
29097: IFFALSE 29459
// begin InitHc ;
29099: CALL_OW 19
// if not f then
29103: LD_VAR 0 12
29107: NOT
29108: IFFALSE 29197
// begin PrepareHuman ( false , i , skill ) ;
29110: LD_INT 0
29112: PPUSH
29113: LD_VAR 0 8
29117: PPUSH
29118: LD_VAR 0 4
29122: PPUSH
29123: CALL_OW 380
// un := CreateHuman ;
29127: LD_ADDR_VAR 0 14
29131: PUSH
29132: CALL_OW 44
29136: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29137: LD_ADDR_VAR 0 7
29141: PUSH
29142: LD_VAR 0 7
29146: PPUSH
29147: LD_INT 1
29149: PPUSH
29150: LD_VAR 0 14
29154: PPUSH
29155: CALL_OW 2
29159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29160: LD_VAR 0 14
29164: PPUSH
29165: LD_VAR 0 1
29169: PPUSH
29170: CALL_OW 250
29174: PPUSH
29175: LD_VAR 0 1
29179: PPUSH
29180: CALL_OW 251
29184: PPUSH
29185: LD_INT 10
29187: PPUSH
29188: LD_INT 0
29190: PPUSH
29191: CALL_OW 50
// continue ;
29195: GO 29096
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29197: LD_VAR 0 12
29201: PUSH
29202: LD_INT 1
29204: ARRAY
29205: PPUSH
29206: CALL_OW 313
29210: PUSH
29211: LD_VAR 0 12
29215: PUSH
29216: LD_INT 1
29218: ARRAY
29219: PPUSH
29220: CALL_OW 266
29224: PUSH
29225: LD_INT 32
29227: PUSH
29228: LD_INT 31
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: IN
29235: AND
29236: PUSH
29237: LD_VAR 0 12
29241: PUSH
29242: LD_INT 1
29244: ARRAY
29245: PPUSH
29246: CALL_OW 313
29250: PUSH
29251: LD_INT 6
29253: EQUAL
29254: OR
29255: IFFALSE 29275
// f := Delete ( f , 1 ) ;
29257: LD_ADDR_VAR 0 12
29261: PUSH
29262: LD_VAR 0 12
29266: PPUSH
29267: LD_INT 1
29269: PPUSH
29270: CALL_OW 3
29274: ST_TO_ADDR
// if not f then
29275: LD_VAR 0 12
29279: NOT
29280: IFFALSE 29298
// begin x := x + 2 ;
29282: LD_ADDR_VAR 0 13
29286: PUSH
29287: LD_VAR 0 13
29291: PUSH
29292: LD_INT 2
29294: PLUS
29295: ST_TO_ADDR
// continue ;
29296: GO 29096
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29298: LD_VAR 0 12
29302: PUSH
29303: LD_INT 1
29305: ARRAY
29306: PPUSH
29307: CALL_OW 266
29311: PUSH
29312: LD_INT 5
29314: EQUAL
29315: IFFALSE 29389
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29317: LD_VAR 0 12
29321: PUSH
29322: LD_INT 1
29324: ARRAY
29325: PPUSH
29326: CALL_OW 313
29330: PUSH
29331: LD_INT 3
29333: LESS
29334: IFFALSE 29370
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29336: LD_INT 0
29338: PPUSH
29339: LD_INT 5
29341: PUSH
29342: LD_INT 8
29344: PUSH
29345: LD_INT 9
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: PUSH
29353: LD_VAR 0 17
29357: ARRAY
29358: PPUSH
29359: LD_VAR 0 4
29363: PPUSH
29364: CALL_OW 380
29368: GO 29387
// PrepareHuman ( false , i , skill ) ;
29370: LD_INT 0
29372: PPUSH
29373: LD_VAR 0 8
29377: PPUSH
29378: LD_VAR 0 4
29382: PPUSH
29383: CALL_OW 380
// end else
29387: GO 29406
// PrepareHuman ( false , i , skill ) ;
29389: LD_INT 0
29391: PPUSH
29392: LD_VAR 0 8
29396: PPUSH
29397: LD_VAR 0 4
29401: PPUSH
29402: CALL_OW 380
// un := CreateHuman ;
29406: LD_ADDR_VAR 0 14
29410: PUSH
29411: CALL_OW 44
29415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29416: LD_ADDR_VAR 0 7
29420: PUSH
29421: LD_VAR 0 7
29425: PPUSH
29426: LD_INT 1
29428: PPUSH
29429: LD_VAR 0 14
29433: PPUSH
29434: CALL_OW 2
29438: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29439: LD_VAR 0 14
29443: PPUSH
29444: LD_VAR 0 12
29448: PUSH
29449: LD_INT 1
29451: ARRAY
29452: PPUSH
29453: CALL_OW 52
// end ;
29457: GO 29096
29459: POP
29460: POP
// end ;
29461: GO 28398
29463: POP
29464: POP
// result := result ^ buildings ;
29465: LD_ADDR_VAR 0 7
29469: PUSH
29470: LD_VAR 0 7
29474: PUSH
29475: LD_VAR 0 18
29479: ADD
29480: ST_TO_ADDR
// end else
29481: GO 29624
// begin for i = 1 to personel do
29483: LD_ADDR_VAR 0 8
29487: PUSH
29488: DOUBLE
29489: LD_INT 1
29491: DEC
29492: ST_TO_ADDR
29493: LD_VAR 0 6
29497: PUSH
29498: FOR_TO
29499: IFFALSE 29622
// begin if i > 4 then
29501: LD_VAR 0 8
29505: PUSH
29506: LD_INT 4
29508: GREATER
29509: IFFALSE 29513
// break ;
29511: GO 29622
// x := personel [ i ] ;
29513: LD_ADDR_VAR 0 13
29517: PUSH
29518: LD_VAR 0 6
29522: PUSH
29523: LD_VAR 0 8
29527: ARRAY
29528: ST_TO_ADDR
// if x = - 1 then
29529: LD_VAR 0 13
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: EQUAL
29538: IFFALSE 29542
// continue ;
29540: GO 29498
// PrepareHuman ( false , i , skill ) ;
29542: LD_INT 0
29544: PPUSH
29545: LD_VAR 0 8
29549: PPUSH
29550: LD_VAR 0 4
29554: PPUSH
29555: CALL_OW 380
// un := CreateHuman ;
29559: LD_ADDR_VAR 0 14
29563: PUSH
29564: CALL_OW 44
29568: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29569: LD_VAR 0 14
29573: PPUSH
29574: LD_VAR 0 1
29578: PPUSH
29579: CALL_OW 250
29583: PPUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 251
29593: PPUSH
29594: LD_INT 10
29596: PPUSH
29597: LD_INT 0
29599: PPUSH
29600: CALL_OW 50
// result := result ^ un ;
29604: LD_ADDR_VAR 0 7
29608: PUSH
29609: LD_VAR 0 7
29613: PUSH
29614: LD_VAR 0 14
29618: ADD
29619: ST_TO_ADDR
// end ;
29620: GO 29498
29622: POP
29623: POP
// end ; end ;
29624: LD_VAR 0 7
29628: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
29641: PPUSH
29642: PPUSH
29643: PPUSH
29644: PPUSH
29645: PPUSH
29646: PPUSH
// result := false ;
29647: LD_ADDR_VAR 0 3
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29655: LD_VAR 0 1
29659: NOT
29660: PUSH
29661: LD_VAR 0 1
29665: PPUSH
29666: CALL_OW 266
29670: PUSH
29671: LD_INT 32
29673: PUSH
29674: LD_INT 33
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: IN
29681: NOT
29682: OR
29683: IFFALSE 29687
// exit ;
29685: GO 30823
// nat := GetNation ( tower ) ;
29687: LD_ADDR_VAR 0 12
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 248
29701: ST_TO_ADDR
// side := GetSide ( tower ) ;
29702: LD_ADDR_VAR 0 16
29706: PUSH
29707: LD_VAR 0 1
29711: PPUSH
29712: CALL_OW 255
29716: ST_TO_ADDR
// x := GetX ( tower ) ;
29717: LD_ADDR_VAR 0 10
29721: PUSH
29722: LD_VAR 0 1
29726: PPUSH
29727: CALL_OW 250
29731: ST_TO_ADDR
// y := GetY ( tower ) ;
29732: LD_ADDR_VAR 0 11
29736: PUSH
29737: LD_VAR 0 1
29741: PPUSH
29742: CALL_OW 251
29746: ST_TO_ADDR
// if not x or not y then
29747: LD_VAR 0 10
29751: NOT
29752: PUSH
29753: LD_VAR 0 11
29757: NOT
29758: OR
29759: IFFALSE 29763
// exit ;
29761: GO 30823
// weapon := 0 ;
29763: LD_ADDR_VAR 0 18
29767: PUSH
29768: LD_INT 0
29770: ST_TO_ADDR
// fac_list := [ ] ;
29771: LD_ADDR_VAR 0 17
29775: PUSH
29776: EMPTY
29777: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29778: LD_ADDR_VAR 0 6
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 274
29792: PPUSH
29793: LD_VAR 0 2
29797: PPUSH
29798: CALL 27401 0 2
29802: PPUSH
29803: LD_INT 30
29805: PUSH
29806: LD_INT 3
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PPUSH
29813: CALL_OW 72
29817: ST_TO_ADDR
// if not factories then
29818: LD_VAR 0 6
29822: NOT
29823: IFFALSE 29827
// exit ;
29825: GO 30823
// for i in factories do
29827: LD_ADDR_VAR 0 8
29831: PUSH
29832: LD_VAR 0 6
29836: PUSH
29837: FOR_IN
29838: IFFALSE 29863
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29840: LD_ADDR_VAR 0 17
29844: PUSH
29845: LD_VAR 0 17
29849: PUSH
29850: LD_VAR 0 8
29854: PPUSH
29855: CALL_OW 478
29859: UNION
29860: ST_TO_ADDR
29861: GO 29837
29863: POP
29864: POP
// if not fac_list then
29865: LD_VAR 0 17
29869: NOT
29870: IFFALSE 29874
// exit ;
29872: GO 30823
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29874: LD_ADDR_VAR 0 5
29878: PUSH
29879: LD_INT 4
29881: PUSH
29882: LD_INT 5
29884: PUSH
29885: LD_INT 9
29887: PUSH
29888: LD_INT 10
29890: PUSH
29891: LD_INT 6
29893: PUSH
29894: LD_INT 7
29896: PUSH
29897: LD_INT 11
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 27
29911: PUSH
29912: LD_INT 28
29914: PUSH
29915: LD_INT 26
29917: PUSH
29918: LD_INT 30
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 43
29929: PUSH
29930: LD_INT 44
29932: PUSH
29933: LD_INT 46
29935: PUSH
29936: LD_INT 45
29938: PUSH
29939: LD_INT 47
29941: PUSH
29942: LD_INT 49
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: LIST
29957: PUSH
29958: LD_VAR 0 12
29962: ARRAY
29963: ST_TO_ADDR
// for i in list do
29964: LD_ADDR_VAR 0 8
29968: PUSH
29969: LD_VAR 0 5
29973: PUSH
29974: FOR_IN
29975: IFFALSE 30008
// if not i in fac_list then
29977: LD_VAR 0 8
29981: PUSH
29982: LD_VAR 0 17
29986: IN
29987: NOT
29988: IFFALSE 30006
// list := list diff i ;
29990: LD_ADDR_VAR 0 5
29994: PUSH
29995: LD_VAR 0 5
29999: PUSH
30000: LD_VAR 0 8
30004: DIFF
30005: ST_TO_ADDR
30006: GO 29974
30008: POP
30009: POP
// if not list then
30010: LD_VAR 0 5
30014: NOT
30015: IFFALSE 30019
// exit ;
30017: GO 30823
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30019: LD_VAR 0 12
30023: PUSH
30024: LD_INT 3
30026: EQUAL
30027: PUSH
30028: LD_INT 49
30030: PUSH
30031: LD_VAR 0 5
30035: IN
30036: AND
30037: PUSH
30038: LD_INT 31
30040: PPUSH
30041: LD_VAR 0 16
30045: PPUSH
30046: CALL_OW 321
30050: PUSH
30051: LD_INT 2
30053: EQUAL
30054: AND
30055: IFFALSE 30115
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30057: LD_INT 22
30059: PUSH
30060: LD_VAR 0 16
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 35
30071: PUSH
30072: LD_INT 49
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 91
30081: PUSH
30082: LD_VAR 0 1
30086: PUSH
30087: LD_INT 10
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: LIST
30099: PPUSH
30100: CALL_OW 69
30104: NOT
30105: IFFALSE 30115
// weapon := ru_time_lapser ;
30107: LD_ADDR_VAR 0 18
30111: PUSH
30112: LD_INT 49
30114: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30115: LD_VAR 0 12
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: IN
30130: PUSH
30131: LD_INT 11
30133: PUSH
30134: LD_VAR 0 5
30138: IN
30139: PUSH
30140: LD_INT 30
30142: PUSH
30143: LD_VAR 0 5
30147: IN
30148: OR
30149: AND
30150: PUSH
30151: LD_INT 6
30153: PPUSH
30154: LD_VAR 0 16
30158: PPUSH
30159: CALL_OW 321
30163: PUSH
30164: LD_INT 2
30166: EQUAL
30167: AND
30168: IFFALSE 30333
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30170: LD_INT 22
30172: PUSH
30173: LD_VAR 0 16
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: LD_INT 35
30187: PUSH
30188: LD_INT 11
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 35
30197: PUSH
30198: LD_INT 30
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 91
30212: PUSH
30213: LD_VAR 0 1
30217: PUSH
30218: LD_INT 18
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 69
30235: NOT
30236: PUSH
30237: LD_INT 22
30239: PUSH
30240: LD_VAR 0 16
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: LD_INT 30
30254: PUSH
30255: LD_INT 32
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 30
30264: PUSH
30265: LD_INT 33
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 91
30279: PUSH
30280: LD_VAR 0 1
30284: PUSH
30285: LD_INT 12
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: PPUSH
30301: CALL_OW 69
30305: PUSH
30306: LD_INT 2
30308: GREATER
30309: AND
30310: IFFALSE 30333
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30312: LD_ADDR_VAR 0 18
30316: PUSH
30317: LD_INT 11
30319: PUSH
30320: LD_INT 30
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_VAR 0 12
30331: ARRAY
30332: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30333: LD_VAR 0 18
30337: NOT
30338: PUSH
30339: LD_INT 40
30341: PPUSH
30342: LD_VAR 0 16
30346: PPUSH
30347: CALL_OW 321
30351: PUSH
30352: LD_INT 2
30354: EQUAL
30355: AND
30356: PUSH
30357: LD_INT 7
30359: PUSH
30360: LD_VAR 0 5
30364: IN
30365: PUSH
30366: LD_INT 28
30368: PUSH
30369: LD_VAR 0 5
30373: IN
30374: OR
30375: PUSH
30376: LD_INT 45
30378: PUSH
30379: LD_VAR 0 5
30383: IN
30384: OR
30385: AND
30386: IFFALSE 30640
// begin hex := GetHexInfo ( x , y ) ;
30388: LD_ADDR_VAR 0 4
30392: PUSH
30393: LD_VAR 0 10
30397: PPUSH
30398: LD_VAR 0 11
30402: PPUSH
30403: CALL_OW 546
30407: ST_TO_ADDR
// if hex [ 1 ] then
30408: LD_VAR 0 4
30412: PUSH
30413: LD_INT 1
30415: ARRAY
30416: IFFALSE 30420
// exit ;
30418: GO 30823
// height := hex [ 2 ] ;
30420: LD_ADDR_VAR 0 15
30424: PUSH
30425: LD_VAR 0 4
30429: PUSH
30430: LD_INT 2
30432: ARRAY
30433: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30434: LD_ADDR_VAR 0 14
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 5
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: ST_TO_ADDR
// for i in tmp do
30457: LD_ADDR_VAR 0 8
30461: PUSH
30462: LD_VAR 0 14
30466: PUSH
30467: FOR_IN
30468: IFFALSE 30638
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_VAR 0 10
30479: PPUSH
30480: LD_VAR 0 8
30484: PPUSH
30485: LD_INT 5
30487: PPUSH
30488: CALL_OW 272
30492: PUSH
30493: LD_VAR 0 11
30497: PPUSH
30498: LD_VAR 0 8
30502: PPUSH
30503: LD_INT 5
30505: PPUSH
30506: CALL_OW 273
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30515: LD_VAR 0 9
30519: PUSH
30520: LD_INT 1
30522: ARRAY
30523: PPUSH
30524: LD_VAR 0 9
30528: PUSH
30529: LD_INT 2
30531: ARRAY
30532: PPUSH
30533: CALL_OW 488
30537: IFFALSE 30636
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30539: LD_ADDR_VAR 0 4
30543: PUSH
30544: LD_VAR 0 9
30548: PUSH
30549: LD_INT 1
30551: ARRAY
30552: PPUSH
30553: LD_VAR 0 9
30557: PUSH
30558: LD_INT 2
30560: ARRAY
30561: PPUSH
30562: CALL_OW 546
30566: ST_TO_ADDR
// if hex [ 1 ] then
30567: LD_VAR 0 4
30571: PUSH
30572: LD_INT 1
30574: ARRAY
30575: IFFALSE 30579
// continue ;
30577: GO 30467
// h := hex [ 2 ] ;
30579: LD_ADDR_VAR 0 13
30583: PUSH
30584: LD_VAR 0 4
30588: PUSH
30589: LD_INT 2
30591: ARRAY
30592: ST_TO_ADDR
// if h + 7 < height then
30593: LD_VAR 0 13
30597: PUSH
30598: LD_INT 7
30600: PLUS
30601: PUSH
30602: LD_VAR 0 15
30606: LESS
30607: IFFALSE 30636
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30609: LD_ADDR_VAR 0 18
30613: PUSH
30614: LD_INT 7
30616: PUSH
30617: LD_INT 28
30619: PUSH
30620: LD_INT 45
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: PUSH
30628: LD_VAR 0 12
30632: ARRAY
30633: ST_TO_ADDR
// break ;
30634: GO 30638
// end ; end ; end ;
30636: GO 30467
30638: POP
30639: POP
// end ; if not weapon then
30640: LD_VAR 0 18
30644: NOT
30645: IFFALSE 30705
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30647: LD_ADDR_VAR 0 5
30651: PUSH
30652: LD_VAR 0 5
30656: PUSH
30657: LD_INT 11
30659: PUSH
30660: LD_INT 30
30662: PUSH
30663: LD_INT 49
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: DIFF
30671: ST_TO_ADDR
// if not list then
30672: LD_VAR 0 5
30676: NOT
30677: IFFALSE 30681
// exit ;
30679: GO 30823
// weapon := list [ rand ( 1 , list ) ] ;
30681: LD_ADDR_VAR 0 18
30685: PUSH
30686: LD_VAR 0 5
30690: PUSH
30691: LD_INT 1
30693: PPUSH
30694: LD_VAR 0 5
30698: PPUSH
30699: CALL_OW 12
30703: ARRAY
30704: ST_TO_ADDR
// end ; if weapon then
30705: LD_VAR 0 18
30709: IFFALSE 30823
// begin tmp := CostOfWeapon ( weapon ) ;
30711: LD_ADDR_VAR 0 14
30715: PUSH
30716: LD_VAR 0 18
30720: PPUSH
30721: CALL_OW 451
30725: ST_TO_ADDR
// j := GetBase ( tower ) ;
30726: LD_ADDR_VAR 0 9
30730: PUSH
30731: LD_VAR 0 1
30735: PPUSH
30736: CALL_OW 274
30740: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30741: LD_VAR 0 9
30745: PPUSH
30746: LD_INT 1
30748: PPUSH
30749: CALL_OW 275
30753: PUSH
30754: LD_VAR 0 14
30758: PUSH
30759: LD_INT 1
30761: ARRAY
30762: GREATEREQUAL
30763: PUSH
30764: LD_VAR 0 9
30768: PPUSH
30769: LD_INT 2
30771: PPUSH
30772: CALL_OW 275
30776: PUSH
30777: LD_VAR 0 14
30781: PUSH
30782: LD_INT 2
30784: ARRAY
30785: GREATEREQUAL
30786: AND
30787: PUSH
30788: LD_VAR 0 9
30792: PPUSH
30793: LD_INT 3
30795: PPUSH
30796: CALL_OW 275
30800: PUSH
30801: LD_VAR 0 14
30805: PUSH
30806: LD_INT 3
30808: ARRAY
30809: GREATEREQUAL
30810: AND
30811: IFFALSE 30823
// result := weapon ;
30813: LD_ADDR_VAR 0 3
30817: PUSH
30818: LD_VAR 0 18
30822: ST_TO_ADDR
// end ; end ;
30823: LD_VAR 0 3
30827: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30828: LD_INT 0
30830: PPUSH
30831: PPUSH
// result := true ;
30832: LD_ADDR_VAR 0 3
30836: PUSH
30837: LD_INT 1
30839: ST_TO_ADDR
// if array1 = array2 then
30840: LD_VAR 0 1
30844: PUSH
30845: LD_VAR 0 2
30849: EQUAL
30850: IFFALSE 30910
// begin for i = 1 to array1 do
30852: LD_ADDR_VAR 0 4
30856: PUSH
30857: DOUBLE
30858: LD_INT 1
30860: DEC
30861: ST_TO_ADDR
30862: LD_VAR 0 1
30866: PUSH
30867: FOR_TO
30868: IFFALSE 30906
// if array1 [ i ] <> array2 [ i ] then
30870: LD_VAR 0 1
30874: PUSH
30875: LD_VAR 0 4
30879: ARRAY
30880: PUSH
30881: LD_VAR 0 2
30885: PUSH
30886: LD_VAR 0 4
30890: ARRAY
30891: NONEQUAL
30892: IFFALSE 30904
// begin result := false ;
30894: LD_ADDR_VAR 0 3
30898: PUSH
30899: LD_INT 0
30901: ST_TO_ADDR
// break ;
30902: GO 30906
// end ;
30904: GO 30867
30906: POP
30907: POP
// end else
30908: GO 30918
// result := false ;
30910: LD_ADDR_VAR 0 3
30914: PUSH
30915: LD_INT 0
30917: ST_TO_ADDR
// end ;
30918: LD_VAR 0 3
30922: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30923: LD_INT 0
30925: PPUSH
30926: PPUSH
30927: PPUSH
// pom := GetBase ( fac ) ;
30928: LD_ADDR_VAR 0 5
30932: PUSH
30933: LD_VAR 0 1
30937: PPUSH
30938: CALL_OW 274
30942: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30943: LD_ADDR_VAR 0 4
30947: PUSH
30948: LD_VAR 0 2
30952: PUSH
30953: LD_INT 1
30955: ARRAY
30956: PPUSH
30957: LD_VAR 0 2
30961: PUSH
30962: LD_INT 2
30964: ARRAY
30965: PPUSH
30966: LD_VAR 0 2
30970: PUSH
30971: LD_INT 3
30973: ARRAY
30974: PPUSH
30975: LD_VAR 0 2
30979: PUSH
30980: LD_INT 4
30982: ARRAY
30983: PPUSH
30984: CALL_OW 449
30988: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_VAR 0 5
30998: PPUSH
30999: LD_INT 1
31001: PPUSH
31002: CALL_OW 275
31006: PUSH
31007: LD_VAR 0 4
31011: PUSH
31012: LD_INT 1
31014: ARRAY
31015: GREATEREQUAL
31016: PUSH
31017: LD_VAR 0 5
31021: PPUSH
31022: LD_INT 2
31024: PPUSH
31025: CALL_OW 275
31029: PUSH
31030: LD_VAR 0 4
31034: PUSH
31035: LD_INT 2
31037: ARRAY
31038: GREATEREQUAL
31039: AND
31040: PUSH
31041: LD_VAR 0 5
31045: PPUSH
31046: LD_INT 3
31048: PPUSH
31049: CALL_OW 275
31053: PUSH
31054: LD_VAR 0 4
31058: PUSH
31059: LD_INT 3
31061: ARRAY
31062: GREATEREQUAL
31063: AND
31064: ST_TO_ADDR
// end ;
31065: LD_VAR 0 3
31069: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
// pom := GetBase ( building ) ;
31076: LD_ADDR_VAR 0 3
31080: PUSH
31081: LD_VAR 0 1
31085: PPUSH
31086: CALL_OW 274
31090: ST_TO_ADDR
// if not pom then
31091: LD_VAR 0 3
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31270
// btype := GetBType ( building ) ;
31100: LD_ADDR_VAR 0 5
31104: PUSH
31105: LD_VAR 0 1
31109: PPUSH
31110: CALL_OW 266
31114: ST_TO_ADDR
// if btype = b_armoury then
31115: LD_VAR 0 5
31119: PUSH
31120: LD_INT 4
31122: EQUAL
31123: IFFALSE 31133
// btype := b_barracks ;
31125: LD_ADDR_VAR 0 5
31129: PUSH
31130: LD_INT 5
31132: ST_TO_ADDR
// if btype = b_depot then
31133: LD_VAR 0 5
31137: PUSH
31138: LD_INT 0
31140: EQUAL
31141: IFFALSE 31151
// btype := b_warehouse ;
31143: LD_ADDR_VAR 0 5
31147: PUSH
31148: LD_INT 1
31150: ST_TO_ADDR
// if btype = b_workshop then
31151: LD_VAR 0 5
31155: PUSH
31156: LD_INT 2
31158: EQUAL
31159: IFFALSE 31169
// btype := b_factory ;
31161: LD_ADDR_VAR 0 5
31165: PUSH
31166: LD_INT 3
31168: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31169: LD_ADDR_VAR 0 4
31173: PUSH
31174: LD_VAR 0 5
31178: PPUSH
31179: LD_VAR 0 1
31183: PPUSH
31184: CALL_OW 248
31188: PPUSH
31189: CALL_OW 450
31193: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31194: LD_ADDR_VAR 0 2
31198: PUSH
31199: LD_VAR 0 3
31203: PPUSH
31204: LD_INT 1
31206: PPUSH
31207: CALL_OW 275
31211: PUSH
31212: LD_VAR 0 4
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: GREATEREQUAL
31221: PUSH
31222: LD_VAR 0 3
31226: PPUSH
31227: LD_INT 2
31229: PPUSH
31230: CALL_OW 275
31234: PUSH
31235: LD_VAR 0 4
31239: PUSH
31240: LD_INT 2
31242: ARRAY
31243: GREATEREQUAL
31244: AND
31245: PUSH
31246: LD_VAR 0 3
31250: PPUSH
31251: LD_INT 3
31253: PPUSH
31254: CALL_OW 275
31258: PUSH
31259: LD_VAR 0 4
31263: PUSH
31264: LD_INT 3
31266: ARRAY
31267: GREATEREQUAL
31268: AND
31269: ST_TO_ADDR
// end ;
31270: LD_VAR 0 2
31274: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31275: LD_INT 0
31277: PPUSH
31278: PPUSH
31279: PPUSH
// pom := GetBase ( building ) ;
31280: LD_ADDR_VAR 0 4
31284: PUSH
31285: LD_VAR 0 1
31289: PPUSH
31290: CALL_OW 274
31294: ST_TO_ADDR
// if not pom then
31295: LD_VAR 0 4
31299: NOT
31300: IFFALSE 31304
// exit ;
31302: GO 31405
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31304: LD_ADDR_VAR 0 5
31308: PUSH
31309: LD_VAR 0 2
31313: PPUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 248
31323: PPUSH
31324: CALL_OW 450
31328: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_VAR 0 4
31338: PPUSH
31339: LD_INT 1
31341: PPUSH
31342: CALL_OW 275
31346: PUSH
31347: LD_VAR 0 5
31351: PUSH
31352: LD_INT 1
31354: ARRAY
31355: GREATEREQUAL
31356: PUSH
31357: LD_VAR 0 4
31361: PPUSH
31362: LD_INT 2
31364: PPUSH
31365: CALL_OW 275
31369: PUSH
31370: LD_VAR 0 5
31374: PUSH
31375: LD_INT 2
31377: ARRAY
31378: GREATEREQUAL
31379: AND
31380: PUSH
31381: LD_VAR 0 4
31385: PPUSH
31386: LD_INT 3
31388: PPUSH
31389: CALL_OW 275
31393: PUSH
31394: LD_VAR 0 5
31398: PUSH
31399: LD_INT 3
31401: ARRAY
31402: GREATEREQUAL
31403: AND
31404: ST_TO_ADDR
// end ;
31405: LD_VAR 0 3
31409: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
31419: PPUSH
31420: PPUSH
31421: PPUSH
// result := false ;
31422: LD_ADDR_VAR 0 6
31426: PUSH
31427: LD_INT 0
31429: ST_TO_ADDR
// if not base or not btype or not x or not y then
31430: LD_VAR 0 1
31434: NOT
31435: PUSH
31436: LD_VAR 0 2
31440: NOT
31441: OR
31442: PUSH
31443: LD_VAR 0 3
31447: NOT
31448: OR
31449: PUSH
31450: LD_VAR 0 4
31454: NOT
31455: OR
31456: IFFALSE 31460
// exit ;
31458: GO 32069
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31460: LD_ADDR_VAR 0 12
31464: PUSH
31465: LD_VAR 0 2
31469: PPUSH
31470: LD_VAR 0 3
31474: PPUSH
31475: LD_VAR 0 4
31479: PPUSH
31480: LD_VAR 0 5
31484: PPUSH
31485: LD_VAR 0 1
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: PPUSH
31494: CALL_OW 248
31498: PPUSH
31499: LD_INT 0
31501: PPUSH
31502: CALL 32906 0 6
31506: ST_TO_ADDR
// if not hexes then
31507: LD_VAR 0 12
31511: NOT
31512: IFFALSE 31516
// exit ;
31514: GO 32069
// for i = 1 to hexes do
31516: LD_ADDR_VAR 0 7
31520: PUSH
31521: DOUBLE
31522: LD_INT 1
31524: DEC
31525: ST_TO_ADDR
31526: LD_VAR 0 12
31530: PUSH
31531: FOR_TO
31532: IFFALSE 32067
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31534: LD_ADDR_VAR 0 11
31538: PUSH
31539: LD_VAR 0 12
31543: PUSH
31544: LD_VAR 0 7
31548: ARRAY
31549: PUSH
31550: LD_INT 1
31552: ARRAY
31553: PPUSH
31554: LD_VAR 0 12
31558: PUSH
31559: LD_VAR 0 7
31563: ARRAY
31564: PUSH
31565: LD_INT 2
31567: ARRAY
31568: PPUSH
31569: CALL_OW 428
31573: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31574: LD_VAR 0 12
31578: PUSH
31579: LD_VAR 0 7
31583: ARRAY
31584: PUSH
31585: LD_INT 1
31587: ARRAY
31588: PPUSH
31589: LD_VAR 0 12
31593: PUSH
31594: LD_VAR 0 7
31598: ARRAY
31599: PUSH
31600: LD_INT 2
31602: ARRAY
31603: PPUSH
31604: CALL_OW 351
31608: PUSH
31609: LD_VAR 0 12
31613: PUSH
31614: LD_VAR 0 7
31618: ARRAY
31619: PUSH
31620: LD_INT 1
31622: ARRAY
31623: PPUSH
31624: LD_VAR 0 12
31628: PUSH
31629: LD_VAR 0 7
31633: ARRAY
31634: PUSH
31635: LD_INT 2
31637: ARRAY
31638: PPUSH
31639: CALL_OW 488
31643: NOT
31644: OR
31645: PUSH
31646: LD_VAR 0 11
31650: PPUSH
31651: CALL_OW 247
31655: PUSH
31656: LD_INT 3
31658: EQUAL
31659: OR
31660: IFFALSE 31666
// exit ;
31662: POP
31663: POP
31664: GO 32069
// if not tmp or not tmp in base then
31666: LD_VAR 0 11
31670: NOT
31671: PUSH
31672: LD_VAR 0 11
31676: PUSH
31677: LD_VAR 0 1
31681: IN
31682: NOT
31683: OR
31684: IFFALSE 31688
// continue ;
31686: GO 31531
// result := true ;
31688: LD_ADDR_VAR 0 6
31692: PUSH
31693: LD_INT 1
31695: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31696: LD_ADDR_VAR 0 15
31700: PUSH
31701: LD_VAR 0 1
31705: PPUSH
31706: LD_INT 22
31708: PUSH
31709: LD_VAR 0 11
31713: PPUSH
31714: CALL_OW 255
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: LD_INT 30
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 30
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PPUSH
31755: CALL_OW 72
31759: ST_TO_ADDR
// if dep then
31760: LD_VAR 0 15
31764: IFFALSE 31900
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31766: LD_ADDR_VAR 0 14
31770: PUSH
31771: LD_VAR 0 15
31775: PUSH
31776: LD_INT 1
31778: ARRAY
31779: PPUSH
31780: CALL_OW 250
31784: PPUSH
31785: LD_VAR 0 15
31789: PUSH
31790: LD_INT 1
31792: ARRAY
31793: PPUSH
31794: CALL_OW 254
31798: PPUSH
31799: LD_INT 5
31801: PPUSH
31802: CALL_OW 272
31806: PUSH
31807: LD_VAR 0 15
31811: PUSH
31812: LD_INT 1
31814: ARRAY
31815: PPUSH
31816: CALL_OW 251
31820: PPUSH
31821: LD_VAR 0 15
31825: PUSH
31826: LD_INT 1
31828: ARRAY
31829: PPUSH
31830: CALL_OW 254
31834: PPUSH
31835: LD_INT 5
31837: PPUSH
31838: CALL_OW 273
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31847: LD_VAR 0 14
31851: PUSH
31852: LD_INT 1
31854: ARRAY
31855: PPUSH
31856: LD_VAR 0 14
31860: PUSH
31861: LD_INT 2
31863: ARRAY
31864: PPUSH
31865: CALL_OW 488
31869: IFFALSE 31900
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31871: LD_VAR 0 11
31875: PPUSH
31876: LD_VAR 0 14
31880: PUSH
31881: LD_INT 1
31883: ARRAY
31884: PPUSH
31885: LD_VAR 0 14
31889: PUSH
31890: LD_INT 2
31892: ARRAY
31893: PPUSH
31894: CALL_OW 111
// continue ;
31898: GO 31531
// end ; end ; r := GetDir ( tmp ) ;
31900: LD_ADDR_VAR 0 13
31904: PUSH
31905: LD_VAR 0 11
31909: PPUSH
31910: CALL_OW 254
31914: ST_TO_ADDR
// if r = 5 then
31915: LD_VAR 0 13
31919: PUSH
31920: LD_INT 5
31922: EQUAL
31923: IFFALSE 31933
// r := 0 ;
31925: LD_ADDR_VAR 0 13
31929: PUSH
31930: LD_INT 0
31932: ST_TO_ADDR
// for j = r to 5 do
31933: LD_ADDR_VAR 0 8
31937: PUSH
31938: DOUBLE
31939: LD_VAR 0 13
31943: DEC
31944: ST_TO_ADDR
31945: LD_INT 5
31947: PUSH
31948: FOR_TO
31949: IFFALSE 32063
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31951: LD_ADDR_VAR 0 9
31955: PUSH
31956: LD_VAR 0 11
31960: PPUSH
31961: CALL_OW 250
31965: PPUSH
31966: LD_VAR 0 8
31970: PPUSH
31971: LD_INT 2
31973: PPUSH
31974: CALL_OW 272
31978: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31979: LD_ADDR_VAR 0 10
31983: PUSH
31984: LD_VAR 0 11
31988: PPUSH
31989: CALL_OW 251
31993: PPUSH
31994: LD_VAR 0 8
31998: PPUSH
31999: LD_INT 2
32001: PPUSH
32002: CALL_OW 273
32006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32007: LD_VAR 0 9
32011: PPUSH
32012: LD_VAR 0 10
32016: PPUSH
32017: CALL_OW 488
32021: PUSH
32022: LD_VAR 0 9
32026: PPUSH
32027: LD_VAR 0 10
32031: PPUSH
32032: CALL_OW 428
32036: NOT
32037: AND
32038: IFFALSE 32061
// begin ComMoveXY ( tmp , _x , _y ) ;
32040: LD_VAR 0 11
32044: PPUSH
32045: LD_VAR 0 9
32049: PPUSH
32050: LD_VAR 0 10
32054: PPUSH
32055: CALL_OW 111
// break ;
32059: GO 32063
// end ; end ;
32061: GO 31948
32063: POP
32064: POP
// end ;
32065: GO 31531
32067: POP
32068: POP
// end ;
32069: LD_VAR 0 6
32073: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32074: LD_INT 0
32076: PPUSH
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
// result := false ;
32086: LD_ADDR_VAR 0 6
32090: PUSH
32091: LD_INT 0
32093: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32094: LD_VAR 0 1
32098: NOT
32099: PUSH
32100: LD_VAR 0 1
32104: PPUSH
32105: CALL_OW 266
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: IN
32120: NOT
32121: OR
32122: PUSH
32123: LD_VAR 0 2
32127: NOT
32128: OR
32129: PUSH
32130: LD_VAR 0 5
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: LD_INT 4
32149: PUSH
32150: LD_INT 5
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: IN
32161: NOT
32162: OR
32163: PUSH
32164: LD_VAR 0 3
32168: PPUSH
32169: LD_VAR 0 4
32173: PPUSH
32174: CALL_OW 488
32178: NOT
32179: OR
32180: IFFALSE 32184
// exit ;
32182: GO 32901
// pom := GetBase ( depot ) ;
32184: LD_ADDR_VAR 0 10
32188: PUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 274
32198: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32199: LD_ADDR_VAR 0 11
32203: PUSH
32204: LD_VAR 0 2
32208: PPUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 248
32218: PPUSH
32219: CALL_OW 450
32223: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32224: LD_VAR 0 10
32228: PPUSH
32229: LD_INT 1
32231: PPUSH
32232: CALL_OW 275
32236: PUSH
32237: LD_VAR 0 11
32241: PUSH
32242: LD_INT 1
32244: ARRAY
32245: GREATEREQUAL
32246: PUSH
32247: LD_VAR 0 10
32251: PPUSH
32252: LD_INT 2
32254: PPUSH
32255: CALL_OW 275
32259: PUSH
32260: LD_VAR 0 11
32264: PUSH
32265: LD_INT 2
32267: ARRAY
32268: GREATEREQUAL
32269: AND
32270: PUSH
32271: LD_VAR 0 10
32275: PPUSH
32276: LD_INT 3
32278: PPUSH
32279: CALL_OW 275
32283: PUSH
32284: LD_VAR 0 11
32288: PUSH
32289: LD_INT 3
32291: ARRAY
32292: GREATEREQUAL
32293: AND
32294: NOT
32295: IFFALSE 32299
// exit ;
32297: GO 32901
// if GetBType ( depot ) = b_depot then
32299: LD_VAR 0 1
32303: PPUSH
32304: CALL_OW 266
32308: PUSH
32309: LD_INT 0
32311: EQUAL
32312: IFFALSE 32324
// dist := 28 else
32314: LD_ADDR_VAR 0 14
32318: PUSH
32319: LD_INT 28
32321: ST_TO_ADDR
32322: GO 32332
// dist := 36 ;
32324: LD_ADDR_VAR 0 14
32328: PUSH
32329: LD_INT 36
32331: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32332: LD_VAR 0 1
32336: PPUSH
32337: LD_VAR 0 3
32341: PPUSH
32342: LD_VAR 0 4
32346: PPUSH
32347: CALL_OW 297
32351: PUSH
32352: LD_VAR 0 14
32356: GREATER
32357: IFFALSE 32361
// exit ;
32359: GO 32901
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32361: LD_ADDR_VAR 0 12
32365: PUSH
32366: LD_VAR 0 2
32370: PPUSH
32371: LD_VAR 0 3
32375: PPUSH
32376: LD_VAR 0 4
32380: PPUSH
32381: LD_VAR 0 5
32385: PPUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 248
32395: PPUSH
32396: LD_INT 0
32398: PPUSH
32399: CALL 32906 0 6
32403: ST_TO_ADDR
// if not hexes then
32404: LD_VAR 0 12
32408: NOT
32409: IFFALSE 32413
// exit ;
32411: GO 32901
// hex := GetHexInfo ( x , y ) ;
32413: LD_ADDR_VAR 0 15
32417: PUSH
32418: LD_VAR 0 3
32422: PPUSH
32423: LD_VAR 0 4
32427: PPUSH
32428: CALL_OW 546
32432: ST_TO_ADDR
// if hex [ 1 ] then
32433: LD_VAR 0 15
32437: PUSH
32438: LD_INT 1
32440: ARRAY
32441: IFFALSE 32445
// exit ;
32443: GO 32901
// height := hex [ 2 ] ;
32445: LD_ADDR_VAR 0 13
32449: PUSH
32450: LD_VAR 0 15
32454: PUSH
32455: LD_INT 2
32457: ARRAY
32458: ST_TO_ADDR
// for i = 1 to hexes do
32459: LD_ADDR_VAR 0 7
32463: PUSH
32464: DOUBLE
32465: LD_INT 1
32467: DEC
32468: ST_TO_ADDR
32469: LD_VAR 0 12
32473: PUSH
32474: FOR_TO
32475: IFFALSE 32805
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32477: LD_VAR 0 12
32481: PUSH
32482: LD_VAR 0 7
32486: ARRAY
32487: PUSH
32488: LD_INT 1
32490: ARRAY
32491: PPUSH
32492: LD_VAR 0 12
32496: PUSH
32497: LD_VAR 0 7
32501: ARRAY
32502: PUSH
32503: LD_INT 2
32505: ARRAY
32506: PPUSH
32507: CALL_OW 488
32511: NOT
32512: PUSH
32513: LD_VAR 0 12
32517: PUSH
32518: LD_VAR 0 7
32522: ARRAY
32523: PUSH
32524: LD_INT 1
32526: ARRAY
32527: PPUSH
32528: LD_VAR 0 12
32532: PUSH
32533: LD_VAR 0 7
32537: ARRAY
32538: PUSH
32539: LD_INT 2
32541: ARRAY
32542: PPUSH
32543: CALL_OW 428
32547: PUSH
32548: LD_INT 0
32550: GREATER
32551: OR
32552: PUSH
32553: LD_VAR 0 12
32557: PUSH
32558: LD_VAR 0 7
32562: ARRAY
32563: PUSH
32564: LD_INT 1
32566: ARRAY
32567: PPUSH
32568: LD_VAR 0 12
32572: PUSH
32573: LD_VAR 0 7
32577: ARRAY
32578: PUSH
32579: LD_INT 2
32581: ARRAY
32582: PPUSH
32583: CALL_OW 351
32587: OR
32588: IFFALSE 32594
// exit ;
32590: POP
32591: POP
32592: GO 32901
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32594: LD_ADDR_VAR 0 8
32598: PUSH
32599: LD_VAR 0 12
32603: PUSH
32604: LD_VAR 0 7
32608: ARRAY
32609: PUSH
32610: LD_INT 1
32612: ARRAY
32613: PPUSH
32614: LD_VAR 0 12
32618: PUSH
32619: LD_VAR 0 7
32623: ARRAY
32624: PUSH
32625: LD_INT 2
32627: ARRAY
32628: PPUSH
32629: CALL_OW 546
32633: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32634: LD_VAR 0 8
32638: PUSH
32639: LD_INT 1
32641: ARRAY
32642: PUSH
32643: LD_VAR 0 8
32647: PUSH
32648: LD_INT 2
32650: ARRAY
32651: PUSH
32652: LD_VAR 0 13
32656: PUSH
32657: LD_INT 2
32659: PLUS
32660: GREATER
32661: OR
32662: PUSH
32663: LD_VAR 0 8
32667: PUSH
32668: LD_INT 2
32670: ARRAY
32671: PUSH
32672: LD_VAR 0 13
32676: PUSH
32677: LD_INT 2
32679: MINUS
32680: LESS
32681: OR
32682: PUSH
32683: LD_VAR 0 8
32687: PUSH
32688: LD_INT 3
32690: ARRAY
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 8
32697: PUSH
32698: LD_INT 9
32700: PUSH
32701: LD_INT 10
32703: PUSH
32704: LD_INT 11
32706: PUSH
32707: LD_INT 12
32709: PUSH
32710: LD_INT 13
32712: PUSH
32713: LD_INT 16
32715: PUSH
32716: LD_INT 17
32718: PUSH
32719: LD_INT 18
32721: PUSH
32722: LD_INT 19
32724: PUSH
32725: LD_INT 20
32727: PUSH
32728: LD_INT 21
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: IN
32746: NOT
32747: OR
32748: PUSH
32749: LD_VAR 0 8
32753: PUSH
32754: LD_INT 5
32756: ARRAY
32757: NOT
32758: OR
32759: PUSH
32760: LD_VAR 0 8
32764: PUSH
32765: LD_INT 6
32767: ARRAY
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 7
32777: PUSH
32778: LD_INT 9
32780: PUSH
32781: LD_INT 10
32783: PUSH
32784: LD_INT 11
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: IN
32795: NOT
32796: OR
32797: IFFALSE 32803
// exit ;
32799: POP
32800: POP
32801: GO 32901
// end ;
32803: GO 32474
32805: POP
32806: POP
// side := GetSide ( depot ) ;
32807: LD_ADDR_VAR 0 9
32811: PUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 255
32821: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32822: LD_VAR 0 9
32826: PPUSH
32827: LD_VAR 0 3
32831: PPUSH
32832: LD_VAR 0 4
32836: PPUSH
32837: LD_INT 20
32839: PPUSH
32840: CALL 25555 0 4
32844: PUSH
32845: LD_INT 4
32847: ARRAY
32848: IFFALSE 32852
// exit ;
32850: GO 32901
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32852: LD_VAR 0 2
32856: PUSH
32857: LD_INT 29
32859: PUSH
32860: LD_INT 30
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: IN
32867: PUSH
32868: LD_VAR 0 3
32872: PPUSH
32873: LD_VAR 0 4
32877: PPUSH
32878: LD_VAR 0 9
32882: PPUSH
32883: CALL_OW 440
32887: NOT
32888: AND
32889: IFFALSE 32893
// exit ;
32891: GO 32901
// result := true ;
32893: LD_ADDR_VAR 0 6
32897: PUSH
32898: LD_INT 1
32900: ST_TO_ADDR
// end ;
32901: LD_VAR 0 6
32905: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32906: LD_INT 0
32908: PPUSH
32909: PPUSH
32910: PPUSH
32911: PPUSH
32912: PPUSH
32913: PPUSH
32914: PPUSH
32915: PPUSH
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
32931: PPUSH
32932: PPUSH
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
32958: PPUSH
32959: PPUSH
32960: PPUSH
32961: PPUSH
32962: PPUSH
32963: PPUSH
32964: PPUSH
32965: PPUSH
// result = [ ] ;
32966: LD_ADDR_VAR 0 7
32970: PUSH
32971: EMPTY
32972: ST_TO_ADDR
// temp_list = [ ] ;
32973: LD_ADDR_VAR 0 9
32977: PUSH
32978: EMPTY
32979: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32980: LD_VAR 0 4
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 3
32996: PUSH
32997: LD_INT 4
32999: PUSH
33000: LD_INT 5
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: IN
33011: NOT
33012: PUSH
33013: LD_VAR 0 1
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: IN
33028: PUSH
33029: LD_VAR 0 5
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: IN
33048: NOT
33049: AND
33050: OR
33051: IFFALSE 33055
// exit ;
33053: GO 51446
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33055: LD_VAR 0 1
33059: PUSH
33060: LD_INT 6
33062: PUSH
33063: LD_INT 7
33065: PUSH
33066: LD_INT 8
33068: PUSH
33069: LD_INT 13
33071: PUSH
33072: LD_INT 12
33074: PUSH
33075: LD_INT 15
33077: PUSH
33078: LD_INT 11
33080: PUSH
33081: LD_INT 14
33083: PUSH
33084: LD_INT 10
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: IN
33098: IFFALSE 33108
// btype = b_lab ;
33100: LD_ADDR_VAR 0 1
33104: PUSH
33105: LD_INT 6
33107: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33108: LD_VAR 0 6
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: IN
33127: NOT
33128: PUSH
33129: LD_VAR 0 1
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 6
33148: PUSH
33149: LD_INT 36
33151: PUSH
33152: LD_INT 4
33154: PUSH
33155: LD_INT 5
33157: PUSH
33158: LD_INT 31
33160: PUSH
33161: LD_INT 32
33163: PUSH
33164: LD_INT 33
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: IN
33180: NOT
33181: PUSH
33182: LD_VAR 0 6
33186: PUSH
33187: LD_INT 1
33189: EQUAL
33190: AND
33191: OR
33192: PUSH
33193: LD_VAR 0 1
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: LD_INT 3
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: IN
33208: NOT
33209: PUSH
33210: LD_VAR 0 6
33214: PUSH
33215: LD_INT 2
33217: EQUAL
33218: AND
33219: OR
33220: IFFALSE 33230
// mode = 0 ;
33222: LD_ADDR_VAR 0 6
33226: PUSH
33227: LD_INT 0
33229: ST_TO_ADDR
// case mode of 0 :
33230: LD_VAR 0 6
33234: PUSH
33235: LD_INT 0
33237: DOUBLE
33238: EQUAL
33239: IFTRUE 33243
33241: GO 44696
33243: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33244: LD_ADDR_VAR 0 11
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: LD_INT 3
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33437: LD_ADDR_VAR 0 12
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 2
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 2
33571: NEG
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: NEG
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 3
33605: NEG
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33633: LD_ADDR_VAR 0 13
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 2
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: LD_INT 3
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 3
33804: NEG
33805: PUSH
33806: LD_INT 3
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33832: LD_ADDR_VAR 0 14
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: NEG
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 3
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 3
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 2
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34028: LD_ADDR_VAR 0 15
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34221: LD_ADDR_VAR 0 16
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 2
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 2
34356: NEG
34357: PUSH
34358: LD_INT 2
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: LD_INT 3
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34414: LD_ADDR_VAR 0 17
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 2
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 2
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 2
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: LD_INT 2
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34644: LD_ADDR_VAR 0 18
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 2
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: NEG
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 2
34843: NEG
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34874: LD_ADDR_VAR 0 19
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35104: LD_ADDR_VAR 0 20
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: LD_INT 1
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: NEG
35304: PUSH
35305: LD_INT 2
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35334: LD_ADDR_VAR 0 21
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: LD_INT 1
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: LD_INT 1
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35564: LD_ADDR_VAR 0 22
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: LD_INT 1
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: LD_INT 2
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35794: LD_ADDR_VAR 0 23
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 2
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 2
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: LD_INT 2
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: LD_INT 3
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 3
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 2
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36074: LD_ADDR_VAR 0 24
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 2
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 2
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 2
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 2
36250: NEG
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: NEG
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 2
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 3
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36350: LD_ADDR_VAR 0 25
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: LD_INT 2
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 3
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 3
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36624: LD_ADDR_VAR 0 26
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: LD_INT 2
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 2
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 2
36823: NEG
36824: PUSH
36825: LD_INT 2
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 3
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36900: LD_ADDR_VAR 0 27
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 3
37133: NEG
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 3
37145: NEG
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37180: LD_ADDR_VAR 0 28
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: LD_INT 3
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: LD_INT 3
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 3
37415: NEG
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 3
37427: NEG
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37462: LD_ADDR_VAR 0 29
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 2
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: LD_INT 2
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: LD_INT 3
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 3
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 3
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 3
37706: NEG
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37741: LD_ADDR_VAR 0 30
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: LD_INT 3
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 3
37984: NEG
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38019: LD_ADDR_VAR 0 31
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 2
38184: NEG
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 2
38196: NEG
38197: PUSH
38198: LD_INT 2
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 2
38208: NEG
38209: PUSH
38210: LD_INT 3
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: LD_INT 3
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 3
38262: NEG
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38297: LD_ADDR_VAR 0 32
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: NEG
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: LD_INT 3
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: NEG
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 3
38540: NEG
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38575: LD_ADDR_VAR 0 33
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 2
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: LD_INT 3
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38854: LD_ADDR_VAR 0 34
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 2
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 3
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39134: LD_ADDR_VAR 0 35
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39246: LD_ADDR_VAR 0 36
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39358: LD_ADDR_VAR 0 37
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39470: LD_ADDR_VAR 0 38
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39582: LD_ADDR_VAR 0 39
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39694: LD_ADDR_VAR 0 40
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39806: LD_ADDR_VAR 0 41
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 3
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 3
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 3
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 3
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 3
40080: NEG
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 3
40091: NEG
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 3
40103: NEG
40104: PUSH
40105: LD_INT 2
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 3
40115: NEG
40116: PUSH
40117: LD_INT 3
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40156: LD_ADDR_VAR 0 42
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: LD_INT 3
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 3
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: LD_INT 2
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: LD_INT 3
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 3
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 3
40453: NEG
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 3
40465: NEG
40466: PUSH
40467: LD_INT 3
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40506: LD_ADDR_VAR 0 43
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 3
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 3
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 3
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 3
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 3
40813: NEG
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40854: LD_ADDR_VAR 0 44
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: LD_INT 3
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 3
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 3
41097: PUSH
41098: LD_INT 3
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 3
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: NEG
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 3
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 3
41151: NEG
41152: PUSH
41153: LD_INT 2
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 3
41163: NEG
41164: PUSH
41165: LD_INT 3
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41204: LD_ADDR_VAR 0 45
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 2
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 3
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 3
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 3
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: LD_INT 2
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 3
41513: NEG
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41554: LD_ADDR_VAR 0 46
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 3
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 3
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 3
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 3
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 3
41850: NEG
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41902: LD_ADDR_VAR 0 47
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42053: LD_ADDR_VAR 0 48
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42200: LD_ADDR_VAR 0 49
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42344: LD_ADDR_VAR 0 50
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42488: LD_ADDR_VAR 0 51
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42635: LD_ADDR_VAR 0 52
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42786: LD_ADDR_VAR 0 53
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43016: LD_ADDR_VAR 0 54
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43246: LD_ADDR_VAR 0 55
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43476: LD_ADDR_VAR 0 56
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43706: LD_ADDR_VAR 0 57
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43936: LD_ADDR_VAR 0 58
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44166: LD_ADDR_VAR 0 59
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44254: LD_ADDR_VAR 0 60
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44342: LD_ADDR_VAR 0 61
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44430: LD_ADDR_VAR 0 62
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44518: LD_ADDR_VAR 0 63
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44606: LD_ADDR_VAR 0 64
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// end ; 1 :
44694: GO 50591
44696: LD_INT 1
44698: DOUBLE
44699: EQUAL
44700: IFTRUE 44704
44702: GO 47327
44704: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44705: LD_ADDR_VAR 0 11
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 3
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 3
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: LIST
44748: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44749: LD_ADDR_VAR 0 12
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 3
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44790: LD_ADDR_VAR 0 13
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: LD_INT 3
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44830: LD_ADDR_VAR 0 14
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 3
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 3
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44871: LD_ADDR_VAR 0 15
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 3
44889: NEG
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 3
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44915: LD_ADDR_VAR 0 16
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: LD_INT 3
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44961: LD_ADDR_VAR 0 17
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 3
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45005: LD_ADDR_VAR 0 18
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 3
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: LIST
45045: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45046: LD_ADDR_VAR 0 19
45050: PUSH
45051: LD_INT 3
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45086: LD_ADDR_VAR 0 20
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 3
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 3
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45127: LD_ADDR_VAR 0 21
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 3
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 3
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45171: LD_ADDR_VAR 0 22
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 3
45190: NEG
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 3
45202: NEG
45203: PUSH
45204: LD_INT 3
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45217: LD_ADDR_VAR 0 23
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 3
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 4
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 3
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45261: LD_ADDR_VAR 0 24
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 4
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45302: LD_ADDR_VAR 0 25
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: LD_INT 4
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45342: LD_ADDR_VAR 0 26
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 4
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45383: LD_ADDR_VAR 0 27
45387: PUSH
45388: LD_INT 3
45390: NEG
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 4
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45427: LD_ADDR_VAR 0 28
45431: PUSH
45432: LD_INT 3
45434: NEG
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: LD_INT 4
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 4
45458: NEG
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45473: LD_ADDR_VAR 0 29
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 3
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 4
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 4
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 5
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 5
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 4
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 6
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 6
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 5
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45628: LD_ADDR_VAR 0 30
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 3
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 4
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 4
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 4
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 5
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 5
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 5
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 6
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 6
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45771: LD_ADDR_VAR 0 31
45775: PUSH
45776: LD_INT 3
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 3
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 4
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 4
45818: PUSH
45819: LD_INT 4
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 3
45828: PUSH
45829: LD_INT 4
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 5
45838: PUSH
45839: LD_INT 4
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 5
45848: PUSH
45849: LD_INT 5
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 4
45858: PUSH
45859: LD_INT 5
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 6
45868: PUSH
45869: LD_INT 5
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 6
45878: PUSH
45879: LD_INT 6
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 5
45888: PUSH
45889: LD_INT 6
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45910: LD_ADDR_VAR 0 32
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 3
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 4
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 4
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 3
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 5
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 5
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 4
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 6
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 6
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 5
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46053: LD_ADDR_VAR 0 33
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 4
46105: NEG
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 4
46116: NEG
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 4
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 5
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 5
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 5
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 6
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 6
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46208: LD_ADDR_VAR 0 34
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 3
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: NEG
46252: PUSH
46253: LD_INT 4
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 4
46263: NEG
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 4
46275: NEG
46276: PUSH
46277: LD_INT 4
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 4
46287: NEG
46288: PUSH
46289: LD_INT 5
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 5
46299: NEG
46300: PUSH
46301: LD_INT 4
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 5
46311: NEG
46312: PUSH
46313: LD_INT 5
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 5
46323: NEG
46324: PUSH
46325: LD_INT 6
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 6
46335: NEG
46336: PUSH
46337: LD_INT 5
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 6
46347: NEG
46348: PUSH
46349: LD_INT 6
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46371: LD_ADDR_VAR 0 41
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46415: LD_ADDR_VAR 0 42
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 3
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46456: LD_ADDR_VAR 0 43
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46496: LD_ADDR_VAR 0 44
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46537: LD_ADDR_VAR 0 45
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46581: LD_ADDR_VAR 0 46
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46627: LD_ADDR_VAR 0 47
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46660: LD_ADDR_VAR 0 48
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46691: LD_ADDR_VAR 0 49
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46720: LD_ADDR_VAR 0 50
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46749: LD_ADDR_VAR 0 51
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46780: LD_ADDR_VAR 0 52
46784: PUSH
46785: LD_INT 3
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46813: LD_ADDR_VAR 0 53
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 3
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46857: LD_ADDR_VAR 0 54
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46898: LD_ADDR_VAR 0 55
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46938: LD_ADDR_VAR 0 56
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46979: LD_ADDR_VAR 0 57
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 3
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47023: LD_ADDR_VAR 0 58
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 3
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47069: LD_ADDR_VAR 0 59
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47113: LD_ADDR_VAR 0 60
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47154: LD_ADDR_VAR 0 61
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47194: LD_ADDR_VAR 0 62
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47235: LD_ADDR_VAR 0 63
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47279: LD_ADDR_VAR 0 64
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// end ; 2 :
47325: GO 50591
47327: LD_INT 2
47329: DOUBLE
47330: EQUAL
47331: IFTRUE 47335
47333: GO 50590
47335: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47336: LD_ADDR_VAR 0 29
47340: PUSH
47341: LD_INT 4
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 4
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 5
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 4
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 3
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 5
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 4
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 4
47466: PUSH
47467: LD_INT 4
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: LD_INT 4
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 4
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 4
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 4
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 4
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 5
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 5
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 4
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 5
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 4
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 4
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 4
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 4
47721: NEG
47722: PUSH
47723: LD_INT 4
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 4
47733: NEG
47734: PUSH
47735: LD_INT 5
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: LD_INT 4
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 3
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 4
47769: NEG
47770: PUSH
47771: LD_INT 3
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 5
47781: NEG
47782: PUSH
47783: LD_INT 4
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 5
47793: NEG
47794: PUSH
47795: LD_INT 5
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: LD_INT 5
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 5
47817: NEG
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47874: LD_ADDR_VAR 0 30
47878: PUSH
47879: LD_INT 4
47881: PUSH
47882: LD_INT 4
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 4
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 5
47901: PUSH
47902: LD_INT 4
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 5
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 4
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 4
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: LD_INT 3
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 5
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: PUSH
47962: LD_INT 5
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 4
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 4
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: LD_INT 4
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 4
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 4
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 3
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 4
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: NEG
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 5
48131: NEG
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 5
48143: NEG
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 3
48166: NEG
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 3
48178: NEG
48179: PUSH
48180: LD_INT 4
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 4
48226: NEG
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 4
48238: NEG
48239: PUSH
48240: LD_INT 4
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: LD_INT 4
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 4
48262: NEG
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 4
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 5
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 4
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 3
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 4
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 5
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: LD_INT 5
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48421: LD_ADDR_VAR 0 31
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 4
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 4
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 5
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 5
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 4
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 3
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 5
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 3
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 4
48577: NEG
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 4
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 4
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 4
48623: NEG
48624: PUSH
48625: LD_INT 4
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 4
48635: NEG
48636: PUSH
48637: LD_INT 5
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 4
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: NEG
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 4
48671: NEG
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 5
48683: NEG
48684: PUSH
48685: LD_INT 4
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 5
48695: NEG
48696: PUSH
48697: LD_INT 5
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: NEG
48708: PUSH
48709: LD_INT 5
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 5
48719: NEG
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 4
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 3
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 3
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 4
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: LD_INT 4
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 4
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 4
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 5
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 5
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 4
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 5
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48971: LD_ADDR_VAR 0 32
48975: PUSH
48976: LD_INT 4
48978: NEG
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 4
48989: NEG
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 3
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 4
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 5
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 5
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 5
49057: NEG
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 3
49069: NEG
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 3
49080: NEG
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 3
49092: NEG
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: LD_INT 3
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 4
49140: NEG
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 4
49152: NEG
49153: PUSH
49154: LD_INT 4
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 4
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 4
49176: NEG
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 4
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 5
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 4
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 4
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 5
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: LD_INT 5
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 4
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 4
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 4
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 4
49383: PUSH
49384: LD_INT 4
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 4
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 5
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 5
49413: PUSH
49414: LD_INT 5
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 4
49423: PUSH
49424: LD_INT 5
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 3
49433: PUSH
49434: LD_INT 4
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 5
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: LD_INT 5
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49518: LD_ADDR_VAR 0 33
49522: PUSH
49523: LD_INT 4
49525: NEG
49526: PUSH
49527: LD_INT 4
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 4
49537: NEG
49538: PUSH
49539: LD_INT 5
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: LD_INT 4
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 4
49573: NEG
49574: PUSH
49575: LD_INT 3
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 5
49585: NEG
49586: PUSH
49587: LD_INT 4
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 5
49597: NEG
49598: PUSH
49599: LD_INT 5
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: LD_INT 5
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 5
49621: NEG
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 4
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 3
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 4
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 4
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 4
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 4
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 5
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 5
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 4
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 5
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 3
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 3
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 4
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 4
49858: PUSH
49859: LD_INT 4
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: LD_INT 4
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 4
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 4
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 4
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 5
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 5
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 4
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 3
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 5
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: LD_INT 3
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50056: LD_ADDR_VAR 0 34
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 4
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 5
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 4
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 4
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 5
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 3
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 5
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 4
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 4
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 4
50258: PUSH
50259: LD_INT 4
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 4
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 5
50278: PUSH
50279: LD_INT 4
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 5
50288: PUSH
50289: LD_INT 5
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 4
50298: PUSH
50299: LD_INT 5
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: LD_INT 4
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 3
50318: PUSH
50319: LD_INT 3
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 5
50328: PUSH
50329: LD_INT 3
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 5
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 3
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 4
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 4
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 4
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 4
50441: NEG
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 4
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 4
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 5
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 5
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 5
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 3
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// end ; end ;
50588: GO 50591
50590: POP
// case btype of b_depot , b_warehouse :
50591: LD_VAR 0 1
50595: PUSH
50596: LD_INT 0
50598: DOUBLE
50599: EQUAL
50600: IFTRUE 50610
50602: LD_INT 1
50604: DOUBLE
50605: EQUAL
50606: IFTRUE 50610
50608: GO 50811
50610: POP
// case nation of nation_american :
50611: LD_VAR 0 5
50615: PUSH
50616: LD_INT 1
50618: DOUBLE
50619: EQUAL
50620: IFTRUE 50624
50622: GO 50680
50624: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50625: LD_ADDR_VAR 0 9
50629: PUSH
50630: LD_VAR 0 11
50634: PUSH
50635: LD_VAR 0 12
50639: PUSH
50640: LD_VAR 0 13
50644: PUSH
50645: LD_VAR 0 14
50649: PUSH
50650: LD_VAR 0 15
50654: PUSH
50655: LD_VAR 0 16
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: PUSH
50668: LD_VAR 0 4
50672: PUSH
50673: LD_INT 1
50675: PLUS
50676: ARRAY
50677: ST_TO_ADDR
50678: GO 50809
50680: LD_INT 2
50682: DOUBLE
50683: EQUAL
50684: IFTRUE 50688
50686: GO 50744
50688: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50689: LD_ADDR_VAR 0 9
50693: PUSH
50694: LD_VAR 0 17
50698: PUSH
50699: LD_VAR 0 18
50703: PUSH
50704: LD_VAR 0 19
50708: PUSH
50709: LD_VAR 0 20
50713: PUSH
50714: LD_VAR 0 21
50718: PUSH
50719: LD_VAR 0 22
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: PUSH
50732: LD_VAR 0 4
50736: PUSH
50737: LD_INT 1
50739: PLUS
50740: ARRAY
50741: ST_TO_ADDR
50742: GO 50809
50744: LD_INT 3
50746: DOUBLE
50747: EQUAL
50748: IFTRUE 50752
50750: GO 50808
50752: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50753: LD_ADDR_VAR 0 9
50757: PUSH
50758: LD_VAR 0 23
50762: PUSH
50763: LD_VAR 0 24
50767: PUSH
50768: LD_VAR 0 25
50772: PUSH
50773: LD_VAR 0 26
50777: PUSH
50778: LD_VAR 0 27
50782: PUSH
50783: LD_VAR 0 28
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: PUSH
50796: LD_VAR 0 4
50800: PUSH
50801: LD_INT 1
50803: PLUS
50804: ARRAY
50805: ST_TO_ADDR
50806: GO 50809
50808: POP
50809: GO 51364
50811: LD_INT 2
50813: DOUBLE
50814: EQUAL
50815: IFTRUE 50825
50817: LD_INT 3
50819: DOUBLE
50820: EQUAL
50821: IFTRUE 50825
50823: GO 50881
50825: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50826: LD_ADDR_VAR 0 9
50830: PUSH
50831: LD_VAR 0 29
50835: PUSH
50836: LD_VAR 0 30
50840: PUSH
50841: LD_VAR 0 31
50845: PUSH
50846: LD_VAR 0 32
50850: PUSH
50851: LD_VAR 0 33
50855: PUSH
50856: LD_VAR 0 34
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: PUSH
50869: LD_VAR 0 4
50873: PUSH
50874: LD_INT 1
50876: PLUS
50877: ARRAY
50878: ST_TO_ADDR
50879: GO 51364
50881: LD_INT 16
50883: DOUBLE
50884: EQUAL
50885: IFTRUE 50943
50887: LD_INT 17
50889: DOUBLE
50890: EQUAL
50891: IFTRUE 50943
50893: LD_INT 18
50895: DOUBLE
50896: EQUAL
50897: IFTRUE 50943
50899: LD_INT 19
50901: DOUBLE
50902: EQUAL
50903: IFTRUE 50943
50905: LD_INT 22
50907: DOUBLE
50908: EQUAL
50909: IFTRUE 50943
50911: LD_INT 20
50913: DOUBLE
50914: EQUAL
50915: IFTRUE 50943
50917: LD_INT 21
50919: DOUBLE
50920: EQUAL
50921: IFTRUE 50943
50923: LD_INT 23
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50943
50929: LD_INT 24
50931: DOUBLE
50932: EQUAL
50933: IFTRUE 50943
50935: LD_INT 25
50937: DOUBLE
50938: EQUAL
50939: IFTRUE 50943
50941: GO 50999
50943: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50944: LD_ADDR_VAR 0 9
50948: PUSH
50949: LD_VAR 0 35
50953: PUSH
50954: LD_VAR 0 36
50958: PUSH
50959: LD_VAR 0 37
50963: PUSH
50964: LD_VAR 0 38
50968: PUSH
50969: LD_VAR 0 39
50973: PUSH
50974: LD_VAR 0 40
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: PUSH
50987: LD_VAR 0 4
50991: PUSH
50992: LD_INT 1
50994: PLUS
50995: ARRAY
50996: ST_TO_ADDR
50997: GO 51364
50999: LD_INT 6
51001: DOUBLE
51002: EQUAL
51003: IFTRUE 51055
51005: LD_INT 7
51007: DOUBLE
51008: EQUAL
51009: IFTRUE 51055
51011: LD_INT 8
51013: DOUBLE
51014: EQUAL
51015: IFTRUE 51055
51017: LD_INT 13
51019: DOUBLE
51020: EQUAL
51021: IFTRUE 51055
51023: LD_INT 12
51025: DOUBLE
51026: EQUAL
51027: IFTRUE 51055
51029: LD_INT 15
51031: DOUBLE
51032: EQUAL
51033: IFTRUE 51055
51035: LD_INT 11
51037: DOUBLE
51038: EQUAL
51039: IFTRUE 51055
51041: LD_INT 14
51043: DOUBLE
51044: EQUAL
51045: IFTRUE 51055
51047: LD_INT 10
51049: DOUBLE
51050: EQUAL
51051: IFTRUE 51055
51053: GO 51111
51055: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51056: LD_ADDR_VAR 0 9
51060: PUSH
51061: LD_VAR 0 41
51065: PUSH
51066: LD_VAR 0 42
51070: PUSH
51071: LD_VAR 0 43
51075: PUSH
51076: LD_VAR 0 44
51080: PUSH
51081: LD_VAR 0 45
51085: PUSH
51086: LD_VAR 0 46
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: PUSH
51099: LD_VAR 0 4
51103: PUSH
51104: LD_INT 1
51106: PLUS
51107: ARRAY
51108: ST_TO_ADDR
51109: GO 51364
51111: LD_INT 36
51113: DOUBLE
51114: EQUAL
51115: IFTRUE 51119
51117: GO 51175
51119: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51120: LD_ADDR_VAR 0 9
51124: PUSH
51125: LD_VAR 0 47
51129: PUSH
51130: LD_VAR 0 48
51134: PUSH
51135: LD_VAR 0 49
51139: PUSH
51140: LD_VAR 0 50
51144: PUSH
51145: LD_VAR 0 51
51149: PUSH
51150: LD_VAR 0 52
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: PUSH
51163: LD_VAR 0 4
51167: PUSH
51168: LD_INT 1
51170: PLUS
51171: ARRAY
51172: ST_TO_ADDR
51173: GO 51364
51175: LD_INT 4
51177: DOUBLE
51178: EQUAL
51179: IFTRUE 51201
51181: LD_INT 5
51183: DOUBLE
51184: EQUAL
51185: IFTRUE 51201
51187: LD_INT 34
51189: DOUBLE
51190: EQUAL
51191: IFTRUE 51201
51193: LD_INT 37
51195: DOUBLE
51196: EQUAL
51197: IFTRUE 51201
51199: GO 51257
51201: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51202: LD_ADDR_VAR 0 9
51206: PUSH
51207: LD_VAR 0 53
51211: PUSH
51212: LD_VAR 0 54
51216: PUSH
51217: LD_VAR 0 55
51221: PUSH
51222: LD_VAR 0 56
51226: PUSH
51227: LD_VAR 0 57
51231: PUSH
51232: LD_VAR 0 58
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: PUSH
51245: LD_VAR 0 4
51249: PUSH
51250: LD_INT 1
51252: PLUS
51253: ARRAY
51254: ST_TO_ADDR
51255: GO 51364
51257: LD_INT 31
51259: DOUBLE
51260: EQUAL
51261: IFTRUE 51307
51263: LD_INT 32
51265: DOUBLE
51266: EQUAL
51267: IFTRUE 51307
51269: LD_INT 33
51271: DOUBLE
51272: EQUAL
51273: IFTRUE 51307
51275: LD_INT 27
51277: DOUBLE
51278: EQUAL
51279: IFTRUE 51307
51281: LD_INT 26
51283: DOUBLE
51284: EQUAL
51285: IFTRUE 51307
51287: LD_INT 28
51289: DOUBLE
51290: EQUAL
51291: IFTRUE 51307
51293: LD_INT 29
51295: DOUBLE
51296: EQUAL
51297: IFTRUE 51307
51299: LD_INT 30
51301: DOUBLE
51302: EQUAL
51303: IFTRUE 51307
51305: GO 51363
51307: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51308: LD_ADDR_VAR 0 9
51312: PUSH
51313: LD_VAR 0 59
51317: PUSH
51318: LD_VAR 0 60
51322: PUSH
51323: LD_VAR 0 61
51327: PUSH
51328: LD_VAR 0 62
51332: PUSH
51333: LD_VAR 0 63
51337: PUSH
51338: LD_VAR 0 64
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: PUSH
51351: LD_VAR 0 4
51355: PUSH
51356: LD_INT 1
51358: PLUS
51359: ARRAY
51360: ST_TO_ADDR
51361: GO 51364
51363: POP
// temp_list2 = [ ] ;
51364: LD_ADDR_VAR 0 10
51368: PUSH
51369: EMPTY
51370: ST_TO_ADDR
// for i in temp_list do
51371: LD_ADDR_VAR 0 8
51375: PUSH
51376: LD_VAR 0 9
51380: PUSH
51381: FOR_IN
51382: IFFALSE 51434
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51384: LD_ADDR_VAR 0 10
51388: PUSH
51389: LD_VAR 0 10
51393: PUSH
51394: LD_VAR 0 8
51398: PUSH
51399: LD_INT 1
51401: ARRAY
51402: PUSH
51403: LD_VAR 0 2
51407: PLUS
51408: PUSH
51409: LD_VAR 0 8
51413: PUSH
51414: LD_INT 2
51416: ARRAY
51417: PUSH
51418: LD_VAR 0 3
51422: PLUS
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: ADD
51431: ST_TO_ADDR
51432: GO 51381
51434: POP
51435: POP
// result = temp_list2 ;
51436: LD_ADDR_VAR 0 7
51440: PUSH
51441: LD_VAR 0 10
51445: ST_TO_ADDR
// end ;
51446: LD_VAR 0 7
51450: RET
// export function EnemyInRange ( unit , dist ) ; begin
51451: LD_INT 0
51453: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51454: LD_ADDR_VAR 0 3
51458: PUSH
51459: LD_VAR 0 1
51463: PPUSH
51464: CALL_OW 255
51468: PPUSH
51469: LD_VAR 0 1
51473: PPUSH
51474: CALL_OW 250
51478: PPUSH
51479: LD_VAR 0 1
51483: PPUSH
51484: CALL_OW 251
51488: PPUSH
51489: LD_VAR 0 2
51493: PPUSH
51494: CALL 25555 0 4
51498: PUSH
51499: LD_INT 4
51501: ARRAY
51502: ST_TO_ADDR
// end ;
51503: LD_VAR 0 3
51507: RET
// export function PlayerSeeMe ( unit ) ; begin
51508: LD_INT 0
51510: PPUSH
// result := See ( your_side , unit ) ;
51511: LD_ADDR_VAR 0 2
51515: PUSH
51516: LD_OWVAR 2
51520: PPUSH
51521: LD_VAR 0 1
51525: PPUSH
51526: CALL_OW 292
51530: ST_TO_ADDR
// end ;
51531: LD_VAR 0 2
51535: RET
// export function ReverseDir ( unit ) ; begin
51536: LD_INT 0
51538: PPUSH
// if not unit then
51539: LD_VAR 0 1
51543: NOT
51544: IFFALSE 51548
// exit ;
51546: GO 51571
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51548: LD_ADDR_VAR 0 2
51552: PUSH
51553: LD_VAR 0 1
51557: PPUSH
51558: CALL_OW 254
51562: PUSH
51563: LD_INT 3
51565: PLUS
51566: PUSH
51567: LD_INT 6
51569: MOD
51570: ST_TO_ADDR
// end ;
51571: LD_VAR 0 2
51575: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51576: LD_INT 0
51578: PPUSH
51579: PPUSH
51580: PPUSH
51581: PPUSH
51582: PPUSH
// if not hexes then
51583: LD_VAR 0 2
51587: NOT
51588: IFFALSE 51592
// exit ;
51590: GO 51740
// dist := 9999 ;
51592: LD_ADDR_VAR 0 5
51596: PUSH
51597: LD_INT 9999
51599: ST_TO_ADDR
// for i = 1 to hexes do
51600: LD_ADDR_VAR 0 4
51604: PUSH
51605: DOUBLE
51606: LD_INT 1
51608: DEC
51609: ST_TO_ADDR
51610: LD_VAR 0 2
51614: PUSH
51615: FOR_TO
51616: IFFALSE 51728
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51618: LD_VAR 0 1
51622: PPUSH
51623: LD_VAR 0 2
51627: PUSH
51628: LD_VAR 0 4
51632: ARRAY
51633: PUSH
51634: LD_INT 1
51636: ARRAY
51637: PPUSH
51638: LD_VAR 0 2
51642: PUSH
51643: LD_VAR 0 4
51647: ARRAY
51648: PUSH
51649: LD_INT 2
51651: ARRAY
51652: PPUSH
51653: CALL_OW 297
51657: PUSH
51658: LD_VAR 0 5
51662: LESS
51663: IFFALSE 51726
// begin hex := hexes [ i ] ;
51665: LD_ADDR_VAR 0 7
51669: PUSH
51670: LD_VAR 0 2
51674: PUSH
51675: LD_VAR 0 4
51679: ARRAY
51680: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51681: LD_ADDR_VAR 0 5
51685: PUSH
51686: LD_VAR 0 1
51690: PPUSH
51691: LD_VAR 0 2
51695: PUSH
51696: LD_VAR 0 4
51700: ARRAY
51701: PUSH
51702: LD_INT 1
51704: ARRAY
51705: PPUSH
51706: LD_VAR 0 2
51710: PUSH
51711: LD_VAR 0 4
51715: ARRAY
51716: PUSH
51717: LD_INT 2
51719: ARRAY
51720: PPUSH
51721: CALL_OW 297
51725: ST_TO_ADDR
// end ; end ;
51726: GO 51615
51728: POP
51729: POP
// result := hex ;
51730: LD_ADDR_VAR 0 3
51734: PUSH
51735: LD_VAR 0 7
51739: ST_TO_ADDR
// end ;
51740: LD_VAR 0 3
51744: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51745: LD_INT 0
51747: PPUSH
51748: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51749: LD_VAR 0 1
51753: NOT
51754: PUSH
51755: LD_VAR 0 1
51759: PUSH
51760: LD_INT 21
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 23
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PPUSH
51784: CALL_OW 69
51788: IN
51789: NOT
51790: OR
51791: IFFALSE 51795
// exit ;
51793: GO 51842
// for i = 1 to 3 do
51795: LD_ADDR_VAR 0 3
51799: PUSH
51800: DOUBLE
51801: LD_INT 1
51803: DEC
51804: ST_TO_ADDR
51805: LD_INT 3
51807: PUSH
51808: FOR_TO
51809: IFFALSE 51840
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51811: LD_VAR 0 1
51815: PPUSH
51816: CALL_OW 250
51820: PPUSH
51821: LD_VAR 0 1
51825: PPUSH
51826: CALL_OW 251
51830: PPUSH
51831: LD_INT 1
51833: PPUSH
51834: CALL_OW 453
51838: GO 51808
51840: POP
51841: POP
// end ;
51842: LD_VAR 0 2
51846: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51847: LD_INT 0
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51855: LD_VAR 0 1
51859: NOT
51860: PUSH
51861: LD_VAR 0 2
51865: NOT
51866: OR
51867: PUSH
51868: LD_VAR 0 1
51872: PPUSH
51873: CALL_OW 314
51877: OR
51878: IFFALSE 51882
// exit ;
51880: GO 52323
// x := GetX ( enemy_unit ) ;
51882: LD_ADDR_VAR 0 7
51886: PUSH
51887: LD_VAR 0 2
51891: PPUSH
51892: CALL_OW 250
51896: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51897: LD_ADDR_VAR 0 8
51901: PUSH
51902: LD_VAR 0 2
51906: PPUSH
51907: CALL_OW 251
51911: ST_TO_ADDR
// if not x or not y then
51912: LD_VAR 0 7
51916: NOT
51917: PUSH
51918: LD_VAR 0 8
51922: NOT
51923: OR
51924: IFFALSE 51928
// exit ;
51926: GO 52323
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51928: LD_ADDR_VAR 0 6
51932: PUSH
51933: LD_VAR 0 7
51937: PPUSH
51938: LD_INT 0
51940: PPUSH
51941: LD_INT 4
51943: PPUSH
51944: CALL_OW 272
51948: PUSH
51949: LD_VAR 0 8
51953: PPUSH
51954: LD_INT 0
51956: PPUSH
51957: LD_INT 4
51959: PPUSH
51960: CALL_OW 273
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_VAR 0 7
51973: PPUSH
51974: LD_INT 1
51976: PPUSH
51977: LD_INT 4
51979: PPUSH
51980: CALL_OW 272
51984: PUSH
51985: LD_VAR 0 8
51989: PPUSH
51990: LD_INT 1
51992: PPUSH
51993: LD_INT 4
51995: PPUSH
51996: CALL_OW 273
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_VAR 0 7
52009: PPUSH
52010: LD_INT 2
52012: PPUSH
52013: LD_INT 4
52015: PPUSH
52016: CALL_OW 272
52020: PUSH
52021: LD_VAR 0 8
52025: PPUSH
52026: LD_INT 2
52028: PPUSH
52029: LD_INT 4
52031: PPUSH
52032: CALL_OW 273
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_VAR 0 7
52045: PPUSH
52046: LD_INT 3
52048: PPUSH
52049: LD_INT 4
52051: PPUSH
52052: CALL_OW 272
52056: PUSH
52057: LD_VAR 0 8
52061: PPUSH
52062: LD_INT 3
52064: PPUSH
52065: LD_INT 4
52067: PPUSH
52068: CALL_OW 273
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_VAR 0 7
52081: PPUSH
52082: LD_INT 4
52084: PPUSH
52085: LD_INT 4
52087: PPUSH
52088: CALL_OW 272
52092: PUSH
52093: LD_VAR 0 8
52097: PPUSH
52098: LD_INT 4
52100: PPUSH
52101: LD_INT 4
52103: PPUSH
52104: CALL_OW 273
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_VAR 0 7
52117: PPUSH
52118: LD_INT 5
52120: PPUSH
52121: LD_INT 4
52123: PPUSH
52124: CALL_OW 272
52128: PUSH
52129: LD_VAR 0 8
52133: PPUSH
52134: LD_INT 5
52136: PPUSH
52137: LD_INT 4
52139: PPUSH
52140: CALL_OW 273
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: ST_TO_ADDR
// for i = tmp downto 1 do
52157: LD_ADDR_VAR 0 4
52161: PUSH
52162: DOUBLE
52163: LD_VAR 0 6
52167: INC
52168: ST_TO_ADDR
52169: LD_INT 1
52171: PUSH
52172: FOR_DOWNTO
52173: IFFALSE 52274
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52175: LD_VAR 0 6
52179: PUSH
52180: LD_VAR 0 4
52184: ARRAY
52185: PUSH
52186: LD_INT 1
52188: ARRAY
52189: PPUSH
52190: LD_VAR 0 6
52194: PUSH
52195: LD_VAR 0 4
52199: ARRAY
52200: PUSH
52201: LD_INT 2
52203: ARRAY
52204: PPUSH
52205: CALL_OW 488
52209: NOT
52210: PUSH
52211: LD_VAR 0 6
52215: PUSH
52216: LD_VAR 0 4
52220: ARRAY
52221: PUSH
52222: LD_INT 1
52224: ARRAY
52225: PPUSH
52226: LD_VAR 0 6
52230: PUSH
52231: LD_VAR 0 4
52235: ARRAY
52236: PUSH
52237: LD_INT 2
52239: ARRAY
52240: PPUSH
52241: CALL_OW 428
52245: PUSH
52246: LD_INT 0
52248: NONEQUAL
52249: OR
52250: IFFALSE 52272
// tmp := Delete ( tmp , i ) ;
52252: LD_ADDR_VAR 0 6
52256: PUSH
52257: LD_VAR 0 6
52261: PPUSH
52262: LD_VAR 0 4
52266: PPUSH
52267: CALL_OW 3
52271: ST_TO_ADDR
52272: GO 52172
52274: POP
52275: POP
// j := GetClosestHex ( unit , tmp ) ;
52276: LD_ADDR_VAR 0 5
52280: PUSH
52281: LD_VAR 0 1
52285: PPUSH
52286: LD_VAR 0 6
52290: PPUSH
52291: CALL 51576 0 2
52295: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52296: LD_VAR 0 1
52300: PPUSH
52301: LD_VAR 0 5
52305: PUSH
52306: LD_INT 1
52308: ARRAY
52309: PPUSH
52310: LD_VAR 0 5
52314: PUSH
52315: LD_INT 2
52317: ARRAY
52318: PPUSH
52319: CALL_OW 111
// end ;
52323: LD_VAR 0 3
52327: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52328: LD_INT 0
52330: PPUSH
52331: PPUSH
52332: PPUSH
// uc_side = 0 ;
52333: LD_ADDR_OWVAR 20
52337: PUSH
52338: LD_INT 0
52340: ST_TO_ADDR
// uc_nation = 0 ;
52341: LD_ADDR_OWVAR 21
52345: PUSH
52346: LD_INT 0
52348: ST_TO_ADDR
// InitHc ;
52349: CALL_OW 19
// InitVc ;
52353: CALL_OW 20
// if mastodonts then
52357: LD_VAR 0 6
52361: IFFALSE 52428
// for i = 1 to mastodonts do
52363: LD_ADDR_VAR 0 11
52367: PUSH
52368: DOUBLE
52369: LD_INT 1
52371: DEC
52372: ST_TO_ADDR
52373: LD_VAR 0 6
52377: PUSH
52378: FOR_TO
52379: IFFALSE 52426
// begin vc_chassis := 31 ;
52381: LD_ADDR_OWVAR 37
52385: PUSH
52386: LD_INT 31
52388: ST_TO_ADDR
// vc_control := control_rider ;
52389: LD_ADDR_OWVAR 38
52393: PUSH
52394: LD_INT 4
52396: ST_TO_ADDR
// animal := CreateVehicle ;
52397: LD_ADDR_VAR 0 12
52401: PUSH
52402: CALL_OW 45
52406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52407: LD_VAR 0 12
52411: PPUSH
52412: LD_VAR 0 8
52416: PPUSH
52417: LD_INT 0
52419: PPUSH
52420: CALL 54497 0 3
// end ;
52424: GO 52378
52426: POP
52427: POP
// if horses then
52428: LD_VAR 0 5
52432: IFFALSE 52499
// for i = 1 to horses do
52434: LD_ADDR_VAR 0 11
52438: PUSH
52439: DOUBLE
52440: LD_INT 1
52442: DEC
52443: ST_TO_ADDR
52444: LD_VAR 0 5
52448: PUSH
52449: FOR_TO
52450: IFFALSE 52497
// begin hc_class := 21 ;
52452: LD_ADDR_OWVAR 28
52456: PUSH
52457: LD_INT 21
52459: ST_TO_ADDR
// hc_gallery :=  ;
52460: LD_ADDR_OWVAR 33
52464: PUSH
52465: LD_STRING 
52467: ST_TO_ADDR
// animal := CreateHuman ;
52468: LD_ADDR_VAR 0 12
52472: PUSH
52473: CALL_OW 44
52477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52478: LD_VAR 0 12
52482: PPUSH
52483: LD_VAR 0 8
52487: PPUSH
52488: LD_INT 0
52490: PPUSH
52491: CALL 54497 0 3
// end ;
52495: GO 52449
52497: POP
52498: POP
// if birds then
52499: LD_VAR 0 1
52503: IFFALSE 52570
// for i = 1 to birds do
52505: LD_ADDR_VAR 0 11
52509: PUSH
52510: DOUBLE
52511: LD_INT 1
52513: DEC
52514: ST_TO_ADDR
52515: LD_VAR 0 1
52519: PUSH
52520: FOR_TO
52521: IFFALSE 52568
// begin hc_class = 18 ;
52523: LD_ADDR_OWVAR 28
52527: PUSH
52528: LD_INT 18
52530: ST_TO_ADDR
// hc_gallery =  ;
52531: LD_ADDR_OWVAR 33
52535: PUSH
52536: LD_STRING 
52538: ST_TO_ADDR
// animal := CreateHuman ;
52539: LD_ADDR_VAR 0 12
52543: PUSH
52544: CALL_OW 44
52548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52549: LD_VAR 0 12
52553: PPUSH
52554: LD_VAR 0 8
52558: PPUSH
52559: LD_INT 0
52561: PPUSH
52562: CALL 54497 0 3
// end ;
52566: GO 52520
52568: POP
52569: POP
// if tigers then
52570: LD_VAR 0 2
52574: IFFALSE 52658
// for i = 1 to tigers do
52576: LD_ADDR_VAR 0 11
52580: PUSH
52581: DOUBLE
52582: LD_INT 1
52584: DEC
52585: ST_TO_ADDR
52586: LD_VAR 0 2
52590: PUSH
52591: FOR_TO
52592: IFFALSE 52656
// begin hc_class = class_tiger ;
52594: LD_ADDR_OWVAR 28
52598: PUSH
52599: LD_INT 14
52601: ST_TO_ADDR
// hc_gallery =  ;
52602: LD_ADDR_OWVAR 33
52606: PUSH
52607: LD_STRING 
52609: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52610: LD_ADDR_OWVAR 35
52614: PUSH
52615: LD_INT 7
52617: NEG
52618: PPUSH
52619: LD_INT 7
52621: PPUSH
52622: CALL_OW 12
52626: ST_TO_ADDR
// animal := CreateHuman ;
52627: LD_ADDR_VAR 0 12
52631: PUSH
52632: CALL_OW 44
52636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52637: LD_VAR 0 12
52641: PPUSH
52642: LD_VAR 0 8
52646: PPUSH
52647: LD_INT 0
52649: PPUSH
52650: CALL 54497 0 3
// end ;
52654: GO 52591
52656: POP
52657: POP
// if apemans then
52658: LD_VAR 0 3
52662: IFFALSE 52785
// for i = 1 to apemans do
52664: LD_ADDR_VAR 0 11
52668: PUSH
52669: DOUBLE
52670: LD_INT 1
52672: DEC
52673: ST_TO_ADDR
52674: LD_VAR 0 3
52678: PUSH
52679: FOR_TO
52680: IFFALSE 52783
// begin hc_class = class_apeman ;
52682: LD_ADDR_OWVAR 28
52686: PUSH
52687: LD_INT 12
52689: ST_TO_ADDR
// hc_gallery =  ;
52690: LD_ADDR_OWVAR 33
52694: PUSH
52695: LD_STRING 
52697: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52698: LD_ADDR_OWVAR 35
52702: PUSH
52703: LD_INT 5
52705: NEG
52706: PPUSH
52707: LD_INT 5
52709: PPUSH
52710: CALL_OW 12
52714: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52715: LD_ADDR_OWVAR 31
52719: PUSH
52720: LD_INT 1
52722: PPUSH
52723: LD_INT 3
52725: PPUSH
52726: CALL_OW 12
52730: PUSH
52731: LD_INT 1
52733: PPUSH
52734: LD_INT 3
52736: PPUSH
52737: CALL_OW 12
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// animal := CreateHuman ;
52754: LD_ADDR_VAR 0 12
52758: PUSH
52759: CALL_OW 44
52763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52764: LD_VAR 0 12
52768: PPUSH
52769: LD_VAR 0 8
52773: PPUSH
52774: LD_INT 0
52776: PPUSH
52777: CALL 54497 0 3
// end ;
52781: GO 52679
52783: POP
52784: POP
// if enchidnas then
52785: LD_VAR 0 4
52789: IFFALSE 52856
// for i = 1 to enchidnas do
52791: LD_ADDR_VAR 0 11
52795: PUSH
52796: DOUBLE
52797: LD_INT 1
52799: DEC
52800: ST_TO_ADDR
52801: LD_VAR 0 4
52805: PUSH
52806: FOR_TO
52807: IFFALSE 52854
// begin hc_class = 13 ;
52809: LD_ADDR_OWVAR 28
52813: PUSH
52814: LD_INT 13
52816: ST_TO_ADDR
// hc_gallery =  ;
52817: LD_ADDR_OWVAR 33
52821: PUSH
52822: LD_STRING 
52824: ST_TO_ADDR
// animal := CreateHuman ;
52825: LD_ADDR_VAR 0 12
52829: PUSH
52830: CALL_OW 44
52834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52835: LD_VAR 0 12
52839: PPUSH
52840: LD_VAR 0 8
52844: PPUSH
52845: LD_INT 0
52847: PPUSH
52848: CALL 54497 0 3
// end ;
52852: GO 52806
52854: POP
52855: POP
// if fishes then
52856: LD_VAR 0 7
52860: IFFALSE 52927
// for i = 1 to fishes do
52862: LD_ADDR_VAR 0 11
52866: PUSH
52867: DOUBLE
52868: LD_INT 1
52870: DEC
52871: ST_TO_ADDR
52872: LD_VAR 0 7
52876: PUSH
52877: FOR_TO
52878: IFFALSE 52925
// begin hc_class = 20 ;
52880: LD_ADDR_OWVAR 28
52884: PUSH
52885: LD_INT 20
52887: ST_TO_ADDR
// hc_gallery =  ;
52888: LD_ADDR_OWVAR 33
52892: PUSH
52893: LD_STRING 
52895: ST_TO_ADDR
// animal := CreateHuman ;
52896: LD_ADDR_VAR 0 12
52900: PUSH
52901: CALL_OW 44
52905: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52906: LD_VAR 0 12
52910: PPUSH
52911: LD_VAR 0 9
52915: PPUSH
52916: LD_INT 0
52918: PPUSH
52919: CALL 54497 0 3
// end ;
52923: GO 52877
52925: POP
52926: POP
// end ;
52927: LD_VAR 0 10
52931: RET
// export function WantHeal ( sci , unit ) ; begin
52932: LD_INT 0
52934: PPUSH
// if GetTaskList ( sci ) > 0 then
52935: LD_VAR 0 1
52939: PPUSH
52940: CALL_OW 437
52944: PUSH
52945: LD_INT 0
52947: GREATER
52948: IFFALSE 53018
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52950: LD_VAR 0 1
52954: PPUSH
52955: CALL_OW 437
52959: PUSH
52960: LD_INT 1
52962: ARRAY
52963: PUSH
52964: LD_INT 1
52966: ARRAY
52967: PUSH
52968: LD_STRING l
52970: EQUAL
52971: PUSH
52972: LD_VAR 0 1
52976: PPUSH
52977: CALL_OW 437
52981: PUSH
52982: LD_INT 1
52984: ARRAY
52985: PUSH
52986: LD_INT 4
52988: ARRAY
52989: PUSH
52990: LD_VAR 0 2
52994: EQUAL
52995: AND
52996: IFFALSE 53008
// result := true else
52998: LD_ADDR_VAR 0 3
53002: PUSH
53003: LD_INT 1
53005: ST_TO_ADDR
53006: GO 53016
// result := false ;
53008: LD_ADDR_VAR 0 3
53012: PUSH
53013: LD_INT 0
53015: ST_TO_ADDR
// end else
53016: GO 53026
// result := false ;
53018: LD_ADDR_VAR 0 3
53022: PUSH
53023: LD_INT 0
53025: ST_TO_ADDR
// end ;
53026: LD_VAR 0 3
53030: RET
// export function HealTarget ( sci ) ; begin
53031: LD_INT 0
53033: PPUSH
// if not sci then
53034: LD_VAR 0 1
53038: NOT
53039: IFFALSE 53043
// exit ;
53041: GO 53108
// result := 0 ;
53043: LD_ADDR_VAR 0 2
53047: PUSH
53048: LD_INT 0
53050: ST_TO_ADDR
// if GetTaskList ( sci ) then
53051: LD_VAR 0 1
53055: PPUSH
53056: CALL_OW 437
53060: IFFALSE 53108
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 437
53071: PUSH
53072: LD_INT 1
53074: ARRAY
53075: PUSH
53076: LD_INT 1
53078: ARRAY
53079: PUSH
53080: LD_STRING l
53082: EQUAL
53083: IFFALSE 53108
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53085: LD_ADDR_VAR 0 2
53089: PUSH
53090: LD_VAR 0 1
53094: PPUSH
53095: CALL_OW 437
53099: PUSH
53100: LD_INT 1
53102: ARRAY
53103: PUSH
53104: LD_INT 4
53106: ARRAY
53107: ST_TO_ADDR
// end ;
53108: LD_VAR 0 2
53112: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53113: LD_INT 0
53115: PPUSH
53116: PPUSH
53117: PPUSH
53118: PPUSH
// if not base_units then
53119: LD_VAR 0 1
53123: NOT
53124: IFFALSE 53128
// exit ;
53126: GO 53215
// result := false ;
53128: LD_ADDR_VAR 0 2
53132: PUSH
53133: LD_INT 0
53135: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53136: LD_ADDR_VAR 0 5
53140: PUSH
53141: LD_VAR 0 1
53145: PPUSH
53146: LD_INT 21
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PPUSH
53156: CALL_OW 72
53160: ST_TO_ADDR
// if not tmp then
53161: LD_VAR 0 5
53165: NOT
53166: IFFALSE 53170
// exit ;
53168: GO 53215
// for i in tmp do
53170: LD_ADDR_VAR 0 3
53174: PUSH
53175: LD_VAR 0 5
53179: PUSH
53180: FOR_IN
53181: IFFALSE 53213
// begin result := EnemyInRange ( i , 22 ) ;
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: LD_VAR 0 3
53192: PPUSH
53193: LD_INT 22
53195: PPUSH
53196: CALL 51451 0 2
53200: ST_TO_ADDR
// if result then
53201: LD_VAR 0 2
53205: IFFALSE 53211
// exit ;
53207: POP
53208: POP
53209: GO 53215
// end ;
53211: GO 53180
53213: POP
53214: POP
// end ;
53215: LD_VAR 0 2
53219: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53220: LD_INT 0
53222: PPUSH
53223: PPUSH
// if not units then
53224: LD_VAR 0 1
53228: NOT
53229: IFFALSE 53233
// exit ;
53231: GO 53303
// result := [ ] ;
53233: LD_ADDR_VAR 0 3
53237: PUSH
53238: EMPTY
53239: ST_TO_ADDR
// for i in units do
53240: LD_ADDR_VAR 0 4
53244: PUSH
53245: LD_VAR 0 1
53249: PUSH
53250: FOR_IN
53251: IFFALSE 53301
// if GetTag ( i ) = tag then
53253: LD_VAR 0 4
53257: PPUSH
53258: CALL_OW 110
53262: PUSH
53263: LD_VAR 0 2
53267: EQUAL
53268: IFFALSE 53299
// result := Insert ( result , result + 1 , i ) ;
53270: LD_ADDR_VAR 0 3
53274: PUSH
53275: LD_VAR 0 3
53279: PPUSH
53280: LD_VAR 0 3
53284: PUSH
53285: LD_INT 1
53287: PLUS
53288: PPUSH
53289: LD_VAR 0 4
53293: PPUSH
53294: CALL_OW 2
53298: ST_TO_ADDR
53299: GO 53250
53301: POP
53302: POP
// end ;
53303: LD_VAR 0 3
53307: RET
// export function IsDriver ( un ) ; begin
53308: LD_INT 0
53310: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53311: LD_ADDR_VAR 0 2
53315: PUSH
53316: LD_VAR 0 1
53320: PUSH
53321: LD_INT 55
53323: PUSH
53324: EMPTY
53325: LIST
53326: PPUSH
53327: CALL_OW 69
53331: IN
53332: ST_TO_ADDR
// end ;
53333: LD_VAR 0 2
53337: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53338: LD_INT 0
53340: PPUSH
53341: PPUSH
// list := [ ] ;
53342: LD_ADDR_VAR 0 5
53346: PUSH
53347: EMPTY
53348: ST_TO_ADDR
// case d of 0 :
53349: LD_VAR 0 3
53353: PUSH
53354: LD_INT 0
53356: DOUBLE
53357: EQUAL
53358: IFTRUE 53362
53360: GO 53495
53362: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53363: LD_ADDR_VAR 0 5
53367: PUSH
53368: LD_VAR 0 1
53372: PUSH
53373: LD_INT 4
53375: MINUS
53376: PUSH
53377: LD_VAR 0 2
53381: PUSH
53382: LD_INT 4
53384: MINUS
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: PUSH
53394: LD_VAR 0 1
53398: PUSH
53399: LD_INT 3
53401: MINUS
53402: PUSH
53403: LD_VAR 0 2
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: PUSH
53416: LD_VAR 0 1
53420: PUSH
53421: LD_INT 4
53423: PLUS
53424: PUSH
53425: LD_VAR 0 2
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: PUSH
53438: LD_VAR 0 1
53442: PUSH
53443: LD_INT 3
53445: PLUS
53446: PUSH
53447: LD_VAR 0 2
53451: PUSH
53452: LD_INT 3
53454: PLUS
53455: PUSH
53456: LD_INT 5
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: LIST
53463: PUSH
53464: LD_VAR 0 1
53468: PUSH
53469: LD_VAR 0 2
53473: PUSH
53474: LD_INT 4
53476: PLUS
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: ST_TO_ADDR
// end ; 1 :
53493: GO 54193
53495: LD_INT 1
53497: DOUBLE
53498: EQUAL
53499: IFTRUE 53503
53501: GO 53636
53503: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53504: LD_ADDR_VAR 0 5
53508: PUSH
53509: LD_VAR 0 1
53513: PUSH
53514: LD_VAR 0 2
53518: PUSH
53519: LD_INT 4
53521: MINUS
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: PUSH
53531: LD_VAR 0 1
53535: PUSH
53536: LD_INT 3
53538: MINUS
53539: PUSH
53540: LD_VAR 0 2
53544: PUSH
53545: LD_INT 3
53547: MINUS
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: LIST
53556: PUSH
53557: LD_VAR 0 1
53561: PUSH
53562: LD_INT 4
53564: MINUS
53565: PUSH
53566: LD_VAR 0 2
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: PUSH
53579: LD_VAR 0 1
53583: PUSH
53584: LD_VAR 0 2
53588: PUSH
53589: LD_INT 3
53591: PLUS
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: PUSH
53601: LD_VAR 0 1
53605: PUSH
53606: LD_INT 4
53608: PLUS
53609: PUSH
53610: LD_VAR 0 2
53614: PUSH
53615: LD_INT 4
53617: PLUS
53618: PUSH
53619: LD_INT 5
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// end ; 2 :
53634: GO 54193
53636: LD_INT 2
53638: DOUBLE
53639: EQUAL
53640: IFTRUE 53644
53642: GO 53773
53644: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53645: LD_ADDR_VAR 0 5
53649: PUSH
53650: LD_VAR 0 1
53654: PUSH
53655: LD_VAR 0 2
53659: PUSH
53660: LD_INT 3
53662: MINUS
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: PUSH
53672: LD_VAR 0 1
53676: PUSH
53677: LD_INT 4
53679: PLUS
53680: PUSH
53681: LD_VAR 0 2
53685: PUSH
53686: LD_INT 4
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: PUSH
53694: LD_VAR 0 1
53698: PUSH
53699: LD_VAR 0 2
53703: PUSH
53704: LD_INT 4
53706: PLUS
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: PUSH
53716: LD_VAR 0 1
53720: PUSH
53721: LD_INT 3
53723: MINUS
53724: PUSH
53725: LD_VAR 0 2
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: PUSH
53738: LD_VAR 0 1
53742: PUSH
53743: LD_INT 4
53745: MINUS
53746: PUSH
53747: LD_VAR 0 2
53751: PUSH
53752: LD_INT 4
53754: MINUS
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: ST_TO_ADDR
// end ; 3 :
53771: GO 54193
53773: LD_INT 3
53775: DOUBLE
53776: EQUAL
53777: IFTRUE 53781
53779: GO 53914
53781: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53782: LD_ADDR_VAR 0 5
53786: PUSH
53787: LD_VAR 0 1
53791: PUSH
53792: LD_INT 3
53794: PLUS
53795: PUSH
53796: LD_VAR 0 2
53800: PUSH
53801: LD_INT 4
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: PUSH
53809: LD_VAR 0 1
53813: PUSH
53814: LD_INT 4
53816: PLUS
53817: PUSH
53818: LD_VAR 0 2
53822: PUSH
53823: LD_INT 4
53825: PLUS
53826: PUSH
53827: LD_INT 5
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: PUSH
53835: LD_VAR 0 1
53839: PUSH
53840: LD_INT 4
53842: MINUS
53843: PUSH
53844: LD_VAR 0 2
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: PUSH
53857: LD_VAR 0 1
53861: PUSH
53862: LD_VAR 0 2
53866: PUSH
53867: LD_INT 4
53869: MINUS
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: PUSH
53879: LD_VAR 0 1
53883: PUSH
53884: LD_INT 3
53886: MINUS
53887: PUSH
53888: LD_VAR 0 2
53892: PUSH
53893: LD_INT 3
53895: MINUS
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: ST_TO_ADDR
// end ; 4 :
53912: GO 54193
53914: LD_INT 4
53916: DOUBLE
53917: EQUAL
53918: IFTRUE 53922
53920: GO 54055
53922: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53923: LD_ADDR_VAR 0 5
53927: PUSH
53928: LD_VAR 0 1
53932: PUSH
53933: LD_VAR 0 2
53937: PUSH
53938: LD_INT 4
53940: PLUS
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: PUSH
53950: LD_VAR 0 1
53954: PUSH
53955: LD_INT 3
53957: PLUS
53958: PUSH
53959: LD_VAR 0 2
53963: PUSH
53964: LD_INT 3
53966: PLUS
53967: PUSH
53968: LD_INT 5
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: PUSH
53976: LD_VAR 0 1
53980: PUSH
53981: LD_INT 4
53983: PLUS
53984: PUSH
53985: LD_VAR 0 2
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: LIST
53997: PUSH
53998: LD_VAR 0 1
54002: PUSH
54003: LD_VAR 0 2
54007: PUSH
54008: LD_INT 3
54010: MINUS
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: PUSH
54020: LD_VAR 0 1
54024: PUSH
54025: LD_INT 4
54027: MINUS
54028: PUSH
54029: LD_VAR 0 2
54033: PUSH
54034: LD_INT 4
54036: MINUS
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: ST_TO_ADDR
// end ; 5 :
54053: GO 54193
54055: LD_INT 5
54057: DOUBLE
54058: EQUAL
54059: IFTRUE 54063
54061: GO 54192
54063: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54064: LD_ADDR_VAR 0 5
54068: PUSH
54069: LD_VAR 0 1
54073: PUSH
54074: LD_INT 4
54076: MINUS
54077: PUSH
54078: LD_VAR 0 2
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: PUSH
54091: LD_VAR 0 1
54095: PUSH
54096: LD_VAR 0 2
54100: PUSH
54101: LD_INT 4
54103: MINUS
54104: PUSH
54105: LD_INT 3
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: PUSH
54113: LD_VAR 0 1
54117: PUSH
54118: LD_INT 4
54120: PLUS
54121: PUSH
54122: LD_VAR 0 2
54126: PUSH
54127: LD_INT 4
54129: PLUS
54130: PUSH
54131: LD_INT 5
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: PUSH
54139: LD_VAR 0 1
54143: PUSH
54144: LD_INT 3
54146: PLUS
54147: PUSH
54148: LD_VAR 0 2
54152: PUSH
54153: LD_INT 4
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: PUSH
54161: LD_VAR 0 1
54165: PUSH
54166: LD_VAR 0 2
54170: PUSH
54171: LD_INT 3
54173: PLUS
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// end ; end ;
54190: GO 54193
54192: POP
// result := list ;
54193: LD_ADDR_VAR 0 4
54197: PUSH
54198: LD_VAR 0 5
54202: ST_TO_ADDR
// end ;
54203: LD_VAR 0 4
54207: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54208: LD_INT 0
54210: PPUSH
54211: PPUSH
54212: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54213: LD_VAR 0 1
54217: NOT
54218: PUSH
54219: LD_VAR 0 2
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: LD_INT 4
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: IN
54242: NOT
54243: OR
54244: IFFALSE 54248
// exit ;
54246: GO 54340
// tmp := [ ] ;
54248: LD_ADDR_VAR 0 5
54252: PUSH
54253: EMPTY
54254: ST_TO_ADDR
// for i in units do
54255: LD_ADDR_VAR 0 4
54259: PUSH
54260: LD_VAR 0 1
54264: PUSH
54265: FOR_IN
54266: IFFALSE 54309
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54268: LD_ADDR_VAR 0 5
54272: PUSH
54273: LD_VAR 0 5
54277: PPUSH
54278: LD_VAR 0 5
54282: PUSH
54283: LD_INT 1
54285: PLUS
54286: PPUSH
54287: LD_VAR 0 4
54291: PPUSH
54292: LD_VAR 0 2
54296: PPUSH
54297: CALL_OW 259
54301: PPUSH
54302: CALL_OW 2
54306: ST_TO_ADDR
54307: GO 54265
54309: POP
54310: POP
// if not tmp then
54311: LD_VAR 0 5
54315: NOT
54316: IFFALSE 54320
// exit ;
54318: GO 54340
// result := SortListByListDesc ( units , tmp ) ;
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: LD_VAR 0 5
54334: PPUSH
54335: CALL_OW 77
54339: ST_TO_ADDR
// end ;
54340: LD_VAR 0 3
54344: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54345: LD_INT 0
54347: PPUSH
54348: PPUSH
54349: PPUSH
// x := GetX ( building ) ;
54350: LD_ADDR_VAR 0 4
54354: PUSH
54355: LD_VAR 0 2
54359: PPUSH
54360: CALL_OW 250
54364: ST_TO_ADDR
// y := GetY ( building ) ;
54365: LD_ADDR_VAR 0 5
54369: PUSH
54370: LD_VAR 0 2
54374: PPUSH
54375: CALL_OW 251
54379: ST_TO_ADDR
// if GetTaskList ( unit ) then
54380: LD_VAR 0 1
54384: PPUSH
54385: CALL_OW 437
54389: IFFALSE 54484
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54391: LD_STRING e
54393: PUSH
54394: LD_VAR 0 1
54398: PPUSH
54399: CALL_OW 437
54403: PUSH
54404: LD_INT 1
54406: ARRAY
54407: PUSH
54408: LD_INT 1
54410: ARRAY
54411: EQUAL
54412: PUSH
54413: LD_VAR 0 4
54417: PUSH
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 437
54427: PUSH
54428: LD_INT 1
54430: ARRAY
54431: PUSH
54432: LD_INT 2
54434: ARRAY
54435: EQUAL
54436: AND
54437: PUSH
54438: LD_VAR 0 5
54442: PUSH
54443: LD_VAR 0 1
54447: PPUSH
54448: CALL_OW 437
54452: PUSH
54453: LD_INT 1
54455: ARRAY
54456: PUSH
54457: LD_INT 3
54459: ARRAY
54460: EQUAL
54461: AND
54462: IFFALSE 54474
// result := true else
54464: LD_ADDR_VAR 0 3
54468: PUSH
54469: LD_INT 1
54471: ST_TO_ADDR
54472: GO 54482
// result := false ;
54474: LD_ADDR_VAR 0 3
54478: PUSH
54479: LD_INT 0
54481: ST_TO_ADDR
// end else
54482: GO 54492
// result := false ;
54484: LD_ADDR_VAR 0 3
54488: PUSH
54489: LD_INT 0
54491: ST_TO_ADDR
// end ;
54492: LD_VAR 0 3
54496: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54497: LD_INT 0
54499: PPUSH
54500: PPUSH
54501: PPUSH
54502: PPUSH
// if not unit or not area then
54503: LD_VAR 0 1
54507: NOT
54508: PUSH
54509: LD_VAR 0 2
54513: NOT
54514: OR
54515: IFFALSE 54519
// exit ;
54517: GO 54683
// tmp := AreaToList ( area , i ) ;
54519: LD_ADDR_VAR 0 6
54523: PUSH
54524: LD_VAR 0 2
54528: PPUSH
54529: LD_VAR 0 5
54533: PPUSH
54534: CALL_OW 517
54538: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54539: LD_ADDR_VAR 0 5
54543: PUSH
54544: DOUBLE
54545: LD_INT 1
54547: DEC
54548: ST_TO_ADDR
54549: LD_VAR 0 6
54553: PUSH
54554: LD_INT 1
54556: ARRAY
54557: PUSH
54558: FOR_TO
54559: IFFALSE 54681
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54561: LD_ADDR_VAR 0 7
54565: PUSH
54566: LD_VAR 0 6
54570: PUSH
54571: LD_INT 1
54573: ARRAY
54574: PUSH
54575: LD_VAR 0 5
54579: ARRAY
54580: PUSH
54581: LD_VAR 0 6
54585: PUSH
54586: LD_INT 2
54588: ARRAY
54589: PUSH
54590: LD_VAR 0 5
54594: ARRAY
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54600: LD_VAR 0 7
54604: PUSH
54605: LD_INT 1
54607: ARRAY
54608: PPUSH
54609: LD_VAR 0 7
54613: PUSH
54614: LD_INT 2
54616: ARRAY
54617: PPUSH
54618: CALL_OW 428
54622: PUSH
54623: LD_INT 0
54625: EQUAL
54626: IFFALSE 54679
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54628: LD_VAR 0 1
54632: PPUSH
54633: LD_VAR 0 7
54637: PUSH
54638: LD_INT 1
54640: ARRAY
54641: PPUSH
54642: LD_VAR 0 7
54646: PUSH
54647: LD_INT 2
54649: ARRAY
54650: PPUSH
54651: LD_VAR 0 3
54655: PPUSH
54656: CALL_OW 48
// result := IsPlaced ( unit ) ;
54660: LD_ADDR_VAR 0 4
54664: PUSH
54665: LD_VAR 0 1
54669: PPUSH
54670: CALL_OW 305
54674: ST_TO_ADDR
// exit ;
54675: POP
54676: POP
54677: GO 54683
// end ; end ;
54679: GO 54558
54681: POP
54682: POP
// end ;
54683: LD_VAR 0 4
54687: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54688: LD_INT 0
54690: PPUSH
54691: PPUSH
54692: PPUSH
// if not side or side > 8 then
54693: LD_VAR 0 1
54697: NOT
54698: PUSH
54699: LD_VAR 0 1
54703: PUSH
54704: LD_INT 8
54706: GREATER
54707: OR
54708: IFFALSE 54712
// exit ;
54710: GO 54899
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54712: LD_ADDR_VAR 0 4
54716: PUSH
54717: LD_INT 22
54719: PUSH
54720: LD_VAR 0 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 21
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PPUSH
54743: CALL_OW 69
54747: ST_TO_ADDR
// if not tmp then
54748: LD_VAR 0 4
54752: NOT
54753: IFFALSE 54757
// exit ;
54755: GO 54899
// enable_addtolog := true ;
54757: LD_ADDR_OWVAR 81
54761: PUSH
54762: LD_INT 1
54764: ST_TO_ADDR
// AddToLog ( [ ) ;
54765: LD_STRING [
54767: PPUSH
54768: CALL_OW 561
// for i in tmp do
54772: LD_ADDR_VAR 0 3
54776: PUSH
54777: LD_VAR 0 4
54781: PUSH
54782: FOR_IN
54783: IFFALSE 54890
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54785: LD_STRING [
54787: PUSH
54788: LD_VAR 0 3
54792: PPUSH
54793: CALL_OW 266
54797: STR
54798: PUSH
54799: LD_STRING , 
54801: STR
54802: PUSH
54803: LD_VAR 0 3
54807: PPUSH
54808: CALL_OW 250
54812: STR
54813: PUSH
54814: LD_STRING , 
54816: STR
54817: PUSH
54818: LD_VAR 0 3
54822: PPUSH
54823: CALL_OW 251
54827: STR
54828: PUSH
54829: LD_STRING , 
54831: STR
54832: PUSH
54833: LD_VAR 0 3
54837: PPUSH
54838: CALL_OW 254
54842: STR
54843: PUSH
54844: LD_STRING , 
54846: STR
54847: PUSH
54848: LD_VAR 0 3
54852: PPUSH
54853: LD_INT 1
54855: PPUSH
54856: CALL_OW 268
54860: STR
54861: PUSH
54862: LD_STRING , 
54864: STR
54865: PUSH
54866: LD_VAR 0 3
54870: PPUSH
54871: LD_INT 2
54873: PPUSH
54874: CALL_OW 268
54878: STR
54879: PUSH
54880: LD_STRING ],
54882: STR
54883: PPUSH
54884: CALL_OW 561
// end ;
54888: GO 54782
54890: POP
54891: POP
// AddToLog ( ]; ) ;
54892: LD_STRING ];
54894: PPUSH
54895: CALL_OW 561
// end ;
54899: LD_VAR 0 2
54903: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54904: LD_INT 0
54906: PPUSH
54907: PPUSH
54908: PPUSH
54909: PPUSH
54910: PPUSH
// if not area or not rate or not max then
54911: LD_VAR 0 1
54915: NOT
54916: PUSH
54917: LD_VAR 0 2
54921: NOT
54922: OR
54923: PUSH
54924: LD_VAR 0 4
54928: NOT
54929: OR
54930: IFFALSE 54934
// exit ;
54932: GO 55126
// while 1 do
54934: LD_INT 1
54936: IFFALSE 55126
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54938: LD_ADDR_VAR 0 9
54942: PUSH
54943: LD_VAR 0 1
54947: PPUSH
54948: LD_INT 1
54950: PPUSH
54951: CALL_OW 287
54955: PUSH
54956: LD_INT 10
54958: MUL
54959: ST_TO_ADDR
// r := rate / 10 ;
54960: LD_ADDR_VAR 0 7
54964: PUSH
54965: LD_VAR 0 2
54969: PUSH
54970: LD_INT 10
54972: DIVREAL
54973: ST_TO_ADDR
// time := 1 1$00 ;
54974: LD_ADDR_VAR 0 8
54978: PUSH
54979: LD_INT 2100
54981: ST_TO_ADDR
// if amount < min then
54982: LD_VAR 0 9
54986: PUSH
54987: LD_VAR 0 3
54991: LESS
54992: IFFALSE 55010
// r := r * 2 else
54994: LD_ADDR_VAR 0 7
54998: PUSH
54999: LD_VAR 0 7
55003: PUSH
55004: LD_INT 2
55006: MUL
55007: ST_TO_ADDR
55008: GO 55036
// if amount > max then
55010: LD_VAR 0 9
55014: PUSH
55015: LD_VAR 0 4
55019: GREATER
55020: IFFALSE 55036
// r := r / 2 ;
55022: LD_ADDR_VAR 0 7
55026: PUSH
55027: LD_VAR 0 7
55031: PUSH
55032: LD_INT 2
55034: DIVREAL
55035: ST_TO_ADDR
// time := time / r ;
55036: LD_ADDR_VAR 0 8
55040: PUSH
55041: LD_VAR 0 8
55045: PUSH
55046: LD_VAR 0 7
55050: DIVREAL
55051: ST_TO_ADDR
// if time < 0 then
55052: LD_VAR 0 8
55056: PUSH
55057: LD_INT 0
55059: LESS
55060: IFFALSE 55077
// time := time * - 1 ;
55062: LD_ADDR_VAR 0 8
55066: PUSH
55067: LD_VAR 0 8
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: MUL
55076: ST_TO_ADDR
// wait ( time ) ;
55077: LD_VAR 0 8
55081: PPUSH
55082: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55086: LD_INT 35
55088: PPUSH
55089: LD_INT 875
55091: PPUSH
55092: CALL_OW 12
55096: PPUSH
55097: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55101: LD_INT 1
55103: PPUSH
55104: LD_INT 5
55106: PPUSH
55107: CALL_OW 12
55111: PPUSH
55112: LD_VAR 0 1
55116: PPUSH
55117: LD_INT 1
55119: PPUSH
55120: CALL_OW 55
// end ;
55124: GO 54934
// end ;
55126: LD_VAR 0 5
55130: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55131: LD_INT 0
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
// if not turrets or not factories then
55141: LD_VAR 0 1
55145: NOT
55146: PUSH
55147: LD_VAR 0 2
55151: NOT
55152: OR
55153: IFFALSE 55157
// exit ;
55155: GO 55464
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55157: LD_ADDR_VAR 0 10
55161: PUSH
55162: LD_INT 5
55164: PUSH
55165: LD_INT 6
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: LD_INT 4
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 5
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 24
55199: PUSH
55200: LD_INT 25
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 23
55209: PUSH
55210: LD_INT 27
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 42
55223: PUSH
55224: LD_INT 43
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 44
55233: PUSH
55234: LD_INT 46
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 45
55243: PUSH
55244: LD_INT 47
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// result := [ ] ;
55261: LD_ADDR_VAR 0 3
55265: PUSH
55266: EMPTY
55267: ST_TO_ADDR
// for i in turrets do
55268: LD_ADDR_VAR 0 4
55272: PUSH
55273: LD_VAR 0 1
55277: PUSH
55278: FOR_IN
55279: IFFALSE 55462
// begin nat := GetNation ( i ) ;
55281: LD_ADDR_VAR 0 7
55285: PUSH
55286: LD_VAR 0 4
55290: PPUSH
55291: CALL_OW 248
55295: ST_TO_ADDR
// weapon := 0 ;
55296: LD_ADDR_VAR 0 8
55300: PUSH
55301: LD_INT 0
55303: ST_TO_ADDR
// if not nat then
55304: LD_VAR 0 7
55308: NOT
55309: IFFALSE 55313
// continue ;
55311: GO 55278
// for j in list [ nat ] do
55313: LD_ADDR_VAR 0 5
55317: PUSH
55318: LD_VAR 0 10
55322: PUSH
55323: LD_VAR 0 7
55327: ARRAY
55328: PUSH
55329: FOR_IN
55330: IFFALSE 55371
// if GetBWeapon ( i ) = j [ 1 ] then
55332: LD_VAR 0 4
55336: PPUSH
55337: CALL_OW 269
55341: PUSH
55342: LD_VAR 0 5
55346: PUSH
55347: LD_INT 1
55349: ARRAY
55350: EQUAL
55351: IFFALSE 55369
// begin weapon := j [ 2 ] ;
55353: LD_ADDR_VAR 0 8
55357: PUSH
55358: LD_VAR 0 5
55362: PUSH
55363: LD_INT 2
55365: ARRAY
55366: ST_TO_ADDR
// break ;
55367: GO 55371
// end ;
55369: GO 55329
55371: POP
55372: POP
// if not weapon then
55373: LD_VAR 0 8
55377: NOT
55378: IFFALSE 55382
// continue ;
55380: GO 55278
// for k in factories do
55382: LD_ADDR_VAR 0 6
55386: PUSH
55387: LD_VAR 0 2
55391: PUSH
55392: FOR_IN
55393: IFFALSE 55458
// begin weapons := AvailableWeaponList ( k ) ;
55395: LD_ADDR_VAR 0 9
55399: PUSH
55400: LD_VAR 0 6
55404: PPUSH
55405: CALL_OW 478
55409: ST_TO_ADDR
// if not weapons then
55410: LD_VAR 0 9
55414: NOT
55415: IFFALSE 55419
// continue ;
55417: GO 55392
// if weapon in weapons then
55419: LD_VAR 0 8
55423: PUSH
55424: LD_VAR 0 9
55428: IN
55429: IFFALSE 55456
// begin result := [ i , weapon ] ;
55431: LD_ADDR_VAR 0 3
55435: PUSH
55436: LD_VAR 0 4
55440: PUSH
55441: LD_VAR 0 8
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: ST_TO_ADDR
// exit ;
55450: POP
55451: POP
55452: POP
55453: POP
55454: GO 55464
// end ; end ;
55456: GO 55392
55458: POP
55459: POP
// end ;
55460: GO 55278
55462: POP
55463: POP
// end ;
55464: LD_VAR 0 3
55468: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55469: LD_INT 0
55471: PPUSH
// if not side or side > 8 then
55472: LD_VAR 0 3
55476: NOT
55477: PUSH
55478: LD_VAR 0 3
55482: PUSH
55483: LD_INT 8
55485: GREATER
55486: OR
55487: IFFALSE 55491
// exit ;
55489: GO 55550
// if not range then
55491: LD_VAR 0 4
55495: NOT
55496: IFFALSE 55507
// range := - 12 ;
55498: LD_ADDR_VAR 0 4
55502: PUSH
55503: LD_INT 12
55505: NEG
55506: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55507: LD_VAR 0 1
55511: PPUSH
55512: LD_VAR 0 2
55516: PPUSH
55517: LD_VAR 0 3
55521: PPUSH
55522: LD_VAR 0 4
55526: PPUSH
55527: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55531: LD_VAR 0 1
55535: PPUSH
55536: LD_VAR 0 2
55540: PPUSH
55541: LD_VAR 0 3
55545: PPUSH
55546: CALL_OW 331
// end ;
55550: LD_VAR 0 5
55554: RET
// export function Video ( mode ) ; begin
55555: LD_INT 0
55557: PPUSH
// ingame_video = mode ;
55558: LD_ADDR_OWVAR 52
55562: PUSH
55563: LD_VAR 0 1
55567: ST_TO_ADDR
// interface_hidden = mode ;
55568: LD_ADDR_OWVAR 54
55572: PUSH
55573: LD_VAR 0 1
55577: ST_TO_ADDR
// end ;
55578: LD_VAR 0 2
55582: RET
// export function Join ( array , element ) ; begin
55583: LD_INT 0
55585: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55586: LD_ADDR_VAR 0 3
55590: PUSH
55591: LD_VAR 0 1
55595: PPUSH
55596: LD_VAR 0 1
55600: PUSH
55601: LD_INT 1
55603: PLUS
55604: PPUSH
55605: LD_VAR 0 2
55609: PPUSH
55610: CALL_OW 1
55614: ST_TO_ADDR
// end ;
55615: LD_VAR 0 3
55619: RET
// export function JoinUnion ( array , element ) ; begin
55620: LD_INT 0
55622: PPUSH
// result := array union element ;
55623: LD_ADDR_VAR 0 3
55627: PUSH
55628: LD_VAR 0 1
55632: PUSH
55633: LD_VAR 0 2
55637: UNION
55638: ST_TO_ADDR
// end ;
55639: LD_VAR 0 3
55643: RET
// export function GetBehemoths ( side ) ; begin
55644: LD_INT 0
55646: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55647: LD_ADDR_VAR 0 2
55651: PUSH
55652: LD_INT 22
55654: PUSH
55655: LD_VAR 0 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 31
55666: PUSH
55667: LD_INT 25
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PPUSH
55678: CALL_OW 69
55682: ST_TO_ADDR
// end ;
55683: LD_VAR 0 2
55687: RET
// export function Shuffle ( array ) ; var i , index ; begin
55688: LD_INT 0
55690: PPUSH
55691: PPUSH
55692: PPUSH
// result := [ ] ;
55693: LD_ADDR_VAR 0 2
55697: PUSH
55698: EMPTY
55699: ST_TO_ADDR
// if not array then
55700: LD_VAR 0 1
55704: NOT
55705: IFFALSE 55709
// exit ;
55707: GO 55808
// Randomize ;
55709: CALL_OW 10
// for i = array downto 1 do
55713: LD_ADDR_VAR 0 3
55717: PUSH
55718: DOUBLE
55719: LD_VAR 0 1
55723: INC
55724: ST_TO_ADDR
55725: LD_INT 1
55727: PUSH
55728: FOR_DOWNTO
55729: IFFALSE 55806
// begin index := rand ( 1 , array ) ;
55731: LD_ADDR_VAR 0 4
55735: PUSH
55736: LD_INT 1
55738: PPUSH
55739: LD_VAR 0 1
55743: PPUSH
55744: CALL_OW 12
55748: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55749: LD_ADDR_VAR 0 2
55753: PUSH
55754: LD_VAR 0 2
55758: PPUSH
55759: LD_VAR 0 2
55763: PUSH
55764: LD_INT 1
55766: PLUS
55767: PPUSH
55768: LD_VAR 0 1
55772: PUSH
55773: LD_VAR 0 4
55777: ARRAY
55778: PPUSH
55779: CALL_OW 2
55783: ST_TO_ADDR
// array := Delete ( array , index ) ;
55784: LD_ADDR_VAR 0 1
55788: PUSH
55789: LD_VAR 0 1
55793: PPUSH
55794: LD_VAR 0 4
55798: PPUSH
55799: CALL_OW 3
55803: ST_TO_ADDR
// end ;
55804: GO 55728
55806: POP
55807: POP
// end ;
55808: LD_VAR 0 2
55812: RET
// export function GetBaseMaterials ( base ) ; begin
55813: LD_INT 0
55815: PPUSH
// result := [ 0 , 0 , 0 ] ;
55816: LD_ADDR_VAR 0 2
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// if not base then
55835: LD_VAR 0 1
55839: NOT
55840: IFFALSE 55844
// exit ;
55842: GO 55893
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55844: LD_ADDR_VAR 0 2
55848: PUSH
55849: LD_VAR 0 1
55853: PPUSH
55854: LD_INT 1
55856: PPUSH
55857: CALL_OW 275
55861: PUSH
55862: LD_VAR 0 1
55866: PPUSH
55867: LD_INT 2
55869: PPUSH
55870: CALL_OW 275
55874: PUSH
55875: LD_VAR 0 1
55879: PPUSH
55880: LD_INT 3
55882: PPUSH
55883: CALL_OW 275
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: ST_TO_ADDR
// end ;
55893: LD_VAR 0 2
55897: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55898: LD_INT 0
55900: PPUSH
55901: PPUSH
// result := array ;
55902: LD_ADDR_VAR 0 3
55906: PUSH
55907: LD_VAR 0 1
55911: ST_TO_ADDR
// if size > 0 then
55912: LD_VAR 0 2
55916: PUSH
55917: LD_INT 0
55919: GREATER
55920: IFFALSE 55966
// for i := array downto size do
55922: LD_ADDR_VAR 0 4
55926: PUSH
55927: DOUBLE
55928: LD_VAR 0 1
55932: INC
55933: ST_TO_ADDR
55934: LD_VAR 0 2
55938: PUSH
55939: FOR_DOWNTO
55940: IFFALSE 55964
// result := Delete ( result , result ) ;
55942: LD_ADDR_VAR 0 3
55946: PUSH
55947: LD_VAR 0 3
55951: PPUSH
55952: LD_VAR 0 3
55956: PPUSH
55957: CALL_OW 3
55961: ST_TO_ADDR
55962: GO 55939
55964: POP
55965: POP
// end ;
55966: LD_VAR 0 3
55970: RET
// export function ComExit ( unit ) ; var tmp ; begin
55971: LD_INT 0
55973: PPUSH
55974: PPUSH
// if not IsInUnit ( unit ) then
55975: LD_VAR 0 1
55979: PPUSH
55980: CALL_OW 310
55984: NOT
55985: IFFALSE 55989
// exit ;
55987: GO 56049
// tmp := IsInUnit ( unit ) ;
55989: LD_ADDR_VAR 0 3
55993: PUSH
55994: LD_VAR 0 1
55998: PPUSH
55999: CALL_OW 310
56003: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56004: LD_VAR 0 3
56008: PPUSH
56009: CALL_OW 247
56013: PUSH
56014: LD_INT 2
56016: EQUAL
56017: IFFALSE 56030
// ComExitVehicle ( unit ) else
56019: LD_VAR 0 1
56023: PPUSH
56024: CALL_OW 121
56028: GO 56039
// ComExitBuilding ( unit ) ;
56030: LD_VAR 0 1
56034: PPUSH
56035: CALL_OW 122
// result := tmp ;
56039: LD_ADDR_VAR 0 2
56043: PUSH
56044: LD_VAR 0 3
56048: ST_TO_ADDR
// end ;
56049: LD_VAR 0 2
56053: RET
// export function ResetHc ; begin
56054: LD_INT 0
56056: PPUSH
// InitHc ;
56057: CALL_OW 19
// hc_importance := 0 ;
56061: LD_ADDR_OWVAR 32
56065: PUSH
56066: LD_INT 0
56068: ST_TO_ADDR
// end ;
56069: LD_VAR 0 1
56073: RET
