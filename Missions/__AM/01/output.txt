// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4963: LD_INT 0
4965: PPUSH
// if p2 = 100 then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 100
4973: EQUAL
4974: IFFALSE 5923
// begin if not StreamModeActive then
4976: LD_EXP 15
4980: NOT
4981: IFFALSE 4991
// StreamModeActive := true ;
4983: LD_ADDR_EXP 15
4987: PUSH
4988: LD_INT 1
4990: ST_TO_ADDR
// if p3 = 0 then
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 0
4998: EQUAL
4999: IFFALSE 5005
// InitStreamMode ;
5001: CALL 6083 0 0
// if p3 = 1 then
5005: LD_VAR 0 3
5009: PUSH
5010: LD_INT 1
5012: EQUAL
5013: IFFALSE 5023
// sRocket := true ;
5015: LD_ADDR_EXP 20
5019: PUSH
5020: LD_INT 1
5022: ST_TO_ADDR
// if p3 = 2 then
5023: LD_VAR 0 3
5027: PUSH
5028: LD_INT 2
5030: EQUAL
5031: IFFALSE 5041
// sSpeed := true ;
5033: LD_ADDR_EXP 19
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// if p3 = 3 then
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 3
5048: EQUAL
5049: IFFALSE 5059
// sEngine := true ;
5051: LD_ADDR_EXP 21
5055: PUSH
5056: LD_INT 1
5058: ST_TO_ADDR
// if p3 = 4 then
5059: LD_VAR 0 3
5063: PUSH
5064: LD_INT 4
5066: EQUAL
5067: IFFALSE 5077
// sSpec := true ;
5069: LD_ADDR_EXP 18
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// if p3 = 5 then
5077: LD_VAR 0 3
5081: PUSH
5082: LD_INT 5
5084: EQUAL
5085: IFFALSE 5095
// sLevel := true ;
5087: LD_ADDR_EXP 22
5091: PUSH
5092: LD_INT 1
5094: ST_TO_ADDR
// if p3 = 6 then
5095: LD_VAR 0 3
5099: PUSH
5100: LD_INT 6
5102: EQUAL
5103: IFFALSE 5113
// sArmoury := true ;
5105: LD_ADDR_EXP 23
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// if p3 = 7 then
5113: LD_VAR 0 3
5117: PUSH
5118: LD_INT 7
5120: EQUAL
5121: IFFALSE 5131
// sRadar := true ;
5123: LD_ADDR_EXP 24
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// if p3 = 8 then
5131: LD_VAR 0 3
5135: PUSH
5136: LD_INT 8
5138: EQUAL
5139: IFFALSE 5149
// sBunker := true ;
5141: LD_ADDR_EXP 25
5145: PUSH
5146: LD_INT 1
5148: ST_TO_ADDR
// if p3 = 9 then
5149: LD_VAR 0 3
5153: PUSH
5154: LD_INT 9
5156: EQUAL
5157: IFFALSE 5167
// sHack := true ;
5159: LD_ADDR_EXP 26
5163: PUSH
5164: LD_INT 1
5166: ST_TO_ADDR
// if p3 = 10 then
5167: LD_VAR 0 3
5171: PUSH
5172: LD_INT 10
5174: EQUAL
5175: IFFALSE 5185
// sFire := true ;
5177: LD_ADDR_EXP 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// if p3 = 11 then
5185: LD_VAR 0 3
5189: PUSH
5190: LD_INT 11
5192: EQUAL
5193: IFFALSE 5203
// sRefresh := true ;
5195: LD_ADDR_EXP 28
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if p3 = 12 then
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 12
5210: EQUAL
5211: IFFALSE 5221
// sExp := true ;
5213: LD_ADDR_EXP 29
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// if p3 = 13 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 13
5228: EQUAL
5229: IFFALSE 5239
// sDepot := true ;
5231: LD_ADDR_EXP 30
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// if p3 = 14 then
5239: LD_VAR 0 3
5243: PUSH
5244: LD_INT 14
5246: EQUAL
5247: IFFALSE 5257
// sFlag := true ;
5249: LD_ADDR_EXP 31
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// if p3 = 15 then
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 15
5264: EQUAL
5265: IFFALSE 5275
// sKamikadze := true ;
5267: LD_ADDR_EXP 39
5271: PUSH
5272: LD_INT 1
5274: ST_TO_ADDR
// if p3 = 16 then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_INT 16
5282: EQUAL
5283: IFFALSE 5293
// sTroll := true ;
5285: LD_ADDR_EXP 40
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// if p3 = 17 then
5293: LD_VAR 0 3
5297: PUSH
5298: LD_INT 17
5300: EQUAL
5301: IFFALSE 5311
// sSlow := true ;
5303: LD_ADDR_EXP 41
5307: PUSH
5308: LD_INT 1
5310: ST_TO_ADDR
// if p3 = 18 then
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 18
5318: EQUAL
5319: IFFALSE 5329
// sLack := true ;
5321: LD_ADDR_EXP 42
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// if p3 = 19 then
5329: LD_VAR 0 3
5333: PUSH
5334: LD_INT 19
5336: EQUAL
5337: IFFALSE 5347
// sTank := true ;
5339: LD_ADDR_EXP 44
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// if p3 = 20 then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 20
5354: EQUAL
5355: IFFALSE 5365
// sRemote := true ;
5357: LD_ADDR_EXP 45
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// if p3 = 21 then
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 21
5372: EQUAL
5373: IFFALSE 5383
// sPowell := true ;
5375: LD_ADDR_EXP 46
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// if p3 = 22 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 22
5390: EQUAL
5391: IFFALSE 5401
// sTeleport := true ;
5393: LD_ADDR_EXP 49
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// if p3 = 23 then
5401: LD_VAR 0 3
5405: PUSH
5406: LD_INT 23
5408: EQUAL
5409: IFFALSE 5419
// sOilTower := true ;
5411: LD_ADDR_EXP 51
5415: PUSH
5416: LD_INT 1
5418: ST_TO_ADDR
// if p3 = 24 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 24
5426: EQUAL
5427: IFFALSE 5437
// sShovel := true ;
5429: LD_ADDR_EXP 52
5433: PUSH
5434: LD_INT 1
5436: ST_TO_ADDR
// if p3 = 25 then
5437: LD_VAR 0 3
5441: PUSH
5442: LD_INT 25
5444: EQUAL
5445: IFFALSE 5455
// sSheik := true ;
5447: LD_ADDR_EXP 53
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if p3 = 26 then
5455: LD_VAR 0 3
5459: PUSH
5460: LD_INT 26
5462: EQUAL
5463: IFFALSE 5473
// sEarthquake := true ;
5465: LD_ADDR_EXP 55
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// if p3 = 27 then
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 27
5480: EQUAL
5481: IFFALSE 5491
// sAI := true ;
5483: LD_ADDR_EXP 56
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// if p3 = 28 then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 28
5498: EQUAL
5499: IFFALSE 5509
// sCargo := true ;
5501: LD_ADDR_EXP 59
5505: PUSH
5506: LD_INT 1
5508: ST_TO_ADDR
// if p3 = 29 then
5509: LD_VAR 0 3
5513: PUSH
5514: LD_INT 29
5516: EQUAL
5517: IFFALSE 5527
// sDLaser := true ;
5519: LD_ADDR_EXP 60
5523: PUSH
5524: LD_INT 1
5526: ST_TO_ADDR
// if p3 = 30 then
5527: LD_VAR 0 3
5531: PUSH
5532: LD_INT 30
5534: EQUAL
5535: IFFALSE 5545
// sExchange := true ;
5537: LD_ADDR_EXP 61
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// if p3 = 31 then
5545: LD_VAR 0 3
5549: PUSH
5550: LD_INT 31
5552: EQUAL
5553: IFFALSE 5563
// sFac := true ;
5555: LD_ADDR_EXP 62
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// if p3 = 32 then
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 32
5570: EQUAL
5571: IFFALSE 5581
// sPower := true ;
5573: LD_ADDR_EXP 63
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if p3 = 33 then
5581: LD_VAR 0 3
5585: PUSH
5586: LD_INT 33
5588: EQUAL
5589: IFFALSE 5599
// sRandom := true ;
5591: LD_ADDR_EXP 64
5595: PUSH
5596: LD_INT 1
5598: ST_TO_ADDR
// if p3 = 34 then
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 34
5606: EQUAL
5607: IFFALSE 5617
// sShield := true ;
5609: LD_ADDR_EXP 65
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// if p3 = 35 then
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 35
5624: EQUAL
5625: IFFALSE 5635
// sTime := true ;
5627: LD_ADDR_EXP 66
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// if p3 = 36 then
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 36
5642: EQUAL
5643: IFFALSE 5653
// sTools := true ;
5645: LD_ADDR_EXP 67
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// if p3 = 101 then
5653: LD_VAR 0 3
5657: PUSH
5658: LD_INT 101
5660: EQUAL
5661: IFFALSE 5671
// sSold := true ;
5663: LD_ADDR_EXP 32
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// if p3 = 102 then
5671: LD_VAR 0 3
5675: PUSH
5676: LD_INT 102
5678: EQUAL
5679: IFFALSE 5689
// sDiff := true ;
5681: LD_ADDR_EXP 33
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// if p3 = 103 then
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 103
5696: EQUAL
5697: IFFALSE 5707
// sFog := true ;
5699: LD_ADDR_EXP 36
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
// if p3 = 104 then
5707: LD_VAR 0 3
5711: PUSH
5712: LD_INT 104
5714: EQUAL
5715: IFFALSE 5725
// sReset := true ;
5717: LD_ADDR_EXP 37
5721: PUSH
5722: LD_INT 1
5724: ST_TO_ADDR
// if p3 = 105 then
5725: LD_VAR 0 3
5729: PUSH
5730: LD_INT 105
5732: EQUAL
5733: IFFALSE 5743
// sSun := true ;
5735: LD_ADDR_EXP 38
5739: PUSH
5740: LD_INT 1
5742: ST_TO_ADDR
// if p3 = 106 then
5743: LD_VAR 0 3
5747: PUSH
5748: LD_INT 106
5750: EQUAL
5751: IFFALSE 5761
// sTiger := true ;
5753: LD_ADDR_EXP 34
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// if p3 = 107 then
5761: LD_VAR 0 3
5765: PUSH
5766: LD_INT 107
5768: EQUAL
5769: IFFALSE 5779
// sBomb := true ;
5771: LD_ADDR_EXP 35
5775: PUSH
5776: LD_INT 1
5778: ST_TO_ADDR
// if p3 = 108 then
5779: LD_VAR 0 3
5783: PUSH
5784: LD_INT 108
5786: EQUAL
5787: IFFALSE 5797
// sWound := true ;
5789: LD_ADDR_EXP 43
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// if p3 = 109 then
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 109
5804: EQUAL
5805: IFFALSE 5815
// sBetray := true ;
5807: LD_ADDR_EXP 47
5811: PUSH
5812: LD_INT 1
5814: ST_TO_ADDR
// if p3 = 110 then
5815: LD_VAR 0 3
5819: PUSH
5820: LD_INT 110
5822: EQUAL
5823: IFFALSE 5833
// sContamin := true ;
5825: LD_ADDR_EXP 48
5829: PUSH
5830: LD_INT 1
5832: ST_TO_ADDR
// if p3 = 111 then
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 111
5840: EQUAL
5841: IFFALSE 5851
// sOil := true ;
5843: LD_ADDR_EXP 50
5847: PUSH
5848: LD_INT 1
5850: ST_TO_ADDR
// if p3 = 112 then
5851: LD_VAR 0 3
5855: PUSH
5856: LD_INT 112
5858: EQUAL
5859: IFFALSE 5869
// sStu := true ;
5861: LD_ADDR_EXP 54
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// if p3 = 113 then
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 113
5876: EQUAL
5877: IFFALSE 5887
// sBazooka := true ;
5879: LD_ADDR_EXP 57
5883: PUSH
5884: LD_INT 1
5886: ST_TO_ADDR
// if p3 = 114 then
5887: LD_VAR 0 3
5891: PUSH
5892: LD_INT 114
5894: EQUAL
5895: IFFALSE 5905
// sMortar := true ;
5897: LD_ADDR_EXP 58
5901: PUSH
5902: LD_INT 1
5904: ST_TO_ADDR
// if p3 = 115 then
5905: LD_VAR 0 3
5909: PUSH
5910: LD_INT 115
5912: EQUAL
5913: IFFALSE 5923
// sRanger := true ;
5915: LD_ADDR_EXP 68
5919: PUSH
5920: LD_INT 1
5922: ST_TO_ADDR
// end ; if p2 = 101 then
5923: LD_VAR 0 2
5927: PUSH
5928: LD_INT 101
5930: EQUAL
5931: IFFALSE 6059
// begin case p3 of 1 :
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 1
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 5953
5946: POP
// hHackUnlimitedResources ; 2 :
5947: CALL 17096 0 0
5951: GO 6059
5953: LD_INT 2
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5961
5959: GO 5968
5961: POP
// hHackSetLevel10 ; 3 :
5962: CALL 17229 0 0
5966: GO 6059
5968: LD_INT 3
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 5976
5974: GO 5983
5976: POP
// hHackSetLevel10YourUnits ; 4 :
5977: CALL 17314 0 0
5981: GO 6059
5983: LD_INT 4
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5991
5989: GO 5998
5991: POP
// hHackInvincible ; 5 :
5992: CALL 17762 0 0
5996: GO 6059
5998: LD_INT 5
6000: DOUBLE
6001: EQUAL
6002: IFTRUE 6006
6004: GO 6013
6006: POP
// hHackInvisible ; 6 :
6007: CALL 17873 0 0
6011: GO 6059
6013: LD_INT 6
6015: DOUBLE
6016: EQUAL
6017: IFTRUE 6021
6019: GO 6028
6021: POP
// hHackChangeYourSide ; 7 :
6022: CALL 17930 0 0
6026: GO 6059
6028: LD_INT 7
6030: DOUBLE
6031: EQUAL
6032: IFTRUE 6036
6034: GO 6043
6036: POP
// hHackChangeUnitSide ; 8 :
6037: CALL 17972 0 0
6041: GO 6059
6043: LD_INT 8
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6058
6051: POP
// hHackFog ; end ;
6052: CALL 18073 0 0
6056: GO 6059
6058: POP
// end ; end ;
6059: LD_VAR 0 7
6063: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6064: GO 6066
6066: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6067: LD_STRING initStreamRollete();
6069: PPUSH
6070: CALL_OW 559
// InitStreamMode ;
6074: CALL 6083 0 0
// DefineStreamItems ( ) ;
6078: CALL 6523 0 0
// end ;
6082: END
// function InitStreamMode ; begin
6083: LD_INT 0
6085: PPUSH
// streamModeActive := false ;
6086: LD_ADDR_EXP 15
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// normalCounter := 36 ;
6094: LD_ADDR_EXP 16
6098: PUSH
6099: LD_INT 36
6101: ST_TO_ADDR
// hardcoreCounter := 16 ;
6102: LD_ADDR_EXP 17
6106: PUSH
6107: LD_INT 16
6109: ST_TO_ADDR
// sRocket := false ;
6110: LD_ADDR_EXP 20
6114: PUSH
6115: LD_INT 0
6117: ST_TO_ADDR
// sSpeed := false ;
6118: LD_ADDR_EXP 19
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// sEngine := false ;
6126: LD_ADDR_EXP 21
6130: PUSH
6131: LD_INT 0
6133: ST_TO_ADDR
// sSpec := false ;
6134: LD_ADDR_EXP 18
6138: PUSH
6139: LD_INT 0
6141: ST_TO_ADDR
// sLevel := false ;
6142: LD_ADDR_EXP 22
6146: PUSH
6147: LD_INT 0
6149: ST_TO_ADDR
// sArmoury := false ;
6150: LD_ADDR_EXP 23
6154: PUSH
6155: LD_INT 0
6157: ST_TO_ADDR
// sRadar := false ;
6158: LD_ADDR_EXP 24
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// sBunker := false ;
6166: LD_ADDR_EXP 25
6170: PUSH
6171: LD_INT 0
6173: ST_TO_ADDR
// sHack := false ;
6174: LD_ADDR_EXP 26
6178: PUSH
6179: LD_INT 0
6181: ST_TO_ADDR
// sFire := false ;
6182: LD_ADDR_EXP 27
6186: PUSH
6187: LD_INT 0
6189: ST_TO_ADDR
// sRefresh := false ;
6190: LD_ADDR_EXP 28
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// sExp := false ;
6198: LD_ADDR_EXP 29
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// sDepot := false ;
6206: LD_ADDR_EXP 30
6210: PUSH
6211: LD_INT 0
6213: ST_TO_ADDR
// sFlag := false ;
6214: LD_ADDR_EXP 31
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// sKamikadze := false ;
6222: LD_ADDR_EXP 39
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// sTroll := false ;
6230: LD_ADDR_EXP 40
6234: PUSH
6235: LD_INT 0
6237: ST_TO_ADDR
// sSlow := false ;
6238: LD_ADDR_EXP 41
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// sLack := false ;
6246: LD_ADDR_EXP 42
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// sTank := false ;
6254: LD_ADDR_EXP 44
6258: PUSH
6259: LD_INT 0
6261: ST_TO_ADDR
// sRemote := false ;
6262: LD_ADDR_EXP 45
6266: PUSH
6267: LD_INT 0
6269: ST_TO_ADDR
// sPowell := false ;
6270: LD_ADDR_EXP 46
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// sTeleport := false ;
6278: LD_ADDR_EXP 49
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
// sOilTower := false ;
6286: LD_ADDR_EXP 51
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// sShovel := false ;
6294: LD_ADDR_EXP 52
6298: PUSH
6299: LD_INT 0
6301: ST_TO_ADDR
// sSheik := false ;
6302: LD_ADDR_EXP 53
6306: PUSH
6307: LD_INT 0
6309: ST_TO_ADDR
// sEarthquake := false ;
6310: LD_ADDR_EXP 55
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// sAI := false ;
6318: LD_ADDR_EXP 56
6322: PUSH
6323: LD_INT 0
6325: ST_TO_ADDR
// sCargo := false ;
6326: LD_ADDR_EXP 59
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// sDLaser := false ;
6334: LD_ADDR_EXP 60
6338: PUSH
6339: LD_INT 0
6341: ST_TO_ADDR
// sExchange := false ;
6342: LD_ADDR_EXP 61
6346: PUSH
6347: LD_INT 0
6349: ST_TO_ADDR
// sFac := false ;
6350: LD_ADDR_EXP 62
6354: PUSH
6355: LD_INT 0
6357: ST_TO_ADDR
// sPower := false ;
6358: LD_ADDR_EXP 63
6362: PUSH
6363: LD_INT 0
6365: ST_TO_ADDR
// sRandom := false ;
6366: LD_ADDR_EXP 64
6370: PUSH
6371: LD_INT 0
6373: ST_TO_ADDR
// sShield := false ;
6374: LD_ADDR_EXP 65
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// sTime := false ;
6382: LD_ADDR_EXP 66
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// sTools := false ;
6390: LD_ADDR_EXP 67
6394: PUSH
6395: LD_INT 0
6397: ST_TO_ADDR
// sSold := false ;
6398: LD_ADDR_EXP 32
6402: PUSH
6403: LD_INT 0
6405: ST_TO_ADDR
// sDiff := false ;
6406: LD_ADDR_EXP 33
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// sFog := false ;
6414: LD_ADDR_EXP 36
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// sReset := false ;
6422: LD_ADDR_EXP 37
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// sSun := false ;
6430: LD_ADDR_EXP 38
6434: PUSH
6435: LD_INT 0
6437: ST_TO_ADDR
// sTiger := false ;
6438: LD_ADDR_EXP 34
6442: PUSH
6443: LD_INT 0
6445: ST_TO_ADDR
// sBomb := false ;
6446: LD_ADDR_EXP 35
6450: PUSH
6451: LD_INT 0
6453: ST_TO_ADDR
// sWound := false ;
6454: LD_ADDR_EXP 43
6458: PUSH
6459: LD_INT 0
6461: ST_TO_ADDR
// sBetray := false ;
6462: LD_ADDR_EXP 47
6466: PUSH
6467: LD_INT 0
6469: ST_TO_ADDR
// sContamin := false ;
6470: LD_ADDR_EXP 48
6474: PUSH
6475: LD_INT 0
6477: ST_TO_ADDR
// sOil := false ;
6478: LD_ADDR_EXP 50
6482: PUSH
6483: LD_INT 0
6485: ST_TO_ADDR
// sStu := false ;
6486: LD_ADDR_EXP 54
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// sBazooka := false ;
6494: LD_ADDR_EXP 57
6498: PUSH
6499: LD_INT 0
6501: ST_TO_ADDR
// sMortar := false ;
6502: LD_ADDR_EXP 58
6506: PUSH
6507: LD_INT 0
6509: ST_TO_ADDR
// sRanger := false ;
6510: LD_ADDR_EXP 68
6514: PUSH
6515: LD_INT 0
6517: ST_TO_ADDR
// end ;
6518: LD_VAR 0 1
6522: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6523: LD_INT 0
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
6529: PPUSH
// result := [ ] ;
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: EMPTY
6536: ST_TO_ADDR
// if campaign_id = 1 then
6537: LD_OWVAR 69
6541: PUSH
6542: LD_INT 1
6544: EQUAL
6545: IFFALSE 9483
// begin case mission_number of 1 :
6547: LD_OWVAR 70
6551: PUSH
6552: LD_INT 1
6554: DOUBLE
6555: EQUAL
6556: IFTRUE 6560
6558: GO 6624
6560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6561: LD_ADDR_VAR 0 1
6565: PUSH
6566: LD_INT 2
6568: PUSH
6569: LD_INT 4
6571: PUSH
6572: LD_INT 11
6574: PUSH
6575: LD_INT 12
6577: PUSH
6578: LD_INT 15
6580: PUSH
6581: LD_INT 16
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 23
6589: PUSH
6590: LD_INT 26
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 101
6606: PUSH
6607: LD_INT 102
6609: PUSH
6610: LD_INT 106
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: ST_TO_ADDR
6622: GO 9481
6624: LD_INT 2
6626: DOUBLE
6627: EQUAL
6628: IFTRUE 6632
6630: GO 6704
6632: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6633: LD_ADDR_VAR 0 1
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: LD_INT 4
6643: PUSH
6644: LD_INT 11
6646: PUSH
6647: LD_INT 12
6649: PUSH
6650: LD_INT 15
6652: PUSH
6653: LD_INT 16
6655: PUSH
6656: LD_INT 22
6658: PUSH
6659: LD_INT 23
6661: PUSH
6662: LD_INT 26
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 101
6678: PUSH
6679: LD_INT 102
6681: PUSH
6682: LD_INT 105
6684: PUSH
6685: LD_INT 106
6687: PUSH
6688: LD_INT 108
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: ST_TO_ADDR
6702: GO 9481
6704: LD_INT 3
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6712
6710: GO 6788
6712: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: LD_INT 4
6723: PUSH
6724: LD_INT 5
6726: PUSH
6727: LD_INT 11
6729: PUSH
6730: LD_INT 12
6732: PUSH
6733: LD_INT 15
6735: PUSH
6736: LD_INT 16
6738: PUSH
6739: LD_INT 22
6741: PUSH
6742: LD_INT 26
6744: PUSH
6745: LD_INT 36
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 101
6762: PUSH
6763: LD_INT 102
6765: PUSH
6766: LD_INT 105
6768: PUSH
6769: LD_INT 106
6771: PUSH
6772: LD_INT 108
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: ST_TO_ADDR
6786: GO 9481
6788: LD_INT 4
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6796
6794: GO 6880
6796: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6797: LD_ADDR_VAR 0 1
6801: PUSH
6802: LD_INT 2
6804: PUSH
6805: LD_INT 4
6807: PUSH
6808: LD_INT 5
6810: PUSH
6811: LD_INT 8
6813: PUSH
6814: LD_INT 11
6816: PUSH
6817: LD_INT 12
6819: PUSH
6820: LD_INT 15
6822: PUSH
6823: LD_INT 16
6825: PUSH
6826: LD_INT 22
6828: PUSH
6829: LD_INT 23
6831: PUSH
6832: LD_INT 26
6834: PUSH
6835: LD_INT 36
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 101
6854: PUSH
6855: LD_INT 102
6857: PUSH
6858: LD_INT 105
6860: PUSH
6861: LD_INT 106
6863: PUSH
6864: LD_INT 108
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 9481
6880: LD_INT 5
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6988
6888: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6889: LD_ADDR_VAR 0 1
6893: PUSH
6894: LD_INT 2
6896: PUSH
6897: LD_INT 4
6899: PUSH
6900: LD_INT 5
6902: PUSH
6903: LD_INT 6
6905: PUSH
6906: LD_INT 8
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 15
6917: PUSH
6918: LD_INT 16
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_INT 23
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 26
6932: PUSH
6933: LD_INT 36
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 101
6954: PUSH
6955: LD_INT 102
6957: PUSH
6958: LD_INT 105
6960: PUSH
6961: LD_INT 106
6963: PUSH
6964: LD_INT 108
6966: PUSH
6967: LD_INT 109
6969: PUSH
6970: LD_INT 112
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: ST_TO_ADDR
6986: GO 9481
6988: LD_INT 6
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7116
6996: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6997: LD_ADDR_VAR 0 1
7001: PUSH
7002: LD_INT 2
7004: PUSH
7005: LD_INT 4
7007: PUSH
7008: LD_INT 5
7010: PUSH
7011: LD_INT 6
7013: PUSH
7014: LD_INT 8
7016: PUSH
7017: LD_INT 11
7019: PUSH
7020: LD_INT 12
7022: PUSH
7023: LD_INT 15
7025: PUSH
7026: LD_INT 16
7028: PUSH
7029: LD_INT 20
7031: PUSH
7032: LD_INT 21
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 23
7040: PUSH
7041: LD_INT 25
7043: PUSH
7044: LD_INT 26
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: LD_INT 31
7052: PUSH
7053: LD_INT 32
7055: PUSH
7056: LD_INT 36
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 101
7082: PUSH
7083: LD_INT 102
7085: PUSH
7086: LD_INT 105
7088: PUSH
7089: LD_INT 106
7091: PUSH
7092: LD_INT 108
7094: PUSH
7095: LD_INT 109
7097: PUSH
7098: LD_INT 112
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: ST_TO_ADDR
7114: GO 9481
7116: LD_INT 7
7118: DOUBLE
7119: EQUAL
7120: IFTRUE 7124
7122: GO 7224
7124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7125: LD_ADDR_VAR 0 1
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: LD_INT 4
7135: PUSH
7136: LD_INT 5
7138: PUSH
7139: LD_INT 7
7141: PUSH
7142: LD_INT 11
7144: PUSH
7145: LD_INT 12
7147: PUSH
7148: LD_INT 15
7150: PUSH
7151: LD_INT 16
7153: PUSH
7154: LD_INT 20
7156: PUSH
7157: LD_INT 21
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_INT 23
7165: PUSH
7166: LD_INT 25
7168: PUSH
7169: LD_INT 26
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 101
7190: PUSH
7191: LD_INT 102
7193: PUSH
7194: LD_INT 103
7196: PUSH
7197: LD_INT 105
7199: PUSH
7200: LD_INT 106
7202: PUSH
7203: LD_INT 108
7205: PUSH
7206: LD_INT 112
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: ST_TO_ADDR
7222: GO 9481
7224: LD_INT 8
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7360
7232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: LD_INT 4
7243: PUSH
7244: LD_INT 5
7246: PUSH
7247: LD_INT 6
7249: PUSH
7250: LD_INT 7
7252: PUSH
7253: LD_INT 8
7255: PUSH
7256: LD_INT 11
7258: PUSH
7259: LD_INT 12
7261: PUSH
7262: LD_INT 15
7264: PUSH
7265: LD_INT 16
7267: PUSH
7268: LD_INT 20
7270: PUSH
7271: LD_INT 21
7273: PUSH
7274: LD_INT 22
7276: PUSH
7277: LD_INT 23
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 26
7285: PUSH
7286: LD_INT 30
7288: PUSH
7289: LD_INT 31
7291: PUSH
7292: LD_INT 32
7294: PUSH
7295: LD_INT 36
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 101
7322: PUSH
7323: LD_INT 102
7325: PUSH
7326: LD_INT 103
7328: PUSH
7329: LD_INT 105
7331: PUSH
7332: LD_INT 106
7334: PUSH
7335: LD_INT 108
7337: PUSH
7338: LD_INT 109
7340: PUSH
7341: LD_INT 112
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: ST_TO_ADDR
7358: GO 9481
7360: LD_INT 9
7362: DOUBLE
7363: EQUAL
7364: IFTRUE 7368
7366: GO 7504
7368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7369: LD_ADDR_VAR 0 1
7373: PUSH
7374: LD_INT 2
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 6
7385: PUSH
7386: LD_INT 7
7388: PUSH
7389: LD_INT 8
7391: PUSH
7392: LD_INT 11
7394: PUSH
7395: LD_INT 12
7397: PUSH
7398: LD_INT 15
7400: PUSH
7401: LD_INT 16
7403: PUSH
7404: LD_INT 20
7406: PUSH
7407: LD_INT 21
7409: PUSH
7410: LD_INT 22
7412: PUSH
7413: LD_INT 23
7415: PUSH
7416: LD_INT 25
7418: PUSH
7419: LD_INT 26
7421: PUSH
7422: LD_INT 28
7424: PUSH
7425: LD_INT 30
7427: PUSH
7428: LD_INT 31
7430: PUSH
7431: LD_INT 32
7433: PUSH
7434: LD_INT 36
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 101
7462: PUSH
7463: LD_INT 102
7465: PUSH
7466: LD_INT 103
7468: PUSH
7469: LD_INT 105
7471: PUSH
7472: LD_INT 106
7474: PUSH
7475: LD_INT 108
7477: PUSH
7478: LD_INT 109
7480: PUSH
7481: LD_INT 112
7483: PUSH
7484: LD_INT 114
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: ST_TO_ADDR
7502: GO 9481
7504: LD_INT 10
7506: DOUBLE
7507: EQUAL
7508: IFTRUE 7512
7510: GO 7696
7512: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: LD_INT 4
7523: PUSH
7524: LD_INT 5
7526: PUSH
7527: LD_INT 6
7529: PUSH
7530: LD_INT 7
7532: PUSH
7533: LD_INT 8
7535: PUSH
7536: LD_INT 9
7538: PUSH
7539: LD_INT 10
7541: PUSH
7542: LD_INT 11
7544: PUSH
7545: LD_INT 12
7547: PUSH
7548: LD_INT 13
7550: PUSH
7551: LD_INT 14
7553: PUSH
7554: LD_INT 15
7556: PUSH
7557: LD_INT 16
7559: PUSH
7560: LD_INT 17
7562: PUSH
7563: LD_INT 18
7565: PUSH
7566: LD_INT 19
7568: PUSH
7569: LD_INT 20
7571: PUSH
7572: LD_INT 21
7574: PUSH
7575: LD_INT 22
7577: PUSH
7578: LD_INT 23
7580: PUSH
7581: LD_INT 24
7583: PUSH
7584: LD_INT 25
7586: PUSH
7587: LD_INT 26
7589: PUSH
7590: LD_INT 28
7592: PUSH
7593: LD_INT 30
7595: PUSH
7596: LD_INT 31
7598: PUSH
7599: LD_INT 32
7601: PUSH
7602: LD_INT 36
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 101
7638: PUSH
7639: LD_INT 102
7641: PUSH
7642: LD_INT 103
7644: PUSH
7645: LD_INT 104
7647: PUSH
7648: LD_INT 105
7650: PUSH
7651: LD_INT 106
7653: PUSH
7654: LD_INT 107
7656: PUSH
7657: LD_INT 108
7659: PUSH
7660: LD_INT 109
7662: PUSH
7663: LD_INT 110
7665: PUSH
7666: LD_INT 111
7668: PUSH
7669: LD_INT 112
7671: PUSH
7672: LD_INT 114
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: ST_TO_ADDR
7694: GO 9481
7696: LD_INT 11
7698: DOUBLE
7699: EQUAL
7700: IFTRUE 7704
7702: GO 7896
7704: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7705: LD_ADDR_VAR 0 1
7709: PUSH
7710: LD_INT 2
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 4
7718: PUSH
7719: LD_INT 5
7721: PUSH
7722: LD_INT 6
7724: PUSH
7725: LD_INT 7
7727: PUSH
7728: LD_INT 8
7730: PUSH
7731: LD_INT 9
7733: PUSH
7734: LD_INT 10
7736: PUSH
7737: LD_INT 11
7739: PUSH
7740: LD_INT 12
7742: PUSH
7743: LD_INT 13
7745: PUSH
7746: LD_INT 14
7748: PUSH
7749: LD_INT 15
7751: PUSH
7752: LD_INT 16
7754: PUSH
7755: LD_INT 17
7757: PUSH
7758: LD_INT 18
7760: PUSH
7761: LD_INT 19
7763: PUSH
7764: LD_INT 20
7766: PUSH
7767: LD_INT 21
7769: PUSH
7770: LD_INT 22
7772: PUSH
7773: LD_INT 23
7775: PUSH
7776: LD_INT 24
7778: PUSH
7779: LD_INT 25
7781: PUSH
7782: LD_INT 26
7784: PUSH
7785: LD_INT 28
7787: PUSH
7788: LD_INT 30
7790: PUSH
7791: LD_INT 31
7793: PUSH
7794: LD_INT 32
7796: PUSH
7797: LD_INT 34
7799: PUSH
7800: LD_INT 36
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 101
7838: PUSH
7839: LD_INT 102
7841: PUSH
7842: LD_INT 103
7844: PUSH
7845: LD_INT 104
7847: PUSH
7848: LD_INT 105
7850: PUSH
7851: LD_INT 106
7853: PUSH
7854: LD_INT 107
7856: PUSH
7857: LD_INT 108
7859: PUSH
7860: LD_INT 109
7862: PUSH
7863: LD_INT 110
7865: PUSH
7866: LD_INT 111
7868: PUSH
7869: LD_INT 112
7871: PUSH
7872: LD_INT 114
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 9481
7896: LD_INT 12
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 8112
7904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: LD_INT 4
7921: PUSH
7922: LD_INT 5
7924: PUSH
7925: LD_INT 6
7927: PUSH
7928: LD_INT 7
7930: PUSH
7931: LD_INT 8
7933: PUSH
7934: LD_INT 9
7936: PUSH
7937: LD_INT 10
7939: PUSH
7940: LD_INT 11
7942: PUSH
7943: LD_INT 12
7945: PUSH
7946: LD_INT 13
7948: PUSH
7949: LD_INT 14
7951: PUSH
7952: LD_INT 15
7954: PUSH
7955: LD_INT 16
7957: PUSH
7958: LD_INT 17
7960: PUSH
7961: LD_INT 18
7963: PUSH
7964: LD_INT 19
7966: PUSH
7967: LD_INT 20
7969: PUSH
7970: LD_INT 21
7972: PUSH
7973: LD_INT 22
7975: PUSH
7976: LD_INT 23
7978: PUSH
7979: LD_INT 24
7981: PUSH
7982: LD_INT 25
7984: PUSH
7985: LD_INT 26
7987: PUSH
7988: LD_INT 27
7990: PUSH
7991: LD_INT 28
7993: PUSH
7994: LD_INT 30
7996: PUSH
7997: LD_INT 31
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: LD_INT 33
8005: PUSH
8006: LD_INT 34
8008: PUSH
8009: LD_INT 36
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 101
8050: PUSH
8051: LD_INT 102
8053: PUSH
8054: LD_INT 103
8056: PUSH
8057: LD_INT 104
8059: PUSH
8060: LD_INT 105
8062: PUSH
8063: LD_INT 106
8065: PUSH
8066: LD_INT 107
8068: PUSH
8069: LD_INT 108
8071: PUSH
8072: LD_INT 109
8074: PUSH
8075: LD_INT 110
8077: PUSH
8078: LD_INT 111
8080: PUSH
8081: LD_INT 112
8083: PUSH
8084: LD_INT 113
8086: PUSH
8087: LD_INT 114
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: ST_TO_ADDR
8110: GO 9481
8112: LD_INT 13
8114: DOUBLE
8115: EQUAL
8116: IFTRUE 8120
8118: GO 8316
8120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8121: LD_ADDR_VAR 0 1
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 4
8137: PUSH
8138: LD_INT 5
8140: PUSH
8141: LD_INT 8
8143: PUSH
8144: LD_INT 9
8146: PUSH
8147: LD_INT 10
8149: PUSH
8150: LD_INT 11
8152: PUSH
8153: LD_INT 12
8155: PUSH
8156: LD_INT 14
8158: PUSH
8159: LD_INT 15
8161: PUSH
8162: LD_INT 16
8164: PUSH
8165: LD_INT 17
8167: PUSH
8168: LD_INT 18
8170: PUSH
8171: LD_INT 19
8173: PUSH
8174: LD_INT 20
8176: PUSH
8177: LD_INT 21
8179: PUSH
8180: LD_INT 22
8182: PUSH
8183: LD_INT 23
8185: PUSH
8186: LD_INT 24
8188: PUSH
8189: LD_INT 25
8191: PUSH
8192: LD_INT 26
8194: PUSH
8195: LD_INT 27
8197: PUSH
8198: LD_INT 28
8200: PUSH
8201: LD_INT 30
8203: PUSH
8204: LD_INT 31
8206: PUSH
8207: LD_INT 32
8209: PUSH
8210: LD_INT 33
8212: PUSH
8213: LD_INT 34
8215: PUSH
8216: LD_INT 36
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 101
8254: PUSH
8255: LD_INT 102
8257: PUSH
8258: LD_INT 103
8260: PUSH
8261: LD_INT 104
8263: PUSH
8264: LD_INT 105
8266: PUSH
8267: LD_INT 106
8269: PUSH
8270: LD_INT 107
8272: PUSH
8273: LD_INT 108
8275: PUSH
8276: LD_INT 109
8278: PUSH
8279: LD_INT 110
8281: PUSH
8282: LD_INT 111
8284: PUSH
8285: LD_INT 112
8287: PUSH
8288: LD_INT 113
8290: PUSH
8291: LD_INT 114
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: ST_TO_ADDR
8314: GO 9481
8316: LD_INT 14
8318: DOUBLE
8319: EQUAL
8320: IFTRUE 8324
8322: GO 8536
8324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_INT 1
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: LD_INT 5
8344: PUSH
8345: LD_INT 6
8347: PUSH
8348: LD_INT 7
8350: PUSH
8351: LD_INT 8
8353: PUSH
8354: LD_INT 9
8356: PUSH
8357: LD_INT 10
8359: PUSH
8360: LD_INT 11
8362: PUSH
8363: LD_INT 12
8365: PUSH
8366: LD_INT 13
8368: PUSH
8369: LD_INT 14
8371: PUSH
8372: LD_INT 15
8374: PUSH
8375: LD_INT 16
8377: PUSH
8378: LD_INT 17
8380: PUSH
8381: LD_INT 18
8383: PUSH
8384: LD_INT 19
8386: PUSH
8387: LD_INT 20
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_INT 23
8398: PUSH
8399: LD_INT 24
8401: PUSH
8402: LD_INT 25
8404: PUSH
8405: LD_INT 26
8407: PUSH
8408: LD_INT 27
8410: PUSH
8411: LD_INT 28
8413: PUSH
8414: LD_INT 29
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 31
8422: PUSH
8423: LD_INT 32
8425: PUSH
8426: LD_INT 33
8428: PUSH
8429: LD_INT 34
8431: PUSH
8432: LD_INT 36
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 101
8474: PUSH
8475: LD_INT 102
8477: PUSH
8478: LD_INT 103
8480: PUSH
8481: LD_INT 104
8483: PUSH
8484: LD_INT 105
8486: PUSH
8487: LD_INT 106
8489: PUSH
8490: LD_INT 107
8492: PUSH
8493: LD_INT 108
8495: PUSH
8496: LD_INT 109
8498: PUSH
8499: LD_INT 110
8501: PUSH
8502: LD_INT 111
8504: PUSH
8505: LD_INT 112
8507: PUSH
8508: LD_INT 113
8510: PUSH
8511: LD_INT 114
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: ST_TO_ADDR
8534: GO 9481
8536: LD_INT 15
8538: DOUBLE
8539: EQUAL
8540: IFTRUE 8544
8542: GO 8756
8544: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8545: LD_ADDR_VAR 0 1
8549: PUSH
8550: LD_INT 1
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 4
8561: PUSH
8562: LD_INT 5
8564: PUSH
8565: LD_INT 6
8567: PUSH
8568: LD_INT 7
8570: PUSH
8571: LD_INT 8
8573: PUSH
8574: LD_INT 9
8576: PUSH
8577: LD_INT 10
8579: PUSH
8580: LD_INT 11
8582: PUSH
8583: LD_INT 12
8585: PUSH
8586: LD_INT 13
8588: PUSH
8589: LD_INT 14
8591: PUSH
8592: LD_INT 15
8594: PUSH
8595: LD_INT 16
8597: PUSH
8598: LD_INT 17
8600: PUSH
8601: LD_INT 18
8603: PUSH
8604: LD_INT 19
8606: PUSH
8607: LD_INT 20
8609: PUSH
8610: LD_INT 21
8612: PUSH
8613: LD_INT 22
8615: PUSH
8616: LD_INT 23
8618: PUSH
8619: LD_INT 24
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 26
8627: PUSH
8628: LD_INT 27
8630: PUSH
8631: LD_INT 28
8633: PUSH
8634: LD_INT 29
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 31
8642: PUSH
8643: LD_INT 32
8645: PUSH
8646: LD_INT 33
8648: PUSH
8649: LD_INT 34
8651: PUSH
8652: LD_INT 36
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 101
8694: PUSH
8695: LD_INT 102
8697: PUSH
8698: LD_INT 103
8700: PUSH
8701: LD_INT 104
8703: PUSH
8704: LD_INT 105
8706: PUSH
8707: LD_INT 106
8709: PUSH
8710: LD_INT 107
8712: PUSH
8713: LD_INT 108
8715: PUSH
8716: LD_INT 109
8718: PUSH
8719: LD_INT 110
8721: PUSH
8722: LD_INT 111
8724: PUSH
8725: LD_INT 112
8727: PUSH
8728: LD_INT 113
8730: PUSH
8731: LD_INT 114
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: ST_TO_ADDR
8754: GO 9481
8756: LD_INT 16
8758: DOUBLE
8759: EQUAL
8760: IFTRUE 8764
8762: GO 8888
8764: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: LD_INT 2
8772: PUSH
8773: LD_INT 4
8775: PUSH
8776: LD_INT 5
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: LD_INT 11
8784: PUSH
8785: LD_INT 12
8787: PUSH
8788: LD_INT 15
8790: PUSH
8791: LD_INT 16
8793: PUSH
8794: LD_INT 20
8796: PUSH
8797: LD_INT 21
8799: PUSH
8800: LD_INT 22
8802: PUSH
8803: LD_INT 23
8805: PUSH
8806: LD_INT 25
8808: PUSH
8809: LD_INT 26
8811: PUSH
8812: LD_INT 30
8814: PUSH
8815: LD_INT 31
8817: PUSH
8818: LD_INT 32
8820: PUSH
8821: LD_INT 33
8823: PUSH
8824: LD_INT 34
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 101
8850: PUSH
8851: LD_INT 102
8853: PUSH
8854: LD_INT 103
8856: PUSH
8857: LD_INT 106
8859: PUSH
8860: LD_INT 108
8862: PUSH
8863: LD_INT 112
8865: PUSH
8866: LD_INT 113
8868: PUSH
8869: LD_INT 114
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: ST_TO_ADDR
8886: GO 9481
8888: LD_INT 17
8890: DOUBLE
8891: EQUAL
8892: IFTRUE 8896
8894: GO 9108
8896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8897: LD_ADDR_VAR 0 1
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: LD_INT 4
8913: PUSH
8914: LD_INT 5
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: LD_INT 7
8922: PUSH
8923: LD_INT 8
8925: PUSH
8926: LD_INT 9
8928: PUSH
8929: LD_INT 10
8931: PUSH
8932: LD_INT 11
8934: PUSH
8935: LD_INT 12
8937: PUSH
8938: LD_INT 13
8940: PUSH
8941: LD_INT 14
8943: PUSH
8944: LD_INT 15
8946: PUSH
8947: LD_INT 16
8949: PUSH
8950: LD_INT 17
8952: PUSH
8953: LD_INT 18
8955: PUSH
8956: LD_INT 19
8958: PUSH
8959: LD_INT 20
8961: PUSH
8962: LD_INT 21
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 23
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 26
8979: PUSH
8980: LD_INT 27
8982: PUSH
8983: LD_INT 28
8985: PUSH
8986: LD_INT 29
8988: PUSH
8989: LD_INT 30
8991: PUSH
8992: LD_INT 31
8994: PUSH
8995: LD_INT 32
8997: PUSH
8998: LD_INT 33
9000: PUSH
9001: LD_INT 34
9003: PUSH
9004: LD_INT 36
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 101
9046: PUSH
9047: LD_INT 102
9049: PUSH
9050: LD_INT 103
9052: PUSH
9053: LD_INT 104
9055: PUSH
9056: LD_INT 105
9058: PUSH
9059: LD_INT 106
9061: PUSH
9062: LD_INT 107
9064: PUSH
9065: LD_INT 108
9067: PUSH
9068: LD_INT 109
9070: PUSH
9071: LD_INT 110
9073: PUSH
9074: LD_INT 111
9076: PUSH
9077: LD_INT 112
9079: PUSH
9080: LD_INT 113
9082: PUSH
9083: LD_INT 114
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: ST_TO_ADDR
9106: GO 9481
9108: LD_INT 18
9110: DOUBLE
9111: EQUAL
9112: IFTRUE 9116
9114: GO 9252
9116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9117: LD_ADDR_VAR 0 1
9121: PUSH
9122: LD_INT 2
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: LD_INT 5
9130: PUSH
9131: LD_INT 7
9133: PUSH
9134: LD_INT 11
9136: PUSH
9137: LD_INT 12
9139: PUSH
9140: LD_INT 15
9142: PUSH
9143: LD_INT 16
9145: PUSH
9146: LD_INT 20
9148: PUSH
9149: LD_INT 21
9151: PUSH
9152: LD_INT 22
9154: PUSH
9155: LD_INT 23
9157: PUSH
9158: LD_INT 25
9160: PUSH
9161: LD_INT 26
9163: PUSH
9164: LD_INT 30
9166: PUSH
9167: LD_INT 31
9169: PUSH
9170: LD_INT 32
9172: PUSH
9173: LD_INT 33
9175: PUSH
9176: LD_INT 34
9178: PUSH
9179: LD_INT 35
9181: PUSH
9182: LD_INT 36
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 101
9210: PUSH
9211: LD_INT 102
9213: PUSH
9214: LD_INT 103
9216: PUSH
9217: LD_INT 106
9219: PUSH
9220: LD_INT 108
9222: PUSH
9223: LD_INT 112
9225: PUSH
9226: LD_INT 113
9228: PUSH
9229: LD_INT 114
9231: PUSH
9232: LD_INT 115
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: ST_TO_ADDR
9250: GO 9481
9252: LD_INT 19
9254: DOUBLE
9255: EQUAL
9256: IFTRUE 9260
9258: GO 9480
9260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9261: LD_ADDR_VAR 0 1
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: LD_INT 3
9274: PUSH
9275: LD_INT 4
9277: PUSH
9278: LD_INT 5
9280: PUSH
9281: LD_INT 6
9283: PUSH
9284: LD_INT 7
9286: PUSH
9287: LD_INT 8
9289: PUSH
9290: LD_INT 9
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: LD_INT 11
9298: PUSH
9299: LD_INT 12
9301: PUSH
9302: LD_INT 13
9304: PUSH
9305: LD_INT 14
9307: PUSH
9308: LD_INT 15
9310: PUSH
9311: LD_INT 16
9313: PUSH
9314: LD_INT 17
9316: PUSH
9317: LD_INT 18
9319: PUSH
9320: LD_INT 19
9322: PUSH
9323: LD_INT 20
9325: PUSH
9326: LD_INT 21
9328: PUSH
9329: LD_INT 22
9331: PUSH
9332: LD_INT 23
9334: PUSH
9335: LD_INT 24
9337: PUSH
9338: LD_INT 25
9340: PUSH
9341: LD_INT 26
9343: PUSH
9344: LD_INT 27
9346: PUSH
9347: LD_INT 28
9349: PUSH
9350: LD_INT 29
9352: PUSH
9353: LD_INT 30
9355: PUSH
9356: LD_INT 31
9358: PUSH
9359: LD_INT 32
9361: PUSH
9362: LD_INT 33
9364: PUSH
9365: LD_INT 34
9367: PUSH
9368: LD_INT 35
9370: PUSH
9371: LD_INT 36
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 101
9414: PUSH
9415: LD_INT 102
9417: PUSH
9418: LD_INT 103
9420: PUSH
9421: LD_INT 104
9423: PUSH
9424: LD_INT 105
9426: PUSH
9427: LD_INT 106
9429: PUSH
9430: LD_INT 107
9432: PUSH
9433: LD_INT 108
9435: PUSH
9436: LD_INT 109
9438: PUSH
9439: LD_INT 110
9441: PUSH
9442: LD_INT 111
9444: PUSH
9445: LD_INT 112
9447: PUSH
9448: LD_INT 113
9450: PUSH
9451: LD_INT 114
9453: PUSH
9454: LD_INT 115
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: ST_TO_ADDR
9478: GO 9481
9480: POP
// end else
9481: GO 9700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9483: LD_ADDR_VAR 0 1
9487: PUSH
9488: LD_INT 1
9490: PUSH
9491: LD_INT 2
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: LD_INT 4
9499: PUSH
9500: LD_INT 5
9502: PUSH
9503: LD_INT 6
9505: PUSH
9506: LD_INT 7
9508: PUSH
9509: LD_INT 8
9511: PUSH
9512: LD_INT 9
9514: PUSH
9515: LD_INT 10
9517: PUSH
9518: LD_INT 11
9520: PUSH
9521: LD_INT 12
9523: PUSH
9524: LD_INT 13
9526: PUSH
9527: LD_INT 14
9529: PUSH
9530: LD_INT 15
9532: PUSH
9533: LD_INT 16
9535: PUSH
9536: LD_INT 17
9538: PUSH
9539: LD_INT 18
9541: PUSH
9542: LD_INT 19
9544: PUSH
9545: LD_INT 20
9547: PUSH
9548: LD_INT 21
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_INT 23
9556: PUSH
9557: LD_INT 24
9559: PUSH
9560: LD_INT 25
9562: PUSH
9563: LD_INT 26
9565: PUSH
9566: LD_INT 27
9568: PUSH
9569: LD_INT 28
9571: PUSH
9572: LD_INT 29
9574: PUSH
9575: LD_INT 30
9577: PUSH
9578: LD_INT 31
9580: PUSH
9581: LD_INT 32
9583: PUSH
9584: LD_INT 33
9586: PUSH
9587: LD_INT 34
9589: PUSH
9590: LD_INT 35
9592: PUSH
9593: LD_INT 36
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 101
9636: PUSH
9637: LD_INT 102
9639: PUSH
9640: LD_INT 103
9642: PUSH
9643: LD_INT 104
9645: PUSH
9646: LD_INT 105
9648: PUSH
9649: LD_INT 106
9651: PUSH
9652: LD_INT 107
9654: PUSH
9655: LD_INT 108
9657: PUSH
9658: LD_INT 109
9660: PUSH
9661: LD_INT 110
9663: PUSH
9664: LD_INT 111
9666: PUSH
9667: LD_INT 112
9669: PUSH
9670: LD_INT 113
9672: PUSH
9673: LD_INT 114
9675: PUSH
9676: LD_INT 115
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: ST_TO_ADDR
// if result then
9700: LD_VAR 0 1
9704: IFFALSE 9993
// begin normal :=  ;
9706: LD_ADDR_VAR 0 3
9710: PUSH
9711: LD_STRING 
9713: ST_TO_ADDR
// hardcore :=  ;
9714: LD_ADDR_VAR 0 4
9718: PUSH
9719: LD_STRING 
9721: ST_TO_ADDR
// for i = 1 to normalCounter do
9722: LD_ADDR_VAR 0 5
9726: PUSH
9727: DOUBLE
9728: LD_INT 1
9730: DEC
9731: ST_TO_ADDR
9732: LD_EXP 16
9736: PUSH
9737: FOR_TO
9738: IFFALSE 9839
// begin tmp := 0 ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_STRING 0
9747: ST_TO_ADDR
// if result [ 1 ] then
9748: LD_VAR 0 1
9752: PUSH
9753: LD_INT 1
9755: ARRAY
9756: IFFALSE 9821
// if result [ 1 ] [ 1 ] = i then
9758: LD_VAR 0 1
9762: PUSH
9763: LD_INT 1
9765: ARRAY
9766: PUSH
9767: LD_INT 1
9769: ARRAY
9770: PUSH
9771: LD_VAR 0 5
9775: EQUAL
9776: IFFALSE 9821
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9778: LD_ADDR_VAR 0 1
9782: PUSH
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: LD_VAR 0 1
9795: PUSH
9796: LD_INT 1
9798: ARRAY
9799: PPUSH
9800: LD_INT 1
9802: PPUSH
9803: CALL_OW 3
9807: PPUSH
9808: CALL_OW 1
9812: ST_TO_ADDR
// tmp := 1 ;
9813: LD_ADDR_VAR 0 2
9817: PUSH
9818: LD_STRING 1
9820: ST_TO_ADDR
// end ; normal := normal & tmp ;
9821: LD_ADDR_VAR 0 3
9825: PUSH
9826: LD_VAR 0 3
9830: PUSH
9831: LD_VAR 0 2
9835: STR
9836: ST_TO_ADDR
// end ;
9837: GO 9737
9839: POP
9840: POP
// for i = 1 to hardcoreCounter do
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: DOUBLE
9847: LD_INT 1
9849: DEC
9850: ST_TO_ADDR
9851: LD_EXP 17
9855: PUSH
9856: FOR_TO
9857: IFFALSE 9962
// begin tmp := 0 ;
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: LD_STRING 0
9866: ST_TO_ADDR
// if result [ 2 ] then
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 2
9874: ARRAY
9875: IFFALSE 9944
// if result [ 2 ] [ 1 ] = 100 + i then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_INT 2
9884: ARRAY
9885: PUSH
9886: LD_INT 1
9888: ARRAY
9889: PUSH
9890: LD_INT 100
9892: PUSH
9893: LD_VAR 0 5
9897: PLUS
9898: EQUAL
9899: IFFALSE 9944
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9901: LD_ADDR_VAR 0 1
9905: PUSH
9906: LD_VAR 0 1
9910: PPUSH
9911: LD_INT 2
9913: PPUSH
9914: LD_VAR 0 1
9918: PUSH
9919: LD_INT 2
9921: ARRAY
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL_OW 3
9930: PPUSH
9931: CALL_OW 1
9935: ST_TO_ADDR
// tmp := 1 ;
9936: LD_ADDR_VAR 0 2
9940: PUSH
9941: LD_STRING 1
9943: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9944: LD_ADDR_VAR 0 4
9948: PUSH
9949: LD_VAR 0 4
9953: PUSH
9954: LD_VAR 0 2
9958: STR
9959: ST_TO_ADDR
// end ;
9960: GO 9856
9962: POP
9963: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9964: LD_STRING getStreamItemsFromMission("
9966: PUSH
9967: LD_VAR 0 3
9971: STR
9972: PUSH
9973: LD_STRING ","
9975: STR
9976: PUSH
9977: LD_VAR 0 4
9981: STR
9982: PUSH
9983: LD_STRING ")
9985: STR
9986: PPUSH
9987: CALL_OW 559
// end else
9991: GO 10000
// ToLua ( getStreamItemsFromMission("","") ) ;
9993: LD_STRING getStreamItemsFromMission("","")
9995: PPUSH
9996: CALL_OW 559
// end ;
10000: LD_VAR 0 1
10004: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10005: LD_EXP 15
10009: PUSH
10010: LD_EXP 20
10014: AND
10015: IFFALSE 10139
10017: GO 10019
10019: DISABLE
10020: LD_INT 0
10022: PPUSH
10023: PPUSH
// begin enable ;
10024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10025: LD_ADDR_VAR 0 2
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_OWVAR 2
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: LD_INT 34
10047: PUSH
10048: LD_INT 7
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 45
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 34
10067: PUSH
10068: LD_INT 28
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 34
10077: PUSH
10078: LD_INT 47
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 69
10100: ST_TO_ADDR
// if not tmp then
10101: LD_VAR 0 2
10105: NOT
10106: IFFALSE 10110
// exit ;
10108: GO 10139
// for i in tmp do
10110: LD_ADDR_VAR 0 1
10114: PUSH
10115: LD_VAR 0 2
10119: PUSH
10120: FOR_IN
10121: IFFALSE 10137
// begin SetLives ( i , 0 ) ;
10123: LD_VAR 0 1
10127: PPUSH
10128: LD_INT 0
10130: PPUSH
10131: CALL_OW 234
// end ;
10135: GO 10120
10137: POP
10138: POP
// end ;
10139: PPOPN 2
10141: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10142: LD_EXP 15
10146: PUSH
10147: LD_EXP 21
10151: AND
10152: IFFALSE 10236
10154: GO 10156
10156: DISABLE
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
// begin enable ;
10161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_OWVAR 2
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 32
10181: PUSH
10182: LD_INT 3
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PPUSH
10193: CALL_OW 69
10197: ST_TO_ADDR
// if not tmp then
10198: LD_VAR 0 2
10202: NOT
10203: IFFALSE 10207
// exit ;
10205: GO 10236
// for i in tmp do
10207: LD_ADDR_VAR 0 1
10211: PUSH
10212: LD_VAR 0 2
10216: PUSH
10217: FOR_IN
10218: IFFALSE 10234
// begin SetLives ( i , 0 ) ;
10220: LD_VAR 0 1
10224: PPUSH
10225: LD_INT 0
10227: PPUSH
10228: CALL_OW 234
// end ;
10232: GO 10217
10234: POP
10235: POP
// end ;
10236: PPOPN 2
10238: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10239: LD_EXP 15
10243: PUSH
10244: LD_EXP 18
10248: AND
10249: IFFALSE 10342
10251: GO 10253
10253: DISABLE
10254: LD_INT 0
10256: PPUSH
// begin enable ;
10257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10258: LD_ADDR_VAR 0 1
10262: PUSH
10263: LD_INT 22
10265: PUSH
10266: LD_OWVAR 2
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: LD_INT 25
10280: PUSH
10281: LD_INT 5
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 25
10290: PUSH
10291: LD_INT 9
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 25
10300: PUSH
10301: LD_INT 8
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: PUSH
10323: FOR_IN
10324: IFFALSE 10340
// begin SetClass ( i , 1 ) ;
10326: LD_VAR 0 1
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 336
// end ;
10338: GO 10323
10340: POP
10341: POP
// end ;
10342: PPOPN 1
10344: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10345: LD_EXP 15
10349: PUSH
10350: LD_EXP 19
10354: AND
10355: PUSH
10356: LD_OWVAR 65
10360: PUSH
10361: LD_INT 7
10363: LESS
10364: AND
10365: IFFALSE 10379
10367: GO 10369
10369: DISABLE
// begin enable ;
10370: ENABLE
// game_speed := 7 ;
10371: LD_ADDR_OWVAR 65
10375: PUSH
10376: LD_INT 7
10378: ST_TO_ADDR
// end ;
10379: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10380: LD_EXP 15
10384: PUSH
10385: LD_EXP 22
10389: AND
10390: IFFALSE 10592
10392: GO 10394
10394: DISABLE
10395: LD_INT 0
10397: PPUSH
10398: PPUSH
10399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10400: LD_ADDR_VAR 0 3
10404: PUSH
10405: LD_INT 81
10407: PUSH
10408: LD_OWVAR 2
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 21
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 69
10435: ST_TO_ADDR
// if not tmp then
10436: LD_VAR 0 3
10440: NOT
10441: IFFALSE 10445
// exit ;
10443: GO 10592
// if tmp > 5 then
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 5
10452: GREATER
10453: IFFALSE 10465
// k := 5 else
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: LD_INT 5
10462: ST_TO_ADDR
10463: GO 10475
// k := tmp ;
10465: LD_ADDR_VAR 0 2
10469: PUSH
10470: LD_VAR 0 3
10474: ST_TO_ADDR
// for i := 1 to k do
10475: LD_ADDR_VAR 0 1
10479: PUSH
10480: DOUBLE
10481: LD_INT 1
10483: DEC
10484: ST_TO_ADDR
10485: LD_VAR 0 2
10489: PUSH
10490: FOR_TO
10491: IFFALSE 10590
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10493: LD_VAR 0 3
10497: PUSH
10498: LD_VAR 0 1
10502: ARRAY
10503: PPUSH
10504: LD_VAR 0 1
10508: PUSH
10509: LD_INT 4
10511: MOD
10512: PUSH
10513: LD_INT 1
10515: PLUS
10516: PPUSH
10517: CALL_OW 259
10521: PUSH
10522: LD_INT 10
10524: LESS
10525: IFFALSE 10588
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10527: LD_VAR 0 3
10531: PUSH
10532: LD_VAR 0 1
10536: ARRAY
10537: PPUSH
10538: LD_VAR 0 1
10542: PUSH
10543: LD_INT 4
10545: MOD
10546: PUSH
10547: LD_INT 1
10549: PLUS
10550: PPUSH
10551: LD_VAR 0 3
10555: PUSH
10556: LD_VAR 0 1
10560: ARRAY
10561: PPUSH
10562: LD_VAR 0 1
10566: PUSH
10567: LD_INT 4
10569: MOD
10570: PUSH
10571: LD_INT 1
10573: PLUS
10574: PPUSH
10575: CALL_OW 259
10579: PUSH
10580: LD_INT 1
10582: PLUS
10583: PPUSH
10584: CALL_OW 237
10588: GO 10490
10590: POP
10591: POP
// end ;
10592: PPOPN 3
10594: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10595: LD_EXP 15
10599: PUSH
10600: LD_EXP 23
10604: AND
10605: IFFALSE 10625
10607: GO 10609
10609: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10610: LD_INT 4
10612: PPUSH
10613: LD_OWVAR 2
10617: PPUSH
10618: LD_INT 0
10620: PPUSH
10621: CALL_OW 324
10625: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10626: LD_EXP 15
10630: PUSH
10631: LD_EXP 52
10635: AND
10636: IFFALSE 10656
10638: GO 10640
10640: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10641: LD_INT 19
10643: PPUSH
10644: LD_OWVAR 2
10648: PPUSH
10649: LD_INT 0
10651: PPUSH
10652: CALL_OW 324
10656: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10657: LD_EXP 15
10661: PUSH
10662: LD_EXP 24
10666: AND
10667: IFFALSE 10769
10669: GO 10671
10671: DISABLE
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
// begin enable ;
10676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_OWVAR 2
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 34
10699: PUSH
10700: LD_INT 11
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 34
10709: PUSH
10710: LD_INT 30
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: ST_TO_ADDR
// if not tmp then
10731: LD_VAR 0 2
10735: NOT
10736: IFFALSE 10740
// exit ;
10738: GO 10769
// for i in tmp do
10740: LD_ADDR_VAR 0 1
10744: PUSH
10745: LD_VAR 0 2
10749: PUSH
10750: FOR_IN
10751: IFFALSE 10767
// begin SetLives ( i , 0 ) ;
10753: LD_VAR 0 1
10757: PPUSH
10758: LD_INT 0
10760: PPUSH
10761: CALL_OW 234
// end ;
10765: GO 10750
10767: POP
10768: POP
// end ;
10769: PPOPN 2
10771: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10772: LD_EXP 15
10776: PUSH
10777: LD_EXP 25
10781: AND
10782: IFFALSE 10802
10784: GO 10786
10786: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10787: LD_INT 32
10789: PPUSH
10790: LD_OWVAR 2
10794: PPUSH
10795: LD_INT 0
10797: PPUSH
10798: CALL_OW 324
10802: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10803: LD_EXP 15
10807: PUSH
10808: LD_EXP 26
10812: AND
10813: IFFALSE 10994
10815: GO 10817
10817: DISABLE
10818: LD_INT 0
10820: PPUSH
10821: PPUSH
10822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_INT 22
10830: PUSH
10831: LD_OWVAR 2
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 33
10842: PUSH
10843: LD_INT 3
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: ST_TO_ADDR
// if not tmp then
10859: LD_VAR 0 2
10863: NOT
10864: IFFALSE 10868
// exit ;
10866: GO 10994
// side := 0 ;
10868: LD_ADDR_VAR 0 3
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// for i := 1 to 8 do
10876: LD_ADDR_VAR 0 1
10880: PUSH
10881: DOUBLE
10882: LD_INT 1
10884: DEC
10885: ST_TO_ADDR
10886: LD_INT 8
10888: PUSH
10889: FOR_TO
10890: IFFALSE 10938
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10892: LD_OWVAR 2
10896: PUSH
10897: LD_VAR 0 1
10901: NONEQUAL
10902: PUSH
10903: LD_OWVAR 2
10907: PPUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 81
10917: PUSH
10918: LD_INT 2
10920: EQUAL
10921: AND
10922: IFFALSE 10936
// begin side := i ;
10924: LD_ADDR_VAR 0 3
10928: PUSH
10929: LD_VAR 0 1
10933: ST_TO_ADDR
// break ;
10934: GO 10938
// end ;
10936: GO 10889
10938: POP
10939: POP
// if not side then
10940: LD_VAR 0 3
10944: NOT
10945: IFFALSE 10949
// exit ;
10947: GO 10994
// for i := 1 to tmp do
10949: LD_ADDR_VAR 0 1
10953: PUSH
10954: DOUBLE
10955: LD_INT 1
10957: DEC
10958: ST_TO_ADDR
10959: LD_VAR 0 2
10963: PUSH
10964: FOR_TO
10965: IFFALSE 10992
// if Prob ( 60 ) then
10967: LD_INT 60
10969: PPUSH
10970: CALL_OW 13
10974: IFFALSE 10990
// SetSide ( i , side ) ;
10976: LD_VAR 0 1
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: CALL_OW 235
10990: GO 10964
10992: POP
10993: POP
// end ;
10994: PPOPN 3
10996: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10997: LD_EXP 15
11001: PUSH
11002: LD_EXP 28
11006: AND
11007: IFFALSE 11126
11009: GO 11011
11011: DISABLE
11012: LD_INT 0
11014: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11015: LD_ADDR_VAR 0 1
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_OWVAR 2
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 21
11034: PUSH
11035: LD_INT 1
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: LD_INT 23
11047: PUSH
11048: LD_INT 0
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: PUSH
11069: FOR_IN
11070: IFFALSE 11124
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11072: LD_VAR 0 1
11076: PPUSH
11077: CALL_OW 257
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 3
11090: PUSH
11091: LD_INT 4
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: IN
11100: IFFALSE 11122
// SetClass ( un , rand ( 1 , 4 ) ) ;
11102: LD_VAR 0 1
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: LD_INT 4
11112: PPUSH
11113: CALL_OW 12
11117: PPUSH
11118: CALL_OW 336
11122: GO 11069
11124: POP
11125: POP
// end ;
11126: PPOPN 1
11128: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11129: LD_EXP 15
11133: PUSH
11134: LD_EXP 27
11138: AND
11139: IFFALSE 11218
11141: GO 11143
11143: DISABLE
11144: LD_INT 0
11146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11147: LD_ADDR_VAR 0 1
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_OWVAR 2
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 21
11166: PUSH
11167: LD_INT 3
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: ST_TO_ADDR
// if not tmp then
11183: LD_VAR 0 1
11187: NOT
11188: IFFALSE 11192
// exit ;
11190: GO 11218
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11192: LD_VAR 0 1
11196: PUSH
11197: LD_INT 1
11199: PPUSH
11200: LD_VAR 0 1
11204: PPUSH
11205: CALL_OW 12
11209: ARRAY
11210: PPUSH
11211: LD_INT 100
11213: PPUSH
11214: CALL_OW 234
// end ;
11218: PPOPN 1
11220: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11221: LD_EXP 15
11225: PUSH
11226: LD_EXP 29
11230: AND
11231: IFFALSE 11329
11233: GO 11235
11235: DISABLE
11236: LD_INT 0
11238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_INT 22
11246: PUSH
11247: LD_OWVAR 2
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 21
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: ST_TO_ADDR
// if not tmp then
11275: LD_VAR 0 1
11279: NOT
11280: IFFALSE 11284
// exit ;
11282: GO 11329
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11284: LD_VAR 0 1
11288: PUSH
11289: LD_INT 1
11291: PPUSH
11292: LD_VAR 0 1
11296: PPUSH
11297: CALL_OW 12
11301: ARRAY
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: LD_INT 4
11308: PPUSH
11309: CALL_OW 12
11313: PPUSH
11314: LD_INT 3000
11316: PPUSH
11317: LD_INT 9000
11319: PPUSH
11320: CALL_OW 12
11324: PPUSH
11325: CALL_OW 492
// end ;
11329: PPOPN 1
11331: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11332: LD_EXP 15
11336: PUSH
11337: LD_EXP 30
11341: AND
11342: IFFALSE 11362
11344: GO 11346
11346: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11347: LD_INT 1
11349: PPUSH
11350: LD_OWVAR 2
11354: PPUSH
11355: LD_INT 0
11357: PPUSH
11358: CALL_OW 324
11362: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11363: LD_EXP 15
11367: PUSH
11368: LD_EXP 31
11372: AND
11373: IFFALSE 11456
11375: GO 11377
11377: DISABLE
11378: LD_INT 0
11380: PPUSH
11381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11382: LD_ADDR_VAR 0 2
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_OWVAR 2
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 21
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 69
11417: ST_TO_ADDR
// if not tmp then
11418: LD_VAR 0 2
11422: NOT
11423: IFFALSE 11427
// exit ;
11425: GO 11456
// for i in tmp do
11427: LD_ADDR_VAR 0 1
11431: PUSH
11432: LD_VAR 0 2
11436: PUSH
11437: FOR_IN
11438: IFFALSE 11454
// SetBLevel ( i , 10 ) ;
11440: LD_VAR 0 1
11444: PPUSH
11445: LD_INT 10
11447: PPUSH
11448: CALL_OW 241
11452: GO 11437
11454: POP
11455: POP
// end ;
11456: PPOPN 2
11458: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11459: LD_EXP 15
11463: PUSH
11464: LD_EXP 32
11468: AND
11469: IFFALSE 11580
11471: GO 11473
11473: DISABLE
11474: LD_INT 0
11476: PPUSH
11477: PPUSH
11478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: LD_OWVAR 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 25
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: ST_TO_ADDR
// if not tmp then
11515: LD_VAR 0 3
11519: NOT
11520: IFFALSE 11524
// exit ;
11522: GO 11580
// un := tmp [ rand ( 1 , tmp ) ] ;
11524: LD_ADDR_VAR 0 2
11528: PUSH
11529: LD_VAR 0 3
11533: PUSH
11534: LD_INT 1
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: CALL_OW 12
11546: ARRAY
11547: ST_TO_ADDR
// if Crawls ( un ) then
11548: LD_VAR 0 2
11552: PPUSH
11553: CALL_OW 318
11557: IFFALSE 11568
// ComWalk ( un ) ;
11559: LD_VAR 0 2
11563: PPUSH
11564: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11568: LD_VAR 0 2
11572: PPUSH
11573: LD_INT 5
11575: PPUSH
11576: CALL_OW 336
// end ;
11580: PPOPN 3
11582: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11583: LD_EXP 15
11587: PUSH
11588: LD_EXP 33
11592: AND
11593: PUSH
11594: LD_OWVAR 67
11598: PUSH
11599: LD_INT 3
11601: LESS
11602: AND
11603: IFFALSE 11622
11605: GO 11607
11607: DISABLE
// Difficulty := Difficulty + 1 ;
11608: LD_ADDR_OWVAR 67
11612: PUSH
11613: LD_OWVAR 67
11617: PUSH
11618: LD_INT 1
11620: PLUS
11621: ST_TO_ADDR
11622: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11623: LD_EXP 15
11627: PUSH
11628: LD_EXP 34
11632: AND
11633: IFFALSE 11736
11635: GO 11637
11637: DISABLE
11638: LD_INT 0
11640: PPUSH
// begin for i := 1 to 5 do
11641: LD_ADDR_VAR 0 1
11645: PUSH
11646: DOUBLE
11647: LD_INT 1
11649: DEC
11650: ST_TO_ADDR
11651: LD_INT 5
11653: PUSH
11654: FOR_TO
11655: IFFALSE 11734
// begin uc_nation := nation_nature ;
11657: LD_ADDR_OWVAR 21
11661: PUSH
11662: LD_INT 0
11664: ST_TO_ADDR
// uc_side := 0 ;
11665: LD_ADDR_OWVAR 20
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11673: LD_ADDR_OWVAR 29
11677: PUSH
11678: LD_INT 12
11680: PUSH
11681: LD_INT 12
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: ST_TO_ADDR
// hc_agressivity := 20 ;
11688: LD_ADDR_OWVAR 35
11692: PUSH
11693: LD_INT 20
11695: ST_TO_ADDR
// hc_class := class_tiger ;
11696: LD_ADDR_OWVAR 28
11700: PUSH
11701: LD_INT 14
11703: ST_TO_ADDR
// hc_gallery :=  ;
11704: LD_ADDR_OWVAR 33
11708: PUSH
11709: LD_STRING 
11711: ST_TO_ADDR
// hc_name :=  ;
11712: LD_ADDR_OWVAR 26
11716: PUSH
11717: LD_STRING 
11719: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11720: CALL_OW 44
11724: PPUSH
11725: LD_INT 0
11727: PPUSH
11728: CALL_OW 51
// end ;
11732: GO 11654
11734: POP
11735: POP
// end ;
11736: PPOPN 1
11738: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11739: LD_EXP 15
11743: PUSH
11744: LD_EXP 35
11748: AND
11749: IFFALSE 11758
11751: GO 11753
11753: DISABLE
// StreamSibBomb ;
11754: CALL 11759 0 0
11758: END
// export function StreamSibBomb ; var i , x , y ; begin
11759: LD_INT 0
11761: PPUSH
11762: PPUSH
11763: PPUSH
11764: PPUSH
// result := false ;
11765: LD_ADDR_VAR 0 1
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
// for i := 1 to 16 do
11773: LD_ADDR_VAR 0 2
11777: PUSH
11778: DOUBLE
11779: LD_INT 1
11781: DEC
11782: ST_TO_ADDR
11783: LD_INT 16
11785: PUSH
11786: FOR_TO
11787: IFFALSE 11986
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_INT 10
11796: PUSH
11797: LD_INT 20
11799: PUSH
11800: LD_INT 30
11802: PUSH
11803: LD_INT 40
11805: PUSH
11806: LD_INT 50
11808: PUSH
11809: LD_INT 60
11811: PUSH
11812: LD_INT 70
11814: PUSH
11815: LD_INT 80
11817: PUSH
11818: LD_INT 90
11820: PUSH
11821: LD_INT 100
11823: PUSH
11824: LD_INT 110
11826: PUSH
11827: LD_INT 120
11829: PUSH
11830: LD_INT 130
11832: PUSH
11833: LD_INT 140
11835: PUSH
11836: LD_INT 150
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 15
11861: PPUSH
11862: CALL_OW 12
11866: ARRAY
11867: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11868: LD_ADDR_VAR 0 4
11872: PUSH
11873: LD_INT 10
11875: PUSH
11876: LD_INT 20
11878: PUSH
11879: LD_INT 30
11881: PUSH
11882: LD_INT 40
11884: PUSH
11885: LD_INT 50
11887: PUSH
11888: LD_INT 60
11890: PUSH
11891: LD_INT 70
11893: PUSH
11894: LD_INT 80
11896: PUSH
11897: LD_INT 90
11899: PUSH
11900: LD_INT 100
11902: PUSH
11903: LD_INT 110
11905: PUSH
11906: LD_INT 120
11908: PUSH
11909: LD_INT 130
11911: PUSH
11912: LD_INT 140
11914: PUSH
11915: LD_INT 150
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 1
11937: PPUSH
11938: LD_INT 15
11940: PPUSH
11941: CALL_OW 12
11945: ARRAY
11946: ST_TO_ADDR
// if ValidHex ( x , y ) then
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_VAR 0 4
11956: PPUSH
11957: CALL_OW 488
11961: IFFALSE 11984
// begin result := [ x , y ] ;
11963: LD_ADDR_VAR 0 1
11967: PUSH
11968: LD_VAR 0 3
11972: PUSH
11973: LD_VAR 0 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: ST_TO_ADDR
// break ;
11982: GO 11986
// end ; end ;
11984: GO 11786
11986: POP
11987: POP
// if result then
11988: LD_VAR 0 1
11992: IFFALSE 12052
// begin ToLua ( playSibBomb() ) ;
11994: LD_STRING playSibBomb()
11996: PPUSH
11997: CALL_OW 559
// wait ( 0 0$14 ) ;
12001: LD_INT 490
12003: PPUSH
12004: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12008: LD_VAR 0 1
12012: PUSH
12013: LD_INT 1
12015: ARRAY
12016: PPUSH
12017: LD_VAR 0 1
12021: PUSH
12022: LD_INT 2
12024: ARRAY
12025: PPUSH
12026: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12030: LD_VAR 0 1
12034: PUSH
12035: LD_INT 1
12037: ARRAY
12038: PPUSH
12039: LD_VAR 0 1
12043: PUSH
12044: LD_INT 2
12046: ARRAY
12047: PPUSH
12048: CALL_OW 429
// end ; end ;
12052: LD_VAR 0 1
12056: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12057: LD_EXP 15
12061: PUSH
12062: LD_EXP 37
12066: AND
12067: IFFALSE 12079
12069: GO 12071
12071: DISABLE
// YouLost (  ) ;
12072: LD_STRING 
12074: PPUSH
12075: CALL_OW 104
12079: END
// every 0 0$1 trigger StreamModeActive and sFog do
12080: LD_EXP 15
12084: PUSH
12085: LD_EXP 36
12089: AND
12090: IFFALSE 12104
12092: GO 12094
12094: DISABLE
// FogOff ( your_side ) ;
12095: LD_OWVAR 2
12099: PPUSH
12100: CALL_OW 344
12104: END
// every 0 0$1 trigger StreamModeActive and sSun do
12105: LD_EXP 15
12109: PUSH
12110: LD_EXP 38
12114: AND
12115: IFFALSE 12143
12117: GO 12119
12119: DISABLE
// begin solar_recharge_percent := 0 ;
12120: LD_ADDR_OWVAR 79
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12128: LD_INT 10500
12130: PPUSH
12131: CALL_OW 67
// solar_recharge_percent := 100 ;
12135: LD_ADDR_OWVAR 79
12139: PUSH
12140: LD_INT 100
12142: ST_TO_ADDR
// end ;
12143: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12144: LD_EXP 15
12148: PUSH
12149: LD_EXP 39
12153: AND
12154: IFFALSE 12393
12156: GO 12158
12158: DISABLE
12159: LD_INT 0
12161: PPUSH
12162: PPUSH
12163: PPUSH
// begin tmp := [ ] ;
12164: LD_ADDR_VAR 0 3
12168: PUSH
12169: EMPTY
12170: ST_TO_ADDR
// for i := 1 to 6 do
12171: LD_ADDR_VAR 0 1
12175: PUSH
12176: DOUBLE
12177: LD_INT 1
12179: DEC
12180: ST_TO_ADDR
12181: LD_INT 6
12183: PUSH
12184: FOR_TO
12185: IFFALSE 12290
// begin uc_nation := nation_nature ;
12187: LD_ADDR_OWVAR 21
12191: PUSH
12192: LD_INT 0
12194: ST_TO_ADDR
// uc_side := 0 ;
12195: LD_ADDR_OWVAR 20
12199: PUSH
12200: LD_INT 0
12202: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12203: LD_ADDR_OWVAR 29
12207: PUSH
12208: LD_INT 12
12210: PUSH
12211: LD_INT 12
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: ST_TO_ADDR
// hc_agressivity := 20 ;
12218: LD_ADDR_OWVAR 35
12222: PUSH
12223: LD_INT 20
12225: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12226: LD_ADDR_OWVAR 28
12230: PUSH
12231: LD_INT 17
12233: ST_TO_ADDR
// hc_gallery :=  ;
12234: LD_ADDR_OWVAR 33
12238: PUSH
12239: LD_STRING 
12241: ST_TO_ADDR
// hc_name :=  ;
12242: LD_ADDR_OWVAR 26
12246: PUSH
12247: LD_STRING 
12249: ST_TO_ADDR
// un := CreateHuman ;
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: CALL_OW 44
12259: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12260: LD_VAR 0 2
12264: PPUSH
12265: LD_INT 1
12267: PPUSH
12268: CALL_OW 51
// tmp := tmp ^ un ;
12272: LD_ADDR_VAR 0 3
12276: PUSH
12277: LD_VAR 0 3
12281: PUSH
12282: LD_VAR 0 2
12286: ADD
12287: ST_TO_ADDR
// end ;
12288: GO 12184
12290: POP
12291: POP
// repeat wait ( 0 0$1 ) ;
12292: LD_INT 35
12294: PPUSH
12295: CALL_OW 67
// for un in tmp do
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: LD_VAR 0 3
12308: PUSH
12309: FOR_IN
12310: IFFALSE 12384
// begin if IsDead ( un ) then
12312: LD_VAR 0 2
12316: PPUSH
12317: CALL_OW 301
12321: IFFALSE 12341
// begin tmp := tmp diff un ;
12323: LD_ADDR_VAR 0 3
12327: PUSH
12328: LD_VAR 0 3
12332: PUSH
12333: LD_VAR 0 2
12337: DIFF
12338: ST_TO_ADDR
// continue ;
12339: GO 12309
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12341: LD_VAR 0 2
12345: PPUSH
12346: LD_INT 3
12348: PUSH
12349: LD_INT 22
12351: PUSH
12352: LD_INT 0
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PPUSH
12363: CALL_OW 69
12367: PPUSH
12368: LD_VAR 0 2
12372: PPUSH
12373: CALL_OW 74
12377: PPUSH
12378: CALL_OW 115
// end ;
12382: GO 12309
12384: POP
12385: POP
// until not tmp ;
12386: LD_VAR 0 3
12390: NOT
12391: IFFALSE 12292
// end ;
12393: PPOPN 3
12395: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12396: LD_EXP 15
12400: PUSH
12401: LD_EXP 40
12405: AND
12406: IFFALSE 12460
12408: GO 12410
12410: DISABLE
// begin ToLua ( displayTroll(); ) ;
12411: LD_STRING displayTroll();
12413: PPUSH
12414: CALL_OW 559
// wait ( 3 3$00 ) ;
12418: LD_INT 6300
12420: PPUSH
12421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12425: LD_STRING hideTroll();
12427: PPUSH
12428: CALL_OW 559
// wait ( 1 1$00 ) ;
12432: LD_INT 2100
12434: PPUSH
12435: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12439: LD_STRING displayTroll();
12441: PPUSH
12442: CALL_OW 559
// wait ( 1 1$00 ) ;
12446: LD_INT 2100
12448: PPUSH
12449: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12453: LD_STRING hideTroll();
12455: PPUSH
12456: CALL_OW 559
// end ;
12460: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12461: LD_EXP 15
12465: PUSH
12466: LD_EXP 41
12470: AND
12471: IFFALSE 12534
12473: GO 12475
12475: DISABLE
12476: LD_INT 0
12478: PPUSH
// begin p := 0 ;
12479: LD_ADDR_VAR 0 1
12483: PUSH
12484: LD_INT 0
12486: ST_TO_ADDR
// repeat game_speed := 1 ;
12487: LD_ADDR_OWVAR 65
12491: PUSH
12492: LD_INT 1
12494: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12495: LD_INT 35
12497: PPUSH
12498: CALL_OW 67
// p := p + 1 ;
12502: LD_ADDR_VAR 0 1
12506: PUSH
12507: LD_VAR 0 1
12511: PUSH
12512: LD_INT 1
12514: PLUS
12515: ST_TO_ADDR
// until p >= 60 ;
12516: LD_VAR 0 1
12520: PUSH
12521: LD_INT 60
12523: GREATEREQUAL
12524: IFFALSE 12487
// game_speed := 4 ;
12526: LD_ADDR_OWVAR 65
12530: PUSH
12531: LD_INT 4
12533: ST_TO_ADDR
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12537: LD_EXP 15
12541: PUSH
12542: LD_EXP 42
12546: AND
12547: IFFALSE 12693
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12556: LD_ADDR_VAR 0 1
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 0
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 1
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: ST_TO_ADDR
// if not depot then
12610: LD_VAR 0 1
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12693
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12619: LD_ADDR_VAR 0 2
12623: PUSH
12624: LD_VAR 0 1
12628: PUSH
12629: LD_INT 1
12631: PPUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 12
12641: ARRAY
12642: PPUSH
12643: CALL_OW 274
12647: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12648: LD_VAR 0 2
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_INT 0
12658: PPUSH
12659: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12663: LD_VAR 0 2
12667: PPUSH
12668: LD_INT 2
12670: PPUSH
12671: LD_INT 0
12673: PPUSH
12674: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12678: LD_VAR 0 2
12682: PPUSH
12683: LD_INT 3
12685: PPUSH
12686: LD_INT 0
12688: PPUSH
12689: CALL_OW 277
// end ;
12693: PPOPN 2
12695: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12696: LD_EXP 15
12700: PUSH
12701: LD_EXP 43
12705: AND
12706: IFFALSE 12803
12708: GO 12710
12710: DISABLE
12711: LD_INT 0
12713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12714: LD_ADDR_VAR 0 1
12718: PUSH
12719: LD_INT 22
12721: PUSH
12722: LD_OWVAR 2
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 21
12733: PUSH
12734: LD_INT 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 3
12743: PUSH
12744: LD_INT 23
12746: PUSH
12747: LD_INT 0
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: PPUSH
12763: CALL_OW 69
12767: ST_TO_ADDR
// if not tmp then
12768: LD_VAR 0 1
12772: NOT
12773: IFFALSE 12777
// exit ;
12775: GO 12803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12777: LD_VAR 0 1
12781: PUSH
12782: LD_INT 1
12784: PPUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 12
12794: ARRAY
12795: PPUSH
12796: LD_INT 200
12798: PPUSH
12799: CALL_OW 234
// end ;
12803: PPOPN 1
12805: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12806: LD_EXP 15
12810: PUSH
12811: LD_EXP 44
12815: AND
12816: IFFALSE 12895
12818: GO 12820
12820: DISABLE
12821: LD_INT 0
12823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12824: LD_ADDR_VAR 0 1
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_OWVAR 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 21
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: ST_TO_ADDR
// if not tmp then
12860: LD_VAR 0 1
12864: NOT
12865: IFFALSE 12869
// exit ;
12867: GO 12895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12869: LD_VAR 0 1
12873: PUSH
12874: LD_INT 1
12876: PPUSH
12877: LD_VAR 0 1
12881: PPUSH
12882: CALL_OW 12
12886: ARRAY
12887: PPUSH
12888: LD_INT 60
12890: PPUSH
12891: CALL_OW 234
// end ;
12895: PPOPN 1
12897: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12898: LD_EXP 15
12902: PUSH
12903: LD_EXP 45
12907: AND
12908: IFFALSE 13007
12910: GO 12912
12912: DISABLE
12913: LD_INT 0
12915: PPUSH
12916: PPUSH
// begin enable ;
12917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_INT 22
12925: PUSH
12926: LD_OWVAR 2
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 61
12937: PUSH
12938: EMPTY
12939: LIST
12940: PUSH
12941: LD_INT 33
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: ST_TO_ADDR
// if not tmp then
12961: LD_VAR 0 1
12965: NOT
12966: IFFALSE 12970
// exit ;
12968: GO 13007
// for i in tmp do
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_VAR 0 1
12979: PUSH
12980: FOR_IN
12981: IFFALSE 13005
// if IsControledBy ( i ) then
12983: LD_VAR 0 2
12987: PPUSH
12988: CALL_OW 312
12992: IFFALSE 13003
// ComUnlink ( i ) ;
12994: LD_VAR 0 2
12998: PPUSH
12999: CALL_OW 136
13003: GO 12980
13005: POP
13006: POP
// end ;
13007: PPOPN 2
13009: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13010: LD_EXP 15
13014: PUSH
13015: LD_EXP 46
13019: AND
13020: IFFALSE 13160
13022: GO 13024
13024: DISABLE
13025: LD_INT 0
13027: PPUSH
13028: PPUSH
// begin ToLua ( displayPowell(); ) ;
13029: LD_STRING displayPowell();
13031: PPUSH
13032: CALL_OW 559
// uc_side := 0 ;
13036: LD_ADDR_OWVAR 20
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// uc_nation := 2 ;
13044: LD_ADDR_OWVAR 21
13048: PUSH
13049: LD_INT 2
13051: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13052: LD_ADDR_OWVAR 37
13056: PUSH
13057: LD_INT 14
13059: ST_TO_ADDR
// vc_engine := engine_siberite ;
13060: LD_ADDR_OWVAR 39
13064: PUSH
13065: LD_INT 3
13067: ST_TO_ADDR
// vc_control := control_apeman ;
13068: LD_ADDR_OWVAR 38
13072: PUSH
13073: LD_INT 5
13075: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13076: LD_ADDR_OWVAR 40
13080: PUSH
13081: LD_INT 29
13083: ST_TO_ADDR
// un := CreateVehicle ;
13084: LD_ADDR_VAR 0 2
13088: PUSH
13089: CALL_OW 45
13093: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13094: LD_VAR 0 2
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13106: LD_INT 35
13108: PPUSH
13109: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13113: LD_VAR 0 2
13117: PPUSH
13118: LD_INT 22
13120: PUSH
13121: LD_OWVAR 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL_OW 74
13144: PPUSH
13145: CALL_OW 115
// until IsDead ( un ) ;
13149: LD_VAR 0 2
13153: PPUSH
13154: CALL_OW 301
13158: IFFALSE 13106
// end ;
13160: PPOPN 2
13162: END
// every 0 0$1 trigger StreamModeActive and sStu do
13163: LD_EXP 15
13167: PUSH
13168: LD_EXP 54
13172: AND
13173: IFFALSE 13189
13175: GO 13177
13177: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13178: LD_STRING displayStucuk();
13180: PPUSH
13181: CALL_OW 559
// ResetFog ;
13185: CALL_OW 335
// end ;
13189: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13190: LD_EXP 15
13194: PUSH
13195: LD_EXP 47
13199: AND
13200: IFFALSE 13341
13202: GO 13204
13204: DISABLE
13205: LD_INT 0
13207: PPUSH
13208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13209: LD_ADDR_VAR 0 2
13213: PUSH
13214: LD_INT 22
13216: PUSH
13217: LD_OWVAR 2
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 1
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: ST_TO_ADDR
// if not tmp then
13245: LD_VAR 0 2
13249: NOT
13250: IFFALSE 13254
// exit ;
13252: GO 13341
// un := tmp [ rand ( 1 , tmp ) ] ;
13254: LD_ADDR_VAR 0 1
13258: PUSH
13259: LD_VAR 0 2
13263: PUSH
13264: LD_INT 1
13266: PPUSH
13267: LD_VAR 0 2
13271: PPUSH
13272: CALL_OW 12
13276: ARRAY
13277: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13278: LD_VAR 0 1
13282: PPUSH
13283: LD_INT 0
13285: PPUSH
13286: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13290: LD_VAR 0 1
13294: PPUSH
13295: LD_OWVAR 3
13299: PUSH
13300: LD_VAR 0 1
13304: DIFF
13305: PPUSH
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 74
13315: PPUSH
13316: CALL_OW 115
// wait ( 0 0$20 ) ;
13320: LD_INT 700
13322: PPUSH
13323: CALL_OW 67
// SetSide ( un , your_side ) ;
13327: LD_VAR 0 1
13331: PPUSH
13332: LD_OWVAR 2
13336: PPUSH
13337: CALL_OW 235
// end ;
13341: PPOPN 2
13343: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13344: LD_EXP 15
13348: PUSH
13349: LD_EXP 48
13353: AND
13354: IFFALSE 13460
13356: GO 13358
13358: DISABLE
13359: LD_INT 0
13361: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13362: LD_ADDR_VAR 0 1
13366: PUSH
13367: LD_INT 22
13369: PUSH
13370: LD_OWVAR 2
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 30
13384: PUSH
13385: LD_INT 0
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 30
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 69
13415: ST_TO_ADDR
// if not depot then
13416: LD_VAR 0 1
13420: NOT
13421: IFFALSE 13425
// exit ;
13423: GO 13460
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13425: LD_VAR 0 1
13429: PUSH
13430: LD_INT 1
13432: ARRAY
13433: PPUSH
13434: CALL_OW 250
13438: PPUSH
13439: LD_VAR 0 1
13443: PUSH
13444: LD_INT 1
13446: ARRAY
13447: PPUSH
13448: CALL_OW 251
13452: PPUSH
13453: LD_INT 70
13455: PPUSH
13456: CALL_OW 495
// end ;
13460: PPOPN 1
13462: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13463: LD_EXP 15
13467: PUSH
13468: LD_EXP 49
13472: AND
13473: IFFALSE 13684
13475: GO 13477
13477: DISABLE
13478: LD_INT 0
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13485: LD_ADDR_VAR 0 5
13489: PUSH
13490: LD_INT 22
13492: PUSH
13493: LD_OWVAR 2
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 21
13504: PUSH
13505: LD_INT 1
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 69
13520: ST_TO_ADDR
// if not tmp then
13521: LD_VAR 0 5
13525: NOT
13526: IFFALSE 13530
// exit ;
13528: GO 13684
// for i in tmp do
13530: LD_ADDR_VAR 0 1
13534: PUSH
13535: LD_VAR 0 5
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13682
// begin d := rand ( 0 , 5 ) ;
13543: LD_ADDR_VAR 0 4
13547: PUSH
13548: LD_INT 0
13550: PPUSH
13551: LD_INT 5
13553: PPUSH
13554: CALL_OW 12
13558: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13559: LD_ADDR_VAR 0 2
13563: PUSH
13564: LD_VAR 0 1
13568: PPUSH
13569: CALL_OW 250
13573: PPUSH
13574: LD_VAR 0 4
13578: PPUSH
13579: LD_INT 3
13581: PPUSH
13582: LD_INT 12
13584: PPUSH
13585: CALL_OW 12
13589: PPUSH
13590: CALL_OW 272
13594: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13595: LD_ADDR_VAR 0 3
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 251
13609: PPUSH
13610: LD_VAR 0 4
13614: PPUSH
13615: LD_INT 3
13617: PPUSH
13618: LD_INT 12
13620: PPUSH
13621: CALL_OW 12
13625: PPUSH
13626: CALL_OW 273
13630: ST_TO_ADDR
// if ValidHex ( x , y ) then
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_VAR 0 3
13640: PPUSH
13641: CALL_OW 488
13645: IFFALSE 13680
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: LD_VAR 0 2
13656: PPUSH
13657: LD_VAR 0 3
13661: PPUSH
13662: LD_INT 3
13664: PPUSH
13665: LD_INT 6
13667: PPUSH
13668: CALL_OW 12
13672: PPUSH
13673: LD_INT 1
13675: PPUSH
13676: CALL_OW 483
// end ;
13680: GO 13540
13682: POP
13683: POP
// end ;
13684: PPOPN 5
13686: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13687: LD_EXP 15
13691: PUSH
13692: LD_EXP 50
13696: AND
13697: IFFALSE 13791
13699: GO 13701
13701: DISABLE
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13706: LD_ADDR_VAR 0 2
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_OWVAR 2
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 32
13725: PUSH
13726: LD_INT 1
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 2
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// if not tmp then
13753: LD_VAR 0 2
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13791
// for i in tmp do
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13789
// SetFuel ( i , 0 ) ;
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 0
13782: PPUSH
13783: CALL_OW 240
13787: GO 13772
13789: POP
13790: POP
// end ;
13791: PPOPN 2
13793: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13794: LD_EXP 15
13798: PUSH
13799: LD_EXP 51
13803: AND
13804: IFFALSE 13870
13806: GO 13808
13808: DISABLE
13809: LD_INT 0
13811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13812: LD_ADDR_VAR 0 1
13816: PUSH
13817: LD_INT 22
13819: PUSH
13820: LD_OWVAR 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 30
13831: PUSH
13832: LD_INT 29
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 69
13847: ST_TO_ADDR
// if not tmp then
13848: LD_VAR 0 1
13852: NOT
13853: IFFALSE 13857
// exit ;
13855: GO 13870
// DestroyUnit ( tmp [ 1 ] ) ;
13857: LD_VAR 0 1
13861: PUSH
13862: LD_INT 1
13864: ARRAY
13865: PPUSH
13866: CALL_OW 65
// end ;
13870: PPOPN 1
13872: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13873: LD_EXP 15
13877: PUSH
13878: LD_EXP 53
13882: AND
13883: IFFALSE 14012
13885: GO 13887
13887: DISABLE
13888: LD_INT 0
13890: PPUSH
// begin uc_side := 0 ;
13891: LD_ADDR_OWVAR 20
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// uc_nation := nation_arabian ;
13899: LD_ADDR_OWVAR 21
13903: PUSH
13904: LD_INT 2
13906: ST_TO_ADDR
// hc_gallery :=  ;
13907: LD_ADDR_OWVAR 33
13911: PUSH
13912: LD_STRING 
13914: ST_TO_ADDR
// hc_name :=  ;
13915: LD_ADDR_OWVAR 26
13919: PUSH
13920: LD_STRING 
13922: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13923: LD_INT 1
13925: PPUSH
13926: LD_INT 11
13928: PPUSH
13929: LD_INT 10
13931: PPUSH
13932: CALL_OW 380
// un := CreateHuman ;
13936: LD_ADDR_VAR 0 1
13940: PUSH
13941: CALL_OW 44
13945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13946: LD_VAR 0 1
13950: PPUSH
13951: LD_INT 1
13953: PPUSH
13954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13965: LD_VAR 0 1
13969: PPUSH
13970: LD_INT 22
13972: PUSH
13973: LD_OWVAR 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PPUSH
13982: CALL_OW 69
13986: PPUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 74
13996: PPUSH
13997: CALL_OW 115
// until IsDead ( un ) ;
14001: LD_VAR 0 1
14005: PPUSH
14006: CALL_OW 301
14010: IFFALSE 13958
// end ;
14012: PPOPN 1
14014: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14015: LD_EXP 15
14019: PUSH
14020: LD_EXP 55
14024: AND
14025: IFFALSE 14037
14027: GO 14029
14029: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14030: LD_STRING earthquake(getX(game), 0, 32)
14032: PPUSH
14033: CALL_OW 559
14037: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14038: LD_EXP 15
14042: PUSH
14043: LD_EXP 56
14047: AND
14048: IFFALSE 14139
14050: GO 14052
14052: DISABLE
14053: LD_INT 0
14055: PPUSH
// begin enable ;
14056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_OWVAR 2
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 21
14076: PUSH
14077: LD_INT 2
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 33
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: ST_TO_ADDR
// if not tmp then
14104: LD_VAR 0 1
14108: NOT
14109: IFFALSE 14113
// exit ;
14111: GO 14139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14113: LD_VAR 0 1
14117: PUSH
14118: LD_INT 1
14120: PPUSH
14121: LD_VAR 0 1
14125: PPUSH
14126: CALL_OW 12
14130: ARRAY
14131: PPUSH
14132: LD_INT 1
14134: PPUSH
14135: CALL_OW 234
// end ;
14139: PPOPN 1
14141: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14142: LD_EXP 15
14146: PUSH
14147: LD_EXP 57
14151: AND
14152: IFFALSE 14293
14154: GO 14156
14156: DISABLE
14157: LD_INT 0
14159: PPUSH
14160: PPUSH
14161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: LD_INT 22
14169: PUSH
14170: LD_OWVAR 2
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 25
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 69
14197: ST_TO_ADDR
// if not tmp then
14198: LD_VAR 0 3
14202: NOT
14203: IFFALSE 14207
// exit ;
14205: GO 14293
// un := tmp [ rand ( 1 , tmp ) ] ;
14207: LD_ADDR_VAR 0 2
14211: PUSH
14212: LD_VAR 0 3
14216: PUSH
14217: LD_INT 1
14219: PPUSH
14220: LD_VAR 0 3
14224: PPUSH
14225: CALL_OW 12
14229: ARRAY
14230: ST_TO_ADDR
// if Crawls ( un ) then
14231: LD_VAR 0 2
14235: PPUSH
14236: CALL_OW 318
14240: IFFALSE 14251
// ComWalk ( un ) ;
14242: LD_VAR 0 2
14246: PPUSH
14247: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14251: LD_VAR 0 2
14255: PPUSH
14256: LD_INT 9
14258: PPUSH
14259: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14263: LD_INT 28
14265: PPUSH
14266: LD_OWVAR 2
14270: PPUSH
14271: LD_INT 2
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14278: LD_INT 29
14280: PPUSH
14281: LD_OWVAR 2
14285: PPUSH
14286: LD_INT 2
14288: PPUSH
14289: CALL_OW 322
// end ;
14293: PPOPN 3
14295: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14296: LD_EXP 15
14300: PUSH
14301: LD_EXP 58
14305: AND
14306: IFFALSE 14417
14308: GO 14310
14310: DISABLE
14311: LD_INT 0
14313: PPUSH
14314: PPUSH
14315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14316: LD_ADDR_VAR 0 3
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_OWVAR 2
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 25
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PPUSH
14347: CALL_OW 69
14351: ST_TO_ADDR
// if not tmp then
14352: LD_VAR 0 3
14356: NOT
14357: IFFALSE 14361
// exit ;
14359: GO 14417
// un := tmp [ rand ( 1 , tmp ) ] ;
14361: LD_ADDR_VAR 0 2
14365: PUSH
14366: LD_VAR 0 3
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 3
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: ST_TO_ADDR
// if Crawls ( un ) then
14385: LD_VAR 0 2
14389: PPUSH
14390: CALL_OW 318
14394: IFFALSE 14405
// ComWalk ( un ) ;
14396: LD_VAR 0 2
14400: PPUSH
14401: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14405: LD_VAR 0 2
14409: PPUSH
14410: LD_INT 8
14412: PPUSH
14413: CALL_OW 336
// end ;
14417: PPOPN 3
14419: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14420: LD_EXP 15
14424: PUSH
14425: LD_EXP 59
14429: AND
14430: IFFALSE 14574
14432: GO 14434
14434: DISABLE
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14439: LD_ADDR_VAR 0 2
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_OWVAR 2
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 21
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 2
14468: PUSH
14469: LD_INT 34
14471: PUSH
14472: LD_INT 12
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 34
14481: PUSH
14482: LD_INT 51
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 34
14491: PUSH
14492: LD_INT 32
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 69
14514: ST_TO_ADDR
// if not tmp then
14515: LD_VAR 0 2
14519: NOT
14520: IFFALSE 14524
// exit ;
14522: GO 14574
// for i in tmp do
14524: LD_ADDR_VAR 0 1
14528: PUSH
14529: LD_VAR 0 2
14533: PUSH
14534: FOR_IN
14535: IFFALSE 14572
// if GetCargo ( i , mat_artifact ) = 0 then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_INT 4
14544: PPUSH
14545: CALL_OW 289
14549: PUSH
14550: LD_INT 0
14552: EQUAL
14553: IFFALSE 14570
// SetCargo ( i , mat_siberit , 100 ) ;
14555: LD_VAR 0 1
14559: PPUSH
14560: LD_INT 3
14562: PPUSH
14563: LD_INT 100
14565: PPUSH
14566: CALL_OW 290
14570: GO 14534
14572: POP
14573: POP
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14577: LD_EXP 15
14581: PUSH
14582: LD_EXP 60
14586: AND
14587: IFFALSE 14770
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14596: LD_ADDR_VAR 0 2
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_OWVAR 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: ST_TO_ADDR
// if not tmp then
14618: LD_VAR 0 2
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 14770
// for i := 1 to 2 do
14627: LD_ADDR_VAR 0 1
14631: PUSH
14632: DOUBLE
14633: LD_INT 1
14635: DEC
14636: ST_TO_ADDR
14637: LD_INT 2
14639: PUSH
14640: FOR_TO
14641: IFFALSE 14768
// begin uc_side := your_side ;
14643: LD_ADDR_OWVAR 20
14647: PUSH
14648: LD_OWVAR 2
14652: ST_TO_ADDR
// uc_nation := nation_american ;
14653: LD_ADDR_OWVAR 21
14657: PUSH
14658: LD_INT 1
14660: ST_TO_ADDR
// vc_chassis := us_morphling ;
14661: LD_ADDR_OWVAR 37
14665: PUSH
14666: LD_INT 5
14668: ST_TO_ADDR
// vc_engine := engine_siberite ;
14669: LD_ADDR_OWVAR 39
14673: PUSH
14674: LD_INT 3
14676: ST_TO_ADDR
// vc_control := control_computer ;
14677: LD_ADDR_OWVAR 38
14681: PUSH
14682: LD_INT 3
14684: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14685: LD_ADDR_OWVAR 40
14689: PUSH
14690: LD_INT 10
14692: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14693: LD_VAR 0 2
14697: PUSH
14698: LD_INT 1
14700: ARRAY
14701: PPUSH
14702: CALL_OW 310
14706: NOT
14707: IFFALSE 14754
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14709: CALL_OW 45
14713: PPUSH
14714: LD_VAR 0 2
14718: PUSH
14719: LD_INT 1
14721: ARRAY
14722: PPUSH
14723: CALL_OW 250
14727: PPUSH
14728: LD_VAR 0 2
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PPUSH
14737: CALL_OW 251
14741: PPUSH
14742: LD_INT 12
14744: PPUSH
14745: LD_INT 1
14747: PPUSH
14748: CALL_OW 50
14752: GO 14766
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14754: CALL_OW 45
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 51
// end ;
14766: GO 14640
14768: POP
14769: POP
// end ;
14770: PPOPN 2
14772: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14773: LD_EXP 15
14777: PUSH
14778: LD_EXP 61
14782: AND
14783: IFFALSE 15005
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
14791: PPUSH
14792: PPUSH
14793: PPUSH
14794: PPUSH
14795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14796: LD_ADDR_VAR 0 6
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_OWVAR 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 3
14825: PUSH
14826: LD_INT 23
14828: PUSH
14829: LD_INT 0
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: ST_TO_ADDR
// if not tmp then
14850: LD_VAR 0 6
14854: NOT
14855: IFFALSE 14859
// exit ;
14857: GO 15005
// s1 := rand ( 1 , 4 ) ;
14859: LD_ADDR_VAR 0 2
14863: PUSH
14864: LD_INT 1
14866: PPUSH
14867: LD_INT 4
14869: PPUSH
14870: CALL_OW 12
14874: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14875: LD_ADDR_VAR 0 4
14879: PUSH
14880: LD_VAR 0 6
14884: PUSH
14885: LD_INT 1
14887: ARRAY
14888: PPUSH
14889: LD_VAR 0 2
14893: PPUSH
14894: CALL_OW 259
14898: ST_TO_ADDR
// if s1 = 1 then
14899: LD_VAR 0 2
14903: PUSH
14904: LD_INT 1
14906: EQUAL
14907: IFFALSE 14927
// s2 := rand ( 2 , 4 ) else
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_INT 2
14916: PPUSH
14917: LD_INT 4
14919: PPUSH
14920: CALL_OW 12
14924: ST_TO_ADDR
14925: GO 14935
// s2 := 1 ;
14927: LD_ADDR_VAR 0 3
14931: PUSH
14932: LD_INT 1
14934: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 6
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: CALL_OW 259
14958: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14959: LD_VAR 0 6
14963: PUSH
14964: LD_INT 1
14966: ARRAY
14967: PPUSH
14968: LD_VAR 0 2
14972: PPUSH
14973: LD_VAR 0 5
14977: PPUSH
14978: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14982: LD_VAR 0 6
14986: PUSH
14987: LD_INT 1
14989: ARRAY
14990: PPUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: LD_VAR 0 4
15000: PPUSH
15001: CALL_OW 237
// end ;
15005: PPOPN 6
15007: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15008: LD_EXP 15
15012: PUSH
15013: LD_EXP 62
15017: AND
15018: IFFALSE 15097
15020: GO 15022
15022: DISABLE
15023: LD_INT 0
15025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: LD_INT 22
15033: PUSH
15034: LD_OWVAR 2
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 3
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: ST_TO_ADDR
// if not tmp then
15062: LD_VAR 0 1
15066: NOT
15067: IFFALSE 15071
// exit ;
15069: GO 15097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15071: LD_VAR 0 1
15075: PUSH
15076: LD_INT 1
15078: PPUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 12
15088: ARRAY
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 234
// end ;
15097: PPOPN 1
15099: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15100: LD_EXP 15
15104: PUSH
15105: LD_EXP 63
15109: AND
15110: IFFALSE 15222
15112: GO 15114
15114: DISABLE
15115: LD_INT 0
15117: PPUSH
15118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: LD_INT 22
15126: PUSH
15127: LD_OWVAR 2
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: LD_INT 30
15141: PUSH
15142: LD_INT 27
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 30
15151: PUSH
15152: LD_INT 26
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 30
15161: PUSH
15162: LD_INT 28
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: ST_TO_ADDR
// if not tmp then
15184: LD_VAR 0 2
15188: NOT
15189: IFFALSE 15193
// exit ;
15191: GO 15222
// for i in tmp do
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: LD_VAR 0 2
15202: PUSH
15203: FOR_IN
15204: IFFALSE 15220
// SetLives ( i , 1 ) ;
15206: LD_VAR 0 1
15210: PPUSH
15211: LD_INT 1
15213: PPUSH
15214: CALL_OW 234
15218: GO 15203
15220: POP
15221: POP
// end ;
15222: PPOPN 2
15224: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15225: LD_EXP 15
15229: PUSH
15230: LD_EXP 64
15234: AND
15235: IFFALSE 15509
15237: GO 15239
15239: DISABLE
15240: LD_INT 0
15242: PPUSH
15243: PPUSH
15244: PPUSH
// begin i := rand ( 1 , 7 ) ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_INT 7
15255: PPUSH
15256: CALL_OW 12
15260: ST_TO_ADDR
// case i of 1 :
15261: LD_VAR 0 1
15265: PUSH
15266: LD_INT 1
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15284
15274: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15275: LD_STRING earthquake(getX(game), 0, 32)
15277: PPUSH
15278: CALL_OW 559
15282: GO 15509
15284: LD_INT 2
15286: DOUBLE
15287: EQUAL
15288: IFTRUE 15292
15290: GO 15306
15292: POP
// begin ToLua ( displayStucuk(); ) ;
15293: LD_STRING displayStucuk();
15295: PPUSH
15296: CALL_OW 559
// ResetFog ;
15300: CALL_OW 335
// end ; 3 :
15304: GO 15509
15306: LD_INT 3
15308: DOUBLE
15309: EQUAL
15310: IFTRUE 15314
15312: GO 15418
15314: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15315: LD_ADDR_VAR 0 2
15319: PUSH
15320: LD_INT 22
15322: PUSH
15323: LD_OWVAR 2
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 1
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: ST_TO_ADDR
// if not tmp then
15351: LD_VAR 0 2
15355: NOT
15356: IFFALSE 15360
// exit ;
15358: GO 15509
// un := tmp [ rand ( 1 , tmp ) ] ;
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_VAR 0 2
15369: PUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_VAR 0 2
15377: PPUSH
15378: CALL_OW 12
15382: ARRAY
15383: ST_TO_ADDR
// if Crawls ( un ) then
15384: LD_VAR 0 3
15388: PPUSH
15389: CALL_OW 318
15393: IFFALSE 15404
// ComWalk ( un ) ;
15395: LD_VAR 0 3
15399: PPUSH
15400: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15404: LD_VAR 0 3
15408: PPUSH
15409: LD_INT 8
15411: PPUSH
15412: CALL_OW 336
// end ; 4 :
15416: GO 15509
15418: LD_INT 4
15420: DOUBLE
15421: EQUAL
15422: IFTRUE 15426
15424: GO 15487
15426: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15427: LD_ADDR_VAR 0 2
15431: PUSH
15432: LD_INT 22
15434: PUSH
15435: LD_OWVAR 2
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 30
15446: PUSH
15447: LD_INT 29
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: ST_TO_ADDR
// if not tmp then
15463: LD_VAR 0 2
15467: NOT
15468: IFFALSE 15472
// exit ;
15470: GO 15509
// DestroyUnit ( tmp [ 1 ] ) ;
15472: LD_VAR 0 2
15476: PUSH
15477: LD_INT 1
15479: ARRAY
15480: PPUSH
15481: CALL_OW 65
// end ; 5 .. 7 :
15485: GO 15509
15487: LD_INT 5
15489: DOUBLE
15490: GREATEREQUAL
15491: IFFALSE 15499
15493: LD_INT 7
15495: DOUBLE
15496: LESSEQUAL
15497: IFTRUE 15501
15499: GO 15508
15501: POP
// StreamSibBomb ; end ;
15502: CALL 11759 0 0
15506: GO 15509
15508: POP
// end ;
15509: PPOPN 3
15511: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15512: LD_EXP 15
15516: PUSH
15517: LD_EXP 65
15521: AND
15522: IFFALSE 15678
15524: GO 15526
15526: DISABLE
15527: LD_INT 0
15529: PPUSH
15530: PPUSH
15531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: LD_INT 81
15539: PUSH
15540: LD_OWVAR 2
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 21
15564: PUSH
15565: LD_INT 2
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PPUSH
15581: CALL_OW 69
15585: ST_TO_ADDR
// if not tmp then
15586: LD_VAR 0 2
15590: NOT
15591: IFFALSE 15595
// exit ;
15593: GO 15678
// p := 0 ;
15595: LD_ADDR_VAR 0 3
15599: PUSH
15600: LD_INT 0
15602: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15603: LD_INT 35
15605: PPUSH
15606: CALL_OW 67
// p := p + 1 ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 3
15619: PUSH
15620: LD_INT 1
15622: PLUS
15623: ST_TO_ADDR
// for i in tmp do
15624: LD_ADDR_VAR 0 1
15628: PUSH
15629: LD_VAR 0 2
15633: PUSH
15634: FOR_IN
15635: IFFALSE 15666
// if GetLives ( i ) < 1000 then
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 256
15646: PUSH
15647: LD_INT 1000
15649: LESS
15650: IFFALSE 15664
// SetLives ( i , 1000 ) ;
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_INT 1000
15659: PPUSH
15660: CALL_OW 234
15664: GO 15634
15666: POP
15667: POP
// until p > 20 ;
15668: LD_VAR 0 3
15672: PUSH
15673: LD_INT 20
15675: GREATER
15676: IFFALSE 15603
// end ;
15678: PPOPN 3
15680: END
// every 0 0$1 trigger StreamModeActive and sTime do
15681: LD_EXP 15
15685: PUSH
15686: LD_EXP 66
15690: AND
15691: IFFALSE 15726
15693: GO 15695
15695: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15696: LD_INT 28
15698: PPUSH
15699: LD_OWVAR 2
15703: PPUSH
15704: LD_INT 2
15706: PPUSH
15707: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15711: LD_INT 30
15713: PPUSH
15714: LD_OWVAR 2
15718: PPUSH
15719: LD_INT 2
15721: PPUSH
15722: CALL_OW 322
// end ;
15726: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15727: LD_EXP 15
15731: PUSH
15732: LD_EXP 67
15736: AND
15737: IFFALSE 15858
15739: GO 15741
15741: DISABLE
15742: LD_INT 0
15744: PPUSH
15745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_OWVAR 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 21
15765: PUSH
15766: LD_INT 1
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 3
15775: PUSH
15776: LD_INT 23
15778: PUSH
15779: LD_INT 0
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: PPUSH
15795: CALL_OW 69
15799: ST_TO_ADDR
// if not tmp then
15800: LD_VAR 0 2
15804: NOT
15805: IFFALSE 15809
// exit ;
15807: GO 15858
// for i in tmp do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: LD_VAR 0 2
15818: PUSH
15819: FOR_IN
15820: IFFALSE 15856
// begin if Crawls ( i ) then
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 318
15831: IFFALSE 15842
// ComWalk ( i ) ;
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 138
// SetClass ( i , 2 ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_INT 2
15849: PPUSH
15850: CALL_OW 336
// end ;
15854: GO 15819
15856: POP
15857: POP
// end ;
15858: PPOPN 2
15860: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15861: LD_EXP 15
15865: PUSH
15866: LD_EXP 68
15870: AND
15871: IFFALSE 16152
15873: GO 15875
15875: DISABLE
15876: LD_INT 0
15878: PPUSH
15879: PPUSH
15880: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15881: LD_OWVAR 2
15885: PPUSH
15886: LD_INT 9
15888: PPUSH
15889: LD_INT 1
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15899: LD_INT 9
15901: PPUSH
15902: LD_OWVAR 2
15906: PPUSH
15907: CALL_OW 343
// uc_side := 9 ;
15911: LD_ADDR_OWVAR 20
15915: PUSH
15916: LD_INT 9
15918: ST_TO_ADDR
// uc_nation := 2 ;
15919: LD_ADDR_OWVAR 21
15923: PUSH
15924: LD_INT 2
15926: ST_TO_ADDR
// hc_name := Dark Warrior ;
15927: LD_ADDR_OWVAR 26
15931: PUSH
15932: LD_STRING Dark Warrior
15934: ST_TO_ADDR
// hc_gallery :=  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_noskilllimit := true ;
15943: LD_ADDR_OWVAR 76
15947: PUSH
15948: LD_INT 1
15950: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15951: LD_ADDR_OWVAR 31
15955: PUSH
15956: LD_INT 30
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 30
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: ST_TO_ADDR
// un := CreateHuman ;
15974: LD_ADDR_VAR 0 3
15978: PUSH
15979: CALL_OW 44
15983: ST_TO_ADDR
// hc_noskilllimit := false ;
15984: LD_ADDR_OWVAR 76
15988: PUSH
15989: LD_INT 0
15991: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 51
// p := 0 ;
16004: LD_ADDR_VAR 0 2
16008: PUSH
16009: LD_INT 0
16011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16012: LD_INT 35
16014: PPUSH
16015: CALL_OW 67
// p := p + 1 ;
16019: LD_ADDR_VAR 0 2
16023: PUSH
16024: LD_VAR 0 2
16028: PUSH
16029: LD_INT 1
16031: PLUS
16032: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16033: LD_VAR 0 3
16037: PPUSH
16038: CALL_OW 256
16042: PUSH
16043: LD_INT 1000
16045: LESS
16046: IFFALSE 16060
// SetLives ( un , 1000 ) ;
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1000
16055: PPUSH
16056: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16060: LD_VAR 0 3
16064: PPUSH
16065: LD_INT 81
16067: PUSH
16068: LD_OWVAR 2
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 91
16079: PUSH
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 30
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: PPUSH
16102: LD_VAR 0 3
16106: PPUSH
16107: CALL_OW 74
16111: PPUSH
16112: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16116: LD_VAR 0 2
16120: PUSH
16121: LD_INT 60
16123: GREATER
16124: PUSH
16125: LD_VAR 0 3
16129: PPUSH
16130: CALL_OW 301
16134: OR
16135: IFFALSE 16012
// if un then
16137: LD_VAR 0 3
16141: IFFALSE 16152
// RemoveUnit ( un ) ;
16143: LD_VAR 0 3
16147: PPUSH
16148: CALL_OW 64
// end ;
16152: PPOPN 3
16154: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16155: LD_INT 0
16157: PPUSH
// case cmd of 301 :
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 301
16165: DOUBLE
16166: EQUAL
16167: IFTRUE 16171
16169: GO 16203
16171: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16172: LD_VAR 0 6
16176: PPUSH
16177: LD_VAR 0 7
16181: PPUSH
16182: LD_VAR 0 8
16186: PPUSH
16187: LD_VAR 0 4
16191: PPUSH
16192: LD_VAR 0 5
16196: PPUSH
16197: CALL 17404 0 5
16201: GO 16324
16203: LD_INT 302
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16248
16211: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16212: LD_VAR 0 6
16216: PPUSH
16217: LD_VAR 0 7
16221: PPUSH
16222: LD_VAR 0 8
16226: PPUSH
16227: LD_VAR 0 9
16231: PPUSH
16232: LD_VAR 0 4
16236: PPUSH
16237: LD_VAR 0 5
16241: PPUSH
16242: CALL 17495 0 6
16246: GO 16324
16248: LD_INT 303
16250: DOUBLE
16251: EQUAL
16252: IFTRUE 16256
16254: GO 16293
16256: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16257: LD_VAR 0 6
16261: PPUSH
16262: LD_VAR 0 7
16266: PPUSH
16267: LD_VAR 0 8
16271: PPUSH
16272: LD_VAR 0 9
16276: PPUSH
16277: LD_VAR 0 4
16281: PPUSH
16282: LD_VAR 0 5
16286: PPUSH
16287: CALL 16329 0 6
16291: GO 16324
16293: LD_INT 304
16295: DOUBLE
16296: EQUAL
16297: IFTRUE 16301
16299: GO 16323
16301: POP
// hHackTeleport ( unit , x , y ) ; end ;
16302: LD_VAR 0 2
16306: PPUSH
16307: LD_VAR 0 4
16311: PPUSH
16312: LD_VAR 0 5
16316: PPUSH
16317: CALL 18088 0 3
16321: GO 16324
16323: POP
// end ;
16324: LD_VAR 0 12
16328: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16329: LD_INT 0
16331: PPUSH
16332: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16333: LD_VAR 0 1
16337: PUSH
16338: LD_INT 1
16340: LESS
16341: PUSH
16342: LD_VAR 0 1
16346: PUSH
16347: LD_INT 3
16349: GREATER
16350: OR
16351: PUSH
16352: LD_VAR 0 5
16356: PPUSH
16357: LD_VAR 0 6
16361: PPUSH
16362: CALL_OW 428
16366: OR
16367: IFFALSE 16371
// exit ;
16369: GO 17091
// uc_side := your_side ;
16371: LD_ADDR_OWVAR 20
16375: PUSH
16376: LD_OWVAR 2
16380: ST_TO_ADDR
// uc_nation := nation ;
16381: LD_ADDR_OWVAR 21
16385: PUSH
16386: LD_VAR 0 1
16390: ST_TO_ADDR
// bc_level = 1 ;
16391: LD_ADDR_OWVAR 43
16395: PUSH
16396: LD_INT 1
16398: ST_TO_ADDR
// case btype of 1 :
16399: LD_VAR 0 2
16403: PUSH
16404: LD_INT 1
16406: DOUBLE
16407: EQUAL
16408: IFTRUE 16412
16410: GO 16423
16412: POP
// bc_type := b_depot ; 2 :
16413: LD_ADDR_OWVAR 42
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
16421: GO 17035
16423: LD_INT 2
16425: DOUBLE
16426: EQUAL
16427: IFTRUE 16431
16429: GO 16442
16431: POP
// bc_type := b_warehouse ; 3 :
16432: LD_ADDR_OWVAR 42
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
16440: GO 17035
16442: LD_INT 3
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16461
16450: POP
// bc_type := b_lab ; 4 .. 9 :
16451: LD_ADDR_OWVAR 42
16455: PUSH
16456: LD_INT 6
16458: ST_TO_ADDR
16459: GO 17035
16461: LD_INT 4
16463: DOUBLE
16464: GREATEREQUAL
16465: IFFALSE 16473
16467: LD_INT 9
16469: DOUBLE
16470: LESSEQUAL
16471: IFTRUE 16475
16473: GO 16527
16475: POP
// begin bc_type := b_lab_half ;
16476: LD_ADDR_OWVAR 42
16480: PUSH
16481: LD_INT 7
16483: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16484: LD_ADDR_OWVAR 44
16488: PUSH
16489: LD_INT 10
16491: PUSH
16492: LD_INT 11
16494: PUSH
16495: LD_INT 12
16497: PUSH
16498: LD_INT 15
16500: PUSH
16501: LD_INT 14
16503: PUSH
16504: LD_INT 13
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: LD_VAR 0 2
16519: PUSH
16520: LD_INT 3
16522: MINUS
16523: ARRAY
16524: ST_TO_ADDR
// end ; 10 .. 13 :
16525: GO 17035
16527: LD_INT 10
16529: DOUBLE
16530: GREATEREQUAL
16531: IFFALSE 16539
16533: LD_INT 13
16535: DOUBLE
16536: LESSEQUAL
16537: IFTRUE 16541
16539: GO 16618
16541: POP
// begin bc_type := b_lab_full ;
16542: LD_ADDR_OWVAR 42
16546: PUSH
16547: LD_INT 8
16549: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16550: LD_ADDR_OWVAR 44
16554: PUSH
16555: LD_INT 10
16557: PUSH
16558: LD_INT 12
16560: PUSH
16561: LD_INT 14
16563: PUSH
16564: LD_INT 13
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: PUSH
16573: LD_VAR 0 2
16577: PUSH
16578: LD_INT 9
16580: MINUS
16581: ARRAY
16582: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16583: LD_ADDR_OWVAR 45
16587: PUSH
16588: LD_INT 11
16590: PUSH
16591: LD_INT 15
16593: PUSH
16594: LD_INT 12
16596: PUSH
16597: LD_INT 15
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: LD_VAR 0 2
16610: PUSH
16611: LD_INT 9
16613: MINUS
16614: ARRAY
16615: ST_TO_ADDR
// end ; 14 :
16616: GO 17035
16618: LD_INT 14
16620: DOUBLE
16621: EQUAL
16622: IFTRUE 16626
16624: GO 16637
16626: POP
// bc_type := b_workshop ; 15 :
16627: LD_ADDR_OWVAR 42
16631: PUSH
16632: LD_INT 2
16634: ST_TO_ADDR
16635: GO 17035
16637: LD_INT 15
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16656
16645: POP
// bc_type := b_factory ; 16 :
16646: LD_ADDR_OWVAR 42
16650: PUSH
16651: LD_INT 3
16653: ST_TO_ADDR
16654: GO 17035
16656: LD_INT 16
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16675
16664: POP
// bc_type := b_ext_gun ; 17 :
16665: LD_ADDR_OWVAR 42
16669: PUSH
16670: LD_INT 17
16672: ST_TO_ADDR
16673: GO 17035
16675: LD_INT 17
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16711
16683: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16684: LD_ADDR_OWVAR 42
16688: PUSH
16689: LD_INT 19
16691: PUSH
16692: LD_INT 23
16694: PUSH
16695: LD_INT 19
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: PUSH
16703: LD_VAR 0 1
16707: ARRAY
16708: ST_TO_ADDR
16709: GO 17035
16711: LD_INT 18
16713: DOUBLE
16714: EQUAL
16715: IFTRUE 16719
16717: GO 16730
16719: POP
// bc_type := b_ext_radar ; 19 :
16720: LD_ADDR_OWVAR 42
16724: PUSH
16725: LD_INT 20
16727: ST_TO_ADDR
16728: GO 17035
16730: LD_INT 19
16732: DOUBLE
16733: EQUAL
16734: IFTRUE 16738
16736: GO 16749
16738: POP
// bc_type := b_ext_radio ; 20 :
16739: LD_ADDR_OWVAR 42
16743: PUSH
16744: LD_INT 22
16746: ST_TO_ADDR
16747: GO 17035
16749: LD_INT 20
16751: DOUBLE
16752: EQUAL
16753: IFTRUE 16757
16755: GO 16768
16757: POP
// bc_type := b_ext_siberium ; 21 :
16758: LD_ADDR_OWVAR 42
16762: PUSH
16763: LD_INT 21
16765: ST_TO_ADDR
16766: GO 17035
16768: LD_INT 21
16770: DOUBLE
16771: EQUAL
16772: IFTRUE 16776
16774: GO 16787
16776: POP
// bc_type := b_ext_computer ; 22 :
16777: LD_ADDR_OWVAR 42
16781: PUSH
16782: LD_INT 24
16784: ST_TO_ADDR
16785: GO 17035
16787: LD_INT 22
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16795
16793: GO 16806
16795: POP
// bc_type := b_ext_track ; 23 :
16796: LD_ADDR_OWVAR 42
16800: PUSH
16801: LD_INT 16
16803: ST_TO_ADDR
16804: GO 17035
16806: LD_INT 23
16808: DOUBLE
16809: EQUAL
16810: IFTRUE 16814
16812: GO 16825
16814: POP
// bc_type := b_ext_laser ; 24 :
16815: LD_ADDR_OWVAR 42
16819: PUSH
16820: LD_INT 25
16822: ST_TO_ADDR
16823: GO 17035
16825: LD_INT 24
16827: DOUBLE
16828: EQUAL
16829: IFTRUE 16833
16831: GO 16844
16833: POP
// bc_type := b_control_tower ; 25 :
16834: LD_ADDR_OWVAR 42
16838: PUSH
16839: LD_INT 36
16841: ST_TO_ADDR
16842: GO 17035
16844: LD_INT 25
16846: DOUBLE
16847: EQUAL
16848: IFTRUE 16852
16850: GO 16863
16852: POP
// bc_type := b_breastwork ; 26 :
16853: LD_ADDR_OWVAR 42
16857: PUSH
16858: LD_INT 31
16860: ST_TO_ADDR
16861: GO 17035
16863: LD_INT 26
16865: DOUBLE
16866: EQUAL
16867: IFTRUE 16871
16869: GO 16882
16871: POP
// bc_type := b_bunker ; 27 :
16872: LD_ADDR_OWVAR 42
16876: PUSH
16877: LD_INT 32
16879: ST_TO_ADDR
16880: GO 17035
16882: LD_INT 27
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 16901
16890: POP
// bc_type := b_turret ; 28 :
16891: LD_ADDR_OWVAR 42
16895: PUSH
16896: LD_INT 33
16898: ST_TO_ADDR
16899: GO 17035
16901: LD_INT 28
16903: DOUBLE
16904: EQUAL
16905: IFTRUE 16909
16907: GO 16920
16909: POP
// bc_type := b_armoury ; 29 :
16910: LD_ADDR_OWVAR 42
16914: PUSH
16915: LD_INT 4
16917: ST_TO_ADDR
16918: GO 17035
16920: LD_INT 29
16922: DOUBLE
16923: EQUAL
16924: IFTRUE 16928
16926: GO 16939
16928: POP
// bc_type := b_barracks ; 30 :
16929: LD_ADDR_OWVAR 42
16933: PUSH
16934: LD_INT 5
16936: ST_TO_ADDR
16937: GO 17035
16939: LD_INT 30
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 16958
16947: POP
// bc_type := b_solar_power ; 31 :
16948: LD_ADDR_OWVAR 42
16952: PUSH
16953: LD_INT 27
16955: ST_TO_ADDR
16956: GO 17035
16958: LD_INT 31
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 16977
16966: POP
// bc_type := b_oil_power ; 32 :
16967: LD_ADDR_OWVAR 42
16971: PUSH
16972: LD_INT 26
16974: ST_TO_ADDR
16975: GO 17035
16977: LD_INT 32
16979: DOUBLE
16980: EQUAL
16981: IFTRUE 16985
16983: GO 16996
16985: POP
// bc_type := b_siberite_power ; 33 :
16986: LD_ADDR_OWVAR 42
16990: PUSH
16991: LD_INT 28
16993: ST_TO_ADDR
16994: GO 17035
16996: LD_INT 33
16998: DOUBLE
16999: EQUAL
17000: IFTRUE 17004
17002: GO 17015
17004: POP
// bc_type := b_oil_mine ; 34 :
17005: LD_ADDR_OWVAR 42
17009: PUSH
17010: LD_INT 29
17012: ST_TO_ADDR
17013: GO 17035
17015: LD_INT 34
17017: DOUBLE
17018: EQUAL
17019: IFTRUE 17023
17021: GO 17034
17023: POP
// bc_type := b_siberite_mine ; end ;
17024: LD_ADDR_OWVAR 42
17028: PUSH
17029: LD_INT 30
17031: ST_TO_ADDR
17032: GO 17035
17034: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17035: LD_ADDR_VAR 0 8
17039: PUSH
17040: LD_VAR 0 5
17044: PPUSH
17045: LD_VAR 0 6
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: CALL_OW 47
17059: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17060: LD_OWVAR 42
17064: PUSH
17065: LD_INT 32
17067: PUSH
17068: LD_INT 33
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: IN
17075: IFFALSE 17091
// PlaceWeaponTurret ( b , weapon ) ;
17077: LD_VAR 0 8
17081: PPUSH
17082: LD_VAR 0 4
17086: PPUSH
17087: CALL_OW 431
// end ;
17091: LD_VAR 0 7
17095: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17102: LD_ADDR_VAR 0 4
17106: PUSH
17107: LD_INT 22
17109: PUSH
17110: LD_OWVAR 2
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 0
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: ST_TO_ADDR
// if not tmp then
17156: LD_VAR 0 4
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17224
// for i in tmp do
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_VAR 0 4
17174: PUSH
17175: FOR_IN
17176: IFFALSE 17222
// for j = 1 to 3 do
17178: LD_ADDR_VAR 0 3
17182: PUSH
17183: DOUBLE
17184: LD_INT 1
17186: DEC
17187: ST_TO_ADDR
17188: LD_INT 3
17190: PUSH
17191: FOR_TO
17192: IFFALSE 17218
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17194: LD_VAR 0 2
17198: PPUSH
17199: CALL_OW 274
17203: PPUSH
17204: LD_VAR 0 3
17208: PPUSH
17209: LD_INT 99999
17211: PPUSH
17212: CALL_OW 277
17216: GO 17191
17218: POP
17219: POP
17220: GO 17175
17222: POP
17223: POP
// end ;
17224: LD_VAR 0 1
17228: RET
// export function hHackSetLevel10 ; var i , j ; begin
17229: LD_INT 0
17231: PPUSH
17232: PPUSH
17233: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17234: LD_ADDR_VAR 0 2
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PPUSH
17249: CALL_OW 69
17253: PUSH
17254: FOR_IN
17255: IFFALSE 17307
// if IsSelected ( i ) then
17257: LD_VAR 0 2
17261: PPUSH
17262: CALL_OW 306
17266: IFFALSE 17305
// begin for j := 1 to 4 do
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: DOUBLE
17274: LD_INT 1
17276: DEC
17277: ST_TO_ADDR
17278: LD_INT 4
17280: PUSH
17281: FOR_TO
17282: IFFALSE 17303
// SetSkill ( i , j , 10 ) ;
17284: LD_VAR 0 2
17288: PPUSH
17289: LD_VAR 0 3
17293: PPUSH
17294: LD_INT 10
17296: PPUSH
17297: CALL_OW 237
17301: GO 17281
17303: POP
17304: POP
// end ;
17305: GO 17254
17307: POP
17308: POP
// end ;
17309: LD_VAR 0 1
17313: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_INT 22
17326: PUSH
17327: LD_OWVAR 2
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 21
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PPUSH
17350: CALL_OW 69
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17397
// begin for j := 1 to 4 do
17358: LD_ADDR_VAR 0 3
17362: PUSH
17363: DOUBLE
17364: LD_INT 1
17366: DEC
17367: ST_TO_ADDR
17368: LD_INT 4
17370: PUSH
17371: FOR_TO
17372: IFFALSE 17393
// SetSkill ( i , j , 10 ) ;
17374: LD_VAR 0 2
17378: PPUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_INT 10
17386: PPUSH
17387: CALL_OW 237
17391: GO 17371
17393: POP
17394: POP
// end ;
17395: GO 17355
17397: POP
17398: POP
// end ;
17399: LD_VAR 0 1
17403: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17404: LD_INT 0
17406: PPUSH
// uc_side := your_side ;
17407: LD_ADDR_OWVAR 20
17411: PUSH
17412: LD_OWVAR 2
17416: ST_TO_ADDR
// uc_nation := nation ;
17417: LD_ADDR_OWVAR 21
17421: PUSH
17422: LD_VAR 0 1
17426: ST_TO_ADDR
// InitHc ;
17427: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17431: LD_INT 0
17433: PPUSH
17434: LD_VAR 0 2
17438: PPUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17448: LD_VAR 0 4
17452: PPUSH
17453: LD_VAR 0 5
17457: PPUSH
17458: CALL_OW 428
17462: PUSH
17463: LD_INT 0
17465: EQUAL
17466: IFFALSE 17490
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17468: CALL_OW 44
17472: PPUSH
17473: LD_VAR 0 4
17477: PPUSH
17478: LD_VAR 0 5
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: CALL_OW 48
// end ;
17490: LD_VAR 0 6
17494: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17495: LD_INT 0
17497: PPUSH
17498: PPUSH
// uc_side := your_side ;
17499: LD_ADDR_OWVAR 20
17503: PUSH
17504: LD_OWVAR 2
17508: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17509: LD_VAR 0 1
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: LD_INT 3
17522: PUSH
17523: LD_INT 4
17525: PUSH
17526: LD_INT 5
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: IN
17536: IFFALSE 17548
// uc_nation := nation_american else
17538: LD_ADDR_OWVAR 21
17542: PUSH
17543: LD_INT 1
17545: ST_TO_ADDR
17546: GO 17591
// if chassis in [ 11 , 12 , 13 , 14 ] then
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 11
17555: PUSH
17556: LD_INT 12
17558: PUSH
17559: LD_INT 13
17561: PUSH
17562: LD_INT 14
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: IN
17571: IFFALSE 17583
// uc_nation := nation_arabian else
17573: LD_ADDR_OWVAR 21
17577: PUSH
17578: LD_INT 2
17580: ST_TO_ADDR
17581: GO 17591
// uc_nation := nation_russian ;
17583: LD_ADDR_OWVAR 21
17587: PUSH
17588: LD_INT 3
17590: ST_TO_ADDR
// vc_chassis := chassis ;
17591: LD_ADDR_OWVAR 37
17595: PUSH
17596: LD_VAR 0 1
17600: ST_TO_ADDR
// vc_engine := engine ;
17601: LD_ADDR_OWVAR 39
17605: PUSH
17606: LD_VAR 0 2
17610: ST_TO_ADDR
// vc_control := control ;
17611: LD_ADDR_OWVAR 38
17615: PUSH
17616: LD_VAR 0 3
17620: ST_TO_ADDR
// vc_weapon := weapon ;
17621: LD_ADDR_OWVAR 40
17625: PUSH
17626: LD_VAR 0 4
17630: ST_TO_ADDR
// un := CreateVehicle ;
17631: LD_ADDR_VAR 0 8
17635: PUSH
17636: CALL_OW 45
17640: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17641: LD_VAR 0 8
17645: PPUSH
17646: LD_INT 0
17648: PPUSH
17649: LD_INT 5
17651: PPUSH
17652: CALL_OW 12
17656: PPUSH
17657: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17661: LD_VAR 0 8
17665: PPUSH
17666: LD_VAR 0 5
17670: PPUSH
17671: LD_VAR 0 6
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: CALL_OW 48
// end ;
17683: LD_VAR 0 7
17687: RET
// export hInvincible ; every 1 do
17688: GO 17690
17690: DISABLE
// hInvincible := [ ] ;
17691: LD_ADDR_EXP 69
17695: PUSH
17696: EMPTY
17697: ST_TO_ADDR
17698: END
// every 10 do var i ;
17699: GO 17701
17701: DISABLE
17702: LD_INT 0
17704: PPUSH
// begin enable ;
17705: ENABLE
// if not hInvincible then
17706: LD_EXP 69
17710: NOT
17711: IFFALSE 17715
// exit ;
17713: GO 17759
// for i in hInvincible do
17715: LD_ADDR_VAR 0 1
17719: PUSH
17720: LD_EXP 69
17724: PUSH
17725: FOR_IN
17726: IFFALSE 17757
// if GetLives ( i ) < 1000 then
17728: LD_VAR 0 1
17732: PPUSH
17733: CALL_OW 256
17737: PUSH
17738: LD_INT 1000
17740: LESS
17741: IFFALSE 17755
// SetLives ( i , 1000 ) ;
17743: LD_VAR 0 1
17747: PPUSH
17748: LD_INT 1000
17750: PPUSH
17751: CALL_OW 234
17755: GO 17725
17757: POP
17758: POP
// end ;
17759: PPOPN 1
17761: END
// export function hHackInvincible ; var i ; begin
17762: LD_INT 0
17764: PPUSH
17765: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17766: LD_ADDR_VAR 0 2
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17866
// if IsSelected ( i ) then
17807: LD_VAR 0 2
17811: PPUSH
17812: CALL_OW 306
17816: IFFALSE 17864
// begin if i in hInvincible then
17818: LD_VAR 0 2
17822: PUSH
17823: LD_EXP 69
17827: IN
17828: IFFALSE 17848
// hInvincible := hInvincible diff i else
17830: LD_ADDR_EXP 69
17834: PUSH
17835: LD_EXP 69
17839: PUSH
17840: LD_VAR 0 2
17844: DIFF
17845: ST_TO_ADDR
17846: GO 17864
// hInvincible := hInvincible union i ;
17848: LD_ADDR_EXP 69
17852: PUSH
17853: LD_EXP 69
17857: PUSH
17858: LD_VAR 0 2
17862: UNION
17863: ST_TO_ADDR
// end ;
17864: GO 17804
17866: POP
17867: POP
// end ;
17868: LD_VAR 0 1
17872: RET
// export function hHackInvisible ; var i , j ; begin
17873: LD_INT 0
17875: PPUSH
17876: PPUSH
17877: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PPUSH
17893: CALL_OW 69
17897: PUSH
17898: FOR_IN
17899: IFFALSE 17923
// if IsSelected ( i ) then
17901: LD_VAR 0 2
17905: PPUSH
17906: CALL_OW 306
17910: IFFALSE 17921
// ComForceInvisible ( i ) ;
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 496
17921: GO 17898
17923: POP
17924: POP
// end ;
17925: LD_VAR 0 1
17929: RET
// export function hHackChangeYourSide ; begin
17930: LD_INT 0
17932: PPUSH
// if your_side = 8 then
17933: LD_OWVAR 2
17937: PUSH
17938: LD_INT 8
17940: EQUAL
17941: IFFALSE 17953
// your_side := 0 else
17943: LD_ADDR_OWVAR 2
17947: PUSH
17948: LD_INT 0
17950: ST_TO_ADDR
17951: GO 17967
// your_side := your_side + 1 ;
17953: LD_ADDR_OWVAR 2
17957: PUSH
17958: LD_OWVAR 2
17962: PUSH
17963: LD_INT 1
17965: PLUS
17966: ST_TO_ADDR
// end ;
17967: LD_VAR 0 1
17971: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17972: LD_INT 0
17974: PPUSH
17975: PPUSH
17976: PPUSH
// for i in all_units do
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_OWVAR 3
17986: PUSH
17987: FOR_IN
17988: IFFALSE 18066
// if IsSelected ( i ) then
17990: LD_VAR 0 2
17994: PPUSH
17995: CALL_OW 306
17999: IFFALSE 18064
// begin j := GetSide ( i ) ;
18001: LD_ADDR_VAR 0 3
18005: PUSH
18006: LD_VAR 0 2
18010: PPUSH
18011: CALL_OW 255
18015: ST_TO_ADDR
// if j = 8 then
18016: LD_VAR 0 3
18020: PUSH
18021: LD_INT 8
18023: EQUAL
18024: IFFALSE 18036
// j := 0 else
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: LD_INT 0
18033: ST_TO_ADDR
18034: GO 18050
// j := j + 1 ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 3
18045: PUSH
18046: LD_INT 1
18048: PLUS
18049: ST_TO_ADDR
// SetSide ( i , j ) ;
18050: LD_VAR 0 2
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: CALL_OW 235
// end ;
18064: GO 17987
18066: POP
18067: POP
// end ;
18068: LD_VAR 0 1
18072: RET
// export function hHackFog ; begin
18073: LD_INT 0
18075: PPUSH
// FogOff ( true ) ;
18076: LD_INT 1
18078: PPUSH
18079: CALL_OW 344
// end ;
18083: LD_VAR 0 1
18087: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18088: LD_INT 0
18090: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18091: LD_VAR 0 1
18095: PPUSH
18096: LD_VAR 0 2
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: LD_INT 1
18111: PPUSH
18112: CALL_OW 483
// CenterOnXY ( x , y ) ;
18116: LD_VAR 0 2
18120: PPUSH
18121: LD_VAR 0 3
18125: PPUSH
18126: CALL_OW 84
// end ; end_of_file
18130: LD_VAR 0 4
18134: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18135: LD_INT 0
18137: PPUSH
18138: PPUSH
18139: PPUSH
18140: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18141: LD_VAR 0 1
18145: PPUSH
18146: CALL_OW 264
18150: PUSH
18151: LD_EXP 86
18155: EQUAL
18156: IFFALSE 18228
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18158: LD_INT 68
18160: PPUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 255
18170: PPUSH
18171: CALL_OW 321
18175: PUSH
18176: LD_INT 2
18178: EQUAL
18179: IFFALSE 18191
// eff := 70 else
18181: LD_ADDR_VAR 0 4
18185: PUSH
18186: LD_INT 70
18188: ST_TO_ADDR
18189: GO 18199
// eff := 30 ;
18191: LD_ADDR_VAR 0 4
18195: PUSH
18196: LD_INT 30
18198: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 250
18208: PPUSH
18209: LD_VAR 0 1
18213: PPUSH
18214: CALL_OW 251
18218: PPUSH
18219: LD_VAR 0 4
18223: PPUSH
18224: CALL_OW 495
// end ; end ;
18228: LD_VAR 0 2
18232: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18233: LD_INT 0
18235: PPUSH
// end ;
18236: LD_VAR 0 4
18240: RET
// export function SOS_Command ( cmd ) ; begin
18241: LD_INT 0
18243: PPUSH
// end ;
18244: LD_VAR 0 2
18248: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18249: LD_INT 0
18251: PPUSH
// if cmd = 121 then
18252: LD_VAR 0 1
18256: PUSH
18257: LD_INT 121
18259: EQUAL
18260: IFFALSE 18262
// end ;
18262: LD_VAR 0 6
18266: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18267: LD_INT 0
18269: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18270: LD_VAR 0 1
18274: PUSH
18275: LD_INT 250
18277: EQUAL
18278: PUSH
18279: LD_VAR 0 2
18283: PPUSH
18284: CALL_OW 264
18288: PUSH
18289: LD_EXP 89
18293: EQUAL
18294: AND
18295: IFFALSE 18316
// MinerPlaceMine ( unit , x , y ) ;
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_VAR 0 4
18306: PPUSH
18307: LD_VAR 0 5
18311: PPUSH
18312: CALL 20665 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18316: LD_VAR 0 1
18320: PUSH
18321: LD_INT 251
18323: EQUAL
18324: PUSH
18325: LD_VAR 0 2
18329: PPUSH
18330: CALL_OW 264
18334: PUSH
18335: LD_EXP 89
18339: EQUAL
18340: AND
18341: IFFALSE 18362
// MinerDetonateMine ( unit , x , y ) ;
18343: LD_VAR 0 2
18347: PPUSH
18348: LD_VAR 0 4
18352: PPUSH
18353: LD_VAR 0 5
18357: PPUSH
18358: CALL 20942 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 252
18369: EQUAL
18370: PUSH
18371: LD_VAR 0 2
18375: PPUSH
18376: CALL_OW 264
18380: PUSH
18381: LD_EXP 89
18385: EQUAL
18386: AND
18387: IFFALSE 18408
// MinerCreateMinefield ( unit , x , y ) ;
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_VAR 0 4
18398: PPUSH
18399: LD_VAR 0 5
18403: PPUSH
18404: CALL 21359 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18408: LD_VAR 0 1
18412: PUSH
18413: LD_INT 253
18415: EQUAL
18416: PUSH
18417: LD_VAR 0 2
18421: PPUSH
18422: CALL_OW 257
18426: PUSH
18427: LD_INT 5
18429: EQUAL
18430: AND
18431: IFFALSE 18452
// ComBinocular ( unit , x , y ) ;
18433: LD_VAR 0 2
18437: PPUSH
18438: LD_VAR 0 4
18442: PPUSH
18443: LD_VAR 0 5
18447: PPUSH
18448: CALL 21730 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18452: LD_VAR 0 1
18456: PUSH
18457: LD_INT 254
18459: EQUAL
18460: PUSH
18461: LD_VAR 0 2
18465: PPUSH
18466: CALL_OW 264
18470: PUSH
18471: LD_EXP 84
18475: EQUAL
18476: AND
18477: PUSH
18478: LD_VAR 0 3
18482: PPUSH
18483: CALL_OW 263
18487: PUSH
18488: LD_INT 3
18490: EQUAL
18491: AND
18492: IFFALSE 18508
// HackDestroyVehicle ( unit , selectedUnit ) ;
18494: LD_VAR 0 2
18498: PPUSH
18499: LD_VAR 0 3
18503: PPUSH
18504: CALL 20025 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18508: LD_VAR 0 1
18512: PUSH
18513: LD_INT 255
18515: EQUAL
18516: PUSH
18517: LD_VAR 0 2
18521: PPUSH
18522: CALL_OW 264
18526: PUSH
18527: LD_INT 14
18529: PUSH
18530: LD_INT 53
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: IN
18537: AND
18538: PUSH
18539: LD_VAR 0 4
18543: PPUSH
18544: LD_VAR 0 5
18548: PPUSH
18549: CALL_OW 488
18553: AND
18554: IFFALSE 18578
// CutTreeXYR ( unit , x , y , 12 ) ;
18556: LD_VAR 0 2
18560: PPUSH
18561: LD_VAR 0 4
18565: PPUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_INT 12
18573: PPUSH
18574: CALL 18591 0 4
// end ;
18578: LD_VAR 0 6
18582: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18583: LD_INT 0
18585: PPUSH
// end ;
18586: LD_VAR 0 4
18590: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18591: LD_INT 0
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18602: LD_VAR 0 1
18606: NOT
18607: PUSH
18608: LD_VAR 0 2
18612: PPUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: CALL_OW 488
18622: NOT
18623: OR
18624: PUSH
18625: LD_VAR 0 4
18629: NOT
18630: OR
18631: IFFALSE 18635
// exit ;
18633: GO 18975
// list := [ ] ;
18635: LD_ADDR_VAR 0 13
18639: PUSH
18640: EMPTY
18641: ST_TO_ADDR
// if x - r < 0 then
18642: LD_VAR 0 2
18646: PUSH
18647: LD_VAR 0 4
18651: MINUS
18652: PUSH
18653: LD_INT 0
18655: LESS
18656: IFFALSE 18668
// min_x := 0 else
18658: LD_ADDR_VAR 0 7
18662: PUSH
18663: LD_INT 0
18665: ST_TO_ADDR
18666: GO 18684
// min_x := x - r ;
18668: LD_ADDR_VAR 0 7
18672: PUSH
18673: LD_VAR 0 2
18677: PUSH
18678: LD_VAR 0 4
18682: MINUS
18683: ST_TO_ADDR
// if y - r < 0 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_VAR 0 4
18693: MINUS
18694: PUSH
18695: LD_INT 0
18697: LESS
18698: IFFALSE 18710
// min_y := 0 else
18700: LD_ADDR_VAR 0 8
18704: PUSH
18705: LD_INT 0
18707: ST_TO_ADDR
18708: GO 18726
// min_y := y - r ;
18710: LD_ADDR_VAR 0 8
18714: PUSH
18715: LD_VAR 0 3
18719: PUSH
18720: LD_VAR 0 4
18724: MINUS
18725: ST_TO_ADDR
// max_x := x + r ;
18726: LD_ADDR_VAR 0 9
18730: PUSH
18731: LD_VAR 0 2
18735: PUSH
18736: LD_VAR 0 4
18740: PLUS
18741: ST_TO_ADDR
// max_y := y + r ;
18742: LD_ADDR_VAR 0 10
18746: PUSH
18747: LD_VAR 0 3
18751: PUSH
18752: LD_VAR 0 4
18756: PLUS
18757: ST_TO_ADDR
// for _x = min_x to max_x do
18758: LD_ADDR_VAR 0 11
18762: PUSH
18763: DOUBLE
18764: LD_VAR 0 7
18768: DEC
18769: ST_TO_ADDR
18770: LD_VAR 0 9
18774: PUSH
18775: FOR_TO
18776: IFFALSE 18893
// for _y = min_y to max_y do
18778: LD_ADDR_VAR 0 12
18782: PUSH
18783: DOUBLE
18784: LD_VAR 0 8
18788: DEC
18789: ST_TO_ADDR
18790: LD_VAR 0 10
18794: PUSH
18795: FOR_TO
18796: IFFALSE 18889
// begin if not ValidHex ( _x , _y ) then
18798: LD_VAR 0 11
18802: PPUSH
18803: LD_VAR 0 12
18807: PPUSH
18808: CALL_OW 488
18812: NOT
18813: IFFALSE 18817
// continue ;
18815: GO 18795
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18817: LD_VAR 0 11
18821: PPUSH
18822: LD_VAR 0 12
18826: PPUSH
18827: CALL_OW 351
18831: PUSH
18832: LD_VAR 0 11
18836: PPUSH
18837: LD_VAR 0 12
18841: PPUSH
18842: CALL_OW 554
18846: AND
18847: IFFALSE 18887
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18849: LD_ADDR_VAR 0 13
18853: PUSH
18854: LD_VAR 0 13
18858: PPUSH
18859: LD_VAR 0 13
18863: PUSH
18864: LD_INT 1
18866: PLUS
18867: PPUSH
18868: LD_VAR 0 11
18872: PUSH
18873: LD_VAR 0 12
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 2
18886: ST_TO_ADDR
// end ;
18887: GO 18795
18889: POP
18890: POP
18891: GO 18775
18893: POP
18894: POP
// if not list then
18895: LD_VAR 0 13
18899: NOT
18900: IFFALSE 18904
// exit ;
18902: GO 18975
// for i in list do
18904: LD_ADDR_VAR 0 6
18908: PUSH
18909: LD_VAR 0 13
18913: PUSH
18914: FOR_IN
18915: IFFALSE 18973
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_STRING M
18924: PUSH
18925: LD_VAR 0 6
18929: PUSH
18930: LD_INT 1
18932: ARRAY
18933: PUSH
18934: LD_VAR 0 6
18938: PUSH
18939: LD_INT 2
18941: ARRAY
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: PPUSH
18967: CALL_OW 447
18971: GO 18914
18973: POP
18974: POP
// end ;
18975: LD_VAR 0 5
18979: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18980: LD_EXP 72
18984: NOT
18985: IFFALSE 19035
18987: GO 18989
18989: DISABLE
// begin initHack := true ;
18990: LD_ADDR_EXP 72
18994: PUSH
18995: LD_INT 1
18997: ST_TO_ADDR
// hackTanks := [ ] ;
18998: LD_ADDR_EXP 73
19002: PUSH
19003: EMPTY
19004: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19005: LD_ADDR_EXP 74
19009: PUSH
19010: EMPTY
19011: ST_TO_ADDR
// hackLimit := 3 ;
19012: LD_ADDR_EXP 75
19016: PUSH
19017: LD_INT 3
19019: ST_TO_ADDR
// hackDist := 12 ;
19020: LD_ADDR_EXP 76
19024: PUSH
19025: LD_INT 12
19027: ST_TO_ADDR
// hackCounter := [ ] ;
19028: LD_ADDR_EXP 77
19032: PUSH
19033: EMPTY
19034: ST_TO_ADDR
// end ;
19035: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19036: LD_EXP 72
19040: PUSH
19041: LD_INT 34
19043: PUSH
19044: LD_EXP 84
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 69
19057: AND
19058: IFFALSE 19313
19060: GO 19062
19062: DISABLE
19063: LD_INT 0
19065: PPUSH
19066: PPUSH
// begin enable ;
19067: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19068: LD_ADDR_VAR 0 1
19072: PUSH
19073: LD_INT 34
19075: PUSH
19076: LD_EXP 84
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PPUSH
19085: CALL_OW 69
19089: PUSH
19090: FOR_IN
19091: IFFALSE 19311
// begin if not i in hackTanks then
19093: LD_VAR 0 1
19097: PUSH
19098: LD_EXP 73
19102: IN
19103: NOT
19104: IFFALSE 19187
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19106: LD_ADDR_EXP 73
19110: PUSH
19111: LD_EXP 73
19115: PPUSH
19116: LD_EXP 73
19120: PUSH
19121: LD_INT 1
19123: PLUS
19124: PPUSH
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 1
19134: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19135: LD_ADDR_EXP 74
19139: PUSH
19140: LD_EXP 74
19144: PPUSH
19145: LD_EXP 74
19149: PUSH
19150: LD_INT 1
19152: PLUS
19153: PPUSH
19154: EMPTY
19155: PPUSH
19156: CALL_OW 1
19160: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19161: LD_ADDR_EXP 77
19165: PUSH
19166: LD_EXP 77
19170: PPUSH
19171: LD_EXP 77
19175: PUSH
19176: LD_INT 1
19178: PLUS
19179: PPUSH
19180: EMPTY
19181: PPUSH
19182: CALL_OW 1
19186: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 302
19196: NOT
19197: IFFALSE 19210
// begin HackUnlinkAll ( i ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL 19316 0 1
// continue ;
19208: GO 19090
// end ; HackCheckCapturedStatus ( i ) ;
19210: LD_VAR 0 1
19214: PPUSH
19215: CALL 19759 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19219: LD_ADDR_VAR 0 2
19223: PUSH
19224: LD_INT 81
19226: PUSH
19227: LD_VAR 0 1
19231: PPUSH
19232: CALL_OW 255
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 33
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 91
19253: PUSH
19254: LD_VAR 0 1
19258: PUSH
19259: LD_EXP 76
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 50
19271: PUSH
19272: EMPTY
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: PPUSH
19281: CALL_OW 69
19285: ST_TO_ADDR
// if not tmp then
19286: LD_VAR 0 2
19290: NOT
19291: IFFALSE 19295
// continue ;
19293: GO 19090
// HackLink ( i , tmp ) ;
19295: LD_VAR 0 1
19299: PPUSH
19300: LD_VAR 0 2
19304: PPUSH
19305: CALL 19452 0 2
// end ;
19309: GO 19090
19311: POP
19312: POP
// end ;
19313: PPOPN 2
19315: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
19320: PPUSH
// if not hack in hackTanks then
19321: LD_VAR 0 1
19325: PUSH
19326: LD_EXP 73
19330: IN
19331: NOT
19332: IFFALSE 19336
// exit ;
19334: GO 19447
// index := GetElementIndex ( hackTanks , hack ) ;
19336: LD_ADDR_VAR 0 4
19340: PUSH
19341: LD_EXP 73
19345: PPUSH
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL 27204 0 2
19355: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19356: LD_EXP 74
19360: PUSH
19361: LD_VAR 0 4
19365: ARRAY
19366: IFFALSE 19447
// begin for i in hackTanksCaptured [ index ] do
19368: LD_ADDR_VAR 0 3
19372: PUSH
19373: LD_EXP 74
19377: PUSH
19378: LD_VAR 0 4
19382: ARRAY
19383: PUSH
19384: FOR_IN
19385: IFFALSE 19411
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 1
19394: ARRAY
19395: PPUSH
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 2
19403: ARRAY
19404: PPUSH
19405: CALL_OW 235
19409: GO 19384
19411: POP
19412: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19413: LD_ADDR_EXP 74
19417: PUSH
19418: LD_EXP 74
19422: PPUSH
19423: LD_VAR 0 4
19427: PPUSH
19428: EMPTY
19429: PPUSH
19430: CALL_OW 1
19434: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19435: LD_VAR 0 1
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 505
// end ; end ;
19447: LD_VAR 0 2
19451: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
// if not hack in hackTanks or not vehicles then
19457: LD_VAR 0 1
19461: PUSH
19462: LD_EXP 73
19466: IN
19467: NOT
19468: PUSH
19469: LD_VAR 0 2
19473: NOT
19474: OR
19475: IFFALSE 19479
// exit ;
19477: GO 19754
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19479: LD_ADDR_VAR 0 2
19483: PUSH
19484: LD_VAR 0 1
19488: PPUSH
19489: LD_VAR 0 2
19493: PPUSH
19494: LD_INT 1
19496: PPUSH
19497: LD_INT 1
19499: PPUSH
19500: CALL 27854 0 4
19504: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19505: LD_ADDR_VAR 0 5
19509: PUSH
19510: LD_EXP 73
19514: PPUSH
19515: LD_VAR 0 1
19519: PPUSH
19520: CALL 27204 0 2
19524: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19525: LD_EXP 74
19529: PUSH
19530: LD_VAR 0 5
19534: ARRAY
19535: PUSH
19536: LD_EXP 75
19540: LESS
19541: IFFALSE 19730
// begin for i := 1 to vehicles do
19543: LD_ADDR_VAR 0 4
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_VAR 0 2
19557: PUSH
19558: FOR_TO
19559: IFFALSE 19728
// begin if hackTanksCaptured [ index ] = hackLimit then
19561: LD_EXP 74
19565: PUSH
19566: LD_VAR 0 5
19570: ARRAY
19571: PUSH
19572: LD_EXP 75
19576: EQUAL
19577: IFFALSE 19581
// break ;
19579: GO 19728
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19581: LD_ADDR_EXP 77
19585: PUSH
19586: LD_EXP 77
19590: PPUSH
19591: LD_VAR 0 5
19595: PPUSH
19596: LD_EXP 77
19600: PUSH
19601: LD_VAR 0 5
19605: ARRAY
19606: PUSH
19607: LD_INT 1
19609: PLUS
19610: PPUSH
19611: CALL_OW 1
19615: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19616: LD_ADDR_EXP 74
19620: PUSH
19621: LD_EXP 74
19625: PPUSH
19626: LD_VAR 0 5
19630: PUSH
19631: LD_EXP 74
19635: PUSH
19636: LD_VAR 0 5
19640: ARRAY
19641: PUSH
19642: LD_INT 1
19644: PLUS
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PPUSH
19650: LD_VAR 0 2
19654: PUSH
19655: LD_VAR 0 4
19659: ARRAY
19660: PUSH
19661: LD_VAR 0 2
19665: PUSH
19666: LD_VAR 0 4
19670: ARRAY
19671: PPUSH
19672: CALL_OW 255
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PPUSH
19681: CALL 27419 0 3
19685: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19686: LD_VAR 0 2
19690: PUSH
19691: LD_VAR 0 4
19695: ARRAY
19696: PPUSH
19697: LD_VAR 0 1
19701: PPUSH
19702: CALL_OW 255
19706: PPUSH
19707: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19711: LD_VAR 0 2
19715: PUSH
19716: LD_VAR 0 4
19720: ARRAY
19721: PPUSH
19722: CALL_OW 141
// end ;
19726: GO 19558
19728: POP
19729: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_EXP 74
19739: PUSH
19740: LD_VAR 0 5
19744: ARRAY
19745: PUSH
19746: LD_INT 0
19748: PLUS
19749: PPUSH
19750: CALL_OW 505
// end ;
19754: LD_VAR 0 3
19758: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19759: LD_INT 0
19761: PPUSH
19762: PPUSH
19763: PPUSH
19764: PPUSH
// if not hack in hackTanks then
19765: LD_VAR 0 1
19769: PUSH
19770: LD_EXP 73
19774: IN
19775: NOT
19776: IFFALSE 19780
// exit ;
19778: GO 20020
// index := GetElementIndex ( hackTanks , hack ) ;
19780: LD_ADDR_VAR 0 4
19784: PUSH
19785: LD_EXP 73
19789: PPUSH
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL 27204 0 2
19799: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19800: LD_ADDR_VAR 0 3
19804: PUSH
19805: DOUBLE
19806: LD_EXP 74
19810: PUSH
19811: LD_VAR 0 4
19815: ARRAY
19816: INC
19817: ST_TO_ADDR
19818: LD_INT 1
19820: PUSH
19821: FOR_DOWNTO
19822: IFFALSE 19994
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19824: LD_ADDR_VAR 0 5
19828: PUSH
19829: LD_EXP 74
19833: PUSH
19834: LD_VAR 0 4
19838: ARRAY
19839: PUSH
19840: LD_VAR 0 3
19844: ARRAY
19845: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19846: LD_VAR 0 5
19850: PUSH
19851: LD_INT 1
19853: ARRAY
19854: PPUSH
19855: CALL_OW 302
19859: NOT
19860: PUSH
19861: LD_VAR 0 5
19865: PUSH
19866: LD_INT 1
19868: ARRAY
19869: PPUSH
19870: CALL_OW 255
19874: PUSH
19875: LD_VAR 0 1
19879: PPUSH
19880: CALL_OW 255
19884: NONEQUAL
19885: OR
19886: IFFALSE 19992
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19888: LD_VAR 0 5
19892: PUSH
19893: LD_INT 1
19895: ARRAY
19896: PPUSH
19897: CALL_OW 305
19901: PUSH
19902: LD_VAR 0 5
19906: PUSH
19907: LD_INT 1
19909: ARRAY
19910: PPUSH
19911: CALL_OW 255
19915: PUSH
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 255
19925: EQUAL
19926: AND
19927: IFFALSE 19951
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19929: LD_VAR 0 5
19933: PUSH
19934: LD_INT 1
19936: ARRAY
19937: PPUSH
19938: LD_VAR 0 5
19942: PUSH
19943: LD_INT 2
19945: ARRAY
19946: PPUSH
19947: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19951: LD_ADDR_EXP 74
19955: PUSH
19956: LD_EXP 74
19960: PPUSH
19961: LD_VAR 0 4
19965: PPUSH
19966: LD_EXP 74
19970: PUSH
19971: LD_VAR 0 4
19975: ARRAY
19976: PPUSH
19977: LD_VAR 0 3
19981: PPUSH
19982: CALL_OW 3
19986: PPUSH
19987: CALL_OW 1
19991: ST_TO_ADDR
// end ; end ;
19992: GO 19821
19994: POP
19995: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19996: LD_VAR 0 1
20000: PPUSH
20001: LD_EXP 74
20005: PUSH
20006: LD_VAR 0 4
20010: ARRAY
20011: PUSH
20012: LD_INT 0
20014: PLUS
20015: PPUSH
20016: CALL_OW 505
// end ;
20020: LD_VAR 0 2
20024: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20025: LD_INT 0
20027: PPUSH
20028: PPUSH
20029: PPUSH
20030: PPUSH
// if not hack in hackTanks then
20031: LD_VAR 0 1
20035: PUSH
20036: LD_EXP 73
20040: IN
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20131
// index := GetElementIndex ( hackTanks , hack ) ;
20046: LD_ADDR_VAR 0 5
20050: PUSH
20051: LD_EXP 73
20055: PPUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL 27204 0 2
20065: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20066: LD_ADDR_VAR 0 4
20070: PUSH
20071: DOUBLE
20072: LD_INT 1
20074: DEC
20075: ST_TO_ADDR
20076: LD_EXP 74
20080: PUSH
20081: LD_VAR 0 5
20085: ARRAY
20086: PUSH
20087: FOR_TO
20088: IFFALSE 20129
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20090: LD_EXP 74
20094: PUSH
20095: LD_VAR 0 5
20099: ARRAY
20100: PUSH
20101: LD_VAR 0 4
20105: ARRAY
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: PUSH
20111: LD_VAR 0 2
20115: EQUAL
20116: IFFALSE 20127
// KillUnit ( vehicle ) ;
20118: LD_VAR 0 2
20122: PPUSH
20123: CALL_OW 66
20127: GO 20087
20129: POP
20130: POP
// end ;
20131: LD_VAR 0 3
20135: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20136: LD_EXP 78
20140: NOT
20141: IFFALSE 20176
20143: GO 20145
20145: DISABLE
// begin initMiner := true ;
20146: LD_ADDR_EXP 78
20150: PUSH
20151: LD_INT 1
20153: ST_TO_ADDR
// minersList := [ ] ;
20154: LD_ADDR_EXP 79
20158: PUSH
20159: EMPTY
20160: ST_TO_ADDR
// minerMinesList := [ ] ;
20161: LD_ADDR_EXP 80
20165: PUSH
20166: EMPTY
20167: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20168: LD_ADDR_EXP 81
20172: PUSH
20173: LD_INT 5
20175: ST_TO_ADDR
// end ;
20176: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20177: LD_EXP 78
20181: PUSH
20182: LD_INT 34
20184: PUSH
20185: LD_EXP 89
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PPUSH
20194: CALL_OW 69
20198: AND
20199: IFFALSE 20662
20201: GO 20203
20203: DISABLE
20204: LD_INT 0
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
// begin enable ;
20210: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20211: LD_ADDR_VAR 0 1
20215: PUSH
20216: LD_INT 34
20218: PUSH
20219: LD_EXP 89
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PPUSH
20228: CALL_OW 69
20232: PUSH
20233: FOR_IN
20234: IFFALSE 20306
// begin if not i in minersList then
20236: LD_VAR 0 1
20240: PUSH
20241: LD_EXP 79
20245: IN
20246: NOT
20247: IFFALSE 20304
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20249: LD_ADDR_EXP 79
20253: PUSH
20254: LD_EXP 79
20258: PPUSH
20259: LD_EXP 79
20263: PUSH
20264: LD_INT 1
20266: PLUS
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 1
20277: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20278: LD_ADDR_EXP 80
20282: PUSH
20283: LD_EXP 80
20287: PPUSH
20288: LD_EXP 80
20292: PUSH
20293: LD_INT 1
20295: PLUS
20296: PPUSH
20297: EMPTY
20298: PPUSH
20299: CALL_OW 1
20303: ST_TO_ADDR
// end end ;
20304: GO 20233
20306: POP
20307: POP
// for i := minerMinesList downto 1 do
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: DOUBLE
20314: LD_EXP 80
20318: INC
20319: ST_TO_ADDR
20320: LD_INT 1
20322: PUSH
20323: FOR_DOWNTO
20324: IFFALSE 20660
// begin if IsLive ( minersList [ i ] ) then
20326: LD_EXP 79
20330: PUSH
20331: LD_VAR 0 1
20335: ARRAY
20336: PPUSH
20337: CALL_OW 300
20341: IFFALSE 20369
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20343: LD_EXP 79
20347: PUSH
20348: LD_VAR 0 1
20352: ARRAY
20353: PPUSH
20354: LD_EXP 80
20358: PUSH
20359: LD_VAR 0 1
20363: ARRAY
20364: PPUSH
20365: CALL_OW 505
// if not minerMinesList [ i ] then
20369: LD_EXP 80
20373: PUSH
20374: LD_VAR 0 1
20378: ARRAY
20379: NOT
20380: IFFALSE 20384
// continue ;
20382: GO 20323
// for j := minerMinesList [ i ] downto 1 do
20384: LD_ADDR_VAR 0 2
20388: PUSH
20389: DOUBLE
20390: LD_EXP 80
20394: PUSH
20395: LD_VAR 0 1
20399: ARRAY
20400: INC
20401: ST_TO_ADDR
20402: LD_INT 1
20404: PUSH
20405: FOR_DOWNTO
20406: IFFALSE 20656
// begin side := GetSide ( minersList [ i ] ) ;
20408: LD_ADDR_VAR 0 3
20412: PUSH
20413: LD_EXP 79
20417: PUSH
20418: LD_VAR 0 1
20422: ARRAY
20423: PPUSH
20424: CALL_OW 255
20428: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20429: LD_ADDR_VAR 0 4
20433: PUSH
20434: LD_EXP 80
20438: PUSH
20439: LD_VAR 0 1
20443: ARRAY
20444: PUSH
20445: LD_VAR 0 2
20449: ARRAY
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: LD_EXP 80
20459: PUSH
20460: LD_VAR 0 1
20464: ARRAY
20465: PUSH
20466: LD_VAR 0 2
20470: ARRAY
20471: PUSH
20472: LD_INT 2
20474: ARRAY
20475: PPUSH
20476: CALL_OW 428
20480: ST_TO_ADDR
// if not tmp then
20481: LD_VAR 0 4
20485: NOT
20486: IFFALSE 20490
// continue ;
20488: GO 20405
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20490: LD_VAR 0 4
20494: PUSH
20495: LD_INT 81
20497: PUSH
20498: LD_VAR 0 3
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PPUSH
20507: CALL_OW 69
20511: IN
20512: PUSH
20513: LD_EXP 80
20517: PUSH
20518: LD_VAR 0 1
20522: ARRAY
20523: PUSH
20524: LD_VAR 0 2
20528: ARRAY
20529: PUSH
20530: LD_INT 1
20532: ARRAY
20533: PPUSH
20534: LD_EXP 80
20538: PUSH
20539: LD_VAR 0 1
20543: ARRAY
20544: PUSH
20545: LD_VAR 0 2
20549: ARRAY
20550: PUSH
20551: LD_INT 2
20553: ARRAY
20554: PPUSH
20555: CALL_OW 458
20559: AND
20560: IFFALSE 20654
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20562: LD_EXP 80
20566: PUSH
20567: LD_VAR 0 1
20571: ARRAY
20572: PUSH
20573: LD_VAR 0 2
20577: ARRAY
20578: PUSH
20579: LD_INT 1
20581: ARRAY
20582: PPUSH
20583: LD_EXP 80
20587: PUSH
20588: LD_VAR 0 1
20592: ARRAY
20593: PUSH
20594: LD_VAR 0 2
20598: ARRAY
20599: PUSH
20600: LD_INT 2
20602: ARRAY
20603: PPUSH
20604: LD_VAR 0 3
20608: PPUSH
20609: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20613: LD_ADDR_EXP 80
20617: PUSH
20618: LD_EXP 80
20622: PPUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: LD_EXP 80
20632: PUSH
20633: LD_VAR 0 1
20637: ARRAY
20638: PPUSH
20639: LD_VAR 0 2
20643: PPUSH
20644: CALL_OW 3
20648: PPUSH
20649: CALL_OW 1
20653: ST_TO_ADDR
// end ; end ;
20654: GO 20405
20656: POP
20657: POP
// end ;
20658: GO 20323
20660: POP
20661: POP
// end ;
20662: PPOPN 4
20664: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20665: LD_INT 0
20667: PPUSH
20668: PPUSH
// result := false ;
20669: LD_ADDR_VAR 0 4
20673: PUSH
20674: LD_INT 0
20676: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20677: LD_VAR 0 1
20681: PPUSH
20682: CALL_OW 264
20686: PUSH
20687: LD_EXP 89
20691: EQUAL
20692: NOT
20693: IFFALSE 20697
// exit ;
20695: GO 20937
// index := GetElementIndex ( minersList , unit ) ;
20697: LD_ADDR_VAR 0 5
20701: PUSH
20702: LD_EXP 79
20706: PPUSH
20707: LD_VAR 0 1
20711: PPUSH
20712: CALL 27204 0 2
20716: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20717: LD_EXP 80
20721: PUSH
20722: LD_VAR 0 5
20726: ARRAY
20727: PUSH
20728: LD_EXP 81
20732: GREATEREQUAL
20733: IFFALSE 20737
// exit ;
20735: GO 20937
// ComMoveXY ( unit , x , y ) ;
20737: LD_VAR 0 1
20741: PPUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20756: LD_INT 35
20758: PPUSH
20759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_VAR 0 2
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL 57601 0 3
20782: NOT
20783: PUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 314
20793: AND
20794: IFFALSE 20798
// exit ;
20796: GO 20937
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20798: LD_VAR 0 2
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 428
20812: PUSH
20813: LD_VAR 0 1
20817: EQUAL
20818: PUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: CALL_OW 314
20828: NOT
20829: AND
20830: IFFALSE 20756
// PlaySoundXY ( x , y , PlantMine ) ;
20832: LD_VAR 0 2
20836: PPUSH
20837: LD_VAR 0 3
20841: PPUSH
20842: LD_STRING PlantMine
20844: PPUSH
20845: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20849: LD_VAR 0 2
20853: PPUSH
20854: LD_VAR 0 3
20858: PPUSH
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 255
20868: PPUSH
20869: LD_INT 0
20871: PPUSH
20872: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20876: LD_ADDR_EXP 80
20880: PUSH
20881: LD_EXP 80
20885: PPUSH
20886: LD_VAR 0 5
20890: PUSH
20891: LD_EXP 80
20895: PUSH
20896: LD_VAR 0 5
20900: ARRAY
20901: PUSH
20902: LD_INT 1
20904: PLUS
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PPUSH
20910: LD_VAR 0 2
20914: PUSH
20915: LD_VAR 0 3
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PPUSH
20924: CALL 27419 0 3
20928: ST_TO_ADDR
// result := true ;
20929: LD_ADDR_VAR 0 4
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// end ;
20937: LD_VAR 0 4
20941: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20942: LD_INT 0
20944: PPUSH
20945: PPUSH
20946: PPUSH
// if not unit in minersList then
20947: LD_VAR 0 1
20951: PUSH
20952: LD_EXP 79
20956: IN
20957: NOT
20958: IFFALSE 20962
// exit ;
20960: GO 21354
// index := GetElementIndex ( minersList , unit ) ;
20962: LD_ADDR_VAR 0 6
20966: PUSH
20967: LD_EXP 79
20971: PPUSH
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL 27204 0 2
20981: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20982: LD_ADDR_VAR 0 5
20986: PUSH
20987: DOUBLE
20988: LD_EXP 80
20992: PUSH
20993: LD_VAR 0 6
20997: ARRAY
20998: INC
20999: ST_TO_ADDR
21000: LD_INT 1
21002: PUSH
21003: FOR_DOWNTO
21004: IFFALSE 21165
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21006: LD_EXP 80
21010: PUSH
21011: LD_VAR 0 6
21015: ARRAY
21016: PUSH
21017: LD_VAR 0 5
21021: ARRAY
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PUSH
21027: LD_VAR 0 2
21031: EQUAL
21032: PUSH
21033: LD_EXP 80
21037: PUSH
21038: LD_VAR 0 6
21042: ARRAY
21043: PUSH
21044: LD_VAR 0 5
21048: ARRAY
21049: PUSH
21050: LD_INT 2
21052: ARRAY
21053: PUSH
21054: LD_VAR 0 3
21058: EQUAL
21059: AND
21060: IFFALSE 21163
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21062: LD_EXP 80
21066: PUSH
21067: LD_VAR 0 6
21071: ARRAY
21072: PUSH
21073: LD_VAR 0 5
21077: ARRAY
21078: PUSH
21079: LD_INT 1
21081: ARRAY
21082: PPUSH
21083: LD_EXP 80
21087: PUSH
21088: LD_VAR 0 6
21092: ARRAY
21093: PUSH
21094: LD_VAR 0 5
21098: ARRAY
21099: PUSH
21100: LD_INT 2
21102: ARRAY
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 255
21113: PPUSH
21114: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21118: LD_ADDR_EXP 80
21122: PUSH
21123: LD_EXP 80
21127: PPUSH
21128: LD_VAR 0 6
21132: PPUSH
21133: LD_EXP 80
21137: PUSH
21138: LD_VAR 0 6
21142: ARRAY
21143: PPUSH
21144: LD_VAR 0 5
21148: PPUSH
21149: CALL_OW 3
21153: PPUSH
21154: CALL_OW 1
21158: ST_TO_ADDR
// exit ;
21159: POP
21160: POP
21161: GO 21354
// end ; end ;
21163: GO 21003
21165: POP
21166: POP
// for i := minerMinesList [ index ] downto 1 do
21167: LD_ADDR_VAR 0 5
21171: PUSH
21172: DOUBLE
21173: LD_EXP 80
21177: PUSH
21178: LD_VAR 0 6
21182: ARRAY
21183: INC
21184: ST_TO_ADDR
21185: LD_INT 1
21187: PUSH
21188: FOR_DOWNTO
21189: IFFALSE 21352
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21191: LD_EXP 80
21195: PUSH
21196: LD_VAR 0 6
21200: ARRAY
21201: PUSH
21202: LD_VAR 0 5
21206: ARRAY
21207: PUSH
21208: LD_INT 1
21210: ARRAY
21211: PPUSH
21212: LD_EXP 80
21216: PUSH
21217: LD_VAR 0 6
21221: ARRAY
21222: PUSH
21223: LD_VAR 0 5
21227: ARRAY
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 2
21237: PPUSH
21238: LD_VAR 0 3
21242: PPUSH
21243: CALL_OW 298
21247: PUSH
21248: LD_INT 6
21250: LESS
21251: IFFALSE 21350
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21253: LD_EXP 80
21257: PUSH
21258: LD_VAR 0 6
21262: ARRAY
21263: PUSH
21264: LD_VAR 0 5
21268: ARRAY
21269: PUSH
21270: LD_INT 1
21272: ARRAY
21273: PPUSH
21274: LD_EXP 80
21278: PUSH
21279: LD_VAR 0 6
21283: ARRAY
21284: PUSH
21285: LD_VAR 0 5
21289: ARRAY
21290: PUSH
21291: LD_INT 2
21293: ARRAY
21294: PPUSH
21295: LD_VAR 0 1
21299: PPUSH
21300: CALL_OW 255
21304: PPUSH
21305: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21309: LD_ADDR_EXP 80
21313: PUSH
21314: LD_EXP 80
21318: PPUSH
21319: LD_VAR 0 6
21323: PPUSH
21324: LD_EXP 80
21328: PUSH
21329: LD_VAR 0 6
21333: ARRAY
21334: PPUSH
21335: LD_VAR 0 5
21339: PPUSH
21340: CALL_OW 3
21344: PPUSH
21345: CALL_OW 1
21349: ST_TO_ADDR
// end ; end ;
21350: GO 21188
21352: POP
21353: POP
// end ;
21354: LD_VAR 0 4
21358: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21359: LD_INT 0
21361: PPUSH
21362: PPUSH
21363: PPUSH
21364: PPUSH
21365: PPUSH
21366: PPUSH
21367: PPUSH
21368: PPUSH
21369: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 264
21379: PUSH
21380: LD_EXP 89
21384: EQUAL
21385: NOT
21386: PUSH
21387: LD_VAR 0 1
21391: PUSH
21392: LD_EXP 79
21396: IN
21397: NOT
21398: OR
21399: IFFALSE 21403
// exit ;
21401: GO 21725
// index := GetElementIndex ( minersList , unit ) ;
21403: LD_ADDR_VAR 0 6
21407: PUSH
21408: LD_EXP 79
21412: PPUSH
21413: LD_VAR 0 1
21417: PPUSH
21418: CALL 27204 0 2
21422: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21423: LD_ADDR_VAR 0 8
21427: PUSH
21428: LD_EXP 81
21432: PUSH
21433: LD_EXP 80
21437: PUSH
21438: LD_VAR 0 6
21442: ARRAY
21443: MINUS
21444: ST_TO_ADDR
// if not minesFreeAmount then
21445: LD_VAR 0 8
21449: NOT
21450: IFFALSE 21454
// exit ;
21452: GO 21725
// tmp := [ ] ;
21454: LD_ADDR_VAR 0 7
21458: PUSH
21459: EMPTY
21460: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21461: LD_ADDR_VAR 0 5
21465: PUSH
21466: DOUBLE
21467: LD_INT 1
21469: DEC
21470: ST_TO_ADDR
21471: LD_VAR 0 8
21475: PUSH
21476: FOR_TO
21477: IFFALSE 21672
// begin _d := rand ( 0 , 5 ) ;
21479: LD_ADDR_VAR 0 11
21483: PUSH
21484: LD_INT 0
21486: PPUSH
21487: LD_INT 5
21489: PPUSH
21490: CALL_OW 12
21494: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21495: LD_ADDR_VAR 0 12
21499: PUSH
21500: LD_INT 2
21502: PPUSH
21503: LD_INT 6
21505: PPUSH
21506: CALL_OW 12
21510: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21511: LD_ADDR_VAR 0 9
21515: PUSH
21516: LD_VAR 0 2
21520: PPUSH
21521: LD_VAR 0 11
21525: PPUSH
21526: LD_VAR 0 12
21530: PPUSH
21531: CALL_OW 272
21535: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21536: LD_ADDR_VAR 0 10
21540: PUSH
21541: LD_VAR 0 3
21545: PPUSH
21546: LD_VAR 0 11
21550: PPUSH
21551: LD_VAR 0 12
21555: PPUSH
21556: CALL_OW 273
21560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21561: LD_VAR 0 9
21565: PPUSH
21566: LD_VAR 0 10
21570: PPUSH
21571: CALL_OW 488
21575: PUSH
21576: LD_VAR 0 9
21580: PUSH
21581: LD_VAR 0 10
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_VAR 0 7
21594: IN
21595: NOT
21596: AND
21597: PUSH
21598: LD_VAR 0 9
21602: PPUSH
21603: LD_VAR 0 10
21607: PPUSH
21608: CALL_OW 458
21612: NOT
21613: AND
21614: IFFALSE 21656
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21616: LD_ADDR_VAR 0 7
21620: PUSH
21621: LD_VAR 0 7
21625: PPUSH
21626: LD_VAR 0 7
21630: PUSH
21631: LD_INT 1
21633: PLUS
21634: PPUSH
21635: LD_VAR 0 9
21639: PUSH
21640: LD_VAR 0 10
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 1
21653: ST_TO_ADDR
21654: GO 21670
// i := i - 1 ;
21656: LD_ADDR_VAR 0 5
21660: PUSH
21661: LD_VAR 0 5
21665: PUSH
21666: LD_INT 1
21668: MINUS
21669: ST_TO_ADDR
// end ;
21670: GO 21476
21672: POP
21673: POP
// for i in tmp do
21674: LD_ADDR_VAR 0 5
21678: PUSH
21679: LD_VAR 0 7
21683: PUSH
21684: FOR_IN
21685: IFFALSE 21723
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21687: LD_VAR 0 1
21691: PPUSH
21692: LD_VAR 0 5
21696: PUSH
21697: LD_INT 1
21699: ARRAY
21700: PPUSH
21701: LD_VAR 0 5
21705: PUSH
21706: LD_INT 2
21708: ARRAY
21709: PPUSH
21710: CALL 20665 0 3
21714: NOT
21715: IFFALSE 21721
// exit ;
21717: POP
21718: POP
21719: GO 21725
21721: GO 21684
21723: POP
21724: POP
// end ;
21725: LD_VAR 0 4
21729: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
21734: PPUSH
21735: PPUSH
21736: PPUSH
21737: PPUSH
21738: PPUSH
// if not GetClass ( unit ) = class_sniper then
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 257
21748: PUSH
21749: LD_INT 5
21751: EQUAL
21752: NOT
21753: IFFALSE 21757
// exit ;
21755: GO 22145
// dist := 8 ;
21757: LD_ADDR_VAR 0 5
21761: PUSH
21762: LD_INT 8
21764: ST_TO_ADDR
// viewRange := 12 ;
21765: LD_ADDR_VAR 0 7
21769: PUSH
21770: LD_INT 12
21772: ST_TO_ADDR
// side := GetSide ( unit ) ;
21773: LD_ADDR_VAR 0 6
21777: PUSH
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL_OW 255
21787: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21788: LD_INT 61
21790: PPUSH
21791: LD_VAR 0 6
21795: PPUSH
21796: CALL_OW 321
21800: PUSH
21801: LD_INT 2
21803: EQUAL
21804: IFFALSE 21814
// viewRange := 16 ;
21806: LD_ADDR_VAR 0 7
21810: PUSH
21811: LD_INT 16
21813: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21814: LD_VAR 0 1
21818: PPUSH
21819: LD_VAR 0 2
21823: PPUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: CALL_OW 297
21833: PUSH
21834: LD_VAR 0 5
21838: GREATER
21839: IFFALSE 21918
// begin ComMoveXY ( unit , x , y ) ;
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_VAR 0 2
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21860: LD_INT 35
21862: PPUSH
21863: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21867: LD_VAR 0 1
21871: PPUSH
21872: LD_VAR 0 2
21876: PPUSH
21877: LD_VAR 0 3
21881: PPUSH
21882: CALL 57601 0 3
21886: NOT
21887: IFFALSE 21891
// exit ;
21889: GO 22145
// until GetDistUnitXY ( unit , x , y ) < dist ;
21891: LD_VAR 0 1
21895: PPUSH
21896: LD_VAR 0 2
21900: PPUSH
21901: LD_VAR 0 3
21905: PPUSH
21906: CALL_OW 297
21910: PUSH
21911: LD_VAR 0 5
21915: LESS
21916: IFFALSE 21860
// end ; ComTurnXY ( unit , x , y ) ;
21918: LD_VAR 0 1
21922: PPUSH
21923: LD_VAR 0 2
21927: PPUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: CALL_OW 118
// wait ( 5 ) ;
21937: LD_INT 5
21939: PPUSH
21940: CALL_OW 67
// _d := GetDir ( unit ) ;
21944: LD_ADDR_VAR 0 10
21948: PUSH
21949: LD_VAR 0 1
21953: PPUSH
21954: CALL_OW 254
21958: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21959: LD_ADDR_VAR 0 8
21963: PUSH
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 250
21973: PPUSH
21974: LD_VAR 0 10
21978: PPUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: CALL_OW 272
21988: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21989: LD_ADDR_VAR 0 9
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL_OW 251
22003: PPUSH
22004: LD_VAR 0 10
22008: PPUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: CALL_OW 273
22018: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22019: LD_VAR 0 8
22023: PPUSH
22024: LD_VAR 0 9
22028: PPUSH
22029: CALL_OW 488
22033: NOT
22034: IFFALSE 22038
// exit ;
22036: GO 22145
// ComAnimCustom ( unit , 1 ) ;
22038: LD_VAR 0 1
22042: PPUSH
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22050: LD_VAR 0 8
22054: PPUSH
22055: LD_VAR 0 9
22059: PPUSH
22060: LD_VAR 0 6
22064: PPUSH
22065: LD_VAR 0 7
22069: PPUSH
22070: CALL_OW 330
// repeat wait ( 1 ) ;
22074: LD_INT 1
22076: PPUSH
22077: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 316
22090: PUSH
22091: LD_VAR 0 1
22095: PPUSH
22096: CALL_OW 314
22100: OR
22101: PUSH
22102: LD_VAR 0 1
22106: PPUSH
22107: CALL_OW 302
22111: NOT
22112: OR
22113: PUSH
22114: LD_VAR 0 1
22118: PPUSH
22119: CALL_OW 301
22123: OR
22124: IFFALSE 22074
// RemoveSeeing ( _x , _y , side ) ;
22126: LD_VAR 0 8
22130: PPUSH
22131: LD_VAR 0 9
22135: PPUSH
22136: LD_VAR 0 6
22140: PPUSH
22141: CALL_OW 331
// end ; end_of_file
22145: LD_VAR 0 4
22149: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 200
22157: DOUBLE
22158: GREATEREQUAL
22159: IFFALSE 22167
22161: LD_INT 299
22163: DOUBLE
22164: LESSEQUAL
22165: IFTRUE 22169
22167: GO 22201
22169: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_VAR 0 2
22179: PPUSH
22180: LD_VAR 0 3
22184: PPUSH
22185: LD_VAR 0 4
22189: PPUSH
22190: LD_VAR 0 5
22194: PPUSH
22195: CALL 18267 0 5
22199: GO 22278
22201: LD_INT 300
22203: DOUBLE
22204: GREATEREQUAL
22205: IFFALSE 22213
22207: LD_INT 399
22209: DOUBLE
22210: LESSEQUAL
22211: IFTRUE 22215
22213: GO 22277
22215: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22216: LD_VAR 0 1
22220: PPUSH
22221: LD_VAR 0 2
22225: PPUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: LD_VAR 0 4
22235: PPUSH
22236: LD_VAR 0 5
22240: PPUSH
22241: LD_VAR 0 6
22245: PPUSH
22246: LD_VAR 0 7
22250: PPUSH
22251: LD_VAR 0 8
22255: PPUSH
22256: LD_VAR 0 9
22260: PPUSH
22261: LD_VAR 0 10
22265: PPUSH
22266: LD_VAR 0 11
22270: PPUSH
22271: CALL 16155 0 11
22275: GO 22278
22277: POP
// end ;
22278: PPOPN 11
22280: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22281: LD_VAR 0 1
22285: PPUSH
22286: LD_VAR 0 2
22290: PPUSH
22291: LD_VAR 0 3
22295: PPUSH
22296: LD_VAR 0 4
22300: PPUSH
22301: LD_VAR 0 5
22305: PPUSH
22306: CALL 18249 0 5
// end ; end_of_file
22310: PPOPN 5
22312: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22313: LD_INT 0
22315: PPUSH
// ar_miner := 81 ;
22316: LD_ADDR_EXP 89
22320: PUSH
22321: LD_INT 81
22323: ST_TO_ADDR
// ar_crane := 88 ;
22324: LD_ADDR_EXP 88
22328: PUSH
22329: LD_INT 88
22331: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22332: LD_ADDR_EXP 83
22336: PUSH
22337: LD_INT 89
22339: ST_TO_ADDR
// us_hack := 99 ;
22340: LD_ADDR_EXP 84
22344: PUSH
22345: LD_INT 99
22347: ST_TO_ADDR
// us_artillery := 97 ;
22348: LD_ADDR_EXP 85
22352: PUSH
22353: LD_INT 97
22355: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22356: LD_ADDR_EXP 86
22360: PUSH
22361: LD_INT 91
22363: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22364: LD_ADDR_EXP 87
22368: PUSH
22369: LD_INT 92
22371: ST_TO_ADDR
// ru_radar := 98 ;
22372: LD_ADDR_EXP 82
22376: PUSH
22377: LD_INT 98
22379: ST_TO_ADDR
// tech_Artillery := 80 ;
22380: LD_ADDR_EXP 90
22384: PUSH
22385: LD_INT 80
22387: ST_TO_ADDR
// tech_RadMat := 81 ;
22388: LD_ADDR_EXP 91
22392: PUSH
22393: LD_INT 81
22395: ST_TO_ADDR
// tech_BasicTools := 82 ;
22396: LD_ADDR_EXP 92
22400: PUSH
22401: LD_INT 82
22403: ST_TO_ADDR
// tech_Cargo := 83 ;
22404: LD_ADDR_EXP 93
22408: PUSH
22409: LD_INT 83
22411: ST_TO_ADDR
// tech_Track := 84 ;
22412: LD_ADDR_EXP 94
22416: PUSH
22417: LD_INT 84
22419: ST_TO_ADDR
// tech_Crane := 85 ;
22420: LD_ADDR_EXP 95
22424: PUSH
22425: LD_INT 85
22427: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22428: LD_ADDR_EXP 96
22432: PUSH
22433: LD_INT 86
22435: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22436: LD_ADDR_EXP 97
22440: PUSH
22441: LD_INT 87
22443: ST_TO_ADDR
// class_mastodont := 31 ;
22444: LD_ADDR_EXP 98
22448: PUSH
22449: LD_INT 31
22451: ST_TO_ADDR
// class_horse := 21 ;
22452: LD_ADDR_EXP 99
22456: PUSH
22457: LD_INT 21
22459: ST_TO_ADDR
// end ;
22460: LD_VAR 0 1
22464: RET
// every 1 do
22465: GO 22467
22467: DISABLE
// InitGlobalVariables ; end_of_file
22468: CALL 22313 0 0
22472: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22473: LD_INT 0
22475: PPUSH
22476: PPUSH
// if exist_mode then
22477: LD_VAR 0 2
22481: IFFALSE 22506
// unit := CreateCharacter ( prefix & ident ) else
22483: LD_ADDR_VAR 0 5
22487: PUSH
22488: LD_VAR 0 3
22492: PUSH
22493: LD_VAR 0 1
22497: STR
22498: PPUSH
22499: CALL_OW 34
22503: ST_TO_ADDR
22504: GO 22521
// unit := NewCharacter ( ident ) ;
22506: LD_ADDR_VAR 0 5
22510: PUSH
22511: LD_VAR 0 1
22515: PPUSH
22516: CALL_OW 25
22520: ST_TO_ADDR
// result := unit ;
22521: LD_ADDR_VAR 0 4
22525: PUSH
22526: LD_VAR 0 5
22530: ST_TO_ADDR
// end ;
22531: LD_VAR 0 4
22535: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22536: LD_INT 0
22538: PPUSH
22539: PPUSH
// if not side or not nation then
22540: LD_VAR 0 1
22544: NOT
22545: PUSH
22546: LD_VAR 0 2
22550: NOT
22551: OR
22552: IFFALSE 22556
// exit ;
22554: GO 23320
// case nation of nation_american :
22556: LD_VAR 0 2
22560: PUSH
22561: LD_INT 1
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 22783
22569: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22570: LD_ADDR_VAR 0 4
22574: PUSH
22575: LD_INT 35
22577: PUSH
22578: LD_INT 45
22580: PUSH
22581: LD_INT 46
22583: PUSH
22584: LD_INT 47
22586: PUSH
22587: LD_INT 82
22589: PUSH
22590: LD_INT 83
22592: PUSH
22593: LD_INT 84
22595: PUSH
22596: LD_INT 85
22598: PUSH
22599: LD_INT 86
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 6
22610: PUSH
22611: LD_INT 15
22613: PUSH
22614: LD_INT 16
22616: PUSH
22617: LD_INT 7
22619: PUSH
22620: LD_INT 12
22622: PUSH
22623: LD_INT 13
22625: PUSH
22626: LD_INT 10
22628: PUSH
22629: LD_INT 14
22631: PUSH
22632: LD_INT 20
22634: PUSH
22635: LD_INT 21
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_INT 25
22643: PUSH
22644: LD_INT 32
22646: PUSH
22647: LD_INT 27
22649: PUSH
22650: LD_INT 36
22652: PUSH
22653: LD_INT 69
22655: PUSH
22656: LD_INT 39
22658: PUSH
22659: LD_INT 34
22661: PUSH
22662: LD_INT 40
22664: PUSH
22665: LD_INT 48
22667: PUSH
22668: LD_INT 49
22670: PUSH
22671: LD_INT 50
22673: PUSH
22674: LD_INT 51
22676: PUSH
22677: LD_INT 52
22679: PUSH
22680: LD_INT 53
22682: PUSH
22683: LD_INT 54
22685: PUSH
22686: LD_INT 55
22688: PUSH
22689: LD_INT 56
22691: PUSH
22692: LD_INT 57
22694: PUSH
22695: LD_INT 58
22697: PUSH
22698: LD_INT 59
22700: PUSH
22701: LD_INT 60
22703: PUSH
22704: LD_INT 61
22706: PUSH
22707: LD_INT 62
22709: PUSH
22710: LD_INT 80
22712: PUSH
22713: LD_INT 82
22715: PUSH
22716: LD_INT 83
22718: PUSH
22719: LD_INT 84
22721: PUSH
22722: LD_INT 85
22724: PUSH
22725: LD_INT 86
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 23244
22783: LD_INT 2
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 23013
22791: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22792: LD_ADDR_VAR 0 4
22796: PUSH
22797: LD_INT 35
22799: PUSH
22800: LD_INT 45
22802: PUSH
22803: LD_INT 46
22805: PUSH
22806: LD_INT 47
22808: PUSH
22809: LD_INT 82
22811: PUSH
22812: LD_INT 83
22814: PUSH
22815: LD_INT 84
22817: PUSH
22818: LD_INT 85
22820: PUSH
22821: LD_INT 87
22823: PUSH
22824: LD_INT 70
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 11
22832: PUSH
22833: LD_INT 3
22835: PUSH
22836: LD_INT 4
22838: PUSH
22839: LD_INT 5
22841: PUSH
22842: LD_INT 6
22844: PUSH
22845: LD_INT 15
22847: PUSH
22848: LD_INT 18
22850: PUSH
22851: LD_INT 7
22853: PUSH
22854: LD_INT 17
22856: PUSH
22857: LD_INT 8
22859: PUSH
22860: LD_INT 20
22862: PUSH
22863: LD_INT 21
22865: PUSH
22866: LD_INT 22
22868: PUSH
22869: LD_INT 72
22871: PUSH
22872: LD_INT 26
22874: PUSH
22875: LD_INT 69
22877: PUSH
22878: LD_INT 39
22880: PUSH
22881: LD_INT 40
22883: PUSH
22884: LD_INT 41
22886: PUSH
22887: LD_INT 42
22889: PUSH
22890: LD_INT 43
22892: PUSH
22893: LD_INT 48
22895: PUSH
22896: LD_INT 49
22898: PUSH
22899: LD_INT 50
22901: PUSH
22902: LD_INT 51
22904: PUSH
22905: LD_INT 52
22907: PUSH
22908: LD_INT 53
22910: PUSH
22911: LD_INT 54
22913: PUSH
22914: LD_INT 55
22916: PUSH
22917: LD_INT 56
22919: PUSH
22920: LD_INT 60
22922: PUSH
22923: LD_INT 61
22925: PUSH
22926: LD_INT 62
22928: PUSH
22929: LD_INT 66
22931: PUSH
22932: LD_INT 67
22934: PUSH
22935: LD_INT 68
22937: PUSH
22938: LD_INT 81
22940: PUSH
22941: LD_INT 82
22943: PUSH
22944: LD_INT 83
22946: PUSH
22947: LD_INT 84
22949: PUSH
22950: LD_INT 85
22952: PUSH
22953: LD_INT 87
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: ST_TO_ADDR
23011: GO 23244
23013: LD_INT 3
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23243
23021: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23022: LD_ADDR_VAR 0 4
23026: PUSH
23027: LD_INT 46
23029: PUSH
23030: LD_INT 47
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 82
23041: PUSH
23042: LD_INT 83
23044: PUSH
23045: LD_INT 84
23047: PUSH
23048: LD_INT 85
23050: PUSH
23051: LD_INT 86
23053: PUSH
23054: LD_INT 11
23056: PUSH
23057: LD_INT 9
23059: PUSH
23060: LD_INT 20
23062: PUSH
23063: LD_INT 19
23065: PUSH
23066: LD_INT 21
23068: PUSH
23069: LD_INT 24
23071: PUSH
23072: LD_INT 22
23074: PUSH
23075: LD_INT 25
23077: PUSH
23078: LD_INT 28
23080: PUSH
23081: LD_INT 29
23083: PUSH
23084: LD_INT 30
23086: PUSH
23087: LD_INT 31
23089: PUSH
23090: LD_INT 37
23092: PUSH
23093: LD_INT 38
23095: PUSH
23096: LD_INT 32
23098: PUSH
23099: LD_INT 27
23101: PUSH
23102: LD_INT 33
23104: PUSH
23105: LD_INT 69
23107: PUSH
23108: LD_INT 39
23110: PUSH
23111: LD_INT 34
23113: PUSH
23114: LD_INT 40
23116: PUSH
23117: LD_INT 71
23119: PUSH
23120: LD_INT 23
23122: PUSH
23123: LD_INT 44
23125: PUSH
23126: LD_INT 48
23128: PUSH
23129: LD_INT 49
23131: PUSH
23132: LD_INT 50
23134: PUSH
23135: LD_INT 51
23137: PUSH
23138: LD_INT 52
23140: PUSH
23141: LD_INT 53
23143: PUSH
23144: LD_INT 54
23146: PUSH
23147: LD_INT 55
23149: PUSH
23150: LD_INT 56
23152: PUSH
23153: LD_INT 57
23155: PUSH
23156: LD_INT 58
23158: PUSH
23159: LD_INT 59
23161: PUSH
23162: LD_INT 63
23164: PUSH
23165: LD_INT 64
23167: PUSH
23168: LD_INT 65
23170: PUSH
23171: LD_INT 82
23173: PUSH
23174: LD_INT 83
23176: PUSH
23177: LD_INT 84
23179: PUSH
23180: LD_INT 85
23182: PUSH
23183: LD_INT 86
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: ST_TO_ADDR
23241: GO 23244
23243: POP
// if state > - 1 and state < 3 then
23244: LD_VAR 0 3
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: GREATER
23253: PUSH
23254: LD_VAR 0 3
23258: PUSH
23259: LD_INT 3
23261: LESS
23262: AND
23263: IFFALSE 23320
// for i in result do
23265: LD_ADDR_VAR 0 5
23269: PUSH
23270: LD_VAR 0 4
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23318
// if GetTech ( i , side ) <> state then
23278: LD_VAR 0 5
23282: PPUSH
23283: LD_VAR 0 1
23287: PPUSH
23288: CALL_OW 321
23292: PUSH
23293: LD_VAR 0 3
23297: NONEQUAL
23298: IFFALSE 23316
// result := result diff i ;
23300: LD_ADDR_VAR 0 4
23304: PUSH
23305: LD_VAR 0 4
23309: PUSH
23310: LD_VAR 0 5
23314: DIFF
23315: ST_TO_ADDR
23316: GO 23275
23318: POP
23319: POP
// end ;
23320: LD_VAR 0 4
23324: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23325: LD_INT 0
23327: PPUSH
23328: PPUSH
23329: PPUSH
// result := true ;
23330: LD_ADDR_VAR 0 3
23334: PUSH
23335: LD_INT 1
23337: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23338: LD_ADDR_VAR 0 5
23342: PUSH
23343: LD_VAR 0 2
23347: PPUSH
23348: CALL_OW 480
23352: ST_TO_ADDR
// if not tmp then
23353: LD_VAR 0 5
23357: NOT
23358: IFFALSE 23362
// exit ;
23360: GO 23411
// for i in tmp do
23362: LD_ADDR_VAR 0 4
23366: PUSH
23367: LD_VAR 0 5
23371: PUSH
23372: FOR_IN
23373: IFFALSE 23409
// if GetTech ( i , side ) <> state_researched then
23375: LD_VAR 0 4
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL_OW 321
23389: PUSH
23390: LD_INT 2
23392: NONEQUAL
23393: IFFALSE 23407
// begin result := false ;
23395: LD_ADDR_VAR 0 3
23399: PUSH
23400: LD_INT 0
23402: ST_TO_ADDR
// exit ;
23403: POP
23404: POP
23405: GO 23411
// end ;
23407: GO 23372
23409: POP
23410: POP
// end ;
23411: LD_VAR 0 3
23415: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23416: LD_INT 0
23418: PPUSH
23419: PPUSH
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
23426: PPUSH
23427: PPUSH
23428: PPUSH
23429: PPUSH
23430: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23431: LD_VAR 0 1
23435: NOT
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL_OW 257
23446: PUSH
23447: LD_INT 9
23449: NONEQUAL
23450: OR
23451: IFFALSE 23455
// exit ;
23453: GO 24028
// side := GetSide ( unit ) ;
23455: LD_ADDR_VAR 0 9
23459: PUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL_OW 255
23469: ST_TO_ADDR
// tech_space := tech_spacanom ;
23470: LD_ADDR_VAR 0 12
23474: PUSH
23475: LD_INT 29
23477: ST_TO_ADDR
// tech_time := tech_taurad ;
23478: LD_ADDR_VAR 0 13
23482: PUSH
23483: LD_INT 28
23485: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23486: LD_ADDR_VAR 0 11
23490: PUSH
23491: LD_VAR 0 1
23495: PPUSH
23496: CALL_OW 310
23500: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23501: LD_VAR 0 11
23505: PPUSH
23506: CALL_OW 247
23510: PUSH
23511: LD_INT 2
23513: EQUAL
23514: IFFALSE 23518
// exit ;
23516: GO 24028
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23518: LD_ADDR_VAR 0 8
23522: PUSH
23523: LD_INT 81
23525: PUSH
23526: LD_VAR 0 9
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 21
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PPUSH
23556: CALL_OW 69
23560: ST_TO_ADDR
// if not tmp then
23561: LD_VAR 0 8
23565: NOT
23566: IFFALSE 23570
// exit ;
23568: GO 24028
// if in_unit then
23570: LD_VAR 0 11
23574: IFFALSE 23598
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23576: LD_ADDR_VAR 0 10
23580: PUSH
23581: LD_VAR 0 8
23585: PPUSH
23586: LD_VAR 0 11
23590: PPUSH
23591: CALL_OW 74
23595: ST_TO_ADDR
23596: GO 23618
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23598: LD_ADDR_VAR 0 10
23602: PUSH
23603: LD_VAR 0 8
23607: PPUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 74
23617: ST_TO_ADDR
// if not enemy then
23618: LD_VAR 0 10
23622: NOT
23623: IFFALSE 23627
// exit ;
23625: GO 24028
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23627: LD_VAR 0 11
23631: PUSH
23632: LD_VAR 0 11
23636: PPUSH
23637: LD_VAR 0 10
23641: PPUSH
23642: CALL_OW 296
23646: PUSH
23647: LD_INT 13
23649: GREATER
23650: AND
23651: PUSH
23652: LD_VAR 0 1
23656: PPUSH
23657: LD_VAR 0 10
23661: PPUSH
23662: CALL_OW 296
23666: PUSH
23667: LD_INT 12
23669: GREATER
23670: OR
23671: IFFALSE 23675
// exit ;
23673: GO 24028
// missile := [ 1 ] ;
23675: LD_ADDR_VAR 0 14
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: EMPTY
23684: LIST
23685: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23686: LD_VAR 0 9
23690: PPUSH
23691: LD_VAR 0 12
23695: PPUSH
23696: CALL_OW 325
23700: IFFALSE 23729
// missile := Insert ( missile , missile + 1 , 2 ) ;
23702: LD_ADDR_VAR 0 14
23706: PUSH
23707: LD_VAR 0 14
23711: PPUSH
23712: LD_VAR 0 14
23716: PUSH
23717: LD_INT 1
23719: PLUS
23720: PPUSH
23721: LD_INT 2
23723: PPUSH
23724: CALL_OW 2
23728: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23729: LD_VAR 0 9
23733: PPUSH
23734: LD_VAR 0 13
23738: PPUSH
23739: CALL_OW 325
23743: PUSH
23744: LD_VAR 0 10
23748: PPUSH
23749: CALL_OW 255
23753: PPUSH
23754: LD_VAR 0 13
23758: PPUSH
23759: CALL_OW 325
23763: NOT
23764: AND
23765: IFFALSE 23794
// missile := Insert ( missile , missile + 1 , 3 ) ;
23767: LD_ADDR_VAR 0 14
23771: PUSH
23772: LD_VAR 0 14
23776: PPUSH
23777: LD_VAR 0 14
23781: PUSH
23782: LD_INT 1
23784: PLUS
23785: PPUSH
23786: LD_INT 3
23788: PPUSH
23789: CALL_OW 2
23793: ST_TO_ADDR
// if missile < 2 then
23794: LD_VAR 0 14
23798: PUSH
23799: LD_INT 2
23801: LESS
23802: IFFALSE 23806
// exit ;
23804: GO 24028
// x := GetX ( enemy ) ;
23806: LD_ADDR_VAR 0 4
23810: PUSH
23811: LD_VAR 0 10
23815: PPUSH
23816: CALL_OW 250
23820: ST_TO_ADDR
// y := GetY ( enemy ) ;
23821: LD_ADDR_VAR 0 5
23825: PUSH
23826: LD_VAR 0 10
23830: PPUSH
23831: CALL_OW 251
23835: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23836: LD_ADDR_VAR 0 6
23840: PUSH
23841: LD_VAR 0 4
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PPUSH
23850: LD_INT 1
23852: PPUSH
23853: CALL_OW 12
23857: PLUS
23858: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23859: LD_ADDR_VAR 0 7
23863: PUSH
23864: LD_VAR 0 5
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PPUSH
23873: LD_INT 1
23875: PPUSH
23876: CALL_OW 12
23880: PLUS
23881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23882: LD_VAR 0 6
23886: PPUSH
23887: LD_VAR 0 7
23891: PPUSH
23892: CALL_OW 488
23896: NOT
23897: IFFALSE 23919
// begin _x := x ;
23899: LD_ADDR_VAR 0 6
23903: PUSH
23904: LD_VAR 0 4
23908: ST_TO_ADDR
// _y := y ;
23909: LD_ADDR_VAR 0 7
23913: PUSH
23914: LD_VAR 0 5
23918: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23919: LD_ADDR_VAR 0 3
23923: PUSH
23924: LD_INT 1
23926: PPUSH
23927: LD_VAR 0 14
23931: PPUSH
23932: CALL_OW 12
23936: ST_TO_ADDR
// case i of 1 :
23937: LD_VAR 0 3
23941: PUSH
23942: LD_INT 1
23944: DOUBLE
23945: EQUAL
23946: IFTRUE 23950
23948: GO 23967
23950: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23951: LD_VAR 0 1
23955: PPUSH
23956: LD_VAR 0 10
23960: PPUSH
23961: CALL_OW 115
23965: GO 24028
23967: LD_INT 2
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 23997
23975: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23976: LD_VAR 0 1
23980: PPUSH
23981: LD_VAR 0 6
23985: PPUSH
23986: LD_VAR 0 7
23990: PPUSH
23991: CALL_OW 153
23995: GO 24028
23997: LD_INT 3
23999: DOUBLE
24000: EQUAL
24001: IFTRUE 24005
24003: GO 24027
24005: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24006: LD_VAR 0 1
24010: PPUSH
24011: LD_VAR 0 6
24015: PPUSH
24016: LD_VAR 0 7
24020: PPUSH
24021: CALL_OW 154
24025: GO 24028
24027: POP
// end ;
24028: LD_VAR 0 2
24032: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24033: LD_INT 0
24035: PPUSH
24036: PPUSH
24037: PPUSH
24038: PPUSH
24039: PPUSH
24040: PPUSH
// if not unit or not building then
24041: LD_VAR 0 1
24045: NOT
24046: PUSH
24047: LD_VAR 0 2
24051: NOT
24052: OR
24053: IFFALSE 24057
// exit ;
24055: GO 24215
// x := GetX ( building ) ;
24057: LD_ADDR_VAR 0 5
24061: PUSH
24062: LD_VAR 0 2
24066: PPUSH
24067: CALL_OW 250
24071: ST_TO_ADDR
// y := GetY ( building ) ;
24072: LD_ADDR_VAR 0 6
24076: PUSH
24077: LD_VAR 0 2
24081: PPUSH
24082: CALL_OW 251
24086: ST_TO_ADDR
// for i = 0 to 5 do
24087: LD_ADDR_VAR 0 4
24091: PUSH
24092: DOUBLE
24093: LD_INT 0
24095: DEC
24096: ST_TO_ADDR
24097: LD_INT 5
24099: PUSH
24100: FOR_TO
24101: IFFALSE 24213
// begin _x := ShiftX ( x , i , 3 ) ;
24103: LD_ADDR_VAR 0 7
24107: PUSH
24108: LD_VAR 0 5
24112: PPUSH
24113: LD_VAR 0 4
24117: PPUSH
24118: LD_INT 3
24120: PPUSH
24121: CALL_OW 272
24125: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24126: LD_ADDR_VAR 0 8
24130: PUSH
24131: LD_VAR 0 6
24135: PPUSH
24136: LD_VAR 0 4
24140: PPUSH
24141: LD_INT 3
24143: PPUSH
24144: CALL_OW 273
24148: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24149: LD_VAR 0 7
24153: PPUSH
24154: LD_VAR 0 8
24158: PPUSH
24159: CALL_OW 488
24163: NOT
24164: IFFALSE 24168
// continue ;
24166: GO 24100
// if HexInfo ( _x , _y ) = 0 then
24168: LD_VAR 0 7
24172: PPUSH
24173: LD_VAR 0 8
24177: PPUSH
24178: CALL_OW 428
24182: PUSH
24183: LD_INT 0
24185: EQUAL
24186: IFFALSE 24211
// begin ComMoveXY ( unit , _x , _y ) ;
24188: LD_VAR 0 1
24192: PPUSH
24193: LD_VAR 0 7
24197: PPUSH
24198: LD_VAR 0 8
24202: PPUSH
24203: CALL_OW 111
// exit ;
24207: POP
24208: POP
24209: GO 24215
// end ; end ;
24211: GO 24100
24213: POP
24214: POP
// end ;
24215: LD_VAR 0 3
24219: RET
// export function ScanBase ( side , base_area ) ; begin
24220: LD_INT 0
24222: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24223: LD_ADDR_VAR 0 3
24227: PUSH
24228: LD_VAR 0 2
24232: PPUSH
24233: LD_INT 81
24235: PUSH
24236: LD_VAR 0 1
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PPUSH
24245: CALL_OW 70
24249: ST_TO_ADDR
// end ;
24250: LD_VAR 0 3
24254: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24255: LD_INT 0
24257: PPUSH
24258: PPUSH
24259: PPUSH
24260: PPUSH
// result := false ;
24261: LD_ADDR_VAR 0 2
24265: PUSH
24266: LD_INT 0
24268: ST_TO_ADDR
// side := GetSide ( unit ) ;
24269: LD_ADDR_VAR 0 3
24273: PUSH
24274: LD_VAR 0 1
24278: PPUSH
24279: CALL_OW 255
24283: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: LD_VAR 0 1
24293: PPUSH
24294: CALL_OW 248
24298: ST_TO_ADDR
// case nat of 1 :
24299: LD_VAR 0 4
24303: PUSH
24304: LD_INT 1
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24323
24312: POP
// tech := tech_lassight ; 2 :
24313: LD_ADDR_VAR 0 5
24317: PUSH
24318: LD_INT 12
24320: ST_TO_ADDR
24321: GO 24362
24323: LD_INT 2
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24331
24329: GO 24342
24331: POP
// tech := tech_mortar ; 3 :
24332: LD_ADDR_VAR 0 5
24336: PUSH
24337: LD_INT 41
24339: ST_TO_ADDR
24340: GO 24362
24342: LD_INT 3
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24361
24350: POP
// tech := tech_bazooka ; end ;
24351: LD_ADDR_VAR 0 5
24355: PUSH
24356: LD_INT 44
24358: ST_TO_ADDR
24359: GO 24362
24361: POP
// if Researched ( side , tech ) then
24362: LD_VAR 0 3
24366: PPUSH
24367: LD_VAR 0 5
24371: PPUSH
24372: CALL_OW 325
24376: IFFALSE 24403
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_INT 5
24385: PUSH
24386: LD_INT 8
24388: PUSH
24389: LD_INT 9
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: PUSH
24397: LD_VAR 0 4
24401: ARRAY
24402: ST_TO_ADDR
// end ;
24403: LD_VAR 0 2
24407: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24408: LD_INT 0
24410: PPUSH
24411: PPUSH
24412: PPUSH
// if not mines then
24413: LD_VAR 0 2
24417: NOT
24418: IFFALSE 24422
// exit ;
24420: GO 24566
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24422: LD_ADDR_VAR 0 5
24426: PUSH
24427: LD_INT 81
24429: PUSH
24430: LD_VAR 0 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: LD_INT 21
24444: PUSH
24445: LD_INT 3
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PPUSH
24460: CALL_OW 69
24464: ST_TO_ADDR
// for i in mines do
24465: LD_ADDR_VAR 0 4
24469: PUSH
24470: LD_VAR 0 2
24474: PUSH
24475: FOR_IN
24476: IFFALSE 24564
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24478: LD_VAR 0 4
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PPUSH
24487: LD_VAR 0 4
24491: PUSH
24492: LD_INT 2
24494: ARRAY
24495: PPUSH
24496: CALL_OW 458
24500: NOT
24501: IFFALSE 24505
// continue ;
24503: GO 24475
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24505: LD_VAR 0 4
24509: PUSH
24510: LD_INT 1
24512: ARRAY
24513: PPUSH
24514: LD_VAR 0 4
24518: PUSH
24519: LD_INT 2
24521: ARRAY
24522: PPUSH
24523: CALL_OW 428
24527: PUSH
24528: LD_VAR 0 5
24532: IN
24533: IFFALSE 24562
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24535: LD_VAR 0 4
24539: PUSH
24540: LD_INT 1
24542: ARRAY
24543: PPUSH
24544: LD_VAR 0 4
24548: PUSH
24549: LD_INT 2
24551: ARRAY
24552: PPUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: CALL_OW 456
// end ;
24562: GO 24475
24564: POP
24565: POP
// end ;
24566: LD_VAR 0 3
24570: RET
// export function Count ( array ) ; var i ; begin
24571: LD_INT 0
24573: PPUSH
24574: PPUSH
// result := 0 ;
24575: LD_ADDR_VAR 0 2
24579: PUSH
24580: LD_INT 0
24582: ST_TO_ADDR
// for i in array do
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_VAR 0 1
24592: PUSH
24593: FOR_IN
24594: IFFALSE 24618
// if i then
24596: LD_VAR 0 3
24600: IFFALSE 24616
// result := result + 1 ;
24602: LD_ADDR_VAR 0 2
24606: PUSH
24607: LD_VAR 0 2
24611: PUSH
24612: LD_INT 1
24614: PLUS
24615: ST_TO_ADDR
24616: GO 24593
24618: POP
24619: POP
// end ;
24620: LD_VAR 0 2
24624: RET
// export function IsEmpty ( building ) ; begin
24625: LD_INT 0
24627: PPUSH
// if not building then
24628: LD_VAR 0 1
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 24680
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_VAR 0 1
24646: PUSH
24647: LD_INT 22
24649: PUSH
24650: LD_VAR 0 1
24654: PPUSH
24655: CALL_OW 255
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 58
24666: PUSH
24667: EMPTY
24668: LIST
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PPUSH
24674: CALL_OW 69
24678: IN
24679: ST_TO_ADDR
// end ;
24680: LD_VAR 0 2
24684: RET
// export function IsNotFull ( building ) ; begin
24685: LD_INT 0
24687: PPUSH
// if not building then
24688: LD_VAR 0 1
24692: NOT
24693: IFFALSE 24697
// exit ;
24695: GO 24716
// result := UnitsInside ( building ) < 6 ;
24697: LD_ADDR_VAR 0 2
24701: PUSH
24702: LD_VAR 0 1
24706: PPUSH
24707: CALL_OW 313
24711: PUSH
24712: LD_INT 6
24714: LESS
24715: ST_TO_ADDR
// end ;
24716: LD_VAR 0 2
24720: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24721: LD_INT 0
24723: PPUSH
24724: PPUSH
24725: PPUSH
24726: PPUSH
// tmp := [ ] ;
24727: LD_ADDR_VAR 0 3
24731: PUSH
24732: EMPTY
24733: ST_TO_ADDR
// list := [ ] ;
24734: LD_ADDR_VAR 0 5
24738: PUSH
24739: EMPTY
24740: ST_TO_ADDR
// for i = 16 to 25 do
24741: LD_ADDR_VAR 0 4
24745: PUSH
24746: DOUBLE
24747: LD_INT 16
24749: DEC
24750: ST_TO_ADDR
24751: LD_INT 25
24753: PUSH
24754: FOR_TO
24755: IFFALSE 24828
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24757: LD_ADDR_VAR 0 3
24761: PUSH
24762: LD_VAR 0 3
24766: PUSH
24767: LD_INT 22
24769: PUSH
24770: LD_VAR 0 1
24774: PPUSH
24775: CALL_OW 255
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 91
24786: PUSH
24787: LD_VAR 0 1
24791: PUSH
24792: LD_INT 6
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 30
24802: PUSH
24803: LD_VAR 0 4
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: PPUSH
24820: CALL_OW 69
24824: ADD
24825: ST_TO_ADDR
24826: GO 24754
24828: POP
24829: POP
// for i = 1 to tmp do
24830: LD_ADDR_VAR 0 4
24834: PUSH
24835: DOUBLE
24836: LD_INT 1
24838: DEC
24839: ST_TO_ADDR
24840: LD_VAR 0 3
24844: PUSH
24845: FOR_TO
24846: IFFALSE 24934
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24848: LD_ADDR_VAR 0 5
24852: PUSH
24853: LD_VAR 0 5
24857: PUSH
24858: LD_VAR 0 3
24862: PUSH
24863: LD_VAR 0 4
24867: ARRAY
24868: PPUSH
24869: CALL_OW 266
24873: PUSH
24874: LD_VAR 0 3
24878: PUSH
24879: LD_VAR 0 4
24883: ARRAY
24884: PPUSH
24885: CALL_OW 250
24889: PUSH
24890: LD_VAR 0 3
24894: PUSH
24895: LD_VAR 0 4
24899: ARRAY
24900: PPUSH
24901: CALL_OW 251
24905: PUSH
24906: LD_VAR 0 3
24910: PUSH
24911: LD_VAR 0 4
24915: ARRAY
24916: PPUSH
24917: CALL_OW 254
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: PUSH
24928: EMPTY
24929: LIST
24930: ADD
24931: ST_TO_ADDR
24932: GO 24845
24934: POP
24935: POP
// result := list ;
24936: LD_ADDR_VAR 0 2
24940: PUSH
24941: LD_VAR 0 5
24945: ST_TO_ADDR
// end ;
24946: LD_VAR 0 2
24950: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24951: LD_INT 0
24953: PPUSH
24954: PPUSH
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
// if not factory then
24960: LD_VAR 0 1
24964: NOT
24965: IFFALSE 24969
// exit ;
24967: GO 25562
// if control = control_apeman then
24969: LD_VAR 0 4
24973: PUSH
24974: LD_INT 5
24976: EQUAL
24977: IFFALSE 25086
// begin tmp := UnitsInside ( factory ) ;
24979: LD_ADDR_VAR 0 8
24983: PUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 313
24993: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24994: LD_VAR 0 8
24998: PPUSH
24999: LD_INT 25
25001: PUSH
25002: LD_INT 12
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PPUSH
25009: CALL_OW 72
25013: NOT
25014: IFFALSE 25024
// control := control_manual ;
25016: LD_ADDR_VAR 0 4
25020: PUSH
25021: LD_INT 1
25023: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25024: LD_ADDR_VAR 0 8
25028: PUSH
25029: LD_VAR 0 1
25033: PPUSH
25034: CALL 24721 0 1
25038: ST_TO_ADDR
// if tmp then
25039: LD_VAR 0 8
25043: IFFALSE 25086
// begin for i in tmp do
25045: LD_ADDR_VAR 0 7
25049: PUSH
25050: LD_VAR 0 8
25054: PUSH
25055: FOR_IN
25056: IFFALSE 25084
// if i [ 1 ] = b_ext_radio then
25058: LD_VAR 0 7
25062: PUSH
25063: LD_INT 1
25065: ARRAY
25066: PUSH
25067: LD_INT 22
25069: EQUAL
25070: IFFALSE 25082
// begin control := control_remote ;
25072: LD_ADDR_VAR 0 4
25076: PUSH
25077: LD_INT 2
25079: ST_TO_ADDR
// break ;
25080: GO 25084
// end ;
25082: GO 25055
25084: POP
25085: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_VAR 0 2
25095: PPUSH
25096: LD_VAR 0 3
25100: PPUSH
25101: LD_VAR 0 4
25105: PPUSH
25106: LD_VAR 0 5
25110: PPUSH
25111: CALL_OW 448
25115: IFFALSE 25150
// begin result := [ chassis , engine , control , weapon ] ;
25117: LD_ADDR_VAR 0 6
25121: PUSH
25122: LD_VAR 0 2
25126: PUSH
25127: LD_VAR 0 3
25131: PUSH
25132: LD_VAR 0 4
25136: PUSH
25137: LD_VAR 0 5
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: ST_TO_ADDR
// exit ;
25148: GO 25562
// end ; _chassis := AvailableChassisList ( factory ) ;
25150: LD_ADDR_VAR 0 9
25154: PUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 475
25164: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25165: LD_ADDR_VAR 0 11
25169: PUSH
25170: LD_VAR 0 1
25174: PPUSH
25175: CALL_OW 476
25179: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25180: LD_ADDR_VAR 0 12
25184: PUSH
25185: LD_VAR 0 1
25189: PPUSH
25190: CALL_OW 477
25194: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25195: LD_ADDR_VAR 0 10
25199: PUSH
25200: LD_VAR 0 1
25204: PPUSH
25205: CALL_OW 478
25209: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25210: LD_VAR 0 9
25214: NOT
25215: PUSH
25216: LD_VAR 0 11
25220: NOT
25221: OR
25222: PUSH
25223: LD_VAR 0 12
25227: NOT
25228: OR
25229: PUSH
25230: LD_VAR 0 10
25234: NOT
25235: OR
25236: IFFALSE 25271
// begin result := [ chassis , engine , control , weapon ] ;
25238: LD_ADDR_VAR 0 6
25242: PUSH
25243: LD_VAR 0 2
25247: PUSH
25248: LD_VAR 0 3
25252: PUSH
25253: LD_VAR 0 4
25257: PUSH
25258: LD_VAR 0 5
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: ST_TO_ADDR
// exit ;
25269: GO 25562
// end ; if not chassis in _chassis then
25271: LD_VAR 0 2
25275: PUSH
25276: LD_VAR 0 9
25280: IN
25281: NOT
25282: IFFALSE 25308
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_VAR 0 9
25293: PUSH
25294: LD_INT 1
25296: PPUSH
25297: LD_VAR 0 9
25301: PPUSH
25302: CALL_OW 12
25306: ARRAY
25307: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25308: LD_VAR 0 2
25312: PPUSH
25313: LD_VAR 0 3
25317: PPUSH
25318: CALL 25567 0 2
25322: NOT
25323: IFFALSE 25382
// repeat engine := _engine [ 1 ] ;
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_VAR 0 11
25334: PUSH
25335: LD_INT 1
25337: ARRAY
25338: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25339: LD_ADDR_VAR 0 11
25343: PUSH
25344: LD_VAR 0 11
25348: PPUSH
25349: LD_INT 1
25351: PPUSH
25352: CALL_OW 3
25356: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25357: LD_VAR 0 2
25361: PPUSH
25362: LD_VAR 0 3
25366: PPUSH
25367: CALL 25567 0 2
25371: PUSH
25372: LD_VAR 0 11
25376: PUSH
25377: EMPTY
25378: EQUAL
25379: OR
25380: IFFALSE 25325
// if not control in _control then
25382: LD_VAR 0 4
25386: PUSH
25387: LD_VAR 0 12
25391: IN
25392: NOT
25393: IFFALSE 25419
// control := _control [ rand ( 1 , _control ) ] ;
25395: LD_ADDR_VAR 0 4
25399: PUSH
25400: LD_VAR 0 12
25404: PUSH
25405: LD_INT 1
25407: PPUSH
25408: LD_VAR 0 12
25412: PPUSH
25413: CALL_OW 12
25417: ARRAY
25418: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_VAR 0 5
25428: PPUSH
25429: CALL 25787 0 2
25433: NOT
25434: IFFALSE 25493
// repeat weapon := _weapon [ 1 ] ;
25436: LD_ADDR_VAR 0 5
25440: PUSH
25441: LD_VAR 0 10
25445: PUSH
25446: LD_INT 1
25448: ARRAY
25449: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25450: LD_ADDR_VAR 0 10
25454: PUSH
25455: LD_VAR 0 10
25459: PPUSH
25460: LD_INT 1
25462: PPUSH
25463: CALL_OW 3
25467: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25468: LD_VAR 0 2
25472: PPUSH
25473: LD_VAR 0 5
25477: PPUSH
25478: CALL 25787 0 2
25482: PUSH
25483: LD_VAR 0 10
25487: PUSH
25488: EMPTY
25489: EQUAL
25490: OR
25491: IFFALSE 25436
// result := [ ] ;
25493: LD_ADDR_VAR 0 6
25497: PUSH
25498: EMPTY
25499: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25500: LD_VAR 0 1
25504: PPUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: LD_VAR 0 3
25514: PPUSH
25515: LD_VAR 0 4
25519: PPUSH
25520: LD_VAR 0 5
25524: PPUSH
25525: CALL_OW 448
25529: IFFALSE 25562
// result := [ chassis , engine , control , weapon ] ;
25531: LD_ADDR_VAR 0 6
25535: PUSH
25536: LD_VAR 0 2
25540: PUSH
25541: LD_VAR 0 3
25545: PUSH
25546: LD_VAR 0 4
25550: PUSH
25551: LD_VAR 0 5
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: ST_TO_ADDR
// end ;
25562: LD_VAR 0 6
25566: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25567: LD_INT 0
25569: PPUSH
// if not chassis or not engine then
25570: LD_VAR 0 1
25574: NOT
25575: PUSH
25576: LD_VAR 0 2
25580: NOT
25581: OR
25582: IFFALSE 25586
// exit ;
25584: GO 25782
// case engine of engine_solar :
25586: LD_VAR 0 2
25590: PUSH
25591: LD_INT 2
25593: DOUBLE
25594: EQUAL
25595: IFTRUE 25599
25597: GO 25637
25599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25600: LD_ADDR_VAR 0 3
25604: PUSH
25605: LD_INT 11
25607: PUSH
25608: LD_INT 12
25610: PUSH
25611: LD_INT 13
25613: PUSH
25614: LD_INT 14
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 3
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: ST_TO_ADDR
25635: GO 25766
25637: LD_INT 1
25639: DOUBLE
25640: EQUAL
25641: IFTRUE 25645
25643: GO 25707
25645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25646: LD_ADDR_VAR 0 3
25650: PUSH
25651: LD_INT 11
25653: PUSH
25654: LD_INT 12
25656: PUSH
25657: LD_INT 13
25659: PUSH
25660: LD_INT 14
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: LD_INT 4
25674: PUSH
25675: LD_INT 5
25677: PUSH
25678: LD_INT 21
25680: PUSH
25681: LD_INT 23
25683: PUSH
25684: LD_INT 22
25686: PUSH
25687: LD_INT 24
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: ST_TO_ADDR
25705: GO 25766
25707: LD_INT 3
25709: DOUBLE
25710: EQUAL
25711: IFTRUE 25715
25713: GO 25765
25715: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25716: LD_ADDR_VAR 0 3
25720: PUSH
25721: LD_INT 13
25723: PUSH
25724: LD_INT 14
25726: PUSH
25727: LD_INT 2
25729: PUSH
25730: LD_INT 3
25732: PUSH
25733: LD_INT 4
25735: PUSH
25736: LD_INT 5
25738: PUSH
25739: LD_INT 21
25741: PUSH
25742: LD_INT 22
25744: PUSH
25745: LD_INT 23
25747: PUSH
25748: LD_INT 24
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
25763: GO 25766
25765: POP
// result := ( chassis in result ) ;
25766: LD_ADDR_VAR 0 3
25770: PUSH
25771: LD_VAR 0 1
25775: PUSH
25776: LD_VAR 0 3
25780: IN
25781: ST_TO_ADDR
// end ;
25782: LD_VAR 0 3
25786: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25787: LD_INT 0
25789: PPUSH
// if not chassis or not weapon then
25790: LD_VAR 0 1
25794: NOT
25795: PUSH
25796: LD_VAR 0 2
25800: NOT
25801: OR
25802: IFFALSE 25806
// exit ;
25804: GO 26832
// case weapon of us_machine_gun :
25806: LD_VAR 0 2
25810: PUSH
25811: LD_INT 2
25813: DOUBLE
25814: EQUAL
25815: IFTRUE 25819
25817: GO 25849
25819: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25820: LD_ADDR_VAR 0 3
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: LD_INT 3
25833: PUSH
25834: LD_INT 4
25836: PUSH
25837: LD_INT 5
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: ST_TO_ADDR
25847: GO 26816
25849: LD_INT 3
25851: DOUBLE
25852: EQUAL
25853: IFTRUE 25857
25855: GO 25887
25857: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: LD_INT 2
25868: PUSH
25869: LD_INT 3
25871: PUSH
25872: LD_INT 4
25874: PUSH
25875: LD_INT 5
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: ST_TO_ADDR
25885: GO 26816
25887: LD_INT 11
25889: DOUBLE
25890: EQUAL
25891: IFTRUE 25895
25893: GO 25925
25895: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: LD_INT 4
25912: PUSH
25913: LD_INT 5
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: ST_TO_ADDR
25923: GO 26816
25925: LD_INT 4
25927: DOUBLE
25928: EQUAL
25929: IFTRUE 25933
25931: GO 25959
25933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25934: LD_ADDR_VAR 0 3
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: LD_INT 3
25944: PUSH
25945: LD_INT 4
25947: PUSH
25948: LD_INT 5
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: ST_TO_ADDR
25957: GO 26816
25959: LD_INT 5
25961: DOUBLE
25962: EQUAL
25963: IFTRUE 25967
25965: GO 25993
25967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25968: LD_ADDR_VAR 0 3
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 3
25978: PUSH
25979: LD_INT 4
25981: PUSH
25982: LD_INT 5
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: ST_TO_ADDR
25991: GO 26816
25993: LD_INT 9
25995: DOUBLE
25996: EQUAL
25997: IFTRUE 26001
25999: GO 26027
26001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26002: LD_ADDR_VAR 0 3
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: LD_INT 4
26015: PUSH
26016: LD_INT 5
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
26025: GO 26816
26027: LD_INT 7
26029: DOUBLE
26030: EQUAL
26031: IFTRUE 26035
26033: GO 26061
26035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: LD_INT 4
26049: PUSH
26050: LD_INT 5
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: ST_TO_ADDR
26059: GO 26816
26061: LD_INT 12
26063: DOUBLE
26064: EQUAL
26065: IFTRUE 26069
26067: GO 26095
26069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26070: LD_ADDR_VAR 0 3
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: LD_INT 3
26080: PUSH
26081: LD_INT 4
26083: PUSH
26084: LD_INT 5
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: ST_TO_ADDR
26093: GO 26816
26095: LD_INT 13
26097: DOUBLE
26098: EQUAL
26099: IFTRUE 26103
26101: GO 26129
26103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26104: LD_ADDR_VAR 0 3
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: LD_INT 3
26114: PUSH
26115: LD_INT 4
26117: PUSH
26118: LD_INT 5
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: ST_TO_ADDR
26127: GO 26816
26129: LD_INT 14
26131: DOUBLE
26132: EQUAL
26133: IFTRUE 26137
26135: GO 26155
26137: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26138: LD_ADDR_VAR 0 3
26142: PUSH
26143: LD_INT 4
26145: PUSH
26146: LD_INT 5
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: ST_TO_ADDR
26153: GO 26816
26155: LD_INT 6
26157: DOUBLE
26158: EQUAL
26159: IFTRUE 26163
26161: GO 26181
26163: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26164: LD_ADDR_VAR 0 3
26168: PUSH
26169: LD_INT 4
26171: PUSH
26172: LD_INT 5
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: ST_TO_ADDR
26179: GO 26816
26181: LD_INT 10
26183: DOUBLE
26184: EQUAL
26185: IFTRUE 26189
26187: GO 26207
26189: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26190: LD_ADDR_VAR 0 3
26194: PUSH
26195: LD_INT 4
26197: PUSH
26198: LD_INT 5
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: ST_TO_ADDR
26205: GO 26816
26207: LD_INT 22
26209: DOUBLE
26210: EQUAL
26211: IFTRUE 26215
26213: GO 26241
26215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26216: LD_ADDR_VAR 0 3
26220: PUSH
26221: LD_INT 11
26223: PUSH
26224: LD_INT 12
26226: PUSH
26227: LD_INT 13
26229: PUSH
26230: LD_INT 14
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: ST_TO_ADDR
26239: GO 26816
26241: LD_INT 23
26243: DOUBLE
26244: EQUAL
26245: IFTRUE 26249
26247: GO 26275
26249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26250: LD_ADDR_VAR 0 3
26254: PUSH
26255: LD_INT 11
26257: PUSH
26258: LD_INT 12
26260: PUSH
26261: LD_INT 13
26263: PUSH
26264: LD_INT 14
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
26273: GO 26816
26275: LD_INT 24
26277: DOUBLE
26278: EQUAL
26279: IFTRUE 26283
26281: GO 26309
26283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26284: LD_ADDR_VAR 0 3
26288: PUSH
26289: LD_INT 11
26291: PUSH
26292: LD_INT 12
26294: PUSH
26295: LD_INT 13
26297: PUSH
26298: LD_INT 14
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: ST_TO_ADDR
26307: GO 26816
26309: LD_INT 30
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26343
26317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_INT 11
26325: PUSH
26326: LD_INT 12
26328: PUSH
26329: LD_INT 13
26331: PUSH
26332: LD_INT 14
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: ST_TO_ADDR
26341: GO 26816
26343: LD_INT 25
26345: DOUBLE
26346: EQUAL
26347: IFTRUE 26351
26349: GO 26369
26351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26352: LD_ADDR_VAR 0 3
26356: PUSH
26357: LD_INT 13
26359: PUSH
26360: LD_INT 14
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: ST_TO_ADDR
26367: GO 26816
26369: LD_INT 27
26371: DOUBLE
26372: EQUAL
26373: IFTRUE 26377
26375: GO 26395
26377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26378: LD_ADDR_VAR 0 3
26382: PUSH
26383: LD_INT 13
26385: PUSH
26386: LD_INT 14
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: ST_TO_ADDR
26393: GO 26816
26395: LD_INT 28
26397: DOUBLE
26398: EQUAL
26399: IFTRUE 26403
26401: GO 26421
26403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26404: LD_ADDR_VAR 0 3
26408: PUSH
26409: LD_INT 13
26411: PUSH
26412: LD_INT 14
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: ST_TO_ADDR
26419: GO 26816
26421: LD_INT 29
26423: DOUBLE
26424: EQUAL
26425: IFTRUE 26429
26427: GO 26447
26429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26430: LD_ADDR_VAR 0 3
26434: PUSH
26435: LD_INT 13
26437: PUSH
26438: LD_INT 14
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: ST_TO_ADDR
26445: GO 26816
26447: LD_INT 31
26449: DOUBLE
26450: EQUAL
26451: IFTRUE 26455
26453: GO 26473
26455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26456: LD_ADDR_VAR 0 3
26460: PUSH
26461: LD_INT 13
26463: PUSH
26464: LD_INT 14
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: ST_TO_ADDR
26471: GO 26816
26473: LD_INT 26
26475: DOUBLE
26476: EQUAL
26477: IFTRUE 26481
26479: GO 26499
26481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26482: LD_ADDR_VAR 0 3
26486: PUSH
26487: LD_INT 13
26489: PUSH
26490: LD_INT 14
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: ST_TO_ADDR
26497: GO 26816
26499: LD_INT 42
26501: DOUBLE
26502: EQUAL
26503: IFTRUE 26507
26505: GO 26533
26507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 21
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_INT 23
26521: PUSH
26522: LD_INT 24
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: ST_TO_ADDR
26531: GO 26816
26533: LD_INT 43
26535: DOUBLE
26536: EQUAL
26537: IFTRUE 26541
26539: GO 26567
26541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_INT 21
26549: PUSH
26550: LD_INT 22
26552: PUSH
26553: LD_INT 23
26555: PUSH
26556: LD_INT 24
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: ST_TO_ADDR
26565: GO 26816
26567: LD_INT 44
26569: DOUBLE
26570: EQUAL
26571: IFTRUE 26575
26573: GO 26601
26575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: LD_INT 21
26583: PUSH
26584: LD_INT 22
26586: PUSH
26587: LD_INT 23
26589: PUSH
26590: LD_INT 24
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: ST_TO_ADDR
26599: GO 26816
26601: LD_INT 45
26603: DOUBLE
26604: EQUAL
26605: IFTRUE 26609
26607: GO 26635
26609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_INT 21
26617: PUSH
26618: LD_INT 22
26620: PUSH
26621: LD_INT 23
26623: PUSH
26624: LD_INT 24
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: ST_TO_ADDR
26633: GO 26816
26635: LD_INT 49
26637: DOUBLE
26638: EQUAL
26639: IFTRUE 26643
26641: GO 26669
26643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26644: LD_ADDR_VAR 0 3
26648: PUSH
26649: LD_INT 21
26651: PUSH
26652: LD_INT 22
26654: PUSH
26655: LD_INT 23
26657: PUSH
26658: LD_INT 24
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
26667: GO 26816
26669: LD_INT 51
26671: DOUBLE
26672: EQUAL
26673: IFTRUE 26677
26675: GO 26703
26677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26678: LD_ADDR_VAR 0 3
26682: PUSH
26683: LD_INT 21
26685: PUSH
26686: LD_INT 22
26688: PUSH
26689: LD_INT 23
26691: PUSH
26692: LD_INT 24
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: ST_TO_ADDR
26701: GO 26816
26703: LD_INT 52
26705: DOUBLE
26706: EQUAL
26707: IFTRUE 26711
26709: GO 26737
26711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26712: LD_ADDR_VAR 0 3
26716: PUSH
26717: LD_INT 21
26719: PUSH
26720: LD_INT 22
26722: PUSH
26723: LD_INT 23
26725: PUSH
26726: LD_INT 24
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: ST_TO_ADDR
26735: GO 26816
26737: LD_INT 53
26739: DOUBLE
26740: EQUAL
26741: IFTRUE 26745
26743: GO 26763
26745: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26746: LD_ADDR_VAR 0 3
26750: PUSH
26751: LD_INT 23
26753: PUSH
26754: LD_INT 24
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: ST_TO_ADDR
26761: GO 26816
26763: LD_INT 46
26765: DOUBLE
26766: EQUAL
26767: IFTRUE 26771
26769: GO 26789
26771: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26772: LD_ADDR_VAR 0 3
26776: PUSH
26777: LD_INT 23
26779: PUSH
26780: LD_INT 24
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: ST_TO_ADDR
26787: GO 26816
26789: LD_INT 47
26791: DOUBLE
26792: EQUAL
26793: IFTRUE 26797
26795: GO 26815
26797: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26798: LD_ADDR_VAR 0 3
26802: PUSH
26803: LD_INT 23
26805: PUSH
26806: LD_INT 24
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: ST_TO_ADDR
26813: GO 26816
26815: POP
// result := ( chassis in result ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_VAR 0 1
26825: PUSH
26826: LD_VAR 0 3
26830: IN
26831: ST_TO_ADDR
// end ;
26832: LD_VAR 0 3
26836: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26837: LD_INT 0
26839: PPUSH
26840: PPUSH
26841: PPUSH
26842: PPUSH
26843: PPUSH
26844: PPUSH
26845: PPUSH
// result := array ;
26846: LD_ADDR_VAR 0 5
26850: PUSH
26851: LD_VAR 0 1
26855: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26856: LD_VAR 0 1
26860: NOT
26861: PUSH
26862: LD_VAR 0 2
26866: NOT
26867: OR
26868: PUSH
26869: LD_VAR 0 3
26873: NOT
26874: OR
26875: PUSH
26876: LD_VAR 0 2
26880: PUSH
26881: LD_VAR 0 1
26885: GREATER
26886: OR
26887: PUSH
26888: LD_VAR 0 3
26892: PUSH
26893: LD_VAR 0 1
26897: GREATER
26898: OR
26899: IFFALSE 26903
// exit ;
26901: GO 27199
// if direction then
26903: LD_VAR 0 4
26907: IFFALSE 26971
// begin d := 1 ;
26909: LD_ADDR_VAR 0 9
26913: PUSH
26914: LD_INT 1
26916: ST_TO_ADDR
// if i_from > i_to then
26917: LD_VAR 0 2
26921: PUSH
26922: LD_VAR 0 3
26926: GREATER
26927: IFFALSE 26953
// length := ( array - i_from ) + i_to else
26929: LD_ADDR_VAR 0 11
26933: PUSH
26934: LD_VAR 0 1
26938: PUSH
26939: LD_VAR 0 2
26943: MINUS
26944: PUSH
26945: LD_VAR 0 3
26949: PLUS
26950: ST_TO_ADDR
26951: GO 26969
// length := i_to - i_from ;
26953: LD_ADDR_VAR 0 11
26957: PUSH
26958: LD_VAR 0 3
26962: PUSH
26963: LD_VAR 0 2
26967: MINUS
26968: ST_TO_ADDR
// end else
26969: GO 27032
// begin d := - 1 ;
26971: LD_ADDR_VAR 0 9
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: ST_TO_ADDR
// if i_from > i_to then
26980: LD_VAR 0 2
26984: PUSH
26985: LD_VAR 0 3
26989: GREATER
26990: IFFALSE 27010
// length := i_from - i_to else
26992: LD_ADDR_VAR 0 11
26996: PUSH
26997: LD_VAR 0 2
27001: PUSH
27002: LD_VAR 0 3
27006: MINUS
27007: ST_TO_ADDR
27008: GO 27032
// length := ( array - i_to ) + i_from ;
27010: LD_ADDR_VAR 0 11
27014: PUSH
27015: LD_VAR 0 1
27019: PUSH
27020: LD_VAR 0 3
27024: MINUS
27025: PUSH
27026: LD_VAR 0 2
27030: PLUS
27031: ST_TO_ADDR
// end ; if not length then
27032: LD_VAR 0 11
27036: NOT
27037: IFFALSE 27041
// exit ;
27039: GO 27199
// tmp := array ;
27041: LD_ADDR_VAR 0 10
27045: PUSH
27046: LD_VAR 0 1
27050: ST_TO_ADDR
// for i = 1 to length do
27051: LD_ADDR_VAR 0 6
27055: PUSH
27056: DOUBLE
27057: LD_INT 1
27059: DEC
27060: ST_TO_ADDR
27061: LD_VAR 0 11
27065: PUSH
27066: FOR_TO
27067: IFFALSE 27187
// begin for j = 1 to array do
27069: LD_ADDR_VAR 0 7
27073: PUSH
27074: DOUBLE
27075: LD_INT 1
27077: DEC
27078: ST_TO_ADDR
27079: LD_VAR 0 1
27083: PUSH
27084: FOR_TO
27085: IFFALSE 27173
// begin k := j + d ;
27087: LD_ADDR_VAR 0 8
27091: PUSH
27092: LD_VAR 0 7
27096: PUSH
27097: LD_VAR 0 9
27101: PLUS
27102: ST_TO_ADDR
// if k > array then
27103: LD_VAR 0 8
27107: PUSH
27108: LD_VAR 0 1
27112: GREATER
27113: IFFALSE 27123
// k := 1 ;
27115: LD_ADDR_VAR 0 8
27119: PUSH
27120: LD_INT 1
27122: ST_TO_ADDR
// if not k then
27123: LD_VAR 0 8
27127: NOT
27128: IFFALSE 27140
// k := array ;
27130: LD_ADDR_VAR 0 8
27134: PUSH
27135: LD_VAR 0 1
27139: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27140: LD_ADDR_VAR 0 10
27144: PUSH
27145: LD_VAR 0 10
27149: PPUSH
27150: LD_VAR 0 8
27154: PPUSH
27155: LD_VAR 0 1
27159: PUSH
27160: LD_VAR 0 7
27164: ARRAY
27165: PPUSH
27166: CALL_OW 1
27170: ST_TO_ADDR
// end ;
27171: GO 27084
27173: POP
27174: POP
// array := tmp ;
27175: LD_ADDR_VAR 0 1
27179: PUSH
27180: LD_VAR 0 10
27184: ST_TO_ADDR
// end ;
27185: GO 27066
27187: POP
27188: POP
// result := array ;
27189: LD_ADDR_VAR 0 5
27193: PUSH
27194: LD_VAR 0 1
27198: ST_TO_ADDR
// end ;
27199: LD_VAR 0 5
27203: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27204: LD_INT 0
27206: PPUSH
27207: PPUSH
// result := 0 ;
27208: LD_ADDR_VAR 0 3
27212: PUSH
27213: LD_INT 0
27215: ST_TO_ADDR
// if not array or not value in array then
27216: LD_VAR 0 1
27220: NOT
27221: PUSH
27222: LD_VAR 0 2
27226: PUSH
27227: LD_VAR 0 1
27231: IN
27232: NOT
27233: OR
27234: IFFALSE 27238
// exit ;
27236: GO 27292
// for i = 1 to array do
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: DOUBLE
27244: LD_INT 1
27246: DEC
27247: ST_TO_ADDR
27248: LD_VAR 0 1
27252: PUSH
27253: FOR_TO
27254: IFFALSE 27290
// if value = array [ i ] then
27256: LD_VAR 0 2
27260: PUSH
27261: LD_VAR 0 1
27265: PUSH
27266: LD_VAR 0 4
27270: ARRAY
27271: EQUAL
27272: IFFALSE 27288
// begin result := i ;
27274: LD_ADDR_VAR 0 3
27278: PUSH
27279: LD_VAR 0 4
27283: ST_TO_ADDR
// exit ;
27284: POP
27285: POP
27286: GO 27292
// end ;
27288: GO 27253
27290: POP
27291: POP
// end ;
27292: LD_VAR 0 3
27296: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27297: LD_INT 0
27299: PPUSH
// vc_chassis := chassis ;
27300: LD_ADDR_OWVAR 37
27304: PUSH
27305: LD_VAR 0 1
27309: ST_TO_ADDR
// vc_engine := engine ;
27310: LD_ADDR_OWVAR 39
27314: PUSH
27315: LD_VAR 0 2
27319: ST_TO_ADDR
// vc_control := control ;
27320: LD_ADDR_OWVAR 38
27324: PUSH
27325: LD_VAR 0 3
27329: ST_TO_ADDR
// vc_weapon := weapon ;
27330: LD_ADDR_OWVAR 40
27334: PUSH
27335: LD_VAR 0 4
27339: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27340: LD_ADDR_OWVAR 41
27344: PUSH
27345: LD_VAR 0 5
27349: ST_TO_ADDR
// end ;
27350: LD_VAR 0 6
27354: RET
// export function WantPlant ( unit ) ; var task ; begin
27355: LD_INT 0
27357: PPUSH
27358: PPUSH
// result := false ;
27359: LD_ADDR_VAR 0 2
27363: PUSH
27364: LD_INT 0
27366: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27367: LD_ADDR_VAR 0 3
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 437
27381: ST_TO_ADDR
// if task then
27382: LD_VAR 0 3
27386: IFFALSE 27414
// if task [ 1 ] [ 1 ] = p then
27388: LD_VAR 0 3
27392: PUSH
27393: LD_INT 1
27395: ARRAY
27396: PUSH
27397: LD_INT 1
27399: ARRAY
27400: PUSH
27401: LD_STRING p
27403: EQUAL
27404: IFFALSE 27414
// result := true ;
27406: LD_ADDR_VAR 0 2
27410: PUSH
27411: LD_INT 1
27413: ST_TO_ADDR
// end ;
27414: LD_VAR 0 2
27418: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
27423: PPUSH
27424: PPUSH
// if pos < 1 then
27425: LD_VAR 0 2
27429: PUSH
27430: LD_INT 1
27432: LESS
27433: IFFALSE 27437
// exit ;
27435: GO 27740
// if pos = 1 then
27437: LD_VAR 0 2
27441: PUSH
27442: LD_INT 1
27444: EQUAL
27445: IFFALSE 27478
// result := Replace ( arr , pos [ 1 ] , value ) else
27447: LD_ADDR_VAR 0 4
27451: PUSH
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_VAR 0 2
27461: PUSH
27462: LD_INT 1
27464: ARRAY
27465: PPUSH
27466: LD_VAR 0 3
27470: PPUSH
27471: CALL_OW 1
27475: ST_TO_ADDR
27476: GO 27740
// begin tmp := arr ;
27478: LD_ADDR_VAR 0 6
27482: PUSH
27483: LD_VAR 0 1
27487: ST_TO_ADDR
// s_arr := [ tmp ] ;
27488: LD_ADDR_VAR 0 7
27492: PUSH
27493: LD_VAR 0 6
27497: PUSH
27498: EMPTY
27499: LIST
27500: ST_TO_ADDR
// for i = 1 to pos - 1 do
27501: LD_ADDR_VAR 0 5
27505: PUSH
27506: DOUBLE
27507: LD_INT 1
27509: DEC
27510: ST_TO_ADDR
27511: LD_VAR 0 2
27515: PUSH
27516: LD_INT 1
27518: MINUS
27519: PUSH
27520: FOR_TO
27521: IFFALSE 27566
// begin tmp := tmp [ pos [ i ] ] ;
27523: LD_ADDR_VAR 0 6
27527: PUSH
27528: LD_VAR 0 6
27532: PUSH
27533: LD_VAR 0 2
27537: PUSH
27538: LD_VAR 0 5
27542: ARRAY
27543: ARRAY
27544: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27545: LD_ADDR_VAR 0 7
27549: PUSH
27550: LD_VAR 0 7
27554: PUSH
27555: LD_VAR 0 6
27559: PUSH
27560: EMPTY
27561: LIST
27562: ADD
27563: ST_TO_ADDR
// end ;
27564: GO 27520
27566: POP
27567: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27568: LD_ADDR_VAR 0 6
27572: PUSH
27573: LD_VAR 0 6
27577: PPUSH
27578: LD_VAR 0 2
27582: PUSH
27583: LD_VAR 0 2
27587: ARRAY
27588: PPUSH
27589: LD_VAR 0 3
27593: PPUSH
27594: CALL_OW 1
27598: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27599: LD_ADDR_VAR 0 7
27603: PUSH
27604: LD_VAR 0 7
27608: PPUSH
27609: LD_VAR 0 7
27613: PPUSH
27614: LD_VAR 0 6
27618: PPUSH
27619: CALL_OW 1
27623: ST_TO_ADDR
// for i = s_arr downto 2 do
27624: LD_ADDR_VAR 0 5
27628: PUSH
27629: DOUBLE
27630: LD_VAR 0 7
27634: INC
27635: ST_TO_ADDR
27636: LD_INT 2
27638: PUSH
27639: FOR_DOWNTO
27640: IFFALSE 27724
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27642: LD_ADDR_VAR 0 6
27646: PUSH
27647: LD_VAR 0 7
27651: PUSH
27652: LD_VAR 0 5
27656: PUSH
27657: LD_INT 1
27659: MINUS
27660: ARRAY
27661: PPUSH
27662: LD_VAR 0 2
27666: PUSH
27667: LD_VAR 0 5
27671: PUSH
27672: LD_INT 1
27674: MINUS
27675: ARRAY
27676: PPUSH
27677: LD_VAR 0 7
27681: PUSH
27682: LD_VAR 0 5
27686: ARRAY
27687: PPUSH
27688: CALL_OW 1
27692: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27693: LD_ADDR_VAR 0 7
27697: PUSH
27698: LD_VAR 0 7
27702: PPUSH
27703: LD_VAR 0 5
27707: PUSH
27708: LD_INT 1
27710: MINUS
27711: PPUSH
27712: LD_VAR 0 6
27716: PPUSH
27717: CALL_OW 1
27721: ST_TO_ADDR
// end ;
27722: GO 27639
27724: POP
27725: POP
// result := s_arr [ 1 ] ;
27726: LD_ADDR_VAR 0 4
27730: PUSH
27731: LD_VAR 0 7
27735: PUSH
27736: LD_INT 1
27738: ARRAY
27739: ST_TO_ADDR
// end ; end ;
27740: LD_VAR 0 4
27744: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27745: LD_INT 0
27747: PPUSH
27748: PPUSH
// if not list then
27749: LD_VAR 0 1
27753: NOT
27754: IFFALSE 27758
// exit ;
27756: GO 27849
// i := list [ pos1 ] ;
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_VAR 0 1
27767: PUSH
27768: LD_VAR 0 2
27772: ARRAY
27773: ST_TO_ADDR
// if not i then
27774: LD_VAR 0 5
27778: NOT
27779: IFFALSE 27783
// exit ;
27781: GO 27849
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27783: LD_ADDR_VAR 0 1
27787: PUSH
27788: LD_VAR 0 1
27792: PPUSH
27793: LD_VAR 0 2
27797: PPUSH
27798: LD_VAR 0 1
27802: PUSH
27803: LD_VAR 0 3
27807: ARRAY
27808: PPUSH
27809: CALL_OW 1
27813: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27814: LD_ADDR_VAR 0 1
27818: PUSH
27819: LD_VAR 0 1
27823: PPUSH
27824: LD_VAR 0 3
27828: PPUSH
27829: LD_VAR 0 5
27833: PPUSH
27834: CALL_OW 1
27838: ST_TO_ADDR
// result := list ;
27839: LD_ADDR_VAR 0 4
27843: PUSH
27844: LD_VAR 0 1
27848: ST_TO_ADDR
// end ;
27849: LD_VAR 0 4
27853: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27854: LD_INT 0
27856: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27857: LD_ADDR_VAR 0 5
27861: PUSH
27862: LD_VAR 0 1
27866: PPUSH
27867: CALL_OW 250
27871: PPUSH
27872: LD_VAR 0 1
27876: PPUSH
27877: CALL_OW 251
27881: PPUSH
27882: LD_VAR 0 2
27886: PPUSH
27887: LD_VAR 0 3
27891: PPUSH
27892: LD_VAR 0 4
27896: PPUSH
27897: CALL 27907 0 5
27901: ST_TO_ADDR
// end ;
27902: LD_VAR 0 5
27906: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27907: LD_INT 0
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
// if not list then
27913: LD_VAR 0 3
27917: NOT
27918: IFFALSE 27922
// exit ;
27920: GO 28310
// result := [ ] ;
27922: LD_ADDR_VAR 0 6
27926: PUSH
27927: EMPTY
27928: ST_TO_ADDR
// for i in list do
27929: LD_ADDR_VAR 0 7
27933: PUSH
27934: LD_VAR 0 3
27938: PUSH
27939: FOR_IN
27940: IFFALSE 28142
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27942: LD_ADDR_VAR 0 9
27946: PUSH
27947: LD_VAR 0 7
27951: PPUSH
27952: LD_VAR 0 1
27956: PPUSH
27957: LD_VAR 0 2
27961: PPUSH
27962: CALL_OW 297
27966: ST_TO_ADDR
// if not result then
27967: LD_VAR 0 6
27971: NOT
27972: IFFALSE 27998
// result := [ [ i , tmp ] ] else
27974: LD_ADDR_VAR 0 6
27978: PUSH
27979: LD_VAR 0 7
27983: PUSH
27984: LD_VAR 0 9
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: ST_TO_ADDR
27996: GO 28140
// begin if result [ result ] [ 2 ] < tmp then
27998: LD_VAR 0 6
28002: PUSH
28003: LD_VAR 0 6
28007: ARRAY
28008: PUSH
28009: LD_INT 2
28011: ARRAY
28012: PUSH
28013: LD_VAR 0 9
28017: LESS
28018: IFFALSE 28060
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28020: LD_ADDR_VAR 0 6
28024: PUSH
28025: LD_VAR 0 6
28029: PPUSH
28030: LD_VAR 0 6
28034: PUSH
28035: LD_INT 1
28037: PLUS
28038: PPUSH
28039: LD_VAR 0 7
28043: PUSH
28044: LD_VAR 0 9
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL_OW 2
28057: ST_TO_ADDR
28058: GO 28140
// for j = 1 to result do
28060: LD_ADDR_VAR 0 8
28064: PUSH
28065: DOUBLE
28066: LD_INT 1
28068: DEC
28069: ST_TO_ADDR
28070: LD_VAR 0 6
28074: PUSH
28075: FOR_TO
28076: IFFALSE 28138
// begin if tmp < result [ j ] [ 2 ] then
28078: LD_VAR 0 9
28082: PUSH
28083: LD_VAR 0 6
28087: PUSH
28088: LD_VAR 0 8
28092: ARRAY
28093: PUSH
28094: LD_INT 2
28096: ARRAY
28097: LESS
28098: IFFALSE 28136
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28100: LD_ADDR_VAR 0 6
28104: PUSH
28105: LD_VAR 0 6
28109: PPUSH
28110: LD_VAR 0 8
28114: PPUSH
28115: LD_VAR 0 7
28119: PUSH
28120: LD_VAR 0 9
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PPUSH
28129: CALL_OW 2
28133: ST_TO_ADDR
// break ;
28134: GO 28138
// end ; end ;
28136: GO 28075
28138: POP
28139: POP
// end ; end ;
28140: GO 27939
28142: POP
28143: POP
// if result and not asc then
28144: LD_VAR 0 6
28148: PUSH
28149: LD_VAR 0 4
28153: NOT
28154: AND
28155: IFFALSE 28230
// begin tmp := result ;
28157: LD_ADDR_VAR 0 9
28161: PUSH
28162: LD_VAR 0 6
28166: ST_TO_ADDR
// for i = tmp downto 1 do
28167: LD_ADDR_VAR 0 7
28171: PUSH
28172: DOUBLE
28173: LD_VAR 0 9
28177: INC
28178: ST_TO_ADDR
28179: LD_INT 1
28181: PUSH
28182: FOR_DOWNTO
28183: IFFALSE 28228
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28185: LD_ADDR_VAR 0 6
28189: PUSH
28190: LD_VAR 0 6
28194: PPUSH
28195: LD_VAR 0 9
28199: PUSH
28200: LD_VAR 0 7
28204: MINUS
28205: PUSH
28206: LD_INT 1
28208: PLUS
28209: PPUSH
28210: LD_VAR 0 9
28214: PUSH
28215: LD_VAR 0 7
28219: ARRAY
28220: PPUSH
28221: CALL_OW 1
28225: ST_TO_ADDR
28226: GO 28182
28228: POP
28229: POP
// end ; tmp := [ ] ;
28230: LD_ADDR_VAR 0 9
28234: PUSH
28235: EMPTY
28236: ST_TO_ADDR
// if mode then
28237: LD_VAR 0 5
28241: IFFALSE 28310
// begin for i = 1 to result do
28243: LD_ADDR_VAR 0 7
28247: PUSH
28248: DOUBLE
28249: LD_INT 1
28251: DEC
28252: ST_TO_ADDR
28253: LD_VAR 0 6
28257: PUSH
28258: FOR_TO
28259: IFFALSE 28298
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28261: LD_ADDR_VAR 0 9
28265: PUSH
28266: LD_VAR 0 9
28270: PPUSH
28271: LD_VAR 0 7
28275: PPUSH
28276: LD_VAR 0 6
28280: PUSH
28281: LD_VAR 0 7
28285: ARRAY
28286: PUSH
28287: LD_INT 1
28289: ARRAY
28290: PPUSH
28291: CALL_OW 1
28295: ST_TO_ADDR
28296: GO 28258
28298: POP
28299: POP
// result := tmp ;
28300: LD_ADDR_VAR 0 6
28304: PUSH
28305: LD_VAR 0 9
28309: ST_TO_ADDR
// end ; end ;
28310: LD_VAR 0 6
28314: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28315: LD_INT 0
28317: PPUSH
28318: PPUSH
28319: PPUSH
28320: PPUSH
28321: PPUSH
28322: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28323: LD_ADDR_VAR 0 5
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: ST_TO_ADDR
// if not x or not y then
28345: LD_VAR 0 2
28349: NOT
28350: PUSH
28351: LD_VAR 0 3
28355: NOT
28356: OR
28357: IFFALSE 28361
// exit ;
28359: GO 30007
// if not range then
28361: LD_VAR 0 4
28365: NOT
28366: IFFALSE 28376
// range := 10 ;
28368: LD_ADDR_VAR 0 4
28372: PUSH
28373: LD_INT 10
28375: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28376: LD_ADDR_VAR 0 8
28380: PUSH
28381: LD_INT 81
28383: PUSH
28384: LD_VAR 0 1
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 92
28395: PUSH
28396: LD_VAR 0 2
28400: PUSH
28401: LD_VAR 0 3
28405: PUSH
28406: LD_VAR 0 4
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 3
28419: PUSH
28420: LD_INT 21
28422: PUSH
28423: LD_INT 3
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: PPUSH
28439: CALL_OW 69
28443: ST_TO_ADDR
// if not tmp then
28444: LD_VAR 0 8
28448: NOT
28449: IFFALSE 28453
// exit ;
28451: GO 30007
// for i in tmp do
28453: LD_ADDR_VAR 0 6
28457: PUSH
28458: LD_VAR 0 8
28462: PUSH
28463: FOR_IN
28464: IFFALSE 29982
// begin points := [ 0 , 0 , 0 ] ;
28466: LD_ADDR_VAR 0 9
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
// bpoints := 1 ;
28485: LD_ADDR_VAR 0 10
28489: PUSH
28490: LD_INT 1
28492: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28493: LD_VAR 0 6
28497: PPUSH
28498: CALL_OW 247
28502: PUSH
28503: LD_INT 1
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 29089
28511: POP
// begin if GetClass ( i ) = 1 then
28512: LD_VAR 0 6
28516: PPUSH
28517: CALL_OW 257
28521: PUSH
28522: LD_INT 1
28524: EQUAL
28525: IFFALSE 28546
// points := [ 10 , 5 , 3 ] ;
28527: LD_ADDR_VAR 0 9
28531: PUSH
28532: LD_INT 10
28534: PUSH
28535: LD_INT 5
28537: PUSH
28538: LD_INT 3
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28546: LD_VAR 0 6
28550: PPUSH
28551: CALL_OW 257
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: LD_INT 3
28561: PUSH
28562: LD_INT 4
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: LIST
28569: IN
28570: IFFALSE 28591
// points := [ 3 , 2 , 1 ] ;
28572: LD_ADDR_VAR 0 9
28576: PUSH
28577: LD_INT 3
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28591: LD_VAR 0 6
28595: PPUSH
28596: CALL_OW 257
28600: PUSH
28601: LD_INT 5
28603: EQUAL
28604: IFFALSE 28625
// points := [ 130 , 5 , 2 ] ;
28606: LD_ADDR_VAR 0 9
28610: PUSH
28611: LD_INT 130
28613: PUSH
28614: LD_INT 5
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28625: LD_VAR 0 6
28629: PPUSH
28630: CALL_OW 257
28634: PUSH
28635: LD_INT 8
28637: EQUAL
28638: IFFALSE 28659
// points := [ 35 , 35 , 30 ] ;
28640: LD_ADDR_VAR 0 9
28644: PUSH
28645: LD_INT 35
28647: PUSH
28648: LD_INT 35
28650: PUSH
28651: LD_INT 30
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28659: LD_VAR 0 6
28663: PPUSH
28664: CALL_OW 257
28668: PUSH
28669: LD_INT 9
28671: EQUAL
28672: IFFALSE 28693
// points := [ 20 , 55 , 40 ] ;
28674: LD_ADDR_VAR 0 9
28678: PUSH
28679: LD_INT 20
28681: PUSH
28682: LD_INT 55
28684: PUSH
28685: LD_INT 40
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28693: LD_VAR 0 6
28697: PPUSH
28698: CALL_OW 257
28702: PUSH
28703: LD_INT 12
28705: PUSH
28706: LD_INT 16
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: IN
28713: IFFALSE 28734
// points := [ 5 , 3 , 2 ] ;
28715: LD_ADDR_VAR 0 9
28719: PUSH
28720: LD_INT 5
28722: PUSH
28723: LD_INT 3
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28734: LD_VAR 0 6
28738: PPUSH
28739: CALL_OW 257
28743: PUSH
28744: LD_INT 17
28746: EQUAL
28747: IFFALSE 28768
// points := [ 100 , 50 , 75 ] ;
28749: LD_ADDR_VAR 0 9
28753: PUSH
28754: LD_INT 100
28756: PUSH
28757: LD_INT 50
28759: PUSH
28760: LD_INT 75
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28768: LD_VAR 0 6
28772: PPUSH
28773: CALL_OW 257
28777: PUSH
28778: LD_INT 15
28780: EQUAL
28781: IFFALSE 28802
// points := [ 10 , 5 , 3 ] ;
28783: LD_ADDR_VAR 0 9
28787: PUSH
28788: LD_INT 10
28790: PUSH
28791: LD_INT 5
28793: PUSH
28794: LD_INT 3
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: LIST
28801: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28802: LD_VAR 0 6
28806: PPUSH
28807: CALL_OW 257
28811: PUSH
28812: LD_INT 14
28814: EQUAL
28815: IFFALSE 28836
// points := [ 10 , 0 , 0 ] ;
28817: LD_ADDR_VAR 0 9
28821: PUSH
28822: LD_INT 10
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28836: LD_VAR 0 6
28840: PPUSH
28841: CALL_OW 257
28845: PUSH
28846: LD_INT 11
28848: EQUAL
28849: IFFALSE 28870
// points := [ 30 , 10 , 5 ] ;
28851: LD_ADDR_VAR 0 9
28855: PUSH
28856: LD_INT 30
28858: PUSH
28859: LD_INT 10
28861: PUSH
28862: LD_INT 5
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28870: LD_VAR 0 1
28874: PPUSH
28875: LD_INT 5
28877: PPUSH
28878: CALL_OW 321
28882: PUSH
28883: LD_INT 2
28885: EQUAL
28886: IFFALSE 28903
// bpoints := bpoints * 1.8 ;
28888: LD_ADDR_VAR 0 10
28892: PUSH
28893: LD_VAR 0 10
28897: PUSH
28898: LD_REAL  1.80000000000000E+0000
28901: MUL
28902: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28903: LD_VAR 0 6
28907: PPUSH
28908: CALL_OW 257
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: LD_INT 3
28921: PUSH
28922: LD_INT 4
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: IN
28931: PUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: LD_INT 51
28939: PPUSH
28940: CALL_OW 321
28944: PUSH
28945: LD_INT 2
28947: EQUAL
28948: AND
28949: IFFALSE 28966
// bpoints := bpoints * 1.2 ;
28951: LD_ADDR_VAR 0 10
28955: PUSH
28956: LD_VAR 0 10
28960: PUSH
28961: LD_REAL  1.20000000000000E+0000
28964: MUL
28965: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28966: LD_VAR 0 6
28970: PPUSH
28971: CALL_OW 257
28975: PUSH
28976: LD_INT 5
28978: PUSH
28979: LD_INT 7
28981: PUSH
28982: LD_INT 9
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: IN
28990: PUSH
28991: LD_VAR 0 1
28995: PPUSH
28996: LD_INT 52
28998: PPUSH
28999: CALL_OW 321
29003: PUSH
29004: LD_INT 2
29006: EQUAL
29007: AND
29008: IFFALSE 29025
// bpoints := bpoints * 1.5 ;
29010: LD_ADDR_VAR 0 10
29014: PUSH
29015: LD_VAR 0 10
29019: PUSH
29020: LD_REAL  1.50000000000000E+0000
29023: MUL
29024: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29025: LD_VAR 0 1
29029: PPUSH
29030: LD_INT 66
29032: PPUSH
29033: CALL_OW 321
29037: PUSH
29038: LD_INT 2
29040: EQUAL
29041: IFFALSE 29058
// bpoints := bpoints * 1.1 ;
29043: LD_ADDR_VAR 0 10
29047: PUSH
29048: LD_VAR 0 10
29052: PUSH
29053: LD_REAL  1.10000000000000E+0000
29056: MUL
29057: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29058: LD_ADDR_VAR 0 10
29062: PUSH
29063: LD_VAR 0 10
29067: PUSH
29068: LD_VAR 0 6
29072: PPUSH
29073: LD_INT 1
29075: PPUSH
29076: CALL_OW 259
29080: PUSH
29081: LD_REAL  1.15000000000000E+0000
29084: MUL
29085: MUL
29086: ST_TO_ADDR
// end ; unit_vehicle :
29087: GO 29911
29089: LD_INT 2
29091: DOUBLE
29092: EQUAL
29093: IFTRUE 29097
29095: GO 29899
29097: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29098: LD_VAR 0 6
29102: PPUSH
29103: CALL_OW 264
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: LD_INT 42
29113: PUSH
29114: LD_INT 24
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: IN
29122: IFFALSE 29143
// points := [ 25 , 5 , 3 ] ;
29124: LD_ADDR_VAR 0 9
29128: PUSH
29129: LD_INT 25
29131: PUSH
29132: LD_INT 5
29134: PUSH
29135: LD_INT 3
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29143: LD_VAR 0 6
29147: PPUSH
29148: CALL_OW 264
29152: PUSH
29153: LD_INT 4
29155: PUSH
29156: LD_INT 43
29158: PUSH
29159: LD_INT 25
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: IN
29167: IFFALSE 29188
// points := [ 40 , 15 , 5 ] ;
29169: LD_ADDR_VAR 0 9
29173: PUSH
29174: LD_INT 40
29176: PUSH
29177: LD_INT 15
29179: PUSH
29180: LD_INT 5
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29188: LD_VAR 0 6
29192: PPUSH
29193: CALL_OW 264
29197: PUSH
29198: LD_INT 3
29200: PUSH
29201: LD_INT 23
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: IN
29208: IFFALSE 29229
// points := [ 7 , 25 , 8 ] ;
29210: LD_ADDR_VAR 0 9
29214: PUSH
29215: LD_INT 7
29217: PUSH
29218: LD_INT 25
29220: PUSH
29221: LD_INT 8
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29229: LD_VAR 0 6
29233: PPUSH
29234: CALL_OW 264
29238: PUSH
29239: LD_INT 5
29241: PUSH
29242: LD_INT 27
29244: PUSH
29245: LD_INT 44
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: IN
29253: IFFALSE 29274
// points := [ 14 , 50 , 16 ] ;
29255: LD_ADDR_VAR 0 9
29259: PUSH
29260: LD_INT 14
29262: PUSH
29263: LD_INT 50
29265: PUSH
29266: LD_INT 16
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: LIST
29273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29274: LD_VAR 0 6
29278: PPUSH
29279: CALL_OW 264
29283: PUSH
29284: LD_INT 6
29286: PUSH
29287: LD_INT 46
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: IN
29294: IFFALSE 29315
// points := [ 32 , 120 , 70 ] ;
29296: LD_ADDR_VAR 0 9
29300: PUSH
29301: LD_INT 32
29303: PUSH
29304: LD_INT 120
29306: PUSH
29307: LD_INT 70
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
29315: LD_VAR 0 6
29319: PPUSH
29320: CALL_OW 264
29324: PUSH
29325: LD_INT 7
29327: PUSH
29328: LD_INT 28
29330: PUSH
29331: LD_INT 45
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: LIST
29338: IN
29339: IFFALSE 29360
// points := [ 35 , 20 , 45 ] ;
29341: LD_ADDR_VAR 0 9
29345: PUSH
29346: LD_INT 35
29348: PUSH
29349: LD_INT 20
29351: PUSH
29352: LD_INT 45
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29360: LD_VAR 0 6
29364: PPUSH
29365: CALL_OW 264
29369: PUSH
29370: LD_INT 47
29372: PUSH
29373: EMPTY
29374: LIST
29375: IN
29376: IFFALSE 29397
// points := [ 67 , 45 , 75 ] ;
29378: LD_ADDR_VAR 0 9
29382: PUSH
29383: LD_INT 67
29385: PUSH
29386: LD_INT 45
29388: PUSH
29389: LD_INT 75
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: LIST
29396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29397: LD_VAR 0 6
29401: PPUSH
29402: CALL_OW 264
29406: PUSH
29407: LD_INT 26
29409: PUSH
29410: EMPTY
29411: LIST
29412: IN
29413: IFFALSE 29434
// points := [ 120 , 30 , 80 ] ;
29415: LD_ADDR_VAR 0 9
29419: PUSH
29420: LD_INT 120
29422: PUSH
29423: LD_INT 30
29425: PUSH
29426: LD_INT 80
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29434: LD_VAR 0 6
29438: PPUSH
29439: CALL_OW 264
29443: PUSH
29444: LD_INT 22
29446: PUSH
29447: EMPTY
29448: LIST
29449: IN
29450: IFFALSE 29471
// points := [ 40 , 1 , 1 ] ;
29452: LD_ADDR_VAR 0 9
29456: PUSH
29457: LD_INT 40
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29471: LD_VAR 0 6
29475: PPUSH
29476: CALL_OW 264
29480: PUSH
29481: LD_INT 29
29483: PUSH
29484: EMPTY
29485: LIST
29486: IN
29487: IFFALSE 29508
// points := [ 70 , 200 , 400 ] ;
29489: LD_ADDR_VAR 0 9
29493: PUSH
29494: LD_INT 70
29496: PUSH
29497: LD_INT 200
29499: PUSH
29500: LD_INT 400
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29508: LD_VAR 0 6
29512: PPUSH
29513: CALL_OW 264
29517: PUSH
29518: LD_INT 14
29520: PUSH
29521: LD_INT 53
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: IN
29528: IFFALSE 29549
// points := [ 40 , 10 , 20 ] ;
29530: LD_ADDR_VAR 0 9
29534: PUSH
29535: LD_INT 40
29537: PUSH
29538: LD_INT 10
29540: PUSH
29541: LD_INT 20
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29549: LD_VAR 0 6
29553: PPUSH
29554: CALL_OW 264
29558: PUSH
29559: LD_INT 9
29561: PUSH
29562: EMPTY
29563: LIST
29564: IN
29565: IFFALSE 29586
// points := [ 5 , 70 , 20 ] ;
29567: LD_ADDR_VAR 0 9
29571: PUSH
29572: LD_INT 5
29574: PUSH
29575: LD_INT 70
29577: PUSH
29578: LD_INT 20
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29586: LD_VAR 0 6
29590: PPUSH
29591: CALL_OW 264
29595: PUSH
29596: LD_INT 10
29598: PUSH
29599: EMPTY
29600: LIST
29601: IN
29602: IFFALSE 29623
// points := [ 35 , 110 , 70 ] ;
29604: LD_ADDR_VAR 0 9
29608: PUSH
29609: LD_INT 35
29611: PUSH
29612: LD_INT 110
29614: PUSH
29615: LD_INT 70
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29623: LD_VAR 0 6
29627: PPUSH
29628: CALL_OW 265
29632: PUSH
29633: LD_INT 25
29635: EQUAL
29636: IFFALSE 29657
// points := [ 80 , 65 , 100 ] ;
29638: LD_ADDR_VAR 0 9
29642: PUSH
29643: LD_INT 80
29645: PUSH
29646: LD_INT 65
29648: PUSH
29649: LD_INT 100
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29657: LD_VAR 0 6
29661: PPUSH
29662: CALL_OW 263
29666: PUSH
29667: LD_INT 1
29669: EQUAL
29670: IFFALSE 29705
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29672: LD_ADDR_VAR 0 10
29676: PUSH
29677: LD_VAR 0 10
29681: PUSH
29682: LD_VAR 0 6
29686: PPUSH
29687: CALL_OW 311
29691: PPUSH
29692: LD_INT 3
29694: PPUSH
29695: CALL_OW 259
29699: PUSH
29700: LD_INT 4
29702: MUL
29703: MUL
29704: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29705: LD_VAR 0 6
29709: PPUSH
29710: CALL_OW 263
29714: PUSH
29715: LD_INT 2
29717: EQUAL
29718: IFFALSE 29769
// begin j := IsControledBy ( i ) ;
29720: LD_ADDR_VAR 0 7
29724: PUSH
29725: LD_VAR 0 6
29729: PPUSH
29730: CALL_OW 312
29734: ST_TO_ADDR
// if j then
29735: LD_VAR 0 7
29739: IFFALSE 29769
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29741: LD_ADDR_VAR 0 10
29745: PUSH
29746: LD_VAR 0 10
29750: PUSH
29751: LD_VAR 0 7
29755: PPUSH
29756: LD_INT 3
29758: PPUSH
29759: CALL_OW 259
29763: PUSH
29764: LD_INT 3
29766: MUL
29767: MUL
29768: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29769: LD_VAR 0 6
29773: PPUSH
29774: CALL_OW 264
29778: PUSH
29779: LD_INT 5
29781: PUSH
29782: LD_INT 6
29784: PUSH
29785: LD_INT 46
29787: PUSH
29788: LD_INT 44
29790: PUSH
29791: LD_INT 47
29793: PUSH
29794: LD_INT 45
29796: PUSH
29797: LD_INT 28
29799: PUSH
29800: LD_INT 7
29802: PUSH
29803: LD_INT 27
29805: PUSH
29806: LD_INT 29
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: IN
29821: PUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: LD_INT 52
29829: PPUSH
29830: CALL_OW 321
29834: PUSH
29835: LD_INT 2
29837: EQUAL
29838: AND
29839: IFFALSE 29856
// bpoints := bpoints * 1.2 ;
29841: LD_ADDR_VAR 0 10
29845: PUSH
29846: LD_VAR 0 10
29850: PUSH
29851: LD_REAL  1.20000000000000E+0000
29854: MUL
29855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29856: LD_VAR 0 6
29860: PPUSH
29861: CALL_OW 264
29865: PUSH
29866: LD_INT 6
29868: PUSH
29869: LD_INT 46
29871: PUSH
29872: LD_INT 47
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: IN
29880: IFFALSE 29897
// bpoints := bpoints * 1.2 ;
29882: LD_ADDR_VAR 0 10
29886: PUSH
29887: LD_VAR 0 10
29891: PUSH
29892: LD_REAL  1.20000000000000E+0000
29895: MUL
29896: ST_TO_ADDR
// end ; unit_building :
29897: GO 29911
29899: LD_INT 3
29901: DOUBLE
29902: EQUAL
29903: IFTRUE 29907
29905: GO 29910
29907: POP
// ; end ;
29908: GO 29911
29910: POP
// for j = 1 to 3 do
29911: LD_ADDR_VAR 0 7
29915: PUSH
29916: DOUBLE
29917: LD_INT 1
29919: DEC
29920: ST_TO_ADDR
29921: LD_INT 3
29923: PUSH
29924: FOR_TO
29925: IFFALSE 29978
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29927: LD_ADDR_VAR 0 5
29931: PUSH
29932: LD_VAR 0 5
29936: PPUSH
29937: LD_VAR 0 7
29941: PPUSH
29942: LD_VAR 0 5
29946: PUSH
29947: LD_VAR 0 7
29951: ARRAY
29952: PUSH
29953: LD_VAR 0 9
29957: PUSH
29958: LD_VAR 0 7
29962: ARRAY
29963: PUSH
29964: LD_VAR 0 10
29968: MUL
29969: PLUS
29970: PPUSH
29971: CALL_OW 1
29975: ST_TO_ADDR
29976: GO 29924
29978: POP
29979: POP
// end ;
29980: GO 28463
29982: POP
29983: POP
// result := Replace ( result , 4 , tmp ) ;
29984: LD_ADDR_VAR 0 5
29988: PUSH
29989: LD_VAR 0 5
29993: PPUSH
29994: LD_INT 4
29996: PPUSH
29997: LD_VAR 0 8
30001: PPUSH
30002: CALL_OW 1
30006: ST_TO_ADDR
// end ;
30007: LD_VAR 0 5
30011: RET
// export function DangerAtRange ( unit , range ) ; begin
30012: LD_INT 0
30014: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 255
30029: PPUSH
30030: LD_VAR 0 1
30034: PPUSH
30035: CALL_OW 250
30039: PPUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 251
30049: PPUSH
30050: LD_VAR 0 2
30054: PPUSH
30055: CALL 28315 0 4
30059: ST_TO_ADDR
// end ;
30060: LD_VAR 0 3
30064: RET
// export function DangerInArea ( side , area ) ; begin
30065: LD_INT 0
30067: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30068: LD_ADDR_VAR 0 3
30072: PUSH
30073: LD_VAR 0 2
30077: PPUSH
30078: LD_INT 81
30080: PUSH
30081: LD_VAR 0 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PPUSH
30090: CALL_OW 70
30094: ST_TO_ADDR
// end ;
30095: LD_VAR 0 3
30099: RET
// export function IsExtension ( b ) ; begin
30100: LD_INT 0
30102: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30103: LD_ADDR_VAR 0 2
30107: PUSH
30108: LD_VAR 0 1
30112: PUSH
30113: LD_INT 23
30115: PUSH
30116: LD_INT 20
30118: PUSH
30119: LD_INT 22
30121: PUSH
30122: LD_INT 17
30124: PUSH
30125: LD_INT 24
30127: PUSH
30128: LD_INT 21
30130: PUSH
30131: LD_INT 19
30133: PUSH
30134: LD_INT 16
30136: PUSH
30137: LD_INT 25
30139: PUSH
30140: LD_INT 18
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: IN
30155: ST_TO_ADDR
// end ;
30156: LD_VAR 0 2
30160: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30161: LD_INT 0
30163: PPUSH
30164: PPUSH
30165: PPUSH
// result := [ ] ;
30166: LD_ADDR_VAR 0 4
30170: PUSH
30171: EMPTY
30172: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30173: LD_ADDR_VAR 0 5
30177: PUSH
30178: LD_VAR 0 2
30182: PPUSH
30183: LD_INT 21
30185: PUSH
30186: LD_INT 3
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PPUSH
30193: CALL_OW 70
30197: ST_TO_ADDR
// if not tmp then
30198: LD_VAR 0 5
30202: NOT
30203: IFFALSE 30207
// exit ;
30205: GO 30271
// if checkLink then
30207: LD_VAR 0 3
30211: IFFALSE 30261
// begin for i in tmp do
30213: LD_ADDR_VAR 0 6
30217: PUSH
30218: LD_VAR 0 5
30222: PUSH
30223: FOR_IN
30224: IFFALSE 30259
// if GetBase ( i ) <> base then
30226: LD_VAR 0 6
30230: PPUSH
30231: CALL_OW 274
30235: PUSH
30236: LD_VAR 0 1
30240: NONEQUAL
30241: IFFALSE 30257
// ComLinkToBase ( base , i ) ;
30243: LD_VAR 0 1
30247: PPUSH
30248: LD_VAR 0 6
30252: PPUSH
30253: CALL_OW 169
30257: GO 30223
30259: POP
30260: POP
// end ; result := tmp ;
30261: LD_ADDR_VAR 0 4
30265: PUSH
30266: LD_VAR 0 5
30270: ST_TO_ADDR
// end ;
30271: LD_VAR 0 4
30275: RET
// export function ComComplete ( units , b ) ; var i ; begin
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
// if not units then
30280: LD_VAR 0 1
30284: NOT
30285: IFFALSE 30289
// exit ;
30287: GO 30379
// for i in units do
30289: LD_ADDR_VAR 0 4
30293: PUSH
30294: LD_VAR 0 1
30298: PUSH
30299: FOR_IN
30300: IFFALSE 30377
// if BuildingStatus ( b ) = bs_build then
30302: LD_VAR 0 2
30306: PPUSH
30307: CALL_OW 461
30311: PUSH
30312: LD_INT 1
30314: EQUAL
30315: IFFALSE 30375
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30317: LD_VAR 0 4
30321: PPUSH
30322: LD_STRING h
30324: PUSH
30325: LD_VAR 0 2
30329: PPUSH
30330: CALL_OW 250
30334: PUSH
30335: LD_VAR 0 2
30339: PPUSH
30340: CALL_OW 251
30344: PUSH
30345: LD_VAR 0 2
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: PPUSH
30371: CALL_OW 446
30375: GO 30299
30377: POP
30378: POP
// end ;
30379: LD_VAR 0 3
30383: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30384: LD_INT 0
30386: PPUSH
30387: PPUSH
30388: PPUSH
30389: PPUSH
30390: PPUSH
30391: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
30392: LD_VAR 0 1
30396: NOT
30397: PUSH
30398: LD_VAR 0 1
30402: PPUSH
30403: CALL_OW 263
30407: PUSH
30408: LD_INT 2
30410: EQUAL
30411: NOT
30412: OR
30413: IFFALSE 30417
// exit ;
30415: GO 30733
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30417: LD_ADDR_VAR 0 6
30421: PUSH
30422: LD_INT 22
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 255
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: LD_INT 30
30444: PUSH
30445: LD_INT 36
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 34
30454: PUSH
30455: LD_INT 31
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PPUSH
30471: CALL_OW 69
30475: ST_TO_ADDR
// if not tmp then
30476: LD_VAR 0 6
30480: NOT
30481: IFFALSE 30485
// exit ;
30483: GO 30733
// result := [ ] ;
30485: LD_ADDR_VAR 0 2
30489: PUSH
30490: EMPTY
30491: ST_TO_ADDR
// for i in tmp do
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: LD_VAR 0 6
30501: PUSH
30502: FOR_IN
30503: IFFALSE 30574
// begin t := UnitsInside ( i ) ;
30505: LD_ADDR_VAR 0 4
30509: PUSH
30510: LD_VAR 0 3
30514: PPUSH
30515: CALL_OW 313
30519: ST_TO_ADDR
// if t then
30520: LD_VAR 0 4
30524: IFFALSE 30572
// for j in t do
30526: LD_ADDR_VAR 0 7
30530: PUSH
30531: LD_VAR 0 4
30535: PUSH
30536: FOR_IN
30537: IFFALSE 30570
// result := Insert ( result , result + 1 , j ) ;
30539: LD_ADDR_VAR 0 2
30543: PUSH
30544: LD_VAR 0 2
30548: PPUSH
30549: LD_VAR 0 2
30553: PUSH
30554: LD_INT 1
30556: PLUS
30557: PPUSH
30558: LD_VAR 0 7
30562: PPUSH
30563: CALL_OW 2
30567: ST_TO_ADDR
30568: GO 30536
30570: POP
30571: POP
// end ;
30572: GO 30502
30574: POP
30575: POP
// if not result then
30576: LD_VAR 0 2
30580: NOT
30581: IFFALSE 30585
// exit ;
30583: GO 30733
// mech := result [ 1 ] ;
30585: LD_ADDR_VAR 0 5
30589: PUSH
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: ST_TO_ADDR
// if result > 1 then
30599: LD_VAR 0 2
30603: PUSH
30604: LD_INT 1
30606: GREATER
30607: IFFALSE 30719
// for i = 2 to result do
30609: LD_ADDR_VAR 0 3
30613: PUSH
30614: DOUBLE
30615: LD_INT 2
30617: DEC
30618: ST_TO_ADDR
30619: LD_VAR 0 2
30623: PUSH
30624: FOR_TO
30625: IFFALSE 30717
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30627: LD_ADDR_VAR 0 4
30631: PUSH
30632: LD_VAR 0 2
30636: PUSH
30637: LD_VAR 0 3
30641: ARRAY
30642: PPUSH
30643: LD_INT 3
30645: PPUSH
30646: CALL_OW 259
30650: PUSH
30651: LD_VAR 0 2
30655: PUSH
30656: LD_VAR 0 3
30660: ARRAY
30661: PPUSH
30662: CALL_OW 432
30666: MINUS
30667: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30668: LD_VAR 0 4
30672: PUSH
30673: LD_VAR 0 5
30677: PPUSH
30678: LD_INT 3
30680: PPUSH
30681: CALL_OW 259
30685: PUSH
30686: LD_VAR 0 5
30690: PPUSH
30691: CALL_OW 432
30695: MINUS
30696: GREATEREQUAL
30697: IFFALSE 30715
// mech := result [ i ] ;
30699: LD_ADDR_VAR 0 5
30703: PUSH
30704: LD_VAR 0 2
30708: PUSH
30709: LD_VAR 0 3
30713: ARRAY
30714: ST_TO_ADDR
// end ;
30715: GO 30624
30717: POP
30718: POP
// ComLinkTo ( vehicle , mech ) ;
30719: LD_VAR 0 1
30723: PPUSH
30724: LD_VAR 0 5
30728: PPUSH
30729: CALL_OW 135
// end ;
30733: LD_VAR 0 2
30737: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30738: LD_INT 0
30740: PPUSH
30741: PPUSH
30742: PPUSH
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
30752: PPUSH
// result := [ ] ;
30753: LD_ADDR_VAR 0 7
30757: PUSH
30758: EMPTY
30759: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30760: LD_VAR 0 1
30764: PPUSH
30765: CALL_OW 266
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: IN
30780: NOT
30781: IFFALSE 30785
// exit ;
30783: GO 32419
// if name then
30785: LD_VAR 0 3
30789: IFFALSE 30805
// SetBName ( base_dep , name ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_VAR 0 3
30800: PPUSH
30801: CALL_OW 500
// base := GetBase ( base_dep ) ;
30805: LD_ADDR_VAR 0 15
30809: PUSH
30810: LD_VAR 0 1
30814: PPUSH
30815: CALL_OW 274
30819: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30820: LD_ADDR_VAR 0 16
30824: PUSH
30825: LD_VAR 0 1
30829: PPUSH
30830: CALL_OW 255
30834: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30835: LD_ADDR_VAR 0 17
30839: PUSH
30840: LD_VAR 0 1
30844: PPUSH
30845: CALL_OW 248
30849: ST_TO_ADDR
// if sources then
30850: LD_VAR 0 5
30854: IFFALSE 30901
// for i = 1 to 3 do
30856: LD_ADDR_VAR 0 8
30860: PUSH
30861: DOUBLE
30862: LD_INT 1
30864: DEC
30865: ST_TO_ADDR
30866: LD_INT 3
30868: PUSH
30869: FOR_TO
30870: IFFALSE 30899
// AddResourceType ( base , i , sources [ i ] ) ;
30872: LD_VAR 0 15
30876: PPUSH
30877: LD_VAR 0 8
30881: PPUSH
30882: LD_VAR 0 5
30886: PUSH
30887: LD_VAR 0 8
30891: ARRAY
30892: PPUSH
30893: CALL_OW 276
30897: GO 30869
30899: POP
30900: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30901: LD_ADDR_VAR 0 18
30905: PUSH
30906: LD_VAR 0 15
30910: PPUSH
30911: LD_VAR 0 2
30915: PPUSH
30916: LD_INT 1
30918: PPUSH
30919: CALL 30161 0 3
30923: ST_TO_ADDR
// InitHc ;
30924: CALL_OW 19
// InitUc ;
30928: CALL_OW 18
// uc_side := side ;
30932: LD_ADDR_OWVAR 20
30936: PUSH
30937: LD_VAR 0 16
30941: ST_TO_ADDR
// uc_nation := nation ;
30942: LD_ADDR_OWVAR 21
30946: PUSH
30947: LD_VAR 0 17
30951: ST_TO_ADDR
// if buildings then
30952: LD_VAR 0 18
30956: IFFALSE 32278
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30958: LD_ADDR_VAR 0 19
30962: PUSH
30963: LD_VAR 0 18
30967: PPUSH
30968: LD_INT 2
30970: PUSH
30971: LD_INT 30
30973: PUSH
30974: LD_INT 29
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 30
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: LIST
30995: PPUSH
30996: CALL_OW 72
31000: ST_TO_ADDR
// if tmp then
31001: LD_VAR 0 19
31005: IFFALSE 31053
// for i in tmp do
31007: LD_ADDR_VAR 0 8
31011: PUSH
31012: LD_VAR 0 19
31016: PUSH
31017: FOR_IN
31018: IFFALSE 31051
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31020: LD_VAR 0 8
31024: PPUSH
31025: CALL_OW 250
31029: PPUSH
31030: LD_VAR 0 8
31034: PPUSH
31035: CALL_OW 251
31039: PPUSH
31040: LD_VAR 0 16
31044: PPUSH
31045: CALL_OW 441
31049: GO 31017
31051: POP
31052: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31053: LD_VAR 0 18
31057: PPUSH
31058: LD_INT 2
31060: PUSH
31061: LD_INT 30
31063: PUSH
31064: LD_INT 32
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 30
31073: PUSH
31074: LD_INT 33
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: PPUSH
31086: CALL_OW 72
31090: IFFALSE 31178
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31092: LD_ADDR_VAR 0 8
31096: PUSH
31097: LD_VAR 0 18
31101: PPUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 30
31107: PUSH
31108: LD_INT 32
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 30
31117: PUSH
31118: LD_INT 33
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: PPUSH
31130: CALL_OW 72
31134: PUSH
31135: FOR_IN
31136: IFFALSE 31176
// begin if not GetBWeapon ( i ) then
31138: LD_VAR 0 8
31142: PPUSH
31143: CALL_OW 269
31147: NOT
31148: IFFALSE 31174
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31150: LD_VAR 0 8
31154: PPUSH
31155: LD_VAR 0 8
31159: PPUSH
31160: LD_VAR 0 2
31164: PPUSH
31165: CALL 32424 0 2
31169: PPUSH
31170: CALL_OW 431
// end ;
31174: GO 31135
31176: POP
31177: POP
// end ; for i = 1 to personel do
31178: LD_ADDR_VAR 0 8
31182: PUSH
31183: DOUBLE
31184: LD_INT 1
31186: DEC
31187: ST_TO_ADDR
31188: LD_VAR 0 6
31192: PUSH
31193: FOR_TO
31194: IFFALSE 32258
// begin if i > 4 then
31196: LD_VAR 0 8
31200: PUSH
31201: LD_INT 4
31203: GREATER
31204: IFFALSE 31208
// break ;
31206: GO 32258
// case i of 1 :
31208: LD_VAR 0 8
31212: PUSH
31213: LD_INT 1
31215: DOUBLE
31216: EQUAL
31217: IFTRUE 31221
31219: GO 31301
31221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31222: LD_ADDR_VAR 0 12
31226: PUSH
31227: LD_VAR 0 18
31231: PPUSH
31232: LD_INT 22
31234: PUSH
31235: LD_VAR 0 16
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 58
31246: PUSH
31247: EMPTY
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 30
31255: PUSH
31256: LD_INT 32
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 30
31265: PUSH
31266: LD_INT 4
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 30
31275: PUSH
31276: LD_INT 5
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: PPUSH
31294: CALL_OW 72
31298: ST_TO_ADDR
31299: GO 31523
31301: LD_INT 2
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31371
31309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31310: LD_ADDR_VAR 0 12
31314: PUSH
31315: LD_VAR 0 18
31319: PPUSH
31320: LD_INT 22
31322: PUSH
31323: LD_VAR 0 16
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: LD_INT 30
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 30
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PPUSH
31364: CALL_OW 72
31368: ST_TO_ADDR
31369: GO 31523
31371: LD_INT 3
31373: DOUBLE
31374: EQUAL
31375: IFTRUE 31379
31377: GO 31441
31379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31380: LD_ADDR_VAR 0 12
31384: PUSH
31385: LD_VAR 0 18
31389: PPUSH
31390: LD_INT 22
31392: PUSH
31393: LD_VAR 0 16
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: LD_INT 30
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 30
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PPUSH
31434: CALL_OW 72
31438: ST_TO_ADDR
31439: GO 31523
31441: LD_INT 4
31443: DOUBLE
31444: EQUAL
31445: IFTRUE 31449
31447: GO 31522
31449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31450: LD_ADDR_VAR 0 12
31454: PUSH
31455: LD_VAR 0 18
31459: PPUSH
31460: LD_INT 22
31462: PUSH
31463: LD_VAR 0 16
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 30
31477: PUSH
31478: LD_INT 6
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 30
31487: PUSH
31488: LD_INT 7
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 30
31497: PUSH
31498: LD_INT 8
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PPUSH
31515: CALL_OW 72
31519: ST_TO_ADDR
31520: GO 31523
31522: POP
// if i = 1 then
31523: LD_VAR 0 8
31527: PUSH
31528: LD_INT 1
31530: EQUAL
31531: IFFALSE 31642
// begin tmp := [ ] ;
31533: LD_ADDR_VAR 0 19
31537: PUSH
31538: EMPTY
31539: ST_TO_ADDR
// for j in f do
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: LD_VAR 0 12
31549: PUSH
31550: FOR_IN
31551: IFFALSE 31624
// if GetBType ( j ) = b_bunker then
31553: LD_VAR 0 9
31557: PPUSH
31558: CALL_OW 266
31562: PUSH
31563: LD_INT 32
31565: EQUAL
31566: IFFALSE 31593
// tmp := Insert ( tmp , 1 , j ) else
31568: LD_ADDR_VAR 0 19
31572: PUSH
31573: LD_VAR 0 19
31577: PPUSH
31578: LD_INT 1
31580: PPUSH
31581: LD_VAR 0 9
31585: PPUSH
31586: CALL_OW 2
31590: ST_TO_ADDR
31591: GO 31622
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31593: LD_ADDR_VAR 0 19
31597: PUSH
31598: LD_VAR 0 19
31602: PPUSH
31603: LD_VAR 0 19
31607: PUSH
31608: LD_INT 1
31610: PLUS
31611: PPUSH
31612: LD_VAR 0 9
31616: PPUSH
31617: CALL_OW 2
31621: ST_TO_ADDR
31622: GO 31550
31624: POP
31625: POP
// if tmp then
31626: LD_VAR 0 19
31630: IFFALSE 31642
// f := tmp ;
31632: LD_ADDR_VAR 0 12
31636: PUSH
31637: LD_VAR 0 19
31641: ST_TO_ADDR
// end ; x := personel [ i ] ;
31642: LD_ADDR_VAR 0 13
31646: PUSH
31647: LD_VAR 0 6
31651: PUSH
31652: LD_VAR 0 8
31656: ARRAY
31657: ST_TO_ADDR
// if x = - 1 then
31658: LD_VAR 0 13
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: EQUAL
31667: IFFALSE 31876
// begin for j in f do
31669: LD_ADDR_VAR 0 9
31673: PUSH
31674: LD_VAR 0 12
31678: PUSH
31679: FOR_IN
31680: IFFALSE 31872
// repeat InitHc ;
31682: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31686: LD_VAR 0 9
31690: PPUSH
31691: CALL_OW 266
31695: PUSH
31696: LD_INT 5
31698: EQUAL
31699: IFFALSE 31769
// begin if UnitsInside ( j ) < 3 then
31701: LD_VAR 0 9
31705: PPUSH
31706: CALL_OW 313
31710: PUSH
31711: LD_INT 3
31713: LESS
31714: IFFALSE 31750
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31716: LD_INT 0
31718: PPUSH
31719: LD_INT 5
31721: PUSH
31722: LD_INT 8
31724: PUSH
31725: LD_INT 9
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: PUSH
31733: LD_VAR 0 17
31737: ARRAY
31738: PPUSH
31739: LD_VAR 0 4
31743: PPUSH
31744: CALL_OW 380
31748: GO 31767
// PrepareHuman ( false , i , skill ) ;
31750: LD_INT 0
31752: PPUSH
31753: LD_VAR 0 8
31757: PPUSH
31758: LD_VAR 0 4
31762: PPUSH
31763: CALL_OW 380
// end else
31767: GO 31786
// PrepareHuman ( false , i , skill ) ;
31769: LD_INT 0
31771: PPUSH
31772: LD_VAR 0 8
31776: PPUSH
31777: LD_VAR 0 4
31781: PPUSH
31782: CALL_OW 380
// un := CreateHuman ;
31786: LD_ADDR_VAR 0 14
31790: PUSH
31791: CALL_OW 44
31795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31796: LD_ADDR_VAR 0 7
31800: PUSH
31801: LD_VAR 0 7
31805: PPUSH
31806: LD_INT 1
31808: PPUSH
31809: LD_VAR 0 14
31813: PPUSH
31814: CALL_OW 2
31818: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31819: LD_VAR 0 14
31823: PPUSH
31824: LD_VAR 0 9
31828: PPUSH
31829: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31833: LD_VAR 0 9
31837: PPUSH
31838: CALL_OW 313
31842: PUSH
31843: LD_INT 6
31845: EQUAL
31846: PUSH
31847: LD_VAR 0 9
31851: PPUSH
31852: CALL_OW 266
31856: PUSH
31857: LD_INT 32
31859: PUSH
31860: LD_INT 31
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: IN
31867: OR
31868: IFFALSE 31682
31870: GO 31679
31872: POP
31873: POP
// end else
31874: GO 32256
// for j = 1 to x do
31876: LD_ADDR_VAR 0 9
31880: PUSH
31881: DOUBLE
31882: LD_INT 1
31884: DEC
31885: ST_TO_ADDR
31886: LD_VAR 0 13
31890: PUSH
31891: FOR_TO
31892: IFFALSE 32254
// begin InitHc ;
31894: CALL_OW 19
// if not f then
31898: LD_VAR 0 12
31902: NOT
31903: IFFALSE 31992
// begin PrepareHuman ( false , i , skill ) ;
31905: LD_INT 0
31907: PPUSH
31908: LD_VAR 0 8
31912: PPUSH
31913: LD_VAR 0 4
31917: PPUSH
31918: CALL_OW 380
// un := CreateHuman ;
31922: LD_ADDR_VAR 0 14
31926: PUSH
31927: CALL_OW 44
31931: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31932: LD_ADDR_VAR 0 7
31936: PUSH
31937: LD_VAR 0 7
31941: PPUSH
31942: LD_INT 1
31944: PPUSH
31945: LD_VAR 0 14
31949: PPUSH
31950: CALL_OW 2
31954: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31955: LD_VAR 0 14
31959: PPUSH
31960: LD_VAR 0 1
31964: PPUSH
31965: CALL_OW 250
31969: PPUSH
31970: LD_VAR 0 1
31974: PPUSH
31975: CALL_OW 251
31979: PPUSH
31980: LD_INT 10
31982: PPUSH
31983: LD_INT 0
31985: PPUSH
31986: CALL_OW 50
// continue ;
31990: GO 31891
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31992: LD_VAR 0 12
31996: PUSH
31997: LD_INT 1
31999: ARRAY
32000: PPUSH
32001: CALL_OW 313
32005: PUSH
32006: LD_VAR 0 12
32010: PUSH
32011: LD_INT 1
32013: ARRAY
32014: PPUSH
32015: CALL_OW 266
32019: PUSH
32020: LD_INT 32
32022: PUSH
32023: LD_INT 31
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: IN
32030: AND
32031: PUSH
32032: LD_VAR 0 12
32036: PUSH
32037: LD_INT 1
32039: ARRAY
32040: PPUSH
32041: CALL_OW 313
32045: PUSH
32046: LD_INT 6
32048: EQUAL
32049: OR
32050: IFFALSE 32070
// f := Delete ( f , 1 ) ;
32052: LD_ADDR_VAR 0 12
32056: PUSH
32057: LD_VAR 0 12
32061: PPUSH
32062: LD_INT 1
32064: PPUSH
32065: CALL_OW 3
32069: ST_TO_ADDR
// if not f then
32070: LD_VAR 0 12
32074: NOT
32075: IFFALSE 32093
// begin x := x + 2 ;
32077: LD_ADDR_VAR 0 13
32081: PUSH
32082: LD_VAR 0 13
32086: PUSH
32087: LD_INT 2
32089: PLUS
32090: ST_TO_ADDR
// continue ;
32091: GO 31891
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32093: LD_VAR 0 12
32097: PUSH
32098: LD_INT 1
32100: ARRAY
32101: PPUSH
32102: CALL_OW 266
32106: PUSH
32107: LD_INT 5
32109: EQUAL
32110: IFFALSE 32184
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32112: LD_VAR 0 12
32116: PUSH
32117: LD_INT 1
32119: ARRAY
32120: PPUSH
32121: CALL_OW 313
32125: PUSH
32126: LD_INT 3
32128: LESS
32129: IFFALSE 32165
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32131: LD_INT 0
32133: PPUSH
32134: LD_INT 5
32136: PUSH
32137: LD_INT 8
32139: PUSH
32140: LD_INT 9
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: PUSH
32148: LD_VAR 0 17
32152: ARRAY
32153: PPUSH
32154: LD_VAR 0 4
32158: PPUSH
32159: CALL_OW 380
32163: GO 32182
// PrepareHuman ( false , i , skill ) ;
32165: LD_INT 0
32167: PPUSH
32168: LD_VAR 0 8
32172: PPUSH
32173: LD_VAR 0 4
32177: PPUSH
32178: CALL_OW 380
// end else
32182: GO 32201
// PrepareHuman ( false , i , skill ) ;
32184: LD_INT 0
32186: PPUSH
32187: LD_VAR 0 8
32191: PPUSH
32192: LD_VAR 0 4
32196: PPUSH
32197: CALL_OW 380
// un := CreateHuman ;
32201: LD_ADDR_VAR 0 14
32205: PUSH
32206: CALL_OW 44
32210: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32211: LD_ADDR_VAR 0 7
32215: PUSH
32216: LD_VAR 0 7
32220: PPUSH
32221: LD_INT 1
32223: PPUSH
32224: LD_VAR 0 14
32228: PPUSH
32229: CALL_OW 2
32233: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32234: LD_VAR 0 14
32238: PPUSH
32239: LD_VAR 0 12
32243: PUSH
32244: LD_INT 1
32246: ARRAY
32247: PPUSH
32248: CALL_OW 52
// end ;
32252: GO 31891
32254: POP
32255: POP
// end ;
32256: GO 31193
32258: POP
32259: POP
// result := result ^ buildings ;
32260: LD_ADDR_VAR 0 7
32264: PUSH
32265: LD_VAR 0 7
32269: PUSH
32270: LD_VAR 0 18
32274: ADD
32275: ST_TO_ADDR
// end else
32276: GO 32419
// begin for i = 1 to personel do
32278: LD_ADDR_VAR 0 8
32282: PUSH
32283: DOUBLE
32284: LD_INT 1
32286: DEC
32287: ST_TO_ADDR
32288: LD_VAR 0 6
32292: PUSH
32293: FOR_TO
32294: IFFALSE 32417
// begin if i > 4 then
32296: LD_VAR 0 8
32300: PUSH
32301: LD_INT 4
32303: GREATER
32304: IFFALSE 32308
// break ;
32306: GO 32417
// x := personel [ i ] ;
32308: LD_ADDR_VAR 0 13
32312: PUSH
32313: LD_VAR 0 6
32317: PUSH
32318: LD_VAR 0 8
32322: ARRAY
32323: ST_TO_ADDR
// if x = - 1 then
32324: LD_VAR 0 13
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: EQUAL
32333: IFFALSE 32337
// continue ;
32335: GO 32293
// PrepareHuman ( false , i , skill ) ;
32337: LD_INT 0
32339: PPUSH
32340: LD_VAR 0 8
32344: PPUSH
32345: LD_VAR 0 4
32349: PPUSH
32350: CALL_OW 380
// un := CreateHuman ;
32354: LD_ADDR_VAR 0 14
32358: PUSH
32359: CALL_OW 44
32363: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32364: LD_VAR 0 14
32368: PPUSH
32369: LD_VAR 0 1
32373: PPUSH
32374: CALL_OW 250
32378: PPUSH
32379: LD_VAR 0 1
32383: PPUSH
32384: CALL_OW 251
32388: PPUSH
32389: LD_INT 10
32391: PPUSH
32392: LD_INT 0
32394: PPUSH
32395: CALL_OW 50
// result := result ^ un ;
32399: LD_ADDR_VAR 0 7
32403: PUSH
32404: LD_VAR 0 7
32408: PUSH
32409: LD_VAR 0 14
32413: ADD
32414: ST_TO_ADDR
// end ;
32415: GO 32293
32417: POP
32418: POP
// end ; end ;
32419: LD_VAR 0 7
32423: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32424: LD_INT 0
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
32430: PPUSH
32431: PPUSH
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
32441: PPUSH
// result := false ;
32442: LD_ADDR_VAR 0 3
32446: PUSH
32447: LD_INT 0
32449: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32450: LD_VAR 0 1
32454: NOT
32455: PUSH
32456: LD_VAR 0 1
32460: PPUSH
32461: CALL_OW 266
32465: PUSH
32466: LD_INT 32
32468: PUSH
32469: LD_INT 33
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: IN
32476: NOT
32477: OR
32478: IFFALSE 32482
// exit ;
32480: GO 33621
// nat := GetNation ( tower ) ;
32482: LD_ADDR_VAR 0 12
32486: PUSH
32487: LD_VAR 0 1
32491: PPUSH
32492: CALL_OW 248
32496: ST_TO_ADDR
// side := GetSide ( tower ) ;
32497: LD_ADDR_VAR 0 16
32501: PUSH
32502: LD_VAR 0 1
32506: PPUSH
32507: CALL_OW 255
32511: ST_TO_ADDR
// x := GetX ( tower ) ;
32512: LD_ADDR_VAR 0 10
32516: PUSH
32517: LD_VAR 0 1
32521: PPUSH
32522: CALL_OW 250
32526: ST_TO_ADDR
// y := GetY ( tower ) ;
32527: LD_ADDR_VAR 0 11
32531: PUSH
32532: LD_VAR 0 1
32536: PPUSH
32537: CALL_OW 251
32541: ST_TO_ADDR
// if not x or not y then
32542: LD_VAR 0 10
32546: NOT
32547: PUSH
32548: LD_VAR 0 11
32552: NOT
32553: OR
32554: IFFALSE 32558
// exit ;
32556: GO 33621
// weapon := 0 ;
32558: LD_ADDR_VAR 0 18
32562: PUSH
32563: LD_INT 0
32565: ST_TO_ADDR
// fac_list := [ ] ;
32566: LD_ADDR_VAR 0 17
32570: PUSH
32571: EMPTY
32572: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32573: LD_ADDR_VAR 0 6
32577: PUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 274
32587: PPUSH
32588: LD_VAR 0 2
32592: PPUSH
32593: LD_INT 0
32595: PPUSH
32596: CALL 30161 0 3
32600: PPUSH
32601: LD_INT 30
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PPUSH
32611: CALL_OW 72
32615: ST_TO_ADDR
// if not factories then
32616: LD_VAR 0 6
32620: NOT
32621: IFFALSE 32625
// exit ;
32623: GO 33621
// for i in factories do
32625: LD_ADDR_VAR 0 8
32629: PUSH
32630: LD_VAR 0 6
32634: PUSH
32635: FOR_IN
32636: IFFALSE 32661
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32638: LD_ADDR_VAR 0 17
32642: PUSH
32643: LD_VAR 0 17
32647: PUSH
32648: LD_VAR 0 8
32652: PPUSH
32653: CALL_OW 478
32657: UNION
32658: ST_TO_ADDR
32659: GO 32635
32661: POP
32662: POP
// if not fac_list then
32663: LD_VAR 0 17
32667: NOT
32668: IFFALSE 32672
// exit ;
32670: GO 33621
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32672: LD_ADDR_VAR 0 5
32676: PUSH
32677: LD_INT 4
32679: PUSH
32680: LD_INT 5
32682: PUSH
32683: LD_INT 9
32685: PUSH
32686: LD_INT 10
32688: PUSH
32689: LD_INT 6
32691: PUSH
32692: LD_INT 7
32694: PUSH
32695: LD_INT 11
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 27
32709: PUSH
32710: LD_INT 28
32712: PUSH
32713: LD_INT 26
32715: PUSH
32716: LD_INT 30
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 43
32727: PUSH
32728: LD_INT 44
32730: PUSH
32731: LD_INT 46
32733: PUSH
32734: LD_INT 45
32736: PUSH
32737: LD_INT 47
32739: PUSH
32740: LD_INT 49
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: LIST
32755: PUSH
32756: LD_VAR 0 12
32760: ARRAY
32761: ST_TO_ADDR
// for i in list do
32762: LD_ADDR_VAR 0 8
32766: PUSH
32767: LD_VAR 0 5
32771: PUSH
32772: FOR_IN
32773: IFFALSE 32806
// if not i in fac_list then
32775: LD_VAR 0 8
32779: PUSH
32780: LD_VAR 0 17
32784: IN
32785: NOT
32786: IFFALSE 32804
// list := list diff i ;
32788: LD_ADDR_VAR 0 5
32792: PUSH
32793: LD_VAR 0 5
32797: PUSH
32798: LD_VAR 0 8
32802: DIFF
32803: ST_TO_ADDR
32804: GO 32772
32806: POP
32807: POP
// if not list then
32808: LD_VAR 0 5
32812: NOT
32813: IFFALSE 32817
// exit ;
32815: GO 33621
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32817: LD_VAR 0 12
32821: PUSH
32822: LD_INT 3
32824: EQUAL
32825: PUSH
32826: LD_INT 49
32828: PUSH
32829: LD_VAR 0 5
32833: IN
32834: AND
32835: PUSH
32836: LD_INT 31
32838: PPUSH
32839: LD_VAR 0 16
32843: PPUSH
32844: CALL_OW 321
32848: PUSH
32849: LD_INT 2
32851: EQUAL
32852: AND
32853: IFFALSE 32913
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32855: LD_INT 22
32857: PUSH
32858: LD_VAR 0 16
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 35
32869: PUSH
32870: LD_INT 49
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 91
32879: PUSH
32880: LD_VAR 0 1
32884: PUSH
32885: LD_INT 10
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: PPUSH
32898: CALL_OW 69
32902: NOT
32903: IFFALSE 32913
// weapon := ru_time_lapser ;
32905: LD_ADDR_VAR 0 18
32909: PUSH
32910: LD_INT 49
32912: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32913: LD_VAR 0 12
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: IN
32928: PUSH
32929: LD_INT 11
32931: PUSH
32932: LD_VAR 0 5
32936: IN
32937: PUSH
32938: LD_INT 30
32940: PUSH
32941: LD_VAR 0 5
32945: IN
32946: OR
32947: AND
32948: PUSH
32949: LD_INT 6
32951: PPUSH
32952: LD_VAR 0 16
32956: PPUSH
32957: CALL_OW 321
32961: PUSH
32962: LD_INT 2
32964: EQUAL
32965: AND
32966: IFFALSE 33131
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32968: LD_INT 22
32970: PUSH
32971: LD_VAR 0 16
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 35
32985: PUSH
32986: LD_INT 11
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 35
32995: PUSH
32996: LD_INT 30
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 91
33010: PUSH
33011: LD_VAR 0 1
33015: PUSH
33016: LD_INT 18
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: PPUSH
33029: CALL_OW 69
33033: NOT
33034: PUSH
33035: LD_INT 22
33037: PUSH
33038: LD_VAR 0 16
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: LD_INT 30
33052: PUSH
33053: LD_INT 32
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 30
33062: PUSH
33063: LD_INT 33
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 91
33077: PUSH
33078: LD_VAR 0 1
33082: PUSH
33083: LD_INT 12
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: PPUSH
33099: CALL_OW 69
33103: PUSH
33104: LD_INT 2
33106: GREATER
33107: AND
33108: IFFALSE 33131
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33110: LD_ADDR_VAR 0 18
33114: PUSH
33115: LD_INT 11
33117: PUSH
33118: LD_INT 30
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_VAR 0 12
33129: ARRAY
33130: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33131: LD_VAR 0 18
33135: NOT
33136: PUSH
33137: LD_INT 40
33139: PPUSH
33140: LD_VAR 0 16
33144: PPUSH
33145: CALL_OW 321
33149: PUSH
33150: LD_INT 2
33152: EQUAL
33153: AND
33154: PUSH
33155: LD_INT 7
33157: PUSH
33158: LD_VAR 0 5
33162: IN
33163: PUSH
33164: LD_INT 28
33166: PUSH
33167: LD_VAR 0 5
33171: IN
33172: OR
33173: PUSH
33174: LD_INT 45
33176: PUSH
33177: LD_VAR 0 5
33181: IN
33182: OR
33183: AND
33184: IFFALSE 33438
// begin hex := GetHexInfo ( x , y ) ;
33186: LD_ADDR_VAR 0 4
33190: PUSH
33191: LD_VAR 0 10
33195: PPUSH
33196: LD_VAR 0 11
33200: PPUSH
33201: CALL_OW 546
33205: ST_TO_ADDR
// if hex [ 1 ] then
33206: LD_VAR 0 4
33210: PUSH
33211: LD_INT 1
33213: ARRAY
33214: IFFALSE 33218
// exit ;
33216: GO 33621
// height := hex [ 2 ] ;
33218: LD_ADDR_VAR 0 15
33222: PUSH
33223: LD_VAR 0 4
33227: PUSH
33228: LD_INT 2
33230: ARRAY
33231: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33232: LD_ADDR_VAR 0 14
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 3
33245: PUSH
33246: LD_INT 5
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
// for i in tmp do
33255: LD_ADDR_VAR 0 8
33259: PUSH
33260: LD_VAR 0 14
33264: PUSH
33265: FOR_IN
33266: IFFALSE 33436
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33268: LD_ADDR_VAR 0 9
33272: PUSH
33273: LD_VAR 0 10
33277: PPUSH
33278: LD_VAR 0 8
33282: PPUSH
33283: LD_INT 5
33285: PPUSH
33286: CALL_OW 272
33290: PUSH
33291: LD_VAR 0 11
33295: PPUSH
33296: LD_VAR 0 8
33300: PPUSH
33301: LD_INT 5
33303: PPUSH
33304: CALL_OW 273
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33313: LD_VAR 0 9
33317: PUSH
33318: LD_INT 1
33320: ARRAY
33321: PPUSH
33322: LD_VAR 0 9
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: PPUSH
33331: CALL_OW 488
33335: IFFALSE 33434
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33337: LD_ADDR_VAR 0 4
33341: PUSH
33342: LD_VAR 0 9
33346: PUSH
33347: LD_INT 1
33349: ARRAY
33350: PPUSH
33351: LD_VAR 0 9
33355: PUSH
33356: LD_INT 2
33358: ARRAY
33359: PPUSH
33360: CALL_OW 546
33364: ST_TO_ADDR
// if hex [ 1 ] then
33365: LD_VAR 0 4
33369: PUSH
33370: LD_INT 1
33372: ARRAY
33373: IFFALSE 33377
// continue ;
33375: GO 33265
// h := hex [ 2 ] ;
33377: LD_ADDR_VAR 0 13
33381: PUSH
33382: LD_VAR 0 4
33386: PUSH
33387: LD_INT 2
33389: ARRAY
33390: ST_TO_ADDR
// if h + 7 < height then
33391: LD_VAR 0 13
33395: PUSH
33396: LD_INT 7
33398: PLUS
33399: PUSH
33400: LD_VAR 0 15
33404: LESS
33405: IFFALSE 33434
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33407: LD_ADDR_VAR 0 18
33411: PUSH
33412: LD_INT 7
33414: PUSH
33415: LD_INT 28
33417: PUSH
33418: LD_INT 45
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: PUSH
33426: LD_VAR 0 12
33430: ARRAY
33431: ST_TO_ADDR
// break ;
33432: GO 33436
// end ; end ; end ;
33434: GO 33265
33436: POP
33437: POP
// end ; if not weapon then
33438: LD_VAR 0 18
33442: NOT
33443: IFFALSE 33503
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33445: LD_ADDR_VAR 0 5
33449: PUSH
33450: LD_VAR 0 5
33454: PUSH
33455: LD_INT 11
33457: PUSH
33458: LD_INT 30
33460: PUSH
33461: LD_INT 49
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: DIFF
33469: ST_TO_ADDR
// if not list then
33470: LD_VAR 0 5
33474: NOT
33475: IFFALSE 33479
// exit ;
33477: GO 33621
// weapon := list [ rand ( 1 , list ) ] ;
33479: LD_ADDR_VAR 0 18
33483: PUSH
33484: LD_VAR 0 5
33488: PUSH
33489: LD_INT 1
33491: PPUSH
33492: LD_VAR 0 5
33496: PPUSH
33497: CALL_OW 12
33501: ARRAY
33502: ST_TO_ADDR
// end ; if weapon then
33503: LD_VAR 0 18
33507: IFFALSE 33621
// begin tmp := CostOfWeapon ( weapon ) ;
33509: LD_ADDR_VAR 0 14
33513: PUSH
33514: LD_VAR 0 18
33518: PPUSH
33519: CALL_OW 451
33523: ST_TO_ADDR
// j := GetBase ( tower ) ;
33524: LD_ADDR_VAR 0 9
33528: PUSH
33529: LD_VAR 0 1
33533: PPUSH
33534: CALL_OW 274
33538: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33539: LD_VAR 0 9
33543: PPUSH
33544: LD_INT 1
33546: PPUSH
33547: CALL_OW 275
33551: PUSH
33552: LD_VAR 0 14
33556: PUSH
33557: LD_INT 1
33559: ARRAY
33560: GREATEREQUAL
33561: PUSH
33562: LD_VAR 0 9
33566: PPUSH
33567: LD_INT 2
33569: PPUSH
33570: CALL_OW 275
33574: PUSH
33575: LD_VAR 0 14
33579: PUSH
33580: LD_INT 2
33582: ARRAY
33583: GREATEREQUAL
33584: AND
33585: PUSH
33586: LD_VAR 0 9
33590: PPUSH
33591: LD_INT 3
33593: PPUSH
33594: CALL_OW 275
33598: PUSH
33599: LD_VAR 0 14
33603: PUSH
33604: LD_INT 3
33606: ARRAY
33607: GREATEREQUAL
33608: AND
33609: IFFALSE 33621
// result := weapon ;
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_VAR 0 18
33620: ST_TO_ADDR
// end ; end ;
33621: LD_VAR 0 3
33625: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33626: LD_INT 0
33628: PPUSH
33629: PPUSH
// result := true ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_INT 1
33637: ST_TO_ADDR
// if array1 = array2 then
33638: LD_VAR 0 1
33642: PUSH
33643: LD_VAR 0 2
33647: EQUAL
33648: IFFALSE 33708
// begin for i = 1 to array1 do
33650: LD_ADDR_VAR 0 4
33654: PUSH
33655: DOUBLE
33656: LD_INT 1
33658: DEC
33659: ST_TO_ADDR
33660: LD_VAR 0 1
33664: PUSH
33665: FOR_TO
33666: IFFALSE 33704
// if array1 [ i ] <> array2 [ i ] then
33668: LD_VAR 0 1
33672: PUSH
33673: LD_VAR 0 4
33677: ARRAY
33678: PUSH
33679: LD_VAR 0 2
33683: PUSH
33684: LD_VAR 0 4
33688: ARRAY
33689: NONEQUAL
33690: IFFALSE 33702
// begin result := false ;
33692: LD_ADDR_VAR 0 3
33696: PUSH
33697: LD_INT 0
33699: ST_TO_ADDR
// break ;
33700: GO 33704
// end ;
33702: GO 33665
33704: POP
33705: POP
// end else
33706: GO 33716
// result := false ;
33708: LD_ADDR_VAR 0 3
33712: PUSH
33713: LD_INT 0
33715: ST_TO_ADDR
// end ;
33716: LD_VAR 0 3
33720: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33721: LD_INT 0
33723: PPUSH
33724: PPUSH
// if not array1 or not array2 then
33725: LD_VAR 0 1
33729: NOT
33730: PUSH
33731: LD_VAR 0 2
33735: NOT
33736: OR
33737: IFFALSE 33741
// exit ;
33739: GO 33805
// result := true ;
33741: LD_ADDR_VAR 0 3
33745: PUSH
33746: LD_INT 1
33748: ST_TO_ADDR
// for i = 1 to array1 do
33749: LD_ADDR_VAR 0 4
33753: PUSH
33754: DOUBLE
33755: LD_INT 1
33757: DEC
33758: ST_TO_ADDR
33759: LD_VAR 0 1
33763: PUSH
33764: FOR_TO
33765: IFFALSE 33803
// if array1 [ i ] <> array2 [ i ] then
33767: LD_VAR 0 1
33771: PUSH
33772: LD_VAR 0 4
33776: ARRAY
33777: PUSH
33778: LD_VAR 0 2
33782: PUSH
33783: LD_VAR 0 4
33787: ARRAY
33788: NONEQUAL
33789: IFFALSE 33801
// begin result := false ;
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 0
33798: ST_TO_ADDR
// break ;
33799: GO 33803
// end ;
33801: GO 33764
33803: POP
33804: POP
// end ;
33805: LD_VAR 0 3
33809: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33810: LD_INT 0
33812: PPUSH
33813: PPUSH
33814: PPUSH
// pom := GetBase ( fac ) ;
33815: LD_ADDR_VAR 0 5
33819: PUSH
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 274
33829: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33830: LD_ADDR_VAR 0 4
33834: PUSH
33835: LD_VAR 0 2
33839: PUSH
33840: LD_INT 1
33842: ARRAY
33843: PPUSH
33844: LD_VAR 0 2
33848: PUSH
33849: LD_INT 2
33851: ARRAY
33852: PPUSH
33853: LD_VAR 0 2
33857: PUSH
33858: LD_INT 3
33860: ARRAY
33861: PPUSH
33862: LD_VAR 0 2
33866: PUSH
33867: LD_INT 4
33869: ARRAY
33870: PPUSH
33871: CALL_OW 449
33875: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33876: LD_ADDR_VAR 0 3
33880: PUSH
33881: LD_VAR 0 5
33885: PPUSH
33886: LD_INT 1
33888: PPUSH
33889: CALL_OW 275
33893: PUSH
33894: LD_VAR 0 4
33898: PUSH
33899: LD_INT 1
33901: ARRAY
33902: GREATEREQUAL
33903: PUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: LD_INT 2
33911: PPUSH
33912: CALL_OW 275
33916: PUSH
33917: LD_VAR 0 4
33921: PUSH
33922: LD_INT 2
33924: ARRAY
33925: GREATEREQUAL
33926: AND
33927: PUSH
33928: LD_VAR 0 5
33932: PPUSH
33933: LD_INT 3
33935: PPUSH
33936: CALL_OW 275
33940: PUSH
33941: LD_VAR 0 4
33945: PUSH
33946: LD_INT 3
33948: ARRAY
33949: GREATEREQUAL
33950: AND
33951: ST_TO_ADDR
// end ;
33952: LD_VAR 0 3
33956: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
// pom := GetBase ( building ) ;
33963: LD_ADDR_VAR 0 3
33967: PUSH
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 274
33977: ST_TO_ADDR
// if not pom then
33978: LD_VAR 0 3
33982: NOT
33983: IFFALSE 33987
// exit ;
33985: GO 34157
// btype := GetBType ( building ) ;
33987: LD_ADDR_VAR 0 5
33991: PUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 266
34001: ST_TO_ADDR
// if btype = b_armoury then
34002: LD_VAR 0 5
34006: PUSH
34007: LD_INT 4
34009: EQUAL
34010: IFFALSE 34020
// btype := b_barracks ;
34012: LD_ADDR_VAR 0 5
34016: PUSH
34017: LD_INT 5
34019: ST_TO_ADDR
// if btype = b_depot then
34020: LD_VAR 0 5
34024: PUSH
34025: LD_INT 0
34027: EQUAL
34028: IFFALSE 34038
// btype := b_warehouse ;
34030: LD_ADDR_VAR 0 5
34034: PUSH
34035: LD_INT 1
34037: ST_TO_ADDR
// if btype = b_workshop then
34038: LD_VAR 0 5
34042: PUSH
34043: LD_INT 2
34045: EQUAL
34046: IFFALSE 34056
// btype := b_factory ;
34048: LD_ADDR_VAR 0 5
34052: PUSH
34053: LD_INT 3
34055: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34056: LD_ADDR_VAR 0 4
34060: PUSH
34061: LD_VAR 0 5
34065: PPUSH
34066: LD_VAR 0 1
34070: PPUSH
34071: CALL_OW 248
34075: PPUSH
34076: CALL_OW 450
34080: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34081: LD_ADDR_VAR 0 2
34085: PUSH
34086: LD_VAR 0 3
34090: PPUSH
34091: LD_INT 1
34093: PPUSH
34094: CALL_OW 275
34098: PUSH
34099: LD_VAR 0 4
34103: PUSH
34104: LD_INT 1
34106: ARRAY
34107: GREATEREQUAL
34108: PUSH
34109: LD_VAR 0 3
34113: PPUSH
34114: LD_INT 2
34116: PPUSH
34117: CALL_OW 275
34121: PUSH
34122: LD_VAR 0 4
34126: PUSH
34127: LD_INT 2
34129: ARRAY
34130: GREATEREQUAL
34131: AND
34132: PUSH
34133: LD_VAR 0 3
34137: PPUSH
34138: LD_INT 3
34140: PPUSH
34141: CALL_OW 275
34145: PUSH
34146: LD_VAR 0 4
34150: PUSH
34151: LD_INT 3
34153: ARRAY
34154: GREATEREQUAL
34155: AND
34156: ST_TO_ADDR
// end ;
34157: LD_VAR 0 2
34161: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34162: LD_INT 0
34164: PPUSH
34165: PPUSH
34166: PPUSH
// pom := GetBase ( building ) ;
34167: LD_ADDR_VAR 0 4
34171: PUSH
34172: LD_VAR 0 1
34176: PPUSH
34177: CALL_OW 274
34181: ST_TO_ADDR
// if not pom then
34182: LD_VAR 0 4
34186: NOT
34187: IFFALSE 34191
// exit ;
34189: GO 34292
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34191: LD_ADDR_VAR 0 5
34195: PUSH
34196: LD_VAR 0 2
34200: PPUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 248
34210: PPUSH
34211: CALL_OW 450
34215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_VAR 0 4
34225: PPUSH
34226: LD_INT 1
34228: PPUSH
34229: CALL_OW 275
34233: PUSH
34234: LD_VAR 0 5
34238: PUSH
34239: LD_INT 1
34241: ARRAY
34242: GREATEREQUAL
34243: PUSH
34244: LD_VAR 0 4
34248: PPUSH
34249: LD_INT 2
34251: PPUSH
34252: CALL_OW 275
34256: PUSH
34257: LD_VAR 0 5
34261: PUSH
34262: LD_INT 2
34264: ARRAY
34265: GREATEREQUAL
34266: AND
34267: PUSH
34268: LD_VAR 0 4
34272: PPUSH
34273: LD_INT 3
34275: PPUSH
34276: CALL_OW 275
34280: PUSH
34281: LD_VAR 0 5
34285: PUSH
34286: LD_INT 3
34288: ARRAY
34289: GREATEREQUAL
34290: AND
34291: ST_TO_ADDR
// end ;
34292: LD_VAR 0 3
34296: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34297: LD_INT 0
34299: PPUSH
34300: PPUSH
34301: PPUSH
34302: PPUSH
34303: PPUSH
34304: PPUSH
34305: PPUSH
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
// result := false ;
34310: LD_ADDR_VAR 0 8
34314: PUSH
34315: LD_INT 0
34317: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34318: LD_VAR 0 5
34322: NOT
34323: PUSH
34324: LD_VAR 0 1
34328: NOT
34329: OR
34330: PUSH
34331: LD_VAR 0 2
34335: NOT
34336: OR
34337: PUSH
34338: LD_VAR 0 3
34342: NOT
34343: OR
34344: IFFALSE 34348
// exit ;
34346: GO 35162
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34348: LD_ADDR_VAR 0 14
34352: PUSH
34353: LD_VAR 0 1
34357: PPUSH
34358: LD_VAR 0 2
34362: PPUSH
34363: LD_VAR 0 3
34367: PPUSH
34368: LD_VAR 0 4
34372: PPUSH
34373: LD_VAR 0 5
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: PPUSH
34382: CALL_OW 248
34386: PPUSH
34387: LD_INT 0
34389: PPUSH
34390: CALL 35999 0 6
34394: ST_TO_ADDR
// if not hexes then
34395: LD_VAR 0 14
34399: NOT
34400: IFFALSE 34404
// exit ;
34402: GO 35162
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34404: LD_ADDR_VAR 0 17
34408: PUSH
34409: LD_VAR 0 5
34413: PPUSH
34414: LD_INT 22
34416: PUSH
34417: LD_VAR 0 13
34421: PPUSH
34422: CALL_OW 255
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 30
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 30
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PPUSH
34463: CALL_OW 72
34467: ST_TO_ADDR
// for i = 1 to hexes do
34468: LD_ADDR_VAR 0 9
34472: PUSH
34473: DOUBLE
34474: LD_INT 1
34476: DEC
34477: ST_TO_ADDR
34478: LD_VAR 0 14
34482: PUSH
34483: FOR_TO
34484: IFFALSE 35160
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34486: LD_ADDR_VAR 0 13
34490: PUSH
34491: LD_VAR 0 14
34495: PUSH
34496: LD_VAR 0 9
34500: ARRAY
34501: PUSH
34502: LD_INT 1
34504: ARRAY
34505: PPUSH
34506: LD_VAR 0 14
34510: PUSH
34511: LD_VAR 0 9
34515: ARRAY
34516: PUSH
34517: LD_INT 2
34519: ARRAY
34520: PPUSH
34521: CALL_OW 428
34525: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34526: LD_VAR 0 14
34530: PUSH
34531: LD_VAR 0 9
34535: ARRAY
34536: PUSH
34537: LD_INT 1
34539: ARRAY
34540: PPUSH
34541: LD_VAR 0 14
34545: PUSH
34546: LD_VAR 0 9
34550: ARRAY
34551: PUSH
34552: LD_INT 2
34554: ARRAY
34555: PPUSH
34556: CALL_OW 351
34560: PUSH
34561: LD_VAR 0 14
34565: PUSH
34566: LD_VAR 0 9
34570: ARRAY
34571: PUSH
34572: LD_INT 1
34574: ARRAY
34575: PPUSH
34576: LD_VAR 0 14
34580: PUSH
34581: LD_VAR 0 9
34585: ARRAY
34586: PUSH
34587: LD_INT 2
34589: ARRAY
34590: PPUSH
34591: CALL_OW 488
34595: NOT
34596: OR
34597: PUSH
34598: LD_VAR 0 13
34602: PPUSH
34603: CALL_OW 247
34607: PUSH
34608: LD_INT 3
34610: EQUAL
34611: OR
34612: IFFALSE 34618
// exit ;
34614: POP
34615: POP
34616: GO 35162
// if not tmp then
34618: LD_VAR 0 13
34622: NOT
34623: IFFALSE 34627
// continue ;
34625: GO 34483
// result := true ;
34627: LD_ADDR_VAR 0 8
34631: PUSH
34632: LD_INT 1
34634: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34635: LD_VAR 0 6
34639: PUSH
34640: LD_VAR 0 13
34644: PPUSH
34645: CALL_OW 247
34649: PUSH
34650: LD_INT 2
34652: EQUAL
34653: AND
34654: PUSH
34655: LD_VAR 0 13
34659: PPUSH
34660: CALL_OW 263
34664: PUSH
34665: LD_INT 1
34667: EQUAL
34668: AND
34669: IFFALSE 34833
// begin if IsDrivenBy ( tmp ) then
34671: LD_VAR 0 13
34675: PPUSH
34676: CALL_OW 311
34680: IFFALSE 34684
// continue ;
34682: GO 34483
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34684: LD_VAR 0 6
34688: PPUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 60
34694: PUSH
34695: EMPTY
34696: LIST
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: LD_INT 55
34707: PUSH
34708: EMPTY
34709: LIST
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PPUSH
34719: CALL_OW 72
34723: IFFALSE 34831
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34725: LD_ADDR_VAR 0 18
34729: PUSH
34730: LD_VAR 0 6
34734: PPUSH
34735: LD_INT 3
34737: PUSH
34738: LD_INT 60
34740: PUSH
34741: EMPTY
34742: LIST
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 3
34750: PUSH
34751: LD_INT 55
34753: PUSH
34754: EMPTY
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PPUSH
34765: CALL_OW 72
34769: PUSH
34770: LD_INT 1
34772: ARRAY
34773: ST_TO_ADDR
// if IsInUnit ( driver ) then
34774: LD_VAR 0 18
34778: PPUSH
34779: CALL_OW 310
34783: IFFALSE 34794
// ComExit ( driver ) ;
34785: LD_VAR 0 18
34789: PPUSH
34790: CALL 59183 0 1
// AddComEnterUnit ( driver , tmp ) ;
34794: LD_VAR 0 18
34798: PPUSH
34799: LD_VAR 0 13
34803: PPUSH
34804: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34808: LD_VAR 0 18
34812: PPUSH
34813: LD_VAR 0 7
34817: PPUSH
34818: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34822: LD_VAR 0 18
34826: PPUSH
34827: CALL_OW 181
// end ; continue ;
34831: GO 34483
// end ; if not cleaners or not tmp in cleaners then
34833: LD_VAR 0 6
34837: NOT
34838: PUSH
34839: LD_VAR 0 13
34843: PUSH
34844: LD_VAR 0 6
34848: IN
34849: NOT
34850: OR
34851: IFFALSE 35158
// begin if dep then
34853: LD_VAR 0 17
34857: IFFALSE 34993
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34859: LD_ADDR_VAR 0 16
34863: PUSH
34864: LD_VAR 0 17
34868: PUSH
34869: LD_INT 1
34871: ARRAY
34872: PPUSH
34873: CALL_OW 250
34877: PPUSH
34878: LD_VAR 0 17
34882: PUSH
34883: LD_INT 1
34885: ARRAY
34886: PPUSH
34887: CALL_OW 254
34891: PPUSH
34892: LD_INT 5
34894: PPUSH
34895: CALL_OW 272
34899: PUSH
34900: LD_VAR 0 17
34904: PUSH
34905: LD_INT 1
34907: ARRAY
34908: PPUSH
34909: CALL_OW 251
34913: PPUSH
34914: LD_VAR 0 17
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PPUSH
34923: CALL_OW 254
34927: PPUSH
34928: LD_INT 5
34930: PPUSH
34931: CALL_OW 273
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34940: LD_VAR 0 16
34944: PUSH
34945: LD_INT 1
34947: ARRAY
34948: PPUSH
34949: LD_VAR 0 16
34953: PUSH
34954: LD_INT 2
34956: ARRAY
34957: PPUSH
34958: CALL_OW 488
34962: IFFALSE 34993
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34964: LD_VAR 0 13
34968: PPUSH
34969: LD_VAR 0 16
34973: PUSH
34974: LD_INT 1
34976: ARRAY
34977: PPUSH
34978: LD_VAR 0 16
34982: PUSH
34983: LD_INT 2
34985: ARRAY
34986: PPUSH
34987: CALL_OW 111
// continue ;
34991: GO 34483
// end ; end ; r := GetDir ( tmp ) ;
34993: LD_ADDR_VAR 0 15
34997: PUSH
34998: LD_VAR 0 13
35002: PPUSH
35003: CALL_OW 254
35007: ST_TO_ADDR
// if r = 5 then
35008: LD_VAR 0 15
35012: PUSH
35013: LD_INT 5
35015: EQUAL
35016: IFFALSE 35026
// r := 0 ;
35018: LD_ADDR_VAR 0 15
35022: PUSH
35023: LD_INT 0
35025: ST_TO_ADDR
// for j = r to 5 do
35026: LD_ADDR_VAR 0 10
35030: PUSH
35031: DOUBLE
35032: LD_VAR 0 15
35036: DEC
35037: ST_TO_ADDR
35038: LD_INT 5
35040: PUSH
35041: FOR_TO
35042: IFFALSE 35156
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35044: LD_ADDR_VAR 0 11
35048: PUSH
35049: LD_VAR 0 13
35053: PPUSH
35054: CALL_OW 250
35058: PPUSH
35059: LD_VAR 0 10
35063: PPUSH
35064: LD_INT 2
35066: PPUSH
35067: CALL_OW 272
35071: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35072: LD_ADDR_VAR 0 12
35076: PUSH
35077: LD_VAR 0 13
35081: PPUSH
35082: CALL_OW 251
35086: PPUSH
35087: LD_VAR 0 10
35091: PPUSH
35092: LD_INT 2
35094: PPUSH
35095: CALL_OW 273
35099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35100: LD_VAR 0 11
35104: PPUSH
35105: LD_VAR 0 12
35109: PPUSH
35110: CALL_OW 488
35114: PUSH
35115: LD_VAR 0 11
35119: PPUSH
35120: LD_VAR 0 12
35124: PPUSH
35125: CALL_OW 428
35129: NOT
35130: AND
35131: IFFALSE 35154
// begin ComMoveXY ( tmp , _x , _y ) ;
35133: LD_VAR 0 13
35137: PPUSH
35138: LD_VAR 0 11
35142: PPUSH
35143: LD_VAR 0 12
35147: PPUSH
35148: CALL_OW 111
// break ;
35152: GO 35156
// end ; end ;
35154: GO 35041
35156: POP
35157: POP
// end ; end ;
35158: GO 34483
35160: POP
35161: POP
// end ;
35162: LD_VAR 0 8
35166: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
35167: LD_INT 0
35169: PPUSH
35170: PPUSH
35171: PPUSH
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
// result := false ;
35179: LD_ADDR_VAR 0 6
35183: PUSH
35184: LD_INT 0
35186: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35187: LD_VAR 0 1
35191: NOT
35192: PUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL_OW 266
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: IN
35213: NOT
35214: OR
35215: PUSH
35216: LD_VAR 0 2
35220: NOT
35221: OR
35222: PUSH
35223: LD_VAR 0 5
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: LD_INT 4
35242: PUSH
35243: LD_INT 5
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: IN
35254: NOT
35255: OR
35256: PUSH
35257: LD_VAR 0 3
35261: PPUSH
35262: LD_VAR 0 4
35266: PPUSH
35267: CALL_OW 488
35271: NOT
35272: OR
35273: IFFALSE 35277
// exit ;
35275: GO 35994
// pom := GetBase ( depot ) ;
35277: LD_ADDR_VAR 0 10
35281: PUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 274
35291: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35292: LD_ADDR_VAR 0 11
35296: PUSH
35297: LD_VAR 0 2
35301: PPUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 248
35311: PPUSH
35312: CALL_OW 450
35316: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35317: LD_VAR 0 10
35321: PPUSH
35322: LD_INT 1
35324: PPUSH
35325: CALL_OW 275
35329: PUSH
35330: LD_VAR 0 11
35334: PUSH
35335: LD_INT 1
35337: ARRAY
35338: GREATEREQUAL
35339: PUSH
35340: LD_VAR 0 10
35344: PPUSH
35345: LD_INT 2
35347: PPUSH
35348: CALL_OW 275
35352: PUSH
35353: LD_VAR 0 11
35357: PUSH
35358: LD_INT 2
35360: ARRAY
35361: GREATEREQUAL
35362: AND
35363: PUSH
35364: LD_VAR 0 10
35368: PPUSH
35369: LD_INT 3
35371: PPUSH
35372: CALL_OW 275
35376: PUSH
35377: LD_VAR 0 11
35381: PUSH
35382: LD_INT 3
35384: ARRAY
35385: GREATEREQUAL
35386: AND
35387: NOT
35388: IFFALSE 35392
// exit ;
35390: GO 35994
// if GetBType ( depot ) = b_depot then
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL_OW 266
35401: PUSH
35402: LD_INT 0
35404: EQUAL
35405: IFFALSE 35417
// dist := 28 else
35407: LD_ADDR_VAR 0 14
35411: PUSH
35412: LD_INT 28
35414: ST_TO_ADDR
35415: GO 35425
// dist := 36 ;
35417: LD_ADDR_VAR 0 14
35421: PUSH
35422: LD_INT 36
35424: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35425: LD_VAR 0 1
35429: PPUSH
35430: LD_VAR 0 3
35434: PPUSH
35435: LD_VAR 0 4
35439: PPUSH
35440: CALL_OW 297
35444: PUSH
35445: LD_VAR 0 14
35449: GREATER
35450: IFFALSE 35454
// exit ;
35452: GO 35994
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35454: LD_ADDR_VAR 0 12
35458: PUSH
35459: LD_VAR 0 2
35463: PPUSH
35464: LD_VAR 0 3
35468: PPUSH
35469: LD_VAR 0 4
35473: PPUSH
35474: LD_VAR 0 5
35478: PPUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: CALL_OW 248
35488: PPUSH
35489: LD_INT 0
35491: PPUSH
35492: CALL 35999 0 6
35496: ST_TO_ADDR
// if not hexes then
35497: LD_VAR 0 12
35501: NOT
35502: IFFALSE 35506
// exit ;
35504: GO 35994
// hex := GetHexInfo ( x , y ) ;
35506: LD_ADDR_VAR 0 15
35510: PUSH
35511: LD_VAR 0 3
35515: PPUSH
35516: LD_VAR 0 4
35520: PPUSH
35521: CALL_OW 546
35525: ST_TO_ADDR
// if hex [ 1 ] then
35526: LD_VAR 0 15
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: IFFALSE 35538
// exit ;
35536: GO 35994
// height := hex [ 2 ] ;
35538: LD_ADDR_VAR 0 13
35542: PUSH
35543: LD_VAR 0 15
35547: PUSH
35548: LD_INT 2
35550: ARRAY
35551: ST_TO_ADDR
// for i = 1 to hexes do
35552: LD_ADDR_VAR 0 7
35556: PUSH
35557: DOUBLE
35558: LD_INT 1
35560: DEC
35561: ST_TO_ADDR
35562: LD_VAR 0 12
35566: PUSH
35567: FOR_TO
35568: IFFALSE 35898
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35570: LD_VAR 0 12
35574: PUSH
35575: LD_VAR 0 7
35579: ARRAY
35580: PUSH
35581: LD_INT 1
35583: ARRAY
35584: PPUSH
35585: LD_VAR 0 12
35589: PUSH
35590: LD_VAR 0 7
35594: ARRAY
35595: PUSH
35596: LD_INT 2
35598: ARRAY
35599: PPUSH
35600: CALL_OW 488
35604: NOT
35605: PUSH
35606: LD_VAR 0 12
35610: PUSH
35611: LD_VAR 0 7
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PPUSH
35621: LD_VAR 0 12
35625: PUSH
35626: LD_VAR 0 7
35630: ARRAY
35631: PUSH
35632: LD_INT 2
35634: ARRAY
35635: PPUSH
35636: CALL_OW 428
35640: PUSH
35641: LD_INT 0
35643: GREATER
35644: OR
35645: PUSH
35646: LD_VAR 0 12
35650: PUSH
35651: LD_VAR 0 7
35655: ARRAY
35656: PUSH
35657: LD_INT 1
35659: ARRAY
35660: PPUSH
35661: LD_VAR 0 12
35665: PUSH
35666: LD_VAR 0 7
35670: ARRAY
35671: PUSH
35672: LD_INT 2
35674: ARRAY
35675: PPUSH
35676: CALL_OW 351
35680: OR
35681: IFFALSE 35687
// exit ;
35683: POP
35684: POP
35685: GO 35994
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35687: LD_ADDR_VAR 0 8
35691: PUSH
35692: LD_VAR 0 12
35696: PUSH
35697: LD_VAR 0 7
35701: ARRAY
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: PPUSH
35707: LD_VAR 0 12
35711: PUSH
35712: LD_VAR 0 7
35716: ARRAY
35717: PUSH
35718: LD_INT 2
35720: ARRAY
35721: PPUSH
35722: CALL_OW 546
35726: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35727: LD_VAR 0 8
35731: PUSH
35732: LD_INT 1
35734: ARRAY
35735: PUSH
35736: LD_VAR 0 8
35740: PUSH
35741: LD_INT 2
35743: ARRAY
35744: PUSH
35745: LD_VAR 0 13
35749: PUSH
35750: LD_INT 2
35752: PLUS
35753: GREATER
35754: OR
35755: PUSH
35756: LD_VAR 0 8
35760: PUSH
35761: LD_INT 2
35763: ARRAY
35764: PUSH
35765: LD_VAR 0 13
35769: PUSH
35770: LD_INT 2
35772: MINUS
35773: LESS
35774: OR
35775: PUSH
35776: LD_VAR 0 8
35780: PUSH
35781: LD_INT 3
35783: ARRAY
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 8
35790: PUSH
35791: LD_INT 9
35793: PUSH
35794: LD_INT 10
35796: PUSH
35797: LD_INT 11
35799: PUSH
35800: LD_INT 12
35802: PUSH
35803: LD_INT 13
35805: PUSH
35806: LD_INT 16
35808: PUSH
35809: LD_INT 17
35811: PUSH
35812: LD_INT 18
35814: PUSH
35815: LD_INT 19
35817: PUSH
35818: LD_INT 20
35820: PUSH
35821: LD_INT 21
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: IN
35839: NOT
35840: OR
35841: PUSH
35842: LD_VAR 0 8
35846: PUSH
35847: LD_INT 5
35849: ARRAY
35850: NOT
35851: OR
35852: PUSH
35853: LD_VAR 0 8
35857: PUSH
35858: LD_INT 6
35860: ARRAY
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 7
35870: PUSH
35871: LD_INT 9
35873: PUSH
35874: LD_INT 10
35876: PUSH
35877: LD_INT 11
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: IN
35888: NOT
35889: OR
35890: IFFALSE 35896
// exit ;
35892: POP
35893: POP
35894: GO 35994
// end ;
35896: GO 35567
35898: POP
35899: POP
// side := GetSide ( depot ) ;
35900: LD_ADDR_VAR 0 9
35904: PUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 255
35914: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35915: LD_VAR 0 9
35919: PPUSH
35920: LD_VAR 0 3
35924: PPUSH
35925: LD_VAR 0 4
35929: PPUSH
35930: LD_INT 20
35932: PPUSH
35933: CALL 28315 0 4
35937: PUSH
35938: LD_INT 4
35940: ARRAY
35941: IFFALSE 35945
// exit ;
35943: GO 35994
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35945: LD_VAR 0 2
35949: PUSH
35950: LD_INT 29
35952: PUSH
35953: LD_INT 30
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: IN
35960: PUSH
35961: LD_VAR 0 3
35965: PPUSH
35966: LD_VAR 0 4
35970: PPUSH
35971: LD_VAR 0 9
35975: PPUSH
35976: CALL_OW 440
35980: NOT
35981: AND
35982: IFFALSE 35986
// exit ;
35984: GO 35994
// result := true ;
35986: LD_ADDR_VAR 0 6
35990: PUSH
35991: LD_INT 1
35993: ST_TO_ADDR
// end ;
35994: LD_VAR 0 6
35998: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35999: LD_INT 0
36001: PPUSH
36002: PPUSH
36003: PPUSH
36004: PPUSH
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
// result = [ ] ;
36059: LD_ADDR_VAR 0 7
36063: PUSH
36064: EMPTY
36065: ST_TO_ADDR
// temp_list = [ ] ;
36066: LD_ADDR_VAR 0 9
36070: PUSH
36071: EMPTY
36072: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36073: LD_VAR 0 4
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: LD_INT 4
36092: PUSH
36093: LD_INT 5
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: IN
36104: NOT
36105: PUSH
36106: LD_VAR 0 1
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: IN
36121: PUSH
36122: LD_VAR 0 5
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: IN
36141: NOT
36142: AND
36143: OR
36144: IFFALSE 36148
// exit ;
36146: GO 54539
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36148: LD_VAR 0 1
36152: PUSH
36153: LD_INT 6
36155: PUSH
36156: LD_INT 7
36158: PUSH
36159: LD_INT 8
36161: PUSH
36162: LD_INT 13
36164: PUSH
36165: LD_INT 12
36167: PUSH
36168: LD_INT 15
36170: PUSH
36171: LD_INT 11
36173: PUSH
36174: LD_INT 14
36176: PUSH
36177: LD_INT 10
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: IN
36191: IFFALSE 36201
// btype = b_lab ;
36193: LD_ADDR_VAR 0 1
36197: PUSH
36198: LD_INT 6
36200: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36201: LD_VAR 0 6
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: IN
36220: NOT
36221: PUSH
36222: LD_VAR 0 1
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: LD_INT 3
36238: PUSH
36239: LD_INT 6
36241: PUSH
36242: LD_INT 36
36244: PUSH
36245: LD_INT 4
36247: PUSH
36248: LD_INT 5
36250: PUSH
36251: LD_INT 31
36253: PUSH
36254: LD_INT 32
36256: PUSH
36257: LD_INT 33
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: IN
36273: NOT
36274: PUSH
36275: LD_VAR 0 6
36279: PUSH
36280: LD_INT 1
36282: EQUAL
36283: AND
36284: OR
36285: PUSH
36286: LD_VAR 0 1
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: IN
36301: NOT
36302: PUSH
36303: LD_VAR 0 6
36307: PUSH
36308: LD_INT 2
36310: EQUAL
36311: AND
36312: OR
36313: IFFALSE 36323
// mode = 0 ;
36315: LD_ADDR_VAR 0 6
36319: PUSH
36320: LD_INT 0
36322: ST_TO_ADDR
// case mode of 0 :
36323: LD_VAR 0 6
36327: PUSH
36328: LD_INT 0
36330: DOUBLE
36331: EQUAL
36332: IFTRUE 36336
36334: GO 47789
36336: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36337: LD_ADDR_VAR 0 11
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 2
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 3
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36530: LD_ADDR_VAR 0 12
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 2
36676: NEG
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 3
36687: NEG
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 3
36698: NEG
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36726: LD_ADDR_VAR 0 13
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: NEG
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: LD_INT 3
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 3
36885: NEG
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: LD_INT 3
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36925: LD_ADDR_VAR 0 14
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: LD_INT 2
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 2
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 3
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 3
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37121: LD_ADDR_VAR 0 15
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: NEG
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: NEG
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 3
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37314: LD_ADDR_VAR 0 16
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 2
37437: NEG
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: NEG
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 3
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: LD_INT 3
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37507: LD_ADDR_VAR 0 17
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 2
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: NEG
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37737: LD_ADDR_VAR 0 18
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 2
37924: NEG
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37967: LD_ADDR_VAR 0 19
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: NEG
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: LD_INT 2
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38197: LD_ADDR_VAR 0 20
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38427: LD_ADDR_VAR 0 21
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: NEG
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38657: LD_ADDR_VAR 0 22
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: NEG
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38887: LD_ADDR_VAR 0 23
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: NEG
39099: PUSH
39100: LD_INT 3
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 3
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39167: LD_ADDR_VAR 0 24
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 3
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39443: LD_ADDR_VAR 0 25
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 2
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: LD_INT 3
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39717: LD_ADDR_VAR 0 26
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39993: LD_ADDR_VAR 0 27
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 3
40238: NEG
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40273: LD_ADDR_VAR 0 28
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: LD_INT 3
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40555: LD_ADDR_VAR 0 29
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: NEG
40746: PUSH
40747: LD_INT 3
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 3
40799: NEG
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40834: LD_ADDR_VAR 0 30
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 3
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 3
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 3
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41112: LD_ADDR_VAR 0 31
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: LD_INT 3
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 3
41355: NEG
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41390: LD_ADDR_VAR 0 32
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 3
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 3
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41668: LD_ADDR_VAR 0 33
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: LD_INT 3
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: NEG
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41947: LD_ADDR_VAR 0 34
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 3
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42227: LD_ADDR_VAR 0 35
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42339: LD_ADDR_VAR 0 36
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42451: LD_ADDR_VAR 0 37
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42563: LD_ADDR_VAR 0 38
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42675: LD_ADDR_VAR 0 39
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42787: LD_ADDR_VAR 0 40
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42899: LD_ADDR_VAR 0 41
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 3
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 3
43173: NEG
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 3
43184: NEG
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 3
43196: NEG
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: LD_INT 3
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43249: LD_ADDR_VAR 0 42
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 3
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 3
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 3
43558: NEG
43559: PUSH
43560: LD_INT 3
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43599: LD_ADDR_VAR 0 43
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 3
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 3
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 3
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 3
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43947: LD_ADDR_VAR 0 44
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 3
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: LD_INT 3
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: LD_INT 3
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 3
44221: NEG
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 3
44232: NEG
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 3
44244: NEG
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 3
44256: NEG
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44297: LD_ADDR_VAR 0 45
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 3
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 3
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 3
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 3
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: NEG
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: LD_INT 3
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44647: LD_ADDR_VAR 0 46
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 3
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 3
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 3
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44995: LD_ADDR_VAR 0 47
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45146: LD_ADDR_VAR 0 48
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45293: LD_ADDR_VAR 0 49
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45437: LD_ADDR_VAR 0 50
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45581: LD_ADDR_VAR 0 51
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45728: LD_ADDR_VAR 0 52
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45879: LD_ADDR_VAR 0 53
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46109: LD_ADDR_VAR 0 54
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46339: LD_ADDR_VAR 0 55
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46569: LD_ADDR_VAR 0 56
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46799: LD_ADDR_VAR 0 57
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47029: LD_ADDR_VAR 0 58
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47259: LD_ADDR_VAR 0 59
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47347: LD_ADDR_VAR 0 60
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47435: LD_ADDR_VAR 0 61
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47523: LD_ADDR_VAR 0 62
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47611: LD_ADDR_VAR 0 63
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47699: LD_ADDR_VAR 0 64
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: ST_TO_ADDR
// end ; 1 :
47787: GO 53684
47789: LD_INT 1
47791: DOUBLE
47792: EQUAL
47793: IFTRUE 47797
47795: GO 50420
47797: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47798: LD_ADDR_VAR 0 11
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47842: LD_ADDR_VAR 0 12
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47883: LD_ADDR_VAR 0 13
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47923: LD_ADDR_VAR 0 14
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47964: LD_ADDR_VAR 0 15
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 3
47993: NEG
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48008: LD_ADDR_VAR 0 16
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 3
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: LD_INT 3
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48054: LD_ADDR_VAR 0 17
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 3
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 3
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48098: LD_ADDR_VAR 0 18
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48139: LD_ADDR_VAR 0 19
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: PUSH
48157: LD_INT 3
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48179: LD_ADDR_VAR 0 20
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48220: LD_ADDR_VAR 0 21
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: NEG
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48264: LD_ADDR_VAR 0 22
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 3
48295: NEG
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: LIST
48309: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48310: LD_ADDR_VAR 0 23
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 4
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 3
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48354: LD_ADDR_VAR 0 24
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 4
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: LIST
48394: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48395: LD_ADDR_VAR 0 25
48399: PUSH
48400: LD_INT 3
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 4
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 4
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48435: LD_ADDR_VAR 0 26
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 4
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48476: LD_ADDR_VAR 0 27
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 3
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 4
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48520: LD_ADDR_VAR 0 28
48524: PUSH
48525: LD_INT 3
48527: NEG
48528: PUSH
48529: LD_INT 3
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: LD_INT 4
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 4
48551: NEG
48552: PUSH
48553: LD_INT 3
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48566: LD_ADDR_VAR 0 29
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 3
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 3
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 4
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 4
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 5
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 5
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 4
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 6
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 6
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 5
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48721: LD_ADDR_VAR 0 30
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 3
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 4
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 4
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 4
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 5
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 5
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 5
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 6
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 6
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48864: LD_ADDR_VAR 0 31
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 4
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 4
48911: PUSH
48912: LD_INT 4
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: LD_INT 4
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 5
48931: PUSH
48932: LD_INT 4
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 5
48941: PUSH
48942: LD_INT 5
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 4
48951: PUSH
48952: LD_INT 5
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 6
48961: PUSH
48962: LD_INT 5
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 6
48971: PUSH
48972: LD_INT 6
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 5
48981: PUSH
48982: LD_INT 6
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49003: LD_ADDR_VAR 0 32
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 4
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 4
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 5
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: LD_INT 5
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 4
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 6
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 6
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 5
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49146: LD_ADDR_VAR 0 33
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: NEG
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 4
49198: NEG
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 4
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 4
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 5
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 5
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 5
49255: NEG
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 6
49266: NEG
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 6
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49301: LD_ADDR_VAR 0 34
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 3
49332: NEG
49333: PUSH
49334: LD_INT 3
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 3
49344: NEG
49345: PUSH
49346: LD_INT 4
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 4
49356: NEG
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 4
49368: NEG
49369: PUSH
49370: LD_INT 4
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 4
49380: NEG
49381: PUSH
49382: LD_INT 5
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 5
49392: NEG
49393: PUSH
49394: LD_INT 4
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 5
49404: NEG
49405: PUSH
49406: LD_INT 5
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 5
49416: NEG
49417: PUSH
49418: LD_INT 6
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 6
49428: NEG
49429: PUSH
49430: LD_INT 5
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 6
49440: NEG
49441: PUSH
49442: LD_INT 6
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49464: LD_ADDR_VAR 0 41
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49508: LD_ADDR_VAR 0 42
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49549: LD_ADDR_VAR 0 43
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49589: LD_ADDR_VAR 0 44
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49630: LD_ADDR_VAR 0 45
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49674: LD_ADDR_VAR 0 46
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49720: LD_ADDR_VAR 0 47
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: LD_INT 3
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49753: LD_ADDR_VAR 0 48
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49784: LD_ADDR_VAR 0 49
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49813: LD_ADDR_VAR 0 50
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49842: LD_ADDR_VAR 0 51
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49873: LD_ADDR_VAR 0 52
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49906: LD_ADDR_VAR 0 53
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49950: LD_ADDR_VAR 0 54
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49991: LD_ADDR_VAR 0 55
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 3
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50031: LD_ADDR_VAR 0 56
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 3
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50072: LD_ADDR_VAR 0 57
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50116: LD_ADDR_VAR 0 58
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 3
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 3
50147: NEG
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50162: LD_ADDR_VAR 0 59
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50206: LD_ADDR_VAR 0 60
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50247: LD_ADDR_VAR 0 61
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50287: LD_ADDR_VAR 0 62
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50328: LD_ADDR_VAR 0 63
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50372: LD_ADDR_VAR 0 64
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: ST_TO_ADDR
// end ; 2 :
50418: GO 53684
50420: LD_INT 2
50422: DOUBLE
50423: EQUAL
50424: IFTRUE 50428
50426: GO 53683
50428: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50429: LD_ADDR_VAR 0 29
50433: PUSH
50434: LD_INT 4
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 4
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 5
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 5
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 4
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 5
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 3
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 4
50549: PUSH
50550: LD_INT 3
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 4
50559: PUSH
50560: LD_INT 4
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: LD_INT 4
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 4
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 4
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 4
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 3
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 5
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 5
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 4
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: LD_INT 5
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 3
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 4
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 4
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 4
50791: NEG
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 4
50814: NEG
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 4
50826: NEG
50827: PUSH
50828: LD_INT 5
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 3
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 4
50862: NEG
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 5
50874: NEG
50875: PUSH
50876: LD_INT 4
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 5
50886: NEG
50887: PUSH
50888: LD_INT 5
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 3
50898: NEG
50899: PUSH
50900: LD_INT 5
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 5
50910: NEG
50911: PUSH
50912: LD_INT 3
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50967: LD_ADDR_VAR 0 30
50971: PUSH
50972: LD_INT 4
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 4
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 5
50994: PUSH
50995: LD_INT 4
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 5
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 4
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 5
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 5
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 4
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 4
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: LD_INT 4
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: NEG
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 4
51168: NEG
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 4
51202: NEG
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 5
51213: NEG
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 5
51224: NEG
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 5
51236: NEG
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 3
51259: NEG
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 4
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 3
51307: NEG
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 4
51319: NEG
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 4
51331: NEG
51332: PUSH
51333: LD_INT 4
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 4
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 4
51355: NEG
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 4
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 5
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 4
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 3
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 4
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 5
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 5
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51514: LD_ADDR_VAR 0 31
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 4
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: LD_INT 4
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 5
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 4
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: LD_INT 5
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 3
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 4
51670: NEG
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 4
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 4
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 4
51716: NEG
51717: PUSH
51718: LD_INT 4
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 4
51728: NEG
51729: PUSH
51730: LD_INT 5
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: LD_INT 4
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: LD_INT 3
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 4
51764: NEG
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 5
51776: NEG
51777: PUSH
51778: LD_INT 4
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 5
51788: NEG
51789: PUSH
51790: LD_INT 5
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: NEG
51801: PUSH
51802: LD_INT 5
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 5
51812: NEG
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 4
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 3
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 4
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 4
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 4
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 4
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 5
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 5
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 4
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 5
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52064: LD_ADDR_VAR 0 32
52068: PUSH
52069: LD_INT 4
52071: NEG
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 4
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 4
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 5
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 5
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 5
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: LD_INT 3
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: NEG
52186: PUSH
52187: LD_INT 4
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 4
52233: NEG
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: NEG
52246: PUSH
52247: LD_INT 4
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 4
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 5
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: LD_INT 4
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 4
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 5
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: LD_INT 5
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 4
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 4
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 4
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 4
52476: PUSH
52477: LD_INT 4
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 4
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 5
52496: PUSH
52497: LD_INT 4
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 5
52506: PUSH
52507: LD_INT 5
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 4
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: LD_INT 4
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 5
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 3
52556: PUSH
52557: LD_INT 5
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52611: LD_ADDR_VAR 0 33
52615: PUSH
52616: LD_INT 4
52618: NEG
52619: PUSH
52620: LD_INT 4
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 4
52630: NEG
52631: PUSH
52632: LD_INT 5
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: LD_INT 4
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: LD_INT 3
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 4
52666: NEG
52667: PUSH
52668: LD_INT 3
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 5
52678: NEG
52679: PUSH
52680: LD_INT 4
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 5
52690: NEG
52691: PUSH
52692: LD_INT 5
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 3
52702: NEG
52703: PUSH
52704: LD_INT 5
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 5
52714: NEG
52715: PUSH
52716: LD_INT 3
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 4
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 4
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: LD_INT 4
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 4
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 4
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 5
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 5
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 4
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 5
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 3
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 4
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 4
52951: PUSH
52952: LD_INT 4
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 3
52961: PUSH
52962: LD_INT 4
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 4
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 4
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: LD_INT 4
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 4
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 5
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 5
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 4
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 5
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53149: LD_ADDR_VAR 0 34
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 4
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 5
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 4
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 3
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 4
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 5
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: LD_INT 5
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 4
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 4
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 4
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 4
53351: PUSH
53352: LD_INT 4
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 4
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 5
53371: PUSH
53372: LD_INT 4
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 5
53381: PUSH
53382: LD_INT 5
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 4
53391: PUSH
53392: LD_INT 5
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 5
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 5
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 4
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 3
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 4
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 4
53534: NEG
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 4
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 4
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 5
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 5
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 5
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// end ; end ;
53681: GO 53684
53683: POP
// case btype of b_depot , b_warehouse :
53684: LD_VAR 0 1
53688: PUSH
53689: LD_INT 0
53691: DOUBLE
53692: EQUAL
53693: IFTRUE 53703
53695: LD_INT 1
53697: DOUBLE
53698: EQUAL
53699: IFTRUE 53703
53701: GO 53904
53703: POP
// case nation of nation_american :
53704: LD_VAR 0 5
53708: PUSH
53709: LD_INT 1
53711: DOUBLE
53712: EQUAL
53713: IFTRUE 53717
53715: GO 53773
53717: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53718: LD_ADDR_VAR 0 9
53722: PUSH
53723: LD_VAR 0 11
53727: PUSH
53728: LD_VAR 0 12
53732: PUSH
53733: LD_VAR 0 13
53737: PUSH
53738: LD_VAR 0 14
53742: PUSH
53743: LD_VAR 0 15
53747: PUSH
53748: LD_VAR 0 16
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: PUSH
53761: LD_VAR 0 4
53765: PUSH
53766: LD_INT 1
53768: PLUS
53769: ARRAY
53770: ST_TO_ADDR
53771: GO 53902
53773: LD_INT 2
53775: DOUBLE
53776: EQUAL
53777: IFTRUE 53781
53779: GO 53837
53781: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53782: LD_ADDR_VAR 0 9
53786: PUSH
53787: LD_VAR 0 17
53791: PUSH
53792: LD_VAR 0 18
53796: PUSH
53797: LD_VAR 0 19
53801: PUSH
53802: LD_VAR 0 20
53806: PUSH
53807: LD_VAR 0 21
53811: PUSH
53812: LD_VAR 0 22
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: PUSH
53825: LD_VAR 0 4
53829: PUSH
53830: LD_INT 1
53832: PLUS
53833: ARRAY
53834: ST_TO_ADDR
53835: GO 53902
53837: LD_INT 3
53839: DOUBLE
53840: EQUAL
53841: IFTRUE 53845
53843: GO 53901
53845: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53846: LD_ADDR_VAR 0 9
53850: PUSH
53851: LD_VAR 0 23
53855: PUSH
53856: LD_VAR 0 24
53860: PUSH
53861: LD_VAR 0 25
53865: PUSH
53866: LD_VAR 0 26
53870: PUSH
53871: LD_VAR 0 27
53875: PUSH
53876: LD_VAR 0 28
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: PUSH
53889: LD_VAR 0 4
53893: PUSH
53894: LD_INT 1
53896: PLUS
53897: ARRAY
53898: ST_TO_ADDR
53899: GO 53902
53901: POP
53902: GO 54457
53904: LD_INT 2
53906: DOUBLE
53907: EQUAL
53908: IFTRUE 53918
53910: LD_INT 3
53912: DOUBLE
53913: EQUAL
53914: IFTRUE 53918
53916: GO 53974
53918: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53919: LD_ADDR_VAR 0 9
53923: PUSH
53924: LD_VAR 0 29
53928: PUSH
53929: LD_VAR 0 30
53933: PUSH
53934: LD_VAR 0 31
53938: PUSH
53939: LD_VAR 0 32
53943: PUSH
53944: LD_VAR 0 33
53948: PUSH
53949: LD_VAR 0 34
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: PUSH
53962: LD_VAR 0 4
53966: PUSH
53967: LD_INT 1
53969: PLUS
53970: ARRAY
53971: ST_TO_ADDR
53972: GO 54457
53974: LD_INT 16
53976: DOUBLE
53977: EQUAL
53978: IFTRUE 54036
53980: LD_INT 17
53982: DOUBLE
53983: EQUAL
53984: IFTRUE 54036
53986: LD_INT 18
53988: DOUBLE
53989: EQUAL
53990: IFTRUE 54036
53992: LD_INT 19
53994: DOUBLE
53995: EQUAL
53996: IFTRUE 54036
53998: LD_INT 22
54000: DOUBLE
54001: EQUAL
54002: IFTRUE 54036
54004: LD_INT 20
54006: DOUBLE
54007: EQUAL
54008: IFTRUE 54036
54010: LD_INT 21
54012: DOUBLE
54013: EQUAL
54014: IFTRUE 54036
54016: LD_INT 23
54018: DOUBLE
54019: EQUAL
54020: IFTRUE 54036
54022: LD_INT 24
54024: DOUBLE
54025: EQUAL
54026: IFTRUE 54036
54028: LD_INT 25
54030: DOUBLE
54031: EQUAL
54032: IFTRUE 54036
54034: GO 54092
54036: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54037: LD_ADDR_VAR 0 9
54041: PUSH
54042: LD_VAR 0 35
54046: PUSH
54047: LD_VAR 0 36
54051: PUSH
54052: LD_VAR 0 37
54056: PUSH
54057: LD_VAR 0 38
54061: PUSH
54062: LD_VAR 0 39
54066: PUSH
54067: LD_VAR 0 40
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: PUSH
54080: LD_VAR 0 4
54084: PUSH
54085: LD_INT 1
54087: PLUS
54088: ARRAY
54089: ST_TO_ADDR
54090: GO 54457
54092: LD_INT 6
54094: DOUBLE
54095: EQUAL
54096: IFTRUE 54148
54098: LD_INT 7
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54148
54104: LD_INT 8
54106: DOUBLE
54107: EQUAL
54108: IFTRUE 54148
54110: LD_INT 13
54112: DOUBLE
54113: EQUAL
54114: IFTRUE 54148
54116: LD_INT 12
54118: DOUBLE
54119: EQUAL
54120: IFTRUE 54148
54122: LD_INT 15
54124: DOUBLE
54125: EQUAL
54126: IFTRUE 54148
54128: LD_INT 11
54130: DOUBLE
54131: EQUAL
54132: IFTRUE 54148
54134: LD_INT 14
54136: DOUBLE
54137: EQUAL
54138: IFTRUE 54148
54140: LD_INT 10
54142: DOUBLE
54143: EQUAL
54144: IFTRUE 54148
54146: GO 54204
54148: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54149: LD_ADDR_VAR 0 9
54153: PUSH
54154: LD_VAR 0 41
54158: PUSH
54159: LD_VAR 0 42
54163: PUSH
54164: LD_VAR 0 43
54168: PUSH
54169: LD_VAR 0 44
54173: PUSH
54174: LD_VAR 0 45
54178: PUSH
54179: LD_VAR 0 46
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: PUSH
54192: LD_VAR 0 4
54196: PUSH
54197: LD_INT 1
54199: PLUS
54200: ARRAY
54201: ST_TO_ADDR
54202: GO 54457
54204: LD_INT 36
54206: DOUBLE
54207: EQUAL
54208: IFTRUE 54212
54210: GO 54268
54212: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54213: LD_ADDR_VAR 0 9
54217: PUSH
54218: LD_VAR 0 47
54222: PUSH
54223: LD_VAR 0 48
54227: PUSH
54228: LD_VAR 0 49
54232: PUSH
54233: LD_VAR 0 50
54237: PUSH
54238: LD_VAR 0 51
54242: PUSH
54243: LD_VAR 0 52
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: PUSH
54256: LD_VAR 0 4
54260: PUSH
54261: LD_INT 1
54263: PLUS
54264: ARRAY
54265: ST_TO_ADDR
54266: GO 54457
54268: LD_INT 4
54270: DOUBLE
54271: EQUAL
54272: IFTRUE 54294
54274: LD_INT 5
54276: DOUBLE
54277: EQUAL
54278: IFTRUE 54294
54280: LD_INT 34
54282: DOUBLE
54283: EQUAL
54284: IFTRUE 54294
54286: LD_INT 37
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54294
54292: GO 54350
54294: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54295: LD_ADDR_VAR 0 9
54299: PUSH
54300: LD_VAR 0 53
54304: PUSH
54305: LD_VAR 0 54
54309: PUSH
54310: LD_VAR 0 55
54314: PUSH
54315: LD_VAR 0 56
54319: PUSH
54320: LD_VAR 0 57
54324: PUSH
54325: LD_VAR 0 58
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: PUSH
54338: LD_VAR 0 4
54342: PUSH
54343: LD_INT 1
54345: PLUS
54346: ARRAY
54347: ST_TO_ADDR
54348: GO 54457
54350: LD_INT 31
54352: DOUBLE
54353: EQUAL
54354: IFTRUE 54400
54356: LD_INT 32
54358: DOUBLE
54359: EQUAL
54360: IFTRUE 54400
54362: LD_INT 33
54364: DOUBLE
54365: EQUAL
54366: IFTRUE 54400
54368: LD_INT 27
54370: DOUBLE
54371: EQUAL
54372: IFTRUE 54400
54374: LD_INT 26
54376: DOUBLE
54377: EQUAL
54378: IFTRUE 54400
54380: LD_INT 28
54382: DOUBLE
54383: EQUAL
54384: IFTRUE 54400
54386: LD_INT 29
54388: DOUBLE
54389: EQUAL
54390: IFTRUE 54400
54392: LD_INT 30
54394: DOUBLE
54395: EQUAL
54396: IFTRUE 54400
54398: GO 54456
54400: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54401: LD_ADDR_VAR 0 9
54405: PUSH
54406: LD_VAR 0 59
54410: PUSH
54411: LD_VAR 0 60
54415: PUSH
54416: LD_VAR 0 61
54420: PUSH
54421: LD_VAR 0 62
54425: PUSH
54426: LD_VAR 0 63
54430: PUSH
54431: LD_VAR 0 64
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: PUSH
54444: LD_VAR 0 4
54448: PUSH
54449: LD_INT 1
54451: PLUS
54452: ARRAY
54453: ST_TO_ADDR
54454: GO 54457
54456: POP
// temp_list2 = [ ] ;
54457: LD_ADDR_VAR 0 10
54461: PUSH
54462: EMPTY
54463: ST_TO_ADDR
// for i in temp_list do
54464: LD_ADDR_VAR 0 8
54468: PUSH
54469: LD_VAR 0 9
54473: PUSH
54474: FOR_IN
54475: IFFALSE 54527
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54477: LD_ADDR_VAR 0 10
54481: PUSH
54482: LD_VAR 0 10
54486: PUSH
54487: LD_VAR 0 8
54491: PUSH
54492: LD_INT 1
54494: ARRAY
54495: PUSH
54496: LD_VAR 0 2
54500: PLUS
54501: PUSH
54502: LD_VAR 0 8
54506: PUSH
54507: LD_INT 2
54509: ARRAY
54510: PUSH
54511: LD_VAR 0 3
54515: PLUS
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: ADD
54524: ST_TO_ADDR
54525: GO 54474
54527: POP
54528: POP
// result = temp_list2 ;
54529: LD_ADDR_VAR 0 7
54533: PUSH
54534: LD_VAR 0 10
54538: ST_TO_ADDR
// end ;
54539: LD_VAR 0 7
54543: RET
// export function EnemyInRange ( unit , dist ) ; begin
54544: LD_INT 0
54546: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54547: LD_ADDR_VAR 0 3
54551: PUSH
54552: LD_VAR 0 1
54556: PPUSH
54557: CALL_OW 255
54561: PPUSH
54562: LD_VAR 0 1
54566: PPUSH
54567: CALL_OW 250
54571: PPUSH
54572: LD_VAR 0 1
54576: PPUSH
54577: CALL_OW 251
54581: PPUSH
54582: LD_VAR 0 2
54586: PPUSH
54587: CALL 28315 0 4
54591: PUSH
54592: LD_INT 4
54594: ARRAY
54595: ST_TO_ADDR
// end ;
54596: LD_VAR 0 3
54600: RET
// export function PlayerSeeMe ( unit ) ; begin
54601: LD_INT 0
54603: PPUSH
// result := See ( your_side , unit ) ;
54604: LD_ADDR_VAR 0 2
54608: PUSH
54609: LD_OWVAR 2
54613: PPUSH
54614: LD_VAR 0 1
54618: PPUSH
54619: CALL_OW 292
54623: ST_TO_ADDR
// end ;
54624: LD_VAR 0 2
54628: RET
// export function ReverseDir ( unit ) ; begin
54629: LD_INT 0
54631: PPUSH
// if not unit then
54632: LD_VAR 0 1
54636: NOT
54637: IFFALSE 54641
// exit ;
54639: GO 54664
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54641: LD_ADDR_VAR 0 2
54645: PUSH
54646: LD_VAR 0 1
54650: PPUSH
54651: CALL_OW 254
54655: PUSH
54656: LD_INT 3
54658: PLUS
54659: PUSH
54660: LD_INT 6
54662: MOD
54663: ST_TO_ADDR
// end ;
54664: LD_VAR 0 2
54668: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54669: LD_INT 0
54671: PPUSH
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
// if not hexes then
54676: LD_VAR 0 2
54680: NOT
54681: IFFALSE 54685
// exit ;
54683: GO 54833
// dist := 9999 ;
54685: LD_ADDR_VAR 0 5
54689: PUSH
54690: LD_INT 9999
54692: ST_TO_ADDR
// for i = 1 to hexes do
54693: LD_ADDR_VAR 0 4
54697: PUSH
54698: DOUBLE
54699: LD_INT 1
54701: DEC
54702: ST_TO_ADDR
54703: LD_VAR 0 2
54707: PUSH
54708: FOR_TO
54709: IFFALSE 54821
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54711: LD_VAR 0 1
54715: PPUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_VAR 0 4
54725: ARRAY
54726: PUSH
54727: LD_INT 1
54729: ARRAY
54730: PPUSH
54731: LD_VAR 0 2
54735: PUSH
54736: LD_VAR 0 4
54740: ARRAY
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PPUSH
54746: CALL_OW 297
54750: PUSH
54751: LD_VAR 0 5
54755: LESS
54756: IFFALSE 54819
// begin hex := hexes [ i ] ;
54758: LD_ADDR_VAR 0 7
54762: PUSH
54763: LD_VAR 0 2
54767: PUSH
54768: LD_VAR 0 4
54772: ARRAY
54773: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54774: LD_ADDR_VAR 0 5
54778: PUSH
54779: LD_VAR 0 1
54783: PPUSH
54784: LD_VAR 0 2
54788: PUSH
54789: LD_VAR 0 4
54793: ARRAY
54794: PUSH
54795: LD_INT 1
54797: ARRAY
54798: PPUSH
54799: LD_VAR 0 2
54803: PUSH
54804: LD_VAR 0 4
54808: ARRAY
54809: PUSH
54810: LD_INT 2
54812: ARRAY
54813: PPUSH
54814: CALL_OW 297
54818: ST_TO_ADDR
// end ; end ;
54819: GO 54708
54821: POP
54822: POP
// result := hex ;
54823: LD_ADDR_VAR 0 3
54827: PUSH
54828: LD_VAR 0 7
54832: ST_TO_ADDR
// end ;
54833: LD_VAR 0 3
54837: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54838: LD_INT 0
54840: PPUSH
54841: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54842: LD_VAR 0 1
54846: NOT
54847: PUSH
54848: LD_VAR 0 1
54852: PUSH
54853: LD_INT 21
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 23
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PPUSH
54877: CALL_OW 69
54881: IN
54882: NOT
54883: OR
54884: IFFALSE 54888
// exit ;
54886: GO 54935
// for i = 1 to 3 do
54888: LD_ADDR_VAR 0 3
54892: PUSH
54893: DOUBLE
54894: LD_INT 1
54896: DEC
54897: ST_TO_ADDR
54898: LD_INT 3
54900: PUSH
54901: FOR_TO
54902: IFFALSE 54933
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54904: LD_VAR 0 1
54908: PPUSH
54909: CALL_OW 250
54913: PPUSH
54914: LD_VAR 0 1
54918: PPUSH
54919: CALL_OW 251
54923: PPUSH
54924: LD_INT 1
54926: PPUSH
54927: CALL_OW 453
54931: GO 54901
54933: POP
54934: POP
// end ;
54935: LD_VAR 0 2
54939: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54940: LD_INT 0
54942: PPUSH
54943: PPUSH
54944: PPUSH
54945: PPUSH
54946: PPUSH
54947: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54948: LD_VAR 0 1
54952: NOT
54953: PUSH
54954: LD_VAR 0 2
54958: NOT
54959: OR
54960: PUSH
54961: LD_VAR 0 1
54965: PPUSH
54966: CALL_OW 314
54970: OR
54971: IFFALSE 54975
// exit ;
54973: GO 55416
// x := GetX ( enemy_unit ) ;
54975: LD_ADDR_VAR 0 7
54979: PUSH
54980: LD_VAR 0 2
54984: PPUSH
54985: CALL_OW 250
54989: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54990: LD_ADDR_VAR 0 8
54994: PUSH
54995: LD_VAR 0 2
54999: PPUSH
55000: CALL_OW 251
55004: ST_TO_ADDR
// if not x or not y then
55005: LD_VAR 0 7
55009: NOT
55010: PUSH
55011: LD_VAR 0 8
55015: NOT
55016: OR
55017: IFFALSE 55021
// exit ;
55019: GO 55416
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55021: LD_ADDR_VAR 0 6
55025: PUSH
55026: LD_VAR 0 7
55030: PPUSH
55031: LD_INT 0
55033: PPUSH
55034: LD_INT 4
55036: PPUSH
55037: CALL_OW 272
55041: PUSH
55042: LD_VAR 0 8
55046: PPUSH
55047: LD_INT 0
55049: PPUSH
55050: LD_INT 4
55052: PPUSH
55053: CALL_OW 273
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_VAR 0 7
55066: PPUSH
55067: LD_INT 1
55069: PPUSH
55070: LD_INT 4
55072: PPUSH
55073: CALL_OW 272
55077: PUSH
55078: LD_VAR 0 8
55082: PPUSH
55083: LD_INT 1
55085: PPUSH
55086: LD_INT 4
55088: PPUSH
55089: CALL_OW 273
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_VAR 0 7
55102: PPUSH
55103: LD_INT 2
55105: PPUSH
55106: LD_INT 4
55108: PPUSH
55109: CALL_OW 272
55113: PUSH
55114: LD_VAR 0 8
55118: PPUSH
55119: LD_INT 2
55121: PPUSH
55122: LD_INT 4
55124: PPUSH
55125: CALL_OW 273
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_VAR 0 7
55138: PPUSH
55139: LD_INT 3
55141: PPUSH
55142: LD_INT 4
55144: PPUSH
55145: CALL_OW 272
55149: PUSH
55150: LD_VAR 0 8
55154: PPUSH
55155: LD_INT 3
55157: PPUSH
55158: LD_INT 4
55160: PPUSH
55161: CALL_OW 273
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_VAR 0 7
55174: PPUSH
55175: LD_INT 4
55177: PPUSH
55178: LD_INT 4
55180: PPUSH
55181: CALL_OW 272
55185: PUSH
55186: LD_VAR 0 8
55190: PPUSH
55191: LD_INT 4
55193: PPUSH
55194: LD_INT 4
55196: PPUSH
55197: CALL_OW 273
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_VAR 0 7
55210: PPUSH
55211: LD_INT 5
55213: PPUSH
55214: LD_INT 4
55216: PPUSH
55217: CALL_OW 272
55221: PUSH
55222: LD_VAR 0 8
55226: PPUSH
55227: LD_INT 5
55229: PPUSH
55230: LD_INT 4
55232: PPUSH
55233: CALL_OW 273
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// for i = tmp downto 1 do
55250: LD_ADDR_VAR 0 4
55254: PUSH
55255: DOUBLE
55256: LD_VAR 0 6
55260: INC
55261: ST_TO_ADDR
55262: LD_INT 1
55264: PUSH
55265: FOR_DOWNTO
55266: IFFALSE 55367
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55268: LD_VAR 0 6
55272: PUSH
55273: LD_VAR 0 4
55277: ARRAY
55278: PUSH
55279: LD_INT 1
55281: ARRAY
55282: PPUSH
55283: LD_VAR 0 6
55287: PUSH
55288: LD_VAR 0 4
55292: ARRAY
55293: PUSH
55294: LD_INT 2
55296: ARRAY
55297: PPUSH
55298: CALL_OW 488
55302: NOT
55303: PUSH
55304: LD_VAR 0 6
55308: PUSH
55309: LD_VAR 0 4
55313: ARRAY
55314: PUSH
55315: LD_INT 1
55317: ARRAY
55318: PPUSH
55319: LD_VAR 0 6
55323: PUSH
55324: LD_VAR 0 4
55328: ARRAY
55329: PUSH
55330: LD_INT 2
55332: ARRAY
55333: PPUSH
55334: CALL_OW 428
55338: PUSH
55339: LD_INT 0
55341: NONEQUAL
55342: OR
55343: IFFALSE 55365
// tmp := Delete ( tmp , i ) ;
55345: LD_ADDR_VAR 0 6
55349: PUSH
55350: LD_VAR 0 6
55354: PPUSH
55355: LD_VAR 0 4
55359: PPUSH
55360: CALL_OW 3
55364: ST_TO_ADDR
55365: GO 55265
55367: POP
55368: POP
// j := GetClosestHex ( unit , tmp ) ;
55369: LD_ADDR_VAR 0 5
55373: PUSH
55374: LD_VAR 0 1
55378: PPUSH
55379: LD_VAR 0 6
55383: PPUSH
55384: CALL 54669 0 2
55388: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55389: LD_VAR 0 1
55393: PPUSH
55394: LD_VAR 0 5
55398: PUSH
55399: LD_INT 1
55401: ARRAY
55402: PPUSH
55403: LD_VAR 0 5
55407: PUSH
55408: LD_INT 2
55410: ARRAY
55411: PPUSH
55412: CALL_OW 111
// end ;
55416: LD_VAR 0 3
55420: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55421: LD_INT 0
55423: PPUSH
55424: PPUSH
55425: PPUSH
// uc_side = 0 ;
55426: LD_ADDR_OWVAR 20
55430: PUSH
55431: LD_INT 0
55433: ST_TO_ADDR
// uc_nation = 0 ;
55434: LD_ADDR_OWVAR 21
55438: PUSH
55439: LD_INT 0
55441: ST_TO_ADDR
// InitHc_All ( ) ;
55442: CALL_OW 584
// InitVc ;
55446: CALL_OW 20
// if mastodonts then
55450: LD_VAR 0 6
55454: IFFALSE 55521
// for i = 1 to mastodonts do
55456: LD_ADDR_VAR 0 11
55460: PUSH
55461: DOUBLE
55462: LD_INT 1
55464: DEC
55465: ST_TO_ADDR
55466: LD_VAR 0 6
55470: PUSH
55471: FOR_TO
55472: IFFALSE 55519
// begin vc_chassis := 31 ;
55474: LD_ADDR_OWVAR 37
55478: PUSH
55479: LD_INT 31
55481: ST_TO_ADDR
// vc_control := control_rider ;
55482: LD_ADDR_OWVAR 38
55486: PUSH
55487: LD_INT 4
55489: ST_TO_ADDR
// animal := CreateVehicle ;
55490: LD_ADDR_VAR 0 12
55494: PUSH
55495: CALL_OW 45
55499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55500: LD_VAR 0 12
55504: PPUSH
55505: LD_VAR 0 8
55509: PPUSH
55510: LD_INT 0
55512: PPUSH
55513: CALL 57709 0 3
// end ;
55517: GO 55471
55519: POP
55520: POP
// if horses then
55521: LD_VAR 0 5
55525: IFFALSE 55592
// for i = 1 to horses do
55527: LD_ADDR_VAR 0 11
55531: PUSH
55532: DOUBLE
55533: LD_INT 1
55535: DEC
55536: ST_TO_ADDR
55537: LD_VAR 0 5
55541: PUSH
55542: FOR_TO
55543: IFFALSE 55590
// begin hc_class := 21 ;
55545: LD_ADDR_OWVAR 28
55549: PUSH
55550: LD_INT 21
55552: ST_TO_ADDR
// hc_gallery :=  ;
55553: LD_ADDR_OWVAR 33
55557: PUSH
55558: LD_STRING 
55560: ST_TO_ADDR
// animal := CreateHuman ;
55561: LD_ADDR_VAR 0 12
55565: PUSH
55566: CALL_OW 44
55570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55571: LD_VAR 0 12
55575: PPUSH
55576: LD_VAR 0 8
55580: PPUSH
55581: LD_INT 0
55583: PPUSH
55584: CALL 57709 0 3
// end ;
55588: GO 55542
55590: POP
55591: POP
// if birds then
55592: LD_VAR 0 1
55596: IFFALSE 55663
// for i = 1 to birds do
55598: LD_ADDR_VAR 0 11
55602: PUSH
55603: DOUBLE
55604: LD_INT 1
55606: DEC
55607: ST_TO_ADDR
55608: LD_VAR 0 1
55612: PUSH
55613: FOR_TO
55614: IFFALSE 55661
// begin hc_class = 18 ;
55616: LD_ADDR_OWVAR 28
55620: PUSH
55621: LD_INT 18
55623: ST_TO_ADDR
// hc_gallery =  ;
55624: LD_ADDR_OWVAR 33
55628: PUSH
55629: LD_STRING 
55631: ST_TO_ADDR
// animal := CreateHuman ;
55632: LD_ADDR_VAR 0 12
55636: PUSH
55637: CALL_OW 44
55641: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55642: LD_VAR 0 12
55646: PPUSH
55647: LD_VAR 0 8
55651: PPUSH
55652: LD_INT 0
55654: PPUSH
55655: CALL 57709 0 3
// end ;
55659: GO 55613
55661: POP
55662: POP
// if tigers then
55663: LD_VAR 0 2
55667: IFFALSE 55751
// for i = 1 to tigers do
55669: LD_ADDR_VAR 0 11
55673: PUSH
55674: DOUBLE
55675: LD_INT 1
55677: DEC
55678: ST_TO_ADDR
55679: LD_VAR 0 2
55683: PUSH
55684: FOR_TO
55685: IFFALSE 55749
// begin hc_class = class_tiger ;
55687: LD_ADDR_OWVAR 28
55691: PUSH
55692: LD_INT 14
55694: ST_TO_ADDR
// hc_gallery =  ;
55695: LD_ADDR_OWVAR 33
55699: PUSH
55700: LD_STRING 
55702: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55703: LD_ADDR_OWVAR 35
55707: PUSH
55708: LD_INT 7
55710: NEG
55711: PPUSH
55712: LD_INT 7
55714: PPUSH
55715: CALL_OW 12
55719: ST_TO_ADDR
// animal := CreateHuman ;
55720: LD_ADDR_VAR 0 12
55724: PUSH
55725: CALL_OW 44
55729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55730: LD_VAR 0 12
55734: PPUSH
55735: LD_VAR 0 8
55739: PPUSH
55740: LD_INT 0
55742: PPUSH
55743: CALL 57709 0 3
// end ;
55747: GO 55684
55749: POP
55750: POP
// if apemans then
55751: LD_VAR 0 3
55755: IFFALSE 55878
// for i = 1 to apemans do
55757: LD_ADDR_VAR 0 11
55761: PUSH
55762: DOUBLE
55763: LD_INT 1
55765: DEC
55766: ST_TO_ADDR
55767: LD_VAR 0 3
55771: PUSH
55772: FOR_TO
55773: IFFALSE 55876
// begin hc_class = class_apeman ;
55775: LD_ADDR_OWVAR 28
55779: PUSH
55780: LD_INT 12
55782: ST_TO_ADDR
// hc_gallery =  ;
55783: LD_ADDR_OWVAR 33
55787: PUSH
55788: LD_STRING 
55790: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55791: LD_ADDR_OWVAR 35
55795: PUSH
55796: LD_INT 5
55798: NEG
55799: PPUSH
55800: LD_INT 5
55802: PPUSH
55803: CALL_OW 12
55807: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55808: LD_ADDR_OWVAR 31
55812: PUSH
55813: LD_INT 1
55815: PPUSH
55816: LD_INT 3
55818: PPUSH
55819: CALL_OW 12
55823: PUSH
55824: LD_INT 1
55826: PPUSH
55827: LD_INT 3
55829: PPUSH
55830: CALL_OW 12
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// animal := CreateHuman ;
55847: LD_ADDR_VAR 0 12
55851: PUSH
55852: CALL_OW 44
55856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55857: LD_VAR 0 12
55861: PPUSH
55862: LD_VAR 0 8
55866: PPUSH
55867: LD_INT 0
55869: PPUSH
55870: CALL 57709 0 3
// end ;
55874: GO 55772
55876: POP
55877: POP
// if enchidnas then
55878: LD_VAR 0 4
55882: IFFALSE 55949
// for i = 1 to enchidnas do
55884: LD_ADDR_VAR 0 11
55888: PUSH
55889: DOUBLE
55890: LD_INT 1
55892: DEC
55893: ST_TO_ADDR
55894: LD_VAR 0 4
55898: PUSH
55899: FOR_TO
55900: IFFALSE 55947
// begin hc_class = 13 ;
55902: LD_ADDR_OWVAR 28
55906: PUSH
55907: LD_INT 13
55909: ST_TO_ADDR
// hc_gallery =  ;
55910: LD_ADDR_OWVAR 33
55914: PUSH
55915: LD_STRING 
55917: ST_TO_ADDR
// animal := CreateHuman ;
55918: LD_ADDR_VAR 0 12
55922: PUSH
55923: CALL_OW 44
55927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55928: LD_VAR 0 12
55932: PPUSH
55933: LD_VAR 0 8
55937: PPUSH
55938: LD_INT 0
55940: PPUSH
55941: CALL 57709 0 3
// end ;
55945: GO 55899
55947: POP
55948: POP
// if fishes then
55949: LD_VAR 0 7
55953: IFFALSE 56020
// for i = 1 to fishes do
55955: LD_ADDR_VAR 0 11
55959: PUSH
55960: DOUBLE
55961: LD_INT 1
55963: DEC
55964: ST_TO_ADDR
55965: LD_VAR 0 7
55969: PUSH
55970: FOR_TO
55971: IFFALSE 56018
// begin hc_class = 20 ;
55973: LD_ADDR_OWVAR 28
55977: PUSH
55978: LD_INT 20
55980: ST_TO_ADDR
// hc_gallery =  ;
55981: LD_ADDR_OWVAR 33
55985: PUSH
55986: LD_STRING 
55988: ST_TO_ADDR
// animal := CreateHuman ;
55989: LD_ADDR_VAR 0 12
55993: PUSH
55994: CALL_OW 44
55998: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55999: LD_VAR 0 12
56003: PPUSH
56004: LD_VAR 0 9
56008: PPUSH
56009: LD_INT 0
56011: PPUSH
56012: CALL 57709 0 3
// end ;
56016: GO 55970
56018: POP
56019: POP
// end ;
56020: LD_VAR 0 10
56024: RET
// export function WantHeal ( sci , unit ) ; begin
56025: LD_INT 0
56027: PPUSH
// if GetTaskList ( sci ) > 0 then
56028: LD_VAR 0 1
56032: PPUSH
56033: CALL_OW 437
56037: PUSH
56038: LD_INT 0
56040: GREATER
56041: IFFALSE 56111
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56043: LD_VAR 0 1
56047: PPUSH
56048: CALL_OW 437
56052: PUSH
56053: LD_INT 1
56055: ARRAY
56056: PUSH
56057: LD_INT 1
56059: ARRAY
56060: PUSH
56061: LD_STRING l
56063: EQUAL
56064: PUSH
56065: LD_VAR 0 1
56069: PPUSH
56070: CALL_OW 437
56074: PUSH
56075: LD_INT 1
56077: ARRAY
56078: PUSH
56079: LD_INT 4
56081: ARRAY
56082: PUSH
56083: LD_VAR 0 2
56087: EQUAL
56088: AND
56089: IFFALSE 56101
// result := true else
56091: LD_ADDR_VAR 0 3
56095: PUSH
56096: LD_INT 1
56098: ST_TO_ADDR
56099: GO 56109
// result := false ;
56101: LD_ADDR_VAR 0 3
56105: PUSH
56106: LD_INT 0
56108: ST_TO_ADDR
// end else
56109: GO 56119
// result := false ;
56111: LD_ADDR_VAR 0 3
56115: PUSH
56116: LD_INT 0
56118: ST_TO_ADDR
// end ;
56119: LD_VAR 0 3
56123: RET
// export function HealTarget ( sci ) ; begin
56124: LD_INT 0
56126: PPUSH
// if not sci then
56127: LD_VAR 0 1
56131: NOT
56132: IFFALSE 56136
// exit ;
56134: GO 56201
// result := 0 ;
56136: LD_ADDR_VAR 0 2
56140: PUSH
56141: LD_INT 0
56143: ST_TO_ADDR
// if GetTaskList ( sci ) then
56144: LD_VAR 0 1
56148: PPUSH
56149: CALL_OW 437
56153: IFFALSE 56201
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56155: LD_VAR 0 1
56159: PPUSH
56160: CALL_OW 437
56164: PUSH
56165: LD_INT 1
56167: ARRAY
56168: PUSH
56169: LD_INT 1
56171: ARRAY
56172: PUSH
56173: LD_STRING l
56175: EQUAL
56176: IFFALSE 56201
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56178: LD_ADDR_VAR 0 2
56182: PUSH
56183: LD_VAR 0 1
56187: PPUSH
56188: CALL_OW 437
56192: PUSH
56193: LD_INT 1
56195: ARRAY
56196: PUSH
56197: LD_INT 4
56199: ARRAY
56200: ST_TO_ADDR
// end ;
56201: LD_VAR 0 2
56205: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56206: LD_INT 0
56208: PPUSH
56209: PPUSH
56210: PPUSH
56211: PPUSH
// if not base_units then
56212: LD_VAR 0 1
56216: NOT
56217: IFFALSE 56221
// exit ;
56219: GO 56308
// result := false ;
56221: LD_ADDR_VAR 0 2
56225: PUSH
56226: LD_INT 0
56228: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56229: LD_ADDR_VAR 0 5
56233: PUSH
56234: LD_VAR 0 1
56238: PPUSH
56239: LD_INT 21
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PPUSH
56249: CALL_OW 72
56253: ST_TO_ADDR
// if not tmp then
56254: LD_VAR 0 5
56258: NOT
56259: IFFALSE 56263
// exit ;
56261: GO 56308
// for i in tmp do
56263: LD_ADDR_VAR 0 3
56267: PUSH
56268: LD_VAR 0 5
56272: PUSH
56273: FOR_IN
56274: IFFALSE 56306
// begin result := EnemyInRange ( i , 22 ) ;
56276: LD_ADDR_VAR 0 2
56280: PUSH
56281: LD_VAR 0 3
56285: PPUSH
56286: LD_INT 22
56288: PPUSH
56289: CALL 54544 0 2
56293: ST_TO_ADDR
// if result then
56294: LD_VAR 0 2
56298: IFFALSE 56304
// exit ;
56300: POP
56301: POP
56302: GO 56308
// end ;
56304: GO 56273
56306: POP
56307: POP
// end ;
56308: LD_VAR 0 2
56312: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56313: LD_INT 0
56315: PPUSH
56316: PPUSH
// if not units then
56317: LD_VAR 0 1
56321: NOT
56322: IFFALSE 56326
// exit ;
56324: GO 56396
// result := [ ] ;
56326: LD_ADDR_VAR 0 3
56330: PUSH
56331: EMPTY
56332: ST_TO_ADDR
// for i in units do
56333: LD_ADDR_VAR 0 4
56337: PUSH
56338: LD_VAR 0 1
56342: PUSH
56343: FOR_IN
56344: IFFALSE 56394
// if GetTag ( i ) = tag then
56346: LD_VAR 0 4
56350: PPUSH
56351: CALL_OW 110
56355: PUSH
56356: LD_VAR 0 2
56360: EQUAL
56361: IFFALSE 56392
// result := Insert ( result , result + 1 , i ) ;
56363: LD_ADDR_VAR 0 3
56367: PUSH
56368: LD_VAR 0 3
56372: PPUSH
56373: LD_VAR 0 3
56377: PUSH
56378: LD_INT 1
56380: PLUS
56381: PPUSH
56382: LD_VAR 0 4
56386: PPUSH
56387: CALL_OW 2
56391: ST_TO_ADDR
56392: GO 56343
56394: POP
56395: POP
// end ;
56396: LD_VAR 0 3
56400: RET
// export function IsDriver ( un ) ; begin
56401: LD_INT 0
56403: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56404: LD_ADDR_VAR 0 2
56408: PUSH
56409: LD_VAR 0 1
56413: PUSH
56414: LD_INT 55
56416: PUSH
56417: EMPTY
56418: LIST
56419: PPUSH
56420: CALL_OW 69
56424: IN
56425: ST_TO_ADDR
// end ;
56426: LD_VAR 0 2
56430: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56431: LD_INT 0
56433: PPUSH
56434: PPUSH
// list := [ ] ;
56435: LD_ADDR_VAR 0 5
56439: PUSH
56440: EMPTY
56441: ST_TO_ADDR
// case d of 0 :
56442: LD_VAR 0 3
56446: PUSH
56447: LD_INT 0
56449: DOUBLE
56450: EQUAL
56451: IFTRUE 56455
56453: GO 56588
56455: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56456: LD_ADDR_VAR 0 5
56460: PUSH
56461: LD_VAR 0 1
56465: PUSH
56466: LD_INT 4
56468: MINUS
56469: PUSH
56470: LD_VAR 0 2
56474: PUSH
56475: LD_INT 4
56477: MINUS
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: PUSH
56487: LD_VAR 0 1
56491: PUSH
56492: LD_INT 3
56494: MINUS
56495: PUSH
56496: LD_VAR 0 2
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: PUSH
56509: LD_VAR 0 1
56513: PUSH
56514: LD_INT 4
56516: PLUS
56517: PUSH
56518: LD_VAR 0 2
56522: PUSH
56523: LD_INT 4
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: PUSH
56531: LD_VAR 0 1
56535: PUSH
56536: LD_INT 3
56538: PLUS
56539: PUSH
56540: LD_VAR 0 2
56544: PUSH
56545: LD_INT 3
56547: PLUS
56548: PUSH
56549: LD_INT 5
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: PUSH
56557: LD_VAR 0 1
56561: PUSH
56562: LD_VAR 0 2
56566: PUSH
56567: LD_INT 4
56569: PLUS
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: ST_TO_ADDR
// end ; 1 :
56586: GO 57286
56588: LD_INT 1
56590: DOUBLE
56591: EQUAL
56592: IFTRUE 56596
56594: GO 56729
56596: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56597: LD_ADDR_VAR 0 5
56601: PUSH
56602: LD_VAR 0 1
56606: PUSH
56607: LD_VAR 0 2
56611: PUSH
56612: LD_INT 4
56614: MINUS
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: PUSH
56624: LD_VAR 0 1
56628: PUSH
56629: LD_INT 3
56631: MINUS
56632: PUSH
56633: LD_VAR 0 2
56637: PUSH
56638: LD_INT 3
56640: MINUS
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: PUSH
56650: LD_VAR 0 1
56654: PUSH
56655: LD_INT 4
56657: MINUS
56658: PUSH
56659: LD_VAR 0 2
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: PUSH
56672: LD_VAR 0 1
56676: PUSH
56677: LD_VAR 0 2
56681: PUSH
56682: LD_INT 3
56684: PLUS
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: PUSH
56694: LD_VAR 0 1
56698: PUSH
56699: LD_INT 4
56701: PLUS
56702: PUSH
56703: LD_VAR 0 2
56707: PUSH
56708: LD_INT 4
56710: PLUS
56711: PUSH
56712: LD_INT 5
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// end ; 2 :
56727: GO 57286
56729: LD_INT 2
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56737
56735: GO 56866
56737: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56738: LD_ADDR_VAR 0 5
56742: PUSH
56743: LD_VAR 0 1
56747: PUSH
56748: LD_VAR 0 2
56752: PUSH
56753: LD_INT 3
56755: MINUS
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: PUSH
56765: LD_VAR 0 1
56769: PUSH
56770: LD_INT 4
56772: PLUS
56773: PUSH
56774: LD_VAR 0 2
56778: PUSH
56779: LD_INT 4
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: PUSH
56787: LD_VAR 0 1
56791: PUSH
56792: LD_VAR 0 2
56796: PUSH
56797: LD_INT 4
56799: PLUS
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: PUSH
56809: LD_VAR 0 1
56813: PUSH
56814: LD_INT 3
56816: MINUS
56817: PUSH
56818: LD_VAR 0 2
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: PUSH
56831: LD_VAR 0 1
56835: PUSH
56836: LD_INT 4
56838: MINUS
56839: PUSH
56840: LD_VAR 0 2
56844: PUSH
56845: LD_INT 4
56847: MINUS
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: ST_TO_ADDR
// end ; 3 :
56864: GO 57286
56866: LD_INT 3
56868: DOUBLE
56869: EQUAL
56870: IFTRUE 56874
56872: GO 57007
56874: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56875: LD_ADDR_VAR 0 5
56879: PUSH
56880: LD_VAR 0 1
56884: PUSH
56885: LD_INT 3
56887: PLUS
56888: PUSH
56889: LD_VAR 0 2
56893: PUSH
56894: LD_INT 4
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: PUSH
56902: LD_VAR 0 1
56906: PUSH
56907: LD_INT 4
56909: PLUS
56910: PUSH
56911: LD_VAR 0 2
56915: PUSH
56916: LD_INT 4
56918: PLUS
56919: PUSH
56920: LD_INT 5
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: PUSH
56928: LD_VAR 0 1
56932: PUSH
56933: LD_INT 4
56935: MINUS
56936: PUSH
56937: LD_VAR 0 2
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: LIST
56949: PUSH
56950: LD_VAR 0 1
56954: PUSH
56955: LD_VAR 0 2
56959: PUSH
56960: LD_INT 4
56962: MINUS
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: PUSH
56972: LD_VAR 0 1
56976: PUSH
56977: LD_INT 3
56979: MINUS
56980: PUSH
56981: LD_VAR 0 2
56985: PUSH
56986: LD_INT 3
56988: MINUS
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: ST_TO_ADDR
// end ; 4 :
57005: GO 57286
57007: LD_INT 4
57009: DOUBLE
57010: EQUAL
57011: IFTRUE 57015
57013: GO 57148
57015: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57016: LD_ADDR_VAR 0 5
57020: PUSH
57021: LD_VAR 0 1
57025: PUSH
57026: LD_VAR 0 2
57030: PUSH
57031: LD_INT 4
57033: PLUS
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: PUSH
57043: LD_VAR 0 1
57047: PUSH
57048: LD_INT 3
57050: PLUS
57051: PUSH
57052: LD_VAR 0 2
57056: PUSH
57057: LD_INT 3
57059: PLUS
57060: PUSH
57061: LD_INT 5
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: PUSH
57069: LD_VAR 0 1
57073: PUSH
57074: LD_INT 4
57076: PLUS
57077: PUSH
57078: LD_VAR 0 2
57082: PUSH
57083: LD_INT 4
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: PUSH
57091: LD_VAR 0 1
57095: PUSH
57096: LD_VAR 0 2
57100: PUSH
57101: LD_INT 3
57103: MINUS
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: LIST
57112: PUSH
57113: LD_VAR 0 1
57117: PUSH
57118: LD_INT 4
57120: MINUS
57121: PUSH
57122: LD_VAR 0 2
57126: PUSH
57127: LD_INT 4
57129: MINUS
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: ST_TO_ADDR
// end ; 5 :
57146: GO 57286
57148: LD_INT 5
57150: DOUBLE
57151: EQUAL
57152: IFTRUE 57156
57154: GO 57285
57156: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57157: LD_ADDR_VAR 0 5
57161: PUSH
57162: LD_VAR 0 1
57166: PUSH
57167: LD_INT 4
57169: MINUS
57170: PUSH
57171: LD_VAR 0 2
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: PUSH
57184: LD_VAR 0 1
57188: PUSH
57189: LD_VAR 0 2
57193: PUSH
57194: LD_INT 4
57196: MINUS
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: PUSH
57206: LD_VAR 0 1
57210: PUSH
57211: LD_INT 4
57213: PLUS
57214: PUSH
57215: LD_VAR 0 2
57219: PUSH
57220: LD_INT 4
57222: PLUS
57223: PUSH
57224: LD_INT 5
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: LIST
57231: PUSH
57232: LD_VAR 0 1
57236: PUSH
57237: LD_INT 3
57239: PLUS
57240: PUSH
57241: LD_VAR 0 2
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: PUSH
57254: LD_VAR 0 1
57258: PUSH
57259: LD_VAR 0 2
57263: PUSH
57264: LD_INT 3
57266: PLUS
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: ST_TO_ADDR
// end ; end ;
57283: GO 57286
57285: POP
// result := list ;
57286: LD_ADDR_VAR 0 4
57290: PUSH
57291: LD_VAR 0 5
57295: ST_TO_ADDR
// end ;
57296: LD_VAR 0 4
57300: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57301: LD_INT 0
57303: PPUSH
57304: PPUSH
57305: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57306: LD_VAR 0 1
57310: NOT
57311: PUSH
57312: LD_VAR 0 2
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: LD_INT 4
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: IN
57335: NOT
57336: OR
57337: IFFALSE 57341
// exit ;
57339: GO 57433
// tmp := [ ] ;
57341: LD_ADDR_VAR 0 5
57345: PUSH
57346: EMPTY
57347: ST_TO_ADDR
// for i in units do
57348: LD_ADDR_VAR 0 4
57352: PUSH
57353: LD_VAR 0 1
57357: PUSH
57358: FOR_IN
57359: IFFALSE 57402
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57361: LD_ADDR_VAR 0 5
57365: PUSH
57366: LD_VAR 0 5
57370: PPUSH
57371: LD_VAR 0 5
57375: PUSH
57376: LD_INT 1
57378: PLUS
57379: PPUSH
57380: LD_VAR 0 4
57384: PPUSH
57385: LD_VAR 0 2
57389: PPUSH
57390: CALL_OW 259
57394: PPUSH
57395: CALL_OW 2
57399: ST_TO_ADDR
57400: GO 57358
57402: POP
57403: POP
// if not tmp then
57404: LD_VAR 0 5
57408: NOT
57409: IFFALSE 57413
// exit ;
57411: GO 57433
// result := SortListByListDesc ( units , tmp ) ;
57413: LD_ADDR_VAR 0 3
57417: PUSH
57418: LD_VAR 0 1
57422: PPUSH
57423: LD_VAR 0 5
57427: PPUSH
57428: CALL_OW 77
57432: ST_TO_ADDR
// end ;
57433: LD_VAR 0 3
57437: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57438: LD_INT 0
57440: PPUSH
57441: PPUSH
57442: PPUSH
// result := false ;
57443: LD_ADDR_VAR 0 3
57447: PUSH
57448: LD_INT 0
57450: ST_TO_ADDR
// x := GetX ( building ) ;
57451: LD_ADDR_VAR 0 4
57455: PUSH
57456: LD_VAR 0 2
57460: PPUSH
57461: CALL_OW 250
57465: ST_TO_ADDR
// y := GetY ( building ) ;
57466: LD_ADDR_VAR 0 5
57470: PUSH
57471: LD_VAR 0 2
57475: PPUSH
57476: CALL_OW 251
57480: ST_TO_ADDR
// if not building or not x or not y then
57481: LD_VAR 0 2
57485: NOT
57486: PUSH
57487: LD_VAR 0 4
57491: NOT
57492: OR
57493: PUSH
57494: LD_VAR 0 5
57498: NOT
57499: OR
57500: IFFALSE 57504
// exit ;
57502: GO 57596
// if GetTaskList ( unit ) then
57504: LD_VAR 0 1
57508: PPUSH
57509: CALL_OW 437
57513: IFFALSE 57596
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57515: LD_STRING e
57517: PUSH
57518: LD_VAR 0 1
57522: PPUSH
57523: CALL_OW 437
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PUSH
57532: LD_INT 1
57534: ARRAY
57535: EQUAL
57536: PUSH
57537: LD_VAR 0 4
57541: PUSH
57542: LD_VAR 0 1
57546: PPUSH
57547: CALL_OW 437
57551: PUSH
57552: LD_INT 1
57554: ARRAY
57555: PUSH
57556: LD_INT 2
57558: ARRAY
57559: EQUAL
57560: AND
57561: PUSH
57562: LD_VAR 0 5
57566: PUSH
57567: LD_VAR 0 1
57571: PPUSH
57572: CALL_OW 437
57576: PUSH
57577: LD_INT 1
57579: ARRAY
57580: PUSH
57581: LD_INT 3
57583: ARRAY
57584: EQUAL
57585: AND
57586: IFFALSE 57596
// result := true end ;
57588: LD_ADDR_VAR 0 3
57592: PUSH
57593: LD_INT 1
57595: ST_TO_ADDR
// end ;
57596: LD_VAR 0 3
57600: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57601: LD_INT 0
57603: PPUSH
// result := false ;
57604: LD_ADDR_VAR 0 4
57608: PUSH
57609: LD_INT 0
57611: ST_TO_ADDR
// if GetTaskList ( unit ) then
57612: LD_VAR 0 1
57616: PPUSH
57617: CALL_OW 437
57621: IFFALSE 57704
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57623: LD_STRING M
57625: PUSH
57626: LD_VAR 0 1
57630: PPUSH
57631: CALL_OW 437
57635: PUSH
57636: LD_INT 1
57638: ARRAY
57639: PUSH
57640: LD_INT 1
57642: ARRAY
57643: EQUAL
57644: PUSH
57645: LD_VAR 0 2
57649: PUSH
57650: LD_VAR 0 1
57654: PPUSH
57655: CALL_OW 437
57659: PUSH
57660: LD_INT 1
57662: ARRAY
57663: PUSH
57664: LD_INT 2
57666: ARRAY
57667: EQUAL
57668: AND
57669: PUSH
57670: LD_VAR 0 3
57674: PUSH
57675: LD_VAR 0 1
57679: PPUSH
57680: CALL_OW 437
57684: PUSH
57685: LD_INT 1
57687: ARRAY
57688: PUSH
57689: LD_INT 3
57691: ARRAY
57692: EQUAL
57693: AND
57694: IFFALSE 57704
// result := true ;
57696: LD_ADDR_VAR 0 4
57700: PUSH
57701: LD_INT 1
57703: ST_TO_ADDR
// end ; end ;
57704: LD_VAR 0 4
57708: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57709: LD_INT 0
57711: PPUSH
57712: PPUSH
57713: PPUSH
57714: PPUSH
// if not unit or not area then
57715: LD_VAR 0 1
57719: NOT
57720: PUSH
57721: LD_VAR 0 2
57725: NOT
57726: OR
57727: IFFALSE 57731
// exit ;
57729: GO 57895
// tmp := AreaToList ( area , i ) ;
57731: LD_ADDR_VAR 0 6
57735: PUSH
57736: LD_VAR 0 2
57740: PPUSH
57741: LD_VAR 0 5
57745: PPUSH
57746: CALL_OW 517
57750: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57751: LD_ADDR_VAR 0 5
57755: PUSH
57756: DOUBLE
57757: LD_INT 1
57759: DEC
57760: ST_TO_ADDR
57761: LD_VAR 0 6
57765: PUSH
57766: LD_INT 1
57768: ARRAY
57769: PUSH
57770: FOR_TO
57771: IFFALSE 57893
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57773: LD_ADDR_VAR 0 7
57777: PUSH
57778: LD_VAR 0 6
57782: PUSH
57783: LD_INT 1
57785: ARRAY
57786: PUSH
57787: LD_VAR 0 5
57791: ARRAY
57792: PUSH
57793: LD_VAR 0 6
57797: PUSH
57798: LD_INT 2
57800: ARRAY
57801: PUSH
57802: LD_VAR 0 5
57806: ARRAY
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57812: LD_VAR 0 7
57816: PUSH
57817: LD_INT 1
57819: ARRAY
57820: PPUSH
57821: LD_VAR 0 7
57825: PUSH
57826: LD_INT 2
57828: ARRAY
57829: PPUSH
57830: CALL_OW 428
57834: PUSH
57835: LD_INT 0
57837: EQUAL
57838: IFFALSE 57891
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57840: LD_VAR 0 1
57844: PPUSH
57845: LD_VAR 0 7
57849: PUSH
57850: LD_INT 1
57852: ARRAY
57853: PPUSH
57854: LD_VAR 0 7
57858: PUSH
57859: LD_INT 2
57861: ARRAY
57862: PPUSH
57863: LD_VAR 0 3
57867: PPUSH
57868: CALL_OW 48
// result := IsPlaced ( unit ) ;
57872: LD_ADDR_VAR 0 4
57876: PUSH
57877: LD_VAR 0 1
57881: PPUSH
57882: CALL_OW 305
57886: ST_TO_ADDR
// exit ;
57887: POP
57888: POP
57889: GO 57895
// end ; end ;
57891: GO 57770
57893: POP
57894: POP
// end ;
57895: LD_VAR 0 4
57899: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57900: LD_INT 0
57902: PPUSH
57903: PPUSH
57904: PPUSH
// if not side or side > 8 then
57905: LD_VAR 0 1
57909: NOT
57910: PUSH
57911: LD_VAR 0 1
57915: PUSH
57916: LD_INT 8
57918: GREATER
57919: OR
57920: IFFALSE 57924
// exit ;
57922: GO 58111
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57924: LD_ADDR_VAR 0 4
57928: PUSH
57929: LD_INT 22
57931: PUSH
57932: LD_VAR 0 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 21
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PPUSH
57955: CALL_OW 69
57959: ST_TO_ADDR
// if not tmp then
57960: LD_VAR 0 4
57964: NOT
57965: IFFALSE 57969
// exit ;
57967: GO 58111
// enable_addtolog := true ;
57969: LD_ADDR_OWVAR 81
57973: PUSH
57974: LD_INT 1
57976: ST_TO_ADDR
// AddToLog ( [ ) ;
57977: LD_STRING [
57979: PPUSH
57980: CALL_OW 561
// for i in tmp do
57984: LD_ADDR_VAR 0 3
57988: PUSH
57989: LD_VAR 0 4
57993: PUSH
57994: FOR_IN
57995: IFFALSE 58102
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57997: LD_STRING [
57999: PUSH
58000: LD_VAR 0 3
58004: PPUSH
58005: CALL_OW 266
58009: STR
58010: PUSH
58011: LD_STRING , 
58013: STR
58014: PUSH
58015: LD_VAR 0 3
58019: PPUSH
58020: CALL_OW 250
58024: STR
58025: PUSH
58026: LD_STRING , 
58028: STR
58029: PUSH
58030: LD_VAR 0 3
58034: PPUSH
58035: CALL_OW 251
58039: STR
58040: PUSH
58041: LD_STRING , 
58043: STR
58044: PUSH
58045: LD_VAR 0 3
58049: PPUSH
58050: CALL_OW 254
58054: STR
58055: PUSH
58056: LD_STRING , 
58058: STR
58059: PUSH
58060: LD_VAR 0 3
58064: PPUSH
58065: LD_INT 1
58067: PPUSH
58068: CALL_OW 268
58072: STR
58073: PUSH
58074: LD_STRING , 
58076: STR
58077: PUSH
58078: LD_VAR 0 3
58082: PPUSH
58083: LD_INT 2
58085: PPUSH
58086: CALL_OW 268
58090: STR
58091: PUSH
58092: LD_STRING ],
58094: STR
58095: PPUSH
58096: CALL_OW 561
// end ;
58100: GO 57994
58102: POP
58103: POP
// AddToLog ( ]; ) ;
58104: LD_STRING ];
58106: PPUSH
58107: CALL_OW 561
// end ;
58111: LD_VAR 0 2
58115: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58116: LD_INT 0
58118: PPUSH
58119: PPUSH
58120: PPUSH
58121: PPUSH
58122: PPUSH
// if not area or not rate or not max then
58123: LD_VAR 0 1
58127: NOT
58128: PUSH
58129: LD_VAR 0 2
58133: NOT
58134: OR
58135: PUSH
58136: LD_VAR 0 4
58140: NOT
58141: OR
58142: IFFALSE 58146
// exit ;
58144: GO 58338
// while 1 do
58146: LD_INT 1
58148: IFFALSE 58338
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58150: LD_ADDR_VAR 0 9
58154: PUSH
58155: LD_VAR 0 1
58159: PPUSH
58160: LD_INT 1
58162: PPUSH
58163: CALL_OW 287
58167: PUSH
58168: LD_INT 10
58170: MUL
58171: ST_TO_ADDR
// r := rate / 10 ;
58172: LD_ADDR_VAR 0 7
58176: PUSH
58177: LD_VAR 0 2
58181: PUSH
58182: LD_INT 10
58184: DIVREAL
58185: ST_TO_ADDR
// time := 1 1$00 ;
58186: LD_ADDR_VAR 0 8
58190: PUSH
58191: LD_INT 2100
58193: ST_TO_ADDR
// if amount < min then
58194: LD_VAR 0 9
58198: PUSH
58199: LD_VAR 0 3
58203: LESS
58204: IFFALSE 58222
// r := r * 2 else
58206: LD_ADDR_VAR 0 7
58210: PUSH
58211: LD_VAR 0 7
58215: PUSH
58216: LD_INT 2
58218: MUL
58219: ST_TO_ADDR
58220: GO 58248
// if amount > max then
58222: LD_VAR 0 9
58226: PUSH
58227: LD_VAR 0 4
58231: GREATER
58232: IFFALSE 58248
// r := r / 2 ;
58234: LD_ADDR_VAR 0 7
58238: PUSH
58239: LD_VAR 0 7
58243: PUSH
58244: LD_INT 2
58246: DIVREAL
58247: ST_TO_ADDR
// time := time / r ;
58248: LD_ADDR_VAR 0 8
58252: PUSH
58253: LD_VAR 0 8
58257: PUSH
58258: LD_VAR 0 7
58262: DIVREAL
58263: ST_TO_ADDR
// if time < 0 then
58264: LD_VAR 0 8
58268: PUSH
58269: LD_INT 0
58271: LESS
58272: IFFALSE 58289
// time := time * - 1 ;
58274: LD_ADDR_VAR 0 8
58278: PUSH
58279: LD_VAR 0 8
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: MUL
58288: ST_TO_ADDR
// wait ( time ) ;
58289: LD_VAR 0 8
58293: PPUSH
58294: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58298: LD_INT 35
58300: PPUSH
58301: LD_INT 875
58303: PPUSH
58304: CALL_OW 12
58308: PPUSH
58309: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58313: LD_INT 1
58315: PPUSH
58316: LD_INT 5
58318: PPUSH
58319: CALL_OW 12
58323: PPUSH
58324: LD_VAR 0 1
58328: PPUSH
58329: LD_INT 1
58331: PPUSH
58332: CALL_OW 55
// end ;
58336: GO 58146
// end ;
58338: LD_VAR 0 5
58342: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58343: LD_INT 0
58345: PPUSH
58346: PPUSH
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
58351: PPUSH
58352: PPUSH
// if not turrets or not factories then
58353: LD_VAR 0 1
58357: NOT
58358: PUSH
58359: LD_VAR 0 2
58363: NOT
58364: OR
58365: IFFALSE 58369
// exit ;
58367: GO 58676
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58369: LD_ADDR_VAR 0 10
58373: PUSH
58374: LD_INT 5
58376: PUSH
58377: LD_INT 6
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: LD_INT 4
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 5
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 24
58411: PUSH
58412: LD_INT 25
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 23
58421: PUSH
58422: LD_INT 27
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 42
58435: PUSH
58436: LD_INT 43
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 44
58445: PUSH
58446: LD_INT 46
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 45
58455: PUSH
58456: LD_INT 47
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: LIST
58472: ST_TO_ADDR
// result := [ ] ;
58473: LD_ADDR_VAR 0 3
58477: PUSH
58478: EMPTY
58479: ST_TO_ADDR
// for i in turrets do
58480: LD_ADDR_VAR 0 4
58484: PUSH
58485: LD_VAR 0 1
58489: PUSH
58490: FOR_IN
58491: IFFALSE 58674
// begin nat := GetNation ( i ) ;
58493: LD_ADDR_VAR 0 7
58497: PUSH
58498: LD_VAR 0 4
58502: PPUSH
58503: CALL_OW 248
58507: ST_TO_ADDR
// weapon := 0 ;
58508: LD_ADDR_VAR 0 8
58512: PUSH
58513: LD_INT 0
58515: ST_TO_ADDR
// if not nat then
58516: LD_VAR 0 7
58520: NOT
58521: IFFALSE 58525
// continue ;
58523: GO 58490
// for j in list [ nat ] do
58525: LD_ADDR_VAR 0 5
58529: PUSH
58530: LD_VAR 0 10
58534: PUSH
58535: LD_VAR 0 7
58539: ARRAY
58540: PUSH
58541: FOR_IN
58542: IFFALSE 58583
// if GetBWeapon ( i ) = j [ 1 ] then
58544: LD_VAR 0 4
58548: PPUSH
58549: CALL_OW 269
58553: PUSH
58554: LD_VAR 0 5
58558: PUSH
58559: LD_INT 1
58561: ARRAY
58562: EQUAL
58563: IFFALSE 58581
// begin weapon := j [ 2 ] ;
58565: LD_ADDR_VAR 0 8
58569: PUSH
58570: LD_VAR 0 5
58574: PUSH
58575: LD_INT 2
58577: ARRAY
58578: ST_TO_ADDR
// break ;
58579: GO 58583
// end ;
58581: GO 58541
58583: POP
58584: POP
// if not weapon then
58585: LD_VAR 0 8
58589: NOT
58590: IFFALSE 58594
// continue ;
58592: GO 58490
// for k in factories do
58594: LD_ADDR_VAR 0 6
58598: PUSH
58599: LD_VAR 0 2
58603: PUSH
58604: FOR_IN
58605: IFFALSE 58670
// begin weapons := AvailableWeaponList ( k ) ;
58607: LD_ADDR_VAR 0 9
58611: PUSH
58612: LD_VAR 0 6
58616: PPUSH
58617: CALL_OW 478
58621: ST_TO_ADDR
// if not weapons then
58622: LD_VAR 0 9
58626: NOT
58627: IFFALSE 58631
// continue ;
58629: GO 58604
// if weapon in weapons then
58631: LD_VAR 0 8
58635: PUSH
58636: LD_VAR 0 9
58640: IN
58641: IFFALSE 58668
// begin result := [ i , weapon ] ;
58643: LD_ADDR_VAR 0 3
58647: PUSH
58648: LD_VAR 0 4
58652: PUSH
58653: LD_VAR 0 8
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// exit ;
58662: POP
58663: POP
58664: POP
58665: POP
58666: GO 58676
// end ; end ;
58668: GO 58604
58670: POP
58671: POP
// end ;
58672: GO 58490
58674: POP
58675: POP
// end ;
58676: LD_VAR 0 3
58680: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58681: LD_INT 0
58683: PPUSH
// if not side or side > 8 then
58684: LD_VAR 0 3
58688: NOT
58689: PUSH
58690: LD_VAR 0 3
58694: PUSH
58695: LD_INT 8
58697: GREATER
58698: OR
58699: IFFALSE 58703
// exit ;
58701: GO 58762
// if not range then
58703: LD_VAR 0 4
58707: NOT
58708: IFFALSE 58719
// range := - 12 ;
58710: LD_ADDR_VAR 0 4
58714: PUSH
58715: LD_INT 12
58717: NEG
58718: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58719: LD_VAR 0 1
58723: PPUSH
58724: LD_VAR 0 2
58728: PPUSH
58729: LD_VAR 0 3
58733: PPUSH
58734: LD_VAR 0 4
58738: PPUSH
58739: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58743: LD_VAR 0 1
58747: PPUSH
58748: LD_VAR 0 2
58752: PPUSH
58753: LD_VAR 0 3
58757: PPUSH
58758: CALL_OW 331
// end ;
58762: LD_VAR 0 5
58766: RET
// export function Video ( mode ) ; begin
58767: LD_INT 0
58769: PPUSH
// ingame_video = mode ;
58770: LD_ADDR_OWVAR 52
58774: PUSH
58775: LD_VAR 0 1
58779: ST_TO_ADDR
// interface_hidden = mode ;
58780: LD_ADDR_OWVAR 54
58784: PUSH
58785: LD_VAR 0 1
58789: ST_TO_ADDR
// end ;
58790: LD_VAR 0 2
58794: RET
// export function Join ( array , element ) ; begin
58795: LD_INT 0
58797: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58798: LD_ADDR_VAR 0 3
58802: PUSH
58803: LD_VAR 0 1
58807: PPUSH
58808: LD_VAR 0 1
58812: PUSH
58813: LD_INT 1
58815: PLUS
58816: PPUSH
58817: LD_VAR 0 2
58821: PPUSH
58822: CALL_OW 1
58826: ST_TO_ADDR
// end ;
58827: LD_VAR 0 3
58831: RET
// export function JoinUnion ( array , element ) ; begin
58832: LD_INT 0
58834: PPUSH
// result := array union element ;
58835: LD_ADDR_VAR 0 3
58839: PUSH
58840: LD_VAR 0 1
58844: PUSH
58845: LD_VAR 0 2
58849: UNION
58850: ST_TO_ADDR
// end ;
58851: LD_VAR 0 3
58855: RET
// export function GetBehemoths ( side ) ; begin
58856: LD_INT 0
58858: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58859: LD_ADDR_VAR 0 2
58863: PUSH
58864: LD_INT 22
58866: PUSH
58867: LD_VAR 0 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 31
58878: PUSH
58879: LD_INT 25
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PPUSH
58890: CALL_OW 69
58894: ST_TO_ADDR
// end ;
58895: LD_VAR 0 2
58899: RET
// export function Shuffle ( array ) ; var i , index ; begin
58900: LD_INT 0
58902: PPUSH
58903: PPUSH
58904: PPUSH
// result := [ ] ;
58905: LD_ADDR_VAR 0 2
58909: PUSH
58910: EMPTY
58911: ST_TO_ADDR
// if not array then
58912: LD_VAR 0 1
58916: NOT
58917: IFFALSE 58921
// exit ;
58919: GO 59020
// Randomize ;
58921: CALL_OW 10
// for i = array downto 1 do
58925: LD_ADDR_VAR 0 3
58929: PUSH
58930: DOUBLE
58931: LD_VAR 0 1
58935: INC
58936: ST_TO_ADDR
58937: LD_INT 1
58939: PUSH
58940: FOR_DOWNTO
58941: IFFALSE 59018
// begin index := rand ( 1 , array ) ;
58943: LD_ADDR_VAR 0 4
58947: PUSH
58948: LD_INT 1
58950: PPUSH
58951: LD_VAR 0 1
58955: PPUSH
58956: CALL_OW 12
58960: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58961: LD_ADDR_VAR 0 2
58965: PUSH
58966: LD_VAR 0 2
58970: PPUSH
58971: LD_VAR 0 2
58975: PUSH
58976: LD_INT 1
58978: PLUS
58979: PPUSH
58980: LD_VAR 0 1
58984: PUSH
58985: LD_VAR 0 4
58989: ARRAY
58990: PPUSH
58991: CALL_OW 2
58995: ST_TO_ADDR
// array := Delete ( array , index ) ;
58996: LD_ADDR_VAR 0 1
59000: PUSH
59001: LD_VAR 0 1
59005: PPUSH
59006: LD_VAR 0 4
59010: PPUSH
59011: CALL_OW 3
59015: ST_TO_ADDR
// end ;
59016: GO 58940
59018: POP
59019: POP
// end ;
59020: LD_VAR 0 2
59024: RET
// export function GetBaseMaterials ( base ) ; begin
59025: LD_INT 0
59027: PPUSH
// result := [ 0 , 0 , 0 ] ;
59028: LD_ADDR_VAR 0 2
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// if not base then
59047: LD_VAR 0 1
59051: NOT
59052: IFFALSE 59056
// exit ;
59054: GO 59105
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59056: LD_ADDR_VAR 0 2
59060: PUSH
59061: LD_VAR 0 1
59065: PPUSH
59066: LD_INT 1
59068: PPUSH
59069: CALL_OW 275
59073: PUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: LD_INT 2
59081: PPUSH
59082: CALL_OW 275
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: LD_INT 3
59094: PPUSH
59095: CALL_OW 275
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// end ;
59105: LD_VAR 0 2
59109: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59110: LD_INT 0
59112: PPUSH
59113: PPUSH
// result := array ;
59114: LD_ADDR_VAR 0 3
59118: PUSH
59119: LD_VAR 0 1
59123: ST_TO_ADDR
// if size > 0 then
59124: LD_VAR 0 2
59128: PUSH
59129: LD_INT 0
59131: GREATER
59132: IFFALSE 59178
// for i := array downto size do
59134: LD_ADDR_VAR 0 4
59138: PUSH
59139: DOUBLE
59140: LD_VAR 0 1
59144: INC
59145: ST_TO_ADDR
59146: LD_VAR 0 2
59150: PUSH
59151: FOR_DOWNTO
59152: IFFALSE 59176
// result := Delete ( result , result ) ;
59154: LD_ADDR_VAR 0 3
59158: PUSH
59159: LD_VAR 0 3
59163: PPUSH
59164: LD_VAR 0 3
59168: PPUSH
59169: CALL_OW 3
59173: ST_TO_ADDR
59174: GO 59151
59176: POP
59177: POP
// end ;
59178: LD_VAR 0 3
59182: RET
// export function ComExit ( unit ) ; var tmp ; begin
59183: LD_INT 0
59185: PPUSH
59186: PPUSH
// if not IsInUnit ( unit ) then
59187: LD_VAR 0 1
59191: PPUSH
59192: CALL_OW 310
59196: NOT
59197: IFFALSE 59201
// exit ;
59199: GO 59261
// tmp := IsInUnit ( unit ) ;
59201: LD_ADDR_VAR 0 3
59205: PUSH
59206: LD_VAR 0 1
59210: PPUSH
59211: CALL_OW 310
59215: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59216: LD_VAR 0 3
59220: PPUSH
59221: CALL_OW 247
59225: PUSH
59226: LD_INT 2
59228: EQUAL
59229: IFFALSE 59242
// ComExitVehicle ( unit ) else
59231: LD_VAR 0 1
59235: PPUSH
59236: CALL_OW 121
59240: GO 59251
// ComExitBuilding ( unit ) ;
59242: LD_VAR 0 1
59246: PPUSH
59247: CALL_OW 122
// result := tmp ;
59251: LD_ADDR_VAR 0 2
59255: PUSH
59256: LD_VAR 0 3
59260: ST_TO_ADDR
// end ;
59261: LD_VAR 0 2
59265: RET
// export function ComExitAll ( units ) ; var i ; begin
59266: LD_INT 0
59268: PPUSH
59269: PPUSH
// if not units then
59270: LD_VAR 0 1
59274: NOT
59275: IFFALSE 59279
// exit ;
59277: GO 59305
// for i in units do
59279: LD_ADDR_VAR 0 3
59283: PUSH
59284: LD_VAR 0 1
59288: PUSH
59289: FOR_IN
59290: IFFALSE 59303
// ComExit ( i ) ;
59292: LD_VAR 0 3
59296: PPUSH
59297: CALL 59183 0 1
59301: GO 59289
59303: POP
59304: POP
// end ;
59305: LD_VAR 0 2
59309: RET
// export function ResetHc ; begin
59310: LD_INT 0
59312: PPUSH
// InitHc ;
59313: CALL_OW 19
// hc_importance := 0 ;
59317: LD_ADDR_OWVAR 32
59321: PUSH
59322: LD_INT 0
59324: ST_TO_ADDR
// end ;
59325: LD_VAR 0 1
59329: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59330: LD_INT 0
59332: PPUSH
59333: PPUSH
59334: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59335: LD_ADDR_VAR 0 6
59339: PUSH
59340: LD_VAR 0 1
59344: PUSH
59345: LD_VAR 0 3
59349: PLUS
59350: PUSH
59351: LD_INT 2
59353: DIV
59354: ST_TO_ADDR
// if _x < 0 then
59355: LD_VAR 0 6
59359: PUSH
59360: LD_INT 0
59362: LESS
59363: IFFALSE 59380
// _x := _x * - 1 ;
59365: LD_ADDR_VAR 0 6
59369: PUSH
59370: LD_VAR 0 6
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: MUL
59379: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59380: LD_ADDR_VAR 0 7
59384: PUSH
59385: LD_VAR 0 2
59389: PUSH
59390: LD_VAR 0 4
59394: PLUS
59395: PUSH
59396: LD_INT 2
59398: DIV
59399: ST_TO_ADDR
// if _y < 0 then
59400: LD_VAR 0 7
59404: PUSH
59405: LD_INT 0
59407: LESS
59408: IFFALSE 59425
// _y := _y * - 1 ;
59410: LD_ADDR_VAR 0 7
59414: PUSH
59415: LD_VAR 0 7
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: MUL
59424: ST_TO_ADDR
// result := [ _x , _y ] ;
59425: LD_ADDR_VAR 0 5
59429: PUSH
59430: LD_VAR 0 6
59434: PUSH
59435: LD_VAR 0 7
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// end ;
59444: LD_VAR 0 5
59448: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59449: LD_INT 0
59451: PPUSH
59452: PPUSH
59453: PPUSH
59454: PPUSH
// task := GetTaskList ( unit ) ;
59455: LD_ADDR_VAR 0 7
59459: PUSH
59460: LD_VAR 0 1
59464: PPUSH
59465: CALL_OW 437
59469: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59470: LD_VAR 0 7
59474: NOT
59475: PUSH
59476: LD_VAR 0 1
59480: PPUSH
59481: LD_VAR 0 2
59485: PPUSH
59486: CALL_OW 308
59490: NOT
59491: AND
59492: IFFALSE 59496
// exit ;
59494: GO 59614
// if IsInArea ( unit , area ) then
59496: LD_VAR 0 1
59500: PPUSH
59501: LD_VAR 0 2
59505: PPUSH
59506: CALL_OW 308
59510: IFFALSE 59528
// begin ComMoveToArea ( unit , goAway ) ;
59512: LD_VAR 0 1
59516: PPUSH
59517: LD_VAR 0 3
59521: PPUSH
59522: CALL_OW 113
// exit ;
59526: GO 59614
// end ; if task [ 1 ] [ 1 ] <> M then
59528: LD_VAR 0 7
59532: PUSH
59533: LD_INT 1
59535: ARRAY
59536: PUSH
59537: LD_INT 1
59539: ARRAY
59540: PUSH
59541: LD_STRING M
59543: NONEQUAL
59544: IFFALSE 59548
// exit ;
59546: GO 59614
// x := task [ 1 ] [ 2 ] ;
59548: LD_ADDR_VAR 0 5
59552: PUSH
59553: LD_VAR 0 7
59557: PUSH
59558: LD_INT 1
59560: ARRAY
59561: PUSH
59562: LD_INT 2
59564: ARRAY
59565: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59566: LD_ADDR_VAR 0 6
59570: PUSH
59571: LD_VAR 0 7
59575: PUSH
59576: LD_INT 1
59578: ARRAY
59579: PUSH
59580: LD_INT 3
59582: ARRAY
59583: ST_TO_ADDR
// if InArea ( x , y , area ) then
59584: LD_VAR 0 5
59588: PPUSH
59589: LD_VAR 0 6
59593: PPUSH
59594: LD_VAR 0 2
59598: PPUSH
59599: CALL_OW 309
59603: IFFALSE 59614
// ComStop ( unit ) ;
59605: LD_VAR 0 1
59609: PPUSH
59610: CALL_OW 141
// end ;
59614: LD_VAR 0 4
59618: RET
// export function Abs ( value ) ; begin
59619: LD_INT 0
59621: PPUSH
// result := value ;
59622: LD_ADDR_VAR 0 2
59626: PUSH
59627: LD_VAR 0 1
59631: ST_TO_ADDR
// if value < 0 then
59632: LD_VAR 0 1
59636: PUSH
59637: LD_INT 0
59639: LESS
59640: IFFALSE 59657
// result := value * - 1 ;
59642: LD_ADDR_VAR 0 2
59646: PUSH
59647: LD_VAR 0 1
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: MUL
59656: ST_TO_ADDR
// end ;
59657: LD_VAR 0 2
59661: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59662: LD_INT 0
59664: PPUSH
59665: PPUSH
59666: PPUSH
59667: PPUSH
59668: PPUSH
59669: PPUSH
59670: PPUSH
59671: PPUSH
// if not unit or not building then
59672: LD_VAR 0 1
59676: NOT
59677: PUSH
59678: LD_VAR 0 2
59682: NOT
59683: OR
59684: IFFALSE 59688
// exit ;
59686: GO 59914
// x := GetX ( building ) ;
59688: LD_ADDR_VAR 0 4
59692: PUSH
59693: LD_VAR 0 2
59697: PPUSH
59698: CALL_OW 250
59702: ST_TO_ADDR
// y := GetY ( building ) ;
59703: LD_ADDR_VAR 0 6
59707: PUSH
59708: LD_VAR 0 2
59712: PPUSH
59713: CALL_OW 251
59717: ST_TO_ADDR
// d := GetDir ( building ) ;
59718: LD_ADDR_VAR 0 8
59722: PUSH
59723: LD_VAR 0 2
59727: PPUSH
59728: CALL_OW 254
59732: ST_TO_ADDR
// r := 4 ;
59733: LD_ADDR_VAR 0 9
59737: PUSH
59738: LD_INT 4
59740: ST_TO_ADDR
// for i := 1 to 5 do
59741: LD_ADDR_VAR 0 10
59745: PUSH
59746: DOUBLE
59747: LD_INT 1
59749: DEC
59750: ST_TO_ADDR
59751: LD_INT 5
59753: PUSH
59754: FOR_TO
59755: IFFALSE 59912
// begin _x := ShiftX ( x , d , r + i ) ;
59757: LD_ADDR_VAR 0 5
59761: PUSH
59762: LD_VAR 0 4
59766: PPUSH
59767: LD_VAR 0 8
59771: PPUSH
59772: LD_VAR 0 9
59776: PUSH
59777: LD_VAR 0 10
59781: PLUS
59782: PPUSH
59783: CALL_OW 272
59787: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59788: LD_ADDR_VAR 0 7
59792: PUSH
59793: LD_VAR 0 6
59797: PPUSH
59798: LD_VAR 0 8
59802: PPUSH
59803: LD_VAR 0 9
59807: PUSH
59808: LD_VAR 0 10
59812: PLUS
59813: PPUSH
59814: CALL_OW 273
59818: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59819: LD_VAR 0 5
59823: PPUSH
59824: LD_VAR 0 7
59828: PPUSH
59829: CALL_OW 488
59833: PUSH
59834: LD_VAR 0 5
59838: PPUSH
59839: LD_VAR 0 7
59843: PPUSH
59844: CALL_OW 428
59848: PPUSH
59849: CALL_OW 247
59853: PUSH
59854: LD_INT 3
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: IN
59864: NOT
59865: AND
59866: IFFALSE 59910
// begin ComMoveXY ( unit , _x , _y ) ;
59868: LD_VAR 0 1
59872: PPUSH
59873: LD_VAR 0 5
59877: PPUSH
59878: LD_VAR 0 7
59882: PPUSH
59883: CALL_OW 111
// result := [ _x , _y ] ;
59887: LD_ADDR_VAR 0 3
59891: PUSH
59892: LD_VAR 0 5
59896: PUSH
59897: LD_VAR 0 7
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: ST_TO_ADDR
// exit ;
59906: POP
59907: POP
59908: GO 59914
// end ; end ;
59910: GO 59754
59912: POP
59913: POP
// end ;
59914: LD_VAR 0 3
59918: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59919: LD_INT 0
59921: PPUSH
59922: PPUSH
59923: PPUSH
// result := 0 ;
59924: LD_ADDR_VAR 0 3
59928: PUSH
59929: LD_INT 0
59931: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59932: LD_VAR 0 1
59936: PUSH
59937: LD_INT 0
59939: LESS
59940: PUSH
59941: LD_VAR 0 1
59945: PUSH
59946: LD_INT 8
59948: GREATER
59949: OR
59950: PUSH
59951: LD_VAR 0 2
59955: PUSH
59956: LD_INT 0
59958: LESS
59959: OR
59960: PUSH
59961: LD_VAR 0 2
59965: PUSH
59966: LD_INT 8
59968: GREATER
59969: OR
59970: IFFALSE 59974
// exit ;
59972: GO 60049
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59974: LD_ADDR_VAR 0 4
59978: PUSH
59979: LD_INT 22
59981: PUSH
59982: LD_VAR 0 2
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PPUSH
59991: CALL_OW 69
59995: PUSH
59996: FOR_IN
59997: IFFALSE 60047
// begin un := UnitShoot ( i ) ;
59999: LD_ADDR_VAR 0 5
60003: PUSH
60004: LD_VAR 0 4
60008: PPUSH
60009: CALL_OW 504
60013: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60014: LD_VAR 0 5
60018: PPUSH
60019: CALL_OW 255
60023: PUSH
60024: LD_VAR 0 1
60028: EQUAL
60029: IFFALSE 60045
// begin result := un ;
60031: LD_ADDR_VAR 0 3
60035: PUSH
60036: LD_VAR 0 5
60040: ST_TO_ADDR
// exit ;
60041: POP
60042: POP
60043: GO 60049
// end ; end ;
60045: GO 59996
60047: POP
60048: POP
// end ;
60049: LD_VAR 0 3
60053: RET
// export function GetCargoBay ( units ) ; begin
60054: LD_INT 0
60056: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60057: LD_ADDR_VAR 0 2
60061: PUSH
60062: LD_VAR 0 1
60066: PPUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 34
60072: PUSH
60073: LD_INT 12
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 34
60082: PUSH
60083: LD_INT 51
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 34
60092: PUSH
60093: LD_INT 32
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 34
60102: PUSH
60103: LD_EXP 83
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: PPUSH
60119: CALL_OW 72
60123: ST_TO_ADDR
// end ; end_of_file
60124: LD_VAR 0 2
60128: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
60129: LD_VAR 0 1
60133: PPUSH
60134: LD_VAR 0 2
60138: PPUSH
60139: LD_VAR 0 3
60143: PPUSH
60144: LD_VAR 0 4
60148: PPUSH
60149: LD_VAR 0 5
60153: PPUSH
60154: LD_VAR 0 6
60158: PPUSH
60159: CALL 4963 0 6
// end ;
60163: PPOPN 6
60165: END
