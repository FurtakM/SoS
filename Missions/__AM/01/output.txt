// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4963: LD_INT 0
4965: PPUSH
// if p2 = 100 then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 100
4973: EQUAL
4974: IFFALSE 5923
// begin if not StreamModeActive then
4976: LD_EXP 15
4980: NOT
4981: IFFALSE 4991
// StreamModeActive := true ;
4983: LD_ADDR_EXP 15
4987: PUSH
4988: LD_INT 1
4990: ST_TO_ADDR
// if p3 = 0 then
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 0
4998: EQUAL
4999: IFFALSE 5005
// InitStreamMode ;
5001: CALL 6083 0 0
// if p3 = 1 then
5005: LD_VAR 0 3
5009: PUSH
5010: LD_INT 1
5012: EQUAL
5013: IFFALSE 5023
// sRocket := true ;
5015: LD_ADDR_EXP 20
5019: PUSH
5020: LD_INT 1
5022: ST_TO_ADDR
// if p3 = 2 then
5023: LD_VAR 0 3
5027: PUSH
5028: LD_INT 2
5030: EQUAL
5031: IFFALSE 5041
// sSpeed := true ;
5033: LD_ADDR_EXP 19
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// if p3 = 3 then
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 3
5048: EQUAL
5049: IFFALSE 5059
// sEngine := true ;
5051: LD_ADDR_EXP 21
5055: PUSH
5056: LD_INT 1
5058: ST_TO_ADDR
// if p3 = 4 then
5059: LD_VAR 0 3
5063: PUSH
5064: LD_INT 4
5066: EQUAL
5067: IFFALSE 5077
// sSpec := true ;
5069: LD_ADDR_EXP 18
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// if p3 = 5 then
5077: LD_VAR 0 3
5081: PUSH
5082: LD_INT 5
5084: EQUAL
5085: IFFALSE 5095
// sLevel := true ;
5087: LD_ADDR_EXP 22
5091: PUSH
5092: LD_INT 1
5094: ST_TO_ADDR
// if p3 = 6 then
5095: LD_VAR 0 3
5099: PUSH
5100: LD_INT 6
5102: EQUAL
5103: IFFALSE 5113
// sArmoury := true ;
5105: LD_ADDR_EXP 23
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// if p3 = 7 then
5113: LD_VAR 0 3
5117: PUSH
5118: LD_INT 7
5120: EQUAL
5121: IFFALSE 5131
// sRadar := true ;
5123: LD_ADDR_EXP 24
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// if p3 = 8 then
5131: LD_VAR 0 3
5135: PUSH
5136: LD_INT 8
5138: EQUAL
5139: IFFALSE 5149
// sBunker := true ;
5141: LD_ADDR_EXP 25
5145: PUSH
5146: LD_INT 1
5148: ST_TO_ADDR
// if p3 = 9 then
5149: LD_VAR 0 3
5153: PUSH
5154: LD_INT 9
5156: EQUAL
5157: IFFALSE 5167
// sHack := true ;
5159: LD_ADDR_EXP 26
5163: PUSH
5164: LD_INT 1
5166: ST_TO_ADDR
// if p3 = 10 then
5167: LD_VAR 0 3
5171: PUSH
5172: LD_INT 10
5174: EQUAL
5175: IFFALSE 5185
// sFire := true ;
5177: LD_ADDR_EXP 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// if p3 = 11 then
5185: LD_VAR 0 3
5189: PUSH
5190: LD_INT 11
5192: EQUAL
5193: IFFALSE 5203
// sRefresh := true ;
5195: LD_ADDR_EXP 28
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if p3 = 12 then
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 12
5210: EQUAL
5211: IFFALSE 5221
// sExp := true ;
5213: LD_ADDR_EXP 29
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// if p3 = 13 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 13
5228: EQUAL
5229: IFFALSE 5239
// sDepot := true ;
5231: LD_ADDR_EXP 30
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// if p3 = 14 then
5239: LD_VAR 0 3
5243: PUSH
5244: LD_INT 14
5246: EQUAL
5247: IFFALSE 5257
// sFlag := true ;
5249: LD_ADDR_EXP 31
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// if p3 = 15 then
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 15
5264: EQUAL
5265: IFFALSE 5275
// sKamikadze := true ;
5267: LD_ADDR_EXP 39
5271: PUSH
5272: LD_INT 1
5274: ST_TO_ADDR
// if p3 = 16 then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_INT 16
5282: EQUAL
5283: IFFALSE 5293
// sTroll := true ;
5285: LD_ADDR_EXP 40
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// if p3 = 17 then
5293: LD_VAR 0 3
5297: PUSH
5298: LD_INT 17
5300: EQUAL
5301: IFFALSE 5311
// sSlow := true ;
5303: LD_ADDR_EXP 41
5307: PUSH
5308: LD_INT 1
5310: ST_TO_ADDR
// if p3 = 18 then
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 18
5318: EQUAL
5319: IFFALSE 5329
// sLack := true ;
5321: LD_ADDR_EXP 42
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// if p3 = 19 then
5329: LD_VAR 0 3
5333: PUSH
5334: LD_INT 19
5336: EQUAL
5337: IFFALSE 5347
// sTank := true ;
5339: LD_ADDR_EXP 44
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// if p3 = 20 then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 20
5354: EQUAL
5355: IFFALSE 5365
// sRemote := true ;
5357: LD_ADDR_EXP 45
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// if p3 = 21 then
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 21
5372: EQUAL
5373: IFFALSE 5383
// sPowell := true ;
5375: LD_ADDR_EXP 46
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// if p3 = 22 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 22
5390: EQUAL
5391: IFFALSE 5401
// sTeleport := true ;
5393: LD_ADDR_EXP 49
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// if p3 = 23 then
5401: LD_VAR 0 3
5405: PUSH
5406: LD_INT 23
5408: EQUAL
5409: IFFALSE 5419
// sOilTower := true ;
5411: LD_ADDR_EXP 51
5415: PUSH
5416: LD_INT 1
5418: ST_TO_ADDR
// if p3 = 24 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 24
5426: EQUAL
5427: IFFALSE 5437
// sShovel := true ;
5429: LD_ADDR_EXP 52
5433: PUSH
5434: LD_INT 1
5436: ST_TO_ADDR
// if p3 = 25 then
5437: LD_VAR 0 3
5441: PUSH
5442: LD_INT 25
5444: EQUAL
5445: IFFALSE 5455
// sSheik := true ;
5447: LD_ADDR_EXP 53
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if p3 = 26 then
5455: LD_VAR 0 3
5459: PUSH
5460: LD_INT 26
5462: EQUAL
5463: IFFALSE 5473
// sEarthquake := true ;
5465: LD_ADDR_EXP 55
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// if p3 = 27 then
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 27
5480: EQUAL
5481: IFFALSE 5491
// sAI := true ;
5483: LD_ADDR_EXP 56
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// if p3 = 28 then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 28
5498: EQUAL
5499: IFFALSE 5509
// sCargo := true ;
5501: LD_ADDR_EXP 59
5505: PUSH
5506: LD_INT 1
5508: ST_TO_ADDR
// if p3 = 29 then
5509: LD_VAR 0 3
5513: PUSH
5514: LD_INT 29
5516: EQUAL
5517: IFFALSE 5527
// sDLaser := true ;
5519: LD_ADDR_EXP 60
5523: PUSH
5524: LD_INT 1
5526: ST_TO_ADDR
// if p3 = 30 then
5527: LD_VAR 0 3
5531: PUSH
5532: LD_INT 30
5534: EQUAL
5535: IFFALSE 5545
// sExchange := true ;
5537: LD_ADDR_EXP 61
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// if p3 = 31 then
5545: LD_VAR 0 3
5549: PUSH
5550: LD_INT 31
5552: EQUAL
5553: IFFALSE 5563
// sFac := true ;
5555: LD_ADDR_EXP 62
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// if p3 = 32 then
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 32
5570: EQUAL
5571: IFFALSE 5581
// sPower := true ;
5573: LD_ADDR_EXP 63
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if p3 = 33 then
5581: LD_VAR 0 3
5585: PUSH
5586: LD_INT 33
5588: EQUAL
5589: IFFALSE 5599
// sRandom := true ;
5591: LD_ADDR_EXP 64
5595: PUSH
5596: LD_INT 1
5598: ST_TO_ADDR
// if p3 = 34 then
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 34
5606: EQUAL
5607: IFFALSE 5617
// sShield := true ;
5609: LD_ADDR_EXP 65
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// if p3 = 35 then
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 35
5624: EQUAL
5625: IFFALSE 5635
// sTime := true ;
5627: LD_ADDR_EXP 66
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// if p3 = 36 then
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 36
5642: EQUAL
5643: IFFALSE 5653
// sTools := true ;
5645: LD_ADDR_EXP 67
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// if p3 = 101 then
5653: LD_VAR 0 3
5657: PUSH
5658: LD_INT 101
5660: EQUAL
5661: IFFALSE 5671
// sSold := true ;
5663: LD_ADDR_EXP 32
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// if p3 = 102 then
5671: LD_VAR 0 3
5675: PUSH
5676: LD_INT 102
5678: EQUAL
5679: IFFALSE 5689
// sDiff := true ;
5681: LD_ADDR_EXP 33
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// if p3 = 103 then
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 103
5696: EQUAL
5697: IFFALSE 5707
// sFog := true ;
5699: LD_ADDR_EXP 36
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
// if p3 = 104 then
5707: LD_VAR 0 3
5711: PUSH
5712: LD_INT 104
5714: EQUAL
5715: IFFALSE 5725
// sReset := true ;
5717: LD_ADDR_EXP 37
5721: PUSH
5722: LD_INT 1
5724: ST_TO_ADDR
// if p3 = 105 then
5725: LD_VAR 0 3
5729: PUSH
5730: LD_INT 105
5732: EQUAL
5733: IFFALSE 5743
// sSun := true ;
5735: LD_ADDR_EXP 38
5739: PUSH
5740: LD_INT 1
5742: ST_TO_ADDR
// if p3 = 106 then
5743: LD_VAR 0 3
5747: PUSH
5748: LD_INT 106
5750: EQUAL
5751: IFFALSE 5761
// sTiger := true ;
5753: LD_ADDR_EXP 34
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// if p3 = 107 then
5761: LD_VAR 0 3
5765: PUSH
5766: LD_INT 107
5768: EQUAL
5769: IFFALSE 5779
// sBomb := true ;
5771: LD_ADDR_EXP 35
5775: PUSH
5776: LD_INT 1
5778: ST_TO_ADDR
// if p3 = 108 then
5779: LD_VAR 0 3
5783: PUSH
5784: LD_INT 108
5786: EQUAL
5787: IFFALSE 5797
// sWound := true ;
5789: LD_ADDR_EXP 43
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// if p3 = 109 then
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 109
5804: EQUAL
5805: IFFALSE 5815
// sBetray := true ;
5807: LD_ADDR_EXP 47
5811: PUSH
5812: LD_INT 1
5814: ST_TO_ADDR
// if p3 = 110 then
5815: LD_VAR 0 3
5819: PUSH
5820: LD_INT 110
5822: EQUAL
5823: IFFALSE 5833
// sContamin := true ;
5825: LD_ADDR_EXP 48
5829: PUSH
5830: LD_INT 1
5832: ST_TO_ADDR
// if p3 = 111 then
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 111
5840: EQUAL
5841: IFFALSE 5851
// sOil := true ;
5843: LD_ADDR_EXP 50
5847: PUSH
5848: LD_INT 1
5850: ST_TO_ADDR
// if p3 = 112 then
5851: LD_VAR 0 3
5855: PUSH
5856: LD_INT 112
5858: EQUAL
5859: IFFALSE 5869
// sStu := true ;
5861: LD_ADDR_EXP 54
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// if p3 = 113 then
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 113
5876: EQUAL
5877: IFFALSE 5887
// sBazooka := true ;
5879: LD_ADDR_EXP 57
5883: PUSH
5884: LD_INT 1
5886: ST_TO_ADDR
// if p3 = 114 then
5887: LD_VAR 0 3
5891: PUSH
5892: LD_INT 114
5894: EQUAL
5895: IFFALSE 5905
// sMortar := true ;
5897: LD_ADDR_EXP 58
5901: PUSH
5902: LD_INT 1
5904: ST_TO_ADDR
// if p3 = 115 then
5905: LD_VAR 0 3
5909: PUSH
5910: LD_INT 115
5912: EQUAL
5913: IFFALSE 5923
// sRanger := true ;
5915: LD_ADDR_EXP 68
5919: PUSH
5920: LD_INT 1
5922: ST_TO_ADDR
// end ; if p2 = 101 then
5923: LD_VAR 0 2
5927: PUSH
5928: LD_INT 101
5930: EQUAL
5931: IFFALSE 6059
// begin case p3 of 1 :
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 1
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 5953
5946: POP
// hHackUnlimitedResources ; 2 :
5947: CALL 17096 0 0
5951: GO 6059
5953: LD_INT 2
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5961
5959: GO 5968
5961: POP
// hHackSetLevel10 ; 3 :
5962: CALL 17229 0 0
5966: GO 6059
5968: LD_INT 3
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 5976
5974: GO 5983
5976: POP
// hHackSetLevel10YourUnits ; 4 :
5977: CALL 17314 0 0
5981: GO 6059
5983: LD_INT 4
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5991
5989: GO 5998
5991: POP
// hHackInvincible ; 5 :
5992: CALL 17762 0 0
5996: GO 6059
5998: LD_INT 5
6000: DOUBLE
6001: EQUAL
6002: IFTRUE 6006
6004: GO 6013
6006: POP
// hHackInvisible ; 6 :
6007: CALL 17873 0 0
6011: GO 6059
6013: LD_INT 6
6015: DOUBLE
6016: EQUAL
6017: IFTRUE 6021
6019: GO 6028
6021: POP
// hHackChangeYourSide ; 7 :
6022: CALL 17930 0 0
6026: GO 6059
6028: LD_INT 7
6030: DOUBLE
6031: EQUAL
6032: IFTRUE 6036
6034: GO 6043
6036: POP
// hHackChangeUnitSide ; 8 :
6037: CALL 17972 0 0
6041: GO 6059
6043: LD_INT 8
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6058
6051: POP
// hHackFog ; end ;
6052: CALL 18073 0 0
6056: GO 6059
6058: POP
// end ; end ;
6059: LD_VAR 0 7
6063: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6064: GO 6066
6066: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6067: LD_STRING initStreamRollete();
6069: PPUSH
6070: CALL_OW 559
// InitStreamMode ;
6074: CALL 6083 0 0
// DefineStreamItems ( ) ;
6078: CALL 6523 0 0
// end ;
6082: END
// function InitStreamMode ; begin
6083: LD_INT 0
6085: PPUSH
// streamModeActive := false ;
6086: LD_ADDR_EXP 15
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// normalCounter := 36 ;
6094: LD_ADDR_EXP 16
6098: PUSH
6099: LD_INT 36
6101: ST_TO_ADDR
// hardcoreCounter := 16 ;
6102: LD_ADDR_EXP 17
6106: PUSH
6107: LD_INT 16
6109: ST_TO_ADDR
// sRocket := false ;
6110: LD_ADDR_EXP 20
6114: PUSH
6115: LD_INT 0
6117: ST_TO_ADDR
// sSpeed := false ;
6118: LD_ADDR_EXP 19
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// sEngine := false ;
6126: LD_ADDR_EXP 21
6130: PUSH
6131: LD_INT 0
6133: ST_TO_ADDR
// sSpec := false ;
6134: LD_ADDR_EXP 18
6138: PUSH
6139: LD_INT 0
6141: ST_TO_ADDR
// sLevel := false ;
6142: LD_ADDR_EXP 22
6146: PUSH
6147: LD_INT 0
6149: ST_TO_ADDR
// sArmoury := false ;
6150: LD_ADDR_EXP 23
6154: PUSH
6155: LD_INT 0
6157: ST_TO_ADDR
// sRadar := false ;
6158: LD_ADDR_EXP 24
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// sBunker := false ;
6166: LD_ADDR_EXP 25
6170: PUSH
6171: LD_INT 0
6173: ST_TO_ADDR
// sHack := false ;
6174: LD_ADDR_EXP 26
6178: PUSH
6179: LD_INT 0
6181: ST_TO_ADDR
// sFire := false ;
6182: LD_ADDR_EXP 27
6186: PUSH
6187: LD_INT 0
6189: ST_TO_ADDR
// sRefresh := false ;
6190: LD_ADDR_EXP 28
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// sExp := false ;
6198: LD_ADDR_EXP 29
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// sDepot := false ;
6206: LD_ADDR_EXP 30
6210: PUSH
6211: LD_INT 0
6213: ST_TO_ADDR
// sFlag := false ;
6214: LD_ADDR_EXP 31
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// sKamikadze := false ;
6222: LD_ADDR_EXP 39
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// sTroll := false ;
6230: LD_ADDR_EXP 40
6234: PUSH
6235: LD_INT 0
6237: ST_TO_ADDR
// sSlow := false ;
6238: LD_ADDR_EXP 41
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// sLack := false ;
6246: LD_ADDR_EXP 42
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// sTank := false ;
6254: LD_ADDR_EXP 44
6258: PUSH
6259: LD_INT 0
6261: ST_TO_ADDR
// sRemote := false ;
6262: LD_ADDR_EXP 45
6266: PUSH
6267: LD_INT 0
6269: ST_TO_ADDR
// sPowell := false ;
6270: LD_ADDR_EXP 46
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// sTeleport := false ;
6278: LD_ADDR_EXP 49
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
// sOilTower := false ;
6286: LD_ADDR_EXP 51
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// sShovel := false ;
6294: LD_ADDR_EXP 52
6298: PUSH
6299: LD_INT 0
6301: ST_TO_ADDR
// sSheik := false ;
6302: LD_ADDR_EXP 53
6306: PUSH
6307: LD_INT 0
6309: ST_TO_ADDR
// sEarthquake := false ;
6310: LD_ADDR_EXP 55
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// sAI := false ;
6318: LD_ADDR_EXP 56
6322: PUSH
6323: LD_INT 0
6325: ST_TO_ADDR
// sCargo := false ;
6326: LD_ADDR_EXP 59
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// sDLaser := false ;
6334: LD_ADDR_EXP 60
6338: PUSH
6339: LD_INT 0
6341: ST_TO_ADDR
// sExchange := false ;
6342: LD_ADDR_EXP 61
6346: PUSH
6347: LD_INT 0
6349: ST_TO_ADDR
// sFac := false ;
6350: LD_ADDR_EXP 62
6354: PUSH
6355: LD_INT 0
6357: ST_TO_ADDR
// sPower := false ;
6358: LD_ADDR_EXP 63
6362: PUSH
6363: LD_INT 0
6365: ST_TO_ADDR
// sRandom := false ;
6366: LD_ADDR_EXP 64
6370: PUSH
6371: LD_INT 0
6373: ST_TO_ADDR
// sShield := false ;
6374: LD_ADDR_EXP 65
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// sTime := false ;
6382: LD_ADDR_EXP 66
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// sTools := false ;
6390: LD_ADDR_EXP 67
6394: PUSH
6395: LD_INT 0
6397: ST_TO_ADDR
// sSold := false ;
6398: LD_ADDR_EXP 32
6402: PUSH
6403: LD_INT 0
6405: ST_TO_ADDR
// sDiff := false ;
6406: LD_ADDR_EXP 33
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// sFog := false ;
6414: LD_ADDR_EXP 36
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// sReset := false ;
6422: LD_ADDR_EXP 37
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// sSun := false ;
6430: LD_ADDR_EXP 38
6434: PUSH
6435: LD_INT 0
6437: ST_TO_ADDR
// sTiger := false ;
6438: LD_ADDR_EXP 34
6442: PUSH
6443: LD_INT 0
6445: ST_TO_ADDR
// sBomb := false ;
6446: LD_ADDR_EXP 35
6450: PUSH
6451: LD_INT 0
6453: ST_TO_ADDR
// sWound := false ;
6454: LD_ADDR_EXP 43
6458: PUSH
6459: LD_INT 0
6461: ST_TO_ADDR
// sBetray := false ;
6462: LD_ADDR_EXP 47
6466: PUSH
6467: LD_INT 0
6469: ST_TO_ADDR
// sContamin := false ;
6470: LD_ADDR_EXP 48
6474: PUSH
6475: LD_INT 0
6477: ST_TO_ADDR
// sOil := false ;
6478: LD_ADDR_EXP 50
6482: PUSH
6483: LD_INT 0
6485: ST_TO_ADDR
// sStu := false ;
6486: LD_ADDR_EXP 54
6490: PUSH
6491: LD_INT 0
6493: ST_TO_ADDR
// sBazooka := false ;
6494: LD_ADDR_EXP 57
6498: PUSH
6499: LD_INT 0
6501: ST_TO_ADDR
// sMortar := false ;
6502: LD_ADDR_EXP 58
6506: PUSH
6507: LD_INT 0
6509: ST_TO_ADDR
// sRanger := false ;
6510: LD_ADDR_EXP 68
6514: PUSH
6515: LD_INT 0
6517: ST_TO_ADDR
// end ;
6518: LD_VAR 0 1
6522: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6523: LD_INT 0
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
6529: PPUSH
// result := [ ] ;
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: EMPTY
6536: ST_TO_ADDR
// if campaign_id = 1 then
6537: LD_OWVAR 69
6541: PUSH
6542: LD_INT 1
6544: EQUAL
6545: IFFALSE 9483
// begin case mission_number of 1 :
6547: LD_OWVAR 70
6551: PUSH
6552: LD_INT 1
6554: DOUBLE
6555: EQUAL
6556: IFTRUE 6560
6558: GO 6624
6560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6561: LD_ADDR_VAR 0 1
6565: PUSH
6566: LD_INT 2
6568: PUSH
6569: LD_INT 4
6571: PUSH
6572: LD_INT 11
6574: PUSH
6575: LD_INT 12
6577: PUSH
6578: LD_INT 15
6580: PUSH
6581: LD_INT 16
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 23
6589: PUSH
6590: LD_INT 26
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 101
6606: PUSH
6607: LD_INT 102
6609: PUSH
6610: LD_INT 106
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: ST_TO_ADDR
6622: GO 9481
6624: LD_INT 2
6626: DOUBLE
6627: EQUAL
6628: IFTRUE 6632
6630: GO 6704
6632: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6633: LD_ADDR_VAR 0 1
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: LD_INT 4
6643: PUSH
6644: LD_INT 11
6646: PUSH
6647: LD_INT 12
6649: PUSH
6650: LD_INT 15
6652: PUSH
6653: LD_INT 16
6655: PUSH
6656: LD_INT 22
6658: PUSH
6659: LD_INT 23
6661: PUSH
6662: LD_INT 26
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 101
6678: PUSH
6679: LD_INT 102
6681: PUSH
6682: LD_INT 105
6684: PUSH
6685: LD_INT 106
6687: PUSH
6688: LD_INT 108
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: ST_TO_ADDR
6702: GO 9481
6704: LD_INT 3
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6712
6710: GO 6788
6712: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: LD_INT 4
6723: PUSH
6724: LD_INT 5
6726: PUSH
6727: LD_INT 11
6729: PUSH
6730: LD_INT 12
6732: PUSH
6733: LD_INT 15
6735: PUSH
6736: LD_INT 16
6738: PUSH
6739: LD_INT 22
6741: PUSH
6742: LD_INT 26
6744: PUSH
6745: LD_INT 36
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 101
6762: PUSH
6763: LD_INT 102
6765: PUSH
6766: LD_INT 105
6768: PUSH
6769: LD_INT 106
6771: PUSH
6772: LD_INT 108
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: ST_TO_ADDR
6786: GO 9481
6788: LD_INT 4
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6796
6794: GO 6880
6796: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6797: LD_ADDR_VAR 0 1
6801: PUSH
6802: LD_INT 2
6804: PUSH
6805: LD_INT 4
6807: PUSH
6808: LD_INT 5
6810: PUSH
6811: LD_INT 8
6813: PUSH
6814: LD_INT 11
6816: PUSH
6817: LD_INT 12
6819: PUSH
6820: LD_INT 15
6822: PUSH
6823: LD_INT 16
6825: PUSH
6826: LD_INT 22
6828: PUSH
6829: LD_INT 23
6831: PUSH
6832: LD_INT 26
6834: PUSH
6835: LD_INT 36
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 101
6854: PUSH
6855: LD_INT 102
6857: PUSH
6858: LD_INT 105
6860: PUSH
6861: LD_INT 106
6863: PUSH
6864: LD_INT 108
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 9481
6880: LD_INT 5
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6988
6888: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6889: LD_ADDR_VAR 0 1
6893: PUSH
6894: LD_INT 2
6896: PUSH
6897: LD_INT 4
6899: PUSH
6900: LD_INT 5
6902: PUSH
6903: LD_INT 6
6905: PUSH
6906: LD_INT 8
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 15
6917: PUSH
6918: LD_INT 16
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_INT 23
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 26
6932: PUSH
6933: LD_INT 36
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 101
6954: PUSH
6955: LD_INT 102
6957: PUSH
6958: LD_INT 105
6960: PUSH
6961: LD_INT 106
6963: PUSH
6964: LD_INT 108
6966: PUSH
6967: LD_INT 109
6969: PUSH
6970: LD_INT 112
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: ST_TO_ADDR
6986: GO 9481
6988: LD_INT 6
6990: DOUBLE
6991: EQUAL
6992: IFTRUE 6996
6994: GO 7116
6996: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6997: LD_ADDR_VAR 0 1
7001: PUSH
7002: LD_INT 2
7004: PUSH
7005: LD_INT 4
7007: PUSH
7008: LD_INT 5
7010: PUSH
7011: LD_INT 6
7013: PUSH
7014: LD_INT 8
7016: PUSH
7017: LD_INT 11
7019: PUSH
7020: LD_INT 12
7022: PUSH
7023: LD_INT 15
7025: PUSH
7026: LD_INT 16
7028: PUSH
7029: LD_INT 20
7031: PUSH
7032: LD_INT 21
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 23
7040: PUSH
7041: LD_INT 25
7043: PUSH
7044: LD_INT 26
7046: PUSH
7047: LD_INT 30
7049: PUSH
7050: LD_INT 31
7052: PUSH
7053: LD_INT 32
7055: PUSH
7056: LD_INT 36
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 101
7082: PUSH
7083: LD_INT 102
7085: PUSH
7086: LD_INT 105
7088: PUSH
7089: LD_INT 106
7091: PUSH
7092: LD_INT 108
7094: PUSH
7095: LD_INT 109
7097: PUSH
7098: LD_INT 112
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: ST_TO_ADDR
7114: GO 9481
7116: LD_INT 7
7118: DOUBLE
7119: EQUAL
7120: IFTRUE 7124
7122: GO 7224
7124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7125: LD_ADDR_VAR 0 1
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: LD_INT 4
7135: PUSH
7136: LD_INT 5
7138: PUSH
7139: LD_INT 7
7141: PUSH
7142: LD_INT 11
7144: PUSH
7145: LD_INT 12
7147: PUSH
7148: LD_INT 15
7150: PUSH
7151: LD_INT 16
7153: PUSH
7154: LD_INT 20
7156: PUSH
7157: LD_INT 21
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_INT 23
7165: PUSH
7166: LD_INT 25
7168: PUSH
7169: LD_INT 26
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 101
7190: PUSH
7191: LD_INT 102
7193: PUSH
7194: LD_INT 103
7196: PUSH
7197: LD_INT 105
7199: PUSH
7200: LD_INT 106
7202: PUSH
7203: LD_INT 108
7205: PUSH
7206: LD_INT 112
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: ST_TO_ADDR
7222: GO 9481
7224: LD_INT 8
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7360
7232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: LD_INT 4
7243: PUSH
7244: LD_INT 5
7246: PUSH
7247: LD_INT 6
7249: PUSH
7250: LD_INT 7
7252: PUSH
7253: LD_INT 8
7255: PUSH
7256: LD_INT 11
7258: PUSH
7259: LD_INT 12
7261: PUSH
7262: LD_INT 15
7264: PUSH
7265: LD_INT 16
7267: PUSH
7268: LD_INT 20
7270: PUSH
7271: LD_INT 21
7273: PUSH
7274: LD_INT 22
7276: PUSH
7277: LD_INT 23
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 26
7285: PUSH
7286: LD_INT 30
7288: PUSH
7289: LD_INT 31
7291: PUSH
7292: LD_INT 32
7294: PUSH
7295: LD_INT 36
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 101
7322: PUSH
7323: LD_INT 102
7325: PUSH
7326: LD_INT 103
7328: PUSH
7329: LD_INT 105
7331: PUSH
7332: LD_INT 106
7334: PUSH
7335: LD_INT 108
7337: PUSH
7338: LD_INT 109
7340: PUSH
7341: LD_INT 112
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: ST_TO_ADDR
7358: GO 9481
7360: LD_INT 9
7362: DOUBLE
7363: EQUAL
7364: IFTRUE 7368
7366: GO 7504
7368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7369: LD_ADDR_VAR 0 1
7373: PUSH
7374: LD_INT 2
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 6
7385: PUSH
7386: LD_INT 7
7388: PUSH
7389: LD_INT 8
7391: PUSH
7392: LD_INT 11
7394: PUSH
7395: LD_INT 12
7397: PUSH
7398: LD_INT 15
7400: PUSH
7401: LD_INT 16
7403: PUSH
7404: LD_INT 20
7406: PUSH
7407: LD_INT 21
7409: PUSH
7410: LD_INT 22
7412: PUSH
7413: LD_INT 23
7415: PUSH
7416: LD_INT 25
7418: PUSH
7419: LD_INT 26
7421: PUSH
7422: LD_INT 28
7424: PUSH
7425: LD_INT 30
7427: PUSH
7428: LD_INT 31
7430: PUSH
7431: LD_INT 32
7433: PUSH
7434: LD_INT 36
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 101
7462: PUSH
7463: LD_INT 102
7465: PUSH
7466: LD_INT 103
7468: PUSH
7469: LD_INT 105
7471: PUSH
7472: LD_INT 106
7474: PUSH
7475: LD_INT 108
7477: PUSH
7478: LD_INT 109
7480: PUSH
7481: LD_INT 112
7483: PUSH
7484: LD_INT 114
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: ST_TO_ADDR
7502: GO 9481
7504: LD_INT 10
7506: DOUBLE
7507: EQUAL
7508: IFTRUE 7512
7510: GO 7696
7512: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: LD_INT 4
7523: PUSH
7524: LD_INT 5
7526: PUSH
7527: LD_INT 6
7529: PUSH
7530: LD_INT 7
7532: PUSH
7533: LD_INT 8
7535: PUSH
7536: LD_INT 9
7538: PUSH
7539: LD_INT 10
7541: PUSH
7542: LD_INT 11
7544: PUSH
7545: LD_INT 12
7547: PUSH
7548: LD_INT 13
7550: PUSH
7551: LD_INT 14
7553: PUSH
7554: LD_INT 15
7556: PUSH
7557: LD_INT 16
7559: PUSH
7560: LD_INT 17
7562: PUSH
7563: LD_INT 18
7565: PUSH
7566: LD_INT 19
7568: PUSH
7569: LD_INT 20
7571: PUSH
7572: LD_INT 21
7574: PUSH
7575: LD_INT 22
7577: PUSH
7578: LD_INT 23
7580: PUSH
7581: LD_INT 24
7583: PUSH
7584: LD_INT 25
7586: PUSH
7587: LD_INT 26
7589: PUSH
7590: LD_INT 28
7592: PUSH
7593: LD_INT 30
7595: PUSH
7596: LD_INT 31
7598: PUSH
7599: LD_INT 32
7601: PUSH
7602: LD_INT 36
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 101
7638: PUSH
7639: LD_INT 102
7641: PUSH
7642: LD_INT 103
7644: PUSH
7645: LD_INT 104
7647: PUSH
7648: LD_INT 105
7650: PUSH
7651: LD_INT 106
7653: PUSH
7654: LD_INT 107
7656: PUSH
7657: LD_INT 108
7659: PUSH
7660: LD_INT 109
7662: PUSH
7663: LD_INT 110
7665: PUSH
7666: LD_INT 111
7668: PUSH
7669: LD_INT 112
7671: PUSH
7672: LD_INT 114
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: ST_TO_ADDR
7694: GO 9481
7696: LD_INT 11
7698: DOUBLE
7699: EQUAL
7700: IFTRUE 7704
7702: GO 7896
7704: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7705: LD_ADDR_VAR 0 1
7709: PUSH
7710: LD_INT 2
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 4
7718: PUSH
7719: LD_INT 5
7721: PUSH
7722: LD_INT 6
7724: PUSH
7725: LD_INT 7
7727: PUSH
7728: LD_INT 8
7730: PUSH
7731: LD_INT 9
7733: PUSH
7734: LD_INT 10
7736: PUSH
7737: LD_INT 11
7739: PUSH
7740: LD_INT 12
7742: PUSH
7743: LD_INT 13
7745: PUSH
7746: LD_INT 14
7748: PUSH
7749: LD_INT 15
7751: PUSH
7752: LD_INT 16
7754: PUSH
7755: LD_INT 17
7757: PUSH
7758: LD_INT 18
7760: PUSH
7761: LD_INT 19
7763: PUSH
7764: LD_INT 20
7766: PUSH
7767: LD_INT 21
7769: PUSH
7770: LD_INT 22
7772: PUSH
7773: LD_INT 23
7775: PUSH
7776: LD_INT 24
7778: PUSH
7779: LD_INT 25
7781: PUSH
7782: LD_INT 26
7784: PUSH
7785: LD_INT 28
7787: PUSH
7788: LD_INT 30
7790: PUSH
7791: LD_INT 31
7793: PUSH
7794: LD_INT 32
7796: PUSH
7797: LD_INT 34
7799: PUSH
7800: LD_INT 36
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 101
7838: PUSH
7839: LD_INT 102
7841: PUSH
7842: LD_INT 103
7844: PUSH
7845: LD_INT 104
7847: PUSH
7848: LD_INT 105
7850: PUSH
7851: LD_INT 106
7853: PUSH
7854: LD_INT 107
7856: PUSH
7857: LD_INT 108
7859: PUSH
7860: LD_INT 109
7862: PUSH
7863: LD_INT 110
7865: PUSH
7866: LD_INT 111
7868: PUSH
7869: LD_INT 112
7871: PUSH
7872: LD_INT 114
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: ST_TO_ADDR
7894: GO 9481
7896: LD_INT 12
7898: DOUBLE
7899: EQUAL
7900: IFTRUE 7904
7902: GO 8112
7904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: LD_INT 4
7921: PUSH
7922: LD_INT 5
7924: PUSH
7925: LD_INT 6
7927: PUSH
7928: LD_INT 7
7930: PUSH
7931: LD_INT 8
7933: PUSH
7934: LD_INT 9
7936: PUSH
7937: LD_INT 10
7939: PUSH
7940: LD_INT 11
7942: PUSH
7943: LD_INT 12
7945: PUSH
7946: LD_INT 13
7948: PUSH
7949: LD_INT 14
7951: PUSH
7952: LD_INT 15
7954: PUSH
7955: LD_INT 16
7957: PUSH
7958: LD_INT 17
7960: PUSH
7961: LD_INT 18
7963: PUSH
7964: LD_INT 19
7966: PUSH
7967: LD_INT 20
7969: PUSH
7970: LD_INT 21
7972: PUSH
7973: LD_INT 22
7975: PUSH
7976: LD_INT 23
7978: PUSH
7979: LD_INT 24
7981: PUSH
7982: LD_INT 25
7984: PUSH
7985: LD_INT 26
7987: PUSH
7988: LD_INT 27
7990: PUSH
7991: LD_INT 28
7993: PUSH
7994: LD_INT 30
7996: PUSH
7997: LD_INT 31
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: LD_INT 33
8005: PUSH
8006: LD_INT 34
8008: PUSH
8009: LD_INT 36
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 101
8050: PUSH
8051: LD_INT 102
8053: PUSH
8054: LD_INT 103
8056: PUSH
8057: LD_INT 104
8059: PUSH
8060: LD_INT 105
8062: PUSH
8063: LD_INT 106
8065: PUSH
8066: LD_INT 107
8068: PUSH
8069: LD_INT 108
8071: PUSH
8072: LD_INT 109
8074: PUSH
8075: LD_INT 110
8077: PUSH
8078: LD_INT 111
8080: PUSH
8081: LD_INT 112
8083: PUSH
8084: LD_INT 113
8086: PUSH
8087: LD_INT 114
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: ST_TO_ADDR
8110: GO 9481
8112: LD_INT 13
8114: DOUBLE
8115: EQUAL
8116: IFTRUE 8120
8118: GO 8316
8120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8121: LD_ADDR_VAR 0 1
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 4
8137: PUSH
8138: LD_INT 5
8140: PUSH
8141: LD_INT 8
8143: PUSH
8144: LD_INT 9
8146: PUSH
8147: LD_INT 10
8149: PUSH
8150: LD_INT 11
8152: PUSH
8153: LD_INT 12
8155: PUSH
8156: LD_INT 14
8158: PUSH
8159: LD_INT 15
8161: PUSH
8162: LD_INT 16
8164: PUSH
8165: LD_INT 17
8167: PUSH
8168: LD_INT 18
8170: PUSH
8171: LD_INT 19
8173: PUSH
8174: LD_INT 20
8176: PUSH
8177: LD_INT 21
8179: PUSH
8180: LD_INT 22
8182: PUSH
8183: LD_INT 23
8185: PUSH
8186: LD_INT 24
8188: PUSH
8189: LD_INT 25
8191: PUSH
8192: LD_INT 26
8194: PUSH
8195: LD_INT 27
8197: PUSH
8198: LD_INT 28
8200: PUSH
8201: LD_INT 30
8203: PUSH
8204: LD_INT 31
8206: PUSH
8207: LD_INT 32
8209: PUSH
8210: LD_INT 33
8212: PUSH
8213: LD_INT 34
8215: PUSH
8216: LD_INT 36
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 101
8254: PUSH
8255: LD_INT 102
8257: PUSH
8258: LD_INT 103
8260: PUSH
8261: LD_INT 104
8263: PUSH
8264: LD_INT 105
8266: PUSH
8267: LD_INT 106
8269: PUSH
8270: LD_INT 107
8272: PUSH
8273: LD_INT 108
8275: PUSH
8276: LD_INT 109
8278: PUSH
8279: LD_INT 110
8281: PUSH
8282: LD_INT 111
8284: PUSH
8285: LD_INT 112
8287: PUSH
8288: LD_INT 113
8290: PUSH
8291: LD_INT 114
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: ST_TO_ADDR
8314: GO 9481
8316: LD_INT 14
8318: DOUBLE
8319: EQUAL
8320: IFTRUE 8324
8322: GO 8536
8324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_INT 1
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 4
8341: PUSH
8342: LD_INT 5
8344: PUSH
8345: LD_INT 6
8347: PUSH
8348: LD_INT 7
8350: PUSH
8351: LD_INT 8
8353: PUSH
8354: LD_INT 9
8356: PUSH
8357: LD_INT 10
8359: PUSH
8360: LD_INT 11
8362: PUSH
8363: LD_INT 12
8365: PUSH
8366: LD_INT 13
8368: PUSH
8369: LD_INT 14
8371: PUSH
8372: LD_INT 15
8374: PUSH
8375: LD_INT 16
8377: PUSH
8378: LD_INT 17
8380: PUSH
8381: LD_INT 18
8383: PUSH
8384: LD_INT 19
8386: PUSH
8387: LD_INT 20
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_INT 23
8398: PUSH
8399: LD_INT 24
8401: PUSH
8402: LD_INT 25
8404: PUSH
8405: LD_INT 26
8407: PUSH
8408: LD_INT 27
8410: PUSH
8411: LD_INT 28
8413: PUSH
8414: LD_INT 29
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 31
8422: PUSH
8423: LD_INT 32
8425: PUSH
8426: LD_INT 33
8428: PUSH
8429: LD_INT 34
8431: PUSH
8432: LD_INT 36
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 101
8474: PUSH
8475: LD_INT 102
8477: PUSH
8478: LD_INT 103
8480: PUSH
8481: LD_INT 104
8483: PUSH
8484: LD_INT 105
8486: PUSH
8487: LD_INT 106
8489: PUSH
8490: LD_INT 107
8492: PUSH
8493: LD_INT 108
8495: PUSH
8496: LD_INT 109
8498: PUSH
8499: LD_INT 110
8501: PUSH
8502: LD_INT 111
8504: PUSH
8505: LD_INT 112
8507: PUSH
8508: LD_INT 113
8510: PUSH
8511: LD_INT 114
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: ST_TO_ADDR
8534: GO 9481
8536: LD_INT 15
8538: DOUBLE
8539: EQUAL
8540: IFTRUE 8544
8542: GO 8756
8544: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8545: LD_ADDR_VAR 0 1
8549: PUSH
8550: LD_INT 1
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 4
8561: PUSH
8562: LD_INT 5
8564: PUSH
8565: LD_INT 6
8567: PUSH
8568: LD_INT 7
8570: PUSH
8571: LD_INT 8
8573: PUSH
8574: LD_INT 9
8576: PUSH
8577: LD_INT 10
8579: PUSH
8580: LD_INT 11
8582: PUSH
8583: LD_INT 12
8585: PUSH
8586: LD_INT 13
8588: PUSH
8589: LD_INT 14
8591: PUSH
8592: LD_INT 15
8594: PUSH
8595: LD_INT 16
8597: PUSH
8598: LD_INT 17
8600: PUSH
8601: LD_INT 18
8603: PUSH
8604: LD_INT 19
8606: PUSH
8607: LD_INT 20
8609: PUSH
8610: LD_INT 21
8612: PUSH
8613: LD_INT 22
8615: PUSH
8616: LD_INT 23
8618: PUSH
8619: LD_INT 24
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 26
8627: PUSH
8628: LD_INT 27
8630: PUSH
8631: LD_INT 28
8633: PUSH
8634: LD_INT 29
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 31
8642: PUSH
8643: LD_INT 32
8645: PUSH
8646: LD_INT 33
8648: PUSH
8649: LD_INT 34
8651: PUSH
8652: LD_INT 36
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 101
8694: PUSH
8695: LD_INT 102
8697: PUSH
8698: LD_INT 103
8700: PUSH
8701: LD_INT 104
8703: PUSH
8704: LD_INT 105
8706: PUSH
8707: LD_INT 106
8709: PUSH
8710: LD_INT 107
8712: PUSH
8713: LD_INT 108
8715: PUSH
8716: LD_INT 109
8718: PUSH
8719: LD_INT 110
8721: PUSH
8722: LD_INT 111
8724: PUSH
8725: LD_INT 112
8727: PUSH
8728: LD_INT 113
8730: PUSH
8731: LD_INT 114
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: ST_TO_ADDR
8754: GO 9481
8756: LD_INT 16
8758: DOUBLE
8759: EQUAL
8760: IFTRUE 8764
8762: GO 8888
8764: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: LD_INT 2
8772: PUSH
8773: LD_INT 4
8775: PUSH
8776: LD_INT 5
8778: PUSH
8779: LD_INT 7
8781: PUSH
8782: LD_INT 11
8784: PUSH
8785: LD_INT 12
8787: PUSH
8788: LD_INT 15
8790: PUSH
8791: LD_INT 16
8793: PUSH
8794: LD_INT 20
8796: PUSH
8797: LD_INT 21
8799: PUSH
8800: LD_INT 22
8802: PUSH
8803: LD_INT 23
8805: PUSH
8806: LD_INT 25
8808: PUSH
8809: LD_INT 26
8811: PUSH
8812: LD_INT 30
8814: PUSH
8815: LD_INT 31
8817: PUSH
8818: LD_INT 32
8820: PUSH
8821: LD_INT 33
8823: PUSH
8824: LD_INT 34
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 101
8850: PUSH
8851: LD_INT 102
8853: PUSH
8854: LD_INT 103
8856: PUSH
8857: LD_INT 106
8859: PUSH
8860: LD_INT 108
8862: PUSH
8863: LD_INT 112
8865: PUSH
8866: LD_INT 113
8868: PUSH
8869: LD_INT 114
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: ST_TO_ADDR
8886: GO 9481
8888: LD_INT 17
8890: DOUBLE
8891: EQUAL
8892: IFTRUE 8896
8894: GO 9108
8896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8897: LD_ADDR_VAR 0 1
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: LD_INT 4
8913: PUSH
8914: LD_INT 5
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: LD_INT 7
8922: PUSH
8923: LD_INT 8
8925: PUSH
8926: LD_INT 9
8928: PUSH
8929: LD_INT 10
8931: PUSH
8932: LD_INT 11
8934: PUSH
8935: LD_INT 12
8937: PUSH
8938: LD_INT 13
8940: PUSH
8941: LD_INT 14
8943: PUSH
8944: LD_INT 15
8946: PUSH
8947: LD_INT 16
8949: PUSH
8950: LD_INT 17
8952: PUSH
8953: LD_INT 18
8955: PUSH
8956: LD_INT 19
8958: PUSH
8959: LD_INT 20
8961: PUSH
8962: LD_INT 21
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 23
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 26
8979: PUSH
8980: LD_INT 27
8982: PUSH
8983: LD_INT 28
8985: PUSH
8986: LD_INT 29
8988: PUSH
8989: LD_INT 30
8991: PUSH
8992: LD_INT 31
8994: PUSH
8995: LD_INT 32
8997: PUSH
8998: LD_INT 33
9000: PUSH
9001: LD_INT 34
9003: PUSH
9004: LD_INT 36
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 101
9046: PUSH
9047: LD_INT 102
9049: PUSH
9050: LD_INT 103
9052: PUSH
9053: LD_INT 104
9055: PUSH
9056: LD_INT 105
9058: PUSH
9059: LD_INT 106
9061: PUSH
9062: LD_INT 107
9064: PUSH
9065: LD_INT 108
9067: PUSH
9068: LD_INT 109
9070: PUSH
9071: LD_INT 110
9073: PUSH
9074: LD_INT 111
9076: PUSH
9077: LD_INT 112
9079: PUSH
9080: LD_INT 113
9082: PUSH
9083: LD_INT 114
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: ST_TO_ADDR
9106: GO 9481
9108: LD_INT 18
9110: DOUBLE
9111: EQUAL
9112: IFTRUE 9116
9114: GO 9252
9116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9117: LD_ADDR_VAR 0 1
9121: PUSH
9122: LD_INT 2
9124: PUSH
9125: LD_INT 4
9127: PUSH
9128: LD_INT 5
9130: PUSH
9131: LD_INT 7
9133: PUSH
9134: LD_INT 11
9136: PUSH
9137: LD_INT 12
9139: PUSH
9140: LD_INT 15
9142: PUSH
9143: LD_INT 16
9145: PUSH
9146: LD_INT 20
9148: PUSH
9149: LD_INT 21
9151: PUSH
9152: LD_INT 22
9154: PUSH
9155: LD_INT 23
9157: PUSH
9158: LD_INT 25
9160: PUSH
9161: LD_INT 26
9163: PUSH
9164: LD_INT 30
9166: PUSH
9167: LD_INT 31
9169: PUSH
9170: LD_INT 32
9172: PUSH
9173: LD_INT 33
9175: PUSH
9176: LD_INT 34
9178: PUSH
9179: LD_INT 35
9181: PUSH
9182: LD_INT 36
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 101
9210: PUSH
9211: LD_INT 102
9213: PUSH
9214: LD_INT 103
9216: PUSH
9217: LD_INT 106
9219: PUSH
9220: LD_INT 108
9222: PUSH
9223: LD_INT 112
9225: PUSH
9226: LD_INT 113
9228: PUSH
9229: LD_INT 114
9231: PUSH
9232: LD_INT 115
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: ST_TO_ADDR
9250: GO 9481
9252: LD_INT 19
9254: DOUBLE
9255: EQUAL
9256: IFTRUE 9260
9258: GO 9480
9260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9261: LD_ADDR_VAR 0 1
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: LD_INT 3
9274: PUSH
9275: LD_INT 4
9277: PUSH
9278: LD_INT 5
9280: PUSH
9281: LD_INT 6
9283: PUSH
9284: LD_INT 7
9286: PUSH
9287: LD_INT 8
9289: PUSH
9290: LD_INT 9
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: LD_INT 11
9298: PUSH
9299: LD_INT 12
9301: PUSH
9302: LD_INT 13
9304: PUSH
9305: LD_INT 14
9307: PUSH
9308: LD_INT 15
9310: PUSH
9311: LD_INT 16
9313: PUSH
9314: LD_INT 17
9316: PUSH
9317: LD_INT 18
9319: PUSH
9320: LD_INT 19
9322: PUSH
9323: LD_INT 20
9325: PUSH
9326: LD_INT 21
9328: PUSH
9329: LD_INT 22
9331: PUSH
9332: LD_INT 23
9334: PUSH
9335: LD_INT 24
9337: PUSH
9338: LD_INT 25
9340: PUSH
9341: LD_INT 26
9343: PUSH
9344: LD_INT 27
9346: PUSH
9347: LD_INT 28
9349: PUSH
9350: LD_INT 29
9352: PUSH
9353: LD_INT 30
9355: PUSH
9356: LD_INT 31
9358: PUSH
9359: LD_INT 32
9361: PUSH
9362: LD_INT 33
9364: PUSH
9365: LD_INT 34
9367: PUSH
9368: LD_INT 35
9370: PUSH
9371: LD_INT 36
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 101
9414: PUSH
9415: LD_INT 102
9417: PUSH
9418: LD_INT 103
9420: PUSH
9421: LD_INT 104
9423: PUSH
9424: LD_INT 105
9426: PUSH
9427: LD_INT 106
9429: PUSH
9430: LD_INT 107
9432: PUSH
9433: LD_INT 108
9435: PUSH
9436: LD_INT 109
9438: PUSH
9439: LD_INT 110
9441: PUSH
9442: LD_INT 111
9444: PUSH
9445: LD_INT 112
9447: PUSH
9448: LD_INT 113
9450: PUSH
9451: LD_INT 114
9453: PUSH
9454: LD_INT 115
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: ST_TO_ADDR
9478: GO 9481
9480: POP
// end else
9481: GO 9700
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9483: LD_ADDR_VAR 0 1
9487: PUSH
9488: LD_INT 1
9490: PUSH
9491: LD_INT 2
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: LD_INT 4
9499: PUSH
9500: LD_INT 5
9502: PUSH
9503: LD_INT 6
9505: PUSH
9506: LD_INT 7
9508: PUSH
9509: LD_INT 8
9511: PUSH
9512: LD_INT 9
9514: PUSH
9515: LD_INT 10
9517: PUSH
9518: LD_INT 11
9520: PUSH
9521: LD_INT 12
9523: PUSH
9524: LD_INT 13
9526: PUSH
9527: LD_INT 14
9529: PUSH
9530: LD_INT 15
9532: PUSH
9533: LD_INT 16
9535: PUSH
9536: LD_INT 17
9538: PUSH
9539: LD_INT 18
9541: PUSH
9542: LD_INT 19
9544: PUSH
9545: LD_INT 20
9547: PUSH
9548: LD_INT 21
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_INT 23
9556: PUSH
9557: LD_INT 24
9559: PUSH
9560: LD_INT 25
9562: PUSH
9563: LD_INT 26
9565: PUSH
9566: LD_INT 27
9568: PUSH
9569: LD_INT 28
9571: PUSH
9572: LD_INT 29
9574: PUSH
9575: LD_INT 30
9577: PUSH
9578: LD_INT 31
9580: PUSH
9581: LD_INT 32
9583: PUSH
9584: LD_INT 33
9586: PUSH
9587: LD_INT 34
9589: PUSH
9590: LD_INT 35
9592: PUSH
9593: LD_INT 36
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 101
9636: PUSH
9637: LD_INT 102
9639: PUSH
9640: LD_INT 103
9642: PUSH
9643: LD_INT 104
9645: PUSH
9646: LD_INT 105
9648: PUSH
9649: LD_INT 106
9651: PUSH
9652: LD_INT 107
9654: PUSH
9655: LD_INT 108
9657: PUSH
9658: LD_INT 109
9660: PUSH
9661: LD_INT 110
9663: PUSH
9664: LD_INT 111
9666: PUSH
9667: LD_INT 112
9669: PUSH
9670: LD_INT 113
9672: PUSH
9673: LD_INT 114
9675: PUSH
9676: LD_INT 115
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: ST_TO_ADDR
// if result then
9700: LD_VAR 0 1
9704: IFFALSE 9993
// begin normal :=  ;
9706: LD_ADDR_VAR 0 3
9710: PUSH
9711: LD_STRING 
9713: ST_TO_ADDR
// hardcore :=  ;
9714: LD_ADDR_VAR 0 4
9718: PUSH
9719: LD_STRING 
9721: ST_TO_ADDR
// for i = 1 to normalCounter do
9722: LD_ADDR_VAR 0 5
9726: PUSH
9727: DOUBLE
9728: LD_INT 1
9730: DEC
9731: ST_TO_ADDR
9732: LD_EXP 16
9736: PUSH
9737: FOR_TO
9738: IFFALSE 9839
// begin tmp := 0 ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_STRING 0
9747: ST_TO_ADDR
// if result [ 1 ] then
9748: LD_VAR 0 1
9752: PUSH
9753: LD_INT 1
9755: ARRAY
9756: IFFALSE 9821
// if result [ 1 ] [ 1 ] = i then
9758: LD_VAR 0 1
9762: PUSH
9763: LD_INT 1
9765: ARRAY
9766: PUSH
9767: LD_INT 1
9769: ARRAY
9770: PUSH
9771: LD_VAR 0 5
9775: EQUAL
9776: IFFALSE 9821
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9778: LD_ADDR_VAR 0 1
9782: PUSH
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: LD_VAR 0 1
9795: PUSH
9796: LD_INT 1
9798: ARRAY
9799: PPUSH
9800: LD_INT 1
9802: PPUSH
9803: CALL_OW 3
9807: PPUSH
9808: CALL_OW 1
9812: ST_TO_ADDR
// tmp := 1 ;
9813: LD_ADDR_VAR 0 2
9817: PUSH
9818: LD_STRING 1
9820: ST_TO_ADDR
// end ; normal := normal & tmp ;
9821: LD_ADDR_VAR 0 3
9825: PUSH
9826: LD_VAR 0 3
9830: PUSH
9831: LD_VAR 0 2
9835: STR
9836: ST_TO_ADDR
// end ;
9837: GO 9737
9839: POP
9840: POP
// for i = 1 to hardcoreCounter do
9841: LD_ADDR_VAR 0 5
9845: PUSH
9846: DOUBLE
9847: LD_INT 1
9849: DEC
9850: ST_TO_ADDR
9851: LD_EXP 17
9855: PUSH
9856: FOR_TO
9857: IFFALSE 9962
// begin tmp := 0 ;
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: LD_STRING 0
9866: ST_TO_ADDR
// if result [ 2 ] then
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 2
9874: ARRAY
9875: IFFALSE 9944
// if result [ 2 ] [ 1 ] = 100 + i then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_INT 2
9884: ARRAY
9885: PUSH
9886: LD_INT 1
9888: ARRAY
9889: PUSH
9890: LD_INT 100
9892: PUSH
9893: LD_VAR 0 5
9897: PLUS
9898: EQUAL
9899: IFFALSE 9944
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9901: LD_ADDR_VAR 0 1
9905: PUSH
9906: LD_VAR 0 1
9910: PPUSH
9911: LD_INT 2
9913: PPUSH
9914: LD_VAR 0 1
9918: PUSH
9919: LD_INT 2
9921: ARRAY
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL_OW 3
9930: PPUSH
9931: CALL_OW 1
9935: ST_TO_ADDR
// tmp := 1 ;
9936: LD_ADDR_VAR 0 2
9940: PUSH
9941: LD_STRING 1
9943: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9944: LD_ADDR_VAR 0 4
9948: PUSH
9949: LD_VAR 0 4
9953: PUSH
9954: LD_VAR 0 2
9958: STR
9959: ST_TO_ADDR
// end ;
9960: GO 9856
9962: POP
9963: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9964: LD_STRING getStreamItemsFromMission("
9966: PUSH
9967: LD_VAR 0 3
9971: STR
9972: PUSH
9973: LD_STRING ","
9975: STR
9976: PUSH
9977: LD_VAR 0 4
9981: STR
9982: PUSH
9983: LD_STRING ")
9985: STR
9986: PPUSH
9987: CALL_OW 559
// end else
9991: GO 10000
// ToLua ( getStreamItemsFromMission("","") ) ;
9993: LD_STRING getStreamItemsFromMission("","")
9995: PPUSH
9996: CALL_OW 559
// end ;
10000: LD_VAR 0 1
10004: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10005: LD_EXP 15
10009: PUSH
10010: LD_EXP 20
10014: AND
10015: IFFALSE 10139
10017: GO 10019
10019: DISABLE
10020: LD_INT 0
10022: PPUSH
10023: PPUSH
// begin enable ;
10024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10025: LD_ADDR_VAR 0 2
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_OWVAR 2
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: LD_INT 34
10047: PUSH
10048: LD_INT 7
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 45
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 34
10067: PUSH
10068: LD_INT 28
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 34
10077: PUSH
10078: LD_INT 47
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 69
10100: ST_TO_ADDR
// if not tmp then
10101: LD_VAR 0 2
10105: NOT
10106: IFFALSE 10110
// exit ;
10108: GO 10139
// for i in tmp do
10110: LD_ADDR_VAR 0 1
10114: PUSH
10115: LD_VAR 0 2
10119: PUSH
10120: FOR_IN
10121: IFFALSE 10137
// begin SetLives ( i , 0 ) ;
10123: LD_VAR 0 1
10127: PPUSH
10128: LD_INT 0
10130: PPUSH
10131: CALL_OW 234
// end ;
10135: GO 10120
10137: POP
10138: POP
// end ;
10139: PPOPN 2
10141: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10142: LD_EXP 15
10146: PUSH
10147: LD_EXP 21
10151: AND
10152: IFFALSE 10236
10154: GO 10156
10156: DISABLE
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
// begin enable ;
10161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_OWVAR 2
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 32
10181: PUSH
10182: LD_INT 3
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PPUSH
10193: CALL_OW 69
10197: ST_TO_ADDR
// if not tmp then
10198: LD_VAR 0 2
10202: NOT
10203: IFFALSE 10207
// exit ;
10205: GO 10236
// for i in tmp do
10207: LD_ADDR_VAR 0 1
10211: PUSH
10212: LD_VAR 0 2
10216: PUSH
10217: FOR_IN
10218: IFFALSE 10234
// begin SetLives ( i , 0 ) ;
10220: LD_VAR 0 1
10224: PPUSH
10225: LD_INT 0
10227: PPUSH
10228: CALL_OW 234
// end ;
10232: GO 10217
10234: POP
10235: POP
// end ;
10236: PPOPN 2
10238: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10239: LD_EXP 15
10243: PUSH
10244: LD_EXP 18
10248: AND
10249: IFFALSE 10342
10251: GO 10253
10253: DISABLE
10254: LD_INT 0
10256: PPUSH
// begin enable ;
10257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10258: LD_ADDR_VAR 0 1
10262: PUSH
10263: LD_INT 22
10265: PUSH
10266: LD_OWVAR 2
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: LD_INT 25
10280: PUSH
10281: LD_INT 5
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 25
10290: PUSH
10291: LD_INT 9
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 25
10300: PUSH
10301: LD_INT 8
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: PUSH
10323: FOR_IN
10324: IFFALSE 10340
// begin SetClass ( i , 1 ) ;
10326: LD_VAR 0 1
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 336
// end ;
10338: GO 10323
10340: POP
10341: POP
// end ;
10342: PPOPN 1
10344: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10345: LD_EXP 15
10349: PUSH
10350: LD_EXP 19
10354: AND
10355: PUSH
10356: LD_OWVAR 65
10360: PUSH
10361: LD_INT 7
10363: LESS
10364: AND
10365: IFFALSE 10379
10367: GO 10369
10369: DISABLE
// begin enable ;
10370: ENABLE
// game_speed := 7 ;
10371: LD_ADDR_OWVAR 65
10375: PUSH
10376: LD_INT 7
10378: ST_TO_ADDR
// end ;
10379: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10380: LD_EXP 15
10384: PUSH
10385: LD_EXP 22
10389: AND
10390: IFFALSE 10592
10392: GO 10394
10394: DISABLE
10395: LD_INT 0
10397: PPUSH
10398: PPUSH
10399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10400: LD_ADDR_VAR 0 3
10404: PUSH
10405: LD_INT 81
10407: PUSH
10408: LD_OWVAR 2
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 21
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 69
10435: ST_TO_ADDR
// if not tmp then
10436: LD_VAR 0 3
10440: NOT
10441: IFFALSE 10445
// exit ;
10443: GO 10592
// if tmp > 5 then
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 5
10452: GREATER
10453: IFFALSE 10465
// k := 5 else
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: LD_INT 5
10462: ST_TO_ADDR
10463: GO 10475
// k := tmp ;
10465: LD_ADDR_VAR 0 2
10469: PUSH
10470: LD_VAR 0 3
10474: ST_TO_ADDR
// for i := 1 to k do
10475: LD_ADDR_VAR 0 1
10479: PUSH
10480: DOUBLE
10481: LD_INT 1
10483: DEC
10484: ST_TO_ADDR
10485: LD_VAR 0 2
10489: PUSH
10490: FOR_TO
10491: IFFALSE 10590
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10493: LD_VAR 0 3
10497: PUSH
10498: LD_VAR 0 1
10502: ARRAY
10503: PPUSH
10504: LD_VAR 0 1
10508: PUSH
10509: LD_INT 4
10511: MOD
10512: PUSH
10513: LD_INT 1
10515: PLUS
10516: PPUSH
10517: CALL_OW 259
10521: PUSH
10522: LD_INT 10
10524: LESS
10525: IFFALSE 10588
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10527: LD_VAR 0 3
10531: PUSH
10532: LD_VAR 0 1
10536: ARRAY
10537: PPUSH
10538: LD_VAR 0 1
10542: PUSH
10543: LD_INT 4
10545: MOD
10546: PUSH
10547: LD_INT 1
10549: PLUS
10550: PPUSH
10551: LD_VAR 0 3
10555: PUSH
10556: LD_VAR 0 1
10560: ARRAY
10561: PPUSH
10562: LD_VAR 0 1
10566: PUSH
10567: LD_INT 4
10569: MOD
10570: PUSH
10571: LD_INT 1
10573: PLUS
10574: PPUSH
10575: CALL_OW 259
10579: PUSH
10580: LD_INT 1
10582: PLUS
10583: PPUSH
10584: CALL_OW 237
10588: GO 10490
10590: POP
10591: POP
// end ;
10592: PPOPN 3
10594: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10595: LD_EXP 15
10599: PUSH
10600: LD_EXP 23
10604: AND
10605: IFFALSE 10625
10607: GO 10609
10609: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10610: LD_INT 4
10612: PPUSH
10613: LD_OWVAR 2
10617: PPUSH
10618: LD_INT 0
10620: PPUSH
10621: CALL_OW 324
10625: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10626: LD_EXP 15
10630: PUSH
10631: LD_EXP 52
10635: AND
10636: IFFALSE 10656
10638: GO 10640
10640: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10641: LD_INT 19
10643: PPUSH
10644: LD_OWVAR 2
10648: PPUSH
10649: LD_INT 0
10651: PPUSH
10652: CALL_OW 324
10656: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10657: LD_EXP 15
10661: PUSH
10662: LD_EXP 24
10666: AND
10667: IFFALSE 10769
10669: GO 10671
10671: DISABLE
10672: LD_INT 0
10674: PPUSH
10675: PPUSH
// begin enable ;
10676: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_OWVAR 2
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 34
10699: PUSH
10700: LD_INT 11
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 34
10709: PUSH
10710: LD_INT 30
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: ST_TO_ADDR
// if not tmp then
10731: LD_VAR 0 2
10735: NOT
10736: IFFALSE 10740
// exit ;
10738: GO 10769
// for i in tmp do
10740: LD_ADDR_VAR 0 1
10744: PUSH
10745: LD_VAR 0 2
10749: PUSH
10750: FOR_IN
10751: IFFALSE 10767
// begin SetLives ( i , 0 ) ;
10753: LD_VAR 0 1
10757: PPUSH
10758: LD_INT 0
10760: PPUSH
10761: CALL_OW 234
// end ;
10765: GO 10750
10767: POP
10768: POP
// end ;
10769: PPOPN 2
10771: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10772: LD_EXP 15
10776: PUSH
10777: LD_EXP 25
10781: AND
10782: IFFALSE 10802
10784: GO 10786
10786: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10787: LD_INT 32
10789: PPUSH
10790: LD_OWVAR 2
10794: PPUSH
10795: LD_INT 0
10797: PPUSH
10798: CALL_OW 324
10802: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10803: LD_EXP 15
10807: PUSH
10808: LD_EXP 26
10812: AND
10813: IFFALSE 10994
10815: GO 10817
10817: DISABLE
10818: LD_INT 0
10820: PPUSH
10821: PPUSH
10822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_INT 22
10830: PUSH
10831: LD_OWVAR 2
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 33
10842: PUSH
10843: LD_INT 3
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: ST_TO_ADDR
// if not tmp then
10859: LD_VAR 0 2
10863: NOT
10864: IFFALSE 10868
// exit ;
10866: GO 10994
// side := 0 ;
10868: LD_ADDR_VAR 0 3
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// for i := 1 to 8 do
10876: LD_ADDR_VAR 0 1
10880: PUSH
10881: DOUBLE
10882: LD_INT 1
10884: DEC
10885: ST_TO_ADDR
10886: LD_INT 8
10888: PUSH
10889: FOR_TO
10890: IFFALSE 10938
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10892: LD_OWVAR 2
10896: PUSH
10897: LD_VAR 0 1
10901: NONEQUAL
10902: PUSH
10903: LD_OWVAR 2
10907: PPUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 81
10917: PUSH
10918: LD_INT 2
10920: EQUAL
10921: AND
10922: IFFALSE 10936
// begin side := i ;
10924: LD_ADDR_VAR 0 3
10928: PUSH
10929: LD_VAR 0 1
10933: ST_TO_ADDR
// break ;
10934: GO 10938
// end ;
10936: GO 10889
10938: POP
10939: POP
// if not side then
10940: LD_VAR 0 3
10944: NOT
10945: IFFALSE 10949
// exit ;
10947: GO 10994
// for i := 1 to tmp do
10949: LD_ADDR_VAR 0 1
10953: PUSH
10954: DOUBLE
10955: LD_INT 1
10957: DEC
10958: ST_TO_ADDR
10959: LD_VAR 0 2
10963: PUSH
10964: FOR_TO
10965: IFFALSE 10992
// if Prob ( 60 ) then
10967: LD_INT 60
10969: PPUSH
10970: CALL_OW 13
10974: IFFALSE 10990
// SetSide ( i , side ) ;
10976: LD_VAR 0 1
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: CALL_OW 235
10990: GO 10964
10992: POP
10993: POP
// end ;
10994: PPOPN 3
10996: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10997: LD_EXP 15
11001: PUSH
11002: LD_EXP 28
11006: AND
11007: IFFALSE 11126
11009: GO 11011
11011: DISABLE
11012: LD_INT 0
11014: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11015: LD_ADDR_VAR 0 1
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_OWVAR 2
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 21
11034: PUSH
11035: LD_INT 1
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: LD_INT 23
11047: PUSH
11048: LD_INT 0
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: PUSH
11069: FOR_IN
11070: IFFALSE 11124
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11072: LD_VAR 0 1
11076: PPUSH
11077: CALL_OW 257
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 3
11090: PUSH
11091: LD_INT 4
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: IN
11100: IFFALSE 11122
// SetClass ( un , rand ( 1 , 4 ) ) ;
11102: LD_VAR 0 1
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: LD_INT 4
11112: PPUSH
11113: CALL_OW 12
11117: PPUSH
11118: CALL_OW 336
11122: GO 11069
11124: POP
11125: POP
// end ;
11126: PPOPN 1
11128: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11129: LD_EXP 15
11133: PUSH
11134: LD_EXP 27
11138: AND
11139: IFFALSE 11218
11141: GO 11143
11143: DISABLE
11144: LD_INT 0
11146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11147: LD_ADDR_VAR 0 1
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_OWVAR 2
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 21
11166: PUSH
11167: LD_INT 3
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: ST_TO_ADDR
// if not tmp then
11183: LD_VAR 0 1
11187: NOT
11188: IFFALSE 11192
// exit ;
11190: GO 11218
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11192: LD_VAR 0 1
11196: PUSH
11197: LD_INT 1
11199: PPUSH
11200: LD_VAR 0 1
11204: PPUSH
11205: CALL_OW 12
11209: ARRAY
11210: PPUSH
11211: LD_INT 100
11213: PPUSH
11214: CALL_OW 234
// end ;
11218: PPOPN 1
11220: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11221: LD_EXP 15
11225: PUSH
11226: LD_EXP 29
11230: AND
11231: IFFALSE 11329
11233: GO 11235
11235: DISABLE
11236: LD_INT 0
11238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_INT 22
11246: PUSH
11247: LD_OWVAR 2
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 21
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: ST_TO_ADDR
// if not tmp then
11275: LD_VAR 0 1
11279: NOT
11280: IFFALSE 11284
// exit ;
11282: GO 11329
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11284: LD_VAR 0 1
11288: PUSH
11289: LD_INT 1
11291: PPUSH
11292: LD_VAR 0 1
11296: PPUSH
11297: CALL_OW 12
11301: ARRAY
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: LD_INT 4
11308: PPUSH
11309: CALL_OW 12
11313: PPUSH
11314: LD_INT 3000
11316: PPUSH
11317: LD_INT 9000
11319: PPUSH
11320: CALL_OW 12
11324: PPUSH
11325: CALL_OW 492
// end ;
11329: PPOPN 1
11331: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11332: LD_EXP 15
11336: PUSH
11337: LD_EXP 30
11341: AND
11342: IFFALSE 11362
11344: GO 11346
11346: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11347: LD_INT 1
11349: PPUSH
11350: LD_OWVAR 2
11354: PPUSH
11355: LD_INT 0
11357: PPUSH
11358: CALL_OW 324
11362: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11363: LD_EXP 15
11367: PUSH
11368: LD_EXP 31
11372: AND
11373: IFFALSE 11456
11375: GO 11377
11377: DISABLE
11378: LD_INT 0
11380: PPUSH
11381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11382: LD_ADDR_VAR 0 2
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_OWVAR 2
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 21
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 69
11417: ST_TO_ADDR
// if not tmp then
11418: LD_VAR 0 2
11422: NOT
11423: IFFALSE 11427
// exit ;
11425: GO 11456
// for i in tmp do
11427: LD_ADDR_VAR 0 1
11431: PUSH
11432: LD_VAR 0 2
11436: PUSH
11437: FOR_IN
11438: IFFALSE 11454
// SetBLevel ( i , 10 ) ;
11440: LD_VAR 0 1
11444: PPUSH
11445: LD_INT 10
11447: PPUSH
11448: CALL_OW 241
11452: GO 11437
11454: POP
11455: POP
// end ;
11456: PPOPN 2
11458: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11459: LD_EXP 15
11463: PUSH
11464: LD_EXP 32
11468: AND
11469: IFFALSE 11580
11471: GO 11473
11473: DISABLE
11474: LD_INT 0
11476: PPUSH
11477: PPUSH
11478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: LD_OWVAR 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 25
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: ST_TO_ADDR
// if not tmp then
11515: LD_VAR 0 3
11519: NOT
11520: IFFALSE 11524
// exit ;
11522: GO 11580
// un := tmp [ rand ( 1 , tmp ) ] ;
11524: LD_ADDR_VAR 0 2
11528: PUSH
11529: LD_VAR 0 3
11533: PUSH
11534: LD_INT 1
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: CALL_OW 12
11546: ARRAY
11547: ST_TO_ADDR
// if Crawls ( un ) then
11548: LD_VAR 0 2
11552: PPUSH
11553: CALL_OW 318
11557: IFFALSE 11568
// ComWalk ( un ) ;
11559: LD_VAR 0 2
11563: PPUSH
11564: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11568: LD_VAR 0 2
11572: PPUSH
11573: LD_INT 5
11575: PPUSH
11576: CALL_OW 336
// end ;
11580: PPOPN 3
11582: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11583: LD_EXP 15
11587: PUSH
11588: LD_EXP 33
11592: AND
11593: PUSH
11594: LD_OWVAR 67
11598: PUSH
11599: LD_INT 3
11601: LESS
11602: AND
11603: IFFALSE 11622
11605: GO 11607
11607: DISABLE
// Difficulty := Difficulty + 1 ;
11608: LD_ADDR_OWVAR 67
11612: PUSH
11613: LD_OWVAR 67
11617: PUSH
11618: LD_INT 1
11620: PLUS
11621: ST_TO_ADDR
11622: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11623: LD_EXP 15
11627: PUSH
11628: LD_EXP 34
11632: AND
11633: IFFALSE 11736
11635: GO 11637
11637: DISABLE
11638: LD_INT 0
11640: PPUSH
// begin for i := 1 to 5 do
11641: LD_ADDR_VAR 0 1
11645: PUSH
11646: DOUBLE
11647: LD_INT 1
11649: DEC
11650: ST_TO_ADDR
11651: LD_INT 5
11653: PUSH
11654: FOR_TO
11655: IFFALSE 11734
// begin uc_nation := nation_nature ;
11657: LD_ADDR_OWVAR 21
11661: PUSH
11662: LD_INT 0
11664: ST_TO_ADDR
// uc_side := 0 ;
11665: LD_ADDR_OWVAR 20
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11673: LD_ADDR_OWVAR 29
11677: PUSH
11678: LD_INT 12
11680: PUSH
11681: LD_INT 12
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: ST_TO_ADDR
// hc_agressivity := 20 ;
11688: LD_ADDR_OWVAR 35
11692: PUSH
11693: LD_INT 20
11695: ST_TO_ADDR
// hc_class := class_tiger ;
11696: LD_ADDR_OWVAR 28
11700: PUSH
11701: LD_INT 14
11703: ST_TO_ADDR
// hc_gallery :=  ;
11704: LD_ADDR_OWVAR 33
11708: PUSH
11709: LD_STRING 
11711: ST_TO_ADDR
// hc_name :=  ;
11712: LD_ADDR_OWVAR 26
11716: PUSH
11717: LD_STRING 
11719: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11720: CALL_OW 44
11724: PPUSH
11725: LD_INT 0
11727: PPUSH
11728: CALL_OW 51
// end ;
11732: GO 11654
11734: POP
11735: POP
// end ;
11736: PPOPN 1
11738: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11739: LD_EXP 15
11743: PUSH
11744: LD_EXP 35
11748: AND
11749: IFFALSE 11758
11751: GO 11753
11753: DISABLE
// StreamSibBomb ;
11754: CALL 11759 0 0
11758: END
// export function StreamSibBomb ; var i , x , y ; begin
11759: LD_INT 0
11761: PPUSH
11762: PPUSH
11763: PPUSH
11764: PPUSH
// result := false ;
11765: LD_ADDR_VAR 0 1
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
// for i := 1 to 16 do
11773: LD_ADDR_VAR 0 2
11777: PUSH
11778: DOUBLE
11779: LD_INT 1
11781: DEC
11782: ST_TO_ADDR
11783: LD_INT 16
11785: PUSH
11786: FOR_TO
11787: IFFALSE 11986
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_INT 10
11796: PUSH
11797: LD_INT 20
11799: PUSH
11800: LD_INT 30
11802: PUSH
11803: LD_INT 40
11805: PUSH
11806: LD_INT 50
11808: PUSH
11809: LD_INT 60
11811: PUSH
11812: LD_INT 70
11814: PUSH
11815: LD_INT 80
11817: PUSH
11818: LD_INT 90
11820: PUSH
11821: LD_INT 100
11823: PUSH
11824: LD_INT 110
11826: PUSH
11827: LD_INT 120
11829: PUSH
11830: LD_INT 130
11832: PUSH
11833: LD_INT 140
11835: PUSH
11836: LD_INT 150
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 15
11861: PPUSH
11862: CALL_OW 12
11866: ARRAY
11867: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11868: LD_ADDR_VAR 0 4
11872: PUSH
11873: LD_INT 10
11875: PUSH
11876: LD_INT 20
11878: PUSH
11879: LD_INT 30
11881: PUSH
11882: LD_INT 40
11884: PUSH
11885: LD_INT 50
11887: PUSH
11888: LD_INT 60
11890: PUSH
11891: LD_INT 70
11893: PUSH
11894: LD_INT 80
11896: PUSH
11897: LD_INT 90
11899: PUSH
11900: LD_INT 100
11902: PUSH
11903: LD_INT 110
11905: PUSH
11906: LD_INT 120
11908: PUSH
11909: LD_INT 130
11911: PUSH
11912: LD_INT 140
11914: PUSH
11915: LD_INT 150
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 1
11937: PPUSH
11938: LD_INT 15
11940: PPUSH
11941: CALL_OW 12
11945: ARRAY
11946: ST_TO_ADDR
// if ValidHex ( x , y ) then
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_VAR 0 4
11956: PPUSH
11957: CALL_OW 488
11961: IFFALSE 11984
// begin result := [ x , y ] ;
11963: LD_ADDR_VAR 0 1
11967: PUSH
11968: LD_VAR 0 3
11972: PUSH
11973: LD_VAR 0 4
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: ST_TO_ADDR
// break ;
11982: GO 11986
// end ; end ;
11984: GO 11786
11986: POP
11987: POP
// if result then
11988: LD_VAR 0 1
11992: IFFALSE 12052
// begin ToLua ( playSibBomb() ) ;
11994: LD_STRING playSibBomb()
11996: PPUSH
11997: CALL_OW 559
// wait ( 0 0$14 ) ;
12001: LD_INT 490
12003: PPUSH
12004: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12008: LD_VAR 0 1
12012: PUSH
12013: LD_INT 1
12015: ARRAY
12016: PPUSH
12017: LD_VAR 0 1
12021: PUSH
12022: LD_INT 2
12024: ARRAY
12025: PPUSH
12026: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12030: LD_VAR 0 1
12034: PUSH
12035: LD_INT 1
12037: ARRAY
12038: PPUSH
12039: LD_VAR 0 1
12043: PUSH
12044: LD_INT 2
12046: ARRAY
12047: PPUSH
12048: CALL_OW 429
// end ; end ;
12052: LD_VAR 0 1
12056: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12057: LD_EXP 15
12061: PUSH
12062: LD_EXP 37
12066: AND
12067: IFFALSE 12079
12069: GO 12071
12071: DISABLE
// YouLost (  ) ;
12072: LD_STRING 
12074: PPUSH
12075: CALL_OW 104
12079: END
// every 0 0$1 trigger StreamModeActive and sFog do
12080: LD_EXP 15
12084: PUSH
12085: LD_EXP 36
12089: AND
12090: IFFALSE 12104
12092: GO 12094
12094: DISABLE
// FogOff ( your_side ) ;
12095: LD_OWVAR 2
12099: PPUSH
12100: CALL_OW 344
12104: END
// every 0 0$1 trigger StreamModeActive and sSun do
12105: LD_EXP 15
12109: PUSH
12110: LD_EXP 38
12114: AND
12115: IFFALSE 12143
12117: GO 12119
12119: DISABLE
// begin solar_recharge_percent := 0 ;
12120: LD_ADDR_OWVAR 79
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12128: LD_INT 10500
12130: PPUSH
12131: CALL_OW 67
// solar_recharge_percent := 100 ;
12135: LD_ADDR_OWVAR 79
12139: PUSH
12140: LD_INT 100
12142: ST_TO_ADDR
// end ;
12143: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12144: LD_EXP 15
12148: PUSH
12149: LD_EXP 39
12153: AND
12154: IFFALSE 12393
12156: GO 12158
12158: DISABLE
12159: LD_INT 0
12161: PPUSH
12162: PPUSH
12163: PPUSH
// begin tmp := [ ] ;
12164: LD_ADDR_VAR 0 3
12168: PUSH
12169: EMPTY
12170: ST_TO_ADDR
// for i := 1 to 6 do
12171: LD_ADDR_VAR 0 1
12175: PUSH
12176: DOUBLE
12177: LD_INT 1
12179: DEC
12180: ST_TO_ADDR
12181: LD_INT 6
12183: PUSH
12184: FOR_TO
12185: IFFALSE 12290
// begin uc_nation := nation_nature ;
12187: LD_ADDR_OWVAR 21
12191: PUSH
12192: LD_INT 0
12194: ST_TO_ADDR
// uc_side := 0 ;
12195: LD_ADDR_OWVAR 20
12199: PUSH
12200: LD_INT 0
12202: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12203: LD_ADDR_OWVAR 29
12207: PUSH
12208: LD_INT 12
12210: PUSH
12211: LD_INT 12
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: ST_TO_ADDR
// hc_agressivity := 20 ;
12218: LD_ADDR_OWVAR 35
12222: PUSH
12223: LD_INT 20
12225: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12226: LD_ADDR_OWVAR 28
12230: PUSH
12231: LD_INT 17
12233: ST_TO_ADDR
// hc_gallery :=  ;
12234: LD_ADDR_OWVAR 33
12238: PUSH
12239: LD_STRING 
12241: ST_TO_ADDR
// hc_name :=  ;
12242: LD_ADDR_OWVAR 26
12246: PUSH
12247: LD_STRING 
12249: ST_TO_ADDR
// un := CreateHuman ;
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: CALL_OW 44
12259: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12260: LD_VAR 0 2
12264: PPUSH
12265: LD_INT 1
12267: PPUSH
12268: CALL_OW 51
// tmp := tmp ^ un ;
12272: LD_ADDR_VAR 0 3
12276: PUSH
12277: LD_VAR 0 3
12281: PUSH
12282: LD_VAR 0 2
12286: ADD
12287: ST_TO_ADDR
// end ;
12288: GO 12184
12290: POP
12291: POP
// repeat wait ( 0 0$1 ) ;
12292: LD_INT 35
12294: PPUSH
12295: CALL_OW 67
// for un in tmp do
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: LD_VAR 0 3
12308: PUSH
12309: FOR_IN
12310: IFFALSE 12384
// begin if IsDead ( un ) then
12312: LD_VAR 0 2
12316: PPUSH
12317: CALL_OW 301
12321: IFFALSE 12341
// begin tmp := tmp diff un ;
12323: LD_ADDR_VAR 0 3
12327: PUSH
12328: LD_VAR 0 3
12332: PUSH
12333: LD_VAR 0 2
12337: DIFF
12338: ST_TO_ADDR
// continue ;
12339: GO 12309
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12341: LD_VAR 0 2
12345: PPUSH
12346: LD_INT 3
12348: PUSH
12349: LD_INT 22
12351: PUSH
12352: LD_INT 0
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PPUSH
12363: CALL_OW 69
12367: PPUSH
12368: LD_VAR 0 2
12372: PPUSH
12373: CALL_OW 74
12377: PPUSH
12378: CALL_OW 115
// end ;
12382: GO 12309
12384: POP
12385: POP
// until not tmp ;
12386: LD_VAR 0 3
12390: NOT
12391: IFFALSE 12292
// end ;
12393: PPOPN 3
12395: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12396: LD_EXP 15
12400: PUSH
12401: LD_EXP 40
12405: AND
12406: IFFALSE 12460
12408: GO 12410
12410: DISABLE
// begin ToLua ( displayTroll(); ) ;
12411: LD_STRING displayTroll();
12413: PPUSH
12414: CALL_OW 559
// wait ( 3 3$00 ) ;
12418: LD_INT 6300
12420: PPUSH
12421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12425: LD_STRING hideTroll();
12427: PPUSH
12428: CALL_OW 559
// wait ( 1 1$00 ) ;
12432: LD_INT 2100
12434: PPUSH
12435: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12439: LD_STRING displayTroll();
12441: PPUSH
12442: CALL_OW 559
// wait ( 1 1$00 ) ;
12446: LD_INT 2100
12448: PPUSH
12449: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12453: LD_STRING hideTroll();
12455: PPUSH
12456: CALL_OW 559
// end ;
12460: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12461: LD_EXP 15
12465: PUSH
12466: LD_EXP 41
12470: AND
12471: IFFALSE 12534
12473: GO 12475
12475: DISABLE
12476: LD_INT 0
12478: PPUSH
// begin p := 0 ;
12479: LD_ADDR_VAR 0 1
12483: PUSH
12484: LD_INT 0
12486: ST_TO_ADDR
// repeat game_speed := 1 ;
12487: LD_ADDR_OWVAR 65
12491: PUSH
12492: LD_INT 1
12494: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12495: LD_INT 35
12497: PPUSH
12498: CALL_OW 67
// p := p + 1 ;
12502: LD_ADDR_VAR 0 1
12506: PUSH
12507: LD_VAR 0 1
12511: PUSH
12512: LD_INT 1
12514: PLUS
12515: ST_TO_ADDR
// until p >= 60 ;
12516: LD_VAR 0 1
12520: PUSH
12521: LD_INT 60
12523: GREATEREQUAL
12524: IFFALSE 12487
// game_speed := 4 ;
12526: LD_ADDR_OWVAR 65
12530: PUSH
12531: LD_INT 4
12533: ST_TO_ADDR
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12537: LD_EXP 15
12541: PUSH
12542: LD_EXP 42
12546: AND
12547: IFFALSE 12693
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12556: LD_ADDR_VAR 0 1
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 0
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 1
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: ST_TO_ADDR
// if not depot then
12610: LD_VAR 0 1
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12693
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12619: LD_ADDR_VAR 0 2
12623: PUSH
12624: LD_VAR 0 1
12628: PUSH
12629: LD_INT 1
12631: PPUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 12
12641: ARRAY
12642: PPUSH
12643: CALL_OW 274
12647: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12648: LD_VAR 0 2
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_INT 0
12658: PPUSH
12659: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12663: LD_VAR 0 2
12667: PPUSH
12668: LD_INT 2
12670: PPUSH
12671: LD_INT 0
12673: PPUSH
12674: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12678: LD_VAR 0 2
12682: PPUSH
12683: LD_INT 3
12685: PPUSH
12686: LD_INT 0
12688: PPUSH
12689: CALL_OW 277
// end ;
12693: PPOPN 2
12695: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12696: LD_EXP 15
12700: PUSH
12701: LD_EXP 43
12705: AND
12706: IFFALSE 12803
12708: GO 12710
12710: DISABLE
12711: LD_INT 0
12713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12714: LD_ADDR_VAR 0 1
12718: PUSH
12719: LD_INT 22
12721: PUSH
12722: LD_OWVAR 2
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 21
12733: PUSH
12734: LD_INT 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 3
12743: PUSH
12744: LD_INT 23
12746: PUSH
12747: LD_INT 0
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: PPUSH
12763: CALL_OW 69
12767: ST_TO_ADDR
// if not tmp then
12768: LD_VAR 0 1
12772: NOT
12773: IFFALSE 12777
// exit ;
12775: GO 12803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12777: LD_VAR 0 1
12781: PUSH
12782: LD_INT 1
12784: PPUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 12
12794: ARRAY
12795: PPUSH
12796: LD_INT 200
12798: PPUSH
12799: CALL_OW 234
// end ;
12803: PPOPN 1
12805: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12806: LD_EXP 15
12810: PUSH
12811: LD_EXP 44
12815: AND
12816: IFFALSE 12895
12818: GO 12820
12820: DISABLE
12821: LD_INT 0
12823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12824: LD_ADDR_VAR 0 1
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_OWVAR 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 21
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: ST_TO_ADDR
// if not tmp then
12860: LD_VAR 0 1
12864: NOT
12865: IFFALSE 12869
// exit ;
12867: GO 12895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12869: LD_VAR 0 1
12873: PUSH
12874: LD_INT 1
12876: PPUSH
12877: LD_VAR 0 1
12881: PPUSH
12882: CALL_OW 12
12886: ARRAY
12887: PPUSH
12888: LD_INT 60
12890: PPUSH
12891: CALL_OW 234
// end ;
12895: PPOPN 1
12897: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12898: LD_EXP 15
12902: PUSH
12903: LD_EXP 45
12907: AND
12908: IFFALSE 13007
12910: GO 12912
12912: DISABLE
12913: LD_INT 0
12915: PPUSH
12916: PPUSH
// begin enable ;
12917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_INT 22
12925: PUSH
12926: LD_OWVAR 2
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 61
12937: PUSH
12938: EMPTY
12939: LIST
12940: PUSH
12941: LD_INT 33
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: ST_TO_ADDR
// if not tmp then
12961: LD_VAR 0 1
12965: NOT
12966: IFFALSE 12970
// exit ;
12968: GO 13007
// for i in tmp do
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_VAR 0 1
12979: PUSH
12980: FOR_IN
12981: IFFALSE 13005
// if IsControledBy ( i ) then
12983: LD_VAR 0 2
12987: PPUSH
12988: CALL_OW 312
12992: IFFALSE 13003
// ComUnlink ( i ) ;
12994: LD_VAR 0 2
12998: PPUSH
12999: CALL_OW 136
13003: GO 12980
13005: POP
13006: POP
// end ;
13007: PPOPN 2
13009: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13010: LD_EXP 15
13014: PUSH
13015: LD_EXP 46
13019: AND
13020: IFFALSE 13160
13022: GO 13024
13024: DISABLE
13025: LD_INT 0
13027: PPUSH
13028: PPUSH
// begin ToLua ( displayPowell(); ) ;
13029: LD_STRING displayPowell();
13031: PPUSH
13032: CALL_OW 559
// uc_side := 0 ;
13036: LD_ADDR_OWVAR 20
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// uc_nation := 2 ;
13044: LD_ADDR_OWVAR 21
13048: PUSH
13049: LD_INT 2
13051: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13052: LD_ADDR_OWVAR 37
13056: PUSH
13057: LD_INT 14
13059: ST_TO_ADDR
// vc_engine := engine_siberite ;
13060: LD_ADDR_OWVAR 39
13064: PUSH
13065: LD_INT 3
13067: ST_TO_ADDR
// vc_control := control_apeman ;
13068: LD_ADDR_OWVAR 38
13072: PUSH
13073: LD_INT 5
13075: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13076: LD_ADDR_OWVAR 40
13080: PUSH
13081: LD_INT 29
13083: ST_TO_ADDR
// un := CreateVehicle ;
13084: LD_ADDR_VAR 0 2
13088: PUSH
13089: CALL_OW 45
13093: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13094: LD_VAR 0 2
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13106: LD_INT 35
13108: PPUSH
13109: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13113: LD_VAR 0 2
13117: PPUSH
13118: LD_INT 22
13120: PUSH
13121: LD_OWVAR 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL_OW 74
13144: PPUSH
13145: CALL_OW 115
// until IsDead ( un ) ;
13149: LD_VAR 0 2
13153: PPUSH
13154: CALL_OW 301
13158: IFFALSE 13106
// end ;
13160: PPOPN 2
13162: END
// every 0 0$1 trigger StreamModeActive and sStu do
13163: LD_EXP 15
13167: PUSH
13168: LD_EXP 54
13172: AND
13173: IFFALSE 13189
13175: GO 13177
13177: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13178: LD_STRING displayStucuk();
13180: PPUSH
13181: CALL_OW 559
// ResetFog ;
13185: CALL_OW 335
// end ;
13189: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13190: LD_EXP 15
13194: PUSH
13195: LD_EXP 47
13199: AND
13200: IFFALSE 13341
13202: GO 13204
13204: DISABLE
13205: LD_INT 0
13207: PPUSH
13208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13209: LD_ADDR_VAR 0 2
13213: PUSH
13214: LD_INT 22
13216: PUSH
13217: LD_OWVAR 2
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 1
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: ST_TO_ADDR
// if not tmp then
13245: LD_VAR 0 2
13249: NOT
13250: IFFALSE 13254
// exit ;
13252: GO 13341
// un := tmp [ rand ( 1 , tmp ) ] ;
13254: LD_ADDR_VAR 0 1
13258: PUSH
13259: LD_VAR 0 2
13263: PUSH
13264: LD_INT 1
13266: PPUSH
13267: LD_VAR 0 2
13271: PPUSH
13272: CALL_OW 12
13276: ARRAY
13277: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13278: LD_VAR 0 1
13282: PPUSH
13283: LD_INT 0
13285: PPUSH
13286: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13290: LD_VAR 0 1
13294: PPUSH
13295: LD_OWVAR 3
13299: PUSH
13300: LD_VAR 0 1
13304: DIFF
13305: PPUSH
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 74
13315: PPUSH
13316: CALL_OW 115
// wait ( 0 0$20 ) ;
13320: LD_INT 700
13322: PPUSH
13323: CALL_OW 67
// SetSide ( un , your_side ) ;
13327: LD_VAR 0 1
13331: PPUSH
13332: LD_OWVAR 2
13336: PPUSH
13337: CALL_OW 235
// end ;
13341: PPOPN 2
13343: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13344: LD_EXP 15
13348: PUSH
13349: LD_EXP 48
13353: AND
13354: IFFALSE 13460
13356: GO 13358
13358: DISABLE
13359: LD_INT 0
13361: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13362: LD_ADDR_VAR 0 1
13366: PUSH
13367: LD_INT 22
13369: PUSH
13370: LD_OWVAR 2
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 30
13384: PUSH
13385: LD_INT 0
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 30
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 69
13415: ST_TO_ADDR
// if not depot then
13416: LD_VAR 0 1
13420: NOT
13421: IFFALSE 13425
// exit ;
13423: GO 13460
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13425: LD_VAR 0 1
13429: PUSH
13430: LD_INT 1
13432: ARRAY
13433: PPUSH
13434: CALL_OW 250
13438: PPUSH
13439: LD_VAR 0 1
13443: PUSH
13444: LD_INT 1
13446: ARRAY
13447: PPUSH
13448: CALL_OW 251
13452: PPUSH
13453: LD_INT 70
13455: PPUSH
13456: CALL_OW 495
// end ;
13460: PPOPN 1
13462: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13463: LD_EXP 15
13467: PUSH
13468: LD_EXP 49
13472: AND
13473: IFFALSE 13684
13475: GO 13477
13477: DISABLE
13478: LD_INT 0
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13485: LD_ADDR_VAR 0 5
13489: PUSH
13490: LD_INT 22
13492: PUSH
13493: LD_OWVAR 2
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 21
13504: PUSH
13505: LD_INT 1
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 69
13520: ST_TO_ADDR
// if not tmp then
13521: LD_VAR 0 5
13525: NOT
13526: IFFALSE 13530
// exit ;
13528: GO 13684
// for i in tmp do
13530: LD_ADDR_VAR 0 1
13534: PUSH
13535: LD_VAR 0 5
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13682
// begin d := rand ( 0 , 5 ) ;
13543: LD_ADDR_VAR 0 4
13547: PUSH
13548: LD_INT 0
13550: PPUSH
13551: LD_INT 5
13553: PPUSH
13554: CALL_OW 12
13558: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13559: LD_ADDR_VAR 0 2
13563: PUSH
13564: LD_VAR 0 1
13568: PPUSH
13569: CALL_OW 250
13573: PPUSH
13574: LD_VAR 0 4
13578: PPUSH
13579: LD_INT 3
13581: PPUSH
13582: LD_INT 12
13584: PPUSH
13585: CALL_OW 12
13589: PPUSH
13590: CALL_OW 272
13594: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13595: LD_ADDR_VAR 0 3
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 251
13609: PPUSH
13610: LD_VAR 0 4
13614: PPUSH
13615: LD_INT 3
13617: PPUSH
13618: LD_INT 12
13620: PPUSH
13621: CALL_OW 12
13625: PPUSH
13626: CALL_OW 273
13630: ST_TO_ADDR
// if ValidHex ( x , y ) then
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_VAR 0 3
13640: PPUSH
13641: CALL_OW 488
13645: IFFALSE 13680
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: LD_VAR 0 2
13656: PPUSH
13657: LD_VAR 0 3
13661: PPUSH
13662: LD_INT 3
13664: PPUSH
13665: LD_INT 6
13667: PPUSH
13668: CALL_OW 12
13672: PPUSH
13673: LD_INT 1
13675: PPUSH
13676: CALL_OW 483
// end ;
13680: GO 13540
13682: POP
13683: POP
// end ;
13684: PPOPN 5
13686: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13687: LD_EXP 15
13691: PUSH
13692: LD_EXP 50
13696: AND
13697: IFFALSE 13791
13699: GO 13701
13701: DISABLE
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13706: LD_ADDR_VAR 0 2
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_OWVAR 2
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 32
13725: PUSH
13726: LD_INT 1
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 2
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// if not tmp then
13753: LD_VAR 0 2
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13791
// for i in tmp do
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13789
// SetFuel ( i , 0 ) ;
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 0
13782: PPUSH
13783: CALL_OW 240
13787: GO 13772
13789: POP
13790: POP
// end ;
13791: PPOPN 2
13793: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13794: LD_EXP 15
13798: PUSH
13799: LD_EXP 51
13803: AND
13804: IFFALSE 13870
13806: GO 13808
13808: DISABLE
13809: LD_INT 0
13811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13812: LD_ADDR_VAR 0 1
13816: PUSH
13817: LD_INT 22
13819: PUSH
13820: LD_OWVAR 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 30
13831: PUSH
13832: LD_INT 29
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 69
13847: ST_TO_ADDR
// if not tmp then
13848: LD_VAR 0 1
13852: NOT
13853: IFFALSE 13857
// exit ;
13855: GO 13870
// DestroyUnit ( tmp [ 1 ] ) ;
13857: LD_VAR 0 1
13861: PUSH
13862: LD_INT 1
13864: ARRAY
13865: PPUSH
13866: CALL_OW 65
// end ;
13870: PPOPN 1
13872: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13873: LD_EXP 15
13877: PUSH
13878: LD_EXP 53
13882: AND
13883: IFFALSE 14012
13885: GO 13887
13887: DISABLE
13888: LD_INT 0
13890: PPUSH
// begin uc_side := 0 ;
13891: LD_ADDR_OWVAR 20
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// uc_nation := nation_arabian ;
13899: LD_ADDR_OWVAR 21
13903: PUSH
13904: LD_INT 2
13906: ST_TO_ADDR
// hc_gallery :=  ;
13907: LD_ADDR_OWVAR 33
13911: PUSH
13912: LD_STRING 
13914: ST_TO_ADDR
// hc_name :=  ;
13915: LD_ADDR_OWVAR 26
13919: PUSH
13920: LD_STRING 
13922: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13923: LD_INT 1
13925: PPUSH
13926: LD_INT 11
13928: PPUSH
13929: LD_INT 10
13931: PPUSH
13932: CALL_OW 380
// un := CreateHuman ;
13936: LD_ADDR_VAR 0 1
13940: PUSH
13941: CALL_OW 44
13945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13946: LD_VAR 0 1
13950: PPUSH
13951: LD_INT 1
13953: PPUSH
13954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13965: LD_VAR 0 1
13969: PPUSH
13970: LD_INT 22
13972: PUSH
13973: LD_OWVAR 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PPUSH
13982: CALL_OW 69
13986: PPUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 74
13996: PPUSH
13997: CALL_OW 115
// until IsDead ( un ) ;
14001: LD_VAR 0 1
14005: PPUSH
14006: CALL_OW 301
14010: IFFALSE 13958
// end ;
14012: PPOPN 1
14014: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14015: LD_EXP 15
14019: PUSH
14020: LD_EXP 55
14024: AND
14025: IFFALSE 14037
14027: GO 14029
14029: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14030: LD_STRING earthquake(getX(game), 0, 32)
14032: PPUSH
14033: CALL_OW 559
14037: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14038: LD_EXP 15
14042: PUSH
14043: LD_EXP 56
14047: AND
14048: IFFALSE 14139
14050: GO 14052
14052: DISABLE
14053: LD_INT 0
14055: PPUSH
// begin enable ;
14056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_OWVAR 2
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 21
14076: PUSH
14077: LD_INT 2
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 33
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: ST_TO_ADDR
// if not tmp then
14104: LD_VAR 0 1
14108: NOT
14109: IFFALSE 14113
// exit ;
14111: GO 14139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14113: LD_VAR 0 1
14117: PUSH
14118: LD_INT 1
14120: PPUSH
14121: LD_VAR 0 1
14125: PPUSH
14126: CALL_OW 12
14130: ARRAY
14131: PPUSH
14132: LD_INT 1
14134: PPUSH
14135: CALL_OW 234
// end ;
14139: PPOPN 1
14141: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14142: LD_EXP 15
14146: PUSH
14147: LD_EXP 57
14151: AND
14152: IFFALSE 14293
14154: GO 14156
14156: DISABLE
14157: LD_INT 0
14159: PPUSH
14160: PPUSH
14161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: LD_INT 22
14169: PUSH
14170: LD_OWVAR 2
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 25
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 69
14197: ST_TO_ADDR
// if not tmp then
14198: LD_VAR 0 3
14202: NOT
14203: IFFALSE 14207
// exit ;
14205: GO 14293
// un := tmp [ rand ( 1 , tmp ) ] ;
14207: LD_ADDR_VAR 0 2
14211: PUSH
14212: LD_VAR 0 3
14216: PUSH
14217: LD_INT 1
14219: PPUSH
14220: LD_VAR 0 3
14224: PPUSH
14225: CALL_OW 12
14229: ARRAY
14230: ST_TO_ADDR
// if Crawls ( un ) then
14231: LD_VAR 0 2
14235: PPUSH
14236: CALL_OW 318
14240: IFFALSE 14251
// ComWalk ( un ) ;
14242: LD_VAR 0 2
14246: PPUSH
14247: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14251: LD_VAR 0 2
14255: PPUSH
14256: LD_INT 9
14258: PPUSH
14259: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14263: LD_INT 28
14265: PPUSH
14266: LD_OWVAR 2
14270: PPUSH
14271: LD_INT 2
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14278: LD_INT 29
14280: PPUSH
14281: LD_OWVAR 2
14285: PPUSH
14286: LD_INT 2
14288: PPUSH
14289: CALL_OW 322
// end ;
14293: PPOPN 3
14295: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14296: LD_EXP 15
14300: PUSH
14301: LD_EXP 58
14305: AND
14306: IFFALSE 14417
14308: GO 14310
14310: DISABLE
14311: LD_INT 0
14313: PPUSH
14314: PPUSH
14315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14316: LD_ADDR_VAR 0 3
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_OWVAR 2
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 25
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PPUSH
14347: CALL_OW 69
14351: ST_TO_ADDR
// if not tmp then
14352: LD_VAR 0 3
14356: NOT
14357: IFFALSE 14361
// exit ;
14359: GO 14417
// un := tmp [ rand ( 1 , tmp ) ] ;
14361: LD_ADDR_VAR 0 2
14365: PUSH
14366: LD_VAR 0 3
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 3
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: ST_TO_ADDR
// if Crawls ( un ) then
14385: LD_VAR 0 2
14389: PPUSH
14390: CALL_OW 318
14394: IFFALSE 14405
// ComWalk ( un ) ;
14396: LD_VAR 0 2
14400: PPUSH
14401: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14405: LD_VAR 0 2
14409: PPUSH
14410: LD_INT 8
14412: PPUSH
14413: CALL_OW 336
// end ;
14417: PPOPN 3
14419: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14420: LD_EXP 15
14424: PUSH
14425: LD_EXP 59
14429: AND
14430: IFFALSE 14574
14432: GO 14434
14434: DISABLE
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14439: LD_ADDR_VAR 0 2
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_OWVAR 2
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 21
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 2
14468: PUSH
14469: LD_INT 34
14471: PUSH
14472: LD_INT 12
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 34
14481: PUSH
14482: LD_INT 51
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 34
14491: PUSH
14492: LD_INT 32
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 69
14514: ST_TO_ADDR
// if not tmp then
14515: LD_VAR 0 2
14519: NOT
14520: IFFALSE 14524
// exit ;
14522: GO 14574
// for i in tmp do
14524: LD_ADDR_VAR 0 1
14528: PUSH
14529: LD_VAR 0 2
14533: PUSH
14534: FOR_IN
14535: IFFALSE 14572
// if GetCargo ( i , mat_artifact ) = 0 then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_INT 4
14544: PPUSH
14545: CALL_OW 289
14549: PUSH
14550: LD_INT 0
14552: EQUAL
14553: IFFALSE 14570
// SetCargo ( i , mat_siberit , 100 ) ;
14555: LD_VAR 0 1
14559: PPUSH
14560: LD_INT 3
14562: PPUSH
14563: LD_INT 100
14565: PPUSH
14566: CALL_OW 290
14570: GO 14534
14572: POP
14573: POP
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14577: LD_EXP 15
14581: PUSH
14582: LD_EXP 60
14586: AND
14587: IFFALSE 14770
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14596: LD_ADDR_VAR 0 2
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_OWVAR 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: ST_TO_ADDR
// if not tmp then
14618: LD_VAR 0 2
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 14770
// for i := 1 to 2 do
14627: LD_ADDR_VAR 0 1
14631: PUSH
14632: DOUBLE
14633: LD_INT 1
14635: DEC
14636: ST_TO_ADDR
14637: LD_INT 2
14639: PUSH
14640: FOR_TO
14641: IFFALSE 14768
// begin uc_side := your_side ;
14643: LD_ADDR_OWVAR 20
14647: PUSH
14648: LD_OWVAR 2
14652: ST_TO_ADDR
// uc_nation := nation_american ;
14653: LD_ADDR_OWVAR 21
14657: PUSH
14658: LD_INT 1
14660: ST_TO_ADDR
// vc_chassis := us_morphling ;
14661: LD_ADDR_OWVAR 37
14665: PUSH
14666: LD_INT 5
14668: ST_TO_ADDR
// vc_engine := engine_siberite ;
14669: LD_ADDR_OWVAR 39
14673: PUSH
14674: LD_INT 3
14676: ST_TO_ADDR
// vc_control := control_computer ;
14677: LD_ADDR_OWVAR 38
14681: PUSH
14682: LD_INT 3
14684: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14685: LD_ADDR_OWVAR 40
14689: PUSH
14690: LD_INT 10
14692: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14693: LD_VAR 0 2
14697: PUSH
14698: LD_INT 1
14700: ARRAY
14701: PPUSH
14702: CALL_OW 310
14706: NOT
14707: IFFALSE 14754
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14709: CALL_OW 45
14713: PPUSH
14714: LD_VAR 0 2
14718: PUSH
14719: LD_INT 1
14721: ARRAY
14722: PPUSH
14723: CALL_OW 250
14727: PPUSH
14728: LD_VAR 0 2
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PPUSH
14737: CALL_OW 251
14741: PPUSH
14742: LD_INT 12
14744: PPUSH
14745: LD_INT 1
14747: PPUSH
14748: CALL_OW 50
14752: GO 14766
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14754: CALL_OW 45
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 51
// end ;
14766: GO 14640
14768: POP
14769: POP
// end ;
14770: PPOPN 2
14772: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14773: LD_EXP 15
14777: PUSH
14778: LD_EXP 61
14782: AND
14783: IFFALSE 15005
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
14791: PPUSH
14792: PPUSH
14793: PPUSH
14794: PPUSH
14795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14796: LD_ADDR_VAR 0 6
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_OWVAR 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 3
14825: PUSH
14826: LD_INT 23
14828: PUSH
14829: LD_INT 0
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: ST_TO_ADDR
// if not tmp then
14850: LD_VAR 0 6
14854: NOT
14855: IFFALSE 14859
// exit ;
14857: GO 15005
// s1 := rand ( 1 , 4 ) ;
14859: LD_ADDR_VAR 0 2
14863: PUSH
14864: LD_INT 1
14866: PPUSH
14867: LD_INT 4
14869: PPUSH
14870: CALL_OW 12
14874: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14875: LD_ADDR_VAR 0 4
14879: PUSH
14880: LD_VAR 0 6
14884: PUSH
14885: LD_INT 1
14887: ARRAY
14888: PPUSH
14889: LD_VAR 0 2
14893: PPUSH
14894: CALL_OW 259
14898: ST_TO_ADDR
// if s1 = 1 then
14899: LD_VAR 0 2
14903: PUSH
14904: LD_INT 1
14906: EQUAL
14907: IFFALSE 14927
// s2 := rand ( 2 , 4 ) else
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_INT 2
14916: PPUSH
14917: LD_INT 4
14919: PPUSH
14920: CALL_OW 12
14924: ST_TO_ADDR
14925: GO 14935
// s2 := 1 ;
14927: LD_ADDR_VAR 0 3
14931: PUSH
14932: LD_INT 1
14934: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 6
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: CALL_OW 259
14958: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14959: LD_VAR 0 6
14963: PUSH
14964: LD_INT 1
14966: ARRAY
14967: PPUSH
14968: LD_VAR 0 2
14972: PPUSH
14973: LD_VAR 0 5
14977: PPUSH
14978: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14982: LD_VAR 0 6
14986: PUSH
14987: LD_INT 1
14989: ARRAY
14990: PPUSH
14991: LD_VAR 0 3
14995: PPUSH
14996: LD_VAR 0 4
15000: PPUSH
15001: CALL_OW 237
// end ;
15005: PPOPN 6
15007: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15008: LD_EXP 15
15012: PUSH
15013: LD_EXP 62
15017: AND
15018: IFFALSE 15097
15020: GO 15022
15022: DISABLE
15023: LD_INT 0
15025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: LD_INT 22
15033: PUSH
15034: LD_OWVAR 2
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 3
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: ST_TO_ADDR
// if not tmp then
15062: LD_VAR 0 1
15066: NOT
15067: IFFALSE 15071
// exit ;
15069: GO 15097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15071: LD_VAR 0 1
15075: PUSH
15076: LD_INT 1
15078: PPUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 12
15088: ARRAY
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 234
// end ;
15097: PPOPN 1
15099: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15100: LD_EXP 15
15104: PUSH
15105: LD_EXP 63
15109: AND
15110: IFFALSE 15222
15112: GO 15114
15114: DISABLE
15115: LD_INT 0
15117: PPUSH
15118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: LD_INT 22
15126: PUSH
15127: LD_OWVAR 2
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: LD_INT 30
15141: PUSH
15142: LD_INT 27
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 30
15151: PUSH
15152: LD_INT 26
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 30
15161: PUSH
15162: LD_INT 28
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: ST_TO_ADDR
// if not tmp then
15184: LD_VAR 0 2
15188: NOT
15189: IFFALSE 15193
// exit ;
15191: GO 15222
// for i in tmp do
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: LD_VAR 0 2
15202: PUSH
15203: FOR_IN
15204: IFFALSE 15220
// SetLives ( i , 1 ) ;
15206: LD_VAR 0 1
15210: PPUSH
15211: LD_INT 1
15213: PPUSH
15214: CALL_OW 234
15218: GO 15203
15220: POP
15221: POP
// end ;
15222: PPOPN 2
15224: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15225: LD_EXP 15
15229: PUSH
15230: LD_EXP 64
15234: AND
15235: IFFALSE 15509
15237: GO 15239
15239: DISABLE
15240: LD_INT 0
15242: PPUSH
15243: PPUSH
15244: PPUSH
// begin i := rand ( 1 , 7 ) ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_INT 7
15255: PPUSH
15256: CALL_OW 12
15260: ST_TO_ADDR
// case i of 1 :
15261: LD_VAR 0 1
15265: PUSH
15266: LD_INT 1
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15284
15274: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15275: LD_STRING earthquake(getX(game), 0, 32)
15277: PPUSH
15278: CALL_OW 559
15282: GO 15509
15284: LD_INT 2
15286: DOUBLE
15287: EQUAL
15288: IFTRUE 15292
15290: GO 15306
15292: POP
// begin ToLua ( displayStucuk(); ) ;
15293: LD_STRING displayStucuk();
15295: PPUSH
15296: CALL_OW 559
// ResetFog ;
15300: CALL_OW 335
// end ; 3 :
15304: GO 15509
15306: LD_INT 3
15308: DOUBLE
15309: EQUAL
15310: IFTRUE 15314
15312: GO 15418
15314: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15315: LD_ADDR_VAR 0 2
15319: PUSH
15320: LD_INT 22
15322: PUSH
15323: LD_OWVAR 2
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 1
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: ST_TO_ADDR
// if not tmp then
15351: LD_VAR 0 2
15355: NOT
15356: IFFALSE 15360
// exit ;
15358: GO 15509
// un := tmp [ rand ( 1 , tmp ) ] ;
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_VAR 0 2
15369: PUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_VAR 0 2
15377: PPUSH
15378: CALL_OW 12
15382: ARRAY
15383: ST_TO_ADDR
// if Crawls ( un ) then
15384: LD_VAR 0 3
15388: PPUSH
15389: CALL_OW 318
15393: IFFALSE 15404
// ComWalk ( un ) ;
15395: LD_VAR 0 3
15399: PPUSH
15400: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15404: LD_VAR 0 3
15408: PPUSH
15409: LD_INT 8
15411: PPUSH
15412: CALL_OW 336
// end ; 4 :
15416: GO 15509
15418: LD_INT 4
15420: DOUBLE
15421: EQUAL
15422: IFTRUE 15426
15424: GO 15487
15426: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15427: LD_ADDR_VAR 0 2
15431: PUSH
15432: LD_INT 22
15434: PUSH
15435: LD_OWVAR 2
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 30
15446: PUSH
15447: LD_INT 29
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: ST_TO_ADDR
// if not tmp then
15463: LD_VAR 0 2
15467: NOT
15468: IFFALSE 15472
// exit ;
15470: GO 15509
// DestroyUnit ( tmp [ 1 ] ) ;
15472: LD_VAR 0 2
15476: PUSH
15477: LD_INT 1
15479: ARRAY
15480: PPUSH
15481: CALL_OW 65
// end ; 5 .. 7 :
15485: GO 15509
15487: LD_INT 5
15489: DOUBLE
15490: GREATEREQUAL
15491: IFFALSE 15499
15493: LD_INT 7
15495: DOUBLE
15496: LESSEQUAL
15497: IFTRUE 15501
15499: GO 15508
15501: POP
// StreamSibBomb ; end ;
15502: CALL 11759 0 0
15506: GO 15509
15508: POP
// end ;
15509: PPOPN 3
15511: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15512: LD_EXP 15
15516: PUSH
15517: LD_EXP 65
15521: AND
15522: IFFALSE 15678
15524: GO 15526
15526: DISABLE
15527: LD_INT 0
15529: PPUSH
15530: PPUSH
15531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: LD_INT 81
15539: PUSH
15540: LD_OWVAR 2
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 21
15564: PUSH
15565: LD_INT 2
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PPUSH
15581: CALL_OW 69
15585: ST_TO_ADDR
// if not tmp then
15586: LD_VAR 0 2
15590: NOT
15591: IFFALSE 15595
// exit ;
15593: GO 15678
// p := 0 ;
15595: LD_ADDR_VAR 0 3
15599: PUSH
15600: LD_INT 0
15602: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15603: LD_INT 35
15605: PPUSH
15606: CALL_OW 67
// p := p + 1 ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 3
15619: PUSH
15620: LD_INT 1
15622: PLUS
15623: ST_TO_ADDR
// for i in tmp do
15624: LD_ADDR_VAR 0 1
15628: PUSH
15629: LD_VAR 0 2
15633: PUSH
15634: FOR_IN
15635: IFFALSE 15666
// if GetLives ( i ) < 1000 then
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 256
15646: PUSH
15647: LD_INT 1000
15649: LESS
15650: IFFALSE 15664
// SetLives ( i , 1000 ) ;
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_INT 1000
15659: PPUSH
15660: CALL_OW 234
15664: GO 15634
15666: POP
15667: POP
// until p > 20 ;
15668: LD_VAR 0 3
15672: PUSH
15673: LD_INT 20
15675: GREATER
15676: IFFALSE 15603
// end ;
15678: PPOPN 3
15680: END
// every 0 0$1 trigger StreamModeActive and sTime do
15681: LD_EXP 15
15685: PUSH
15686: LD_EXP 66
15690: AND
15691: IFFALSE 15726
15693: GO 15695
15695: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15696: LD_INT 28
15698: PPUSH
15699: LD_OWVAR 2
15703: PPUSH
15704: LD_INT 2
15706: PPUSH
15707: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15711: LD_INT 30
15713: PPUSH
15714: LD_OWVAR 2
15718: PPUSH
15719: LD_INT 2
15721: PPUSH
15722: CALL_OW 322
// end ;
15726: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15727: LD_EXP 15
15731: PUSH
15732: LD_EXP 67
15736: AND
15737: IFFALSE 15858
15739: GO 15741
15741: DISABLE
15742: LD_INT 0
15744: PPUSH
15745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_OWVAR 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 21
15765: PUSH
15766: LD_INT 1
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 3
15775: PUSH
15776: LD_INT 23
15778: PUSH
15779: LD_INT 0
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: PPUSH
15795: CALL_OW 69
15799: ST_TO_ADDR
// if not tmp then
15800: LD_VAR 0 2
15804: NOT
15805: IFFALSE 15809
// exit ;
15807: GO 15858
// for i in tmp do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: LD_VAR 0 2
15818: PUSH
15819: FOR_IN
15820: IFFALSE 15856
// begin if Crawls ( i ) then
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 318
15831: IFFALSE 15842
// ComWalk ( i ) ;
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 138
// SetClass ( i , 2 ) ;
15842: LD_VAR 0 1
15846: PPUSH
15847: LD_INT 2
15849: PPUSH
15850: CALL_OW 336
// end ;
15854: GO 15819
15856: POP
15857: POP
// end ;
15858: PPOPN 2
15860: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15861: LD_EXP 15
15865: PUSH
15866: LD_EXP 68
15870: AND
15871: IFFALSE 16152
15873: GO 15875
15875: DISABLE
15876: LD_INT 0
15878: PPUSH
15879: PPUSH
15880: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15881: LD_OWVAR 2
15885: PPUSH
15886: LD_INT 9
15888: PPUSH
15889: LD_INT 1
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15899: LD_INT 9
15901: PPUSH
15902: LD_OWVAR 2
15906: PPUSH
15907: CALL_OW 343
// uc_side := 9 ;
15911: LD_ADDR_OWVAR 20
15915: PUSH
15916: LD_INT 9
15918: ST_TO_ADDR
// uc_nation := 2 ;
15919: LD_ADDR_OWVAR 21
15923: PUSH
15924: LD_INT 2
15926: ST_TO_ADDR
// hc_name := Dark Warrior ;
15927: LD_ADDR_OWVAR 26
15931: PUSH
15932: LD_STRING Dark Warrior
15934: ST_TO_ADDR
// hc_gallery :=  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_noskilllimit := true ;
15943: LD_ADDR_OWVAR 76
15947: PUSH
15948: LD_INT 1
15950: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15951: LD_ADDR_OWVAR 31
15955: PUSH
15956: LD_INT 30
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 30
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: ST_TO_ADDR
// un := CreateHuman ;
15974: LD_ADDR_VAR 0 3
15978: PUSH
15979: CALL_OW 44
15983: ST_TO_ADDR
// hc_noskilllimit := false ;
15984: LD_ADDR_OWVAR 76
15988: PUSH
15989: LD_INT 0
15991: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 51
// p := 0 ;
16004: LD_ADDR_VAR 0 2
16008: PUSH
16009: LD_INT 0
16011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16012: LD_INT 35
16014: PPUSH
16015: CALL_OW 67
// p := p + 1 ;
16019: LD_ADDR_VAR 0 2
16023: PUSH
16024: LD_VAR 0 2
16028: PUSH
16029: LD_INT 1
16031: PLUS
16032: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16033: LD_VAR 0 3
16037: PPUSH
16038: CALL_OW 256
16042: PUSH
16043: LD_INT 1000
16045: LESS
16046: IFFALSE 16060
// SetLives ( un , 1000 ) ;
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1000
16055: PPUSH
16056: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16060: LD_VAR 0 3
16064: PPUSH
16065: LD_INT 81
16067: PUSH
16068: LD_OWVAR 2
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 91
16079: PUSH
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 30
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: PPUSH
16102: LD_VAR 0 3
16106: PPUSH
16107: CALL_OW 74
16111: PPUSH
16112: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16116: LD_VAR 0 2
16120: PUSH
16121: LD_INT 60
16123: GREATER
16124: PUSH
16125: LD_VAR 0 3
16129: PPUSH
16130: CALL_OW 301
16134: OR
16135: IFFALSE 16012
// if un then
16137: LD_VAR 0 3
16141: IFFALSE 16152
// RemoveUnit ( un ) ;
16143: LD_VAR 0 3
16147: PPUSH
16148: CALL_OW 64
// end ;
16152: PPOPN 3
16154: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16155: LD_INT 0
16157: PPUSH
// case cmd of 301 :
16158: LD_VAR 0 1
16162: PUSH
16163: LD_INT 301
16165: DOUBLE
16166: EQUAL
16167: IFTRUE 16171
16169: GO 16203
16171: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16172: LD_VAR 0 6
16176: PPUSH
16177: LD_VAR 0 7
16181: PPUSH
16182: LD_VAR 0 8
16186: PPUSH
16187: LD_VAR 0 4
16191: PPUSH
16192: LD_VAR 0 5
16196: PPUSH
16197: CALL 17404 0 5
16201: GO 16324
16203: LD_INT 302
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16248
16211: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16212: LD_VAR 0 6
16216: PPUSH
16217: LD_VAR 0 7
16221: PPUSH
16222: LD_VAR 0 8
16226: PPUSH
16227: LD_VAR 0 9
16231: PPUSH
16232: LD_VAR 0 4
16236: PPUSH
16237: LD_VAR 0 5
16241: PPUSH
16242: CALL 17495 0 6
16246: GO 16324
16248: LD_INT 303
16250: DOUBLE
16251: EQUAL
16252: IFTRUE 16256
16254: GO 16293
16256: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16257: LD_VAR 0 6
16261: PPUSH
16262: LD_VAR 0 7
16266: PPUSH
16267: LD_VAR 0 8
16271: PPUSH
16272: LD_VAR 0 9
16276: PPUSH
16277: LD_VAR 0 4
16281: PPUSH
16282: LD_VAR 0 5
16286: PPUSH
16287: CALL 16329 0 6
16291: GO 16324
16293: LD_INT 304
16295: DOUBLE
16296: EQUAL
16297: IFTRUE 16301
16299: GO 16323
16301: POP
// hHackTeleport ( unit , x , y ) ; end ;
16302: LD_VAR 0 2
16306: PPUSH
16307: LD_VAR 0 4
16311: PPUSH
16312: LD_VAR 0 5
16316: PPUSH
16317: CALL 18088 0 3
16321: GO 16324
16323: POP
// end ;
16324: LD_VAR 0 12
16328: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16329: LD_INT 0
16331: PPUSH
16332: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16333: LD_VAR 0 1
16337: PUSH
16338: LD_INT 1
16340: LESS
16341: PUSH
16342: LD_VAR 0 1
16346: PUSH
16347: LD_INT 3
16349: GREATER
16350: OR
16351: PUSH
16352: LD_VAR 0 5
16356: PPUSH
16357: LD_VAR 0 6
16361: PPUSH
16362: CALL_OW 428
16366: OR
16367: IFFALSE 16371
// exit ;
16369: GO 17091
// uc_side := your_side ;
16371: LD_ADDR_OWVAR 20
16375: PUSH
16376: LD_OWVAR 2
16380: ST_TO_ADDR
// uc_nation := nation ;
16381: LD_ADDR_OWVAR 21
16385: PUSH
16386: LD_VAR 0 1
16390: ST_TO_ADDR
// bc_level = 1 ;
16391: LD_ADDR_OWVAR 43
16395: PUSH
16396: LD_INT 1
16398: ST_TO_ADDR
// case btype of 1 :
16399: LD_VAR 0 2
16403: PUSH
16404: LD_INT 1
16406: DOUBLE
16407: EQUAL
16408: IFTRUE 16412
16410: GO 16423
16412: POP
// bc_type := b_depot ; 2 :
16413: LD_ADDR_OWVAR 42
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
16421: GO 17035
16423: LD_INT 2
16425: DOUBLE
16426: EQUAL
16427: IFTRUE 16431
16429: GO 16442
16431: POP
// bc_type := b_warehouse ; 3 :
16432: LD_ADDR_OWVAR 42
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
16440: GO 17035
16442: LD_INT 3
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16461
16450: POP
// bc_type := b_lab ; 4 .. 9 :
16451: LD_ADDR_OWVAR 42
16455: PUSH
16456: LD_INT 6
16458: ST_TO_ADDR
16459: GO 17035
16461: LD_INT 4
16463: DOUBLE
16464: GREATEREQUAL
16465: IFFALSE 16473
16467: LD_INT 9
16469: DOUBLE
16470: LESSEQUAL
16471: IFTRUE 16475
16473: GO 16527
16475: POP
// begin bc_type := b_lab_half ;
16476: LD_ADDR_OWVAR 42
16480: PUSH
16481: LD_INT 7
16483: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16484: LD_ADDR_OWVAR 44
16488: PUSH
16489: LD_INT 10
16491: PUSH
16492: LD_INT 11
16494: PUSH
16495: LD_INT 12
16497: PUSH
16498: LD_INT 15
16500: PUSH
16501: LD_INT 14
16503: PUSH
16504: LD_INT 13
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: LD_VAR 0 2
16519: PUSH
16520: LD_INT 3
16522: MINUS
16523: ARRAY
16524: ST_TO_ADDR
// end ; 10 .. 13 :
16525: GO 17035
16527: LD_INT 10
16529: DOUBLE
16530: GREATEREQUAL
16531: IFFALSE 16539
16533: LD_INT 13
16535: DOUBLE
16536: LESSEQUAL
16537: IFTRUE 16541
16539: GO 16618
16541: POP
// begin bc_type := b_lab_full ;
16542: LD_ADDR_OWVAR 42
16546: PUSH
16547: LD_INT 8
16549: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16550: LD_ADDR_OWVAR 44
16554: PUSH
16555: LD_INT 10
16557: PUSH
16558: LD_INT 12
16560: PUSH
16561: LD_INT 14
16563: PUSH
16564: LD_INT 13
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: PUSH
16573: LD_VAR 0 2
16577: PUSH
16578: LD_INT 9
16580: MINUS
16581: ARRAY
16582: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16583: LD_ADDR_OWVAR 45
16587: PUSH
16588: LD_INT 11
16590: PUSH
16591: LD_INT 15
16593: PUSH
16594: LD_INT 12
16596: PUSH
16597: LD_INT 15
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: LD_VAR 0 2
16610: PUSH
16611: LD_INT 9
16613: MINUS
16614: ARRAY
16615: ST_TO_ADDR
// end ; 14 :
16616: GO 17035
16618: LD_INT 14
16620: DOUBLE
16621: EQUAL
16622: IFTRUE 16626
16624: GO 16637
16626: POP
// bc_type := b_workshop ; 15 :
16627: LD_ADDR_OWVAR 42
16631: PUSH
16632: LD_INT 2
16634: ST_TO_ADDR
16635: GO 17035
16637: LD_INT 15
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16656
16645: POP
// bc_type := b_factory ; 16 :
16646: LD_ADDR_OWVAR 42
16650: PUSH
16651: LD_INT 3
16653: ST_TO_ADDR
16654: GO 17035
16656: LD_INT 16
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16675
16664: POP
// bc_type := b_ext_gun ; 17 :
16665: LD_ADDR_OWVAR 42
16669: PUSH
16670: LD_INT 17
16672: ST_TO_ADDR
16673: GO 17035
16675: LD_INT 17
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16711
16683: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16684: LD_ADDR_OWVAR 42
16688: PUSH
16689: LD_INT 19
16691: PUSH
16692: LD_INT 23
16694: PUSH
16695: LD_INT 19
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: PUSH
16703: LD_VAR 0 1
16707: ARRAY
16708: ST_TO_ADDR
16709: GO 17035
16711: LD_INT 18
16713: DOUBLE
16714: EQUAL
16715: IFTRUE 16719
16717: GO 16730
16719: POP
// bc_type := b_ext_radar ; 19 :
16720: LD_ADDR_OWVAR 42
16724: PUSH
16725: LD_INT 20
16727: ST_TO_ADDR
16728: GO 17035
16730: LD_INT 19
16732: DOUBLE
16733: EQUAL
16734: IFTRUE 16738
16736: GO 16749
16738: POP
// bc_type := b_ext_radio ; 20 :
16739: LD_ADDR_OWVAR 42
16743: PUSH
16744: LD_INT 22
16746: ST_TO_ADDR
16747: GO 17035
16749: LD_INT 20
16751: DOUBLE
16752: EQUAL
16753: IFTRUE 16757
16755: GO 16768
16757: POP
// bc_type := b_ext_siberium ; 21 :
16758: LD_ADDR_OWVAR 42
16762: PUSH
16763: LD_INT 21
16765: ST_TO_ADDR
16766: GO 17035
16768: LD_INT 21
16770: DOUBLE
16771: EQUAL
16772: IFTRUE 16776
16774: GO 16787
16776: POP
// bc_type := b_ext_computer ; 22 :
16777: LD_ADDR_OWVAR 42
16781: PUSH
16782: LD_INT 24
16784: ST_TO_ADDR
16785: GO 17035
16787: LD_INT 22
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16795
16793: GO 16806
16795: POP
// bc_type := b_ext_track ; 23 :
16796: LD_ADDR_OWVAR 42
16800: PUSH
16801: LD_INT 16
16803: ST_TO_ADDR
16804: GO 17035
16806: LD_INT 23
16808: DOUBLE
16809: EQUAL
16810: IFTRUE 16814
16812: GO 16825
16814: POP
// bc_type := b_ext_laser ; 24 :
16815: LD_ADDR_OWVAR 42
16819: PUSH
16820: LD_INT 25
16822: ST_TO_ADDR
16823: GO 17035
16825: LD_INT 24
16827: DOUBLE
16828: EQUAL
16829: IFTRUE 16833
16831: GO 16844
16833: POP
// bc_type := b_control_tower ; 25 :
16834: LD_ADDR_OWVAR 42
16838: PUSH
16839: LD_INT 36
16841: ST_TO_ADDR
16842: GO 17035
16844: LD_INT 25
16846: DOUBLE
16847: EQUAL
16848: IFTRUE 16852
16850: GO 16863
16852: POP
// bc_type := b_breastwork ; 26 :
16853: LD_ADDR_OWVAR 42
16857: PUSH
16858: LD_INT 31
16860: ST_TO_ADDR
16861: GO 17035
16863: LD_INT 26
16865: DOUBLE
16866: EQUAL
16867: IFTRUE 16871
16869: GO 16882
16871: POP
// bc_type := b_bunker ; 27 :
16872: LD_ADDR_OWVAR 42
16876: PUSH
16877: LD_INT 32
16879: ST_TO_ADDR
16880: GO 17035
16882: LD_INT 27
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 16901
16890: POP
// bc_type := b_turret ; 28 :
16891: LD_ADDR_OWVAR 42
16895: PUSH
16896: LD_INT 33
16898: ST_TO_ADDR
16899: GO 17035
16901: LD_INT 28
16903: DOUBLE
16904: EQUAL
16905: IFTRUE 16909
16907: GO 16920
16909: POP
// bc_type := b_armoury ; 29 :
16910: LD_ADDR_OWVAR 42
16914: PUSH
16915: LD_INT 4
16917: ST_TO_ADDR
16918: GO 17035
16920: LD_INT 29
16922: DOUBLE
16923: EQUAL
16924: IFTRUE 16928
16926: GO 16939
16928: POP
// bc_type := b_barracks ; 30 :
16929: LD_ADDR_OWVAR 42
16933: PUSH
16934: LD_INT 5
16936: ST_TO_ADDR
16937: GO 17035
16939: LD_INT 30
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 16958
16947: POP
// bc_type := b_solar_power ; 31 :
16948: LD_ADDR_OWVAR 42
16952: PUSH
16953: LD_INT 27
16955: ST_TO_ADDR
16956: GO 17035
16958: LD_INT 31
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 16977
16966: POP
// bc_type := b_oil_power ; 32 :
16967: LD_ADDR_OWVAR 42
16971: PUSH
16972: LD_INT 26
16974: ST_TO_ADDR
16975: GO 17035
16977: LD_INT 32
16979: DOUBLE
16980: EQUAL
16981: IFTRUE 16985
16983: GO 16996
16985: POP
// bc_type := b_siberite_power ; 33 :
16986: LD_ADDR_OWVAR 42
16990: PUSH
16991: LD_INT 28
16993: ST_TO_ADDR
16994: GO 17035
16996: LD_INT 33
16998: DOUBLE
16999: EQUAL
17000: IFTRUE 17004
17002: GO 17015
17004: POP
// bc_type := b_oil_mine ; 34 :
17005: LD_ADDR_OWVAR 42
17009: PUSH
17010: LD_INT 29
17012: ST_TO_ADDR
17013: GO 17035
17015: LD_INT 34
17017: DOUBLE
17018: EQUAL
17019: IFTRUE 17023
17021: GO 17034
17023: POP
// bc_type := b_siberite_mine ; end ;
17024: LD_ADDR_OWVAR 42
17028: PUSH
17029: LD_INT 30
17031: ST_TO_ADDR
17032: GO 17035
17034: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17035: LD_ADDR_VAR 0 8
17039: PUSH
17040: LD_VAR 0 5
17044: PPUSH
17045: LD_VAR 0 6
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: CALL_OW 47
17059: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17060: LD_OWVAR 42
17064: PUSH
17065: LD_INT 32
17067: PUSH
17068: LD_INT 33
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: IN
17075: IFFALSE 17091
// PlaceWeaponTurret ( b , weapon ) ;
17077: LD_VAR 0 8
17081: PPUSH
17082: LD_VAR 0 4
17086: PPUSH
17087: CALL_OW 431
// end ;
17091: LD_VAR 0 7
17095: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17102: LD_ADDR_VAR 0 4
17106: PUSH
17107: LD_INT 22
17109: PUSH
17110: LD_OWVAR 2
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 0
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 69
17155: ST_TO_ADDR
// if not tmp then
17156: LD_VAR 0 4
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17224
// for i in tmp do
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_VAR 0 4
17174: PUSH
17175: FOR_IN
17176: IFFALSE 17222
// for j = 1 to 3 do
17178: LD_ADDR_VAR 0 3
17182: PUSH
17183: DOUBLE
17184: LD_INT 1
17186: DEC
17187: ST_TO_ADDR
17188: LD_INT 3
17190: PUSH
17191: FOR_TO
17192: IFFALSE 17218
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17194: LD_VAR 0 2
17198: PPUSH
17199: CALL_OW 274
17203: PPUSH
17204: LD_VAR 0 3
17208: PPUSH
17209: LD_INT 99999
17211: PPUSH
17212: CALL_OW 277
17216: GO 17191
17218: POP
17219: POP
17220: GO 17175
17222: POP
17223: POP
// end ;
17224: LD_VAR 0 1
17228: RET
// export function hHackSetLevel10 ; var i , j ; begin
17229: LD_INT 0
17231: PPUSH
17232: PPUSH
17233: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17234: LD_ADDR_VAR 0 2
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PPUSH
17249: CALL_OW 69
17253: PUSH
17254: FOR_IN
17255: IFFALSE 17307
// if IsSelected ( i ) then
17257: LD_VAR 0 2
17261: PPUSH
17262: CALL_OW 306
17266: IFFALSE 17305
// begin for j := 1 to 4 do
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: DOUBLE
17274: LD_INT 1
17276: DEC
17277: ST_TO_ADDR
17278: LD_INT 4
17280: PUSH
17281: FOR_TO
17282: IFFALSE 17303
// SetSkill ( i , j , 10 ) ;
17284: LD_VAR 0 2
17288: PPUSH
17289: LD_VAR 0 3
17293: PPUSH
17294: LD_INT 10
17296: PPUSH
17297: CALL_OW 237
17301: GO 17281
17303: POP
17304: POP
// end ;
17305: GO 17254
17307: POP
17308: POP
// end ;
17309: LD_VAR 0 1
17313: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_INT 22
17326: PUSH
17327: LD_OWVAR 2
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 21
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PPUSH
17350: CALL_OW 69
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17397
// begin for j := 1 to 4 do
17358: LD_ADDR_VAR 0 3
17362: PUSH
17363: DOUBLE
17364: LD_INT 1
17366: DEC
17367: ST_TO_ADDR
17368: LD_INT 4
17370: PUSH
17371: FOR_TO
17372: IFFALSE 17393
// SetSkill ( i , j , 10 ) ;
17374: LD_VAR 0 2
17378: PPUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_INT 10
17386: PPUSH
17387: CALL_OW 237
17391: GO 17371
17393: POP
17394: POP
// end ;
17395: GO 17355
17397: POP
17398: POP
// end ;
17399: LD_VAR 0 1
17403: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17404: LD_INT 0
17406: PPUSH
// uc_side := your_side ;
17407: LD_ADDR_OWVAR 20
17411: PUSH
17412: LD_OWVAR 2
17416: ST_TO_ADDR
// uc_nation := nation ;
17417: LD_ADDR_OWVAR 21
17421: PUSH
17422: LD_VAR 0 1
17426: ST_TO_ADDR
// InitHc ;
17427: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17431: LD_INT 0
17433: PPUSH
17434: LD_VAR 0 2
17438: PPUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17448: LD_VAR 0 4
17452: PPUSH
17453: LD_VAR 0 5
17457: PPUSH
17458: CALL_OW 428
17462: PUSH
17463: LD_INT 0
17465: EQUAL
17466: IFFALSE 17490
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17468: CALL_OW 44
17472: PPUSH
17473: LD_VAR 0 4
17477: PPUSH
17478: LD_VAR 0 5
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: CALL_OW 48
// end ;
17490: LD_VAR 0 6
17494: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17495: LD_INT 0
17497: PPUSH
17498: PPUSH
// uc_side := your_side ;
17499: LD_ADDR_OWVAR 20
17503: PUSH
17504: LD_OWVAR 2
17508: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17509: LD_VAR 0 1
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: LD_INT 3
17522: PUSH
17523: LD_INT 4
17525: PUSH
17526: LD_INT 5
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: IN
17536: IFFALSE 17548
// uc_nation := nation_american else
17538: LD_ADDR_OWVAR 21
17542: PUSH
17543: LD_INT 1
17545: ST_TO_ADDR
17546: GO 17591
// if chassis in [ 11 , 12 , 13 , 14 ] then
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 11
17555: PUSH
17556: LD_INT 12
17558: PUSH
17559: LD_INT 13
17561: PUSH
17562: LD_INT 14
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: IN
17571: IFFALSE 17583
// uc_nation := nation_arabian else
17573: LD_ADDR_OWVAR 21
17577: PUSH
17578: LD_INT 2
17580: ST_TO_ADDR
17581: GO 17591
// uc_nation := nation_russian ;
17583: LD_ADDR_OWVAR 21
17587: PUSH
17588: LD_INT 3
17590: ST_TO_ADDR
// vc_chassis := chassis ;
17591: LD_ADDR_OWVAR 37
17595: PUSH
17596: LD_VAR 0 1
17600: ST_TO_ADDR
// vc_engine := engine ;
17601: LD_ADDR_OWVAR 39
17605: PUSH
17606: LD_VAR 0 2
17610: ST_TO_ADDR
// vc_control := control ;
17611: LD_ADDR_OWVAR 38
17615: PUSH
17616: LD_VAR 0 3
17620: ST_TO_ADDR
// vc_weapon := weapon ;
17621: LD_ADDR_OWVAR 40
17625: PUSH
17626: LD_VAR 0 4
17630: ST_TO_ADDR
// un := CreateVehicle ;
17631: LD_ADDR_VAR 0 8
17635: PUSH
17636: CALL_OW 45
17640: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17641: LD_VAR 0 8
17645: PPUSH
17646: LD_INT 0
17648: PPUSH
17649: LD_INT 5
17651: PPUSH
17652: CALL_OW 12
17656: PPUSH
17657: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17661: LD_VAR 0 8
17665: PPUSH
17666: LD_VAR 0 5
17670: PPUSH
17671: LD_VAR 0 6
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: CALL_OW 48
// end ;
17683: LD_VAR 0 7
17687: RET
// export hInvincible ; every 1 do
17688: GO 17690
17690: DISABLE
// hInvincible := [ ] ;
17691: LD_ADDR_EXP 69
17695: PUSH
17696: EMPTY
17697: ST_TO_ADDR
17698: END
// every 10 do var i ;
17699: GO 17701
17701: DISABLE
17702: LD_INT 0
17704: PPUSH
// begin enable ;
17705: ENABLE
// if not hInvincible then
17706: LD_EXP 69
17710: NOT
17711: IFFALSE 17715
// exit ;
17713: GO 17759
// for i in hInvincible do
17715: LD_ADDR_VAR 0 1
17719: PUSH
17720: LD_EXP 69
17724: PUSH
17725: FOR_IN
17726: IFFALSE 17757
// if GetLives ( i ) < 1000 then
17728: LD_VAR 0 1
17732: PPUSH
17733: CALL_OW 256
17737: PUSH
17738: LD_INT 1000
17740: LESS
17741: IFFALSE 17755
// SetLives ( i , 1000 ) ;
17743: LD_VAR 0 1
17747: PPUSH
17748: LD_INT 1000
17750: PPUSH
17751: CALL_OW 234
17755: GO 17725
17757: POP
17758: POP
// end ;
17759: PPOPN 1
17761: END
// export function hHackInvincible ; var i ; begin
17762: LD_INT 0
17764: PPUSH
17765: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17766: LD_ADDR_VAR 0 2
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17866
// if IsSelected ( i ) then
17807: LD_VAR 0 2
17811: PPUSH
17812: CALL_OW 306
17816: IFFALSE 17864
// begin if i in hInvincible then
17818: LD_VAR 0 2
17822: PUSH
17823: LD_EXP 69
17827: IN
17828: IFFALSE 17848
// hInvincible := hInvincible diff i else
17830: LD_ADDR_EXP 69
17834: PUSH
17835: LD_EXP 69
17839: PUSH
17840: LD_VAR 0 2
17844: DIFF
17845: ST_TO_ADDR
17846: GO 17864
// hInvincible := hInvincible union i ;
17848: LD_ADDR_EXP 69
17852: PUSH
17853: LD_EXP 69
17857: PUSH
17858: LD_VAR 0 2
17862: UNION
17863: ST_TO_ADDR
// end ;
17864: GO 17804
17866: POP
17867: POP
// end ;
17868: LD_VAR 0 1
17872: RET
// export function hHackInvisible ; var i , j ; begin
17873: LD_INT 0
17875: PPUSH
17876: PPUSH
17877: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PPUSH
17893: CALL_OW 69
17897: PUSH
17898: FOR_IN
17899: IFFALSE 17923
// if IsSelected ( i ) then
17901: LD_VAR 0 2
17905: PPUSH
17906: CALL_OW 306
17910: IFFALSE 17921
// ComForceInvisible ( i ) ;
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 496
17921: GO 17898
17923: POP
17924: POP
// end ;
17925: LD_VAR 0 1
17929: RET
// export function hHackChangeYourSide ; begin
17930: LD_INT 0
17932: PPUSH
// if your_side = 8 then
17933: LD_OWVAR 2
17937: PUSH
17938: LD_INT 8
17940: EQUAL
17941: IFFALSE 17953
// your_side := 0 else
17943: LD_ADDR_OWVAR 2
17947: PUSH
17948: LD_INT 0
17950: ST_TO_ADDR
17951: GO 17967
// your_side := your_side + 1 ;
17953: LD_ADDR_OWVAR 2
17957: PUSH
17958: LD_OWVAR 2
17962: PUSH
17963: LD_INT 1
17965: PLUS
17966: ST_TO_ADDR
// end ;
17967: LD_VAR 0 1
17971: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17972: LD_INT 0
17974: PPUSH
17975: PPUSH
17976: PPUSH
// for i in all_units do
17977: LD_ADDR_VAR 0 2
17981: PUSH
17982: LD_OWVAR 3
17986: PUSH
17987: FOR_IN
17988: IFFALSE 18066
// if IsSelected ( i ) then
17990: LD_VAR 0 2
17994: PPUSH
17995: CALL_OW 306
17999: IFFALSE 18064
// begin j := GetSide ( i ) ;
18001: LD_ADDR_VAR 0 3
18005: PUSH
18006: LD_VAR 0 2
18010: PPUSH
18011: CALL_OW 255
18015: ST_TO_ADDR
// if j = 8 then
18016: LD_VAR 0 3
18020: PUSH
18021: LD_INT 8
18023: EQUAL
18024: IFFALSE 18036
// j := 0 else
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: LD_INT 0
18033: ST_TO_ADDR
18034: GO 18050
// j := j + 1 ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 3
18045: PUSH
18046: LD_INT 1
18048: PLUS
18049: ST_TO_ADDR
// SetSide ( i , j ) ;
18050: LD_VAR 0 2
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: CALL_OW 235
// end ;
18064: GO 17987
18066: POP
18067: POP
// end ;
18068: LD_VAR 0 1
18072: RET
// export function hHackFog ; begin
18073: LD_INT 0
18075: PPUSH
// FogOff ( true ) ;
18076: LD_INT 1
18078: PPUSH
18079: CALL_OW 344
// end ;
18083: LD_VAR 0 1
18087: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18088: LD_INT 0
18090: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18091: LD_VAR 0 1
18095: PPUSH
18096: LD_VAR 0 2
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: LD_INT 1
18111: PPUSH
18112: CALL_OW 483
// CenterOnXY ( x , y ) ;
18116: LD_VAR 0 2
18120: PPUSH
18121: LD_VAR 0 3
18125: PPUSH
18126: CALL_OW 84
// end ; end_of_file
18130: LD_VAR 0 4
18134: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18135: LD_INT 0
18137: PPUSH
18138: PPUSH
18139: PPUSH
18140: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18141: LD_VAR 0 1
18145: PPUSH
18146: CALL_OW 264
18150: PUSH
18151: LD_EXP 86
18155: EQUAL
18156: IFFALSE 18228
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18158: LD_INT 68
18160: PPUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 255
18170: PPUSH
18171: CALL_OW 321
18175: PUSH
18176: LD_INT 2
18178: EQUAL
18179: IFFALSE 18191
// eff := 70 else
18181: LD_ADDR_VAR 0 4
18185: PUSH
18186: LD_INT 70
18188: ST_TO_ADDR
18189: GO 18199
// eff := 30 ;
18191: LD_ADDR_VAR 0 4
18195: PUSH
18196: LD_INT 30
18198: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 250
18208: PPUSH
18209: LD_VAR 0 1
18213: PPUSH
18214: CALL_OW 251
18218: PPUSH
18219: LD_VAR 0 4
18223: PPUSH
18224: CALL_OW 495
// end ; end ;
18228: LD_VAR 0 2
18232: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18233: LD_INT 0
18235: PPUSH
// end ;
18236: LD_VAR 0 4
18240: RET
// export function SOS_Command ( cmd ) ; begin
18241: LD_INT 0
18243: PPUSH
// end ;
18244: LD_VAR 0 2
18248: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18249: LD_INT 0
18251: PPUSH
// if cmd = 121 then
18252: LD_VAR 0 1
18256: PUSH
18257: LD_INT 121
18259: EQUAL
18260: IFFALSE 18262
// end ;
18262: LD_VAR 0 6
18266: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18267: LD_INT 0
18269: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18270: LD_VAR 0 1
18274: PUSH
18275: LD_INT 250
18277: EQUAL
18278: PUSH
18279: LD_VAR 0 2
18283: PPUSH
18284: CALL_OW 264
18288: PUSH
18289: LD_EXP 89
18293: EQUAL
18294: AND
18295: IFFALSE 18316
// MinerPlaceMine ( unit , x , y ) ;
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_VAR 0 4
18306: PPUSH
18307: LD_VAR 0 5
18311: PPUSH
18312: CALL 20665 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18316: LD_VAR 0 1
18320: PUSH
18321: LD_INT 251
18323: EQUAL
18324: PUSH
18325: LD_VAR 0 2
18329: PPUSH
18330: CALL_OW 264
18334: PUSH
18335: LD_EXP 89
18339: EQUAL
18340: AND
18341: IFFALSE 18362
// MinerDetonateMine ( unit , x , y ) ;
18343: LD_VAR 0 2
18347: PPUSH
18348: LD_VAR 0 4
18352: PPUSH
18353: LD_VAR 0 5
18357: PPUSH
18358: CALL 20942 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 252
18369: EQUAL
18370: PUSH
18371: LD_VAR 0 2
18375: PPUSH
18376: CALL_OW 264
18380: PUSH
18381: LD_EXP 89
18385: EQUAL
18386: AND
18387: IFFALSE 18408
// MinerCreateMinefield ( unit , x , y ) ;
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_VAR 0 4
18398: PPUSH
18399: LD_VAR 0 5
18403: PPUSH
18404: CALL 21359 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18408: LD_VAR 0 1
18412: PUSH
18413: LD_INT 253
18415: EQUAL
18416: PUSH
18417: LD_VAR 0 2
18421: PPUSH
18422: CALL_OW 257
18426: PUSH
18427: LD_INT 5
18429: EQUAL
18430: AND
18431: IFFALSE 18452
// ComBinocular ( unit , x , y ) ;
18433: LD_VAR 0 2
18437: PPUSH
18438: LD_VAR 0 4
18442: PPUSH
18443: LD_VAR 0 5
18447: PPUSH
18448: CALL 21730 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18452: LD_VAR 0 1
18456: PUSH
18457: LD_INT 254
18459: EQUAL
18460: PUSH
18461: LD_VAR 0 2
18465: PPUSH
18466: CALL_OW 264
18470: PUSH
18471: LD_EXP 84
18475: EQUAL
18476: AND
18477: PUSH
18478: LD_VAR 0 3
18482: PPUSH
18483: CALL_OW 263
18487: PUSH
18488: LD_INT 3
18490: EQUAL
18491: AND
18492: IFFALSE 18508
// HackDestroyVehicle ( unit , selectedUnit ) ;
18494: LD_VAR 0 2
18498: PPUSH
18499: LD_VAR 0 3
18503: PPUSH
18504: CALL 20025 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18508: LD_VAR 0 1
18512: PUSH
18513: LD_INT 255
18515: EQUAL
18516: PUSH
18517: LD_VAR 0 2
18521: PPUSH
18522: CALL_OW 264
18526: PUSH
18527: LD_INT 14
18529: PUSH
18530: LD_INT 53
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: IN
18537: AND
18538: PUSH
18539: LD_VAR 0 4
18543: PPUSH
18544: LD_VAR 0 5
18548: PPUSH
18549: CALL_OW 488
18553: AND
18554: IFFALSE 18578
// CutTreeXYR ( unit , x , y , 12 ) ;
18556: LD_VAR 0 2
18560: PPUSH
18561: LD_VAR 0 4
18565: PPUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_INT 12
18573: PPUSH
18574: CALL 18591 0 4
// end ;
18578: LD_VAR 0 6
18582: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18583: LD_INT 0
18585: PPUSH
// end ;
18586: LD_VAR 0 4
18590: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18591: LD_INT 0
18593: PPUSH
18594: PPUSH
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18602: LD_VAR 0 1
18606: NOT
18607: PUSH
18608: LD_VAR 0 2
18612: PPUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: CALL_OW 488
18622: NOT
18623: OR
18624: PUSH
18625: LD_VAR 0 4
18629: NOT
18630: OR
18631: IFFALSE 18635
// exit ;
18633: GO 18975
// list := [ ] ;
18635: LD_ADDR_VAR 0 13
18639: PUSH
18640: EMPTY
18641: ST_TO_ADDR
// if x - r < 0 then
18642: LD_VAR 0 2
18646: PUSH
18647: LD_VAR 0 4
18651: MINUS
18652: PUSH
18653: LD_INT 0
18655: LESS
18656: IFFALSE 18668
// min_x := 0 else
18658: LD_ADDR_VAR 0 7
18662: PUSH
18663: LD_INT 0
18665: ST_TO_ADDR
18666: GO 18684
// min_x := x - r ;
18668: LD_ADDR_VAR 0 7
18672: PUSH
18673: LD_VAR 0 2
18677: PUSH
18678: LD_VAR 0 4
18682: MINUS
18683: ST_TO_ADDR
// if y - r < 0 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_VAR 0 4
18693: MINUS
18694: PUSH
18695: LD_INT 0
18697: LESS
18698: IFFALSE 18710
// min_y := 0 else
18700: LD_ADDR_VAR 0 8
18704: PUSH
18705: LD_INT 0
18707: ST_TO_ADDR
18708: GO 18726
// min_y := y - r ;
18710: LD_ADDR_VAR 0 8
18714: PUSH
18715: LD_VAR 0 3
18719: PUSH
18720: LD_VAR 0 4
18724: MINUS
18725: ST_TO_ADDR
// max_x := x + r ;
18726: LD_ADDR_VAR 0 9
18730: PUSH
18731: LD_VAR 0 2
18735: PUSH
18736: LD_VAR 0 4
18740: PLUS
18741: ST_TO_ADDR
// max_y := y + r ;
18742: LD_ADDR_VAR 0 10
18746: PUSH
18747: LD_VAR 0 3
18751: PUSH
18752: LD_VAR 0 4
18756: PLUS
18757: ST_TO_ADDR
// for _x = min_x to max_x do
18758: LD_ADDR_VAR 0 11
18762: PUSH
18763: DOUBLE
18764: LD_VAR 0 7
18768: DEC
18769: ST_TO_ADDR
18770: LD_VAR 0 9
18774: PUSH
18775: FOR_TO
18776: IFFALSE 18893
// for _y = min_y to max_y do
18778: LD_ADDR_VAR 0 12
18782: PUSH
18783: DOUBLE
18784: LD_VAR 0 8
18788: DEC
18789: ST_TO_ADDR
18790: LD_VAR 0 10
18794: PUSH
18795: FOR_TO
18796: IFFALSE 18889
// begin if not ValidHex ( _x , _y ) then
18798: LD_VAR 0 11
18802: PPUSH
18803: LD_VAR 0 12
18807: PPUSH
18808: CALL_OW 488
18812: NOT
18813: IFFALSE 18817
// continue ;
18815: GO 18795
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18817: LD_VAR 0 11
18821: PPUSH
18822: LD_VAR 0 12
18826: PPUSH
18827: CALL_OW 351
18831: PUSH
18832: LD_VAR 0 11
18836: PPUSH
18837: LD_VAR 0 12
18841: PPUSH
18842: CALL_OW 554
18846: AND
18847: IFFALSE 18887
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18849: LD_ADDR_VAR 0 13
18853: PUSH
18854: LD_VAR 0 13
18858: PPUSH
18859: LD_VAR 0 13
18863: PUSH
18864: LD_INT 1
18866: PLUS
18867: PPUSH
18868: LD_VAR 0 11
18872: PUSH
18873: LD_VAR 0 12
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 2
18886: ST_TO_ADDR
// end ;
18887: GO 18795
18889: POP
18890: POP
18891: GO 18775
18893: POP
18894: POP
// if not list then
18895: LD_VAR 0 13
18899: NOT
18900: IFFALSE 18904
// exit ;
18902: GO 18975
// for i in list do
18904: LD_ADDR_VAR 0 6
18908: PUSH
18909: LD_VAR 0 13
18913: PUSH
18914: FOR_IN
18915: IFFALSE 18973
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_STRING M
18924: PUSH
18925: LD_VAR 0 6
18929: PUSH
18930: LD_INT 1
18932: ARRAY
18933: PUSH
18934: LD_VAR 0 6
18938: PUSH
18939: LD_INT 2
18941: ARRAY
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: PPUSH
18967: CALL_OW 447
18971: GO 18914
18973: POP
18974: POP
// end ;
18975: LD_VAR 0 5
18979: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18980: LD_EXP 72
18984: NOT
18985: IFFALSE 19035
18987: GO 18989
18989: DISABLE
// begin initHack := true ;
18990: LD_ADDR_EXP 72
18994: PUSH
18995: LD_INT 1
18997: ST_TO_ADDR
// hackTanks := [ ] ;
18998: LD_ADDR_EXP 73
19002: PUSH
19003: EMPTY
19004: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19005: LD_ADDR_EXP 74
19009: PUSH
19010: EMPTY
19011: ST_TO_ADDR
// hackLimit := 3 ;
19012: LD_ADDR_EXP 75
19016: PUSH
19017: LD_INT 3
19019: ST_TO_ADDR
// hackDist := 12 ;
19020: LD_ADDR_EXP 76
19024: PUSH
19025: LD_INT 12
19027: ST_TO_ADDR
// hackCounter := [ ] ;
19028: LD_ADDR_EXP 77
19032: PUSH
19033: EMPTY
19034: ST_TO_ADDR
// end ;
19035: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19036: LD_EXP 72
19040: PUSH
19041: LD_INT 34
19043: PUSH
19044: LD_EXP 84
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 69
19057: AND
19058: IFFALSE 19313
19060: GO 19062
19062: DISABLE
19063: LD_INT 0
19065: PPUSH
19066: PPUSH
// begin enable ;
19067: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19068: LD_ADDR_VAR 0 1
19072: PUSH
19073: LD_INT 34
19075: PUSH
19076: LD_EXP 84
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PPUSH
19085: CALL_OW 69
19089: PUSH
19090: FOR_IN
19091: IFFALSE 19311
// begin if not i in hackTanks then
19093: LD_VAR 0 1
19097: PUSH
19098: LD_EXP 73
19102: IN
19103: NOT
19104: IFFALSE 19187
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19106: LD_ADDR_EXP 73
19110: PUSH
19111: LD_EXP 73
19115: PPUSH
19116: LD_EXP 73
19120: PUSH
19121: LD_INT 1
19123: PLUS
19124: PPUSH
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 1
19134: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19135: LD_ADDR_EXP 74
19139: PUSH
19140: LD_EXP 74
19144: PPUSH
19145: LD_EXP 74
19149: PUSH
19150: LD_INT 1
19152: PLUS
19153: PPUSH
19154: EMPTY
19155: PPUSH
19156: CALL_OW 1
19160: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19161: LD_ADDR_EXP 77
19165: PUSH
19166: LD_EXP 77
19170: PPUSH
19171: LD_EXP 77
19175: PUSH
19176: LD_INT 1
19178: PLUS
19179: PPUSH
19180: EMPTY
19181: PPUSH
19182: CALL_OW 1
19186: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 302
19196: NOT
19197: IFFALSE 19210
// begin HackUnlinkAll ( i ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL 19316 0 1
// continue ;
19208: GO 19090
// end ; HackCheckCapturedStatus ( i ) ;
19210: LD_VAR 0 1
19214: PPUSH
19215: CALL 19759 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19219: LD_ADDR_VAR 0 2
19223: PUSH
19224: LD_INT 81
19226: PUSH
19227: LD_VAR 0 1
19231: PPUSH
19232: CALL_OW 255
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 33
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 91
19253: PUSH
19254: LD_VAR 0 1
19258: PUSH
19259: LD_EXP 76
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 50
19271: PUSH
19272: EMPTY
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: PPUSH
19281: CALL_OW 69
19285: ST_TO_ADDR
// if not tmp then
19286: LD_VAR 0 2
19290: NOT
19291: IFFALSE 19295
// continue ;
19293: GO 19090
// HackLink ( i , tmp ) ;
19295: LD_VAR 0 1
19299: PPUSH
19300: LD_VAR 0 2
19304: PPUSH
19305: CALL 19452 0 2
// end ;
19309: GO 19090
19311: POP
19312: POP
// end ;
19313: PPOPN 2
19315: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
19320: PPUSH
// if not hack in hackTanks then
19321: LD_VAR 0 1
19325: PUSH
19326: LD_EXP 73
19330: IN
19331: NOT
19332: IFFALSE 19336
// exit ;
19334: GO 19447
// index := GetElementIndex ( hackTanks , hack ) ;
19336: LD_ADDR_VAR 0 4
19340: PUSH
19341: LD_EXP 73
19345: PPUSH
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL 27252 0 2
19355: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19356: LD_EXP 74
19360: PUSH
19361: LD_VAR 0 4
19365: ARRAY
19366: IFFALSE 19447
// begin for i in hackTanksCaptured [ index ] do
19368: LD_ADDR_VAR 0 3
19372: PUSH
19373: LD_EXP 74
19377: PUSH
19378: LD_VAR 0 4
19382: ARRAY
19383: PUSH
19384: FOR_IN
19385: IFFALSE 19411
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 1
19394: ARRAY
19395: PPUSH
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 2
19403: ARRAY
19404: PPUSH
19405: CALL_OW 235
19409: GO 19384
19411: POP
19412: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19413: LD_ADDR_EXP 74
19417: PUSH
19418: LD_EXP 74
19422: PPUSH
19423: LD_VAR 0 4
19427: PPUSH
19428: EMPTY
19429: PPUSH
19430: CALL_OW 1
19434: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19435: LD_VAR 0 1
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 505
// end ; end ;
19447: LD_VAR 0 2
19451: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
// if not hack in hackTanks or not vehicles then
19457: LD_VAR 0 1
19461: PUSH
19462: LD_EXP 73
19466: IN
19467: NOT
19468: PUSH
19469: LD_VAR 0 2
19473: NOT
19474: OR
19475: IFFALSE 19479
// exit ;
19477: GO 19754
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19479: LD_ADDR_VAR 0 2
19483: PUSH
19484: LD_VAR 0 1
19488: PPUSH
19489: LD_VAR 0 2
19493: PPUSH
19494: LD_INT 1
19496: PPUSH
19497: LD_INT 1
19499: PPUSH
19500: CALL 27902 0 4
19504: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19505: LD_ADDR_VAR 0 5
19509: PUSH
19510: LD_EXP 73
19514: PPUSH
19515: LD_VAR 0 1
19519: PPUSH
19520: CALL 27252 0 2
19524: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19525: LD_EXP 74
19529: PUSH
19530: LD_VAR 0 5
19534: ARRAY
19535: PUSH
19536: LD_EXP 75
19540: LESS
19541: IFFALSE 19730
// begin for i := 1 to vehicles do
19543: LD_ADDR_VAR 0 4
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_VAR 0 2
19557: PUSH
19558: FOR_TO
19559: IFFALSE 19728
// begin if hackTanksCaptured [ index ] = hackLimit then
19561: LD_EXP 74
19565: PUSH
19566: LD_VAR 0 5
19570: ARRAY
19571: PUSH
19572: LD_EXP 75
19576: EQUAL
19577: IFFALSE 19581
// break ;
19579: GO 19728
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19581: LD_ADDR_EXP 77
19585: PUSH
19586: LD_EXP 77
19590: PPUSH
19591: LD_VAR 0 5
19595: PPUSH
19596: LD_EXP 77
19600: PUSH
19601: LD_VAR 0 5
19605: ARRAY
19606: PUSH
19607: LD_INT 1
19609: PLUS
19610: PPUSH
19611: CALL_OW 1
19615: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19616: LD_ADDR_EXP 74
19620: PUSH
19621: LD_EXP 74
19625: PPUSH
19626: LD_VAR 0 5
19630: PUSH
19631: LD_EXP 74
19635: PUSH
19636: LD_VAR 0 5
19640: ARRAY
19641: PUSH
19642: LD_INT 1
19644: PLUS
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PPUSH
19650: LD_VAR 0 2
19654: PUSH
19655: LD_VAR 0 4
19659: ARRAY
19660: PUSH
19661: LD_VAR 0 2
19665: PUSH
19666: LD_VAR 0 4
19670: ARRAY
19671: PPUSH
19672: CALL_OW 255
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PPUSH
19681: CALL 27467 0 3
19685: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19686: LD_VAR 0 2
19690: PUSH
19691: LD_VAR 0 4
19695: ARRAY
19696: PPUSH
19697: LD_VAR 0 1
19701: PPUSH
19702: CALL_OW 255
19706: PPUSH
19707: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19711: LD_VAR 0 2
19715: PUSH
19716: LD_VAR 0 4
19720: ARRAY
19721: PPUSH
19722: CALL_OW 141
// end ;
19726: GO 19558
19728: POP
19729: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_EXP 74
19739: PUSH
19740: LD_VAR 0 5
19744: ARRAY
19745: PUSH
19746: LD_INT 0
19748: PLUS
19749: PPUSH
19750: CALL_OW 505
// end ;
19754: LD_VAR 0 3
19758: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19759: LD_INT 0
19761: PPUSH
19762: PPUSH
19763: PPUSH
19764: PPUSH
// if not hack in hackTanks then
19765: LD_VAR 0 1
19769: PUSH
19770: LD_EXP 73
19774: IN
19775: NOT
19776: IFFALSE 19780
// exit ;
19778: GO 20020
// index := GetElementIndex ( hackTanks , hack ) ;
19780: LD_ADDR_VAR 0 4
19784: PUSH
19785: LD_EXP 73
19789: PPUSH
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL 27252 0 2
19799: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19800: LD_ADDR_VAR 0 3
19804: PUSH
19805: DOUBLE
19806: LD_EXP 74
19810: PUSH
19811: LD_VAR 0 4
19815: ARRAY
19816: INC
19817: ST_TO_ADDR
19818: LD_INT 1
19820: PUSH
19821: FOR_DOWNTO
19822: IFFALSE 19994
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19824: LD_ADDR_VAR 0 5
19828: PUSH
19829: LD_EXP 74
19833: PUSH
19834: LD_VAR 0 4
19838: ARRAY
19839: PUSH
19840: LD_VAR 0 3
19844: ARRAY
19845: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19846: LD_VAR 0 5
19850: PUSH
19851: LD_INT 1
19853: ARRAY
19854: PPUSH
19855: CALL_OW 302
19859: NOT
19860: PUSH
19861: LD_VAR 0 5
19865: PUSH
19866: LD_INT 1
19868: ARRAY
19869: PPUSH
19870: CALL_OW 255
19874: PUSH
19875: LD_VAR 0 1
19879: PPUSH
19880: CALL_OW 255
19884: NONEQUAL
19885: OR
19886: IFFALSE 19992
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19888: LD_VAR 0 5
19892: PUSH
19893: LD_INT 1
19895: ARRAY
19896: PPUSH
19897: CALL_OW 305
19901: PUSH
19902: LD_VAR 0 5
19906: PUSH
19907: LD_INT 1
19909: ARRAY
19910: PPUSH
19911: CALL_OW 255
19915: PUSH
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 255
19925: EQUAL
19926: AND
19927: IFFALSE 19951
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19929: LD_VAR 0 5
19933: PUSH
19934: LD_INT 1
19936: ARRAY
19937: PPUSH
19938: LD_VAR 0 5
19942: PUSH
19943: LD_INT 2
19945: ARRAY
19946: PPUSH
19947: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19951: LD_ADDR_EXP 74
19955: PUSH
19956: LD_EXP 74
19960: PPUSH
19961: LD_VAR 0 4
19965: PPUSH
19966: LD_EXP 74
19970: PUSH
19971: LD_VAR 0 4
19975: ARRAY
19976: PPUSH
19977: LD_VAR 0 3
19981: PPUSH
19982: CALL_OW 3
19986: PPUSH
19987: CALL_OW 1
19991: ST_TO_ADDR
// end ; end ;
19992: GO 19821
19994: POP
19995: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19996: LD_VAR 0 1
20000: PPUSH
20001: LD_EXP 74
20005: PUSH
20006: LD_VAR 0 4
20010: ARRAY
20011: PUSH
20012: LD_INT 0
20014: PLUS
20015: PPUSH
20016: CALL_OW 505
// end ;
20020: LD_VAR 0 2
20024: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20025: LD_INT 0
20027: PPUSH
20028: PPUSH
20029: PPUSH
20030: PPUSH
// if not hack in hackTanks then
20031: LD_VAR 0 1
20035: PUSH
20036: LD_EXP 73
20040: IN
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20131
// index := GetElementIndex ( hackTanks , hack ) ;
20046: LD_ADDR_VAR 0 5
20050: PUSH
20051: LD_EXP 73
20055: PPUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL 27252 0 2
20065: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20066: LD_ADDR_VAR 0 4
20070: PUSH
20071: DOUBLE
20072: LD_INT 1
20074: DEC
20075: ST_TO_ADDR
20076: LD_EXP 74
20080: PUSH
20081: LD_VAR 0 5
20085: ARRAY
20086: PUSH
20087: FOR_TO
20088: IFFALSE 20129
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20090: LD_EXP 74
20094: PUSH
20095: LD_VAR 0 5
20099: ARRAY
20100: PUSH
20101: LD_VAR 0 4
20105: ARRAY
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: PUSH
20111: LD_VAR 0 2
20115: EQUAL
20116: IFFALSE 20127
// KillUnit ( vehicle ) ;
20118: LD_VAR 0 2
20122: PPUSH
20123: CALL_OW 66
20127: GO 20087
20129: POP
20130: POP
// end ;
20131: LD_VAR 0 3
20135: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20136: LD_EXP 78
20140: NOT
20141: IFFALSE 20176
20143: GO 20145
20145: DISABLE
// begin initMiner := true ;
20146: LD_ADDR_EXP 78
20150: PUSH
20151: LD_INT 1
20153: ST_TO_ADDR
// minersList := [ ] ;
20154: LD_ADDR_EXP 79
20158: PUSH
20159: EMPTY
20160: ST_TO_ADDR
// minerMinesList := [ ] ;
20161: LD_ADDR_EXP 80
20165: PUSH
20166: EMPTY
20167: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20168: LD_ADDR_EXP 81
20172: PUSH
20173: LD_INT 5
20175: ST_TO_ADDR
// end ;
20176: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20177: LD_EXP 78
20181: PUSH
20182: LD_INT 34
20184: PUSH
20185: LD_EXP 89
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PPUSH
20194: CALL_OW 69
20198: AND
20199: IFFALSE 20662
20201: GO 20203
20203: DISABLE
20204: LD_INT 0
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
// begin enable ;
20210: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20211: LD_ADDR_VAR 0 1
20215: PUSH
20216: LD_INT 34
20218: PUSH
20219: LD_EXP 89
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PPUSH
20228: CALL_OW 69
20232: PUSH
20233: FOR_IN
20234: IFFALSE 20306
// begin if not i in minersList then
20236: LD_VAR 0 1
20240: PUSH
20241: LD_EXP 79
20245: IN
20246: NOT
20247: IFFALSE 20304
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20249: LD_ADDR_EXP 79
20253: PUSH
20254: LD_EXP 79
20258: PPUSH
20259: LD_EXP 79
20263: PUSH
20264: LD_INT 1
20266: PLUS
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 1
20277: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20278: LD_ADDR_EXP 80
20282: PUSH
20283: LD_EXP 80
20287: PPUSH
20288: LD_EXP 80
20292: PUSH
20293: LD_INT 1
20295: PLUS
20296: PPUSH
20297: EMPTY
20298: PPUSH
20299: CALL_OW 1
20303: ST_TO_ADDR
// end end ;
20304: GO 20233
20306: POP
20307: POP
// for i := minerMinesList downto 1 do
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: DOUBLE
20314: LD_EXP 80
20318: INC
20319: ST_TO_ADDR
20320: LD_INT 1
20322: PUSH
20323: FOR_DOWNTO
20324: IFFALSE 20660
// begin if IsLive ( minersList [ i ] ) then
20326: LD_EXP 79
20330: PUSH
20331: LD_VAR 0 1
20335: ARRAY
20336: PPUSH
20337: CALL_OW 300
20341: IFFALSE 20369
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20343: LD_EXP 79
20347: PUSH
20348: LD_VAR 0 1
20352: ARRAY
20353: PPUSH
20354: LD_EXP 80
20358: PUSH
20359: LD_VAR 0 1
20363: ARRAY
20364: PPUSH
20365: CALL_OW 505
// if not minerMinesList [ i ] then
20369: LD_EXP 80
20373: PUSH
20374: LD_VAR 0 1
20378: ARRAY
20379: NOT
20380: IFFALSE 20384
// continue ;
20382: GO 20323
// for j := minerMinesList [ i ] downto 1 do
20384: LD_ADDR_VAR 0 2
20388: PUSH
20389: DOUBLE
20390: LD_EXP 80
20394: PUSH
20395: LD_VAR 0 1
20399: ARRAY
20400: INC
20401: ST_TO_ADDR
20402: LD_INT 1
20404: PUSH
20405: FOR_DOWNTO
20406: IFFALSE 20656
// begin side := GetSide ( minersList [ i ] ) ;
20408: LD_ADDR_VAR 0 3
20412: PUSH
20413: LD_EXP 79
20417: PUSH
20418: LD_VAR 0 1
20422: ARRAY
20423: PPUSH
20424: CALL_OW 255
20428: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20429: LD_ADDR_VAR 0 4
20433: PUSH
20434: LD_EXP 80
20438: PUSH
20439: LD_VAR 0 1
20443: ARRAY
20444: PUSH
20445: LD_VAR 0 2
20449: ARRAY
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: LD_EXP 80
20459: PUSH
20460: LD_VAR 0 1
20464: ARRAY
20465: PUSH
20466: LD_VAR 0 2
20470: ARRAY
20471: PUSH
20472: LD_INT 2
20474: ARRAY
20475: PPUSH
20476: CALL_OW 428
20480: ST_TO_ADDR
// if not tmp then
20481: LD_VAR 0 4
20485: NOT
20486: IFFALSE 20490
// continue ;
20488: GO 20405
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20490: LD_VAR 0 4
20494: PUSH
20495: LD_INT 81
20497: PUSH
20498: LD_VAR 0 3
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PPUSH
20507: CALL_OW 69
20511: IN
20512: PUSH
20513: LD_EXP 80
20517: PUSH
20518: LD_VAR 0 1
20522: ARRAY
20523: PUSH
20524: LD_VAR 0 2
20528: ARRAY
20529: PUSH
20530: LD_INT 1
20532: ARRAY
20533: PPUSH
20534: LD_EXP 80
20538: PUSH
20539: LD_VAR 0 1
20543: ARRAY
20544: PUSH
20545: LD_VAR 0 2
20549: ARRAY
20550: PUSH
20551: LD_INT 2
20553: ARRAY
20554: PPUSH
20555: CALL_OW 458
20559: AND
20560: IFFALSE 20654
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20562: LD_EXP 80
20566: PUSH
20567: LD_VAR 0 1
20571: ARRAY
20572: PUSH
20573: LD_VAR 0 2
20577: ARRAY
20578: PUSH
20579: LD_INT 1
20581: ARRAY
20582: PPUSH
20583: LD_EXP 80
20587: PUSH
20588: LD_VAR 0 1
20592: ARRAY
20593: PUSH
20594: LD_VAR 0 2
20598: ARRAY
20599: PUSH
20600: LD_INT 2
20602: ARRAY
20603: PPUSH
20604: LD_VAR 0 3
20608: PPUSH
20609: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20613: LD_ADDR_EXP 80
20617: PUSH
20618: LD_EXP 80
20622: PPUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: LD_EXP 80
20632: PUSH
20633: LD_VAR 0 1
20637: ARRAY
20638: PPUSH
20639: LD_VAR 0 2
20643: PPUSH
20644: CALL_OW 3
20648: PPUSH
20649: CALL_OW 1
20653: ST_TO_ADDR
// end ; end ;
20654: GO 20405
20656: POP
20657: POP
// end ;
20658: GO 20323
20660: POP
20661: POP
// end ;
20662: PPOPN 4
20664: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20665: LD_INT 0
20667: PPUSH
20668: PPUSH
// result := false ;
20669: LD_ADDR_VAR 0 4
20673: PUSH
20674: LD_INT 0
20676: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20677: LD_VAR 0 1
20681: PPUSH
20682: CALL_OW 264
20686: PUSH
20687: LD_EXP 89
20691: EQUAL
20692: NOT
20693: IFFALSE 20697
// exit ;
20695: GO 20937
// index := GetElementIndex ( minersList , unit ) ;
20697: LD_ADDR_VAR 0 5
20701: PUSH
20702: LD_EXP 79
20706: PPUSH
20707: LD_VAR 0 1
20711: PPUSH
20712: CALL 27252 0 2
20716: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20717: LD_EXP 80
20721: PUSH
20722: LD_VAR 0 5
20726: ARRAY
20727: PUSH
20728: LD_EXP 81
20732: GREATEREQUAL
20733: IFFALSE 20737
// exit ;
20735: GO 20937
// ComMoveXY ( unit , x , y ) ;
20737: LD_VAR 0 1
20741: PPUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20756: LD_INT 35
20758: PPUSH
20759: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_VAR 0 2
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL 58024 0 3
20782: NOT
20783: PUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 314
20793: AND
20794: IFFALSE 20798
// exit ;
20796: GO 20937
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20798: LD_VAR 0 2
20802: PPUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 428
20812: PUSH
20813: LD_VAR 0 1
20817: EQUAL
20818: PUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: CALL_OW 314
20828: NOT
20829: AND
20830: IFFALSE 20756
// PlaySoundXY ( x , y , PlantMine ) ;
20832: LD_VAR 0 2
20836: PPUSH
20837: LD_VAR 0 3
20841: PPUSH
20842: LD_STRING PlantMine
20844: PPUSH
20845: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20849: LD_VAR 0 2
20853: PPUSH
20854: LD_VAR 0 3
20858: PPUSH
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 255
20868: PPUSH
20869: LD_INT 0
20871: PPUSH
20872: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20876: LD_ADDR_EXP 80
20880: PUSH
20881: LD_EXP 80
20885: PPUSH
20886: LD_VAR 0 5
20890: PUSH
20891: LD_EXP 80
20895: PUSH
20896: LD_VAR 0 5
20900: ARRAY
20901: PUSH
20902: LD_INT 1
20904: PLUS
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PPUSH
20910: LD_VAR 0 2
20914: PUSH
20915: LD_VAR 0 3
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PPUSH
20924: CALL 27467 0 3
20928: ST_TO_ADDR
// result := true ;
20929: LD_ADDR_VAR 0 4
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// end ;
20937: LD_VAR 0 4
20941: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20942: LD_INT 0
20944: PPUSH
20945: PPUSH
20946: PPUSH
// if not unit in minersList then
20947: LD_VAR 0 1
20951: PUSH
20952: LD_EXP 79
20956: IN
20957: NOT
20958: IFFALSE 20962
// exit ;
20960: GO 21354
// index := GetElementIndex ( minersList , unit ) ;
20962: LD_ADDR_VAR 0 6
20966: PUSH
20967: LD_EXP 79
20971: PPUSH
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL 27252 0 2
20981: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20982: LD_ADDR_VAR 0 5
20986: PUSH
20987: DOUBLE
20988: LD_EXP 80
20992: PUSH
20993: LD_VAR 0 6
20997: ARRAY
20998: INC
20999: ST_TO_ADDR
21000: LD_INT 1
21002: PUSH
21003: FOR_DOWNTO
21004: IFFALSE 21165
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21006: LD_EXP 80
21010: PUSH
21011: LD_VAR 0 6
21015: ARRAY
21016: PUSH
21017: LD_VAR 0 5
21021: ARRAY
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PUSH
21027: LD_VAR 0 2
21031: EQUAL
21032: PUSH
21033: LD_EXP 80
21037: PUSH
21038: LD_VAR 0 6
21042: ARRAY
21043: PUSH
21044: LD_VAR 0 5
21048: ARRAY
21049: PUSH
21050: LD_INT 2
21052: ARRAY
21053: PUSH
21054: LD_VAR 0 3
21058: EQUAL
21059: AND
21060: IFFALSE 21163
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21062: LD_EXP 80
21066: PUSH
21067: LD_VAR 0 6
21071: ARRAY
21072: PUSH
21073: LD_VAR 0 5
21077: ARRAY
21078: PUSH
21079: LD_INT 1
21081: ARRAY
21082: PPUSH
21083: LD_EXP 80
21087: PUSH
21088: LD_VAR 0 6
21092: ARRAY
21093: PUSH
21094: LD_VAR 0 5
21098: ARRAY
21099: PUSH
21100: LD_INT 2
21102: ARRAY
21103: PPUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 255
21113: PPUSH
21114: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21118: LD_ADDR_EXP 80
21122: PUSH
21123: LD_EXP 80
21127: PPUSH
21128: LD_VAR 0 6
21132: PPUSH
21133: LD_EXP 80
21137: PUSH
21138: LD_VAR 0 6
21142: ARRAY
21143: PPUSH
21144: LD_VAR 0 5
21148: PPUSH
21149: CALL_OW 3
21153: PPUSH
21154: CALL_OW 1
21158: ST_TO_ADDR
// exit ;
21159: POP
21160: POP
21161: GO 21354
// end ; end ;
21163: GO 21003
21165: POP
21166: POP
// for i := minerMinesList [ index ] downto 1 do
21167: LD_ADDR_VAR 0 5
21171: PUSH
21172: DOUBLE
21173: LD_EXP 80
21177: PUSH
21178: LD_VAR 0 6
21182: ARRAY
21183: INC
21184: ST_TO_ADDR
21185: LD_INT 1
21187: PUSH
21188: FOR_DOWNTO
21189: IFFALSE 21352
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21191: LD_EXP 80
21195: PUSH
21196: LD_VAR 0 6
21200: ARRAY
21201: PUSH
21202: LD_VAR 0 5
21206: ARRAY
21207: PUSH
21208: LD_INT 1
21210: ARRAY
21211: PPUSH
21212: LD_EXP 80
21216: PUSH
21217: LD_VAR 0 6
21221: ARRAY
21222: PUSH
21223: LD_VAR 0 5
21227: ARRAY
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 2
21237: PPUSH
21238: LD_VAR 0 3
21242: PPUSH
21243: CALL_OW 298
21247: PUSH
21248: LD_INT 6
21250: LESS
21251: IFFALSE 21350
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21253: LD_EXP 80
21257: PUSH
21258: LD_VAR 0 6
21262: ARRAY
21263: PUSH
21264: LD_VAR 0 5
21268: ARRAY
21269: PUSH
21270: LD_INT 1
21272: ARRAY
21273: PPUSH
21274: LD_EXP 80
21278: PUSH
21279: LD_VAR 0 6
21283: ARRAY
21284: PUSH
21285: LD_VAR 0 5
21289: ARRAY
21290: PUSH
21291: LD_INT 2
21293: ARRAY
21294: PPUSH
21295: LD_VAR 0 1
21299: PPUSH
21300: CALL_OW 255
21304: PPUSH
21305: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21309: LD_ADDR_EXP 80
21313: PUSH
21314: LD_EXP 80
21318: PPUSH
21319: LD_VAR 0 6
21323: PPUSH
21324: LD_EXP 80
21328: PUSH
21329: LD_VAR 0 6
21333: ARRAY
21334: PPUSH
21335: LD_VAR 0 5
21339: PPUSH
21340: CALL_OW 3
21344: PPUSH
21345: CALL_OW 1
21349: ST_TO_ADDR
// end ; end ;
21350: GO 21188
21352: POP
21353: POP
// end ;
21354: LD_VAR 0 4
21358: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21359: LD_INT 0
21361: PPUSH
21362: PPUSH
21363: PPUSH
21364: PPUSH
21365: PPUSH
21366: PPUSH
21367: PPUSH
21368: PPUSH
21369: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 264
21379: PUSH
21380: LD_EXP 89
21384: EQUAL
21385: NOT
21386: PUSH
21387: LD_VAR 0 1
21391: PUSH
21392: LD_EXP 79
21396: IN
21397: NOT
21398: OR
21399: IFFALSE 21403
// exit ;
21401: GO 21725
// index := GetElementIndex ( minersList , unit ) ;
21403: LD_ADDR_VAR 0 6
21407: PUSH
21408: LD_EXP 79
21412: PPUSH
21413: LD_VAR 0 1
21417: PPUSH
21418: CALL 27252 0 2
21422: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21423: LD_ADDR_VAR 0 8
21427: PUSH
21428: LD_EXP 81
21432: PUSH
21433: LD_EXP 80
21437: PUSH
21438: LD_VAR 0 6
21442: ARRAY
21443: MINUS
21444: ST_TO_ADDR
// if not minesFreeAmount then
21445: LD_VAR 0 8
21449: NOT
21450: IFFALSE 21454
// exit ;
21452: GO 21725
// tmp := [ ] ;
21454: LD_ADDR_VAR 0 7
21458: PUSH
21459: EMPTY
21460: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21461: LD_ADDR_VAR 0 5
21465: PUSH
21466: DOUBLE
21467: LD_INT 1
21469: DEC
21470: ST_TO_ADDR
21471: LD_VAR 0 8
21475: PUSH
21476: FOR_TO
21477: IFFALSE 21672
// begin _d := rand ( 0 , 5 ) ;
21479: LD_ADDR_VAR 0 11
21483: PUSH
21484: LD_INT 0
21486: PPUSH
21487: LD_INT 5
21489: PPUSH
21490: CALL_OW 12
21494: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21495: LD_ADDR_VAR 0 12
21499: PUSH
21500: LD_INT 2
21502: PPUSH
21503: LD_INT 6
21505: PPUSH
21506: CALL_OW 12
21510: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21511: LD_ADDR_VAR 0 9
21515: PUSH
21516: LD_VAR 0 2
21520: PPUSH
21521: LD_VAR 0 11
21525: PPUSH
21526: LD_VAR 0 12
21530: PPUSH
21531: CALL_OW 272
21535: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21536: LD_ADDR_VAR 0 10
21540: PUSH
21541: LD_VAR 0 3
21545: PPUSH
21546: LD_VAR 0 11
21550: PPUSH
21551: LD_VAR 0 12
21555: PPUSH
21556: CALL_OW 273
21560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21561: LD_VAR 0 9
21565: PPUSH
21566: LD_VAR 0 10
21570: PPUSH
21571: CALL_OW 488
21575: PUSH
21576: LD_VAR 0 9
21580: PUSH
21581: LD_VAR 0 10
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_VAR 0 7
21594: IN
21595: NOT
21596: AND
21597: PUSH
21598: LD_VAR 0 9
21602: PPUSH
21603: LD_VAR 0 10
21607: PPUSH
21608: CALL_OW 458
21612: NOT
21613: AND
21614: IFFALSE 21656
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21616: LD_ADDR_VAR 0 7
21620: PUSH
21621: LD_VAR 0 7
21625: PPUSH
21626: LD_VAR 0 7
21630: PUSH
21631: LD_INT 1
21633: PLUS
21634: PPUSH
21635: LD_VAR 0 9
21639: PUSH
21640: LD_VAR 0 10
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL_OW 1
21653: ST_TO_ADDR
21654: GO 21670
// i := i - 1 ;
21656: LD_ADDR_VAR 0 5
21660: PUSH
21661: LD_VAR 0 5
21665: PUSH
21666: LD_INT 1
21668: MINUS
21669: ST_TO_ADDR
// end ;
21670: GO 21476
21672: POP
21673: POP
// for i in tmp do
21674: LD_ADDR_VAR 0 5
21678: PUSH
21679: LD_VAR 0 7
21683: PUSH
21684: FOR_IN
21685: IFFALSE 21723
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21687: LD_VAR 0 1
21691: PPUSH
21692: LD_VAR 0 5
21696: PUSH
21697: LD_INT 1
21699: ARRAY
21700: PPUSH
21701: LD_VAR 0 5
21705: PUSH
21706: LD_INT 2
21708: ARRAY
21709: PPUSH
21710: CALL 20665 0 3
21714: NOT
21715: IFFALSE 21721
// exit ;
21717: POP
21718: POP
21719: GO 21725
21721: GO 21684
21723: POP
21724: POP
// end ;
21725: LD_VAR 0 4
21729: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
21734: PPUSH
21735: PPUSH
21736: PPUSH
21737: PPUSH
21738: PPUSH
// if not GetClass ( unit ) = class_sniper then
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 257
21748: PUSH
21749: LD_INT 5
21751: EQUAL
21752: NOT
21753: IFFALSE 21757
// exit ;
21755: GO 22145
// dist := 8 ;
21757: LD_ADDR_VAR 0 5
21761: PUSH
21762: LD_INT 8
21764: ST_TO_ADDR
// viewRange := 12 ;
21765: LD_ADDR_VAR 0 7
21769: PUSH
21770: LD_INT 12
21772: ST_TO_ADDR
// side := GetSide ( unit ) ;
21773: LD_ADDR_VAR 0 6
21777: PUSH
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL_OW 255
21787: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21788: LD_INT 61
21790: PPUSH
21791: LD_VAR 0 6
21795: PPUSH
21796: CALL_OW 321
21800: PUSH
21801: LD_INT 2
21803: EQUAL
21804: IFFALSE 21814
// viewRange := 16 ;
21806: LD_ADDR_VAR 0 7
21810: PUSH
21811: LD_INT 16
21813: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21814: LD_VAR 0 1
21818: PPUSH
21819: LD_VAR 0 2
21823: PPUSH
21824: LD_VAR 0 3
21828: PPUSH
21829: CALL_OW 297
21833: PUSH
21834: LD_VAR 0 5
21838: GREATER
21839: IFFALSE 21918
// begin ComMoveXY ( unit , x , y ) ;
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_VAR 0 2
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21860: LD_INT 35
21862: PPUSH
21863: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21867: LD_VAR 0 1
21871: PPUSH
21872: LD_VAR 0 2
21876: PPUSH
21877: LD_VAR 0 3
21881: PPUSH
21882: CALL 58024 0 3
21886: NOT
21887: IFFALSE 21891
// exit ;
21889: GO 22145
// until GetDistUnitXY ( unit , x , y ) < dist ;
21891: LD_VAR 0 1
21895: PPUSH
21896: LD_VAR 0 2
21900: PPUSH
21901: LD_VAR 0 3
21905: PPUSH
21906: CALL_OW 297
21910: PUSH
21911: LD_VAR 0 5
21915: LESS
21916: IFFALSE 21860
// end ; ComTurnXY ( unit , x , y ) ;
21918: LD_VAR 0 1
21922: PPUSH
21923: LD_VAR 0 2
21927: PPUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: CALL_OW 118
// wait ( 5 ) ;
21937: LD_INT 5
21939: PPUSH
21940: CALL_OW 67
// _d := GetDir ( unit ) ;
21944: LD_ADDR_VAR 0 10
21948: PUSH
21949: LD_VAR 0 1
21953: PPUSH
21954: CALL_OW 254
21958: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21959: LD_ADDR_VAR 0 8
21963: PUSH
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 250
21973: PPUSH
21974: LD_VAR 0 10
21978: PPUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: CALL_OW 272
21988: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21989: LD_ADDR_VAR 0 9
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL_OW 251
22003: PPUSH
22004: LD_VAR 0 10
22008: PPUSH
22009: LD_VAR 0 5
22013: PPUSH
22014: CALL_OW 273
22018: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22019: LD_VAR 0 8
22023: PPUSH
22024: LD_VAR 0 9
22028: PPUSH
22029: CALL_OW 488
22033: NOT
22034: IFFALSE 22038
// exit ;
22036: GO 22145
// ComAnimCustom ( unit , 1 ) ;
22038: LD_VAR 0 1
22042: PPUSH
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22050: LD_VAR 0 8
22054: PPUSH
22055: LD_VAR 0 9
22059: PPUSH
22060: LD_VAR 0 6
22064: PPUSH
22065: LD_VAR 0 7
22069: PPUSH
22070: CALL_OW 330
// repeat wait ( 1 ) ;
22074: LD_INT 1
22076: PPUSH
22077: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 316
22090: PUSH
22091: LD_VAR 0 1
22095: PPUSH
22096: CALL_OW 314
22100: OR
22101: PUSH
22102: LD_VAR 0 1
22106: PPUSH
22107: CALL_OW 302
22111: NOT
22112: OR
22113: PUSH
22114: LD_VAR 0 1
22118: PPUSH
22119: CALL_OW 301
22123: OR
22124: IFFALSE 22074
// RemoveSeeing ( _x , _y , side ) ;
22126: LD_VAR 0 8
22130: PPUSH
22131: LD_VAR 0 9
22135: PPUSH
22136: LD_VAR 0 6
22140: PPUSH
22141: CALL_OW 331
// end ; end_of_file
22145: LD_VAR 0 4
22149: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 200
22157: DOUBLE
22158: GREATEREQUAL
22159: IFFALSE 22167
22161: LD_INT 299
22163: DOUBLE
22164: LESSEQUAL
22165: IFTRUE 22169
22167: GO 22201
22169: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_VAR 0 2
22179: PPUSH
22180: LD_VAR 0 3
22184: PPUSH
22185: LD_VAR 0 4
22189: PPUSH
22190: LD_VAR 0 5
22194: PPUSH
22195: CALL 18267 0 5
22199: GO 22278
22201: LD_INT 300
22203: DOUBLE
22204: GREATEREQUAL
22205: IFFALSE 22213
22207: LD_INT 399
22209: DOUBLE
22210: LESSEQUAL
22211: IFTRUE 22215
22213: GO 22277
22215: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22216: LD_VAR 0 1
22220: PPUSH
22221: LD_VAR 0 2
22225: PPUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: LD_VAR 0 4
22235: PPUSH
22236: LD_VAR 0 5
22240: PPUSH
22241: LD_VAR 0 6
22245: PPUSH
22246: LD_VAR 0 7
22250: PPUSH
22251: LD_VAR 0 8
22255: PPUSH
22256: LD_VAR 0 9
22260: PPUSH
22261: LD_VAR 0 10
22265: PPUSH
22266: LD_VAR 0 11
22270: PPUSH
22271: CALL 16155 0 11
22275: GO 22278
22277: POP
// end ;
22278: PPOPN 11
22280: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22281: LD_VAR 0 1
22285: PPUSH
22286: LD_VAR 0 2
22290: PPUSH
22291: LD_VAR 0 3
22295: PPUSH
22296: LD_VAR 0 4
22300: PPUSH
22301: LD_VAR 0 5
22305: PPUSH
22306: CALL 18249 0 5
// end ; end_of_file
22310: PPOPN 5
22312: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22313: LD_INT 0
22315: PPUSH
// ar_miner := 81 ;
22316: LD_ADDR_EXP 89
22320: PUSH
22321: LD_INT 81
22323: ST_TO_ADDR
// ar_crane := 88 ;
22324: LD_ADDR_EXP 88
22328: PUSH
22329: LD_INT 88
22331: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22332: LD_ADDR_EXP 83
22336: PUSH
22337: LD_INT 89
22339: ST_TO_ADDR
// us_hack := 99 ;
22340: LD_ADDR_EXP 84
22344: PUSH
22345: LD_INT 99
22347: ST_TO_ADDR
// us_artillery := 97 ;
22348: LD_ADDR_EXP 85
22352: PUSH
22353: LD_INT 97
22355: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22356: LD_ADDR_EXP 86
22360: PUSH
22361: LD_INT 91
22363: ST_TO_ADDR
// ar_mortar := 92 ;
22364: LD_ADDR_EXP 87
22368: PUSH
22369: LD_INT 92
22371: ST_TO_ADDR
// ru_radar := 98 ;
22372: LD_ADDR_EXP 82
22376: PUSH
22377: LD_INT 98
22379: ST_TO_ADDR
// tech_Artillery := 80 ;
22380: LD_ADDR_EXP 90
22384: PUSH
22385: LD_INT 80
22387: ST_TO_ADDR
// tech_RadMat := 81 ;
22388: LD_ADDR_EXP 91
22392: PUSH
22393: LD_INT 81
22395: ST_TO_ADDR
// tech_BasicTools := 82 ;
22396: LD_ADDR_EXP 92
22400: PUSH
22401: LD_INT 82
22403: ST_TO_ADDR
// tech_Cargo := 83 ;
22404: LD_ADDR_EXP 93
22408: PUSH
22409: LD_INT 83
22411: ST_TO_ADDR
// tech_Track := 84 ;
22412: LD_ADDR_EXP 94
22416: PUSH
22417: LD_INT 84
22419: ST_TO_ADDR
// tech_Crane := 85 ;
22420: LD_ADDR_EXP 95
22424: PUSH
22425: LD_INT 85
22427: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22428: LD_ADDR_EXP 96
22432: PUSH
22433: LD_INT 86
22435: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22436: LD_ADDR_EXP 97
22440: PUSH
22441: LD_INT 87
22443: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
22444: LD_ADDR_EXP 98
22448: PUSH
22449: LD_INT 88
22451: ST_TO_ADDR
// class_mastodont := 31 ;
22452: LD_ADDR_EXP 99
22456: PUSH
22457: LD_INT 31
22459: ST_TO_ADDR
// class_horse := 21 ;
22460: LD_ADDR_EXP 100
22464: PUSH
22465: LD_INT 21
22467: ST_TO_ADDR
// end ;
22468: LD_VAR 0 1
22472: RET
// every 1 do
22473: GO 22475
22475: DISABLE
// InitGlobalVariables ; end_of_file
22476: CALL 22313 0 0
22480: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22481: LD_INT 0
22483: PPUSH
22484: PPUSH
// if exist_mode then
22485: LD_VAR 0 2
22489: IFFALSE 22514
// unit := CreateCharacter ( prefix & ident ) else
22491: LD_ADDR_VAR 0 5
22495: PUSH
22496: LD_VAR 0 3
22500: PUSH
22501: LD_VAR 0 1
22505: STR
22506: PPUSH
22507: CALL_OW 34
22511: ST_TO_ADDR
22512: GO 22529
// unit := NewCharacter ( ident ) ;
22514: LD_ADDR_VAR 0 5
22518: PUSH
22519: LD_VAR 0 1
22523: PPUSH
22524: CALL_OW 25
22528: ST_TO_ADDR
// result := unit ;
22529: LD_ADDR_VAR 0 4
22533: PUSH
22534: LD_VAR 0 5
22538: ST_TO_ADDR
// end ;
22539: LD_VAR 0 4
22543: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22544: LD_INT 0
22546: PPUSH
22547: PPUSH
// if not side or not nation then
22548: LD_VAR 0 1
22552: NOT
22553: PUSH
22554: LD_VAR 0 2
22558: NOT
22559: OR
22560: IFFALSE 22564
// exit ;
22562: GO 23332
// case nation of nation_american :
22564: LD_VAR 0 2
22568: PUSH
22569: LD_INT 1
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22791
22577: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22578: LD_ADDR_VAR 0 4
22582: PUSH
22583: LD_INT 35
22585: PUSH
22586: LD_INT 45
22588: PUSH
22589: LD_INT 46
22591: PUSH
22592: LD_INT 47
22594: PUSH
22595: LD_INT 82
22597: PUSH
22598: LD_INT 83
22600: PUSH
22601: LD_INT 84
22603: PUSH
22604: LD_INT 85
22606: PUSH
22607: LD_INT 86
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: LD_INT 6
22618: PUSH
22619: LD_INT 15
22621: PUSH
22622: LD_INT 16
22624: PUSH
22625: LD_INT 7
22627: PUSH
22628: LD_INT 12
22630: PUSH
22631: LD_INT 13
22633: PUSH
22634: LD_INT 10
22636: PUSH
22637: LD_INT 14
22639: PUSH
22640: LD_INT 20
22642: PUSH
22643: LD_INT 21
22645: PUSH
22646: LD_INT 22
22648: PUSH
22649: LD_INT 25
22651: PUSH
22652: LD_INT 32
22654: PUSH
22655: LD_INT 27
22657: PUSH
22658: LD_INT 36
22660: PUSH
22661: LD_INT 69
22663: PUSH
22664: LD_INT 39
22666: PUSH
22667: LD_INT 34
22669: PUSH
22670: LD_INT 40
22672: PUSH
22673: LD_INT 48
22675: PUSH
22676: LD_INT 49
22678: PUSH
22679: LD_INT 50
22681: PUSH
22682: LD_INT 51
22684: PUSH
22685: LD_INT 52
22687: PUSH
22688: LD_INT 53
22690: PUSH
22691: LD_INT 54
22693: PUSH
22694: LD_INT 55
22696: PUSH
22697: LD_INT 56
22699: PUSH
22700: LD_INT 57
22702: PUSH
22703: LD_INT 58
22705: PUSH
22706: LD_INT 59
22708: PUSH
22709: LD_INT 60
22711: PUSH
22712: LD_INT 61
22714: PUSH
22715: LD_INT 62
22717: PUSH
22718: LD_INT 80
22720: PUSH
22721: LD_INT 82
22723: PUSH
22724: LD_INT 83
22726: PUSH
22727: LD_INT 84
22729: PUSH
22730: LD_INT 85
22732: PUSH
22733: LD_INT 86
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: ST_TO_ADDR
22789: GO 23256
22791: LD_INT 2
22793: DOUBLE
22794: EQUAL
22795: IFTRUE 22799
22797: GO 23025
22799: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22800: LD_ADDR_VAR 0 4
22804: PUSH
22805: LD_INT 35
22807: PUSH
22808: LD_INT 45
22810: PUSH
22811: LD_INT 46
22813: PUSH
22814: LD_INT 47
22816: PUSH
22817: LD_INT 82
22819: PUSH
22820: LD_INT 83
22822: PUSH
22823: LD_INT 84
22825: PUSH
22826: LD_INT 85
22828: PUSH
22829: LD_INT 87
22831: PUSH
22832: LD_INT 70
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: LD_INT 11
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: LD_INT 4
22846: PUSH
22847: LD_INT 5
22849: PUSH
22850: LD_INT 6
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: LD_INT 18
22858: PUSH
22859: LD_INT 7
22861: PUSH
22862: LD_INT 17
22864: PUSH
22865: LD_INT 8
22867: PUSH
22868: LD_INT 20
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 22
22876: PUSH
22877: LD_INT 72
22879: PUSH
22880: LD_INT 26
22882: PUSH
22883: LD_INT 69
22885: PUSH
22886: LD_INT 39
22888: PUSH
22889: LD_INT 40
22891: PUSH
22892: LD_INT 41
22894: PUSH
22895: LD_INT 42
22897: PUSH
22898: LD_INT 43
22900: PUSH
22901: LD_INT 48
22903: PUSH
22904: LD_INT 49
22906: PUSH
22907: LD_INT 50
22909: PUSH
22910: LD_INT 51
22912: PUSH
22913: LD_INT 52
22915: PUSH
22916: LD_INT 53
22918: PUSH
22919: LD_INT 54
22921: PUSH
22922: LD_INT 55
22924: PUSH
22925: LD_INT 56
22927: PUSH
22928: LD_INT 60
22930: PUSH
22931: LD_INT 61
22933: PUSH
22934: LD_INT 62
22936: PUSH
22937: LD_INT 66
22939: PUSH
22940: LD_INT 67
22942: PUSH
22943: LD_INT 68
22945: PUSH
22946: LD_INT 81
22948: PUSH
22949: LD_INT 82
22951: PUSH
22952: LD_INT 83
22954: PUSH
22955: LD_INT 84
22957: PUSH
22958: LD_INT 85
22960: PUSH
22961: LD_INT 87
22963: PUSH
22964: LD_INT 88
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: ST_TO_ADDR
23023: GO 23256
23025: LD_INT 3
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23255
23033: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23034: LD_ADDR_VAR 0 4
23038: PUSH
23039: LD_INT 46
23041: PUSH
23042: LD_INT 47
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: LD_INT 82
23053: PUSH
23054: LD_INT 83
23056: PUSH
23057: LD_INT 84
23059: PUSH
23060: LD_INT 85
23062: PUSH
23063: LD_INT 86
23065: PUSH
23066: LD_INT 11
23068: PUSH
23069: LD_INT 9
23071: PUSH
23072: LD_INT 20
23074: PUSH
23075: LD_INT 19
23077: PUSH
23078: LD_INT 21
23080: PUSH
23081: LD_INT 24
23083: PUSH
23084: LD_INT 22
23086: PUSH
23087: LD_INT 25
23089: PUSH
23090: LD_INT 28
23092: PUSH
23093: LD_INT 29
23095: PUSH
23096: LD_INT 30
23098: PUSH
23099: LD_INT 31
23101: PUSH
23102: LD_INT 37
23104: PUSH
23105: LD_INT 38
23107: PUSH
23108: LD_INT 32
23110: PUSH
23111: LD_INT 27
23113: PUSH
23114: LD_INT 33
23116: PUSH
23117: LD_INT 69
23119: PUSH
23120: LD_INT 39
23122: PUSH
23123: LD_INT 34
23125: PUSH
23126: LD_INT 40
23128: PUSH
23129: LD_INT 71
23131: PUSH
23132: LD_INT 23
23134: PUSH
23135: LD_INT 44
23137: PUSH
23138: LD_INT 48
23140: PUSH
23141: LD_INT 49
23143: PUSH
23144: LD_INT 50
23146: PUSH
23147: LD_INT 51
23149: PUSH
23150: LD_INT 52
23152: PUSH
23153: LD_INT 53
23155: PUSH
23156: LD_INT 54
23158: PUSH
23159: LD_INT 55
23161: PUSH
23162: LD_INT 56
23164: PUSH
23165: LD_INT 57
23167: PUSH
23168: LD_INT 58
23170: PUSH
23171: LD_INT 59
23173: PUSH
23174: LD_INT 63
23176: PUSH
23177: LD_INT 64
23179: PUSH
23180: LD_INT 65
23182: PUSH
23183: LD_INT 82
23185: PUSH
23186: LD_INT 83
23188: PUSH
23189: LD_INT 84
23191: PUSH
23192: LD_INT 85
23194: PUSH
23195: LD_INT 86
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: ST_TO_ADDR
23253: GO 23256
23255: POP
// if state > - 1 and state < 3 then
23256: LD_VAR 0 3
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: GREATER
23265: PUSH
23266: LD_VAR 0 3
23270: PUSH
23271: LD_INT 3
23273: LESS
23274: AND
23275: IFFALSE 23332
// for i in result do
23277: LD_ADDR_VAR 0 5
23281: PUSH
23282: LD_VAR 0 4
23286: PUSH
23287: FOR_IN
23288: IFFALSE 23330
// if GetTech ( i , side ) <> state then
23290: LD_VAR 0 5
23294: PPUSH
23295: LD_VAR 0 1
23299: PPUSH
23300: CALL_OW 321
23304: PUSH
23305: LD_VAR 0 3
23309: NONEQUAL
23310: IFFALSE 23328
// result := result diff i ;
23312: LD_ADDR_VAR 0 4
23316: PUSH
23317: LD_VAR 0 4
23321: PUSH
23322: LD_VAR 0 5
23326: DIFF
23327: ST_TO_ADDR
23328: GO 23287
23330: POP
23331: POP
// end ;
23332: LD_VAR 0 4
23336: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23337: LD_INT 0
23339: PPUSH
23340: PPUSH
23341: PPUSH
// result := true ;
23342: LD_ADDR_VAR 0 3
23346: PUSH
23347: LD_INT 1
23349: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23350: LD_ADDR_VAR 0 5
23354: PUSH
23355: LD_VAR 0 2
23359: PPUSH
23360: CALL_OW 480
23364: ST_TO_ADDR
// if not tmp then
23365: LD_VAR 0 5
23369: NOT
23370: IFFALSE 23374
// exit ;
23372: GO 23423
// for i in tmp do
23374: LD_ADDR_VAR 0 4
23378: PUSH
23379: LD_VAR 0 5
23383: PUSH
23384: FOR_IN
23385: IFFALSE 23421
// if GetTech ( i , side ) <> state_researched then
23387: LD_VAR 0 4
23391: PPUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 321
23401: PUSH
23402: LD_INT 2
23404: NONEQUAL
23405: IFFALSE 23419
// begin result := false ;
23407: LD_ADDR_VAR 0 3
23411: PUSH
23412: LD_INT 0
23414: ST_TO_ADDR
// exit ;
23415: POP
23416: POP
23417: GO 23423
// end ;
23419: GO 23384
23421: POP
23422: POP
// end ;
23423: LD_VAR 0 3
23427: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23428: LD_INT 0
23430: PPUSH
23431: PPUSH
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
23442: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23443: LD_VAR 0 1
23447: NOT
23448: PUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 257
23458: PUSH
23459: LD_INT 9
23461: NONEQUAL
23462: OR
23463: IFFALSE 23467
// exit ;
23465: GO 24040
// side := GetSide ( unit ) ;
23467: LD_ADDR_VAR 0 9
23471: PUSH
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 255
23481: ST_TO_ADDR
// tech_space := tech_spacanom ;
23482: LD_ADDR_VAR 0 12
23486: PUSH
23487: LD_INT 29
23489: ST_TO_ADDR
// tech_time := tech_taurad ;
23490: LD_ADDR_VAR 0 13
23494: PUSH
23495: LD_INT 28
23497: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23498: LD_ADDR_VAR 0 11
23502: PUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 310
23512: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23513: LD_VAR 0 11
23517: PPUSH
23518: CALL_OW 247
23522: PUSH
23523: LD_INT 2
23525: EQUAL
23526: IFFALSE 23530
// exit ;
23528: GO 24040
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23530: LD_ADDR_VAR 0 8
23534: PUSH
23535: LD_INT 81
23537: PUSH
23538: LD_VAR 0 9
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 21
23552: PUSH
23553: LD_INT 3
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PPUSH
23568: CALL_OW 69
23572: ST_TO_ADDR
// if not tmp then
23573: LD_VAR 0 8
23577: NOT
23578: IFFALSE 23582
// exit ;
23580: GO 24040
// if in_unit then
23582: LD_VAR 0 11
23586: IFFALSE 23610
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23588: LD_ADDR_VAR 0 10
23592: PUSH
23593: LD_VAR 0 8
23597: PPUSH
23598: LD_VAR 0 11
23602: PPUSH
23603: CALL_OW 74
23607: ST_TO_ADDR
23608: GO 23630
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23610: LD_ADDR_VAR 0 10
23614: PUSH
23615: LD_VAR 0 8
23619: PPUSH
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 74
23629: ST_TO_ADDR
// if not enemy then
23630: LD_VAR 0 10
23634: NOT
23635: IFFALSE 23639
// exit ;
23637: GO 24040
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23639: LD_VAR 0 11
23643: PUSH
23644: LD_VAR 0 11
23648: PPUSH
23649: LD_VAR 0 10
23653: PPUSH
23654: CALL_OW 296
23658: PUSH
23659: LD_INT 13
23661: GREATER
23662: AND
23663: PUSH
23664: LD_VAR 0 1
23668: PPUSH
23669: LD_VAR 0 10
23673: PPUSH
23674: CALL_OW 296
23678: PUSH
23679: LD_INT 12
23681: GREATER
23682: OR
23683: IFFALSE 23687
// exit ;
23685: GO 24040
// missile := [ 1 ] ;
23687: LD_ADDR_VAR 0 14
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23698: LD_VAR 0 9
23702: PPUSH
23703: LD_VAR 0 12
23707: PPUSH
23708: CALL_OW 325
23712: IFFALSE 23741
// missile := Insert ( missile , missile + 1 , 2 ) ;
23714: LD_ADDR_VAR 0 14
23718: PUSH
23719: LD_VAR 0 14
23723: PPUSH
23724: LD_VAR 0 14
23728: PUSH
23729: LD_INT 1
23731: PLUS
23732: PPUSH
23733: LD_INT 2
23735: PPUSH
23736: CALL_OW 2
23740: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23741: LD_VAR 0 9
23745: PPUSH
23746: LD_VAR 0 13
23750: PPUSH
23751: CALL_OW 325
23755: PUSH
23756: LD_VAR 0 10
23760: PPUSH
23761: CALL_OW 255
23765: PPUSH
23766: LD_VAR 0 13
23770: PPUSH
23771: CALL_OW 325
23775: NOT
23776: AND
23777: IFFALSE 23806
// missile := Insert ( missile , missile + 1 , 3 ) ;
23779: LD_ADDR_VAR 0 14
23783: PUSH
23784: LD_VAR 0 14
23788: PPUSH
23789: LD_VAR 0 14
23793: PUSH
23794: LD_INT 1
23796: PLUS
23797: PPUSH
23798: LD_INT 3
23800: PPUSH
23801: CALL_OW 2
23805: ST_TO_ADDR
// if missile < 2 then
23806: LD_VAR 0 14
23810: PUSH
23811: LD_INT 2
23813: LESS
23814: IFFALSE 23818
// exit ;
23816: GO 24040
// x := GetX ( enemy ) ;
23818: LD_ADDR_VAR 0 4
23822: PUSH
23823: LD_VAR 0 10
23827: PPUSH
23828: CALL_OW 250
23832: ST_TO_ADDR
// y := GetY ( enemy ) ;
23833: LD_ADDR_VAR 0 5
23837: PUSH
23838: LD_VAR 0 10
23842: PPUSH
23843: CALL_OW 251
23847: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23848: LD_ADDR_VAR 0 6
23852: PUSH
23853: LD_VAR 0 4
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PPUSH
23862: LD_INT 1
23864: PPUSH
23865: CALL_OW 12
23869: PLUS
23870: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23871: LD_ADDR_VAR 0 7
23875: PUSH
23876: LD_VAR 0 5
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PPUSH
23885: LD_INT 1
23887: PPUSH
23888: CALL_OW 12
23892: PLUS
23893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23894: LD_VAR 0 6
23898: PPUSH
23899: LD_VAR 0 7
23903: PPUSH
23904: CALL_OW 488
23908: NOT
23909: IFFALSE 23931
// begin _x := x ;
23911: LD_ADDR_VAR 0 6
23915: PUSH
23916: LD_VAR 0 4
23920: ST_TO_ADDR
// _y := y ;
23921: LD_ADDR_VAR 0 7
23925: PUSH
23926: LD_VAR 0 5
23930: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23931: LD_ADDR_VAR 0 3
23935: PUSH
23936: LD_INT 1
23938: PPUSH
23939: LD_VAR 0 14
23943: PPUSH
23944: CALL_OW 12
23948: ST_TO_ADDR
// case i of 1 :
23949: LD_VAR 0 3
23953: PUSH
23954: LD_INT 1
23956: DOUBLE
23957: EQUAL
23958: IFTRUE 23962
23960: GO 23979
23962: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23963: LD_VAR 0 1
23967: PPUSH
23968: LD_VAR 0 10
23972: PPUSH
23973: CALL_OW 115
23977: GO 24040
23979: LD_INT 2
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 24009
23987: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_VAR 0 6
23997: PPUSH
23998: LD_VAR 0 7
24002: PPUSH
24003: CALL_OW 153
24007: GO 24040
24009: LD_INT 3
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24039
24017: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24018: LD_VAR 0 1
24022: PPUSH
24023: LD_VAR 0 6
24027: PPUSH
24028: LD_VAR 0 7
24032: PPUSH
24033: CALL_OW 154
24037: GO 24040
24039: POP
// end ;
24040: LD_VAR 0 2
24044: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24045: LD_INT 0
24047: PPUSH
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
24052: PPUSH
// if not unit or not building then
24053: LD_VAR 0 1
24057: NOT
24058: PUSH
24059: LD_VAR 0 2
24063: NOT
24064: OR
24065: IFFALSE 24069
// exit ;
24067: GO 24227
// x := GetX ( building ) ;
24069: LD_ADDR_VAR 0 5
24073: PUSH
24074: LD_VAR 0 2
24078: PPUSH
24079: CALL_OW 250
24083: ST_TO_ADDR
// y := GetY ( building ) ;
24084: LD_ADDR_VAR 0 6
24088: PUSH
24089: LD_VAR 0 2
24093: PPUSH
24094: CALL_OW 251
24098: ST_TO_ADDR
// for i = 0 to 5 do
24099: LD_ADDR_VAR 0 4
24103: PUSH
24104: DOUBLE
24105: LD_INT 0
24107: DEC
24108: ST_TO_ADDR
24109: LD_INT 5
24111: PUSH
24112: FOR_TO
24113: IFFALSE 24225
// begin _x := ShiftX ( x , i , 3 ) ;
24115: LD_ADDR_VAR 0 7
24119: PUSH
24120: LD_VAR 0 5
24124: PPUSH
24125: LD_VAR 0 4
24129: PPUSH
24130: LD_INT 3
24132: PPUSH
24133: CALL_OW 272
24137: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24138: LD_ADDR_VAR 0 8
24142: PUSH
24143: LD_VAR 0 6
24147: PPUSH
24148: LD_VAR 0 4
24152: PPUSH
24153: LD_INT 3
24155: PPUSH
24156: CALL_OW 273
24160: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24161: LD_VAR 0 7
24165: PPUSH
24166: LD_VAR 0 8
24170: PPUSH
24171: CALL_OW 488
24175: NOT
24176: IFFALSE 24180
// continue ;
24178: GO 24112
// if HexInfo ( _x , _y ) = 0 then
24180: LD_VAR 0 7
24184: PPUSH
24185: LD_VAR 0 8
24189: PPUSH
24190: CALL_OW 428
24194: PUSH
24195: LD_INT 0
24197: EQUAL
24198: IFFALSE 24223
// begin ComMoveXY ( unit , _x , _y ) ;
24200: LD_VAR 0 1
24204: PPUSH
24205: LD_VAR 0 7
24209: PPUSH
24210: LD_VAR 0 8
24214: PPUSH
24215: CALL_OW 111
// exit ;
24219: POP
24220: POP
24221: GO 24227
// end ; end ;
24223: GO 24112
24225: POP
24226: POP
// end ;
24227: LD_VAR 0 3
24231: RET
// export function ScanBase ( side , base_area ) ; begin
24232: LD_INT 0
24234: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24235: LD_ADDR_VAR 0 3
24239: PUSH
24240: LD_VAR 0 2
24244: PPUSH
24245: LD_INT 81
24247: PUSH
24248: LD_VAR 0 1
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PPUSH
24257: CALL_OW 70
24261: ST_TO_ADDR
// end ;
24262: LD_VAR 0 3
24266: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
// result := false ;
24273: LD_ADDR_VAR 0 2
24277: PUSH
24278: LD_INT 0
24280: ST_TO_ADDR
// side := GetSide ( unit ) ;
24281: LD_ADDR_VAR 0 3
24285: PUSH
24286: LD_VAR 0 1
24290: PPUSH
24291: CALL_OW 255
24295: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 248
24310: ST_TO_ADDR
// case nat of 1 :
24311: LD_VAR 0 4
24315: PUSH
24316: LD_INT 1
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24324
24322: GO 24335
24324: POP
// tech := tech_lassight ; 2 :
24325: LD_ADDR_VAR 0 5
24329: PUSH
24330: LD_INT 12
24332: ST_TO_ADDR
24333: GO 24374
24335: LD_INT 2
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24343
24341: GO 24354
24343: POP
// tech := tech_mortar ; 3 :
24344: LD_ADDR_VAR 0 5
24348: PUSH
24349: LD_INT 41
24351: ST_TO_ADDR
24352: GO 24374
24354: LD_INT 3
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24362
24360: GO 24373
24362: POP
// tech := tech_bazooka ; end ;
24363: LD_ADDR_VAR 0 5
24367: PUSH
24368: LD_INT 44
24370: ST_TO_ADDR
24371: GO 24374
24373: POP
// if Researched ( side , tech ) then
24374: LD_VAR 0 3
24378: PPUSH
24379: LD_VAR 0 5
24383: PPUSH
24384: CALL_OW 325
24388: IFFALSE 24415
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24390: LD_ADDR_VAR 0 2
24394: PUSH
24395: LD_INT 5
24397: PUSH
24398: LD_INT 8
24400: PUSH
24401: LD_INT 9
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: PUSH
24409: LD_VAR 0 4
24413: ARRAY
24414: ST_TO_ADDR
// end ;
24415: LD_VAR 0 2
24419: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24420: LD_INT 0
24422: PPUSH
24423: PPUSH
24424: PPUSH
// if not mines then
24425: LD_VAR 0 2
24429: NOT
24430: IFFALSE 24434
// exit ;
24432: GO 24578
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24434: LD_ADDR_VAR 0 5
24438: PUSH
24439: LD_INT 81
24441: PUSH
24442: LD_VAR 0 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 3
24453: PUSH
24454: LD_INT 21
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PPUSH
24472: CALL_OW 69
24476: ST_TO_ADDR
// for i in mines do
24477: LD_ADDR_VAR 0 4
24481: PUSH
24482: LD_VAR 0 2
24486: PUSH
24487: FOR_IN
24488: IFFALSE 24576
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24490: LD_VAR 0 4
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: PPUSH
24499: LD_VAR 0 4
24503: PUSH
24504: LD_INT 2
24506: ARRAY
24507: PPUSH
24508: CALL_OW 458
24512: NOT
24513: IFFALSE 24517
// continue ;
24515: GO 24487
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24517: LD_VAR 0 4
24521: PUSH
24522: LD_INT 1
24524: ARRAY
24525: PPUSH
24526: LD_VAR 0 4
24530: PUSH
24531: LD_INT 2
24533: ARRAY
24534: PPUSH
24535: CALL_OW 428
24539: PUSH
24540: LD_VAR 0 5
24544: IN
24545: IFFALSE 24574
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24547: LD_VAR 0 4
24551: PUSH
24552: LD_INT 1
24554: ARRAY
24555: PPUSH
24556: LD_VAR 0 4
24560: PUSH
24561: LD_INT 2
24563: ARRAY
24564: PPUSH
24565: LD_VAR 0 1
24569: PPUSH
24570: CALL_OW 456
// end ;
24574: GO 24487
24576: POP
24577: POP
// end ;
24578: LD_VAR 0 3
24582: RET
// export function Count ( array ) ; var i ; begin
24583: LD_INT 0
24585: PPUSH
24586: PPUSH
// result := 0 ;
24587: LD_ADDR_VAR 0 2
24591: PUSH
24592: LD_INT 0
24594: ST_TO_ADDR
// for i in array do
24595: LD_ADDR_VAR 0 3
24599: PUSH
24600: LD_VAR 0 1
24604: PUSH
24605: FOR_IN
24606: IFFALSE 24630
// if i then
24608: LD_VAR 0 3
24612: IFFALSE 24628
// result := result + 1 ;
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: LD_VAR 0 2
24623: PUSH
24624: LD_INT 1
24626: PLUS
24627: ST_TO_ADDR
24628: GO 24605
24630: POP
24631: POP
// end ;
24632: LD_VAR 0 2
24636: RET
// export function IsEmpty ( building ) ; begin
24637: LD_INT 0
24639: PPUSH
// if not building then
24640: LD_VAR 0 1
24644: NOT
24645: IFFALSE 24649
// exit ;
24647: GO 24692
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24649: LD_ADDR_VAR 0 2
24653: PUSH
24654: LD_VAR 0 1
24658: PUSH
24659: LD_INT 22
24661: PUSH
24662: LD_VAR 0 1
24666: PPUSH
24667: CALL_OW 255
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 58
24678: PUSH
24679: EMPTY
24680: LIST
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PPUSH
24686: CALL_OW 69
24690: IN
24691: ST_TO_ADDR
// end ;
24692: LD_VAR 0 2
24696: RET
// export function IsNotFull ( building ) ; begin
24697: LD_INT 0
24699: PPUSH
// if not building then
24700: LD_VAR 0 1
24704: NOT
24705: IFFALSE 24709
// exit ;
24707: GO 24728
// result := UnitsInside ( building ) < 6 ;
24709: LD_ADDR_VAR 0 2
24713: PUSH
24714: LD_VAR 0 1
24718: PPUSH
24719: CALL_OW 313
24723: PUSH
24724: LD_INT 6
24726: LESS
24727: ST_TO_ADDR
// end ;
24728: LD_VAR 0 2
24732: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24733: LD_INT 0
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
// tmp := [ ] ;
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: EMPTY
24745: ST_TO_ADDR
// list := [ ] ;
24746: LD_ADDR_VAR 0 5
24750: PUSH
24751: EMPTY
24752: ST_TO_ADDR
// for i = 16 to 25 do
24753: LD_ADDR_VAR 0 4
24757: PUSH
24758: DOUBLE
24759: LD_INT 16
24761: DEC
24762: ST_TO_ADDR
24763: LD_INT 25
24765: PUSH
24766: FOR_TO
24767: IFFALSE 24840
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24769: LD_ADDR_VAR 0 3
24773: PUSH
24774: LD_VAR 0 3
24778: PUSH
24779: LD_INT 22
24781: PUSH
24782: LD_VAR 0 1
24786: PPUSH
24787: CALL_OW 255
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 91
24798: PUSH
24799: LD_VAR 0 1
24803: PUSH
24804: LD_INT 6
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 30
24814: PUSH
24815: LD_VAR 0 4
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: LIST
24828: PUSH
24829: EMPTY
24830: LIST
24831: PPUSH
24832: CALL_OW 69
24836: ADD
24837: ST_TO_ADDR
24838: GO 24766
24840: POP
24841: POP
// for i = 1 to tmp do
24842: LD_ADDR_VAR 0 4
24846: PUSH
24847: DOUBLE
24848: LD_INT 1
24850: DEC
24851: ST_TO_ADDR
24852: LD_VAR 0 3
24856: PUSH
24857: FOR_TO
24858: IFFALSE 24946
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24860: LD_ADDR_VAR 0 5
24864: PUSH
24865: LD_VAR 0 5
24869: PUSH
24870: LD_VAR 0 3
24874: PUSH
24875: LD_VAR 0 4
24879: ARRAY
24880: PPUSH
24881: CALL_OW 266
24885: PUSH
24886: LD_VAR 0 3
24890: PUSH
24891: LD_VAR 0 4
24895: ARRAY
24896: PPUSH
24897: CALL_OW 250
24901: PUSH
24902: LD_VAR 0 3
24906: PUSH
24907: LD_VAR 0 4
24911: ARRAY
24912: PPUSH
24913: CALL_OW 251
24917: PUSH
24918: LD_VAR 0 3
24922: PUSH
24923: LD_VAR 0 4
24927: ARRAY
24928: PPUSH
24929: CALL_OW 254
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: PUSH
24940: EMPTY
24941: LIST
24942: ADD
24943: ST_TO_ADDR
24944: GO 24857
24946: POP
24947: POP
// result := list ;
24948: LD_ADDR_VAR 0 2
24952: PUSH
24953: LD_VAR 0 5
24957: ST_TO_ADDR
// end ;
24958: LD_VAR 0 2
24962: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24963: LD_INT 0
24965: PPUSH
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
// if not factory then
24972: LD_VAR 0 1
24976: NOT
24977: IFFALSE 24981
// exit ;
24979: GO 25574
// if control = control_apeman then
24981: LD_VAR 0 4
24985: PUSH
24986: LD_INT 5
24988: EQUAL
24989: IFFALSE 25098
// begin tmp := UnitsInside ( factory ) ;
24991: LD_ADDR_VAR 0 8
24995: PUSH
24996: LD_VAR 0 1
25000: PPUSH
25001: CALL_OW 313
25005: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25006: LD_VAR 0 8
25010: PPUSH
25011: LD_INT 25
25013: PUSH
25014: LD_INT 12
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 72
25025: NOT
25026: IFFALSE 25036
// control := control_manual ;
25028: LD_ADDR_VAR 0 4
25032: PUSH
25033: LD_INT 1
25035: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25036: LD_ADDR_VAR 0 8
25040: PUSH
25041: LD_VAR 0 1
25045: PPUSH
25046: CALL 24733 0 1
25050: ST_TO_ADDR
// if tmp then
25051: LD_VAR 0 8
25055: IFFALSE 25098
// begin for i in tmp do
25057: LD_ADDR_VAR 0 7
25061: PUSH
25062: LD_VAR 0 8
25066: PUSH
25067: FOR_IN
25068: IFFALSE 25096
// if i [ 1 ] = b_ext_radio then
25070: LD_VAR 0 7
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: PUSH
25079: LD_INT 22
25081: EQUAL
25082: IFFALSE 25094
// begin control := control_remote ;
25084: LD_ADDR_VAR 0 4
25088: PUSH
25089: LD_INT 2
25091: ST_TO_ADDR
// break ;
25092: GO 25096
// end ;
25094: GO 25067
25096: POP
25097: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25098: LD_VAR 0 1
25102: PPUSH
25103: LD_VAR 0 2
25107: PPUSH
25108: LD_VAR 0 3
25112: PPUSH
25113: LD_VAR 0 4
25117: PPUSH
25118: LD_VAR 0 5
25122: PPUSH
25123: CALL_OW 448
25127: IFFALSE 25162
// begin result := [ chassis , engine , control , weapon ] ;
25129: LD_ADDR_VAR 0 6
25133: PUSH
25134: LD_VAR 0 2
25138: PUSH
25139: LD_VAR 0 3
25143: PUSH
25144: LD_VAR 0 4
25148: PUSH
25149: LD_VAR 0 5
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
// exit ;
25160: GO 25574
// end ; _chassis := AvailableChassisList ( factory ) ;
25162: LD_ADDR_VAR 0 9
25166: PUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: CALL_OW 475
25176: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25177: LD_ADDR_VAR 0 11
25181: PUSH
25182: LD_VAR 0 1
25186: PPUSH
25187: CALL_OW 476
25191: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25192: LD_ADDR_VAR 0 12
25196: PUSH
25197: LD_VAR 0 1
25201: PPUSH
25202: CALL_OW 477
25206: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25207: LD_ADDR_VAR 0 10
25211: PUSH
25212: LD_VAR 0 1
25216: PPUSH
25217: CALL_OW 478
25221: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25222: LD_VAR 0 9
25226: NOT
25227: PUSH
25228: LD_VAR 0 11
25232: NOT
25233: OR
25234: PUSH
25235: LD_VAR 0 12
25239: NOT
25240: OR
25241: PUSH
25242: LD_VAR 0 10
25246: NOT
25247: OR
25248: IFFALSE 25283
// begin result := [ chassis , engine , control , weapon ] ;
25250: LD_ADDR_VAR 0 6
25254: PUSH
25255: LD_VAR 0 2
25259: PUSH
25260: LD_VAR 0 3
25264: PUSH
25265: LD_VAR 0 4
25269: PUSH
25270: LD_VAR 0 5
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: ST_TO_ADDR
// exit ;
25281: GO 25574
// end ; if not chassis in _chassis then
25283: LD_VAR 0 2
25287: PUSH
25288: LD_VAR 0 9
25292: IN
25293: NOT
25294: IFFALSE 25320
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25296: LD_ADDR_VAR 0 2
25300: PUSH
25301: LD_VAR 0 9
25305: PUSH
25306: LD_INT 1
25308: PPUSH
25309: LD_VAR 0 9
25313: PPUSH
25314: CALL_OW 12
25318: ARRAY
25319: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25320: LD_VAR 0 2
25324: PPUSH
25325: LD_VAR 0 3
25329: PPUSH
25330: CALL 25579 0 2
25334: NOT
25335: IFFALSE 25394
// repeat engine := _engine [ 1 ] ;
25337: LD_ADDR_VAR 0 3
25341: PUSH
25342: LD_VAR 0 11
25346: PUSH
25347: LD_INT 1
25349: ARRAY
25350: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25351: LD_ADDR_VAR 0 11
25355: PUSH
25356: LD_VAR 0 11
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 3
25368: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25369: LD_VAR 0 2
25373: PPUSH
25374: LD_VAR 0 3
25378: PPUSH
25379: CALL 25579 0 2
25383: PUSH
25384: LD_VAR 0 11
25388: PUSH
25389: EMPTY
25390: EQUAL
25391: OR
25392: IFFALSE 25337
// if not control in _control then
25394: LD_VAR 0 4
25398: PUSH
25399: LD_VAR 0 12
25403: IN
25404: NOT
25405: IFFALSE 25431
// control := _control [ rand ( 1 , _control ) ] ;
25407: LD_ADDR_VAR 0 4
25411: PUSH
25412: LD_VAR 0 12
25416: PUSH
25417: LD_INT 1
25419: PPUSH
25420: LD_VAR 0 12
25424: PPUSH
25425: CALL_OW 12
25429: ARRAY
25430: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25431: LD_VAR 0 2
25435: PPUSH
25436: LD_VAR 0 5
25440: PPUSH
25441: CALL 25799 0 2
25445: NOT
25446: IFFALSE 25505
// repeat weapon := _weapon [ 1 ] ;
25448: LD_ADDR_VAR 0 5
25452: PUSH
25453: LD_VAR 0 10
25457: PUSH
25458: LD_INT 1
25460: ARRAY
25461: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25462: LD_ADDR_VAR 0 10
25466: PUSH
25467: LD_VAR 0 10
25471: PPUSH
25472: LD_INT 1
25474: PPUSH
25475: CALL_OW 3
25479: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25480: LD_VAR 0 2
25484: PPUSH
25485: LD_VAR 0 5
25489: PPUSH
25490: CALL 25799 0 2
25494: PUSH
25495: LD_VAR 0 10
25499: PUSH
25500: EMPTY
25501: EQUAL
25502: OR
25503: IFFALSE 25448
// result := [ ] ;
25505: LD_ADDR_VAR 0 6
25509: PUSH
25510: EMPTY
25511: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_VAR 0 2
25521: PPUSH
25522: LD_VAR 0 3
25526: PPUSH
25527: LD_VAR 0 4
25531: PPUSH
25532: LD_VAR 0 5
25536: PPUSH
25537: CALL_OW 448
25541: IFFALSE 25574
// result := [ chassis , engine , control , weapon ] ;
25543: LD_ADDR_VAR 0 6
25547: PUSH
25548: LD_VAR 0 2
25552: PUSH
25553: LD_VAR 0 3
25557: PUSH
25558: LD_VAR 0 4
25562: PUSH
25563: LD_VAR 0 5
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: ST_TO_ADDR
// end ;
25574: LD_VAR 0 6
25578: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25579: LD_INT 0
25581: PPUSH
// if not chassis or not engine then
25582: LD_VAR 0 1
25586: NOT
25587: PUSH
25588: LD_VAR 0 2
25592: NOT
25593: OR
25594: IFFALSE 25598
// exit ;
25596: GO 25794
// case engine of engine_solar :
25598: LD_VAR 0 2
25602: PUSH
25603: LD_INT 2
25605: DOUBLE
25606: EQUAL
25607: IFTRUE 25611
25609: GO 25649
25611: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25612: LD_ADDR_VAR 0 3
25616: PUSH
25617: LD_INT 11
25619: PUSH
25620: LD_INT 12
25622: PUSH
25623: LD_INT 13
25625: PUSH
25626: LD_INT 14
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 3
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: ST_TO_ADDR
25647: GO 25778
25649: LD_INT 1
25651: DOUBLE
25652: EQUAL
25653: IFTRUE 25657
25655: GO 25719
25657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25658: LD_ADDR_VAR 0 3
25662: PUSH
25663: LD_INT 11
25665: PUSH
25666: LD_INT 12
25668: PUSH
25669: LD_INT 13
25671: PUSH
25672: LD_INT 14
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: LD_INT 4
25686: PUSH
25687: LD_INT 5
25689: PUSH
25690: LD_INT 21
25692: PUSH
25693: LD_INT 23
25695: PUSH
25696: LD_INT 22
25698: PUSH
25699: LD_INT 24
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: ST_TO_ADDR
25717: GO 25778
25719: LD_INT 3
25721: DOUBLE
25722: EQUAL
25723: IFTRUE 25727
25725: GO 25777
25727: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25728: LD_ADDR_VAR 0 3
25732: PUSH
25733: LD_INT 13
25735: PUSH
25736: LD_INT 14
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: LD_INT 4
25747: PUSH
25748: LD_INT 5
25750: PUSH
25751: LD_INT 21
25753: PUSH
25754: LD_INT 22
25756: PUSH
25757: LD_INT 23
25759: PUSH
25760: LD_INT 24
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
25775: GO 25778
25777: POP
// result := ( chassis in result ) ;
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: LD_VAR 0 1
25787: PUSH
25788: LD_VAR 0 3
25792: IN
25793: ST_TO_ADDR
// end ;
25794: LD_VAR 0 3
25798: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25799: LD_INT 0
25801: PPUSH
// if not chassis or not weapon then
25802: LD_VAR 0 1
25806: NOT
25807: PUSH
25808: LD_VAR 0 2
25812: NOT
25813: OR
25814: IFFALSE 25818
// exit ;
25816: GO 26880
// case weapon of us_machine_gun :
25818: LD_VAR 0 2
25822: PUSH
25823: LD_INT 2
25825: DOUBLE
25826: EQUAL
25827: IFTRUE 25831
25829: GO 25861
25831: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25832: LD_ADDR_VAR 0 3
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 3
25845: PUSH
25846: LD_INT 4
25848: PUSH
25849: LD_INT 5
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: ST_TO_ADDR
25859: GO 26864
25861: LD_INT 3
25863: DOUBLE
25864: EQUAL
25865: IFTRUE 25869
25867: GO 25899
25869: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25870: LD_ADDR_VAR 0 3
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: LD_INT 4
25886: PUSH
25887: LD_INT 5
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: ST_TO_ADDR
25897: GO 26864
25899: LD_INT 11
25901: DOUBLE
25902: EQUAL
25903: IFTRUE 25907
25905: GO 25937
25907: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25908: LD_ADDR_VAR 0 3
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: LD_INT 4
25924: PUSH
25925: LD_INT 5
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: ST_TO_ADDR
25935: GO 26864
25937: LD_INT 4
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25971
25945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25946: LD_ADDR_VAR 0 3
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 4
25959: PUSH
25960: LD_INT 5
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
25969: GO 26864
25971: LD_INT 5
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26005
25979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: LD_INT 4
25993: PUSH
25994: LD_INT 5
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
26003: GO 26864
26005: LD_INT 9
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26039
26013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26014: LD_ADDR_VAR 0 3
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: LD_INT 4
26027: PUSH
26028: LD_INT 5
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: ST_TO_ADDR
26037: GO 26864
26039: LD_INT 7
26041: DOUBLE
26042: EQUAL
26043: IFTRUE 26047
26045: GO 26073
26047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: LD_INT 4
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: ST_TO_ADDR
26071: GO 26864
26073: LD_INT 12
26075: DOUBLE
26076: EQUAL
26077: IFTRUE 26081
26079: GO 26107
26081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: LD_INT 4
26095: PUSH
26096: LD_INT 5
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
26105: GO 26864
26107: LD_INT 13
26109: DOUBLE
26110: EQUAL
26111: IFTRUE 26115
26113: GO 26141
26115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26116: LD_ADDR_VAR 0 3
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: LD_INT 4
26129: PUSH
26130: LD_INT 5
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: ST_TO_ADDR
26139: GO 26864
26141: LD_INT 14
26143: DOUBLE
26144: EQUAL
26145: IFTRUE 26149
26147: GO 26167
26149: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26150: LD_ADDR_VAR 0 3
26154: PUSH
26155: LD_INT 4
26157: PUSH
26158: LD_INT 5
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: ST_TO_ADDR
26165: GO 26864
26167: LD_INT 6
26169: DOUBLE
26170: EQUAL
26171: IFTRUE 26175
26173: GO 26193
26175: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26176: LD_ADDR_VAR 0 3
26180: PUSH
26181: LD_INT 4
26183: PUSH
26184: LD_INT 5
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: ST_TO_ADDR
26191: GO 26864
26193: LD_INT 10
26195: DOUBLE
26196: EQUAL
26197: IFTRUE 26201
26199: GO 26219
26201: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26202: LD_ADDR_VAR 0 3
26206: PUSH
26207: LD_INT 4
26209: PUSH
26210: LD_INT 5
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: ST_TO_ADDR
26217: GO 26864
26219: LD_INT 22
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26253
26227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_INT 11
26235: PUSH
26236: LD_INT 12
26238: PUSH
26239: LD_INT 13
26241: PUSH
26242: LD_INT 14
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
26251: GO 26864
26253: LD_INT 23
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26287
26261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_INT 11
26269: PUSH
26270: LD_INT 12
26272: PUSH
26273: LD_INT 13
26275: PUSH
26276: LD_INT 14
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
26285: GO 26864
26287: LD_INT 24
26289: DOUBLE
26290: EQUAL
26291: IFTRUE 26295
26293: GO 26321
26295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_INT 11
26303: PUSH
26304: LD_INT 12
26306: PUSH
26307: LD_INT 13
26309: PUSH
26310: LD_INT 14
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
26319: GO 26864
26321: LD_INT 30
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26355
26329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26330: LD_ADDR_VAR 0 3
26334: PUSH
26335: LD_INT 11
26337: PUSH
26338: LD_INT 12
26340: PUSH
26341: LD_INT 13
26343: PUSH
26344: LD_INT 14
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
26353: GO 26864
26355: LD_INT 25
26357: DOUBLE
26358: EQUAL
26359: IFTRUE 26363
26361: GO 26381
26363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26364: LD_ADDR_VAR 0 3
26368: PUSH
26369: LD_INT 13
26371: PUSH
26372: LD_INT 14
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: ST_TO_ADDR
26379: GO 26864
26381: LD_INT 27
26383: DOUBLE
26384: EQUAL
26385: IFTRUE 26389
26387: GO 26407
26389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26390: LD_ADDR_VAR 0 3
26394: PUSH
26395: LD_INT 13
26397: PUSH
26398: LD_INT 14
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: ST_TO_ADDR
26405: GO 26864
26407: LD_EXP 87
26411: DOUBLE
26412: EQUAL
26413: IFTRUE 26417
26415: GO 26443
26417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: LD_INT 11
26425: PUSH
26426: LD_INT 12
26428: PUSH
26429: LD_INT 13
26431: PUSH
26432: LD_INT 14
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: ST_TO_ADDR
26441: GO 26864
26443: LD_INT 28
26445: DOUBLE
26446: EQUAL
26447: IFTRUE 26451
26449: GO 26469
26451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26452: LD_ADDR_VAR 0 3
26456: PUSH
26457: LD_INT 13
26459: PUSH
26460: LD_INT 14
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: ST_TO_ADDR
26467: GO 26864
26469: LD_INT 29
26471: DOUBLE
26472: EQUAL
26473: IFTRUE 26477
26475: GO 26495
26477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26478: LD_ADDR_VAR 0 3
26482: PUSH
26483: LD_INT 13
26485: PUSH
26486: LD_INT 14
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: ST_TO_ADDR
26493: GO 26864
26495: LD_INT 31
26497: DOUBLE
26498: EQUAL
26499: IFTRUE 26503
26501: GO 26521
26503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26504: LD_ADDR_VAR 0 3
26508: PUSH
26509: LD_INT 13
26511: PUSH
26512: LD_INT 14
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: ST_TO_ADDR
26519: GO 26864
26521: LD_INT 26
26523: DOUBLE
26524: EQUAL
26525: IFTRUE 26529
26527: GO 26547
26529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26530: LD_ADDR_VAR 0 3
26534: PUSH
26535: LD_INT 13
26537: PUSH
26538: LD_INT 14
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: ST_TO_ADDR
26545: GO 26864
26547: LD_INT 42
26549: DOUBLE
26550: EQUAL
26551: IFTRUE 26555
26553: GO 26581
26555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26556: LD_ADDR_VAR 0 3
26560: PUSH
26561: LD_INT 21
26563: PUSH
26564: LD_INT 22
26566: PUSH
26567: LD_INT 23
26569: PUSH
26570: LD_INT 24
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
26579: GO 26864
26581: LD_INT 43
26583: DOUBLE
26584: EQUAL
26585: IFTRUE 26589
26587: GO 26615
26589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_INT 21
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_INT 23
26603: PUSH
26604: LD_INT 24
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
26613: GO 26864
26615: LD_INT 44
26617: DOUBLE
26618: EQUAL
26619: IFTRUE 26623
26621: GO 26649
26623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 23
26637: PUSH
26638: LD_INT 24
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: ST_TO_ADDR
26647: GO 26864
26649: LD_INT 45
26651: DOUBLE
26652: EQUAL
26653: IFTRUE 26657
26655: GO 26683
26657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26658: LD_ADDR_VAR 0 3
26662: PUSH
26663: LD_INT 21
26665: PUSH
26666: LD_INT 22
26668: PUSH
26669: LD_INT 23
26671: PUSH
26672: LD_INT 24
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
26681: GO 26864
26683: LD_INT 49
26685: DOUBLE
26686: EQUAL
26687: IFTRUE 26691
26689: GO 26717
26691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26692: LD_ADDR_VAR 0 3
26696: PUSH
26697: LD_INT 21
26699: PUSH
26700: LD_INT 22
26702: PUSH
26703: LD_INT 23
26705: PUSH
26706: LD_INT 24
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: ST_TO_ADDR
26715: GO 26864
26717: LD_INT 51
26719: DOUBLE
26720: EQUAL
26721: IFTRUE 26725
26723: GO 26751
26725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26726: LD_ADDR_VAR 0 3
26730: PUSH
26731: LD_INT 21
26733: PUSH
26734: LD_INT 22
26736: PUSH
26737: LD_INT 23
26739: PUSH
26740: LD_INT 24
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: ST_TO_ADDR
26749: GO 26864
26751: LD_INT 52
26753: DOUBLE
26754: EQUAL
26755: IFTRUE 26759
26757: GO 26785
26759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26760: LD_ADDR_VAR 0 3
26764: PUSH
26765: LD_INT 21
26767: PUSH
26768: LD_INT 22
26770: PUSH
26771: LD_INT 23
26773: PUSH
26774: LD_INT 24
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: ST_TO_ADDR
26783: GO 26864
26785: LD_INT 53
26787: DOUBLE
26788: EQUAL
26789: IFTRUE 26793
26791: GO 26811
26793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26794: LD_ADDR_VAR 0 3
26798: PUSH
26799: LD_INT 23
26801: PUSH
26802: LD_INT 24
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: ST_TO_ADDR
26809: GO 26864
26811: LD_INT 46
26813: DOUBLE
26814: EQUAL
26815: IFTRUE 26819
26817: GO 26837
26819: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26820: LD_ADDR_VAR 0 3
26824: PUSH
26825: LD_INT 23
26827: PUSH
26828: LD_INT 24
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: ST_TO_ADDR
26835: GO 26864
26837: LD_INT 47
26839: DOUBLE
26840: EQUAL
26841: IFTRUE 26845
26843: GO 26863
26845: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26846: LD_ADDR_VAR 0 3
26850: PUSH
26851: LD_INT 23
26853: PUSH
26854: LD_INT 24
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: ST_TO_ADDR
26861: GO 26864
26863: POP
// result := ( chassis in result ) ;
26864: LD_ADDR_VAR 0 3
26868: PUSH
26869: LD_VAR 0 1
26873: PUSH
26874: LD_VAR 0 3
26878: IN
26879: ST_TO_ADDR
// end ;
26880: LD_VAR 0 3
26884: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26885: LD_INT 0
26887: PPUSH
26888: PPUSH
26889: PPUSH
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
// result := array ;
26894: LD_ADDR_VAR 0 5
26898: PUSH
26899: LD_VAR 0 1
26903: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26904: LD_VAR 0 1
26908: NOT
26909: PUSH
26910: LD_VAR 0 2
26914: NOT
26915: OR
26916: PUSH
26917: LD_VAR 0 3
26921: NOT
26922: OR
26923: PUSH
26924: LD_VAR 0 2
26928: PUSH
26929: LD_VAR 0 1
26933: GREATER
26934: OR
26935: PUSH
26936: LD_VAR 0 3
26940: PUSH
26941: LD_VAR 0 1
26945: GREATER
26946: OR
26947: IFFALSE 26951
// exit ;
26949: GO 27247
// if direction then
26951: LD_VAR 0 4
26955: IFFALSE 27019
// begin d := 1 ;
26957: LD_ADDR_VAR 0 9
26961: PUSH
26962: LD_INT 1
26964: ST_TO_ADDR
// if i_from > i_to then
26965: LD_VAR 0 2
26969: PUSH
26970: LD_VAR 0 3
26974: GREATER
26975: IFFALSE 27001
// length := ( array - i_from ) + i_to else
26977: LD_ADDR_VAR 0 11
26981: PUSH
26982: LD_VAR 0 1
26986: PUSH
26987: LD_VAR 0 2
26991: MINUS
26992: PUSH
26993: LD_VAR 0 3
26997: PLUS
26998: ST_TO_ADDR
26999: GO 27017
// length := i_to - i_from ;
27001: LD_ADDR_VAR 0 11
27005: PUSH
27006: LD_VAR 0 3
27010: PUSH
27011: LD_VAR 0 2
27015: MINUS
27016: ST_TO_ADDR
// end else
27017: GO 27080
// begin d := - 1 ;
27019: LD_ADDR_VAR 0 9
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: ST_TO_ADDR
// if i_from > i_to then
27028: LD_VAR 0 2
27032: PUSH
27033: LD_VAR 0 3
27037: GREATER
27038: IFFALSE 27058
// length := i_from - i_to else
27040: LD_ADDR_VAR 0 11
27044: PUSH
27045: LD_VAR 0 2
27049: PUSH
27050: LD_VAR 0 3
27054: MINUS
27055: ST_TO_ADDR
27056: GO 27080
// length := ( array - i_to ) + i_from ;
27058: LD_ADDR_VAR 0 11
27062: PUSH
27063: LD_VAR 0 1
27067: PUSH
27068: LD_VAR 0 3
27072: MINUS
27073: PUSH
27074: LD_VAR 0 2
27078: PLUS
27079: ST_TO_ADDR
// end ; if not length then
27080: LD_VAR 0 11
27084: NOT
27085: IFFALSE 27089
// exit ;
27087: GO 27247
// tmp := array ;
27089: LD_ADDR_VAR 0 10
27093: PUSH
27094: LD_VAR 0 1
27098: ST_TO_ADDR
// for i = 1 to length do
27099: LD_ADDR_VAR 0 6
27103: PUSH
27104: DOUBLE
27105: LD_INT 1
27107: DEC
27108: ST_TO_ADDR
27109: LD_VAR 0 11
27113: PUSH
27114: FOR_TO
27115: IFFALSE 27235
// begin for j = 1 to array do
27117: LD_ADDR_VAR 0 7
27121: PUSH
27122: DOUBLE
27123: LD_INT 1
27125: DEC
27126: ST_TO_ADDR
27127: LD_VAR 0 1
27131: PUSH
27132: FOR_TO
27133: IFFALSE 27221
// begin k := j + d ;
27135: LD_ADDR_VAR 0 8
27139: PUSH
27140: LD_VAR 0 7
27144: PUSH
27145: LD_VAR 0 9
27149: PLUS
27150: ST_TO_ADDR
// if k > array then
27151: LD_VAR 0 8
27155: PUSH
27156: LD_VAR 0 1
27160: GREATER
27161: IFFALSE 27171
// k := 1 ;
27163: LD_ADDR_VAR 0 8
27167: PUSH
27168: LD_INT 1
27170: ST_TO_ADDR
// if not k then
27171: LD_VAR 0 8
27175: NOT
27176: IFFALSE 27188
// k := array ;
27178: LD_ADDR_VAR 0 8
27182: PUSH
27183: LD_VAR 0 1
27187: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27188: LD_ADDR_VAR 0 10
27192: PUSH
27193: LD_VAR 0 10
27197: PPUSH
27198: LD_VAR 0 8
27202: PPUSH
27203: LD_VAR 0 1
27207: PUSH
27208: LD_VAR 0 7
27212: ARRAY
27213: PPUSH
27214: CALL_OW 1
27218: ST_TO_ADDR
// end ;
27219: GO 27132
27221: POP
27222: POP
// array := tmp ;
27223: LD_ADDR_VAR 0 1
27227: PUSH
27228: LD_VAR 0 10
27232: ST_TO_ADDR
// end ;
27233: GO 27114
27235: POP
27236: POP
// result := array ;
27237: LD_ADDR_VAR 0 5
27241: PUSH
27242: LD_VAR 0 1
27246: ST_TO_ADDR
// end ;
27247: LD_VAR 0 5
27251: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27252: LD_INT 0
27254: PPUSH
27255: PPUSH
// result := 0 ;
27256: LD_ADDR_VAR 0 3
27260: PUSH
27261: LD_INT 0
27263: ST_TO_ADDR
// if not array or not value in array then
27264: LD_VAR 0 1
27268: NOT
27269: PUSH
27270: LD_VAR 0 2
27274: PUSH
27275: LD_VAR 0 1
27279: IN
27280: NOT
27281: OR
27282: IFFALSE 27286
// exit ;
27284: GO 27340
// for i = 1 to array do
27286: LD_ADDR_VAR 0 4
27290: PUSH
27291: DOUBLE
27292: LD_INT 1
27294: DEC
27295: ST_TO_ADDR
27296: LD_VAR 0 1
27300: PUSH
27301: FOR_TO
27302: IFFALSE 27338
// if value = array [ i ] then
27304: LD_VAR 0 2
27308: PUSH
27309: LD_VAR 0 1
27313: PUSH
27314: LD_VAR 0 4
27318: ARRAY
27319: EQUAL
27320: IFFALSE 27336
// begin result := i ;
27322: LD_ADDR_VAR 0 3
27326: PUSH
27327: LD_VAR 0 4
27331: ST_TO_ADDR
// exit ;
27332: POP
27333: POP
27334: GO 27340
// end ;
27336: GO 27301
27338: POP
27339: POP
// end ;
27340: LD_VAR 0 3
27344: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27345: LD_INT 0
27347: PPUSH
// vc_chassis := chassis ;
27348: LD_ADDR_OWVAR 37
27352: PUSH
27353: LD_VAR 0 1
27357: ST_TO_ADDR
// vc_engine := engine ;
27358: LD_ADDR_OWVAR 39
27362: PUSH
27363: LD_VAR 0 2
27367: ST_TO_ADDR
// vc_control := control ;
27368: LD_ADDR_OWVAR 38
27372: PUSH
27373: LD_VAR 0 3
27377: ST_TO_ADDR
// vc_weapon := weapon ;
27378: LD_ADDR_OWVAR 40
27382: PUSH
27383: LD_VAR 0 4
27387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27388: LD_ADDR_OWVAR 41
27392: PUSH
27393: LD_VAR 0 5
27397: ST_TO_ADDR
// end ;
27398: LD_VAR 0 6
27402: RET
// export function WantPlant ( unit ) ; var task ; begin
27403: LD_INT 0
27405: PPUSH
27406: PPUSH
// result := false ;
27407: LD_ADDR_VAR 0 2
27411: PUSH
27412: LD_INT 0
27414: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27415: LD_ADDR_VAR 0 3
27419: PUSH
27420: LD_VAR 0 1
27424: PPUSH
27425: CALL_OW 437
27429: ST_TO_ADDR
// if task then
27430: LD_VAR 0 3
27434: IFFALSE 27462
// if task [ 1 ] [ 1 ] = p then
27436: LD_VAR 0 3
27440: PUSH
27441: LD_INT 1
27443: ARRAY
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PUSH
27449: LD_STRING p
27451: EQUAL
27452: IFFALSE 27462
// result := true ;
27454: LD_ADDR_VAR 0 2
27458: PUSH
27459: LD_INT 1
27461: ST_TO_ADDR
// end ;
27462: LD_VAR 0 2
27466: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27467: LD_INT 0
27469: PPUSH
27470: PPUSH
27471: PPUSH
27472: PPUSH
// if pos < 1 then
27473: LD_VAR 0 2
27477: PUSH
27478: LD_INT 1
27480: LESS
27481: IFFALSE 27485
// exit ;
27483: GO 27788
// if pos = 1 then
27485: LD_VAR 0 2
27489: PUSH
27490: LD_INT 1
27492: EQUAL
27493: IFFALSE 27526
// result := Replace ( arr , pos [ 1 ] , value ) else
27495: LD_ADDR_VAR 0 4
27499: PUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: LD_VAR 0 2
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: PPUSH
27514: LD_VAR 0 3
27518: PPUSH
27519: CALL_OW 1
27523: ST_TO_ADDR
27524: GO 27788
// begin tmp := arr ;
27526: LD_ADDR_VAR 0 6
27530: PUSH
27531: LD_VAR 0 1
27535: ST_TO_ADDR
// s_arr := [ tmp ] ;
27536: LD_ADDR_VAR 0 7
27540: PUSH
27541: LD_VAR 0 6
27545: PUSH
27546: EMPTY
27547: LIST
27548: ST_TO_ADDR
// for i = 1 to pos - 1 do
27549: LD_ADDR_VAR 0 5
27553: PUSH
27554: DOUBLE
27555: LD_INT 1
27557: DEC
27558: ST_TO_ADDR
27559: LD_VAR 0 2
27563: PUSH
27564: LD_INT 1
27566: MINUS
27567: PUSH
27568: FOR_TO
27569: IFFALSE 27614
// begin tmp := tmp [ pos [ i ] ] ;
27571: LD_ADDR_VAR 0 6
27575: PUSH
27576: LD_VAR 0 6
27580: PUSH
27581: LD_VAR 0 2
27585: PUSH
27586: LD_VAR 0 5
27590: ARRAY
27591: ARRAY
27592: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27593: LD_ADDR_VAR 0 7
27597: PUSH
27598: LD_VAR 0 7
27602: PUSH
27603: LD_VAR 0 6
27607: PUSH
27608: EMPTY
27609: LIST
27610: ADD
27611: ST_TO_ADDR
// end ;
27612: GO 27568
27614: POP
27615: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27616: LD_ADDR_VAR 0 6
27620: PUSH
27621: LD_VAR 0 6
27625: PPUSH
27626: LD_VAR 0 2
27630: PUSH
27631: LD_VAR 0 2
27635: ARRAY
27636: PPUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: CALL_OW 1
27646: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27647: LD_ADDR_VAR 0 7
27651: PUSH
27652: LD_VAR 0 7
27656: PPUSH
27657: LD_VAR 0 7
27661: PPUSH
27662: LD_VAR 0 6
27666: PPUSH
27667: CALL_OW 1
27671: ST_TO_ADDR
// for i = s_arr downto 2 do
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: DOUBLE
27678: LD_VAR 0 7
27682: INC
27683: ST_TO_ADDR
27684: LD_INT 2
27686: PUSH
27687: FOR_DOWNTO
27688: IFFALSE 27772
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27690: LD_ADDR_VAR 0 6
27694: PUSH
27695: LD_VAR 0 7
27699: PUSH
27700: LD_VAR 0 5
27704: PUSH
27705: LD_INT 1
27707: MINUS
27708: ARRAY
27709: PPUSH
27710: LD_VAR 0 2
27714: PUSH
27715: LD_VAR 0 5
27719: PUSH
27720: LD_INT 1
27722: MINUS
27723: ARRAY
27724: PPUSH
27725: LD_VAR 0 7
27729: PUSH
27730: LD_VAR 0 5
27734: ARRAY
27735: PPUSH
27736: CALL_OW 1
27740: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27741: LD_ADDR_VAR 0 7
27745: PUSH
27746: LD_VAR 0 7
27750: PPUSH
27751: LD_VAR 0 5
27755: PUSH
27756: LD_INT 1
27758: MINUS
27759: PPUSH
27760: LD_VAR 0 6
27764: PPUSH
27765: CALL_OW 1
27769: ST_TO_ADDR
// end ;
27770: GO 27687
27772: POP
27773: POP
// result := s_arr [ 1 ] ;
27774: LD_ADDR_VAR 0 4
27778: PUSH
27779: LD_VAR 0 7
27783: PUSH
27784: LD_INT 1
27786: ARRAY
27787: ST_TO_ADDR
// end ; end ;
27788: LD_VAR 0 4
27792: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
// if not list then
27797: LD_VAR 0 1
27801: NOT
27802: IFFALSE 27806
// exit ;
27804: GO 27897
// i := list [ pos1 ] ;
27806: LD_ADDR_VAR 0 5
27810: PUSH
27811: LD_VAR 0 1
27815: PUSH
27816: LD_VAR 0 2
27820: ARRAY
27821: ST_TO_ADDR
// if not i then
27822: LD_VAR 0 5
27826: NOT
27827: IFFALSE 27831
// exit ;
27829: GO 27897
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27831: LD_ADDR_VAR 0 1
27835: PUSH
27836: LD_VAR 0 1
27840: PPUSH
27841: LD_VAR 0 2
27845: PPUSH
27846: LD_VAR 0 1
27850: PUSH
27851: LD_VAR 0 3
27855: ARRAY
27856: PPUSH
27857: CALL_OW 1
27861: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27862: LD_ADDR_VAR 0 1
27866: PUSH
27867: LD_VAR 0 1
27871: PPUSH
27872: LD_VAR 0 3
27876: PPUSH
27877: LD_VAR 0 5
27881: PPUSH
27882: CALL_OW 1
27886: ST_TO_ADDR
// result := list ;
27887: LD_ADDR_VAR 0 4
27891: PUSH
27892: LD_VAR 0 1
27896: ST_TO_ADDR
// end ;
27897: LD_VAR 0 4
27901: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27902: LD_INT 0
27904: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27905: LD_ADDR_VAR 0 5
27909: PUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 250
27919: PPUSH
27920: LD_VAR 0 1
27924: PPUSH
27925: CALL_OW 251
27929: PPUSH
27930: LD_VAR 0 2
27934: PPUSH
27935: LD_VAR 0 3
27939: PPUSH
27940: LD_VAR 0 4
27944: PPUSH
27945: CALL 27955 0 5
27949: ST_TO_ADDR
// end ;
27950: LD_VAR 0 5
27954: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27955: LD_INT 0
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
// if not list then
27961: LD_VAR 0 3
27965: NOT
27966: IFFALSE 27970
// exit ;
27968: GO 28358
// result := [ ] ;
27970: LD_ADDR_VAR 0 6
27974: PUSH
27975: EMPTY
27976: ST_TO_ADDR
// for i in list do
27977: LD_ADDR_VAR 0 7
27981: PUSH
27982: LD_VAR 0 3
27986: PUSH
27987: FOR_IN
27988: IFFALSE 28190
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27990: LD_ADDR_VAR 0 9
27994: PUSH
27995: LD_VAR 0 7
27999: PPUSH
28000: LD_VAR 0 1
28004: PPUSH
28005: LD_VAR 0 2
28009: PPUSH
28010: CALL_OW 297
28014: ST_TO_ADDR
// if not result then
28015: LD_VAR 0 6
28019: NOT
28020: IFFALSE 28046
// result := [ [ i , tmp ] ] else
28022: LD_ADDR_VAR 0 6
28026: PUSH
28027: LD_VAR 0 7
28031: PUSH
28032: LD_VAR 0 9
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: ST_TO_ADDR
28044: GO 28188
// begin if result [ result ] [ 2 ] < tmp then
28046: LD_VAR 0 6
28050: PUSH
28051: LD_VAR 0 6
28055: ARRAY
28056: PUSH
28057: LD_INT 2
28059: ARRAY
28060: PUSH
28061: LD_VAR 0 9
28065: LESS
28066: IFFALSE 28108
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28068: LD_ADDR_VAR 0 6
28072: PUSH
28073: LD_VAR 0 6
28077: PPUSH
28078: LD_VAR 0 6
28082: PUSH
28083: LD_INT 1
28085: PLUS
28086: PPUSH
28087: LD_VAR 0 7
28091: PUSH
28092: LD_VAR 0 9
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PPUSH
28101: CALL_OW 2
28105: ST_TO_ADDR
28106: GO 28188
// for j = 1 to result do
28108: LD_ADDR_VAR 0 8
28112: PUSH
28113: DOUBLE
28114: LD_INT 1
28116: DEC
28117: ST_TO_ADDR
28118: LD_VAR 0 6
28122: PUSH
28123: FOR_TO
28124: IFFALSE 28186
// begin if tmp < result [ j ] [ 2 ] then
28126: LD_VAR 0 9
28130: PUSH
28131: LD_VAR 0 6
28135: PUSH
28136: LD_VAR 0 8
28140: ARRAY
28141: PUSH
28142: LD_INT 2
28144: ARRAY
28145: LESS
28146: IFFALSE 28184
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28148: LD_ADDR_VAR 0 6
28152: PUSH
28153: LD_VAR 0 6
28157: PPUSH
28158: LD_VAR 0 8
28162: PPUSH
28163: LD_VAR 0 7
28167: PUSH
28168: LD_VAR 0 9
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 2
28181: ST_TO_ADDR
// break ;
28182: GO 28186
// end ; end ;
28184: GO 28123
28186: POP
28187: POP
// end ; end ;
28188: GO 27987
28190: POP
28191: POP
// if result and not asc then
28192: LD_VAR 0 6
28196: PUSH
28197: LD_VAR 0 4
28201: NOT
28202: AND
28203: IFFALSE 28278
// begin tmp := result ;
28205: LD_ADDR_VAR 0 9
28209: PUSH
28210: LD_VAR 0 6
28214: ST_TO_ADDR
// for i = tmp downto 1 do
28215: LD_ADDR_VAR 0 7
28219: PUSH
28220: DOUBLE
28221: LD_VAR 0 9
28225: INC
28226: ST_TO_ADDR
28227: LD_INT 1
28229: PUSH
28230: FOR_DOWNTO
28231: IFFALSE 28276
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28233: LD_ADDR_VAR 0 6
28237: PUSH
28238: LD_VAR 0 6
28242: PPUSH
28243: LD_VAR 0 9
28247: PUSH
28248: LD_VAR 0 7
28252: MINUS
28253: PUSH
28254: LD_INT 1
28256: PLUS
28257: PPUSH
28258: LD_VAR 0 9
28262: PUSH
28263: LD_VAR 0 7
28267: ARRAY
28268: PPUSH
28269: CALL_OW 1
28273: ST_TO_ADDR
28274: GO 28230
28276: POP
28277: POP
// end ; tmp := [ ] ;
28278: LD_ADDR_VAR 0 9
28282: PUSH
28283: EMPTY
28284: ST_TO_ADDR
// if mode then
28285: LD_VAR 0 5
28289: IFFALSE 28358
// begin for i = 1 to result do
28291: LD_ADDR_VAR 0 7
28295: PUSH
28296: DOUBLE
28297: LD_INT 1
28299: DEC
28300: ST_TO_ADDR
28301: LD_VAR 0 6
28305: PUSH
28306: FOR_TO
28307: IFFALSE 28346
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28309: LD_ADDR_VAR 0 9
28313: PUSH
28314: LD_VAR 0 9
28318: PPUSH
28319: LD_VAR 0 7
28323: PPUSH
28324: LD_VAR 0 6
28328: PUSH
28329: LD_VAR 0 7
28333: ARRAY
28334: PUSH
28335: LD_INT 1
28337: ARRAY
28338: PPUSH
28339: CALL_OW 1
28343: ST_TO_ADDR
28344: GO 28306
28346: POP
28347: POP
// result := tmp ;
28348: LD_ADDR_VAR 0 6
28352: PUSH
28353: LD_VAR 0 9
28357: ST_TO_ADDR
// end ; end ;
28358: LD_VAR 0 6
28362: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28363: LD_INT 0
28365: PPUSH
28366: PPUSH
28367: PPUSH
28368: PPUSH
28369: PPUSH
28370: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28371: LD_ADDR_VAR 0 5
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: ST_TO_ADDR
// if not x or not y then
28393: LD_VAR 0 2
28397: NOT
28398: PUSH
28399: LD_VAR 0 3
28403: NOT
28404: OR
28405: IFFALSE 28409
// exit ;
28407: GO 30061
// if not range then
28409: LD_VAR 0 4
28413: NOT
28414: IFFALSE 28424
// range := 10 ;
28416: LD_ADDR_VAR 0 4
28420: PUSH
28421: LD_INT 10
28423: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28424: LD_ADDR_VAR 0 8
28428: PUSH
28429: LD_INT 81
28431: PUSH
28432: LD_VAR 0 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 92
28443: PUSH
28444: LD_VAR 0 2
28448: PUSH
28449: LD_VAR 0 3
28453: PUSH
28454: LD_VAR 0 4
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 3
28467: PUSH
28468: LD_INT 21
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: LIST
28486: PPUSH
28487: CALL_OW 69
28491: ST_TO_ADDR
// if not tmp then
28492: LD_VAR 0 8
28496: NOT
28497: IFFALSE 28501
// exit ;
28499: GO 30061
// for i in tmp do
28501: LD_ADDR_VAR 0 6
28505: PUSH
28506: LD_VAR 0 8
28510: PUSH
28511: FOR_IN
28512: IFFALSE 30036
// begin points := [ 0 , 0 , 0 ] ;
28514: LD_ADDR_VAR 0 9
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: ST_TO_ADDR
// bpoints := 1 ;
28533: LD_ADDR_VAR 0 10
28537: PUSH
28538: LD_INT 1
28540: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28541: LD_VAR 0 6
28545: PPUSH
28546: CALL_OW 247
28550: PUSH
28551: LD_INT 1
28553: DOUBLE
28554: EQUAL
28555: IFTRUE 28559
28557: GO 29137
28559: POP
// begin if GetClass ( i ) = 1 then
28560: LD_VAR 0 6
28564: PPUSH
28565: CALL_OW 257
28569: PUSH
28570: LD_INT 1
28572: EQUAL
28573: IFFALSE 28594
// points := [ 10 , 5 , 3 ] ;
28575: LD_ADDR_VAR 0 9
28579: PUSH
28580: LD_INT 10
28582: PUSH
28583: LD_INT 5
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28594: LD_VAR 0 6
28598: PPUSH
28599: CALL_OW 257
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 3
28609: PUSH
28610: LD_INT 4
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: IN
28618: IFFALSE 28639
// points := [ 3 , 2 , 1 ] ;
28620: LD_ADDR_VAR 0 9
28624: PUSH
28625: LD_INT 3
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: LIST
28638: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28639: LD_VAR 0 6
28643: PPUSH
28644: CALL_OW 257
28648: PUSH
28649: LD_INT 5
28651: EQUAL
28652: IFFALSE 28673
// points := [ 130 , 5 , 2 ] ;
28654: LD_ADDR_VAR 0 9
28658: PUSH
28659: LD_INT 130
28661: PUSH
28662: LD_INT 5
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28673: LD_VAR 0 6
28677: PPUSH
28678: CALL_OW 257
28682: PUSH
28683: LD_INT 8
28685: EQUAL
28686: IFFALSE 28707
// points := [ 35 , 35 , 30 ] ;
28688: LD_ADDR_VAR 0 9
28692: PUSH
28693: LD_INT 35
28695: PUSH
28696: LD_INT 35
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28707: LD_VAR 0 6
28711: PPUSH
28712: CALL_OW 257
28716: PUSH
28717: LD_INT 9
28719: EQUAL
28720: IFFALSE 28741
// points := [ 20 , 55 , 40 ] ;
28722: LD_ADDR_VAR 0 9
28726: PUSH
28727: LD_INT 20
28729: PUSH
28730: LD_INT 55
28732: PUSH
28733: LD_INT 40
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28741: LD_VAR 0 6
28745: PPUSH
28746: CALL_OW 257
28750: PUSH
28751: LD_INT 12
28753: PUSH
28754: LD_INT 16
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: IN
28761: IFFALSE 28782
// points := [ 5 , 3 , 2 ] ;
28763: LD_ADDR_VAR 0 9
28767: PUSH
28768: LD_INT 5
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28782: LD_VAR 0 6
28786: PPUSH
28787: CALL_OW 257
28791: PUSH
28792: LD_INT 17
28794: EQUAL
28795: IFFALSE 28816
// points := [ 100 , 50 , 75 ] ;
28797: LD_ADDR_VAR 0 9
28801: PUSH
28802: LD_INT 100
28804: PUSH
28805: LD_INT 50
28807: PUSH
28808: LD_INT 75
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28816: LD_VAR 0 6
28820: PPUSH
28821: CALL_OW 257
28825: PUSH
28826: LD_INT 15
28828: EQUAL
28829: IFFALSE 28850
// points := [ 10 , 5 , 3 ] ;
28831: LD_ADDR_VAR 0 9
28835: PUSH
28836: LD_INT 10
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: LD_INT 3
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28850: LD_VAR 0 6
28854: PPUSH
28855: CALL_OW 257
28859: PUSH
28860: LD_INT 14
28862: EQUAL
28863: IFFALSE 28884
// points := [ 10 , 0 , 0 ] ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 10
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28884: LD_VAR 0 6
28888: PPUSH
28889: CALL_OW 257
28893: PUSH
28894: LD_INT 11
28896: EQUAL
28897: IFFALSE 28918
// points := [ 30 , 10 , 5 ] ;
28899: LD_ADDR_VAR 0 9
28903: PUSH
28904: LD_INT 30
28906: PUSH
28907: LD_INT 10
28909: PUSH
28910: LD_INT 5
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28918: LD_VAR 0 1
28922: PPUSH
28923: LD_INT 5
28925: PPUSH
28926: CALL_OW 321
28930: PUSH
28931: LD_INT 2
28933: EQUAL
28934: IFFALSE 28951
// bpoints := bpoints * 1.8 ;
28936: LD_ADDR_VAR 0 10
28940: PUSH
28941: LD_VAR 0 10
28945: PUSH
28946: LD_REAL  1.80000000000000E+0000
28949: MUL
28950: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28951: LD_VAR 0 6
28955: PPUSH
28956: CALL_OW 257
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: LD_INT 3
28969: PUSH
28970: LD_INT 4
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: IN
28979: PUSH
28980: LD_VAR 0 1
28984: PPUSH
28985: LD_INT 51
28987: PPUSH
28988: CALL_OW 321
28992: PUSH
28993: LD_INT 2
28995: EQUAL
28996: AND
28997: IFFALSE 29014
// bpoints := bpoints * 1.2 ;
28999: LD_ADDR_VAR 0 10
29003: PUSH
29004: LD_VAR 0 10
29008: PUSH
29009: LD_REAL  1.20000000000000E+0000
29012: MUL
29013: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29014: LD_VAR 0 6
29018: PPUSH
29019: CALL_OW 257
29023: PUSH
29024: LD_INT 5
29026: PUSH
29027: LD_INT 7
29029: PUSH
29030: LD_INT 9
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: IN
29038: PUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: LD_INT 52
29046: PPUSH
29047: CALL_OW 321
29051: PUSH
29052: LD_INT 2
29054: EQUAL
29055: AND
29056: IFFALSE 29073
// bpoints := bpoints * 1.5 ;
29058: LD_ADDR_VAR 0 10
29062: PUSH
29063: LD_VAR 0 10
29067: PUSH
29068: LD_REAL  1.50000000000000E+0000
29071: MUL
29072: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29073: LD_VAR 0 1
29077: PPUSH
29078: LD_INT 66
29080: PPUSH
29081: CALL_OW 321
29085: PUSH
29086: LD_INT 2
29088: EQUAL
29089: IFFALSE 29106
// bpoints := bpoints * 1.1 ;
29091: LD_ADDR_VAR 0 10
29095: PUSH
29096: LD_VAR 0 10
29100: PUSH
29101: LD_REAL  1.10000000000000E+0000
29104: MUL
29105: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29106: LD_ADDR_VAR 0 10
29110: PUSH
29111: LD_VAR 0 10
29115: PUSH
29116: LD_VAR 0 6
29120: PPUSH
29121: LD_INT 1
29123: PPUSH
29124: CALL_OW 259
29128: PUSH
29129: LD_REAL  1.15000000000000E+0000
29132: MUL
29133: MUL
29134: ST_TO_ADDR
// end ; unit_vehicle :
29135: GO 29965
29137: LD_INT 2
29139: DOUBLE
29140: EQUAL
29141: IFTRUE 29145
29143: GO 29953
29145: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29146: LD_VAR 0 6
29150: PPUSH
29151: CALL_OW 264
29155: PUSH
29156: LD_INT 2
29158: PUSH
29159: LD_INT 42
29161: PUSH
29162: LD_INT 24
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: IN
29170: IFFALSE 29191
// points := [ 25 , 5 , 3 ] ;
29172: LD_ADDR_VAR 0 9
29176: PUSH
29177: LD_INT 25
29179: PUSH
29180: LD_INT 5
29182: PUSH
29183: LD_INT 3
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29191: LD_VAR 0 6
29195: PPUSH
29196: CALL_OW 264
29200: PUSH
29201: LD_INT 4
29203: PUSH
29204: LD_INT 43
29206: PUSH
29207: LD_INT 25
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: IN
29215: IFFALSE 29236
// points := [ 40 , 15 , 5 ] ;
29217: LD_ADDR_VAR 0 9
29221: PUSH
29222: LD_INT 40
29224: PUSH
29225: LD_INT 15
29227: PUSH
29228: LD_INT 5
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29236: LD_VAR 0 6
29240: PPUSH
29241: CALL_OW 264
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: LD_INT 23
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: IN
29256: IFFALSE 29277
// points := [ 7 , 25 , 8 ] ;
29258: LD_ADDR_VAR 0 9
29262: PUSH
29263: LD_INT 7
29265: PUSH
29266: LD_INT 25
29268: PUSH
29269: LD_INT 8
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29277: LD_VAR 0 6
29281: PPUSH
29282: CALL_OW 264
29286: PUSH
29287: LD_INT 5
29289: PUSH
29290: LD_INT 27
29292: PUSH
29293: LD_INT 44
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: IN
29301: IFFALSE 29322
// points := [ 14 , 50 , 16 ] ;
29303: LD_ADDR_VAR 0 9
29307: PUSH
29308: LD_INT 14
29310: PUSH
29311: LD_INT 50
29313: PUSH
29314: LD_INT 16
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29322: LD_VAR 0 6
29326: PPUSH
29327: CALL_OW 264
29331: PUSH
29332: LD_INT 6
29334: PUSH
29335: LD_INT 46
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: IN
29342: IFFALSE 29363
// points := [ 32 , 120 , 70 ] ;
29344: LD_ADDR_VAR 0 9
29348: PUSH
29349: LD_INT 32
29351: PUSH
29352: LD_INT 120
29354: PUSH
29355: LD_INT 70
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29363: LD_VAR 0 6
29367: PPUSH
29368: CALL_OW 264
29372: PUSH
29373: LD_INT 7
29375: PUSH
29376: LD_INT 28
29378: PUSH
29379: LD_INT 45
29381: PUSH
29382: LD_EXP 87
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: IN
29393: IFFALSE 29414
// points := [ 35 , 20 , 45 ] ;
29395: LD_ADDR_VAR 0 9
29399: PUSH
29400: LD_INT 35
29402: PUSH
29403: LD_INT 20
29405: PUSH
29406: LD_INT 45
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29414: LD_VAR 0 6
29418: PPUSH
29419: CALL_OW 264
29423: PUSH
29424: LD_INT 47
29426: PUSH
29427: EMPTY
29428: LIST
29429: IN
29430: IFFALSE 29451
// points := [ 67 , 45 , 75 ] ;
29432: LD_ADDR_VAR 0 9
29436: PUSH
29437: LD_INT 67
29439: PUSH
29440: LD_INT 45
29442: PUSH
29443: LD_INT 75
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29451: LD_VAR 0 6
29455: PPUSH
29456: CALL_OW 264
29460: PUSH
29461: LD_INT 26
29463: PUSH
29464: EMPTY
29465: LIST
29466: IN
29467: IFFALSE 29488
// points := [ 120 , 30 , 80 ] ;
29469: LD_ADDR_VAR 0 9
29473: PUSH
29474: LD_INT 120
29476: PUSH
29477: LD_INT 30
29479: PUSH
29480: LD_INT 80
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: LIST
29487: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29488: LD_VAR 0 6
29492: PPUSH
29493: CALL_OW 264
29497: PUSH
29498: LD_INT 22
29500: PUSH
29501: EMPTY
29502: LIST
29503: IN
29504: IFFALSE 29525
// points := [ 40 , 1 , 1 ] ;
29506: LD_ADDR_VAR 0 9
29510: PUSH
29511: LD_INT 40
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29525: LD_VAR 0 6
29529: PPUSH
29530: CALL_OW 264
29534: PUSH
29535: LD_INT 29
29537: PUSH
29538: EMPTY
29539: LIST
29540: IN
29541: IFFALSE 29562
// points := [ 70 , 200 , 400 ] ;
29543: LD_ADDR_VAR 0 9
29547: PUSH
29548: LD_INT 70
29550: PUSH
29551: LD_INT 200
29553: PUSH
29554: LD_INT 400
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29562: LD_VAR 0 6
29566: PPUSH
29567: CALL_OW 264
29571: PUSH
29572: LD_INT 14
29574: PUSH
29575: LD_INT 53
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: IN
29582: IFFALSE 29603
// points := [ 40 , 10 , 20 ] ;
29584: LD_ADDR_VAR 0 9
29588: PUSH
29589: LD_INT 40
29591: PUSH
29592: LD_INT 10
29594: PUSH
29595: LD_INT 20
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: LIST
29602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29603: LD_VAR 0 6
29607: PPUSH
29608: CALL_OW 264
29612: PUSH
29613: LD_INT 9
29615: PUSH
29616: EMPTY
29617: LIST
29618: IN
29619: IFFALSE 29640
// points := [ 5 , 70 , 20 ] ;
29621: LD_ADDR_VAR 0 9
29625: PUSH
29626: LD_INT 5
29628: PUSH
29629: LD_INT 70
29631: PUSH
29632: LD_INT 20
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29640: LD_VAR 0 6
29644: PPUSH
29645: CALL_OW 264
29649: PUSH
29650: LD_INT 10
29652: PUSH
29653: EMPTY
29654: LIST
29655: IN
29656: IFFALSE 29677
// points := [ 35 , 110 , 70 ] ;
29658: LD_ADDR_VAR 0 9
29662: PUSH
29663: LD_INT 35
29665: PUSH
29666: LD_INT 110
29668: PUSH
29669: LD_INT 70
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29677: LD_VAR 0 6
29681: PPUSH
29682: CALL_OW 265
29686: PUSH
29687: LD_INT 25
29689: EQUAL
29690: IFFALSE 29711
// points := [ 80 , 65 , 100 ] ;
29692: LD_ADDR_VAR 0 9
29696: PUSH
29697: LD_INT 80
29699: PUSH
29700: LD_INT 65
29702: PUSH
29703: LD_INT 100
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29711: LD_VAR 0 6
29715: PPUSH
29716: CALL_OW 263
29720: PUSH
29721: LD_INT 1
29723: EQUAL
29724: IFFALSE 29759
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29726: LD_ADDR_VAR 0 10
29730: PUSH
29731: LD_VAR 0 10
29735: PUSH
29736: LD_VAR 0 6
29740: PPUSH
29741: CALL_OW 311
29745: PPUSH
29746: LD_INT 3
29748: PPUSH
29749: CALL_OW 259
29753: PUSH
29754: LD_INT 4
29756: MUL
29757: MUL
29758: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29759: LD_VAR 0 6
29763: PPUSH
29764: CALL_OW 263
29768: PUSH
29769: LD_INT 2
29771: EQUAL
29772: IFFALSE 29823
// begin j := IsControledBy ( i ) ;
29774: LD_ADDR_VAR 0 7
29778: PUSH
29779: LD_VAR 0 6
29783: PPUSH
29784: CALL_OW 312
29788: ST_TO_ADDR
// if j then
29789: LD_VAR 0 7
29793: IFFALSE 29823
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29795: LD_ADDR_VAR 0 10
29799: PUSH
29800: LD_VAR 0 10
29804: PUSH
29805: LD_VAR 0 7
29809: PPUSH
29810: LD_INT 3
29812: PPUSH
29813: CALL_OW 259
29817: PUSH
29818: LD_INT 3
29820: MUL
29821: MUL
29822: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29823: LD_VAR 0 6
29827: PPUSH
29828: CALL_OW 264
29832: PUSH
29833: LD_INT 5
29835: PUSH
29836: LD_INT 6
29838: PUSH
29839: LD_INT 46
29841: PUSH
29842: LD_INT 44
29844: PUSH
29845: LD_INT 47
29847: PUSH
29848: LD_INT 45
29850: PUSH
29851: LD_INT 28
29853: PUSH
29854: LD_INT 7
29856: PUSH
29857: LD_INT 27
29859: PUSH
29860: LD_INT 29
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: IN
29875: PUSH
29876: LD_VAR 0 1
29880: PPUSH
29881: LD_INT 52
29883: PPUSH
29884: CALL_OW 321
29888: PUSH
29889: LD_INT 2
29891: EQUAL
29892: AND
29893: IFFALSE 29910
// bpoints := bpoints * 1.2 ;
29895: LD_ADDR_VAR 0 10
29899: PUSH
29900: LD_VAR 0 10
29904: PUSH
29905: LD_REAL  1.20000000000000E+0000
29908: MUL
29909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29910: LD_VAR 0 6
29914: PPUSH
29915: CALL_OW 264
29919: PUSH
29920: LD_INT 6
29922: PUSH
29923: LD_INT 46
29925: PUSH
29926: LD_INT 47
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: LIST
29933: IN
29934: IFFALSE 29951
// bpoints := bpoints * 1.2 ;
29936: LD_ADDR_VAR 0 10
29940: PUSH
29941: LD_VAR 0 10
29945: PUSH
29946: LD_REAL  1.20000000000000E+0000
29949: MUL
29950: ST_TO_ADDR
// end ; unit_building :
29951: GO 29965
29953: LD_INT 3
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 29964
29961: POP
// ; end ;
29962: GO 29965
29964: POP
// for j = 1 to 3 do
29965: LD_ADDR_VAR 0 7
29969: PUSH
29970: DOUBLE
29971: LD_INT 1
29973: DEC
29974: ST_TO_ADDR
29975: LD_INT 3
29977: PUSH
29978: FOR_TO
29979: IFFALSE 30032
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29981: LD_ADDR_VAR 0 5
29985: PUSH
29986: LD_VAR 0 5
29990: PPUSH
29991: LD_VAR 0 7
29995: PPUSH
29996: LD_VAR 0 5
30000: PUSH
30001: LD_VAR 0 7
30005: ARRAY
30006: PUSH
30007: LD_VAR 0 9
30011: PUSH
30012: LD_VAR 0 7
30016: ARRAY
30017: PUSH
30018: LD_VAR 0 10
30022: MUL
30023: PLUS
30024: PPUSH
30025: CALL_OW 1
30029: ST_TO_ADDR
30030: GO 29978
30032: POP
30033: POP
// end ;
30034: GO 28511
30036: POP
30037: POP
// result := Replace ( result , 4 , tmp ) ;
30038: LD_ADDR_VAR 0 5
30042: PUSH
30043: LD_VAR 0 5
30047: PPUSH
30048: LD_INT 4
30050: PPUSH
30051: LD_VAR 0 8
30055: PPUSH
30056: CALL_OW 1
30060: ST_TO_ADDR
// end ;
30061: LD_VAR 0 5
30065: RET
// export function DangerAtRange ( unit , range ) ; begin
30066: LD_INT 0
30068: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30069: LD_ADDR_VAR 0 3
30073: PUSH
30074: LD_VAR 0 1
30078: PPUSH
30079: CALL_OW 255
30083: PPUSH
30084: LD_VAR 0 1
30088: PPUSH
30089: CALL_OW 250
30093: PPUSH
30094: LD_VAR 0 1
30098: PPUSH
30099: CALL_OW 251
30103: PPUSH
30104: LD_VAR 0 2
30108: PPUSH
30109: CALL 28363 0 4
30113: ST_TO_ADDR
// end ;
30114: LD_VAR 0 3
30118: RET
// export function DangerInArea ( side , area ) ; begin
30119: LD_INT 0
30121: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30122: LD_ADDR_VAR 0 3
30126: PUSH
30127: LD_VAR 0 2
30131: PPUSH
30132: LD_INT 81
30134: PUSH
30135: LD_VAR 0 1
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 70
30148: ST_TO_ADDR
// end ;
30149: LD_VAR 0 3
30153: RET
// export function IsExtension ( b ) ; begin
30154: LD_INT 0
30156: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30157: LD_ADDR_VAR 0 2
30161: PUSH
30162: LD_VAR 0 1
30166: PUSH
30167: LD_INT 23
30169: PUSH
30170: LD_INT 20
30172: PUSH
30173: LD_INT 22
30175: PUSH
30176: LD_INT 17
30178: PUSH
30179: LD_INT 24
30181: PUSH
30182: LD_INT 21
30184: PUSH
30185: LD_INT 19
30187: PUSH
30188: LD_INT 16
30190: PUSH
30191: LD_INT 25
30193: PUSH
30194: LD_INT 18
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: IN
30209: ST_TO_ADDR
// end ;
30210: LD_VAR 0 2
30214: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30215: LD_INT 0
30217: PPUSH
30218: PPUSH
30219: PPUSH
// result := [ ] ;
30220: LD_ADDR_VAR 0 4
30224: PUSH
30225: EMPTY
30226: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30227: LD_ADDR_VAR 0 5
30231: PUSH
30232: LD_VAR 0 2
30236: PPUSH
30237: LD_INT 21
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 70
30251: ST_TO_ADDR
// if not tmp then
30252: LD_VAR 0 5
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 30325
// if checkLink then
30261: LD_VAR 0 3
30265: IFFALSE 30315
// begin for i in tmp do
30267: LD_ADDR_VAR 0 6
30271: PUSH
30272: LD_VAR 0 5
30276: PUSH
30277: FOR_IN
30278: IFFALSE 30313
// if GetBase ( i ) <> base then
30280: LD_VAR 0 6
30284: PPUSH
30285: CALL_OW 274
30289: PUSH
30290: LD_VAR 0 1
30294: NONEQUAL
30295: IFFALSE 30311
// ComLinkToBase ( base , i ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: LD_VAR 0 6
30306: PPUSH
30307: CALL_OW 169
30311: GO 30277
30313: POP
30314: POP
// end ; result := tmp ;
30315: LD_ADDR_VAR 0 4
30319: PUSH
30320: LD_VAR 0 5
30324: ST_TO_ADDR
// end ;
30325: LD_VAR 0 4
30329: RET
// export function ComComplete ( units , b ) ; var i ; begin
30330: LD_INT 0
30332: PPUSH
30333: PPUSH
// if not units then
30334: LD_VAR 0 1
30338: NOT
30339: IFFALSE 30343
// exit ;
30341: GO 30433
// for i in units do
30343: LD_ADDR_VAR 0 4
30347: PUSH
30348: LD_VAR 0 1
30352: PUSH
30353: FOR_IN
30354: IFFALSE 30431
// if BuildingStatus ( b ) = bs_build then
30356: LD_VAR 0 2
30360: PPUSH
30361: CALL_OW 461
30365: PUSH
30366: LD_INT 1
30368: EQUAL
30369: IFFALSE 30429
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30371: LD_VAR 0 4
30375: PPUSH
30376: LD_STRING h
30378: PUSH
30379: LD_VAR 0 2
30383: PPUSH
30384: CALL_OW 250
30388: PUSH
30389: LD_VAR 0 2
30393: PPUSH
30394: CALL_OW 251
30398: PUSH
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: EMPTY
30423: LIST
30424: PPUSH
30425: CALL_OW 446
30429: GO 30353
30431: POP
30432: POP
// end ;
30433: LD_VAR 0 3
30437: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30438: LD_INT 0
30440: PPUSH
30441: PPUSH
30442: PPUSH
30443: PPUSH
30444: PPUSH
30445: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30446: LD_VAR 0 1
30450: NOT
30451: PUSH
30452: LD_VAR 0 1
30456: PPUSH
30457: CALL_OW 263
30461: PUSH
30462: LD_INT 2
30464: NONEQUAL
30465: OR
30466: IFFALSE 30470
// exit ;
30468: GO 30786
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30470: LD_ADDR_VAR 0 6
30474: PUSH
30475: LD_INT 22
30477: PUSH
30478: LD_VAR 0 1
30482: PPUSH
30483: CALL_OW 255
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: LD_INT 30
30497: PUSH
30498: LD_INT 36
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 34
30507: PUSH
30508: LD_INT 31
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 69
30528: ST_TO_ADDR
// if not tmp then
30529: LD_VAR 0 6
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30786
// result := [ ] ;
30538: LD_ADDR_VAR 0 2
30542: PUSH
30543: EMPTY
30544: ST_TO_ADDR
// for i in tmp do
30545: LD_ADDR_VAR 0 3
30549: PUSH
30550: LD_VAR 0 6
30554: PUSH
30555: FOR_IN
30556: IFFALSE 30627
// begin t := UnitsInside ( i ) ;
30558: LD_ADDR_VAR 0 4
30562: PUSH
30563: LD_VAR 0 3
30567: PPUSH
30568: CALL_OW 313
30572: ST_TO_ADDR
// if t then
30573: LD_VAR 0 4
30577: IFFALSE 30625
// for j in t do
30579: LD_ADDR_VAR 0 7
30583: PUSH
30584: LD_VAR 0 4
30588: PUSH
30589: FOR_IN
30590: IFFALSE 30623
// result := Replace ( result , result + 1 , j ) ;
30592: LD_ADDR_VAR 0 2
30596: PUSH
30597: LD_VAR 0 2
30601: PPUSH
30602: LD_VAR 0 2
30606: PUSH
30607: LD_INT 1
30609: PLUS
30610: PPUSH
30611: LD_VAR 0 7
30615: PPUSH
30616: CALL_OW 1
30620: ST_TO_ADDR
30621: GO 30589
30623: POP
30624: POP
// end ;
30625: GO 30555
30627: POP
30628: POP
// if not result then
30629: LD_VAR 0 2
30633: NOT
30634: IFFALSE 30638
// exit ;
30636: GO 30786
// mech := result [ 1 ] ;
30638: LD_ADDR_VAR 0 5
30642: PUSH
30643: LD_VAR 0 2
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: ST_TO_ADDR
// if result > 1 then
30652: LD_VAR 0 2
30656: PUSH
30657: LD_INT 1
30659: GREATER
30660: IFFALSE 30772
// begin for i = 2 to result do
30662: LD_ADDR_VAR 0 3
30666: PUSH
30667: DOUBLE
30668: LD_INT 2
30670: DEC
30671: ST_TO_ADDR
30672: LD_VAR 0 2
30676: PUSH
30677: FOR_TO
30678: IFFALSE 30770
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30680: LD_ADDR_VAR 0 4
30684: PUSH
30685: LD_VAR 0 2
30689: PUSH
30690: LD_VAR 0 3
30694: ARRAY
30695: PPUSH
30696: LD_INT 3
30698: PPUSH
30699: CALL_OW 259
30703: PUSH
30704: LD_VAR 0 2
30708: PUSH
30709: LD_VAR 0 3
30713: ARRAY
30714: PPUSH
30715: CALL_OW 432
30719: MINUS
30720: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30721: LD_VAR 0 4
30725: PUSH
30726: LD_VAR 0 5
30730: PPUSH
30731: LD_INT 3
30733: PPUSH
30734: CALL_OW 259
30738: PUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL_OW 432
30748: MINUS
30749: GREATEREQUAL
30750: IFFALSE 30768
// mech := result [ i ] ;
30752: LD_ADDR_VAR 0 5
30756: PUSH
30757: LD_VAR 0 2
30761: PUSH
30762: LD_VAR 0 3
30766: ARRAY
30767: ST_TO_ADDR
// end ;
30768: GO 30677
30770: POP
30771: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30772: LD_VAR 0 1
30776: PPUSH
30777: LD_VAR 0 5
30781: PPUSH
30782: CALL_OW 135
// end ;
30786: LD_VAR 0 2
30790: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30791: LD_INT 0
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
30804: PPUSH
30805: PPUSH
// result := [ ] ;
30806: LD_ADDR_VAR 0 7
30810: PUSH
30811: EMPTY
30812: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30813: LD_VAR 0 1
30817: PPUSH
30818: CALL_OW 266
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: IN
30833: NOT
30834: IFFALSE 30838
// exit ;
30836: GO 32472
// if name then
30838: LD_VAR 0 3
30842: IFFALSE 30858
// SetBName ( base_dep , name ) ;
30844: LD_VAR 0 1
30848: PPUSH
30849: LD_VAR 0 3
30853: PPUSH
30854: CALL_OW 500
// base := GetBase ( base_dep ) ;
30858: LD_ADDR_VAR 0 15
30862: PUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 274
30872: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30873: LD_ADDR_VAR 0 16
30877: PUSH
30878: LD_VAR 0 1
30882: PPUSH
30883: CALL_OW 255
30887: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30888: LD_ADDR_VAR 0 17
30892: PUSH
30893: LD_VAR 0 1
30897: PPUSH
30898: CALL_OW 248
30902: ST_TO_ADDR
// if sources then
30903: LD_VAR 0 5
30907: IFFALSE 30954
// for i = 1 to 3 do
30909: LD_ADDR_VAR 0 8
30913: PUSH
30914: DOUBLE
30915: LD_INT 1
30917: DEC
30918: ST_TO_ADDR
30919: LD_INT 3
30921: PUSH
30922: FOR_TO
30923: IFFALSE 30952
// AddResourceType ( base , i , sources [ i ] ) ;
30925: LD_VAR 0 15
30929: PPUSH
30930: LD_VAR 0 8
30934: PPUSH
30935: LD_VAR 0 5
30939: PUSH
30940: LD_VAR 0 8
30944: ARRAY
30945: PPUSH
30946: CALL_OW 276
30950: GO 30922
30952: POP
30953: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30954: LD_ADDR_VAR 0 18
30958: PUSH
30959: LD_VAR 0 15
30963: PPUSH
30964: LD_VAR 0 2
30968: PPUSH
30969: LD_INT 1
30971: PPUSH
30972: CALL 30215 0 3
30976: ST_TO_ADDR
// InitHc ;
30977: CALL_OW 19
// InitUc ;
30981: CALL_OW 18
// uc_side := side ;
30985: LD_ADDR_OWVAR 20
30989: PUSH
30990: LD_VAR 0 16
30994: ST_TO_ADDR
// uc_nation := nation ;
30995: LD_ADDR_OWVAR 21
30999: PUSH
31000: LD_VAR 0 17
31004: ST_TO_ADDR
// if buildings then
31005: LD_VAR 0 18
31009: IFFALSE 32331
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31011: LD_ADDR_VAR 0 19
31015: PUSH
31016: LD_VAR 0 18
31020: PPUSH
31021: LD_INT 2
31023: PUSH
31024: LD_INT 30
31026: PUSH
31027: LD_INT 29
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 30
31036: PUSH
31037: LD_INT 30
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: PPUSH
31049: CALL_OW 72
31053: ST_TO_ADDR
// if tmp then
31054: LD_VAR 0 19
31058: IFFALSE 31106
// for i in tmp do
31060: LD_ADDR_VAR 0 8
31064: PUSH
31065: LD_VAR 0 19
31069: PUSH
31070: FOR_IN
31071: IFFALSE 31104
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31073: LD_VAR 0 8
31077: PPUSH
31078: CALL_OW 250
31082: PPUSH
31083: LD_VAR 0 8
31087: PPUSH
31088: CALL_OW 251
31092: PPUSH
31093: LD_VAR 0 16
31097: PPUSH
31098: CALL_OW 441
31102: GO 31070
31104: POP
31105: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31106: LD_VAR 0 18
31110: PPUSH
31111: LD_INT 2
31113: PUSH
31114: LD_INT 30
31116: PUSH
31117: LD_INT 32
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 30
31126: PUSH
31127: LD_INT 33
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: LIST
31138: PPUSH
31139: CALL_OW 72
31143: IFFALSE 31231
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31145: LD_ADDR_VAR 0 8
31149: PUSH
31150: LD_VAR 0 18
31154: PPUSH
31155: LD_INT 2
31157: PUSH
31158: LD_INT 30
31160: PUSH
31161: LD_INT 32
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 30
31170: PUSH
31171: LD_INT 33
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: PPUSH
31183: CALL_OW 72
31187: PUSH
31188: FOR_IN
31189: IFFALSE 31229
// begin if not GetBWeapon ( i ) then
31191: LD_VAR 0 8
31195: PPUSH
31196: CALL_OW 269
31200: NOT
31201: IFFALSE 31227
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31203: LD_VAR 0 8
31207: PPUSH
31208: LD_VAR 0 8
31212: PPUSH
31213: LD_VAR 0 2
31217: PPUSH
31218: CALL 32477 0 2
31222: PPUSH
31223: CALL_OW 431
// end ;
31227: GO 31188
31229: POP
31230: POP
// end ; for i = 1 to personel do
31231: LD_ADDR_VAR 0 8
31235: PUSH
31236: DOUBLE
31237: LD_INT 1
31239: DEC
31240: ST_TO_ADDR
31241: LD_VAR 0 6
31245: PUSH
31246: FOR_TO
31247: IFFALSE 32311
// begin if i > 4 then
31249: LD_VAR 0 8
31253: PUSH
31254: LD_INT 4
31256: GREATER
31257: IFFALSE 31261
// break ;
31259: GO 32311
// case i of 1 :
31261: LD_VAR 0 8
31265: PUSH
31266: LD_INT 1
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31274
31272: GO 31354
31274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31275: LD_ADDR_VAR 0 12
31279: PUSH
31280: LD_VAR 0 18
31284: PPUSH
31285: LD_INT 22
31287: PUSH
31288: LD_VAR 0 16
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 58
31299: PUSH
31300: EMPTY
31301: LIST
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_INT 32
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 30
31318: PUSH
31319: LD_INT 4
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 30
31328: PUSH
31329: LD_INT 5
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: PPUSH
31347: CALL_OW 72
31351: ST_TO_ADDR
31352: GO 31576
31354: LD_INT 2
31356: DOUBLE
31357: EQUAL
31358: IFTRUE 31362
31360: GO 31424
31362: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31363: LD_ADDR_VAR 0 12
31367: PUSH
31368: LD_VAR 0 18
31372: PPUSH
31373: LD_INT 22
31375: PUSH
31376: LD_VAR 0 16
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 30
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 30
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PPUSH
31417: CALL_OW 72
31421: ST_TO_ADDR
31422: GO 31576
31424: LD_INT 3
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31494
31432: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31433: LD_ADDR_VAR 0 12
31437: PUSH
31438: LD_VAR 0 18
31442: PPUSH
31443: LD_INT 22
31445: PUSH
31446: LD_VAR 0 16
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: LD_INT 30
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 30
31470: PUSH
31471: LD_INT 3
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PPUSH
31487: CALL_OW 72
31491: ST_TO_ADDR
31492: GO 31576
31494: LD_INT 4
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31575
31502: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31503: LD_ADDR_VAR 0 12
31507: PUSH
31508: LD_VAR 0 18
31512: PPUSH
31513: LD_INT 22
31515: PUSH
31516: LD_VAR 0 16
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: LD_INT 30
31530: PUSH
31531: LD_INT 6
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 30
31540: PUSH
31541: LD_INT 7
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 30
31550: PUSH
31551: LD_INT 8
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 72
31572: ST_TO_ADDR
31573: GO 31576
31575: POP
// if i = 1 then
31576: LD_VAR 0 8
31580: PUSH
31581: LD_INT 1
31583: EQUAL
31584: IFFALSE 31695
// begin tmp := [ ] ;
31586: LD_ADDR_VAR 0 19
31590: PUSH
31591: EMPTY
31592: ST_TO_ADDR
// for j in f do
31593: LD_ADDR_VAR 0 9
31597: PUSH
31598: LD_VAR 0 12
31602: PUSH
31603: FOR_IN
31604: IFFALSE 31677
// if GetBType ( j ) = b_bunker then
31606: LD_VAR 0 9
31610: PPUSH
31611: CALL_OW 266
31615: PUSH
31616: LD_INT 32
31618: EQUAL
31619: IFFALSE 31646
// tmp := Insert ( tmp , 1 , j ) else
31621: LD_ADDR_VAR 0 19
31625: PUSH
31626: LD_VAR 0 19
31630: PPUSH
31631: LD_INT 1
31633: PPUSH
31634: LD_VAR 0 9
31638: PPUSH
31639: CALL_OW 2
31643: ST_TO_ADDR
31644: GO 31675
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31646: LD_ADDR_VAR 0 19
31650: PUSH
31651: LD_VAR 0 19
31655: PPUSH
31656: LD_VAR 0 19
31660: PUSH
31661: LD_INT 1
31663: PLUS
31664: PPUSH
31665: LD_VAR 0 9
31669: PPUSH
31670: CALL_OW 2
31674: ST_TO_ADDR
31675: GO 31603
31677: POP
31678: POP
// if tmp then
31679: LD_VAR 0 19
31683: IFFALSE 31695
// f := tmp ;
31685: LD_ADDR_VAR 0 12
31689: PUSH
31690: LD_VAR 0 19
31694: ST_TO_ADDR
// end ; x := personel [ i ] ;
31695: LD_ADDR_VAR 0 13
31699: PUSH
31700: LD_VAR 0 6
31704: PUSH
31705: LD_VAR 0 8
31709: ARRAY
31710: ST_TO_ADDR
// if x = - 1 then
31711: LD_VAR 0 13
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: EQUAL
31720: IFFALSE 31929
// begin for j in f do
31722: LD_ADDR_VAR 0 9
31726: PUSH
31727: LD_VAR 0 12
31731: PUSH
31732: FOR_IN
31733: IFFALSE 31925
// repeat InitHc ;
31735: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31739: LD_VAR 0 9
31743: PPUSH
31744: CALL_OW 266
31748: PUSH
31749: LD_INT 5
31751: EQUAL
31752: IFFALSE 31822
// begin if UnitsInside ( j ) < 3 then
31754: LD_VAR 0 9
31758: PPUSH
31759: CALL_OW 313
31763: PUSH
31764: LD_INT 3
31766: LESS
31767: IFFALSE 31803
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31769: LD_INT 0
31771: PPUSH
31772: LD_INT 5
31774: PUSH
31775: LD_INT 8
31777: PUSH
31778: LD_INT 9
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: PUSH
31786: LD_VAR 0 17
31790: ARRAY
31791: PPUSH
31792: LD_VAR 0 4
31796: PPUSH
31797: CALL_OW 380
31801: GO 31820
// PrepareHuman ( false , i , skill ) ;
31803: LD_INT 0
31805: PPUSH
31806: LD_VAR 0 8
31810: PPUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: CALL_OW 380
// end else
31820: GO 31839
// PrepareHuman ( false , i , skill ) ;
31822: LD_INT 0
31824: PPUSH
31825: LD_VAR 0 8
31829: PPUSH
31830: LD_VAR 0 4
31834: PPUSH
31835: CALL_OW 380
// un := CreateHuman ;
31839: LD_ADDR_VAR 0 14
31843: PUSH
31844: CALL_OW 44
31848: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31849: LD_ADDR_VAR 0 7
31853: PUSH
31854: LD_VAR 0 7
31858: PPUSH
31859: LD_INT 1
31861: PPUSH
31862: LD_VAR 0 14
31866: PPUSH
31867: CALL_OW 2
31871: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31872: LD_VAR 0 14
31876: PPUSH
31877: LD_VAR 0 9
31881: PPUSH
31882: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31886: LD_VAR 0 9
31890: PPUSH
31891: CALL_OW 313
31895: PUSH
31896: LD_INT 6
31898: EQUAL
31899: PUSH
31900: LD_VAR 0 9
31904: PPUSH
31905: CALL_OW 266
31909: PUSH
31910: LD_INT 32
31912: PUSH
31913: LD_INT 31
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: IN
31920: OR
31921: IFFALSE 31735
31923: GO 31732
31925: POP
31926: POP
// end else
31927: GO 32309
// for j = 1 to x do
31929: LD_ADDR_VAR 0 9
31933: PUSH
31934: DOUBLE
31935: LD_INT 1
31937: DEC
31938: ST_TO_ADDR
31939: LD_VAR 0 13
31943: PUSH
31944: FOR_TO
31945: IFFALSE 32307
// begin InitHc ;
31947: CALL_OW 19
// if not f then
31951: LD_VAR 0 12
31955: NOT
31956: IFFALSE 32045
// begin PrepareHuman ( false , i , skill ) ;
31958: LD_INT 0
31960: PPUSH
31961: LD_VAR 0 8
31965: PPUSH
31966: LD_VAR 0 4
31970: PPUSH
31971: CALL_OW 380
// un := CreateHuman ;
31975: LD_ADDR_VAR 0 14
31979: PUSH
31980: CALL_OW 44
31984: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31985: LD_ADDR_VAR 0 7
31989: PUSH
31990: LD_VAR 0 7
31994: PPUSH
31995: LD_INT 1
31997: PPUSH
31998: LD_VAR 0 14
32002: PPUSH
32003: CALL_OW 2
32007: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32008: LD_VAR 0 14
32012: PPUSH
32013: LD_VAR 0 1
32017: PPUSH
32018: CALL_OW 250
32022: PPUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 251
32032: PPUSH
32033: LD_INT 10
32035: PPUSH
32036: LD_INT 0
32038: PPUSH
32039: CALL_OW 50
// continue ;
32043: GO 31944
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32045: LD_VAR 0 12
32049: PUSH
32050: LD_INT 1
32052: ARRAY
32053: PPUSH
32054: CALL_OW 313
32058: PUSH
32059: LD_VAR 0 12
32063: PUSH
32064: LD_INT 1
32066: ARRAY
32067: PPUSH
32068: CALL_OW 266
32072: PUSH
32073: LD_INT 32
32075: PUSH
32076: LD_INT 31
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: IN
32083: AND
32084: PUSH
32085: LD_VAR 0 12
32089: PUSH
32090: LD_INT 1
32092: ARRAY
32093: PPUSH
32094: CALL_OW 313
32098: PUSH
32099: LD_INT 6
32101: EQUAL
32102: OR
32103: IFFALSE 32123
// f := Delete ( f , 1 ) ;
32105: LD_ADDR_VAR 0 12
32109: PUSH
32110: LD_VAR 0 12
32114: PPUSH
32115: LD_INT 1
32117: PPUSH
32118: CALL_OW 3
32122: ST_TO_ADDR
// if not f then
32123: LD_VAR 0 12
32127: NOT
32128: IFFALSE 32146
// begin x := x + 2 ;
32130: LD_ADDR_VAR 0 13
32134: PUSH
32135: LD_VAR 0 13
32139: PUSH
32140: LD_INT 2
32142: PLUS
32143: ST_TO_ADDR
// continue ;
32144: GO 31944
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32146: LD_VAR 0 12
32150: PUSH
32151: LD_INT 1
32153: ARRAY
32154: PPUSH
32155: CALL_OW 266
32159: PUSH
32160: LD_INT 5
32162: EQUAL
32163: IFFALSE 32237
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32165: LD_VAR 0 12
32169: PUSH
32170: LD_INT 1
32172: ARRAY
32173: PPUSH
32174: CALL_OW 313
32178: PUSH
32179: LD_INT 3
32181: LESS
32182: IFFALSE 32218
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32184: LD_INT 0
32186: PPUSH
32187: LD_INT 5
32189: PUSH
32190: LD_INT 8
32192: PUSH
32193: LD_INT 9
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: PUSH
32201: LD_VAR 0 17
32205: ARRAY
32206: PPUSH
32207: LD_VAR 0 4
32211: PPUSH
32212: CALL_OW 380
32216: GO 32235
// PrepareHuman ( false , i , skill ) ;
32218: LD_INT 0
32220: PPUSH
32221: LD_VAR 0 8
32225: PPUSH
32226: LD_VAR 0 4
32230: PPUSH
32231: CALL_OW 380
// end else
32235: GO 32254
// PrepareHuman ( false , i , skill ) ;
32237: LD_INT 0
32239: PPUSH
32240: LD_VAR 0 8
32244: PPUSH
32245: LD_VAR 0 4
32249: PPUSH
32250: CALL_OW 380
// un := CreateHuman ;
32254: LD_ADDR_VAR 0 14
32258: PUSH
32259: CALL_OW 44
32263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32264: LD_ADDR_VAR 0 7
32268: PUSH
32269: LD_VAR 0 7
32273: PPUSH
32274: LD_INT 1
32276: PPUSH
32277: LD_VAR 0 14
32281: PPUSH
32282: CALL_OW 2
32286: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32287: LD_VAR 0 14
32291: PPUSH
32292: LD_VAR 0 12
32296: PUSH
32297: LD_INT 1
32299: ARRAY
32300: PPUSH
32301: CALL_OW 52
// end ;
32305: GO 31944
32307: POP
32308: POP
// end ;
32309: GO 31246
32311: POP
32312: POP
// result := result ^ buildings ;
32313: LD_ADDR_VAR 0 7
32317: PUSH
32318: LD_VAR 0 7
32322: PUSH
32323: LD_VAR 0 18
32327: ADD
32328: ST_TO_ADDR
// end else
32329: GO 32472
// begin for i = 1 to personel do
32331: LD_ADDR_VAR 0 8
32335: PUSH
32336: DOUBLE
32337: LD_INT 1
32339: DEC
32340: ST_TO_ADDR
32341: LD_VAR 0 6
32345: PUSH
32346: FOR_TO
32347: IFFALSE 32470
// begin if i > 4 then
32349: LD_VAR 0 8
32353: PUSH
32354: LD_INT 4
32356: GREATER
32357: IFFALSE 32361
// break ;
32359: GO 32470
// x := personel [ i ] ;
32361: LD_ADDR_VAR 0 13
32365: PUSH
32366: LD_VAR 0 6
32370: PUSH
32371: LD_VAR 0 8
32375: ARRAY
32376: ST_TO_ADDR
// if x = - 1 then
32377: LD_VAR 0 13
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: EQUAL
32386: IFFALSE 32390
// continue ;
32388: GO 32346
// PrepareHuman ( false , i , skill ) ;
32390: LD_INT 0
32392: PPUSH
32393: LD_VAR 0 8
32397: PPUSH
32398: LD_VAR 0 4
32402: PPUSH
32403: CALL_OW 380
// un := CreateHuman ;
32407: LD_ADDR_VAR 0 14
32411: PUSH
32412: CALL_OW 44
32416: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32417: LD_VAR 0 14
32421: PPUSH
32422: LD_VAR 0 1
32426: PPUSH
32427: CALL_OW 250
32431: PPUSH
32432: LD_VAR 0 1
32436: PPUSH
32437: CALL_OW 251
32441: PPUSH
32442: LD_INT 10
32444: PPUSH
32445: LD_INT 0
32447: PPUSH
32448: CALL_OW 50
// result := result ^ un ;
32452: LD_ADDR_VAR 0 7
32456: PUSH
32457: LD_VAR 0 7
32461: PUSH
32462: LD_VAR 0 14
32466: ADD
32467: ST_TO_ADDR
// end ;
32468: GO 32346
32470: POP
32471: POP
// end ; end ;
32472: LD_VAR 0 7
32476: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32477: LD_INT 0
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
// result := false ;
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_INT 0
32502: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32503: LD_VAR 0 1
32507: NOT
32508: PUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 266
32518: PUSH
32519: LD_INT 32
32521: PUSH
32522: LD_INT 33
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: IN
32529: NOT
32530: OR
32531: IFFALSE 32535
// exit ;
32533: GO 33644
// nat := GetNation ( tower ) ;
32535: LD_ADDR_VAR 0 12
32539: PUSH
32540: LD_VAR 0 1
32544: PPUSH
32545: CALL_OW 248
32549: ST_TO_ADDR
// side := GetSide ( tower ) ;
32550: LD_ADDR_VAR 0 16
32554: PUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: CALL_OW 255
32564: ST_TO_ADDR
// x := GetX ( tower ) ;
32565: LD_ADDR_VAR 0 10
32569: PUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 250
32579: ST_TO_ADDR
// y := GetY ( tower ) ;
32580: LD_ADDR_VAR 0 11
32584: PUSH
32585: LD_VAR 0 1
32589: PPUSH
32590: CALL_OW 251
32594: ST_TO_ADDR
// if not x or not y then
32595: LD_VAR 0 10
32599: NOT
32600: PUSH
32601: LD_VAR 0 11
32605: NOT
32606: OR
32607: IFFALSE 32611
// exit ;
32609: GO 33644
// weapon := 0 ;
32611: LD_ADDR_VAR 0 18
32615: PUSH
32616: LD_INT 0
32618: ST_TO_ADDR
// fac_list := [ ] ;
32619: LD_ADDR_VAR 0 17
32623: PUSH
32624: EMPTY
32625: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32626: LD_ADDR_VAR 0 6
32630: PUSH
32631: LD_VAR 0 1
32635: PPUSH
32636: CALL_OW 274
32640: PPUSH
32641: LD_VAR 0 2
32645: PPUSH
32646: LD_INT 0
32648: PPUSH
32649: CALL 30215 0 3
32653: PPUSH
32654: LD_INT 30
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PPUSH
32664: CALL_OW 72
32668: ST_TO_ADDR
// if not factories then
32669: LD_VAR 0 6
32673: NOT
32674: IFFALSE 32678
// exit ;
32676: GO 33644
// for i in factories do
32678: LD_ADDR_VAR 0 8
32682: PUSH
32683: LD_VAR 0 6
32687: PUSH
32688: FOR_IN
32689: IFFALSE 32714
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32691: LD_ADDR_VAR 0 17
32695: PUSH
32696: LD_VAR 0 17
32700: PUSH
32701: LD_VAR 0 8
32705: PPUSH
32706: CALL_OW 478
32710: UNION
32711: ST_TO_ADDR
32712: GO 32688
32714: POP
32715: POP
// if not fac_list then
32716: LD_VAR 0 17
32720: NOT
32721: IFFALSE 32725
// exit ;
32723: GO 33644
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32725: LD_ADDR_VAR 0 5
32729: PUSH
32730: LD_INT 4
32732: PUSH
32733: LD_INT 5
32735: PUSH
32736: LD_INT 9
32738: PUSH
32739: LD_INT 10
32741: PUSH
32742: LD_INT 6
32744: PUSH
32745: LD_INT 7
32747: PUSH
32748: LD_INT 11
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 27
32762: PUSH
32763: LD_INT 28
32765: PUSH
32766: LD_INT 26
32768: PUSH
32769: LD_INT 30
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 43
32780: PUSH
32781: LD_INT 44
32783: PUSH
32784: LD_INT 46
32786: PUSH
32787: LD_INT 45
32789: PUSH
32790: LD_INT 47
32792: PUSH
32793: LD_INT 49
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: PUSH
32809: LD_VAR 0 12
32813: ARRAY
32814: ST_TO_ADDR
// list := list isect fac_list ;
32815: LD_ADDR_VAR 0 5
32819: PUSH
32820: LD_VAR 0 5
32824: PUSH
32825: LD_VAR 0 17
32829: ISECT
32830: ST_TO_ADDR
// if not list then
32831: LD_VAR 0 5
32835: NOT
32836: IFFALSE 32840
// exit ;
32838: GO 33644
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32840: LD_VAR 0 12
32844: PUSH
32845: LD_INT 3
32847: EQUAL
32848: PUSH
32849: LD_INT 49
32851: PUSH
32852: LD_VAR 0 5
32856: IN
32857: AND
32858: PUSH
32859: LD_INT 31
32861: PPUSH
32862: LD_VAR 0 16
32866: PPUSH
32867: CALL_OW 321
32871: PUSH
32872: LD_INT 2
32874: EQUAL
32875: AND
32876: IFFALSE 32936
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32878: LD_INT 22
32880: PUSH
32881: LD_VAR 0 16
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 35
32892: PUSH
32893: LD_INT 49
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 91
32902: PUSH
32903: LD_VAR 0 1
32907: PUSH
32908: LD_INT 10
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: PPUSH
32921: CALL_OW 69
32925: NOT
32926: IFFALSE 32936
// weapon := ru_time_lapser ;
32928: LD_ADDR_VAR 0 18
32932: PUSH
32933: LD_INT 49
32935: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32936: LD_VAR 0 12
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: IN
32951: PUSH
32952: LD_INT 11
32954: PUSH
32955: LD_VAR 0 5
32959: IN
32960: PUSH
32961: LD_INT 30
32963: PUSH
32964: LD_VAR 0 5
32968: IN
32969: OR
32970: AND
32971: PUSH
32972: LD_INT 6
32974: PPUSH
32975: LD_VAR 0 16
32979: PPUSH
32980: CALL_OW 321
32984: PUSH
32985: LD_INT 2
32987: EQUAL
32988: AND
32989: IFFALSE 33154
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32991: LD_INT 22
32993: PUSH
32994: LD_VAR 0 16
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 35
33008: PUSH
33009: LD_INT 11
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 35
33018: PUSH
33019: LD_INT 30
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 91
33033: PUSH
33034: LD_VAR 0 1
33038: PUSH
33039: LD_INT 18
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: PPUSH
33052: CALL_OW 69
33056: NOT
33057: PUSH
33058: LD_INT 22
33060: PUSH
33061: LD_VAR 0 16
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 30
33075: PUSH
33076: LD_INT 32
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 30
33085: PUSH
33086: LD_INT 33
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 91
33100: PUSH
33101: LD_VAR 0 1
33105: PUSH
33106: LD_INT 12
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: PPUSH
33122: CALL_OW 69
33126: PUSH
33127: LD_INT 2
33129: GREATER
33130: AND
33131: IFFALSE 33154
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33133: LD_ADDR_VAR 0 18
33137: PUSH
33138: LD_INT 11
33140: PUSH
33141: LD_INT 30
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_VAR 0 12
33152: ARRAY
33153: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33154: LD_VAR 0 18
33158: NOT
33159: PUSH
33160: LD_INT 40
33162: PPUSH
33163: LD_VAR 0 16
33167: PPUSH
33168: CALL_OW 321
33172: PUSH
33173: LD_INT 2
33175: EQUAL
33176: AND
33177: PUSH
33178: LD_INT 7
33180: PUSH
33181: LD_VAR 0 5
33185: IN
33186: PUSH
33187: LD_INT 28
33189: PUSH
33190: LD_VAR 0 5
33194: IN
33195: OR
33196: PUSH
33197: LD_INT 45
33199: PUSH
33200: LD_VAR 0 5
33204: IN
33205: OR
33206: AND
33207: IFFALSE 33461
// begin hex := GetHexInfo ( x , y ) ;
33209: LD_ADDR_VAR 0 4
33213: PUSH
33214: LD_VAR 0 10
33218: PPUSH
33219: LD_VAR 0 11
33223: PPUSH
33224: CALL_OW 546
33228: ST_TO_ADDR
// if hex [ 1 ] then
33229: LD_VAR 0 4
33233: PUSH
33234: LD_INT 1
33236: ARRAY
33237: IFFALSE 33241
// exit ;
33239: GO 33644
// height := hex [ 2 ] ;
33241: LD_ADDR_VAR 0 15
33245: PUSH
33246: LD_VAR 0 4
33250: PUSH
33251: LD_INT 2
33253: ARRAY
33254: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33255: LD_ADDR_VAR 0 14
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: LD_INT 3
33268: PUSH
33269: LD_INT 5
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: ST_TO_ADDR
// for i in tmp do
33278: LD_ADDR_VAR 0 8
33282: PUSH
33283: LD_VAR 0 14
33287: PUSH
33288: FOR_IN
33289: IFFALSE 33459
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33291: LD_ADDR_VAR 0 9
33295: PUSH
33296: LD_VAR 0 10
33300: PPUSH
33301: LD_VAR 0 8
33305: PPUSH
33306: LD_INT 5
33308: PPUSH
33309: CALL_OW 272
33313: PUSH
33314: LD_VAR 0 11
33318: PPUSH
33319: LD_VAR 0 8
33323: PPUSH
33324: LD_INT 5
33326: PPUSH
33327: CALL_OW 273
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33336: LD_VAR 0 9
33340: PUSH
33341: LD_INT 1
33343: ARRAY
33344: PPUSH
33345: LD_VAR 0 9
33349: PUSH
33350: LD_INT 2
33352: ARRAY
33353: PPUSH
33354: CALL_OW 488
33358: IFFALSE 33457
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33360: LD_ADDR_VAR 0 4
33364: PUSH
33365: LD_VAR 0 9
33369: PUSH
33370: LD_INT 1
33372: ARRAY
33373: PPUSH
33374: LD_VAR 0 9
33378: PUSH
33379: LD_INT 2
33381: ARRAY
33382: PPUSH
33383: CALL_OW 546
33387: ST_TO_ADDR
// if hex [ 1 ] then
33388: LD_VAR 0 4
33392: PUSH
33393: LD_INT 1
33395: ARRAY
33396: IFFALSE 33400
// continue ;
33398: GO 33288
// h := hex [ 2 ] ;
33400: LD_ADDR_VAR 0 13
33404: PUSH
33405: LD_VAR 0 4
33409: PUSH
33410: LD_INT 2
33412: ARRAY
33413: ST_TO_ADDR
// if h + 7 < height then
33414: LD_VAR 0 13
33418: PUSH
33419: LD_INT 7
33421: PLUS
33422: PUSH
33423: LD_VAR 0 15
33427: LESS
33428: IFFALSE 33457
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33430: LD_ADDR_VAR 0 18
33434: PUSH
33435: LD_INT 7
33437: PUSH
33438: LD_INT 28
33440: PUSH
33441: LD_INT 45
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: PUSH
33449: LD_VAR 0 12
33453: ARRAY
33454: ST_TO_ADDR
// break ;
33455: GO 33459
// end ; end ; end ;
33457: GO 33288
33459: POP
33460: POP
// end ; if not weapon then
33461: LD_VAR 0 18
33465: NOT
33466: IFFALSE 33526
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33468: LD_ADDR_VAR 0 5
33472: PUSH
33473: LD_VAR 0 5
33477: PUSH
33478: LD_INT 11
33480: PUSH
33481: LD_INT 30
33483: PUSH
33484: LD_INT 49
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: DIFF
33492: ST_TO_ADDR
// if not list then
33493: LD_VAR 0 5
33497: NOT
33498: IFFALSE 33502
// exit ;
33500: GO 33644
// weapon := list [ rand ( 1 , list ) ] ;
33502: LD_ADDR_VAR 0 18
33506: PUSH
33507: LD_VAR 0 5
33511: PUSH
33512: LD_INT 1
33514: PPUSH
33515: LD_VAR 0 5
33519: PPUSH
33520: CALL_OW 12
33524: ARRAY
33525: ST_TO_ADDR
// end ; if weapon then
33526: LD_VAR 0 18
33530: IFFALSE 33644
// begin tmp := CostOfWeapon ( weapon ) ;
33532: LD_ADDR_VAR 0 14
33536: PUSH
33537: LD_VAR 0 18
33541: PPUSH
33542: CALL_OW 451
33546: ST_TO_ADDR
// j := GetBase ( tower ) ;
33547: LD_ADDR_VAR 0 9
33551: PUSH
33552: LD_VAR 0 1
33556: PPUSH
33557: CALL_OW 274
33561: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33562: LD_VAR 0 9
33566: PPUSH
33567: LD_INT 1
33569: PPUSH
33570: CALL_OW 275
33574: PUSH
33575: LD_VAR 0 14
33579: PUSH
33580: LD_INT 1
33582: ARRAY
33583: GREATEREQUAL
33584: PUSH
33585: LD_VAR 0 9
33589: PPUSH
33590: LD_INT 2
33592: PPUSH
33593: CALL_OW 275
33597: PUSH
33598: LD_VAR 0 14
33602: PUSH
33603: LD_INT 2
33605: ARRAY
33606: GREATEREQUAL
33607: AND
33608: PUSH
33609: LD_VAR 0 9
33613: PPUSH
33614: LD_INT 3
33616: PPUSH
33617: CALL_OW 275
33621: PUSH
33622: LD_VAR 0 14
33626: PUSH
33627: LD_INT 3
33629: ARRAY
33630: GREATEREQUAL
33631: AND
33632: IFFALSE 33644
// result := weapon ;
33634: LD_ADDR_VAR 0 3
33638: PUSH
33639: LD_VAR 0 18
33643: ST_TO_ADDR
// end ; end ;
33644: LD_VAR 0 3
33648: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33649: LD_INT 0
33651: PPUSH
33652: PPUSH
// result := true ;
33653: LD_ADDR_VAR 0 3
33657: PUSH
33658: LD_INT 1
33660: ST_TO_ADDR
// if array1 = array2 then
33661: LD_VAR 0 1
33665: PUSH
33666: LD_VAR 0 2
33670: EQUAL
33671: IFFALSE 33731
// begin for i = 1 to array1 do
33673: LD_ADDR_VAR 0 4
33677: PUSH
33678: DOUBLE
33679: LD_INT 1
33681: DEC
33682: ST_TO_ADDR
33683: LD_VAR 0 1
33687: PUSH
33688: FOR_TO
33689: IFFALSE 33727
// if array1 [ i ] <> array2 [ i ] then
33691: LD_VAR 0 1
33695: PUSH
33696: LD_VAR 0 4
33700: ARRAY
33701: PUSH
33702: LD_VAR 0 2
33706: PUSH
33707: LD_VAR 0 4
33711: ARRAY
33712: NONEQUAL
33713: IFFALSE 33725
// begin result := false ;
33715: LD_ADDR_VAR 0 3
33719: PUSH
33720: LD_INT 0
33722: ST_TO_ADDR
// break ;
33723: GO 33727
// end ;
33725: GO 33688
33727: POP
33728: POP
// end else
33729: GO 33739
// result := false ;
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: LD_INT 0
33738: ST_TO_ADDR
// end ;
33739: LD_VAR 0 3
33743: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
// if not array1 or not array2 then
33748: LD_VAR 0 1
33752: NOT
33753: PUSH
33754: LD_VAR 0 2
33758: NOT
33759: OR
33760: IFFALSE 33764
// exit ;
33762: GO 33828
// result := true ;
33764: LD_ADDR_VAR 0 3
33768: PUSH
33769: LD_INT 1
33771: ST_TO_ADDR
// for i = 1 to array1 do
33772: LD_ADDR_VAR 0 4
33776: PUSH
33777: DOUBLE
33778: LD_INT 1
33780: DEC
33781: ST_TO_ADDR
33782: LD_VAR 0 1
33786: PUSH
33787: FOR_TO
33788: IFFALSE 33826
// if array1 [ i ] <> array2 [ i ] then
33790: LD_VAR 0 1
33794: PUSH
33795: LD_VAR 0 4
33799: ARRAY
33800: PUSH
33801: LD_VAR 0 2
33805: PUSH
33806: LD_VAR 0 4
33810: ARRAY
33811: NONEQUAL
33812: IFFALSE 33824
// begin result := false ;
33814: LD_ADDR_VAR 0 3
33818: PUSH
33819: LD_INT 0
33821: ST_TO_ADDR
// break ;
33822: GO 33826
// end ;
33824: GO 33787
33826: POP
33827: POP
// end ;
33828: LD_VAR 0 3
33832: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33833: LD_INT 0
33835: PPUSH
33836: PPUSH
33837: PPUSH
// pom := GetBase ( fac ) ;
33838: LD_ADDR_VAR 0 5
33842: PUSH
33843: LD_VAR 0 1
33847: PPUSH
33848: CALL_OW 274
33852: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33853: LD_ADDR_VAR 0 4
33857: PUSH
33858: LD_VAR 0 2
33862: PUSH
33863: LD_INT 1
33865: ARRAY
33866: PPUSH
33867: LD_VAR 0 2
33871: PUSH
33872: LD_INT 2
33874: ARRAY
33875: PPUSH
33876: LD_VAR 0 2
33880: PUSH
33881: LD_INT 3
33883: ARRAY
33884: PPUSH
33885: LD_VAR 0 2
33889: PUSH
33890: LD_INT 4
33892: ARRAY
33893: PPUSH
33894: CALL_OW 449
33898: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33899: LD_ADDR_VAR 0 3
33903: PUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: LD_INT 1
33911: PPUSH
33912: CALL_OW 275
33916: PUSH
33917: LD_VAR 0 4
33921: PUSH
33922: LD_INT 1
33924: ARRAY
33925: GREATEREQUAL
33926: PUSH
33927: LD_VAR 0 5
33931: PPUSH
33932: LD_INT 2
33934: PPUSH
33935: CALL_OW 275
33939: PUSH
33940: LD_VAR 0 4
33944: PUSH
33945: LD_INT 2
33947: ARRAY
33948: GREATEREQUAL
33949: AND
33950: PUSH
33951: LD_VAR 0 5
33955: PPUSH
33956: LD_INT 3
33958: PPUSH
33959: CALL_OW 275
33963: PUSH
33964: LD_VAR 0 4
33968: PUSH
33969: LD_INT 3
33971: ARRAY
33972: GREATEREQUAL
33973: AND
33974: ST_TO_ADDR
// end ;
33975: LD_VAR 0 3
33979: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33980: LD_INT 0
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
// pom := GetBase ( building ) ;
33986: LD_ADDR_VAR 0 3
33990: PUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL_OW 274
34000: ST_TO_ADDR
// if not pom then
34001: LD_VAR 0 3
34005: NOT
34006: IFFALSE 34010
// exit ;
34008: GO 34180
// btype := GetBType ( building ) ;
34010: LD_ADDR_VAR 0 5
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 266
34024: ST_TO_ADDR
// if btype = b_armoury then
34025: LD_VAR 0 5
34029: PUSH
34030: LD_INT 4
34032: EQUAL
34033: IFFALSE 34043
// btype := b_barracks ;
34035: LD_ADDR_VAR 0 5
34039: PUSH
34040: LD_INT 5
34042: ST_TO_ADDR
// if btype = b_depot then
34043: LD_VAR 0 5
34047: PUSH
34048: LD_INT 0
34050: EQUAL
34051: IFFALSE 34061
// btype := b_warehouse ;
34053: LD_ADDR_VAR 0 5
34057: PUSH
34058: LD_INT 1
34060: ST_TO_ADDR
// if btype = b_workshop then
34061: LD_VAR 0 5
34065: PUSH
34066: LD_INT 2
34068: EQUAL
34069: IFFALSE 34079
// btype := b_factory ;
34071: LD_ADDR_VAR 0 5
34075: PUSH
34076: LD_INT 3
34078: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34079: LD_ADDR_VAR 0 4
34083: PUSH
34084: LD_VAR 0 5
34088: PPUSH
34089: LD_VAR 0 1
34093: PPUSH
34094: CALL_OW 248
34098: PPUSH
34099: CALL_OW 450
34103: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34104: LD_ADDR_VAR 0 2
34108: PUSH
34109: LD_VAR 0 3
34113: PPUSH
34114: LD_INT 1
34116: PPUSH
34117: CALL_OW 275
34121: PUSH
34122: LD_VAR 0 4
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: GREATEREQUAL
34131: PUSH
34132: LD_VAR 0 3
34136: PPUSH
34137: LD_INT 2
34139: PPUSH
34140: CALL_OW 275
34144: PUSH
34145: LD_VAR 0 4
34149: PUSH
34150: LD_INT 2
34152: ARRAY
34153: GREATEREQUAL
34154: AND
34155: PUSH
34156: LD_VAR 0 3
34160: PPUSH
34161: LD_INT 3
34163: PPUSH
34164: CALL_OW 275
34168: PUSH
34169: LD_VAR 0 4
34173: PUSH
34174: LD_INT 3
34176: ARRAY
34177: GREATEREQUAL
34178: AND
34179: ST_TO_ADDR
// end ;
34180: LD_VAR 0 2
34184: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34185: LD_INT 0
34187: PPUSH
34188: PPUSH
34189: PPUSH
// pom := GetBase ( building ) ;
34190: LD_ADDR_VAR 0 4
34194: PUSH
34195: LD_VAR 0 1
34199: PPUSH
34200: CALL_OW 274
34204: ST_TO_ADDR
// if not pom then
34205: LD_VAR 0 4
34209: NOT
34210: IFFALSE 34214
// exit ;
34212: GO 34315
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_VAR 0 2
34223: PPUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 248
34233: PPUSH
34234: CALL_OW 450
34238: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_VAR 0 4
34248: PPUSH
34249: LD_INT 1
34251: PPUSH
34252: CALL_OW 275
34256: PUSH
34257: LD_VAR 0 5
34261: PUSH
34262: LD_INT 1
34264: ARRAY
34265: GREATEREQUAL
34266: PUSH
34267: LD_VAR 0 4
34271: PPUSH
34272: LD_INT 2
34274: PPUSH
34275: CALL_OW 275
34279: PUSH
34280: LD_VAR 0 5
34284: PUSH
34285: LD_INT 2
34287: ARRAY
34288: GREATEREQUAL
34289: AND
34290: PUSH
34291: LD_VAR 0 4
34295: PPUSH
34296: LD_INT 3
34298: PPUSH
34299: CALL_OW 275
34303: PUSH
34304: LD_VAR 0 5
34308: PUSH
34309: LD_INT 3
34311: ARRAY
34312: GREATEREQUAL
34313: AND
34314: ST_TO_ADDR
// end ;
34315: LD_VAR 0 3
34319: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34320: LD_INT 0
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
// result := false ;
34333: LD_ADDR_VAR 0 8
34337: PUSH
34338: LD_INT 0
34340: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34341: LD_VAR 0 5
34345: NOT
34346: PUSH
34347: LD_VAR 0 1
34351: NOT
34352: OR
34353: PUSH
34354: LD_VAR 0 2
34358: NOT
34359: OR
34360: PUSH
34361: LD_VAR 0 3
34365: NOT
34366: OR
34367: IFFALSE 34371
// exit ;
34369: GO 35185
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34371: LD_ADDR_VAR 0 14
34375: PUSH
34376: LD_VAR 0 1
34380: PPUSH
34381: LD_VAR 0 2
34385: PPUSH
34386: LD_VAR 0 3
34390: PPUSH
34391: LD_VAR 0 4
34395: PPUSH
34396: LD_VAR 0 5
34400: PUSH
34401: LD_INT 1
34403: ARRAY
34404: PPUSH
34405: CALL_OW 248
34409: PPUSH
34410: LD_INT 0
34412: PPUSH
34413: CALL 36422 0 6
34417: ST_TO_ADDR
// if not hexes then
34418: LD_VAR 0 14
34422: NOT
34423: IFFALSE 34427
// exit ;
34425: GO 35185
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34427: LD_ADDR_VAR 0 17
34431: PUSH
34432: LD_VAR 0 5
34436: PPUSH
34437: LD_INT 22
34439: PUSH
34440: LD_VAR 0 13
34444: PPUSH
34445: CALL_OW 255
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: LD_INT 30
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 30
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: LIST
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PPUSH
34486: CALL_OW 72
34490: ST_TO_ADDR
// for i = 1 to hexes do
34491: LD_ADDR_VAR 0 9
34495: PUSH
34496: DOUBLE
34497: LD_INT 1
34499: DEC
34500: ST_TO_ADDR
34501: LD_VAR 0 14
34505: PUSH
34506: FOR_TO
34507: IFFALSE 35183
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34509: LD_ADDR_VAR 0 13
34513: PUSH
34514: LD_VAR 0 14
34518: PUSH
34519: LD_VAR 0 9
34523: ARRAY
34524: PUSH
34525: LD_INT 1
34527: ARRAY
34528: PPUSH
34529: LD_VAR 0 14
34533: PUSH
34534: LD_VAR 0 9
34538: ARRAY
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: PPUSH
34544: CALL_OW 428
34548: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34549: LD_VAR 0 14
34553: PUSH
34554: LD_VAR 0 9
34558: ARRAY
34559: PUSH
34560: LD_INT 1
34562: ARRAY
34563: PPUSH
34564: LD_VAR 0 14
34568: PUSH
34569: LD_VAR 0 9
34573: ARRAY
34574: PUSH
34575: LD_INT 2
34577: ARRAY
34578: PPUSH
34579: CALL_OW 351
34583: PUSH
34584: LD_VAR 0 14
34588: PUSH
34589: LD_VAR 0 9
34593: ARRAY
34594: PUSH
34595: LD_INT 1
34597: ARRAY
34598: PPUSH
34599: LD_VAR 0 14
34603: PUSH
34604: LD_VAR 0 9
34608: ARRAY
34609: PUSH
34610: LD_INT 2
34612: ARRAY
34613: PPUSH
34614: CALL_OW 488
34618: NOT
34619: OR
34620: PUSH
34621: LD_VAR 0 13
34625: PPUSH
34626: CALL_OW 247
34630: PUSH
34631: LD_INT 3
34633: EQUAL
34634: OR
34635: IFFALSE 34641
// exit ;
34637: POP
34638: POP
34639: GO 35185
// if not tmp then
34641: LD_VAR 0 13
34645: NOT
34646: IFFALSE 34650
// continue ;
34648: GO 34506
// result := true ;
34650: LD_ADDR_VAR 0 8
34654: PUSH
34655: LD_INT 1
34657: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34658: LD_VAR 0 6
34662: PUSH
34663: LD_VAR 0 13
34667: PPUSH
34668: CALL_OW 247
34672: PUSH
34673: LD_INT 2
34675: EQUAL
34676: AND
34677: PUSH
34678: LD_VAR 0 13
34682: PPUSH
34683: CALL_OW 263
34687: PUSH
34688: LD_INT 1
34690: EQUAL
34691: AND
34692: IFFALSE 34856
// begin if IsDrivenBy ( tmp ) then
34694: LD_VAR 0 13
34698: PPUSH
34699: CALL_OW 311
34703: IFFALSE 34707
// continue ;
34705: GO 34506
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34707: LD_VAR 0 6
34711: PPUSH
34712: LD_INT 3
34714: PUSH
34715: LD_INT 60
34717: PUSH
34718: EMPTY
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 3
34727: PUSH
34728: LD_INT 55
34730: PUSH
34731: EMPTY
34732: LIST
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PPUSH
34742: CALL_OW 72
34746: IFFALSE 34854
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34748: LD_ADDR_VAR 0 18
34752: PUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: LD_INT 3
34760: PUSH
34761: LD_INT 60
34763: PUSH
34764: EMPTY
34765: LIST
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: LD_INT 55
34776: PUSH
34777: EMPTY
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PPUSH
34788: CALL_OW 72
34792: PUSH
34793: LD_INT 1
34795: ARRAY
34796: ST_TO_ADDR
// if IsInUnit ( driver ) then
34797: LD_VAR 0 18
34801: PPUSH
34802: CALL_OW 310
34806: IFFALSE 34817
// ComExit ( driver ) ;
34808: LD_VAR 0 18
34812: PPUSH
34813: CALL 59606 0 1
// AddComEnterUnit ( driver , tmp ) ;
34817: LD_VAR 0 18
34821: PPUSH
34822: LD_VAR 0 13
34826: PPUSH
34827: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34831: LD_VAR 0 18
34835: PPUSH
34836: LD_VAR 0 7
34840: PPUSH
34841: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34845: LD_VAR 0 18
34849: PPUSH
34850: CALL_OW 181
// end ; continue ;
34854: GO 34506
// end ; if not cleaners or not tmp in cleaners then
34856: LD_VAR 0 6
34860: NOT
34861: PUSH
34862: LD_VAR 0 13
34866: PUSH
34867: LD_VAR 0 6
34871: IN
34872: NOT
34873: OR
34874: IFFALSE 35181
// begin if dep then
34876: LD_VAR 0 17
34880: IFFALSE 35016
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34882: LD_ADDR_VAR 0 16
34886: PUSH
34887: LD_VAR 0 17
34891: PUSH
34892: LD_INT 1
34894: ARRAY
34895: PPUSH
34896: CALL_OW 250
34900: PPUSH
34901: LD_VAR 0 17
34905: PUSH
34906: LD_INT 1
34908: ARRAY
34909: PPUSH
34910: CALL_OW 254
34914: PPUSH
34915: LD_INT 5
34917: PPUSH
34918: CALL_OW 272
34922: PUSH
34923: LD_VAR 0 17
34927: PUSH
34928: LD_INT 1
34930: ARRAY
34931: PPUSH
34932: CALL_OW 251
34936: PPUSH
34937: LD_VAR 0 17
34941: PUSH
34942: LD_INT 1
34944: ARRAY
34945: PPUSH
34946: CALL_OW 254
34950: PPUSH
34951: LD_INT 5
34953: PPUSH
34954: CALL_OW 273
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34963: LD_VAR 0 16
34967: PUSH
34968: LD_INT 1
34970: ARRAY
34971: PPUSH
34972: LD_VAR 0 16
34976: PUSH
34977: LD_INT 2
34979: ARRAY
34980: PPUSH
34981: CALL_OW 488
34985: IFFALSE 35016
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34987: LD_VAR 0 13
34991: PPUSH
34992: LD_VAR 0 16
34996: PUSH
34997: LD_INT 1
34999: ARRAY
35000: PPUSH
35001: LD_VAR 0 16
35005: PUSH
35006: LD_INT 2
35008: ARRAY
35009: PPUSH
35010: CALL_OW 111
// continue ;
35014: GO 34506
// end ; end ; r := GetDir ( tmp ) ;
35016: LD_ADDR_VAR 0 15
35020: PUSH
35021: LD_VAR 0 13
35025: PPUSH
35026: CALL_OW 254
35030: ST_TO_ADDR
// if r = 5 then
35031: LD_VAR 0 15
35035: PUSH
35036: LD_INT 5
35038: EQUAL
35039: IFFALSE 35049
// r := 0 ;
35041: LD_ADDR_VAR 0 15
35045: PUSH
35046: LD_INT 0
35048: ST_TO_ADDR
// for j = r to 5 do
35049: LD_ADDR_VAR 0 10
35053: PUSH
35054: DOUBLE
35055: LD_VAR 0 15
35059: DEC
35060: ST_TO_ADDR
35061: LD_INT 5
35063: PUSH
35064: FOR_TO
35065: IFFALSE 35179
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35067: LD_ADDR_VAR 0 11
35071: PUSH
35072: LD_VAR 0 13
35076: PPUSH
35077: CALL_OW 250
35081: PPUSH
35082: LD_VAR 0 10
35086: PPUSH
35087: LD_INT 2
35089: PPUSH
35090: CALL_OW 272
35094: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35095: LD_ADDR_VAR 0 12
35099: PUSH
35100: LD_VAR 0 13
35104: PPUSH
35105: CALL_OW 251
35109: PPUSH
35110: LD_VAR 0 10
35114: PPUSH
35115: LD_INT 2
35117: PPUSH
35118: CALL_OW 273
35122: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35123: LD_VAR 0 11
35127: PPUSH
35128: LD_VAR 0 12
35132: PPUSH
35133: CALL_OW 488
35137: PUSH
35138: LD_VAR 0 11
35142: PPUSH
35143: LD_VAR 0 12
35147: PPUSH
35148: CALL_OW 428
35152: NOT
35153: AND
35154: IFFALSE 35177
// begin ComMoveXY ( tmp , _x , _y ) ;
35156: LD_VAR 0 13
35160: PPUSH
35161: LD_VAR 0 11
35165: PPUSH
35166: LD_VAR 0 12
35170: PPUSH
35171: CALL_OW 111
// break ;
35175: GO 35179
// end ; end ;
35177: GO 35064
35179: POP
35180: POP
// end ; end ;
35181: GO 34506
35183: POP
35184: POP
// end ;
35185: LD_VAR 0 8
35189: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35190: LD_INT 0
35192: PPUSH
// result := true ;
35193: LD_ADDR_VAR 0 3
35197: PUSH
35198: LD_INT 1
35200: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35201: LD_VAR 0 2
35205: PUSH
35206: LD_INT 24
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35220
35212: LD_INT 33
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35245
35220: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_INT 32
35228: PPUSH
35229: LD_VAR 0 1
35233: PPUSH
35234: CALL_OW 321
35238: PUSH
35239: LD_INT 2
35241: EQUAL
35242: ST_TO_ADDR
35243: GO 35565
35245: LD_INT 20
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35253
35251: GO 35278
35253: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35254: LD_ADDR_VAR 0 3
35258: PUSH
35259: LD_INT 6
35261: PPUSH
35262: LD_VAR 0 1
35266: PPUSH
35267: CALL_OW 321
35271: PUSH
35272: LD_INT 2
35274: EQUAL
35275: ST_TO_ADDR
35276: GO 35565
35278: LD_INT 22
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35292
35284: LD_INT 36
35286: DOUBLE
35287: EQUAL
35288: IFTRUE 35292
35290: GO 35317
35292: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35293: LD_ADDR_VAR 0 3
35297: PUSH
35298: LD_INT 15
35300: PPUSH
35301: LD_VAR 0 1
35305: PPUSH
35306: CALL_OW 321
35310: PUSH
35311: LD_INT 2
35313: EQUAL
35314: ST_TO_ADDR
35315: GO 35565
35317: LD_INT 30
35319: DOUBLE
35320: EQUAL
35321: IFTRUE 35325
35323: GO 35350
35325: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35326: LD_ADDR_VAR 0 3
35330: PUSH
35331: LD_INT 20
35333: PPUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL_OW 321
35343: PUSH
35344: LD_INT 2
35346: EQUAL
35347: ST_TO_ADDR
35348: GO 35565
35350: LD_INT 28
35352: DOUBLE
35353: EQUAL
35354: IFTRUE 35364
35356: LD_INT 21
35358: DOUBLE
35359: EQUAL
35360: IFTRUE 35364
35362: GO 35389
35364: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35365: LD_ADDR_VAR 0 3
35369: PUSH
35370: LD_INT 21
35372: PPUSH
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 321
35382: PUSH
35383: LD_INT 2
35385: EQUAL
35386: ST_TO_ADDR
35387: GO 35565
35389: LD_INT 16
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35424
35397: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_EXP 94
35407: PPUSH
35408: LD_VAR 0 1
35412: PPUSH
35413: CALL_OW 321
35417: PUSH
35418: LD_INT 2
35420: EQUAL
35421: ST_TO_ADDR
35422: GO 35565
35424: LD_INT 19
35426: DOUBLE
35427: EQUAL
35428: IFTRUE 35438
35430: LD_INT 23
35432: DOUBLE
35433: EQUAL
35434: IFTRUE 35438
35436: GO 35465
35438: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35439: LD_ADDR_VAR 0 3
35443: PUSH
35444: LD_EXP 93
35448: PPUSH
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 321
35458: PUSH
35459: LD_INT 2
35461: EQUAL
35462: ST_TO_ADDR
35463: GO 35565
35465: LD_INT 17
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35473
35471: GO 35498
35473: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35474: LD_ADDR_VAR 0 3
35478: PUSH
35479: LD_INT 39
35481: PPUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 321
35491: PUSH
35492: LD_INT 2
35494: EQUAL
35495: ST_TO_ADDR
35496: GO 35565
35498: LD_INT 18
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35506
35504: GO 35531
35506: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35507: LD_ADDR_VAR 0 3
35511: PUSH
35512: LD_INT 40
35514: PPUSH
35515: LD_VAR 0 1
35519: PPUSH
35520: CALL_OW 321
35524: PUSH
35525: LD_INT 2
35527: EQUAL
35528: ST_TO_ADDR
35529: GO 35565
35531: LD_INT 27
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35539
35537: GO 35564
35539: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35540: LD_ADDR_VAR 0 3
35544: PUSH
35545: LD_INT 35
35547: PPUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 321
35557: PUSH
35558: LD_INT 2
35560: EQUAL
35561: ST_TO_ADDR
35562: GO 35565
35564: POP
// end ;
35565: LD_VAR 0 3
35569: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35570: LD_INT 0
35572: PPUSH
35573: PPUSH
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
35580: PPUSH
35581: PPUSH
35582: PPUSH
// result := false ;
35583: LD_ADDR_VAR 0 6
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35591: LD_VAR 0 1
35595: NOT
35596: PUSH
35597: LD_VAR 0 1
35601: PPUSH
35602: CALL_OW 266
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: IN
35617: NOT
35618: OR
35619: PUSH
35620: LD_VAR 0 2
35624: NOT
35625: OR
35626: PUSH
35627: LD_VAR 0 5
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 3
35643: PUSH
35644: LD_INT 4
35646: PUSH
35647: LD_INT 5
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: IN
35658: NOT
35659: OR
35660: PUSH
35661: LD_VAR 0 3
35665: PPUSH
35666: LD_VAR 0 4
35670: PPUSH
35671: CALL_OW 488
35675: NOT
35676: OR
35677: IFFALSE 35681
// exit ;
35679: GO 36417
// side := GetSide ( depot ) ;
35681: LD_ADDR_VAR 0 9
35685: PUSH
35686: LD_VAR 0 1
35690: PPUSH
35691: CALL_OW 255
35695: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35696: LD_VAR 0 9
35700: PPUSH
35701: LD_VAR 0 2
35705: PPUSH
35706: CALL 35190 0 2
35710: NOT
35711: IFFALSE 35715
// exit ;
35713: GO 36417
// pom := GetBase ( depot ) ;
35715: LD_ADDR_VAR 0 10
35719: PUSH
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 274
35729: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35730: LD_ADDR_VAR 0 11
35734: PUSH
35735: LD_VAR 0 2
35739: PPUSH
35740: LD_VAR 0 1
35744: PPUSH
35745: CALL_OW 248
35749: PPUSH
35750: CALL_OW 450
35754: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35755: LD_VAR 0 10
35759: PPUSH
35760: LD_INT 1
35762: PPUSH
35763: CALL_OW 275
35767: PUSH
35768: LD_VAR 0 11
35772: PUSH
35773: LD_INT 1
35775: ARRAY
35776: GREATEREQUAL
35777: PUSH
35778: LD_VAR 0 10
35782: PPUSH
35783: LD_INT 2
35785: PPUSH
35786: CALL_OW 275
35790: PUSH
35791: LD_VAR 0 11
35795: PUSH
35796: LD_INT 2
35798: ARRAY
35799: GREATEREQUAL
35800: AND
35801: PUSH
35802: LD_VAR 0 10
35806: PPUSH
35807: LD_INT 3
35809: PPUSH
35810: CALL_OW 275
35814: PUSH
35815: LD_VAR 0 11
35819: PUSH
35820: LD_INT 3
35822: ARRAY
35823: GREATEREQUAL
35824: AND
35825: NOT
35826: IFFALSE 35830
// exit ;
35828: GO 36417
// if GetBType ( depot ) = b_depot then
35830: LD_VAR 0 1
35834: PPUSH
35835: CALL_OW 266
35839: PUSH
35840: LD_INT 0
35842: EQUAL
35843: IFFALSE 35855
// dist := 28 else
35845: LD_ADDR_VAR 0 14
35849: PUSH
35850: LD_INT 28
35852: ST_TO_ADDR
35853: GO 35863
// dist := 36 ;
35855: LD_ADDR_VAR 0 14
35859: PUSH
35860: LD_INT 36
35862: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35863: LD_VAR 0 1
35867: PPUSH
35868: LD_VAR 0 3
35872: PPUSH
35873: LD_VAR 0 4
35877: PPUSH
35878: CALL_OW 297
35882: PUSH
35883: LD_VAR 0 14
35887: GREATER
35888: IFFALSE 35892
// exit ;
35890: GO 36417
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35892: LD_ADDR_VAR 0 12
35896: PUSH
35897: LD_VAR 0 2
35901: PPUSH
35902: LD_VAR 0 3
35906: PPUSH
35907: LD_VAR 0 4
35911: PPUSH
35912: LD_VAR 0 5
35916: PPUSH
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 248
35926: PPUSH
35927: LD_INT 0
35929: PPUSH
35930: CALL 36422 0 6
35934: ST_TO_ADDR
// if not hexes then
35935: LD_VAR 0 12
35939: NOT
35940: IFFALSE 35944
// exit ;
35942: GO 36417
// hex := GetHexInfo ( x , y ) ;
35944: LD_ADDR_VAR 0 15
35948: PUSH
35949: LD_VAR 0 3
35953: PPUSH
35954: LD_VAR 0 4
35958: PPUSH
35959: CALL_OW 546
35963: ST_TO_ADDR
// if hex [ 1 ] then
35964: LD_VAR 0 15
35968: PUSH
35969: LD_INT 1
35971: ARRAY
35972: IFFALSE 35976
// exit ;
35974: GO 36417
// height := hex [ 2 ] ;
35976: LD_ADDR_VAR 0 13
35980: PUSH
35981: LD_VAR 0 15
35985: PUSH
35986: LD_INT 2
35988: ARRAY
35989: ST_TO_ADDR
// for i = 1 to hexes do
35990: LD_ADDR_VAR 0 7
35994: PUSH
35995: DOUBLE
35996: LD_INT 1
35998: DEC
35999: ST_TO_ADDR
36000: LD_VAR 0 12
36004: PUSH
36005: FOR_TO
36006: IFFALSE 36336
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36008: LD_VAR 0 12
36012: PUSH
36013: LD_VAR 0 7
36017: ARRAY
36018: PUSH
36019: LD_INT 1
36021: ARRAY
36022: PPUSH
36023: LD_VAR 0 12
36027: PUSH
36028: LD_VAR 0 7
36032: ARRAY
36033: PUSH
36034: LD_INT 2
36036: ARRAY
36037: PPUSH
36038: CALL_OW 488
36042: NOT
36043: PUSH
36044: LD_VAR 0 12
36048: PUSH
36049: LD_VAR 0 7
36053: ARRAY
36054: PUSH
36055: LD_INT 1
36057: ARRAY
36058: PPUSH
36059: LD_VAR 0 12
36063: PUSH
36064: LD_VAR 0 7
36068: ARRAY
36069: PUSH
36070: LD_INT 2
36072: ARRAY
36073: PPUSH
36074: CALL_OW 428
36078: PUSH
36079: LD_INT 0
36081: GREATER
36082: OR
36083: PUSH
36084: LD_VAR 0 12
36088: PUSH
36089: LD_VAR 0 7
36093: ARRAY
36094: PUSH
36095: LD_INT 1
36097: ARRAY
36098: PPUSH
36099: LD_VAR 0 12
36103: PUSH
36104: LD_VAR 0 7
36108: ARRAY
36109: PUSH
36110: LD_INT 2
36112: ARRAY
36113: PPUSH
36114: CALL_OW 351
36118: OR
36119: IFFALSE 36125
// exit ;
36121: POP
36122: POP
36123: GO 36417
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36125: LD_ADDR_VAR 0 8
36129: PUSH
36130: LD_VAR 0 12
36134: PUSH
36135: LD_VAR 0 7
36139: ARRAY
36140: PUSH
36141: LD_INT 1
36143: ARRAY
36144: PPUSH
36145: LD_VAR 0 12
36149: PUSH
36150: LD_VAR 0 7
36154: ARRAY
36155: PUSH
36156: LD_INT 2
36158: ARRAY
36159: PPUSH
36160: CALL_OW 546
36164: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36165: LD_VAR 0 8
36169: PUSH
36170: LD_INT 1
36172: ARRAY
36173: PUSH
36174: LD_VAR 0 8
36178: PUSH
36179: LD_INT 2
36181: ARRAY
36182: PUSH
36183: LD_VAR 0 13
36187: PUSH
36188: LD_INT 2
36190: PLUS
36191: GREATER
36192: OR
36193: PUSH
36194: LD_VAR 0 8
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: PUSH
36203: LD_VAR 0 13
36207: PUSH
36208: LD_INT 2
36210: MINUS
36211: LESS
36212: OR
36213: PUSH
36214: LD_VAR 0 8
36218: PUSH
36219: LD_INT 3
36221: ARRAY
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 8
36228: PUSH
36229: LD_INT 9
36231: PUSH
36232: LD_INT 10
36234: PUSH
36235: LD_INT 11
36237: PUSH
36238: LD_INT 12
36240: PUSH
36241: LD_INT 13
36243: PUSH
36244: LD_INT 16
36246: PUSH
36247: LD_INT 17
36249: PUSH
36250: LD_INT 18
36252: PUSH
36253: LD_INT 19
36255: PUSH
36256: LD_INT 20
36258: PUSH
36259: LD_INT 21
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: IN
36277: NOT
36278: OR
36279: PUSH
36280: LD_VAR 0 8
36284: PUSH
36285: LD_INT 5
36287: ARRAY
36288: NOT
36289: OR
36290: PUSH
36291: LD_VAR 0 8
36295: PUSH
36296: LD_INT 6
36298: ARRAY
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: LD_INT 7
36308: PUSH
36309: LD_INT 9
36311: PUSH
36312: LD_INT 10
36314: PUSH
36315: LD_INT 11
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: IN
36326: NOT
36327: OR
36328: IFFALSE 36334
// exit ;
36330: POP
36331: POP
36332: GO 36417
// end ;
36334: GO 36005
36336: POP
36337: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36338: LD_VAR 0 9
36342: PPUSH
36343: LD_VAR 0 3
36347: PPUSH
36348: LD_VAR 0 4
36352: PPUSH
36353: LD_INT 20
36355: PPUSH
36356: CALL 28363 0 4
36360: PUSH
36361: LD_INT 4
36363: ARRAY
36364: IFFALSE 36368
// exit ;
36366: GO 36417
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36368: LD_VAR 0 2
36372: PUSH
36373: LD_INT 29
36375: PUSH
36376: LD_INT 30
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: IN
36383: PUSH
36384: LD_VAR 0 3
36388: PPUSH
36389: LD_VAR 0 4
36393: PPUSH
36394: LD_VAR 0 9
36398: PPUSH
36399: CALL_OW 440
36403: NOT
36404: AND
36405: IFFALSE 36409
// exit ;
36407: GO 36417
// result := true ;
36409: LD_ADDR_VAR 0 6
36413: PUSH
36414: LD_INT 1
36416: ST_TO_ADDR
// end ;
36417: LD_VAR 0 6
36421: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36422: LD_INT 0
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
36443: PPUSH
36444: PPUSH
36445: PPUSH
36446: PPUSH
36447: PPUSH
36448: PPUSH
36449: PPUSH
36450: PPUSH
36451: PPUSH
36452: PPUSH
36453: PPUSH
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
// result = [ ] ;
36482: LD_ADDR_VAR 0 7
36486: PUSH
36487: EMPTY
36488: ST_TO_ADDR
// temp_list = [ ] ;
36489: LD_ADDR_VAR 0 9
36493: PUSH
36494: EMPTY
36495: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36496: LD_VAR 0 4
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 2
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: LD_INT 4
36515: PUSH
36516: LD_INT 5
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: IN
36527: NOT
36528: PUSH
36529: LD_VAR 0 1
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: IN
36544: PUSH
36545: LD_VAR 0 5
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: IN
36564: NOT
36565: AND
36566: OR
36567: IFFALSE 36571
// exit ;
36569: GO 54962
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36571: LD_VAR 0 1
36575: PUSH
36576: LD_INT 6
36578: PUSH
36579: LD_INT 7
36581: PUSH
36582: LD_INT 8
36584: PUSH
36585: LD_INT 13
36587: PUSH
36588: LD_INT 12
36590: PUSH
36591: LD_INT 15
36593: PUSH
36594: LD_INT 11
36596: PUSH
36597: LD_INT 14
36599: PUSH
36600: LD_INT 10
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: IN
36614: IFFALSE 36624
// btype = b_lab ;
36616: LD_ADDR_VAR 0 1
36620: PUSH
36621: LD_INT 6
36623: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36624: LD_VAR 0 6
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: LIST
36642: IN
36643: NOT
36644: PUSH
36645: LD_VAR 0 1
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: LD_INT 6
36664: PUSH
36665: LD_INT 36
36667: PUSH
36668: LD_INT 4
36670: PUSH
36671: LD_INT 5
36673: PUSH
36674: LD_INT 31
36676: PUSH
36677: LD_INT 32
36679: PUSH
36680: LD_INT 33
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: IN
36696: NOT
36697: PUSH
36698: LD_VAR 0 6
36702: PUSH
36703: LD_INT 1
36705: EQUAL
36706: AND
36707: OR
36708: PUSH
36709: LD_VAR 0 1
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: LD_INT 3
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: IN
36724: NOT
36725: PUSH
36726: LD_VAR 0 6
36730: PUSH
36731: LD_INT 2
36733: EQUAL
36734: AND
36735: OR
36736: IFFALSE 36746
// mode = 0 ;
36738: LD_ADDR_VAR 0 6
36742: PUSH
36743: LD_INT 0
36745: ST_TO_ADDR
// case mode of 0 :
36746: LD_VAR 0 6
36750: PUSH
36751: LD_INT 0
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36759
36757: GO 48212
36759: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36760: LD_ADDR_VAR 0 11
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: LD_INT 2
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 3
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 3
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36953: LD_ADDR_VAR 0 12
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 3
37121: NEG
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37149: LD_ADDR_VAR 0 13
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 2
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 3
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: LD_INT 3
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37348: LD_ADDR_VAR 0 14
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: LD_INT 3
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 3
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 2
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37544: LD_ADDR_VAR 0 15
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: NEG
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 3
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37737: LD_ADDR_VAR 0 16
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 2
37860: NEG
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 3
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: LD_INT 3
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37930: LD_ADDR_VAR 0 17
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 2
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38160: LD_ADDR_VAR 0 18
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: NEG
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38390: LD_ADDR_VAR 0 19
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38620: LD_ADDR_VAR 0 20
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38850: LD_ADDR_VAR 0 21
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39080: LD_ADDR_VAR 0 22
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: NEG
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 2
39279: NEG
39280: PUSH
39281: LD_INT 2
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39310: LD_ADDR_VAR 0 23
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 3
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39590: LD_ADDR_VAR 0 24
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 2
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39866: LD_ADDR_VAR 0 25
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 3
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 3
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 3
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40140: LD_ADDR_VAR 0 26
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40416: LD_ADDR_VAR 0 27
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 3
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40696: LD_ADDR_VAR 0 28
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: LD_INT 3
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 3
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: NEG
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40978: LD_ADDR_VAR 0 29
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: NEG
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: LD_INT 3
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 3
41222: NEG
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41257: LD_ADDR_VAR 0 30
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: LD_INT 3
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 3
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41535: LD_ADDR_VAR 0 31
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: LD_INT 3
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 3
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: NEG
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41813: LD_ADDR_VAR 0 32
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42091: LD_ADDR_VAR 0 33
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: LD_INT 3
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 3
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42370: LD_ADDR_VAR 0 34
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: LD_INT 3
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 3
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 3
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 3
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42650: LD_ADDR_VAR 0 35
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42762: LD_ADDR_VAR 0 36
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42874: LD_ADDR_VAR 0 37
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42986: LD_ADDR_VAR 0 38
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43098: LD_ADDR_VAR 0 39
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43210: LD_ADDR_VAR 0 40
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43322: LD_ADDR_VAR 0 41
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 3
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 3
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: PUSH
43566: LD_INT 3
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 3
43631: NEG
43632: PUSH
43633: LD_INT 3
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43672: LD_ADDR_VAR 0 42
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 3
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 3
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 3
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: LD_INT 3
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 3
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 3
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44022: LD_ADDR_VAR 0 43
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 2
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: LD_INT 3
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 3
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 3
44318: NEG
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44370: LD_ADDR_VAR 0 44
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 3
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: LD_INT 3
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 3
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: LD_INT 3
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44720: LD_ADDR_VAR 0 45
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: LD_INT 3
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 3
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 3
45029: NEG
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45070: LD_ADDR_VAR 0 46
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 3
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45418: LD_ADDR_VAR 0 47
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45569: LD_ADDR_VAR 0 48
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45716: LD_ADDR_VAR 0 49
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45860: LD_ADDR_VAR 0 50
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46004: LD_ADDR_VAR 0 51
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46151: LD_ADDR_VAR 0 52
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46302: LD_ADDR_VAR 0 53
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46532: LD_ADDR_VAR 0 54
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46762: LD_ADDR_VAR 0 55
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46992: LD_ADDR_VAR 0 56
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47222: LD_ADDR_VAR 0 57
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47452: LD_ADDR_VAR 0 58
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47682: LD_ADDR_VAR 0 59
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47770: LD_ADDR_VAR 0 60
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47858: LD_ADDR_VAR 0 61
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47946: LD_ADDR_VAR 0 62
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48034: LD_ADDR_VAR 0 63
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48122: LD_ADDR_VAR 0 64
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: ST_TO_ADDR
// end ; 1 :
48210: GO 54107
48212: LD_INT 1
48214: DOUBLE
48215: EQUAL
48216: IFTRUE 48220
48218: GO 50843
48220: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48221: LD_ADDR_VAR 0 11
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 3
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48265: LD_ADDR_VAR 0 12
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48306: LD_ADDR_VAR 0 13
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: LD_INT 3
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48346: LD_ADDR_VAR 0 14
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48387: LD_ADDR_VAR 0 15
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48431: LD_ADDR_VAR 0 16
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: LD_INT 3
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48477: LD_ADDR_VAR 0 17
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 3
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48521: LD_ADDR_VAR 0 18
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 3
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48562: LD_ADDR_VAR 0 19
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: LD_INT 3
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: LD_INT 3
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48602: LD_ADDR_VAR 0 20
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: LIST
48642: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48643: LD_ADDR_VAR 0 21
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48687: LD_ADDR_VAR 0 22
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48733: LD_ADDR_VAR 0 23
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 4
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48777: LD_ADDR_VAR 0 24
48781: PUSH
48782: LD_INT 3
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 4
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: LIST
48817: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48818: LD_ADDR_VAR 0 25
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 4
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 4
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48858: LD_ADDR_VAR 0 26
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 4
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48899: LD_ADDR_VAR 0 27
48903: PUSH
48904: LD_INT 3
48906: NEG
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 3
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 4
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48943: LD_ADDR_VAR 0 28
48947: PUSH
48948: LD_INT 3
48950: NEG
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 3
48962: NEG
48963: PUSH
48964: LD_INT 4
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 4
48974: NEG
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48989: LD_ADDR_VAR 0 29
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 4
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 4
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 5
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 5
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 4
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 6
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 6
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 5
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49144: LD_ADDR_VAR 0 30
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 4
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 4
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 4
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 5
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 5
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 6
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 6
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49287: LD_ADDR_VAR 0 31
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: LD_INT 3
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 3
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 4
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 4
49334: PUSH
49335: LD_INT 4
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 3
49344: PUSH
49345: LD_INT 4
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 5
49354: PUSH
49355: LD_INT 4
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 5
49364: PUSH
49365: LD_INT 5
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 4
49374: PUSH
49375: LD_INT 5
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 6
49384: PUSH
49385: LD_INT 5
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 6
49394: PUSH
49395: LD_INT 6
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 5
49404: PUSH
49405: LD_INT 6
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49426: LD_ADDR_VAR 0 32
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 4
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 3
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 5
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 5
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 4
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 6
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 6
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 5
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49569: LD_ADDR_VAR 0 33
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 3
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 4
49621: NEG
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 4
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 4
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 5
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 5
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 5
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 6
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 6
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49724: LD_ADDR_VAR 0 34
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 3
49767: NEG
49768: PUSH
49769: LD_INT 4
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 4
49779: NEG
49780: PUSH
49781: LD_INT 3
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 4
49791: NEG
49792: PUSH
49793: LD_INT 4
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 4
49803: NEG
49804: PUSH
49805: LD_INT 5
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 5
49815: NEG
49816: PUSH
49817: LD_INT 4
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 5
49827: NEG
49828: PUSH
49829: LD_INT 5
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 5
49839: NEG
49840: PUSH
49841: LD_INT 6
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 6
49851: NEG
49852: PUSH
49853: LD_INT 5
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 6
49863: NEG
49864: PUSH
49865: LD_INT 6
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49887: LD_ADDR_VAR 0 41
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49931: LD_ADDR_VAR 0 42
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49972: LD_ADDR_VAR 0 43
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50012: LD_ADDR_VAR 0 44
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: LIST
50052: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50053: LD_ADDR_VAR 0 45
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 3
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50097: LD_ADDR_VAR 0 46
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50143: LD_ADDR_VAR 0 47
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 3
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50176: LD_ADDR_VAR 0 48
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50207: LD_ADDR_VAR 0 49
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50236: LD_ADDR_VAR 0 50
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50265: LD_ADDR_VAR 0 51
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50296: LD_ADDR_VAR 0 52
50300: PUSH
50301: LD_INT 3
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50329: LD_ADDR_VAR 0 53
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50373: LD_ADDR_VAR 0 54
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50414: LD_ADDR_VAR 0 55
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 3
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50454: LD_ADDR_VAR 0 56
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50495: LD_ADDR_VAR 0 57
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50539: LD_ADDR_VAR 0 58
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50585: LD_ADDR_VAR 0 59
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50629: LD_ADDR_VAR 0 60
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50670: LD_ADDR_VAR 0 61
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50710: LD_ADDR_VAR 0 62
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50751: LD_ADDR_VAR 0 63
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50795: LD_ADDR_VAR 0 64
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// end ; 2 :
50841: GO 54107
50843: LD_INT 2
50845: DOUBLE
50846: EQUAL
50847: IFTRUE 50851
50849: GO 54106
50851: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50852: LD_ADDR_VAR 0 29
50856: PUSH
50857: LD_INT 4
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 5
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 5
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 5
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 4
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 4
50982: PUSH
50983: LD_INT 4
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: LD_INT 4
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 4
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 4
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 4
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 5
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 5
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: LD_INT 5
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 3
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 4
51202: NEG
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 4
51237: NEG
51238: PUSH
51239: LD_INT 4
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 4
51249: NEG
51250: PUSH
51251: LD_INT 5
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: LD_INT 4
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 4
51285: NEG
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 5
51297: NEG
51298: PUSH
51299: LD_INT 4
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 5
51309: NEG
51310: PUSH
51311: LD_INT 5
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 5
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 5
51333: NEG
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51390: LD_ADDR_VAR 0 30
51394: PUSH
51395: LD_INT 4
51397: PUSH
51398: LD_INT 4
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 4
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 5
51417: PUSH
51418: LD_INT 4
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 5
51427: PUSH
51428: LD_INT 5
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 4
51437: PUSH
51438: LD_INT 5
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: LD_INT 4
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 5
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: LD_INT 5
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: LD_INT 4
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 4
51580: NEG
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 4
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 5
51636: NEG
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 5
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 5
51659: NEG
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: LD_INT 4
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: NEG
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 4
51742: NEG
51743: PUSH
51744: LD_INT 3
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 4
51754: NEG
51755: PUSH
51756: LD_INT 4
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: LD_INT 4
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 4
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 5
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 4
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 4
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 5
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 5
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51937: LD_ADDR_VAR 0 31
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 4
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 4
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 5
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 5
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 5
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 4
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 4
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 4
52116: NEG
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 4
52139: NEG
52140: PUSH
52141: LD_INT 4
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 4
52151: NEG
52152: PUSH
52153: LD_INT 5
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 4
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 4
52187: NEG
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 5
52199: NEG
52200: PUSH
52201: LD_INT 4
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 5
52211: NEG
52212: PUSH
52213: LD_INT 5
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 5
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 5
52235: NEG
52236: PUSH
52237: LD_INT 3
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 4
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: LD_INT 4
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 4
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 4
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 5
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 5
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 5
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52487: LD_ADDR_VAR 0 32
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 5
52550: NEG
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 5
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 5
52573: NEG
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 3
52596: NEG
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: LD_INT 4
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 4
52656: NEG
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 4
52668: NEG
52669: PUSH
52670: LD_INT 4
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 4
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 4
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 4
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 5
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 4
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 4
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 5
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: LD_INT 5
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 4
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 4
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 4
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 4
52899: PUSH
52900: LD_INT 4
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 4
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 5
52919: PUSH
52920: LD_INT 4
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 5
52929: PUSH
52930: LD_INT 5
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: LD_INT 5
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: LD_INT 4
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: LD_INT 5
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53034: LD_ADDR_VAR 0 33
53038: PUSH
53039: LD_INT 4
53041: NEG
53042: PUSH
53043: LD_INT 4
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 4
53053: NEG
53054: PUSH
53055: LD_INT 5
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: LD_INT 4
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: LD_INT 3
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 4
53089: NEG
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 5
53101: NEG
53102: PUSH
53103: LD_INT 4
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 5
53113: NEG
53114: PUSH
53115: LD_INT 5
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: LD_INT 5
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 5
53137: NEG
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 4
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 4
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 4
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 4
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 4
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 5
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 5
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 4
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 5
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: LD_INT 3
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 4
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 4
53374: PUSH
53375: LD_INT 4
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 4
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 4
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 4
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 4
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 5
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 5
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 4
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 5
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53572: LD_ADDR_VAR 0 34
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 4
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 5
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 4
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 4
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 5
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 3
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: LD_INT 5
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 3
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 4
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 4
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 4
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 4
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: LD_INT 4
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 5
53804: PUSH
53805: LD_INT 5
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 4
53814: PUSH
53815: LD_INT 5
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: LD_INT 4
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 5
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 5
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 4
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 4
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 4
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 4
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 4
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 4
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 5
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 5
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 5
54036: NEG
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// end ; end ;
54104: GO 54107
54106: POP
// case btype of b_depot , b_warehouse :
54107: LD_VAR 0 1
54111: PUSH
54112: LD_INT 0
54114: DOUBLE
54115: EQUAL
54116: IFTRUE 54126
54118: LD_INT 1
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54126
54124: GO 54327
54126: POP
// case nation of nation_american :
54127: LD_VAR 0 5
54131: PUSH
54132: LD_INT 1
54134: DOUBLE
54135: EQUAL
54136: IFTRUE 54140
54138: GO 54196
54140: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54141: LD_ADDR_VAR 0 9
54145: PUSH
54146: LD_VAR 0 11
54150: PUSH
54151: LD_VAR 0 12
54155: PUSH
54156: LD_VAR 0 13
54160: PUSH
54161: LD_VAR 0 14
54165: PUSH
54166: LD_VAR 0 15
54170: PUSH
54171: LD_VAR 0 16
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: PUSH
54184: LD_VAR 0 4
54188: PUSH
54189: LD_INT 1
54191: PLUS
54192: ARRAY
54193: ST_TO_ADDR
54194: GO 54325
54196: LD_INT 2
54198: DOUBLE
54199: EQUAL
54200: IFTRUE 54204
54202: GO 54260
54204: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54205: LD_ADDR_VAR 0 9
54209: PUSH
54210: LD_VAR 0 17
54214: PUSH
54215: LD_VAR 0 18
54219: PUSH
54220: LD_VAR 0 19
54224: PUSH
54225: LD_VAR 0 20
54229: PUSH
54230: LD_VAR 0 21
54234: PUSH
54235: LD_VAR 0 22
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: PUSH
54248: LD_VAR 0 4
54252: PUSH
54253: LD_INT 1
54255: PLUS
54256: ARRAY
54257: ST_TO_ADDR
54258: GO 54325
54260: LD_INT 3
54262: DOUBLE
54263: EQUAL
54264: IFTRUE 54268
54266: GO 54324
54268: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54269: LD_ADDR_VAR 0 9
54273: PUSH
54274: LD_VAR 0 23
54278: PUSH
54279: LD_VAR 0 24
54283: PUSH
54284: LD_VAR 0 25
54288: PUSH
54289: LD_VAR 0 26
54293: PUSH
54294: LD_VAR 0 27
54298: PUSH
54299: LD_VAR 0 28
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: PUSH
54312: LD_VAR 0 4
54316: PUSH
54317: LD_INT 1
54319: PLUS
54320: ARRAY
54321: ST_TO_ADDR
54322: GO 54325
54324: POP
54325: GO 54880
54327: LD_INT 2
54329: DOUBLE
54330: EQUAL
54331: IFTRUE 54341
54333: LD_INT 3
54335: DOUBLE
54336: EQUAL
54337: IFTRUE 54341
54339: GO 54397
54341: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54342: LD_ADDR_VAR 0 9
54346: PUSH
54347: LD_VAR 0 29
54351: PUSH
54352: LD_VAR 0 30
54356: PUSH
54357: LD_VAR 0 31
54361: PUSH
54362: LD_VAR 0 32
54366: PUSH
54367: LD_VAR 0 33
54371: PUSH
54372: LD_VAR 0 34
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: PUSH
54385: LD_VAR 0 4
54389: PUSH
54390: LD_INT 1
54392: PLUS
54393: ARRAY
54394: ST_TO_ADDR
54395: GO 54880
54397: LD_INT 16
54399: DOUBLE
54400: EQUAL
54401: IFTRUE 54459
54403: LD_INT 17
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54459
54409: LD_INT 18
54411: DOUBLE
54412: EQUAL
54413: IFTRUE 54459
54415: LD_INT 19
54417: DOUBLE
54418: EQUAL
54419: IFTRUE 54459
54421: LD_INT 22
54423: DOUBLE
54424: EQUAL
54425: IFTRUE 54459
54427: LD_INT 20
54429: DOUBLE
54430: EQUAL
54431: IFTRUE 54459
54433: LD_INT 21
54435: DOUBLE
54436: EQUAL
54437: IFTRUE 54459
54439: LD_INT 23
54441: DOUBLE
54442: EQUAL
54443: IFTRUE 54459
54445: LD_INT 24
54447: DOUBLE
54448: EQUAL
54449: IFTRUE 54459
54451: LD_INT 25
54453: DOUBLE
54454: EQUAL
54455: IFTRUE 54459
54457: GO 54515
54459: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54460: LD_ADDR_VAR 0 9
54464: PUSH
54465: LD_VAR 0 35
54469: PUSH
54470: LD_VAR 0 36
54474: PUSH
54475: LD_VAR 0 37
54479: PUSH
54480: LD_VAR 0 38
54484: PUSH
54485: LD_VAR 0 39
54489: PUSH
54490: LD_VAR 0 40
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: PUSH
54503: LD_VAR 0 4
54507: PUSH
54508: LD_INT 1
54510: PLUS
54511: ARRAY
54512: ST_TO_ADDR
54513: GO 54880
54515: LD_INT 6
54517: DOUBLE
54518: EQUAL
54519: IFTRUE 54571
54521: LD_INT 7
54523: DOUBLE
54524: EQUAL
54525: IFTRUE 54571
54527: LD_INT 8
54529: DOUBLE
54530: EQUAL
54531: IFTRUE 54571
54533: LD_INT 13
54535: DOUBLE
54536: EQUAL
54537: IFTRUE 54571
54539: LD_INT 12
54541: DOUBLE
54542: EQUAL
54543: IFTRUE 54571
54545: LD_INT 15
54547: DOUBLE
54548: EQUAL
54549: IFTRUE 54571
54551: LD_INT 11
54553: DOUBLE
54554: EQUAL
54555: IFTRUE 54571
54557: LD_INT 14
54559: DOUBLE
54560: EQUAL
54561: IFTRUE 54571
54563: LD_INT 10
54565: DOUBLE
54566: EQUAL
54567: IFTRUE 54571
54569: GO 54627
54571: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54572: LD_ADDR_VAR 0 9
54576: PUSH
54577: LD_VAR 0 41
54581: PUSH
54582: LD_VAR 0 42
54586: PUSH
54587: LD_VAR 0 43
54591: PUSH
54592: LD_VAR 0 44
54596: PUSH
54597: LD_VAR 0 45
54601: PUSH
54602: LD_VAR 0 46
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: PUSH
54615: LD_VAR 0 4
54619: PUSH
54620: LD_INT 1
54622: PLUS
54623: ARRAY
54624: ST_TO_ADDR
54625: GO 54880
54627: LD_INT 36
54629: DOUBLE
54630: EQUAL
54631: IFTRUE 54635
54633: GO 54691
54635: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54636: LD_ADDR_VAR 0 9
54640: PUSH
54641: LD_VAR 0 47
54645: PUSH
54646: LD_VAR 0 48
54650: PUSH
54651: LD_VAR 0 49
54655: PUSH
54656: LD_VAR 0 50
54660: PUSH
54661: LD_VAR 0 51
54665: PUSH
54666: LD_VAR 0 52
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: PUSH
54679: LD_VAR 0 4
54683: PUSH
54684: LD_INT 1
54686: PLUS
54687: ARRAY
54688: ST_TO_ADDR
54689: GO 54880
54691: LD_INT 4
54693: DOUBLE
54694: EQUAL
54695: IFTRUE 54717
54697: LD_INT 5
54699: DOUBLE
54700: EQUAL
54701: IFTRUE 54717
54703: LD_INT 34
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54717
54709: LD_INT 37
54711: DOUBLE
54712: EQUAL
54713: IFTRUE 54717
54715: GO 54773
54717: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54718: LD_ADDR_VAR 0 9
54722: PUSH
54723: LD_VAR 0 53
54727: PUSH
54728: LD_VAR 0 54
54732: PUSH
54733: LD_VAR 0 55
54737: PUSH
54738: LD_VAR 0 56
54742: PUSH
54743: LD_VAR 0 57
54747: PUSH
54748: LD_VAR 0 58
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: PUSH
54761: LD_VAR 0 4
54765: PUSH
54766: LD_INT 1
54768: PLUS
54769: ARRAY
54770: ST_TO_ADDR
54771: GO 54880
54773: LD_INT 31
54775: DOUBLE
54776: EQUAL
54777: IFTRUE 54823
54779: LD_INT 32
54781: DOUBLE
54782: EQUAL
54783: IFTRUE 54823
54785: LD_INT 33
54787: DOUBLE
54788: EQUAL
54789: IFTRUE 54823
54791: LD_INT 27
54793: DOUBLE
54794: EQUAL
54795: IFTRUE 54823
54797: LD_INT 26
54799: DOUBLE
54800: EQUAL
54801: IFTRUE 54823
54803: LD_INT 28
54805: DOUBLE
54806: EQUAL
54807: IFTRUE 54823
54809: LD_INT 29
54811: DOUBLE
54812: EQUAL
54813: IFTRUE 54823
54815: LD_INT 30
54817: DOUBLE
54818: EQUAL
54819: IFTRUE 54823
54821: GO 54879
54823: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54824: LD_ADDR_VAR 0 9
54828: PUSH
54829: LD_VAR 0 59
54833: PUSH
54834: LD_VAR 0 60
54838: PUSH
54839: LD_VAR 0 61
54843: PUSH
54844: LD_VAR 0 62
54848: PUSH
54849: LD_VAR 0 63
54853: PUSH
54854: LD_VAR 0 64
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: PUSH
54867: LD_VAR 0 4
54871: PUSH
54872: LD_INT 1
54874: PLUS
54875: ARRAY
54876: ST_TO_ADDR
54877: GO 54880
54879: POP
// temp_list2 = [ ] ;
54880: LD_ADDR_VAR 0 10
54884: PUSH
54885: EMPTY
54886: ST_TO_ADDR
// for i in temp_list do
54887: LD_ADDR_VAR 0 8
54891: PUSH
54892: LD_VAR 0 9
54896: PUSH
54897: FOR_IN
54898: IFFALSE 54950
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54900: LD_ADDR_VAR 0 10
54904: PUSH
54905: LD_VAR 0 10
54909: PUSH
54910: LD_VAR 0 8
54914: PUSH
54915: LD_INT 1
54917: ARRAY
54918: PUSH
54919: LD_VAR 0 2
54923: PLUS
54924: PUSH
54925: LD_VAR 0 8
54929: PUSH
54930: LD_INT 2
54932: ARRAY
54933: PUSH
54934: LD_VAR 0 3
54938: PLUS
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: ADD
54947: ST_TO_ADDR
54948: GO 54897
54950: POP
54951: POP
// result = temp_list2 ;
54952: LD_ADDR_VAR 0 7
54956: PUSH
54957: LD_VAR 0 10
54961: ST_TO_ADDR
// end ;
54962: LD_VAR 0 7
54966: RET
// export function EnemyInRange ( unit , dist ) ; begin
54967: LD_INT 0
54969: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54970: LD_ADDR_VAR 0 3
54974: PUSH
54975: LD_VAR 0 1
54979: PPUSH
54980: CALL_OW 255
54984: PPUSH
54985: LD_VAR 0 1
54989: PPUSH
54990: CALL_OW 250
54994: PPUSH
54995: LD_VAR 0 1
54999: PPUSH
55000: CALL_OW 251
55004: PPUSH
55005: LD_VAR 0 2
55009: PPUSH
55010: CALL 28363 0 4
55014: PUSH
55015: LD_INT 4
55017: ARRAY
55018: ST_TO_ADDR
// end ;
55019: LD_VAR 0 3
55023: RET
// export function PlayerSeeMe ( unit ) ; begin
55024: LD_INT 0
55026: PPUSH
// result := See ( your_side , unit ) ;
55027: LD_ADDR_VAR 0 2
55031: PUSH
55032: LD_OWVAR 2
55036: PPUSH
55037: LD_VAR 0 1
55041: PPUSH
55042: CALL_OW 292
55046: ST_TO_ADDR
// end ;
55047: LD_VAR 0 2
55051: RET
// export function ReverseDir ( unit ) ; begin
55052: LD_INT 0
55054: PPUSH
// if not unit then
55055: LD_VAR 0 1
55059: NOT
55060: IFFALSE 55064
// exit ;
55062: GO 55087
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55064: LD_ADDR_VAR 0 2
55068: PUSH
55069: LD_VAR 0 1
55073: PPUSH
55074: CALL_OW 254
55078: PUSH
55079: LD_INT 3
55081: PLUS
55082: PUSH
55083: LD_INT 6
55085: MOD
55086: ST_TO_ADDR
// end ;
55087: LD_VAR 0 2
55091: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55092: LD_INT 0
55094: PPUSH
55095: PPUSH
55096: PPUSH
55097: PPUSH
55098: PPUSH
// if not hexes then
55099: LD_VAR 0 2
55103: NOT
55104: IFFALSE 55108
// exit ;
55106: GO 55256
// dist := 9999 ;
55108: LD_ADDR_VAR 0 5
55112: PUSH
55113: LD_INT 9999
55115: ST_TO_ADDR
// for i = 1 to hexes do
55116: LD_ADDR_VAR 0 4
55120: PUSH
55121: DOUBLE
55122: LD_INT 1
55124: DEC
55125: ST_TO_ADDR
55126: LD_VAR 0 2
55130: PUSH
55131: FOR_TO
55132: IFFALSE 55244
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55134: LD_VAR 0 1
55138: PPUSH
55139: LD_VAR 0 2
55143: PUSH
55144: LD_VAR 0 4
55148: ARRAY
55149: PUSH
55150: LD_INT 1
55152: ARRAY
55153: PPUSH
55154: LD_VAR 0 2
55158: PUSH
55159: LD_VAR 0 4
55163: ARRAY
55164: PUSH
55165: LD_INT 2
55167: ARRAY
55168: PPUSH
55169: CALL_OW 297
55173: PUSH
55174: LD_VAR 0 5
55178: LESS
55179: IFFALSE 55242
// begin hex := hexes [ i ] ;
55181: LD_ADDR_VAR 0 7
55185: PUSH
55186: LD_VAR 0 2
55190: PUSH
55191: LD_VAR 0 4
55195: ARRAY
55196: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55197: LD_ADDR_VAR 0 5
55201: PUSH
55202: LD_VAR 0 1
55206: PPUSH
55207: LD_VAR 0 2
55211: PUSH
55212: LD_VAR 0 4
55216: ARRAY
55217: PUSH
55218: LD_INT 1
55220: ARRAY
55221: PPUSH
55222: LD_VAR 0 2
55226: PUSH
55227: LD_VAR 0 4
55231: ARRAY
55232: PUSH
55233: LD_INT 2
55235: ARRAY
55236: PPUSH
55237: CALL_OW 297
55241: ST_TO_ADDR
// end ; end ;
55242: GO 55131
55244: POP
55245: POP
// result := hex ;
55246: LD_ADDR_VAR 0 3
55250: PUSH
55251: LD_VAR 0 7
55255: ST_TO_ADDR
// end ;
55256: LD_VAR 0 3
55260: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55261: LD_INT 0
55263: PPUSH
55264: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55265: LD_VAR 0 1
55269: NOT
55270: PUSH
55271: LD_VAR 0 1
55275: PUSH
55276: LD_INT 21
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 23
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PPUSH
55300: CALL_OW 69
55304: IN
55305: NOT
55306: OR
55307: IFFALSE 55311
// exit ;
55309: GO 55358
// for i = 1 to 3 do
55311: LD_ADDR_VAR 0 3
55315: PUSH
55316: DOUBLE
55317: LD_INT 1
55319: DEC
55320: ST_TO_ADDR
55321: LD_INT 3
55323: PUSH
55324: FOR_TO
55325: IFFALSE 55356
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55327: LD_VAR 0 1
55331: PPUSH
55332: CALL_OW 250
55336: PPUSH
55337: LD_VAR 0 1
55341: PPUSH
55342: CALL_OW 251
55346: PPUSH
55347: LD_INT 1
55349: PPUSH
55350: CALL_OW 453
55354: GO 55324
55356: POP
55357: POP
// end ;
55358: LD_VAR 0 2
55362: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55363: LD_INT 0
55365: PPUSH
55366: PPUSH
55367: PPUSH
55368: PPUSH
55369: PPUSH
55370: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55371: LD_VAR 0 1
55375: NOT
55376: PUSH
55377: LD_VAR 0 2
55381: NOT
55382: OR
55383: PUSH
55384: LD_VAR 0 1
55388: PPUSH
55389: CALL_OW 314
55393: OR
55394: IFFALSE 55398
// exit ;
55396: GO 55839
// x := GetX ( enemy_unit ) ;
55398: LD_ADDR_VAR 0 7
55402: PUSH
55403: LD_VAR 0 2
55407: PPUSH
55408: CALL_OW 250
55412: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55413: LD_ADDR_VAR 0 8
55417: PUSH
55418: LD_VAR 0 2
55422: PPUSH
55423: CALL_OW 251
55427: ST_TO_ADDR
// if not x or not y then
55428: LD_VAR 0 7
55432: NOT
55433: PUSH
55434: LD_VAR 0 8
55438: NOT
55439: OR
55440: IFFALSE 55444
// exit ;
55442: GO 55839
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55444: LD_ADDR_VAR 0 6
55448: PUSH
55449: LD_VAR 0 7
55453: PPUSH
55454: LD_INT 0
55456: PPUSH
55457: LD_INT 4
55459: PPUSH
55460: CALL_OW 272
55464: PUSH
55465: LD_VAR 0 8
55469: PPUSH
55470: LD_INT 0
55472: PPUSH
55473: LD_INT 4
55475: PPUSH
55476: CALL_OW 273
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_VAR 0 7
55489: PPUSH
55490: LD_INT 1
55492: PPUSH
55493: LD_INT 4
55495: PPUSH
55496: CALL_OW 272
55500: PUSH
55501: LD_VAR 0 8
55505: PPUSH
55506: LD_INT 1
55508: PPUSH
55509: LD_INT 4
55511: PPUSH
55512: CALL_OW 273
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_VAR 0 7
55525: PPUSH
55526: LD_INT 2
55528: PPUSH
55529: LD_INT 4
55531: PPUSH
55532: CALL_OW 272
55536: PUSH
55537: LD_VAR 0 8
55541: PPUSH
55542: LD_INT 2
55544: PPUSH
55545: LD_INT 4
55547: PPUSH
55548: CALL_OW 273
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_VAR 0 7
55561: PPUSH
55562: LD_INT 3
55564: PPUSH
55565: LD_INT 4
55567: PPUSH
55568: CALL_OW 272
55572: PUSH
55573: LD_VAR 0 8
55577: PPUSH
55578: LD_INT 3
55580: PPUSH
55581: LD_INT 4
55583: PPUSH
55584: CALL_OW 273
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_VAR 0 7
55597: PPUSH
55598: LD_INT 4
55600: PPUSH
55601: LD_INT 4
55603: PPUSH
55604: CALL_OW 272
55608: PUSH
55609: LD_VAR 0 8
55613: PPUSH
55614: LD_INT 4
55616: PPUSH
55617: LD_INT 4
55619: PPUSH
55620: CALL_OW 273
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_VAR 0 7
55633: PPUSH
55634: LD_INT 5
55636: PPUSH
55637: LD_INT 4
55639: PPUSH
55640: CALL_OW 272
55644: PUSH
55645: LD_VAR 0 8
55649: PPUSH
55650: LD_INT 5
55652: PPUSH
55653: LD_INT 4
55655: PPUSH
55656: CALL_OW 273
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// for i = tmp downto 1 do
55673: LD_ADDR_VAR 0 4
55677: PUSH
55678: DOUBLE
55679: LD_VAR 0 6
55683: INC
55684: ST_TO_ADDR
55685: LD_INT 1
55687: PUSH
55688: FOR_DOWNTO
55689: IFFALSE 55790
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55691: LD_VAR 0 6
55695: PUSH
55696: LD_VAR 0 4
55700: ARRAY
55701: PUSH
55702: LD_INT 1
55704: ARRAY
55705: PPUSH
55706: LD_VAR 0 6
55710: PUSH
55711: LD_VAR 0 4
55715: ARRAY
55716: PUSH
55717: LD_INT 2
55719: ARRAY
55720: PPUSH
55721: CALL_OW 488
55725: NOT
55726: PUSH
55727: LD_VAR 0 6
55731: PUSH
55732: LD_VAR 0 4
55736: ARRAY
55737: PUSH
55738: LD_INT 1
55740: ARRAY
55741: PPUSH
55742: LD_VAR 0 6
55746: PUSH
55747: LD_VAR 0 4
55751: ARRAY
55752: PUSH
55753: LD_INT 2
55755: ARRAY
55756: PPUSH
55757: CALL_OW 428
55761: PUSH
55762: LD_INT 0
55764: NONEQUAL
55765: OR
55766: IFFALSE 55788
// tmp := Delete ( tmp , i ) ;
55768: LD_ADDR_VAR 0 6
55772: PUSH
55773: LD_VAR 0 6
55777: PPUSH
55778: LD_VAR 0 4
55782: PPUSH
55783: CALL_OW 3
55787: ST_TO_ADDR
55788: GO 55688
55790: POP
55791: POP
// j := GetClosestHex ( unit , tmp ) ;
55792: LD_ADDR_VAR 0 5
55796: PUSH
55797: LD_VAR 0 1
55801: PPUSH
55802: LD_VAR 0 6
55806: PPUSH
55807: CALL 55092 0 2
55811: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55812: LD_VAR 0 1
55816: PPUSH
55817: LD_VAR 0 5
55821: PUSH
55822: LD_INT 1
55824: ARRAY
55825: PPUSH
55826: LD_VAR 0 5
55830: PUSH
55831: LD_INT 2
55833: ARRAY
55834: PPUSH
55835: CALL_OW 111
// end ;
55839: LD_VAR 0 3
55843: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55844: LD_INT 0
55846: PPUSH
55847: PPUSH
55848: PPUSH
// uc_side = 0 ;
55849: LD_ADDR_OWVAR 20
55853: PUSH
55854: LD_INT 0
55856: ST_TO_ADDR
// uc_nation = 0 ;
55857: LD_ADDR_OWVAR 21
55861: PUSH
55862: LD_INT 0
55864: ST_TO_ADDR
// InitHc_All ( ) ;
55865: CALL_OW 584
// InitVc ;
55869: CALL_OW 20
// if mastodonts then
55873: LD_VAR 0 6
55877: IFFALSE 55944
// for i = 1 to mastodonts do
55879: LD_ADDR_VAR 0 11
55883: PUSH
55884: DOUBLE
55885: LD_INT 1
55887: DEC
55888: ST_TO_ADDR
55889: LD_VAR 0 6
55893: PUSH
55894: FOR_TO
55895: IFFALSE 55942
// begin vc_chassis := 31 ;
55897: LD_ADDR_OWVAR 37
55901: PUSH
55902: LD_INT 31
55904: ST_TO_ADDR
// vc_control := control_rider ;
55905: LD_ADDR_OWVAR 38
55909: PUSH
55910: LD_INT 4
55912: ST_TO_ADDR
// animal := CreateVehicle ;
55913: LD_ADDR_VAR 0 12
55917: PUSH
55918: CALL_OW 45
55922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55923: LD_VAR 0 12
55927: PPUSH
55928: LD_VAR 0 8
55932: PPUSH
55933: LD_INT 0
55935: PPUSH
55936: CALL 58132 0 3
// end ;
55940: GO 55894
55942: POP
55943: POP
// if horses then
55944: LD_VAR 0 5
55948: IFFALSE 56015
// for i = 1 to horses do
55950: LD_ADDR_VAR 0 11
55954: PUSH
55955: DOUBLE
55956: LD_INT 1
55958: DEC
55959: ST_TO_ADDR
55960: LD_VAR 0 5
55964: PUSH
55965: FOR_TO
55966: IFFALSE 56013
// begin hc_class := 21 ;
55968: LD_ADDR_OWVAR 28
55972: PUSH
55973: LD_INT 21
55975: ST_TO_ADDR
// hc_gallery :=  ;
55976: LD_ADDR_OWVAR 33
55980: PUSH
55981: LD_STRING 
55983: ST_TO_ADDR
// animal := CreateHuman ;
55984: LD_ADDR_VAR 0 12
55988: PUSH
55989: CALL_OW 44
55993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55994: LD_VAR 0 12
55998: PPUSH
55999: LD_VAR 0 8
56003: PPUSH
56004: LD_INT 0
56006: PPUSH
56007: CALL 58132 0 3
// end ;
56011: GO 55965
56013: POP
56014: POP
// if birds then
56015: LD_VAR 0 1
56019: IFFALSE 56086
// for i = 1 to birds do
56021: LD_ADDR_VAR 0 11
56025: PUSH
56026: DOUBLE
56027: LD_INT 1
56029: DEC
56030: ST_TO_ADDR
56031: LD_VAR 0 1
56035: PUSH
56036: FOR_TO
56037: IFFALSE 56084
// begin hc_class = 18 ;
56039: LD_ADDR_OWVAR 28
56043: PUSH
56044: LD_INT 18
56046: ST_TO_ADDR
// hc_gallery =  ;
56047: LD_ADDR_OWVAR 33
56051: PUSH
56052: LD_STRING 
56054: ST_TO_ADDR
// animal := CreateHuman ;
56055: LD_ADDR_VAR 0 12
56059: PUSH
56060: CALL_OW 44
56064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56065: LD_VAR 0 12
56069: PPUSH
56070: LD_VAR 0 8
56074: PPUSH
56075: LD_INT 0
56077: PPUSH
56078: CALL 58132 0 3
// end ;
56082: GO 56036
56084: POP
56085: POP
// if tigers then
56086: LD_VAR 0 2
56090: IFFALSE 56174
// for i = 1 to tigers do
56092: LD_ADDR_VAR 0 11
56096: PUSH
56097: DOUBLE
56098: LD_INT 1
56100: DEC
56101: ST_TO_ADDR
56102: LD_VAR 0 2
56106: PUSH
56107: FOR_TO
56108: IFFALSE 56172
// begin hc_class = class_tiger ;
56110: LD_ADDR_OWVAR 28
56114: PUSH
56115: LD_INT 14
56117: ST_TO_ADDR
// hc_gallery =  ;
56118: LD_ADDR_OWVAR 33
56122: PUSH
56123: LD_STRING 
56125: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56126: LD_ADDR_OWVAR 35
56130: PUSH
56131: LD_INT 7
56133: NEG
56134: PPUSH
56135: LD_INT 7
56137: PPUSH
56138: CALL_OW 12
56142: ST_TO_ADDR
// animal := CreateHuman ;
56143: LD_ADDR_VAR 0 12
56147: PUSH
56148: CALL_OW 44
56152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56153: LD_VAR 0 12
56157: PPUSH
56158: LD_VAR 0 8
56162: PPUSH
56163: LD_INT 0
56165: PPUSH
56166: CALL 58132 0 3
// end ;
56170: GO 56107
56172: POP
56173: POP
// if apemans then
56174: LD_VAR 0 3
56178: IFFALSE 56301
// for i = 1 to apemans do
56180: LD_ADDR_VAR 0 11
56184: PUSH
56185: DOUBLE
56186: LD_INT 1
56188: DEC
56189: ST_TO_ADDR
56190: LD_VAR 0 3
56194: PUSH
56195: FOR_TO
56196: IFFALSE 56299
// begin hc_class = class_apeman ;
56198: LD_ADDR_OWVAR 28
56202: PUSH
56203: LD_INT 12
56205: ST_TO_ADDR
// hc_gallery =  ;
56206: LD_ADDR_OWVAR 33
56210: PUSH
56211: LD_STRING 
56213: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56214: LD_ADDR_OWVAR 35
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PPUSH
56223: LD_INT 2
56225: PPUSH
56226: CALL_OW 12
56230: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56231: LD_ADDR_OWVAR 31
56235: PUSH
56236: LD_INT 1
56238: PPUSH
56239: LD_INT 3
56241: PPUSH
56242: CALL_OW 12
56246: PUSH
56247: LD_INT 1
56249: PPUSH
56250: LD_INT 3
56252: PPUSH
56253: CALL_OW 12
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// animal := CreateHuman ;
56270: LD_ADDR_VAR 0 12
56274: PUSH
56275: CALL_OW 44
56279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56280: LD_VAR 0 12
56284: PPUSH
56285: LD_VAR 0 8
56289: PPUSH
56290: LD_INT 0
56292: PPUSH
56293: CALL 58132 0 3
// end ;
56297: GO 56195
56299: POP
56300: POP
// if enchidnas then
56301: LD_VAR 0 4
56305: IFFALSE 56372
// for i = 1 to enchidnas do
56307: LD_ADDR_VAR 0 11
56311: PUSH
56312: DOUBLE
56313: LD_INT 1
56315: DEC
56316: ST_TO_ADDR
56317: LD_VAR 0 4
56321: PUSH
56322: FOR_TO
56323: IFFALSE 56370
// begin hc_class = 13 ;
56325: LD_ADDR_OWVAR 28
56329: PUSH
56330: LD_INT 13
56332: ST_TO_ADDR
// hc_gallery =  ;
56333: LD_ADDR_OWVAR 33
56337: PUSH
56338: LD_STRING 
56340: ST_TO_ADDR
// animal := CreateHuman ;
56341: LD_ADDR_VAR 0 12
56345: PUSH
56346: CALL_OW 44
56350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56351: LD_VAR 0 12
56355: PPUSH
56356: LD_VAR 0 8
56360: PPUSH
56361: LD_INT 0
56363: PPUSH
56364: CALL 58132 0 3
// end ;
56368: GO 56322
56370: POP
56371: POP
// if fishes then
56372: LD_VAR 0 7
56376: IFFALSE 56443
// for i = 1 to fishes do
56378: LD_ADDR_VAR 0 11
56382: PUSH
56383: DOUBLE
56384: LD_INT 1
56386: DEC
56387: ST_TO_ADDR
56388: LD_VAR 0 7
56392: PUSH
56393: FOR_TO
56394: IFFALSE 56441
// begin hc_class = 20 ;
56396: LD_ADDR_OWVAR 28
56400: PUSH
56401: LD_INT 20
56403: ST_TO_ADDR
// hc_gallery =  ;
56404: LD_ADDR_OWVAR 33
56408: PUSH
56409: LD_STRING 
56411: ST_TO_ADDR
// animal := CreateHuman ;
56412: LD_ADDR_VAR 0 12
56416: PUSH
56417: CALL_OW 44
56421: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56422: LD_VAR 0 12
56426: PPUSH
56427: LD_VAR 0 9
56431: PPUSH
56432: LD_INT 0
56434: PPUSH
56435: CALL 58132 0 3
// end ;
56439: GO 56393
56441: POP
56442: POP
// end ;
56443: LD_VAR 0 10
56447: RET
// export function WantHeal ( sci , unit ) ; begin
56448: LD_INT 0
56450: PPUSH
// if GetTaskList ( sci ) > 0 then
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL_OW 437
56460: PUSH
56461: LD_INT 0
56463: GREATER
56464: IFFALSE 56534
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56466: LD_VAR 0 1
56470: PPUSH
56471: CALL_OW 437
56475: PUSH
56476: LD_INT 1
56478: ARRAY
56479: PUSH
56480: LD_INT 1
56482: ARRAY
56483: PUSH
56484: LD_STRING l
56486: EQUAL
56487: PUSH
56488: LD_VAR 0 1
56492: PPUSH
56493: CALL_OW 437
56497: PUSH
56498: LD_INT 1
56500: ARRAY
56501: PUSH
56502: LD_INT 4
56504: ARRAY
56505: PUSH
56506: LD_VAR 0 2
56510: EQUAL
56511: AND
56512: IFFALSE 56524
// result := true else
56514: LD_ADDR_VAR 0 3
56518: PUSH
56519: LD_INT 1
56521: ST_TO_ADDR
56522: GO 56532
// result := false ;
56524: LD_ADDR_VAR 0 3
56528: PUSH
56529: LD_INT 0
56531: ST_TO_ADDR
// end else
56532: GO 56542
// result := false ;
56534: LD_ADDR_VAR 0 3
56538: PUSH
56539: LD_INT 0
56541: ST_TO_ADDR
// end ;
56542: LD_VAR 0 3
56546: RET
// export function HealTarget ( sci ) ; begin
56547: LD_INT 0
56549: PPUSH
// if not sci then
56550: LD_VAR 0 1
56554: NOT
56555: IFFALSE 56559
// exit ;
56557: GO 56624
// result := 0 ;
56559: LD_ADDR_VAR 0 2
56563: PUSH
56564: LD_INT 0
56566: ST_TO_ADDR
// if GetTaskList ( sci ) then
56567: LD_VAR 0 1
56571: PPUSH
56572: CALL_OW 437
56576: IFFALSE 56624
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56578: LD_VAR 0 1
56582: PPUSH
56583: CALL_OW 437
56587: PUSH
56588: LD_INT 1
56590: ARRAY
56591: PUSH
56592: LD_INT 1
56594: ARRAY
56595: PUSH
56596: LD_STRING l
56598: EQUAL
56599: IFFALSE 56624
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56601: LD_ADDR_VAR 0 2
56605: PUSH
56606: LD_VAR 0 1
56610: PPUSH
56611: CALL_OW 437
56615: PUSH
56616: LD_INT 1
56618: ARRAY
56619: PUSH
56620: LD_INT 4
56622: ARRAY
56623: ST_TO_ADDR
// end ;
56624: LD_VAR 0 2
56628: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56629: LD_INT 0
56631: PPUSH
56632: PPUSH
56633: PPUSH
56634: PPUSH
// if not base_units then
56635: LD_VAR 0 1
56639: NOT
56640: IFFALSE 56644
// exit ;
56642: GO 56731
// result := false ;
56644: LD_ADDR_VAR 0 2
56648: PUSH
56649: LD_INT 0
56651: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56652: LD_ADDR_VAR 0 5
56656: PUSH
56657: LD_VAR 0 1
56661: PPUSH
56662: LD_INT 21
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PPUSH
56672: CALL_OW 72
56676: ST_TO_ADDR
// if not tmp then
56677: LD_VAR 0 5
56681: NOT
56682: IFFALSE 56686
// exit ;
56684: GO 56731
// for i in tmp do
56686: LD_ADDR_VAR 0 3
56690: PUSH
56691: LD_VAR 0 5
56695: PUSH
56696: FOR_IN
56697: IFFALSE 56729
// begin result := EnemyInRange ( i , 22 ) ;
56699: LD_ADDR_VAR 0 2
56703: PUSH
56704: LD_VAR 0 3
56708: PPUSH
56709: LD_INT 22
56711: PPUSH
56712: CALL 54967 0 2
56716: ST_TO_ADDR
// if result then
56717: LD_VAR 0 2
56721: IFFALSE 56727
// exit ;
56723: POP
56724: POP
56725: GO 56731
// end ;
56727: GO 56696
56729: POP
56730: POP
// end ;
56731: LD_VAR 0 2
56735: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56736: LD_INT 0
56738: PPUSH
56739: PPUSH
// if not units then
56740: LD_VAR 0 1
56744: NOT
56745: IFFALSE 56749
// exit ;
56747: GO 56819
// result := [ ] ;
56749: LD_ADDR_VAR 0 3
56753: PUSH
56754: EMPTY
56755: ST_TO_ADDR
// for i in units do
56756: LD_ADDR_VAR 0 4
56760: PUSH
56761: LD_VAR 0 1
56765: PUSH
56766: FOR_IN
56767: IFFALSE 56817
// if GetTag ( i ) = tag then
56769: LD_VAR 0 4
56773: PPUSH
56774: CALL_OW 110
56778: PUSH
56779: LD_VAR 0 2
56783: EQUAL
56784: IFFALSE 56815
// result := Insert ( result , result + 1 , i ) ;
56786: LD_ADDR_VAR 0 3
56790: PUSH
56791: LD_VAR 0 3
56795: PPUSH
56796: LD_VAR 0 3
56800: PUSH
56801: LD_INT 1
56803: PLUS
56804: PPUSH
56805: LD_VAR 0 4
56809: PPUSH
56810: CALL_OW 2
56814: ST_TO_ADDR
56815: GO 56766
56817: POP
56818: POP
// end ;
56819: LD_VAR 0 3
56823: RET
// export function IsDriver ( un ) ; begin
56824: LD_INT 0
56826: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56827: LD_ADDR_VAR 0 2
56831: PUSH
56832: LD_VAR 0 1
56836: PUSH
56837: LD_INT 55
56839: PUSH
56840: EMPTY
56841: LIST
56842: PPUSH
56843: CALL_OW 69
56847: IN
56848: ST_TO_ADDR
// end ;
56849: LD_VAR 0 2
56853: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56854: LD_INT 0
56856: PPUSH
56857: PPUSH
// list := [ ] ;
56858: LD_ADDR_VAR 0 5
56862: PUSH
56863: EMPTY
56864: ST_TO_ADDR
// case d of 0 :
56865: LD_VAR 0 3
56869: PUSH
56870: LD_INT 0
56872: DOUBLE
56873: EQUAL
56874: IFTRUE 56878
56876: GO 57011
56878: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56879: LD_ADDR_VAR 0 5
56883: PUSH
56884: LD_VAR 0 1
56888: PUSH
56889: LD_INT 4
56891: MINUS
56892: PUSH
56893: LD_VAR 0 2
56897: PUSH
56898: LD_INT 4
56900: MINUS
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: PUSH
56910: LD_VAR 0 1
56914: PUSH
56915: LD_INT 3
56917: MINUS
56918: PUSH
56919: LD_VAR 0 2
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: PUSH
56932: LD_VAR 0 1
56936: PUSH
56937: LD_INT 4
56939: PLUS
56940: PUSH
56941: LD_VAR 0 2
56945: PUSH
56946: LD_INT 4
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: PUSH
56954: LD_VAR 0 1
56958: PUSH
56959: LD_INT 3
56961: PLUS
56962: PUSH
56963: LD_VAR 0 2
56967: PUSH
56968: LD_INT 3
56970: PLUS
56971: PUSH
56972: LD_INT 5
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: PUSH
56980: LD_VAR 0 1
56984: PUSH
56985: LD_VAR 0 2
56989: PUSH
56990: LD_INT 4
56992: PLUS
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// end ; 1 :
57009: GO 57709
57011: LD_INT 1
57013: DOUBLE
57014: EQUAL
57015: IFTRUE 57019
57017: GO 57152
57019: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57020: LD_ADDR_VAR 0 5
57024: PUSH
57025: LD_VAR 0 1
57029: PUSH
57030: LD_VAR 0 2
57034: PUSH
57035: LD_INT 4
57037: MINUS
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: PUSH
57047: LD_VAR 0 1
57051: PUSH
57052: LD_INT 3
57054: MINUS
57055: PUSH
57056: LD_VAR 0 2
57060: PUSH
57061: LD_INT 3
57063: MINUS
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: PUSH
57073: LD_VAR 0 1
57077: PUSH
57078: LD_INT 4
57080: MINUS
57081: PUSH
57082: LD_VAR 0 2
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: PUSH
57095: LD_VAR 0 1
57099: PUSH
57100: LD_VAR 0 2
57104: PUSH
57105: LD_INT 3
57107: PLUS
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: PUSH
57117: LD_VAR 0 1
57121: PUSH
57122: LD_INT 4
57124: PLUS
57125: PUSH
57126: LD_VAR 0 2
57130: PUSH
57131: LD_INT 4
57133: PLUS
57134: PUSH
57135: LD_INT 5
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: ST_TO_ADDR
// end ; 2 :
57150: GO 57709
57152: LD_INT 2
57154: DOUBLE
57155: EQUAL
57156: IFTRUE 57160
57158: GO 57289
57160: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57161: LD_ADDR_VAR 0 5
57165: PUSH
57166: LD_VAR 0 1
57170: PUSH
57171: LD_VAR 0 2
57175: PUSH
57176: LD_INT 3
57178: MINUS
57179: PUSH
57180: LD_INT 3
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: PUSH
57188: LD_VAR 0 1
57192: PUSH
57193: LD_INT 4
57195: PLUS
57196: PUSH
57197: LD_VAR 0 2
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: PUSH
57210: LD_VAR 0 1
57214: PUSH
57215: LD_VAR 0 2
57219: PUSH
57220: LD_INT 4
57222: PLUS
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: LIST
57231: PUSH
57232: LD_VAR 0 1
57236: PUSH
57237: LD_INT 3
57239: MINUS
57240: PUSH
57241: LD_VAR 0 2
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: PUSH
57254: LD_VAR 0 1
57258: PUSH
57259: LD_INT 4
57261: MINUS
57262: PUSH
57263: LD_VAR 0 2
57267: PUSH
57268: LD_INT 4
57270: MINUS
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: ST_TO_ADDR
// end ; 3 :
57287: GO 57709
57289: LD_INT 3
57291: DOUBLE
57292: EQUAL
57293: IFTRUE 57297
57295: GO 57430
57297: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57298: LD_ADDR_VAR 0 5
57302: PUSH
57303: LD_VAR 0 1
57307: PUSH
57308: LD_INT 3
57310: PLUS
57311: PUSH
57312: LD_VAR 0 2
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: PUSH
57325: LD_VAR 0 1
57329: PUSH
57330: LD_INT 4
57332: PLUS
57333: PUSH
57334: LD_VAR 0 2
57338: PUSH
57339: LD_INT 4
57341: PLUS
57342: PUSH
57343: LD_INT 5
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: PUSH
57351: LD_VAR 0 1
57355: PUSH
57356: LD_INT 4
57358: MINUS
57359: PUSH
57360: LD_VAR 0 2
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: PUSH
57373: LD_VAR 0 1
57377: PUSH
57378: LD_VAR 0 2
57382: PUSH
57383: LD_INT 4
57385: MINUS
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: PUSH
57395: LD_VAR 0 1
57399: PUSH
57400: LD_INT 3
57402: MINUS
57403: PUSH
57404: LD_VAR 0 2
57408: PUSH
57409: LD_INT 3
57411: MINUS
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// end ; 4 :
57428: GO 57709
57430: LD_INT 4
57432: DOUBLE
57433: EQUAL
57434: IFTRUE 57438
57436: GO 57571
57438: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57439: LD_ADDR_VAR 0 5
57443: PUSH
57444: LD_VAR 0 1
57448: PUSH
57449: LD_VAR 0 2
57453: PUSH
57454: LD_INT 4
57456: PLUS
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: PUSH
57466: LD_VAR 0 1
57470: PUSH
57471: LD_INT 3
57473: PLUS
57474: PUSH
57475: LD_VAR 0 2
57479: PUSH
57480: LD_INT 3
57482: PLUS
57483: PUSH
57484: LD_INT 5
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: PUSH
57492: LD_VAR 0 1
57496: PUSH
57497: LD_INT 4
57499: PLUS
57500: PUSH
57501: LD_VAR 0 2
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: PUSH
57514: LD_VAR 0 1
57518: PUSH
57519: LD_VAR 0 2
57523: PUSH
57524: LD_INT 3
57526: MINUS
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: PUSH
57536: LD_VAR 0 1
57540: PUSH
57541: LD_INT 4
57543: MINUS
57544: PUSH
57545: LD_VAR 0 2
57549: PUSH
57550: LD_INT 4
57552: MINUS
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: ST_TO_ADDR
// end ; 5 :
57569: GO 57709
57571: LD_INT 5
57573: DOUBLE
57574: EQUAL
57575: IFTRUE 57579
57577: GO 57708
57579: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57580: LD_ADDR_VAR 0 5
57584: PUSH
57585: LD_VAR 0 1
57589: PUSH
57590: LD_INT 4
57592: MINUS
57593: PUSH
57594: LD_VAR 0 2
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: LIST
57606: PUSH
57607: LD_VAR 0 1
57611: PUSH
57612: LD_VAR 0 2
57616: PUSH
57617: LD_INT 4
57619: MINUS
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: PUSH
57629: LD_VAR 0 1
57633: PUSH
57634: LD_INT 4
57636: PLUS
57637: PUSH
57638: LD_VAR 0 2
57642: PUSH
57643: LD_INT 4
57645: PLUS
57646: PUSH
57647: LD_INT 5
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: PUSH
57655: LD_VAR 0 1
57659: PUSH
57660: LD_INT 3
57662: PLUS
57663: PUSH
57664: LD_VAR 0 2
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: PUSH
57677: LD_VAR 0 1
57681: PUSH
57682: LD_VAR 0 2
57686: PUSH
57687: LD_INT 3
57689: PLUS
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// end ; end ;
57706: GO 57709
57708: POP
// result := list ;
57709: LD_ADDR_VAR 0 4
57713: PUSH
57714: LD_VAR 0 5
57718: ST_TO_ADDR
// end ;
57719: LD_VAR 0 4
57723: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57724: LD_INT 0
57726: PPUSH
57727: PPUSH
57728: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57729: LD_VAR 0 1
57733: NOT
57734: PUSH
57735: LD_VAR 0 2
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: IN
57758: NOT
57759: OR
57760: IFFALSE 57764
// exit ;
57762: GO 57856
// tmp := [ ] ;
57764: LD_ADDR_VAR 0 5
57768: PUSH
57769: EMPTY
57770: ST_TO_ADDR
// for i in units do
57771: LD_ADDR_VAR 0 4
57775: PUSH
57776: LD_VAR 0 1
57780: PUSH
57781: FOR_IN
57782: IFFALSE 57825
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57784: LD_ADDR_VAR 0 5
57788: PUSH
57789: LD_VAR 0 5
57793: PPUSH
57794: LD_VAR 0 5
57798: PUSH
57799: LD_INT 1
57801: PLUS
57802: PPUSH
57803: LD_VAR 0 4
57807: PPUSH
57808: LD_VAR 0 2
57812: PPUSH
57813: CALL_OW 259
57817: PPUSH
57818: CALL_OW 2
57822: ST_TO_ADDR
57823: GO 57781
57825: POP
57826: POP
// if not tmp then
57827: LD_VAR 0 5
57831: NOT
57832: IFFALSE 57836
// exit ;
57834: GO 57856
// result := SortListByListDesc ( units , tmp ) ;
57836: LD_ADDR_VAR 0 3
57840: PUSH
57841: LD_VAR 0 1
57845: PPUSH
57846: LD_VAR 0 5
57850: PPUSH
57851: CALL_OW 77
57855: ST_TO_ADDR
// end ;
57856: LD_VAR 0 3
57860: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57861: LD_INT 0
57863: PPUSH
57864: PPUSH
57865: PPUSH
// result := false ;
57866: LD_ADDR_VAR 0 3
57870: PUSH
57871: LD_INT 0
57873: ST_TO_ADDR
// x := GetX ( building ) ;
57874: LD_ADDR_VAR 0 4
57878: PUSH
57879: LD_VAR 0 2
57883: PPUSH
57884: CALL_OW 250
57888: ST_TO_ADDR
// y := GetY ( building ) ;
57889: LD_ADDR_VAR 0 5
57893: PUSH
57894: LD_VAR 0 2
57898: PPUSH
57899: CALL_OW 251
57903: ST_TO_ADDR
// if not building or not x or not y then
57904: LD_VAR 0 2
57908: NOT
57909: PUSH
57910: LD_VAR 0 4
57914: NOT
57915: OR
57916: PUSH
57917: LD_VAR 0 5
57921: NOT
57922: OR
57923: IFFALSE 57927
// exit ;
57925: GO 58019
// if GetTaskList ( unit ) then
57927: LD_VAR 0 1
57931: PPUSH
57932: CALL_OW 437
57936: IFFALSE 58019
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57938: LD_STRING e
57940: PUSH
57941: LD_VAR 0 1
57945: PPUSH
57946: CALL_OW 437
57950: PUSH
57951: LD_INT 1
57953: ARRAY
57954: PUSH
57955: LD_INT 1
57957: ARRAY
57958: EQUAL
57959: PUSH
57960: LD_VAR 0 4
57964: PUSH
57965: LD_VAR 0 1
57969: PPUSH
57970: CALL_OW 437
57974: PUSH
57975: LD_INT 1
57977: ARRAY
57978: PUSH
57979: LD_INT 2
57981: ARRAY
57982: EQUAL
57983: AND
57984: PUSH
57985: LD_VAR 0 5
57989: PUSH
57990: LD_VAR 0 1
57994: PPUSH
57995: CALL_OW 437
57999: PUSH
58000: LD_INT 1
58002: ARRAY
58003: PUSH
58004: LD_INT 3
58006: ARRAY
58007: EQUAL
58008: AND
58009: IFFALSE 58019
// result := true end ;
58011: LD_ADDR_VAR 0 3
58015: PUSH
58016: LD_INT 1
58018: ST_TO_ADDR
// end ;
58019: LD_VAR 0 3
58023: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58024: LD_INT 0
58026: PPUSH
// result := false ;
58027: LD_ADDR_VAR 0 4
58031: PUSH
58032: LD_INT 0
58034: ST_TO_ADDR
// if GetTaskList ( unit ) then
58035: LD_VAR 0 1
58039: PPUSH
58040: CALL_OW 437
58044: IFFALSE 58127
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58046: LD_STRING M
58048: PUSH
58049: LD_VAR 0 1
58053: PPUSH
58054: CALL_OW 437
58058: PUSH
58059: LD_INT 1
58061: ARRAY
58062: PUSH
58063: LD_INT 1
58065: ARRAY
58066: EQUAL
58067: PUSH
58068: LD_VAR 0 2
58072: PUSH
58073: LD_VAR 0 1
58077: PPUSH
58078: CALL_OW 437
58082: PUSH
58083: LD_INT 1
58085: ARRAY
58086: PUSH
58087: LD_INT 2
58089: ARRAY
58090: EQUAL
58091: AND
58092: PUSH
58093: LD_VAR 0 3
58097: PUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 437
58107: PUSH
58108: LD_INT 1
58110: ARRAY
58111: PUSH
58112: LD_INT 3
58114: ARRAY
58115: EQUAL
58116: AND
58117: IFFALSE 58127
// result := true ;
58119: LD_ADDR_VAR 0 4
58123: PUSH
58124: LD_INT 1
58126: ST_TO_ADDR
// end ; end ;
58127: LD_VAR 0 4
58131: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58132: LD_INT 0
58134: PPUSH
58135: PPUSH
58136: PPUSH
58137: PPUSH
// if not unit or not area then
58138: LD_VAR 0 1
58142: NOT
58143: PUSH
58144: LD_VAR 0 2
58148: NOT
58149: OR
58150: IFFALSE 58154
// exit ;
58152: GO 58318
// tmp := AreaToList ( area , i ) ;
58154: LD_ADDR_VAR 0 6
58158: PUSH
58159: LD_VAR 0 2
58163: PPUSH
58164: LD_VAR 0 5
58168: PPUSH
58169: CALL_OW 517
58173: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58174: LD_ADDR_VAR 0 5
58178: PUSH
58179: DOUBLE
58180: LD_INT 1
58182: DEC
58183: ST_TO_ADDR
58184: LD_VAR 0 6
58188: PUSH
58189: LD_INT 1
58191: ARRAY
58192: PUSH
58193: FOR_TO
58194: IFFALSE 58316
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58196: LD_ADDR_VAR 0 7
58200: PUSH
58201: LD_VAR 0 6
58205: PUSH
58206: LD_INT 1
58208: ARRAY
58209: PUSH
58210: LD_VAR 0 5
58214: ARRAY
58215: PUSH
58216: LD_VAR 0 6
58220: PUSH
58221: LD_INT 2
58223: ARRAY
58224: PUSH
58225: LD_VAR 0 5
58229: ARRAY
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58235: LD_VAR 0 7
58239: PUSH
58240: LD_INT 1
58242: ARRAY
58243: PPUSH
58244: LD_VAR 0 7
58248: PUSH
58249: LD_INT 2
58251: ARRAY
58252: PPUSH
58253: CALL_OW 428
58257: PUSH
58258: LD_INT 0
58260: EQUAL
58261: IFFALSE 58314
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58263: LD_VAR 0 1
58267: PPUSH
58268: LD_VAR 0 7
58272: PUSH
58273: LD_INT 1
58275: ARRAY
58276: PPUSH
58277: LD_VAR 0 7
58281: PUSH
58282: LD_INT 2
58284: ARRAY
58285: PPUSH
58286: LD_VAR 0 3
58290: PPUSH
58291: CALL_OW 48
// result := IsPlaced ( unit ) ;
58295: LD_ADDR_VAR 0 4
58299: PUSH
58300: LD_VAR 0 1
58304: PPUSH
58305: CALL_OW 305
58309: ST_TO_ADDR
// exit ;
58310: POP
58311: POP
58312: GO 58318
// end ; end ;
58314: GO 58193
58316: POP
58317: POP
// end ;
58318: LD_VAR 0 4
58322: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58323: LD_INT 0
58325: PPUSH
58326: PPUSH
58327: PPUSH
// if not side or side > 8 then
58328: LD_VAR 0 1
58332: NOT
58333: PUSH
58334: LD_VAR 0 1
58338: PUSH
58339: LD_INT 8
58341: GREATER
58342: OR
58343: IFFALSE 58347
// exit ;
58345: GO 58534
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58347: LD_ADDR_VAR 0 4
58351: PUSH
58352: LD_INT 22
58354: PUSH
58355: LD_VAR 0 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 21
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PPUSH
58378: CALL_OW 69
58382: ST_TO_ADDR
// if not tmp then
58383: LD_VAR 0 4
58387: NOT
58388: IFFALSE 58392
// exit ;
58390: GO 58534
// enable_addtolog := true ;
58392: LD_ADDR_OWVAR 81
58396: PUSH
58397: LD_INT 1
58399: ST_TO_ADDR
// AddToLog ( [ ) ;
58400: LD_STRING [
58402: PPUSH
58403: CALL_OW 561
// for i in tmp do
58407: LD_ADDR_VAR 0 3
58411: PUSH
58412: LD_VAR 0 4
58416: PUSH
58417: FOR_IN
58418: IFFALSE 58525
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58420: LD_STRING [
58422: PUSH
58423: LD_VAR 0 3
58427: PPUSH
58428: CALL_OW 266
58432: STR
58433: PUSH
58434: LD_STRING , 
58436: STR
58437: PUSH
58438: LD_VAR 0 3
58442: PPUSH
58443: CALL_OW 250
58447: STR
58448: PUSH
58449: LD_STRING , 
58451: STR
58452: PUSH
58453: LD_VAR 0 3
58457: PPUSH
58458: CALL_OW 251
58462: STR
58463: PUSH
58464: LD_STRING , 
58466: STR
58467: PUSH
58468: LD_VAR 0 3
58472: PPUSH
58473: CALL_OW 254
58477: STR
58478: PUSH
58479: LD_STRING , 
58481: STR
58482: PUSH
58483: LD_VAR 0 3
58487: PPUSH
58488: LD_INT 1
58490: PPUSH
58491: CALL_OW 268
58495: STR
58496: PUSH
58497: LD_STRING , 
58499: STR
58500: PUSH
58501: LD_VAR 0 3
58505: PPUSH
58506: LD_INT 2
58508: PPUSH
58509: CALL_OW 268
58513: STR
58514: PUSH
58515: LD_STRING ],
58517: STR
58518: PPUSH
58519: CALL_OW 561
// end ;
58523: GO 58417
58525: POP
58526: POP
// AddToLog ( ]; ) ;
58527: LD_STRING ];
58529: PPUSH
58530: CALL_OW 561
// end ;
58534: LD_VAR 0 2
58538: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58539: LD_INT 0
58541: PPUSH
58542: PPUSH
58543: PPUSH
58544: PPUSH
58545: PPUSH
// if not area or not rate or not max then
58546: LD_VAR 0 1
58550: NOT
58551: PUSH
58552: LD_VAR 0 2
58556: NOT
58557: OR
58558: PUSH
58559: LD_VAR 0 4
58563: NOT
58564: OR
58565: IFFALSE 58569
// exit ;
58567: GO 58761
// while 1 do
58569: LD_INT 1
58571: IFFALSE 58761
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58573: LD_ADDR_VAR 0 9
58577: PUSH
58578: LD_VAR 0 1
58582: PPUSH
58583: LD_INT 1
58585: PPUSH
58586: CALL_OW 287
58590: PUSH
58591: LD_INT 10
58593: MUL
58594: ST_TO_ADDR
// r := rate / 10 ;
58595: LD_ADDR_VAR 0 7
58599: PUSH
58600: LD_VAR 0 2
58604: PUSH
58605: LD_INT 10
58607: DIVREAL
58608: ST_TO_ADDR
// time := 1 1$00 ;
58609: LD_ADDR_VAR 0 8
58613: PUSH
58614: LD_INT 2100
58616: ST_TO_ADDR
// if amount < min then
58617: LD_VAR 0 9
58621: PUSH
58622: LD_VAR 0 3
58626: LESS
58627: IFFALSE 58645
// r := r * 2 else
58629: LD_ADDR_VAR 0 7
58633: PUSH
58634: LD_VAR 0 7
58638: PUSH
58639: LD_INT 2
58641: MUL
58642: ST_TO_ADDR
58643: GO 58671
// if amount > max then
58645: LD_VAR 0 9
58649: PUSH
58650: LD_VAR 0 4
58654: GREATER
58655: IFFALSE 58671
// r := r / 2 ;
58657: LD_ADDR_VAR 0 7
58661: PUSH
58662: LD_VAR 0 7
58666: PUSH
58667: LD_INT 2
58669: DIVREAL
58670: ST_TO_ADDR
// time := time / r ;
58671: LD_ADDR_VAR 0 8
58675: PUSH
58676: LD_VAR 0 8
58680: PUSH
58681: LD_VAR 0 7
58685: DIVREAL
58686: ST_TO_ADDR
// if time < 0 then
58687: LD_VAR 0 8
58691: PUSH
58692: LD_INT 0
58694: LESS
58695: IFFALSE 58712
// time := time * - 1 ;
58697: LD_ADDR_VAR 0 8
58701: PUSH
58702: LD_VAR 0 8
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: MUL
58711: ST_TO_ADDR
// wait ( time ) ;
58712: LD_VAR 0 8
58716: PPUSH
58717: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58721: LD_INT 35
58723: PPUSH
58724: LD_INT 875
58726: PPUSH
58727: CALL_OW 12
58731: PPUSH
58732: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58736: LD_INT 1
58738: PPUSH
58739: LD_INT 5
58741: PPUSH
58742: CALL_OW 12
58746: PPUSH
58747: LD_VAR 0 1
58751: PPUSH
58752: LD_INT 1
58754: PPUSH
58755: CALL_OW 55
// end ;
58759: GO 58569
// end ;
58761: LD_VAR 0 5
58765: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58766: LD_INT 0
58768: PPUSH
58769: PPUSH
58770: PPUSH
58771: PPUSH
58772: PPUSH
58773: PPUSH
58774: PPUSH
58775: PPUSH
// if not turrets or not factories then
58776: LD_VAR 0 1
58780: NOT
58781: PUSH
58782: LD_VAR 0 2
58786: NOT
58787: OR
58788: IFFALSE 58792
// exit ;
58790: GO 59099
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58792: LD_ADDR_VAR 0 10
58796: PUSH
58797: LD_INT 5
58799: PUSH
58800: LD_INT 6
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: LD_INT 4
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 5
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 24
58834: PUSH
58835: LD_INT 25
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 23
58844: PUSH
58845: LD_INT 27
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 42
58858: PUSH
58859: LD_INT 43
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 44
58868: PUSH
58869: LD_INT 46
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 45
58878: PUSH
58879: LD_INT 47
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: ST_TO_ADDR
// result := [ ] ;
58896: LD_ADDR_VAR 0 3
58900: PUSH
58901: EMPTY
58902: ST_TO_ADDR
// for i in turrets do
58903: LD_ADDR_VAR 0 4
58907: PUSH
58908: LD_VAR 0 1
58912: PUSH
58913: FOR_IN
58914: IFFALSE 59097
// begin nat := GetNation ( i ) ;
58916: LD_ADDR_VAR 0 7
58920: PUSH
58921: LD_VAR 0 4
58925: PPUSH
58926: CALL_OW 248
58930: ST_TO_ADDR
// weapon := 0 ;
58931: LD_ADDR_VAR 0 8
58935: PUSH
58936: LD_INT 0
58938: ST_TO_ADDR
// if not nat then
58939: LD_VAR 0 7
58943: NOT
58944: IFFALSE 58948
// continue ;
58946: GO 58913
// for j in list [ nat ] do
58948: LD_ADDR_VAR 0 5
58952: PUSH
58953: LD_VAR 0 10
58957: PUSH
58958: LD_VAR 0 7
58962: ARRAY
58963: PUSH
58964: FOR_IN
58965: IFFALSE 59006
// if GetBWeapon ( i ) = j [ 1 ] then
58967: LD_VAR 0 4
58971: PPUSH
58972: CALL_OW 269
58976: PUSH
58977: LD_VAR 0 5
58981: PUSH
58982: LD_INT 1
58984: ARRAY
58985: EQUAL
58986: IFFALSE 59004
// begin weapon := j [ 2 ] ;
58988: LD_ADDR_VAR 0 8
58992: PUSH
58993: LD_VAR 0 5
58997: PUSH
58998: LD_INT 2
59000: ARRAY
59001: ST_TO_ADDR
// break ;
59002: GO 59006
// end ;
59004: GO 58964
59006: POP
59007: POP
// if not weapon then
59008: LD_VAR 0 8
59012: NOT
59013: IFFALSE 59017
// continue ;
59015: GO 58913
// for k in factories do
59017: LD_ADDR_VAR 0 6
59021: PUSH
59022: LD_VAR 0 2
59026: PUSH
59027: FOR_IN
59028: IFFALSE 59093
// begin weapons := AvailableWeaponList ( k ) ;
59030: LD_ADDR_VAR 0 9
59034: PUSH
59035: LD_VAR 0 6
59039: PPUSH
59040: CALL_OW 478
59044: ST_TO_ADDR
// if not weapons then
59045: LD_VAR 0 9
59049: NOT
59050: IFFALSE 59054
// continue ;
59052: GO 59027
// if weapon in weapons then
59054: LD_VAR 0 8
59058: PUSH
59059: LD_VAR 0 9
59063: IN
59064: IFFALSE 59091
// begin result := [ i , weapon ] ;
59066: LD_ADDR_VAR 0 3
59070: PUSH
59071: LD_VAR 0 4
59075: PUSH
59076: LD_VAR 0 8
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: ST_TO_ADDR
// exit ;
59085: POP
59086: POP
59087: POP
59088: POP
59089: GO 59099
// end ; end ;
59091: GO 59027
59093: POP
59094: POP
// end ;
59095: GO 58913
59097: POP
59098: POP
// end ;
59099: LD_VAR 0 3
59103: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59104: LD_INT 0
59106: PPUSH
// if not side or side > 8 then
59107: LD_VAR 0 3
59111: NOT
59112: PUSH
59113: LD_VAR 0 3
59117: PUSH
59118: LD_INT 8
59120: GREATER
59121: OR
59122: IFFALSE 59126
// exit ;
59124: GO 59185
// if not range then
59126: LD_VAR 0 4
59130: NOT
59131: IFFALSE 59142
// range := - 12 ;
59133: LD_ADDR_VAR 0 4
59137: PUSH
59138: LD_INT 12
59140: NEG
59141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59142: LD_VAR 0 1
59146: PPUSH
59147: LD_VAR 0 2
59151: PPUSH
59152: LD_VAR 0 3
59156: PPUSH
59157: LD_VAR 0 4
59161: PPUSH
59162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59166: LD_VAR 0 1
59170: PPUSH
59171: LD_VAR 0 2
59175: PPUSH
59176: LD_VAR 0 3
59180: PPUSH
59181: CALL_OW 331
// end ;
59185: LD_VAR 0 5
59189: RET
// export function Video ( mode ) ; begin
59190: LD_INT 0
59192: PPUSH
// ingame_video = mode ;
59193: LD_ADDR_OWVAR 52
59197: PUSH
59198: LD_VAR 0 1
59202: ST_TO_ADDR
// interface_hidden = mode ;
59203: LD_ADDR_OWVAR 54
59207: PUSH
59208: LD_VAR 0 1
59212: ST_TO_ADDR
// end ;
59213: LD_VAR 0 2
59217: RET
// export function Join ( array , element ) ; begin
59218: LD_INT 0
59220: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59221: LD_ADDR_VAR 0 3
59225: PUSH
59226: LD_VAR 0 1
59230: PPUSH
59231: LD_VAR 0 1
59235: PUSH
59236: LD_INT 1
59238: PLUS
59239: PPUSH
59240: LD_VAR 0 2
59244: PPUSH
59245: CALL_OW 1
59249: ST_TO_ADDR
// end ;
59250: LD_VAR 0 3
59254: RET
// export function JoinUnion ( array , element ) ; begin
59255: LD_INT 0
59257: PPUSH
// result := array union element ;
59258: LD_ADDR_VAR 0 3
59262: PUSH
59263: LD_VAR 0 1
59267: PUSH
59268: LD_VAR 0 2
59272: UNION
59273: ST_TO_ADDR
// end ;
59274: LD_VAR 0 3
59278: RET
// export function GetBehemoths ( side ) ; begin
59279: LD_INT 0
59281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59282: LD_ADDR_VAR 0 2
59286: PUSH
59287: LD_INT 22
59289: PUSH
59290: LD_VAR 0 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 31
59301: PUSH
59302: LD_INT 25
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PPUSH
59313: CALL_OW 69
59317: ST_TO_ADDR
// end ;
59318: LD_VAR 0 2
59322: RET
// export function Shuffle ( array ) ; var i , index ; begin
59323: LD_INT 0
59325: PPUSH
59326: PPUSH
59327: PPUSH
// result := [ ] ;
59328: LD_ADDR_VAR 0 2
59332: PUSH
59333: EMPTY
59334: ST_TO_ADDR
// if not array then
59335: LD_VAR 0 1
59339: NOT
59340: IFFALSE 59344
// exit ;
59342: GO 59443
// Randomize ;
59344: CALL_OW 10
// for i = array downto 1 do
59348: LD_ADDR_VAR 0 3
59352: PUSH
59353: DOUBLE
59354: LD_VAR 0 1
59358: INC
59359: ST_TO_ADDR
59360: LD_INT 1
59362: PUSH
59363: FOR_DOWNTO
59364: IFFALSE 59441
// begin index := rand ( 1 , array ) ;
59366: LD_ADDR_VAR 0 4
59370: PUSH
59371: LD_INT 1
59373: PPUSH
59374: LD_VAR 0 1
59378: PPUSH
59379: CALL_OW 12
59383: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59384: LD_ADDR_VAR 0 2
59388: PUSH
59389: LD_VAR 0 2
59393: PPUSH
59394: LD_VAR 0 2
59398: PUSH
59399: LD_INT 1
59401: PLUS
59402: PPUSH
59403: LD_VAR 0 1
59407: PUSH
59408: LD_VAR 0 4
59412: ARRAY
59413: PPUSH
59414: CALL_OW 2
59418: ST_TO_ADDR
// array := Delete ( array , index ) ;
59419: LD_ADDR_VAR 0 1
59423: PUSH
59424: LD_VAR 0 1
59428: PPUSH
59429: LD_VAR 0 4
59433: PPUSH
59434: CALL_OW 3
59438: ST_TO_ADDR
// end ;
59439: GO 59363
59441: POP
59442: POP
// end ;
59443: LD_VAR 0 2
59447: RET
// export function GetBaseMaterials ( base ) ; begin
59448: LD_INT 0
59450: PPUSH
// result := [ 0 , 0 , 0 ] ;
59451: LD_ADDR_VAR 0 2
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: ST_TO_ADDR
// if not base then
59470: LD_VAR 0 1
59474: NOT
59475: IFFALSE 59479
// exit ;
59477: GO 59528
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59479: LD_ADDR_VAR 0 2
59483: PUSH
59484: LD_VAR 0 1
59488: PPUSH
59489: LD_INT 1
59491: PPUSH
59492: CALL_OW 275
59496: PUSH
59497: LD_VAR 0 1
59501: PPUSH
59502: LD_INT 2
59504: PPUSH
59505: CALL_OW 275
59509: PUSH
59510: LD_VAR 0 1
59514: PPUSH
59515: LD_INT 3
59517: PPUSH
59518: CALL_OW 275
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: ST_TO_ADDR
// end ;
59528: LD_VAR 0 2
59532: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59533: LD_INT 0
59535: PPUSH
59536: PPUSH
// result := array ;
59537: LD_ADDR_VAR 0 3
59541: PUSH
59542: LD_VAR 0 1
59546: ST_TO_ADDR
// if size > 0 then
59547: LD_VAR 0 2
59551: PUSH
59552: LD_INT 0
59554: GREATER
59555: IFFALSE 59601
// for i := array downto size do
59557: LD_ADDR_VAR 0 4
59561: PUSH
59562: DOUBLE
59563: LD_VAR 0 1
59567: INC
59568: ST_TO_ADDR
59569: LD_VAR 0 2
59573: PUSH
59574: FOR_DOWNTO
59575: IFFALSE 59599
// result := Delete ( result , result ) ;
59577: LD_ADDR_VAR 0 3
59581: PUSH
59582: LD_VAR 0 3
59586: PPUSH
59587: LD_VAR 0 3
59591: PPUSH
59592: CALL_OW 3
59596: ST_TO_ADDR
59597: GO 59574
59599: POP
59600: POP
// end ;
59601: LD_VAR 0 3
59605: RET
// export function ComExit ( unit ) ; var tmp ; begin
59606: LD_INT 0
59608: PPUSH
59609: PPUSH
// if not IsInUnit ( unit ) then
59610: LD_VAR 0 1
59614: PPUSH
59615: CALL_OW 310
59619: NOT
59620: IFFALSE 59624
// exit ;
59622: GO 59684
// tmp := IsInUnit ( unit ) ;
59624: LD_ADDR_VAR 0 3
59628: PUSH
59629: LD_VAR 0 1
59633: PPUSH
59634: CALL_OW 310
59638: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59639: LD_VAR 0 3
59643: PPUSH
59644: CALL_OW 247
59648: PUSH
59649: LD_INT 2
59651: EQUAL
59652: IFFALSE 59665
// ComExitVehicle ( unit ) else
59654: LD_VAR 0 1
59658: PPUSH
59659: CALL_OW 121
59663: GO 59674
// ComExitBuilding ( unit ) ;
59665: LD_VAR 0 1
59669: PPUSH
59670: CALL_OW 122
// result := tmp ;
59674: LD_ADDR_VAR 0 2
59678: PUSH
59679: LD_VAR 0 3
59683: ST_TO_ADDR
// end ;
59684: LD_VAR 0 2
59688: RET
// export function ComExitAll ( units ) ; var i ; begin
59689: LD_INT 0
59691: PPUSH
59692: PPUSH
// if not units then
59693: LD_VAR 0 1
59697: NOT
59698: IFFALSE 59702
// exit ;
59700: GO 59728
// for i in units do
59702: LD_ADDR_VAR 0 3
59706: PUSH
59707: LD_VAR 0 1
59711: PUSH
59712: FOR_IN
59713: IFFALSE 59726
// ComExit ( i ) ;
59715: LD_VAR 0 3
59719: PPUSH
59720: CALL 59606 0 1
59724: GO 59712
59726: POP
59727: POP
// end ;
59728: LD_VAR 0 2
59732: RET
// export function ResetHc ; begin
59733: LD_INT 0
59735: PPUSH
// InitHc ;
59736: CALL_OW 19
// hc_importance := 0 ;
59740: LD_ADDR_OWVAR 32
59744: PUSH
59745: LD_INT 0
59747: ST_TO_ADDR
// end ;
59748: LD_VAR 0 1
59752: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59753: LD_INT 0
59755: PPUSH
59756: PPUSH
59757: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59758: LD_ADDR_VAR 0 6
59762: PUSH
59763: LD_VAR 0 1
59767: PUSH
59768: LD_VAR 0 3
59772: PLUS
59773: PUSH
59774: LD_INT 2
59776: DIV
59777: ST_TO_ADDR
// if _x < 0 then
59778: LD_VAR 0 6
59782: PUSH
59783: LD_INT 0
59785: LESS
59786: IFFALSE 59803
// _x := _x * - 1 ;
59788: LD_ADDR_VAR 0 6
59792: PUSH
59793: LD_VAR 0 6
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: MUL
59802: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59803: LD_ADDR_VAR 0 7
59807: PUSH
59808: LD_VAR 0 2
59812: PUSH
59813: LD_VAR 0 4
59817: PLUS
59818: PUSH
59819: LD_INT 2
59821: DIV
59822: ST_TO_ADDR
// if _y < 0 then
59823: LD_VAR 0 7
59827: PUSH
59828: LD_INT 0
59830: LESS
59831: IFFALSE 59848
// _y := _y * - 1 ;
59833: LD_ADDR_VAR 0 7
59837: PUSH
59838: LD_VAR 0 7
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: MUL
59847: ST_TO_ADDR
// result := [ _x , _y ] ;
59848: LD_ADDR_VAR 0 5
59852: PUSH
59853: LD_VAR 0 6
59857: PUSH
59858: LD_VAR 0 7
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: ST_TO_ADDR
// end ;
59867: LD_VAR 0 5
59871: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59872: LD_INT 0
59874: PPUSH
59875: PPUSH
59876: PPUSH
59877: PPUSH
// task := GetTaskList ( unit ) ;
59878: LD_ADDR_VAR 0 7
59882: PUSH
59883: LD_VAR 0 1
59887: PPUSH
59888: CALL_OW 437
59892: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59893: LD_VAR 0 7
59897: NOT
59898: PUSH
59899: LD_VAR 0 1
59903: PPUSH
59904: LD_VAR 0 2
59908: PPUSH
59909: CALL_OW 308
59913: NOT
59914: AND
59915: IFFALSE 59919
// exit ;
59917: GO 60037
// if IsInArea ( unit , area ) then
59919: LD_VAR 0 1
59923: PPUSH
59924: LD_VAR 0 2
59928: PPUSH
59929: CALL_OW 308
59933: IFFALSE 59951
// begin ComMoveToArea ( unit , goAway ) ;
59935: LD_VAR 0 1
59939: PPUSH
59940: LD_VAR 0 3
59944: PPUSH
59945: CALL_OW 113
// exit ;
59949: GO 60037
// end ; if task [ 1 ] [ 1 ] <> M then
59951: LD_VAR 0 7
59955: PUSH
59956: LD_INT 1
59958: ARRAY
59959: PUSH
59960: LD_INT 1
59962: ARRAY
59963: PUSH
59964: LD_STRING M
59966: NONEQUAL
59967: IFFALSE 59971
// exit ;
59969: GO 60037
// x := task [ 1 ] [ 2 ] ;
59971: LD_ADDR_VAR 0 5
59975: PUSH
59976: LD_VAR 0 7
59980: PUSH
59981: LD_INT 1
59983: ARRAY
59984: PUSH
59985: LD_INT 2
59987: ARRAY
59988: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59989: LD_ADDR_VAR 0 6
59993: PUSH
59994: LD_VAR 0 7
59998: PUSH
59999: LD_INT 1
60001: ARRAY
60002: PUSH
60003: LD_INT 3
60005: ARRAY
60006: ST_TO_ADDR
// if InArea ( x , y , area ) then
60007: LD_VAR 0 5
60011: PPUSH
60012: LD_VAR 0 6
60016: PPUSH
60017: LD_VAR 0 2
60021: PPUSH
60022: CALL_OW 309
60026: IFFALSE 60037
// ComStop ( unit ) ;
60028: LD_VAR 0 1
60032: PPUSH
60033: CALL_OW 141
// end ;
60037: LD_VAR 0 4
60041: RET
// export function Abs ( value ) ; begin
60042: LD_INT 0
60044: PPUSH
// result := value ;
60045: LD_ADDR_VAR 0 2
60049: PUSH
60050: LD_VAR 0 1
60054: ST_TO_ADDR
// if value < 0 then
60055: LD_VAR 0 1
60059: PUSH
60060: LD_INT 0
60062: LESS
60063: IFFALSE 60080
// result := value * - 1 ;
60065: LD_ADDR_VAR 0 2
60069: PUSH
60070: LD_VAR 0 1
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: MUL
60079: ST_TO_ADDR
// end ;
60080: LD_VAR 0 2
60084: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60085: LD_INT 0
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
60094: PPUSH
// if not unit or not building then
60095: LD_VAR 0 1
60099: NOT
60100: PUSH
60101: LD_VAR 0 2
60105: NOT
60106: OR
60107: IFFALSE 60111
// exit ;
60109: GO 60337
// x := GetX ( building ) ;
60111: LD_ADDR_VAR 0 4
60115: PUSH
60116: LD_VAR 0 2
60120: PPUSH
60121: CALL_OW 250
60125: ST_TO_ADDR
// y := GetY ( building ) ;
60126: LD_ADDR_VAR 0 6
60130: PUSH
60131: LD_VAR 0 2
60135: PPUSH
60136: CALL_OW 251
60140: ST_TO_ADDR
// d := GetDir ( building ) ;
60141: LD_ADDR_VAR 0 8
60145: PUSH
60146: LD_VAR 0 2
60150: PPUSH
60151: CALL_OW 254
60155: ST_TO_ADDR
// r := 4 ;
60156: LD_ADDR_VAR 0 9
60160: PUSH
60161: LD_INT 4
60163: ST_TO_ADDR
// for i := 1 to 5 do
60164: LD_ADDR_VAR 0 10
60168: PUSH
60169: DOUBLE
60170: LD_INT 1
60172: DEC
60173: ST_TO_ADDR
60174: LD_INT 5
60176: PUSH
60177: FOR_TO
60178: IFFALSE 60335
// begin _x := ShiftX ( x , d , r + i ) ;
60180: LD_ADDR_VAR 0 5
60184: PUSH
60185: LD_VAR 0 4
60189: PPUSH
60190: LD_VAR 0 8
60194: PPUSH
60195: LD_VAR 0 9
60199: PUSH
60200: LD_VAR 0 10
60204: PLUS
60205: PPUSH
60206: CALL_OW 272
60210: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60211: LD_ADDR_VAR 0 7
60215: PUSH
60216: LD_VAR 0 6
60220: PPUSH
60221: LD_VAR 0 8
60225: PPUSH
60226: LD_VAR 0 9
60230: PUSH
60231: LD_VAR 0 10
60235: PLUS
60236: PPUSH
60237: CALL_OW 273
60241: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60242: LD_VAR 0 5
60246: PPUSH
60247: LD_VAR 0 7
60251: PPUSH
60252: CALL_OW 488
60256: PUSH
60257: LD_VAR 0 5
60261: PPUSH
60262: LD_VAR 0 7
60266: PPUSH
60267: CALL_OW 428
60271: PPUSH
60272: CALL_OW 247
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: IN
60287: NOT
60288: AND
60289: IFFALSE 60333
// begin ComMoveXY ( unit , _x , _y ) ;
60291: LD_VAR 0 1
60295: PPUSH
60296: LD_VAR 0 5
60300: PPUSH
60301: LD_VAR 0 7
60305: PPUSH
60306: CALL_OW 111
// result := [ _x , _y ] ;
60310: LD_ADDR_VAR 0 3
60314: PUSH
60315: LD_VAR 0 5
60319: PUSH
60320: LD_VAR 0 7
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: ST_TO_ADDR
// exit ;
60329: POP
60330: POP
60331: GO 60337
// end ; end ;
60333: GO 60177
60335: POP
60336: POP
// end ;
60337: LD_VAR 0 3
60341: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60342: LD_INT 0
60344: PPUSH
60345: PPUSH
60346: PPUSH
// result := 0 ;
60347: LD_ADDR_VAR 0 3
60351: PUSH
60352: LD_INT 0
60354: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60355: LD_VAR 0 1
60359: PUSH
60360: LD_INT 0
60362: LESS
60363: PUSH
60364: LD_VAR 0 1
60368: PUSH
60369: LD_INT 8
60371: GREATER
60372: OR
60373: PUSH
60374: LD_VAR 0 2
60378: PUSH
60379: LD_INT 0
60381: LESS
60382: OR
60383: PUSH
60384: LD_VAR 0 2
60388: PUSH
60389: LD_INT 8
60391: GREATER
60392: OR
60393: IFFALSE 60397
// exit ;
60395: GO 60472
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60397: LD_ADDR_VAR 0 4
60401: PUSH
60402: LD_INT 22
60404: PUSH
60405: LD_VAR 0 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PPUSH
60414: CALL_OW 69
60418: PUSH
60419: FOR_IN
60420: IFFALSE 60470
// begin un := UnitShoot ( i ) ;
60422: LD_ADDR_VAR 0 5
60426: PUSH
60427: LD_VAR 0 4
60431: PPUSH
60432: CALL_OW 504
60436: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60437: LD_VAR 0 5
60441: PPUSH
60442: CALL_OW 255
60446: PUSH
60447: LD_VAR 0 1
60451: EQUAL
60452: IFFALSE 60468
// begin result := un ;
60454: LD_ADDR_VAR 0 3
60458: PUSH
60459: LD_VAR 0 5
60463: ST_TO_ADDR
// exit ;
60464: POP
60465: POP
60466: GO 60472
// end ; end ;
60468: GO 60419
60470: POP
60471: POP
// end ;
60472: LD_VAR 0 3
60476: RET
// export function GetCargoBay ( units ) ; begin
60477: LD_INT 0
60479: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60480: LD_ADDR_VAR 0 2
60484: PUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 34
60495: PUSH
60496: LD_INT 12
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 34
60505: PUSH
60506: LD_INT 51
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 34
60515: PUSH
60516: LD_INT 32
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 34
60525: PUSH
60526: LD_EXP 83
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: PPUSH
60542: CALL_OW 72
60546: ST_TO_ADDR
// end ;
60547: LD_VAR 0 2
60551: RET
// export function Negate ( value ) ; begin
60552: LD_INT 0
60554: PPUSH
// result := not value ;
60555: LD_ADDR_VAR 0 2
60559: PUSH
60560: LD_VAR 0 1
60564: NOT
60565: ST_TO_ADDR
// end ;
60566: LD_VAR 0 2
60570: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
60571: LD_INT 0
60573: PPUSH
// if x1 = x2 then
60574: LD_VAR 0 1
60578: PUSH
60579: LD_VAR 0 3
60583: EQUAL
60584: IFFALSE 60618
// begin if y1 > y2 then
60586: LD_VAR 0 2
60590: PUSH
60591: LD_VAR 0 4
60595: GREATER
60596: IFFALSE 60608
// result := 0 else
60598: LD_ADDR_VAR 0 5
60602: PUSH
60603: LD_INT 0
60605: ST_TO_ADDR
60606: GO 60616
// result := 3 ;
60608: LD_ADDR_VAR 0 5
60612: PUSH
60613: LD_INT 3
60615: ST_TO_ADDR
// exit ;
60616: GO 60704
// end ; if y1 = y2 then
60618: LD_VAR 0 2
60622: PUSH
60623: LD_VAR 0 4
60627: EQUAL
60628: IFFALSE 60662
// begin if x1 > x2 then
60630: LD_VAR 0 1
60634: PUSH
60635: LD_VAR 0 3
60639: GREATER
60640: IFFALSE 60652
// result := 1 else
60642: LD_ADDR_VAR 0 5
60646: PUSH
60647: LD_INT 1
60649: ST_TO_ADDR
60650: GO 60660
// result := 4 ;
60652: LD_ADDR_VAR 0 5
60656: PUSH
60657: LD_INT 4
60659: ST_TO_ADDR
// exit ;
60660: GO 60704
// end ; if x1 > x2 and y1 > y2 then
60662: LD_VAR 0 1
60666: PUSH
60667: LD_VAR 0 3
60671: GREATER
60672: PUSH
60673: LD_VAR 0 2
60677: PUSH
60678: LD_VAR 0 4
60682: GREATER
60683: AND
60684: IFFALSE 60696
// result := 2 else
60686: LD_ADDR_VAR 0 5
60690: PUSH
60691: LD_INT 2
60693: ST_TO_ADDR
60694: GO 60704
// result := 5 ;
60696: LD_ADDR_VAR 0 5
60700: PUSH
60701: LD_INT 5
60703: ST_TO_ADDR
// end ;
60704: LD_VAR 0 5
60708: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60709: LD_INT 0
60711: PPUSH
60712: PPUSH
// if not driver or not IsInUnit ( driver ) then
60713: LD_VAR 0 1
60717: NOT
60718: PUSH
60719: LD_VAR 0 1
60723: PPUSH
60724: CALL_OW 310
60728: NOT
60729: OR
60730: IFFALSE 60734
// exit ;
60732: GO 60824
// vehicle := IsInUnit ( driver ) ;
60734: LD_ADDR_VAR 0 3
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 310
60748: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60749: LD_VAR 0 1
60753: PPUSH
60754: LD_STRING \
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: PUSH
60784: LD_STRING E
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_VAR 0 3
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PPUSH
60820: CALL_OW 446
// end ;
60824: LD_VAR 0 2
60828: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60829: LD_INT 0
60831: PPUSH
60832: PPUSH
// if not driver or not IsInUnit ( driver ) then
60833: LD_VAR 0 1
60837: NOT
60838: PUSH
60839: LD_VAR 0 1
60843: PPUSH
60844: CALL_OW 310
60848: NOT
60849: OR
60850: IFFALSE 60854
// exit ;
60852: GO 60944
// vehicle := IsInUnit ( driver ) ;
60854: LD_ADDR_VAR 0 3
60858: PUSH
60859: LD_VAR 0 1
60863: PPUSH
60864: CALL_OW 310
60868: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60869: LD_VAR 0 1
60873: PPUSH
60874: LD_STRING \
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: PUSH
60904: LD_STRING E
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_VAR 0 3
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PPUSH
60940: CALL_OW 447
// end ;
60944: LD_VAR 0 2
60948: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60949: LD_INT 0
60951: PPUSH
60952: PPUSH
60953: PPUSH
// tmp := [ ] ;
60954: LD_ADDR_VAR 0 5
60958: PUSH
60959: EMPTY
60960: ST_TO_ADDR
// for i in units do
60961: LD_ADDR_VAR 0 4
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: FOR_IN
60972: IFFALSE 61010
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60974: LD_ADDR_VAR 0 5
60978: PUSH
60979: LD_VAR 0 5
60983: PPUSH
60984: LD_VAR 0 5
60988: PUSH
60989: LD_INT 1
60991: PLUS
60992: PPUSH
60993: LD_VAR 0 4
60997: PPUSH
60998: CALL_OW 256
61002: PPUSH
61003: CALL_OW 2
61007: ST_TO_ADDR
61008: GO 60971
61010: POP
61011: POP
// if not tmp then
61012: LD_VAR 0 5
61016: NOT
61017: IFFALSE 61021
// exit ;
61019: GO 61069
// if asc then
61021: LD_VAR 0 2
61025: IFFALSE 61049
// result := SortListByListAsc ( units , tmp ) else
61027: LD_ADDR_VAR 0 3
61031: PUSH
61032: LD_VAR 0 1
61036: PPUSH
61037: LD_VAR 0 5
61041: PPUSH
61042: CALL_OW 76
61046: ST_TO_ADDR
61047: GO 61069
// result := SortListByListDesc ( units , tmp ) ;
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_VAR 0 1
61058: PPUSH
61059: LD_VAR 0 5
61063: PPUSH
61064: CALL_OW 77
61068: ST_TO_ADDR
// end ;
61069: LD_VAR 0 3
61073: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61074: LD_INT 0
61076: PPUSH
61077: PPUSH
// task := GetTaskList ( mech ) ;
61078: LD_ADDR_VAR 0 4
61082: PUSH
61083: LD_VAR 0 1
61087: PPUSH
61088: CALL_OW 437
61092: ST_TO_ADDR
// if not task then
61093: LD_VAR 0 4
61097: NOT
61098: IFFALSE 61102
// exit ;
61100: GO 61144
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61102: LD_ADDR_VAR 0 3
61106: PUSH
61107: LD_VAR 0 4
61111: PUSH
61112: LD_INT 1
61114: ARRAY
61115: PUSH
61116: LD_INT 1
61118: ARRAY
61119: PUSH
61120: LD_STRING r
61122: EQUAL
61123: PUSH
61124: LD_VAR 0 4
61128: PUSH
61129: LD_INT 1
61131: ARRAY
61132: PUSH
61133: LD_INT 4
61135: ARRAY
61136: PUSH
61137: LD_VAR 0 2
61141: EQUAL
61142: AND
61143: ST_TO_ADDR
// end ;
61144: LD_VAR 0 3
61148: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61149: LD_INT 0
61151: PPUSH
// SetDir ( unit , d ) ;
61152: LD_VAR 0 1
61156: PPUSH
61157: LD_VAR 0 4
61161: PPUSH
61162: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61166: LD_VAR 0 1
61170: PPUSH
61171: LD_VAR 0 2
61175: PPUSH
61176: LD_VAR 0 3
61180: PPUSH
61181: LD_VAR 0 5
61185: PPUSH
61186: CALL_OW 48
// end ;
61190: LD_VAR 0 6
61194: RET
// export function ToNaturalNumber ( number ) ; begin
61195: LD_INT 0
61197: PPUSH
// result := number div 1 ;
61198: LD_ADDR_VAR 0 2
61202: PUSH
61203: LD_VAR 0 1
61207: PUSH
61208: LD_INT 1
61210: DIV
61211: ST_TO_ADDR
// if number < 0 then
61212: LD_VAR 0 1
61216: PUSH
61217: LD_INT 0
61219: LESS
61220: IFFALSE 61230
// result := 0 ;
61222: LD_ADDR_VAR 0 2
61226: PUSH
61227: LD_INT 0
61229: ST_TO_ADDR
// end ;
61230: LD_VAR 0 2
61234: RET
// export function SortByClass ( units , class ) ; var un ; begin
61235: LD_INT 0
61237: PPUSH
61238: PPUSH
// if not units or not class then
61239: LD_VAR 0 1
61243: NOT
61244: PUSH
61245: LD_VAR 0 2
61249: NOT
61250: OR
61251: IFFALSE 61255
// exit ;
61253: GO 61350
// result := [ ] ;
61255: LD_ADDR_VAR 0 3
61259: PUSH
61260: EMPTY
61261: ST_TO_ADDR
// for un in units do
61262: LD_ADDR_VAR 0 4
61266: PUSH
61267: LD_VAR 0 1
61271: PUSH
61272: FOR_IN
61273: IFFALSE 61348
// if GetClass ( un ) = class then
61275: LD_VAR 0 4
61279: PPUSH
61280: CALL_OW 257
61284: PUSH
61285: LD_VAR 0 2
61289: EQUAL
61290: IFFALSE 61317
// result := Insert ( result , 1 , un ) else
61292: LD_ADDR_VAR 0 3
61296: PUSH
61297: LD_VAR 0 3
61301: PPUSH
61302: LD_INT 1
61304: PPUSH
61305: LD_VAR 0 4
61309: PPUSH
61310: CALL_OW 2
61314: ST_TO_ADDR
61315: GO 61346
// result := Replace ( result , result + 1 , un ) ;
61317: LD_ADDR_VAR 0 3
61321: PUSH
61322: LD_VAR 0 3
61326: PPUSH
61327: LD_VAR 0 3
61331: PUSH
61332: LD_INT 1
61334: PLUS
61335: PPUSH
61336: LD_VAR 0 4
61340: PPUSH
61341: CALL_OW 1
61345: ST_TO_ADDR
61346: GO 61272
61348: POP
61349: POP
// end ; end_of_file
61350: LD_VAR 0 3
61354: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61355: LD_VAR 0 1
61359: PPUSH
61360: LD_VAR 0 2
61364: PPUSH
61365: LD_VAR 0 3
61369: PPUSH
61370: LD_VAR 0 4
61374: PPUSH
61375: LD_VAR 0 5
61379: PPUSH
61380: LD_VAR 0 6
61384: PPUSH
61385: CALL 4963 0 6
// end ;
61389: PPOPN 6
61391: END
