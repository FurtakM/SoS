// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3967 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3824 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: IFFALSE 1146
1140: PUSH
1141: LD_LOC 20
1145: AND
1146: IFFALSE 1439
1148: GO 1150
1150: DISABLE
1151: LD_INT 0
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
1160: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1161: LD_ADDR_VAR 0 1
1165: PUSH
1166: LD_LOC 3
1170: PPUSH
1171: LD_LOC 4
1175: PPUSH
1176: CALL_OW 296
1180: ST_TO_ADDR
// x = getx ( john ) ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: LD_LOC 3
1190: PPUSH
1191: CALL_OW 250
1195: ST_TO_ADDR
// y = gety ( john ) ;
1196: LD_ADDR_VAR 0 5
1200: PUSH
1201: LD_LOC 3
1205: PPUSH
1206: CALL_OW 251
1210: ST_TO_ADDR
// tmp2 = [ ] ;
1211: LD_ADDR_VAR 0 2
1215: PUSH
1216: EMPTY
1217: ST_TO_ADDR
// tmp3 = [ ] ;
1218: LD_ADDR_VAR 0 3
1222: PUSH
1223: EMPTY
1224: ST_TO_ADDR
// if tmp >= 7 then
1225: LD_VAR 0 1
1229: PUSH
1230: LD_INT 7
1232: GREATEREQUAL
1233: IFFALSE 1438
// begin for dir = 0 to 5 do
1235: LD_ADDR_VAR 0 8
1239: PUSH
1240: DOUBLE
1241: LD_INT 0
1243: DEC
1244: ST_TO_ADDR
1245: LD_INT 5
1247: PUSH
1248: FOR_TO
1249: IFFALSE 1389
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1251: LD_ADDR_VAR 0 6
1255: PUSH
1256: LD_VAR 0 4
1260: PPUSH
1261: LD_VAR 0 8
1265: PPUSH
1266: LD_VAR 0 1
1270: PUSH
1271: LD_INT 2
1273: MINUS
1274: PPUSH
1275: CALL_OW 272
1279: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1280: LD_ADDR_VAR 0 7
1284: PUSH
1285: LD_VAR 0 5
1289: PPUSH
1290: LD_VAR 0 8
1294: PPUSH
1295: LD_VAR 0 1
1299: PUSH
1300: LD_INT 2
1302: MINUS
1303: PPUSH
1304: CALL_OW 273
1308: ST_TO_ADDR
// if ValidHex ( px , py ) then
1309: LD_VAR 0 6
1313: PPUSH
1314: LD_VAR 0 7
1318: PPUSH
1319: CALL_OW 488
1323: IFFALSE 1387
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1325: LD_ADDR_VAR 0 2
1329: PUSH
1330: LD_VAR 0 2
1334: PUSH
1335: LD_VAR 0 6
1339: PUSH
1340: LD_VAR 0 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: EMPTY
1350: LIST
1351: ADD
1352: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_VAR 0 3
1362: PUSH
1363: LD_LOC 4
1367: PPUSH
1368: LD_VAR 0 6
1372: PPUSH
1373: LD_VAR 0 7
1377: PPUSH
1378: CALL_OW 297
1382: PUSH
1383: EMPTY
1384: LIST
1385: ADD
1386: ST_TO_ADDR
// end end ;
1387: GO 1248
1389: POP
1390: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1391: LD_ADDR_VAR 0 1
1395: PUSH
1396: LD_VAR 0 2
1400: PPUSH
1401: LD_VAR 0 3
1405: PPUSH
1406: CALL_OW 79
1410: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1411: LD_LOC 4
1415: PPUSH
1416: LD_VAR 0 1
1420: PUSH
1421: LD_INT 1
1423: ARRAY
1424: PPUSH
1425: LD_VAR 0 1
1429: PUSH
1430: LD_INT 2
1432: ARRAY
1433: PPUSH
1434: CALL_OW 111
// end ; enable ;
1438: ENABLE
// end ;
1439: PPOPN 8
1441: END
// on destinationunreachable ( un ) do if un = joan then
1442: LD_VAR 0 1
1446: PUSH
1447: LD_LOC 4
1451: EQUAL
1452: IFFALSE 1483
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1454: LD_LOC 4
1458: PPUSH
1459: LD_LOC 3
1463: PPUSH
1464: CALL_OW 250
1468: PPUSH
1469: LD_LOC 3
1473: PPUSH
1474: CALL_OW 251
1478: PPUSH
1479: CALL_OW 111
1483: PPOPN 1
1485: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1486: LD_LOC 3
1490: PPUSH
1491: CALL_OW 318
1495: IFFALSE 1526
1497: GO 1499
1499: DISABLE
// begin if not killhim then
1500: LD_LOC 16
1504: NOT
1505: IFFALSE 1519
// say ( joan , DXComments-Joan-1 ) ;
1507: LD_LOC 4
1511: PPUSH
1512: LD_STRING DXComments-Joan-1
1514: PPUSH
1515: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1519: LD_STRING ACH_TROLL
1521: PPUSH
1522: CALL_OW 543
// end ;
1526: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1527: LD_LOC 3
1531: PPUSH
1532: LD_INT 2
1534: PPUSH
1535: CALL_OW 308
1539: IFFALSE 1563
1541: GO 1543
1543: DISABLE
// begin if not killhim then
1544: LD_LOC 16
1548: NOT
1549: IFFALSE 1563
// say ( joan , DXComments-Joan-1a ) ;
1551: LD_LOC 4
1555: PPUSH
1556: LD_STRING DXComments-Joan-1a
1558: PPUSH
1559: CALL_OW 88
// end ;
1563: END
// every 0 0$1 + 1 1$10 marked 29 do
1564: GO 1566
1566: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1567: LD_LOC 3
1571: PPUSH
1572: LD_INT 3
1574: PPUSH
1575: CALL_OW 308
1579: NOT
1580: IFFALSE 1603
// begin if not killhim then
1582: LD_LOC 16
1586: NOT
1587: IFFALSE 1601
// say ( joan , DXComments-Joan-1b ) ;
1589: LD_LOC 4
1593: PPUSH
1594: LD_STRING DXComments-Joan-1b
1596: PPUSH
1597: CALL_OW 88
// end else
1601: GO 1604
// enable ;
1603: ENABLE
// end ;
1604: END
// every 0 0$0.3 trigger not killhim marked 097 do
1605: LD_LOC 16
1609: NOT
1610: IFFALSE 2126
1612: GO 1614
1614: DISABLE
// begin if joanok then
1615: LD_LOC 13
1619: IFFALSE 1794
// if getlives ( joan ) < 1000 then
1621: LD_LOC 4
1625: PPUSH
1626: CALL_OW 256
1630: PUSH
1631: LD_INT 1000
1633: LESS
1634: IFFALSE 1794
// begin if debug then
1636: LD_LOC 19
1640: IFFALSE 1660
// msg ( joan:  & getlives ( joan ) ) ;
1642: LD_STRING joan: 
1644: PUSH
1645: LD_LOC 4
1649: PPUSH
1650: CALL_OW 256
1654: STR
1655: PPUSH
1656: CALL_OW 100
// comhold ( joan ) ;
1660: LD_LOC 4
1664: PPUSH
1665: CALL_OW 140
// dialogueon ;
1669: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1673: LD_LOC 4
1677: PPUSH
1678: LD_STRING DXAttack-Joan-1
1680: PPUSH
1681: CALL_OW 88
// killhim = true ;
1685: LD_ADDR_LOC 16
1689: PUSH
1690: LD_INT 1
1692: ST_TO_ADDR
// music_class = 1 ;
1693: LD_ADDR_OWVAR 72
1697: PUSH
1698: LD_INT 1
1700: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1701: LD_LOC 4
1705: PPUSH
1706: LD_LOC 5
1710: PPUSH
1711: CALL_OW 250
1715: PPUSH
1716: LD_LOC 5
1720: PPUSH
1721: CALL_OW 251
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$1 ) ;
1730: LD_INT 35
1732: PPUSH
1733: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1737: LD_LOC 1
1741: PPUSH
1742: LD_LOC 2
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1757: LD_LOC 11
1761: PUSH
1762: LD_LOC 10
1766: PUSH
1767: LD_EXP 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: ADD
1776: PPUSH
1777: LD_LOC 3
1781: PPUSH
1782: CALL_OW 115
// joanok = false ;
1786: LD_ADDR_LOC 13
1790: PUSH
1791: LD_INT 0
1793: ST_TO_ADDR
// end ; if oothersok then
1794: LD_LOC 14
1798: IFFALSE 1993
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1800: LD_LOC 11
1804: PUSH
1805: LD_LOC 10
1809: PUSH
1810: LD_EXP 1
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: ADD
1819: PPUSH
1820: CALL_OW 256
1824: PUSH
1825: LD_INT 1000
1827: LESS
1828: IFFALSE 1993
// begin if debug then
1830: LD_LOC 19
1834: IFFALSE 1863
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1836: LD_STRING others+off: 
1838: PUSH
1839: LD_LOC 11
1843: PUSH
1844: LD_LOC 10
1848: PUSH
1849: EMPTY
1850: LIST
1851: ADD
1852: PPUSH
1853: CALL_OW 256
1857: STR
1858: PPUSH
1859: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1863: LD_LOC 11
1867: PUSH
1868: LD_LOC 10
1872: PUSH
1873: EMPTY
1874: LIST
1875: ADD
1876: PPUSH
1877: CALL_OW 140
// dialogueon ;
1881: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1885: LD_LOC 4
1889: PPUSH
1890: LD_STRING DXAttack-Joan-1a
1892: PPUSH
1893: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1897: LD_INT 24
1899: PPUSH
1900: CALL_OW 67
// killhim = true ;
1904: LD_ADDR_LOC 16
1908: PUSH
1909: LD_INT 1
1911: ST_TO_ADDR
// music_class = 1 ;
1912: LD_ADDR_OWVAR 72
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1920: LD_LOC 5
1924: PPUSH
1925: LD_STRING DXAttack-Sik-1
1927: PPUSH
1928: CALL_OW 88
// dialogueoff ;
1932: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1936: LD_LOC 1
1940: PPUSH
1941: LD_LOC 2
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1956: LD_LOC 11
1960: PUSH
1961: LD_LOC 10
1965: PUSH
1966: LD_EXP 1
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: ADD
1975: PPUSH
1976: LD_LOC 3
1980: PPUSH
1981: CALL_OW 115
// oothersok = false ;
1985: LD_ADDR_LOC 14
1989: PUSH
1990: LD_INT 0
1992: ST_TO_ADDR
// end ; if buildingsok then
1993: LD_LOC 15
1997: IFFALSE 2118
// if getlives ( budovy ) < 1000 then
1999: LD_LOC 12
2003: PPUSH
2004: CALL_OW 256
2008: PUSH
2009: LD_INT 1000
2011: LESS
2012: IFFALSE 2118
// begin if debug then
2014: LD_LOC 19
2018: IFFALSE 2038
// msg ( budovy:  & getlives ( budovy ) ) ;
2020: LD_STRING budovy: 
2022: PUSH
2023: LD_LOC 12
2027: PPUSH
2028: CALL_OW 256
2032: STR
2033: PPUSH
2034: CALL_OW 100
// dialogueon ;
2038: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2042: LD_LOC 4
2046: PPUSH
2047: LD_STRING DXAttack-Joan-1b
2049: PPUSH
2050: CALL_OW 88
// dialogueoff ;
2054: CALL_OW 7
// follow = false ;
2058: LD_ADDR_LOC 20
2062: PUSH
2063: LD_INT 0
2065: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2066: LD_LOC 4
2070: PPUSH
2071: LD_LOC 5
2075: PPUSH
2076: CALL_OW 250
2080: PPUSH
2081: LD_LOC 5
2085: PPUSH
2086: CALL_OW 251
2090: PPUSH
2091: CALL_OW 111
// buildingsok = false ;
2095: LD_ADDR_LOC 15
2099: PUSH
2100: LD_INT 0
2102: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2103: LD_ADDR_LOC 17
2107: PUSH
2108: LD_LOC 12
2112: PPUSH
2113: CALL_OW 256
2117: ST_TO_ADDR
// end ; if not killhim then
2118: LD_LOC 16
2122: NOT
2123: IFFALSE 2126
// enable ;
2125: ENABLE
// end ;
2126: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2127: LD_LOC 15
2131: NOT
2132: IFFALSE 2141
2134: PUSH
2135: LD_LOC 16
2139: NOT
2140: AND
2141: IFFALSE 2264
2143: GO 2145
2145: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2146: LD_LOC 17
2150: PUSH
2151: LD_LOC 12
2155: PPUSH
2156: CALL_OW 256
2160: MINUS
2161: PUSH
2162: LD_INT 7
2164: GREATER
2165: IFFALSE 2263
// begin disable ( 097 ) ;
2167: LD_INT 97
2169: DISABLE_MARKED
// disable_07 = true ;
2170: LD_ADDR_LOC 18
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// dialogueon ;
2178: CALL_OW 6
// music_class = 1 ;
2182: LD_ADDR_OWVAR 72
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2190: LD_LOC 5
2194: PPUSH
2195: LD_STRING DXAttack-Sik-1
2197: PPUSH
2198: CALL_OW 88
// dialogueoff ;
2202: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2206: LD_LOC 1
2210: PPUSH
2211: LD_LOC 2
2215: PPUSH
2216: LD_INT 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2226: LD_LOC 11
2230: PUSH
2231: LD_LOC 10
2235: PUSH
2236: LD_EXP 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: ADD
2245: PPUSH
2246: LD_LOC 3
2250: PPUSH
2251: CALL_OW 115
// killhim = true ;
2255: LD_ADDR_LOC 16
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// end ; enable ;
2263: ENABLE
// end ;
2264: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2265: LD_LOC 3
2269: PPUSH
2270: CALL_OW 310
2274: PUSH
2275: LD_INT 27
2277: EQUAL
2278: IFFALSE 2287
2280: PUSH
2281: LD_LOC 16
2285: NOT
2286: AND
2287: IFFALSE 2388
2289: GO 2291
2291: DISABLE
// begin disable ( 097 ) ;
2292: LD_INT 97
2294: DISABLE_MARKED
// disable_07 = true ;
2295: LD_ADDR_LOC 18
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// dialogueon ;
2303: CALL_OW 6
// music_class = 1 ;
2307: LD_ADDR_OWVAR 72
2311: PUSH
2312: LD_INT 1
2314: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2315: LD_LOC 5
2319: PPUSH
2320: LD_STRING DXAttack-Sik-1
2322: PPUSH
2323: CALL_OW 88
// dialogueoff ;
2327: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2331: LD_LOC 1
2335: PPUSH
2336: LD_LOC 2
2340: PPUSH
2341: LD_INT 2
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2351: LD_LOC 11
2355: PUSH
2356: LD_LOC 10
2360: PUSH
2361: LD_EXP 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: ADD
2370: PPUSH
2371: LD_LOC 3
2375: PPUSH
2376: CALL_OW 115
// killhim = true ;
2380: LD_ADDR_LOC 16
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// end ;
2388: END
// on unitgoestored ( un ) do if un = john then
2389: LD_VAR 0 1
2393: PUSH
2394: LD_LOC 3
2398: EQUAL
2399: IFFALSE 2490
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2401: LD_LOC 10
2405: PPUSH
2406: LD_LOC 3
2410: PPUSH
2411: CALL_OW 250
2415: PPUSH
2416: LD_LOC 3
2420: PPUSH
2421: CALL_OW 251
2425: PPUSH
2426: CALL_OW 111
// wait ( 0 0$1 ) ;
2430: LD_INT 35
2432: PPUSH
2433: CALL_OW 67
// InGameOn ;
2437: CALL_OW 8
// SetLives ( john , 240 ) ;
2441: LD_LOC 3
2445: PPUSH
2446: LD_INT 240
2448: PPUSH
2449: CALL_OW 234
// SetSide ( john , 8 ) ;
2453: LD_LOC 3
2457: PPUSH
2458: LD_INT 8
2460: PPUSH
2461: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2465: LD_LOC 10
2469: PPUSH
2470: LD_STRING DXAttack-Off-1
2472: PPUSH
2473: CALL_OW 88
// InGameOff ;
2477: CALL_OW 9
// youlost ( Dissmiss ) ;
2481: LD_STRING Dissmiss
2483: PPUSH
2484: CALL_OW 104
// end else
2488: GO 2614
// if not disable_07 then
2490: LD_LOC 18
2494: NOT
2495: IFFALSE 2614
// if ( not killhim ) then
2497: LD_LOC 16
2501: NOT
2502: IFFALSE 2614
// if ( gettype ( un ) = unit_human ) then
2504: LD_VAR 0 1
2508: PPUSH
2509: CALL_OW 247
2513: PUSH
2514: LD_INT 1
2516: EQUAL
2517: IFFALSE 2614
// begin disable ( 06 ) ;
2519: LD_INT 6
2521: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2522: LD_INT 18
2524: PPUSH
2525: CALL_OW 67
// dialogueon ;
2529: CALL_OW 6
// music_class = 1 ;
2533: LD_ADDR_OWVAR 72
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2541: LD_LOC 5
2545: PPUSH
2546: LD_STRING DXAttack-Sik-1
2548: PPUSH
2549: CALL_OW 88
// dialogueoff ;
2553: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2557: LD_LOC 1
2561: PPUSH
2562: LD_LOC 2
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_INT 1
2572: PPUSH
2573: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2577: LD_LOC 11
2581: PUSH
2582: LD_LOC 10
2586: PUSH
2587: LD_EXP 1
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: ADD
2596: PPUSH
2597: LD_LOC 3
2601: PPUSH
2602: CALL_OW 115
// killhim = true ;
2606: LD_ADDR_LOC 16
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// end ;
2614: PPOPN 1
2616: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2617: LD_LOC 3
2621: PPUSH
2622: LD_INT 4
2624: PPUSH
2625: CALL_OW 308
2629: IFFALSE 2638
2631: PUSH
2632: LD_LOC 16
2636: NOT
2637: AND
2638: IFFALSE 3416
2640: GO 2642
2642: DISABLE
// begin follow = false ;
2643: LD_ADDR_LOC 20
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// if Crawls ( john ) then
2651: LD_LOC 3
2655: PPUSH
2656: CALL_OW 318
2660: IFFALSE 2678
// begin ComWalk ( john ) ;
2662: LD_LOC 3
2666: PPUSH
2667: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2671: LD_INT 10
2673: PPUSH
2674: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2678: LD_INT 14
2680: PUSH
2681: EMPTY
2682: LIST
2683: PPUSH
2684: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2688: LD_LOC 3
2692: PPUSH
2693: LD_INT 75
2695: PPUSH
2696: LD_INT 36
2698: PPUSH
2699: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2703: LD_LOC 4
2707: PPUSH
2708: LD_LOC 3
2712: PPUSH
2713: CALL_OW 119
// InGameOn ;
2717: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2721: LD_LOC 3
2725: PPUSH
2726: LD_LOC 10
2730: PPUSH
2731: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2735: LD_LOC 10
2739: PPUSH
2740: LD_STRING DXReady-Off-1
2742: PPUSH
2743: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2747: LD_LOC 5
2751: PPUSH
2752: LD_LOC 6
2756: PPUSH
2757: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2761: LD_LOC 5
2765: PPUSH
2766: LD_STRING DXReady-Sik-1
2768: PPUSH
2769: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2773: LD_STRING DXReady-All-1
2775: PPUSH
2776: CALL_OW 96
// wait ( 0 0$2 ) ;
2780: LD_INT 70
2782: PPUSH
2783: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2787: LD_LOC 6
2791: PPUSH
2792: LD_LOC 5
2796: PPUSH
2797: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2801: LD_LOC 6
2805: PPUSH
2806: LD_STRING DXReady-Don-1
2808: PPUSH
2809: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2813: LD_STRING DXReady-All-2
2815: PPUSH
2816: CALL_OW 96
// wait ( 0 0$2 ) ;
2820: LD_INT 70
2822: PPUSH
2823: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2827: LD_EXP 1
2831: PPUSH
2832: LD_STRING DXReady-Off2-1
2834: PPUSH
2835: CALL_OW 88
// wait ( 0 0$1 ) ;
2839: LD_INT 35
2841: PPUSH
2842: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2846: LD_EXP 1
2850: PPUSH
2851: LD_STRING DXReady-Off2-2
2853: PPUSH
2854: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2858: LD_LOC 10
2862: PPUSH
2863: LD_INT 72
2865: PPUSH
2866: LD_INT 29
2868: PPUSH
2869: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2873: LD_EXP 1
2877: PPUSH
2878: LD_INT 73
2880: PPUSH
2881: LD_INT 31
2883: PPUSH
2884: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2888: LD_LOC 3
2892: PPUSH
2893: LD_INT 67
2895: PPUSH
2896: LD_INT 28
2898: PPUSH
2899: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2903: LD_LOC 6
2907: PPUSH
2908: LD_INT 68
2910: PPUSH
2911: LD_INT 30
2913: PPUSH
2914: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2918: LD_LOC 7
2922: PPUSH
2923: LD_INT 69
2925: PPUSH
2926: LD_INT 32
2928: PPUSH
2929: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2933: LD_LOC 5
2937: PPUSH
2938: LD_INT 66
2940: PPUSH
2941: LD_INT 28
2943: PPUSH
2944: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2948: LD_LOC 8
2952: PPUSH
2953: LD_INT 67
2955: PPUSH
2956: LD_INT 30
2958: PPUSH
2959: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2963: LD_LOC 9
2967: PPUSH
2968: LD_INT 68
2970: PPUSH
2971: LD_INT 32
2973: PPUSH
2974: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2978: LD_LOC 10
2982: PPUSH
2983: LD_INT 49
2985: PPUSH
2986: LD_INT 27
2988: PPUSH
2989: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2993: LD_EXP 1
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: LD_INT 27
3003: PPUSH
3004: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3008: LD_LOC 3
3012: PPUSH
3013: LD_INT 85
3015: PPUSH
3016: LD_INT 33
3018: PPUSH
3019: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3023: LD_LOC 6
3027: PPUSH
3028: LD_INT 85
3030: PPUSH
3031: LD_INT 33
3033: PPUSH
3034: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3038: LD_LOC 7
3042: PPUSH
3043: LD_INT 85
3045: PPUSH
3046: LD_INT 33
3048: PPUSH
3049: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3053: LD_LOC 5
3057: PPUSH
3058: LD_INT 85
3060: PPUSH
3061: LD_INT 33
3063: PPUSH
3064: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3068: LD_LOC 8
3072: PPUSH
3073: LD_INT 85
3075: PPUSH
3076: LD_INT 33
3078: PPUSH
3079: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3083: LD_LOC 9
3087: PPUSH
3088: LD_INT 85
3090: PPUSH
3091: LD_INT 33
3093: PPUSH
3094: CALL_OW 178
// wait ( 0 0$9 ) ;
3098: LD_INT 315
3100: PPUSH
3101: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_STRING DXReady-Off2-3
3112: PPUSH
3113: CALL_OW 88
// wait ( 0 0$1 ) ;
3117: LD_INT 35
3119: PPUSH
3120: CALL_OW 67
// case query ( QQuit ) of 1 :
3124: LD_STRING QQuit
3126: PPUSH
3127: CALL_OW 97
3131: PUSH
3132: LD_INT 1
3134: DOUBLE
3135: EQUAL
3136: IFTRUE 3140
3138: GO 3209
3140: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3141: LD_EXP 1
3145: PPUSH
3146: LD_STRING DQrQuit#1-Off2-1
3148: PPUSH
3149: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3153: LD_LOC 3
3157: PPUSH
3158: LD_STRING DQrQuit#1-JMM-1a
3160: PPUSH
3161: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3165: LD_EXP 1
3169: PPUSH
3170: LD_STRING DQrQuit#1-Off2-2
3172: PPUSH
3173: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3177: LD_LOC 3
3181: PPUSH
3182: LD_INT 73
3184: PPUSH
3185: LD_INT 49
3187: PPUSH
3188: CALL_OW 111
// wait ( 0 0$3 ) ;
3192: LD_INT 105
3194: PPUSH
3195: CALL_OW 67
// ingameoff ;
3199: CALL_OW 9
// YouDidSomethingExtraordinary ;
3203: CALL_OW 105
// end ; 2 :
3207: GO 3416
3209: LD_INT 2
3211: DOUBLE
3212: EQUAL
3213: IFTRUE 3217
3215: GO 3415
3217: POP
// begin disable ( 29 ) ;
3218: LD_INT 29
3220: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3221: LD_INT 35
3223: PPUSH
3224: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3228: LD_EXP 1
3232: PPUSH
3233: LD_STRING DXReady-Off2-4
3235: PPUSH
3236: CALL_OW 88
// wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3247: LD_LOC 10
3251: PPUSH
3252: LD_STRING DXReady-Off-2
3254: PPUSH
3255: CALL_OW 88
// comenterunit ( will , eon ) ;
3259: LD_LOC 8
3263: PPUSH
3264: LD_INT 14
3266: PPUSH
3267: CALL_OW 120
// wait ( 0 0$3 ) ;
3271: LD_INT 105
3273: PPUSH
3274: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3278: LD_LOC 10
3282: PPUSH
3283: LD_STRING DXReady-Off-3
3285: PPUSH
3286: CALL_OW 88
// comenterunit ( sik , eon ) ;
3290: LD_LOC 5
3294: PPUSH
3295: LD_INT 14
3297: PPUSH
3298: CALL_OW 120
// wait ( 0 0$3 ) ;
3302: LD_INT 105
3304: PPUSH
3305: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3309: LD_LOC 10
3313: PPUSH
3314: LD_STRING DXReady-Off-4
3316: PPUSH
3317: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3321: LD_LOC 6
3325: PPUSH
3326: LD_INT 14
3328: PPUSH
3329: CALL_OW 120
// wait ( 0 0$3 ) ;
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3340: LD_LOC 10
3344: PPUSH
3345: LD_STRING DXReady-Off-5
3347: PPUSH
3348: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3352: LD_LOC 3
3356: PPUSH
3357: LD_INT 76
3359: PPUSH
3360: LD_INT 34
3362: PPUSH
3363: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3367: LD_LOC 3
3371: PPUSH
3372: LD_INT 76
3374: PPUSH
3375: LD_INT 33
3377: PPUSH
3378: CALL_OW 178
// wait ( 0 0$4 ) ;
3382: LD_INT 140
3384: PPUSH
3385: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3389: LD_LOC 3
3393: PPUSH
3394: LD_STRING DQrQuit#2-JMM-1
3396: PPUSH
3397: CALL_OW 88
// comenterunit ( john , eon ) ;
3401: LD_LOC 3
3405: PPUSH
3406: LD_INT 14
3408: PPUSH
3409: CALL_OW 120
// end ; end ;
3413: GO 3416
3415: POP
// end ;
3416: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3417: LD_LOC 3
3421: PPUSH
3422: LD_INT 48
3424: PPUSH
3425: LD_INT 66
3427: PPUSH
3428: CALL_OW 297
3432: PUSH
3433: LD_INT 5
3435: LESS
3436: IFFALSE 3453
3438: GO 3440
3440: DISABLE
// ForceExclamation ( john , 28 ) ;
3441: LD_LOC 3
3445: PPUSH
3446: LD_INT 28
3448: PPUSH
3449: CALL_OW 582
3453: END
// on enterbuilding ( b , un ) do begin if b = eon then
3454: LD_VAR 0 1
3458: PUSH
3459: LD_INT 14
3461: EQUAL
3462: IFFALSE 3642
// case un of john :
3464: LD_VAR 0 2
3468: PUSH
3469: LD_LOC 3
3473: DOUBLE
3474: EQUAL
3475: IFTRUE 3479
3477: GO 3632
3479: POP
// if not killhim then
3480: LD_LOC 16
3484: NOT
3485: IFFALSE 3589
// begin music_class := 6 ;
3487: LD_ADDR_OWVAR 72
3491: PUSH
3492: LD_INT 6
3494: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3495: LD_INT 70
3497: PPUSH
3498: CALL_OW 67
// DialogueOn ;
3502: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3506: LD_INT 1
3508: PPUSH
3509: LD_INT 1
3511: PPUSH
3512: CALL_OW 86
// RemoveUnit ( joan ) ;
3516: LD_LOC 4
3520: PPUSH
3521: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3525: LD_INT 1
3527: PPUSH
3528: LD_INT 8
3530: PPUSH
3531: CALL_OW 343
// ResetFog ;
3535: CALL_OW 335
// wait ( 0 0$1 ) ;
3539: LD_INT 35
3541: PPUSH
3542: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3546: LD_LOC 4
3550: PPUSH
3551: LD_STRING DX1-Joan-4
3553: PPUSH
3554: CALL_OW 88
// savecharacters ( john , JMM ) ;
3558: LD_LOC 3
3562: PPUSH
3563: LD_STRING JMM
3565: PPUSH
3566: CALL_OW 38
// wait ( 0 0$1 ) ;
3570: LD_INT 35
3572: PPUSH
3573: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3577: LD_STRING 1
3579: PPUSH
3580: LD_STRING %_cont
3582: PPUSH
3583: CALL_OW 340
// end else
3587: GO 3630
// begin placeunitxy ( john , 76 , 34 , false ) ;
3589: LD_LOC 3
3593: PPUSH
3594: LD_INT 76
3596: PPUSH
3597: LD_INT 34
3599: PPUSH
3600: LD_INT 0
3602: PPUSH
3603: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3607: LD_LOC 11
3611: PUSH
3612: LD_LOC 10
3616: PUSH
3617: EMPTY
3618: LIST
3619: ADD
3620: PPUSH
3621: LD_LOC 3
3625: PPUSH
3626: CALL_OW 115
// end ; else
3630: GO 3642
3632: POP
// RemoveUnit ( un ) ; end ;
3633: LD_VAR 0 2
3637: PPUSH
3638: CALL_OW 64
// end ;
3642: PPOPN 2
3644: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3645: LD_VAR 0 1
3649: PUSH
3650: LD_INT 1
3652: EQUAL
3653: IFFALSE 3665
3655: PUSH
3656: LD_VAR 0 2
3660: PUSH
3661: LD_INT 4
3663: EQUAL
3664: AND
3665: IFFALSE 3677
3667: PUSH
3668: LD_LOC 16
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: AND
3677: IFFALSE 3771
// begin wait ( 0 0$1 ) ;
3679: LD_INT 35
3681: PPUSH
3682: CALL_OW 67
// music_class = 1 ;
3686: LD_ADDR_OWVAR 72
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// DialogueOn ;
3694: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3698: LD_LOC 5
3702: PPUSH
3703: LD_STRING DXAttack-Sik-1
3705: PPUSH
3706: CALL_OW 88
// dialogueoff ;
3710: CALL_OW 7
// killhim = true ;
3714: LD_ADDR_LOC 16
3718: PUSH
3719: LD_INT 1
3721: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3722: LD_LOC 1
3726: PPUSH
3727: LD_LOC 2
3731: PPUSH
3732: LD_INT 2
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3742: LD_LOC 11
3746: PUSH
3747: LD_LOC 10
3751: PUSH
3752: LD_EXP 1
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: ADD
3761: PPUSH
3762: LD_LOC 3
3766: PPUSH
3767: CALL_OW 115
// end ; end ;
3771: PPOPN 2
3773: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3774: LD_VAR 0 2
3778: PUSH
3779: LD_LOC 3
3783: EQUAL
3784: IFFALSE 3821
// begin async ;
3786: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3787: LD_LOC 4
3791: PPUSH
3792: LD_STRING DXComments-Joan-1
3794: PPUSH
3795: CALL_OW 88
// ComExitVehicle ( john ) ;
3799: LD_LOC 3
3803: PPUSH
3804: CALL_OW 121
// SetSide ( veh , 4 ) ;
3808: LD_VAR 0 1
3812: PPUSH
3813: LD_INT 4
3815: PPUSH
3816: CALL_OW 235
// sync ;
3820: SYNC
// end ; end ; end_of_file
3821: PPOPN 2
3823: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3824: LD_INT 0
3826: PPUSH
// uc_side := 4 ;
3827: LD_ADDR_OWVAR 20
3831: PUSH
3832: LD_INT 4
3834: ST_TO_ADDR
// uc_nation := nation_american ;
3835: LD_ADDR_OWVAR 21
3839: PUSH
3840: LD_INT 1
3842: ST_TO_ADDR
// hc_importance = 50 ;
3843: LD_ADDR_OWVAR 32
3847: PUSH
3848: LD_INT 50
3850: ST_TO_ADDR
// hc_sex = sex_male ;
3851: LD_ADDR_OWVAR 27
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// hc_class = 1 ;
3859: LD_ADDR_OWVAR 28
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3867: LD_ADDR_OWVAR 30
3871: PUSH
3872: LD_INT 7
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 2
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3890: LD_ADDR_OWVAR 31
3894: PUSH
3895: LD_INT 7
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 2
3903: PUSH
3904: LD_INT 2
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3913: LD_ADDR_OWVAR 29
3917: PUSH
3918: LD_INT 11
3920: PUSH
3921: LD_INT 11
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: ST_TO_ADDR
// hc_name := Officer2 ;
3928: LD_ADDR_OWVAR 26
3932: PUSH
3933: LD_STRING Officer2
3935: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3936: LD_ADDR_OWVAR 33
3940: PUSH
3941: LD_STRING AmGalRemake
3943: ST_TO_ADDR
// hc_face_number := 3 ;
3944: LD_ADDR_OWVAR 34
3948: PUSH
3949: LD_INT 3
3951: ST_TO_ADDR
// off2 := CreateHuman ;
3952: LD_ADDR_EXP 1
3956: PUSH
3957: CALL_OW 44
3961: ST_TO_ADDR
// end ;
3962: LD_VAR 0 1
3966: RET
// export function CreatePersonnel ; begin
3967: LD_INT 0
3969: PPUSH
// uc_side := 4 ;
3970: LD_ADDR_OWVAR 20
3974: PUSH
3975: LD_INT 4
3977: ST_TO_ADDR
// uc_nation := nation_american ;
3978: LD_ADDR_OWVAR 21
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// hc_importance = 10 ;
3986: LD_ADDR_OWVAR 32
3990: PUSH
3991: LD_INT 10
3993: ST_TO_ADDR
// hc_name :=  ;
3994: LD_ADDR_OWVAR 26
3998: PUSH
3999: LD_STRING 
4001: ST_TO_ADDR
// hc_gallery :=  ;
4002: LD_ADDR_OWVAR 33
4006: PUSH
4007: LD_STRING 
4009: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4010: LD_INT 1
4012: PPUSH
4013: LD_INT 2
4015: NEG
4016: PPUSH
4017: CALL_OW 382
// engi1 := CreateHuman ;
4021: LD_ADDR_EXP 2
4025: PUSH
4026: CALL_OW 44
4030: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4031: LD_INT 1
4033: PPUSH
4034: LD_INT 2
4036: NEG
4037: PPUSH
4038: CALL_OW 382
// engi2 := CreateHuman ;
4042: LD_ADDR_EXP 3
4046: PUSH
4047: CALL_OW 44
4051: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4052: LD_EXP 2
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4064: LD_EXP 3
4068: PPUSH
4069: LD_INT 10
4071: PPUSH
4072: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4076: LD_INT 1
4078: PPUSH
4079: LD_INT 1
4081: NEG
4082: PPUSH
4083: CALL_OW 383
// truckdriver := CreateHuman ;
4087: LD_ADDR_EXP 4
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4097: LD_EXP 4
4101: PPUSH
4102: LD_INT 27
4104: PPUSH
4105: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4109: LD_INT 27
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 100
4117: PPUSH
4118: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 3
4127: PPUSH
4128: CALL_OW 381
// hc_class = class_soldier ;
4132: LD_ADDR_OWVAR 28
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// snip1 := CreateHuman ;
4140: LD_ADDR_EXP 6
4144: PUSH
4145: CALL_OW 44
4149: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4150: LD_INT 2
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: CALL_OW 381
// hc_class = class_soldier ;
4160: LD_ADDR_OWVAR 28
4164: PUSH
4165: LD_INT 1
4167: ST_TO_ADDR
// snip2 := CreateHuman ;
4168: LD_ADDR_EXP 7
4172: PUSH
4173: CALL_OW 44
4177: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4178: LD_EXP 6
4182: PPUSH
4183: LD_INT 47
4185: PPUSH
4186: LD_INT 17
4188: PPUSH
4189: LD_INT 0
4191: PPUSH
4192: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4196: LD_EXP 7
4200: PPUSH
4201: LD_INT 29
4203: PPUSH
4204: LD_INT 31
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4214: LD_EXP 6
4218: PUSH
4219: LD_EXP 7
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: CALL_OW 381
// sol1 := CreateHuman ;
4242: LD_ADDR_EXP 8
4246: PUSH
4247: CALL_OW 44
4251: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 2
4259: PPUSH
4260: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4264: LD_EXP 8
4268: PPUSH
4269: LD_INT 15
4271: PPUSH
4272: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4276: LD_INT 1
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 381
// sol2 := CreateHuman ;
4286: LD_ADDR_EXP 9
4290: PUSH
4291: CALL_OW 44
4295: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4296: LD_INT 1
4298: PPUSH
4299: LD_INT 3
4301: PPUSH
4302: CALL_OW 381
// sol3 := CreateHuman ;
4306: LD_ADDR_EXP 10
4310: PUSH
4311: CALL_OW 44
4315: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4316: LD_EXP 9
4320: PPUSH
4321: LD_INT 40
4323: PPUSH
4324: LD_INT 42
4326: PPUSH
4327: LD_INT 0
4329: PPUSH
4330: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4334: LD_EXP 10
4338: PPUSH
4339: LD_INT 53
4341: PPUSH
4342: LD_INT 34
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4352: LD_INT 1
4354: PPUSH
4355: LD_INT 3
4357: PPUSH
4358: CALL_OW 381
// pat1 := CreateHuman ;
4362: LD_ADDR_EXP 11
4366: PUSH
4367: CALL_OW 44
4371: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 3
4377: PPUSH
4378: CALL_OW 381
// pat2 := CreateHuman ;
4382: LD_ADDR_EXP 12
4386: PUSH
4387: CALL_OW 44
4391: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4392: LD_EXP 11
4396: PPUSH
4397: LD_INT 29
4399: PPUSH
4400: LD_INT 6
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4410: LD_EXP 12
4414: PPUSH
4415: LD_INT 30
4417: PPUSH
4418: LD_INT 7
4420: PPUSH
4421: LD_INT 0
4423: PPUSH
4424: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4428: LD_ADDR_EXP 13
4432: PUSH
4433: LD_EXP 11
4437: PUSH
4438: LD_EXP 12
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4447: LD_ADDR_EXP 14
4451: PUSH
4452: LD_EXP 2
4456: PUSH
4457: LD_EXP 3
4461: PUSH
4462: LD_EXP 8
4466: PUSH
4467: LD_EXP 9
4471: PUSH
4472: LD_EXP 10
4476: PUSH
4477: LD_EXP 6
4481: PUSH
4482: LD_EXP 7
4486: PUSH
4487: LD_EXP 13
4491: PUSH
4492: LD_EXP 4
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: ST_TO_ADDR
// end ;
4508: LD_VAR 0 1
4512: RET
// every 0 0$1 do
4513: GO 4515
4515: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4516: LD_EXP 13
4520: PPUSH
4521: LD_INT 64
4523: PPUSH
4524: LD_INT 22
4526: PPUSH
4527: CALL_OW 171
// wait ( 0 0$25 ) ;
4531: LD_INT 875
4533: PPUSH
4534: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4538: LD_EXP 13
4542: PPUSH
4543: LD_INT 30
4545: PPUSH
4546: LD_INT 8
4548: PPUSH
4549: CALL_OW 171
// wait ( 0 0$25 ) ;
4553: LD_INT 875
4555: PPUSH
4556: CALL_OW 67
// enable ;
4560: ENABLE
// end ;
4561: END
// every 0 0$1 do
4562: GO 4564
4564: DISABLE
// begin SetLives ( truck , 550 ) ;
4565: LD_INT 27
4567: PPUSH
4568: LD_INT 550
4570: PPUSH
4571: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4575: LD_INT 27
4577: PPUSH
4578: LD_INT 42
4580: PPUSH
4581: LD_INT 35
4583: PPUSH
4584: CALL_OW 111
// AddComUnload ( truck ) ;
4588: LD_INT 27
4590: PPUSH
4591: CALL_OW 219
// Wait ( 0 0$8 ) ;
4595: LD_INT 280
4597: PPUSH
4598: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4602: LD_EXP 2
4606: PUSH
4607: LD_EXP 3
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PPUSH
4616: LD_INT 45
4618: PPUSH
4619: LD_INT 36
4621: PPUSH
4622: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4626: LD_EXP 4
4630: PPUSH
4631: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4635: LD_EXP 4
4639: PPUSH
4640: LD_INT 40
4642: PPUSH
4643: LD_INT 33
4645: PPUSH
4646: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4650: LD_INT 35
4652: PPUSH
4653: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4657: LD_EXP 4
4661: PPUSH
4662: LD_INT 27
4664: PPUSH
4665: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4669: LD_INT 27
4671: PPUSH
4672: CALL_OW 256
4676: PUSH
4677: LD_INT 1000
4679: EQUAL
4680: IFFALSE 4650
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4682: LD_EXP 2
4686: PUSH
4687: LD_EXP 3
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: LD_INT 10
4698: PPUSH
4699: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4703: LD_INT 35
4705: PPUSH
4706: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4710: LD_INT 27
4712: PPUSH
4713: CALL_OW 311
4717: NOT
4718: IFFALSE 4703
// ComEnterUnit ( truckdriver , truck ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 27
4727: PPUSH
4728: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4732: LD_EXP 4
4736: PPUSH
4737: LD_INT 74
4739: PPUSH
4740: LD_INT 52
4742: PPUSH
4743: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4747: LD_EXP 4
4751: PPUSH
4752: LD_INT 90
4754: PPUSH
4755: LD_INT 58
4757: PPUSH
4758: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4762: LD_EXP 4
4766: PPUSH
4767: LD_INT 98
4769: PPUSH
4770: LD_INT 61
4772: PPUSH
4773: CALL_OW 171
// end ;
4777: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4778: LD_INT 7
4780: PPUSH
4781: LD_INT 22
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 70
4795: IFFALSE 4843
4797: GO 4799
4799: DISABLE
4800: LD_INT 0
4802: PPUSH
// begin enable ;
4803: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4804: LD_ADDR_VAR 0 1
4808: PUSH
4809: LD_INT 7
4811: PPUSH
4812: LD_INT 22
4814: PUSH
4815: LD_INT 4
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PPUSH
4822: CALL_OW 70
4826: PUSH
4827: FOR_IN
4828: IFFALSE 4841
// RemoveUnit ( i ) ;
4830: LD_VAR 0 1
4834: PPUSH
4835: CALL_OW 64
4839: GO 4827
4841: POP
4842: POP
// end ;
4843: PPOPN 1
4845: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4846: LD_INT 22
4848: PUSH
4849: LD_INT 4
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: LD_INT 24
4861: PUSH
4862: LD_INT 1000
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_INT 21
4875: PUSH
4876: LD_INT 1
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PPUSH
4888: CALL_OW 69
4892: IFFALSE 4972
4894: GO 4896
4896: DISABLE
4897: LD_INT 0
4899: PPUSH
// begin enable ;
4900: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4901: LD_ADDR_VAR 0 1
4905: PUSH
4906: LD_INT 22
4908: PUSH
4909: LD_INT 4
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 24
4921: PUSH
4922: LD_INT 1000
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 21
4935: PUSH
4936: LD_INT 1
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: PUSH
4953: FOR_IN
4954: IFFALSE 4970
// SetLives ( i , 1000 ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: LD_INT 1000
4963: PPUSH
4964: CALL_OW 234
4968: GO 4953
4970: POP
4971: POP
// end ; end_of_file
4972: PPOPN 1
4974: END
// export globalGameSaveCounter ; every 0 0$1 do
4975: GO 4977
4977: DISABLE
// begin enable ;
4978: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4979: LD_STRING updateTimer(
4981: PUSH
4982: LD_OWVAR 1
4986: STR
4987: PUSH
4988: LD_STRING );
4990: STR
4991: PPUSH
4992: CALL_OW 559
// end ;
4996: END
// every 0 0$1 do
4997: GO 4999
4999: DISABLE
// begin globalGameSaveCounter := 0 ;
5000: LD_ADDR_EXP 15
5004: PUSH
5005: LD_INT 0
5007: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5008: LD_STRING setGameSaveCounter(0)
5010: PPUSH
5011: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5015: LD_STRING initStreamRollete();
5017: PPUSH
5018: CALL_OW 559
// InitStreamMode ;
5022: CALL 6367 0 0
// DefineStreamItems ( false ) ;
5026: LD_INT 0
5028: PPUSH
5029: CALL 6831 0 1
// end ;
5033: END
// export function SOS_MapStart ( ) ; begin
5034: LD_INT 0
5036: PPUSH
// if streamModeActive then
5037: LD_EXP 16
5041: IFFALSE 5050
// DefineStreamItems ( true ) ;
5043: LD_INT 1
5045: PPUSH
5046: CALL 6831 0 1
// UpdateLuaVariables ( ) ;
5050: CALL 5067 0 0
// UpdateFactoryWaypoints ( ) ;
5054: CALL 19953 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5058: CALL 20205 0 0
// end ;
5062: LD_VAR 0 1
5066: RET
// function UpdateLuaVariables ( ) ; begin
5067: LD_INT 0
5069: PPUSH
// if globalGameSaveCounter then
5070: LD_EXP 15
5074: IFFALSE 5108
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5076: LD_ADDR_EXP 15
5080: PUSH
5081: LD_EXP 15
5085: PPUSH
5086: CALL 66949 0 1
5090: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5091: LD_STRING setGameSaveCounter(
5093: PUSH
5094: LD_EXP 15
5098: STR
5099: PUSH
5100: LD_STRING )
5102: STR
5103: PPUSH
5104: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5108: LD_STRING setGameDifficulty(
5110: PUSH
5111: LD_OWVAR 67
5115: STR
5116: PUSH
5117: LD_STRING )
5119: STR
5120: PPUSH
5121: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
5125: LD_STRING displayDifficulty(
5127: PUSH
5128: LD_OWVAR 67
5132: STR
5133: PUSH
5134: LD_STRING )
5136: STR
5137: PPUSH
5138: CALL_OW 559
// end ;
5142: LD_VAR 0 1
5146: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5147: LD_INT 0
5149: PPUSH
// if p2 = stream_mode then
5150: LD_VAR 0 2
5154: PUSH
5155: LD_INT 100
5157: EQUAL
5158: IFFALSE 6161
// begin if not StreamModeActive then
5160: LD_EXP 16
5164: NOT
5165: IFFALSE 5175
// StreamModeActive := true ;
5167: LD_ADDR_EXP 16
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// if p3 = 0 then
5175: LD_VAR 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: IFFALSE 5189
// InitStreamMode ;
5185: CALL 6367 0 0
// if p3 = 1 then
5189: LD_VAR 0 3
5193: PUSH
5194: LD_INT 1
5196: EQUAL
5197: IFFALSE 5207
// sRocket := true ;
5199: LD_ADDR_EXP 21
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// if p3 = 2 then
5207: LD_VAR 0 3
5211: PUSH
5212: LD_INT 2
5214: EQUAL
5215: IFFALSE 5225
// sSpeed := true ;
5217: LD_ADDR_EXP 20
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if p3 = 3 then
5225: LD_VAR 0 3
5229: PUSH
5230: LD_INT 3
5232: EQUAL
5233: IFFALSE 5243
// sEngine := true ;
5235: LD_ADDR_EXP 22
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// if p3 = 4 then
5243: LD_VAR 0 3
5247: PUSH
5248: LD_INT 4
5250: EQUAL
5251: IFFALSE 5261
// sSpec := true ;
5253: LD_ADDR_EXP 19
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// if p3 = 5 then
5261: LD_VAR 0 3
5265: PUSH
5266: LD_INT 5
5268: EQUAL
5269: IFFALSE 5279
// sLevel := true ;
5271: LD_ADDR_EXP 23
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// if p3 = 6 then
5279: LD_VAR 0 3
5283: PUSH
5284: LD_INT 6
5286: EQUAL
5287: IFFALSE 5297
// sArmoury := true ;
5289: LD_ADDR_EXP 24
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// if p3 = 7 then
5297: LD_VAR 0 3
5301: PUSH
5302: LD_INT 7
5304: EQUAL
5305: IFFALSE 5315
// sRadar := true ;
5307: LD_ADDR_EXP 25
5311: PUSH
5312: LD_INT 1
5314: ST_TO_ADDR
// if p3 = 8 then
5315: LD_VAR 0 3
5319: PUSH
5320: LD_INT 8
5322: EQUAL
5323: IFFALSE 5333
// sBunker := true ;
5325: LD_ADDR_EXP 26
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if p3 = 9 then
5333: LD_VAR 0 3
5337: PUSH
5338: LD_INT 9
5340: EQUAL
5341: IFFALSE 5351
// sHack := true ;
5343: LD_ADDR_EXP 27
5347: PUSH
5348: LD_INT 1
5350: ST_TO_ADDR
// if p3 = 10 then
5351: LD_VAR 0 3
5355: PUSH
5356: LD_INT 10
5358: EQUAL
5359: IFFALSE 5369
// sFire := true ;
5361: LD_ADDR_EXP 28
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// if p3 = 11 then
5369: LD_VAR 0 3
5373: PUSH
5374: LD_INT 11
5376: EQUAL
5377: IFFALSE 5387
// sRefresh := true ;
5379: LD_ADDR_EXP 29
5383: PUSH
5384: LD_INT 1
5386: ST_TO_ADDR
// if p3 = 12 then
5387: LD_VAR 0 3
5391: PUSH
5392: LD_INT 12
5394: EQUAL
5395: IFFALSE 5405
// sExp := true ;
5397: LD_ADDR_EXP 30
5401: PUSH
5402: LD_INT 1
5404: ST_TO_ADDR
// if p3 = 13 then
5405: LD_VAR 0 3
5409: PUSH
5410: LD_INT 13
5412: EQUAL
5413: IFFALSE 5423
// sDepot := true ;
5415: LD_ADDR_EXP 31
5419: PUSH
5420: LD_INT 1
5422: ST_TO_ADDR
// if p3 = 14 then
5423: LD_VAR 0 3
5427: PUSH
5428: LD_INT 14
5430: EQUAL
5431: IFFALSE 5441
// sFlag := true ;
5433: LD_ADDR_EXP 32
5437: PUSH
5438: LD_INT 1
5440: ST_TO_ADDR
// if p3 = 15 then
5441: LD_VAR 0 3
5445: PUSH
5446: LD_INT 15
5448: EQUAL
5449: IFFALSE 5459
// sKamikadze := true ;
5451: LD_ADDR_EXP 40
5455: PUSH
5456: LD_INT 1
5458: ST_TO_ADDR
// if p3 = 16 then
5459: LD_VAR 0 3
5463: PUSH
5464: LD_INT 16
5466: EQUAL
5467: IFFALSE 5477
// sTroll := true ;
5469: LD_ADDR_EXP 41
5473: PUSH
5474: LD_INT 1
5476: ST_TO_ADDR
// if p3 = 17 then
5477: LD_VAR 0 3
5481: PUSH
5482: LD_INT 17
5484: EQUAL
5485: IFFALSE 5495
// sSlow := true ;
5487: LD_ADDR_EXP 42
5491: PUSH
5492: LD_INT 1
5494: ST_TO_ADDR
// if p3 = 18 then
5495: LD_VAR 0 3
5499: PUSH
5500: LD_INT 18
5502: EQUAL
5503: IFFALSE 5513
// sLack := true ;
5505: LD_ADDR_EXP 43
5509: PUSH
5510: LD_INT 1
5512: ST_TO_ADDR
// if p3 = 19 then
5513: LD_VAR 0 3
5517: PUSH
5518: LD_INT 19
5520: EQUAL
5521: IFFALSE 5531
// sTank := true ;
5523: LD_ADDR_EXP 45
5527: PUSH
5528: LD_INT 1
5530: ST_TO_ADDR
// if p3 = 20 then
5531: LD_VAR 0 3
5535: PUSH
5536: LD_INT 20
5538: EQUAL
5539: IFFALSE 5549
// sRemote := true ;
5541: LD_ADDR_EXP 46
5545: PUSH
5546: LD_INT 1
5548: ST_TO_ADDR
// if p3 = 21 then
5549: LD_VAR 0 3
5553: PUSH
5554: LD_INT 21
5556: EQUAL
5557: IFFALSE 5567
// sPowell := true ;
5559: LD_ADDR_EXP 47
5563: PUSH
5564: LD_INT 1
5566: ST_TO_ADDR
// if p3 = 22 then
5567: LD_VAR 0 3
5571: PUSH
5572: LD_INT 22
5574: EQUAL
5575: IFFALSE 5585
// sTeleport := true ;
5577: LD_ADDR_EXP 50
5581: PUSH
5582: LD_INT 1
5584: ST_TO_ADDR
// if p3 = 23 then
5585: LD_VAR 0 3
5589: PUSH
5590: LD_INT 23
5592: EQUAL
5593: IFFALSE 5603
// sOilTower := true ;
5595: LD_ADDR_EXP 52
5599: PUSH
5600: LD_INT 1
5602: ST_TO_ADDR
// if p3 = 24 then
5603: LD_VAR 0 3
5607: PUSH
5608: LD_INT 24
5610: EQUAL
5611: IFFALSE 5621
// sShovel := true ;
5613: LD_ADDR_EXP 53
5617: PUSH
5618: LD_INT 1
5620: ST_TO_ADDR
// if p3 = 25 then
5621: LD_VAR 0 3
5625: PUSH
5626: LD_INT 25
5628: EQUAL
5629: IFFALSE 5639
// sSheik := true ;
5631: LD_ADDR_EXP 54
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// if p3 = 26 then
5639: LD_VAR 0 3
5643: PUSH
5644: LD_INT 26
5646: EQUAL
5647: IFFALSE 5657
// sEarthquake := true ;
5649: LD_ADDR_EXP 56
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// if p3 = 27 then
5657: LD_VAR 0 3
5661: PUSH
5662: LD_INT 27
5664: EQUAL
5665: IFFALSE 5675
// sAI := true ;
5667: LD_ADDR_EXP 57
5671: PUSH
5672: LD_INT 1
5674: ST_TO_ADDR
// if p3 = 28 then
5675: LD_VAR 0 3
5679: PUSH
5680: LD_INT 28
5682: EQUAL
5683: IFFALSE 5693
// sCargo := true ;
5685: LD_ADDR_EXP 60
5689: PUSH
5690: LD_INT 1
5692: ST_TO_ADDR
// if p3 = 29 then
5693: LD_VAR 0 3
5697: PUSH
5698: LD_INT 29
5700: EQUAL
5701: IFFALSE 5711
// sDLaser := true ;
5703: LD_ADDR_EXP 61
5707: PUSH
5708: LD_INT 1
5710: ST_TO_ADDR
// if p3 = 30 then
5711: LD_VAR 0 3
5715: PUSH
5716: LD_INT 30
5718: EQUAL
5719: IFFALSE 5729
// sExchange := true ;
5721: LD_ADDR_EXP 62
5725: PUSH
5726: LD_INT 1
5728: ST_TO_ADDR
// if p3 = 31 then
5729: LD_VAR 0 3
5733: PUSH
5734: LD_INT 31
5736: EQUAL
5737: IFFALSE 5747
// sFac := true ;
5739: LD_ADDR_EXP 63
5743: PUSH
5744: LD_INT 1
5746: ST_TO_ADDR
// if p3 = 32 then
5747: LD_VAR 0 3
5751: PUSH
5752: LD_INT 32
5754: EQUAL
5755: IFFALSE 5765
// sPower := true ;
5757: LD_ADDR_EXP 64
5761: PUSH
5762: LD_INT 1
5764: ST_TO_ADDR
// if p3 = 33 then
5765: LD_VAR 0 3
5769: PUSH
5770: LD_INT 33
5772: EQUAL
5773: IFFALSE 5783
// sRandom := true ;
5775: LD_ADDR_EXP 65
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// if p3 = 34 then
5783: LD_VAR 0 3
5787: PUSH
5788: LD_INT 34
5790: EQUAL
5791: IFFALSE 5801
// sShield := true ;
5793: LD_ADDR_EXP 66
5797: PUSH
5798: LD_INT 1
5800: ST_TO_ADDR
// if p3 = 35 then
5801: LD_VAR 0 3
5805: PUSH
5806: LD_INT 35
5808: EQUAL
5809: IFFALSE 5819
// sTime := true ;
5811: LD_ADDR_EXP 67
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// if p3 = 36 then
5819: LD_VAR 0 3
5823: PUSH
5824: LD_INT 36
5826: EQUAL
5827: IFFALSE 5837
// sTools := true ;
5829: LD_ADDR_EXP 68
5833: PUSH
5834: LD_INT 1
5836: ST_TO_ADDR
// if p3 = 101 then
5837: LD_VAR 0 3
5841: PUSH
5842: LD_INT 101
5844: EQUAL
5845: IFFALSE 5855
// sSold := true ;
5847: LD_ADDR_EXP 33
5851: PUSH
5852: LD_INT 1
5854: ST_TO_ADDR
// if p3 = 102 then
5855: LD_VAR 0 3
5859: PUSH
5860: LD_INT 102
5862: EQUAL
5863: IFFALSE 5873
// sDiff := true ;
5865: LD_ADDR_EXP 34
5869: PUSH
5870: LD_INT 1
5872: ST_TO_ADDR
// if p3 = 103 then
5873: LD_VAR 0 3
5877: PUSH
5878: LD_INT 103
5880: EQUAL
5881: IFFALSE 5891
// sFog := true ;
5883: LD_ADDR_EXP 37
5887: PUSH
5888: LD_INT 1
5890: ST_TO_ADDR
// if p3 = 104 then
5891: LD_VAR 0 3
5895: PUSH
5896: LD_INT 104
5898: EQUAL
5899: IFFALSE 5909
// sReset := true ;
5901: LD_ADDR_EXP 38
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// if p3 = 105 then
5909: LD_VAR 0 3
5913: PUSH
5914: LD_INT 105
5916: EQUAL
5917: IFFALSE 5927
// sSun := true ;
5919: LD_ADDR_EXP 39
5923: PUSH
5924: LD_INT 1
5926: ST_TO_ADDR
// if p3 = 106 then
5927: LD_VAR 0 3
5931: PUSH
5932: LD_INT 106
5934: EQUAL
5935: IFFALSE 5945
// sTiger := true ;
5937: LD_ADDR_EXP 35
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
// if p3 = 107 then
5945: LD_VAR 0 3
5949: PUSH
5950: LD_INT 107
5952: EQUAL
5953: IFFALSE 5963
// sBomb := true ;
5955: LD_ADDR_EXP 36
5959: PUSH
5960: LD_INT 1
5962: ST_TO_ADDR
// if p3 = 108 then
5963: LD_VAR 0 3
5967: PUSH
5968: LD_INT 108
5970: EQUAL
5971: IFFALSE 5981
// sWound := true ;
5973: LD_ADDR_EXP 44
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if p3 = 109 then
5981: LD_VAR 0 3
5985: PUSH
5986: LD_INT 109
5988: EQUAL
5989: IFFALSE 5999
// sBetray := true ;
5991: LD_ADDR_EXP 48
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// if p3 = 110 then
5999: LD_VAR 0 3
6003: PUSH
6004: LD_INT 110
6006: EQUAL
6007: IFFALSE 6017
// sContamin := true ;
6009: LD_ADDR_EXP 49
6013: PUSH
6014: LD_INT 1
6016: ST_TO_ADDR
// if p3 = 111 then
6017: LD_VAR 0 3
6021: PUSH
6022: LD_INT 111
6024: EQUAL
6025: IFFALSE 6035
// sOil := true ;
6027: LD_ADDR_EXP 51
6031: PUSH
6032: LD_INT 1
6034: ST_TO_ADDR
// if p3 = 112 then
6035: LD_VAR 0 3
6039: PUSH
6040: LD_INT 112
6042: EQUAL
6043: IFFALSE 6053
// sStu := true ;
6045: LD_ADDR_EXP 55
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// if p3 = 113 then
6053: LD_VAR 0 3
6057: PUSH
6058: LD_INT 113
6060: EQUAL
6061: IFFALSE 6071
// sBazooka := true ;
6063: LD_ADDR_EXP 58
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// if p3 = 114 then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 114
6078: EQUAL
6079: IFFALSE 6089
// sMortar := true ;
6081: LD_ADDR_EXP 59
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// if p3 = 115 then
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 115
6096: EQUAL
6097: IFFALSE 6107
// sRanger := true ;
6099: LD_ADDR_EXP 69
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// if p3 = 116 then
6107: LD_VAR 0 3
6111: PUSH
6112: LD_INT 116
6114: EQUAL
6115: IFFALSE 6125
// sComputer := true ;
6117: LD_ADDR_EXP 70
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// if p3 = 117 then
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 117
6132: EQUAL
6133: IFFALSE 6143
// s30 := true ;
6135: LD_ADDR_EXP 71
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if p3 = 118 then
6143: LD_VAR 0 3
6147: PUSH
6148: LD_INT 118
6150: EQUAL
6151: IFFALSE 6161
// s60 := true ;
6153: LD_ADDR_EXP 72
6157: PUSH
6158: LD_INT 1
6160: ST_TO_ADDR
// end ; if p2 = hack_mode then
6161: LD_VAR 0 2
6165: PUSH
6166: LD_INT 101
6168: EQUAL
6169: IFFALSE 6297
// begin case p3 of 1 :
6171: LD_VAR 0 3
6175: PUSH
6176: LD_INT 1
6178: DOUBLE
6179: EQUAL
6180: IFTRUE 6184
6182: GO 6191
6184: POP
// hHackUnlimitedResources ; 2 :
6185: CALL 18560 0 0
6189: GO 6297
6191: LD_INT 2
6193: DOUBLE
6194: EQUAL
6195: IFTRUE 6199
6197: GO 6206
6199: POP
// hHackSetLevel10 ; 3 :
6200: CALL 18693 0 0
6204: GO 6297
6206: LD_INT 3
6208: DOUBLE
6209: EQUAL
6210: IFTRUE 6214
6212: GO 6221
6214: POP
// hHackSetLevel10YourUnits ; 4 :
6215: CALL 18778 0 0
6219: GO 6297
6221: LD_INT 4
6223: DOUBLE
6224: EQUAL
6225: IFTRUE 6229
6227: GO 6236
6229: POP
// hHackInvincible ; 5 :
6230: CALL 19226 0 0
6234: GO 6297
6236: LD_INT 5
6238: DOUBLE
6239: EQUAL
6240: IFTRUE 6244
6242: GO 6251
6244: POP
// hHackInvisible ; 6 :
6245: CALL 19337 0 0
6249: GO 6297
6251: LD_INT 6
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6266
6259: POP
// hHackChangeYourSide ; 7 :
6260: CALL 19394 0 0
6264: GO 6297
6266: LD_INT 7
6268: DOUBLE
6269: EQUAL
6270: IFTRUE 6274
6272: GO 6281
6274: POP
// hHackChangeUnitSide ; 8 :
6275: CALL 19436 0 0
6279: GO 6297
6281: LD_INT 8
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6296
6289: POP
// hHackFog ; end ;
6290: CALL 19537 0 0
6294: GO 6297
6296: POP
// end ; if p2 = game_save_mode then
6297: LD_VAR 0 2
6301: PUSH
6302: LD_INT 102
6304: EQUAL
6305: IFFALSE 6362
// begin if p3 = 1 then
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 1
6314: EQUAL
6315: IFFALSE 6327
// globalGameSaveCounter := p4 ;
6317: LD_ADDR_EXP 15
6321: PUSH
6322: LD_VAR 0 4
6326: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 2
6334: EQUAL
6335: IFFALSE 6343
6337: PUSH
6338: LD_EXP 15
6342: AND
6343: IFFALSE 6362
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6345: LD_STRING setGameSaveCounter(
6347: PUSH
6348: LD_EXP 15
6352: STR
6353: PUSH
6354: LD_STRING )
6356: STR
6357: PPUSH
6358: CALL_OW 559
// end ; end ;
6362: LD_VAR 0 7
6366: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6367: LD_INT 0
6369: PPUSH
// streamModeActive := false ;
6370: LD_ADDR_EXP 16
6374: PUSH
6375: LD_INT 0
6377: ST_TO_ADDR
// normalCounter := 36 ;
6378: LD_ADDR_EXP 17
6382: PUSH
6383: LD_INT 36
6385: ST_TO_ADDR
// hardcoreCounter := 18 ;
6386: LD_ADDR_EXP 18
6390: PUSH
6391: LD_INT 18
6393: ST_TO_ADDR
// sRocket := false ;
6394: LD_ADDR_EXP 21
6398: PUSH
6399: LD_INT 0
6401: ST_TO_ADDR
// sSpeed := false ;
6402: LD_ADDR_EXP 20
6406: PUSH
6407: LD_INT 0
6409: ST_TO_ADDR
// sEngine := false ;
6410: LD_ADDR_EXP 22
6414: PUSH
6415: LD_INT 0
6417: ST_TO_ADDR
// sSpec := false ;
6418: LD_ADDR_EXP 19
6422: PUSH
6423: LD_INT 0
6425: ST_TO_ADDR
// sLevel := false ;
6426: LD_ADDR_EXP 23
6430: PUSH
6431: LD_INT 0
6433: ST_TO_ADDR
// sArmoury := false ;
6434: LD_ADDR_EXP 24
6438: PUSH
6439: LD_INT 0
6441: ST_TO_ADDR
// sRadar := false ;
6442: LD_ADDR_EXP 25
6446: PUSH
6447: LD_INT 0
6449: ST_TO_ADDR
// sBunker := false ;
6450: LD_ADDR_EXP 26
6454: PUSH
6455: LD_INT 0
6457: ST_TO_ADDR
// sHack := false ;
6458: LD_ADDR_EXP 27
6462: PUSH
6463: LD_INT 0
6465: ST_TO_ADDR
// sFire := false ;
6466: LD_ADDR_EXP 28
6470: PUSH
6471: LD_INT 0
6473: ST_TO_ADDR
// sRefresh := false ;
6474: LD_ADDR_EXP 29
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// sExp := false ;
6482: LD_ADDR_EXP 30
6486: PUSH
6487: LD_INT 0
6489: ST_TO_ADDR
// sDepot := false ;
6490: LD_ADDR_EXP 31
6494: PUSH
6495: LD_INT 0
6497: ST_TO_ADDR
// sFlag := false ;
6498: LD_ADDR_EXP 32
6502: PUSH
6503: LD_INT 0
6505: ST_TO_ADDR
// sKamikadze := false ;
6506: LD_ADDR_EXP 40
6510: PUSH
6511: LD_INT 0
6513: ST_TO_ADDR
// sTroll := false ;
6514: LD_ADDR_EXP 41
6518: PUSH
6519: LD_INT 0
6521: ST_TO_ADDR
// sSlow := false ;
6522: LD_ADDR_EXP 42
6526: PUSH
6527: LD_INT 0
6529: ST_TO_ADDR
// sLack := false ;
6530: LD_ADDR_EXP 43
6534: PUSH
6535: LD_INT 0
6537: ST_TO_ADDR
// sTank := false ;
6538: LD_ADDR_EXP 45
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// sRemote := false ;
6546: LD_ADDR_EXP 46
6550: PUSH
6551: LD_INT 0
6553: ST_TO_ADDR
// sPowell := false ;
6554: LD_ADDR_EXP 47
6558: PUSH
6559: LD_INT 0
6561: ST_TO_ADDR
// sTeleport := false ;
6562: LD_ADDR_EXP 50
6566: PUSH
6567: LD_INT 0
6569: ST_TO_ADDR
// sOilTower := false ;
6570: LD_ADDR_EXP 52
6574: PUSH
6575: LD_INT 0
6577: ST_TO_ADDR
// sShovel := false ;
6578: LD_ADDR_EXP 53
6582: PUSH
6583: LD_INT 0
6585: ST_TO_ADDR
// sSheik := false ;
6586: LD_ADDR_EXP 54
6590: PUSH
6591: LD_INT 0
6593: ST_TO_ADDR
// sEarthquake := false ;
6594: LD_ADDR_EXP 56
6598: PUSH
6599: LD_INT 0
6601: ST_TO_ADDR
// sAI := false ;
6602: LD_ADDR_EXP 57
6606: PUSH
6607: LD_INT 0
6609: ST_TO_ADDR
// sCargo := false ;
6610: LD_ADDR_EXP 60
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// sDLaser := false ;
6618: LD_ADDR_EXP 61
6622: PUSH
6623: LD_INT 0
6625: ST_TO_ADDR
// sExchange := false ;
6626: LD_ADDR_EXP 62
6630: PUSH
6631: LD_INT 0
6633: ST_TO_ADDR
// sFac := false ;
6634: LD_ADDR_EXP 63
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// sPower := false ;
6642: LD_ADDR_EXP 64
6646: PUSH
6647: LD_INT 0
6649: ST_TO_ADDR
// sRandom := false ;
6650: LD_ADDR_EXP 65
6654: PUSH
6655: LD_INT 0
6657: ST_TO_ADDR
// sShield := false ;
6658: LD_ADDR_EXP 66
6662: PUSH
6663: LD_INT 0
6665: ST_TO_ADDR
// sTime := false ;
6666: LD_ADDR_EXP 67
6670: PUSH
6671: LD_INT 0
6673: ST_TO_ADDR
// sTools := false ;
6674: LD_ADDR_EXP 68
6678: PUSH
6679: LD_INT 0
6681: ST_TO_ADDR
// sSold := false ;
6682: LD_ADDR_EXP 33
6686: PUSH
6687: LD_INT 0
6689: ST_TO_ADDR
// sDiff := false ;
6690: LD_ADDR_EXP 34
6694: PUSH
6695: LD_INT 0
6697: ST_TO_ADDR
// sFog := false ;
6698: LD_ADDR_EXP 37
6702: PUSH
6703: LD_INT 0
6705: ST_TO_ADDR
// sReset := false ;
6706: LD_ADDR_EXP 38
6710: PUSH
6711: LD_INT 0
6713: ST_TO_ADDR
// sSun := false ;
6714: LD_ADDR_EXP 39
6718: PUSH
6719: LD_INT 0
6721: ST_TO_ADDR
// sTiger := false ;
6722: LD_ADDR_EXP 35
6726: PUSH
6727: LD_INT 0
6729: ST_TO_ADDR
// sBomb := false ;
6730: LD_ADDR_EXP 36
6734: PUSH
6735: LD_INT 0
6737: ST_TO_ADDR
// sWound := false ;
6738: LD_ADDR_EXP 44
6742: PUSH
6743: LD_INT 0
6745: ST_TO_ADDR
// sBetray := false ;
6746: LD_ADDR_EXP 48
6750: PUSH
6751: LD_INT 0
6753: ST_TO_ADDR
// sContamin := false ;
6754: LD_ADDR_EXP 49
6758: PUSH
6759: LD_INT 0
6761: ST_TO_ADDR
// sOil := false ;
6762: LD_ADDR_EXP 51
6766: PUSH
6767: LD_INT 0
6769: ST_TO_ADDR
// sStu := false ;
6770: LD_ADDR_EXP 55
6774: PUSH
6775: LD_INT 0
6777: ST_TO_ADDR
// sBazooka := false ;
6778: LD_ADDR_EXP 58
6782: PUSH
6783: LD_INT 0
6785: ST_TO_ADDR
// sMortar := false ;
6786: LD_ADDR_EXP 59
6790: PUSH
6791: LD_INT 0
6793: ST_TO_ADDR
// sRanger := false ;
6794: LD_ADDR_EXP 69
6798: PUSH
6799: LD_INT 0
6801: ST_TO_ADDR
// sComputer := false ;
6802: LD_ADDR_EXP 70
6806: PUSH
6807: LD_INT 0
6809: ST_TO_ADDR
// s30 := false ;
6810: LD_ADDR_EXP 71
6814: PUSH
6815: LD_INT 0
6817: ST_TO_ADDR
// s60 := false ;
6818: LD_ADDR_EXP 72
6822: PUSH
6823: LD_INT 0
6825: ST_TO_ADDR
// end ;
6826: LD_VAR 0 1
6830: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6831: LD_INT 0
6833: PPUSH
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
// result := [ ] ;
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: EMPTY
6846: ST_TO_ADDR
// if campaign_id = 1 then
6847: LD_OWVAR 69
6851: PUSH
6852: LD_INT 1
6854: EQUAL
6855: IFFALSE 10021
// begin case mission_number of 1 :
6857: LD_OWVAR 70
6861: PUSH
6862: LD_INT 1
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6946
6870: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6871: LD_ADDR_VAR 0 2
6875: PUSH
6876: LD_INT 2
6878: PUSH
6879: LD_INT 4
6881: PUSH
6882: LD_INT 11
6884: PUSH
6885: LD_INT 12
6887: PUSH
6888: LD_INT 15
6890: PUSH
6891: LD_INT 16
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 23
6899: PUSH
6900: LD_INT 26
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 101
6916: PUSH
6917: LD_INT 102
6919: PUSH
6920: LD_INT 106
6922: PUSH
6923: LD_INT 116
6925: PUSH
6926: LD_INT 117
6928: PUSH
6929: LD_INT 118
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: ST_TO_ADDR
6944: GO 10019
6946: LD_INT 2
6948: DOUBLE
6949: EQUAL
6950: IFTRUE 6954
6952: GO 7038
6954: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6955: LD_ADDR_VAR 0 2
6959: PUSH
6960: LD_INT 2
6962: PUSH
6963: LD_INT 4
6965: PUSH
6966: LD_INT 11
6968: PUSH
6969: LD_INT 12
6971: PUSH
6972: LD_INT 15
6974: PUSH
6975: LD_INT 16
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 23
6983: PUSH
6984: LD_INT 26
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 101
7000: PUSH
7001: LD_INT 102
7003: PUSH
7004: LD_INT 105
7006: PUSH
7007: LD_INT 106
7009: PUSH
7010: LD_INT 108
7012: PUSH
7013: LD_INT 116
7015: PUSH
7016: LD_INT 117
7018: PUSH
7019: LD_INT 118
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: ST_TO_ADDR
7036: GO 10019
7038: LD_INT 3
7040: DOUBLE
7041: EQUAL
7042: IFTRUE 7046
7044: GO 7134
7046: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: LD_INT 2
7054: PUSH
7055: LD_INT 4
7057: PUSH
7058: LD_INT 5
7060: PUSH
7061: LD_INT 11
7063: PUSH
7064: LD_INT 12
7066: PUSH
7067: LD_INT 15
7069: PUSH
7070: LD_INT 16
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_INT 26
7078: PUSH
7079: LD_INT 36
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 101
7096: PUSH
7097: LD_INT 102
7099: PUSH
7100: LD_INT 105
7102: PUSH
7103: LD_INT 106
7105: PUSH
7106: LD_INT 108
7108: PUSH
7109: LD_INT 116
7111: PUSH
7112: LD_INT 117
7114: PUSH
7115: LD_INT 118
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: ST_TO_ADDR
7132: GO 10019
7134: LD_INT 4
7136: DOUBLE
7137: EQUAL
7138: IFTRUE 7142
7140: GO 7238
7142: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7143: LD_ADDR_VAR 0 2
7147: PUSH
7148: LD_INT 2
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: LD_INT 5
7156: PUSH
7157: LD_INT 8
7159: PUSH
7160: LD_INT 11
7162: PUSH
7163: LD_INT 12
7165: PUSH
7166: LD_INT 15
7168: PUSH
7169: LD_INT 16
7171: PUSH
7172: LD_INT 22
7174: PUSH
7175: LD_INT 23
7177: PUSH
7178: LD_INT 26
7180: PUSH
7181: LD_INT 36
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 101
7200: PUSH
7201: LD_INT 102
7203: PUSH
7204: LD_INT 105
7206: PUSH
7207: LD_INT 106
7209: PUSH
7210: LD_INT 108
7212: PUSH
7213: LD_INT 116
7215: PUSH
7216: LD_INT 117
7218: PUSH
7219: LD_INT 118
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: ST_TO_ADDR
7236: GO 10019
7238: LD_INT 5
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7358
7246: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7247: LD_ADDR_VAR 0 2
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: LD_INT 4
7257: PUSH
7258: LD_INT 5
7260: PUSH
7261: LD_INT 6
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 11
7269: PUSH
7270: LD_INT 12
7272: PUSH
7273: LD_INT 15
7275: PUSH
7276: LD_INT 16
7278: PUSH
7279: LD_INT 22
7281: PUSH
7282: LD_INT 23
7284: PUSH
7285: LD_INT 25
7287: PUSH
7288: LD_INT 26
7290: PUSH
7291: LD_INT 36
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 101
7312: PUSH
7313: LD_INT 102
7315: PUSH
7316: LD_INT 105
7318: PUSH
7319: LD_INT 106
7321: PUSH
7322: LD_INT 108
7324: PUSH
7325: LD_INT 109
7327: PUSH
7328: LD_INT 112
7330: PUSH
7331: LD_INT 116
7333: PUSH
7334: LD_INT 117
7336: PUSH
7337: LD_INT 118
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: ST_TO_ADDR
7356: GO 10019
7358: LD_INT 6
7360: DOUBLE
7361: EQUAL
7362: IFTRUE 7366
7364: GO 7498
7366: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7367: LD_ADDR_VAR 0 2
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: LD_INT 4
7377: PUSH
7378: LD_INT 5
7380: PUSH
7381: LD_INT 6
7383: PUSH
7384: LD_INT 8
7386: PUSH
7387: LD_INT 11
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 15
7395: PUSH
7396: LD_INT 16
7398: PUSH
7399: LD_INT 20
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 31
7422: PUSH
7423: LD_INT 32
7425: PUSH
7426: LD_INT 36
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 101
7452: PUSH
7453: LD_INT 102
7455: PUSH
7456: LD_INT 105
7458: PUSH
7459: LD_INT 106
7461: PUSH
7462: LD_INT 108
7464: PUSH
7465: LD_INT 109
7467: PUSH
7468: LD_INT 112
7470: PUSH
7471: LD_INT 116
7473: PUSH
7474: LD_INT 117
7476: PUSH
7477: LD_INT 118
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: ST_TO_ADDR
7496: GO 10019
7498: LD_INT 7
7500: DOUBLE
7501: EQUAL
7502: IFTRUE 7506
7504: GO 7618
7506: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7507: LD_ADDR_VAR 0 2
7511: PUSH
7512: LD_INT 2
7514: PUSH
7515: LD_INT 4
7517: PUSH
7518: LD_INT 5
7520: PUSH
7521: LD_INT 7
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: LD_INT 15
7532: PUSH
7533: LD_INT 16
7535: PUSH
7536: LD_INT 20
7538: PUSH
7539: LD_INT 21
7541: PUSH
7542: LD_INT 22
7544: PUSH
7545: LD_INT 23
7547: PUSH
7548: LD_INT 25
7550: PUSH
7551: LD_INT 26
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 101
7572: PUSH
7573: LD_INT 102
7575: PUSH
7576: LD_INT 103
7578: PUSH
7579: LD_INT 105
7581: PUSH
7582: LD_INT 106
7584: PUSH
7585: LD_INT 108
7587: PUSH
7588: LD_INT 112
7590: PUSH
7591: LD_INT 116
7593: PUSH
7594: LD_INT 117
7596: PUSH
7597: LD_INT 118
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: ST_TO_ADDR
7616: GO 10019
7618: LD_INT 8
7620: DOUBLE
7621: EQUAL
7622: IFTRUE 7626
7624: GO 7766
7626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7627: LD_ADDR_VAR 0 2
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 4
7637: PUSH
7638: LD_INT 5
7640: PUSH
7641: LD_INT 6
7643: PUSH
7644: LD_INT 7
7646: PUSH
7647: LD_INT 8
7649: PUSH
7650: LD_INT 11
7652: PUSH
7653: LD_INT 12
7655: PUSH
7656: LD_INT 15
7658: PUSH
7659: LD_INT 16
7661: PUSH
7662: LD_INT 20
7664: PUSH
7665: LD_INT 21
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 23
7673: PUSH
7674: LD_INT 25
7676: PUSH
7677: LD_INT 26
7679: PUSH
7680: LD_INT 30
7682: PUSH
7683: LD_INT 31
7685: PUSH
7686: LD_INT 32
7688: PUSH
7689: LD_INT 36
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 101
7716: PUSH
7717: LD_INT 102
7719: PUSH
7720: LD_INT 103
7722: PUSH
7723: LD_INT 105
7725: PUSH
7726: LD_INT 106
7728: PUSH
7729: LD_INT 108
7731: PUSH
7732: LD_INT 109
7734: PUSH
7735: LD_INT 112
7737: PUSH
7738: LD_INT 116
7740: PUSH
7741: LD_INT 117
7743: PUSH
7744: LD_INT 118
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: ST_TO_ADDR
7764: GO 10019
7766: LD_INT 9
7768: DOUBLE
7769: EQUAL
7770: IFTRUE 7774
7772: GO 7922
7774: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7775: LD_ADDR_VAR 0 2
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 4
7785: PUSH
7786: LD_INT 5
7788: PUSH
7789: LD_INT 6
7791: PUSH
7792: LD_INT 7
7794: PUSH
7795: LD_INT 8
7797: PUSH
7798: LD_INT 11
7800: PUSH
7801: LD_INT 12
7803: PUSH
7804: LD_INT 15
7806: PUSH
7807: LD_INT 16
7809: PUSH
7810: LD_INT 20
7812: PUSH
7813: LD_INT 21
7815: PUSH
7816: LD_INT 22
7818: PUSH
7819: LD_INT 23
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 26
7827: PUSH
7828: LD_INT 28
7830: PUSH
7831: LD_INT 30
7833: PUSH
7834: LD_INT 31
7836: PUSH
7837: LD_INT 32
7839: PUSH
7840: LD_INT 36
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 101
7868: PUSH
7869: LD_INT 102
7871: PUSH
7872: LD_INT 103
7874: PUSH
7875: LD_INT 105
7877: PUSH
7878: LD_INT 106
7880: PUSH
7881: LD_INT 108
7883: PUSH
7884: LD_INT 109
7886: PUSH
7887: LD_INT 112
7889: PUSH
7890: LD_INT 114
7892: PUSH
7893: LD_INT 116
7895: PUSH
7896: LD_INT 117
7898: PUSH
7899: LD_INT 118
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: ST_TO_ADDR
7920: GO 10019
7922: LD_INT 10
7924: DOUBLE
7925: EQUAL
7926: IFTRUE 7930
7928: GO 8126
7930: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7931: LD_ADDR_VAR 0 2
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 4
7941: PUSH
7942: LD_INT 5
7944: PUSH
7945: LD_INT 6
7947: PUSH
7948: LD_INT 7
7950: PUSH
7951: LD_INT 8
7953: PUSH
7954: LD_INT 9
7956: PUSH
7957: LD_INT 10
7959: PUSH
7960: LD_INT 11
7962: PUSH
7963: LD_INT 12
7965: PUSH
7966: LD_INT 13
7968: PUSH
7969: LD_INT 14
7971: PUSH
7972: LD_INT 15
7974: PUSH
7975: LD_INT 16
7977: PUSH
7978: LD_INT 17
7980: PUSH
7981: LD_INT 18
7983: PUSH
7984: LD_INT 19
7986: PUSH
7987: LD_INT 20
7989: PUSH
7990: LD_INT 21
7992: PUSH
7993: LD_INT 22
7995: PUSH
7996: LD_INT 23
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 26
8007: PUSH
8008: LD_INT 28
8010: PUSH
8011: LD_INT 30
8013: PUSH
8014: LD_INT 31
8016: PUSH
8017: LD_INT 32
8019: PUSH
8020: LD_INT 36
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 101
8056: PUSH
8057: LD_INT 102
8059: PUSH
8060: LD_INT 103
8062: PUSH
8063: LD_INT 104
8065: PUSH
8066: LD_INT 105
8068: PUSH
8069: LD_INT 106
8071: PUSH
8072: LD_INT 107
8074: PUSH
8075: LD_INT 108
8077: PUSH
8078: LD_INT 109
8080: PUSH
8081: LD_INT 110
8083: PUSH
8084: LD_INT 111
8086: PUSH
8087: LD_INT 112
8089: PUSH
8090: LD_INT 114
8092: PUSH
8093: LD_INT 116
8095: PUSH
8096: LD_INT 117
8098: PUSH
8099: LD_INT 118
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: ST_TO_ADDR
8124: GO 10019
8126: LD_INT 11
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8338
8134: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8135: LD_ADDR_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: PUSH
8143: LD_INT 3
8145: PUSH
8146: LD_INT 4
8148: PUSH
8149: LD_INT 5
8151: PUSH
8152: LD_INT 6
8154: PUSH
8155: LD_INT 7
8157: PUSH
8158: LD_INT 8
8160: PUSH
8161: LD_INT 9
8163: PUSH
8164: LD_INT 10
8166: PUSH
8167: LD_INT 11
8169: PUSH
8170: LD_INT 12
8172: PUSH
8173: LD_INT 13
8175: PUSH
8176: LD_INT 14
8178: PUSH
8179: LD_INT 15
8181: PUSH
8182: LD_INT 16
8184: PUSH
8185: LD_INT 17
8187: PUSH
8188: LD_INT 18
8190: PUSH
8191: LD_INT 19
8193: PUSH
8194: LD_INT 20
8196: PUSH
8197: LD_INT 21
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_INT 23
8205: PUSH
8206: LD_INT 24
8208: PUSH
8209: LD_INT 25
8211: PUSH
8212: LD_INT 26
8214: PUSH
8215: LD_INT 28
8217: PUSH
8218: LD_INT 30
8220: PUSH
8221: LD_INT 31
8223: PUSH
8224: LD_INT 32
8226: PUSH
8227: LD_INT 34
8229: PUSH
8230: LD_INT 36
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 101
8268: PUSH
8269: LD_INT 102
8271: PUSH
8272: LD_INT 103
8274: PUSH
8275: LD_INT 104
8277: PUSH
8278: LD_INT 105
8280: PUSH
8281: LD_INT 106
8283: PUSH
8284: LD_INT 107
8286: PUSH
8287: LD_INT 108
8289: PUSH
8290: LD_INT 109
8292: PUSH
8293: LD_INT 110
8295: PUSH
8296: LD_INT 111
8298: PUSH
8299: LD_INT 112
8301: PUSH
8302: LD_INT 114
8304: PUSH
8305: LD_INT 116
8307: PUSH
8308: LD_INT 117
8310: PUSH
8311: LD_INT 118
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: ST_TO_ADDR
8336: GO 10019
8338: LD_INT 12
8340: DOUBLE
8341: EQUAL
8342: IFTRUE 8346
8344: GO 8566
8346: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: LD_INT 2
8357: PUSH
8358: LD_INT 3
8360: PUSH
8361: LD_INT 4
8363: PUSH
8364: LD_INT 5
8366: PUSH
8367: LD_INT 6
8369: PUSH
8370: LD_INT 7
8372: PUSH
8373: LD_INT 8
8375: PUSH
8376: LD_INT 9
8378: PUSH
8379: LD_INT 10
8381: PUSH
8382: LD_INT 11
8384: PUSH
8385: LD_INT 12
8387: PUSH
8388: LD_INT 13
8390: PUSH
8391: LD_INT 14
8393: PUSH
8394: LD_INT 15
8396: PUSH
8397: LD_INT 16
8399: PUSH
8400: LD_INT 17
8402: PUSH
8403: LD_INT 18
8405: PUSH
8406: LD_INT 19
8408: PUSH
8409: LD_INT 20
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 22
8417: PUSH
8418: LD_INT 23
8420: PUSH
8421: LD_INT 24
8423: PUSH
8424: LD_INT 25
8426: PUSH
8427: LD_INT 26
8429: PUSH
8430: LD_INT 27
8432: PUSH
8433: LD_INT 28
8435: PUSH
8436: LD_INT 30
8438: PUSH
8439: LD_INT 31
8441: PUSH
8442: LD_INT 32
8444: PUSH
8445: LD_INT 33
8447: PUSH
8448: LD_INT 34
8450: PUSH
8451: LD_INT 36
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 101
8492: PUSH
8493: LD_INT 102
8495: PUSH
8496: LD_INT 103
8498: PUSH
8499: LD_INT 104
8501: PUSH
8502: LD_INT 105
8504: PUSH
8505: LD_INT 106
8507: PUSH
8508: LD_INT 107
8510: PUSH
8511: LD_INT 108
8513: PUSH
8514: LD_INT 109
8516: PUSH
8517: LD_INT 110
8519: PUSH
8520: LD_INT 111
8522: PUSH
8523: LD_INT 112
8525: PUSH
8526: LD_INT 113
8528: PUSH
8529: LD_INT 114
8531: PUSH
8532: LD_INT 116
8534: PUSH
8535: LD_INT 117
8537: PUSH
8538: LD_INT 118
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: ST_TO_ADDR
8564: GO 10019
8566: LD_INT 13
8568: DOUBLE
8569: EQUAL
8570: IFTRUE 8574
8572: GO 8782
8574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8575: LD_ADDR_VAR 0 2
8579: PUSH
8580: LD_INT 1
8582: PUSH
8583: LD_INT 2
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 5
8594: PUSH
8595: LD_INT 8
8597: PUSH
8598: LD_INT 9
8600: PUSH
8601: LD_INT 10
8603: PUSH
8604: LD_INT 11
8606: PUSH
8607: LD_INT 12
8609: PUSH
8610: LD_INT 14
8612: PUSH
8613: LD_INT 15
8615: PUSH
8616: LD_INT 16
8618: PUSH
8619: LD_INT 17
8621: PUSH
8622: LD_INT 18
8624: PUSH
8625: LD_INT 19
8627: PUSH
8628: LD_INT 20
8630: PUSH
8631: LD_INT 21
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 23
8639: PUSH
8640: LD_INT 24
8642: PUSH
8643: LD_INT 25
8645: PUSH
8646: LD_INT 26
8648: PUSH
8649: LD_INT 27
8651: PUSH
8652: LD_INT 28
8654: PUSH
8655: LD_INT 30
8657: PUSH
8658: LD_INT 31
8660: PUSH
8661: LD_INT 32
8663: PUSH
8664: LD_INT 33
8666: PUSH
8667: LD_INT 34
8669: PUSH
8670: LD_INT 36
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 101
8708: PUSH
8709: LD_INT 102
8711: PUSH
8712: LD_INT 103
8714: PUSH
8715: LD_INT 104
8717: PUSH
8718: LD_INT 105
8720: PUSH
8721: LD_INT 106
8723: PUSH
8724: LD_INT 107
8726: PUSH
8727: LD_INT 108
8729: PUSH
8730: LD_INT 109
8732: PUSH
8733: LD_INT 110
8735: PUSH
8736: LD_INT 111
8738: PUSH
8739: LD_INT 112
8741: PUSH
8742: LD_INT 113
8744: PUSH
8745: LD_INT 114
8747: PUSH
8748: LD_INT 116
8750: PUSH
8751: LD_INT 117
8753: PUSH
8754: LD_INT 118
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: ST_TO_ADDR
8780: GO 10019
8782: LD_INT 14
8784: DOUBLE
8785: EQUAL
8786: IFTRUE 8790
8788: GO 9014
8790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8791: LD_ADDR_VAR 0 2
8795: PUSH
8796: LD_INT 1
8798: PUSH
8799: LD_INT 2
8801: PUSH
8802: LD_INT 3
8804: PUSH
8805: LD_INT 4
8807: PUSH
8808: LD_INT 5
8810: PUSH
8811: LD_INT 6
8813: PUSH
8814: LD_INT 7
8816: PUSH
8817: LD_INT 8
8819: PUSH
8820: LD_INT 9
8822: PUSH
8823: LD_INT 10
8825: PUSH
8826: LD_INT 11
8828: PUSH
8829: LD_INT 12
8831: PUSH
8832: LD_INT 13
8834: PUSH
8835: LD_INT 14
8837: PUSH
8838: LD_INT 15
8840: PUSH
8841: LD_INT 16
8843: PUSH
8844: LD_INT 17
8846: PUSH
8847: LD_INT 18
8849: PUSH
8850: LD_INT 19
8852: PUSH
8853: LD_INT 20
8855: PUSH
8856: LD_INT 21
8858: PUSH
8859: LD_INT 22
8861: PUSH
8862: LD_INT 23
8864: PUSH
8865: LD_INT 24
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: LD_INT 26
8873: PUSH
8874: LD_INT 27
8876: PUSH
8877: LD_INT 28
8879: PUSH
8880: LD_INT 29
8882: PUSH
8883: LD_INT 30
8885: PUSH
8886: LD_INT 31
8888: PUSH
8889: LD_INT 32
8891: PUSH
8892: LD_INT 33
8894: PUSH
8895: LD_INT 34
8897: PUSH
8898: LD_INT 36
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 101
8940: PUSH
8941: LD_INT 102
8943: PUSH
8944: LD_INT 103
8946: PUSH
8947: LD_INT 104
8949: PUSH
8950: LD_INT 105
8952: PUSH
8953: LD_INT 106
8955: PUSH
8956: LD_INT 107
8958: PUSH
8959: LD_INT 108
8961: PUSH
8962: LD_INT 109
8964: PUSH
8965: LD_INT 110
8967: PUSH
8968: LD_INT 111
8970: PUSH
8971: LD_INT 112
8973: PUSH
8974: LD_INT 113
8976: PUSH
8977: LD_INT 114
8979: PUSH
8980: LD_INT 116
8982: PUSH
8983: LD_INT 117
8985: PUSH
8986: LD_INT 118
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: ST_TO_ADDR
9012: GO 10019
9014: LD_INT 15
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9246
9022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9023: LD_ADDR_VAR 0 2
9027: PUSH
9028: LD_INT 1
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: LD_INT 3
9036: PUSH
9037: LD_INT 4
9039: PUSH
9040: LD_INT 5
9042: PUSH
9043: LD_INT 6
9045: PUSH
9046: LD_INT 7
9048: PUSH
9049: LD_INT 8
9051: PUSH
9052: LD_INT 9
9054: PUSH
9055: LD_INT 10
9057: PUSH
9058: LD_INT 11
9060: PUSH
9061: LD_INT 12
9063: PUSH
9064: LD_INT 13
9066: PUSH
9067: LD_INT 14
9069: PUSH
9070: LD_INT 15
9072: PUSH
9073: LD_INT 16
9075: PUSH
9076: LD_INT 17
9078: PUSH
9079: LD_INT 18
9081: PUSH
9082: LD_INT 19
9084: PUSH
9085: LD_INT 20
9087: PUSH
9088: LD_INT 21
9090: PUSH
9091: LD_INT 22
9093: PUSH
9094: LD_INT 23
9096: PUSH
9097: LD_INT 24
9099: PUSH
9100: LD_INT 25
9102: PUSH
9103: LD_INT 26
9105: PUSH
9106: LD_INT 27
9108: PUSH
9109: LD_INT 28
9111: PUSH
9112: LD_INT 29
9114: PUSH
9115: LD_INT 30
9117: PUSH
9118: LD_INT 31
9120: PUSH
9121: LD_INT 32
9123: PUSH
9124: LD_INT 33
9126: PUSH
9127: LD_INT 34
9129: PUSH
9130: LD_INT 36
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 101
9172: PUSH
9173: LD_INT 102
9175: PUSH
9176: LD_INT 103
9178: PUSH
9179: LD_INT 104
9181: PUSH
9182: LD_INT 105
9184: PUSH
9185: LD_INT 106
9187: PUSH
9188: LD_INT 107
9190: PUSH
9191: LD_INT 108
9193: PUSH
9194: LD_INT 109
9196: PUSH
9197: LD_INT 110
9199: PUSH
9200: LD_INT 111
9202: PUSH
9203: LD_INT 112
9205: PUSH
9206: LD_INT 113
9208: PUSH
9209: LD_INT 114
9211: PUSH
9212: LD_INT 116
9214: PUSH
9215: LD_INT 117
9217: PUSH
9218: LD_INT 118
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: ST_TO_ADDR
9244: GO 10019
9246: LD_INT 16
9248: DOUBLE
9249: EQUAL
9250: IFTRUE 9254
9252: GO 9390
9254: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9255: LD_ADDR_VAR 0 2
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: LD_INT 4
9265: PUSH
9266: LD_INT 5
9268: PUSH
9269: LD_INT 7
9271: PUSH
9272: LD_INT 11
9274: PUSH
9275: LD_INT 12
9277: PUSH
9278: LD_INT 15
9280: PUSH
9281: LD_INT 16
9283: PUSH
9284: LD_INT 20
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 22
9292: PUSH
9293: LD_INT 23
9295: PUSH
9296: LD_INT 25
9298: PUSH
9299: LD_INT 26
9301: PUSH
9302: LD_INT 30
9304: PUSH
9305: LD_INT 31
9307: PUSH
9308: LD_INT 32
9310: PUSH
9311: LD_INT 33
9313: PUSH
9314: LD_INT 34
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 101
9340: PUSH
9341: LD_INT 102
9343: PUSH
9344: LD_INT 103
9346: PUSH
9347: LD_INT 106
9349: PUSH
9350: LD_INT 108
9352: PUSH
9353: LD_INT 112
9355: PUSH
9356: LD_INT 113
9358: PUSH
9359: LD_INT 114
9361: PUSH
9362: LD_INT 116
9364: PUSH
9365: LD_INT 117
9367: PUSH
9368: LD_INT 118
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: ST_TO_ADDR
9388: GO 10019
9390: LD_INT 17
9392: DOUBLE
9393: EQUAL
9394: IFTRUE 9398
9396: GO 9622
9398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9399: LD_ADDR_VAR 0 2
9403: PUSH
9404: LD_INT 1
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: LD_INT 4
9415: PUSH
9416: LD_INT 5
9418: PUSH
9419: LD_INT 6
9421: PUSH
9422: LD_INT 7
9424: PUSH
9425: LD_INT 8
9427: PUSH
9428: LD_INT 9
9430: PUSH
9431: LD_INT 10
9433: PUSH
9434: LD_INT 11
9436: PUSH
9437: LD_INT 12
9439: PUSH
9440: LD_INT 13
9442: PUSH
9443: LD_INT 14
9445: PUSH
9446: LD_INT 15
9448: PUSH
9449: LD_INT 16
9451: PUSH
9452: LD_INT 17
9454: PUSH
9455: LD_INT 18
9457: PUSH
9458: LD_INT 19
9460: PUSH
9461: LD_INT 20
9463: PUSH
9464: LD_INT 21
9466: PUSH
9467: LD_INT 22
9469: PUSH
9470: LD_INT 23
9472: PUSH
9473: LD_INT 24
9475: PUSH
9476: LD_INT 25
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 27
9484: PUSH
9485: LD_INT 28
9487: PUSH
9488: LD_INT 29
9490: PUSH
9491: LD_INT 30
9493: PUSH
9494: LD_INT 31
9496: PUSH
9497: LD_INT 32
9499: PUSH
9500: LD_INT 33
9502: PUSH
9503: LD_INT 34
9505: PUSH
9506: LD_INT 36
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 101
9548: PUSH
9549: LD_INT 102
9551: PUSH
9552: LD_INT 103
9554: PUSH
9555: LD_INT 104
9557: PUSH
9558: LD_INT 105
9560: PUSH
9561: LD_INT 106
9563: PUSH
9564: LD_INT 107
9566: PUSH
9567: LD_INT 108
9569: PUSH
9570: LD_INT 109
9572: PUSH
9573: LD_INT 110
9575: PUSH
9576: LD_INT 111
9578: PUSH
9579: LD_INT 112
9581: PUSH
9582: LD_INT 113
9584: PUSH
9585: LD_INT 114
9587: PUSH
9588: LD_INT 116
9590: PUSH
9591: LD_INT 117
9593: PUSH
9594: LD_INT 118
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: ST_TO_ADDR
9620: GO 10019
9622: LD_INT 18
9624: DOUBLE
9625: EQUAL
9626: IFTRUE 9630
9628: GO 9778
9630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9631: LD_ADDR_VAR 0 2
9635: PUSH
9636: LD_INT 2
9638: PUSH
9639: LD_INT 4
9641: PUSH
9642: LD_INT 5
9644: PUSH
9645: LD_INT 7
9647: PUSH
9648: LD_INT 11
9650: PUSH
9651: LD_INT 12
9653: PUSH
9654: LD_INT 15
9656: PUSH
9657: LD_INT 16
9659: PUSH
9660: LD_INT 20
9662: PUSH
9663: LD_INT 21
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 23
9671: PUSH
9672: LD_INT 25
9674: PUSH
9675: LD_INT 26
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 31
9683: PUSH
9684: LD_INT 32
9686: PUSH
9687: LD_INT 33
9689: PUSH
9690: LD_INT 34
9692: PUSH
9693: LD_INT 35
9695: PUSH
9696: LD_INT 36
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 101
9724: PUSH
9725: LD_INT 102
9727: PUSH
9728: LD_INT 103
9730: PUSH
9731: LD_INT 106
9733: PUSH
9734: LD_INT 108
9736: PUSH
9737: LD_INT 112
9739: PUSH
9740: LD_INT 113
9742: PUSH
9743: LD_INT 114
9745: PUSH
9746: LD_INT 115
9748: PUSH
9749: LD_INT 116
9751: PUSH
9752: LD_INT 117
9754: PUSH
9755: LD_INT 118
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: ST_TO_ADDR
9776: GO 10019
9778: LD_INT 19
9780: DOUBLE
9781: EQUAL
9782: IFTRUE 9786
9784: GO 10018
9786: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9787: LD_ADDR_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 3
9800: PUSH
9801: LD_INT 4
9803: PUSH
9804: LD_INT 5
9806: PUSH
9807: LD_INT 6
9809: PUSH
9810: LD_INT 7
9812: PUSH
9813: LD_INT 8
9815: PUSH
9816: LD_INT 9
9818: PUSH
9819: LD_INT 10
9821: PUSH
9822: LD_INT 11
9824: PUSH
9825: LD_INT 12
9827: PUSH
9828: LD_INT 13
9830: PUSH
9831: LD_INT 14
9833: PUSH
9834: LD_INT 15
9836: PUSH
9837: LD_INT 16
9839: PUSH
9840: LD_INT 17
9842: PUSH
9843: LD_INT 18
9845: PUSH
9846: LD_INT 19
9848: PUSH
9849: LD_INT 20
9851: PUSH
9852: LD_INT 21
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_INT 23
9860: PUSH
9861: LD_INT 24
9863: PUSH
9864: LD_INT 25
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 27
9872: PUSH
9873: LD_INT 28
9875: PUSH
9876: LD_INT 29
9878: PUSH
9879: LD_INT 30
9881: PUSH
9882: LD_INT 31
9884: PUSH
9885: LD_INT 32
9887: PUSH
9888: LD_INT 33
9890: PUSH
9891: LD_INT 34
9893: PUSH
9894: LD_INT 35
9896: PUSH
9897: LD_INT 36
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 101
9940: PUSH
9941: LD_INT 102
9943: PUSH
9944: LD_INT 103
9946: PUSH
9947: LD_INT 104
9949: PUSH
9950: LD_INT 105
9952: PUSH
9953: LD_INT 106
9955: PUSH
9956: LD_INT 107
9958: PUSH
9959: LD_INT 108
9961: PUSH
9962: LD_INT 109
9964: PUSH
9965: LD_INT 110
9967: PUSH
9968: LD_INT 111
9970: PUSH
9971: LD_INT 112
9973: PUSH
9974: LD_INT 113
9976: PUSH
9977: LD_INT 114
9979: PUSH
9980: LD_INT 115
9982: PUSH
9983: LD_INT 116
9985: PUSH
9986: LD_INT 117
9988: PUSH
9989: LD_INT 118
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: ST_TO_ADDR
10016: GO 10019
10018: POP
// end else
10019: GO 10250
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10021: LD_ADDR_VAR 0 2
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: LD_INT 2
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: LD_INT 4
10037: PUSH
10038: LD_INT 5
10040: PUSH
10041: LD_INT 6
10043: PUSH
10044: LD_INT 7
10046: PUSH
10047: LD_INT 8
10049: PUSH
10050: LD_INT 9
10052: PUSH
10053: LD_INT 10
10055: PUSH
10056: LD_INT 11
10058: PUSH
10059: LD_INT 12
10061: PUSH
10062: LD_INT 13
10064: PUSH
10065: LD_INT 14
10067: PUSH
10068: LD_INT 15
10070: PUSH
10071: LD_INT 16
10073: PUSH
10074: LD_INT 17
10076: PUSH
10077: LD_INT 18
10079: PUSH
10080: LD_INT 19
10082: PUSH
10083: LD_INT 20
10085: PUSH
10086: LD_INT 21
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 23
10094: PUSH
10095: LD_INT 24
10097: PUSH
10098: LD_INT 25
10100: PUSH
10101: LD_INT 26
10103: PUSH
10104: LD_INT 27
10106: PUSH
10107: LD_INT 28
10109: PUSH
10110: LD_INT 29
10112: PUSH
10113: LD_INT 30
10115: PUSH
10116: LD_INT 31
10118: PUSH
10119: LD_INT 32
10121: PUSH
10122: LD_INT 33
10124: PUSH
10125: LD_INT 34
10127: PUSH
10128: LD_INT 35
10130: PUSH
10131: LD_INT 36
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 101
10174: PUSH
10175: LD_INT 102
10177: PUSH
10178: LD_INT 103
10180: PUSH
10181: LD_INT 104
10183: PUSH
10184: LD_INT 105
10186: PUSH
10187: LD_INT 106
10189: PUSH
10190: LD_INT 107
10192: PUSH
10193: LD_INT 108
10195: PUSH
10196: LD_INT 109
10198: PUSH
10199: LD_INT 110
10201: PUSH
10202: LD_INT 111
10204: PUSH
10205: LD_INT 112
10207: PUSH
10208: LD_INT 113
10210: PUSH
10211: LD_INT 114
10213: PUSH
10214: LD_INT 115
10216: PUSH
10217: LD_INT 116
10219: PUSH
10220: LD_INT 117
10222: PUSH
10223: LD_INT 118
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: ST_TO_ADDR
// if result then
10250: LD_VAR 0 2
10254: IFFALSE 11040
// begin normal :=  ;
10256: LD_ADDR_VAR 0 5
10260: PUSH
10261: LD_STRING 
10263: ST_TO_ADDR
// hardcore :=  ;
10264: LD_ADDR_VAR 0 6
10268: PUSH
10269: LD_STRING 
10271: ST_TO_ADDR
// active :=  ;
10272: LD_ADDR_VAR 0 7
10276: PUSH
10277: LD_STRING 
10279: ST_TO_ADDR
// for i = 1 to normalCounter do
10280: LD_ADDR_VAR 0 8
10284: PUSH
10285: DOUBLE
10286: LD_INT 1
10288: DEC
10289: ST_TO_ADDR
10290: LD_EXP 17
10294: PUSH
10295: FOR_TO
10296: IFFALSE 10397
// begin tmp := 0 ;
10298: LD_ADDR_VAR 0 3
10302: PUSH
10303: LD_STRING 0
10305: ST_TO_ADDR
// if result [ 1 ] then
10306: LD_VAR 0 2
10310: PUSH
10311: LD_INT 1
10313: ARRAY
10314: IFFALSE 10379
// if result [ 1 ] [ 1 ] = i then
10316: LD_VAR 0 2
10320: PUSH
10321: LD_INT 1
10323: ARRAY
10324: PUSH
10325: LD_INT 1
10327: ARRAY
10328: PUSH
10329: LD_VAR 0 8
10333: EQUAL
10334: IFFALSE 10379
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10336: LD_ADDR_VAR 0 2
10340: PUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: LD_VAR 0 2
10353: PUSH
10354: LD_INT 1
10356: ARRAY
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 3
10365: PPUSH
10366: CALL_OW 1
10370: ST_TO_ADDR
// tmp := 1 ;
10371: LD_ADDR_VAR 0 3
10375: PUSH
10376: LD_STRING 1
10378: ST_TO_ADDR
// end ; normal := normal & tmp ;
10379: LD_ADDR_VAR 0 5
10383: PUSH
10384: LD_VAR 0 5
10388: PUSH
10389: LD_VAR 0 3
10393: STR
10394: ST_TO_ADDR
// end ;
10395: GO 10295
10397: POP
10398: POP
// for i = 1 to hardcoreCounter do
10399: LD_ADDR_VAR 0 8
10403: PUSH
10404: DOUBLE
10405: LD_INT 1
10407: DEC
10408: ST_TO_ADDR
10409: LD_EXP 18
10413: PUSH
10414: FOR_TO
10415: IFFALSE 10520
// begin tmp := 0 ;
10417: LD_ADDR_VAR 0 3
10421: PUSH
10422: LD_STRING 0
10424: ST_TO_ADDR
// if result [ 2 ] then
10425: LD_VAR 0 2
10429: PUSH
10430: LD_INT 2
10432: ARRAY
10433: IFFALSE 10502
// if result [ 2 ] [ 1 ] = 100 + i then
10435: LD_VAR 0 2
10439: PUSH
10440: LD_INT 2
10442: ARRAY
10443: PUSH
10444: LD_INT 1
10446: ARRAY
10447: PUSH
10448: LD_INT 100
10450: PUSH
10451: LD_VAR 0 8
10455: PLUS
10456: EQUAL
10457: IFFALSE 10502
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10459: LD_ADDR_VAR 0 2
10463: PUSH
10464: LD_VAR 0 2
10468: PPUSH
10469: LD_INT 2
10471: PPUSH
10472: LD_VAR 0 2
10476: PUSH
10477: LD_INT 2
10479: ARRAY
10480: PPUSH
10481: LD_INT 1
10483: PPUSH
10484: CALL_OW 3
10488: PPUSH
10489: CALL_OW 1
10493: ST_TO_ADDR
// tmp := 1 ;
10494: LD_ADDR_VAR 0 3
10498: PUSH
10499: LD_STRING 1
10501: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10502: LD_ADDR_VAR 0 6
10506: PUSH
10507: LD_VAR 0 6
10511: PUSH
10512: LD_VAR 0 3
10516: STR
10517: ST_TO_ADDR
// end ;
10518: GO 10414
10520: POP
10521: POP
// if isGameLoad then
10522: LD_VAR 0 1
10526: IFFALSE 11001
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10528: LD_ADDR_VAR 0 4
10532: PUSH
10533: LD_EXP 21
10537: PUSH
10538: LD_EXP 20
10542: PUSH
10543: LD_EXP 22
10547: PUSH
10548: LD_EXP 19
10552: PUSH
10553: LD_EXP 23
10557: PUSH
10558: LD_EXP 24
10562: PUSH
10563: LD_EXP 25
10567: PUSH
10568: LD_EXP 26
10572: PUSH
10573: LD_EXP 27
10577: PUSH
10578: LD_EXP 28
10582: PUSH
10583: LD_EXP 29
10587: PUSH
10588: LD_EXP 30
10592: PUSH
10593: LD_EXP 31
10597: PUSH
10598: LD_EXP 32
10602: PUSH
10603: LD_EXP 40
10607: PUSH
10608: LD_EXP 41
10612: PUSH
10613: LD_EXP 42
10617: PUSH
10618: LD_EXP 43
10622: PUSH
10623: LD_EXP 45
10627: PUSH
10628: LD_EXP 46
10632: PUSH
10633: LD_EXP 47
10637: PUSH
10638: LD_EXP 50
10642: PUSH
10643: LD_EXP 52
10647: PUSH
10648: LD_EXP 53
10652: PUSH
10653: LD_EXP 54
10657: PUSH
10658: LD_EXP 56
10662: PUSH
10663: LD_EXP 57
10667: PUSH
10668: LD_EXP 60
10672: PUSH
10673: LD_EXP 61
10677: PUSH
10678: LD_EXP 62
10682: PUSH
10683: LD_EXP 63
10687: PUSH
10688: LD_EXP 64
10692: PUSH
10693: LD_EXP 65
10697: PUSH
10698: LD_EXP 66
10702: PUSH
10703: LD_EXP 67
10707: PUSH
10708: LD_EXP 68
10712: PUSH
10713: LD_EXP 33
10717: PUSH
10718: LD_EXP 34
10722: PUSH
10723: LD_EXP 37
10727: PUSH
10728: LD_EXP 38
10732: PUSH
10733: LD_EXP 39
10737: PUSH
10738: LD_EXP 35
10742: PUSH
10743: LD_EXP 36
10747: PUSH
10748: LD_EXP 44
10752: PUSH
10753: LD_EXP 48
10757: PUSH
10758: LD_EXP 49
10762: PUSH
10763: LD_EXP 51
10767: PUSH
10768: LD_EXP 55
10772: PUSH
10773: LD_EXP 58
10777: PUSH
10778: LD_EXP 59
10782: PUSH
10783: LD_EXP 69
10787: PUSH
10788: LD_EXP 70
10792: PUSH
10793: LD_EXP 71
10797: PUSH
10798: LD_EXP 72
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: ST_TO_ADDR
// tmp :=  ;
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_STRING 
10866: ST_TO_ADDR
// for i = 1 to normalCounter do
10867: LD_ADDR_VAR 0 8
10871: PUSH
10872: DOUBLE
10873: LD_INT 1
10875: DEC
10876: ST_TO_ADDR
10877: LD_EXP 17
10881: PUSH
10882: FOR_TO
10883: IFFALSE 10919
// begin if flags [ i ] then
10885: LD_VAR 0 4
10889: PUSH
10890: LD_VAR 0 8
10894: ARRAY
10895: IFFALSE 10917
// tmp := tmp & i & ; ;
10897: LD_ADDR_VAR 0 3
10901: PUSH
10902: LD_VAR 0 3
10906: PUSH
10907: LD_VAR 0 8
10911: STR
10912: PUSH
10913: LD_STRING ;
10915: STR
10916: ST_TO_ADDR
// end ;
10917: GO 10882
10919: POP
10920: POP
// for i = 1 to hardcoreCounter do
10921: LD_ADDR_VAR 0 8
10925: PUSH
10926: DOUBLE
10927: LD_INT 1
10929: DEC
10930: ST_TO_ADDR
10931: LD_EXP 18
10935: PUSH
10936: FOR_TO
10937: IFFALSE 10983
// begin if flags [ normalCounter + i ] then
10939: LD_VAR 0 4
10943: PUSH
10944: LD_EXP 17
10948: PUSH
10949: LD_VAR 0 8
10953: PLUS
10954: ARRAY
10955: IFFALSE 10981
// tmp := tmp & ( 100 + i ) & ; ;
10957: LD_ADDR_VAR 0 3
10961: PUSH
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 100
10969: PUSH
10970: LD_VAR 0 8
10974: PLUS
10975: STR
10976: PUSH
10977: LD_STRING ;
10979: STR
10980: ST_TO_ADDR
// end ;
10981: GO 10936
10983: POP
10984: POP
// if tmp then
10985: LD_VAR 0 3
10989: IFFALSE 11001
// active := tmp ;
10991: LD_ADDR_VAR 0 7
10995: PUSH
10996: LD_VAR 0 3
11000: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11001: LD_STRING getStreamItemsFromMission("
11003: PUSH
11004: LD_VAR 0 5
11008: STR
11009: PUSH
11010: LD_STRING ","
11012: STR
11013: PUSH
11014: LD_VAR 0 6
11018: STR
11019: PUSH
11020: LD_STRING ","
11022: STR
11023: PUSH
11024: LD_VAR 0 7
11028: STR
11029: PUSH
11030: LD_STRING ")
11032: STR
11033: PPUSH
11034: CALL_OW 559
// end else
11038: GO 11047
// ToLua ( getStreamItemsFromMission("","","") ) ;
11040: LD_STRING getStreamItemsFromMission("","","")
11042: PPUSH
11043: CALL_OW 559
// end ;
11047: LD_VAR 0 2
11051: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11052: LD_EXP 16
11056: IFFALSE 11064
11058: PUSH
11059: LD_EXP 21
11063: AND
11064: IFFALSE 11188
11066: GO 11068
11068: DISABLE
11069: LD_INT 0
11071: PPUSH
11072: PPUSH
// begin enable ;
11073: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11074: LD_ADDR_VAR 0 2
11078: PUSH
11079: LD_INT 22
11081: PUSH
11082: LD_OWVAR 2
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: LD_INT 34
11096: PUSH
11097: LD_INT 7
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 34
11106: PUSH
11107: LD_INT 45
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 34
11116: PUSH
11117: LD_INT 28
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 34
11126: PUSH
11127: LD_INT 47
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 69
11149: ST_TO_ADDR
// if not tmp then
11150: LD_VAR 0 2
11154: NOT
11155: IFFALSE 11159
// exit ;
11157: GO 11188
// for i in tmp do
11159: LD_ADDR_VAR 0 1
11163: PUSH
11164: LD_VAR 0 2
11168: PUSH
11169: FOR_IN
11170: IFFALSE 11186
// begin SetLives ( i , 0 ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_INT 0
11179: PPUSH
11180: CALL_OW 234
// end ;
11184: GO 11169
11186: POP
11187: POP
// end ;
11188: PPOPN 2
11190: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11191: LD_EXP 16
11195: IFFALSE 11203
11197: PUSH
11198: LD_EXP 22
11202: AND
11203: IFFALSE 11287
11205: GO 11207
11207: DISABLE
11208: LD_INT 0
11210: PPUSH
11211: PPUSH
// begin enable ;
11212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_INT 22
11220: PUSH
11221: LD_OWVAR 2
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 32
11232: PUSH
11233: LD_INT 3
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// if not tmp then
11249: LD_VAR 0 2
11253: NOT
11254: IFFALSE 11258
// exit ;
11256: GO 11287
// for i in tmp do
11258: LD_ADDR_VAR 0 1
11262: PUSH
11263: LD_VAR 0 2
11267: PUSH
11268: FOR_IN
11269: IFFALSE 11285
// begin SetLives ( i , 0 ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 234
// end ;
11283: GO 11268
11285: POP
11286: POP
// end ;
11287: PPOPN 2
11289: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11290: LD_EXP 16
11294: IFFALSE 11302
11296: PUSH
11297: LD_EXP 19
11301: AND
11302: IFFALSE 11395
11304: GO 11306
11306: DISABLE
11307: LD_INT 0
11309: PPUSH
// begin enable ;
11310: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11311: LD_ADDR_VAR 0 1
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_OWVAR 2
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 5
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 25
11343: PUSH
11344: LD_INT 9
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_INT 25
11353: PUSH
11354: LD_INT 8
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PUSH
11376: FOR_IN
11377: IFFALSE 11393
// begin SetClass ( i , 1 ) ;
11379: LD_VAR 0 1
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 336
// end ;
11391: GO 11376
11393: POP
11394: POP
// end ;
11395: PPOPN 1
11397: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11398: LD_EXP 16
11402: IFFALSE 11410
11404: PUSH
11405: LD_EXP 20
11409: AND
11410: IFFALSE 11422
11412: PUSH
11413: LD_OWVAR 65
11417: PUSH
11418: LD_INT 7
11420: LESS
11421: AND
11422: IFFALSE 11436
11424: GO 11426
11426: DISABLE
// begin enable ;
11427: ENABLE
// game_speed := 7 ;
11428: LD_ADDR_OWVAR 65
11432: PUSH
11433: LD_INT 7
11435: ST_TO_ADDR
// end ;
11436: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11437: LD_EXP 16
11441: IFFALSE 11449
11443: PUSH
11444: LD_EXP 23
11448: AND
11449: IFFALSE 11651
11451: GO 11453
11453: DISABLE
11454: LD_INT 0
11456: PPUSH
11457: PPUSH
11458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11459: LD_ADDR_VAR 0 3
11463: PUSH
11464: LD_INT 81
11466: PUSH
11467: LD_OWVAR 2
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 21
11478: PUSH
11479: LD_INT 1
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 69
11494: ST_TO_ADDR
// if not tmp then
11495: LD_VAR 0 3
11499: NOT
11500: IFFALSE 11504
// exit ;
11502: GO 11651
// if tmp > 5 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 5
11511: GREATER
11512: IFFALSE 11524
// k := 5 else
11514: LD_ADDR_VAR 0 2
11518: PUSH
11519: LD_INT 5
11521: ST_TO_ADDR
11522: GO 11534
// k := tmp ;
11524: LD_ADDR_VAR 0 2
11528: PUSH
11529: LD_VAR 0 3
11533: ST_TO_ADDR
// for i := 1 to k do
11534: LD_ADDR_VAR 0 1
11538: PUSH
11539: DOUBLE
11540: LD_INT 1
11542: DEC
11543: ST_TO_ADDR
11544: LD_VAR 0 2
11548: PUSH
11549: FOR_TO
11550: IFFALSE 11649
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11552: LD_VAR 0 3
11556: PUSH
11557: LD_VAR 0 1
11561: ARRAY
11562: PPUSH
11563: LD_VAR 0 1
11567: PUSH
11568: LD_INT 4
11570: MOD
11571: PUSH
11572: LD_INT 1
11574: PLUS
11575: PPUSH
11576: CALL_OW 259
11580: PUSH
11581: LD_INT 10
11583: LESS
11584: IFFALSE 11647
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11586: LD_VAR 0 3
11590: PUSH
11591: LD_VAR 0 1
11595: ARRAY
11596: PPUSH
11597: LD_VAR 0 1
11601: PUSH
11602: LD_INT 4
11604: MOD
11605: PUSH
11606: LD_INT 1
11608: PLUS
11609: PPUSH
11610: LD_VAR 0 3
11614: PUSH
11615: LD_VAR 0 1
11619: ARRAY
11620: PPUSH
11621: LD_VAR 0 1
11625: PUSH
11626: LD_INT 4
11628: MOD
11629: PUSH
11630: LD_INT 1
11632: PLUS
11633: PPUSH
11634: CALL_OW 259
11638: PUSH
11639: LD_INT 1
11641: PLUS
11642: PPUSH
11643: CALL_OW 237
11647: GO 11549
11649: POP
11650: POP
// end ;
11651: PPOPN 3
11653: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11654: LD_EXP 16
11658: IFFALSE 11666
11660: PUSH
11661: LD_EXP 24
11665: AND
11666: IFFALSE 11686
11668: GO 11670
11670: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11671: LD_INT 4
11673: PPUSH
11674: LD_OWVAR 2
11678: PPUSH
11679: LD_INT 0
11681: PPUSH
11682: CALL_OW 324
11686: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11687: LD_EXP 16
11691: IFFALSE 11699
11693: PUSH
11694: LD_EXP 53
11698: AND
11699: IFFALSE 11719
11701: GO 11703
11703: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11704: LD_INT 19
11706: PPUSH
11707: LD_OWVAR 2
11711: PPUSH
11712: LD_INT 0
11714: PPUSH
11715: CALL_OW 324
11719: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11720: LD_EXP 16
11724: IFFALSE 11732
11726: PUSH
11727: LD_EXP 25
11731: AND
11732: IFFALSE 11834
11734: GO 11736
11736: DISABLE
11737: LD_INT 0
11739: PPUSH
11740: PPUSH
// begin enable ;
11741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11742: LD_ADDR_VAR 0 2
11746: PUSH
11747: LD_INT 22
11749: PUSH
11750: LD_OWVAR 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 2
11761: PUSH
11762: LD_INT 34
11764: PUSH
11765: LD_INT 11
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 34
11774: PUSH
11775: LD_INT 30
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PPUSH
11791: CALL_OW 69
11795: ST_TO_ADDR
// if not tmp then
11796: LD_VAR 0 2
11800: NOT
11801: IFFALSE 11805
// exit ;
11803: GO 11834
// for i in tmp do
11805: LD_ADDR_VAR 0 1
11809: PUSH
11810: LD_VAR 0 2
11814: PUSH
11815: FOR_IN
11816: IFFALSE 11832
// begin SetLives ( i , 0 ) ;
11818: LD_VAR 0 1
11822: PPUSH
11823: LD_INT 0
11825: PPUSH
11826: CALL_OW 234
// end ;
11830: GO 11815
11832: POP
11833: POP
// end ;
11834: PPOPN 2
11836: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11837: LD_EXP 16
11841: IFFALSE 11849
11843: PUSH
11844: LD_EXP 26
11848: AND
11849: IFFALSE 11869
11851: GO 11853
11853: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11854: LD_INT 32
11856: PPUSH
11857: LD_OWVAR 2
11861: PPUSH
11862: LD_INT 0
11864: PPUSH
11865: CALL_OW 324
11869: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11870: LD_EXP 16
11874: IFFALSE 11882
11876: PUSH
11877: LD_EXP 27
11881: AND
11882: IFFALSE 12065
11884: GO 11886
11886: DISABLE
11887: LD_INT 0
11889: PPUSH
11890: PPUSH
11891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_OWVAR 2
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 33
11911: PUSH
11912: LD_INT 3
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 69
11927: ST_TO_ADDR
// if not tmp then
11928: LD_VAR 0 2
11932: NOT
11933: IFFALSE 11937
// exit ;
11935: GO 12065
// side := 0 ;
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_INT 0
11944: ST_TO_ADDR
// for i := 1 to 8 do
11945: LD_ADDR_VAR 0 1
11949: PUSH
11950: DOUBLE
11951: LD_INT 1
11953: DEC
11954: ST_TO_ADDR
11955: LD_INT 8
11957: PUSH
11958: FOR_TO
11959: IFFALSE 12009
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11961: LD_OWVAR 2
11965: PUSH
11966: LD_VAR 0 1
11970: NONEQUAL
11971: IFFALSE 11993
11973: PUSH
11974: LD_OWVAR 2
11978: PPUSH
11979: LD_VAR 0 1
11983: PPUSH
11984: CALL_OW 81
11988: PUSH
11989: LD_INT 2
11991: EQUAL
11992: AND
11993: IFFALSE 12007
// begin side := i ;
11995: LD_ADDR_VAR 0 3
11999: PUSH
12000: LD_VAR 0 1
12004: ST_TO_ADDR
// break ;
12005: GO 12009
// end ;
12007: GO 11958
12009: POP
12010: POP
// if not side then
12011: LD_VAR 0 3
12015: NOT
12016: IFFALSE 12020
// exit ;
12018: GO 12065
// for i := 1 to tmp do
12020: LD_ADDR_VAR 0 1
12024: PUSH
12025: DOUBLE
12026: LD_INT 1
12028: DEC
12029: ST_TO_ADDR
12030: LD_VAR 0 2
12034: PUSH
12035: FOR_TO
12036: IFFALSE 12063
// if Prob ( 60 ) then
12038: LD_INT 60
12040: PPUSH
12041: CALL_OW 13
12045: IFFALSE 12061
// SetSide ( i , side ) ;
12047: LD_VAR 0 1
12051: PPUSH
12052: LD_VAR 0 3
12056: PPUSH
12057: CALL_OW 235
12061: GO 12035
12063: POP
12064: POP
// end ;
12065: PPOPN 3
12067: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12068: LD_EXP 16
12072: IFFALSE 12080
12074: PUSH
12075: LD_EXP 29
12079: AND
12080: IFFALSE 12199
12082: GO 12084
12084: DISABLE
12085: LD_INT 0
12087: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_OWVAR 2
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 21
12107: PUSH
12108: LD_INT 1
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 3
12117: PUSH
12118: LD_INT 23
12120: PUSH
12121: LD_INT 0
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: PPUSH
12137: CALL_OW 69
12141: PUSH
12142: FOR_IN
12143: IFFALSE 12197
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 257
12154: PUSH
12155: LD_INT 1
12157: PUSH
12158: LD_INT 2
12160: PUSH
12161: LD_INT 3
12163: PUSH
12164: LD_INT 4
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: IN
12173: IFFALSE 12195
// SetClass ( un , rand ( 1 , 4 ) ) ;
12175: LD_VAR 0 1
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 4
12185: PPUSH
12186: CALL_OW 12
12190: PPUSH
12191: CALL_OW 336
12195: GO 12142
12197: POP
12198: POP
// end ;
12199: PPOPN 1
12201: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12202: LD_EXP 16
12206: IFFALSE 12214
12208: PUSH
12209: LD_EXP 28
12213: AND
12214: IFFALSE 12293
12216: GO 12218
12218: DISABLE
12219: LD_INT 0
12221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12222: LD_ADDR_VAR 0 1
12226: PUSH
12227: LD_INT 22
12229: PUSH
12230: LD_OWVAR 2
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 21
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PPUSH
12253: CALL_OW 69
12257: ST_TO_ADDR
// if not tmp then
12258: LD_VAR 0 1
12262: NOT
12263: IFFALSE 12267
// exit ;
12265: GO 12293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12267: LD_VAR 0 1
12271: PUSH
12272: LD_INT 1
12274: PPUSH
12275: LD_VAR 0 1
12279: PPUSH
12280: CALL_OW 12
12284: ARRAY
12285: PPUSH
12286: LD_INT 100
12288: PPUSH
12289: CALL_OW 234
// end ;
12293: PPOPN 1
12295: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12296: LD_EXP 16
12300: IFFALSE 12308
12302: PUSH
12303: LD_EXP 30
12307: AND
12308: IFFALSE 12406
12310: GO 12312
12312: DISABLE
12313: LD_INT 0
12315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12316: LD_ADDR_VAR 0 1
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_OWVAR 2
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 1
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 69
12351: ST_TO_ADDR
// if not tmp then
12352: LD_VAR 0 1
12356: NOT
12357: IFFALSE 12361
// exit ;
12359: GO 12406
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12361: LD_VAR 0 1
12365: PUSH
12366: LD_INT 1
12368: PPUSH
12369: LD_VAR 0 1
12373: PPUSH
12374: CALL_OW 12
12378: ARRAY
12379: PPUSH
12380: LD_INT 1
12382: PPUSH
12383: LD_INT 4
12385: PPUSH
12386: CALL_OW 12
12390: PPUSH
12391: LD_INT 3000
12393: PPUSH
12394: LD_INT 9000
12396: PPUSH
12397: CALL_OW 12
12401: PPUSH
12402: CALL_OW 492
// end ;
12406: PPOPN 1
12408: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12409: LD_EXP 16
12413: IFFALSE 12421
12415: PUSH
12416: LD_EXP 31
12420: AND
12421: IFFALSE 12441
12423: GO 12425
12425: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12426: LD_INT 1
12428: PPUSH
12429: LD_OWVAR 2
12433: PPUSH
12434: LD_INT 0
12436: PPUSH
12437: CALL_OW 324
12441: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12442: LD_EXP 16
12446: IFFALSE 12454
12448: PUSH
12449: LD_EXP 32
12453: AND
12454: IFFALSE 12537
12456: GO 12458
12458: DISABLE
12459: LD_INT 0
12461: PPUSH
12462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12463: LD_ADDR_VAR 0 2
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_OWVAR 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 21
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: ST_TO_ADDR
// if not tmp then
12499: LD_VAR 0 2
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 12537
// for i in tmp do
12508: LD_ADDR_VAR 0 1
12512: PUSH
12513: LD_VAR 0 2
12517: PUSH
12518: FOR_IN
12519: IFFALSE 12535
// SetBLevel ( i , 10 ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: LD_INT 10
12528: PPUSH
12529: CALL_OW 241
12533: GO 12518
12535: POP
12536: POP
// end ;
12537: PPOPN 2
12539: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12540: LD_EXP 16
12544: IFFALSE 12552
12546: PUSH
12547: LD_EXP 33
12551: AND
12552: IFFALSE 12663
12554: GO 12556
12556: DISABLE
12557: LD_INT 0
12559: PPUSH
12560: PPUSH
12561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12562: LD_ADDR_VAR 0 3
12566: PUSH
12567: LD_INT 22
12569: PUSH
12570: LD_OWVAR 2
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 25
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: ST_TO_ADDR
// if not tmp then
12598: LD_VAR 0 3
12602: NOT
12603: IFFALSE 12607
// exit ;
12605: GO 12663
// un := tmp [ rand ( 1 , tmp ) ] ;
12607: LD_ADDR_VAR 0 2
12611: PUSH
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_VAR 0 3
12624: PPUSH
12625: CALL_OW 12
12629: ARRAY
12630: ST_TO_ADDR
// if Crawls ( un ) then
12631: LD_VAR 0 2
12635: PPUSH
12636: CALL_OW 318
12640: IFFALSE 12651
// ComWalk ( un ) ;
12642: LD_VAR 0 2
12646: PPUSH
12647: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12651: LD_VAR 0 2
12655: PPUSH
12656: LD_INT 5
12658: PPUSH
12659: CALL_OW 336
// end ;
12663: PPOPN 3
12665: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12666: LD_EXP 16
12670: IFFALSE 12678
12672: PUSH
12673: LD_EXP 34
12677: AND
12678: IFFALSE 12690
12680: PUSH
12681: LD_OWVAR 67
12685: PUSH
12686: LD_INT 4
12688: LESS
12689: AND
12690: IFFALSE 12709
12692: GO 12694
12694: DISABLE
// begin Difficulty := Difficulty + 1 ;
12695: LD_ADDR_OWVAR 67
12699: PUSH
12700: LD_OWVAR 67
12704: PUSH
12705: LD_INT 1
12707: PLUS
12708: ST_TO_ADDR
// end ;
12709: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12710: LD_EXP 16
12714: IFFALSE 12722
12716: PUSH
12717: LD_EXP 35
12721: AND
12722: IFFALSE 12825
12724: GO 12726
12726: DISABLE
12727: LD_INT 0
12729: PPUSH
// begin for i := 1 to 5 do
12730: LD_ADDR_VAR 0 1
12734: PUSH
12735: DOUBLE
12736: LD_INT 1
12738: DEC
12739: ST_TO_ADDR
12740: LD_INT 5
12742: PUSH
12743: FOR_TO
12744: IFFALSE 12823
// begin uc_nation := nation_nature ;
12746: LD_ADDR_OWVAR 21
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// uc_side := 0 ;
12754: LD_ADDR_OWVAR 20
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12762: LD_ADDR_OWVAR 29
12766: PUSH
12767: LD_INT 12
12769: PUSH
12770: LD_INT 12
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: ST_TO_ADDR
// hc_agressivity := 20 ;
12777: LD_ADDR_OWVAR 35
12781: PUSH
12782: LD_INT 20
12784: ST_TO_ADDR
// hc_class := class_tiger ;
12785: LD_ADDR_OWVAR 28
12789: PUSH
12790: LD_INT 14
12792: ST_TO_ADDR
// hc_gallery :=  ;
12793: LD_ADDR_OWVAR 33
12797: PUSH
12798: LD_STRING 
12800: ST_TO_ADDR
// hc_name :=  ;
12801: LD_ADDR_OWVAR 26
12805: PUSH
12806: LD_STRING 
12808: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12809: CALL_OW 44
12813: PPUSH
12814: LD_INT 0
12816: PPUSH
12817: CALL_OW 51
// end ;
12821: GO 12743
12823: POP
12824: POP
// end ;
12825: PPOPN 1
12827: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12828: LD_EXP 16
12832: IFFALSE 12840
12834: PUSH
12835: LD_EXP 36
12839: AND
12840: IFFALSE 12849
12842: GO 12844
12844: DISABLE
// StreamSibBomb ;
12845: CALL 12850 0 0
12849: END
// export function StreamSibBomb ; var i , x , y ; begin
12850: LD_INT 0
12852: PPUSH
12853: PPUSH
12854: PPUSH
12855: PPUSH
// result := false ;
12856: LD_ADDR_VAR 0 1
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// for i := 1 to 16 do
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: DOUBLE
12870: LD_INT 1
12872: DEC
12873: ST_TO_ADDR
12874: LD_INT 16
12876: PUSH
12877: FOR_TO
12878: IFFALSE 13077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12880: LD_ADDR_VAR 0 3
12884: PUSH
12885: LD_INT 10
12887: PUSH
12888: LD_INT 20
12890: PUSH
12891: LD_INT 30
12893: PUSH
12894: LD_INT 40
12896: PUSH
12897: LD_INT 50
12899: PUSH
12900: LD_INT 60
12902: PUSH
12903: LD_INT 70
12905: PUSH
12906: LD_INT 80
12908: PUSH
12909: LD_INT 90
12911: PUSH
12912: LD_INT 100
12914: PUSH
12915: LD_INT 110
12917: PUSH
12918: LD_INT 120
12920: PUSH
12921: LD_INT 130
12923: PUSH
12924: LD_INT 140
12926: PUSH
12927: LD_INT 150
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 1
12949: PPUSH
12950: LD_INT 15
12952: PPUSH
12953: CALL_OW 12
12957: ARRAY
12958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12959: LD_ADDR_VAR 0 4
12963: PUSH
12964: LD_INT 10
12966: PUSH
12967: LD_INT 20
12969: PUSH
12970: LD_INT 30
12972: PUSH
12973: LD_INT 40
12975: PUSH
12976: LD_INT 50
12978: PUSH
12979: LD_INT 60
12981: PUSH
12982: LD_INT 70
12984: PUSH
12985: LD_INT 80
12987: PUSH
12988: LD_INT 90
12990: PUSH
12991: LD_INT 100
12993: PUSH
12994: LD_INT 110
12996: PUSH
12997: LD_INT 120
12999: PUSH
13000: LD_INT 130
13002: PUSH
13003: LD_INT 140
13005: PUSH
13006: LD_INT 150
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 15
13031: PPUSH
13032: CALL_OW 12
13036: ARRAY
13037: ST_TO_ADDR
// if ValidHex ( x , y ) then
13038: LD_VAR 0 3
13042: PPUSH
13043: LD_VAR 0 4
13047: PPUSH
13048: CALL_OW 488
13052: IFFALSE 13075
// begin result := [ x , y ] ;
13054: LD_ADDR_VAR 0 1
13058: PUSH
13059: LD_VAR 0 3
13063: PUSH
13064: LD_VAR 0 4
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: ST_TO_ADDR
// break ;
13073: GO 13077
// end ; end ;
13075: GO 12877
13077: POP
13078: POP
// if result then
13079: LD_VAR 0 1
13083: IFFALSE 13143
// begin ToLua ( playSibBomb() ) ;
13085: LD_STRING playSibBomb()
13087: PPUSH
13088: CALL_OW 559
// wait ( 0 0$14 ) ;
13092: LD_INT 490
13094: PPUSH
13095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13099: LD_VAR 0 1
13103: PUSH
13104: LD_INT 1
13106: ARRAY
13107: PPUSH
13108: LD_VAR 0 1
13112: PUSH
13113: LD_INT 2
13115: ARRAY
13116: PPUSH
13117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13121: LD_VAR 0 1
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: LD_VAR 0 1
13134: PUSH
13135: LD_INT 2
13137: ARRAY
13138: PPUSH
13139: CALL_OW 429
// end ; end ;
13143: LD_VAR 0 1
13147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13148: LD_EXP 16
13152: IFFALSE 13160
13154: PUSH
13155: LD_EXP 38
13159: AND
13160: IFFALSE 13172
13162: GO 13164
13164: DISABLE
// YouLost (  ) ;
13165: LD_STRING 
13167: PPUSH
13168: CALL_OW 104
13172: END
// every 0 0$1 trigger StreamModeActive and sFog do
13173: LD_EXP 16
13177: IFFALSE 13185
13179: PUSH
13180: LD_EXP 37
13184: AND
13185: IFFALSE 13199
13187: GO 13189
13189: DISABLE
// FogOff ( your_side ) ;
13190: LD_OWVAR 2
13194: PPUSH
13195: CALL_OW 344
13199: END
// every 0 0$1 trigger StreamModeActive and sSun do
13200: LD_EXP 16
13204: IFFALSE 13212
13206: PUSH
13207: LD_EXP 39
13211: AND
13212: IFFALSE 13240
13214: GO 13216
13216: DISABLE
// begin solar_recharge_percent := 0 ;
13217: LD_ADDR_OWVAR 79
13221: PUSH
13222: LD_INT 0
13224: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13225: LD_INT 10500
13227: PPUSH
13228: CALL_OW 67
// solar_recharge_percent := 100 ;
13232: LD_ADDR_OWVAR 79
13236: PUSH
13237: LD_INT 100
13239: ST_TO_ADDR
// end ;
13240: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13241: LD_EXP 16
13245: IFFALSE 13253
13247: PUSH
13248: LD_EXP 40
13252: AND
13253: IFFALSE 13492
13255: GO 13257
13257: DISABLE
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
13262: PPUSH
// begin tmp := [ ] ;
13263: LD_ADDR_VAR 0 3
13267: PUSH
13268: EMPTY
13269: ST_TO_ADDR
// for i := 1 to 6 do
13270: LD_ADDR_VAR 0 1
13274: PUSH
13275: DOUBLE
13276: LD_INT 1
13278: DEC
13279: ST_TO_ADDR
13280: LD_INT 6
13282: PUSH
13283: FOR_TO
13284: IFFALSE 13389
// begin uc_nation := nation_nature ;
13286: LD_ADDR_OWVAR 21
13290: PUSH
13291: LD_INT 0
13293: ST_TO_ADDR
// uc_side := 0 ;
13294: LD_ADDR_OWVAR 20
13298: PUSH
13299: LD_INT 0
13301: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13302: LD_ADDR_OWVAR 29
13306: PUSH
13307: LD_INT 12
13309: PUSH
13310: LD_INT 12
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: ST_TO_ADDR
// hc_agressivity := 20 ;
13317: LD_ADDR_OWVAR 35
13321: PUSH
13322: LD_INT 20
13324: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13325: LD_ADDR_OWVAR 28
13329: PUSH
13330: LD_INT 17
13332: ST_TO_ADDR
// hc_gallery :=  ;
13333: LD_ADDR_OWVAR 33
13337: PUSH
13338: LD_STRING 
13340: ST_TO_ADDR
// hc_name :=  ;
13341: LD_ADDR_OWVAR 26
13345: PUSH
13346: LD_STRING 
13348: ST_TO_ADDR
// un := CreateHuman ;
13349: LD_ADDR_VAR 0 2
13353: PUSH
13354: CALL_OW 44
13358: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13359: LD_VAR 0 2
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 51
// tmp := tmp ^ un ;
13371: LD_ADDR_VAR 0 3
13375: PUSH
13376: LD_VAR 0 3
13380: PUSH
13381: LD_VAR 0 2
13385: ADD
13386: ST_TO_ADDR
// end ;
13387: GO 13283
13389: POP
13390: POP
// repeat wait ( 0 0$1 ) ;
13391: LD_INT 35
13393: PPUSH
13394: CALL_OW 67
// for un in tmp do
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_VAR 0 3
13407: PUSH
13408: FOR_IN
13409: IFFALSE 13483
// begin if IsDead ( un ) then
13411: LD_VAR 0 2
13415: PPUSH
13416: CALL_OW 301
13420: IFFALSE 13440
// begin tmp := tmp diff un ;
13422: LD_ADDR_VAR 0 3
13426: PUSH
13427: LD_VAR 0 3
13431: PUSH
13432: LD_VAR 0 2
13436: DIFF
13437: ST_TO_ADDR
// continue ;
13438: GO 13408
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13440: LD_VAR 0 2
13444: PPUSH
13445: LD_INT 3
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_INT 0
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: PPUSH
13467: LD_VAR 0 2
13471: PPUSH
13472: CALL_OW 74
13476: PPUSH
13477: CALL_OW 115
// end ;
13481: GO 13408
13483: POP
13484: POP
// until not tmp ;
13485: LD_VAR 0 3
13489: NOT
13490: IFFALSE 13391
// end ;
13492: PPOPN 3
13494: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13495: LD_EXP 16
13499: IFFALSE 13507
13501: PUSH
13502: LD_EXP 41
13506: AND
13507: IFFALSE 13561
13509: GO 13511
13511: DISABLE
// begin ToLua ( displayTroll(); ) ;
13512: LD_STRING displayTroll();
13514: PPUSH
13515: CALL_OW 559
// wait ( 3 3$00 ) ;
13519: LD_INT 6300
13521: PPUSH
13522: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13526: LD_STRING hideTroll();
13528: PPUSH
13529: CALL_OW 559
// wait ( 1 1$00 ) ;
13533: LD_INT 2100
13535: PPUSH
13536: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13540: LD_STRING displayTroll();
13542: PPUSH
13543: CALL_OW 559
// wait ( 1 1$00 ) ;
13547: LD_INT 2100
13549: PPUSH
13550: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13554: LD_STRING hideTroll();
13556: PPUSH
13557: CALL_OW 559
// end ;
13561: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13562: LD_EXP 16
13566: IFFALSE 13574
13568: PUSH
13569: LD_EXP 42
13573: AND
13574: IFFALSE 13637
13576: GO 13578
13578: DISABLE
13579: LD_INT 0
13581: PPUSH
// begin p := 0 ;
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_INT 0
13589: ST_TO_ADDR
// repeat game_speed := 1 ;
13590: LD_ADDR_OWVAR 65
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13598: LD_INT 35
13600: PPUSH
13601: CALL_OW 67
// p := p + 1 ;
13605: LD_ADDR_VAR 0 1
13609: PUSH
13610: LD_VAR 0 1
13614: PUSH
13615: LD_INT 1
13617: PLUS
13618: ST_TO_ADDR
// until p >= 60 ;
13619: LD_VAR 0 1
13623: PUSH
13624: LD_INT 60
13626: GREATEREQUAL
13627: IFFALSE 13590
// game_speed := 4 ;
13629: LD_ADDR_OWVAR 65
13633: PUSH
13634: LD_INT 4
13636: ST_TO_ADDR
// end ;
13637: PPOPN 1
13639: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13640: LD_EXP 16
13644: IFFALSE 13652
13646: PUSH
13647: LD_EXP 43
13651: AND
13652: IFFALSE 13798
13654: GO 13656
13656: DISABLE
13657: LD_INT 0
13659: PPUSH
13660: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_OWVAR 2
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: LD_INT 30
13683: PUSH
13684: LD_INT 0
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 30
13693: PUSH
13694: LD_INT 1
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PPUSH
13710: CALL_OW 69
13714: ST_TO_ADDR
// if not depot then
13715: LD_VAR 0 1
13719: NOT
13720: IFFALSE 13724
// exit ;
13722: GO 13798
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13724: LD_ADDR_VAR 0 2
13728: PUSH
13729: LD_VAR 0 1
13733: PUSH
13734: LD_INT 1
13736: PPUSH
13737: LD_VAR 0 1
13741: PPUSH
13742: CALL_OW 12
13746: ARRAY
13747: PPUSH
13748: CALL_OW 274
13752: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13753: LD_VAR 0 2
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: LD_INT 0
13763: PPUSH
13764: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_INT 2
13775: PPUSH
13776: LD_INT 0
13778: PPUSH
13779: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13783: LD_VAR 0 2
13787: PPUSH
13788: LD_INT 3
13790: PPUSH
13791: LD_INT 0
13793: PPUSH
13794: CALL_OW 277
// end ;
13798: PPOPN 2
13800: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13801: LD_EXP 16
13805: IFFALSE 13813
13807: PUSH
13808: LD_EXP 44
13812: AND
13813: IFFALSE 13910
13815: GO 13817
13817: DISABLE
13818: LD_INT 0
13820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13821: LD_ADDR_VAR 0 1
13825: PUSH
13826: LD_INT 22
13828: PUSH
13829: LD_OWVAR 2
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 21
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 3
13850: PUSH
13851: LD_INT 23
13853: PUSH
13854: LD_INT 0
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: PPUSH
13870: CALL_OW 69
13874: ST_TO_ADDR
// if not tmp then
13875: LD_VAR 0 1
13879: NOT
13880: IFFALSE 13884
// exit ;
13882: GO 13910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13884: LD_VAR 0 1
13888: PUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 1
13896: PPUSH
13897: CALL_OW 12
13901: ARRAY
13902: PPUSH
13903: LD_INT 200
13905: PPUSH
13906: CALL_OW 234
// end ;
13910: PPOPN 1
13912: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13913: LD_EXP 16
13917: IFFALSE 13925
13919: PUSH
13920: LD_EXP 45
13924: AND
13925: IFFALSE 14004
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_INT 22
13940: PUSH
13941: LD_OWVAR 2
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: LD_INT 21
13952: PUSH
13953: LD_INT 2
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PPUSH
13964: CALL_OW 69
13968: ST_TO_ADDR
// if not tmp then
13969: LD_VAR 0 1
13973: NOT
13974: IFFALSE 13978
// exit ;
13976: GO 14004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13978: LD_VAR 0 1
13982: PUSH
13983: LD_INT 1
13985: PPUSH
13986: LD_VAR 0 1
13990: PPUSH
13991: CALL_OW 12
13995: ARRAY
13996: PPUSH
13997: LD_INT 60
13999: PPUSH
14000: CALL_OW 234
// end ;
14004: PPOPN 1
14006: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14007: LD_EXP 16
14011: IFFALSE 14019
14013: PUSH
14014: LD_EXP 46
14018: AND
14019: IFFALSE 14118
14021: GO 14023
14023: DISABLE
14024: LD_INT 0
14026: PPUSH
14027: PPUSH
// begin enable ;
14028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_INT 22
14036: PUSH
14037: LD_OWVAR 2
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 61
14048: PUSH
14049: EMPTY
14050: LIST
14051: PUSH
14052: LD_INT 33
14054: PUSH
14055: LD_INT 2
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: PPUSH
14067: CALL_OW 69
14071: ST_TO_ADDR
// if not tmp then
14072: LD_VAR 0 1
14076: NOT
14077: IFFALSE 14081
// exit ;
14079: GO 14118
// for i in tmp do
14081: LD_ADDR_VAR 0 2
14085: PUSH
14086: LD_VAR 0 1
14090: PUSH
14091: FOR_IN
14092: IFFALSE 14116
// if IsControledBy ( i ) then
14094: LD_VAR 0 2
14098: PPUSH
14099: CALL_OW 312
14103: IFFALSE 14114
// ComUnlink ( i ) ;
14105: LD_VAR 0 2
14109: PPUSH
14110: CALL_OW 136
14114: GO 14091
14116: POP
14117: POP
// end ;
14118: PPOPN 2
14120: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14121: LD_EXP 16
14125: IFFALSE 14133
14127: PUSH
14128: LD_EXP 47
14132: AND
14133: IFFALSE 14273
14135: GO 14137
14137: DISABLE
14138: LD_INT 0
14140: PPUSH
14141: PPUSH
// begin ToLua ( displayPowell(); ) ;
14142: LD_STRING displayPowell();
14144: PPUSH
14145: CALL_OW 559
// uc_side := 0 ;
14149: LD_ADDR_OWVAR 20
14153: PUSH
14154: LD_INT 0
14156: ST_TO_ADDR
// uc_nation := 2 ;
14157: LD_ADDR_OWVAR 21
14161: PUSH
14162: LD_INT 2
14164: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14165: LD_ADDR_OWVAR 37
14169: PUSH
14170: LD_INT 14
14172: ST_TO_ADDR
// vc_engine := engine_siberite ;
14173: LD_ADDR_OWVAR 39
14177: PUSH
14178: LD_INT 3
14180: ST_TO_ADDR
// vc_control := control_apeman ;
14181: LD_ADDR_OWVAR 38
14185: PUSH
14186: LD_INT 5
14188: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14189: LD_ADDR_OWVAR 40
14193: PUSH
14194: LD_INT 29
14196: ST_TO_ADDR
// un := CreateVehicle ;
14197: LD_ADDR_VAR 0 2
14201: PUSH
14202: CALL_OW 45
14206: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14207: LD_VAR 0 2
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14226: LD_VAR 0 2
14230: PPUSH
14231: LD_INT 22
14233: PUSH
14234: LD_OWVAR 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PPUSH
14243: CALL_OW 69
14247: PPUSH
14248: LD_VAR 0 2
14252: PPUSH
14253: CALL_OW 74
14257: PPUSH
14258: CALL_OW 115
// until IsDead ( un ) ;
14262: LD_VAR 0 2
14266: PPUSH
14267: CALL_OW 301
14271: IFFALSE 14219
// end ;
14273: PPOPN 2
14275: END
// every 0 0$1 trigger StreamModeActive and sStu do
14276: LD_EXP 16
14280: IFFALSE 14288
14282: PUSH
14283: LD_EXP 55
14287: AND
14288: IFFALSE 14304
14290: GO 14292
14292: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14293: LD_STRING displayStucuk();
14295: PPUSH
14296: CALL_OW 559
// ResetFog ;
14300: CALL_OW 335
// end ;
14304: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14305: LD_EXP 16
14309: IFFALSE 14317
14311: PUSH
14312: LD_EXP 48
14316: AND
14317: IFFALSE 14458
14319: GO 14321
14321: DISABLE
14322: LD_INT 0
14324: PPUSH
14325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_OWVAR 2
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 21
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PPUSH
14357: CALL_OW 69
14361: ST_TO_ADDR
// if not tmp then
14362: LD_VAR 0 2
14366: NOT
14367: IFFALSE 14371
// exit ;
14369: GO 14458
// un := tmp [ rand ( 1 , tmp ) ] ;
14371: LD_ADDR_VAR 0 1
14375: PUSH
14376: LD_VAR 0 2
14380: PUSH
14381: LD_INT 1
14383: PPUSH
14384: LD_VAR 0 2
14388: PPUSH
14389: CALL_OW 12
14393: ARRAY
14394: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14395: LD_VAR 0 1
14399: PPUSH
14400: LD_INT 0
14402: PPUSH
14403: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14407: LD_VAR 0 1
14411: PPUSH
14412: LD_OWVAR 3
14416: PUSH
14417: LD_VAR 0 1
14421: DIFF
14422: PPUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 74
14432: PPUSH
14433: CALL_OW 115
// wait ( 0 0$20 ) ;
14437: LD_INT 700
14439: PPUSH
14440: CALL_OW 67
// SetSide ( un , your_side ) ;
14444: LD_VAR 0 1
14448: PPUSH
14449: LD_OWVAR 2
14453: PPUSH
14454: CALL_OW 235
// end ;
14458: PPOPN 2
14460: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14461: LD_EXP 16
14465: IFFALSE 14473
14467: PUSH
14468: LD_EXP 49
14472: AND
14473: IFFALSE 14579
14475: GO 14477
14477: DISABLE
14478: LD_INT 0
14480: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14481: LD_ADDR_VAR 0 1
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_OWVAR 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 2
14500: PUSH
14501: LD_INT 30
14503: PUSH
14504: LD_INT 0
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 30
14513: PUSH
14514: LD_INT 1
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 69
14534: ST_TO_ADDR
// if not depot then
14535: LD_VAR 0 1
14539: NOT
14540: IFFALSE 14544
// exit ;
14542: GO 14579
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14544: LD_VAR 0 1
14548: PUSH
14549: LD_INT 1
14551: ARRAY
14552: PPUSH
14553: CALL_OW 250
14557: PPUSH
14558: LD_VAR 0 1
14562: PUSH
14563: LD_INT 1
14565: ARRAY
14566: PPUSH
14567: CALL_OW 251
14571: PPUSH
14572: LD_INT 70
14574: PPUSH
14575: CALL_OW 495
// end ;
14579: PPOPN 1
14581: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14582: LD_EXP 16
14586: IFFALSE 14594
14588: PUSH
14589: LD_EXP 50
14593: AND
14594: IFFALSE 14805
14596: GO 14598
14598: DISABLE
14599: LD_INT 0
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14606: LD_ADDR_VAR 0 5
14610: PUSH
14611: LD_INT 22
14613: PUSH
14614: LD_OWVAR 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: ST_TO_ADDR
// if not tmp then
14642: LD_VAR 0 5
14646: NOT
14647: IFFALSE 14651
// exit ;
14649: GO 14805
// for i in tmp do
14651: LD_ADDR_VAR 0 1
14655: PUSH
14656: LD_VAR 0 5
14660: PUSH
14661: FOR_IN
14662: IFFALSE 14803
// begin d := rand ( 0 , 5 ) ;
14664: LD_ADDR_VAR 0 4
14668: PUSH
14669: LD_INT 0
14671: PPUSH
14672: LD_INT 5
14674: PPUSH
14675: CALL_OW 12
14679: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14680: LD_ADDR_VAR 0 2
14684: PUSH
14685: LD_VAR 0 1
14689: PPUSH
14690: CALL_OW 250
14694: PPUSH
14695: LD_VAR 0 4
14699: PPUSH
14700: LD_INT 3
14702: PPUSH
14703: LD_INT 12
14705: PPUSH
14706: CALL_OW 12
14710: PPUSH
14711: CALL_OW 272
14715: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 251
14730: PPUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: LD_INT 3
14738: PPUSH
14739: LD_INT 12
14741: PPUSH
14742: CALL_OW 12
14746: PPUSH
14747: CALL_OW 273
14751: ST_TO_ADDR
// if ValidHex ( x , y ) then
14752: LD_VAR 0 2
14756: PPUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: CALL_OW 488
14766: IFFALSE 14801
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_VAR 0 2
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: LD_INT 3
14785: PPUSH
14786: LD_INT 6
14788: PPUSH
14789: CALL_OW 12
14793: PPUSH
14794: LD_INT 1
14796: PPUSH
14797: CALL_OW 483
// end ;
14801: GO 14661
14803: POP
14804: POP
// end ;
14805: PPOPN 5
14807: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14808: LD_EXP 16
14812: IFFALSE 14820
14814: PUSH
14815: LD_EXP 51
14819: AND
14820: IFFALSE 14914
14822: GO 14824
14824: DISABLE
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14829: LD_ADDR_VAR 0 2
14833: PUSH
14834: LD_INT 22
14836: PUSH
14837: LD_OWVAR 2
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 32
14848: PUSH
14849: LD_INT 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: ST_TO_ADDR
// if not tmp then
14876: LD_VAR 0 2
14880: NOT
14881: IFFALSE 14885
// exit ;
14883: GO 14914
// for i in tmp do
14885: LD_ADDR_VAR 0 1
14889: PUSH
14890: LD_VAR 0 2
14894: PUSH
14895: FOR_IN
14896: IFFALSE 14912
// SetFuel ( i , 0 ) ;
14898: LD_VAR 0 1
14902: PPUSH
14903: LD_INT 0
14905: PPUSH
14906: CALL_OW 240
14910: GO 14895
14912: POP
14913: POP
// end ;
14914: PPOPN 2
14916: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14917: LD_EXP 16
14921: IFFALSE 14929
14923: PUSH
14924: LD_EXP 52
14928: AND
14929: IFFALSE 14995
14931: GO 14933
14933: DISABLE
14934: LD_INT 0
14936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14937: LD_ADDR_VAR 0 1
14941: PUSH
14942: LD_INT 22
14944: PUSH
14945: LD_OWVAR 2
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 30
14956: PUSH
14957: LD_INT 29
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 69
14972: ST_TO_ADDR
// if not tmp then
14973: LD_VAR 0 1
14977: NOT
14978: IFFALSE 14982
// exit ;
14980: GO 14995
// DestroyUnit ( tmp [ 1 ] ) ;
14982: LD_VAR 0 1
14986: PUSH
14987: LD_INT 1
14989: ARRAY
14990: PPUSH
14991: CALL_OW 65
// end ;
14995: PPOPN 1
14997: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14998: LD_EXP 16
15002: IFFALSE 15010
15004: PUSH
15005: LD_EXP 54
15009: AND
15010: IFFALSE 15139
15012: GO 15014
15014: DISABLE
15015: LD_INT 0
15017: PPUSH
// begin uc_side := 0 ;
15018: LD_ADDR_OWVAR 20
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
// uc_nation := nation_arabian ;
15026: LD_ADDR_OWVAR 21
15030: PUSH
15031: LD_INT 2
15033: ST_TO_ADDR
// hc_gallery :=  ;
15034: LD_ADDR_OWVAR 33
15038: PUSH
15039: LD_STRING 
15041: ST_TO_ADDR
// hc_name :=  ;
15042: LD_ADDR_OWVAR 26
15046: PUSH
15047: LD_STRING 
15049: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15050: LD_INT 1
15052: PPUSH
15053: LD_INT 11
15055: PPUSH
15056: LD_INT 10
15058: PPUSH
15059: CALL_OW 380
// un := CreateHuman ;
15063: LD_ADDR_VAR 0 1
15067: PUSH
15068: CALL_OW 44
15072: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15085: LD_INT 35
15087: PPUSH
15088: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15092: LD_VAR 0 1
15096: PPUSH
15097: LD_INT 22
15099: PUSH
15100: LD_OWVAR 2
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PPUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 74
15123: PPUSH
15124: CALL_OW 115
// until IsDead ( un ) ;
15128: LD_VAR 0 1
15132: PPUSH
15133: CALL_OW 301
15137: IFFALSE 15085
// end ;
15139: PPOPN 1
15141: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15142: LD_EXP 16
15146: IFFALSE 15154
15148: PUSH
15149: LD_EXP 56
15153: AND
15154: IFFALSE 15166
15156: GO 15158
15158: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15159: LD_STRING earthquake(getX(game), 0, 32)
15161: PPUSH
15162: CALL_OW 559
15166: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15167: LD_EXP 16
15171: IFFALSE 15179
15173: PUSH
15174: LD_EXP 57
15178: AND
15179: IFFALSE 15270
15181: GO 15183
15183: DISABLE
15184: LD_INT 0
15186: PPUSH
// begin enable ;
15187: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: LD_INT 22
15195: PUSH
15196: LD_OWVAR 2
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 21
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 33
15217: PUSH
15218: LD_INT 3
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: ST_TO_ADDR
// if not tmp then
15235: LD_VAR 0 1
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 15270
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15244: LD_VAR 0 1
15248: PUSH
15249: LD_INT 1
15251: PPUSH
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 12
15261: ARRAY
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: CALL_OW 234
// end ;
15270: PPOPN 1
15272: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15273: LD_EXP 16
15277: IFFALSE 15285
15279: PUSH
15280: LD_EXP 58
15284: AND
15285: IFFALSE 15426
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
15293: PPUSH
15294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15295: LD_ADDR_VAR 0 3
15299: PUSH
15300: LD_INT 22
15302: PUSH
15303: LD_OWVAR 2
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 25
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 69
15330: ST_TO_ADDR
// if not tmp then
15331: LD_VAR 0 3
15335: NOT
15336: IFFALSE 15340
// exit ;
15338: GO 15426
// un := tmp [ rand ( 1 , tmp ) ] ;
15340: LD_ADDR_VAR 0 2
15344: PUSH
15345: LD_VAR 0 3
15349: PUSH
15350: LD_INT 1
15352: PPUSH
15353: LD_VAR 0 3
15357: PPUSH
15358: CALL_OW 12
15362: ARRAY
15363: ST_TO_ADDR
// if Crawls ( un ) then
15364: LD_VAR 0 2
15368: PPUSH
15369: CALL_OW 318
15373: IFFALSE 15384
// ComWalk ( un ) ;
15375: LD_VAR 0 2
15379: PPUSH
15380: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15384: LD_VAR 0 2
15388: PPUSH
15389: LD_INT 9
15391: PPUSH
15392: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15396: LD_INT 28
15398: PPUSH
15399: LD_OWVAR 2
15403: PPUSH
15404: LD_INT 2
15406: PPUSH
15407: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15411: LD_INT 29
15413: PPUSH
15414: LD_OWVAR 2
15418: PPUSH
15419: LD_INT 2
15421: PPUSH
15422: CALL_OW 322
// end ;
15426: PPOPN 3
15428: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15429: LD_EXP 16
15433: IFFALSE 15441
15435: PUSH
15436: LD_EXP 59
15440: AND
15441: IFFALSE 15552
15443: GO 15445
15445: DISABLE
15446: LD_INT 0
15448: PPUSH
15449: PPUSH
15450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15451: LD_ADDR_VAR 0 3
15455: PUSH
15456: LD_INT 22
15458: PUSH
15459: LD_OWVAR 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 25
15470: PUSH
15471: LD_INT 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PPUSH
15482: CALL_OW 69
15486: ST_TO_ADDR
// if not tmp then
15487: LD_VAR 0 3
15491: NOT
15492: IFFALSE 15496
// exit ;
15494: GO 15552
// un := tmp [ rand ( 1 , tmp ) ] ;
15496: LD_ADDR_VAR 0 2
15500: PUSH
15501: LD_VAR 0 3
15505: PUSH
15506: LD_INT 1
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: CALL_OW 12
15518: ARRAY
15519: ST_TO_ADDR
// if Crawls ( un ) then
15520: LD_VAR 0 2
15524: PPUSH
15525: CALL_OW 318
15529: IFFALSE 15540
// ComWalk ( un ) ;
15531: LD_VAR 0 2
15535: PPUSH
15536: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15540: LD_VAR 0 2
15544: PPUSH
15545: LD_INT 8
15547: PPUSH
15548: CALL_OW 336
// end ;
15552: PPOPN 3
15554: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15555: LD_EXP 16
15559: IFFALSE 15567
15561: PUSH
15562: LD_EXP 60
15566: AND
15567: IFFALSE 15711
15569: GO 15571
15571: DISABLE
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_INT 22
15583: PUSH
15584: LD_OWVAR 2
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 21
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 2
15605: PUSH
15606: LD_INT 34
15608: PUSH
15609: LD_INT 12
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 34
15618: PUSH
15619: LD_INT 51
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 34
15628: PUSH
15629: LD_INT 32
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: ST_TO_ADDR
// if not tmp then
15652: LD_VAR 0 2
15656: NOT
15657: IFFALSE 15661
// exit ;
15659: GO 15711
// for i in tmp do
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: LD_VAR 0 2
15670: PUSH
15671: FOR_IN
15672: IFFALSE 15709
// if GetCargo ( i , mat_artifact ) = 0 then
15674: LD_VAR 0 1
15678: PPUSH
15679: LD_INT 4
15681: PPUSH
15682: CALL_OW 289
15686: PUSH
15687: LD_INT 0
15689: EQUAL
15690: IFFALSE 15707
// SetCargo ( i , mat_siberit , 100 ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 3
15699: PPUSH
15700: LD_INT 100
15702: PPUSH
15703: CALL_OW 290
15707: GO 15671
15709: POP
15710: POP
// end ;
15711: PPOPN 2
15713: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15714: LD_EXP 16
15718: IFFALSE 15726
15720: PUSH
15721: LD_EXP 61
15725: AND
15726: IFFALSE 15909
15728: GO 15730
15730: DISABLE
15731: LD_INT 0
15733: PPUSH
15734: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15735: LD_ADDR_VAR 0 2
15739: PUSH
15740: LD_INT 22
15742: PUSH
15743: LD_OWVAR 2
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PPUSH
15752: CALL_OW 69
15756: ST_TO_ADDR
// if not tmp then
15757: LD_VAR 0 2
15761: NOT
15762: IFFALSE 15766
// exit ;
15764: GO 15909
// for i := 1 to 2 do
15766: LD_ADDR_VAR 0 1
15770: PUSH
15771: DOUBLE
15772: LD_INT 1
15774: DEC
15775: ST_TO_ADDR
15776: LD_INT 2
15778: PUSH
15779: FOR_TO
15780: IFFALSE 15907
// begin uc_side := your_side ;
15782: LD_ADDR_OWVAR 20
15786: PUSH
15787: LD_OWVAR 2
15791: ST_TO_ADDR
// uc_nation := nation_american ;
15792: LD_ADDR_OWVAR 21
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// vc_chassis := us_morphling ;
15800: LD_ADDR_OWVAR 37
15804: PUSH
15805: LD_INT 5
15807: ST_TO_ADDR
// vc_engine := engine_siberite ;
15808: LD_ADDR_OWVAR 39
15812: PUSH
15813: LD_INT 3
15815: ST_TO_ADDR
// vc_control := control_computer ;
15816: LD_ADDR_OWVAR 38
15820: PUSH
15821: LD_INT 3
15823: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15824: LD_ADDR_OWVAR 40
15828: PUSH
15829: LD_INT 10
15831: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 1
15839: ARRAY
15840: PPUSH
15841: CALL_OW 310
15845: NOT
15846: IFFALSE 15893
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15848: CALL_OW 45
15852: PPUSH
15853: LD_VAR 0 2
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: CALL_OW 250
15866: PPUSH
15867: LD_VAR 0 2
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: CALL_OW 251
15880: PPUSH
15881: LD_INT 12
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 50
15891: GO 15905
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15893: CALL_OW 45
15897: PPUSH
15898: LD_INT 1
15900: PPUSH
15901: CALL_OW 51
// end ;
15905: GO 15779
15907: POP
15908: POP
// end ;
15909: PPOPN 2
15911: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15912: LD_EXP 16
15916: IFFALSE 15924
15918: PUSH
15919: LD_EXP 62
15923: AND
15924: IFFALSE 16146
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
15936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15937: LD_ADDR_VAR 0 6
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 23
15969: PUSH
15970: LD_INT 0
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: ST_TO_ADDR
// if not tmp then
15991: LD_VAR 0 6
15995: NOT
15996: IFFALSE 16000
// exit ;
15998: GO 16146
// s1 := rand ( 1 , 4 ) ;
16000: LD_ADDR_VAR 0 2
16004: PUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_INT 4
16010: PPUSH
16011: CALL_OW 12
16015: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16016: LD_ADDR_VAR 0 4
16020: PUSH
16021: LD_VAR 0 6
16025: PUSH
16026: LD_INT 1
16028: ARRAY
16029: PPUSH
16030: LD_VAR 0 2
16034: PPUSH
16035: CALL_OW 259
16039: ST_TO_ADDR
// if s1 = 1 then
16040: LD_VAR 0 2
16044: PUSH
16045: LD_INT 1
16047: EQUAL
16048: IFFALSE 16068
// s2 := rand ( 2 , 4 ) else
16050: LD_ADDR_VAR 0 3
16054: PUSH
16055: LD_INT 2
16057: PPUSH
16058: LD_INT 4
16060: PPUSH
16061: CALL_OW 12
16065: ST_TO_ADDR
16066: GO 16076
// s2 := 1 ;
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_INT 1
16075: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16076: LD_ADDR_VAR 0 5
16080: PUSH
16081: LD_VAR 0 6
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: PPUSH
16090: LD_VAR 0 3
16094: PPUSH
16095: CALL_OW 259
16099: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16100: LD_VAR 0 6
16104: PUSH
16105: LD_INT 1
16107: ARRAY
16108: PPUSH
16109: LD_VAR 0 2
16113: PPUSH
16114: LD_VAR 0 5
16118: PPUSH
16119: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16123: LD_VAR 0 6
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: PPUSH
16132: LD_VAR 0 3
16136: PPUSH
16137: LD_VAR 0 4
16141: PPUSH
16142: CALL_OW 237
// end ;
16146: PPOPN 6
16148: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16149: LD_EXP 16
16153: IFFALSE 16161
16155: PUSH
16156: LD_EXP 63
16160: AND
16161: IFFALSE 16240
16163: GO 16165
16165: DISABLE
16166: LD_INT 0
16168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16169: LD_ADDR_VAR 0 1
16173: PUSH
16174: LD_INT 22
16176: PUSH
16177: LD_OWVAR 2
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 30
16188: PUSH
16189: LD_INT 3
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: CALL_OW 69
16204: ST_TO_ADDR
// if not tmp then
16205: LD_VAR 0 1
16209: NOT
16210: IFFALSE 16214
// exit ;
16212: GO 16240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16214: LD_VAR 0 1
16218: PUSH
16219: LD_INT 1
16221: PPUSH
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 12
16231: ARRAY
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 234
// end ;
16240: PPOPN 1
16242: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16243: LD_EXP 16
16247: IFFALSE 16255
16249: PUSH
16250: LD_EXP 64
16254: AND
16255: IFFALSE 16367
16257: GO 16259
16259: DISABLE
16260: LD_INT 0
16262: PPUSH
16263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_INT 22
16271: PUSH
16272: LD_OWVAR 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 2
16283: PUSH
16284: LD_INT 30
16286: PUSH
16287: LD_INT 27
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: LD_INT 26
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 30
16306: PUSH
16307: LD_INT 28
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PPUSH
16324: CALL_OW 69
16328: ST_TO_ADDR
// if not tmp then
16329: LD_VAR 0 2
16333: NOT
16334: IFFALSE 16338
// exit ;
16336: GO 16367
// for i in tmp do
16338: LD_ADDR_VAR 0 1
16342: PUSH
16343: LD_VAR 0 2
16347: PUSH
16348: FOR_IN
16349: IFFALSE 16365
// SetLives ( i , 1 ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 234
16363: GO 16348
16365: POP
16366: POP
// end ;
16367: PPOPN 2
16369: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16370: LD_EXP 16
16374: IFFALSE 16382
16376: PUSH
16377: LD_EXP 65
16381: AND
16382: IFFALSE 16669
16384: GO 16386
16386: DISABLE
16387: LD_INT 0
16389: PPUSH
16390: PPUSH
16391: PPUSH
// begin i := rand ( 1 , 7 ) ;
16392: LD_ADDR_VAR 0 1
16396: PUSH
16397: LD_INT 1
16399: PPUSH
16400: LD_INT 7
16402: PPUSH
16403: CALL_OW 12
16407: ST_TO_ADDR
// case i of 1 :
16408: LD_VAR 0 1
16412: PUSH
16413: LD_INT 1
16415: DOUBLE
16416: EQUAL
16417: IFTRUE 16421
16419: GO 16431
16421: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16422: LD_STRING earthquake(getX(game), 0, 32)
16424: PPUSH
16425: CALL_OW 559
16429: GO 16669
16431: LD_INT 2
16433: DOUBLE
16434: EQUAL
16435: IFTRUE 16439
16437: GO 16453
16439: POP
// begin ToLua ( displayStucuk(); ) ;
16440: LD_STRING displayStucuk();
16442: PPUSH
16443: CALL_OW 559
// ResetFog ;
16447: CALL_OW 335
// end ; 3 :
16451: GO 16669
16453: LD_INT 3
16455: DOUBLE
16456: EQUAL
16457: IFTRUE 16461
16459: GO 16565
16461: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_INT 22
16469: PUSH
16470: LD_OWVAR 2
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 25
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: ST_TO_ADDR
// if not tmp then
16498: LD_VAR 0 2
16502: NOT
16503: IFFALSE 16507
// exit ;
16505: GO 16669
// un := tmp [ rand ( 1 , tmp ) ] ;
16507: LD_ADDR_VAR 0 3
16511: PUSH
16512: LD_VAR 0 2
16516: PUSH
16517: LD_INT 1
16519: PPUSH
16520: LD_VAR 0 2
16524: PPUSH
16525: CALL_OW 12
16529: ARRAY
16530: ST_TO_ADDR
// if Crawls ( un ) then
16531: LD_VAR 0 3
16535: PPUSH
16536: CALL_OW 318
16540: IFFALSE 16551
// ComWalk ( un ) ;
16542: LD_VAR 0 3
16546: PPUSH
16547: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16551: LD_VAR 0 3
16555: PPUSH
16556: LD_INT 8
16558: PPUSH
16559: CALL_OW 336
// end ; 4 :
16563: GO 16669
16565: LD_INT 4
16567: DOUBLE
16568: EQUAL
16569: IFTRUE 16573
16571: GO 16647
16573: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16574: LD_ADDR_VAR 0 2
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_OWVAR 2
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 30
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: ST_TO_ADDR
// if not tmp then
16610: LD_VAR 0 2
16614: NOT
16615: IFFALSE 16619
// exit ;
16617: GO 16669
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16619: LD_VAR 0 2
16623: PUSH
16624: LD_INT 1
16626: ARRAY
16627: PPUSH
16628: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16632: LD_VAR 0 2
16636: PUSH
16637: LD_INT 1
16639: ARRAY
16640: PPUSH
16641: CALL_OW 65
// end ; 5 .. 7 :
16645: GO 16669
16647: LD_INT 5
16649: DOUBLE
16650: GREATEREQUAL
16651: IFFALSE 16659
16653: LD_INT 7
16655: DOUBLE
16656: LESSEQUAL
16657: IFTRUE 16661
16659: GO 16668
16661: POP
// StreamSibBomb ; end ;
16662: CALL 12850 0 0
16666: GO 16669
16668: POP
// end ;
16669: PPOPN 3
16671: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16672: LD_EXP 16
16676: IFFALSE 16684
16678: PUSH
16679: LD_EXP 66
16683: AND
16684: IFFALSE 16840
16686: GO 16688
16688: DISABLE
16689: LD_INT 0
16691: PPUSH
16692: PPUSH
16693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16694: LD_ADDR_VAR 0 2
16698: PUSH
16699: LD_INT 81
16701: PUSH
16702: LD_OWVAR 2
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 2
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PPUSH
16743: CALL_OW 69
16747: ST_TO_ADDR
// if not tmp then
16748: LD_VAR 0 2
16752: NOT
16753: IFFALSE 16757
// exit ;
16755: GO 16840
// p := 0 ;
16757: LD_ADDR_VAR 0 3
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16765: LD_INT 35
16767: PPUSH
16768: CALL_OW 67
// p := p + 1 ;
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: LD_VAR 0 3
16781: PUSH
16782: LD_INT 1
16784: PLUS
16785: ST_TO_ADDR
// for i in tmp do
16786: LD_ADDR_VAR 0 1
16790: PUSH
16791: LD_VAR 0 2
16795: PUSH
16796: FOR_IN
16797: IFFALSE 16828
// if GetLives ( i ) < 1000 then
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 256
16808: PUSH
16809: LD_INT 1000
16811: LESS
16812: IFFALSE 16826
// SetLives ( i , 1000 ) ;
16814: LD_VAR 0 1
16818: PPUSH
16819: LD_INT 1000
16821: PPUSH
16822: CALL_OW 234
16826: GO 16796
16828: POP
16829: POP
// until p > 20 ;
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 20
16837: GREATER
16838: IFFALSE 16765
// end ;
16840: PPOPN 3
16842: END
// every 0 0$1 trigger StreamModeActive and sTime do
16843: LD_EXP 16
16847: IFFALSE 16855
16849: PUSH
16850: LD_EXP 67
16854: AND
16855: IFFALSE 16890
16857: GO 16859
16859: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16860: LD_INT 28
16862: PPUSH
16863: LD_OWVAR 2
16867: PPUSH
16868: LD_INT 2
16870: PPUSH
16871: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16875: LD_INT 30
16877: PPUSH
16878: LD_OWVAR 2
16882: PPUSH
16883: LD_INT 2
16885: PPUSH
16886: CALL_OW 322
// end ;
16890: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16891: LD_EXP 16
16895: IFFALSE 16903
16897: PUSH
16898: LD_EXP 68
16902: AND
16903: IFFALSE 17024
16905: GO 16907
16907: DISABLE
16908: LD_INT 0
16910: PPUSH
16911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16912: LD_ADDR_VAR 0 2
16916: PUSH
16917: LD_INT 22
16919: PUSH
16920: LD_OWVAR 2
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 21
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 3
16941: PUSH
16942: LD_INT 23
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: ST_TO_ADDR
// if not tmp then
16966: LD_VAR 0 2
16970: NOT
16971: IFFALSE 16975
// exit ;
16973: GO 17024
// for i in tmp do
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: LD_VAR 0 2
16984: PUSH
16985: FOR_IN
16986: IFFALSE 17022
// begin if Crawls ( i ) then
16988: LD_VAR 0 1
16992: PPUSH
16993: CALL_OW 318
16997: IFFALSE 17008
// ComWalk ( i ) ;
16999: LD_VAR 0 1
17003: PPUSH
17004: CALL_OW 138
// SetClass ( i , 2 ) ;
17008: LD_VAR 0 1
17012: PPUSH
17013: LD_INT 2
17015: PPUSH
17016: CALL_OW 336
// end ;
17020: GO 16985
17022: POP
17023: POP
// end ;
17024: PPOPN 2
17026: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17027: LD_EXP 16
17031: IFFALSE 17039
17033: PUSH
17034: LD_EXP 69
17038: AND
17039: IFFALSE 17329
17041: GO 17043
17043: DISABLE
17044: LD_INT 0
17046: PPUSH
17047: PPUSH
17048: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17049: LD_OWVAR 2
17053: PPUSH
17054: LD_INT 9
17056: PPUSH
17057: LD_INT 1
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17067: LD_INT 9
17069: PPUSH
17070: LD_OWVAR 2
17074: PPUSH
17075: CALL_OW 343
// uc_side := 9 ;
17079: LD_ADDR_OWVAR 20
17083: PUSH
17084: LD_INT 9
17086: ST_TO_ADDR
// uc_nation := 2 ;
17087: LD_ADDR_OWVAR 21
17091: PUSH
17092: LD_INT 2
17094: ST_TO_ADDR
// hc_name := Dark Warrior ;
17095: LD_ADDR_OWVAR 26
17099: PUSH
17100: LD_STRING Dark Warrior
17102: ST_TO_ADDR
// hc_gallery :=  ;
17103: LD_ADDR_OWVAR 33
17107: PUSH
17108: LD_STRING 
17110: ST_TO_ADDR
// hc_noskilllimit := true ;
17111: LD_ADDR_OWVAR 76
17115: PUSH
17116: LD_INT 1
17118: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17119: LD_ADDR_OWVAR 31
17123: PUSH
17124: LD_INT 30
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 30
17132: PUSH
17133: LD_INT 30
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: ST_TO_ADDR
// un := CreateHuman ;
17142: LD_ADDR_VAR 0 3
17146: PUSH
17147: CALL_OW 44
17151: ST_TO_ADDR
// hc_noskilllimit := false ;
17152: LD_ADDR_OWVAR 76
17156: PUSH
17157: LD_INT 0
17159: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 51
// ToLua ( playRanger() ) ;
17172: LD_STRING playRanger()
17174: PPUSH
17175: CALL_OW 559
// p := 0 ;
17179: LD_ADDR_VAR 0 2
17183: PUSH
17184: LD_INT 0
17186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17187: LD_INT 35
17189: PPUSH
17190: CALL_OW 67
// p := p + 1 ;
17194: LD_ADDR_VAR 0 2
17198: PUSH
17199: LD_VAR 0 2
17203: PUSH
17204: LD_INT 1
17206: PLUS
17207: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17208: LD_VAR 0 3
17212: PPUSH
17213: CALL_OW 256
17217: PUSH
17218: LD_INT 1000
17220: LESS
17221: IFFALSE 17235
// SetLives ( un , 1000 ) ;
17223: LD_VAR 0 3
17227: PPUSH
17228: LD_INT 1000
17230: PPUSH
17231: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_INT 81
17242: PUSH
17243: LD_OWVAR 2
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 91
17254: PUSH
17255: LD_VAR 0 3
17259: PUSH
17260: LD_INT 30
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: PPUSH
17277: LD_VAR 0 3
17281: PPUSH
17282: CALL_OW 74
17286: PPUSH
17287: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17291: LD_VAR 0 2
17295: PUSH
17296: LD_INT 80
17298: GREATER
17299: IFTRUE 17312
17301: PUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: CALL_OW 301
17311: OR
17312: IFFALSE 17187
// if un then
17314: LD_VAR 0 3
17318: IFFALSE 17329
// RemoveUnit ( un ) ;
17320: LD_VAR 0 3
17324: PPUSH
17325: CALL_OW 64
// end ;
17329: PPOPN 3
17331: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17332: LD_EXP 70
17336: IFFALSE 17452
17338: GO 17340
17340: DISABLE
17341: LD_INT 0
17343: PPUSH
17344: PPUSH
17345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17346: LD_ADDR_VAR 0 2
17350: PUSH
17351: LD_INT 81
17353: PUSH
17354: LD_OWVAR 2
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 21
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 69
17381: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17382: LD_STRING playComputer()
17384: PPUSH
17385: CALL_OW 559
// if not tmp then
17389: LD_VAR 0 2
17393: NOT
17394: IFFALSE 17398
// exit ;
17396: GO 17452
// for i in tmp do
17398: LD_ADDR_VAR 0 1
17402: PUSH
17403: LD_VAR 0 2
17407: PUSH
17408: FOR_IN
17409: IFFALSE 17450
// for j := 1 to 4 do
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: DOUBLE
17417: LD_INT 1
17419: DEC
17420: ST_TO_ADDR
17421: LD_INT 4
17423: PUSH
17424: FOR_TO
17425: IFFALSE 17446
// SetSkill ( i , j , 10 ) ;
17427: LD_VAR 0 1
17431: PPUSH
17432: LD_VAR 0 3
17436: PPUSH
17437: LD_INT 10
17439: PPUSH
17440: CALL_OW 237
17444: GO 17424
17446: POP
17447: POP
17448: GO 17408
17450: POP
17451: POP
// end ;
17452: PPOPN 3
17454: END
// every 0 0$1 trigger s30 do var i , tmp ;
17455: LD_EXP 71
17459: IFFALSE 17528
17461: GO 17463
17463: DISABLE
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17468: LD_ADDR_VAR 0 2
17472: PUSH
17473: LD_INT 22
17475: PUSH
17476: LD_OWVAR 2
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 2
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17528
// for i in tmp do
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_VAR 0 2
17508: PUSH
17509: FOR_IN
17510: IFFALSE 17526
// SetLives ( i , 300 ) ;
17512: LD_VAR 0 1
17516: PPUSH
17517: LD_INT 300
17519: PPUSH
17520: CALL_OW 234
17524: GO 17509
17526: POP
17527: POP
// end ;
17528: PPOPN 2
17530: END
// every 0 0$1 trigger s60 do var i , tmp ;
17531: LD_EXP 72
17535: IFFALSE 17604
17537: GO 17539
17539: DISABLE
17540: LD_INT 0
17542: PPUSH
17543: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: LD_INT 22
17551: PUSH
17552: LD_OWVAR 2
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PPUSH
17561: CALL_OW 69
17565: ST_TO_ADDR
// if not tmp then
17566: LD_VAR 0 2
17570: NOT
17571: IFFALSE 17575
// exit ;
17573: GO 17604
// for i in tmp do
17575: LD_ADDR_VAR 0 1
17579: PUSH
17580: LD_VAR 0 2
17584: PUSH
17585: FOR_IN
17586: IFFALSE 17602
// SetLives ( i , 600 ) ;
17588: LD_VAR 0 1
17592: PPUSH
17593: LD_INT 600
17595: PPUSH
17596: CALL_OW 234
17600: GO 17585
17602: POP
17603: POP
// end ;
17604: PPOPN 2
17606: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17607: LD_INT 0
17609: PPUSH
// case cmd of 301 :
17610: LD_VAR 0 1
17614: PUSH
17615: LD_INT 301
17617: DOUBLE
17618: EQUAL
17619: IFTRUE 17623
17621: GO 17655
17623: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17624: LD_VAR 0 6
17628: PPUSH
17629: LD_VAR 0 7
17633: PPUSH
17634: LD_VAR 0 8
17638: PPUSH
17639: LD_VAR 0 4
17643: PPUSH
17644: LD_VAR 0 5
17648: PPUSH
17649: CALL 18868 0 5
17653: GO 17776
17655: LD_INT 302
17657: DOUBLE
17658: EQUAL
17659: IFTRUE 17663
17661: GO 17700
17663: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17664: LD_VAR 0 6
17668: PPUSH
17669: LD_VAR 0 7
17673: PPUSH
17674: LD_VAR 0 8
17678: PPUSH
17679: LD_VAR 0 9
17683: PPUSH
17684: LD_VAR 0 4
17688: PPUSH
17689: LD_VAR 0 5
17693: PPUSH
17694: CALL 18959 0 6
17698: GO 17776
17700: LD_INT 303
17702: DOUBLE
17703: EQUAL
17704: IFTRUE 17708
17706: GO 17745
17708: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17709: LD_VAR 0 6
17713: PPUSH
17714: LD_VAR 0 7
17718: PPUSH
17719: LD_VAR 0 8
17723: PPUSH
17724: LD_VAR 0 9
17728: PPUSH
17729: LD_VAR 0 4
17733: PPUSH
17734: LD_VAR 0 5
17738: PPUSH
17739: CALL 17781 0 6
17743: GO 17776
17745: LD_INT 304
17747: DOUBLE
17748: EQUAL
17749: IFTRUE 17753
17751: GO 17775
17753: POP
// hHackTeleport ( unit , x , y ) ; end ;
17754: LD_VAR 0 2
17758: PPUSH
17759: LD_VAR 0 4
17763: PPUSH
17764: LD_VAR 0 5
17768: PPUSH
17769: CALL 19552 0 3
17773: GO 17776
17775: POP
// end ;
17776: LD_VAR 0 12
17780: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17781: LD_INT 0
17783: PPUSH
17784: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17785: LD_VAR 0 1
17789: PUSH
17790: LD_INT 1
17792: LESS
17793: IFTRUE 17805
17795: PUSH
17796: LD_VAR 0 1
17800: PUSH
17801: LD_INT 3
17803: GREATER
17804: OR
17805: IFTRUE 17823
17807: PUSH
17808: LD_VAR 0 5
17812: PPUSH
17813: LD_VAR 0 6
17817: PPUSH
17818: CALL_OW 428
17822: OR
17823: IFFALSE 17827
// exit ;
17825: GO 18555
// uc_side := your_side ;
17827: LD_ADDR_OWVAR 20
17831: PUSH
17832: LD_OWVAR 2
17836: ST_TO_ADDR
// uc_nation := nation ;
17837: LD_ADDR_OWVAR 21
17841: PUSH
17842: LD_VAR 0 1
17846: ST_TO_ADDR
// bc_level = 1 ;
17847: LD_ADDR_OWVAR 43
17851: PUSH
17852: LD_INT 1
17854: ST_TO_ADDR
// case btype of 1 :
17855: LD_VAR 0 2
17859: PUSH
17860: LD_INT 1
17862: DOUBLE
17863: EQUAL
17864: IFTRUE 17868
17866: GO 17879
17868: POP
// bc_type := b_depot ; 2 :
17869: LD_ADDR_OWVAR 42
17873: PUSH
17874: LD_INT 0
17876: ST_TO_ADDR
17877: GO 18499
17879: LD_INT 2
17881: DOUBLE
17882: EQUAL
17883: IFTRUE 17887
17885: GO 17898
17887: POP
// bc_type := b_warehouse ; 3 :
17888: LD_ADDR_OWVAR 42
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
17896: GO 18499
17898: LD_INT 3
17900: DOUBLE
17901: EQUAL
17902: IFTRUE 17906
17904: GO 17917
17906: POP
// bc_type := b_lab ; 4 .. 9 :
17907: LD_ADDR_OWVAR 42
17911: PUSH
17912: LD_INT 6
17914: ST_TO_ADDR
17915: GO 18499
17917: LD_INT 4
17919: DOUBLE
17920: GREATEREQUAL
17921: IFFALSE 17929
17923: LD_INT 9
17925: DOUBLE
17926: LESSEQUAL
17927: IFTRUE 17931
17929: GO 17991
17931: POP
// begin bc_type := b_lab_half ;
17932: LD_ADDR_OWVAR 42
17936: PUSH
17937: LD_INT 7
17939: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17940: LD_ADDR_OWVAR 44
17944: PUSH
17945: LD_INT 10
17947: PUSH
17948: LD_INT 11
17950: PUSH
17951: LD_INT 12
17953: PUSH
17954: LD_INT 15
17956: PUSH
17957: LD_INT 14
17959: PUSH
17960: LD_INT 13
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: PUSH
17971: LD_VAR 0 2
17975: PUSH
17976: LD_INT 3
17978: MINUS
17979: ARRAY
17980: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17981: LD_ADDR_OWVAR 45
17985: PUSH
17986: LD_INT 9
17988: ST_TO_ADDR
// end ; 10 .. 13 :
17989: GO 18499
17991: LD_INT 10
17993: DOUBLE
17994: GREATEREQUAL
17995: IFFALSE 18003
17997: LD_INT 13
17999: DOUBLE
18000: LESSEQUAL
18001: IFTRUE 18005
18003: GO 18082
18005: POP
// begin bc_type := b_lab_full ;
18006: LD_ADDR_OWVAR 42
18010: PUSH
18011: LD_INT 8
18013: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18014: LD_ADDR_OWVAR 44
18018: PUSH
18019: LD_INT 10
18021: PUSH
18022: LD_INT 12
18024: PUSH
18025: LD_INT 14
18027: PUSH
18028: LD_INT 13
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: LD_VAR 0 2
18041: PUSH
18042: LD_INT 9
18044: MINUS
18045: ARRAY
18046: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18047: LD_ADDR_OWVAR 45
18051: PUSH
18052: LD_INT 11
18054: PUSH
18055: LD_INT 15
18057: PUSH
18058: LD_INT 12
18060: PUSH
18061: LD_INT 15
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: PUSH
18070: LD_VAR 0 2
18074: PUSH
18075: LD_INT 9
18077: MINUS
18078: ARRAY
18079: ST_TO_ADDR
// end ; 14 :
18080: GO 18499
18082: LD_INT 14
18084: DOUBLE
18085: EQUAL
18086: IFTRUE 18090
18088: GO 18101
18090: POP
// bc_type := b_workshop ; 15 :
18091: LD_ADDR_OWVAR 42
18095: PUSH
18096: LD_INT 2
18098: ST_TO_ADDR
18099: GO 18499
18101: LD_INT 15
18103: DOUBLE
18104: EQUAL
18105: IFTRUE 18109
18107: GO 18120
18109: POP
// bc_type := b_factory ; 16 :
18110: LD_ADDR_OWVAR 42
18114: PUSH
18115: LD_INT 3
18117: ST_TO_ADDR
18118: GO 18499
18120: LD_INT 16
18122: DOUBLE
18123: EQUAL
18124: IFTRUE 18128
18126: GO 18139
18128: POP
// bc_type := b_ext_gun ; 17 :
18129: LD_ADDR_OWVAR 42
18133: PUSH
18134: LD_INT 17
18136: ST_TO_ADDR
18137: GO 18499
18139: LD_INT 17
18141: DOUBLE
18142: EQUAL
18143: IFTRUE 18147
18145: GO 18175
18147: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18148: LD_ADDR_OWVAR 42
18152: PUSH
18153: LD_INT 19
18155: PUSH
18156: LD_INT 23
18158: PUSH
18159: LD_INT 19
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: LD_VAR 0 1
18171: ARRAY
18172: ST_TO_ADDR
18173: GO 18499
18175: LD_INT 18
18177: DOUBLE
18178: EQUAL
18179: IFTRUE 18183
18181: GO 18194
18183: POP
// bc_type := b_ext_radar ; 19 :
18184: LD_ADDR_OWVAR 42
18188: PUSH
18189: LD_INT 20
18191: ST_TO_ADDR
18192: GO 18499
18194: LD_INT 19
18196: DOUBLE
18197: EQUAL
18198: IFTRUE 18202
18200: GO 18213
18202: POP
// bc_type := b_ext_radio ; 20 :
18203: LD_ADDR_OWVAR 42
18207: PUSH
18208: LD_INT 22
18210: ST_TO_ADDR
18211: GO 18499
18213: LD_INT 20
18215: DOUBLE
18216: EQUAL
18217: IFTRUE 18221
18219: GO 18232
18221: POP
// bc_type := b_ext_siberium ; 21 :
18222: LD_ADDR_OWVAR 42
18226: PUSH
18227: LD_INT 21
18229: ST_TO_ADDR
18230: GO 18499
18232: LD_INT 21
18234: DOUBLE
18235: EQUAL
18236: IFTRUE 18240
18238: GO 18251
18240: POP
// bc_type := b_ext_computer ; 22 :
18241: LD_ADDR_OWVAR 42
18245: PUSH
18246: LD_INT 24
18248: ST_TO_ADDR
18249: GO 18499
18251: LD_INT 22
18253: DOUBLE
18254: EQUAL
18255: IFTRUE 18259
18257: GO 18270
18259: POP
// bc_type := b_ext_track ; 23 :
18260: LD_ADDR_OWVAR 42
18264: PUSH
18265: LD_INT 16
18267: ST_TO_ADDR
18268: GO 18499
18270: LD_INT 23
18272: DOUBLE
18273: EQUAL
18274: IFTRUE 18278
18276: GO 18289
18278: POP
// bc_type := b_ext_laser ; 24 :
18279: LD_ADDR_OWVAR 42
18283: PUSH
18284: LD_INT 25
18286: ST_TO_ADDR
18287: GO 18499
18289: LD_INT 24
18291: DOUBLE
18292: EQUAL
18293: IFTRUE 18297
18295: GO 18308
18297: POP
// bc_type := b_control_tower ; 25 :
18298: LD_ADDR_OWVAR 42
18302: PUSH
18303: LD_INT 36
18305: ST_TO_ADDR
18306: GO 18499
18308: LD_INT 25
18310: DOUBLE
18311: EQUAL
18312: IFTRUE 18316
18314: GO 18327
18316: POP
// bc_type := b_breastwork ; 26 :
18317: LD_ADDR_OWVAR 42
18321: PUSH
18322: LD_INT 31
18324: ST_TO_ADDR
18325: GO 18499
18327: LD_INT 26
18329: DOUBLE
18330: EQUAL
18331: IFTRUE 18335
18333: GO 18346
18335: POP
// bc_type := b_bunker ; 27 :
18336: LD_ADDR_OWVAR 42
18340: PUSH
18341: LD_INT 32
18343: ST_TO_ADDR
18344: GO 18499
18346: LD_INT 27
18348: DOUBLE
18349: EQUAL
18350: IFTRUE 18354
18352: GO 18365
18354: POP
// bc_type := b_turret ; 28 :
18355: LD_ADDR_OWVAR 42
18359: PUSH
18360: LD_INT 33
18362: ST_TO_ADDR
18363: GO 18499
18365: LD_INT 28
18367: DOUBLE
18368: EQUAL
18369: IFTRUE 18373
18371: GO 18384
18373: POP
// bc_type := b_armoury ; 29 :
18374: LD_ADDR_OWVAR 42
18378: PUSH
18379: LD_INT 4
18381: ST_TO_ADDR
18382: GO 18499
18384: LD_INT 29
18386: DOUBLE
18387: EQUAL
18388: IFTRUE 18392
18390: GO 18403
18392: POP
// bc_type := b_barracks ; 30 :
18393: LD_ADDR_OWVAR 42
18397: PUSH
18398: LD_INT 5
18400: ST_TO_ADDR
18401: GO 18499
18403: LD_INT 30
18405: DOUBLE
18406: EQUAL
18407: IFTRUE 18411
18409: GO 18422
18411: POP
// bc_type := b_solar_power ; 31 :
18412: LD_ADDR_OWVAR 42
18416: PUSH
18417: LD_INT 27
18419: ST_TO_ADDR
18420: GO 18499
18422: LD_INT 31
18424: DOUBLE
18425: EQUAL
18426: IFTRUE 18430
18428: GO 18441
18430: POP
// bc_type := b_oil_power ; 32 :
18431: LD_ADDR_OWVAR 42
18435: PUSH
18436: LD_INT 26
18438: ST_TO_ADDR
18439: GO 18499
18441: LD_INT 32
18443: DOUBLE
18444: EQUAL
18445: IFTRUE 18449
18447: GO 18460
18449: POP
// bc_type := b_siberite_power ; 33 :
18450: LD_ADDR_OWVAR 42
18454: PUSH
18455: LD_INT 28
18457: ST_TO_ADDR
18458: GO 18499
18460: LD_INT 33
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18479
18468: POP
// bc_type := b_oil_mine ; 34 :
18469: LD_ADDR_OWVAR 42
18473: PUSH
18474: LD_INT 29
18476: ST_TO_ADDR
18477: GO 18499
18479: LD_INT 34
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18498
18487: POP
// bc_type := b_siberite_mine ; end ;
18488: LD_ADDR_OWVAR 42
18492: PUSH
18493: LD_INT 30
18495: ST_TO_ADDR
18496: GO 18499
18498: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18499: LD_ADDR_VAR 0 8
18503: PUSH
18504: LD_VAR 0 5
18508: PPUSH
18509: LD_VAR 0 6
18513: PPUSH
18514: LD_VAR 0 3
18518: PPUSH
18519: CALL_OW 47
18523: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18524: LD_OWVAR 42
18528: PUSH
18529: LD_INT 32
18531: PUSH
18532: LD_INT 33
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: IN
18539: IFFALSE 18555
// PlaceWeaponTurret ( b , weapon ) ;
18541: LD_VAR 0 8
18545: PPUSH
18546: LD_VAR 0 4
18550: PPUSH
18551: CALL_OW 431
// end ;
18555: LD_VAR 0 7
18559: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18566: LD_ADDR_VAR 0 4
18570: PUSH
18571: LD_INT 22
18573: PUSH
18574: LD_OWVAR 2
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: LD_INT 30
18588: PUSH
18589: LD_INT 0
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 30
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PPUSH
18615: CALL_OW 69
18619: ST_TO_ADDR
// if not tmp then
18620: LD_VAR 0 4
18624: NOT
18625: IFFALSE 18629
// exit ;
18627: GO 18688
// for i in tmp do
18629: LD_ADDR_VAR 0 2
18633: PUSH
18634: LD_VAR 0 4
18638: PUSH
18639: FOR_IN
18640: IFFALSE 18686
// for j = 1 to 3 do
18642: LD_ADDR_VAR 0 3
18646: PUSH
18647: DOUBLE
18648: LD_INT 1
18650: DEC
18651: ST_TO_ADDR
18652: LD_INT 3
18654: PUSH
18655: FOR_TO
18656: IFFALSE 18682
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18658: LD_VAR 0 2
18662: PPUSH
18663: CALL_OW 274
18667: PPUSH
18668: LD_VAR 0 3
18672: PPUSH
18673: LD_INT 99999
18675: PPUSH
18676: CALL_OW 277
18680: GO 18655
18682: POP
18683: POP
18684: GO 18639
18686: POP
18687: POP
// end ;
18688: LD_VAR 0 1
18692: RET
// export function hHackSetLevel10 ; var i , j ; begin
18693: LD_INT 0
18695: PPUSH
18696: PPUSH
18697: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18698: LD_ADDR_VAR 0 2
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PPUSH
18713: CALL_OW 69
18717: PUSH
18718: FOR_IN
18719: IFFALSE 18771
// if IsSelected ( i ) then
18721: LD_VAR 0 2
18725: PPUSH
18726: CALL_OW 306
18730: IFFALSE 18769
// begin for j := 1 to 4 do
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: DOUBLE
18738: LD_INT 1
18740: DEC
18741: ST_TO_ADDR
18742: LD_INT 4
18744: PUSH
18745: FOR_TO
18746: IFFALSE 18767
// SetSkill ( i , j , 10 ) ;
18748: LD_VAR 0 2
18752: PPUSH
18753: LD_VAR 0 3
18757: PPUSH
18758: LD_INT 10
18760: PPUSH
18761: CALL_OW 237
18765: GO 18745
18767: POP
18768: POP
// end ;
18769: GO 18718
18771: POP
18772: POP
// end ;
18773: LD_VAR 0 1
18777: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18778: LD_INT 0
18780: PPUSH
18781: PPUSH
18782: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18783: LD_ADDR_VAR 0 2
18787: PUSH
18788: LD_INT 22
18790: PUSH
18791: LD_OWVAR 2
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 21
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PPUSH
18814: CALL_OW 69
18818: PUSH
18819: FOR_IN
18820: IFFALSE 18861
// begin for j := 1 to 4 do
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: DOUBLE
18828: LD_INT 1
18830: DEC
18831: ST_TO_ADDR
18832: LD_INT 4
18834: PUSH
18835: FOR_TO
18836: IFFALSE 18857
// SetSkill ( i , j , 10 ) ;
18838: LD_VAR 0 2
18842: PPUSH
18843: LD_VAR 0 3
18847: PPUSH
18848: LD_INT 10
18850: PPUSH
18851: CALL_OW 237
18855: GO 18835
18857: POP
18858: POP
// end ;
18859: GO 18819
18861: POP
18862: POP
// end ;
18863: LD_VAR 0 1
18867: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18868: LD_INT 0
18870: PPUSH
// uc_side := your_side ;
18871: LD_ADDR_OWVAR 20
18875: PUSH
18876: LD_OWVAR 2
18880: ST_TO_ADDR
// uc_nation := nation ;
18881: LD_ADDR_OWVAR 21
18885: PUSH
18886: LD_VAR 0 1
18890: ST_TO_ADDR
// InitHc ;
18891: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18895: LD_INT 0
18897: PPUSH
18898: LD_VAR 0 2
18902: PPUSH
18903: LD_VAR 0 3
18907: PPUSH
18908: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18912: LD_VAR 0 4
18916: PPUSH
18917: LD_VAR 0 5
18921: PPUSH
18922: CALL_OW 428
18926: PUSH
18927: LD_INT 0
18929: EQUAL
18930: IFFALSE 18954
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18932: CALL_OW 44
18936: PPUSH
18937: LD_VAR 0 4
18941: PPUSH
18942: LD_VAR 0 5
18946: PPUSH
18947: LD_INT 1
18949: PPUSH
18950: CALL_OW 48
// end ;
18954: LD_VAR 0 6
18958: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
// uc_side := your_side ;
18963: LD_ADDR_OWVAR 20
18967: PUSH
18968: LD_OWVAR 2
18972: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18973: LD_VAR 0 1
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: LD_INT 3
18986: PUSH
18987: LD_INT 4
18989: PUSH
18990: LD_INT 5
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: IN
19000: IFFALSE 19012
// uc_nation := nation_american else
19002: LD_ADDR_OWVAR 21
19006: PUSH
19007: LD_INT 1
19009: ST_TO_ADDR
19010: GO 19055
// if chassis in [ 11 , 12 , 13 , 14 ] then
19012: LD_VAR 0 1
19016: PUSH
19017: LD_INT 11
19019: PUSH
19020: LD_INT 12
19022: PUSH
19023: LD_INT 13
19025: PUSH
19026: LD_INT 14
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: IN
19035: IFFALSE 19047
// uc_nation := nation_arabian else
19037: LD_ADDR_OWVAR 21
19041: PUSH
19042: LD_INT 2
19044: ST_TO_ADDR
19045: GO 19055
// uc_nation := nation_russian ;
19047: LD_ADDR_OWVAR 21
19051: PUSH
19052: LD_INT 3
19054: ST_TO_ADDR
// vc_chassis := chassis ;
19055: LD_ADDR_OWVAR 37
19059: PUSH
19060: LD_VAR 0 1
19064: ST_TO_ADDR
// vc_engine := engine ;
19065: LD_ADDR_OWVAR 39
19069: PUSH
19070: LD_VAR 0 2
19074: ST_TO_ADDR
// vc_control := control ;
19075: LD_ADDR_OWVAR 38
19079: PUSH
19080: LD_VAR 0 3
19084: ST_TO_ADDR
// vc_weapon := weapon ;
19085: LD_ADDR_OWVAR 40
19089: PUSH
19090: LD_VAR 0 4
19094: ST_TO_ADDR
// un := CreateVehicle ;
19095: LD_ADDR_VAR 0 8
19099: PUSH
19100: CALL_OW 45
19104: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19105: LD_VAR 0 8
19109: PPUSH
19110: LD_INT 0
19112: PPUSH
19113: LD_INT 5
19115: PPUSH
19116: CALL_OW 12
19120: PPUSH
19121: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19125: LD_VAR 0 8
19129: PPUSH
19130: LD_VAR 0 5
19134: PPUSH
19135: LD_VAR 0 6
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: CALL_OW 48
// end ;
19147: LD_VAR 0 7
19151: RET
// export hInvincible ; every 1 do
19152: GO 19154
19154: DISABLE
// hInvincible := [ ] ;
19155: LD_ADDR_EXP 73
19159: PUSH
19160: EMPTY
19161: ST_TO_ADDR
19162: END
// every 10 do var i ;
19163: GO 19165
19165: DISABLE
19166: LD_INT 0
19168: PPUSH
// begin enable ;
19169: ENABLE
// if not hInvincible then
19170: LD_EXP 73
19174: NOT
19175: IFFALSE 19179
// exit ;
19177: GO 19223
// for i in hInvincible do
19179: LD_ADDR_VAR 0 1
19183: PUSH
19184: LD_EXP 73
19188: PUSH
19189: FOR_IN
19190: IFFALSE 19221
// if GetLives ( i ) < 1000 then
19192: LD_VAR 0 1
19196: PPUSH
19197: CALL_OW 256
19201: PUSH
19202: LD_INT 1000
19204: LESS
19205: IFFALSE 19219
// SetLives ( i , 1000 ) ;
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_INT 1000
19214: PPUSH
19215: CALL_OW 234
19219: GO 19189
19221: POP
19222: POP
// end ;
19223: PPOPN 1
19225: END
// export function hHackInvincible ; var i ; begin
19226: LD_INT 0
19228: PPUSH
19229: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19230: LD_ADDR_VAR 0 2
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: LD_INT 21
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 21
19250: PUSH
19251: LD_INT 2
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: PPUSH
19263: CALL_OW 69
19267: PUSH
19268: FOR_IN
19269: IFFALSE 19330
// if IsSelected ( i ) then
19271: LD_VAR 0 2
19275: PPUSH
19276: CALL_OW 306
19280: IFFALSE 19328
// begin if i in hInvincible then
19282: LD_VAR 0 2
19286: PUSH
19287: LD_EXP 73
19291: IN
19292: IFFALSE 19312
// hInvincible := hInvincible diff i else
19294: LD_ADDR_EXP 73
19298: PUSH
19299: LD_EXP 73
19303: PUSH
19304: LD_VAR 0 2
19308: DIFF
19309: ST_TO_ADDR
19310: GO 19328
// hInvincible := hInvincible union i ;
19312: LD_ADDR_EXP 73
19316: PUSH
19317: LD_EXP 73
19321: PUSH
19322: LD_VAR 0 2
19326: UNION
19327: ST_TO_ADDR
// end ;
19328: GO 19268
19330: POP
19331: POP
// end ;
19332: LD_VAR 0 1
19336: RET
// export function hHackInvisible ; var i , j ; begin
19337: LD_INT 0
19339: PPUSH
19340: PPUSH
19341: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19342: LD_ADDR_VAR 0 2
19346: PUSH
19347: LD_INT 21
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: CALL_OW 69
19361: PUSH
19362: FOR_IN
19363: IFFALSE 19387
// if IsSelected ( i ) then
19365: LD_VAR 0 2
19369: PPUSH
19370: CALL_OW 306
19374: IFFALSE 19385
// ComForceInvisible ( i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: CALL_OW 496
19385: GO 19362
19387: POP
19388: POP
// end ;
19389: LD_VAR 0 1
19393: RET
// export function hHackChangeYourSide ; begin
19394: LD_INT 0
19396: PPUSH
// if your_side = 8 then
19397: LD_OWVAR 2
19401: PUSH
19402: LD_INT 8
19404: EQUAL
19405: IFFALSE 19417
// your_side := 0 else
19407: LD_ADDR_OWVAR 2
19411: PUSH
19412: LD_INT 0
19414: ST_TO_ADDR
19415: GO 19431
// your_side := your_side + 1 ;
19417: LD_ADDR_OWVAR 2
19421: PUSH
19422: LD_OWVAR 2
19426: PUSH
19427: LD_INT 1
19429: PLUS
19430: ST_TO_ADDR
// end ;
19431: LD_VAR 0 1
19435: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19436: LD_INT 0
19438: PPUSH
19439: PPUSH
19440: PPUSH
// for i in all_units do
19441: LD_ADDR_VAR 0 2
19445: PUSH
19446: LD_OWVAR 3
19450: PUSH
19451: FOR_IN
19452: IFFALSE 19530
// if IsSelected ( i ) then
19454: LD_VAR 0 2
19458: PPUSH
19459: CALL_OW 306
19463: IFFALSE 19528
// begin j := GetSide ( i ) ;
19465: LD_ADDR_VAR 0 3
19469: PUSH
19470: LD_VAR 0 2
19474: PPUSH
19475: CALL_OW 255
19479: ST_TO_ADDR
// if j = 8 then
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 8
19487: EQUAL
19488: IFFALSE 19500
// j := 0 else
19490: LD_ADDR_VAR 0 3
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
19498: GO 19514
// j := j + 1 ;
19500: LD_ADDR_VAR 0 3
19504: PUSH
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 1
19512: PLUS
19513: ST_TO_ADDR
// SetSide ( i , j ) ;
19514: LD_VAR 0 2
19518: PPUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: CALL_OW 235
// end ;
19528: GO 19451
19530: POP
19531: POP
// end ;
19532: LD_VAR 0 1
19536: RET
// export function hHackFog ; begin
19537: LD_INT 0
19539: PPUSH
// FogOff ( true ) ;
19540: LD_INT 1
19542: PPUSH
19543: CALL_OW 344
// end ;
19547: LD_VAR 0 1
19551: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19552: LD_INT 0
19554: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19555: LD_VAR 0 1
19559: PPUSH
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: LD_INT 1
19572: PPUSH
19573: LD_INT 1
19575: PPUSH
19576: CALL_OW 483
// CenterOnXY ( x , y ) ;
19580: LD_VAR 0 2
19584: PPUSH
19585: LD_VAR 0 3
19589: PPUSH
19590: CALL_OW 84
// end ;
19594: LD_VAR 0 4
19598: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19599: LD_INT 0
19601: PPUSH
19602: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19603: LD_VAR 0 1
19607: NOT
19608: IFTRUE 19627
19610: PUSH
19611: LD_VAR 0 2
19615: PPUSH
19616: LD_VAR 0 3
19620: PPUSH
19621: CALL_OW 488
19625: NOT
19626: OR
19627: IFTRUE 19662
19629: PUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 266
19639: PUSH
19640: LD_INT 3
19642: NONEQUAL
19643: IFFALSE 19661
19645: PUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 247
19655: PUSH
19656: LD_INT 1
19658: EQUAL
19659: NOT
19660: AND
19661: OR
19662: IFFALSE 19666
// exit ;
19664: GO 19948
// if GetType ( factory ) = unit_human then
19666: LD_VAR 0 1
19670: PPUSH
19671: CALL_OW 247
19675: PUSH
19676: LD_INT 1
19678: EQUAL
19679: IFFALSE 19696
// factory := IsInUnit ( factory ) ;
19681: LD_ADDR_VAR 0 1
19685: PUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 310
19695: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19696: LD_VAR 0 1
19700: PPUSH
19701: CALL_OW 266
19705: PUSH
19706: LD_INT 3
19708: NONEQUAL
19709: IFFALSE 19713
// exit ;
19711: GO 19948
// for i := 1 to Count ( factoryWaypoints ) do
19713: LD_ADDR_VAR 0 5
19717: PUSH
19718: DOUBLE
19719: LD_INT 1
19721: DEC
19722: ST_TO_ADDR
19723: LD_EXP 74
19727: PPUSH
19728: CALL 29644 0 1
19732: PUSH
19733: FOR_TO
19734: IFFALSE 19896
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19736: LD_VAR 0 2
19740: PPUSH
19741: LD_VAR 0 3
19745: PPUSH
19746: CALL_OW 428
19750: PUSH
19751: LD_EXP 74
19755: PUSH
19756: LD_VAR 0 5
19760: ARRAY
19761: PUSH
19762: LD_INT 2
19764: ARRAY
19765: EQUAL
19766: IFFALSE 19798
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19768: LD_ADDR_EXP 74
19772: PUSH
19773: LD_EXP 74
19777: PPUSH
19778: LD_VAR 0 5
19782: PPUSH
19783: CALL_OW 3
19787: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19788: CALL 19953 0 0
// exit ;
19792: POP
19793: POP
19794: GO 19948
// end else
19796: GO 19894
// if factory = factoryWaypoints [ i ] [ 2 ] then
19798: LD_VAR 0 1
19802: PUSH
19803: LD_EXP 74
19807: PUSH
19808: LD_VAR 0 5
19812: ARRAY
19813: PUSH
19814: LD_INT 2
19816: ARRAY
19817: EQUAL
19818: IFFALSE 19894
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19820: LD_ADDR_EXP 74
19824: PUSH
19825: LD_EXP 74
19829: PPUSH
19830: LD_VAR 0 5
19834: PPUSH
19835: CALL_OW 3
19839: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19840: LD_ADDR_EXP 74
19844: PUSH
19845: LD_EXP 74
19849: PPUSH
19850: LD_VAR 0 1
19854: PPUSH
19855: CALL_OW 255
19859: PUSH
19860: LD_VAR 0 1
19864: PUSH
19865: LD_VAR 0 2
19869: PUSH
19870: LD_VAR 0 3
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: PPUSH
19881: CALL 65576 0 2
19885: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19886: CALL 19953 0 0
// exit ;
19890: POP
19891: POP
19892: GO 19948
// end ; end ;
19894: GO 19733
19896: POP
19897: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19898: LD_ADDR_EXP 74
19902: PUSH
19903: LD_EXP 74
19907: PPUSH
19908: LD_VAR 0 1
19912: PPUSH
19913: CALL_OW 255
19917: PUSH
19918: LD_VAR 0 1
19922: PUSH
19923: LD_VAR 0 2
19927: PUSH
19928: LD_VAR 0 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: PPUSH
19939: CALL 65576 0 2
19943: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19944: CALL 19953 0 0
// end ;
19948: LD_VAR 0 4
19952: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19953: LD_INT 0
19955: PPUSH
19956: PPUSH
19957: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19958: LD_STRING resetFactoryWaypoint();
19960: PPUSH
19961: CALL_OW 559
// if factoryWaypoints then
19965: LD_EXP 74
19969: IFFALSE 20090
// begin list := factoryWaypoints ;
19971: LD_ADDR_VAR 0 3
19975: PUSH
19976: LD_EXP 74
19980: ST_TO_ADDR
// for i := 1 to list do
19981: LD_ADDR_VAR 0 2
19985: PUSH
19986: DOUBLE
19987: LD_INT 1
19989: DEC
19990: ST_TO_ADDR
19991: LD_VAR 0 3
19995: PUSH
19996: FOR_TO
19997: IFFALSE 20088
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19999: LD_STRING setFactoryWaypointXY(
20001: PUSH
20002: LD_VAR 0 3
20006: PUSH
20007: LD_VAR 0 2
20011: ARRAY
20012: PUSH
20013: LD_INT 1
20015: ARRAY
20016: STR
20017: PUSH
20018: LD_STRING ,
20020: STR
20021: PUSH
20022: LD_VAR 0 3
20026: PUSH
20027: LD_VAR 0 2
20031: ARRAY
20032: PUSH
20033: LD_INT 2
20035: ARRAY
20036: STR
20037: PUSH
20038: LD_STRING ,
20040: STR
20041: PUSH
20042: LD_VAR 0 3
20046: PUSH
20047: LD_VAR 0 2
20051: ARRAY
20052: PUSH
20053: LD_INT 3
20055: ARRAY
20056: STR
20057: PUSH
20058: LD_STRING ,
20060: STR
20061: PUSH
20062: LD_VAR 0 3
20066: PUSH
20067: LD_VAR 0 2
20071: ARRAY
20072: PUSH
20073: LD_INT 4
20075: ARRAY
20076: STR
20077: PUSH
20078: LD_STRING )
20080: STR
20081: PPUSH
20082: CALL_OW 559
20086: GO 19996
20088: POP
20089: POP
// end ; end ;
20090: LD_VAR 0 1
20094: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20095: LD_INT 0
20097: PPUSH
// if HexInfo ( x , y ) = warehouse then
20098: LD_VAR 0 2
20102: PPUSH
20103: LD_VAR 0 3
20107: PPUSH
20108: CALL_OW 428
20112: PUSH
20113: LD_VAR 0 1
20117: EQUAL
20118: IFFALSE 20145
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20120: LD_ADDR_EXP 76
20124: PUSH
20125: LD_EXP 76
20129: PPUSH
20130: LD_VAR 0 1
20134: PPUSH
20135: LD_INT 0
20137: PPUSH
20138: CALL_OW 1
20142: ST_TO_ADDR
20143: GO 20196
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20145: LD_ADDR_EXP 76
20149: PUSH
20150: LD_EXP 76
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 255
20169: PUSH
20170: LD_VAR 0 1
20174: PUSH
20175: LD_VAR 0 2
20179: PUSH
20180: LD_VAR 0 3
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 1
20195: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20196: CALL 20205 0 0
// end ;
20200: LD_VAR 0 4
20204: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20210: LD_STRING resetWarehouseGatheringPoints();
20212: PPUSH
20213: CALL_OW 559
// if warehouseGatheringPoints then
20217: LD_EXP 76
20221: IFFALSE 20347
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20223: LD_ADDR_VAR 0 3
20227: PUSH
20228: LD_EXP 76
20232: PPUSH
20233: CALL 69510 0 1
20237: ST_TO_ADDR
// for i := 1 to list do
20238: LD_ADDR_VAR 0 2
20242: PUSH
20243: DOUBLE
20244: LD_INT 1
20246: DEC
20247: ST_TO_ADDR
20248: LD_VAR 0 3
20252: PUSH
20253: FOR_TO
20254: IFFALSE 20345
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20256: LD_STRING setWarehouseGatheringPointXY(
20258: PUSH
20259: LD_VAR 0 3
20263: PUSH
20264: LD_VAR 0 2
20268: ARRAY
20269: PUSH
20270: LD_INT 1
20272: ARRAY
20273: STR
20274: PUSH
20275: LD_STRING ,
20277: STR
20278: PUSH
20279: LD_VAR 0 3
20283: PUSH
20284: LD_VAR 0 2
20288: ARRAY
20289: PUSH
20290: LD_INT 2
20292: ARRAY
20293: STR
20294: PUSH
20295: LD_STRING ,
20297: STR
20298: PUSH
20299: LD_VAR 0 3
20303: PUSH
20304: LD_VAR 0 2
20308: ARRAY
20309: PUSH
20310: LD_INT 3
20312: ARRAY
20313: STR
20314: PUSH
20315: LD_STRING ,
20317: STR
20318: PUSH
20319: LD_VAR 0 3
20323: PUSH
20324: LD_VAR 0 2
20328: ARRAY
20329: PUSH
20330: LD_INT 4
20332: ARRAY
20333: STR
20334: PUSH
20335: LD_STRING )
20337: STR
20338: PPUSH
20339: CALL_OW 559
20343: GO 20253
20345: POP
20346: POP
// end ; end ;
20347: LD_VAR 0 1
20351: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20352: LD_EXP 76
20356: IFFALSE 21051
20358: GO 20360
20360: DISABLE
20361: LD_INT 0
20363: PPUSH
20364: PPUSH
20365: PPUSH
20366: PPUSH
20367: PPUSH
20368: PPUSH
20369: PPUSH
20370: PPUSH
20371: PPUSH
// begin enable ;
20372: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20373: LD_ADDR_VAR 0 3
20377: PUSH
20378: LD_EXP 76
20382: PPUSH
20383: CALL 69510 0 1
20387: ST_TO_ADDR
// if not list then
20388: LD_VAR 0 3
20392: NOT
20393: IFFALSE 20397
// exit ;
20395: GO 21051
// for i := 1 to list do
20397: LD_ADDR_VAR 0 1
20401: PUSH
20402: DOUBLE
20403: LD_INT 1
20405: DEC
20406: ST_TO_ADDR
20407: LD_VAR 0 3
20411: PUSH
20412: FOR_TO
20413: IFFALSE 21049
// begin depot := list [ i ] [ 2 ] ;
20415: LD_ADDR_VAR 0 8
20419: PUSH
20420: LD_VAR 0 3
20424: PUSH
20425: LD_VAR 0 1
20429: ARRAY
20430: PUSH
20431: LD_INT 2
20433: ARRAY
20434: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20435: LD_ADDR_VAR 0 5
20439: PUSH
20440: LD_VAR 0 3
20444: PUSH
20445: LD_VAR 0 1
20449: ARRAY
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20455: LD_VAR 0 8
20459: PPUSH
20460: CALL_OW 301
20464: IFTRUE 20483
20466: PUSH
20467: LD_VAR 0 5
20471: PUSH
20472: LD_VAR 0 8
20476: PPUSH
20477: CALL_OW 255
20481: NONEQUAL
20482: OR
20483: IFFALSE 20512
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20485: LD_ADDR_EXP 76
20489: PUSH
20490: LD_EXP 76
20494: PPUSH
20495: LD_VAR 0 8
20499: PPUSH
20500: LD_INT 0
20502: PPUSH
20503: CALL_OW 1
20507: ST_TO_ADDR
// exit ;
20508: POP
20509: POP
20510: GO 21051
// end ; x := list [ i ] [ 3 ] ;
20512: LD_ADDR_VAR 0 6
20516: PUSH
20517: LD_VAR 0 3
20521: PUSH
20522: LD_VAR 0 1
20526: ARRAY
20527: PUSH
20528: LD_INT 3
20530: ARRAY
20531: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20532: LD_ADDR_VAR 0 7
20536: PUSH
20537: LD_VAR 0 3
20541: PUSH
20542: LD_VAR 0 1
20546: ARRAY
20547: PUSH
20548: LD_INT 4
20550: ARRAY
20551: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20552: LD_ADDR_VAR 0 9
20556: PUSH
20557: LD_VAR 0 6
20561: PPUSH
20562: LD_VAR 0 7
20566: PPUSH
20567: LD_INT 16
20569: PPUSH
20570: CALL 68084 0 3
20574: ST_TO_ADDR
// if not cratesNearbyPoint then
20575: LD_VAR 0 9
20579: NOT
20580: IFFALSE 20586
// exit ;
20582: POP
20583: POP
20584: GO 21051
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20586: LD_ADDR_VAR 0 4
20590: PUSH
20591: LD_INT 22
20593: PUSH
20594: LD_VAR 0 5
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 3
20605: PUSH
20606: LD_INT 60
20608: PUSH
20609: EMPTY
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 91
20618: PUSH
20619: LD_VAR 0 8
20623: PUSH
20624: LD_INT 6
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 25
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 25
20647: PUSH
20648: LD_INT 16
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PPUSH
20666: CALL_OW 69
20670: PUSH
20671: LD_VAR 0 8
20675: PPUSH
20676: CALL_OW 313
20680: PPUSH
20681: LD_INT 3
20683: PUSH
20684: LD_INT 60
20686: PUSH
20687: EMPTY
20688: LIST
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: LD_INT 25
20699: PUSH
20700: LD_INT 2
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 25
20709: PUSH
20710: LD_INT 16
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PPUSH
20726: CALL_OW 72
20730: UNION
20731: ST_TO_ADDR
// if tmp then
20732: LD_VAR 0 4
20736: IFFALSE 20816
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20738: LD_ADDR_VAR 0 4
20742: PUSH
20743: LD_VAR 0 4
20747: PPUSH
20748: LD_INT 3
20750: PPUSH
20751: CALL 65891 0 2
20755: ST_TO_ADDR
// for j in tmp do
20756: LD_ADDR_VAR 0 2
20760: PUSH
20761: LD_VAR 0 4
20765: PUSH
20766: FOR_IN
20767: IFFALSE 20810
// begin if IsInUnit ( j ) then
20769: LD_VAR 0 2
20773: PPUSH
20774: CALL_OW 310
20778: IFFALSE 20789
// ComExit ( j ) ;
20780: LD_VAR 0 2
20784: PPUSH
20785: CALL 65974 0 1
// AddComCollect ( j , x , y ) ;
20789: LD_VAR 0 2
20793: PPUSH
20794: LD_VAR 0 6
20798: PPUSH
20799: LD_VAR 0 7
20803: PPUSH
20804: CALL_OW 177
// end ;
20808: GO 20766
20810: POP
20811: POP
// exit ;
20812: POP
20813: POP
20814: GO 21051
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20816: LD_ADDR_VAR 0 4
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_VAR 0 5
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 91
20835: PUSH
20836: LD_VAR 0 8
20840: PUSH
20841: LD_INT 8
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 34
20854: PUSH
20855: LD_INT 12
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 34
20864: PUSH
20865: LD_INT 51
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 34
20874: PUSH
20875: LD_INT 32
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 34
20884: PUSH
20885: LD_INT 89
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: PPUSH
20904: CALL_OW 69
20908: ST_TO_ADDR
// if tmp then
20909: LD_VAR 0 4
20913: IFFALSE 21047
// begin for j in tmp do
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_VAR 0 4
20924: PUSH
20925: FOR_IN
20926: IFFALSE 21045
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20928: LD_VAR 0 2
20932: PPUSH
20933: CALL_OW 262
20937: PUSH
20938: LD_INT 3
20940: EQUAL
20941: IFTRUE 20958
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 261
20953: PUSH
20954: LD_INT 20
20956: GREATER
20957: OR
20958: IFFALSE 20972
20960: PUSH
20961: LD_VAR 0 2
20965: PPUSH
20966: CALL_OW 314
20970: NOT
20971: AND
20972: IFFALSE 21002
20974: PUSH
20975: LD_VAR 0 2
20979: PPUSH
20980: CALL_OW 263
20984: PUSH
20985: LD_INT 1
20987: NONEQUAL
20988: IFTRUE 21001
20990: PUSH
20991: LD_VAR 0 2
20995: PPUSH
20996: CALL_OW 311
21000: OR
21001: AND
21002: IFFALSE 21043
// begin ComCollect ( j , x , y ) ;
21004: LD_VAR 0 2
21008: PPUSH
21009: LD_VAR 0 6
21013: PPUSH
21014: LD_VAR 0 7
21018: PPUSH
21019: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21023: LD_VAR 0 2
21027: PPUSH
21028: LD_VAR 0 8
21032: PPUSH
21033: CALL_OW 172
// exit ;
21037: POP
21038: POP
21039: POP
21040: POP
21041: GO 21051
// end ;
21043: GO 20925
21045: POP
21046: POP
// end ; end ;
21047: GO 20412
21049: POP
21050: POP
// end ; end_of_file
21051: PPOPN 9
21053: END
// export function SOS_UnitDestroyed ( un ) ; begin
21054: LD_INT 0
21056: PPUSH
// ComRadiation ( un ) ;
21057: LD_VAR 0 1
21061: PPUSH
21062: CALL 22143 0 1
// end ;
21066: LD_VAR 0 2
21070: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21071: LD_INT 0
21073: PPUSH
// ComRadiation ( un ) ;
21074: LD_VAR 0 1
21078: PPUSH
21079: CALL 22143 0 1
// end ;
21083: LD_VAR 0 2
21087: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21088: LD_INT 0
21090: PPUSH
// end ;
21091: LD_VAR 0 4
21095: RET
// export function SOS_Command ( cmd ) ; begin
21096: LD_INT 0
21098: PPUSH
// end ;
21099: LD_VAR 0 2
21103: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21104: LD_INT 0
21106: PPUSH
// end ;
21107: LD_VAR 0 6
21111: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
21112: LD_INT 0
21114: PPUSH
21115: PPUSH
21116: PPUSH
21117: PPUSH
// if not vehicle or not factory then
21118: LD_VAR 0 1
21122: NOT
21123: IFTRUE 21132
21125: PUSH
21126: LD_VAR 0 2
21130: NOT
21131: OR
21132: IFFALSE 21136
// exit ;
21134: GO 21718
// if not factoryWaypoints then
21136: LD_EXP 74
21140: NOT
21141: IFFALSE 21145
// exit ;
21143: GO 21718
// for i := 1 to Count ( factoryWaypoints ) do
21145: LD_ADDR_VAR 0 4
21149: PUSH
21150: DOUBLE
21151: LD_INT 1
21153: DEC
21154: ST_TO_ADDR
21155: LD_EXP 74
21159: PPUSH
21160: CALL 29644 0 1
21164: PUSH
21165: FOR_TO
21166: IFFALSE 21716
// if factoryWaypoints [ i ] [ 2 ] = factory then
21168: LD_EXP 74
21172: PUSH
21173: LD_VAR 0 4
21177: ARRAY
21178: PUSH
21179: LD_INT 2
21181: ARRAY
21182: PUSH
21183: LD_VAR 0 2
21187: EQUAL
21188: IFFALSE 21714
// begin if GetControl ( vehicle ) = control_manual then
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 263
21199: PUSH
21200: LD_INT 1
21202: EQUAL
21203: IFFALSE 21567
// begin driver := IsDrivenBy ( vehicle ) ;
21205: LD_ADDR_VAR 0 5
21209: PUSH
21210: LD_VAR 0 1
21214: PPUSH
21215: CALL_OW 311
21219: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
21220: LD_VAR 0 5
21224: PUSH
21225: LD_EXP 75
21229: IN
21230: IFTRUE 21244
21232: PUSH
21233: LD_VAR 0 1
21237: PUSH
21238: LD_EXP 75
21242: IN
21243: OR
21244: IFFALSE 21250
// exit ;
21246: POP
21247: POP
21248: GO 21718
// if not HasTask ( driver ) then
21250: LD_VAR 0 5
21254: PPUSH
21255: CALL_OW 314
21259: NOT
21260: IFFALSE 21565
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
21262: LD_ADDR_EXP 75
21266: PUSH
21267: LD_EXP 75
21271: PPUSH
21272: LD_VAR 0 5
21276: PPUSH
21277: CALL 65576 0 2
21281: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
21282: LD_ADDR_EXP 75
21286: PUSH
21287: LD_EXP 75
21291: PPUSH
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL 65576 0 2
21301: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21302: LD_ADDR_VAR 0 6
21306: PUSH
21307: LD_EXP 74
21311: PUSH
21312: LD_VAR 0 4
21316: ARRAY
21317: PUSH
21318: LD_INT 3
21320: ARRAY
21321: PPUSH
21322: LD_EXP 74
21326: PUSH
21327: LD_VAR 0 4
21331: ARRAY
21332: PUSH
21333: LD_INT 4
21335: ARRAY
21336: PPUSH
21337: CALL_OW 428
21341: ST_TO_ADDR
// if hex then
21342: LD_VAR 0 6
21346: IFFALSE 21364
// ComMoveUnit ( driver , hex ) else
21348: LD_VAR 0 5
21352: PPUSH
21353: LD_VAR 0 6
21357: PPUSH
21358: CALL_OW 112
21362: GO 21448
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
21364: LD_VAR 0 1
21368: PPUSH
21369: LD_EXP 74
21373: PUSH
21374: LD_VAR 0 4
21378: ARRAY
21379: PUSH
21380: LD_INT 3
21382: ARRAY
21383: PPUSH
21384: LD_EXP 74
21388: PUSH
21389: LD_VAR 0 4
21393: ARRAY
21394: PUSH
21395: LD_INT 4
21397: ARRAY
21398: PPUSH
21399: CALL_OW 297
21403: PUSH
21404: LD_INT 0
21406: GREATER
21407: IFFALSE 21448
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21409: LD_VAR 0 5
21413: PPUSH
21414: LD_EXP 74
21418: PUSH
21419: LD_VAR 0 4
21423: ARRAY
21424: PUSH
21425: LD_INT 3
21427: ARRAY
21428: PPUSH
21429: LD_EXP 74
21433: PUSH
21434: LD_VAR 0 4
21438: ARRAY
21439: PUSH
21440: LD_INT 4
21442: ARRAY
21443: PPUSH
21444: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21448: LD_VAR 0 5
21452: PPUSH
21453: CALL_OW 181
// if Multiplayer then
21457: LD_OWVAR 4
21461: IFFALSE 21510
// begin repeat wait ( 10 ) ;
21463: LD_INT 10
21465: PPUSH
21466: CALL_OW 67
// until not IsInUnit ( driver ) ;
21470: LD_VAR 0 5
21474: PPUSH
21475: CALL_OW 310
21479: NOT
21480: IFFALSE 21463
// if not HasTask ( driver ) then
21482: LD_VAR 0 5
21486: PPUSH
21487: CALL_OW 314
21491: NOT
21492: IFFALSE 21508
// ComEnterUnit ( driver , factory ) ;
21494: LD_VAR 0 5
21498: PPUSH
21499: LD_VAR 0 2
21503: PPUSH
21504: CALL_OW 120
// end else
21508: GO 21524
// AddComEnterUnit ( driver , factory ) ;
21510: LD_VAR 0 5
21514: PPUSH
21515: LD_VAR 0 2
21519: PPUSH
21520: CALL_OW 180
// wait ( 0 0$1 ) ;
21524: LD_INT 35
21526: PPUSH
21527: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
21531: LD_ADDR_EXP 75
21535: PUSH
21536: LD_EXP 75
21540: PUSH
21541: LD_VAR 0 5
21545: DIFF
21546: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
21547: LD_ADDR_EXP 75
21551: PUSH
21552: LD_EXP 75
21556: PUSH
21557: LD_VAR 0 1
21561: DIFF
21562: ST_TO_ADDR
// break ;
21563: GO 21716
// end ; end else
21565: GO 21714
// if GetControl ( vehicle ) = control_remote then
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 263
21576: PUSH
21577: LD_INT 2
21579: EQUAL
21580: IFFALSE 21666
// begin wait ( 0 0$2 ) ;
21582: LD_INT 70
21584: PPUSH
21585: CALL_OW 67
// repeat wait ( 10 ) ;
21589: LD_INT 10
21591: PPUSH
21592: CALL_OW 67
// Connect ( vehicle ) ;
21596: LD_VAR 0 1
21600: PPUSH
21601: CALL 35888 0 1
// until IsControledBy ( vehicle ) ;
21605: LD_VAR 0 1
21609: PPUSH
21610: CALL_OW 312
21614: IFFALSE 21589
// wait ( 10 ) ;
21616: LD_INT 10
21618: PPUSH
21619: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21623: LD_VAR 0 1
21627: PPUSH
21628: LD_EXP 74
21632: PUSH
21633: LD_VAR 0 4
21637: ARRAY
21638: PUSH
21639: LD_INT 3
21641: ARRAY
21642: PPUSH
21643: LD_EXP 74
21647: PUSH
21648: LD_VAR 0 4
21652: ARRAY
21653: PUSH
21654: LD_INT 4
21656: ARRAY
21657: PPUSH
21658: CALL_OW 111
// break ;
21662: GO 21716
// end else
21664: GO 21714
// begin wait ( 0 0$3 ) ;
21666: LD_INT 105
21668: PPUSH
21669: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21673: LD_VAR 0 1
21677: PPUSH
21678: LD_EXP 74
21682: PUSH
21683: LD_VAR 0 4
21687: ARRAY
21688: PUSH
21689: LD_INT 3
21691: ARRAY
21692: PPUSH
21693: LD_EXP 74
21697: PUSH
21698: LD_VAR 0 4
21702: ARRAY
21703: PUSH
21704: LD_INT 4
21706: ARRAY
21707: PPUSH
21708: CALL_OW 111
// break ;
21712: GO 21716
// end ; end ;
21714: GO 21165
21716: POP
21717: POP
// end ;
21718: LD_VAR 0 3
21722: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21723: LD_INT 0
21725: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21726: LD_VAR 0 1
21730: PUSH
21731: LD_INT 250
21733: EQUAL
21734: IFFALSE 21751
21736: PUSH
21737: LD_VAR 0 2
21741: PPUSH
21742: CALL_OW 264
21746: PUSH
21747: LD_INT 81
21749: EQUAL
21750: AND
21751: IFFALSE 21772
// MinerPlaceMine ( unit , x , y ) ;
21753: LD_VAR 0 2
21757: PPUSH
21758: LD_VAR 0 4
21762: PPUSH
21763: LD_VAR 0 5
21767: PPUSH
21768: CALL 24904 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21772: LD_VAR 0 1
21776: PUSH
21777: LD_INT 251
21779: EQUAL
21780: IFFALSE 21797
21782: PUSH
21783: LD_VAR 0 2
21787: PPUSH
21788: CALL_OW 264
21792: PUSH
21793: LD_INT 81
21795: EQUAL
21796: AND
21797: IFFALSE 21818
// MinerDetonateMine ( unit , x , y ) ;
21799: LD_VAR 0 2
21803: PPUSH
21804: LD_VAR 0 4
21808: PPUSH
21809: LD_VAR 0 5
21813: PPUSH
21814: CALL 25183 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21818: LD_VAR 0 1
21822: PUSH
21823: LD_INT 252
21825: EQUAL
21826: IFFALSE 21843
21828: PUSH
21829: LD_VAR 0 2
21833: PPUSH
21834: CALL_OW 264
21838: PUSH
21839: LD_INT 81
21841: EQUAL
21842: AND
21843: IFFALSE 21864
// MinerCreateMinefield ( unit , x , y ) ;
21845: LD_VAR 0 2
21849: PPUSH
21850: LD_VAR 0 4
21854: PPUSH
21855: LD_VAR 0 5
21859: PPUSH
21860: CALL 25602 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21864: LD_VAR 0 1
21868: PUSH
21869: LD_INT 253
21871: EQUAL
21872: IFFALSE 21889
21874: PUSH
21875: LD_VAR 0 2
21879: PPUSH
21880: CALL_OW 257
21884: PUSH
21885: LD_INT 5
21887: EQUAL
21888: AND
21889: IFFALSE 21910
// ComBinocular ( unit , x , y ) ;
21891: LD_VAR 0 2
21895: PPUSH
21896: LD_VAR 0 4
21900: PPUSH
21901: LD_VAR 0 5
21905: PPUSH
21906: CALL 25977 0 3
// if selectedUnit then
21910: LD_VAR 0 3
21914: IFFALSE 21974
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21916: LD_VAR 0 1
21920: PUSH
21921: LD_INT 254
21923: EQUAL
21924: IFFALSE 21941
21926: PUSH
21927: LD_VAR 0 2
21931: PPUSH
21932: CALL_OW 264
21936: PUSH
21937: LD_INT 99
21939: EQUAL
21940: AND
21941: IFFALSE 21958
21943: PUSH
21944: LD_VAR 0 3
21948: PPUSH
21949: CALL_OW 263
21953: PUSH
21954: LD_INT 3
21956: EQUAL
21957: AND
21958: IFFALSE 21974
// HackDestroyVehicle ( unit , selectedUnit ) ;
21960: LD_VAR 0 2
21964: PPUSH
21965: LD_VAR 0 3
21969: PPUSH
21970: CALL 24264 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21974: LD_VAR 0 1
21978: PUSH
21979: LD_INT 255
21981: EQUAL
21982: IFFALSE 22006
21984: PUSH
21985: LD_VAR 0 2
21989: PPUSH
21990: CALL_OW 264
21994: PUSH
21995: LD_INT 14
21997: PUSH
21998: LD_INT 53
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: IN
22005: AND
22006: IFFALSE 22024
22008: PUSH
22009: LD_VAR 0 4
22013: PPUSH
22014: LD_VAR 0 5
22018: PPUSH
22019: CALL_OW 488
22023: AND
22024: IFFALSE 22048
// CutTreeXYR ( unit , x , y , 12 ) ;
22026: LD_VAR 0 2
22030: PPUSH
22031: LD_VAR 0 4
22035: PPUSH
22036: LD_VAR 0 5
22040: PPUSH
22041: LD_INT 12
22043: PPUSH
22044: CALL 22239 0 4
// if cmd = 256 then
22048: LD_VAR 0 1
22052: PUSH
22053: LD_INT 256
22055: EQUAL
22056: IFFALSE 22077
// SetFactoryWaypoint ( unit , x , y ) ;
22058: LD_VAR 0 2
22062: PPUSH
22063: LD_VAR 0 4
22067: PPUSH
22068: LD_VAR 0 5
22072: PPUSH
22073: CALL 19599 0 3
// if cmd = 257 then
22077: LD_VAR 0 1
22081: PUSH
22082: LD_INT 257
22084: EQUAL
22085: IFFALSE 22106
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22087: LD_VAR 0 2
22091: PPUSH
22092: LD_VAR 0 4
22096: PPUSH
22097: LD_VAR 0 5
22101: PPUSH
22102: CALL 20095 0 3
// if cmd = 258 then
22106: LD_VAR 0 1
22110: PUSH
22111: LD_INT 258
22113: EQUAL
22114: IFFALSE 22138
// BurnTreeXYR ( unit , x , y , 8 ) ;
22116: LD_VAR 0 2
22120: PPUSH
22121: LD_VAR 0 4
22125: PPUSH
22126: LD_VAR 0 5
22130: PPUSH
22131: LD_INT 8
22133: PPUSH
22134: CALL 22639 0 4
// end ;
22138: LD_VAR 0 6
22142: RET
// export function ComRadiation ( un ) ; var eff ; begin
22143: LD_INT 0
22145: PPUSH
22146: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22147: LD_VAR 0 1
22151: PPUSH
22152: CALL_OW 264
22156: PUSH
22157: LD_INT 91
22159: NONEQUAL
22160: IFFALSE 22164
// exit ;
22162: GO 22234
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22164: LD_INT 68
22166: PPUSH
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL_OW 255
22176: PPUSH
22177: CALL_OW 321
22181: PUSH
22182: LD_INT 2
22184: EQUAL
22185: IFFALSE 22197
// eff := 50 else
22187: LD_ADDR_VAR 0 3
22191: PUSH
22192: LD_INT 50
22194: ST_TO_ADDR
22195: GO 22205
// eff := 25 ;
22197: LD_ADDR_VAR 0 3
22201: PUSH
22202: LD_INT 25
22204: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22205: LD_VAR 0 1
22209: PPUSH
22210: CALL_OW 250
22214: PPUSH
22215: LD_VAR 0 1
22219: PPUSH
22220: CALL_OW 251
22224: PPUSH
22225: LD_VAR 0 3
22229: PPUSH
22230: CALL_OW 495
// end ;
22234: LD_VAR 0 2
22238: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22239: LD_INT 0
22241: PPUSH
22242: PPUSH
22243: PPUSH
22244: PPUSH
22245: PPUSH
22246: PPUSH
22247: PPUSH
22248: PPUSH
22249: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22250: LD_VAR 0 1
22254: PPUSH
22255: CALL_OW 302
22259: NOT
22260: IFTRUE 22279
22262: PUSH
22263: LD_VAR 0 2
22267: PPUSH
22268: LD_VAR 0 3
22272: PPUSH
22273: CALL_OW 488
22277: NOT
22278: OR
22279: IFTRUE 22288
22281: PUSH
22282: LD_VAR 0 4
22286: NOT
22287: OR
22288: IFFALSE 22292
// exit ;
22290: GO 22634
// list := [ ] ;
22292: LD_ADDR_VAR 0 13
22296: PUSH
22297: EMPTY
22298: ST_TO_ADDR
// if x - r < 0 then
22299: LD_VAR 0 2
22303: PUSH
22304: LD_VAR 0 4
22308: MINUS
22309: PUSH
22310: LD_INT 0
22312: LESS
22313: IFFALSE 22325
// min_x := 0 else
22315: LD_ADDR_VAR 0 7
22319: PUSH
22320: LD_INT 0
22322: ST_TO_ADDR
22323: GO 22341
// min_x := x - r ;
22325: LD_ADDR_VAR 0 7
22329: PUSH
22330: LD_VAR 0 2
22334: PUSH
22335: LD_VAR 0 4
22339: MINUS
22340: ST_TO_ADDR
// if y - r < 0 then
22341: LD_VAR 0 3
22345: PUSH
22346: LD_VAR 0 4
22350: MINUS
22351: PUSH
22352: LD_INT 0
22354: LESS
22355: IFFALSE 22367
// min_y := 0 else
22357: LD_ADDR_VAR 0 8
22361: PUSH
22362: LD_INT 0
22364: ST_TO_ADDR
22365: GO 22383
// min_y := y - r ;
22367: LD_ADDR_VAR 0 8
22371: PUSH
22372: LD_VAR 0 3
22376: PUSH
22377: LD_VAR 0 4
22381: MINUS
22382: ST_TO_ADDR
// max_x := x + r ;
22383: LD_ADDR_VAR 0 9
22387: PUSH
22388: LD_VAR 0 2
22392: PUSH
22393: LD_VAR 0 4
22397: PLUS
22398: ST_TO_ADDR
// max_y := y + r ;
22399: LD_ADDR_VAR 0 10
22403: PUSH
22404: LD_VAR 0 3
22408: PUSH
22409: LD_VAR 0 4
22413: PLUS
22414: ST_TO_ADDR
// for _x = min_x to max_x do
22415: LD_ADDR_VAR 0 11
22419: PUSH
22420: DOUBLE
22421: LD_VAR 0 7
22425: DEC
22426: ST_TO_ADDR
22427: LD_VAR 0 9
22431: PUSH
22432: FOR_TO
22433: IFFALSE 22552
// for _y = min_y to max_y do
22435: LD_ADDR_VAR 0 12
22439: PUSH
22440: DOUBLE
22441: LD_VAR 0 8
22445: DEC
22446: ST_TO_ADDR
22447: LD_VAR 0 10
22451: PUSH
22452: FOR_TO
22453: IFFALSE 22548
// begin if not ValidHex ( _x , _y ) then
22455: LD_VAR 0 11
22459: PPUSH
22460: LD_VAR 0 12
22464: PPUSH
22465: CALL_OW 488
22469: NOT
22470: IFFALSE 22474
// continue ;
22472: GO 22452
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22474: LD_VAR 0 11
22478: PPUSH
22479: LD_VAR 0 12
22483: PPUSH
22484: CALL_OW 351
22488: IFFALSE 22506
22490: PUSH
22491: LD_VAR 0 11
22495: PPUSH
22496: LD_VAR 0 12
22500: PPUSH
22501: CALL_OW 554
22505: AND
22506: IFFALSE 22546
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22508: LD_ADDR_VAR 0 13
22512: PUSH
22513: LD_VAR 0 13
22517: PPUSH
22518: LD_VAR 0 13
22522: PUSH
22523: LD_INT 1
22525: PLUS
22526: PPUSH
22527: LD_VAR 0 11
22531: PUSH
22532: LD_VAR 0 12
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PPUSH
22541: CALL_OW 2
22545: ST_TO_ADDR
// end ;
22546: GO 22452
22548: POP
22549: POP
22550: GO 22432
22552: POP
22553: POP
// if not list then
22554: LD_VAR 0 13
22558: NOT
22559: IFFALSE 22563
// exit ;
22561: GO 22634
// for i in list do
22563: LD_ADDR_VAR 0 6
22567: PUSH
22568: LD_VAR 0 13
22572: PUSH
22573: FOR_IN
22574: IFFALSE 22632
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22576: LD_VAR 0 1
22580: PPUSH
22581: LD_STRING M
22583: PUSH
22584: LD_VAR 0 6
22588: PUSH
22589: LD_INT 1
22591: ARRAY
22592: PUSH
22593: LD_VAR 0 6
22597: PUSH
22598: LD_INT 2
22600: ARRAY
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 0
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: PPUSH
22626: CALL_OW 447
22630: GO 22573
22632: POP
22633: POP
// end ;
22634: LD_VAR 0 5
22638: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22639: LD_INT 0
22641: PPUSH
22642: PPUSH
22643: PPUSH
22644: PPUSH
22645: PPUSH
22646: PPUSH
22647: PPUSH
22648: PPUSH
22649: PPUSH
22650: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22651: LD_VAR 0 1
22655: PPUSH
22656: CALL_OW 302
22660: NOT
22661: IFTRUE 22680
22663: PUSH
22664: LD_VAR 0 2
22668: PPUSH
22669: LD_VAR 0 3
22673: PPUSH
22674: CALL_OW 488
22678: NOT
22679: OR
22680: IFTRUE 22689
22682: PUSH
22683: LD_VAR 0 4
22687: NOT
22688: OR
22689: IFFALSE 22693
// exit ;
22691: GO 23210
// list := [ ] ;
22693: LD_ADDR_VAR 0 13
22697: PUSH
22698: EMPTY
22699: ST_TO_ADDR
// if x - r < 0 then
22700: LD_VAR 0 2
22704: PUSH
22705: LD_VAR 0 4
22709: MINUS
22710: PUSH
22711: LD_INT 0
22713: LESS
22714: IFFALSE 22726
// min_x := 0 else
22716: LD_ADDR_VAR 0 7
22720: PUSH
22721: LD_INT 0
22723: ST_TO_ADDR
22724: GO 22742
// min_x := x - r ;
22726: LD_ADDR_VAR 0 7
22730: PUSH
22731: LD_VAR 0 2
22735: PUSH
22736: LD_VAR 0 4
22740: MINUS
22741: ST_TO_ADDR
// if y - r < 0 then
22742: LD_VAR 0 3
22746: PUSH
22747: LD_VAR 0 4
22751: MINUS
22752: PUSH
22753: LD_INT 0
22755: LESS
22756: IFFALSE 22768
// min_y := 0 else
22758: LD_ADDR_VAR 0 8
22762: PUSH
22763: LD_INT 0
22765: ST_TO_ADDR
22766: GO 22784
// min_y := y - r ;
22768: LD_ADDR_VAR 0 8
22772: PUSH
22773: LD_VAR 0 3
22777: PUSH
22778: LD_VAR 0 4
22782: MINUS
22783: ST_TO_ADDR
// max_x := x + r ;
22784: LD_ADDR_VAR 0 9
22788: PUSH
22789: LD_VAR 0 2
22793: PUSH
22794: LD_VAR 0 4
22798: PLUS
22799: ST_TO_ADDR
// max_y := y + r ;
22800: LD_ADDR_VAR 0 10
22804: PUSH
22805: LD_VAR 0 3
22809: PUSH
22810: LD_VAR 0 4
22814: PLUS
22815: ST_TO_ADDR
// for _x = min_x to max_x do
22816: LD_ADDR_VAR 0 11
22820: PUSH
22821: DOUBLE
22822: LD_VAR 0 7
22826: DEC
22827: ST_TO_ADDR
22828: LD_VAR 0 9
22832: PUSH
22833: FOR_TO
22834: IFFALSE 22953
// for _y = min_y to max_y do
22836: LD_ADDR_VAR 0 12
22840: PUSH
22841: DOUBLE
22842: LD_VAR 0 8
22846: DEC
22847: ST_TO_ADDR
22848: LD_VAR 0 10
22852: PUSH
22853: FOR_TO
22854: IFFALSE 22949
// begin if not ValidHex ( _x , _y ) then
22856: LD_VAR 0 11
22860: PPUSH
22861: LD_VAR 0 12
22865: PPUSH
22866: CALL_OW 488
22870: NOT
22871: IFFALSE 22875
// continue ;
22873: GO 22853
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22875: LD_VAR 0 11
22879: PPUSH
22880: LD_VAR 0 12
22884: PPUSH
22885: CALL_OW 351
22889: IFFALSE 22907
22891: PUSH
22892: LD_VAR 0 11
22896: PPUSH
22897: LD_VAR 0 12
22901: PPUSH
22902: CALL_OW 554
22906: AND
22907: IFFALSE 22947
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22909: LD_ADDR_VAR 0 13
22913: PUSH
22914: LD_VAR 0 13
22918: PPUSH
22919: LD_VAR 0 13
22923: PUSH
22924: LD_INT 1
22926: PLUS
22927: PPUSH
22928: LD_VAR 0 11
22932: PUSH
22933: LD_VAR 0 12
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PPUSH
22942: CALL_OW 2
22946: ST_TO_ADDR
// end ;
22947: GO 22853
22949: POP
22950: POP
22951: GO 22833
22953: POP
22954: POP
// if not list then
22955: LD_VAR 0 13
22959: NOT
22960: IFFALSE 22964
// exit ;
22962: GO 23210
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22964: LD_ADDR_VAR 0 13
22968: PUSH
22969: LD_VAR 0 1
22973: PPUSH
22974: LD_VAR 0 13
22978: PPUSH
22979: LD_INT 1
22981: PPUSH
22982: LD_INT 1
22984: PPUSH
22985: CALL 33016 0 4
22989: ST_TO_ADDR
// ComStop ( flame ) ;
22990: LD_VAR 0 1
22994: PPUSH
22995: CALL_OW 141
// for i in list do
22999: LD_ADDR_VAR 0 6
23003: PUSH
23004: LD_VAR 0 13
23008: PUSH
23009: FOR_IN
23010: IFFALSE 23041
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23012: LD_VAR 0 1
23016: PPUSH
23017: LD_VAR 0 6
23021: PUSH
23022: LD_INT 1
23024: ARRAY
23025: PPUSH
23026: LD_VAR 0 6
23030: PUSH
23031: LD_INT 2
23033: ARRAY
23034: PPUSH
23035: CALL_OW 176
23039: GO 23009
23041: POP
23042: POP
// repeat wait ( 0 0$1 ) ;
23043: LD_INT 35
23045: PPUSH
23046: CALL_OW 67
// task := GetTaskList ( flame ) ;
23050: LD_ADDR_VAR 0 14
23054: PUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 437
23064: ST_TO_ADDR
// if not task then
23065: LD_VAR 0 14
23069: NOT
23070: IFFALSE 23074
// exit ;
23072: GO 23210
// if task [ 1 ] [ 1 ] <> | then
23074: LD_VAR 0 14
23078: PUSH
23079: LD_INT 1
23081: ARRAY
23082: PUSH
23083: LD_INT 1
23085: ARRAY
23086: PUSH
23087: LD_STRING |
23089: NONEQUAL
23090: IFFALSE 23094
// exit ;
23092: GO 23210
// _x := task [ 1 ] [ 2 ] ;
23094: LD_ADDR_VAR 0 11
23098: PUSH
23099: LD_VAR 0 14
23103: PUSH
23104: LD_INT 1
23106: ARRAY
23107: PUSH
23108: LD_INT 2
23110: ARRAY
23111: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23112: LD_ADDR_VAR 0 12
23116: PUSH
23117: LD_VAR 0 14
23121: PUSH
23122: LD_INT 1
23124: ARRAY
23125: PUSH
23126: LD_INT 3
23128: ARRAY
23129: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23130: LD_VAR 0 11
23134: PPUSH
23135: LD_VAR 0 12
23139: PPUSH
23140: CALL_OW 351
23144: NOT
23145: IFTRUE 23164
23147: PUSH
23148: LD_VAR 0 11
23152: PPUSH
23153: LD_VAR 0 12
23157: PPUSH
23158: CALL_OW 554
23162: NOT
23163: OR
23164: IFFALSE 23198
// begin task := Delete ( task , 1 ) ;
23166: LD_ADDR_VAR 0 14
23170: PUSH
23171: LD_VAR 0 14
23175: PPUSH
23176: LD_INT 1
23178: PPUSH
23179: CALL_OW 3
23183: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23184: LD_VAR 0 1
23188: PPUSH
23189: LD_VAR 0 14
23193: PPUSH
23194: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 314
23207: NOT
23208: IFFALSE 23043
// end ;
23210: LD_VAR 0 5
23214: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23215: LD_EXP 78
23219: NOT
23220: IFFALSE 23270
23222: GO 23224
23224: DISABLE
// begin initHack := true ;
23225: LD_ADDR_EXP 78
23229: PUSH
23230: LD_INT 1
23232: ST_TO_ADDR
// hackTanks := [ ] ;
23233: LD_ADDR_EXP 79
23237: PUSH
23238: EMPTY
23239: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23240: LD_ADDR_EXP 80
23244: PUSH
23245: EMPTY
23246: ST_TO_ADDR
// hackLimit := 3 ;
23247: LD_ADDR_EXP 81
23251: PUSH
23252: LD_INT 3
23254: ST_TO_ADDR
// hackDist := 12 ;
23255: LD_ADDR_EXP 82
23259: PUSH
23260: LD_INT 12
23262: ST_TO_ADDR
// hackCounter := [ ] ;
23263: LD_ADDR_EXP 83
23267: PUSH
23268: EMPTY
23269: ST_TO_ADDR
// end ;
23270: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23271: LD_EXP 78
23275: IFFALSE 23293
23277: PUSH
23278: LD_INT 34
23280: PUSH
23281: LD_INT 99
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: CALL_OW 69
23292: AND
23293: IFFALSE 23546
23295: GO 23297
23297: DISABLE
23298: LD_INT 0
23300: PPUSH
23301: PPUSH
// begin enable ;
23302: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23303: LD_ADDR_VAR 0 1
23307: PUSH
23308: LD_INT 34
23310: PUSH
23311: LD_INT 99
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: PUSH
23323: FOR_IN
23324: IFFALSE 23544
// begin if not i in hackTanks then
23326: LD_VAR 0 1
23330: PUSH
23331: LD_EXP 79
23335: IN
23336: NOT
23337: IFFALSE 23420
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23339: LD_ADDR_EXP 79
23343: PUSH
23344: LD_EXP 79
23348: PPUSH
23349: LD_EXP 79
23353: PUSH
23354: LD_INT 1
23356: PLUS
23357: PPUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 1
23367: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23368: LD_ADDR_EXP 80
23372: PUSH
23373: LD_EXP 80
23377: PPUSH
23378: LD_EXP 80
23382: PUSH
23383: LD_INT 1
23385: PLUS
23386: PPUSH
23387: EMPTY
23388: PPUSH
23389: CALL_OW 1
23393: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23394: LD_ADDR_EXP 83
23398: PUSH
23399: LD_EXP 83
23403: PPUSH
23404: LD_EXP 83
23408: PUSH
23409: LD_INT 1
23411: PLUS
23412: PPUSH
23413: EMPTY
23414: PPUSH
23415: CALL_OW 1
23419: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 302
23429: NOT
23430: IFFALSE 23443
// begin HackUnlinkAll ( i ) ;
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL 23549 0 1
// continue ;
23441: GO 23323
// end ; HackCheckCapturedStatus ( i ) ;
23443: LD_VAR 0 1
23447: PPUSH
23448: CALL 23994 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23452: LD_ADDR_VAR 0 2
23456: PUSH
23457: LD_INT 81
23459: PUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL_OW 255
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 33
23476: PUSH
23477: LD_INT 3
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 91
23486: PUSH
23487: LD_VAR 0 1
23491: PUSH
23492: LD_EXP 82
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 50
23504: PUSH
23505: EMPTY
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: PPUSH
23514: CALL_OW 69
23518: ST_TO_ADDR
// if not tmp then
23519: LD_VAR 0 2
23523: NOT
23524: IFFALSE 23528
// continue ;
23526: GO 23323
// HackLink ( i , tmp ) ;
23528: LD_VAR 0 1
23532: PPUSH
23533: LD_VAR 0 2
23537: PPUSH
23538: CALL 23685 0 2
// end ;
23542: GO 23323
23544: POP
23545: POP
// end ;
23546: PPOPN 2
23548: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23549: LD_INT 0
23551: PPUSH
23552: PPUSH
23553: PPUSH
// if not hack in hackTanks then
23554: LD_VAR 0 1
23558: PUSH
23559: LD_EXP 79
23563: IN
23564: NOT
23565: IFFALSE 23569
// exit ;
23567: GO 23680
// index := GetElementIndex ( hackTanks , hack ) ;
23569: LD_ADDR_VAR 0 4
23573: PUSH
23574: LD_EXP 79
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 32311 0 2
23588: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23589: LD_EXP 80
23593: PUSH
23594: LD_VAR 0 4
23598: ARRAY
23599: IFFALSE 23680
// begin for i in hackTanksCaptured [ index ] do
23601: LD_ADDR_VAR 0 3
23605: PUSH
23606: LD_EXP 80
23610: PUSH
23611: LD_VAR 0 4
23615: ARRAY
23616: PUSH
23617: FOR_IN
23618: IFFALSE 23644
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23620: LD_VAR 0 3
23624: PUSH
23625: LD_INT 1
23627: ARRAY
23628: PPUSH
23629: LD_VAR 0 3
23633: PUSH
23634: LD_INT 2
23636: ARRAY
23637: PPUSH
23638: CALL_OW 235
23642: GO 23617
23644: POP
23645: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23646: LD_ADDR_EXP 80
23650: PUSH
23651: LD_EXP 80
23655: PPUSH
23656: LD_VAR 0 4
23660: PPUSH
23661: EMPTY
23662: PPUSH
23663: CALL_OW 1
23667: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23668: LD_VAR 0 1
23672: PPUSH
23673: LD_INT 0
23675: PPUSH
23676: CALL_OW 505
// end ; end ;
23680: LD_VAR 0 2
23684: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23685: LD_INT 0
23687: PPUSH
23688: PPUSH
23689: PPUSH
// if not hack in hackTanks or not vehicles then
23690: LD_VAR 0 1
23694: PUSH
23695: LD_EXP 79
23699: IN
23700: NOT
23701: IFTRUE 23710
23703: PUSH
23704: LD_VAR 0 2
23708: NOT
23709: OR
23710: IFFALSE 23714
// exit ;
23712: GO 23989
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23714: LD_ADDR_VAR 0 2
23718: PUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: LD_VAR 0 2
23728: PPUSH
23729: LD_INT 1
23731: PPUSH
23732: LD_INT 1
23734: PPUSH
23735: CALL 32963 0 4
23739: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23740: LD_ADDR_VAR 0 5
23744: PUSH
23745: LD_EXP 79
23749: PPUSH
23750: LD_VAR 0 1
23754: PPUSH
23755: CALL 32311 0 2
23759: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23760: LD_EXP 80
23764: PUSH
23765: LD_VAR 0 5
23769: ARRAY
23770: PUSH
23771: LD_EXP 81
23775: LESS
23776: IFFALSE 23965
// begin for i := 1 to vehicles do
23778: LD_ADDR_VAR 0 4
23782: PUSH
23783: DOUBLE
23784: LD_INT 1
23786: DEC
23787: ST_TO_ADDR
23788: LD_VAR 0 2
23792: PUSH
23793: FOR_TO
23794: IFFALSE 23963
// begin if hackTanksCaptured [ index ] = hackLimit then
23796: LD_EXP 80
23800: PUSH
23801: LD_VAR 0 5
23805: ARRAY
23806: PUSH
23807: LD_EXP 81
23811: EQUAL
23812: IFFALSE 23816
// break ;
23814: GO 23963
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23816: LD_ADDR_EXP 83
23820: PUSH
23821: LD_EXP 83
23825: PPUSH
23826: LD_VAR 0 5
23830: PPUSH
23831: LD_EXP 83
23835: PUSH
23836: LD_VAR 0 5
23840: ARRAY
23841: PUSH
23842: LD_INT 1
23844: PLUS
23845: PPUSH
23846: CALL_OW 1
23850: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23851: LD_ADDR_EXP 80
23855: PUSH
23856: LD_EXP 80
23860: PPUSH
23861: LD_VAR 0 5
23865: PUSH
23866: LD_EXP 80
23870: PUSH
23871: LD_VAR 0 5
23875: ARRAY
23876: PUSH
23877: LD_INT 1
23879: PLUS
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PPUSH
23885: LD_VAR 0 2
23889: PUSH
23890: LD_VAR 0 4
23894: ARRAY
23895: PUSH
23896: LD_VAR 0 2
23900: PUSH
23901: LD_VAR 0 4
23905: ARRAY
23906: PPUSH
23907: CALL_OW 255
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PPUSH
23916: CALL 32528 0 3
23920: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23921: LD_VAR 0 2
23925: PUSH
23926: LD_VAR 0 4
23930: ARRAY
23931: PPUSH
23932: LD_VAR 0 1
23936: PPUSH
23937: CALL_OW 255
23941: PPUSH
23942: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23946: LD_VAR 0 2
23950: PUSH
23951: LD_VAR 0 4
23955: ARRAY
23956: PPUSH
23957: CALL_OW 141
// end ;
23961: GO 23793
23963: POP
23964: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23965: LD_VAR 0 1
23969: PPUSH
23970: LD_EXP 80
23974: PUSH
23975: LD_VAR 0 5
23979: ARRAY
23980: PUSH
23981: LD_INT 0
23983: PLUS
23984: PPUSH
23985: CALL_OW 505
// end ;
23989: LD_VAR 0 3
23993: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23994: LD_INT 0
23996: PPUSH
23997: PPUSH
23998: PPUSH
23999: PPUSH
// if not hack in hackTanks then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 79
24009: IN
24010: NOT
24011: IFFALSE 24015
// exit ;
24013: GO 24259
// index := GetElementIndex ( hackTanks , hack ) ;
24015: LD_ADDR_VAR 0 4
24019: PUSH
24020: LD_EXP 79
24024: PPUSH
24025: LD_VAR 0 1
24029: PPUSH
24030: CALL 32311 0 2
24034: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24035: LD_ADDR_VAR 0 3
24039: PUSH
24040: DOUBLE
24041: LD_EXP 80
24045: PUSH
24046: LD_VAR 0 4
24050: ARRAY
24051: INC
24052: ST_TO_ADDR
24053: LD_INT 1
24055: PUSH
24056: FOR_DOWNTO
24057: IFFALSE 24233
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24059: LD_ADDR_VAR 0 5
24063: PUSH
24064: LD_EXP 80
24068: PUSH
24069: LD_VAR 0 4
24073: ARRAY
24074: PUSH
24075: LD_VAR 0 3
24079: ARRAY
24080: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24081: LD_VAR 0 5
24085: PUSH
24086: LD_INT 1
24088: ARRAY
24089: PPUSH
24090: CALL_OW 302
24094: NOT
24095: IFTRUE 24123
24097: PUSH
24098: LD_VAR 0 5
24102: PUSH
24103: LD_INT 1
24105: ARRAY
24106: PPUSH
24107: CALL_OW 255
24111: PUSH
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL_OW 255
24121: NONEQUAL
24122: OR
24123: IFFALSE 24231
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24125: LD_VAR 0 5
24129: PUSH
24130: LD_INT 1
24132: ARRAY
24133: PPUSH
24134: CALL_OW 305
24138: IFFALSE 24166
24140: PUSH
24141: LD_VAR 0 5
24145: PUSH
24146: LD_INT 1
24148: ARRAY
24149: PPUSH
24150: CALL_OW 255
24154: PUSH
24155: LD_VAR 0 1
24159: PPUSH
24160: CALL_OW 255
24164: EQUAL
24165: AND
24166: IFFALSE 24190
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24168: LD_VAR 0 5
24172: PUSH
24173: LD_INT 1
24175: ARRAY
24176: PPUSH
24177: LD_VAR 0 5
24181: PUSH
24182: LD_INT 2
24184: ARRAY
24185: PPUSH
24186: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24190: LD_ADDR_EXP 80
24194: PUSH
24195: LD_EXP 80
24199: PPUSH
24200: LD_VAR 0 4
24204: PPUSH
24205: LD_EXP 80
24209: PUSH
24210: LD_VAR 0 4
24214: ARRAY
24215: PPUSH
24216: LD_VAR 0 3
24220: PPUSH
24221: CALL_OW 3
24225: PPUSH
24226: CALL_OW 1
24230: ST_TO_ADDR
// end ; end ;
24231: GO 24056
24233: POP
24234: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24235: LD_VAR 0 1
24239: PPUSH
24240: LD_EXP 80
24244: PUSH
24245: LD_VAR 0 4
24249: ARRAY
24250: PUSH
24251: LD_INT 0
24253: PLUS
24254: PPUSH
24255: CALL_OW 505
// end ;
24259: LD_VAR 0 2
24263: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24264: LD_INT 0
24266: PPUSH
24267: PPUSH
24268: PPUSH
24269: PPUSH
// if not hack in hackTanks then
24270: LD_VAR 0 1
24274: PUSH
24275: LD_EXP 79
24279: IN
24280: NOT
24281: IFFALSE 24285
// exit ;
24283: GO 24370
// index := GetElementIndex ( hackTanks , hack ) ;
24285: LD_ADDR_VAR 0 5
24289: PUSH
24290: LD_EXP 79
24294: PPUSH
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL 32311 0 2
24304: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24305: LD_ADDR_VAR 0 4
24309: PUSH
24310: DOUBLE
24311: LD_INT 1
24313: DEC
24314: ST_TO_ADDR
24315: LD_EXP 80
24319: PUSH
24320: LD_VAR 0 5
24324: ARRAY
24325: PUSH
24326: FOR_TO
24327: IFFALSE 24368
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24329: LD_EXP 80
24333: PUSH
24334: LD_VAR 0 5
24338: ARRAY
24339: PUSH
24340: LD_VAR 0 4
24344: ARRAY
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: PUSH
24350: LD_VAR 0 2
24354: EQUAL
24355: IFFALSE 24366
// KillUnit ( vehicle ) ;
24357: LD_VAR 0 2
24361: PPUSH
24362: CALL_OW 66
24366: GO 24326
24368: POP
24369: POP
// end ;
24370: LD_VAR 0 3
24374: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24375: LD_EXP 84
24379: NOT
24380: IFFALSE 24415
24382: GO 24384
24384: DISABLE
// begin initMiner := true ;
24385: LD_ADDR_EXP 84
24389: PUSH
24390: LD_INT 1
24392: ST_TO_ADDR
// minersList := [ ] ;
24393: LD_ADDR_EXP 85
24397: PUSH
24398: EMPTY
24399: ST_TO_ADDR
// minerMinesList := [ ] ;
24400: LD_ADDR_EXP 86
24404: PUSH
24405: EMPTY
24406: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24407: LD_ADDR_EXP 87
24411: PUSH
24412: LD_INT 5
24414: ST_TO_ADDR
// end ;
24415: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24416: LD_EXP 84
24420: IFFALSE 24438
24422: PUSH
24423: LD_INT 34
24425: PUSH
24426: LD_INT 81
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PPUSH
24433: CALL_OW 69
24437: AND
24438: IFFALSE 24901
24440: GO 24442
24442: DISABLE
24443: LD_INT 0
24445: PPUSH
24446: PPUSH
24447: PPUSH
24448: PPUSH
// begin enable ;
24449: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24450: LD_ADDR_VAR 0 1
24454: PUSH
24455: LD_INT 34
24457: PUSH
24458: LD_INT 81
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PPUSH
24465: CALL_OW 69
24469: PUSH
24470: FOR_IN
24471: IFFALSE 24543
// begin if not i in minersList then
24473: LD_VAR 0 1
24477: PUSH
24478: LD_EXP 85
24482: IN
24483: NOT
24484: IFFALSE 24541
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24486: LD_ADDR_EXP 85
24490: PUSH
24491: LD_EXP 85
24495: PPUSH
24496: LD_EXP 85
24500: PUSH
24501: LD_INT 1
24503: PLUS
24504: PPUSH
24505: LD_VAR 0 1
24509: PPUSH
24510: CALL_OW 1
24514: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24515: LD_ADDR_EXP 86
24519: PUSH
24520: LD_EXP 86
24524: PPUSH
24525: LD_EXP 86
24529: PUSH
24530: LD_INT 1
24532: PLUS
24533: PPUSH
24534: EMPTY
24535: PPUSH
24536: CALL_OW 1
24540: ST_TO_ADDR
// end end ;
24541: GO 24470
24543: POP
24544: POP
// for i := minerMinesList downto 1 do
24545: LD_ADDR_VAR 0 1
24549: PUSH
24550: DOUBLE
24551: LD_EXP 86
24555: INC
24556: ST_TO_ADDR
24557: LD_INT 1
24559: PUSH
24560: FOR_DOWNTO
24561: IFFALSE 24899
// begin if IsLive ( minersList [ i ] ) then
24563: LD_EXP 85
24567: PUSH
24568: LD_VAR 0 1
24572: ARRAY
24573: PPUSH
24574: CALL_OW 300
24578: IFFALSE 24606
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24580: LD_EXP 85
24584: PUSH
24585: LD_VAR 0 1
24589: ARRAY
24590: PPUSH
24591: LD_EXP 86
24595: PUSH
24596: LD_VAR 0 1
24600: ARRAY
24601: PPUSH
24602: CALL_OW 505
// if not minerMinesList [ i ] then
24606: LD_EXP 86
24610: PUSH
24611: LD_VAR 0 1
24615: ARRAY
24616: NOT
24617: IFFALSE 24621
// continue ;
24619: GO 24560
// for j := minerMinesList [ i ] downto 1 do
24621: LD_ADDR_VAR 0 2
24625: PUSH
24626: DOUBLE
24627: LD_EXP 86
24631: PUSH
24632: LD_VAR 0 1
24636: ARRAY
24637: INC
24638: ST_TO_ADDR
24639: LD_INT 1
24641: PUSH
24642: FOR_DOWNTO
24643: IFFALSE 24895
// begin side := GetSide ( minersList [ i ] ) ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_EXP 85
24654: PUSH
24655: LD_VAR 0 1
24659: ARRAY
24660: PPUSH
24661: CALL_OW 255
24665: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24666: LD_ADDR_VAR 0 4
24670: PUSH
24671: LD_EXP 86
24675: PUSH
24676: LD_VAR 0 1
24680: ARRAY
24681: PUSH
24682: LD_VAR 0 2
24686: ARRAY
24687: PUSH
24688: LD_INT 1
24690: ARRAY
24691: PPUSH
24692: LD_EXP 86
24696: PUSH
24697: LD_VAR 0 1
24701: ARRAY
24702: PUSH
24703: LD_VAR 0 2
24707: ARRAY
24708: PUSH
24709: LD_INT 2
24711: ARRAY
24712: PPUSH
24713: CALL_OW 428
24717: ST_TO_ADDR
// if not tmp then
24718: LD_VAR 0 4
24722: NOT
24723: IFFALSE 24727
// continue ;
24725: GO 24642
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24727: LD_VAR 0 4
24731: PUSH
24732: LD_INT 81
24734: PUSH
24735: LD_VAR 0 3
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PPUSH
24744: CALL_OW 69
24748: IN
24749: IFFALSE 24799
24751: PUSH
24752: LD_EXP 86
24756: PUSH
24757: LD_VAR 0 1
24761: ARRAY
24762: PUSH
24763: LD_VAR 0 2
24767: ARRAY
24768: PUSH
24769: LD_INT 1
24771: ARRAY
24772: PPUSH
24773: LD_EXP 86
24777: PUSH
24778: LD_VAR 0 1
24782: ARRAY
24783: PUSH
24784: LD_VAR 0 2
24788: ARRAY
24789: PUSH
24790: LD_INT 2
24792: ARRAY
24793: PPUSH
24794: CALL_OW 458
24798: AND
24799: IFFALSE 24893
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24801: LD_EXP 86
24805: PUSH
24806: LD_VAR 0 1
24810: ARRAY
24811: PUSH
24812: LD_VAR 0 2
24816: ARRAY
24817: PUSH
24818: LD_INT 1
24820: ARRAY
24821: PPUSH
24822: LD_EXP 86
24826: PUSH
24827: LD_VAR 0 1
24831: ARRAY
24832: PUSH
24833: LD_VAR 0 2
24837: ARRAY
24838: PUSH
24839: LD_INT 2
24841: ARRAY
24842: PPUSH
24843: LD_VAR 0 3
24847: PPUSH
24848: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24852: LD_ADDR_EXP 86
24856: PUSH
24857: LD_EXP 86
24861: PPUSH
24862: LD_VAR 0 1
24866: PPUSH
24867: LD_EXP 86
24871: PUSH
24872: LD_VAR 0 1
24876: ARRAY
24877: PPUSH
24878: LD_VAR 0 2
24882: PPUSH
24883: CALL_OW 3
24887: PPUSH
24888: CALL_OW 1
24892: ST_TO_ADDR
// end ; end ;
24893: GO 24642
24895: POP
24896: POP
// end ;
24897: GO 24560
24899: POP
24900: POP
// end ;
24901: PPOPN 4
24903: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24904: LD_INT 0
24906: PPUSH
24907: PPUSH
// result := false ;
24908: LD_ADDR_VAR 0 4
24912: PUSH
24913: LD_INT 0
24915: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24916: LD_VAR 0 1
24920: PPUSH
24921: CALL_OW 264
24925: PUSH
24926: LD_INT 81
24928: EQUAL
24929: NOT
24930: IFFALSE 24934
// exit ;
24932: GO 25178
// index := GetElementIndex ( minersList , unit ) ;
24934: LD_ADDR_VAR 0 5
24938: PUSH
24939: LD_EXP 85
24943: PPUSH
24944: LD_VAR 0 1
24948: PPUSH
24949: CALL 32311 0 2
24953: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24954: LD_EXP 86
24958: PUSH
24959: LD_VAR 0 5
24963: ARRAY
24964: PUSH
24965: LD_EXP 87
24969: GREATEREQUAL
24970: IFFALSE 24974
// exit ;
24972: GO 25178
// ComMoveXY ( unit , x , y ) ;
24974: LD_VAR 0 1
24978: PPUSH
24979: LD_VAR 0 2
24983: PPUSH
24984: LD_VAR 0 3
24988: PPUSH
24989: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24993: LD_INT 35
24995: PPUSH
24996: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25000: LD_VAR 0 1
25004: PPUSH
25005: LD_VAR 0 2
25009: PPUSH
25010: LD_VAR 0 3
25014: PPUSH
25015: CALL 64357 0 3
25019: NOT
25020: IFFALSE 25033
25022: PUSH
25023: LD_VAR 0 1
25027: PPUSH
25028: CALL_OW 314
25032: AND
25033: IFFALSE 25037
// exit ;
25035: GO 25178
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25037: LD_VAR 0 2
25041: PPUSH
25042: LD_VAR 0 3
25046: PPUSH
25047: CALL_OW 428
25051: PUSH
25052: LD_VAR 0 1
25056: EQUAL
25057: IFFALSE 25071
25059: PUSH
25060: LD_VAR 0 1
25064: PPUSH
25065: CALL_OW 314
25069: NOT
25070: AND
25071: IFFALSE 24993
// PlaySoundXY ( x , y , PlantMine ) ;
25073: LD_VAR 0 2
25077: PPUSH
25078: LD_VAR 0 3
25082: PPUSH
25083: LD_STRING PlantMine
25085: PPUSH
25086: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25090: LD_VAR 0 2
25094: PPUSH
25095: LD_VAR 0 3
25099: PPUSH
25100: LD_VAR 0 1
25104: PPUSH
25105: CALL_OW 255
25109: PPUSH
25110: LD_INT 0
25112: PPUSH
25113: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25117: LD_ADDR_EXP 86
25121: PUSH
25122: LD_EXP 86
25126: PPUSH
25127: LD_VAR 0 5
25131: PUSH
25132: LD_EXP 86
25136: PUSH
25137: LD_VAR 0 5
25141: ARRAY
25142: PUSH
25143: LD_INT 1
25145: PLUS
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PPUSH
25151: LD_VAR 0 2
25155: PUSH
25156: LD_VAR 0 3
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PPUSH
25165: CALL 32528 0 3
25169: ST_TO_ADDR
// result := true ;
25170: LD_ADDR_VAR 0 4
25174: PUSH
25175: LD_INT 1
25177: ST_TO_ADDR
// end ;
25178: LD_VAR 0 4
25182: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25183: LD_INT 0
25185: PPUSH
25186: PPUSH
25187: PPUSH
// if not unit in minersList then
25188: LD_VAR 0 1
25192: PUSH
25193: LD_EXP 85
25197: IN
25198: NOT
25199: IFFALSE 25203
// exit ;
25201: GO 25597
// index := GetElementIndex ( minersList , unit ) ;
25203: LD_ADDR_VAR 0 6
25207: PUSH
25208: LD_EXP 85
25212: PPUSH
25213: LD_VAR 0 1
25217: PPUSH
25218: CALL 32311 0 2
25222: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25223: LD_ADDR_VAR 0 5
25227: PUSH
25228: DOUBLE
25229: LD_EXP 86
25233: PUSH
25234: LD_VAR 0 6
25238: ARRAY
25239: INC
25240: ST_TO_ADDR
25241: LD_INT 1
25243: PUSH
25244: FOR_DOWNTO
25245: IFFALSE 25408
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25247: LD_EXP 86
25251: PUSH
25252: LD_VAR 0 6
25256: ARRAY
25257: PUSH
25258: LD_VAR 0 5
25262: ARRAY
25263: PUSH
25264: LD_INT 1
25266: ARRAY
25267: PUSH
25268: LD_VAR 0 2
25272: EQUAL
25273: IFFALSE 25303
25275: PUSH
25276: LD_EXP 86
25280: PUSH
25281: LD_VAR 0 6
25285: ARRAY
25286: PUSH
25287: LD_VAR 0 5
25291: ARRAY
25292: PUSH
25293: LD_INT 2
25295: ARRAY
25296: PUSH
25297: LD_VAR 0 3
25301: EQUAL
25302: AND
25303: IFFALSE 25406
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25305: LD_EXP 86
25309: PUSH
25310: LD_VAR 0 6
25314: ARRAY
25315: PUSH
25316: LD_VAR 0 5
25320: ARRAY
25321: PUSH
25322: LD_INT 1
25324: ARRAY
25325: PPUSH
25326: LD_EXP 86
25330: PUSH
25331: LD_VAR 0 6
25335: ARRAY
25336: PUSH
25337: LD_VAR 0 5
25341: ARRAY
25342: PUSH
25343: LD_INT 2
25345: ARRAY
25346: PPUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 255
25356: PPUSH
25357: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25361: LD_ADDR_EXP 86
25365: PUSH
25366: LD_EXP 86
25370: PPUSH
25371: LD_VAR 0 6
25375: PPUSH
25376: LD_EXP 86
25380: PUSH
25381: LD_VAR 0 6
25385: ARRAY
25386: PPUSH
25387: LD_VAR 0 5
25391: PPUSH
25392: CALL_OW 3
25396: PPUSH
25397: CALL_OW 1
25401: ST_TO_ADDR
// exit ;
25402: POP
25403: POP
25404: GO 25597
// end ; end ;
25406: GO 25244
25408: POP
25409: POP
// for i := minerMinesList [ index ] downto 1 do
25410: LD_ADDR_VAR 0 5
25414: PUSH
25415: DOUBLE
25416: LD_EXP 86
25420: PUSH
25421: LD_VAR 0 6
25425: ARRAY
25426: INC
25427: ST_TO_ADDR
25428: LD_INT 1
25430: PUSH
25431: FOR_DOWNTO
25432: IFFALSE 25595
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25434: LD_EXP 86
25438: PUSH
25439: LD_VAR 0 6
25443: ARRAY
25444: PUSH
25445: LD_VAR 0 5
25449: ARRAY
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: PPUSH
25455: LD_EXP 86
25459: PUSH
25460: LD_VAR 0 6
25464: ARRAY
25465: PUSH
25466: LD_VAR 0 5
25470: ARRAY
25471: PUSH
25472: LD_INT 2
25474: ARRAY
25475: PPUSH
25476: LD_VAR 0 2
25480: PPUSH
25481: LD_VAR 0 3
25485: PPUSH
25486: CALL_OW 298
25490: PUSH
25491: LD_INT 6
25493: LESS
25494: IFFALSE 25593
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25496: LD_EXP 86
25500: PUSH
25501: LD_VAR 0 6
25505: ARRAY
25506: PUSH
25507: LD_VAR 0 5
25511: ARRAY
25512: PUSH
25513: LD_INT 1
25515: ARRAY
25516: PPUSH
25517: LD_EXP 86
25521: PUSH
25522: LD_VAR 0 6
25526: ARRAY
25527: PUSH
25528: LD_VAR 0 5
25532: ARRAY
25533: PUSH
25534: LD_INT 2
25536: ARRAY
25537: PPUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 255
25547: PPUSH
25548: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25552: LD_ADDR_EXP 86
25556: PUSH
25557: LD_EXP 86
25561: PPUSH
25562: LD_VAR 0 6
25566: PPUSH
25567: LD_EXP 86
25571: PUSH
25572: LD_VAR 0 6
25576: ARRAY
25577: PPUSH
25578: LD_VAR 0 5
25582: PPUSH
25583: CALL_OW 3
25587: PPUSH
25588: CALL_OW 1
25592: ST_TO_ADDR
// end ; end ;
25593: GO 25431
25595: POP
25596: POP
// end ;
25597: LD_VAR 0 4
25601: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25602: LD_INT 0
25604: PPUSH
25605: PPUSH
25606: PPUSH
25607: PPUSH
25608: PPUSH
25609: PPUSH
25610: PPUSH
25611: PPUSH
25612: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 264
25622: PUSH
25623: LD_INT 81
25625: EQUAL
25626: NOT
25627: IFTRUE 25642
25629: PUSH
25630: LD_VAR 0 1
25634: PUSH
25635: LD_EXP 85
25639: IN
25640: NOT
25641: OR
25642: IFFALSE 25646
// exit ;
25644: GO 25972
// index := GetElementIndex ( minersList , unit ) ;
25646: LD_ADDR_VAR 0 6
25650: PUSH
25651: LD_EXP 85
25655: PPUSH
25656: LD_VAR 0 1
25660: PPUSH
25661: CALL 32311 0 2
25665: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25666: LD_ADDR_VAR 0 8
25670: PUSH
25671: LD_EXP 87
25675: PUSH
25676: LD_EXP 86
25680: PUSH
25681: LD_VAR 0 6
25685: ARRAY
25686: MINUS
25687: ST_TO_ADDR
// if not minesFreeAmount then
25688: LD_VAR 0 8
25692: NOT
25693: IFFALSE 25697
// exit ;
25695: GO 25972
// tmp := [ ] ;
25697: LD_ADDR_VAR 0 7
25701: PUSH
25702: EMPTY
25703: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25704: LD_ADDR_VAR 0 5
25708: PUSH
25709: DOUBLE
25710: LD_INT 1
25712: DEC
25713: ST_TO_ADDR
25714: LD_VAR 0 8
25718: PUSH
25719: FOR_TO
25720: IFFALSE 25919
// begin _d := rand ( 0 , 5 ) ;
25722: LD_ADDR_VAR 0 11
25726: PUSH
25727: LD_INT 0
25729: PPUSH
25730: LD_INT 5
25732: PPUSH
25733: CALL_OW 12
25737: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25738: LD_ADDR_VAR 0 12
25742: PUSH
25743: LD_INT 2
25745: PPUSH
25746: LD_INT 6
25748: PPUSH
25749: CALL_OW 12
25753: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25754: LD_ADDR_VAR 0 9
25758: PUSH
25759: LD_VAR 0 2
25763: PPUSH
25764: LD_VAR 0 11
25768: PPUSH
25769: LD_VAR 0 12
25773: PPUSH
25774: CALL_OW 272
25778: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25779: LD_ADDR_VAR 0 10
25783: PUSH
25784: LD_VAR 0 3
25788: PPUSH
25789: LD_VAR 0 11
25793: PPUSH
25794: LD_VAR 0 12
25798: PPUSH
25799: CALL_OW 273
25803: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25804: LD_VAR 0 9
25808: PPUSH
25809: LD_VAR 0 10
25813: PPUSH
25814: CALL_OW 488
25818: IFFALSE 25842
25820: PUSH
25821: LD_VAR 0 9
25825: PUSH
25826: LD_VAR 0 10
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_VAR 0 7
25839: IN
25840: NOT
25841: AND
25842: IFFALSE 25861
25844: PUSH
25845: LD_VAR 0 9
25849: PPUSH
25850: LD_VAR 0 10
25854: PPUSH
25855: CALL_OW 458
25859: NOT
25860: AND
25861: IFFALSE 25903
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25863: LD_ADDR_VAR 0 7
25867: PUSH
25868: LD_VAR 0 7
25872: PPUSH
25873: LD_VAR 0 7
25877: PUSH
25878: LD_INT 1
25880: PLUS
25881: PPUSH
25882: LD_VAR 0 9
25886: PUSH
25887: LD_VAR 0 10
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PPUSH
25896: CALL_OW 1
25900: ST_TO_ADDR
25901: GO 25917
// i := i - 1 ;
25903: LD_ADDR_VAR 0 5
25907: PUSH
25908: LD_VAR 0 5
25912: PUSH
25913: LD_INT 1
25915: MINUS
25916: ST_TO_ADDR
// end ;
25917: GO 25719
25919: POP
25920: POP
// for i in tmp do
25921: LD_ADDR_VAR 0 5
25925: PUSH
25926: LD_VAR 0 7
25930: PUSH
25931: FOR_IN
25932: IFFALSE 25970
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25934: LD_VAR 0 1
25938: PPUSH
25939: LD_VAR 0 5
25943: PUSH
25944: LD_INT 1
25946: ARRAY
25947: PPUSH
25948: LD_VAR 0 5
25952: PUSH
25953: LD_INT 2
25955: ARRAY
25956: PPUSH
25957: CALL 24904 0 3
25961: NOT
25962: IFFALSE 25968
// exit ;
25964: POP
25965: POP
25966: GO 25972
25968: GO 25931
25970: POP
25971: POP
// end ;
25972: LD_VAR 0 4
25976: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25977: LD_INT 0
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
// if GetClass ( unit ) <> class_sniper then
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 257
25997: PUSH
25998: LD_INT 5
26000: NONEQUAL
26001: IFFALSE 26005
// exit ;
26003: GO 26475
// dist := 8 ;
26005: LD_ADDR_VAR 0 5
26009: PUSH
26010: LD_INT 8
26012: ST_TO_ADDR
// viewRange := 12 ;
26013: LD_ADDR_VAR 0 8
26017: PUSH
26018: LD_INT 12
26020: ST_TO_ADDR
// side := GetSide ( unit ) ;
26021: LD_ADDR_VAR 0 6
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 255
26035: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26036: LD_INT 61
26038: PPUSH
26039: LD_VAR 0 6
26043: PPUSH
26044: CALL_OW 321
26048: PUSH
26049: LD_INT 2
26051: EQUAL
26052: IFFALSE 26062
// viewRange := 16 ;
26054: LD_ADDR_VAR 0 8
26058: PUSH
26059: LD_INT 16
26061: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26062: LD_VAR 0 1
26066: PPUSH
26067: LD_VAR 0 2
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL_OW 297
26081: PUSH
26082: LD_VAR 0 5
26086: GREATER
26087: IFFALSE 26166
// begin ComMoveXY ( unit , x , y ) ;
26089: LD_VAR 0 1
26093: PPUSH
26094: LD_VAR 0 2
26098: PPUSH
26099: LD_VAR 0 3
26103: PPUSH
26104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26108: LD_INT 35
26110: PPUSH
26111: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26115: LD_VAR 0 1
26119: PPUSH
26120: LD_VAR 0 2
26124: PPUSH
26125: LD_VAR 0 3
26129: PPUSH
26130: CALL 64357 0 3
26134: NOT
26135: IFFALSE 26139
// exit ;
26137: GO 26475
// until GetDistUnitXY ( unit , x , y ) < dist ;
26139: LD_VAR 0 1
26143: PPUSH
26144: LD_VAR 0 2
26148: PPUSH
26149: LD_VAR 0 3
26153: PPUSH
26154: CALL_OW 297
26158: PUSH
26159: LD_VAR 0 5
26163: LESS
26164: IFFALSE 26108
// end ; ComTurnXY ( unit , x , y ) ;
26166: LD_VAR 0 1
26170: PPUSH
26171: LD_VAR 0 2
26175: PPUSH
26176: LD_VAR 0 3
26180: PPUSH
26181: CALL_OW 118
// repeat if Multiplayer then
26185: LD_OWVAR 4
26189: IFFALSE 26200
// wait ( 35 ) else
26191: LD_INT 35
26193: PPUSH
26194: CALL_OW 67
26198: GO 26207
// wait ( 5 ) ;
26200: LD_INT 5
26202: PPUSH
26203: CALL_OW 67
// _d := GetDir ( unit ) ;
26207: LD_ADDR_VAR 0 11
26211: PUSH
26212: LD_VAR 0 1
26216: PPUSH
26217: CALL_OW 254
26221: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26222: LD_ADDR_VAR 0 7
26226: PUSH
26227: LD_VAR 0 1
26231: PPUSH
26232: CALL_OW 250
26236: PPUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: CALL_OW 251
26246: PPUSH
26247: LD_VAR 0 2
26251: PPUSH
26252: LD_VAR 0 3
26256: PPUSH
26257: CALL 66993 0 4
26261: ST_TO_ADDR
// until dir = _d ;
26262: LD_VAR 0 7
26266: PUSH
26267: LD_VAR 0 11
26271: EQUAL
26272: IFFALSE 26185
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26274: LD_ADDR_VAR 0 9
26278: PUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 250
26288: PPUSH
26289: LD_VAR 0 7
26293: PPUSH
26294: LD_VAR 0 5
26298: PPUSH
26299: CALL_OW 272
26303: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26304: LD_ADDR_VAR 0 10
26308: PUSH
26309: LD_VAR 0 1
26313: PPUSH
26314: CALL_OW 251
26318: PPUSH
26319: LD_VAR 0 7
26323: PPUSH
26324: LD_VAR 0 5
26328: PPUSH
26329: CALL_OW 273
26333: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26334: LD_VAR 0 9
26338: PPUSH
26339: LD_VAR 0 10
26343: PPUSH
26344: CALL_OW 488
26348: NOT
26349: IFFALSE 26353
// exit ;
26351: GO 26475
// ComAnimCustom ( unit , 1 ) ;
26353: LD_VAR 0 1
26357: PPUSH
26358: LD_INT 1
26360: PPUSH
26361: CALL_OW 592
// p := 0 ;
26365: LD_ADDR_VAR 0 12
26369: PUSH
26370: LD_INT 0
26372: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26373: LD_VAR 0 9
26377: PPUSH
26378: LD_VAR 0 10
26382: PPUSH
26383: LD_VAR 0 6
26387: PPUSH
26388: LD_VAR 0 8
26392: PPUSH
26393: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26397: LD_INT 35
26399: PPUSH
26400: CALL_OW 67
// p := Inc ( p ) ;
26404: LD_ADDR_VAR 0 12
26408: PUSH
26409: LD_VAR 0 12
26413: PPUSH
26414: CALL 66949 0 1
26418: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26419: LD_VAR 0 12
26423: PUSH
26424: LD_INT 3
26426: EQUAL
26427: IFTRUE 26441
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 302
26439: NOT
26440: OR
26441: IFTRUE 26454
26443: PUSH
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL_OW 301
26453: OR
26454: IFFALSE 26397
// RemoveSeeing ( _x , _y , side ) ;
26456: LD_VAR 0 9
26460: PPUSH
26461: LD_VAR 0 10
26465: PPUSH
26466: LD_VAR 0 6
26470: PPUSH
26471: CALL_OW 331
// end ;
26475: LD_VAR 0 4
26479: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
26480: LD_INT 0
26482: PPUSH
26483: PPUSH
26484: PPUSH
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
26491: PPUSH
26492: PPUSH
// if not unit then
26493: LD_VAR 0 1
26497: NOT
26498: IFFALSE 26502
// exit ;
26500: GO 26773
// side := GetSide ( unit ) ;
26502: LD_ADDR_VAR 0 3
26506: PUSH
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL_OW 255
26516: ST_TO_ADDR
// x := GetX ( unit ) ;
26517: LD_ADDR_VAR 0 5
26521: PUSH
26522: LD_VAR 0 1
26526: PPUSH
26527: CALL_OW 250
26531: ST_TO_ADDR
// y := GetY ( unit ) ;
26532: LD_ADDR_VAR 0 6
26536: PUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 251
26546: ST_TO_ADDR
// r := 8 ;
26547: LD_ADDR_VAR 0 4
26551: PUSH
26552: LD_INT 8
26554: ST_TO_ADDR
// if x - r < 0 then
26555: LD_VAR 0 5
26559: PUSH
26560: LD_VAR 0 4
26564: MINUS
26565: PUSH
26566: LD_INT 0
26568: LESS
26569: IFFALSE 26581
// min_x := 0 else
26571: LD_ADDR_VAR 0 7
26575: PUSH
26576: LD_INT 0
26578: ST_TO_ADDR
26579: GO 26597
// min_x := x - r ;
26581: LD_ADDR_VAR 0 7
26585: PUSH
26586: LD_VAR 0 5
26590: PUSH
26591: LD_VAR 0 4
26595: MINUS
26596: ST_TO_ADDR
// if y - r < 0 then
26597: LD_VAR 0 6
26601: PUSH
26602: LD_VAR 0 4
26606: MINUS
26607: PUSH
26608: LD_INT 0
26610: LESS
26611: IFFALSE 26623
// min_y := 0 else
26613: LD_ADDR_VAR 0 8
26617: PUSH
26618: LD_INT 0
26620: ST_TO_ADDR
26621: GO 26639
// min_y := y - r ;
26623: LD_ADDR_VAR 0 8
26627: PUSH
26628: LD_VAR 0 6
26632: PUSH
26633: LD_VAR 0 4
26637: MINUS
26638: ST_TO_ADDR
// max_x := x + r ;
26639: LD_ADDR_VAR 0 9
26643: PUSH
26644: LD_VAR 0 5
26648: PUSH
26649: LD_VAR 0 4
26653: PLUS
26654: ST_TO_ADDR
// max_y := y + r ;
26655: LD_ADDR_VAR 0 10
26659: PUSH
26660: LD_VAR 0 6
26664: PUSH
26665: LD_VAR 0 4
26669: PLUS
26670: ST_TO_ADDR
// for _x = min_x to max_x do
26671: LD_ADDR_VAR 0 11
26675: PUSH
26676: DOUBLE
26677: LD_VAR 0 7
26681: DEC
26682: ST_TO_ADDR
26683: LD_VAR 0 9
26687: PUSH
26688: FOR_TO
26689: IFFALSE 26771
// for _y = min_y to max_y do
26691: LD_ADDR_VAR 0 12
26695: PUSH
26696: DOUBLE
26697: LD_VAR 0 8
26701: DEC
26702: ST_TO_ADDR
26703: LD_VAR 0 10
26707: PUSH
26708: FOR_TO
26709: IFFALSE 26767
// begin if not ValidHex ( _x , _y ) then
26711: LD_VAR 0 11
26715: PPUSH
26716: LD_VAR 0 12
26720: PPUSH
26721: CALL_OW 488
26725: NOT
26726: IFFALSE 26730
// continue ;
26728: GO 26708
// if MineAtPos ( _x , _y ) then
26730: LD_VAR 0 11
26734: PPUSH
26735: LD_VAR 0 12
26739: PPUSH
26740: CALL_OW 458
26744: IFFALSE 26765
// ViewMineAtPos ( _x , _y , side ) ;
26746: LD_VAR 0 11
26750: PPUSH
26751: LD_VAR 0 12
26755: PPUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 457
// end ;
26765: GO 26708
26767: POP
26768: POP
26769: GO 26688
26771: POP
26772: POP
// end ;
26773: LD_VAR 0 2
26777: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
26778: LD_INT 0
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
// if not units then
26786: LD_VAR 0 1
26790: NOT
26791: IFFALSE 26795
// exit ;
26793: GO 27225
// scaners := [ ] ;
26795: LD_ADDR_VAR 0 6
26799: PUSH
26800: EMPTY
26801: ST_TO_ADDR
// for i in units do
26802: LD_ADDR_VAR 0 3
26806: PUSH
26807: LD_VAR 0 1
26811: PUSH
26812: FOR_IN
26813: IFFALSE 26970
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 264
26824: PUSH
26825: LD_INT 11
26827: NONEQUAL
26828: IFTRUE 26842
26830: PUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 302
26840: NOT
26841: OR
26842: IFTRUE 26859
26844: PUSH
26845: LD_VAR 0 3
26849: PPUSH
26850: CALL_OW 110
26854: PUSH
26855: LD_INT 502
26857: EQUAL
26858: OR
26859: IFFALSE 26863
// continue ;
26861: GO 26812
// ComStop ( i ) ;
26863: LD_VAR 0 3
26867: PPUSH
26868: CALL_OW 141
// x := GetX ( i ) ;
26872: LD_ADDR_VAR 0 4
26876: PUSH
26877: LD_VAR 0 3
26881: PPUSH
26882: CALL_OW 250
26886: ST_TO_ADDR
// y := GetY ( i ) ;
26887: LD_ADDR_VAR 0 5
26891: PUSH
26892: LD_VAR 0 3
26896: PPUSH
26897: CALL_OW 251
26901: ST_TO_ADDR
// if GetSide ( i ) = your_side then
26902: LD_VAR 0 3
26906: PPUSH
26907: CALL_OW 255
26911: PUSH
26912: LD_OWVAR 2
26916: EQUAL
26917: IFFALSE 26936
// PlaySoundXY ( x , y , mineDetector ) ;
26919: LD_VAR 0 4
26923: PPUSH
26924: LD_VAR 0 5
26928: PPUSH
26929: LD_STRING mineDetector
26931: PPUSH
26932: CALL_OW 366
// scaners := Join ( scaners , i ) ;
26936: LD_ADDR_VAR 0 6
26940: PUSH
26941: LD_VAR 0 6
26945: PPUSH
26946: LD_VAR 0 3
26950: PPUSH
26951: CALL 65576 0 2
26955: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
26956: LD_VAR 0 3
26960: PPUSH
26961: LD_INT 502
26963: PPUSH
26964: CALL_OW 109
// end ;
26968: GO 26812
26970: POP
26971: POP
// if not scaners then
26972: LD_VAR 0 6
26976: NOT
26977: IFFALSE 26981
// exit ;
26979: GO 27225
// wait ( 3 ) ;
26981: LD_INT 3
26983: PPUSH
26984: CALL_OW 67
// timer := 6 ;
26988: LD_ADDR_VAR 0 7
26992: PUSH
26993: LD_INT 6
26995: ST_TO_ADDR
// repeat for i in scaners do
26996: LD_ADDR_VAR 0 3
27000: PUSH
27001: LD_VAR 0 6
27005: PUSH
27006: FOR_IN
27007: IFFALSE 27123
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
27009: LD_VAR 0 3
27013: PPUSH
27014: CALL_OW 302
27018: NOT
27019: IFTRUE 27032
27021: PUSH
27022: LD_VAR 0 3
27026: PPUSH
27027: CALL_OW 314
27031: OR
27032: IFTRUE 27063
27034: PUSH
27035: LD_VAR 0 3
27039: PPUSH
27040: CALL_OW 263
27044: PUSH
27045: LD_INT 1
27047: EQUAL
27048: IFFALSE 27062
27050: PUSH
27051: LD_VAR 0 3
27055: PPUSH
27056: CALL_OW 311
27060: NOT
27061: AND
27062: OR
27063: IFFALSE 27107
// begin SetUnitDisplayNumber ( i , 0 ) ;
27065: LD_VAR 0 3
27069: PPUSH
27070: LD_INT 0
27072: PPUSH
27073: CALL_OW 505
// SetTag ( i , 0 ) ;
27077: LD_VAR 0 3
27081: PPUSH
27082: LD_INT 0
27084: PPUSH
27085: CALL_OW 109
// scaners := scaners diff i ;
27089: LD_ADDR_VAR 0 6
27093: PUSH
27094: LD_VAR 0 6
27098: PUSH
27099: LD_VAR 0 3
27103: DIFF
27104: ST_TO_ADDR
// continue ;
27105: GO 27006
// end ; SetUnitDisplayNumber ( i , timer ) ;
27107: LD_VAR 0 3
27111: PPUSH
27112: LD_VAR 0 7
27116: PPUSH
27117: CALL_OW 505
// end ;
27121: GO 27006
27123: POP
27124: POP
// if not scaners then
27125: LD_VAR 0 6
27129: NOT
27130: IFFALSE 27134
// exit ;
27132: GO 27225
// timer := Dec ( timer ) ;
27134: LD_ADDR_VAR 0 7
27138: PUSH
27139: LD_VAR 0 7
27143: PPUSH
27144: CALL 66971 0 1
27148: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27149: LD_INT 35
27151: PPUSH
27152: CALL_OW 67
// until timer = 0 ;
27156: LD_VAR 0 7
27160: PUSH
27161: LD_INT 0
27163: EQUAL
27164: IFFALSE 26996
// if not scaners then
27166: LD_VAR 0 6
27170: NOT
27171: IFFALSE 27175
// exit ;
27173: GO 27225
// for i in scaners do
27175: LD_ADDR_VAR 0 3
27179: PUSH
27180: LD_VAR 0 6
27184: PUSH
27185: FOR_IN
27186: IFFALSE 27223
// begin SetUnitDisplayNumber ( i , 0 ) ;
27188: LD_VAR 0 3
27192: PPUSH
27193: LD_INT 0
27195: PPUSH
27196: CALL_OW 505
// SetTag ( i , 0 ) ;
27200: LD_VAR 0 3
27204: PPUSH
27205: LD_INT 0
27207: PPUSH
27208: CALL_OW 109
// RevealDetectorMine ( i ) ;
27212: LD_VAR 0 3
27216: PPUSH
27217: CALL 26480 0 1
// end ;
27221: GO 27185
27223: POP
27224: POP
// end ;
27225: LD_VAR 0 2
27229: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
27230: LD_INT 0
27232: PPUSH
// if p1 = mine_detector_mode then
27233: LD_VAR 0 2
27237: PUSH
27238: LD_INT 103
27240: EQUAL
27241: IFFALSE 27252
// DetectMine ( units ) ;
27243: LD_VAR 0 1
27247: PPUSH
27248: CALL 26778 0 1
// end ; end_of_file
27252: LD_VAR 0 7
27256: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
27257: LD_VAR 0 1
27261: PUSH
27262: LD_INT 200
27264: DOUBLE
27265: GREATEREQUAL
27266: IFFALSE 27274
27268: LD_INT 299
27270: DOUBLE
27271: LESSEQUAL
27272: IFTRUE 27276
27274: GO 27308
27276: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
27277: LD_VAR 0 1
27281: PPUSH
27282: LD_VAR 0 2
27286: PPUSH
27287: LD_VAR 0 3
27291: PPUSH
27292: LD_VAR 0 4
27296: PPUSH
27297: LD_VAR 0 5
27301: PPUSH
27302: CALL 21723 0 5
27306: GO 27385
27308: LD_INT 300
27310: DOUBLE
27311: GREATEREQUAL
27312: IFFALSE 27320
27314: LD_INT 399
27316: DOUBLE
27317: LESSEQUAL
27318: IFTRUE 27322
27320: GO 27384
27322: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
27323: LD_VAR 0 1
27327: PPUSH
27328: LD_VAR 0 2
27332: PPUSH
27333: LD_VAR 0 3
27337: PPUSH
27338: LD_VAR 0 4
27342: PPUSH
27343: LD_VAR 0 5
27347: PPUSH
27348: LD_VAR 0 6
27352: PPUSH
27353: LD_VAR 0 7
27357: PPUSH
27358: LD_VAR 0 8
27362: PPUSH
27363: LD_VAR 0 9
27367: PPUSH
27368: LD_VAR 0 10
27372: PPUSH
27373: LD_VAR 0 11
27377: PPUSH
27378: CALL 17607 0 11
27382: GO 27385
27384: POP
// end ;
27385: PPOPN 11
27387: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
27388: LD_VAR 0 1
27392: PPUSH
27393: LD_VAR 0 2
27397: PPUSH
27398: LD_VAR 0 3
27402: PPUSH
27403: LD_VAR 0 4
27407: PPUSH
27408: LD_VAR 0 5
27412: PPUSH
27413: CALL 21104 0 5
// end ; end_of_file
27417: PPOPN 5
27419: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27420: LD_INT 0
27422: PPUSH
27423: PPUSH
// if exist_mode then
27424: LD_VAR 0 2
27428: IFFALSE 27474
// begin unit := CreateCharacter ( prefix & ident ) ;
27430: LD_ADDR_VAR 0 5
27434: PUSH
27435: LD_VAR 0 3
27439: PUSH
27440: LD_VAR 0 1
27444: STR
27445: PPUSH
27446: CALL_OW 34
27450: ST_TO_ADDR
// if unit then
27451: LD_VAR 0 5
27455: IFFALSE 27472
// DeleteCharacters ( prefix & ident ) ;
27457: LD_VAR 0 3
27461: PUSH
27462: LD_VAR 0 1
27466: STR
27467: PPUSH
27468: CALL_OW 40
// end else
27472: GO 27489
// unit := NewCharacter ( ident ) ;
27474: LD_ADDR_VAR 0 5
27478: PUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 25
27488: ST_TO_ADDR
// result := unit ;
27489: LD_ADDR_VAR 0 4
27493: PUSH
27494: LD_VAR 0 5
27498: ST_TO_ADDR
// end ;
27499: LD_VAR 0 4
27503: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27504: LD_INT 0
27506: PPUSH
27507: PPUSH
// if exist_mode then
27508: LD_VAR 0 2
27512: IFFALSE 27537
// unit := CreateCharacter ( prefix & ident ) else
27514: LD_ADDR_VAR 0 5
27518: PUSH
27519: LD_VAR 0 3
27523: PUSH
27524: LD_VAR 0 1
27528: STR
27529: PPUSH
27530: CALL_OW 34
27534: ST_TO_ADDR
27535: GO 27552
// unit := NewCharacter ( ident ) ;
27537: LD_ADDR_VAR 0 5
27541: PUSH
27542: LD_VAR 0 1
27546: PPUSH
27547: CALL_OW 25
27551: ST_TO_ADDR
// result := unit ;
27552: LD_ADDR_VAR 0 4
27556: PUSH
27557: LD_VAR 0 5
27561: ST_TO_ADDR
// end ;
27562: LD_VAR 0 4
27566: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27567: LD_INT 0
27569: PPUSH
27570: PPUSH
// if not side or not nation then
27571: LD_VAR 0 1
27575: NOT
27576: IFTRUE 27585
27578: PUSH
27579: LD_VAR 0 2
27583: NOT
27584: OR
27585: IFFALSE 27589
// exit ;
27587: GO 28383
// case nation of nation_american :
27589: LD_VAR 0 2
27593: PUSH
27594: LD_INT 1
27596: DOUBLE
27597: EQUAL
27598: IFTRUE 27602
27600: GO 27824
27602: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
27603: LD_ADDR_VAR 0 4
27607: PUSH
27608: LD_INT 35
27610: PUSH
27611: LD_INT 45
27613: PUSH
27614: LD_INT 46
27616: PUSH
27617: LD_INT 47
27619: PUSH
27620: LD_INT 82
27622: PUSH
27623: LD_INT 83
27625: PUSH
27626: LD_INT 84
27628: PUSH
27629: LD_INT 85
27631: PUSH
27632: LD_INT 86
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: LD_INT 2
27640: PUSH
27641: LD_INT 6
27643: PUSH
27644: LD_INT 15
27646: PUSH
27647: LD_INT 16
27649: PUSH
27650: LD_INT 7
27652: PUSH
27653: LD_INT 12
27655: PUSH
27656: LD_INT 13
27658: PUSH
27659: LD_INT 10
27661: PUSH
27662: LD_INT 14
27664: PUSH
27665: LD_INT 20
27667: PUSH
27668: LD_INT 21
27670: PUSH
27671: LD_INT 22
27673: PUSH
27674: LD_INT 25
27676: PUSH
27677: LD_INT 32
27679: PUSH
27680: LD_INT 27
27682: PUSH
27683: LD_INT 36
27685: PUSH
27686: LD_INT 69
27688: PUSH
27689: LD_INT 39
27691: PUSH
27692: LD_INT 34
27694: PUSH
27695: LD_INT 40
27697: PUSH
27698: LD_INT 48
27700: PUSH
27701: LD_INT 49
27703: PUSH
27704: LD_INT 50
27706: PUSH
27707: LD_INT 51
27709: PUSH
27710: LD_INT 52
27712: PUSH
27713: LD_INT 53
27715: PUSH
27716: LD_INT 54
27718: PUSH
27719: LD_INT 55
27721: PUSH
27722: LD_INT 56
27724: PUSH
27725: LD_INT 57
27727: PUSH
27728: LD_INT 58
27730: PUSH
27731: LD_INT 59
27733: PUSH
27734: LD_INT 60
27736: PUSH
27737: LD_INT 61
27739: PUSH
27740: LD_INT 62
27742: PUSH
27743: LD_INT 80
27745: PUSH
27746: LD_INT 82
27748: PUSH
27749: LD_INT 83
27751: PUSH
27752: LD_INT 84
27754: PUSH
27755: LD_INT 85
27757: PUSH
27758: LD_INT 86
27760: PUSH
27761: LD_INT 90
27763: PUSH
27764: LD_INT 93
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: ST_TO_ADDR
27822: GO 28305
27824: LD_INT 2
27826: DOUBLE
27827: EQUAL
27828: IFTRUE 27832
27830: GO 28066
27832: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
27833: LD_ADDR_VAR 0 4
27837: PUSH
27838: LD_INT 35
27840: PUSH
27841: LD_INT 45
27843: PUSH
27844: LD_INT 46
27846: PUSH
27847: LD_INT 47
27849: PUSH
27850: LD_INT 82
27852: PUSH
27853: LD_INT 83
27855: PUSH
27856: LD_INT 84
27858: PUSH
27859: LD_INT 85
27861: PUSH
27862: LD_INT 87
27864: PUSH
27865: LD_INT 70
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 11
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: LD_INT 4
27879: PUSH
27880: LD_INT 5
27882: PUSH
27883: LD_INT 6
27885: PUSH
27886: LD_INT 15
27888: PUSH
27889: LD_INT 18
27891: PUSH
27892: LD_INT 7
27894: PUSH
27895: LD_INT 17
27897: PUSH
27898: LD_INT 8
27900: PUSH
27901: LD_INT 20
27903: PUSH
27904: LD_INT 21
27906: PUSH
27907: LD_INT 22
27909: PUSH
27910: LD_INT 72
27912: PUSH
27913: LD_INT 26
27915: PUSH
27916: LD_INT 69
27918: PUSH
27919: LD_INT 39
27921: PUSH
27922: LD_INT 40
27924: PUSH
27925: LD_INT 41
27927: PUSH
27928: LD_INT 42
27930: PUSH
27931: LD_INT 43
27933: PUSH
27934: LD_INT 48
27936: PUSH
27937: LD_INT 49
27939: PUSH
27940: LD_INT 50
27942: PUSH
27943: LD_INT 51
27945: PUSH
27946: LD_INT 52
27948: PUSH
27949: LD_INT 53
27951: PUSH
27952: LD_INT 54
27954: PUSH
27955: LD_INT 55
27957: PUSH
27958: LD_INT 56
27960: PUSH
27961: LD_INT 60
27963: PUSH
27964: LD_INT 61
27966: PUSH
27967: LD_INT 62
27969: PUSH
27970: LD_INT 66
27972: PUSH
27973: LD_INT 67
27975: PUSH
27976: LD_INT 68
27978: PUSH
27979: LD_INT 81
27981: PUSH
27982: LD_INT 82
27984: PUSH
27985: LD_INT 83
27987: PUSH
27988: LD_INT 84
27990: PUSH
27991: LD_INT 85
27993: PUSH
27994: LD_INT 87
27996: PUSH
27997: LD_INT 88
27999: PUSH
28000: LD_INT 92
28002: PUSH
28003: LD_INT 94
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
28064: GO 28305
28066: LD_INT 3
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28304
28074: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
28075: LD_ADDR_VAR 0 4
28079: PUSH
28080: LD_INT 46
28082: PUSH
28083: LD_INT 47
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 82
28094: PUSH
28095: LD_INT 83
28097: PUSH
28098: LD_INT 84
28100: PUSH
28101: LD_INT 85
28103: PUSH
28104: LD_INT 86
28106: PUSH
28107: LD_INT 11
28109: PUSH
28110: LD_INT 9
28112: PUSH
28113: LD_INT 20
28115: PUSH
28116: LD_INT 19
28118: PUSH
28119: LD_INT 21
28121: PUSH
28122: LD_INT 24
28124: PUSH
28125: LD_INT 22
28127: PUSH
28128: LD_INT 25
28130: PUSH
28131: LD_INT 28
28133: PUSH
28134: LD_INT 29
28136: PUSH
28137: LD_INT 30
28139: PUSH
28140: LD_INT 31
28142: PUSH
28143: LD_INT 37
28145: PUSH
28146: LD_INT 38
28148: PUSH
28149: LD_INT 32
28151: PUSH
28152: LD_INT 27
28154: PUSH
28155: LD_INT 33
28157: PUSH
28158: LD_INT 69
28160: PUSH
28161: LD_INT 39
28163: PUSH
28164: LD_INT 34
28166: PUSH
28167: LD_INT 40
28169: PUSH
28170: LD_INT 71
28172: PUSH
28173: LD_INT 23
28175: PUSH
28176: LD_INT 44
28178: PUSH
28179: LD_INT 48
28181: PUSH
28182: LD_INT 49
28184: PUSH
28185: LD_INT 50
28187: PUSH
28188: LD_INT 51
28190: PUSH
28191: LD_INT 52
28193: PUSH
28194: LD_INT 53
28196: PUSH
28197: LD_INT 54
28199: PUSH
28200: LD_INT 55
28202: PUSH
28203: LD_INT 56
28205: PUSH
28206: LD_INT 57
28208: PUSH
28209: LD_INT 58
28211: PUSH
28212: LD_INT 59
28214: PUSH
28215: LD_INT 63
28217: PUSH
28218: LD_INT 64
28220: PUSH
28221: LD_INT 65
28223: PUSH
28224: LD_INT 82
28226: PUSH
28227: LD_INT 83
28229: PUSH
28230: LD_INT 84
28232: PUSH
28233: LD_INT 85
28235: PUSH
28236: LD_INT 86
28238: PUSH
28239: LD_INT 89
28241: PUSH
28242: LD_INT 91
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
28302: GO 28305
28304: POP
// if state > - 1 and state < 3 then
28305: LD_VAR 0 3
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: GREATER
28314: IFFALSE 28326
28316: PUSH
28317: LD_VAR 0 3
28321: PUSH
28322: LD_INT 3
28324: LESS
28325: AND
28326: IFFALSE 28383
// for i in result do
28328: LD_ADDR_VAR 0 5
28332: PUSH
28333: LD_VAR 0 4
28337: PUSH
28338: FOR_IN
28339: IFFALSE 28381
// if GetTech ( i , side ) <> state then
28341: LD_VAR 0 5
28345: PPUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 321
28355: PUSH
28356: LD_VAR 0 3
28360: NONEQUAL
28361: IFFALSE 28379
// result := result diff i ;
28363: LD_ADDR_VAR 0 4
28367: PUSH
28368: LD_VAR 0 4
28372: PUSH
28373: LD_VAR 0 5
28377: DIFF
28378: ST_TO_ADDR
28379: GO 28338
28381: POP
28382: POP
// end ;
28383: LD_VAR 0 4
28387: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28388: LD_INT 0
28390: PPUSH
28391: PPUSH
28392: PPUSH
// result := true ;
28393: LD_ADDR_VAR 0 3
28397: PUSH
28398: LD_INT 1
28400: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28401: LD_ADDR_VAR 0 5
28405: PUSH
28406: LD_VAR 0 2
28410: PPUSH
28411: CALL_OW 480
28415: ST_TO_ADDR
// if not tmp then
28416: LD_VAR 0 5
28420: NOT
28421: IFFALSE 28425
// exit ;
28423: GO 28474
// for i in tmp do
28425: LD_ADDR_VAR 0 4
28429: PUSH
28430: LD_VAR 0 5
28434: PUSH
28435: FOR_IN
28436: IFFALSE 28472
// if GetTech ( i , side ) <> state_researched then
28438: LD_VAR 0 4
28442: PPUSH
28443: LD_VAR 0 1
28447: PPUSH
28448: CALL_OW 321
28452: PUSH
28453: LD_INT 2
28455: NONEQUAL
28456: IFFALSE 28470
// begin result := false ;
28458: LD_ADDR_VAR 0 3
28462: PUSH
28463: LD_INT 0
28465: ST_TO_ADDR
// exit ;
28466: POP
28467: POP
28468: GO 28474
// end ;
28470: GO 28435
28472: POP
28473: POP
// end ;
28474: LD_VAR 0 3
28478: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28479: LD_INT 0
28481: PPUSH
28482: PPUSH
28483: PPUSH
28484: PPUSH
28485: PPUSH
28486: PPUSH
28487: PPUSH
28488: PPUSH
28489: PPUSH
28490: PPUSH
28491: PPUSH
28492: PPUSH
28493: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28494: LD_VAR 0 1
28498: NOT
28499: IFTRUE 28516
28501: PUSH
28502: LD_VAR 0 1
28506: PPUSH
28507: CALL_OW 257
28511: PUSH
28512: LD_INT 9
28514: NONEQUAL
28515: OR
28516: IFFALSE 28520
// exit ;
28518: GO 29099
// side := GetSide ( unit ) ;
28520: LD_ADDR_VAR 0 9
28524: PUSH
28525: LD_VAR 0 1
28529: PPUSH
28530: CALL_OW 255
28534: ST_TO_ADDR
// tech_space := tech_spacanom ;
28535: LD_ADDR_VAR 0 12
28539: PUSH
28540: LD_INT 29
28542: ST_TO_ADDR
// tech_time := tech_taurad ;
28543: LD_ADDR_VAR 0 13
28547: PUSH
28548: LD_INT 28
28550: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28551: LD_ADDR_VAR 0 11
28555: PUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 310
28565: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28566: LD_VAR 0 11
28570: PPUSH
28571: CALL_OW 247
28575: PUSH
28576: LD_INT 2
28578: EQUAL
28579: IFFALSE 28583
// exit ;
28581: GO 29099
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28583: LD_ADDR_VAR 0 8
28587: PUSH
28588: LD_INT 81
28590: PUSH
28591: LD_VAR 0 9
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 3
28602: PUSH
28603: LD_INT 21
28605: PUSH
28606: LD_INT 3
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: ST_TO_ADDR
// if not tmp then
28626: LD_VAR 0 8
28630: NOT
28631: IFFALSE 28635
// exit ;
28633: GO 29099
// if in_unit then
28635: LD_VAR 0 11
28639: IFFALSE 28663
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28641: LD_ADDR_VAR 0 10
28645: PUSH
28646: LD_VAR 0 8
28650: PPUSH
28651: LD_VAR 0 11
28655: PPUSH
28656: CALL_OW 74
28660: ST_TO_ADDR
28661: GO 28683
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28663: LD_ADDR_VAR 0 10
28667: PUSH
28668: LD_VAR 0 8
28672: PPUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 74
28682: ST_TO_ADDR
// if not enemy then
28683: LD_VAR 0 10
28687: NOT
28688: IFFALSE 28692
// exit ;
28690: GO 29099
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28692: LD_VAR 0 11
28696: IFFALSE 28718
28698: PUSH
28699: LD_VAR 0 11
28703: PPUSH
28704: LD_VAR 0 10
28708: PPUSH
28709: CALL_OW 296
28713: PUSH
28714: LD_INT 13
28716: GREATER
28717: AND
28718: IFTRUE 28740
28720: PUSH
28721: LD_VAR 0 1
28725: PPUSH
28726: LD_VAR 0 10
28730: PPUSH
28731: CALL_OW 296
28735: PUSH
28736: LD_INT 12
28738: GREATER
28739: OR
28740: IFFALSE 28744
// exit ;
28742: GO 29099
// missile := [ 1 ] ;
28744: LD_ADDR_VAR 0 14
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28755: LD_VAR 0 9
28759: PPUSH
28760: LD_VAR 0 12
28764: PPUSH
28765: CALL_OW 325
28769: IFFALSE 28798
// missile := Replace ( missile , missile + 1 , 2 ) ;
28771: LD_ADDR_VAR 0 14
28775: PUSH
28776: LD_VAR 0 14
28780: PPUSH
28781: LD_VAR 0 14
28785: PUSH
28786: LD_INT 1
28788: PLUS
28789: PPUSH
28790: LD_INT 2
28792: PPUSH
28793: CALL_OW 1
28797: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28798: LD_VAR 0 9
28802: PPUSH
28803: LD_VAR 0 13
28807: PPUSH
28808: CALL_OW 325
28812: IFFALSE 28836
28814: PUSH
28815: LD_VAR 0 10
28819: PPUSH
28820: CALL_OW 255
28824: PPUSH
28825: LD_VAR 0 13
28829: PPUSH
28830: CALL_OW 325
28834: NOT
28835: AND
28836: IFFALSE 28865
// missile := Replace ( missile , missile + 1 , 3 ) ;
28838: LD_ADDR_VAR 0 14
28842: PUSH
28843: LD_VAR 0 14
28847: PPUSH
28848: LD_VAR 0 14
28852: PUSH
28853: LD_INT 1
28855: PLUS
28856: PPUSH
28857: LD_INT 3
28859: PPUSH
28860: CALL_OW 1
28864: ST_TO_ADDR
// if missile < 2 then
28865: LD_VAR 0 14
28869: PUSH
28870: LD_INT 2
28872: LESS
28873: IFFALSE 28877
// exit ;
28875: GO 29099
// x := GetX ( enemy ) ;
28877: LD_ADDR_VAR 0 4
28881: PUSH
28882: LD_VAR 0 10
28886: PPUSH
28887: CALL_OW 250
28891: ST_TO_ADDR
// y := GetY ( enemy ) ;
28892: LD_ADDR_VAR 0 5
28896: PUSH
28897: LD_VAR 0 10
28901: PPUSH
28902: CALL_OW 251
28906: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28907: LD_ADDR_VAR 0 6
28911: PUSH
28912: LD_VAR 0 4
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PPUSH
28921: LD_INT 1
28923: PPUSH
28924: CALL_OW 12
28928: PLUS
28929: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28930: LD_ADDR_VAR 0 7
28934: PUSH
28935: LD_VAR 0 5
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PPUSH
28944: LD_INT 1
28946: PPUSH
28947: CALL_OW 12
28951: PLUS
28952: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28953: LD_VAR 0 6
28957: PPUSH
28958: LD_VAR 0 7
28962: PPUSH
28963: CALL_OW 488
28967: NOT
28968: IFFALSE 28990
// begin _x := x ;
28970: LD_ADDR_VAR 0 6
28974: PUSH
28975: LD_VAR 0 4
28979: ST_TO_ADDR
// _y := y ;
28980: LD_ADDR_VAR 0 7
28984: PUSH
28985: LD_VAR 0 5
28989: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28990: LD_ADDR_VAR 0 3
28994: PUSH
28995: LD_INT 1
28997: PPUSH
28998: LD_VAR 0 14
29002: PPUSH
29003: CALL_OW 12
29007: ST_TO_ADDR
// case i of 1 :
29008: LD_VAR 0 3
29012: PUSH
29013: LD_INT 1
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29038
29021: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29022: LD_VAR 0 1
29026: PPUSH
29027: LD_VAR 0 10
29031: PPUSH
29032: CALL_OW 115
29036: GO 29099
29038: LD_INT 2
29040: DOUBLE
29041: EQUAL
29042: IFTRUE 29046
29044: GO 29068
29046: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29047: LD_VAR 0 1
29051: PPUSH
29052: LD_VAR 0 6
29056: PPUSH
29057: LD_VAR 0 7
29061: PPUSH
29062: CALL_OW 153
29066: GO 29099
29068: LD_INT 3
29070: DOUBLE
29071: EQUAL
29072: IFTRUE 29076
29074: GO 29098
29076: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29077: LD_VAR 0 1
29081: PPUSH
29082: LD_VAR 0 6
29086: PPUSH
29087: LD_VAR 0 7
29091: PPUSH
29092: CALL_OW 154
29096: GO 29099
29098: POP
// end ;
29099: LD_VAR 0 2
29103: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29104: LD_INT 0
29106: PPUSH
29107: PPUSH
29108: PPUSH
29109: PPUSH
29110: PPUSH
29111: PPUSH
// if not unit or not building then
29112: LD_VAR 0 1
29116: NOT
29117: IFTRUE 29126
29119: PUSH
29120: LD_VAR 0 2
29124: NOT
29125: OR
29126: IFFALSE 29130
// exit ;
29128: GO 29288
// x := GetX ( building ) ;
29130: LD_ADDR_VAR 0 5
29134: PUSH
29135: LD_VAR 0 2
29139: PPUSH
29140: CALL_OW 250
29144: ST_TO_ADDR
// y := GetY ( building ) ;
29145: LD_ADDR_VAR 0 6
29149: PUSH
29150: LD_VAR 0 2
29154: PPUSH
29155: CALL_OW 251
29159: ST_TO_ADDR
// for i := 0 to 5 do
29160: LD_ADDR_VAR 0 4
29164: PUSH
29165: DOUBLE
29166: LD_INT 0
29168: DEC
29169: ST_TO_ADDR
29170: LD_INT 5
29172: PUSH
29173: FOR_TO
29174: IFFALSE 29286
// begin _x := ShiftX ( x , i , 3 ) ;
29176: LD_ADDR_VAR 0 7
29180: PUSH
29181: LD_VAR 0 5
29185: PPUSH
29186: LD_VAR 0 4
29190: PPUSH
29191: LD_INT 3
29193: PPUSH
29194: CALL_OW 272
29198: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29199: LD_ADDR_VAR 0 8
29203: PUSH
29204: LD_VAR 0 6
29208: PPUSH
29209: LD_VAR 0 4
29213: PPUSH
29214: LD_INT 3
29216: PPUSH
29217: CALL_OW 273
29221: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29222: LD_VAR 0 7
29226: PPUSH
29227: LD_VAR 0 8
29231: PPUSH
29232: CALL_OW 488
29236: NOT
29237: IFFALSE 29241
// continue ;
29239: GO 29173
// if HexInfo ( _x , _y ) = 0 then
29241: LD_VAR 0 7
29245: PPUSH
29246: LD_VAR 0 8
29250: PPUSH
29251: CALL_OW 428
29255: PUSH
29256: LD_INT 0
29258: EQUAL
29259: IFFALSE 29284
// begin ComMoveXY ( unit , _x , _y ) ;
29261: LD_VAR 0 1
29265: PPUSH
29266: LD_VAR 0 7
29270: PPUSH
29271: LD_VAR 0 8
29275: PPUSH
29276: CALL_OW 111
// exit ;
29280: POP
29281: POP
29282: GO 29288
// end ; end ;
29284: GO 29173
29286: POP
29287: POP
// end ;
29288: LD_VAR 0 3
29292: RET
// export function ScanBase ( side , base_area ) ; begin
29293: LD_INT 0
29295: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29296: LD_ADDR_VAR 0 3
29300: PUSH
29301: LD_VAR 0 2
29305: PPUSH
29306: LD_INT 81
29308: PUSH
29309: LD_VAR 0 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 70
29322: ST_TO_ADDR
// end ;
29323: LD_VAR 0 3
29327: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29328: LD_INT 0
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
// result := false ;
29334: LD_ADDR_VAR 0 2
29338: PUSH
29339: LD_INT 0
29341: ST_TO_ADDR
// side := GetSide ( unit ) ;
29342: LD_ADDR_VAR 0 3
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: CALL_OW 255
29356: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29357: LD_ADDR_VAR 0 4
29361: PUSH
29362: LD_VAR 0 1
29366: PPUSH
29367: CALL_OW 248
29371: ST_TO_ADDR
// case nat of 1 :
29372: LD_VAR 0 4
29376: PUSH
29377: LD_INT 1
29379: DOUBLE
29380: EQUAL
29381: IFTRUE 29385
29383: GO 29396
29385: POP
// tech := tech_lassight ; 2 :
29386: LD_ADDR_VAR 0 5
29390: PUSH
29391: LD_INT 12
29393: ST_TO_ADDR
29394: GO 29435
29396: LD_INT 2
29398: DOUBLE
29399: EQUAL
29400: IFTRUE 29404
29402: GO 29415
29404: POP
// tech := tech_mortar ; 3 :
29405: LD_ADDR_VAR 0 5
29409: PUSH
29410: LD_INT 41
29412: ST_TO_ADDR
29413: GO 29435
29415: LD_INT 3
29417: DOUBLE
29418: EQUAL
29419: IFTRUE 29423
29421: GO 29434
29423: POP
// tech := tech_bazooka ; end ;
29424: LD_ADDR_VAR 0 5
29428: PUSH
29429: LD_INT 44
29431: ST_TO_ADDR
29432: GO 29435
29434: POP
// if Researched ( side , tech ) then
29435: LD_VAR 0 3
29439: PPUSH
29440: LD_VAR 0 5
29444: PPUSH
29445: CALL_OW 325
29449: IFFALSE 29476
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29451: LD_ADDR_VAR 0 2
29455: PUSH
29456: LD_INT 5
29458: PUSH
29459: LD_INT 8
29461: PUSH
29462: LD_INT 9
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: PUSH
29470: LD_VAR 0 4
29474: ARRAY
29475: ST_TO_ADDR
// end ;
29476: LD_VAR 0 2
29480: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29481: LD_INT 0
29483: PPUSH
29484: PPUSH
29485: PPUSH
// if not mines then
29486: LD_VAR 0 2
29490: NOT
29491: IFFALSE 29495
// exit ;
29493: GO 29639
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29495: LD_ADDR_VAR 0 5
29499: PUSH
29500: LD_INT 81
29502: PUSH
29503: LD_VAR 0 1
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: LD_INT 21
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PPUSH
29533: CALL_OW 69
29537: ST_TO_ADDR
// for i in mines do
29538: LD_ADDR_VAR 0 4
29542: PUSH
29543: LD_VAR 0 2
29547: PUSH
29548: FOR_IN
29549: IFFALSE 29637
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29551: LD_VAR 0 4
29555: PUSH
29556: LD_INT 1
29558: ARRAY
29559: PPUSH
29560: LD_VAR 0 4
29564: PUSH
29565: LD_INT 2
29567: ARRAY
29568: PPUSH
29569: CALL_OW 458
29573: NOT
29574: IFFALSE 29578
// continue ;
29576: GO 29548
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29578: LD_VAR 0 4
29582: PUSH
29583: LD_INT 1
29585: ARRAY
29586: PPUSH
29587: LD_VAR 0 4
29591: PUSH
29592: LD_INT 2
29594: ARRAY
29595: PPUSH
29596: CALL_OW 428
29600: PUSH
29601: LD_VAR 0 5
29605: IN
29606: IFFALSE 29635
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29608: LD_VAR 0 4
29612: PUSH
29613: LD_INT 1
29615: ARRAY
29616: PPUSH
29617: LD_VAR 0 4
29621: PUSH
29622: LD_INT 2
29624: ARRAY
29625: PPUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 456
// end ;
29635: GO 29548
29637: POP
29638: POP
// end ;
29639: LD_VAR 0 3
29643: RET
// export function Count ( array ) ; begin
29644: LD_INT 0
29646: PPUSH
// result := array + 0 ;
29647: LD_ADDR_VAR 0 2
29651: PUSH
29652: LD_VAR 0 1
29656: PUSH
29657: LD_INT 0
29659: PLUS
29660: ST_TO_ADDR
// end ;
29661: LD_VAR 0 2
29665: RET
// export function IsEmpty ( building ) ; begin
29666: LD_INT 0
29668: PPUSH
// if not building then
29669: LD_VAR 0 1
29673: NOT
29674: IFFALSE 29678
// exit ;
29676: GO 29721
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29678: LD_ADDR_VAR 0 2
29682: PUSH
29683: LD_VAR 0 1
29687: PUSH
29688: LD_INT 22
29690: PUSH
29691: LD_VAR 0 1
29695: PPUSH
29696: CALL_OW 255
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 58
29707: PUSH
29708: EMPTY
29709: LIST
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PPUSH
29715: CALL_OW 69
29719: IN
29720: ST_TO_ADDR
// end ;
29721: LD_VAR 0 2
29725: RET
// export function IsNotFull ( building ) ; var places ; begin
29726: LD_INT 0
29728: PPUSH
29729: PPUSH
// if not building then
29730: LD_VAR 0 1
29734: NOT
29735: IFFALSE 29739
// exit ;
29737: GO 29767
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29739: LD_ADDR_VAR 0 2
29743: PUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: LD_INT 3
29751: PUSH
29752: LD_INT 62
29754: PUSH
29755: EMPTY
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PPUSH
29762: CALL_OW 72
29766: ST_TO_ADDR
// end ;
29767: LD_VAR 0 2
29771: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
// tmp := [ ] ;
29778: LD_ADDR_VAR 0 3
29782: PUSH
29783: EMPTY
29784: ST_TO_ADDR
// list := [ ] ;
29785: LD_ADDR_VAR 0 5
29789: PUSH
29790: EMPTY
29791: ST_TO_ADDR
// for i = 16 to 25 do
29792: LD_ADDR_VAR 0 4
29796: PUSH
29797: DOUBLE
29798: LD_INT 16
29800: DEC
29801: ST_TO_ADDR
29802: LD_INT 25
29804: PUSH
29805: FOR_TO
29806: IFFALSE 29879
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29808: LD_ADDR_VAR 0 3
29812: PUSH
29813: LD_VAR 0 3
29817: PUSH
29818: LD_INT 22
29820: PUSH
29821: LD_VAR 0 1
29825: PPUSH
29826: CALL_OW 255
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 91
29837: PUSH
29838: LD_VAR 0 1
29842: PUSH
29843: LD_INT 6
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 30
29853: PUSH
29854: LD_VAR 0 4
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: PPUSH
29871: CALL_OW 69
29875: ADD
29876: ST_TO_ADDR
29877: GO 29805
29879: POP
29880: POP
// for i = 1 to tmp do
29881: LD_ADDR_VAR 0 4
29885: PUSH
29886: DOUBLE
29887: LD_INT 1
29889: DEC
29890: ST_TO_ADDR
29891: LD_VAR 0 3
29895: PUSH
29896: FOR_TO
29897: IFFALSE 29985
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29899: LD_ADDR_VAR 0 5
29903: PUSH
29904: LD_VAR 0 5
29908: PUSH
29909: LD_VAR 0 3
29913: PUSH
29914: LD_VAR 0 4
29918: ARRAY
29919: PPUSH
29920: CALL_OW 266
29924: PUSH
29925: LD_VAR 0 3
29929: PUSH
29930: LD_VAR 0 4
29934: ARRAY
29935: PPUSH
29936: CALL_OW 250
29940: PUSH
29941: LD_VAR 0 3
29945: PUSH
29946: LD_VAR 0 4
29950: ARRAY
29951: PPUSH
29952: CALL_OW 251
29956: PUSH
29957: LD_VAR 0 3
29961: PUSH
29962: LD_VAR 0 4
29966: ARRAY
29967: PPUSH
29968: CALL_OW 254
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: ADD
29982: ST_TO_ADDR
29983: GO 29896
29985: POP
29986: POP
// result := list ;
29987: LD_ADDR_VAR 0 2
29991: PUSH
29992: LD_VAR 0 5
29996: ST_TO_ADDR
// end ;
29997: LD_VAR 0 2
30001: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30002: LD_INT 0
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
// if not factory then
30011: LD_VAR 0 1
30015: NOT
30016: IFFALSE 30020
// exit ;
30018: GO 30623
// if control = control_apeman then
30020: LD_VAR 0 4
30024: PUSH
30025: LD_INT 5
30027: EQUAL
30028: IFFALSE 30137
// begin tmp := UnitsInside ( factory ) ;
30030: LD_ADDR_VAR 0 8
30034: PUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 313
30044: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30045: LD_VAR 0 8
30049: PPUSH
30050: LD_INT 25
30052: PUSH
30053: LD_INT 12
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PPUSH
30060: CALL_OW 72
30064: NOT
30065: IFFALSE 30075
// control := control_manual ;
30067: LD_ADDR_VAR 0 4
30071: PUSH
30072: LD_INT 1
30074: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30075: LD_ADDR_VAR 0 8
30079: PUSH
30080: LD_VAR 0 1
30084: PPUSH
30085: CALL 29772 0 1
30089: ST_TO_ADDR
// if tmp then
30090: LD_VAR 0 8
30094: IFFALSE 30137
// begin for i in tmp do
30096: LD_ADDR_VAR 0 7
30100: PUSH
30101: LD_VAR 0 8
30105: PUSH
30106: FOR_IN
30107: IFFALSE 30135
// if i [ 1 ] = b_ext_radio then
30109: LD_VAR 0 7
30113: PUSH
30114: LD_INT 1
30116: ARRAY
30117: PUSH
30118: LD_INT 22
30120: EQUAL
30121: IFFALSE 30133
// begin control := control_remote ;
30123: LD_ADDR_VAR 0 4
30127: PUSH
30128: LD_INT 2
30130: ST_TO_ADDR
// break ;
30131: GO 30135
// end ;
30133: GO 30106
30135: POP
30136: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30137: LD_VAR 0 1
30141: PPUSH
30142: LD_VAR 0 2
30146: PPUSH
30147: LD_VAR 0 3
30151: PPUSH
30152: LD_VAR 0 4
30156: PPUSH
30157: LD_VAR 0 5
30161: PPUSH
30162: CALL_OW 448
30166: IFFALSE 30201
// begin result := [ chassis , engine , control , weapon ] ;
30168: LD_ADDR_VAR 0 6
30172: PUSH
30173: LD_VAR 0 2
30177: PUSH
30178: LD_VAR 0 3
30182: PUSH
30183: LD_VAR 0 4
30187: PUSH
30188: LD_VAR 0 5
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
// exit ;
30199: GO 30623
// end ; _chassis := AvailableChassisList ( factory ) ;
30201: LD_ADDR_VAR 0 9
30205: PUSH
30206: LD_VAR 0 1
30210: PPUSH
30211: CALL_OW 475
30215: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30216: LD_ADDR_VAR 0 11
30220: PUSH
30221: LD_VAR 0 1
30225: PPUSH
30226: CALL_OW 476
30230: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30231: LD_ADDR_VAR 0 12
30235: PUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 477
30245: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30246: LD_ADDR_VAR 0 10
30250: PUSH
30251: LD_VAR 0 1
30255: PPUSH
30256: CALL_OW 478
30260: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30261: LD_VAR 0 9
30265: NOT
30266: IFTRUE 30275
30268: PUSH
30269: LD_VAR 0 11
30273: NOT
30274: OR
30275: IFTRUE 30284
30277: PUSH
30278: LD_VAR 0 12
30282: NOT
30283: OR
30284: IFTRUE 30293
30286: PUSH
30287: LD_VAR 0 10
30291: NOT
30292: OR
30293: IFFALSE 30328
// begin result := [ chassis , engine , control , weapon ] ;
30295: LD_ADDR_VAR 0 6
30299: PUSH
30300: LD_VAR 0 2
30304: PUSH
30305: LD_VAR 0 3
30309: PUSH
30310: LD_VAR 0 4
30314: PUSH
30315: LD_VAR 0 5
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: ST_TO_ADDR
// exit ;
30326: GO 30623
// end ; if not chassis in _chassis then
30328: LD_VAR 0 2
30332: PUSH
30333: LD_VAR 0 9
30337: IN
30338: NOT
30339: IFFALSE 30365
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30341: LD_ADDR_VAR 0 2
30345: PUSH
30346: LD_VAR 0 9
30350: PUSH
30351: LD_INT 1
30353: PPUSH
30354: LD_VAR 0 9
30358: PPUSH
30359: CALL_OW 12
30363: ARRAY
30364: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30365: LD_VAR 0 2
30369: PPUSH
30370: LD_VAR 0 3
30374: PPUSH
30375: CALL 30628 0 2
30379: NOT
30380: IFFALSE 30441
// repeat engine := _engine [ 1 ] ;
30382: LD_ADDR_VAR 0 3
30386: PUSH
30387: LD_VAR 0 11
30391: PUSH
30392: LD_INT 1
30394: ARRAY
30395: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30396: LD_ADDR_VAR 0 11
30400: PUSH
30401: LD_VAR 0 11
30405: PPUSH
30406: LD_INT 1
30408: PPUSH
30409: CALL_OW 3
30413: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: CALL 30628 0 2
30428: IFTRUE 30439
30430: PUSH
30431: LD_VAR 0 11
30435: PUSH
30436: EMPTY
30437: EQUAL
30438: OR
30439: IFFALSE 30382
// if not control in _control then
30441: LD_VAR 0 4
30445: PUSH
30446: LD_VAR 0 12
30450: IN
30451: NOT
30452: IFFALSE 30478
// control := _control [ rand ( 1 , _control ) ] ;
30454: LD_ADDR_VAR 0 4
30458: PUSH
30459: LD_VAR 0 12
30463: PUSH
30464: LD_INT 1
30466: PPUSH
30467: LD_VAR 0 12
30471: PPUSH
30472: CALL_OW 12
30476: ARRAY
30477: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30478: LD_VAR 0 2
30482: PPUSH
30483: LD_VAR 0 5
30487: PPUSH
30488: CALL 30850 0 2
30492: NOT
30493: IFFALSE 30554
// repeat weapon := _weapon [ 1 ] ;
30495: LD_ADDR_VAR 0 5
30499: PUSH
30500: LD_VAR 0 10
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30509: LD_ADDR_VAR 0 10
30513: PUSH
30514: LD_VAR 0 10
30518: PPUSH
30519: LD_INT 1
30521: PPUSH
30522: CALL_OW 3
30526: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30527: LD_VAR 0 2
30531: PPUSH
30532: LD_VAR 0 5
30536: PPUSH
30537: CALL 30850 0 2
30541: IFTRUE 30552
30543: PUSH
30544: LD_VAR 0 10
30548: PUSH
30549: EMPTY
30550: EQUAL
30551: OR
30552: IFFALSE 30495
// result := [ ] ;
30554: LD_ADDR_VAR 0 6
30558: PUSH
30559: EMPTY
30560: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30561: LD_VAR 0 1
30565: PPUSH
30566: LD_VAR 0 2
30570: PPUSH
30571: LD_VAR 0 3
30575: PPUSH
30576: LD_VAR 0 4
30580: PPUSH
30581: LD_VAR 0 5
30585: PPUSH
30586: CALL_OW 448
30590: IFFALSE 30623
// result := [ chassis , engine , control , weapon ] ;
30592: LD_ADDR_VAR 0 6
30596: PUSH
30597: LD_VAR 0 2
30601: PUSH
30602: LD_VAR 0 3
30606: PUSH
30607: LD_VAR 0 4
30611: PUSH
30612: LD_VAR 0 5
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
// end ;
30623: LD_VAR 0 6
30627: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30628: LD_INT 0
30630: PPUSH
// if not chassis or not engine then
30631: LD_VAR 0 1
30635: NOT
30636: IFTRUE 30645
30638: PUSH
30639: LD_VAR 0 2
30643: NOT
30644: OR
30645: IFFALSE 30649
// exit ;
30647: GO 30845
// case engine of engine_solar :
30649: LD_VAR 0 2
30653: PUSH
30654: LD_INT 2
30656: DOUBLE
30657: EQUAL
30658: IFTRUE 30662
30660: GO 30700
30662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30663: LD_ADDR_VAR 0 3
30667: PUSH
30668: LD_INT 11
30670: PUSH
30671: LD_INT 12
30673: PUSH
30674: LD_INT 13
30676: PUSH
30677: LD_INT 14
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: ST_TO_ADDR
30698: GO 30829
30700: LD_INT 1
30702: DOUBLE
30703: EQUAL
30704: IFTRUE 30708
30706: GO 30770
30708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30709: LD_ADDR_VAR 0 3
30713: PUSH
30714: LD_INT 11
30716: PUSH
30717: LD_INT 12
30719: PUSH
30720: LD_INT 13
30722: PUSH
30723: LD_INT 14
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: LD_INT 4
30737: PUSH
30738: LD_INT 5
30740: PUSH
30741: LD_INT 21
30743: PUSH
30744: LD_INT 23
30746: PUSH
30747: LD_INT 22
30749: PUSH
30750: LD_INT 24
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
30768: GO 30829
30770: LD_INT 3
30772: DOUBLE
30773: EQUAL
30774: IFTRUE 30778
30776: GO 30828
30778: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30779: LD_ADDR_VAR 0 3
30783: PUSH
30784: LD_INT 13
30786: PUSH
30787: LD_INT 14
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: LD_INT 4
30798: PUSH
30799: LD_INT 5
30801: PUSH
30802: LD_INT 21
30804: PUSH
30805: LD_INT 22
30807: PUSH
30808: LD_INT 23
30810: PUSH
30811: LD_INT 24
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: ST_TO_ADDR
30826: GO 30829
30828: POP
// result := ( chassis in result ) ;
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_VAR 0 1
30838: PUSH
30839: LD_VAR 0 3
30843: IN
30844: ST_TO_ADDR
// end ;
30845: LD_VAR 0 3
30849: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30850: LD_INT 0
30852: PPUSH
// if not chassis or not weapon then
30853: LD_VAR 0 1
30857: NOT
30858: IFTRUE 30867
30860: PUSH
30861: LD_VAR 0 2
30865: NOT
30866: OR
30867: IFFALSE 30871
// exit ;
30869: GO 31931
// case weapon of us_machine_gun :
30871: LD_VAR 0 2
30875: PUSH
30876: LD_INT 2
30878: DOUBLE
30879: EQUAL
30880: IFTRUE 30884
30882: GO 30914
30884: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30885: LD_ADDR_VAR 0 3
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: LD_INT 4
30901: PUSH
30902: LD_INT 5
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: ST_TO_ADDR
30912: GO 31915
30914: LD_INT 3
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30952
30922: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30923: LD_ADDR_VAR 0 3
30927: PUSH
30928: LD_INT 1
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31915
30952: LD_INT 11
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30990
30960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: LD_INT 3
30974: PUSH
30975: LD_INT 4
30977: PUSH
30978: LD_INT 5
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
30988: GO 31915
30990: LD_INT 4
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31024
30998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30999: LD_ADDR_VAR 0 3
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: LD_INT 5
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
31022: GO 31915
31024: LD_INT 5
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31058
31032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31033: LD_ADDR_VAR 0 3
31037: PUSH
31038: LD_INT 2
31040: PUSH
31041: LD_INT 3
31043: PUSH
31044: LD_INT 4
31046: PUSH
31047: LD_INT 5
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: ST_TO_ADDR
31056: GO 31915
31058: LD_INT 9
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31092
31066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31067: LD_ADDR_VAR 0 3
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: LD_INT 4
31080: PUSH
31081: LD_INT 5
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: ST_TO_ADDR
31090: GO 31915
31092: LD_INT 7
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31126
31100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31101: LD_ADDR_VAR 0 3
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: LD_INT 4
31114: PUSH
31115: LD_INT 5
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: ST_TO_ADDR
31124: GO 31915
31126: LD_INT 12
31128: DOUBLE
31129: EQUAL
31130: IFTRUE 31134
31132: GO 31160
31134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31135: LD_ADDR_VAR 0 3
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: LD_INT 4
31148: PUSH
31149: LD_INT 5
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: ST_TO_ADDR
31158: GO 31915
31160: LD_INT 13
31162: DOUBLE
31163: EQUAL
31164: IFTRUE 31168
31166: GO 31194
31168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31169: LD_ADDR_VAR 0 3
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: LD_INT 4
31182: PUSH
31183: LD_INT 5
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
31192: GO 31915
31194: LD_INT 14
31196: DOUBLE
31197: EQUAL
31198: IFTRUE 31202
31200: GO 31220
31202: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31203: LD_ADDR_VAR 0 3
31207: PUSH
31208: LD_INT 4
31210: PUSH
31211: LD_INT 5
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: ST_TO_ADDR
31218: GO 31915
31220: LD_INT 6
31222: DOUBLE
31223: EQUAL
31224: IFTRUE 31228
31226: GO 31246
31228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_INT 4
31236: PUSH
31237: LD_INT 5
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: ST_TO_ADDR
31244: GO 31915
31246: LD_INT 10
31248: DOUBLE
31249: EQUAL
31250: IFTRUE 31254
31252: GO 31272
31254: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31255: LD_ADDR_VAR 0 3
31259: PUSH
31260: LD_INT 4
31262: PUSH
31263: LD_INT 5
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: ST_TO_ADDR
31270: GO 31915
31272: LD_INT 22
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31306
31280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31281: LD_ADDR_VAR 0 3
31285: PUSH
31286: LD_INT 11
31288: PUSH
31289: LD_INT 12
31291: PUSH
31292: LD_INT 13
31294: PUSH
31295: LD_INT 14
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
31304: GO 31915
31306: LD_INT 23
31308: DOUBLE
31309: EQUAL
31310: IFTRUE 31314
31312: GO 31340
31314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31315: LD_ADDR_VAR 0 3
31319: PUSH
31320: LD_INT 11
31322: PUSH
31323: LD_INT 12
31325: PUSH
31326: LD_INT 13
31328: PUSH
31329: LD_INT 14
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
31338: GO 31915
31340: LD_INT 24
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31374
31348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: LD_INT 11
31356: PUSH
31357: LD_INT 12
31359: PUSH
31360: LD_INT 13
31362: PUSH
31363: LD_INT 14
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
31372: GO 31915
31374: LD_INT 30
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31408
31382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_INT 11
31390: PUSH
31391: LD_INT 12
31393: PUSH
31394: LD_INT 13
31396: PUSH
31397: LD_INT 14
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
31406: GO 31915
31408: LD_INT 25
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31434
31416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31417: LD_ADDR_VAR 0 3
31421: PUSH
31422: LD_INT 13
31424: PUSH
31425: LD_INT 14
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: ST_TO_ADDR
31432: GO 31915
31434: LD_INT 27
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31460
31442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: LD_INT 13
31450: PUSH
31451: LD_INT 14
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: ST_TO_ADDR
31458: GO 31915
31460: LD_INT 92
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31494
31468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31469: LD_ADDR_VAR 0 3
31473: PUSH
31474: LD_INT 11
31476: PUSH
31477: LD_INT 12
31479: PUSH
31480: LD_INT 13
31482: PUSH
31483: LD_INT 14
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: ST_TO_ADDR
31492: GO 31915
31494: LD_INT 28
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31520
31502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31503: LD_ADDR_VAR 0 3
31507: PUSH
31508: LD_INT 13
31510: PUSH
31511: LD_INT 14
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: ST_TO_ADDR
31518: GO 31915
31520: LD_INT 29
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31546
31528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31529: LD_ADDR_VAR 0 3
31533: PUSH
31534: LD_INT 13
31536: PUSH
31537: LD_INT 14
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: ST_TO_ADDR
31544: GO 31915
31546: LD_INT 31
31548: DOUBLE
31549: EQUAL
31550: IFTRUE 31554
31552: GO 31572
31554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31555: LD_ADDR_VAR 0 3
31559: PUSH
31560: LD_INT 13
31562: PUSH
31563: LD_INT 14
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: ST_TO_ADDR
31570: GO 31915
31572: LD_INT 26
31574: DOUBLE
31575: EQUAL
31576: IFTRUE 31580
31578: GO 31598
31580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31581: LD_ADDR_VAR 0 3
31585: PUSH
31586: LD_INT 13
31588: PUSH
31589: LD_INT 14
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: ST_TO_ADDR
31596: GO 31915
31598: LD_INT 42
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31632
31606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31607: LD_ADDR_VAR 0 3
31611: PUSH
31612: LD_INT 21
31614: PUSH
31615: LD_INT 22
31617: PUSH
31618: LD_INT 23
31620: PUSH
31621: LD_INT 24
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
31630: GO 31915
31632: LD_INT 43
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31666
31640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31641: LD_ADDR_VAR 0 3
31645: PUSH
31646: LD_INT 21
31648: PUSH
31649: LD_INT 22
31651: PUSH
31652: LD_INT 23
31654: PUSH
31655: LD_INT 24
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: ST_TO_ADDR
31664: GO 31915
31666: LD_INT 44
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31700
31674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_INT 21
31682: PUSH
31683: LD_INT 22
31685: PUSH
31686: LD_INT 23
31688: PUSH
31689: LD_INT 24
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: ST_TO_ADDR
31698: GO 31915
31700: LD_INT 45
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31708
31706: GO 31734
31708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31709: LD_ADDR_VAR 0 3
31713: PUSH
31714: LD_INT 21
31716: PUSH
31717: LD_INT 22
31719: PUSH
31720: LD_INT 23
31722: PUSH
31723: LD_INT 24
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
31732: GO 31915
31734: LD_INT 49
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31768
31742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: LD_INT 21
31750: PUSH
31751: LD_INT 22
31753: PUSH
31754: LD_INT 23
31756: PUSH
31757: LD_INT 24
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: ST_TO_ADDR
31766: GO 31915
31768: LD_INT 51
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31802
31776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31777: LD_ADDR_VAR 0 3
31781: PUSH
31782: LD_INT 21
31784: PUSH
31785: LD_INT 22
31787: PUSH
31788: LD_INT 23
31790: PUSH
31791: LD_INT 24
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: ST_TO_ADDR
31800: GO 31915
31802: LD_INT 52
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31810
31808: GO 31836
31810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31811: LD_ADDR_VAR 0 3
31815: PUSH
31816: LD_INT 21
31818: PUSH
31819: LD_INT 22
31821: PUSH
31822: LD_INT 23
31824: PUSH
31825: LD_INT 24
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
31834: GO 31915
31836: LD_INT 53
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31862
31844: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31845: LD_ADDR_VAR 0 3
31849: PUSH
31850: LD_INT 23
31852: PUSH
31853: LD_INT 24
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: ST_TO_ADDR
31860: GO 31915
31862: LD_INT 46
31864: DOUBLE
31865: EQUAL
31866: IFTRUE 31870
31868: GO 31888
31870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31871: LD_ADDR_VAR 0 3
31875: PUSH
31876: LD_INT 23
31878: PUSH
31879: LD_INT 24
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: ST_TO_ADDR
31886: GO 31915
31888: LD_INT 47
31890: DOUBLE
31891: EQUAL
31892: IFTRUE 31896
31894: GO 31914
31896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31897: LD_ADDR_VAR 0 3
31901: PUSH
31902: LD_INT 23
31904: PUSH
31905: LD_INT 24
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: ST_TO_ADDR
31912: GO 31915
31914: POP
// result := ( chassis in result ) ;
31915: LD_ADDR_VAR 0 3
31919: PUSH
31920: LD_VAR 0 1
31924: PUSH
31925: LD_VAR 0 3
31929: IN
31930: ST_TO_ADDR
// end ;
31931: LD_VAR 0 3
31935: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31936: LD_INT 0
31938: PPUSH
31939: PPUSH
31940: PPUSH
31941: PPUSH
31942: PPUSH
31943: PPUSH
31944: PPUSH
// result := array ;
31945: LD_ADDR_VAR 0 5
31949: PUSH
31950: LD_VAR 0 1
31954: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31955: LD_VAR 0 1
31959: NOT
31960: IFTRUE 31969
31962: PUSH
31963: LD_VAR 0 2
31967: NOT
31968: OR
31969: IFTRUE 31978
31971: PUSH
31972: LD_VAR 0 3
31976: NOT
31977: OR
31978: IFTRUE 31992
31980: PUSH
31981: LD_VAR 0 2
31985: PUSH
31986: LD_VAR 0 1
31990: GREATER
31991: OR
31992: IFTRUE 32006
31994: PUSH
31995: LD_VAR 0 3
31999: PUSH
32000: LD_VAR 0 1
32004: GREATER
32005: OR
32006: IFFALSE 32010
// exit ;
32008: GO 32306
// if direction then
32010: LD_VAR 0 4
32014: IFFALSE 32078
// begin d := 1 ;
32016: LD_ADDR_VAR 0 9
32020: PUSH
32021: LD_INT 1
32023: ST_TO_ADDR
// if i_from > i_to then
32024: LD_VAR 0 2
32028: PUSH
32029: LD_VAR 0 3
32033: GREATER
32034: IFFALSE 32060
// length := ( array - i_from ) + i_to else
32036: LD_ADDR_VAR 0 11
32040: PUSH
32041: LD_VAR 0 1
32045: PUSH
32046: LD_VAR 0 2
32050: MINUS
32051: PUSH
32052: LD_VAR 0 3
32056: PLUS
32057: ST_TO_ADDR
32058: GO 32076
// length := i_to - i_from ;
32060: LD_ADDR_VAR 0 11
32064: PUSH
32065: LD_VAR 0 3
32069: PUSH
32070: LD_VAR 0 2
32074: MINUS
32075: ST_TO_ADDR
// end else
32076: GO 32139
// begin d := - 1 ;
32078: LD_ADDR_VAR 0 9
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: ST_TO_ADDR
// if i_from > i_to then
32087: LD_VAR 0 2
32091: PUSH
32092: LD_VAR 0 3
32096: GREATER
32097: IFFALSE 32117
// length := i_from - i_to else
32099: LD_ADDR_VAR 0 11
32103: PUSH
32104: LD_VAR 0 2
32108: PUSH
32109: LD_VAR 0 3
32113: MINUS
32114: ST_TO_ADDR
32115: GO 32139
// length := ( array - i_to ) + i_from ;
32117: LD_ADDR_VAR 0 11
32121: PUSH
32122: LD_VAR 0 1
32126: PUSH
32127: LD_VAR 0 3
32131: MINUS
32132: PUSH
32133: LD_VAR 0 2
32137: PLUS
32138: ST_TO_ADDR
// end ; if not length then
32139: LD_VAR 0 11
32143: NOT
32144: IFFALSE 32148
// exit ;
32146: GO 32306
// tmp := array ;
32148: LD_ADDR_VAR 0 10
32152: PUSH
32153: LD_VAR 0 1
32157: ST_TO_ADDR
// for i = 1 to length do
32158: LD_ADDR_VAR 0 6
32162: PUSH
32163: DOUBLE
32164: LD_INT 1
32166: DEC
32167: ST_TO_ADDR
32168: LD_VAR 0 11
32172: PUSH
32173: FOR_TO
32174: IFFALSE 32294
// begin for j = 1 to array do
32176: LD_ADDR_VAR 0 7
32180: PUSH
32181: DOUBLE
32182: LD_INT 1
32184: DEC
32185: ST_TO_ADDR
32186: LD_VAR 0 1
32190: PUSH
32191: FOR_TO
32192: IFFALSE 32280
// begin k := j + d ;
32194: LD_ADDR_VAR 0 8
32198: PUSH
32199: LD_VAR 0 7
32203: PUSH
32204: LD_VAR 0 9
32208: PLUS
32209: ST_TO_ADDR
// if k > array then
32210: LD_VAR 0 8
32214: PUSH
32215: LD_VAR 0 1
32219: GREATER
32220: IFFALSE 32230
// k := 1 ;
32222: LD_ADDR_VAR 0 8
32226: PUSH
32227: LD_INT 1
32229: ST_TO_ADDR
// if not k then
32230: LD_VAR 0 8
32234: NOT
32235: IFFALSE 32247
// k := array ;
32237: LD_ADDR_VAR 0 8
32241: PUSH
32242: LD_VAR 0 1
32246: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32247: LD_ADDR_VAR 0 10
32251: PUSH
32252: LD_VAR 0 10
32256: PPUSH
32257: LD_VAR 0 8
32261: PPUSH
32262: LD_VAR 0 1
32266: PUSH
32267: LD_VAR 0 7
32271: ARRAY
32272: PPUSH
32273: CALL_OW 1
32277: ST_TO_ADDR
// end ;
32278: GO 32191
32280: POP
32281: POP
// array := tmp ;
32282: LD_ADDR_VAR 0 1
32286: PUSH
32287: LD_VAR 0 10
32291: ST_TO_ADDR
// end ;
32292: GO 32173
32294: POP
32295: POP
// result := array ;
32296: LD_ADDR_VAR 0 5
32300: PUSH
32301: LD_VAR 0 1
32305: ST_TO_ADDR
// end ;
32306: LD_VAR 0 5
32310: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32311: LD_INT 0
32313: PPUSH
32314: PPUSH
// result := 0 ;
32315: LD_ADDR_VAR 0 3
32319: PUSH
32320: LD_INT 0
32322: ST_TO_ADDR
// if not array or not value in array then
32323: LD_VAR 0 1
32327: NOT
32328: IFTRUE 32343
32330: PUSH
32331: LD_VAR 0 2
32335: PUSH
32336: LD_VAR 0 1
32340: IN
32341: NOT
32342: OR
32343: IFFALSE 32347
// exit ;
32345: GO 32401
// for i = 1 to array do
32347: LD_ADDR_VAR 0 4
32351: PUSH
32352: DOUBLE
32353: LD_INT 1
32355: DEC
32356: ST_TO_ADDR
32357: LD_VAR 0 1
32361: PUSH
32362: FOR_TO
32363: IFFALSE 32399
// if value = array [ i ] then
32365: LD_VAR 0 2
32369: PUSH
32370: LD_VAR 0 1
32374: PUSH
32375: LD_VAR 0 4
32379: ARRAY
32380: EQUAL
32381: IFFALSE 32397
// begin result := i ;
32383: LD_ADDR_VAR 0 3
32387: PUSH
32388: LD_VAR 0 4
32392: ST_TO_ADDR
// exit ;
32393: POP
32394: POP
32395: GO 32401
// end ;
32397: GO 32362
32399: POP
32400: POP
// end ;
32401: LD_VAR 0 3
32405: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32406: LD_INT 0
32408: PPUSH
// vc_chassis := chassis ;
32409: LD_ADDR_OWVAR 37
32413: PUSH
32414: LD_VAR 0 1
32418: ST_TO_ADDR
// vc_engine := engine ;
32419: LD_ADDR_OWVAR 39
32423: PUSH
32424: LD_VAR 0 2
32428: ST_TO_ADDR
// vc_control := control ;
32429: LD_ADDR_OWVAR 38
32433: PUSH
32434: LD_VAR 0 3
32438: ST_TO_ADDR
// vc_weapon := weapon ;
32439: LD_ADDR_OWVAR 40
32443: PUSH
32444: LD_VAR 0 4
32448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32449: LD_ADDR_OWVAR 41
32453: PUSH
32454: LD_VAR 0 5
32458: ST_TO_ADDR
// end ;
32459: LD_VAR 0 6
32463: RET
// export function WantPlant ( unit ) ; var task ; begin
32464: LD_INT 0
32466: PPUSH
32467: PPUSH
// result := false ;
32468: LD_ADDR_VAR 0 2
32472: PUSH
32473: LD_INT 0
32475: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: LD_VAR 0 1
32485: PPUSH
32486: CALL_OW 437
32490: ST_TO_ADDR
// if task then
32491: LD_VAR 0 3
32495: IFFALSE 32523
// if task [ 1 ] [ 1 ] = p then
32497: LD_VAR 0 3
32501: PUSH
32502: LD_INT 1
32504: ARRAY
32505: PUSH
32506: LD_INT 1
32508: ARRAY
32509: PUSH
32510: LD_STRING p
32512: EQUAL
32513: IFFALSE 32523
// result := true ;
32515: LD_ADDR_VAR 0 2
32519: PUSH
32520: LD_INT 1
32522: ST_TO_ADDR
// end ;
32523: LD_VAR 0 2
32527: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32528: LD_INT 0
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
// if pos < 1 then
32534: LD_VAR 0 2
32538: PUSH
32539: LD_INT 1
32541: LESS
32542: IFFALSE 32546
// exit ;
32544: GO 32849
// if pos = 1 then
32546: LD_VAR 0 2
32550: PUSH
32551: LD_INT 1
32553: EQUAL
32554: IFFALSE 32587
// result := Replace ( arr , pos [ 1 ] , value ) else
32556: LD_ADDR_VAR 0 4
32560: PUSH
32561: LD_VAR 0 1
32565: PPUSH
32566: LD_VAR 0 2
32570: PUSH
32571: LD_INT 1
32573: ARRAY
32574: PPUSH
32575: LD_VAR 0 3
32579: PPUSH
32580: CALL_OW 1
32584: ST_TO_ADDR
32585: GO 32849
// begin tmp := arr ;
32587: LD_ADDR_VAR 0 6
32591: PUSH
32592: LD_VAR 0 1
32596: ST_TO_ADDR
// s_arr := [ tmp ] ;
32597: LD_ADDR_VAR 0 7
32601: PUSH
32602: LD_VAR 0 6
32606: PUSH
32607: EMPTY
32608: LIST
32609: ST_TO_ADDR
// for i = 1 to pos - 1 do
32610: LD_ADDR_VAR 0 5
32614: PUSH
32615: DOUBLE
32616: LD_INT 1
32618: DEC
32619: ST_TO_ADDR
32620: LD_VAR 0 2
32624: PUSH
32625: LD_INT 1
32627: MINUS
32628: PUSH
32629: FOR_TO
32630: IFFALSE 32675
// begin tmp := tmp [ pos [ i ] ] ;
32632: LD_ADDR_VAR 0 6
32636: PUSH
32637: LD_VAR 0 6
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_VAR 0 5
32651: ARRAY
32652: ARRAY
32653: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32654: LD_ADDR_VAR 0 7
32658: PUSH
32659: LD_VAR 0 7
32663: PUSH
32664: LD_VAR 0 6
32668: PUSH
32669: EMPTY
32670: LIST
32671: ADD
32672: ST_TO_ADDR
// end ;
32673: GO 32629
32675: POP
32676: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32677: LD_ADDR_VAR 0 6
32681: PUSH
32682: LD_VAR 0 6
32686: PPUSH
32687: LD_VAR 0 2
32691: PUSH
32692: LD_VAR 0 2
32696: ARRAY
32697: PPUSH
32698: LD_VAR 0 3
32702: PPUSH
32703: CALL_OW 1
32707: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32708: LD_ADDR_VAR 0 7
32712: PUSH
32713: LD_VAR 0 7
32717: PPUSH
32718: LD_VAR 0 7
32722: PPUSH
32723: LD_VAR 0 6
32727: PPUSH
32728: CALL_OW 1
32732: ST_TO_ADDR
// for i = s_arr downto 2 do
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: DOUBLE
32739: LD_VAR 0 7
32743: INC
32744: ST_TO_ADDR
32745: LD_INT 2
32747: PUSH
32748: FOR_DOWNTO
32749: IFFALSE 32833
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32751: LD_ADDR_VAR 0 6
32755: PUSH
32756: LD_VAR 0 7
32760: PUSH
32761: LD_VAR 0 5
32765: PUSH
32766: LD_INT 1
32768: MINUS
32769: ARRAY
32770: PPUSH
32771: LD_VAR 0 2
32775: PUSH
32776: LD_VAR 0 5
32780: PUSH
32781: LD_INT 1
32783: MINUS
32784: ARRAY
32785: PPUSH
32786: LD_VAR 0 7
32790: PUSH
32791: LD_VAR 0 5
32795: ARRAY
32796: PPUSH
32797: CALL_OW 1
32801: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32802: LD_ADDR_VAR 0 7
32806: PUSH
32807: LD_VAR 0 7
32811: PPUSH
32812: LD_VAR 0 5
32816: PUSH
32817: LD_INT 1
32819: MINUS
32820: PPUSH
32821: LD_VAR 0 6
32825: PPUSH
32826: CALL_OW 1
32830: ST_TO_ADDR
// end ;
32831: GO 32748
32833: POP
32834: POP
// result := s_arr [ 1 ] ;
32835: LD_ADDR_VAR 0 4
32839: PUSH
32840: LD_VAR 0 7
32844: PUSH
32845: LD_INT 1
32847: ARRAY
32848: ST_TO_ADDR
// end ; end ;
32849: LD_VAR 0 4
32853: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32854: LD_INT 0
32856: PPUSH
32857: PPUSH
// if not list then
32858: LD_VAR 0 1
32862: NOT
32863: IFFALSE 32867
// exit ;
32865: GO 32958
// i := list [ pos1 ] ;
32867: LD_ADDR_VAR 0 5
32871: PUSH
32872: LD_VAR 0 1
32876: PUSH
32877: LD_VAR 0 2
32881: ARRAY
32882: ST_TO_ADDR
// if not i then
32883: LD_VAR 0 5
32887: NOT
32888: IFFALSE 32892
// exit ;
32890: GO 32958
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32892: LD_ADDR_VAR 0 1
32896: PUSH
32897: LD_VAR 0 1
32901: PPUSH
32902: LD_VAR 0 2
32906: PPUSH
32907: LD_VAR 0 1
32911: PUSH
32912: LD_VAR 0 3
32916: ARRAY
32917: PPUSH
32918: CALL_OW 1
32922: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32923: LD_ADDR_VAR 0 1
32927: PUSH
32928: LD_VAR 0 1
32932: PPUSH
32933: LD_VAR 0 3
32937: PPUSH
32938: LD_VAR 0 5
32942: PPUSH
32943: CALL_OW 1
32947: ST_TO_ADDR
// result := list ;
32948: LD_ADDR_VAR 0 4
32952: PUSH
32953: LD_VAR 0 1
32957: ST_TO_ADDR
// end ;
32958: LD_VAR 0 4
32962: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32963: LD_INT 0
32965: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32966: LD_ADDR_VAR 0 5
32970: PUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 250
32980: PPUSH
32981: LD_VAR 0 1
32985: PPUSH
32986: CALL_OW 251
32990: PPUSH
32991: LD_VAR 0 2
32995: PPUSH
32996: LD_VAR 0 3
33000: PPUSH
33001: LD_VAR 0 4
33005: PPUSH
33006: CALL 33388 0 5
33010: ST_TO_ADDR
// end ;
33011: LD_VAR 0 5
33015: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33016: LD_INT 0
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
// if not list or not unit then
33022: LD_VAR 0 2
33026: NOT
33027: IFTRUE 33036
33029: PUSH
33030: LD_VAR 0 1
33034: NOT
33035: OR
33036: IFFALSE 33040
// exit ;
33038: GO 33383
// result := [ ] ;
33040: LD_ADDR_VAR 0 5
33044: PUSH
33045: EMPTY
33046: ST_TO_ADDR
// for i in list do
33047: LD_ADDR_VAR 0 6
33051: PUSH
33052: LD_VAR 0 2
33056: PUSH
33057: FOR_IN
33058: IFFALSE 33276
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33060: LD_ADDR_VAR 0 8
33064: PUSH
33065: LD_VAR 0 1
33069: PPUSH
33070: LD_VAR 0 6
33074: PUSH
33075: LD_INT 1
33077: ARRAY
33078: PPUSH
33079: LD_VAR 0 6
33083: PUSH
33084: LD_INT 2
33086: ARRAY
33087: PPUSH
33088: CALL_OW 297
33092: ST_TO_ADDR
// if not Count ( result ) then
33093: LD_VAR 0 5
33097: PPUSH
33098: CALL 29644 0 1
33102: NOT
33103: IFFALSE 33136
// begin result := Join ( result , [ i , tmp ] ) ;
33105: LD_ADDR_VAR 0 5
33109: PUSH
33110: LD_VAR 0 5
33114: PPUSH
33115: LD_VAR 0 6
33119: PUSH
33120: LD_VAR 0 8
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL 65576 0 2
33133: ST_TO_ADDR
// continue ;
33134: GO 33057
// end ; if result [ result ] [ 2 ] <= tmp then
33136: LD_VAR 0 5
33140: PUSH
33141: LD_VAR 0 5
33145: ARRAY
33146: PUSH
33147: LD_INT 2
33149: ARRAY
33150: PUSH
33151: LD_VAR 0 8
33155: LESSEQUAL
33156: IFFALSE 33189
// result := Join ( result , [ i , tmp ] ) else
33158: LD_ADDR_VAR 0 5
33162: PUSH
33163: LD_VAR 0 5
33167: PPUSH
33168: LD_VAR 0 6
33172: PUSH
33173: LD_VAR 0 8
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PPUSH
33182: CALL 65576 0 2
33186: ST_TO_ADDR
33187: GO 33274
// begin for j := 1 to Count ( result ) do
33189: LD_ADDR_VAR 0 7
33193: PUSH
33194: DOUBLE
33195: LD_INT 1
33197: DEC
33198: ST_TO_ADDR
33199: LD_VAR 0 5
33203: PPUSH
33204: CALL 29644 0 1
33208: PUSH
33209: FOR_TO
33210: IFFALSE 33272
// begin if tmp < result [ j ] [ 2 ] then
33212: LD_VAR 0 8
33216: PUSH
33217: LD_VAR 0 5
33221: PUSH
33222: LD_VAR 0 7
33226: ARRAY
33227: PUSH
33228: LD_INT 2
33230: ARRAY
33231: LESS
33232: IFFALSE 33270
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33234: LD_ADDR_VAR 0 5
33238: PUSH
33239: LD_VAR 0 5
33243: PPUSH
33244: LD_VAR 0 7
33248: PPUSH
33249: LD_VAR 0 6
33253: PUSH
33254: LD_VAR 0 8
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PPUSH
33263: CALL_OW 2
33267: ST_TO_ADDR
// break ;
33268: GO 33272
// end ; end ;
33270: GO 33209
33272: POP
33273: POP
// end ; end ;
33274: GO 33057
33276: POP
33277: POP
// if result and not asc then
33278: LD_VAR 0 5
33282: IFFALSE 33291
33284: PUSH
33285: LD_VAR 0 3
33289: NOT
33290: AND
33291: IFFALSE 33308
// result := ReverseArray ( result ) ;
33293: LD_ADDR_VAR 0 5
33297: PUSH
33298: LD_VAR 0 5
33302: PPUSH
33303: CALL 60666 0 1
33307: ST_TO_ADDR
// tmp := [ ] ;
33308: LD_ADDR_VAR 0 8
33312: PUSH
33313: EMPTY
33314: ST_TO_ADDR
// if mode then
33315: LD_VAR 0 4
33319: IFFALSE 33383
// begin for i := 1 to result do
33321: LD_ADDR_VAR 0 6
33325: PUSH
33326: DOUBLE
33327: LD_INT 1
33329: DEC
33330: ST_TO_ADDR
33331: LD_VAR 0 5
33335: PUSH
33336: FOR_TO
33337: IFFALSE 33371
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33339: LD_ADDR_VAR 0 8
33343: PUSH
33344: LD_VAR 0 8
33348: PPUSH
33349: LD_VAR 0 5
33353: PUSH
33354: LD_VAR 0 6
33358: ARRAY
33359: PUSH
33360: LD_INT 1
33362: ARRAY
33363: PPUSH
33364: CALL 65576 0 2
33368: ST_TO_ADDR
33369: GO 33336
33371: POP
33372: POP
// result := tmp ;
33373: LD_ADDR_VAR 0 5
33377: PUSH
33378: LD_VAR 0 8
33382: ST_TO_ADDR
// end ; end ;
33383: LD_VAR 0 5
33387: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
// if not list then
33394: LD_VAR 0 3
33398: NOT
33399: IFFALSE 33403
// exit ;
33401: GO 33793
// result := [ ] ;
33403: LD_ADDR_VAR 0 6
33407: PUSH
33408: EMPTY
33409: ST_TO_ADDR
// for i in list do
33410: LD_ADDR_VAR 0 7
33414: PUSH
33415: LD_VAR 0 3
33419: PUSH
33420: FOR_IN
33421: IFFALSE 33623
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33423: LD_ADDR_VAR 0 9
33427: PUSH
33428: LD_VAR 0 7
33432: PPUSH
33433: LD_VAR 0 1
33437: PPUSH
33438: LD_VAR 0 2
33442: PPUSH
33443: CALL_OW 297
33447: ST_TO_ADDR
// if not result then
33448: LD_VAR 0 6
33452: NOT
33453: IFFALSE 33479
// result := [ [ i , tmp ] ] else
33455: LD_ADDR_VAR 0 6
33459: PUSH
33460: LD_VAR 0 7
33464: PUSH
33465: LD_VAR 0 9
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: EMPTY
33475: LIST
33476: ST_TO_ADDR
33477: GO 33621
// begin if result [ result ] [ 2 ] <= tmp then
33479: LD_VAR 0 6
33483: PUSH
33484: LD_VAR 0 6
33488: ARRAY
33489: PUSH
33490: LD_INT 2
33492: ARRAY
33493: PUSH
33494: LD_VAR 0 9
33498: LESSEQUAL
33499: IFFALSE 33541
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33501: LD_ADDR_VAR 0 6
33505: PUSH
33506: LD_VAR 0 6
33510: PPUSH
33511: LD_VAR 0 6
33515: PUSH
33516: LD_INT 1
33518: PLUS
33519: PPUSH
33520: LD_VAR 0 7
33524: PUSH
33525: LD_VAR 0 9
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PPUSH
33534: CALL_OW 2
33538: ST_TO_ADDR
33539: GO 33621
// for j := 1 to result do
33541: LD_ADDR_VAR 0 8
33545: PUSH
33546: DOUBLE
33547: LD_INT 1
33549: DEC
33550: ST_TO_ADDR
33551: LD_VAR 0 6
33555: PUSH
33556: FOR_TO
33557: IFFALSE 33619
// begin if tmp < result [ j ] [ 2 ] then
33559: LD_VAR 0 9
33563: PUSH
33564: LD_VAR 0 6
33568: PUSH
33569: LD_VAR 0 8
33573: ARRAY
33574: PUSH
33575: LD_INT 2
33577: ARRAY
33578: LESS
33579: IFFALSE 33617
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33581: LD_ADDR_VAR 0 6
33585: PUSH
33586: LD_VAR 0 6
33590: PPUSH
33591: LD_VAR 0 8
33595: PPUSH
33596: LD_VAR 0 7
33600: PUSH
33601: LD_VAR 0 9
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PPUSH
33610: CALL_OW 2
33614: ST_TO_ADDR
// break ;
33615: GO 33619
// end ; end ;
33617: GO 33556
33619: POP
33620: POP
// end ; end ;
33621: GO 33420
33623: POP
33624: POP
// if result and not asc then
33625: LD_VAR 0 6
33629: IFFALSE 33638
33631: PUSH
33632: LD_VAR 0 4
33636: NOT
33637: AND
33638: IFFALSE 33713
// begin tmp := result ;
33640: LD_ADDR_VAR 0 9
33644: PUSH
33645: LD_VAR 0 6
33649: ST_TO_ADDR
// for i = tmp downto 1 do
33650: LD_ADDR_VAR 0 7
33654: PUSH
33655: DOUBLE
33656: LD_VAR 0 9
33660: INC
33661: ST_TO_ADDR
33662: LD_INT 1
33664: PUSH
33665: FOR_DOWNTO
33666: IFFALSE 33711
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33668: LD_ADDR_VAR 0 6
33672: PUSH
33673: LD_VAR 0 6
33677: PPUSH
33678: LD_VAR 0 9
33682: PUSH
33683: LD_VAR 0 7
33687: MINUS
33688: PUSH
33689: LD_INT 1
33691: PLUS
33692: PPUSH
33693: LD_VAR 0 9
33697: PUSH
33698: LD_VAR 0 7
33702: ARRAY
33703: PPUSH
33704: CALL_OW 1
33708: ST_TO_ADDR
33709: GO 33665
33711: POP
33712: POP
// end ; tmp := [ ] ;
33713: LD_ADDR_VAR 0 9
33717: PUSH
33718: EMPTY
33719: ST_TO_ADDR
// if mode then
33720: LD_VAR 0 5
33724: IFFALSE 33793
// begin for i = 1 to result do
33726: LD_ADDR_VAR 0 7
33730: PUSH
33731: DOUBLE
33732: LD_INT 1
33734: DEC
33735: ST_TO_ADDR
33736: LD_VAR 0 6
33740: PUSH
33741: FOR_TO
33742: IFFALSE 33781
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33744: LD_ADDR_VAR 0 9
33748: PUSH
33749: LD_VAR 0 9
33753: PPUSH
33754: LD_VAR 0 7
33758: PPUSH
33759: LD_VAR 0 6
33763: PUSH
33764: LD_VAR 0 7
33768: ARRAY
33769: PUSH
33770: LD_INT 1
33772: ARRAY
33773: PPUSH
33774: CALL_OW 1
33778: ST_TO_ADDR
33779: GO 33741
33781: POP
33782: POP
// result := tmp ;
33783: LD_ADDR_VAR 0 6
33787: PUSH
33788: LD_VAR 0 9
33792: ST_TO_ADDR
// end ; end ;
33793: LD_VAR 0 6
33797: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33806: LD_ADDR_VAR 0 5
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: EMPTY
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
// if not x or not y then
33828: LD_VAR 0 2
33832: NOT
33833: IFTRUE 33842
33835: PUSH
33836: LD_VAR 0 3
33840: NOT
33841: OR
33842: IFFALSE 33846
// exit ;
33844: GO 35502
// if not range then
33846: LD_VAR 0 4
33850: NOT
33851: IFFALSE 33861
// range := 10 ;
33853: LD_ADDR_VAR 0 4
33857: PUSH
33858: LD_INT 10
33860: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33861: LD_ADDR_VAR 0 8
33865: PUSH
33866: LD_INT 81
33868: PUSH
33869: LD_VAR 0 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 92
33880: PUSH
33881: LD_VAR 0 2
33885: PUSH
33886: LD_VAR 0 3
33890: PUSH
33891: LD_VAR 0 4
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: LD_INT 21
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: PPUSH
33924: CALL_OW 69
33928: ST_TO_ADDR
// if not tmp then
33929: LD_VAR 0 8
33933: NOT
33934: IFFALSE 33938
// exit ;
33936: GO 35502
// for i in tmp do
33938: LD_ADDR_VAR 0 6
33942: PUSH
33943: LD_VAR 0 8
33947: PUSH
33948: FOR_IN
33949: IFFALSE 35477
// begin points := [ 0 , 0 , 0 ] ;
33951: LD_ADDR_VAR 0 9
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: ST_TO_ADDR
// bpoints := 1 ;
33970: LD_ADDR_VAR 0 10
33974: PUSH
33975: LD_INT 1
33977: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33978: LD_VAR 0 6
33982: PPUSH
33983: CALL_OW 247
33987: PUSH
33988: LD_INT 1
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 33996
33994: GO 34578
33996: POP
// begin if GetClass ( i ) = 1 then
33997: LD_VAR 0 6
34001: PPUSH
34002: CALL_OW 257
34006: PUSH
34007: LD_INT 1
34009: EQUAL
34010: IFFALSE 34031
// points := [ 10 , 5 , 3 ] ;
34012: LD_ADDR_VAR 0 9
34016: PUSH
34017: LD_INT 10
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34031: LD_VAR 0 6
34035: PPUSH
34036: CALL_OW 257
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: LD_INT 4
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: IN
34055: IFFALSE 34076
// points := [ 3 , 2 , 1 ] ;
34057: LD_ADDR_VAR 0 9
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34076: LD_VAR 0 6
34080: PPUSH
34081: CALL_OW 257
34085: PUSH
34086: LD_INT 5
34088: EQUAL
34089: IFFALSE 34110
// points := [ 130 , 5 , 2 ] ;
34091: LD_ADDR_VAR 0 9
34095: PUSH
34096: LD_INT 130
34098: PUSH
34099: LD_INT 5
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34110: LD_VAR 0 6
34114: PPUSH
34115: CALL_OW 257
34119: PUSH
34120: LD_INT 8
34122: EQUAL
34123: IFFALSE 34144
// points := [ 35 , 35 , 30 ] ;
34125: LD_ADDR_VAR 0 9
34129: PUSH
34130: LD_INT 35
34132: PUSH
34133: LD_INT 35
34135: PUSH
34136: LD_INT 30
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34144: LD_VAR 0 6
34148: PPUSH
34149: CALL_OW 257
34153: PUSH
34154: LD_INT 9
34156: EQUAL
34157: IFFALSE 34178
// points := [ 20 , 55 , 40 ] ;
34159: LD_ADDR_VAR 0 9
34163: PUSH
34164: LD_INT 20
34166: PUSH
34167: LD_INT 55
34169: PUSH
34170: LD_INT 40
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34178: LD_VAR 0 6
34182: PPUSH
34183: CALL_OW 257
34187: PUSH
34188: LD_INT 12
34190: PUSH
34191: LD_INT 16
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: IN
34198: IFFALSE 34219
// points := [ 5 , 3 , 2 ] ;
34200: LD_ADDR_VAR 0 9
34204: PUSH
34205: LD_INT 5
34207: PUSH
34208: LD_INT 3
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34219: LD_VAR 0 6
34223: PPUSH
34224: CALL_OW 257
34228: PUSH
34229: LD_INT 17
34231: EQUAL
34232: IFFALSE 34253
// points := [ 100 , 50 , 75 ] ;
34234: LD_ADDR_VAR 0 9
34238: PUSH
34239: LD_INT 100
34241: PUSH
34242: LD_INT 50
34244: PUSH
34245: LD_INT 75
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34253: LD_VAR 0 6
34257: PPUSH
34258: CALL_OW 257
34262: PUSH
34263: LD_INT 15
34265: EQUAL
34266: IFFALSE 34287
// points := [ 10 , 5 , 3 ] ;
34268: LD_ADDR_VAR 0 9
34272: PUSH
34273: LD_INT 10
34275: PUSH
34276: LD_INT 5
34278: PUSH
34279: LD_INT 3
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34287: LD_VAR 0 6
34291: PPUSH
34292: CALL_OW 257
34296: PUSH
34297: LD_INT 14
34299: EQUAL
34300: IFFALSE 34321
// points := [ 10 , 0 , 0 ] ;
34302: LD_ADDR_VAR 0 9
34306: PUSH
34307: LD_INT 10
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34321: LD_VAR 0 6
34325: PPUSH
34326: CALL_OW 257
34330: PUSH
34331: LD_INT 11
34333: EQUAL
34334: IFFALSE 34355
// points := [ 30 , 10 , 5 ] ;
34336: LD_ADDR_VAR 0 9
34340: PUSH
34341: LD_INT 30
34343: PUSH
34344: LD_INT 10
34346: PUSH
34347: LD_INT 5
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_INT 5
34362: PPUSH
34363: CALL_OW 321
34367: PUSH
34368: LD_INT 2
34370: EQUAL
34371: IFFALSE 34388
// bpoints := bpoints * 1.8 ;
34373: LD_ADDR_VAR 0 10
34377: PUSH
34378: LD_VAR 0 10
34382: PUSH
34383: LD_REAL  1.80000000000000E+0000
34386: MUL
34387: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34388: LD_VAR 0 6
34392: PPUSH
34393: CALL_OW 257
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 3
34406: PUSH
34407: LD_INT 4
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: IN
34416: IFFALSE 34436
34418: PUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: LD_INT 51
34426: PPUSH
34427: CALL_OW 321
34431: PUSH
34432: LD_INT 2
34434: EQUAL
34435: AND
34436: IFFALSE 34453
// bpoints := bpoints * 1.2 ;
34438: LD_ADDR_VAR 0 10
34442: PUSH
34443: LD_VAR 0 10
34447: PUSH
34448: LD_REAL  1.20000000000000E+0000
34451: MUL
34452: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34453: LD_VAR 0 6
34457: PPUSH
34458: CALL_OW 257
34462: PUSH
34463: LD_INT 5
34465: PUSH
34466: LD_INT 7
34468: PUSH
34469: LD_INT 9
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: IN
34477: IFFALSE 34497
34479: PUSH
34480: LD_VAR 0 1
34484: PPUSH
34485: LD_INT 52
34487: PPUSH
34488: CALL_OW 321
34492: PUSH
34493: LD_INT 2
34495: EQUAL
34496: AND
34497: IFFALSE 34514
// bpoints := bpoints * 1.5 ;
34499: LD_ADDR_VAR 0 10
34503: PUSH
34504: LD_VAR 0 10
34508: PUSH
34509: LD_REAL  1.50000000000000E+0000
34512: MUL
34513: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34514: LD_VAR 0 1
34518: PPUSH
34519: LD_INT 66
34521: PPUSH
34522: CALL_OW 321
34526: PUSH
34527: LD_INT 2
34529: EQUAL
34530: IFFALSE 34547
// bpoints := bpoints * 1.1 ;
34532: LD_ADDR_VAR 0 10
34536: PUSH
34537: LD_VAR 0 10
34541: PUSH
34542: LD_REAL  1.10000000000000E+0000
34545: MUL
34546: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34547: LD_ADDR_VAR 0 10
34551: PUSH
34552: LD_VAR 0 10
34556: PUSH
34557: LD_VAR 0 6
34561: PPUSH
34562: LD_INT 1
34564: PPUSH
34565: CALL_OW 259
34569: PUSH
34570: LD_REAL  1.15000000000000E+0000
34573: MUL
34574: MUL
34575: ST_TO_ADDR
// end ; unit_vehicle :
34576: GO 35406
34578: LD_INT 2
34580: DOUBLE
34581: EQUAL
34582: IFTRUE 34586
34584: GO 35394
34586: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34587: LD_VAR 0 6
34591: PPUSH
34592: CALL_OW 264
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 42
34602: PUSH
34603: LD_INT 24
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: IN
34611: IFFALSE 34632
// points := [ 25 , 5 , 3 ] ;
34613: LD_ADDR_VAR 0 9
34617: PUSH
34618: LD_INT 25
34620: PUSH
34621: LD_INT 5
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34632: LD_VAR 0 6
34636: PPUSH
34637: CALL_OW 264
34641: PUSH
34642: LD_INT 4
34644: PUSH
34645: LD_INT 43
34647: PUSH
34648: LD_INT 25
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: IN
34656: IFFALSE 34677
// points := [ 40 , 15 , 5 ] ;
34658: LD_ADDR_VAR 0 9
34662: PUSH
34663: LD_INT 40
34665: PUSH
34666: LD_INT 15
34668: PUSH
34669: LD_INT 5
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34677: LD_VAR 0 6
34681: PPUSH
34682: CALL_OW 264
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: LD_INT 23
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: IN
34697: IFFALSE 34718
// points := [ 7 , 25 , 8 ] ;
34699: LD_ADDR_VAR 0 9
34703: PUSH
34704: LD_INT 7
34706: PUSH
34707: LD_INT 25
34709: PUSH
34710: LD_INT 8
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34718: LD_VAR 0 6
34722: PPUSH
34723: CALL_OW 264
34727: PUSH
34728: LD_INT 5
34730: PUSH
34731: LD_INT 27
34733: PUSH
34734: LD_INT 44
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: IN
34742: IFFALSE 34763
// points := [ 14 , 50 , 16 ] ;
34744: LD_ADDR_VAR 0 9
34748: PUSH
34749: LD_INT 14
34751: PUSH
34752: LD_INT 50
34754: PUSH
34755: LD_INT 16
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34763: LD_VAR 0 6
34767: PPUSH
34768: CALL_OW 264
34772: PUSH
34773: LD_INT 6
34775: PUSH
34776: LD_INT 46
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: IN
34783: IFFALSE 34804
// points := [ 32 , 120 , 70 ] ;
34785: LD_ADDR_VAR 0 9
34789: PUSH
34790: LD_INT 32
34792: PUSH
34793: LD_INT 120
34795: PUSH
34796: LD_INT 70
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34804: LD_VAR 0 6
34808: PPUSH
34809: CALL_OW 264
34813: PUSH
34814: LD_INT 7
34816: PUSH
34817: LD_INT 28
34819: PUSH
34820: LD_INT 45
34822: PUSH
34823: LD_INT 92
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: IN
34832: IFFALSE 34853
// points := [ 35 , 20 , 45 ] ;
34834: LD_ADDR_VAR 0 9
34838: PUSH
34839: LD_INT 35
34841: PUSH
34842: LD_INT 20
34844: PUSH
34845: LD_INT 45
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34853: LD_VAR 0 6
34857: PPUSH
34858: CALL_OW 264
34862: PUSH
34863: LD_INT 47
34865: PUSH
34866: EMPTY
34867: LIST
34868: IN
34869: IFFALSE 34890
// points := [ 67 , 45 , 75 ] ;
34871: LD_ADDR_VAR 0 9
34875: PUSH
34876: LD_INT 67
34878: PUSH
34879: LD_INT 45
34881: PUSH
34882: LD_INT 75
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34890: LD_VAR 0 6
34894: PPUSH
34895: CALL_OW 264
34899: PUSH
34900: LD_INT 26
34902: PUSH
34903: EMPTY
34904: LIST
34905: IN
34906: IFFALSE 34927
// points := [ 120 , 30 , 80 ] ;
34908: LD_ADDR_VAR 0 9
34912: PUSH
34913: LD_INT 120
34915: PUSH
34916: LD_INT 30
34918: PUSH
34919: LD_INT 80
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34927: LD_VAR 0 6
34931: PPUSH
34932: CALL_OW 264
34936: PUSH
34937: LD_INT 22
34939: PUSH
34940: EMPTY
34941: LIST
34942: IN
34943: IFFALSE 34964
// points := [ 40 , 1 , 1 ] ;
34945: LD_ADDR_VAR 0 9
34949: PUSH
34950: LD_INT 40
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34964: LD_VAR 0 6
34968: PPUSH
34969: CALL_OW 264
34973: PUSH
34974: LD_INT 29
34976: PUSH
34977: EMPTY
34978: LIST
34979: IN
34980: IFFALSE 35001
// points := [ 70 , 200 , 400 ] ;
34982: LD_ADDR_VAR 0 9
34986: PUSH
34987: LD_INT 70
34989: PUSH
34990: LD_INT 200
34992: PUSH
34993: LD_INT 400
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35001: LD_VAR 0 6
35005: PPUSH
35006: CALL_OW 264
35010: PUSH
35011: LD_INT 14
35013: PUSH
35014: LD_INT 53
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: IN
35021: IFFALSE 35042
// points := [ 40 , 10 , 20 ] ;
35023: LD_ADDR_VAR 0 9
35027: PUSH
35028: LD_INT 40
35030: PUSH
35031: LD_INT 10
35033: PUSH
35034: LD_INT 20
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35042: LD_VAR 0 6
35046: PPUSH
35047: CALL_OW 264
35051: PUSH
35052: LD_INT 9
35054: PUSH
35055: EMPTY
35056: LIST
35057: IN
35058: IFFALSE 35079
// points := [ 5 , 70 , 20 ] ;
35060: LD_ADDR_VAR 0 9
35064: PUSH
35065: LD_INT 5
35067: PUSH
35068: LD_INT 70
35070: PUSH
35071: LD_INT 20
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35079: LD_VAR 0 6
35083: PPUSH
35084: CALL_OW 264
35088: PUSH
35089: LD_INT 10
35091: PUSH
35092: EMPTY
35093: LIST
35094: IN
35095: IFFALSE 35116
// points := [ 35 , 110 , 70 ] ;
35097: LD_ADDR_VAR 0 9
35101: PUSH
35102: LD_INT 35
35104: PUSH
35105: LD_INT 110
35107: PUSH
35108: LD_INT 70
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35116: LD_VAR 0 6
35120: PPUSH
35121: CALL_OW 265
35125: PUSH
35126: LD_INT 25
35128: EQUAL
35129: IFFALSE 35150
// points := [ 80 , 65 , 100 ] ;
35131: LD_ADDR_VAR 0 9
35135: PUSH
35136: LD_INT 80
35138: PUSH
35139: LD_INT 65
35141: PUSH
35142: LD_INT 100
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35150: LD_VAR 0 6
35154: PPUSH
35155: CALL_OW 263
35159: PUSH
35160: LD_INT 1
35162: EQUAL
35163: IFFALSE 35198
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35165: LD_ADDR_VAR 0 10
35169: PUSH
35170: LD_VAR 0 10
35174: PUSH
35175: LD_VAR 0 6
35179: PPUSH
35180: CALL_OW 311
35184: PPUSH
35185: LD_INT 3
35187: PPUSH
35188: CALL_OW 259
35192: PUSH
35193: LD_INT 4
35195: MUL
35196: MUL
35197: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35198: LD_VAR 0 6
35202: PPUSH
35203: CALL_OW 263
35207: PUSH
35208: LD_INT 2
35210: EQUAL
35211: IFFALSE 35262
// begin j := IsControledBy ( i ) ;
35213: LD_ADDR_VAR 0 7
35217: PUSH
35218: LD_VAR 0 6
35222: PPUSH
35223: CALL_OW 312
35227: ST_TO_ADDR
// if j then
35228: LD_VAR 0 7
35232: IFFALSE 35262
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35234: LD_ADDR_VAR 0 10
35238: PUSH
35239: LD_VAR 0 10
35243: PUSH
35244: LD_VAR 0 7
35248: PPUSH
35249: LD_INT 3
35251: PPUSH
35252: CALL_OW 259
35256: PUSH
35257: LD_INT 3
35259: MUL
35260: MUL
35261: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35262: LD_VAR 0 6
35266: PPUSH
35267: CALL_OW 264
35271: PUSH
35272: LD_INT 5
35274: PUSH
35275: LD_INT 6
35277: PUSH
35278: LD_INT 46
35280: PUSH
35281: LD_INT 44
35283: PUSH
35284: LD_INT 47
35286: PUSH
35287: LD_INT 45
35289: PUSH
35290: LD_INT 28
35292: PUSH
35293: LD_INT 7
35295: PUSH
35296: LD_INT 27
35298: PUSH
35299: LD_INT 29
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: IN
35314: IFFALSE 35334
35316: PUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: LD_INT 52
35324: PPUSH
35325: CALL_OW 321
35329: PUSH
35330: LD_INT 2
35332: EQUAL
35333: AND
35334: IFFALSE 35351
// bpoints := bpoints * 1.2 ;
35336: LD_ADDR_VAR 0 10
35340: PUSH
35341: LD_VAR 0 10
35345: PUSH
35346: LD_REAL  1.20000000000000E+0000
35349: MUL
35350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35351: LD_VAR 0 6
35355: PPUSH
35356: CALL_OW 264
35360: PUSH
35361: LD_INT 6
35363: PUSH
35364: LD_INT 46
35366: PUSH
35367: LD_INT 47
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: IN
35375: IFFALSE 35392
// bpoints := bpoints * 1.2 ;
35377: LD_ADDR_VAR 0 10
35381: PUSH
35382: LD_VAR 0 10
35386: PUSH
35387: LD_REAL  1.20000000000000E+0000
35390: MUL
35391: ST_TO_ADDR
// end ; unit_building :
35392: GO 35406
35394: LD_INT 3
35396: DOUBLE
35397: EQUAL
35398: IFTRUE 35402
35400: GO 35405
35402: POP
// ; end ;
35403: GO 35406
35405: POP
// for j = 1 to 3 do
35406: LD_ADDR_VAR 0 7
35410: PUSH
35411: DOUBLE
35412: LD_INT 1
35414: DEC
35415: ST_TO_ADDR
35416: LD_INT 3
35418: PUSH
35419: FOR_TO
35420: IFFALSE 35473
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35422: LD_ADDR_VAR 0 5
35426: PUSH
35427: LD_VAR 0 5
35431: PPUSH
35432: LD_VAR 0 7
35436: PPUSH
35437: LD_VAR 0 5
35441: PUSH
35442: LD_VAR 0 7
35446: ARRAY
35447: PUSH
35448: LD_VAR 0 9
35452: PUSH
35453: LD_VAR 0 7
35457: ARRAY
35458: PUSH
35459: LD_VAR 0 10
35463: MUL
35464: PLUS
35465: PPUSH
35466: CALL_OW 1
35470: ST_TO_ADDR
35471: GO 35419
35473: POP
35474: POP
// end ;
35475: GO 33948
35477: POP
35478: POP
// result := Replace ( result , 4 , tmp ) ;
35479: LD_ADDR_VAR 0 5
35483: PUSH
35484: LD_VAR 0 5
35488: PPUSH
35489: LD_INT 4
35491: PPUSH
35492: LD_VAR 0 8
35496: PPUSH
35497: CALL_OW 1
35501: ST_TO_ADDR
// end ;
35502: LD_VAR 0 5
35506: RET
// export function DangerAtRange ( unit , range ) ; begin
35507: LD_INT 0
35509: PPUSH
// if not unit then
35510: LD_VAR 0 1
35514: NOT
35515: IFFALSE 35519
// exit ;
35517: GO 35564
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35519: LD_ADDR_VAR 0 3
35523: PUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: CALL_OW 255
35533: PPUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 250
35543: PPUSH
35544: LD_VAR 0 1
35548: PPUSH
35549: CALL_OW 251
35553: PPUSH
35554: LD_VAR 0 2
35558: PPUSH
35559: CALL 33798 0 4
35563: ST_TO_ADDR
// end ;
35564: LD_VAR 0 3
35568: RET
// export function DangerInArea ( side , area ) ; begin
35569: LD_INT 0
35571: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: LD_VAR 0 2
35581: PPUSH
35582: LD_INT 81
35584: PUSH
35585: LD_VAR 0 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PPUSH
35594: CALL_OW 70
35598: ST_TO_ADDR
// end ;
35599: LD_VAR 0 3
35603: RET
// export function IsExtension ( b ) ; begin
35604: LD_INT 0
35606: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35607: LD_ADDR_VAR 0 2
35611: PUSH
35612: LD_VAR 0 1
35616: PUSH
35617: LD_INT 23
35619: PUSH
35620: LD_INT 20
35622: PUSH
35623: LD_INT 22
35625: PUSH
35626: LD_INT 17
35628: PUSH
35629: LD_INT 24
35631: PUSH
35632: LD_INT 21
35634: PUSH
35635: LD_INT 19
35637: PUSH
35638: LD_INT 16
35640: PUSH
35641: LD_INT 25
35643: PUSH
35644: LD_INT 18
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: IN
35659: ST_TO_ADDR
// end ;
35660: LD_VAR 0 2
35664: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35665: LD_INT 0
35667: PPUSH
35668: PPUSH
35669: PPUSH
// result := [ ] ;
35670: LD_ADDR_VAR 0 4
35674: PUSH
35675: EMPTY
35676: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35677: LD_ADDR_VAR 0 5
35681: PUSH
35682: LD_VAR 0 2
35686: PPUSH
35687: LD_INT 21
35689: PUSH
35690: LD_INT 3
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PPUSH
35697: CALL_OW 70
35701: ST_TO_ADDR
// if not tmp then
35702: LD_VAR 0 5
35706: NOT
35707: IFFALSE 35711
// exit ;
35709: GO 35775
// if checkLink then
35711: LD_VAR 0 3
35715: IFFALSE 35765
// begin for i in tmp do
35717: LD_ADDR_VAR 0 6
35721: PUSH
35722: LD_VAR 0 5
35726: PUSH
35727: FOR_IN
35728: IFFALSE 35763
// if GetBase ( i ) <> base then
35730: LD_VAR 0 6
35734: PPUSH
35735: CALL_OW 274
35739: PUSH
35740: LD_VAR 0 1
35744: NONEQUAL
35745: IFFALSE 35761
// ComLinkToBase ( base , i ) ;
35747: LD_VAR 0 1
35751: PPUSH
35752: LD_VAR 0 6
35756: PPUSH
35757: CALL_OW 169
35761: GO 35727
35763: POP
35764: POP
// end ; result := tmp ;
35765: LD_ADDR_VAR 0 4
35769: PUSH
35770: LD_VAR 0 5
35774: ST_TO_ADDR
// end ;
35775: LD_VAR 0 4
35779: RET
// export function ComComplete ( units , b ) ; var i ; begin
35780: LD_INT 0
35782: PPUSH
35783: PPUSH
// if not units then
35784: LD_VAR 0 1
35788: NOT
35789: IFFALSE 35793
// exit ;
35791: GO 35883
// for i in units do
35793: LD_ADDR_VAR 0 4
35797: PUSH
35798: LD_VAR 0 1
35802: PUSH
35803: FOR_IN
35804: IFFALSE 35881
// if BuildingStatus ( b ) = bs_build then
35806: LD_VAR 0 2
35810: PPUSH
35811: CALL_OW 461
35815: PUSH
35816: LD_INT 1
35818: EQUAL
35819: IFFALSE 35879
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35821: LD_VAR 0 4
35825: PPUSH
35826: LD_STRING h
35828: PUSH
35829: LD_VAR 0 2
35833: PPUSH
35834: CALL_OW 250
35838: PUSH
35839: LD_VAR 0 2
35843: PPUSH
35844: CALL_OW 251
35848: PUSH
35849: LD_VAR 0 2
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: PPUSH
35875: CALL_OW 446
35879: GO 35803
35881: POP
35882: POP
// end ;
35883: LD_VAR 0 3
35887: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35888: LD_INT 0
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35896: LD_VAR 0 1
35900: NOT
35901: IFTRUE 35918
35903: PUSH
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL_OW 263
35913: PUSH
35914: LD_INT 2
35916: NONEQUAL
35917: OR
35918: IFFALSE 35922
// exit ;
35920: GO 36238
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35922: LD_ADDR_VAR 0 6
35926: PUSH
35927: LD_INT 22
35929: PUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 255
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: PUSH
35947: LD_INT 30
35949: PUSH
35950: LD_INT 36
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 34
35959: PUSH
35960: LD_INT 31
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PPUSH
35976: CALL_OW 69
35980: ST_TO_ADDR
// if not tmp then
35981: LD_VAR 0 6
35985: NOT
35986: IFFALSE 35990
// exit ;
35988: GO 36238
// result := [ ] ;
35990: LD_ADDR_VAR 0 2
35994: PUSH
35995: EMPTY
35996: ST_TO_ADDR
// for i in tmp do
35997: LD_ADDR_VAR 0 3
36001: PUSH
36002: LD_VAR 0 6
36006: PUSH
36007: FOR_IN
36008: IFFALSE 36079
// begin t := UnitsInside ( i ) ;
36010: LD_ADDR_VAR 0 4
36014: PUSH
36015: LD_VAR 0 3
36019: PPUSH
36020: CALL_OW 313
36024: ST_TO_ADDR
// if t then
36025: LD_VAR 0 4
36029: IFFALSE 36077
// for j in t do
36031: LD_ADDR_VAR 0 7
36035: PUSH
36036: LD_VAR 0 4
36040: PUSH
36041: FOR_IN
36042: IFFALSE 36075
// result := Replace ( result , result + 1 , j ) ;
36044: LD_ADDR_VAR 0 2
36048: PUSH
36049: LD_VAR 0 2
36053: PPUSH
36054: LD_VAR 0 2
36058: PUSH
36059: LD_INT 1
36061: PLUS
36062: PPUSH
36063: LD_VAR 0 7
36067: PPUSH
36068: CALL_OW 1
36072: ST_TO_ADDR
36073: GO 36041
36075: POP
36076: POP
// end ;
36077: GO 36007
36079: POP
36080: POP
// if not result then
36081: LD_VAR 0 2
36085: NOT
36086: IFFALSE 36090
// exit ;
36088: GO 36238
// mech := result [ 1 ] ;
36090: LD_ADDR_VAR 0 5
36094: PUSH
36095: LD_VAR 0 2
36099: PUSH
36100: LD_INT 1
36102: ARRAY
36103: ST_TO_ADDR
// if result > 1 then
36104: LD_VAR 0 2
36108: PUSH
36109: LD_INT 1
36111: GREATER
36112: IFFALSE 36224
// begin for i = 2 to result do
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: DOUBLE
36120: LD_INT 2
36122: DEC
36123: ST_TO_ADDR
36124: LD_VAR 0 2
36128: PUSH
36129: FOR_TO
36130: IFFALSE 36222
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36132: LD_ADDR_VAR 0 4
36136: PUSH
36137: LD_VAR 0 2
36141: PUSH
36142: LD_VAR 0 3
36146: ARRAY
36147: PPUSH
36148: LD_INT 3
36150: PPUSH
36151: CALL_OW 259
36155: PUSH
36156: LD_VAR 0 2
36160: PUSH
36161: LD_VAR 0 3
36165: ARRAY
36166: PPUSH
36167: CALL_OW 432
36171: MINUS
36172: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36173: LD_VAR 0 4
36177: PUSH
36178: LD_VAR 0 5
36182: PPUSH
36183: LD_INT 3
36185: PPUSH
36186: CALL_OW 259
36190: PUSH
36191: LD_VAR 0 5
36195: PPUSH
36196: CALL_OW 432
36200: MINUS
36201: GREATEREQUAL
36202: IFFALSE 36220
// mech := result [ i ] ;
36204: LD_ADDR_VAR 0 5
36208: PUSH
36209: LD_VAR 0 2
36213: PUSH
36214: LD_VAR 0 3
36218: ARRAY
36219: ST_TO_ADDR
// end ;
36220: GO 36129
36222: POP
36223: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36224: LD_VAR 0 1
36228: PPUSH
36229: LD_VAR 0 5
36233: PPUSH
36234: CALL_OW 135
// end ;
36238: LD_VAR 0 2
36242: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36243: LD_INT 0
36245: PPUSH
36246: PPUSH
36247: PPUSH
36248: PPUSH
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
// result := [ ] ;
36258: LD_ADDR_VAR 0 7
36262: PUSH
36263: EMPTY
36264: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 266
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: IN
36285: NOT
36286: IFFALSE 36290
// exit ;
36288: GO 37930
// if name then
36290: LD_VAR 0 3
36294: IFFALSE 36310
// SetBName ( base_dep , name ) ;
36296: LD_VAR 0 1
36300: PPUSH
36301: LD_VAR 0 3
36305: PPUSH
36306: CALL_OW 500
// base := GetBase ( base_dep ) ;
36310: LD_ADDR_VAR 0 15
36314: PUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 274
36324: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36325: LD_ADDR_VAR 0 16
36329: PUSH
36330: LD_VAR 0 1
36334: PPUSH
36335: CALL_OW 255
36339: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36340: LD_ADDR_VAR 0 17
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: CALL_OW 248
36354: ST_TO_ADDR
// if sources then
36355: LD_VAR 0 5
36359: IFFALSE 36406
// for i = 1 to 3 do
36361: LD_ADDR_VAR 0 8
36365: PUSH
36366: DOUBLE
36367: LD_INT 1
36369: DEC
36370: ST_TO_ADDR
36371: LD_INT 3
36373: PUSH
36374: FOR_TO
36375: IFFALSE 36404
// AddResourceType ( base , i , sources [ i ] ) ;
36377: LD_VAR 0 15
36381: PPUSH
36382: LD_VAR 0 8
36386: PPUSH
36387: LD_VAR 0 5
36391: PUSH
36392: LD_VAR 0 8
36396: ARRAY
36397: PPUSH
36398: CALL_OW 276
36402: GO 36374
36404: POP
36405: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36406: LD_ADDR_VAR 0 18
36410: PUSH
36411: LD_VAR 0 15
36415: PPUSH
36416: LD_VAR 0 2
36420: PPUSH
36421: LD_INT 1
36423: PPUSH
36424: CALL 35665 0 3
36428: ST_TO_ADDR
// InitHc ;
36429: CALL_OW 19
// InitUc ;
36433: CALL_OW 18
// uc_side := side ;
36437: LD_ADDR_OWVAR 20
36441: PUSH
36442: LD_VAR 0 16
36446: ST_TO_ADDR
// uc_nation := nation ;
36447: LD_ADDR_OWVAR 21
36451: PUSH
36452: LD_VAR 0 17
36456: ST_TO_ADDR
// if buildings then
36457: LD_VAR 0 18
36461: IFFALSE 37789
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36463: LD_ADDR_VAR 0 19
36467: PUSH
36468: LD_VAR 0 18
36472: PPUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 30
36478: PUSH
36479: LD_INT 29
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 30
36488: PUSH
36489: LD_INT 30
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PPUSH
36501: CALL_OW 72
36505: ST_TO_ADDR
// if tmp then
36506: LD_VAR 0 19
36510: IFFALSE 36558
// for i in tmp do
36512: LD_ADDR_VAR 0 8
36516: PUSH
36517: LD_VAR 0 19
36521: PUSH
36522: FOR_IN
36523: IFFALSE 36556
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36525: LD_VAR 0 8
36529: PPUSH
36530: CALL_OW 250
36534: PPUSH
36535: LD_VAR 0 8
36539: PPUSH
36540: CALL_OW 251
36544: PPUSH
36545: LD_VAR 0 16
36549: PPUSH
36550: CALL_OW 441
36554: GO 36522
36556: POP
36557: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36558: LD_VAR 0 18
36562: PPUSH
36563: LD_INT 2
36565: PUSH
36566: LD_INT 30
36568: PUSH
36569: LD_INT 32
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 30
36578: PUSH
36579: LD_INT 33
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: LIST
36590: PPUSH
36591: CALL_OW 72
36595: IFFALSE 36683
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36597: LD_ADDR_VAR 0 8
36601: PUSH
36602: LD_VAR 0 18
36606: PPUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 30
36612: PUSH
36613: LD_INT 32
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 30
36622: PUSH
36623: LD_INT 33
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: PPUSH
36635: CALL_OW 72
36639: PUSH
36640: FOR_IN
36641: IFFALSE 36681
// begin if not GetBWeapon ( i ) then
36643: LD_VAR 0 8
36647: PPUSH
36648: CALL_OW 269
36652: NOT
36653: IFFALSE 36679
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36655: LD_VAR 0 8
36659: PPUSH
36660: LD_VAR 0 8
36664: PPUSH
36665: LD_VAR 0 2
36669: PPUSH
36670: CALL 37935 0 2
36674: PPUSH
36675: CALL_OW 431
// end ;
36679: GO 36640
36681: POP
36682: POP
// end ; for i = 1 to personel do
36683: LD_ADDR_VAR 0 8
36687: PUSH
36688: DOUBLE
36689: LD_INT 1
36691: DEC
36692: ST_TO_ADDR
36693: LD_VAR 0 6
36697: PUSH
36698: FOR_TO
36699: IFFALSE 37769
// begin if i > 4 then
36701: LD_VAR 0 8
36705: PUSH
36706: LD_INT 4
36708: GREATER
36709: IFFALSE 36713
// break ;
36711: GO 37769
// case i of 1 :
36713: LD_VAR 0 8
36717: PUSH
36718: LD_INT 1
36720: DOUBLE
36721: EQUAL
36722: IFTRUE 36726
36724: GO 36806
36726: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36727: LD_ADDR_VAR 0 12
36731: PUSH
36732: LD_VAR 0 18
36736: PPUSH
36737: LD_INT 22
36739: PUSH
36740: LD_VAR 0 16
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 58
36751: PUSH
36752: EMPTY
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: LD_INT 30
36760: PUSH
36761: LD_INT 32
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 30
36770: PUSH
36771: LD_INT 4
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 30
36780: PUSH
36781: LD_INT 5
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: PPUSH
36799: CALL_OW 72
36803: ST_TO_ADDR
36804: GO 37028
36806: LD_INT 2
36808: DOUBLE
36809: EQUAL
36810: IFTRUE 36814
36812: GO 36876
36814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36815: LD_ADDR_VAR 0 12
36819: PUSH
36820: LD_VAR 0 18
36824: PPUSH
36825: LD_INT 22
36827: PUSH
36828: LD_VAR 0 16
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: LD_INT 30
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 30
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PPUSH
36869: CALL_OW 72
36873: ST_TO_ADDR
36874: GO 37028
36876: LD_INT 3
36878: DOUBLE
36879: EQUAL
36880: IFTRUE 36884
36882: GO 36946
36884: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36885: LD_ADDR_VAR 0 12
36889: PUSH
36890: LD_VAR 0 18
36894: PPUSH
36895: LD_INT 22
36897: PUSH
36898: LD_VAR 0 16
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: LD_INT 30
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 30
36922: PUSH
36923: LD_INT 3
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PPUSH
36939: CALL_OW 72
36943: ST_TO_ADDR
36944: GO 37028
36946: LD_INT 4
36948: DOUBLE
36949: EQUAL
36950: IFTRUE 36954
36952: GO 37027
36954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36955: LD_ADDR_VAR 0 12
36959: PUSH
36960: LD_VAR 0 18
36964: PPUSH
36965: LD_INT 22
36967: PUSH
36968: LD_VAR 0 16
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: LD_INT 30
36982: PUSH
36983: LD_INT 6
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 30
36992: PUSH
36993: LD_INT 7
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 30
37002: PUSH
37003: LD_INT 8
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PPUSH
37020: CALL_OW 72
37024: ST_TO_ADDR
37025: GO 37028
37027: POP
// if i = 1 then
37028: LD_VAR 0 8
37032: PUSH
37033: LD_INT 1
37035: EQUAL
37036: IFFALSE 37147
// begin tmp := [ ] ;
37038: LD_ADDR_VAR 0 19
37042: PUSH
37043: EMPTY
37044: ST_TO_ADDR
// for j in f do
37045: LD_ADDR_VAR 0 9
37049: PUSH
37050: LD_VAR 0 12
37054: PUSH
37055: FOR_IN
37056: IFFALSE 37129
// if GetBType ( j ) = b_bunker then
37058: LD_VAR 0 9
37062: PPUSH
37063: CALL_OW 266
37067: PUSH
37068: LD_INT 32
37070: EQUAL
37071: IFFALSE 37098
// tmp := Insert ( tmp , 1 , j ) else
37073: LD_ADDR_VAR 0 19
37077: PUSH
37078: LD_VAR 0 19
37082: PPUSH
37083: LD_INT 1
37085: PPUSH
37086: LD_VAR 0 9
37090: PPUSH
37091: CALL_OW 2
37095: ST_TO_ADDR
37096: GO 37127
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37098: LD_ADDR_VAR 0 19
37102: PUSH
37103: LD_VAR 0 19
37107: PPUSH
37108: LD_VAR 0 19
37112: PUSH
37113: LD_INT 1
37115: PLUS
37116: PPUSH
37117: LD_VAR 0 9
37121: PPUSH
37122: CALL_OW 2
37126: ST_TO_ADDR
37127: GO 37055
37129: POP
37130: POP
// if tmp then
37131: LD_VAR 0 19
37135: IFFALSE 37147
// f := tmp ;
37137: LD_ADDR_VAR 0 12
37141: PUSH
37142: LD_VAR 0 19
37146: ST_TO_ADDR
// end ; x := personel [ i ] ;
37147: LD_ADDR_VAR 0 13
37151: PUSH
37152: LD_VAR 0 6
37156: PUSH
37157: LD_VAR 0 8
37161: ARRAY
37162: ST_TO_ADDR
// if x = - 1 then
37163: LD_VAR 0 13
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: EQUAL
37172: IFFALSE 37383
// begin for j in f do
37174: LD_ADDR_VAR 0 9
37178: PUSH
37179: LD_VAR 0 12
37183: PUSH
37184: FOR_IN
37185: IFFALSE 37379
// repeat InitHc ;
37187: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37191: LD_VAR 0 9
37195: PPUSH
37196: CALL_OW 266
37200: PUSH
37201: LD_INT 5
37203: EQUAL
37204: IFFALSE 37274
// begin if UnitsInside ( j ) < 3 then
37206: LD_VAR 0 9
37210: PPUSH
37211: CALL_OW 313
37215: PUSH
37216: LD_INT 3
37218: LESS
37219: IFFALSE 37255
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37221: LD_INT 0
37223: PPUSH
37224: LD_INT 5
37226: PUSH
37227: LD_INT 8
37229: PUSH
37230: LD_INT 9
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: PUSH
37238: LD_VAR 0 17
37242: ARRAY
37243: PPUSH
37244: LD_VAR 0 4
37248: PPUSH
37249: CALL_OW 380
37253: GO 37272
// PrepareHuman ( false , i , skill ) ;
37255: LD_INT 0
37257: PPUSH
37258: LD_VAR 0 8
37262: PPUSH
37263: LD_VAR 0 4
37267: PPUSH
37268: CALL_OW 380
// end else
37272: GO 37291
// PrepareHuman ( false , i , skill ) ;
37274: LD_INT 0
37276: PPUSH
37277: LD_VAR 0 8
37281: PPUSH
37282: LD_VAR 0 4
37286: PPUSH
37287: CALL_OW 380
// un := CreateHuman ;
37291: LD_ADDR_VAR 0 14
37295: PUSH
37296: CALL_OW 44
37300: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37301: LD_ADDR_VAR 0 7
37305: PUSH
37306: LD_VAR 0 7
37310: PPUSH
37311: LD_INT 1
37313: PPUSH
37314: LD_VAR 0 14
37318: PPUSH
37319: CALL_OW 2
37323: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37324: LD_VAR 0 14
37328: PPUSH
37329: LD_VAR 0 9
37333: PPUSH
37334: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37338: LD_VAR 0 9
37342: PPUSH
37343: CALL_OW 313
37347: PUSH
37348: LD_INT 6
37350: EQUAL
37351: IFTRUE 37375
37353: PUSH
37354: LD_VAR 0 9
37358: PPUSH
37359: CALL_OW 266
37363: PUSH
37364: LD_INT 32
37366: PUSH
37367: LD_INT 31
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: IN
37374: OR
37375: IFFALSE 37187
37377: GO 37184
37379: POP
37380: POP
// end else
37381: GO 37767
// for j = 1 to x do
37383: LD_ADDR_VAR 0 9
37387: PUSH
37388: DOUBLE
37389: LD_INT 1
37391: DEC
37392: ST_TO_ADDR
37393: LD_VAR 0 13
37397: PUSH
37398: FOR_TO
37399: IFFALSE 37765
// begin InitHc ;
37401: CALL_OW 19
// if not f then
37405: LD_VAR 0 12
37409: NOT
37410: IFFALSE 37499
// begin PrepareHuman ( false , i , skill ) ;
37412: LD_INT 0
37414: PPUSH
37415: LD_VAR 0 8
37419: PPUSH
37420: LD_VAR 0 4
37424: PPUSH
37425: CALL_OW 380
// un := CreateHuman ;
37429: LD_ADDR_VAR 0 14
37433: PUSH
37434: CALL_OW 44
37438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37439: LD_ADDR_VAR 0 7
37443: PUSH
37444: LD_VAR 0 7
37448: PPUSH
37449: LD_INT 1
37451: PPUSH
37452: LD_VAR 0 14
37456: PPUSH
37457: CALL_OW 2
37461: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37462: LD_VAR 0 14
37466: PPUSH
37467: LD_VAR 0 1
37471: PPUSH
37472: CALL_OW 250
37476: PPUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 251
37486: PPUSH
37487: LD_INT 10
37489: PPUSH
37490: LD_INT 0
37492: PPUSH
37493: CALL_OW 50
// continue ;
37497: GO 37398
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37499: LD_VAR 0 12
37503: PUSH
37504: LD_INT 1
37506: ARRAY
37507: PPUSH
37508: CALL_OW 313
37512: IFFALSE 37540
37514: PUSH
37515: LD_VAR 0 12
37519: PUSH
37520: LD_INT 1
37522: ARRAY
37523: PPUSH
37524: CALL_OW 266
37528: PUSH
37529: LD_INT 32
37531: PUSH
37532: LD_INT 31
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: IN
37539: AND
37540: IFTRUE 37561
37542: PUSH
37543: LD_VAR 0 12
37547: PUSH
37548: LD_INT 1
37550: ARRAY
37551: PPUSH
37552: CALL_OW 313
37556: PUSH
37557: LD_INT 6
37559: EQUAL
37560: OR
37561: IFFALSE 37581
// f := Delete ( f , 1 ) ;
37563: LD_ADDR_VAR 0 12
37567: PUSH
37568: LD_VAR 0 12
37572: PPUSH
37573: LD_INT 1
37575: PPUSH
37576: CALL_OW 3
37580: ST_TO_ADDR
// if not f then
37581: LD_VAR 0 12
37585: NOT
37586: IFFALSE 37604
// begin x := x + 2 ;
37588: LD_ADDR_VAR 0 13
37592: PUSH
37593: LD_VAR 0 13
37597: PUSH
37598: LD_INT 2
37600: PLUS
37601: ST_TO_ADDR
// continue ;
37602: GO 37398
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37604: LD_VAR 0 12
37608: PUSH
37609: LD_INT 1
37611: ARRAY
37612: PPUSH
37613: CALL_OW 266
37617: PUSH
37618: LD_INT 5
37620: EQUAL
37621: IFFALSE 37695
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37623: LD_VAR 0 12
37627: PUSH
37628: LD_INT 1
37630: ARRAY
37631: PPUSH
37632: CALL_OW 313
37636: PUSH
37637: LD_INT 3
37639: LESS
37640: IFFALSE 37676
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37642: LD_INT 0
37644: PPUSH
37645: LD_INT 5
37647: PUSH
37648: LD_INT 8
37650: PUSH
37651: LD_INT 9
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: PUSH
37659: LD_VAR 0 17
37663: ARRAY
37664: PPUSH
37665: LD_VAR 0 4
37669: PPUSH
37670: CALL_OW 380
37674: GO 37693
// PrepareHuman ( false , i , skill ) ;
37676: LD_INT 0
37678: PPUSH
37679: LD_VAR 0 8
37683: PPUSH
37684: LD_VAR 0 4
37688: PPUSH
37689: CALL_OW 380
// end else
37693: GO 37712
// PrepareHuman ( false , i , skill ) ;
37695: LD_INT 0
37697: PPUSH
37698: LD_VAR 0 8
37702: PPUSH
37703: LD_VAR 0 4
37707: PPUSH
37708: CALL_OW 380
// un := CreateHuman ;
37712: LD_ADDR_VAR 0 14
37716: PUSH
37717: CALL_OW 44
37721: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37722: LD_ADDR_VAR 0 7
37726: PUSH
37727: LD_VAR 0 7
37731: PPUSH
37732: LD_INT 1
37734: PPUSH
37735: LD_VAR 0 14
37739: PPUSH
37740: CALL_OW 2
37744: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37745: LD_VAR 0 14
37749: PPUSH
37750: LD_VAR 0 12
37754: PUSH
37755: LD_INT 1
37757: ARRAY
37758: PPUSH
37759: CALL_OW 52
// end ;
37763: GO 37398
37765: POP
37766: POP
// end ;
37767: GO 36698
37769: POP
37770: POP
// result := result ^ buildings ;
37771: LD_ADDR_VAR 0 7
37775: PUSH
37776: LD_VAR 0 7
37780: PUSH
37781: LD_VAR 0 18
37785: ADD
37786: ST_TO_ADDR
// end else
37787: GO 37930
// begin for i = 1 to personel do
37789: LD_ADDR_VAR 0 8
37793: PUSH
37794: DOUBLE
37795: LD_INT 1
37797: DEC
37798: ST_TO_ADDR
37799: LD_VAR 0 6
37803: PUSH
37804: FOR_TO
37805: IFFALSE 37928
// begin if i > 4 then
37807: LD_VAR 0 8
37811: PUSH
37812: LD_INT 4
37814: GREATER
37815: IFFALSE 37819
// break ;
37817: GO 37928
// x := personel [ i ] ;
37819: LD_ADDR_VAR 0 13
37823: PUSH
37824: LD_VAR 0 6
37828: PUSH
37829: LD_VAR 0 8
37833: ARRAY
37834: ST_TO_ADDR
// if x = - 1 then
37835: LD_VAR 0 13
37839: PUSH
37840: LD_INT 1
37842: NEG
37843: EQUAL
37844: IFFALSE 37848
// continue ;
37846: GO 37804
// PrepareHuman ( false , i , skill ) ;
37848: LD_INT 0
37850: PPUSH
37851: LD_VAR 0 8
37855: PPUSH
37856: LD_VAR 0 4
37860: PPUSH
37861: CALL_OW 380
// un := CreateHuman ;
37865: LD_ADDR_VAR 0 14
37869: PUSH
37870: CALL_OW 44
37874: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37875: LD_VAR 0 14
37879: PPUSH
37880: LD_VAR 0 1
37884: PPUSH
37885: CALL_OW 250
37889: PPUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 251
37899: PPUSH
37900: LD_INT 10
37902: PPUSH
37903: LD_INT 0
37905: PPUSH
37906: CALL_OW 50
// result := result ^ un ;
37910: LD_ADDR_VAR 0 7
37914: PUSH
37915: LD_VAR 0 7
37919: PUSH
37920: LD_VAR 0 14
37924: ADD
37925: ST_TO_ADDR
// end ;
37926: GO 37804
37928: POP
37929: POP
// end ; end ;
37930: LD_VAR 0 7
37934: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37935: LD_INT 0
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
37948: PPUSH
37949: PPUSH
37950: PPUSH
37951: PPUSH
37952: PPUSH
// result := false ;
37953: LD_ADDR_VAR 0 3
37957: PUSH
37958: LD_INT 0
37960: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37961: LD_VAR 0 1
37965: NOT
37966: IFTRUE 37991
37968: PUSH
37969: LD_VAR 0 1
37973: PPUSH
37974: CALL_OW 266
37978: PUSH
37979: LD_INT 32
37981: PUSH
37982: LD_INT 33
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: IN
37989: NOT
37990: OR
37991: IFFALSE 37995
// exit ;
37993: GO 39130
// nat := GetNation ( tower ) ;
37995: LD_ADDR_VAR 0 12
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 248
38009: ST_TO_ADDR
// side := GetSide ( tower ) ;
38010: LD_ADDR_VAR 0 16
38014: PUSH
38015: LD_VAR 0 1
38019: PPUSH
38020: CALL_OW 255
38024: ST_TO_ADDR
// x := GetX ( tower ) ;
38025: LD_ADDR_VAR 0 10
38029: PUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: CALL_OW 250
38039: ST_TO_ADDR
// y := GetY ( tower ) ;
38040: LD_ADDR_VAR 0 11
38044: PUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: CALL_OW 251
38054: ST_TO_ADDR
// if not x or not y then
38055: LD_VAR 0 10
38059: NOT
38060: IFTRUE 38069
38062: PUSH
38063: LD_VAR 0 11
38067: NOT
38068: OR
38069: IFFALSE 38073
// exit ;
38071: GO 39130
// weapon := 0 ;
38073: LD_ADDR_VAR 0 18
38077: PUSH
38078: LD_INT 0
38080: ST_TO_ADDR
// fac_list := [ ] ;
38081: LD_ADDR_VAR 0 17
38085: PUSH
38086: EMPTY
38087: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38088: LD_ADDR_VAR 0 6
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 274
38102: PPUSH
38103: LD_VAR 0 2
38107: PPUSH
38108: LD_INT 0
38110: PPUSH
38111: CALL 35665 0 3
38115: PPUSH
38116: LD_INT 30
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PPUSH
38126: CALL_OW 72
38130: ST_TO_ADDR
// if not factories then
38131: LD_VAR 0 6
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 39130
// for i in factories do
38140: LD_ADDR_VAR 0 8
38144: PUSH
38145: LD_VAR 0 6
38149: PUSH
38150: FOR_IN
38151: IFFALSE 38176
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38153: LD_ADDR_VAR 0 17
38157: PUSH
38158: LD_VAR 0 17
38162: PUSH
38163: LD_VAR 0 8
38167: PPUSH
38168: CALL_OW 478
38172: UNION
38173: ST_TO_ADDR
38174: GO 38150
38176: POP
38177: POP
// if not fac_list then
38178: LD_VAR 0 17
38182: NOT
38183: IFFALSE 38187
// exit ;
38185: GO 39130
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38187: LD_ADDR_VAR 0 5
38191: PUSH
38192: LD_INT 4
38194: PUSH
38195: LD_INT 5
38197: PUSH
38198: LD_INT 9
38200: PUSH
38201: LD_INT 10
38203: PUSH
38204: LD_INT 6
38206: PUSH
38207: LD_INT 7
38209: PUSH
38210: LD_INT 11
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 27
38224: PUSH
38225: LD_INT 28
38227: PUSH
38228: LD_INT 26
38230: PUSH
38231: LD_INT 30
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 43
38242: PUSH
38243: LD_INT 44
38245: PUSH
38246: LD_INT 46
38248: PUSH
38249: LD_INT 45
38251: PUSH
38252: LD_INT 47
38254: PUSH
38255: LD_INT 49
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: PUSH
38271: LD_VAR 0 12
38275: ARRAY
38276: ST_TO_ADDR
// list := list isect fac_list ;
38277: LD_ADDR_VAR 0 5
38281: PUSH
38282: LD_VAR 0 5
38286: PUSH
38287: LD_VAR 0 17
38291: ISECT
38292: ST_TO_ADDR
// if not list then
38293: LD_VAR 0 5
38297: NOT
38298: IFFALSE 38302
// exit ;
38300: GO 39130
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38302: LD_VAR 0 12
38306: PUSH
38307: LD_INT 3
38309: EQUAL
38310: IFFALSE 38322
38312: PUSH
38313: LD_INT 49
38315: PUSH
38316: LD_VAR 0 5
38320: IN
38321: AND
38322: IFFALSE 38342
38324: PUSH
38325: LD_INT 31
38327: PPUSH
38328: LD_VAR 0 16
38332: PPUSH
38333: CALL_OW 321
38337: PUSH
38338: LD_INT 2
38340: EQUAL
38341: AND
38342: IFFALSE 38402
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38344: LD_INT 22
38346: PUSH
38347: LD_VAR 0 16
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 35
38358: PUSH
38359: LD_INT 49
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 91
38368: PUSH
38369: LD_VAR 0 1
38373: PUSH
38374: LD_INT 10
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: PPUSH
38387: CALL_OW 69
38391: NOT
38392: IFFALSE 38402
// weapon := ru_time_lapser ;
38394: LD_ADDR_VAR 0 18
38398: PUSH
38399: LD_INT 49
38401: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38402: LD_VAR 0 12
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: IN
38417: IFFALSE 38441
38419: PUSH
38420: LD_INT 11
38422: PUSH
38423: LD_VAR 0 5
38427: IN
38428: IFTRUE 38440
38430: PUSH
38431: LD_INT 30
38433: PUSH
38434: LD_VAR 0 5
38438: IN
38439: OR
38440: AND
38441: IFFALSE 38461
38443: PUSH
38444: LD_INT 6
38446: PPUSH
38447: LD_VAR 0 16
38451: PPUSH
38452: CALL_OW 321
38456: PUSH
38457: LD_INT 2
38459: EQUAL
38460: AND
38461: IFFALSE 38628
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38463: LD_INT 22
38465: PUSH
38466: LD_VAR 0 16
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 35
38480: PUSH
38481: LD_INT 11
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 35
38490: PUSH
38491: LD_INT 30
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 91
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_INT 18
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: PPUSH
38524: CALL_OW 69
38528: NOT
38529: IFFALSE 38605
38531: PUSH
38532: LD_INT 22
38534: PUSH
38535: LD_VAR 0 16
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 30
38549: PUSH
38550: LD_INT 32
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 30
38559: PUSH
38560: LD_INT 33
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 91
38574: PUSH
38575: LD_VAR 0 1
38579: PUSH
38580: LD_INT 12
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: PPUSH
38596: CALL_OW 69
38600: PUSH
38601: LD_INT 2
38603: GREATER
38604: AND
38605: IFFALSE 38628
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38607: LD_ADDR_VAR 0 18
38611: PUSH
38612: LD_INT 11
38614: PUSH
38615: LD_INT 30
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_VAR 0 12
38626: ARRAY
38627: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38628: LD_VAR 0 18
38632: NOT
38633: IFFALSE 38653
38635: PUSH
38636: LD_INT 40
38638: PPUSH
38639: LD_VAR 0 16
38643: PPUSH
38644: CALL_OW 321
38648: PUSH
38649: LD_INT 2
38651: EQUAL
38652: AND
38653: IFFALSE 38689
38655: PUSH
38656: LD_INT 7
38658: PUSH
38659: LD_VAR 0 5
38663: IN
38664: IFTRUE 38676
38666: PUSH
38667: LD_INT 28
38669: PUSH
38670: LD_VAR 0 5
38674: IN
38675: OR
38676: IFTRUE 38688
38678: PUSH
38679: LD_INT 45
38681: PUSH
38682: LD_VAR 0 5
38686: IN
38687: OR
38688: AND
38689: IFFALSE 38943
// begin hex := GetHexInfo ( x , y ) ;
38691: LD_ADDR_VAR 0 4
38695: PUSH
38696: LD_VAR 0 10
38700: PPUSH
38701: LD_VAR 0 11
38705: PPUSH
38706: CALL_OW 546
38710: ST_TO_ADDR
// if hex [ 1 ] then
38711: LD_VAR 0 4
38715: PUSH
38716: LD_INT 1
38718: ARRAY
38719: IFFALSE 38723
// exit ;
38721: GO 39130
// height := hex [ 2 ] ;
38723: LD_ADDR_VAR 0 15
38727: PUSH
38728: LD_VAR 0 4
38732: PUSH
38733: LD_INT 2
38735: ARRAY
38736: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38737: LD_ADDR_VAR 0 14
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: LD_INT 5
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: ST_TO_ADDR
// for i in tmp do
38760: LD_ADDR_VAR 0 8
38764: PUSH
38765: LD_VAR 0 14
38769: PUSH
38770: FOR_IN
38771: IFFALSE 38941
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38773: LD_ADDR_VAR 0 9
38777: PUSH
38778: LD_VAR 0 10
38782: PPUSH
38783: LD_VAR 0 8
38787: PPUSH
38788: LD_INT 5
38790: PPUSH
38791: CALL_OW 272
38795: PUSH
38796: LD_VAR 0 11
38800: PPUSH
38801: LD_VAR 0 8
38805: PPUSH
38806: LD_INT 5
38808: PPUSH
38809: CALL_OW 273
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38818: LD_VAR 0 9
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: LD_VAR 0 9
38831: PUSH
38832: LD_INT 2
38834: ARRAY
38835: PPUSH
38836: CALL_OW 488
38840: IFFALSE 38939
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38842: LD_ADDR_VAR 0 4
38846: PUSH
38847: LD_VAR 0 9
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: PPUSH
38856: LD_VAR 0 9
38860: PUSH
38861: LD_INT 2
38863: ARRAY
38864: PPUSH
38865: CALL_OW 546
38869: ST_TO_ADDR
// if hex [ 1 ] then
38870: LD_VAR 0 4
38874: PUSH
38875: LD_INT 1
38877: ARRAY
38878: IFFALSE 38882
// continue ;
38880: GO 38770
// h := hex [ 2 ] ;
38882: LD_ADDR_VAR 0 13
38886: PUSH
38887: LD_VAR 0 4
38891: PUSH
38892: LD_INT 2
38894: ARRAY
38895: ST_TO_ADDR
// if h + 7 < height then
38896: LD_VAR 0 13
38900: PUSH
38901: LD_INT 7
38903: PLUS
38904: PUSH
38905: LD_VAR 0 15
38909: LESS
38910: IFFALSE 38939
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38912: LD_ADDR_VAR 0 18
38916: PUSH
38917: LD_INT 7
38919: PUSH
38920: LD_INT 28
38922: PUSH
38923: LD_INT 45
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: PUSH
38931: LD_VAR 0 12
38935: ARRAY
38936: ST_TO_ADDR
// break ;
38937: GO 38941
// end ; end ; end ;
38939: GO 38770
38941: POP
38942: POP
// end ; if not weapon then
38943: LD_VAR 0 18
38947: NOT
38948: IFFALSE 39008
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38950: LD_ADDR_VAR 0 5
38954: PUSH
38955: LD_VAR 0 5
38959: PUSH
38960: LD_INT 11
38962: PUSH
38963: LD_INT 30
38965: PUSH
38966: LD_INT 49
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: DIFF
38974: ST_TO_ADDR
// if not list then
38975: LD_VAR 0 5
38979: NOT
38980: IFFALSE 38984
// exit ;
38982: GO 39130
// weapon := list [ rand ( 1 , list ) ] ;
38984: LD_ADDR_VAR 0 18
38988: PUSH
38989: LD_VAR 0 5
38993: PUSH
38994: LD_INT 1
38996: PPUSH
38997: LD_VAR 0 5
39001: PPUSH
39002: CALL_OW 12
39006: ARRAY
39007: ST_TO_ADDR
// end ; if weapon then
39008: LD_VAR 0 18
39012: IFFALSE 39130
// begin tmp := CostOfWeapon ( weapon ) ;
39014: LD_ADDR_VAR 0 14
39018: PUSH
39019: LD_VAR 0 18
39023: PPUSH
39024: CALL_OW 451
39028: ST_TO_ADDR
// j := GetBase ( tower ) ;
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL_OW 274
39043: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39044: LD_VAR 0 9
39048: PPUSH
39049: LD_INT 1
39051: PPUSH
39052: CALL_OW 275
39056: PUSH
39057: LD_VAR 0 14
39061: PUSH
39062: LD_INT 1
39064: ARRAY
39065: GREATEREQUAL
39066: IFFALSE 39092
39068: PUSH
39069: LD_VAR 0 9
39073: PPUSH
39074: LD_INT 2
39076: PPUSH
39077: CALL_OW 275
39081: PUSH
39082: LD_VAR 0 14
39086: PUSH
39087: LD_INT 2
39089: ARRAY
39090: GREATEREQUAL
39091: AND
39092: IFFALSE 39118
39094: PUSH
39095: LD_VAR 0 9
39099: PPUSH
39100: LD_INT 3
39102: PPUSH
39103: CALL_OW 275
39107: PUSH
39108: LD_VAR 0 14
39112: PUSH
39113: LD_INT 3
39115: ARRAY
39116: GREATEREQUAL
39117: AND
39118: IFFALSE 39130
// result := weapon ;
39120: LD_ADDR_VAR 0 3
39124: PUSH
39125: LD_VAR 0 18
39129: ST_TO_ADDR
// end ; end ;
39130: LD_VAR 0 3
39134: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39135: LD_INT 0
39137: PPUSH
39138: PPUSH
// result := true ;
39139: LD_ADDR_VAR 0 3
39143: PUSH
39144: LD_INT 1
39146: ST_TO_ADDR
// if array1 = array2 then
39147: LD_VAR 0 1
39151: PUSH
39152: LD_VAR 0 2
39156: EQUAL
39157: IFFALSE 39217
// begin for i = 1 to array1 do
39159: LD_ADDR_VAR 0 4
39163: PUSH
39164: DOUBLE
39165: LD_INT 1
39167: DEC
39168: ST_TO_ADDR
39169: LD_VAR 0 1
39173: PUSH
39174: FOR_TO
39175: IFFALSE 39213
// if array1 [ i ] <> array2 [ i ] then
39177: LD_VAR 0 1
39181: PUSH
39182: LD_VAR 0 4
39186: ARRAY
39187: PUSH
39188: LD_VAR 0 2
39192: PUSH
39193: LD_VAR 0 4
39197: ARRAY
39198: NONEQUAL
39199: IFFALSE 39211
// begin result := false ;
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 0
39208: ST_TO_ADDR
// break ;
39209: GO 39213
// end ;
39211: GO 39174
39213: POP
39214: POP
// end else
39215: GO 39225
// result := false ;
39217: LD_ADDR_VAR 0 3
39221: PUSH
39222: LD_INT 0
39224: ST_TO_ADDR
// end ;
39225: LD_VAR 0 3
39229: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39230: LD_INT 0
39232: PPUSH
39233: PPUSH
// if not array1 or not array2 then
39234: LD_VAR 0 1
39238: NOT
39239: IFTRUE 39248
39241: PUSH
39242: LD_VAR 0 2
39246: NOT
39247: OR
39248: IFFALSE 39252
// exit ;
39250: GO 39316
// result := true ;
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: LD_INT 1
39259: ST_TO_ADDR
// for i = 1 to array1 do
39260: LD_ADDR_VAR 0 4
39264: PUSH
39265: DOUBLE
39266: LD_INT 1
39268: DEC
39269: ST_TO_ADDR
39270: LD_VAR 0 1
39274: PUSH
39275: FOR_TO
39276: IFFALSE 39314
// if array1 [ i ] <> array2 [ i ] then
39278: LD_VAR 0 1
39282: PUSH
39283: LD_VAR 0 4
39287: ARRAY
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_VAR 0 4
39298: ARRAY
39299: NONEQUAL
39300: IFFALSE 39312
// begin result := false ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: LD_INT 0
39309: ST_TO_ADDR
// break ;
39310: GO 39314
// end ;
39312: GO 39275
39314: POP
39315: POP
// end ;
39316: LD_VAR 0 3
39320: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39321: LD_INT 0
39323: PPUSH
39324: PPUSH
39325: PPUSH
// pom := GetBase ( fac ) ;
39326: LD_ADDR_VAR 0 5
39330: PUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 274
39340: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39341: LD_ADDR_VAR 0 4
39345: PUSH
39346: LD_VAR 0 2
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PPUSH
39355: LD_VAR 0 2
39359: PUSH
39360: LD_INT 2
39362: ARRAY
39363: PPUSH
39364: LD_VAR 0 2
39368: PUSH
39369: LD_INT 3
39371: ARRAY
39372: PPUSH
39373: LD_VAR 0 2
39377: PUSH
39378: LD_INT 4
39380: ARRAY
39381: PPUSH
39382: CALL_OW 449
39386: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_VAR 0 5
39396: PPUSH
39397: LD_INT 1
39399: PPUSH
39400: CALL_OW 275
39404: PUSH
39405: LD_VAR 0 4
39409: PUSH
39410: LD_INT 1
39412: ARRAY
39413: GREATEREQUAL
39414: IFFALSE 39440
39416: PUSH
39417: LD_VAR 0 5
39421: PPUSH
39422: LD_INT 2
39424: PPUSH
39425: CALL_OW 275
39429: PUSH
39430: LD_VAR 0 4
39434: PUSH
39435: LD_INT 2
39437: ARRAY
39438: GREATEREQUAL
39439: AND
39440: IFFALSE 39466
39442: PUSH
39443: LD_VAR 0 5
39447: PPUSH
39448: LD_INT 3
39450: PPUSH
39451: CALL_OW 275
39455: PUSH
39456: LD_VAR 0 4
39460: PUSH
39461: LD_INT 3
39463: ARRAY
39464: GREATEREQUAL
39465: AND
39466: ST_TO_ADDR
// end ;
39467: LD_VAR 0 3
39471: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39472: LD_INT 0
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
// pom := GetBase ( building ) ;
39478: LD_ADDR_VAR 0 3
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: CALL_OW 274
39492: ST_TO_ADDR
// if not pom then
39493: LD_VAR 0 3
39497: NOT
39498: IFFALSE 39502
// exit ;
39500: GO 39676
// btype := GetBType ( building ) ;
39502: LD_ADDR_VAR 0 5
39506: PUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 266
39516: ST_TO_ADDR
// if btype = b_armoury then
39517: LD_VAR 0 5
39521: PUSH
39522: LD_INT 4
39524: EQUAL
39525: IFFALSE 39535
// btype := b_barracks ;
39527: LD_ADDR_VAR 0 5
39531: PUSH
39532: LD_INT 5
39534: ST_TO_ADDR
// if btype = b_depot then
39535: LD_VAR 0 5
39539: PUSH
39540: LD_INT 0
39542: EQUAL
39543: IFFALSE 39553
// btype := b_warehouse ;
39545: LD_ADDR_VAR 0 5
39549: PUSH
39550: LD_INT 1
39552: ST_TO_ADDR
// if btype = b_workshop then
39553: LD_VAR 0 5
39557: PUSH
39558: LD_INT 2
39560: EQUAL
39561: IFFALSE 39571
// btype := b_factory ;
39563: LD_ADDR_VAR 0 5
39567: PUSH
39568: LD_INT 3
39570: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39571: LD_ADDR_VAR 0 4
39575: PUSH
39576: LD_VAR 0 5
39580: PPUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL_OW 248
39590: PPUSH
39591: CALL_OW 450
39595: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39596: LD_ADDR_VAR 0 2
39600: PUSH
39601: LD_VAR 0 3
39605: PPUSH
39606: LD_INT 1
39608: PPUSH
39609: CALL_OW 275
39613: PUSH
39614: LD_VAR 0 4
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: GREATEREQUAL
39623: IFFALSE 39649
39625: PUSH
39626: LD_VAR 0 3
39630: PPUSH
39631: LD_INT 2
39633: PPUSH
39634: CALL_OW 275
39638: PUSH
39639: LD_VAR 0 4
39643: PUSH
39644: LD_INT 2
39646: ARRAY
39647: GREATEREQUAL
39648: AND
39649: IFFALSE 39675
39651: PUSH
39652: LD_VAR 0 3
39656: PPUSH
39657: LD_INT 3
39659: PPUSH
39660: CALL_OW 275
39664: PUSH
39665: LD_VAR 0 4
39669: PUSH
39670: LD_INT 3
39672: ARRAY
39673: GREATEREQUAL
39674: AND
39675: ST_TO_ADDR
// end ;
39676: LD_VAR 0 2
39680: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39681: LD_INT 0
39683: PPUSH
39684: PPUSH
39685: PPUSH
// pom := GetBase ( building ) ;
39686: LD_ADDR_VAR 0 4
39690: PUSH
39691: LD_VAR 0 1
39695: PPUSH
39696: CALL_OW 274
39700: ST_TO_ADDR
// if not pom then
39701: LD_VAR 0 4
39705: NOT
39706: IFFALSE 39710
// exit ;
39708: GO 39815
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39710: LD_ADDR_VAR 0 5
39714: PUSH
39715: LD_VAR 0 2
39719: PPUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 248
39729: PPUSH
39730: CALL_OW 450
39734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39735: LD_ADDR_VAR 0 3
39739: PUSH
39740: LD_VAR 0 4
39744: PPUSH
39745: LD_INT 1
39747: PPUSH
39748: CALL_OW 275
39752: PUSH
39753: LD_VAR 0 5
39757: PUSH
39758: LD_INT 1
39760: ARRAY
39761: GREATEREQUAL
39762: IFFALSE 39788
39764: PUSH
39765: LD_VAR 0 4
39769: PPUSH
39770: LD_INT 2
39772: PPUSH
39773: CALL_OW 275
39777: PUSH
39778: LD_VAR 0 5
39782: PUSH
39783: LD_INT 2
39785: ARRAY
39786: GREATEREQUAL
39787: AND
39788: IFFALSE 39814
39790: PUSH
39791: LD_VAR 0 4
39795: PPUSH
39796: LD_INT 3
39798: PPUSH
39799: CALL_OW 275
39803: PUSH
39804: LD_VAR 0 5
39808: PUSH
39809: LD_INT 3
39811: ARRAY
39812: GREATEREQUAL
39813: AND
39814: ST_TO_ADDR
// end ;
39815: LD_VAR 0 3
39819: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39820: LD_INT 0
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
// result := false ;
39833: LD_ADDR_VAR 0 8
39837: PUSH
39838: LD_INT 0
39840: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39841: LD_VAR 0 5
39845: NOT
39846: IFTRUE 39855
39848: PUSH
39849: LD_VAR 0 1
39853: NOT
39854: OR
39855: IFTRUE 39864
39857: PUSH
39858: LD_VAR 0 2
39862: NOT
39863: OR
39864: IFTRUE 39873
39866: PUSH
39867: LD_VAR 0 3
39871: NOT
39872: OR
39873: IFFALSE 39877
// exit ;
39875: GO 40703
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39877: LD_ADDR_VAR 0 14
39881: PUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: LD_VAR 0 2
39891: PPUSH
39892: LD_VAR 0 3
39896: PPUSH
39897: LD_VAR 0 4
39901: PPUSH
39902: LD_VAR 0 5
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PPUSH
39911: CALL_OW 248
39915: PPUSH
39916: LD_INT 0
39918: PPUSH
39919: CALL 41984 0 6
39923: ST_TO_ADDR
// if not hexes then
39924: LD_VAR 0 14
39928: NOT
39929: IFFALSE 39933
// exit ;
39931: GO 40703
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39933: LD_ADDR_VAR 0 17
39937: PUSH
39938: LD_VAR 0 5
39942: PPUSH
39943: LD_INT 22
39945: PUSH
39946: LD_VAR 0 13
39950: PPUSH
39951: CALL_OW 255
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: LD_INT 30
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 30
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PPUSH
39992: CALL_OW 72
39996: ST_TO_ADDR
// for i = 1 to hexes do
39997: LD_ADDR_VAR 0 9
40001: PUSH
40002: DOUBLE
40003: LD_INT 1
40005: DEC
40006: ST_TO_ADDR
40007: LD_VAR 0 14
40011: PUSH
40012: FOR_TO
40013: IFFALSE 40701
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40015: LD_ADDR_VAR 0 13
40019: PUSH
40020: LD_VAR 0 14
40024: PUSH
40025: LD_VAR 0 9
40029: ARRAY
40030: PUSH
40031: LD_INT 1
40033: ARRAY
40034: PPUSH
40035: LD_VAR 0 14
40039: PUSH
40040: LD_VAR 0 9
40044: ARRAY
40045: PUSH
40046: LD_INT 2
40048: ARRAY
40049: PPUSH
40050: CALL_OW 428
40054: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40055: LD_VAR 0 14
40059: PUSH
40060: LD_VAR 0 9
40064: ARRAY
40065: PUSH
40066: LD_INT 1
40068: ARRAY
40069: PPUSH
40070: LD_VAR 0 14
40074: PUSH
40075: LD_VAR 0 9
40079: ARRAY
40080: PUSH
40081: LD_INT 2
40083: ARRAY
40084: PPUSH
40085: CALL_OW 351
40089: IFTRUE 40128
40091: PUSH
40092: LD_VAR 0 14
40096: PUSH
40097: LD_VAR 0 9
40101: ARRAY
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: PPUSH
40107: LD_VAR 0 14
40111: PUSH
40112: LD_VAR 0 9
40116: ARRAY
40117: PUSH
40118: LD_INT 2
40120: ARRAY
40121: PPUSH
40122: CALL_OW 488
40126: NOT
40127: OR
40128: IFTRUE 40145
40130: PUSH
40131: LD_VAR 0 13
40135: PPUSH
40136: CALL_OW 247
40140: PUSH
40141: LD_INT 3
40143: EQUAL
40144: OR
40145: IFFALSE 40151
// exit ;
40147: POP
40148: POP
40149: GO 40703
// if not tmp then
40151: LD_VAR 0 13
40155: NOT
40156: IFFALSE 40160
// continue ;
40158: GO 40012
// result := true ;
40160: LD_ADDR_VAR 0 8
40164: PUSH
40165: LD_INT 1
40167: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40168: LD_VAR 0 6
40172: IFFALSE 40189
40174: PUSH
40175: LD_VAR 0 13
40179: PPUSH
40180: CALL_OW 247
40184: PUSH
40185: LD_INT 2
40187: EQUAL
40188: AND
40189: IFFALSE 40206
40191: PUSH
40192: LD_VAR 0 13
40196: PPUSH
40197: CALL_OW 263
40201: PUSH
40202: LD_INT 1
40204: EQUAL
40205: AND
40206: IFFALSE 40370
// begin if IsDrivenBy ( tmp ) then
40208: LD_VAR 0 13
40212: PPUSH
40213: CALL_OW 311
40217: IFFALSE 40221
// continue ;
40219: GO 40012
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40221: LD_VAR 0 6
40225: PPUSH
40226: LD_INT 3
40228: PUSH
40229: LD_INT 60
40231: PUSH
40232: EMPTY
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: LD_INT 55
40244: PUSH
40245: EMPTY
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PPUSH
40256: CALL_OW 72
40260: IFFALSE 40368
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40262: LD_ADDR_VAR 0 18
40266: PUSH
40267: LD_VAR 0 6
40271: PPUSH
40272: LD_INT 3
40274: PUSH
40275: LD_INT 60
40277: PUSH
40278: EMPTY
40279: LIST
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 3
40287: PUSH
40288: LD_INT 55
40290: PUSH
40291: EMPTY
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PPUSH
40302: CALL_OW 72
40306: PUSH
40307: LD_INT 1
40309: ARRAY
40310: ST_TO_ADDR
// if IsInUnit ( driver ) then
40311: LD_VAR 0 18
40315: PPUSH
40316: CALL_OW 310
40320: IFFALSE 40331
// ComExit ( driver ) ;
40322: LD_VAR 0 18
40326: PPUSH
40327: CALL 65974 0 1
// AddComEnterUnit ( driver , tmp ) ;
40331: LD_VAR 0 18
40335: PPUSH
40336: LD_VAR 0 13
40340: PPUSH
40341: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40345: LD_VAR 0 18
40349: PPUSH
40350: LD_VAR 0 7
40354: PPUSH
40355: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40359: LD_VAR 0 18
40363: PPUSH
40364: CALL_OW 181
// end ; continue ;
40368: GO 40012
// end ; if not cleaners or not tmp in cleaners then
40370: LD_VAR 0 6
40374: NOT
40375: IFTRUE 40390
40377: PUSH
40378: LD_VAR 0 13
40382: PUSH
40383: LD_VAR 0 6
40387: IN
40388: NOT
40389: OR
40390: IFFALSE 40699
// begin if dep then
40392: LD_VAR 0 17
40396: IFFALSE 40532
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40398: LD_ADDR_VAR 0 16
40402: PUSH
40403: LD_VAR 0 17
40407: PUSH
40408: LD_INT 1
40410: ARRAY
40411: PPUSH
40412: CALL_OW 250
40416: PPUSH
40417: LD_VAR 0 17
40421: PUSH
40422: LD_INT 1
40424: ARRAY
40425: PPUSH
40426: CALL_OW 254
40430: PPUSH
40431: LD_INT 5
40433: PPUSH
40434: CALL_OW 272
40438: PUSH
40439: LD_VAR 0 17
40443: PUSH
40444: LD_INT 1
40446: ARRAY
40447: PPUSH
40448: CALL_OW 251
40452: PPUSH
40453: LD_VAR 0 17
40457: PUSH
40458: LD_INT 1
40460: ARRAY
40461: PPUSH
40462: CALL_OW 254
40466: PPUSH
40467: LD_INT 5
40469: PPUSH
40470: CALL_OW 273
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40479: LD_VAR 0 16
40483: PUSH
40484: LD_INT 1
40486: ARRAY
40487: PPUSH
40488: LD_VAR 0 16
40492: PUSH
40493: LD_INT 2
40495: ARRAY
40496: PPUSH
40497: CALL_OW 488
40501: IFFALSE 40532
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40503: LD_VAR 0 13
40507: PPUSH
40508: LD_VAR 0 16
40512: PUSH
40513: LD_INT 1
40515: ARRAY
40516: PPUSH
40517: LD_VAR 0 16
40521: PUSH
40522: LD_INT 2
40524: ARRAY
40525: PPUSH
40526: CALL_OW 111
// continue ;
40530: GO 40012
// end ; end ; r := GetDir ( tmp ) ;
40532: LD_ADDR_VAR 0 15
40536: PUSH
40537: LD_VAR 0 13
40541: PPUSH
40542: CALL_OW 254
40546: ST_TO_ADDR
// if r = 5 then
40547: LD_VAR 0 15
40551: PUSH
40552: LD_INT 5
40554: EQUAL
40555: IFFALSE 40565
// r := 0 ;
40557: LD_ADDR_VAR 0 15
40561: PUSH
40562: LD_INT 0
40564: ST_TO_ADDR
// for j = r to 5 do
40565: LD_ADDR_VAR 0 10
40569: PUSH
40570: DOUBLE
40571: LD_VAR 0 15
40575: DEC
40576: ST_TO_ADDR
40577: LD_INT 5
40579: PUSH
40580: FOR_TO
40581: IFFALSE 40697
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40583: LD_ADDR_VAR 0 11
40587: PUSH
40588: LD_VAR 0 13
40592: PPUSH
40593: CALL_OW 250
40597: PPUSH
40598: LD_VAR 0 10
40602: PPUSH
40603: LD_INT 2
40605: PPUSH
40606: CALL_OW 272
40610: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40611: LD_ADDR_VAR 0 12
40615: PUSH
40616: LD_VAR 0 13
40620: PPUSH
40621: CALL_OW 251
40625: PPUSH
40626: LD_VAR 0 10
40630: PPUSH
40631: LD_INT 2
40633: PPUSH
40634: CALL_OW 273
40638: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40639: LD_VAR 0 11
40643: PPUSH
40644: LD_VAR 0 12
40648: PPUSH
40649: CALL_OW 488
40653: IFFALSE 40672
40655: PUSH
40656: LD_VAR 0 11
40660: PPUSH
40661: LD_VAR 0 12
40665: PPUSH
40666: CALL_OW 428
40670: NOT
40671: AND
40672: IFFALSE 40695
// begin ComMoveXY ( tmp , _x , _y ) ;
40674: LD_VAR 0 13
40678: PPUSH
40679: LD_VAR 0 11
40683: PPUSH
40684: LD_VAR 0 12
40688: PPUSH
40689: CALL_OW 111
// break ;
40693: GO 40697
// end ; end ;
40695: GO 40580
40697: POP
40698: POP
// end ; end ;
40699: GO 40012
40701: POP
40702: POP
// end ;
40703: LD_VAR 0 8
40707: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40708: LD_INT 0
40710: PPUSH
// result := true ;
40711: LD_ADDR_VAR 0 3
40715: PUSH
40716: LD_INT 1
40718: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40719: LD_VAR 0 2
40723: PUSH
40724: LD_INT 24
40726: DOUBLE
40727: EQUAL
40728: IFTRUE 40738
40730: LD_INT 33
40732: DOUBLE
40733: EQUAL
40734: IFTRUE 40738
40736: GO 40763
40738: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40739: LD_ADDR_VAR 0 3
40743: PUSH
40744: LD_INT 32
40746: PPUSH
40747: LD_VAR 0 1
40751: PPUSH
40752: CALL_OW 321
40756: PUSH
40757: LD_INT 2
40759: EQUAL
40760: ST_TO_ADDR
40761: GO 41079
40763: LD_INT 20
40765: DOUBLE
40766: EQUAL
40767: IFTRUE 40771
40769: GO 40796
40771: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40772: LD_ADDR_VAR 0 3
40776: PUSH
40777: LD_INT 6
40779: PPUSH
40780: LD_VAR 0 1
40784: PPUSH
40785: CALL_OW 321
40789: PUSH
40790: LD_INT 2
40792: EQUAL
40793: ST_TO_ADDR
40794: GO 41079
40796: LD_INT 22
40798: DOUBLE
40799: EQUAL
40800: IFTRUE 40810
40802: LD_INT 36
40804: DOUBLE
40805: EQUAL
40806: IFTRUE 40810
40808: GO 40835
40810: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40811: LD_ADDR_VAR 0 3
40815: PUSH
40816: LD_INT 15
40818: PPUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: CALL_OW 321
40828: PUSH
40829: LD_INT 2
40831: EQUAL
40832: ST_TO_ADDR
40833: GO 41079
40835: LD_INT 30
40837: DOUBLE
40838: EQUAL
40839: IFTRUE 40843
40841: GO 40868
40843: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40844: LD_ADDR_VAR 0 3
40848: PUSH
40849: LD_INT 20
40851: PPUSH
40852: LD_VAR 0 1
40856: PPUSH
40857: CALL_OW 321
40861: PUSH
40862: LD_INT 2
40864: EQUAL
40865: ST_TO_ADDR
40866: GO 41079
40868: LD_INT 28
40870: DOUBLE
40871: EQUAL
40872: IFTRUE 40882
40874: LD_INT 21
40876: DOUBLE
40877: EQUAL
40878: IFTRUE 40882
40880: GO 40907
40882: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_INT 21
40890: PPUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL_OW 321
40900: PUSH
40901: LD_INT 2
40903: EQUAL
40904: ST_TO_ADDR
40905: GO 41079
40907: LD_INT 16
40909: DOUBLE
40910: EQUAL
40911: IFTRUE 40915
40913: GO 40940
40915: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40916: LD_ADDR_VAR 0 3
40920: PUSH
40921: LD_INT 84
40923: PPUSH
40924: LD_VAR 0 1
40928: PPUSH
40929: CALL_OW 321
40933: PUSH
40934: LD_INT 2
40936: EQUAL
40937: ST_TO_ADDR
40938: GO 41079
40940: LD_INT 19
40942: DOUBLE
40943: EQUAL
40944: IFTRUE 40954
40946: LD_INT 23
40948: DOUBLE
40949: EQUAL
40950: IFTRUE 40954
40952: GO 40979
40954: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40955: LD_ADDR_VAR 0 3
40959: PUSH
40960: LD_INT 83
40962: PPUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 321
40972: PUSH
40973: LD_INT 2
40975: EQUAL
40976: ST_TO_ADDR
40977: GO 41079
40979: LD_INT 17
40981: DOUBLE
40982: EQUAL
40983: IFTRUE 40987
40985: GO 41012
40987: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40988: LD_ADDR_VAR 0 3
40992: PUSH
40993: LD_INT 39
40995: PPUSH
40996: LD_VAR 0 1
41000: PPUSH
41001: CALL_OW 321
41005: PUSH
41006: LD_INT 2
41008: EQUAL
41009: ST_TO_ADDR
41010: GO 41079
41012: LD_INT 18
41014: DOUBLE
41015: EQUAL
41016: IFTRUE 41020
41018: GO 41045
41020: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41021: LD_ADDR_VAR 0 3
41025: PUSH
41026: LD_INT 40
41028: PPUSH
41029: LD_VAR 0 1
41033: PPUSH
41034: CALL_OW 321
41038: PUSH
41039: LD_INT 2
41041: EQUAL
41042: ST_TO_ADDR
41043: GO 41079
41045: LD_INT 27
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41078
41053: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_INT 35
41061: PPUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 321
41071: PUSH
41072: LD_INT 2
41074: EQUAL
41075: ST_TO_ADDR
41076: GO 41079
41078: POP
// end ;
41079: LD_VAR 0 3
41083: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41084: LD_INT 0
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
// result := false ;
41097: LD_ADDR_VAR 0 6
41101: PUSH
41102: LD_INT 0
41104: ST_TO_ADDR
// if btype = b_depot then
41105: LD_VAR 0 2
41109: PUSH
41110: LD_INT 0
41112: EQUAL
41113: IFFALSE 41125
// begin result := true ;
41115: LD_ADDR_VAR 0 6
41119: PUSH
41120: LD_INT 1
41122: ST_TO_ADDR
// exit ;
41123: GO 41979
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41125: LD_VAR 0 1
41129: NOT
41130: IFTRUE 41155
41132: PUSH
41133: LD_VAR 0 1
41137: PPUSH
41138: CALL_OW 266
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: IN
41153: NOT
41154: OR
41155: IFTRUE 41164
41157: PUSH
41158: LD_VAR 0 2
41162: NOT
41163: OR
41164: IFTRUE 41200
41166: PUSH
41167: LD_VAR 0 5
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: LD_INT 3
41183: PUSH
41184: LD_INT 4
41186: PUSH
41187: LD_INT 5
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: IN
41198: NOT
41199: OR
41200: IFTRUE 41219
41202: PUSH
41203: LD_VAR 0 3
41207: PPUSH
41208: LD_VAR 0 4
41212: PPUSH
41213: CALL_OW 488
41217: NOT
41218: OR
41219: IFFALSE 41223
// exit ;
41221: GO 41979
// side := GetSide ( depot ) ;
41223: LD_ADDR_VAR 0 9
41227: PUSH
41228: LD_VAR 0 1
41232: PPUSH
41233: CALL_OW 255
41237: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41238: LD_VAR 0 9
41242: PPUSH
41243: LD_VAR 0 2
41247: PPUSH
41248: CALL 40708 0 2
41252: NOT
41253: IFFALSE 41257
// exit ;
41255: GO 41979
// pom := GetBase ( depot ) ;
41257: LD_ADDR_VAR 0 10
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: CALL_OW 274
41271: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41272: LD_ADDR_VAR 0 11
41276: PUSH
41277: LD_VAR 0 2
41281: PPUSH
41282: LD_VAR 0 1
41286: PPUSH
41287: CALL_OW 248
41291: PPUSH
41292: CALL_OW 450
41296: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41297: LD_VAR 0 10
41301: PPUSH
41302: LD_INT 1
41304: PPUSH
41305: CALL_OW 275
41309: PUSH
41310: LD_VAR 0 11
41314: PUSH
41315: LD_INT 1
41317: ARRAY
41318: GREATEREQUAL
41319: IFFALSE 41345
41321: PUSH
41322: LD_VAR 0 10
41326: PPUSH
41327: LD_INT 2
41329: PPUSH
41330: CALL_OW 275
41334: PUSH
41335: LD_VAR 0 11
41339: PUSH
41340: LD_INT 2
41342: ARRAY
41343: GREATEREQUAL
41344: AND
41345: IFFALSE 41371
41347: PUSH
41348: LD_VAR 0 10
41352: PPUSH
41353: LD_INT 3
41355: PPUSH
41356: CALL_OW 275
41360: PUSH
41361: LD_VAR 0 11
41365: PUSH
41366: LD_INT 3
41368: ARRAY
41369: GREATEREQUAL
41370: AND
41371: NOT
41372: IFFALSE 41376
// exit ;
41374: GO 41979
// if GetBType ( depot ) = b_depot then
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 266
41385: PUSH
41386: LD_INT 0
41388: EQUAL
41389: IFFALSE 41401
// dist := 28 else
41391: LD_ADDR_VAR 0 14
41395: PUSH
41396: LD_INT 28
41398: ST_TO_ADDR
41399: GO 41409
// dist := 36 ;
41401: LD_ADDR_VAR 0 14
41405: PUSH
41406: LD_INT 36
41408: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41409: LD_VAR 0 1
41413: PPUSH
41414: LD_VAR 0 3
41418: PPUSH
41419: LD_VAR 0 4
41423: PPUSH
41424: CALL_OW 297
41428: PUSH
41429: LD_VAR 0 14
41433: GREATER
41434: IFFALSE 41438
// exit ;
41436: GO 41979
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41438: LD_ADDR_VAR 0 12
41442: PUSH
41443: LD_VAR 0 2
41447: PPUSH
41448: LD_VAR 0 3
41452: PPUSH
41453: LD_VAR 0 4
41457: PPUSH
41458: LD_VAR 0 5
41462: PPUSH
41463: LD_VAR 0 1
41467: PPUSH
41468: CALL_OW 248
41472: PPUSH
41473: LD_INT 0
41475: PPUSH
41476: CALL 41984 0 6
41480: ST_TO_ADDR
// if not hexes then
41481: LD_VAR 0 12
41485: NOT
41486: IFFALSE 41490
// exit ;
41488: GO 41979
// hex := GetHexInfo ( x , y ) ;
41490: LD_ADDR_VAR 0 15
41494: PUSH
41495: LD_VAR 0 3
41499: PPUSH
41500: LD_VAR 0 4
41504: PPUSH
41505: CALL_OW 546
41509: ST_TO_ADDR
// if hex [ 1 ] then
41510: LD_VAR 0 15
41514: PUSH
41515: LD_INT 1
41517: ARRAY
41518: IFFALSE 41522
// exit ;
41520: GO 41979
// height := hex [ 2 ] ;
41522: LD_ADDR_VAR 0 13
41526: PUSH
41527: LD_VAR 0 15
41531: PUSH
41532: LD_INT 2
41534: ARRAY
41535: ST_TO_ADDR
// for i = 1 to hexes do
41536: LD_ADDR_VAR 0 7
41540: PUSH
41541: DOUBLE
41542: LD_INT 1
41544: DEC
41545: ST_TO_ADDR
41546: LD_VAR 0 12
41550: PUSH
41551: FOR_TO
41552: IFFALSE 41896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41554: LD_VAR 0 12
41558: PUSH
41559: LD_VAR 0 7
41563: ARRAY
41564: PUSH
41565: LD_INT 1
41567: ARRAY
41568: PPUSH
41569: LD_VAR 0 12
41573: PUSH
41574: LD_VAR 0 7
41578: ARRAY
41579: PUSH
41580: LD_INT 2
41582: ARRAY
41583: PPUSH
41584: CALL_OW 488
41588: NOT
41589: IFTRUE 41631
41591: PUSH
41592: LD_VAR 0 12
41596: PUSH
41597: LD_VAR 0 7
41601: ARRAY
41602: PUSH
41603: LD_INT 1
41605: ARRAY
41606: PPUSH
41607: LD_VAR 0 12
41611: PUSH
41612: LD_VAR 0 7
41616: ARRAY
41617: PUSH
41618: LD_INT 2
41620: ARRAY
41621: PPUSH
41622: CALL_OW 428
41626: PUSH
41627: LD_INT 0
41629: GREATER
41630: OR
41631: IFTRUE 41669
41633: PUSH
41634: LD_VAR 0 12
41638: PUSH
41639: LD_VAR 0 7
41643: ARRAY
41644: PUSH
41645: LD_INT 1
41647: ARRAY
41648: PPUSH
41649: LD_VAR 0 12
41653: PUSH
41654: LD_VAR 0 7
41658: ARRAY
41659: PUSH
41660: LD_INT 2
41662: ARRAY
41663: PPUSH
41664: CALL_OW 351
41668: OR
41669: IFFALSE 41675
// exit ;
41671: POP
41672: POP
41673: GO 41979
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41675: LD_ADDR_VAR 0 8
41679: PUSH
41680: LD_VAR 0 12
41684: PUSH
41685: LD_VAR 0 7
41689: ARRAY
41690: PUSH
41691: LD_INT 1
41693: ARRAY
41694: PPUSH
41695: LD_VAR 0 12
41699: PUSH
41700: LD_VAR 0 7
41704: ARRAY
41705: PUSH
41706: LD_INT 2
41708: ARRAY
41709: PPUSH
41710: CALL_OW 546
41714: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41715: LD_VAR 0 8
41719: PUSH
41720: LD_INT 1
41722: ARRAY
41723: IFTRUE 41745
41725: PUSH
41726: LD_VAR 0 8
41730: PUSH
41731: LD_INT 2
41733: ARRAY
41734: PUSH
41735: LD_VAR 0 13
41739: PUSH
41740: LD_INT 2
41742: PLUS
41743: GREATER
41744: OR
41745: IFTRUE 41767
41747: PUSH
41748: LD_VAR 0 8
41752: PUSH
41753: LD_INT 2
41755: ARRAY
41756: PUSH
41757: LD_VAR 0 13
41761: PUSH
41762: LD_INT 2
41764: MINUS
41765: LESS
41766: OR
41767: IFTRUE 41835
41769: PUSH
41770: LD_VAR 0 8
41774: PUSH
41775: LD_INT 3
41777: ARRAY
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 8
41784: PUSH
41785: LD_INT 9
41787: PUSH
41788: LD_INT 10
41790: PUSH
41791: LD_INT 11
41793: PUSH
41794: LD_INT 12
41796: PUSH
41797: LD_INT 13
41799: PUSH
41800: LD_INT 16
41802: PUSH
41803: LD_INT 17
41805: PUSH
41806: LD_INT 18
41808: PUSH
41809: LD_INT 19
41811: PUSH
41812: LD_INT 20
41814: PUSH
41815: LD_INT 21
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: IN
41833: NOT
41834: OR
41835: IFTRUE 41848
41837: PUSH
41838: LD_VAR 0 8
41842: PUSH
41843: LD_INT 5
41845: ARRAY
41846: NOT
41847: OR
41848: IFTRUE 41888
41850: PUSH
41851: LD_VAR 0 8
41855: PUSH
41856: LD_INT 6
41858: ARRAY
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 7
41868: PUSH
41869: LD_INT 9
41871: PUSH
41872: LD_INT 10
41874: PUSH
41875: LD_INT 11
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: IN
41886: NOT
41887: OR
41888: IFFALSE 41894
// exit ;
41890: POP
41891: POP
41892: GO 41979
// end ;
41894: GO 41551
41896: POP
41897: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41898: LD_VAR 0 9
41902: PPUSH
41903: LD_VAR 0 3
41907: PPUSH
41908: LD_VAR 0 4
41912: PPUSH
41913: LD_INT 20
41915: PPUSH
41916: CALL 33798 0 4
41920: PUSH
41921: LD_INT 4
41923: ARRAY
41924: IFFALSE 41928
// exit ;
41926: GO 41979
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41928: LD_VAR 0 2
41932: PUSH
41933: LD_INT 29
41935: PUSH
41936: LD_INT 30
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: IN
41943: IFFALSE 41967
41945: PUSH
41946: LD_VAR 0 3
41950: PPUSH
41951: LD_VAR 0 4
41955: PPUSH
41956: LD_VAR 0 9
41960: PPUSH
41961: CALL_OW 440
41965: NOT
41966: AND
41967: IFFALSE 41971
// exit ;
41969: GO 41979
// result := true ;
41971: LD_ADDR_VAR 0 6
41975: PUSH
41976: LD_INT 1
41978: ST_TO_ADDR
// end ;
41979: LD_VAR 0 6
41983: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41984: LD_INT 0
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
// result = [ ] ;
42044: LD_ADDR_VAR 0 7
42048: PUSH
42049: EMPTY
42050: ST_TO_ADDR
// temp_list = [ ] ;
42051: LD_ADDR_VAR 0 9
42055: PUSH
42056: EMPTY
42057: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42058: LD_VAR 0 4
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: LD_INT 4
42077: PUSH
42078: LD_INT 5
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: IN
42089: NOT
42090: IFTRUE 42133
42092: PUSH
42093: LD_VAR 0 1
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: IN
42108: IFFALSE 42132
42110: PUSH
42111: LD_VAR 0 5
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 3
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: IN
42130: NOT
42131: AND
42132: OR
42133: IFFALSE 42137
// exit ;
42135: GO 60536
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42137: LD_VAR 0 1
42141: PUSH
42142: LD_INT 6
42144: PUSH
42145: LD_INT 7
42147: PUSH
42148: LD_INT 8
42150: PUSH
42151: LD_INT 13
42153: PUSH
42154: LD_INT 12
42156: PUSH
42157: LD_INT 15
42159: PUSH
42160: LD_INT 11
42162: PUSH
42163: LD_INT 14
42165: PUSH
42166: LD_INT 10
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: IN
42180: IFFALSE 42190
// btype = b_lab ;
42182: LD_ADDR_VAR 0 1
42186: PUSH
42187: LD_INT 6
42189: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42190: LD_VAR 0 6
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: IN
42209: NOT
42210: IFTRUE 42278
42212: PUSH
42213: LD_VAR 0 1
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: LD_INT 6
42232: PUSH
42233: LD_INT 36
42235: PUSH
42236: LD_INT 4
42238: PUSH
42239: LD_INT 5
42241: PUSH
42242: LD_INT 31
42244: PUSH
42245: LD_INT 32
42247: PUSH
42248: LD_INT 33
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: IN
42264: NOT
42265: IFFALSE 42277
42267: PUSH
42268: LD_VAR 0 6
42272: PUSH
42273: LD_INT 1
42275: EQUAL
42276: AND
42277: OR
42278: IFTRUE 42310
42280: PUSH
42281: LD_VAR 0 1
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: IN
42296: NOT
42297: IFFALSE 42309
42299: PUSH
42300: LD_VAR 0 6
42304: PUSH
42305: LD_INT 2
42307: EQUAL
42308: AND
42309: OR
42310: IFFALSE 42320
// mode = 0 ;
42312: LD_ADDR_VAR 0 6
42316: PUSH
42317: LD_INT 0
42319: ST_TO_ADDR
// case mode of 0 :
42320: LD_VAR 0 6
42324: PUSH
42325: LD_INT 0
42327: DOUBLE
42328: EQUAL
42329: IFTRUE 42333
42331: GO 53786
42333: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42334: LD_ADDR_VAR 0 11
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 3
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 3
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42527: LD_ADDR_VAR 0 12
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 3
42684: NEG
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 3
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42723: LD_ADDR_VAR 0 13
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: NEG
42895: PUSH
42896: LD_INT 3
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42922: LD_ADDR_VAR 0 14
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 3
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43118: LD_ADDR_VAR 0 15
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 3
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43311: LD_ADDR_VAR 0 16
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 3
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43504: LD_ADDR_VAR 0 17
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43734: LD_ADDR_VAR 0 18
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43964: LD_ADDR_VAR 0 19
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44194: LD_ADDR_VAR 0 20
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44424: LD_ADDR_VAR 0 21
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44654: LD_ADDR_VAR 0 22
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44884: LD_ADDR_VAR 0 23
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: LD_INT 3
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 3
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45164: LD_ADDR_VAR 0 24
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45440: LD_ADDR_VAR 0 25
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 3
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45714: LD_ADDR_VAR 0 26
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 3
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45990: LD_ADDR_VAR 0 27
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 3
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 3
46235: NEG
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46270: LD_ADDR_VAR 0 28
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 3
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: NEG
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46552: LD_ADDR_VAR 0 29
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: LD_INT 3
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 3
46796: NEG
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46831: LD_ADDR_VAR 0 30
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 3
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 3
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47109: LD_ADDR_VAR 0 31
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 3
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47387: LD_ADDR_VAR 0 32
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47665: LD_ADDR_VAR 0 33
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: LD_INT 3
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: NEG
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47944: LD_ADDR_VAR 0 34
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 3
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48224: LD_ADDR_VAR 0 35
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48336: LD_ADDR_VAR 0 36
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48448: LD_ADDR_VAR 0 37
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48560: LD_ADDR_VAR 0 38
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48672: LD_ADDR_VAR 0 39
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48784: LD_ADDR_VAR 0 40
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48896: LD_ADDR_VAR 0 41
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 3
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 3
49181: NEG
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: NEG
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: LD_INT 3
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49246: LD_ADDR_VAR 0 42
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 3
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 3
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: NEG
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49596: LD_ADDR_VAR 0 43
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49944: LD_ADDR_VAR 0 44
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 3
50218: NEG
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50294: LD_ADDR_VAR 0 45
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50644: LD_ADDR_VAR 0 46
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50992: LD_ADDR_VAR 0 47
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51143: LD_ADDR_VAR 0 48
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51290: LD_ADDR_VAR 0 49
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51434: LD_ADDR_VAR 0 50
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51578: LD_ADDR_VAR 0 51
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51725: LD_ADDR_VAR 0 52
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51876: LD_ADDR_VAR 0 53
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52106: LD_ADDR_VAR 0 54
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52336: LD_ADDR_VAR 0 55
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52566: LD_ADDR_VAR 0 56
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52796: LD_ADDR_VAR 0 57
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53026: LD_ADDR_VAR 0 58
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53256: LD_ADDR_VAR 0 59
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53344: LD_ADDR_VAR 0 60
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53432: LD_ADDR_VAR 0 61
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53520: LD_ADDR_VAR 0 62
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53608: LD_ADDR_VAR 0 63
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53696: LD_ADDR_VAR 0 64
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: ST_TO_ADDR
// end ; 1 :
53784: GO 59681
53786: LD_INT 1
53788: DOUBLE
53789: EQUAL
53790: IFTRUE 53794
53792: GO 56417
53794: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53795: LD_ADDR_VAR 0 11
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 3
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53839: LD_ADDR_VAR 0 12
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53880: LD_ADDR_VAR 0 13
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: LD_INT 3
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53920: LD_ADDR_VAR 0 14
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: LIST
53960: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53961: LD_ADDR_VAR 0 15
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 3
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54005: LD_ADDR_VAR 0 16
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: LD_INT 3
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54051: LD_ADDR_VAR 0 17
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54095: LD_ADDR_VAR 0 18
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54136: LD_ADDR_VAR 0 19
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 3
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54176: LD_ADDR_VAR 0 20
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 3
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54217: LD_ADDR_VAR 0 21
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54261: LD_ADDR_VAR 0 22
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: LD_INT 3
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: NEG
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54307: LD_ADDR_VAR 0 23
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 4
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 3
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54351: LD_ADDR_VAR 0 24
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 4
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54392: LD_ADDR_VAR 0 25
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 4
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: LD_INT 4
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54432: LD_ADDR_VAR 0 26
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 4
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54473: LD_ADDR_VAR 0 27
54477: PUSH
54478: LD_INT 3
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 4
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54517: LD_ADDR_VAR 0 28
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 4
54548: NEG
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54563: LD_ADDR_VAR 0 29
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 3
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 5
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 5
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 6
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 6
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 5
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54718: LD_ADDR_VAR 0 30
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 3
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 3
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 4
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 4
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 5
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 5
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 5
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 6
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 6
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54861: LD_ADDR_VAR 0 31
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 4
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 4
54908: PUSH
54909: LD_INT 4
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 3
54918: PUSH
54919: LD_INT 4
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 5
54928: PUSH
54929: LD_INT 4
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 5
54938: PUSH
54939: LD_INT 5
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 4
54948: PUSH
54949: LD_INT 5
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 6
54958: PUSH
54959: LD_INT 5
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 6
54968: PUSH
54969: LD_INT 6
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 5
54978: PUSH
54979: LD_INT 6
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55000: LD_ADDR_VAR 0 32
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 4
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 4
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 5
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 5
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 6
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 6
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 5
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55143: LD_ADDR_VAR 0 33
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 4
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 4
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 4
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 5
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 5
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 5
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 6
55263: NEG
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 6
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55298: LD_ADDR_VAR 0 34
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: LD_INT 4
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 4
55353: NEG
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: LD_INT 4
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 4
55377: NEG
55378: PUSH
55379: LD_INT 5
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 5
55389: NEG
55390: PUSH
55391: LD_INT 4
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 5
55401: NEG
55402: PUSH
55403: LD_INT 5
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 5
55413: NEG
55414: PUSH
55415: LD_INT 6
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 6
55425: NEG
55426: PUSH
55427: LD_INT 5
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 6
55437: NEG
55438: PUSH
55439: LD_INT 6
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55461: LD_ADDR_VAR 0 41
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55505: LD_ADDR_VAR 0 42
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55546: LD_ADDR_VAR 0 43
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55586: LD_ADDR_VAR 0 44
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55627: LD_ADDR_VAR 0 45
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55671: LD_ADDR_VAR 0 46
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 3
55702: NEG
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55717: LD_ADDR_VAR 0 47
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55750: LD_ADDR_VAR 0 48
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55781: LD_ADDR_VAR 0 49
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55810: LD_ADDR_VAR 0 50
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55839: LD_ADDR_VAR 0 51
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55870: LD_ADDR_VAR 0 52
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55903: LD_ADDR_VAR 0 53
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55947: LD_ADDR_VAR 0 54
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: LIST
55987: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55988: LD_ADDR_VAR 0 55
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56028: LD_ADDR_VAR 0 56
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 3
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56069: LD_ADDR_VAR 0 57
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 3
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56113: LD_ADDR_VAR 0 58
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56159: LD_ADDR_VAR 0 59
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56203: LD_ADDR_VAR 0 60
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56244: LD_ADDR_VAR 0 61
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56284: LD_ADDR_VAR 0 62
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56325: LD_ADDR_VAR 0 63
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56369: LD_ADDR_VAR 0 64
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 2
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
// end ; 2 :
56415: GO 59681
56417: LD_INT 2
56419: DOUBLE
56420: EQUAL
56421: IFTRUE 56425
56423: GO 59680
56425: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56426: LD_ADDR_VAR 0 29
56430: PUSH
56431: LD_INT 4
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 5
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 5
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 4
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 5
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 4
56556: PUSH
56557: LD_INT 4
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: LD_INT 4
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 4
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 4
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 4
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 4
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 5
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 5
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 4
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 5
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: NEG
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: LD_INT 4
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 4
56823: NEG
56824: PUSH
56825: LD_INT 5
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: LD_INT 4
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 5
56871: NEG
56872: PUSH
56873: LD_INT 4
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 5
56883: NEG
56884: PUSH
56885: LD_INT 5
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 3
56895: NEG
56896: PUSH
56897: LD_INT 5
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 5
56907: NEG
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56964: LD_ADDR_VAR 0 30
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 4
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 5
56991: PUSH
56992: LD_INT 4
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: LD_INT 5
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 4
57011: PUSH
57012: LD_INT 5
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: PUSH
57022: LD_INT 4
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 3
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 5
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 4
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 4
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 4
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 4
57154: NEG
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 4
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 4
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 5
57210: NEG
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 5
57221: NEG
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 5
57233: NEG
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: LD_INT 4
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 3
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: NEG
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: LD_INT 4
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: LD_INT 4
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 4
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 4
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 5
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 4
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 4
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 5
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 5
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57511: LD_ADDR_VAR 0 31
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 4
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 4
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 5
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 5
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 5
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 3
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 4
57690: NEG
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 4
57713: NEG
57714: PUSH
57715: LD_INT 4
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 4
57725: NEG
57726: PUSH
57727: LD_INT 5
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: LD_INT 4
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 4
57761: NEG
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 5
57773: NEG
57774: PUSH
57775: LD_INT 4
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 5
57785: NEG
57786: PUSH
57787: LD_INT 5
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: LD_INT 5
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 5
57809: NEG
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 4
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 3
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 4
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: LD_INT 4
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 4
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 4
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 5
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 5
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 4
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 5
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58061: LD_ADDR_VAR 0 32
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 4
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 5
58124: NEG
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 5
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 5
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 4
58230: NEG
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 4
58242: NEG
58243: PUSH
58244: LD_INT 4
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 4
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 4
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 5
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 4
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 4
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: LD_INT 5
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 5
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 4
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 4
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 4
58473: PUSH
58474: LD_INT 4
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 4
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 5
58493: PUSH
58494: LD_INT 4
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: PUSH
58504: LD_INT 5
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 4
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 5
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 3
58553: PUSH
58554: LD_INT 5
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58608: LD_ADDR_VAR 0 33
58612: PUSH
58613: LD_INT 4
58615: NEG
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 4
58627: NEG
58628: PUSH
58629: LD_INT 5
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 4
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 5
58675: NEG
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 5
58687: NEG
58688: PUSH
58689: LD_INT 5
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: LD_INT 5
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 5
58711: NEG
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 4
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 4
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 4
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 5
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 5
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 4
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 5
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 4
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: LD_INT 4
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 4
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: LD_INT 4
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 4
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 4
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 5
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 4
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: LD_INT 5
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59146: LD_ADDR_VAR 0 34
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 4
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 5
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 3
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 5
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 3
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 5
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 4
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 4
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 4
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 5
59368: PUSH
59369: LD_INT 4
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 5
59378: PUSH
59379: LD_INT 5
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: PUSH
59389: LD_INT 5
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 3
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 5
59418: PUSH
59419: LD_INT 3
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: PUSH
59429: LD_INT 5
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 3
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 4
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 4
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 4
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 4
59531: NEG
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 4
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 5
59587: NEG
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 5
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: ST_TO_ADDR
// end ; end ;
59678: GO 59681
59680: POP
// case btype of b_depot , b_warehouse :
59681: LD_VAR 0 1
59685: PUSH
59686: LD_INT 0
59688: DOUBLE
59689: EQUAL
59690: IFTRUE 59700
59692: LD_INT 1
59694: DOUBLE
59695: EQUAL
59696: IFTRUE 59700
59698: GO 59901
59700: POP
// case nation of nation_american :
59701: LD_VAR 0 5
59705: PUSH
59706: LD_INT 1
59708: DOUBLE
59709: EQUAL
59710: IFTRUE 59714
59712: GO 59770
59714: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59715: LD_ADDR_VAR 0 9
59719: PUSH
59720: LD_VAR 0 11
59724: PUSH
59725: LD_VAR 0 12
59729: PUSH
59730: LD_VAR 0 13
59734: PUSH
59735: LD_VAR 0 14
59739: PUSH
59740: LD_VAR 0 15
59744: PUSH
59745: LD_VAR 0 16
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: PUSH
59758: LD_VAR 0 4
59762: PUSH
59763: LD_INT 1
59765: PLUS
59766: ARRAY
59767: ST_TO_ADDR
59768: GO 59899
59770: LD_INT 2
59772: DOUBLE
59773: EQUAL
59774: IFTRUE 59778
59776: GO 59834
59778: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59779: LD_ADDR_VAR 0 9
59783: PUSH
59784: LD_VAR 0 17
59788: PUSH
59789: LD_VAR 0 18
59793: PUSH
59794: LD_VAR 0 19
59798: PUSH
59799: LD_VAR 0 20
59803: PUSH
59804: LD_VAR 0 21
59808: PUSH
59809: LD_VAR 0 22
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: LD_VAR 0 4
59826: PUSH
59827: LD_INT 1
59829: PLUS
59830: ARRAY
59831: ST_TO_ADDR
59832: GO 59899
59834: LD_INT 3
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59842
59840: GO 59898
59842: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59843: LD_ADDR_VAR 0 9
59847: PUSH
59848: LD_VAR 0 23
59852: PUSH
59853: LD_VAR 0 24
59857: PUSH
59858: LD_VAR 0 25
59862: PUSH
59863: LD_VAR 0 26
59867: PUSH
59868: LD_VAR 0 27
59872: PUSH
59873: LD_VAR 0 28
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: PUSH
59886: LD_VAR 0 4
59890: PUSH
59891: LD_INT 1
59893: PLUS
59894: ARRAY
59895: ST_TO_ADDR
59896: GO 59899
59898: POP
59899: GO 60454
59901: LD_INT 2
59903: DOUBLE
59904: EQUAL
59905: IFTRUE 59915
59907: LD_INT 3
59909: DOUBLE
59910: EQUAL
59911: IFTRUE 59915
59913: GO 59971
59915: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59916: LD_ADDR_VAR 0 9
59920: PUSH
59921: LD_VAR 0 29
59925: PUSH
59926: LD_VAR 0 30
59930: PUSH
59931: LD_VAR 0 31
59935: PUSH
59936: LD_VAR 0 32
59940: PUSH
59941: LD_VAR 0 33
59945: PUSH
59946: LD_VAR 0 34
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: PUSH
59959: LD_VAR 0 4
59963: PUSH
59964: LD_INT 1
59966: PLUS
59967: ARRAY
59968: ST_TO_ADDR
59969: GO 60454
59971: LD_INT 16
59973: DOUBLE
59974: EQUAL
59975: IFTRUE 60033
59977: LD_INT 17
59979: DOUBLE
59980: EQUAL
59981: IFTRUE 60033
59983: LD_INT 18
59985: DOUBLE
59986: EQUAL
59987: IFTRUE 60033
59989: LD_INT 19
59991: DOUBLE
59992: EQUAL
59993: IFTRUE 60033
59995: LD_INT 22
59997: DOUBLE
59998: EQUAL
59999: IFTRUE 60033
60001: LD_INT 20
60003: DOUBLE
60004: EQUAL
60005: IFTRUE 60033
60007: LD_INT 21
60009: DOUBLE
60010: EQUAL
60011: IFTRUE 60033
60013: LD_INT 23
60015: DOUBLE
60016: EQUAL
60017: IFTRUE 60033
60019: LD_INT 24
60021: DOUBLE
60022: EQUAL
60023: IFTRUE 60033
60025: LD_INT 25
60027: DOUBLE
60028: EQUAL
60029: IFTRUE 60033
60031: GO 60089
60033: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60034: LD_ADDR_VAR 0 9
60038: PUSH
60039: LD_VAR 0 35
60043: PUSH
60044: LD_VAR 0 36
60048: PUSH
60049: LD_VAR 0 37
60053: PUSH
60054: LD_VAR 0 38
60058: PUSH
60059: LD_VAR 0 39
60063: PUSH
60064: LD_VAR 0 40
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: PUSH
60077: LD_VAR 0 4
60081: PUSH
60082: LD_INT 1
60084: PLUS
60085: ARRAY
60086: ST_TO_ADDR
60087: GO 60454
60089: LD_INT 6
60091: DOUBLE
60092: EQUAL
60093: IFTRUE 60145
60095: LD_INT 7
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60145
60101: LD_INT 8
60103: DOUBLE
60104: EQUAL
60105: IFTRUE 60145
60107: LD_INT 13
60109: DOUBLE
60110: EQUAL
60111: IFTRUE 60145
60113: LD_INT 12
60115: DOUBLE
60116: EQUAL
60117: IFTRUE 60145
60119: LD_INT 15
60121: DOUBLE
60122: EQUAL
60123: IFTRUE 60145
60125: LD_INT 11
60127: DOUBLE
60128: EQUAL
60129: IFTRUE 60145
60131: LD_INT 14
60133: DOUBLE
60134: EQUAL
60135: IFTRUE 60145
60137: LD_INT 10
60139: DOUBLE
60140: EQUAL
60141: IFTRUE 60145
60143: GO 60201
60145: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60146: LD_ADDR_VAR 0 9
60150: PUSH
60151: LD_VAR 0 41
60155: PUSH
60156: LD_VAR 0 42
60160: PUSH
60161: LD_VAR 0 43
60165: PUSH
60166: LD_VAR 0 44
60170: PUSH
60171: LD_VAR 0 45
60175: PUSH
60176: LD_VAR 0 46
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: PUSH
60189: LD_VAR 0 4
60193: PUSH
60194: LD_INT 1
60196: PLUS
60197: ARRAY
60198: ST_TO_ADDR
60199: GO 60454
60201: LD_INT 36
60203: DOUBLE
60204: EQUAL
60205: IFTRUE 60209
60207: GO 60265
60209: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60210: LD_ADDR_VAR 0 9
60214: PUSH
60215: LD_VAR 0 47
60219: PUSH
60220: LD_VAR 0 48
60224: PUSH
60225: LD_VAR 0 49
60229: PUSH
60230: LD_VAR 0 50
60234: PUSH
60235: LD_VAR 0 51
60239: PUSH
60240: LD_VAR 0 52
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: PUSH
60253: LD_VAR 0 4
60257: PUSH
60258: LD_INT 1
60260: PLUS
60261: ARRAY
60262: ST_TO_ADDR
60263: GO 60454
60265: LD_INT 4
60267: DOUBLE
60268: EQUAL
60269: IFTRUE 60291
60271: LD_INT 5
60273: DOUBLE
60274: EQUAL
60275: IFTRUE 60291
60277: LD_INT 34
60279: DOUBLE
60280: EQUAL
60281: IFTRUE 60291
60283: LD_INT 37
60285: DOUBLE
60286: EQUAL
60287: IFTRUE 60291
60289: GO 60347
60291: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60292: LD_ADDR_VAR 0 9
60296: PUSH
60297: LD_VAR 0 53
60301: PUSH
60302: LD_VAR 0 54
60306: PUSH
60307: LD_VAR 0 55
60311: PUSH
60312: LD_VAR 0 56
60316: PUSH
60317: LD_VAR 0 57
60321: PUSH
60322: LD_VAR 0 58
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: PUSH
60335: LD_VAR 0 4
60339: PUSH
60340: LD_INT 1
60342: PLUS
60343: ARRAY
60344: ST_TO_ADDR
60345: GO 60454
60347: LD_INT 31
60349: DOUBLE
60350: EQUAL
60351: IFTRUE 60397
60353: LD_INT 32
60355: DOUBLE
60356: EQUAL
60357: IFTRUE 60397
60359: LD_INT 33
60361: DOUBLE
60362: EQUAL
60363: IFTRUE 60397
60365: LD_INT 27
60367: DOUBLE
60368: EQUAL
60369: IFTRUE 60397
60371: LD_INT 26
60373: DOUBLE
60374: EQUAL
60375: IFTRUE 60397
60377: LD_INT 28
60379: DOUBLE
60380: EQUAL
60381: IFTRUE 60397
60383: LD_INT 29
60385: DOUBLE
60386: EQUAL
60387: IFTRUE 60397
60389: LD_INT 30
60391: DOUBLE
60392: EQUAL
60393: IFTRUE 60397
60395: GO 60453
60397: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60398: LD_ADDR_VAR 0 9
60402: PUSH
60403: LD_VAR 0 59
60407: PUSH
60408: LD_VAR 0 60
60412: PUSH
60413: LD_VAR 0 61
60417: PUSH
60418: LD_VAR 0 62
60422: PUSH
60423: LD_VAR 0 63
60427: PUSH
60428: LD_VAR 0 64
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: PUSH
60441: LD_VAR 0 4
60445: PUSH
60446: LD_INT 1
60448: PLUS
60449: ARRAY
60450: ST_TO_ADDR
60451: GO 60454
60453: POP
// temp_list2 = [ ] ;
60454: LD_ADDR_VAR 0 10
60458: PUSH
60459: EMPTY
60460: ST_TO_ADDR
// for i in temp_list do
60461: LD_ADDR_VAR 0 8
60465: PUSH
60466: LD_VAR 0 9
60470: PUSH
60471: FOR_IN
60472: IFFALSE 60524
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60474: LD_ADDR_VAR 0 10
60478: PUSH
60479: LD_VAR 0 10
60483: PUSH
60484: LD_VAR 0 8
60488: PUSH
60489: LD_INT 1
60491: ARRAY
60492: PUSH
60493: LD_VAR 0 2
60497: PLUS
60498: PUSH
60499: LD_VAR 0 8
60503: PUSH
60504: LD_INT 2
60506: ARRAY
60507: PUSH
60508: LD_VAR 0 3
60512: PLUS
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: EMPTY
60519: LIST
60520: ADD
60521: ST_TO_ADDR
60522: GO 60471
60524: POP
60525: POP
// result = temp_list2 ;
60526: LD_ADDR_VAR 0 7
60530: PUSH
60531: LD_VAR 0 10
60535: ST_TO_ADDR
// end ;
60536: LD_VAR 0 7
60540: RET
// export function EnemyInRange ( unit , dist ) ; begin
60541: LD_INT 0
60543: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60544: LD_ADDR_VAR 0 3
60548: PUSH
60549: LD_VAR 0 1
60553: PPUSH
60554: CALL_OW 255
60558: PPUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: CALL_OW 250
60568: PPUSH
60569: LD_VAR 0 1
60573: PPUSH
60574: CALL_OW 251
60578: PPUSH
60579: LD_VAR 0 2
60583: PPUSH
60584: CALL 33798 0 4
60588: PUSH
60589: LD_INT 4
60591: ARRAY
60592: ST_TO_ADDR
// end ;
60593: LD_VAR 0 3
60597: RET
// export function PlayerSeeMe ( unit ) ; begin
60598: LD_INT 0
60600: PPUSH
// result := See ( your_side , unit ) ;
60601: LD_ADDR_VAR 0 2
60605: PUSH
60606: LD_OWVAR 2
60610: PPUSH
60611: LD_VAR 0 1
60615: PPUSH
60616: CALL_OW 292
60620: ST_TO_ADDR
// end ;
60621: LD_VAR 0 2
60625: RET
// export function ReverseDir ( unit ) ; begin
60626: LD_INT 0
60628: PPUSH
// if not unit then
60629: LD_VAR 0 1
60633: NOT
60634: IFFALSE 60638
// exit ;
60636: GO 60661
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60638: LD_ADDR_VAR 0 2
60642: PUSH
60643: LD_VAR 0 1
60647: PPUSH
60648: CALL_OW 254
60652: PUSH
60653: LD_INT 3
60655: PLUS
60656: PUSH
60657: LD_INT 6
60659: MOD
60660: ST_TO_ADDR
// end ;
60661: LD_VAR 0 2
60665: RET
// export function ReverseArray ( array ) ; var i ; begin
60666: LD_INT 0
60668: PPUSH
60669: PPUSH
// if not array then
60670: LD_VAR 0 1
60674: NOT
60675: IFFALSE 60679
// exit ;
60677: GO 60734
// result := [ ] ;
60679: LD_ADDR_VAR 0 2
60683: PUSH
60684: EMPTY
60685: ST_TO_ADDR
// for i := array downto 1 do
60686: LD_ADDR_VAR 0 3
60690: PUSH
60691: DOUBLE
60692: LD_VAR 0 1
60696: INC
60697: ST_TO_ADDR
60698: LD_INT 1
60700: PUSH
60701: FOR_DOWNTO
60702: IFFALSE 60732
// result := Join ( result , array [ i ] ) ;
60704: LD_ADDR_VAR 0 2
60708: PUSH
60709: LD_VAR 0 2
60713: PPUSH
60714: LD_VAR 0 1
60718: PUSH
60719: LD_VAR 0 3
60723: ARRAY
60724: PPUSH
60725: CALL 65576 0 2
60729: ST_TO_ADDR
60730: GO 60701
60732: POP
60733: POP
// end ;
60734: LD_VAR 0 2
60738: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60739: LD_INT 0
60741: PPUSH
60742: PPUSH
60743: PPUSH
60744: PPUSH
60745: PPUSH
60746: PPUSH
// if not unit or not hexes then
60747: LD_VAR 0 1
60751: NOT
60752: IFTRUE 60761
60754: PUSH
60755: LD_VAR 0 2
60759: NOT
60760: OR
60761: IFFALSE 60765
// exit ;
60763: GO 60888
// dist := 9999 ;
60765: LD_ADDR_VAR 0 5
60769: PUSH
60770: LD_INT 9999
60772: ST_TO_ADDR
// for i = 1 to hexes do
60773: LD_ADDR_VAR 0 4
60777: PUSH
60778: DOUBLE
60779: LD_INT 1
60781: DEC
60782: ST_TO_ADDR
60783: LD_VAR 0 2
60787: PUSH
60788: FOR_TO
60789: IFFALSE 60876
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60791: LD_ADDR_VAR 0 6
60795: PUSH
60796: LD_VAR 0 1
60800: PPUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_VAR 0 4
60810: ARRAY
60811: PUSH
60812: LD_INT 1
60814: ARRAY
60815: PPUSH
60816: LD_VAR 0 2
60820: PUSH
60821: LD_VAR 0 4
60825: ARRAY
60826: PUSH
60827: LD_INT 2
60829: ARRAY
60830: PPUSH
60831: CALL_OW 297
60835: ST_TO_ADDR
// if tdist < dist then
60836: LD_VAR 0 6
60840: PUSH
60841: LD_VAR 0 5
60845: LESS
60846: IFFALSE 60874
// begin hex := hexes [ i ] ;
60848: LD_ADDR_VAR 0 8
60852: PUSH
60853: LD_VAR 0 2
60857: PUSH
60858: LD_VAR 0 4
60862: ARRAY
60863: ST_TO_ADDR
// dist := tdist ;
60864: LD_ADDR_VAR 0 5
60868: PUSH
60869: LD_VAR 0 6
60873: ST_TO_ADDR
// end ; end ;
60874: GO 60788
60876: POP
60877: POP
// result := hex ;
60878: LD_ADDR_VAR 0 3
60882: PUSH
60883: LD_VAR 0 8
60887: ST_TO_ADDR
// end ;
60888: LD_VAR 0 3
60892: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60893: LD_INT 0
60895: PPUSH
60896: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60897: LD_VAR 0 1
60901: NOT
60902: IFTRUE 60941
60904: PUSH
60905: LD_VAR 0 1
60909: PUSH
60910: LD_INT 21
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 23
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PPUSH
60934: CALL_OW 69
60938: IN
60939: NOT
60940: OR
60941: IFFALSE 60945
// exit ;
60943: GO 60992
// for i = 1 to 3 do
60945: LD_ADDR_VAR 0 3
60949: PUSH
60950: DOUBLE
60951: LD_INT 1
60953: DEC
60954: ST_TO_ADDR
60955: LD_INT 3
60957: PUSH
60958: FOR_TO
60959: IFFALSE 60990
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60961: LD_VAR 0 1
60965: PPUSH
60966: CALL_OW 250
60970: PPUSH
60971: LD_VAR 0 1
60975: PPUSH
60976: CALL_OW 251
60980: PPUSH
60981: LD_INT 1
60983: PPUSH
60984: CALL_OW 453
60988: GO 60958
60990: POP
60991: POP
// end ;
60992: LD_VAR 0 2
60996: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60997: LD_INT 0
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
// if not unit or not enemy_unit then
61005: LD_VAR 0 1
61009: NOT
61010: IFTRUE 61019
61012: PUSH
61013: LD_VAR 0 2
61017: NOT
61018: OR
61019: IFFALSE 61023
// exit ;
61021: GO 61494
// if GetLives ( i ) < 250 then
61023: LD_VAR 0 4
61027: PPUSH
61028: CALL_OW 256
61032: PUSH
61033: LD_INT 250
61035: LESS
61036: IFFALSE 61049
// begin ComAutodestruct ( i ) ;
61038: LD_VAR 0 4
61042: PPUSH
61043: CALL 60893 0 1
// exit ;
61047: GO 61494
// end ; x := GetX ( enemy_unit ) ;
61049: LD_ADDR_VAR 0 7
61053: PUSH
61054: LD_VAR 0 2
61058: PPUSH
61059: CALL_OW 250
61063: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61064: LD_ADDR_VAR 0 8
61068: PUSH
61069: LD_VAR 0 2
61073: PPUSH
61074: CALL_OW 251
61078: ST_TO_ADDR
// if not x or not y then
61079: LD_VAR 0 7
61083: NOT
61084: IFTRUE 61093
61086: PUSH
61087: LD_VAR 0 8
61091: NOT
61092: OR
61093: IFFALSE 61097
// exit ;
61095: GO 61494
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61097: LD_ADDR_VAR 0 6
61101: PUSH
61102: LD_VAR 0 7
61106: PPUSH
61107: LD_INT 0
61109: PPUSH
61110: LD_INT 4
61112: PPUSH
61113: CALL_OW 272
61117: PUSH
61118: LD_VAR 0 8
61122: PPUSH
61123: LD_INT 0
61125: PPUSH
61126: LD_INT 4
61128: PPUSH
61129: CALL_OW 273
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_VAR 0 7
61142: PPUSH
61143: LD_INT 1
61145: PPUSH
61146: LD_INT 4
61148: PPUSH
61149: CALL_OW 272
61153: PUSH
61154: LD_VAR 0 8
61158: PPUSH
61159: LD_INT 1
61161: PPUSH
61162: LD_INT 4
61164: PPUSH
61165: CALL_OW 273
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_VAR 0 7
61178: PPUSH
61179: LD_INT 2
61181: PPUSH
61182: LD_INT 4
61184: PPUSH
61185: CALL_OW 272
61189: PUSH
61190: LD_VAR 0 8
61194: PPUSH
61195: LD_INT 2
61197: PPUSH
61198: LD_INT 4
61200: PPUSH
61201: CALL_OW 273
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_VAR 0 7
61214: PPUSH
61215: LD_INT 3
61217: PPUSH
61218: LD_INT 4
61220: PPUSH
61221: CALL_OW 272
61225: PUSH
61226: LD_VAR 0 8
61230: PPUSH
61231: LD_INT 3
61233: PPUSH
61234: LD_INT 4
61236: PPUSH
61237: CALL_OW 273
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_VAR 0 7
61250: PPUSH
61251: LD_INT 4
61253: PPUSH
61254: LD_INT 4
61256: PPUSH
61257: CALL_OW 272
61261: PUSH
61262: LD_VAR 0 8
61266: PPUSH
61267: LD_INT 4
61269: PPUSH
61270: LD_INT 4
61272: PPUSH
61273: CALL_OW 273
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_VAR 0 7
61286: PPUSH
61287: LD_INT 5
61289: PPUSH
61290: LD_INT 4
61292: PPUSH
61293: CALL_OW 272
61297: PUSH
61298: LD_VAR 0 8
61302: PPUSH
61303: LD_INT 5
61305: PPUSH
61306: LD_INT 4
61308: PPUSH
61309: CALL_OW 273
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// for i = tmp downto 1 do
61326: LD_ADDR_VAR 0 4
61330: PUSH
61331: DOUBLE
61332: LD_VAR 0 6
61336: INC
61337: ST_TO_ADDR
61338: LD_INT 1
61340: PUSH
61341: FOR_DOWNTO
61342: IFFALSE 61445
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61344: LD_VAR 0 6
61348: PUSH
61349: LD_VAR 0 4
61353: ARRAY
61354: PUSH
61355: LD_INT 1
61357: ARRAY
61358: PPUSH
61359: LD_VAR 0 6
61363: PUSH
61364: LD_VAR 0 4
61368: ARRAY
61369: PUSH
61370: LD_INT 2
61372: ARRAY
61373: PPUSH
61374: CALL_OW 488
61378: NOT
61379: IFTRUE 61421
61381: PUSH
61382: LD_VAR 0 6
61386: PUSH
61387: LD_VAR 0 4
61391: ARRAY
61392: PUSH
61393: LD_INT 1
61395: ARRAY
61396: PPUSH
61397: LD_VAR 0 6
61401: PUSH
61402: LD_VAR 0 4
61406: ARRAY
61407: PUSH
61408: LD_INT 2
61410: ARRAY
61411: PPUSH
61412: CALL_OW 428
61416: PUSH
61417: LD_INT 0
61419: NONEQUAL
61420: OR
61421: IFFALSE 61443
// tmp := Delete ( tmp , i ) ;
61423: LD_ADDR_VAR 0 6
61427: PUSH
61428: LD_VAR 0 6
61432: PPUSH
61433: LD_VAR 0 4
61437: PPUSH
61438: CALL_OW 3
61442: ST_TO_ADDR
61443: GO 61341
61445: POP
61446: POP
// j := GetClosestHex ( unit , tmp ) ;
61447: LD_ADDR_VAR 0 5
61451: PUSH
61452: LD_VAR 0 1
61456: PPUSH
61457: LD_VAR 0 6
61461: PPUSH
61462: CALL 60739 0 2
61466: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61467: LD_VAR 0 1
61471: PPUSH
61472: LD_VAR 0 5
61476: PUSH
61477: LD_INT 1
61479: ARRAY
61480: PPUSH
61481: LD_VAR 0 5
61485: PUSH
61486: LD_INT 2
61488: ARRAY
61489: PPUSH
61490: CALL_OW 111
// end ;
61494: LD_VAR 0 3
61498: RET
// export function PrepareApemanSoldier ( ) ; begin
61499: LD_INT 0
61501: PPUSH
// uc_nation := 0 ;
61502: LD_ADDR_OWVAR 21
61506: PUSH
61507: LD_INT 0
61509: ST_TO_ADDR
// hc_sex := sex_male ;
61510: LD_ADDR_OWVAR 27
61514: PUSH
61515: LD_INT 1
61517: ST_TO_ADDR
// hc_name :=  ;
61518: LD_ADDR_OWVAR 26
61522: PUSH
61523: LD_STRING 
61525: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61526: LD_ADDR_OWVAR 28
61530: PUSH
61531: LD_INT 15
61533: ST_TO_ADDR
// hc_gallery :=  ;
61534: LD_ADDR_OWVAR 33
61538: PUSH
61539: LD_STRING 
61541: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61542: LD_ADDR_OWVAR 31
61546: PUSH
61547: LD_INT 0
61549: PPUSH
61550: LD_INT 3
61552: PPUSH
61553: CALL_OW 12
61557: PUSH
61558: LD_INT 0
61560: PPUSH
61561: LD_INT 3
61563: PPUSH
61564: CALL_OW 12
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61581: LD_ADDR_OWVAR 29
61585: PUSH
61586: LD_INT 12
61588: PUSH
61589: LD_INT 12
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: ST_TO_ADDR
// end ;
61596: LD_VAR 0 1
61600: RET
// export function PrepareApemanEngineer ( ) ; begin
61601: LD_INT 0
61603: PPUSH
// uc_nation := 0 ;
61604: LD_ADDR_OWVAR 21
61608: PUSH
61609: LD_INT 0
61611: ST_TO_ADDR
// hc_sex := sex_male ;
61612: LD_ADDR_OWVAR 27
61616: PUSH
61617: LD_INT 1
61619: ST_TO_ADDR
// hc_name :=  ;
61620: LD_ADDR_OWVAR 26
61624: PUSH
61625: LD_STRING 
61627: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61628: LD_ADDR_OWVAR 28
61632: PUSH
61633: LD_INT 16
61635: ST_TO_ADDR
// hc_gallery :=  ;
61636: LD_ADDR_OWVAR 33
61640: PUSH
61641: LD_STRING 
61643: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61644: LD_ADDR_OWVAR 31
61648: PUSH
61649: LD_INT 0
61651: PPUSH
61652: LD_INT 3
61654: PPUSH
61655: CALL_OW 12
61659: PUSH
61660: LD_INT 0
61662: PPUSH
61663: LD_INT 3
61665: PPUSH
61666: CALL_OW 12
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61683: LD_ADDR_OWVAR 29
61687: PUSH
61688: LD_INT 12
61690: PUSH
61691: LD_INT 12
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// end ;
61698: LD_VAR 0 1
61702: RET
// export function PrepareApeman ( agressivity ) ; begin
61703: LD_INT 0
61705: PPUSH
// uc_side := 0 ;
61706: LD_ADDR_OWVAR 20
61710: PUSH
61711: LD_INT 0
61713: ST_TO_ADDR
// uc_nation := 0 ;
61714: LD_ADDR_OWVAR 21
61718: PUSH
61719: LD_INT 0
61721: ST_TO_ADDR
// hc_sex := sex_male ;
61722: LD_ADDR_OWVAR 27
61726: PUSH
61727: LD_INT 1
61729: ST_TO_ADDR
// hc_class := class_apeman ;
61730: LD_ADDR_OWVAR 28
61734: PUSH
61735: LD_INT 12
61737: ST_TO_ADDR
// hc_gallery :=  ;
61738: LD_ADDR_OWVAR 33
61742: PUSH
61743: LD_STRING 
61745: ST_TO_ADDR
// hc_name :=  ;
61746: LD_ADDR_OWVAR 26
61750: PUSH
61751: LD_STRING 
61753: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61754: LD_ADDR_OWVAR 29
61758: PUSH
61759: LD_INT 12
61761: PUSH
61762: LD_INT 12
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: ST_TO_ADDR
// if agressivity = 0 then
61769: LD_VAR 0 1
61773: PUSH
61774: LD_INT 0
61776: EQUAL
61777: IFFALSE 61789
// hc_agressivity := 0 else
61779: LD_ADDR_OWVAR 35
61783: PUSH
61784: LD_INT 0
61786: ST_TO_ADDR
61787: GO 61810
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61789: LD_ADDR_OWVAR 35
61793: PUSH
61794: LD_VAR 0 1
61798: NEG
61799: PPUSH
61800: LD_VAR 0 1
61804: PPUSH
61805: CALL_OW 12
61809: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61810: LD_ADDR_OWVAR 31
61814: PUSH
61815: LD_INT 0
61817: PPUSH
61818: LD_INT 3
61820: PPUSH
61821: CALL_OW 12
61825: PUSH
61826: LD_INT 0
61828: PPUSH
61829: LD_INT 3
61831: PPUSH
61832: CALL_OW 12
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: ST_TO_ADDR
// end ;
61849: LD_VAR 0 2
61853: RET
// export function PrepareTiger ( agressivity ) ; begin
61854: LD_INT 0
61856: PPUSH
// uc_side := 0 ;
61857: LD_ADDR_OWVAR 20
61861: PUSH
61862: LD_INT 0
61864: ST_TO_ADDR
// uc_nation := 0 ;
61865: LD_ADDR_OWVAR 21
61869: PUSH
61870: LD_INT 0
61872: ST_TO_ADDR
// InitHc ;
61873: CALL_OW 19
// hc_class := class_tiger ;
61877: LD_ADDR_OWVAR 28
61881: PUSH
61882: LD_INT 14
61884: ST_TO_ADDR
// hc_gallery :=  ;
61885: LD_ADDR_OWVAR 33
61889: PUSH
61890: LD_STRING 
61892: ST_TO_ADDR
// hc_name :=  ;
61893: LD_ADDR_OWVAR 26
61897: PUSH
61898: LD_STRING 
61900: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61901: LD_ADDR_OWVAR 35
61905: PUSH
61906: LD_VAR 0 1
61910: NEG
61911: PPUSH
61912: LD_VAR 0 1
61916: PPUSH
61917: CALL_OW 12
61921: ST_TO_ADDR
// end ;
61922: LD_VAR 0 2
61926: RET
// export function PrepareEnchidna ( ) ; begin
61927: LD_INT 0
61929: PPUSH
// uc_side := 0 ;
61930: LD_ADDR_OWVAR 20
61934: PUSH
61935: LD_INT 0
61937: ST_TO_ADDR
// uc_nation := 0 ;
61938: LD_ADDR_OWVAR 21
61942: PUSH
61943: LD_INT 0
61945: ST_TO_ADDR
// InitHc ;
61946: CALL_OW 19
// hc_class := class_baggie ;
61950: LD_ADDR_OWVAR 28
61954: PUSH
61955: LD_INT 13
61957: ST_TO_ADDR
// hc_gallery :=  ;
61958: LD_ADDR_OWVAR 33
61962: PUSH
61963: LD_STRING 
61965: ST_TO_ADDR
// hc_name :=  ;
61966: LD_ADDR_OWVAR 26
61970: PUSH
61971: LD_STRING 
61973: ST_TO_ADDR
// end ;
61974: LD_VAR 0 1
61978: RET
// export function PrepareFrog ( ) ; begin
61979: LD_INT 0
61981: PPUSH
// uc_side := 0 ;
61982: LD_ADDR_OWVAR 20
61986: PUSH
61987: LD_INT 0
61989: ST_TO_ADDR
// uc_nation := 0 ;
61990: LD_ADDR_OWVAR 21
61994: PUSH
61995: LD_INT 0
61997: ST_TO_ADDR
// InitHc ;
61998: CALL_OW 19
// hc_class := class_frog ;
62002: LD_ADDR_OWVAR 28
62006: PUSH
62007: LD_INT 19
62009: ST_TO_ADDR
// hc_gallery :=  ;
62010: LD_ADDR_OWVAR 33
62014: PUSH
62015: LD_STRING 
62017: ST_TO_ADDR
// hc_name :=  ;
62018: LD_ADDR_OWVAR 26
62022: PUSH
62023: LD_STRING 
62025: ST_TO_ADDR
// end ;
62026: LD_VAR 0 1
62030: RET
// export function PrepareFish ( ) ; begin
62031: LD_INT 0
62033: PPUSH
// uc_side := 0 ;
62034: LD_ADDR_OWVAR 20
62038: PUSH
62039: LD_INT 0
62041: ST_TO_ADDR
// uc_nation := 0 ;
62042: LD_ADDR_OWVAR 21
62046: PUSH
62047: LD_INT 0
62049: ST_TO_ADDR
// InitHc ;
62050: CALL_OW 19
// hc_class := class_fish ;
62054: LD_ADDR_OWVAR 28
62058: PUSH
62059: LD_INT 20
62061: ST_TO_ADDR
// hc_gallery :=  ;
62062: LD_ADDR_OWVAR 33
62066: PUSH
62067: LD_STRING 
62069: ST_TO_ADDR
// hc_name :=  ;
62070: LD_ADDR_OWVAR 26
62074: PUSH
62075: LD_STRING 
62077: ST_TO_ADDR
// end ;
62078: LD_VAR 0 1
62082: RET
// export function PrepareBird ( ) ; begin
62083: LD_INT 0
62085: PPUSH
// uc_side := 0 ;
62086: LD_ADDR_OWVAR 20
62090: PUSH
62091: LD_INT 0
62093: ST_TO_ADDR
// uc_nation := 0 ;
62094: LD_ADDR_OWVAR 21
62098: PUSH
62099: LD_INT 0
62101: ST_TO_ADDR
// InitHc ;
62102: CALL_OW 19
// hc_class := class_phororhacos ;
62106: LD_ADDR_OWVAR 28
62110: PUSH
62111: LD_INT 18
62113: ST_TO_ADDR
// hc_gallery :=  ;
62114: LD_ADDR_OWVAR 33
62118: PUSH
62119: LD_STRING 
62121: ST_TO_ADDR
// hc_name :=  ;
62122: LD_ADDR_OWVAR 26
62126: PUSH
62127: LD_STRING 
62129: ST_TO_ADDR
// end ;
62130: LD_VAR 0 1
62134: RET
// export function PrepareHorse ( ) ; begin
62135: LD_INT 0
62137: PPUSH
// uc_side := 0 ;
62138: LD_ADDR_OWVAR 20
62142: PUSH
62143: LD_INT 0
62145: ST_TO_ADDR
// uc_nation := 0 ;
62146: LD_ADDR_OWVAR 21
62150: PUSH
62151: LD_INT 0
62153: ST_TO_ADDR
// InitHc ;
62154: CALL_OW 19
// hc_class := class_horse ;
62158: LD_ADDR_OWVAR 28
62162: PUSH
62163: LD_INT 21
62165: ST_TO_ADDR
// hc_gallery :=  ;
62166: LD_ADDR_OWVAR 33
62170: PUSH
62171: LD_STRING 
62173: ST_TO_ADDR
// hc_name :=  ;
62174: LD_ADDR_OWVAR 26
62178: PUSH
62179: LD_STRING 
62181: ST_TO_ADDR
// end ;
62182: LD_VAR 0 1
62186: RET
// export function PrepareMastodont ( ) ; begin
62187: LD_INT 0
62189: PPUSH
// uc_side := 0 ;
62190: LD_ADDR_OWVAR 20
62194: PUSH
62195: LD_INT 0
62197: ST_TO_ADDR
// uc_nation := 0 ;
62198: LD_ADDR_OWVAR 21
62202: PUSH
62203: LD_INT 0
62205: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62206: LD_ADDR_OWVAR 37
62210: PUSH
62211: LD_INT 31
62213: ST_TO_ADDR
// vc_control := control_rider ;
62214: LD_ADDR_OWVAR 38
62218: PUSH
62219: LD_INT 4
62221: ST_TO_ADDR
// end ;
62222: LD_VAR 0 1
62226: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62227: LD_INT 0
62229: PPUSH
62230: PPUSH
62231: PPUSH
// uc_side = 0 ;
62232: LD_ADDR_OWVAR 20
62236: PUSH
62237: LD_INT 0
62239: ST_TO_ADDR
// uc_nation = 0 ;
62240: LD_ADDR_OWVAR 21
62244: PUSH
62245: LD_INT 0
62247: ST_TO_ADDR
// InitHc_All ( ) ;
62248: CALL_OW 584
// InitVc ;
62252: CALL_OW 20
// if mastodonts then
62256: LD_VAR 0 6
62260: IFFALSE 62327
// for i = 1 to mastodonts do
62262: LD_ADDR_VAR 0 11
62266: PUSH
62267: DOUBLE
62268: LD_INT 1
62270: DEC
62271: ST_TO_ADDR
62272: LD_VAR 0 6
62276: PUSH
62277: FOR_TO
62278: IFFALSE 62325
// begin vc_chassis := 31 ;
62280: LD_ADDR_OWVAR 37
62284: PUSH
62285: LD_INT 31
62287: ST_TO_ADDR
// vc_control := control_rider ;
62288: LD_ADDR_OWVAR 38
62292: PUSH
62293: LD_INT 4
62295: ST_TO_ADDR
// animal := CreateVehicle ;
62296: LD_ADDR_VAR 0 12
62300: PUSH
62301: CALL_OW 45
62305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62306: LD_VAR 0 12
62310: PPUSH
62311: LD_VAR 0 8
62315: PPUSH
62316: LD_INT 0
62318: PPUSH
62319: CALL 64469 0 3
// end ;
62323: GO 62277
62325: POP
62326: POP
// if horses then
62327: LD_VAR 0 5
62331: IFFALSE 62398
// for i = 1 to horses do
62333: LD_ADDR_VAR 0 11
62337: PUSH
62338: DOUBLE
62339: LD_INT 1
62341: DEC
62342: ST_TO_ADDR
62343: LD_VAR 0 5
62347: PUSH
62348: FOR_TO
62349: IFFALSE 62396
// begin hc_class := 21 ;
62351: LD_ADDR_OWVAR 28
62355: PUSH
62356: LD_INT 21
62358: ST_TO_ADDR
// hc_gallery :=  ;
62359: LD_ADDR_OWVAR 33
62363: PUSH
62364: LD_STRING 
62366: ST_TO_ADDR
// animal := CreateHuman ;
62367: LD_ADDR_VAR 0 12
62371: PUSH
62372: CALL_OW 44
62376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62377: LD_VAR 0 12
62381: PPUSH
62382: LD_VAR 0 8
62386: PPUSH
62387: LD_INT 0
62389: PPUSH
62390: CALL 64469 0 3
// end ;
62394: GO 62348
62396: POP
62397: POP
// if birds then
62398: LD_VAR 0 1
62402: IFFALSE 62469
// for i = 1 to birds do
62404: LD_ADDR_VAR 0 11
62408: PUSH
62409: DOUBLE
62410: LD_INT 1
62412: DEC
62413: ST_TO_ADDR
62414: LD_VAR 0 1
62418: PUSH
62419: FOR_TO
62420: IFFALSE 62467
// begin hc_class := 18 ;
62422: LD_ADDR_OWVAR 28
62426: PUSH
62427: LD_INT 18
62429: ST_TO_ADDR
// hc_gallery =  ;
62430: LD_ADDR_OWVAR 33
62434: PUSH
62435: LD_STRING 
62437: ST_TO_ADDR
// animal := CreateHuman ;
62438: LD_ADDR_VAR 0 12
62442: PUSH
62443: CALL_OW 44
62447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62448: LD_VAR 0 12
62452: PPUSH
62453: LD_VAR 0 8
62457: PPUSH
62458: LD_INT 0
62460: PPUSH
62461: CALL 64469 0 3
// end ;
62465: GO 62419
62467: POP
62468: POP
// if tigers then
62469: LD_VAR 0 2
62473: IFFALSE 62557
// for i = 1 to tigers do
62475: LD_ADDR_VAR 0 11
62479: PUSH
62480: DOUBLE
62481: LD_INT 1
62483: DEC
62484: ST_TO_ADDR
62485: LD_VAR 0 2
62489: PUSH
62490: FOR_TO
62491: IFFALSE 62555
// begin hc_class = class_tiger ;
62493: LD_ADDR_OWVAR 28
62497: PUSH
62498: LD_INT 14
62500: ST_TO_ADDR
// hc_gallery =  ;
62501: LD_ADDR_OWVAR 33
62505: PUSH
62506: LD_STRING 
62508: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62509: LD_ADDR_OWVAR 35
62513: PUSH
62514: LD_INT 7
62516: NEG
62517: PPUSH
62518: LD_INT 7
62520: PPUSH
62521: CALL_OW 12
62525: ST_TO_ADDR
// animal := CreateHuman ;
62526: LD_ADDR_VAR 0 12
62530: PUSH
62531: CALL_OW 44
62535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62536: LD_VAR 0 12
62540: PPUSH
62541: LD_VAR 0 8
62545: PPUSH
62546: LD_INT 0
62548: PPUSH
62549: CALL 64469 0 3
// end ;
62553: GO 62490
62555: POP
62556: POP
// if apemans then
62557: LD_VAR 0 3
62561: IFFALSE 62684
// for i = 1 to apemans do
62563: LD_ADDR_VAR 0 11
62567: PUSH
62568: DOUBLE
62569: LD_INT 1
62571: DEC
62572: ST_TO_ADDR
62573: LD_VAR 0 3
62577: PUSH
62578: FOR_TO
62579: IFFALSE 62682
// begin hc_class = class_apeman ;
62581: LD_ADDR_OWVAR 28
62585: PUSH
62586: LD_INT 12
62588: ST_TO_ADDR
// hc_gallery =  ;
62589: LD_ADDR_OWVAR 33
62593: PUSH
62594: LD_STRING 
62596: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62597: LD_ADDR_OWVAR 35
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PPUSH
62606: LD_INT 2
62608: PPUSH
62609: CALL_OW 12
62613: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62614: LD_ADDR_OWVAR 31
62618: PUSH
62619: LD_INT 1
62621: PPUSH
62622: LD_INT 3
62624: PPUSH
62625: CALL_OW 12
62629: PUSH
62630: LD_INT 1
62632: PPUSH
62633: LD_INT 3
62635: PPUSH
62636: CALL_OW 12
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// animal := CreateHuman ;
62653: LD_ADDR_VAR 0 12
62657: PUSH
62658: CALL_OW 44
62662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62663: LD_VAR 0 12
62667: PPUSH
62668: LD_VAR 0 8
62672: PPUSH
62673: LD_INT 0
62675: PPUSH
62676: CALL 64469 0 3
// end ;
62680: GO 62578
62682: POP
62683: POP
// if enchidnas then
62684: LD_VAR 0 4
62688: IFFALSE 62755
// for i = 1 to enchidnas do
62690: LD_ADDR_VAR 0 11
62694: PUSH
62695: DOUBLE
62696: LD_INT 1
62698: DEC
62699: ST_TO_ADDR
62700: LD_VAR 0 4
62704: PUSH
62705: FOR_TO
62706: IFFALSE 62753
// begin hc_class = 13 ;
62708: LD_ADDR_OWVAR 28
62712: PUSH
62713: LD_INT 13
62715: ST_TO_ADDR
// hc_gallery =  ;
62716: LD_ADDR_OWVAR 33
62720: PUSH
62721: LD_STRING 
62723: ST_TO_ADDR
// animal := CreateHuman ;
62724: LD_ADDR_VAR 0 12
62728: PUSH
62729: CALL_OW 44
62733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62734: LD_VAR 0 12
62738: PPUSH
62739: LD_VAR 0 8
62743: PPUSH
62744: LD_INT 0
62746: PPUSH
62747: CALL 64469 0 3
// end ;
62751: GO 62705
62753: POP
62754: POP
// if fishes then
62755: LD_VAR 0 7
62759: IFFALSE 62826
// for i = 1 to fishes do
62761: LD_ADDR_VAR 0 11
62765: PUSH
62766: DOUBLE
62767: LD_INT 1
62769: DEC
62770: ST_TO_ADDR
62771: LD_VAR 0 7
62775: PUSH
62776: FOR_TO
62777: IFFALSE 62824
// begin hc_class = 20 ;
62779: LD_ADDR_OWVAR 28
62783: PUSH
62784: LD_INT 20
62786: ST_TO_ADDR
// hc_gallery =  ;
62787: LD_ADDR_OWVAR 33
62791: PUSH
62792: LD_STRING 
62794: ST_TO_ADDR
// animal := CreateHuman ;
62795: LD_ADDR_VAR 0 12
62799: PUSH
62800: CALL_OW 44
62804: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62805: LD_VAR 0 12
62809: PPUSH
62810: LD_VAR 0 9
62814: PPUSH
62815: LD_INT 0
62817: PPUSH
62818: CALL 64469 0 3
// end ;
62822: GO 62776
62824: POP
62825: POP
// end ;
62826: LD_VAR 0 10
62830: RET
// export function WantHeal ( sci , unit ) ; begin
62831: LD_INT 0
62833: PPUSH
// if GetTaskList ( sci ) > 0 then
62834: LD_VAR 0 1
62838: PPUSH
62839: CALL_OW 437
62843: PUSH
62844: LD_INT 0
62846: GREATER
62847: IFFALSE 62919
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62849: LD_VAR 0 1
62853: PPUSH
62854: CALL_OW 437
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: PUSH
62863: LD_INT 1
62865: ARRAY
62866: PUSH
62867: LD_STRING l
62869: EQUAL
62870: IFFALSE 62897
62872: PUSH
62873: LD_VAR 0 1
62877: PPUSH
62878: CALL_OW 437
62882: PUSH
62883: LD_INT 1
62885: ARRAY
62886: PUSH
62887: LD_INT 4
62889: ARRAY
62890: PUSH
62891: LD_VAR 0 2
62895: EQUAL
62896: AND
62897: IFFALSE 62909
// result := true else
62899: LD_ADDR_VAR 0 3
62903: PUSH
62904: LD_INT 1
62906: ST_TO_ADDR
62907: GO 62917
// result := false ;
62909: LD_ADDR_VAR 0 3
62913: PUSH
62914: LD_INT 0
62916: ST_TO_ADDR
// end else
62917: GO 62927
// result := false ;
62919: LD_ADDR_VAR 0 3
62923: PUSH
62924: LD_INT 0
62926: ST_TO_ADDR
// end ;
62927: LD_VAR 0 3
62931: RET
// export function HealTarget ( sci ) ; begin
62932: LD_INT 0
62934: PPUSH
// if not sci then
62935: LD_VAR 0 1
62939: NOT
62940: IFFALSE 62944
// exit ;
62942: GO 63009
// result := 0 ;
62944: LD_ADDR_VAR 0 2
62948: PUSH
62949: LD_INT 0
62951: ST_TO_ADDR
// if GetTaskList ( sci ) then
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 437
62961: IFFALSE 63009
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62963: LD_VAR 0 1
62967: PPUSH
62968: CALL_OW 437
62972: PUSH
62973: LD_INT 1
62975: ARRAY
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PUSH
62981: LD_STRING l
62983: EQUAL
62984: IFFALSE 63009
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62986: LD_ADDR_VAR 0 2
62990: PUSH
62991: LD_VAR 0 1
62995: PPUSH
62996: CALL_OW 437
63000: PUSH
63001: LD_INT 1
63003: ARRAY
63004: PUSH
63005: LD_INT 4
63007: ARRAY
63008: ST_TO_ADDR
// end ;
63009: LD_VAR 0 2
63013: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63014: LD_INT 0
63016: PPUSH
63017: PPUSH
63018: PPUSH
63019: PPUSH
// if not base_units then
63020: LD_VAR 0 1
63024: NOT
63025: IFFALSE 63029
// exit ;
63027: GO 63116
// result := false ;
63029: LD_ADDR_VAR 0 2
63033: PUSH
63034: LD_INT 0
63036: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63037: LD_ADDR_VAR 0 5
63041: PUSH
63042: LD_VAR 0 1
63046: PPUSH
63047: LD_INT 21
63049: PUSH
63050: LD_INT 3
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PPUSH
63057: CALL_OW 72
63061: ST_TO_ADDR
// if not tmp then
63062: LD_VAR 0 5
63066: NOT
63067: IFFALSE 63071
// exit ;
63069: GO 63116
// for i in tmp do
63071: LD_ADDR_VAR 0 3
63075: PUSH
63076: LD_VAR 0 5
63080: PUSH
63081: FOR_IN
63082: IFFALSE 63114
// begin result := EnemyInRange ( i , 22 ) ;
63084: LD_ADDR_VAR 0 2
63088: PUSH
63089: LD_VAR 0 3
63093: PPUSH
63094: LD_INT 22
63096: PPUSH
63097: CALL 60541 0 2
63101: ST_TO_ADDR
// if result then
63102: LD_VAR 0 2
63106: IFFALSE 63112
// exit ;
63108: POP
63109: POP
63110: GO 63116
// end ;
63112: GO 63081
63114: POP
63115: POP
// end ;
63116: LD_VAR 0 2
63120: RET
// export function FilterByTag ( units , tag ) ; begin
63121: LD_INT 0
63123: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63124: LD_ADDR_VAR 0 3
63128: PUSH
63129: LD_VAR 0 1
63133: PPUSH
63134: LD_INT 120
63136: PUSH
63137: LD_VAR 0 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PPUSH
63146: CALL_OW 72
63150: ST_TO_ADDR
// end ;
63151: LD_VAR 0 3
63155: RET
// export function IsDriver ( un ) ; begin
63156: LD_INT 0
63158: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63159: LD_ADDR_VAR 0 2
63163: PUSH
63164: LD_VAR 0 1
63168: PUSH
63169: LD_INT 55
63171: PUSH
63172: EMPTY
63173: LIST
63174: PPUSH
63175: CALL_OW 69
63179: IN
63180: ST_TO_ADDR
// end ;
63181: LD_VAR 0 2
63185: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63186: LD_INT 0
63188: PPUSH
63189: PPUSH
// list := [ ] ;
63190: LD_ADDR_VAR 0 5
63194: PUSH
63195: EMPTY
63196: ST_TO_ADDR
// case d of 0 :
63197: LD_VAR 0 3
63201: PUSH
63202: LD_INT 0
63204: DOUBLE
63205: EQUAL
63206: IFTRUE 63210
63208: GO 63343
63210: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63211: LD_ADDR_VAR 0 5
63215: PUSH
63216: LD_VAR 0 1
63220: PUSH
63221: LD_INT 4
63223: MINUS
63224: PUSH
63225: LD_VAR 0 2
63229: PUSH
63230: LD_INT 4
63232: MINUS
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: LIST
63241: PUSH
63242: LD_VAR 0 1
63246: PUSH
63247: LD_INT 3
63249: MINUS
63250: PUSH
63251: LD_VAR 0 2
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: LIST
63263: PUSH
63264: LD_VAR 0 1
63268: PUSH
63269: LD_INT 4
63271: PLUS
63272: PUSH
63273: LD_VAR 0 2
63277: PUSH
63278: LD_INT 4
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: PUSH
63286: LD_VAR 0 1
63290: PUSH
63291: LD_INT 3
63293: PLUS
63294: PUSH
63295: LD_VAR 0 2
63299: PUSH
63300: LD_INT 3
63302: PLUS
63303: PUSH
63304: LD_INT 5
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: LIST
63311: PUSH
63312: LD_VAR 0 1
63316: PUSH
63317: LD_VAR 0 2
63321: PUSH
63322: LD_INT 4
63324: PLUS
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: ST_TO_ADDR
// end ; 1 :
63341: GO 64041
63343: LD_INT 1
63345: DOUBLE
63346: EQUAL
63347: IFTRUE 63351
63349: GO 63484
63351: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63352: LD_ADDR_VAR 0 5
63356: PUSH
63357: LD_VAR 0 1
63361: PUSH
63362: LD_VAR 0 2
63366: PUSH
63367: LD_INT 4
63369: MINUS
63370: PUSH
63371: LD_INT 3
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: PUSH
63379: LD_VAR 0 1
63383: PUSH
63384: LD_INT 3
63386: MINUS
63387: PUSH
63388: LD_VAR 0 2
63392: PUSH
63393: LD_INT 3
63395: MINUS
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: LIST
63404: PUSH
63405: LD_VAR 0 1
63409: PUSH
63410: LD_INT 4
63412: MINUS
63413: PUSH
63414: LD_VAR 0 2
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: LD_VAR 0 1
63431: PUSH
63432: LD_VAR 0 2
63436: PUSH
63437: LD_INT 3
63439: PLUS
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: PUSH
63449: LD_VAR 0 1
63453: PUSH
63454: LD_INT 4
63456: PLUS
63457: PUSH
63458: LD_VAR 0 2
63462: PUSH
63463: LD_INT 4
63465: PLUS
63466: PUSH
63467: LD_INT 5
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: ST_TO_ADDR
// end ; 2 :
63482: GO 64041
63484: LD_INT 2
63486: DOUBLE
63487: EQUAL
63488: IFTRUE 63492
63490: GO 63621
63492: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63493: LD_ADDR_VAR 0 5
63497: PUSH
63498: LD_VAR 0 1
63502: PUSH
63503: LD_VAR 0 2
63507: PUSH
63508: LD_INT 3
63510: MINUS
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: PUSH
63520: LD_VAR 0 1
63524: PUSH
63525: LD_INT 4
63527: PLUS
63528: PUSH
63529: LD_VAR 0 2
63533: PUSH
63534: LD_INT 4
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: LD_VAR 0 1
63546: PUSH
63547: LD_VAR 0 2
63551: PUSH
63552: LD_INT 4
63554: PLUS
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: LD_INT 3
63571: MINUS
63572: PUSH
63573: LD_VAR 0 2
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: LD_INT 4
63593: MINUS
63594: PUSH
63595: LD_VAR 0 2
63599: PUSH
63600: LD_INT 4
63602: MINUS
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// end ; 3 :
63619: GO 64041
63621: LD_INT 3
63623: DOUBLE
63624: EQUAL
63625: IFTRUE 63629
63627: GO 63762
63629: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63630: LD_ADDR_VAR 0 5
63634: PUSH
63635: LD_VAR 0 1
63639: PUSH
63640: LD_INT 3
63642: PLUS
63643: PUSH
63644: LD_VAR 0 2
63648: PUSH
63649: LD_INT 4
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_VAR 0 1
63661: PUSH
63662: LD_INT 4
63664: PLUS
63665: PUSH
63666: LD_VAR 0 2
63670: PUSH
63671: LD_INT 4
63673: PLUS
63674: PUSH
63675: LD_INT 5
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: LIST
63682: PUSH
63683: LD_VAR 0 1
63687: PUSH
63688: LD_INT 4
63690: MINUS
63691: PUSH
63692: LD_VAR 0 2
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: PUSH
63705: LD_VAR 0 1
63709: PUSH
63710: LD_VAR 0 2
63714: PUSH
63715: LD_INT 4
63717: MINUS
63718: PUSH
63719: LD_INT 3
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: LD_VAR 0 1
63731: PUSH
63732: LD_INT 3
63734: MINUS
63735: PUSH
63736: LD_VAR 0 2
63740: PUSH
63741: LD_INT 3
63743: MINUS
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: ST_TO_ADDR
// end ; 4 :
63760: GO 64041
63762: LD_INT 4
63764: DOUBLE
63765: EQUAL
63766: IFTRUE 63770
63768: GO 63903
63770: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63771: LD_ADDR_VAR 0 5
63775: PUSH
63776: LD_VAR 0 1
63780: PUSH
63781: LD_VAR 0 2
63785: PUSH
63786: LD_INT 4
63788: PLUS
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: PUSH
63798: LD_VAR 0 1
63802: PUSH
63803: LD_INT 3
63805: PLUS
63806: PUSH
63807: LD_VAR 0 2
63811: PUSH
63812: LD_INT 3
63814: PLUS
63815: PUSH
63816: LD_INT 5
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: PUSH
63824: LD_VAR 0 1
63828: PUSH
63829: LD_INT 4
63831: PLUS
63832: PUSH
63833: LD_VAR 0 2
63837: PUSH
63838: LD_INT 4
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: PUSH
63846: LD_VAR 0 1
63850: PUSH
63851: LD_VAR 0 2
63855: PUSH
63856: LD_INT 3
63858: MINUS
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: PUSH
63868: LD_VAR 0 1
63872: PUSH
63873: LD_INT 4
63875: MINUS
63876: PUSH
63877: LD_VAR 0 2
63881: PUSH
63882: LD_INT 4
63884: MINUS
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: ST_TO_ADDR
// end ; 5 :
63901: GO 64041
63903: LD_INT 5
63905: DOUBLE
63906: EQUAL
63907: IFTRUE 63911
63909: GO 64040
63911: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63912: LD_ADDR_VAR 0 5
63916: PUSH
63917: LD_VAR 0 1
63921: PUSH
63922: LD_INT 4
63924: MINUS
63925: PUSH
63926: LD_VAR 0 2
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: PUSH
63939: LD_VAR 0 1
63943: PUSH
63944: LD_VAR 0 2
63948: PUSH
63949: LD_INT 4
63951: MINUS
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: LD_VAR 0 1
63965: PUSH
63966: LD_INT 4
63968: PLUS
63969: PUSH
63970: LD_VAR 0 2
63974: PUSH
63975: LD_INT 4
63977: PLUS
63978: PUSH
63979: LD_INT 5
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: PUSH
63987: LD_VAR 0 1
63991: PUSH
63992: LD_INT 3
63994: PLUS
63995: PUSH
63996: LD_VAR 0 2
64000: PUSH
64001: LD_INT 4
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: LD_VAR 0 1
64013: PUSH
64014: LD_VAR 0 2
64018: PUSH
64019: LD_INT 3
64021: PLUS
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: ST_TO_ADDR
// end ; end ;
64038: GO 64041
64040: POP
// result := list ;
64041: LD_ADDR_VAR 0 4
64045: PUSH
64046: LD_VAR 0 5
64050: ST_TO_ADDR
// end ;
64051: LD_VAR 0 4
64055: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64056: LD_INT 0
64058: PPUSH
64059: PPUSH
64060: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64061: LD_VAR 0 1
64065: NOT
64066: IFTRUE 64094
64068: PUSH
64069: LD_VAR 0 2
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: LD_INT 3
64082: PUSH
64083: LD_INT 4
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: IN
64092: NOT
64093: OR
64094: IFFALSE 64098
// exit ;
64096: GO 64181
// tmp := [ ] ;
64098: LD_ADDR_VAR 0 5
64102: PUSH
64103: EMPTY
64104: ST_TO_ADDR
// for i in units do
64105: LD_ADDR_VAR 0 4
64109: PUSH
64110: LD_VAR 0 1
64114: PUSH
64115: FOR_IN
64116: IFFALSE 64150
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64118: LD_ADDR_VAR 0 5
64122: PUSH
64123: LD_VAR 0 5
64127: PPUSH
64128: LD_VAR 0 4
64132: PPUSH
64133: LD_VAR 0 2
64137: PPUSH
64138: CALL_OW 259
64142: PPUSH
64143: CALL 65576 0 2
64147: ST_TO_ADDR
64148: GO 64115
64150: POP
64151: POP
// if not tmp then
64152: LD_VAR 0 5
64156: NOT
64157: IFFALSE 64161
// exit ;
64159: GO 64181
// result := SortListByListDesc ( units , tmp ) ;
64161: LD_ADDR_VAR 0 3
64165: PUSH
64166: LD_VAR 0 1
64170: PPUSH
64171: LD_VAR 0 5
64175: PPUSH
64176: CALL_OW 77
64180: ST_TO_ADDR
// end ;
64181: LD_VAR 0 3
64185: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64186: LD_INT 0
64188: PPUSH
64189: PPUSH
64190: PPUSH
// result := false ;
64191: LD_ADDR_VAR 0 3
64195: PUSH
64196: LD_INT 0
64198: ST_TO_ADDR
// if not building then
64199: LD_VAR 0 2
64203: NOT
64204: IFFALSE 64208
// exit ;
64206: GO 64352
// x := GetX ( building ) ;
64208: LD_ADDR_VAR 0 4
64212: PUSH
64213: LD_VAR 0 2
64217: PPUSH
64218: CALL_OW 250
64222: ST_TO_ADDR
// y := GetY ( building ) ;
64223: LD_ADDR_VAR 0 5
64227: PUSH
64228: LD_VAR 0 2
64232: PPUSH
64233: CALL_OW 251
64237: ST_TO_ADDR
// if not x or not y then
64238: LD_VAR 0 4
64242: NOT
64243: IFTRUE 64252
64245: PUSH
64246: LD_VAR 0 5
64250: NOT
64251: OR
64252: IFFALSE 64256
// exit ;
64254: GO 64352
// if GetTaskList ( unit ) then
64256: LD_VAR 0 1
64260: PPUSH
64261: CALL_OW 437
64265: IFFALSE 64352
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64267: LD_STRING e
64269: PUSH
64270: LD_VAR 0 1
64274: PPUSH
64275: CALL_OW 437
64279: PUSH
64280: LD_INT 1
64282: ARRAY
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: EQUAL
64288: IFFALSE 64315
64290: PUSH
64291: LD_VAR 0 4
64295: PUSH
64296: LD_VAR 0 1
64300: PPUSH
64301: CALL_OW 437
64305: PUSH
64306: LD_INT 1
64308: ARRAY
64309: PUSH
64310: LD_INT 2
64312: ARRAY
64313: EQUAL
64314: AND
64315: IFFALSE 64342
64317: PUSH
64318: LD_VAR 0 5
64322: PUSH
64323: LD_VAR 0 1
64327: PPUSH
64328: CALL_OW 437
64332: PUSH
64333: LD_INT 1
64335: ARRAY
64336: PUSH
64337: LD_INT 3
64339: ARRAY
64340: EQUAL
64341: AND
64342: IFFALSE 64352
// result := true end ;
64344: LD_ADDR_VAR 0 3
64348: PUSH
64349: LD_INT 1
64351: ST_TO_ADDR
// end ;
64352: LD_VAR 0 3
64356: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64357: LD_INT 0
64359: PPUSH
// result := false ;
64360: LD_ADDR_VAR 0 4
64364: PUSH
64365: LD_INT 0
64367: ST_TO_ADDR
// if GetTaskList ( unit ) then
64368: LD_VAR 0 1
64372: PPUSH
64373: CALL_OW 437
64377: IFFALSE 64464
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64379: LD_STRING M
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: CALL_OW 437
64391: PUSH
64392: LD_INT 1
64394: ARRAY
64395: PUSH
64396: LD_INT 1
64398: ARRAY
64399: EQUAL
64400: IFFALSE 64427
64402: PUSH
64403: LD_VAR 0 2
64407: PUSH
64408: LD_VAR 0 1
64412: PPUSH
64413: CALL_OW 437
64417: PUSH
64418: LD_INT 1
64420: ARRAY
64421: PUSH
64422: LD_INT 2
64424: ARRAY
64425: EQUAL
64426: AND
64427: IFFALSE 64454
64429: PUSH
64430: LD_VAR 0 3
64434: PUSH
64435: LD_VAR 0 1
64439: PPUSH
64440: CALL_OW 437
64444: PUSH
64445: LD_INT 1
64447: ARRAY
64448: PUSH
64449: LD_INT 3
64451: ARRAY
64452: EQUAL
64453: AND
64454: IFFALSE 64464
// result := true ;
64456: LD_ADDR_VAR 0 4
64460: PUSH
64461: LD_INT 1
64463: ST_TO_ADDR
// end ; end ;
64464: LD_VAR 0 4
64468: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64469: LD_INT 0
64471: PPUSH
64472: PPUSH
64473: PPUSH
64474: PPUSH
// if not unit or not area then
64475: LD_VAR 0 1
64479: NOT
64480: IFTRUE 64489
64482: PUSH
64483: LD_VAR 0 2
64487: NOT
64488: OR
64489: IFFALSE 64493
// exit ;
64491: GO 64669
// tmp := AreaToList ( area , i ) ;
64493: LD_ADDR_VAR 0 6
64497: PUSH
64498: LD_VAR 0 2
64502: PPUSH
64503: LD_VAR 0 5
64507: PPUSH
64508: CALL_OW 517
64512: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64513: LD_ADDR_VAR 0 5
64517: PUSH
64518: DOUBLE
64519: LD_INT 1
64521: DEC
64522: ST_TO_ADDR
64523: LD_VAR 0 6
64527: PUSH
64528: LD_INT 1
64530: ARRAY
64531: PUSH
64532: FOR_TO
64533: IFFALSE 64667
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64535: LD_ADDR_VAR 0 7
64539: PUSH
64540: LD_VAR 0 6
64544: PUSH
64545: LD_INT 1
64547: ARRAY
64548: PUSH
64549: LD_VAR 0 5
64553: ARRAY
64554: PUSH
64555: LD_VAR 0 6
64559: PUSH
64560: LD_INT 2
64562: ARRAY
64563: PUSH
64564: LD_VAR 0 5
64568: ARRAY
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64574: LD_INT 92
64576: PUSH
64577: LD_VAR 0 7
64581: PUSH
64582: LD_INT 1
64584: ARRAY
64585: PUSH
64586: LD_VAR 0 7
64590: PUSH
64591: LD_INT 2
64593: ARRAY
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: PPUSH
64604: CALL_OW 69
64608: PUSH
64609: LD_INT 0
64611: EQUAL
64612: IFFALSE 64665
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64614: LD_VAR 0 1
64618: PPUSH
64619: LD_VAR 0 7
64623: PUSH
64624: LD_INT 1
64626: ARRAY
64627: PPUSH
64628: LD_VAR 0 7
64632: PUSH
64633: LD_INT 2
64635: ARRAY
64636: PPUSH
64637: LD_VAR 0 3
64641: PPUSH
64642: CALL_OW 48
// result := IsPlaced ( unit ) ;
64646: LD_ADDR_VAR 0 4
64650: PUSH
64651: LD_VAR 0 1
64655: PPUSH
64656: CALL_OW 305
64660: ST_TO_ADDR
// exit ;
64661: POP
64662: POP
64663: GO 64669
// end ; end ;
64665: GO 64532
64667: POP
64668: POP
// end ;
64669: LD_VAR 0 4
64673: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64674: LD_INT 0
64676: PPUSH
64677: PPUSH
64678: PPUSH
// if not side or side > 8 then
64679: LD_VAR 0 1
64683: NOT
64684: IFTRUE 64696
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 8
64694: GREATER
64695: OR
64696: IFFALSE 64700
// exit ;
64698: GO 64887
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64700: LD_ADDR_VAR 0 4
64704: PUSH
64705: LD_INT 22
64707: PUSH
64708: LD_VAR 0 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 21
64719: PUSH
64720: LD_INT 3
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PPUSH
64731: CALL_OW 69
64735: ST_TO_ADDR
// if not tmp then
64736: LD_VAR 0 4
64740: NOT
64741: IFFALSE 64745
// exit ;
64743: GO 64887
// enable_addtolog := true ;
64745: LD_ADDR_OWVAR 81
64749: PUSH
64750: LD_INT 1
64752: ST_TO_ADDR
// AddToLog ( [ ) ;
64753: LD_STRING [
64755: PPUSH
64756: CALL_OW 561
// for i in tmp do
64760: LD_ADDR_VAR 0 3
64764: PUSH
64765: LD_VAR 0 4
64769: PUSH
64770: FOR_IN
64771: IFFALSE 64878
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64773: LD_STRING [
64775: PUSH
64776: LD_VAR 0 3
64780: PPUSH
64781: CALL_OW 266
64785: STR
64786: PUSH
64787: LD_STRING , 
64789: STR
64790: PUSH
64791: LD_VAR 0 3
64795: PPUSH
64796: CALL_OW 250
64800: STR
64801: PUSH
64802: LD_STRING , 
64804: STR
64805: PUSH
64806: LD_VAR 0 3
64810: PPUSH
64811: CALL_OW 251
64815: STR
64816: PUSH
64817: LD_STRING , 
64819: STR
64820: PUSH
64821: LD_VAR 0 3
64825: PPUSH
64826: CALL_OW 254
64830: STR
64831: PUSH
64832: LD_STRING , 
64834: STR
64835: PUSH
64836: LD_VAR 0 3
64840: PPUSH
64841: LD_INT 1
64843: PPUSH
64844: CALL_OW 268
64848: STR
64849: PUSH
64850: LD_STRING , 
64852: STR
64853: PUSH
64854: LD_VAR 0 3
64858: PPUSH
64859: LD_INT 2
64861: PPUSH
64862: CALL_OW 268
64866: STR
64867: PUSH
64868: LD_STRING ],
64870: STR
64871: PPUSH
64872: CALL_OW 561
// end ;
64876: GO 64770
64878: POP
64879: POP
// AddToLog ( ]; ) ;
64880: LD_STRING ];
64882: PPUSH
64883: CALL_OW 561
// end ;
64887: LD_VAR 0 2
64891: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64892: LD_INT 0
64894: PPUSH
64895: PPUSH
64896: PPUSH
64897: PPUSH
64898: PPUSH
// if not area or not rate or not max then
64899: LD_VAR 0 1
64903: NOT
64904: IFTRUE 64913
64906: PUSH
64907: LD_VAR 0 2
64911: NOT
64912: OR
64913: IFTRUE 64922
64915: PUSH
64916: LD_VAR 0 4
64920: NOT
64921: OR
64922: IFFALSE 64926
// exit ;
64924: GO 65115
// while 1 do
64926: LD_INT 1
64928: IFFALSE 65115
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64930: LD_ADDR_VAR 0 9
64934: PUSH
64935: LD_VAR 0 1
64939: PPUSH
64940: LD_INT 1
64942: PPUSH
64943: CALL_OW 287
64947: PUSH
64948: LD_INT 10
64950: MUL
64951: ST_TO_ADDR
// r := rate / 10 ;
64952: LD_ADDR_VAR 0 7
64956: PUSH
64957: LD_VAR 0 2
64961: PUSH
64962: LD_INT 10
64964: DIVREAL
64965: ST_TO_ADDR
// time := 1 1$00 ;
64966: LD_ADDR_VAR 0 8
64970: PUSH
64971: LD_INT 2100
64973: ST_TO_ADDR
// if amount < min then
64974: LD_VAR 0 9
64978: PUSH
64979: LD_VAR 0 3
64983: LESS
64984: IFFALSE 65002
// r := r * 2 else
64986: LD_ADDR_VAR 0 7
64990: PUSH
64991: LD_VAR 0 7
64995: PUSH
64996: LD_INT 2
64998: MUL
64999: ST_TO_ADDR
65000: GO 65028
// if amount > max then
65002: LD_VAR 0 9
65006: PUSH
65007: LD_VAR 0 4
65011: GREATER
65012: IFFALSE 65028
// r := r / 2 ;
65014: LD_ADDR_VAR 0 7
65018: PUSH
65019: LD_VAR 0 7
65023: PUSH
65024: LD_INT 2
65026: DIVREAL
65027: ST_TO_ADDR
// time := time / r ;
65028: LD_ADDR_VAR 0 8
65032: PUSH
65033: LD_VAR 0 8
65037: PUSH
65038: LD_VAR 0 7
65042: DIVREAL
65043: ST_TO_ADDR
// if time < 0 then
65044: LD_VAR 0 8
65048: PUSH
65049: LD_INT 0
65051: LESS
65052: IFFALSE 65069
// time := time * - 1 ;
65054: LD_ADDR_VAR 0 8
65058: PUSH
65059: LD_VAR 0 8
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: MUL
65068: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65069: LD_VAR 0 8
65073: PUSH
65074: LD_INT 35
65076: PPUSH
65077: LD_INT 875
65079: PPUSH
65080: CALL_OW 12
65084: PLUS
65085: PPUSH
65086: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65090: LD_INT 1
65092: PPUSH
65093: LD_INT 5
65095: PPUSH
65096: CALL_OW 12
65100: PPUSH
65101: LD_VAR 0 1
65105: PPUSH
65106: LD_INT 1
65108: PPUSH
65109: CALL_OW 55
// end ;
65113: GO 64926
// end ;
65115: LD_VAR 0 5
65119: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65120: LD_INT 0
65122: PPUSH
65123: PPUSH
65124: PPUSH
65125: PPUSH
65126: PPUSH
65127: PPUSH
65128: PPUSH
65129: PPUSH
// if not turrets or not factories then
65130: LD_VAR 0 1
65134: NOT
65135: IFTRUE 65144
65137: PUSH
65138: LD_VAR 0 2
65142: NOT
65143: OR
65144: IFFALSE 65148
// exit ;
65146: GO 65455
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65148: LD_ADDR_VAR 0 10
65152: PUSH
65153: LD_INT 5
65155: PUSH
65156: LD_INT 6
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: LD_INT 5
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 24
65190: PUSH
65191: LD_INT 25
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 23
65200: PUSH
65201: LD_INT 27
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 42
65214: PUSH
65215: LD_INT 43
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 44
65224: PUSH
65225: LD_INT 46
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 45
65234: PUSH
65235: LD_INT 47
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: LIST
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: LIST
65251: ST_TO_ADDR
// result := [ ] ;
65252: LD_ADDR_VAR 0 3
65256: PUSH
65257: EMPTY
65258: ST_TO_ADDR
// for i in turrets do
65259: LD_ADDR_VAR 0 4
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: FOR_IN
65270: IFFALSE 65453
// begin nat := GetNation ( i ) ;
65272: LD_ADDR_VAR 0 7
65276: PUSH
65277: LD_VAR 0 4
65281: PPUSH
65282: CALL_OW 248
65286: ST_TO_ADDR
// weapon := 0 ;
65287: LD_ADDR_VAR 0 8
65291: PUSH
65292: LD_INT 0
65294: ST_TO_ADDR
// if not nat then
65295: LD_VAR 0 7
65299: NOT
65300: IFFALSE 65304
// continue ;
65302: GO 65269
// for j in list [ nat ] do
65304: LD_ADDR_VAR 0 5
65308: PUSH
65309: LD_VAR 0 10
65313: PUSH
65314: LD_VAR 0 7
65318: ARRAY
65319: PUSH
65320: FOR_IN
65321: IFFALSE 65362
// if GetBWeapon ( i ) = j [ 1 ] then
65323: LD_VAR 0 4
65327: PPUSH
65328: CALL_OW 269
65332: PUSH
65333: LD_VAR 0 5
65337: PUSH
65338: LD_INT 1
65340: ARRAY
65341: EQUAL
65342: IFFALSE 65360
// begin weapon := j [ 2 ] ;
65344: LD_ADDR_VAR 0 8
65348: PUSH
65349: LD_VAR 0 5
65353: PUSH
65354: LD_INT 2
65356: ARRAY
65357: ST_TO_ADDR
// break ;
65358: GO 65362
// end ;
65360: GO 65320
65362: POP
65363: POP
// if not weapon then
65364: LD_VAR 0 8
65368: NOT
65369: IFFALSE 65373
// continue ;
65371: GO 65269
// for k in factories do
65373: LD_ADDR_VAR 0 6
65377: PUSH
65378: LD_VAR 0 2
65382: PUSH
65383: FOR_IN
65384: IFFALSE 65449
// begin weapons := AvailableWeaponList ( k ) ;
65386: LD_ADDR_VAR 0 9
65390: PUSH
65391: LD_VAR 0 6
65395: PPUSH
65396: CALL_OW 478
65400: ST_TO_ADDR
// if not weapons then
65401: LD_VAR 0 9
65405: NOT
65406: IFFALSE 65410
// continue ;
65408: GO 65383
// if weapon in weapons then
65410: LD_VAR 0 8
65414: PUSH
65415: LD_VAR 0 9
65419: IN
65420: IFFALSE 65447
// begin result := [ i , weapon ] ;
65422: LD_ADDR_VAR 0 3
65426: PUSH
65427: LD_VAR 0 4
65431: PUSH
65432: LD_VAR 0 8
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: ST_TO_ADDR
// exit ;
65441: POP
65442: POP
65443: POP
65444: POP
65445: GO 65455
// end ; end ;
65447: GO 65383
65449: POP
65450: POP
// end ;
65451: GO 65269
65453: POP
65454: POP
// end ;
65455: LD_VAR 0 3
65459: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65460: LD_INT 0
65462: PPUSH
// if not side or side > 8 then
65463: LD_VAR 0 3
65467: NOT
65468: IFTRUE 65480
65470: PUSH
65471: LD_VAR 0 3
65475: PUSH
65476: LD_INT 8
65478: GREATER
65479: OR
65480: IFFALSE 65484
// exit ;
65482: GO 65543
// if not range then
65484: LD_VAR 0 4
65488: NOT
65489: IFFALSE 65500
// range := - 12 ;
65491: LD_ADDR_VAR 0 4
65495: PUSH
65496: LD_INT 12
65498: NEG
65499: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65500: LD_VAR 0 1
65504: PPUSH
65505: LD_VAR 0 2
65509: PPUSH
65510: LD_VAR 0 3
65514: PPUSH
65515: LD_VAR 0 4
65519: PPUSH
65520: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65524: LD_VAR 0 1
65528: PPUSH
65529: LD_VAR 0 2
65533: PPUSH
65534: LD_VAR 0 3
65538: PPUSH
65539: CALL_OW 331
// end ;
65543: LD_VAR 0 5
65547: RET
// export function Video ( mode ) ; begin
65548: LD_INT 0
65550: PPUSH
// ingame_video = mode ;
65551: LD_ADDR_OWVAR 52
65555: PUSH
65556: LD_VAR 0 1
65560: ST_TO_ADDR
// interface_hidden = mode ;
65561: LD_ADDR_OWVAR 54
65565: PUSH
65566: LD_VAR 0 1
65570: ST_TO_ADDR
// end ;
65571: LD_VAR 0 2
65575: RET
// export function Join ( array , element ) ; begin
65576: LD_INT 0
65578: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65579: LD_ADDR_VAR 0 3
65583: PUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: LD_VAR 0 1
65593: PUSH
65594: LD_INT 1
65596: PLUS
65597: PPUSH
65598: LD_VAR 0 2
65602: PPUSH
65603: CALL_OW 1
65607: ST_TO_ADDR
// end ;
65608: LD_VAR 0 3
65612: RET
// export function JoinUnion ( array , element ) ; begin
65613: LD_INT 0
65615: PPUSH
// result := array union element ;
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: LD_VAR 0 1
65625: PUSH
65626: LD_VAR 0 2
65630: UNION
65631: ST_TO_ADDR
// end ;
65632: LD_VAR 0 3
65636: RET
// export function GetBehemoths ( side ) ; begin
65637: LD_INT 0
65639: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65640: LD_ADDR_VAR 0 2
65644: PUSH
65645: LD_INT 22
65647: PUSH
65648: LD_VAR 0 1
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 31
65659: PUSH
65660: LD_INT 25
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PPUSH
65671: CALL_OW 69
65675: ST_TO_ADDR
// end ;
65676: LD_VAR 0 2
65680: RET
// export function Shuffle ( array ) ; var i , index ; begin
65681: LD_INT 0
65683: PPUSH
65684: PPUSH
65685: PPUSH
// result := [ ] ;
65686: LD_ADDR_VAR 0 2
65690: PUSH
65691: EMPTY
65692: ST_TO_ADDR
// if not array then
65693: LD_VAR 0 1
65697: NOT
65698: IFFALSE 65702
// exit ;
65700: GO 65801
// Randomize ;
65702: CALL_OW 10
// for i = array downto 1 do
65706: LD_ADDR_VAR 0 3
65710: PUSH
65711: DOUBLE
65712: LD_VAR 0 1
65716: INC
65717: ST_TO_ADDR
65718: LD_INT 1
65720: PUSH
65721: FOR_DOWNTO
65722: IFFALSE 65799
// begin index := rand ( 1 , array ) ;
65724: LD_ADDR_VAR 0 4
65728: PUSH
65729: LD_INT 1
65731: PPUSH
65732: LD_VAR 0 1
65736: PPUSH
65737: CALL_OW 12
65741: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65742: LD_ADDR_VAR 0 2
65746: PUSH
65747: LD_VAR 0 2
65751: PPUSH
65752: LD_VAR 0 2
65756: PUSH
65757: LD_INT 1
65759: PLUS
65760: PPUSH
65761: LD_VAR 0 1
65765: PUSH
65766: LD_VAR 0 4
65770: ARRAY
65771: PPUSH
65772: CALL_OW 2
65776: ST_TO_ADDR
// array := Delete ( array , index ) ;
65777: LD_ADDR_VAR 0 1
65781: PUSH
65782: LD_VAR 0 1
65786: PPUSH
65787: LD_VAR 0 4
65791: PPUSH
65792: CALL_OW 3
65796: ST_TO_ADDR
// end ;
65797: GO 65721
65799: POP
65800: POP
// end ;
65801: LD_VAR 0 2
65805: RET
// export function GetBaseMaterials ( base ) ; begin
65806: LD_INT 0
65808: PPUSH
// result := [ 0 , 0 , 0 ] ;
65809: LD_ADDR_VAR 0 2
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: LIST
65827: ST_TO_ADDR
// if not base then
65828: LD_VAR 0 1
65832: NOT
65833: IFFALSE 65837
// exit ;
65835: GO 65886
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65837: LD_ADDR_VAR 0 2
65841: PUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: LD_INT 1
65849: PPUSH
65850: CALL_OW 275
65854: PUSH
65855: LD_VAR 0 1
65859: PPUSH
65860: LD_INT 2
65862: PPUSH
65863: CALL_OW 275
65867: PUSH
65868: LD_VAR 0 1
65872: PPUSH
65873: LD_INT 3
65875: PPUSH
65876: CALL_OW 275
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: LIST
65885: ST_TO_ADDR
// end ;
65886: LD_VAR 0 2
65890: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65891: LD_INT 0
65893: PPUSH
65894: PPUSH
// result := array ;
65895: LD_ADDR_VAR 0 3
65899: PUSH
65900: LD_VAR 0 1
65904: ST_TO_ADDR
// if size >= result then
65905: LD_VAR 0 2
65909: PUSH
65910: LD_VAR 0 3
65914: GREATEREQUAL
65915: IFFALSE 65919
// exit ;
65917: GO 65969
// if size then
65919: LD_VAR 0 2
65923: IFFALSE 65969
// for i := array downto size do
65925: LD_ADDR_VAR 0 4
65929: PUSH
65930: DOUBLE
65931: LD_VAR 0 1
65935: INC
65936: ST_TO_ADDR
65937: LD_VAR 0 2
65941: PUSH
65942: FOR_DOWNTO
65943: IFFALSE 65967
// result := Delete ( result , result ) ;
65945: LD_ADDR_VAR 0 3
65949: PUSH
65950: LD_VAR 0 3
65954: PPUSH
65955: LD_VAR 0 3
65959: PPUSH
65960: CALL_OW 3
65964: ST_TO_ADDR
65965: GO 65942
65967: POP
65968: POP
// end ;
65969: LD_VAR 0 3
65973: RET
// export function ComExit ( unit ) ; var tmp ; begin
65974: LD_INT 0
65976: PPUSH
65977: PPUSH
// if not IsInUnit ( unit ) then
65978: LD_VAR 0 1
65982: PPUSH
65983: CALL_OW 310
65987: NOT
65988: IFFALSE 65992
// exit ;
65990: GO 66052
// tmp := IsInUnit ( unit ) ;
65992: LD_ADDR_VAR 0 3
65996: PUSH
65997: LD_VAR 0 1
66001: PPUSH
66002: CALL_OW 310
66006: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66007: LD_VAR 0 3
66011: PPUSH
66012: CALL_OW 247
66016: PUSH
66017: LD_INT 2
66019: EQUAL
66020: IFFALSE 66033
// ComExitVehicle ( unit ) else
66022: LD_VAR 0 1
66026: PPUSH
66027: CALL_OW 121
66031: GO 66042
// ComExitBuilding ( unit ) ;
66033: LD_VAR 0 1
66037: PPUSH
66038: CALL_OW 122
// result := tmp ;
66042: LD_ADDR_VAR 0 2
66046: PUSH
66047: LD_VAR 0 3
66051: ST_TO_ADDR
// end ;
66052: LD_VAR 0 2
66056: RET
// export function ComExitAll ( units ) ; var i ; begin
66057: LD_INT 0
66059: PPUSH
66060: PPUSH
// if not units then
66061: LD_VAR 0 1
66065: NOT
66066: IFFALSE 66070
// exit ;
66068: GO 66096
// for i in units do
66070: LD_ADDR_VAR 0 3
66074: PUSH
66075: LD_VAR 0 1
66079: PUSH
66080: FOR_IN
66081: IFFALSE 66094
// ComExit ( i ) ;
66083: LD_VAR 0 3
66087: PPUSH
66088: CALL 65974 0 1
66092: GO 66080
66094: POP
66095: POP
// end ;
66096: LD_VAR 0 2
66100: RET
// export function ResetHc ; begin
66101: LD_INT 0
66103: PPUSH
// InitHc ;
66104: CALL_OW 19
// hc_importance := 0 ;
66108: LD_ADDR_OWVAR 32
66112: PUSH
66113: LD_INT 0
66115: ST_TO_ADDR
// end ;
66116: LD_VAR 0 1
66120: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66121: LD_INT 0
66123: PPUSH
66124: PPUSH
66125: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66126: LD_ADDR_VAR 0 6
66130: PUSH
66131: LD_VAR 0 1
66135: PUSH
66136: LD_VAR 0 3
66140: PLUS
66141: PUSH
66142: LD_INT 2
66144: DIV
66145: ST_TO_ADDR
// if _x < 0 then
66146: LD_VAR 0 6
66150: PUSH
66151: LD_INT 0
66153: LESS
66154: IFFALSE 66171
// _x := _x * - 1 ;
66156: LD_ADDR_VAR 0 6
66160: PUSH
66161: LD_VAR 0 6
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: MUL
66170: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66171: LD_ADDR_VAR 0 7
66175: PUSH
66176: LD_VAR 0 2
66180: PUSH
66181: LD_VAR 0 4
66185: PLUS
66186: PUSH
66187: LD_INT 2
66189: DIV
66190: ST_TO_ADDR
// if _y < 0 then
66191: LD_VAR 0 7
66195: PUSH
66196: LD_INT 0
66198: LESS
66199: IFFALSE 66216
// _y := _y * - 1 ;
66201: LD_ADDR_VAR 0 7
66205: PUSH
66206: LD_VAR 0 7
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: MUL
66215: ST_TO_ADDR
// result := [ _x , _y ] ;
66216: LD_ADDR_VAR 0 5
66220: PUSH
66221: LD_VAR 0 6
66225: PUSH
66226: LD_VAR 0 7
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: ST_TO_ADDR
// end ;
66235: LD_VAR 0 5
66239: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66240: LD_INT 0
66242: PPUSH
66243: PPUSH
66244: PPUSH
66245: PPUSH
// task := GetTaskList ( unit ) ;
66246: LD_ADDR_VAR 0 7
66250: PUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL_OW 437
66260: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66261: LD_VAR 0 7
66265: NOT
66266: IFFALSE 66285
66268: PUSH
66269: LD_VAR 0 1
66273: PPUSH
66274: LD_VAR 0 2
66278: PPUSH
66279: CALL_OW 308
66283: NOT
66284: AND
66285: IFFALSE 66289
// exit ;
66287: GO 66407
// if IsInArea ( unit , area ) then
66289: LD_VAR 0 1
66293: PPUSH
66294: LD_VAR 0 2
66298: PPUSH
66299: CALL_OW 308
66303: IFFALSE 66321
// begin ComMoveToArea ( unit , goAway ) ;
66305: LD_VAR 0 1
66309: PPUSH
66310: LD_VAR 0 3
66314: PPUSH
66315: CALL_OW 113
// exit ;
66319: GO 66407
// end ; if task [ 1 ] [ 1 ] <> M then
66321: LD_VAR 0 7
66325: PUSH
66326: LD_INT 1
66328: ARRAY
66329: PUSH
66330: LD_INT 1
66332: ARRAY
66333: PUSH
66334: LD_STRING M
66336: NONEQUAL
66337: IFFALSE 66341
// exit ;
66339: GO 66407
// x := task [ 1 ] [ 2 ] ;
66341: LD_ADDR_VAR 0 5
66345: PUSH
66346: LD_VAR 0 7
66350: PUSH
66351: LD_INT 1
66353: ARRAY
66354: PUSH
66355: LD_INT 2
66357: ARRAY
66358: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66359: LD_ADDR_VAR 0 6
66363: PUSH
66364: LD_VAR 0 7
66368: PUSH
66369: LD_INT 1
66371: ARRAY
66372: PUSH
66373: LD_INT 3
66375: ARRAY
66376: ST_TO_ADDR
// if InArea ( x , y , area ) then
66377: LD_VAR 0 5
66381: PPUSH
66382: LD_VAR 0 6
66386: PPUSH
66387: LD_VAR 0 2
66391: PPUSH
66392: CALL_OW 309
66396: IFFALSE 66407
// ComStop ( unit ) ;
66398: LD_VAR 0 1
66402: PPUSH
66403: CALL_OW 141
// end ;
66407: LD_VAR 0 4
66411: RET
// export function Abs ( value ) ; begin
66412: LD_INT 0
66414: PPUSH
// result := value ;
66415: LD_ADDR_VAR 0 2
66419: PUSH
66420: LD_VAR 0 1
66424: ST_TO_ADDR
// if value < 0 then
66425: LD_VAR 0 1
66429: PUSH
66430: LD_INT 0
66432: LESS
66433: IFFALSE 66450
// result := value * - 1 ;
66435: LD_ADDR_VAR 0 2
66439: PUSH
66440: LD_VAR 0 1
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: MUL
66449: ST_TO_ADDR
// end ;
66450: LD_VAR 0 2
66454: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66455: LD_INT 0
66457: PPUSH
66458: PPUSH
66459: PPUSH
66460: PPUSH
66461: PPUSH
66462: PPUSH
66463: PPUSH
66464: PPUSH
// if not unit or not building then
66465: LD_VAR 0 1
66469: NOT
66470: IFTRUE 66479
66472: PUSH
66473: LD_VAR 0 2
66477: NOT
66478: OR
66479: IFFALSE 66483
// exit ;
66481: GO 66711
// x := GetX ( building ) ;
66483: LD_ADDR_VAR 0 4
66487: PUSH
66488: LD_VAR 0 2
66492: PPUSH
66493: CALL_OW 250
66497: ST_TO_ADDR
// y := GetY ( building ) ;
66498: LD_ADDR_VAR 0 6
66502: PUSH
66503: LD_VAR 0 2
66507: PPUSH
66508: CALL_OW 251
66512: ST_TO_ADDR
// d := GetDir ( building ) ;
66513: LD_ADDR_VAR 0 8
66517: PUSH
66518: LD_VAR 0 2
66522: PPUSH
66523: CALL_OW 254
66527: ST_TO_ADDR
// r := 4 ;
66528: LD_ADDR_VAR 0 9
66532: PUSH
66533: LD_INT 4
66535: ST_TO_ADDR
// for i := 1 to 5 do
66536: LD_ADDR_VAR 0 10
66540: PUSH
66541: DOUBLE
66542: LD_INT 1
66544: DEC
66545: ST_TO_ADDR
66546: LD_INT 5
66548: PUSH
66549: FOR_TO
66550: IFFALSE 66709
// begin _x := ShiftX ( x , d , r + i ) ;
66552: LD_ADDR_VAR 0 5
66556: PUSH
66557: LD_VAR 0 4
66561: PPUSH
66562: LD_VAR 0 8
66566: PPUSH
66567: LD_VAR 0 9
66571: PUSH
66572: LD_VAR 0 10
66576: PLUS
66577: PPUSH
66578: CALL_OW 272
66582: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66583: LD_ADDR_VAR 0 7
66587: PUSH
66588: LD_VAR 0 6
66592: PPUSH
66593: LD_VAR 0 8
66597: PPUSH
66598: LD_VAR 0 9
66602: PUSH
66603: LD_VAR 0 10
66607: PLUS
66608: PPUSH
66609: CALL_OW 273
66613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66614: LD_VAR 0 5
66618: PPUSH
66619: LD_VAR 0 7
66623: PPUSH
66624: CALL_OW 488
66628: IFFALSE 66663
66630: PUSH
66631: LD_VAR 0 5
66635: PPUSH
66636: LD_VAR 0 7
66640: PPUSH
66641: CALL_OW 428
66645: PPUSH
66646: CALL_OW 247
66650: PUSH
66651: LD_INT 3
66653: PUSH
66654: LD_INT 2
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: IN
66661: NOT
66662: AND
66663: IFFALSE 66707
// begin ComMoveXY ( unit , _x , _y ) ;
66665: LD_VAR 0 1
66669: PPUSH
66670: LD_VAR 0 5
66674: PPUSH
66675: LD_VAR 0 7
66679: PPUSH
66680: CALL_OW 111
// result := [ _x , _y ] ;
66684: LD_ADDR_VAR 0 3
66688: PUSH
66689: LD_VAR 0 5
66693: PUSH
66694: LD_VAR 0 7
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// exit ;
66703: POP
66704: POP
66705: GO 66711
// end ; end ;
66707: GO 66549
66709: POP
66710: POP
// end ;
66711: LD_VAR 0 3
66715: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
66720: PPUSH
// result := 0 ;
66721: LD_ADDR_VAR 0 3
66725: PUSH
66726: LD_INT 0
66728: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66729: LD_VAR 0 1
66733: PUSH
66734: LD_INT 0
66736: LESS
66737: IFTRUE 66749
66739: PUSH
66740: LD_VAR 0 1
66744: PUSH
66745: LD_INT 8
66747: GREATER
66748: OR
66749: IFTRUE 66761
66751: PUSH
66752: LD_VAR 0 2
66756: PUSH
66757: LD_INT 0
66759: LESS
66760: OR
66761: IFTRUE 66773
66763: PUSH
66764: LD_VAR 0 2
66768: PUSH
66769: LD_INT 8
66771: GREATER
66772: OR
66773: IFFALSE 66777
// exit ;
66775: GO 66852
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66777: LD_ADDR_VAR 0 4
66781: PUSH
66782: LD_INT 22
66784: PUSH
66785: LD_VAR 0 2
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PPUSH
66794: CALL_OW 69
66798: PUSH
66799: FOR_IN
66800: IFFALSE 66850
// begin un := UnitShoot ( i ) ;
66802: LD_ADDR_VAR 0 5
66806: PUSH
66807: LD_VAR 0 4
66811: PPUSH
66812: CALL_OW 504
66816: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66817: LD_VAR 0 5
66821: PPUSH
66822: CALL_OW 255
66826: PUSH
66827: LD_VAR 0 1
66831: EQUAL
66832: IFFALSE 66848
// begin result := un ;
66834: LD_ADDR_VAR 0 3
66838: PUSH
66839: LD_VAR 0 5
66843: ST_TO_ADDR
// exit ;
66844: POP
66845: POP
66846: GO 66852
// end ; end ;
66848: GO 66799
66850: POP
66851: POP
// end ;
66852: LD_VAR 0 3
66856: RET
// export function GetCargoBay ( units ) ; begin
66857: LD_INT 0
66859: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66860: LD_ADDR_VAR 0 2
66864: PUSH
66865: LD_VAR 0 1
66869: PPUSH
66870: LD_INT 2
66872: PUSH
66873: LD_INT 34
66875: PUSH
66876: LD_INT 12
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 34
66885: PUSH
66886: LD_INT 51
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 34
66895: PUSH
66896: LD_INT 32
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 34
66905: PUSH
66906: LD_INT 89
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: PPUSH
66920: CALL_OW 72
66924: ST_TO_ADDR
// end ;
66925: LD_VAR 0 2
66929: RET
// export function Negate ( value ) ; begin
66930: LD_INT 0
66932: PPUSH
// result := not value ;
66933: LD_ADDR_VAR 0 2
66937: PUSH
66938: LD_VAR 0 1
66942: NOT
66943: ST_TO_ADDR
// end ;
66944: LD_VAR 0 2
66948: RET
// export function Inc ( value ) ; begin
66949: LD_INT 0
66951: PPUSH
// result := value + 1 ;
66952: LD_ADDR_VAR 0 2
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: LD_INT 1
66964: PLUS
66965: ST_TO_ADDR
// end ;
66966: LD_VAR 0 2
66970: RET
// export function Dec ( value ) ; begin
66971: LD_INT 0
66973: PPUSH
// result := value - 1 ;
66974: LD_ADDR_VAR 0 2
66978: PUSH
66979: LD_VAR 0 1
66983: PUSH
66984: LD_INT 1
66986: MINUS
66987: ST_TO_ADDR
// end ;
66988: LD_VAR 0 2
66992: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66993: LD_INT 0
66995: PPUSH
66996: PPUSH
66997: PPUSH
66998: PPUSH
66999: PPUSH
67000: PPUSH
67001: PPUSH
67002: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67003: LD_VAR 0 1
67007: PPUSH
67008: LD_VAR 0 2
67012: PPUSH
67013: CALL_OW 488
67017: NOT
67018: IFTRUE 67037
67020: PUSH
67021: LD_VAR 0 3
67025: PPUSH
67026: LD_VAR 0 4
67030: PPUSH
67031: CALL_OW 488
67035: NOT
67036: OR
67037: IFFALSE 67050
// begin result := - 1 ;
67039: LD_ADDR_VAR 0 5
67043: PUSH
67044: LD_INT 1
67046: NEG
67047: ST_TO_ADDR
// exit ;
67048: GO 67285
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67050: LD_ADDR_VAR 0 12
67054: PUSH
67055: LD_VAR 0 1
67059: PPUSH
67060: LD_VAR 0 2
67064: PPUSH
67065: LD_VAR 0 3
67069: PPUSH
67070: LD_VAR 0 4
67074: PPUSH
67075: CALL 66121 0 4
67079: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67080: LD_ADDR_VAR 0 11
67084: PUSH
67085: LD_VAR 0 1
67089: PPUSH
67090: LD_VAR 0 2
67094: PPUSH
67095: LD_VAR 0 12
67099: PUSH
67100: LD_INT 1
67102: ARRAY
67103: PPUSH
67104: LD_VAR 0 12
67108: PUSH
67109: LD_INT 2
67111: ARRAY
67112: PPUSH
67113: CALL_OW 298
67117: ST_TO_ADDR
// distance := 9999 ;
67118: LD_ADDR_VAR 0 10
67122: PUSH
67123: LD_INT 9999
67125: ST_TO_ADDR
// for i := 0 to 5 do
67126: LD_ADDR_VAR 0 6
67130: PUSH
67131: DOUBLE
67132: LD_INT 0
67134: DEC
67135: ST_TO_ADDR
67136: LD_INT 5
67138: PUSH
67139: FOR_TO
67140: IFFALSE 67283
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67142: LD_ADDR_VAR 0 7
67146: PUSH
67147: LD_VAR 0 1
67151: PPUSH
67152: LD_VAR 0 6
67156: PPUSH
67157: LD_VAR 0 11
67161: PPUSH
67162: CALL_OW 272
67166: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67167: LD_ADDR_VAR 0 8
67171: PUSH
67172: LD_VAR 0 2
67176: PPUSH
67177: LD_VAR 0 6
67181: PPUSH
67182: LD_VAR 0 11
67186: PPUSH
67187: CALL_OW 273
67191: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67192: LD_VAR 0 7
67196: PPUSH
67197: LD_VAR 0 8
67201: PPUSH
67202: CALL_OW 488
67206: NOT
67207: IFFALSE 67211
// continue ;
67209: GO 67139
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67211: LD_ADDR_VAR 0 9
67215: PUSH
67216: LD_VAR 0 12
67220: PUSH
67221: LD_INT 1
67223: ARRAY
67224: PPUSH
67225: LD_VAR 0 12
67229: PUSH
67230: LD_INT 2
67232: ARRAY
67233: PPUSH
67234: LD_VAR 0 7
67238: PPUSH
67239: LD_VAR 0 8
67243: PPUSH
67244: CALL_OW 298
67248: ST_TO_ADDR
// if tmp < distance then
67249: LD_VAR 0 9
67253: PUSH
67254: LD_VAR 0 10
67258: LESS
67259: IFFALSE 67281
// begin result := i ;
67261: LD_ADDR_VAR 0 5
67265: PUSH
67266: LD_VAR 0 6
67270: ST_TO_ADDR
// distance := tmp ;
67271: LD_ADDR_VAR 0 10
67275: PUSH
67276: LD_VAR 0 9
67280: ST_TO_ADDR
// end ; end ;
67281: GO 67139
67283: POP
67284: POP
// end ;
67285: LD_VAR 0 5
67289: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67290: LD_INT 0
67292: PPUSH
67293: PPUSH
// if not driver or not IsInUnit ( driver ) then
67294: LD_VAR 0 1
67298: NOT
67299: IFTRUE 67313
67301: PUSH
67302: LD_VAR 0 1
67306: PPUSH
67307: CALL_OW 310
67311: NOT
67312: OR
67313: IFFALSE 67317
// exit ;
67315: GO 67407
// vehicle := IsInUnit ( driver ) ;
67317: LD_ADDR_VAR 0 3
67321: PUSH
67322: LD_VAR 0 1
67326: PPUSH
67327: CALL_OW 310
67331: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67332: LD_VAR 0 1
67336: PPUSH
67337: LD_STRING \
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: PUSH
67367: LD_STRING E
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: LD_VAR 0 3
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PPUSH
67403: CALL_OW 446
// end ;
67407: LD_VAR 0 2
67411: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67412: LD_INT 0
67414: PPUSH
67415: PPUSH
// if not driver or not IsInUnit ( driver ) then
67416: LD_VAR 0 1
67420: NOT
67421: IFTRUE 67435
67423: PUSH
67424: LD_VAR 0 1
67428: PPUSH
67429: CALL_OW 310
67433: NOT
67434: OR
67435: IFFALSE 67439
// exit ;
67437: GO 67529
// vehicle := IsInUnit ( driver ) ;
67439: LD_ADDR_VAR 0 3
67443: PUSH
67444: LD_VAR 0 1
67448: PPUSH
67449: CALL_OW 310
67453: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67454: LD_VAR 0 1
67458: PPUSH
67459: LD_STRING \
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_INT 0
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: PUSH
67489: LD_STRING E
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: LD_VAR 0 3
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PPUSH
67525: CALL_OW 447
// end ;
67529: LD_VAR 0 2
67533: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67534: LD_INT 0
67536: PPUSH
67537: PPUSH
67538: PPUSH
// tmp := [ ] ;
67539: LD_ADDR_VAR 0 5
67543: PUSH
67544: EMPTY
67545: ST_TO_ADDR
// for i in units do
67546: LD_ADDR_VAR 0 4
67550: PUSH
67551: LD_VAR 0 1
67555: PUSH
67556: FOR_IN
67557: IFFALSE 67595
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67559: LD_ADDR_VAR 0 5
67563: PUSH
67564: LD_VAR 0 5
67568: PPUSH
67569: LD_VAR 0 5
67573: PUSH
67574: LD_INT 1
67576: PLUS
67577: PPUSH
67578: LD_VAR 0 4
67582: PPUSH
67583: CALL_OW 256
67587: PPUSH
67588: CALL_OW 2
67592: ST_TO_ADDR
67593: GO 67556
67595: POP
67596: POP
// if not tmp then
67597: LD_VAR 0 5
67601: NOT
67602: IFFALSE 67606
// exit ;
67604: GO 67654
// if asc then
67606: LD_VAR 0 2
67610: IFFALSE 67634
// result := SortListByListAsc ( units , tmp ) else
67612: LD_ADDR_VAR 0 3
67616: PUSH
67617: LD_VAR 0 1
67621: PPUSH
67622: LD_VAR 0 5
67626: PPUSH
67627: CALL_OW 76
67631: ST_TO_ADDR
67632: GO 67654
// result := SortListByListDesc ( units , tmp ) ;
67634: LD_ADDR_VAR 0 3
67638: PUSH
67639: LD_VAR 0 1
67643: PPUSH
67644: LD_VAR 0 5
67648: PPUSH
67649: CALL_OW 77
67653: ST_TO_ADDR
// end ;
67654: LD_VAR 0 3
67658: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67659: LD_INT 0
67661: PPUSH
67662: PPUSH
// task := GetTaskList ( mech ) ;
67663: LD_ADDR_VAR 0 4
67667: PUSH
67668: LD_VAR 0 1
67672: PPUSH
67673: CALL_OW 437
67677: ST_TO_ADDR
// if not task then
67678: LD_VAR 0 4
67682: NOT
67683: IFFALSE 67687
// exit ;
67685: GO 67731
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67687: LD_ADDR_VAR 0 3
67691: PUSH
67692: LD_VAR 0 4
67696: PUSH
67697: LD_INT 1
67699: ARRAY
67700: PUSH
67701: LD_INT 1
67703: ARRAY
67704: PUSH
67705: LD_STRING r
67707: EQUAL
67708: IFFALSE 67730
67710: PUSH
67711: LD_VAR 0 4
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PUSH
67720: LD_INT 4
67722: ARRAY
67723: PUSH
67724: LD_VAR 0 2
67728: EQUAL
67729: AND
67730: ST_TO_ADDR
// end ;
67731: LD_VAR 0 3
67735: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67736: LD_INT 0
67738: PPUSH
// SetDir ( unit , d ) ;
67739: LD_VAR 0 1
67743: PPUSH
67744: LD_VAR 0 4
67748: PPUSH
67749: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67753: LD_ADDR_VAR 0 6
67757: PUSH
67758: LD_VAR 0 1
67762: PPUSH
67763: LD_VAR 0 2
67767: PPUSH
67768: LD_VAR 0 3
67772: PPUSH
67773: LD_VAR 0 5
67777: PPUSH
67778: CALL_OW 48
67782: ST_TO_ADDR
// end ;
67783: LD_VAR 0 6
67787: RET
// export function ToNaturalNumber ( number ) ; begin
67788: LD_INT 0
67790: PPUSH
// result := number div 1 ;
67791: LD_ADDR_VAR 0 2
67795: PUSH
67796: LD_VAR 0 1
67800: PUSH
67801: LD_INT 1
67803: DIV
67804: ST_TO_ADDR
// if number < 0 then
67805: LD_VAR 0 1
67809: PUSH
67810: LD_INT 0
67812: LESS
67813: IFFALSE 67823
// result := 0 ;
67815: LD_ADDR_VAR 0 2
67819: PUSH
67820: LD_INT 0
67822: ST_TO_ADDR
// end ;
67823: LD_VAR 0 2
67827: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67828: LD_INT 0
67830: PPUSH
67831: PPUSH
67832: PPUSH
// if not buildings then
67833: LD_VAR 0 1
67837: NOT
67838: IFFALSE 67842
// exit ;
67840: GO 67957
// tmp := [ ] ;
67842: LD_ADDR_VAR 0 5
67846: PUSH
67847: EMPTY
67848: ST_TO_ADDR
// for b in buildings do
67849: LD_ADDR_VAR 0 4
67853: PUSH
67854: LD_VAR 0 1
67858: PUSH
67859: FOR_IN
67860: IFFALSE 67898
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67862: LD_ADDR_VAR 0 5
67866: PUSH
67867: LD_VAR 0 5
67871: PPUSH
67872: LD_VAR 0 5
67876: PUSH
67877: LD_INT 1
67879: PLUS
67880: PPUSH
67881: LD_VAR 0 4
67885: PPUSH
67886: CALL_OW 266
67890: PPUSH
67891: CALL_OW 1
67895: ST_TO_ADDR
67896: GO 67859
67898: POP
67899: POP
// if not tmp then
67900: LD_VAR 0 5
67904: NOT
67905: IFFALSE 67909
// exit ;
67907: GO 67957
// if asc then
67909: LD_VAR 0 2
67913: IFFALSE 67937
// result := SortListByListAsc ( buildings , tmp ) else
67915: LD_ADDR_VAR 0 3
67919: PUSH
67920: LD_VAR 0 1
67924: PPUSH
67925: LD_VAR 0 5
67929: PPUSH
67930: CALL_OW 76
67934: ST_TO_ADDR
67935: GO 67957
// result := SortListByListDesc ( buildings , tmp ) ;
67937: LD_ADDR_VAR 0 3
67941: PUSH
67942: LD_VAR 0 1
67946: PPUSH
67947: LD_VAR 0 5
67951: PPUSH
67952: CALL_OW 77
67956: ST_TO_ADDR
// end ;
67957: LD_VAR 0 3
67961: RET
// export function SortByClass ( units , class ) ; var un ; begin
67962: LD_INT 0
67964: PPUSH
67965: PPUSH
// if not units or not class then
67966: LD_VAR 0 1
67970: NOT
67971: IFTRUE 67980
67973: PUSH
67974: LD_VAR 0 2
67978: NOT
67979: OR
67980: IFFALSE 67984
// exit ;
67982: GO 68079
// result := [ ] ;
67984: LD_ADDR_VAR 0 3
67988: PUSH
67989: EMPTY
67990: ST_TO_ADDR
// for un in units do
67991: LD_ADDR_VAR 0 4
67995: PUSH
67996: LD_VAR 0 1
68000: PUSH
68001: FOR_IN
68002: IFFALSE 68077
// if GetClass ( un ) = class then
68004: LD_VAR 0 4
68008: PPUSH
68009: CALL_OW 257
68013: PUSH
68014: LD_VAR 0 2
68018: EQUAL
68019: IFFALSE 68046
// result := Insert ( result , 1 , un ) else
68021: LD_ADDR_VAR 0 3
68025: PUSH
68026: LD_VAR 0 3
68030: PPUSH
68031: LD_INT 1
68033: PPUSH
68034: LD_VAR 0 4
68038: PPUSH
68039: CALL_OW 2
68043: ST_TO_ADDR
68044: GO 68075
// result := Replace ( result , result + 1 , un ) ;
68046: LD_ADDR_VAR 0 3
68050: PUSH
68051: LD_VAR 0 3
68055: PPUSH
68056: LD_VAR 0 3
68060: PUSH
68061: LD_INT 1
68063: PLUS
68064: PPUSH
68065: LD_VAR 0 4
68069: PPUSH
68070: CALL_OW 1
68074: ST_TO_ADDR
68075: GO 68001
68077: POP
68078: POP
// end ;
68079: LD_VAR 0 3
68083: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68084: LD_INT 0
68086: PPUSH
68087: PPUSH
68088: PPUSH
68089: PPUSH
68090: PPUSH
68091: PPUSH
68092: PPUSH
// result := [ ] ;
68093: LD_ADDR_VAR 0 4
68097: PUSH
68098: EMPTY
68099: ST_TO_ADDR
// if x - r < 0 then
68100: LD_VAR 0 1
68104: PUSH
68105: LD_VAR 0 3
68109: MINUS
68110: PUSH
68111: LD_INT 0
68113: LESS
68114: IFFALSE 68126
// min_x := 0 else
68116: LD_ADDR_VAR 0 8
68120: PUSH
68121: LD_INT 0
68123: ST_TO_ADDR
68124: GO 68142
// min_x := x - r ;
68126: LD_ADDR_VAR 0 8
68130: PUSH
68131: LD_VAR 0 1
68135: PUSH
68136: LD_VAR 0 3
68140: MINUS
68141: ST_TO_ADDR
// if y - r < 0 then
68142: LD_VAR 0 2
68146: PUSH
68147: LD_VAR 0 3
68151: MINUS
68152: PUSH
68153: LD_INT 0
68155: LESS
68156: IFFALSE 68168
// min_y := 0 else
68158: LD_ADDR_VAR 0 7
68162: PUSH
68163: LD_INT 0
68165: ST_TO_ADDR
68166: GO 68184
// min_y := y - r ;
68168: LD_ADDR_VAR 0 7
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_VAR 0 3
68182: MINUS
68183: ST_TO_ADDR
// max_x := x + r ;
68184: LD_ADDR_VAR 0 9
68188: PUSH
68189: LD_VAR 0 1
68193: PUSH
68194: LD_VAR 0 3
68198: PLUS
68199: ST_TO_ADDR
// max_y := y + r ;
68200: LD_ADDR_VAR 0 10
68204: PUSH
68205: LD_VAR 0 2
68209: PUSH
68210: LD_VAR 0 3
68214: PLUS
68215: ST_TO_ADDR
// for _x = min_x to max_x do
68216: LD_ADDR_VAR 0 5
68220: PUSH
68221: DOUBLE
68222: LD_VAR 0 8
68226: DEC
68227: ST_TO_ADDR
68228: LD_VAR 0 9
68232: PUSH
68233: FOR_TO
68234: IFFALSE 68335
// for _y = min_y to max_y do
68236: LD_ADDR_VAR 0 6
68240: PUSH
68241: DOUBLE
68242: LD_VAR 0 7
68246: DEC
68247: ST_TO_ADDR
68248: LD_VAR 0 10
68252: PUSH
68253: FOR_TO
68254: IFFALSE 68331
// begin if not ValidHex ( _x , _y ) then
68256: LD_VAR 0 5
68260: PPUSH
68261: LD_VAR 0 6
68265: PPUSH
68266: CALL_OW 488
68270: NOT
68271: IFFALSE 68275
// continue ;
68273: GO 68253
// if GetResourceTypeXY ( _x , _y ) then
68275: LD_VAR 0 5
68279: PPUSH
68280: LD_VAR 0 6
68284: PPUSH
68285: CALL_OW 283
68289: IFFALSE 68329
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68291: LD_ADDR_VAR 0 4
68295: PUSH
68296: LD_VAR 0 4
68300: PPUSH
68301: LD_VAR 0 4
68305: PUSH
68306: LD_INT 1
68308: PLUS
68309: PPUSH
68310: LD_VAR 0 5
68314: PUSH
68315: LD_VAR 0 6
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PPUSH
68324: CALL_OW 1
68328: ST_TO_ADDR
// end ;
68329: GO 68253
68331: POP
68332: POP
68333: GO 68233
68335: POP
68336: POP
// end ;
68337: LD_VAR 0 4
68341: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68342: LD_INT 0
68344: PPUSH
68345: PPUSH
68346: PPUSH
68347: PPUSH
68348: PPUSH
68349: PPUSH
68350: PPUSH
68351: PPUSH
// if not units then
68352: LD_VAR 0 1
68356: NOT
68357: IFFALSE 68361
// exit ;
68359: GO 68893
// result := UnitFilter ( units , [ f_ok ] ) ;
68361: LD_ADDR_VAR 0 3
68365: PUSH
68366: LD_VAR 0 1
68370: PPUSH
68371: LD_INT 50
68373: PUSH
68374: EMPTY
68375: LIST
68376: PPUSH
68377: CALL_OW 72
68381: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68382: LD_ADDR_VAR 0 8
68386: PUSH
68387: LD_VAR 0 1
68391: PUSH
68392: LD_INT 1
68394: ARRAY
68395: PPUSH
68396: CALL_OW 255
68400: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68401: LD_ADDR_VAR 0 10
68405: PUSH
68406: LD_INT 29
68408: PUSH
68409: LD_INT 91
68411: PUSH
68412: LD_INT 49
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: LIST
68419: ST_TO_ADDR
// if not result then
68420: LD_VAR 0 3
68424: NOT
68425: IFFALSE 68429
// exit ;
68427: GO 68893
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68429: LD_ADDR_VAR 0 5
68433: PUSH
68434: LD_INT 81
68436: PUSH
68437: LD_VAR 0 8
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PPUSH
68446: CALL_OW 69
68450: ST_TO_ADDR
// for i in result do
68451: LD_ADDR_VAR 0 4
68455: PUSH
68456: LD_VAR 0 3
68460: PUSH
68461: FOR_IN
68462: IFFALSE 68891
// begin tag := GetTag ( i ) + 1 ;
68464: LD_ADDR_VAR 0 9
68468: PUSH
68469: LD_VAR 0 4
68473: PPUSH
68474: CALL_OW 110
68478: PUSH
68479: LD_INT 1
68481: PLUS
68482: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68483: LD_ADDR_VAR 0 7
68487: PUSH
68488: LD_VAR 0 4
68492: PPUSH
68493: CALL_OW 250
68497: PPUSH
68498: LD_VAR 0 4
68502: PPUSH
68503: CALL_OW 251
68507: PPUSH
68508: LD_INT 4
68510: PPUSH
68511: CALL 68084 0 3
68515: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68516: LD_VAR 0 4
68520: PPUSH
68521: CALL_OW 247
68525: PUSH
68526: LD_INT 2
68528: EQUAL
68529: IFFALSE 68541
68531: PUSH
68532: LD_VAR 0 7
68536: PUSH
68537: LD_INT 2
68539: GREATER
68540: AND
68541: IFFALSE 68561
68543: PUSH
68544: LD_VAR 0 4
68548: PPUSH
68549: CALL_OW 264
68553: PUSH
68554: LD_VAR 0 10
68558: IN
68559: NOT
68560: AND
68561: IFFALSE 68600
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68563: LD_VAR 0 4
68567: PPUSH
68568: LD_VAR 0 7
68572: PUSH
68573: LD_INT 1
68575: ARRAY
68576: PUSH
68577: LD_INT 1
68579: ARRAY
68580: PPUSH
68581: LD_VAR 0 7
68585: PUSH
68586: LD_INT 1
68588: ARRAY
68589: PUSH
68590: LD_INT 2
68592: ARRAY
68593: PPUSH
68594: CALL_OW 116
68598: GO 68889
// if path > tag then
68600: LD_VAR 0 2
68604: PUSH
68605: LD_VAR 0 9
68609: GREATER
68610: IFFALSE 68818
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68612: LD_ADDR_VAR 0 6
68616: PUSH
68617: LD_VAR 0 5
68621: PPUSH
68622: LD_INT 91
68624: PUSH
68625: LD_VAR 0 4
68629: PUSH
68630: LD_INT 8
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: PPUSH
68638: CALL_OW 72
68642: ST_TO_ADDR
// if nearEnemy then
68643: LD_VAR 0 6
68647: IFFALSE 68716
// begin if GetWeapon ( i ) = ru_time_lapser then
68649: LD_VAR 0 4
68653: PPUSH
68654: CALL_OW 264
68658: PUSH
68659: LD_INT 49
68661: EQUAL
68662: IFFALSE 68690
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68664: LD_VAR 0 4
68668: PPUSH
68669: LD_VAR 0 6
68673: PPUSH
68674: LD_VAR 0 4
68678: PPUSH
68679: CALL_OW 74
68683: PPUSH
68684: CALL_OW 112
68688: GO 68714
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68690: LD_VAR 0 4
68694: PPUSH
68695: LD_VAR 0 6
68699: PPUSH
68700: LD_VAR 0 4
68704: PPUSH
68705: CALL_OW 74
68709: PPUSH
68710: CALL 69974 0 2
// end else
68714: GO 68816
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68716: LD_VAR 0 4
68720: PPUSH
68721: LD_VAR 0 2
68725: PUSH
68726: LD_VAR 0 9
68730: ARRAY
68731: PUSH
68732: LD_INT 1
68734: ARRAY
68735: PPUSH
68736: LD_VAR 0 2
68740: PUSH
68741: LD_VAR 0 9
68745: ARRAY
68746: PUSH
68747: LD_INT 2
68749: ARRAY
68750: PPUSH
68751: CALL_OW 297
68755: PUSH
68756: LD_INT 6
68758: GREATER
68759: IFFALSE 68802
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68761: LD_VAR 0 4
68765: PPUSH
68766: LD_VAR 0 2
68770: PUSH
68771: LD_VAR 0 9
68775: ARRAY
68776: PUSH
68777: LD_INT 1
68779: ARRAY
68780: PPUSH
68781: LD_VAR 0 2
68785: PUSH
68786: LD_VAR 0 9
68790: ARRAY
68791: PUSH
68792: LD_INT 2
68794: ARRAY
68795: PPUSH
68796: CALL_OW 114
68800: GO 68816
// SetTag ( i , tag ) ;
68802: LD_VAR 0 4
68806: PPUSH
68807: LD_VAR 0 9
68811: PPUSH
68812: CALL_OW 109
// end else
68816: GO 68889
// if enemy then
68818: LD_VAR 0 5
68822: IFFALSE 68889
// begin if GetWeapon ( i ) = ru_time_lapser then
68824: LD_VAR 0 4
68828: PPUSH
68829: CALL_OW 264
68833: PUSH
68834: LD_INT 49
68836: EQUAL
68837: IFFALSE 68865
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68839: LD_VAR 0 4
68843: PPUSH
68844: LD_VAR 0 5
68848: PPUSH
68849: LD_VAR 0 4
68853: PPUSH
68854: CALL_OW 74
68858: PPUSH
68859: CALL_OW 112
68863: GO 68889
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68865: LD_VAR 0 4
68869: PPUSH
68870: LD_VAR 0 5
68874: PPUSH
68875: LD_VAR 0 4
68879: PPUSH
68880: CALL_OW 74
68884: PPUSH
68885: CALL 69974 0 2
// end ; end ;
68889: GO 68461
68891: POP
68892: POP
// end ;
68893: LD_VAR 0 3
68897: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68898: LD_INT 0
68900: PPUSH
68901: PPUSH
68902: PPUSH
// if not unit or IsInUnit ( unit ) then
68903: LD_VAR 0 1
68907: NOT
68908: IFTRUE 68921
68910: PUSH
68911: LD_VAR 0 1
68915: PPUSH
68916: CALL_OW 310
68920: OR
68921: IFFALSE 68925
// exit ;
68923: GO 69016
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68925: LD_ADDR_VAR 0 4
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: CALL_OW 250
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: LD_INT 1
68947: PPUSH
68948: CALL_OW 272
68952: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68953: LD_ADDR_VAR 0 5
68957: PUSH
68958: LD_VAR 0 1
68962: PPUSH
68963: CALL_OW 251
68967: PPUSH
68968: LD_VAR 0 2
68972: PPUSH
68973: LD_INT 1
68975: PPUSH
68976: CALL_OW 273
68980: ST_TO_ADDR
// if ValidHex ( x , y ) then
68981: LD_VAR 0 4
68985: PPUSH
68986: LD_VAR 0 5
68990: PPUSH
68991: CALL_OW 488
68995: IFFALSE 69016
// ComTurnXY ( unit , x , y ) ;
68997: LD_VAR 0 1
69001: PPUSH
69002: LD_VAR 0 4
69006: PPUSH
69007: LD_VAR 0 5
69011: PPUSH
69012: CALL_OW 118
// end ;
69016: LD_VAR 0 3
69020: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69021: LD_INT 0
69023: PPUSH
69024: PPUSH
// result := false ;
69025: LD_ADDR_VAR 0 3
69029: PUSH
69030: LD_INT 0
69032: ST_TO_ADDR
// if not units then
69033: LD_VAR 0 2
69037: NOT
69038: IFFALSE 69042
// exit ;
69040: GO 69087
// for i in units do
69042: LD_ADDR_VAR 0 4
69046: PUSH
69047: LD_VAR 0 2
69051: PUSH
69052: FOR_IN
69053: IFFALSE 69085
// if See ( side , i ) then
69055: LD_VAR 0 1
69059: PPUSH
69060: LD_VAR 0 4
69064: PPUSH
69065: CALL_OW 292
69069: IFFALSE 69083
// begin result := true ;
69071: LD_ADDR_VAR 0 3
69075: PUSH
69076: LD_INT 1
69078: ST_TO_ADDR
// exit ;
69079: POP
69080: POP
69081: GO 69087
// end ;
69083: GO 69052
69085: POP
69086: POP
// end ;
69087: LD_VAR 0 3
69091: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69092: LD_INT 0
69094: PPUSH
69095: PPUSH
69096: PPUSH
69097: PPUSH
// if not unit or not points then
69098: LD_VAR 0 1
69102: NOT
69103: IFTRUE 69112
69105: PUSH
69106: LD_VAR 0 2
69110: NOT
69111: OR
69112: IFFALSE 69116
// exit ;
69114: GO 69206
// dist := 99999 ;
69116: LD_ADDR_VAR 0 5
69120: PUSH
69121: LD_INT 99999
69123: ST_TO_ADDR
// for i in points do
69124: LD_ADDR_VAR 0 4
69128: PUSH
69129: LD_VAR 0 2
69133: PUSH
69134: FOR_IN
69135: IFFALSE 69204
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69137: LD_ADDR_VAR 0 6
69141: PUSH
69142: LD_VAR 0 1
69146: PPUSH
69147: LD_VAR 0 4
69151: PUSH
69152: LD_INT 1
69154: ARRAY
69155: PPUSH
69156: LD_VAR 0 4
69160: PUSH
69161: LD_INT 2
69163: ARRAY
69164: PPUSH
69165: CALL_OW 297
69169: ST_TO_ADDR
// if tmpDist < dist then
69170: LD_VAR 0 6
69174: PUSH
69175: LD_VAR 0 5
69179: LESS
69180: IFFALSE 69202
// begin result := i ;
69182: LD_ADDR_VAR 0 3
69186: PUSH
69187: LD_VAR 0 4
69191: ST_TO_ADDR
// dist := tmpDist ;
69192: LD_ADDR_VAR 0 5
69196: PUSH
69197: LD_VAR 0 6
69201: ST_TO_ADDR
// end ; end ;
69202: GO 69134
69204: POP
69205: POP
// end ;
69206: LD_VAR 0 3
69210: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69211: LD_INT 0
69213: PPUSH
// uc_side := side ;
69214: LD_ADDR_OWVAR 20
69218: PUSH
69219: LD_VAR 0 1
69223: ST_TO_ADDR
// uc_nation := 3 ;
69224: LD_ADDR_OWVAR 21
69228: PUSH
69229: LD_INT 3
69231: ST_TO_ADDR
// vc_chassis := 25 ;
69232: LD_ADDR_OWVAR 37
69236: PUSH
69237: LD_INT 25
69239: ST_TO_ADDR
// vc_engine := engine_siberite ;
69240: LD_ADDR_OWVAR 39
69244: PUSH
69245: LD_INT 3
69247: ST_TO_ADDR
// vc_control := control_computer ;
69248: LD_ADDR_OWVAR 38
69252: PUSH
69253: LD_INT 3
69255: ST_TO_ADDR
// vc_weapon := 59 ;
69256: LD_ADDR_OWVAR 40
69260: PUSH
69261: LD_INT 59
69263: ST_TO_ADDR
// result := CreateVehicle ;
69264: LD_ADDR_VAR 0 5
69268: PUSH
69269: CALL_OW 45
69273: ST_TO_ADDR
// SetDir ( result , d ) ;
69274: LD_VAR 0 5
69278: PPUSH
69279: LD_VAR 0 4
69283: PPUSH
69284: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69288: LD_VAR 0 5
69292: PPUSH
69293: LD_VAR 0 2
69297: PPUSH
69298: LD_VAR 0 3
69302: PPUSH
69303: LD_INT 0
69305: PPUSH
69306: CALL_OW 48
// end ;
69310: LD_VAR 0 5
69314: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69315: LD_INT 0
69317: PPUSH
69318: PPUSH
69319: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69320: LD_ADDR_VAR 0 2
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: LD_INT 0
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69343: LD_VAR 0 1
69347: NOT
69348: IFTRUE 69381
69350: PUSH
69351: LD_VAR 0 1
69355: PPUSH
69356: CALL_OW 264
69360: PUSH
69361: LD_INT 12
69363: PUSH
69364: LD_INT 51
69366: PUSH
69367: LD_INT 32
69369: PUSH
69370: LD_INT 89
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: IN
69379: NOT
69380: OR
69381: IFFALSE 69385
// exit ;
69383: GO 69483
// for i := 1 to 3 do
69385: LD_ADDR_VAR 0 3
69389: PUSH
69390: DOUBLE
69391: LD_INT 1
69393: DEC
69394: ST_TO_ADDR
69395: LD_INT 3
69397: PUSH
69398: FOR_TO
69399: IFFALSE 69481
// begin tmp := GetCargo ( cargo , i ) ;
69401: LD_ADDR_VAR 0 4
69405: PUSH
69406: LD_VAR 0 1
69410: PPUSH
69411: LD_VAR 0 3
69415: PPUSH
69416: CALL_OW 289
69420: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69421: LD_ADDR_VAR 0 2
69425: PUSH
69426: LD_VAR 0 2
69430: PPUSH
69431: LD_VAR 0 3
69435: PPUSH
69436: LD_VAR 0 4
69440: PPUSH
69441: CALL_OW 1
69445: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69446: LD_ADDR_VAR 0 2
69450: PUSH
69451: LD_VAR 0 2
69455: PPUSH
69456: LD_INT 4
69458: PPUSH
69459: LD_VAR 0 2
69463: PUSH
69464: LD_INT 4
69466: ARRAY
69467: PUSH
69468: LD_VAR 0 4
69472: PLUS
69473: PPUSH
69474: CALL_OW 1
69478: ST_TO_ADDR
// end ;
69479: GO 69398
69481: POP
69482: POP
// end ;
69483: LD_VAR 0 2
69487: RET
// export function Length ( array ) ; begin
69488: LD_INT 0
69490: PPUSH
// result := array + 0 ;
69491: LD_ADDR_VAR 0 2
69495: PUSH
69496: LD_VAR 0 1
69500: PUSH
69501: LD_INT 0
69503: PLUS
69504: ST_TO_ADDR
// end ;
69505: LD_VAR 0 2
69509: RET
// export function PrepareArray ( array ) ; begin
69510: LD_INT 0
69512: PPUSH
// result := array diff 0 ;
69513: LD_ADDR_VAR 0 2
69517: PUSH
69518: LD_VAR 0 1
69522: PUSH
69523: LD_INT 0
69525: DIFF
69526: ST_TO_ADDR
// if not result [ 1 ] then
69527: LD_VAR 0 2
69531: PUSH
69532: LD_INT 1
69534: ARRAY
69535: NOT
69536: IFFALSE 69556
// result := Delete ( result , 1 ) ;
69538: LD_ADDR_VAR 0 2
69542: PUSH
69543: LD_VAR 0 2
69547: PPUSH
69548: LD_INT 1
69550: PPUSH
69551: CALL_OW 3
69555: ST_TO_ADDR
// end ;
69556: LD_VAR 0 2
69560: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69561: LD_INT 0
69563: PPUSH
69564: PPUSH
69565: PPUSH
69566: PPUSH
// sibRocketRange := 25 ;
69567: LD_ADDR_VAR 0 6
69571: PUSH
69572: LD_INT 25
69574: ST_TO_ADDR
// result := false ;
69575: LD_ADDR_VAR 0 4
69579: PUSH
69580: LD_INT 0
69582: ST_TO_ADDR
// for i := 0 to 5 do
69583: LD_ADDR_VAR 0 5
69587: PUSH
69588: DOUBLE
69589: LD_INT 0
69591: DEC
69592: ST_TO_ADDR
69593: LD_INT 5
69595: PUSH
69596: FOR_TO
69597: IFFALSE 69664
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69599: LD_VAR 0 1
69603: PPUSH
69604: LD_VAR 0 5
69608: PPUSH
69609: LD_VAR 0 6
69613: PPUSH
69614: CALL_OW 272
69618: PPUSH
69619: LD_VAR 0 2
69623: PPUSH
69624: LD_VAR 0 5
69628: PPUSH
69629: LD_VAR 0 6
69633: PPUSH
69634: CALL_OW 273
69638: PPUSH
69639: LD_VAR 0 3
69643: PPUSH
69644: CALL_OW 309
69648: IFFALSE 69662
// begin result := true ;
69650: LD_ADDR_VAR 0 4
69654: PUSH
69655: LD_INT 1
69657: ST_TO_ADDR
// exit ;
69658: POP
69659: POP
69660: GO 69666
// end ;
69662: GO 69596
69664: POP
69665: POP
// end ;
69666: LD_VAR 0 4
69670: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69671: LD_INT 0
69673: PPUSH
69674: PPUSH
69675: PPUSH
// if btype = b_depot then
69676: LD_VAR 0 2
69680: PUSH
69681: LD_INT 0
69683: EQUAL
69684: IFFALSE 69696
// begin result := true ;
69686: LD_ADDR_VAR 0 3
69690: PUSH
69691: LD_INT 1
69693: ST_TO_ADDR
// exit ;
69694: GO 69816
// end ; pom := GetBase ( depot ) ;
69696: LD_ADDR_VAR 0 4
69700: PUSH
69701: LD_VAR 0 1
69705: PPUSH
69706: CALL_OW 274
69710: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69711: LD_ADDR_VAR 0 5
69715: PUSH
69716: LD_VAR 0 2
69720: PPUSH
69721: LD_VAR 0 1
69725: PPUSH
69726: CALL_OW 248
69730: PPUSH
69731: CALL_OW 450
69735: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69736: LD_ADDR_VAR 0 3
69740: PUSH
69741: LD_VAR 0 4
69745: PPUSH
69746: LD_INT 1
69748: PPUSH
69749: CALL_OW 275
69753: PUSH
69754: LD_VAR 0 5
69758: PUSH
69759: LD_INT 1
69761: ARRAY
69762: GREATEREQUAL
69763: IFFALSE 69789
69765: PUSH
69766: LD_VAR 0 4
69770: PPUSH
69771: LD_INT 2
69773: PPUSH
69774: CALL_OW 275
69778: PUSH
69779: LD_VAR 0 5
69783: PUSH
69784: LD_INT 2
69786: ARRAY
69787: GREATEREQUAL
69788: AND
69789: IFFALSE 69815
69791: PUSH
69792: LD_VAR 0 4
69796: PPUSH
69797: LD_INT 3
69799: PPUSH
69800: CALL_OW 275
69804: PUSH
69805: LD_VAR 0 5
69809: PUSH
69810: LD_INT 3
69812: ARRAY
69813: GREATEREQUAL
69814: AND
69815: ST_TO_ADDR
// end ;
69816: LD_VAR 0 3
69820: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69821: LD_INT 0
69823: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69824: LD_VAR 0 1
69828: PPUSH
69829: LD_VAR 0 2
69833: PPUSH
69834: LD_INT 0
69836: PPUSH
69837: LD_INT 0
69839: PPUSH
69840: LD_INT 1
69842: PPUSH
69843: LD_INT 0
69845: PPUSH
69846: CALL_OW 587
// end ;
69850: LD_VAR 0 3
69854: RET
// export function CenterOnNow ( unit ) ; begin
69855: LD_INT 0
69857: PPUSH
// result := IsInUnit ( unit ) ;
69858: LD_ADDR_VAR 0 2
69862: PUSH
69863: LD_VAR 0 1
69867: PPUSH
69868: CALL_OW 310
69872: ST_TO_ADDR
// if not result then
69873: LD_VAR 0 2
69877: NOT
69878: IFFALSE 69890
// result := unit ;
69880: LD_ADDR_VAR 0 2
69884: PUSH
69885: LD_VAR 0 1
69889: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69890: LD_VAR 0 1
69894: PPUSH
69895: CALL_OW 87
// end ;
69899: LD_VAR 0 2
69903: RET
// export function ComMoveHex ( unit , hex ) ; begin
69904: LD_INT 0
69906: PPUSH
// if not hex then
69907: LD_VAR 0 2
69911: NOT
69912: IFFALSE 69916
// exit ;
69914: GO 69969
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69916: LD_VAR 0 2
69920: PUSH
69921: LD_INT 1
69923: ARRAY
69924: PPUSH
69925: LD_VAR 0 2
69929: PUSH
69930: LD_INT 2
69932: ARRAY
69933: PPUSH
69934: CALL_OW 428
69938: IFFALSE 69942
// exit ;
69940: GO 69969
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69942: LD_VAR 0 1
69946: PPUSH
69947: LD_VAR 0 2
69951: PUSH
69952: LD_INT 1
69954: ARRAY
69955: PPUSH
69956: LD_VAR 0 2
69960: PUSH
69961: LD_INT 2
69963: ARRAY
69964: PPUSH
69965: CALL_OW 111
// end ;
69969: LD_VAR 0 3
69973: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69974: LD_INT 0
69976: PPUSH
69977: PPUSH
69978: PPUSH
// if not unit or not enemy then
69979: LD_VAR 0 1
69983: NOT
69984: IFTRUE 69993
69986: PUSH
69987: LD_VAR 0 2
69991: NOT
69992: OR
69993: IFFALSE 69997
// exit ;
69995: GO 70123
// x := GetX ( enemy ) ;
69997: LD_ADDR_VAR 0 4
70001: PUSH
70002: LD_VAR 0 2
70006: PPUSH
70007: CALL_OW 250
70011: ST_TO_ADDR
// y := GetY ( enemy ) ;
70012: LD_ADDR_VAR 0 5
70016: PUSH
70017: LD_VAR 0 2
70021: PPUSH
70022: CALL_OW 251
70026: ST_TO_ADDR
// if ValidHex ( x , y ) then
70027: LD_VAR 0 4
70031: PPUSH
70032: LD_VAR 0 5
70036: PPUSH
70037: CALL_OW 488
70041: IFFALSE 70123
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70043: LD_VAR 0 2
70047: PPUSH
70048: CALL_OW 247
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: LD_INT 2
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: IN
70063: IFTRUE 70086
70065: PUSH
70066: LD_VAR 0 1
70070: PPUSH
70071: CALL_OW 255
70075: PPUSH
70076: LD_VAR 0 2
70080: PPUSH
70081: CALL_OW 292
70085: OR
70086: IFFALSE 70104
// ComAttackUnit ( unit , enemy ) else
70088: LD_VAR 0 1
70092: PPUSH
70093: LD_VAR 0 2
70097: PPUSH
70098: CALL_OW 115
70102: GO 70123
// ComAgressiveMove ( unit , x , y ) ;
70104: LD_VAR 0 1
70108: PPUSH
70109: LD_VAR 0 4
70113: PPUSH
70114: LD_VAR 0 5
70118: PPUSH
70119: CALL_OW 114
// end ;
70123: LD_VAR 0 3
70127: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70128: LD_INT 0
70130: PPUSH
70131: PPUSH
70132: PPUSH
// list := AreaToList ( area , 0 ) ;
70133: LD_ADDR_VAR 0 5
70137: PUSH
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_INT 0
70145: PPUSH
70146: CALL_OW 517
70150: ST_TO_ADDR
// if not list then
70151: LD_VAR 0 5
70155: NOT
70156: IFFALSE 70160
// exit ;
70158: GO 70290
// if all then
70160: LD_VAR 0 2
70164: IFFALSE 70252
// begin for i := 1 to list [ 1 ] do
70166: LD_ADDR_VAR 0 4
70170: PUSH
70171: DOUBLE
70172: LD_INT 1
70174: DEC
70175: ST_TO_ADDR
70176: LD_VAR 0 5
70180: PUSH
70181: LD_INT 1
70183: ARRAY
70184: PUSH
70185: FOR_TO
70186: IFFALSE 70248
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70188: LD_ADDR_VAR 0 3
70192: PUSH
70193: LD_VAR 0 3
70197: PPUSH
70198: LD_VAR 0 3
70202: PUSH
70203: LD_INT 1
70205: PLUS
70206: PPUSH
70207: LD_VAR 0 5
70211: PUSH
70212: LD_INT 1
70214: ARRAY
70215: PUSH
70216: LD_VAR 0 4
70220: ARRAY
70221: PUSH
70222: LD_VAR 0 5
70226: PUSH
70227: LD_INT 2
70229: ARRAY
70230: PUSH
70231: LD_VAR 0 4
70235: ARRAY
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PPUSH
70241: CALL_OW 1
70245: ST_TO_ADDR
70246: GO 70185
70248: POP
70249: POP
// exit ;
70250: GO 70290
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70252: LD_ADDR_VAR 0 3
70256: PUSH
70257: LD_VAR 0 5
70261: PUSH
70262: LD_INT 1
70264: ARRAY
70265: PUSH
70266: LD_INT 1
70268: ARRAY
70269: PUSH
70270: LD_VAR 0 5
70274: PUSH
70275: LD_INT 2
70277: ARRAY
70278: PUSH
70279: LD_INT 1
70281: ARRAY
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: ST_TO_ADDR
// end ;
70290: LD_VAR 0 3
70294: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70295: LD_INT 0
70297: PPUSH
70298: PPUSH
// list := AreaToList ( area , 0 ) ;
70299: LD_ADDR_VAR 0 4
70303: PUSH
70304: LD_VAR 0 1
70308: PPUSH
70309: LD_INT 0
70311: PPUSH
70312: CALL_OW 517
70316: ST_TO_ADDR
// if not list then
70317: LD_VAR 0 4
70321: NOT
70322: IFFALSE 70326
// exit ;
70324: GO 70367
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70326: LD_ADDR_VAR 0 3
70330: PUSH
70331: LD_VAR 0 4
70335: PUSH
70336: LD_INT 1
70338: ARRAY
70339: PUSH
70340: LD_INT 1
70342: ARRAY
70343: PUSH
70344: LD_VAR 0 4
70348: PUSH
70349: LD_INT 2
70351: ARRAY
70352: PUSH
70353: LD_INT 1
70355: ARRAY
70356: PUSH
70357: LD_VAR 0 2
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: LIST
70366: ST_TO_ADDR
// end ;
70367: LD_VAR 0 3
70371: RET
// export function First ( array ) ; begin
70372: LD_INT 0
70374: PPUSH
// if not array then
70375: LD_VAR 0 1
70379: NOT
70380: IFFALSE 70384
// exit ;
70382: GO 70398
// result := array [ 1 ] ;
70384: LD_ADDR_VAR 0 2
70388: PUSH
70389: LD_VAR 0 1
70393: PUSH
70394: LD_INT 1
70396: ARRAY
70397: ST_TO_ADDR
// end ;
70398: LD_VAR 0 2
70402: RET
// export function Last ( array ) ; begin
70403: LD_INT 0
70405: PPUSH
// if not array then
70406: LD_VAR 0 1
70410: NOT
70411: IFFALSE 70415
// exit ;
70413: GO 70431
// result := array [ array ] ;
70415: LD_ADDR_VAR 0 2
70419: PUSH
70420: LD_VAR 0 1
70424: PUSH
70425: LD_VAR 0 1
70429: ARRAY
70430: ST_TO_ADDR
// end ;
70431: LD_VAR 0 2
70435: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70436: LD_INT 0
70438: PPUSH
70439: PPUSH
// result := [ ] ;
70440: LD_ADDR_VAR 0 5
70444: PUSH
70445: EMPTY
70446: ST_TO_ADDR
// if not array then
70447: LD_VAR 0 1
70451: NOT
70452: IFFALSE 70456
// exit ;
70454: GO 70568
// for i := 1 to array do
70456: LD_ADDR_VAR 0 6
70460: PUSH
70461: DOUBLE
70462: LD_INT 1
70464: DEC
70465: ST_TO_ADDR
70466: LD_VAR 0 1
70470: PUSH
70471: FOR_TO
70472: IFFALSE 70566
// if array [ i ] [ index ] = value then
70474: LD_VAR 0 1
70478: PUSH
70479: LD_VAR 0 6
70483: ARRAY
70484: PUSH
70485: LD_VAR 0 2
70489: ARRAY
70490: PUSH
70491: LD_VAR 0 3
70495: EQUAL
70496: IFFALSE 70564
// begin if indexColumn then
70498: LD_VAR 0 4
70502: IFFALSE 70538
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70504: LD_ADDR_VAR 0 5
70508: PUSH
70509: LD_VAR 0 5
70513: PPUSH
70514: LD_VAR 0 1
70518: PUSH
70519: LD_VAR 0 6
70523: ARRAY
70524: PUSH
70525: LD_VAR 0 4
70529: ARRAY
70530: PPUSH
70531: CALL 65576 0 2
70535: ST_TO_ADDR
70536: GO 70564
// result := Join ( result , array [ i ] ) ;
70538: LD_ADDR_VAR 0 5
70542: PUSH
70543: LD_VAR 0 5
70547: PPUSH
70548: LD_VAR 0 1
70552: PUSH
70553: LD_VAR 0 6
70557: ARRAY
70558: PPUSH
70559: CALL 65576 0 2
70563: ST_TO_ADDR
// end ;
70564: GO 70471
70566: POP
70567: POP
// end ;
70568: LD_VAR 0 5
70572: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70573: LD_INT 0
70575: PPUSH
// if not vehicles or not parkingPoint then
70576: LD_VAR 0 1
70580: NOT
70581: IFTRUE 70590
70583: PUSH
70584: LD_VAR 0 2
70588: NOT
70589: OR
70590: IFFALSE 70594
// exit ;
70592: GO 70692
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70594: LD_ADDR_VAR 0 1
70598: PUSH
70599: LD_VAR 0 1
70603: PPUSH
70604: LD_INT 50
70606: PUSH
70607: EMPTY
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: LD_INT 92
70615: PUSH
70616: LD_VAR 0 2
70620: PUSH
70621: LD_INT 1
70623: ARRAY
70624: PUSH
70625: LD_VAR 0 2
70629: PUSH
70630: LD_INT 2
70632: ARRAY
70633: PUSH
70634: LD_INT 8
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PPUSH
70651: CALL_OW 72
70655: ST_TO_ADDR
// if not vehicles then
70656: LD_VAR 0 1
70660: NOT
70661: IFFALSE 70665
// exit ;
70663: GO 70692
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70665: LD_VAR 0 1
70669: PPUSH
70670: LD_VAR 0 2
70674: PUSH
70675: LD_INT 1
70677: ARRAY
70678: PPUSH
70679: LD_VAR 0 2
70683: PUSH
70684: LD_INT 2
70686: ARRAY
70687: PPUSH
70688: CALL_OW 111
// end ;
70692: LD_VAR 0 3
70696: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70697: LD_INT 0
70699: PPUSH
70700: PPUSH
70701: PPUSH
// if not side or not area then
70702: LD_VAR 0 1
70706: NOT
70707: IFTRUE 70716
70709: PUSH
70710: LD_VAR 0 2
70714: NOT
70715: OR
70716: IFFALSE 70720
// exit ;
70718: GO 70839
// tmp := AreaToList ( area , 0 ) ;
70720: LD_ADDR_VAR 0 5
70724: PUSH
70725: LD_VAR 0 2
70729: PPUSH
70730: LD_INT 0
70732: PPUSH
70733: CALL_OW 517
70737: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70738: LD_ADDR_VAR 0 4
70742: PUSH
70743: DOUBLE
70744: LD_INT 1
70746: DEC
70747: ST_TO_ADDR
70748: LD_VAR 0 5
70752: PUSH
70753: LD_INT 1
70755: ARRAY
70756: PUSH
70757: FOR_TO
70758: IFFALSE 70837
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70760: LD_VAR 0 5
70764: PUSH
70765: LD_INT 1
70767: ARRAY
70768: PUSH
70769: LD_VAR 0 4
70773: ARRAY
70774: PPUSH
70775: LD_VAR 0 5
70779: PUSH
70780: LD_INT 2
70782: ARRAY
70783: PUSH
70784: LD_VAR 0 4
70788: ARRAY
70789: PPUSH
70790: CALL_OW 351
70794: IFFALSE 70835
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70796: LD_VAR 0 5
70800: PUSH
70801: LD_INT 1
70803: ARRAY
70804: PUSH
70805: LD_VAR 0 4
70809: ARRAY
70810: PPUSH
70811: LD_VAR 0 5
70815: PUSH
70816: LD_INT 2
70818: ARRAY
70819: PUSH
70820: LD_VAR 0 4
70824: ARRAY
70825: PPUSH
70826: LD_VAR 0 1
70830: PPUSH
70831: CALL_OW 244
// end ;
70835: GO 70757
70837: POP
70838: POP
// end ;
70839: LD_VAR 0 3
70843: RET
// export function UniqueArray ( array ) ; var i ; begin
70844: LD_INT 0
70846: PPUSH
70847: PPUSH
// result := [ ] ;
70848: LD_ADDR_VAR 0 2
70852: PUSH
70853: EMPTY
70854: ST_TO_ADDR
// if not array then
70855: LD_VAR 0 1
70859: NOT
70860: IFFALSE 70864
// exit ;
70862: GO 70925
// for i := 1 to array do
70864: LD_ADDR_VAR 0 3
70868: PUSH
70869: DOUBLE
70870: LD_INT 1
70872: DEC
70873: ST_TO_ADDR
70874: LD_VAR 0 1
70878: PUSH
70879: FOR_TO
70880: IFFALSE 70923
// if not array [ i ] in result then
70882: LD_VAR 0 1
70886: PUSH
70887: LD_VAR 0 3
70891: ARRAY
70892: PUSH
70893: LD_VAR 0 2
70897: IN
70898: NOT
70899: IFFALSE 70921
// result := Join ( result , i ) ;
70901: LD_ADDR_VAR 0 2
70905: PUSH
70906: LD_VAR 0 2
70910: PPUSH
70911: LD_VAR 0 3
70915: PPUSH
70916: CALL 65576 0 2
70920: ST_TO_ADDR
70921: GO 70879
70923: POP
70924: POP
// end ; end_of_file
70925: LD_VAR 0 2
70929: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70930: LD_VAR 0 1
70934: PPUSH
70935: LD_VAR 0 2
70939: PPUSH
70940: LD_VAR 0 3
70944: PPUSH
70945: LD_VAR 0 4
70949: PPUSH
70950: LD_VAR 0 5
70954: PPUSH
70955: LD_VAR 0 6
70959: PPUSH
70960: CALL 5147 0 6
// end ;
70964: PPOPN 6
70966: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70967: LD_INT 0
70969: PPUSH
// begin if not units then
70970: LD_VAR 0 1
70974: NOT
70975: IFFALSE 70979
// exit ;
70977: GO 71013
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70979: LD_VAR 0 1
70983: PPUSH
70984: LD_VAR 0 2
70988: PPUSH
70989: LD_VAR 0 3
70993: PPUSH
70994: LD_VAR 0 4
70998: PPUSH
70999: LD_VAR 0 5
71003: PPUSH
71004: LD_VAR 0 6
71008: PPUSH
71009: CALL 27230 0 6
// end ;
71013: PPOPN 7
71015: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71016: CALL 5034 0 0
// end ;
71020: PPOPN 1
71022: END
