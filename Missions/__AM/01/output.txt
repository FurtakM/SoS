// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// every 0 0$1 do
4963: GO 4965
4965: DISABLE
// begin enable ;
4966: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4967: LD_STRING updateTimer(
4969: PUSH
4970: LD_OWVAR 1
4974: STR
4975: PUSH
4976: LD_STRING );
4978: STR
4979: PPUSH
4980: CALL_OW 559
// end ;
4984: END
// on MapStart ( p ) do begin if streamModeActive then
4985: LD_EXP 15
4989: IFFALSE 4998
// DefineStreamItems ( true ) ;
4991: LD_INT 1
4993: PPUSH
4994: CALL 6642 0 1
// end ;
4998: PPOPN 1
5000: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5001: LD_INT 0
5003: PPUSH
// if p2 = 100 then
5004: LD_VAR 0 2
5008: PUSH
5009: LD_INT 100
5011: EQUAL
5012: IFFALSE 6015
// begin if not StreamModeActive then
5014: LD_EXP 15
5018: NOT
5019: IFFALSE 5029
// StreamModeActive := true ;
5021: LD_ADDR_EXP 15
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// if p3 = 0 then
5029: LD_VAR 0 3
5033: PUSH
5034: LD_INT 0
5036: EQUAL
5037: IFFALSE 5043
// InitStreamMode ;
5039: CALL 6178 0 0
// if p3 = 1 then
5043: LD_VAR 0 3
5047: PUSH
5048: LD_INT 1
5050: EQUAL
5051: IFFALSE 5061
// sRocket := true ;
5053: LD_ADDR_EXP 20
5057: PUSH
5058: LD_INT 1
5060: ST_TO_ADDR
// if p3 = 2 then
5061: LD_VAR 0 3
5065: PUSH
5066: LD_INT 2
5068: EQUAL
5069: IFFALSE 5079
// sSpeed := true ;
5071: LD_ADDR_EXP 19
5075: PUSH
5076: LD_INT 1
5078: ST_TO_ADDR
// if p3 = 3 then
5079: LD_VAR 0 3
5083: PUSH
5084: LD_INT 3
5086: EQUAL
5087: IFFALSE 5097
// sEngine := true ;
5089: LD_ADDR_EXP 21
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// if p3 = 4 then
5097: LD_VAR 0 3
5101: PUSH
5102: LD_INT 4
5104: EQUAL
5105: IFFALSE 5115
// sSpec := true ;
5107: LD_ADDR_EXP 18
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// if p3 = 5 then
5115: LD_VAR 0 3
5119: PUSH
5120: LD_INT 5
5122: EQUAL
5123: IFFALSE 5133
// sLevel := true ;
5125: LD_ADDR_EXP 22
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// if p3 = 6 then
5133: LD_VAR 0 3
5137: PUSH
5138: LD_INT 6
5140: EQUAL
5141: IFFALSE 5151
// sArmoury := true ;
5143: LD_ADDR_EXP 23
5147: PUSH
5148: LD_INT 1
5150: ST_TO_ADDR
// if p3 = 7 then
5151: LD_VAR 0 3
5155: PUSH
5156: LD_INT 7
5158: EQUAL
5159: IFFALSE 5169
// sRadar := true ;
5161: LD_ADDR_EXP 24
5165: PUSH
5166: LD_INT 1
5168: ST_TO_ADDR
// if p3 = 8 then
5169: LD_VAR 0 3
5173: PUSH
5174: LD_INT 8
5176: EQUAL
5177: IFFALSE 5187
// sBunker := true ;
5179: LD_ADDR_EXP 25
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// if p3 = 9 then
5187: LD_VAR 0 3
5191: PUSH
5192: LD_INT 9
5194: EQUAL
5195: IFFALSE 5205
// sHack := true ;
5197: LD_ADDR_EXP 26
5201: PUSH
5202: LD_INT 1
5204: ST_TO_ADDR
// if p3 = 10 then
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 10
5212: EQUAL
5213: IFFALSE 5223
// sFire := true ;
5215: LD_ADDR_EXP 27
5219: PUSH
5220: LD_INT 1
5222: ST_TO_ADDR
// if p3 = 11 then
5223: LD_VAR 0 3
5227: PUSH
5228: LD_INT 11
5230: EQUAL
5231: IFFALSE 5241
// sRefresh := true ;
5233: LD_ADDR_EXP 28
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// if p3 = 12 then
5241: LD_VAR 0 3
5245: PUSH
5246: LD_INT 12
5248: EQUAL
5249: IFFALSE 5259
// sExp := true ;
5251: LD_ADDR_EXP 29
5255: PUSH
5256: LD_INT 1
5258: ST_TO_ADDR
// if p3 = 13 then
5259: LD_VAR 0 3
5263: PUSH
5264: LD_INT 13
5266: EQUAL
5267: IFFALSE 5277
// sDepot := true ;
5269: LD_ADDR_EXP 30
5273: PUSH
5274: LD_INT 1
5276: ST_TO_ADDR
// if p3 = 14 then
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 14
5284: EQUAL
5285: IFFALSE 5295
// sFlag := true ;
5287: LD_ADDR_EXP 31
5291: PUSH
5292: LD_INT 1
5294: ST_TO_ADDR
// if p3 = 15 then
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 15
5302: EQUAL
5303: IFFALSE 5313
// sKamikadze := true ;
5305: LD_ADDR_EXP 39
5309: PUSH
5310: LD_INT 1
5312: ST_TO_ADDR
// if p3 = 16 then
5313: LD_VAR 0 3
5317: PUSH
5318: LD_INT 16
5320: EQUAL
5321: IFFALSE 5331
// sTroll := true ;
5323: LD_ADDR_EXP 40
5327: PUSH
5328: LD_INT 1
5330: ST_TO_ADDR
// if p3 = 17 then
5331: LD_VAR 0 3
5335: PUSH
5336: LD_INT 17
5338: EQUAL
5339: IFFALSE 5349
// sSlow := true ;
5341: LD_ADDR_EXP 41
5345: PUSH
5346: LD_INT 1
5348: ST_TO_ADDR
// if p3 = 18 then
5349: LD_VAR 0 3
5353: PUSH
5354: LD_INT 18
5356: EQUAL
5357: IFFALSE 5367
// sLack := true ;
5359: LD_ADDR_EXP 42
5363: PUSH
5364: LD_INT 1
5366: ST_TO_ADDR
// if p3 = 19 then
5367: LD_VAR 0 3
5371: PUSH
5372: LD_INT 19
5374: EQUAL
5375: IFFALSE 5385
// sTank := true ;
5377: LD_ADDR_EXP 44
5381: PUSH
5382: LD_INT 1
5384: ST_TO_ADDR
// if p3 = 20 then
5385: LD_VAR 0 3
5389: PUSH
5390: LD_INT 20
5392: EQUAL
5393: IFFALSE 5403
// sRemote := true ;
5395: LD_ADDR_EXP 45
5399: PUSH
5400: LD_INT 1
5402: ST_TO_ADDR
// if p3 = 21 then
5403: LD_VAR 0 3
5407: PUSH
5408: LD_INT 21
5410: EQUAL
5411: IFFALSE 5421
// sPowell := true ;
5413: LD_ADDR_EXP 46
5417: PUSH
5418: LD_INT 1
5420: ST_TO_ADDR
// if p3 = 22 then
5421: LD_VAR 0 3
5425: PUSH
5426: LD_INT 22
5428: EQUAL
5429: IFFALSE 5439
// sTeleport := true ;
5431: LD_ADDR_EXP 49
5435: PUSH
5436: LD_INT 1
5438: ST_TO_ADDR
// if p3 = 23 then
5439: LD_VAR 0 3
5443: PUSH
5444: LD_INT 23
5446: EQUAL
5447: IFFALSE 5457
// sOilTower := true ;
5449: LD_ADDR_EXP 51
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// if p3 = 24 then
5457: LD_VAR 0 3
5461: PUSH
5462: LD_INT 24
5464: EQUAL
5465: IFFALSE 5475
// sShovel := true ;
5467: LD_ADDR_EXP 52
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// if p3 = 25 then
5475: LD_VAR 0 3
5479: PUSH
5480: LD_INT 25
5482: EQUAL
5483: IFFALSE 5493
// sSheik := true ;
5485: LD_ADDR_EXP 53
5489: PUSH
5490: LD_INT 1
5492: ST_TO_ADDR
// if p3 = 26 then
5493: LD_VAR 0 3
5497: PUSH
5498: LD_INT 26
5500: EQUAL
5501: IFFALSE 5511
// sEarthquake := true ;
5503: LD_ADDR_EXP 55
5507: PUSH
5508: LD_INT 1
5510: ST_TO_ADDR
// if p3 = 27 then
5511: LD_VAR 0 3
5515: PUSH
5516: LD_INT 27
5518: EQUAL
5519: IFFALSE 5529
// sAI := true ;
5521: LD_ADDR_EXP 56
5525: PUSH
5526: LD_INT 1
5528: ST_TO_ADDR
// if p3 = 28 then
5529: LD_VAR 0 3
5533: PUSH
5534: LD_INT 28
5536: EQUAL
5537: IFFALSE 5547
// sCargo := true ;
5539: LD_ADDR_EXP 59
5543: PUSH
5544: LD_INT 1
5546: ST_TO_ADDR
// if p3 = 29 then
5547: LD_VAR 0 3
5551: PUSH
5552: LD_INT 29
5554: EQUAL
5555: IFFALSE 5565
// sDLaser := true ;
5557: LD_ADDR_EXP 60
5561: PUSH
5562: LD_INT 1
5564: ST_TO_ADDR
// if p3 = 30 then
5565: LD_VAR 0 3
5569: PUSH
5570: LD_INT 30
5572: EQUAL
5573: IFFALSE 5583
// sExchange := true ;
5575: LD_ADDR_EXP 61
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// if p3 = 31 then
5583: LD_VAR 0 3
5587: PUSH
5588: LD_INT 31
5590: EQUAL
5591: IFFALSE 5601
// sFac := true ;
5593: LD_ADDR_EXP 62
5597: PUSH
5598: LD_INT 1
5600: ST_TO_ADDR
// if p3 = 32 then
5601: LD_VAR 0 3
5605: PUSH
5606: LD_INT 32
5608: EQUAL
5609: IFFALSE 5619
// sPower := true ;
5611: LD_ADDR_EXP 63
5615: PUSH
5616: LD_INT 1
5618: ST_TO_ADDR
// if p3 = 33 then
5619: LD_VAR 0 3
5623: PUSH
5624: LD_INT 33
5626: EQUAL
5627: IFFALSE 5637
// sRandom := true ;
5629: LD_ADDR_EXP 64
5633: PUSH
5634: LD_INT 1
5636: ST_TO_ADDR
// if p3 = 34 then
5637: LD_VAR 0 3
5641: PUSH
5642: LD_INT 34
5644: EQUAL
5645: IFFALSE 5655
// sShield := true ;
5647: LD_ADDR_EXP 65
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// if p3 = 35 then
5655: LD_VAR 0 3
5659: PUSH
5660: LD_INT 35
5662: EQUAL
5663: IFFALSE 5673
// sTime := true ;
5665: LD_ADDR_EXP 66
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// if p3 = 36 then
5673: LD_VAR 0 3
5677: PUSH
5678: LD_INT 36
5680: EQUAL
5681: IFFALSE 5691
// sTools := true ;
5683: LD_ADDR_EXP 67
5687: PUSH
5688: LD_INT 1
5690: ST_TO_ADDR
// if p3 = 101 then
5691: LD_VAR 0 3
5695: PUSH
5696: LD_INT 101
5698: EQUAL
5699: IFFALSE 5709
// sSold := true ;
5701: LD_ADDR_EXP 32
5705: PUSH
5706: LD_INT 1
5708: ST_TO_ADDR
// if p3 = 102 then
5709: LD_VAR 0 3
5713: PUSH
5714: LD_INT 102
5716: EQUAL
5717: IFFALSE 5727
// sDiff := true ;
5719: LD_ADDR_EXP 33
5723: PUSH
5724: LD_INT 1
5726: ST_TO_ADDR
// if p3 = 103 then
5727: LD_VAR 0 3
5731: PUSH
5732: LD_INT 103
5734: EQUAL
5735: IFFALSE 5745
// sFog := true ;
5737: LD_ADDR_EXP 36
5741: PUSH
5742: LD_INT 1
5744: ST_TO_ADDR
// if p3 = 104 then
5745: LD_VAR 0 3
5749: PUSH
5750: LD_INT 104
5752: EQUAL
5753: IFFALSE 5763
// sReset := true ;
5755: LD_ADDR_EXP 37
5759: PUSH
5760: LD_INT 1
5762: ST_TO_ADDR
// if p3 = 105 then
5763: LD_VAR 0 3
5767: PUSH
5768: LD_INT 105
5770: EQUAL
5771: IFFALSE 5781
// sSun := true ;
5773: LD_ADDR_EXP 38
5777: PUSH
5778: LD_INT 1
5780: ST_TO_ADDR
// if p3 = 106 then
5781: LD_VAR 0 3
5785: PUSH
5786: LD_INT 106
5788: EQUAL
5789: IFFALSE 5799
// sTiger := true ;
5791: LD_ADDR_EXP 34
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// if p3 = 107 then
5799: LD_VAR 0 3
5803: PUSH
5804: LD_INT 107
5806: EQUAL
5807: IFFALSE 5817
// sBomb := true ;
5809: LD_ADDR_EXP 35
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// if p3 = 108 then
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 108
5824: EQUAL
5825: IFFALSE 5835
// sWound := true ;
5827: LD_ADDR_EXP 43
5831: PUSH
5832: LD_INT 1
5834: ST_TO_ADDR
// if p3 = 109 then
5835: LD_VAR 0 3
5839: PUSH
5840: LD_INT 109
5842: EQUAL
5843: IFFALSE 5853
// sBetray := true ;
5845: LD_ADDR_EXP 47
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// if p3 = 110 then
5853: LD_VAR 0 3
5857: PUSH
5858: LD_INT 110
5860: EQUAL
5861: IFFALSE 5871
// sContamin := true ;
5863: LD_ADDR_EXP 48
5867: PUSH
5868: LD_INT 1
5870: ST_TO_ADDR
// if p3 = 111 then
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 111
5878: EQUAL
5879: IFFALSE 5889
// sOil := true ;
5881: LD_ADDR_EXP 50
5885: PUSH
5886: LD_INT 1
5888: ST_TO_ADDR
// if p3 = 112 then
5889: LD_VAR 0 3
5893: PUSH
5894: LD_INT 112
5896: EQUAL
5897: IFFALSE 5907
// sStu := true ;
5899: LD_ADDR_EXP 54
5903: PUSH
5904: LD_INT 1
5906: ST_TO_ADDR
// if p3 = 113 then
5907: LD_VAR 0 3
5911: PUSH
5912: LD_INT 113
5914: EQUAL
5915: IFFALSE 5925
// sBazooka := true ;
5917: LD_ADDR_EXP 57
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// if p3 = 114 then
5925: LD_VAR 0 3
5929: PUSH
5930: LD_INT 114
5932: EQUAL
5933: IFFALSE 5943
// sMortar := true ;
5935: LD_ADDR_EXP 58
5939: PUSH
5940: LD_INT 1
5942: ST_TO_ADDR
// if p3 = 115 then
5943: LD_VAR 0 3
5947: PUSH
5948: LD_INT 115
5950: EQUAL
5951: IFFALSE 5961
// sRanger := true ;
5953: LD_ADDR_EXP 68
5957: PUSH
5958: LD_INT 1
5960: ST_TO_ADDR
// if p3 = 116 then
5961: LD_VAR 0 3
5965: PUSH
5966: LD_INT 116
5968: EQUAL
5969: IFFALSE 5979
// sComputer := true ;
5971: LD_ADDR_EXP 69
5975: PUSH
5976: LD_INT 1
5978: ST_TO_ADDR
// if p3 = 117 then
5979: LD_VAR 0 3
5983: PUSH
5984: LD_INT 117
5986: EQUAL
5987: IFFALSE 5997
// s30 := true ;
5989: LD_ADDR_EXP 70
5993: PUSH
5994: LD_INT 1
5996: ST_TO_ADDR
// if p3 = 118 then
5997: LD_VAR 0 3
6001: PUSH
6002: LD_INT 118
6004: EQUAL
6005: IFFALSE 6015
// s60 := true ;
6007: LD_ADDR_EXP 71
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// end ; if p2 = 101 then
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 101
6022: EQUAL
6023: IFFALSE 6151
// begin case p3 of 1 :
6025: LD_VAR 0 3
6029: PUSH
6030: LD_INT 1
6032: DOUBLE
6033: EQUAL
6034: IFTRUE 6038
6036: GO 6045
6038: POP
// hHackUnlimitedResources ; 2 :
6039: CALL 18249 0 0
6043: GO 6151
6045: LD_INT 2
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6060
6053: POP
// hHackSetLevel10 ; 3 :
6054: CALL 18382 0 0
6058: GO 6151
6060: LD_INT 3
6062: DOUBLE
6063: EQUAL
6064: IFTRUE 6068
6066: GO 6075
6068: POP
// hHackSetLevel10YourUnits ; 4 :
6069: CALL 18467 0 0
6073: GO 6151
6075: LD_INT 4
6077: DOUBLE
6078: EQUAL
6079: IFTRUE 6083
6081: GO 6090
6083: POP
// hHackInvincible ; 5 :
6084: CALL 18915 0 0
6088: GO 6151
6090: LD_INT 5
6092: DOUBLE
6093: EQUAL
6094: IFTRUE 6098
6096: GO 6105
6098: POP
// hHackInvisible ; 6 :
6099: CALL 19026 0 0
6103: GO 6151
6105: LD_INT 6
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6120
6113: POP
// hHackChangeYourSide ; 7 :
6114: CALL 19083 0 0
6118: GO 6151
6120: LD_INT 7
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6128
6126: GO 6135
6128: POP
// hHackChangeUnitSide ; 8 :
6129: CALL 19125 0 0
6133: GO 6151
6135: LD_INT 8
6137: DOUBLE
6138: EQUAL
6139: IFTRUE 6143
6141: GO 6150
6143: POP
// hHackFog ; end ;
6144: CALL 19226 0 0
6148: GO 6151
6150: POP
// end ; end ;
6151: LD_VAR 0 7
6155: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6156: GO 6158
6158: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6159: LD_STRING initStreamRollete();
6161: PPUSH
6162: CALL_OW 559
// InitStreamMode ;
6166: CALL 6178 0 0
// DefineStreamItems ( false ) ;
6170: LD_INT 0
6172: PPUSH
6173: CALL 6642 0 1
// end ;
6177: END
// function InitStreamMode ; begin
6178: LD_INT 0
6180: PPUSH
// streamModeActive := false ;
6181: LD_ADDR_EXP 15
6185: PUSH
6186: LD_INT 0
6188: ST_TO_ADDR
// normalCounter := 36 ;
6189: LD_ADDR_EXP 16
6193: PUSH
6194: LD_INT 36
6196: ST_TO_ADDR
// hardcoreCounter := 18 ;
6197: LD_ADDR_EXP 17
6201: PUSH
6202: LD_INT 18
6204: ST_TO_ADDR
// sRocket := false ;
6205: LD_ADDR_EXP 20
6209: PUSH
6210: LD_INT 0
6212: ST_TO_ADDR
// sSpeed := false ;
6213: LD_ADDR_EXP 19
6217: PUSH
6218: LD_INT 0
6220: ST_TO_ADDR
// sEngine := false ;
6221: LD_ADDR_EXP 21
6225: PUSH
6226: LD_INT 0
6228: ST_TO_ADDR
// sSpec := false ;
6229: LD_ADDR_EXP 18
6233: PUSH
6234: LD_INT 0
6236: ST_TO_ADDR
// sLevel := false ;
6237: LD_ADDR_EXP 22
6241: PUSH
6242: LD_INT 0
6244: ST_TO_ADDR
// sArmoury := false ;
6245: LD_ADDR_EXP 23
6249: PUSH
6250: LD_INT 0
6252: ST_TO_ADDR
// sRadar := false ;
6253: LD_ADDR_EXP 24
6257: PUSH
6258: LD_INT 0
6260: ST_TO_ADDR
// sBunker := false ;
6261: LD_ADDR_EXP 25
6265: PUSH
6266: LD_INT 0
6268: ST_TO_ADDR
// sHack := false ;
6269: LD_ADDR_EXP 26
6273: PUSH
6274: LD_INT 0
6276: ST_TO_ADDR
// sFire := false ;
6277: LD_ADDR_EXP 27
6281: PUSH
6282: LD_INT 0
6284: ST_TO_ADDR
// sRefresh := false ;
6285: LD_ADDR_EXP 28
6289: PUSH
6290: LD_INT 0
6292: ST_TO_ADDR
// sExp := false ;
6293: LD_ADDR_EXP 29
6297: PUSH
6298: LD_INT 0
6300: ST_TO_ADDR
// sDepot := false ;
6301: LD_ADDR_EXP 30
6305: PUSH
6306: LD_INT 0
6308: ST_TO_ADDR
// sFlag := false ;
6309: LD_ADDR_EXP 31
6313: PUSH
6314: LD_INT 0
6316: ST_TO_ADDR
// sKamikadze := false ;
6317: LD_ADDR_EXP 39
6321: PUSH
6322: LD_INT 0
6324: ST_TO_ADDR
// sTroll := false ;
6325: LD_ADDR_EXP 40
6329: PUSH
6330: LD_INT 0
6332: ST_TO_ADDR
// sSlow := false ;
6333: LD_ADDR_EXP 41
6337: PUSH
6338: LD_INT 0
6340: ST_TO_ADDR
// sLack := false ;
6341: LD_ADDR_EXP 42
6345: PUSH
6346: LD_INT 0
6348: ST_TO_ADDR
// sTank := false ;
6349: LD_ADDR_EXP 44
6353: PUSH
6354: LD_INT 0
6356: ST_TO_ADDR
// sRemote := false ;
6357: LD_ADDR_EXP 45
6361: PUSH
6362: LD_INT 0
6364: ST_TO_ADDR
// sPowell := false ;
6365: LD_ADDR_EXP 46
6369: PUSH
6370: LD_INT 0
6372: ST_TO_ADDR
// sTeleport := false ;
6373: LD_ADDR_EXP 49
6377: PUSH
6378: LD_INT 0
6380: ST_TO_ADDR
// sOilTower := false ;
6381: LD_ADDR_EXP 51
6385: PUSH
6386: LD_INT 0
6388: ST_TO_ADDR
// sShovel := false ;
6389: LD_ADDR_EXP 52
6393: PUSH
6394: LD_INT 0
6396: ST_TO_ADDR
// sSheik := false ;
6397: LD_ADDR_EXP 53
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// sEarthquake := false ;
6405: LD_ADDR_EXP 55
6409: PUSH
6410: LD_INT 0
6412: ST_TO_ADDR
// sAI := false ;
6413: LD_ADDR_EXP 56
6417: PUSH
6418: LD_INT 0
6420: ST_TO_ADDR
// sCargo := false ;
6421: LD_ADDR_EXP 59
6425: PUSH
6426: LD_INT 0
6428: ST_TO_ADDR
// sDLaser := false ;
6429: LD_ADDR_EXP 60
6433: PUSH
6434: LD_INT 0
6436: ST_TO_ADDR
// sExchange := false ;
6437: LD_ADDR_EXP 61
6441: PUSH
6442: LD_INT 0
6444: ST_TO_ADDR
// sFac := false ;
6445: LD_ADDR_EXP 62
6449: PUSH
6450: LD_INT 0
6452: ST_TO_ADDR
// sPower := false ;
6453: LD_ADDR_EXP 63
6457: PUSH
6458: LD_INT 0
6460: ST_TO_ADDR
// sRandom := false ;
6461: LD_ADDR_EXP 64
6465: PUSH
6466: LD_INT 0
6468: ST_TO_ADDR
// sShield := false ;
6469: LD_ADDR_EXP 65
6473: PUSH
6474: LD_INT 0
6476: ST_TO_ADDR
// sTime := false ;
6477: LD_ADDR_EXP 66
6481: PUSH
6482: LD_INT 0
6484: ST_TO_ADDR
// sTools := false ;
6485: LD_ADDR_EXP 67
6489: PUSH
6490: LD_INT 0
6492: ST_TO_ADDR
// sSold := false ;
6493: LD_ADDR_EXP 32
6497: PUSH
6498: LD_INT 0
6500: ST_TO_ADDR
// sDiff := false ;
6501: LD_ADDR_EXP 33
6505: PUSH
6506: LD_INT 0
6508: ST_TO_ADDR
// sFog := false ;
6509: LD_ADDR_EXP 36
6513: PUSH
6514: LD_INT 0
6516: ST_TO_ADDR
// sReset := false ;
6517: LD_ADDR_EXP 37
6521: PUSH
6522: LD_INT 0
6524: ST_TO_ADDR
// sSun := false ;
6525: LD_ADDR_EXP 38
6529: PUSH
6530: LD_INT 0
6532: ST_TO_ADDR
// sTiger := false ;
6533: LD_ADDR_EXP 34
6537: PUSH
6538: LD_INT 0
6540: ST_TO_ADDR
// sBomb := false ;
6541: LD_ADDR_EXP 35
6545: PUSH
6546: LD_INT 0
6548: ST_TO_ADDR
// sWound := false ;
6549: LD_ADDR_EXP 43
6553: PUSH
6554: LD_INT 0
6556: ST_TO_ADDR
// sBetray := false ;
6557: LD_ADDR_EXP 47
6561: PUSH
6562: LD_INT 0
6564: ST_TO_ADDR
// sContamin := false ;
6565: LD_ADDR_EXP 48
6569: PUSH
6570: LD_INT 0
6572: ST_TO_ADDR
// sOil := false ;
6573: LD_ADDR_EXP 50
6577: PUSH
6578: LD_INT 0
6580: ST_TO_ADDR
// sStu := false ;
6581: LD_ADDR_EXP 54
6585: PUSH
6586: LD_INT 0
6588: ST_TO_ADDR
// sBazooka := false ;
6589: LD_ADDR_EXP 57
6593: PUSH
6594: LD_INT 0
6596: ST_TO_ADDR
// sMortar := false ;
6597: LD_ADDR_EXP 58
6601: PUSH
6602: LD_INT 0
6604: ST_TO_ADDR
// sRanger := false ;
6605: LD_ADDR_EXP 68
6609: PUSH
6610: LD_INT 0
6612: ST_TO_ADDR
// sComputer := false ;
6613: LD_ADDR_EXP 69
6617: PUSH
6618: LD_INT 0
6620: ST_TO_ADDR
// s30 := false ;
6621: LD_ADDR_EXP 70
6625: PUSH
6626: LD_INT 0
6628: ST_TO_ADDR
// s60 := false ;
6629: LD_ADDR_EXP 71
6633: PUSH
6634: LD_INT 0
6636: ST_TO_ADDR
// end ;
6637: LD_VAR 0 1
6641: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6642: LD_INT 0
6644: PPUSH
6645: PPUSH
6646: PPUSH
6647: PPUSH
6648: PPUSH
6649: PPUSH
6650: PPUSH
// result := [ ] ;
6651: LD_ADDR_VAR 0 2
6655: PUSH
6656: EMPTY
6657: ST_TO_ADDR
// if campaign_id = 1 then
6658: LD_OWVAR 69
6662: PUSH
6663: LD_INT 1
6665: EQUAL
6666: IFFALSE 9832
// begin case mission_number of 1 :
6668: LD_OWVAR 70
6672: PUSH
6673: LD_INT 1
6675: DOUBLE
6676: EQUAL
6677: IFTRUE 6681
6679: GO 6757
6681: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6682: LD_ADDR_VAR 0 2
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: LD_INT 4
6692: PUSH
6693: LD_INT 11
6695: PUSH
6696: LD_INT 12
6698: PUSH
6699: LD_INT 15
6701: PUSH
6702: LD_INT 16
6704: PUSH
6705: LD_INT 22
6707: PUSH
6708: LD_INT 23
6710: PUSH
6711: LD_INT 26
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 101
6727: PUSH
6728: LD_INT 102
6730: PUSH
6731: LD_INT 106
6733: PUSH
6734: LD_INT 116
6736: PUSH
6737: LD_INT 117
6739: PUSH
6740: LD_INT 118
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 9830
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6849
6765: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 4
6776: PUSH
6777: LD_INT 11
6779: PUSH
6780: LD_INT 12
6782: PUSH
6783: LD_INT 15
6785: PUSH
6786: LD_INT 16
6788: PUSH
6789: LD_INT 22
6791: PUSH
6792: LD_INT 23
6794: PUSH
6795: LD_INT 26
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 101
6811: PUSH
6812: LD_INT 102
6814: PUSH
6815: LD_INT 105
6817: PUSH
6818: LD_INT 106
6820: PUSH
6821: LD_INT 108
6823: PUSH
6824: LD_INT 116
6826: PUSH
6827: LD_INT 117
6829: PUSH
6830: LD_INT 118
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: ST_TO_ADDR
6847: GO 9830
6849: LD_INT 3
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6945
6857: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6858: LD_ADDR_VAR 0 2
6862: PUSH
6863: LD_INT 2
6865: PUSH
6866: LD_INT 4
6868: PUSH
6869: LD_INT 5
6871: PUSH
6872: LD_INT 11
6874: PUSH
6875: LD_INT 12
6877: PUSH
6878: LD_INT 15
6880: PUSH
6881: LD_INT 16
6883: PUSH
6884: LD_INT 22
6886: PUSH
6887: LD_INT 26
6889: PUSH
6890: LD_INT 36
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 101
6907: PUSH
6908: LD_INT 102
6910: PUSH
6911: LD_INT 105
6913: PUSH
6914: LD_INT 106
6916: PUSH
6917: LD_INT 108
6919: PUSH
6920: LD_INT 116
6922: PUSH
6923: LD_INT 117
6925: PUSH
6926: LD_INT 118
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: ST_TO_ADDR
6943: GO 9830
6945: LD_INT 4
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 7049
6953: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6954: LD_ADDR_VAR 0 2
6958: PUSH
6959: LD_INT 2
6961: PUSH
6962: LD_INT 4
6964: PUSH
6965: LD_INT 5
6967: PUSH
6968: LD_INT 8
6970: PUSH
6971: LD_INT 11
6973: PUSH
6974: LD_INT 12
6976: PUSH
6977: LD_INT 15
6979: PUSH
6980: LD_INT 16
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 23
6988: PUSH
6989: LD_INT 26
6991: PUSH
6992: LD_INT 36
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 101
7011: PUSH
7012: LD_INT 102
7014: PUSH
7015: LD_INT 105
7017: PUSH
7018: LD_INT 106
7020: PUSH
7021: LD_INT 108
7023: PUSH
7024: LD_INT 116
7026: PUSH
7027: LD_INT 117
7029: PUSH
7030: LD_INT 118
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
7047: GO 9830
7049: LD_INT 5
7051: DOUBLE
7052: EQUAL
7053: IFTRUE 7057
7055: GO 7169
7057: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7058: LD_ADDR_VAR 0 2
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 4
7068: PUSH
7069: LD_INT 5
7071: PUSH
7072: LD_INT 6
7074: PUSH
7075: LD_INT 8
7077: PUSH
7078: LD_INT 11
7080: PUSH
7081: LD_INT 12
7083: PUSH
7084: LD_INT 15
7086: PUSH
7087: LD_INT 16
7089: PUSH
7090: LD_INT 22
7092: PUSH
7093: LD_INT 23
7095: PUSH
7096: LD_INT 25
7098: PUSH
7099: LD_INT 26
7101: PUSH
7102: LD_INT 36
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 101
7123: PUSH
7124: LD_INT 102
7126: PUSH
7127: LD_INT 105
7129: PUSH
7130: LD_INT 106
7132: PUSH
7133: LD_INT 108
7135: PUSH
7136: LD_INT 109
7138: PUSH
7139: LD_INT 112
7141: PUSH
7142: LD_INT 116
7144: PUSH
7145: LD_INT 117
7147: PUSH
7148: LD_INT 118
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: ST_TO_ADDR
7167: GO 9830
7169: LD_INT 6
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7309
7177: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 2
7185: PUSH
7186: LD_INT 4
7188: PUSH
7189: LD_INT 5
7191: PUSH
7192: LD_INT 6
7194: PUSH
7195: LD_INT 8
7197: PUSH
7198: LD_INT 11
7200: PUSH
7201: LD_INT 12
7203: PUSH
7204: LD_INT 15
7206: PUSH
7207: LD_INT 16
7209: PUSH
7210: LD_INT 20
7212: PUSH
7213: LD_INT 21
7215: PUSH
7216: LD_INT 22
7218: PUSH
7219: LD_INT 23
7221: PUSH
7222: LD_INT 25
7224: PUSH
7225: LD_INT 26
7227: PUSH
7228: LD_INT 30
7230: PUSH
7231: LD_INT 31
7233: PUSH
7234: LD_INT 32
7236: PUSH
7237: LD_INT 36
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 101
7263: PUSH
7264: LD_INT 102
7266: PUSH
7267: LD_INT 105
7269: PUSH
7270: LD_INT 106
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 109
7278: PUSH
7279: LD_INT 112
7281: PUSH
7282: LD_INT 116
7284: PUSH
7285: LD_INT 117
7287: PUSH
7288: LD_INT 118
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: ST_TO_ADDR
7307: GO 9830
7309: LD_INT 7
7311: DOUBLE
7312: EQUAL
7313: IFTRUE 7317
7315: GO 7429
7317: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7318: LD_ADDR_VAR 0 2
7322: PUSH
7323: LD_INT 2
7325: PUSH
7326: LD_INT 4
7328: PUSH
7329: LD_INT 5
7331: PUSH
7332: LD_INT 7
7334: PUSH
7335: LD_INT 11
7337: PUSH
7338: LD_INT 12
7340: PUSH
7341: LD_INT 15
7343: PUSH
7344: LD_INT 16
7346: PUSH
7347: LD_INT 20
7349: PUSH
7350: LD_INT 21
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_INT 23
7358: PUSH
7359: LD_INT 25
7361: PUSH
7362: LD_INT 26
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 101
7383: PUSH
7384: LD_INT 102
7386: PUSH
7387: LD_INT 103
7389: PUSH
7390: LD_INT 105
7392: PUSH
7393: LD_INT 106
7395: PUSH
7396: LD_INT 108
7398: PUSH
7399: LD_INT 112
7401: PUSH
7402: LD_INT 116
7404: PUSH
7405: LD_INT 117
7407: PUSH
7408: LD_INT 118
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: ST_TO_ADDR
7427: GO 9830
7429: LD_INT 8
7431: DOUBLE
7432: EQUAL
7433: IFTRUE 7437
7435: GO 7577
7437: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7438: LD_ADDR_VAR 0 2
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 4
7448: PUSH
7449: LD_INT 5
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: LD_INT 7
7457: PUSH
7458: LD_INT 8
7460: PUSH
7461: LD_INT 11
7463: PUSH
7464: LD_INT 12
7466: PUSH
7467: LD_INT 15
7469: PUSH
7470: LD_INT 16
7472: PUSH
7473: LD_INT 20
7475: PUSH
7476: LD_INT 21
7478: PUSH
7479: LD_INT 22
7481: PUSH
7482: LD_INT 23
7484: PUSH
7485: LD_INT 25
7487: PUSH
7488: LD_INT 26
7490: PUSH
7491: LD_INT 30
7493: PUSH
7494: LD_INT 31
7496: PUSH
7497: LD_INT 32
7499: PUSH
7500: LD_INT 36
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 101
7527: PUSH
7528: LD_INT 102
7530: PUSH
7531: LD_INT 103
7533: PUSH
7534: LD_INT 105
7536: PUSH
7537: LD_INT 106
7539: PUSH
7540: LD_INT 108
7542: PUSH
7543: LD_INT 109
7545: PUSH
7546: LD_INT 112
7548: PUSH
7549: LD_INT 116
7551: PUSH
7552: LD_INT 117
7554: PUSH
7555: LD_INT 118
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
7575: GO 9830
7577: LD_INT 9
7579: DOUBLE
7580: EQUAL
7581: IFTRUE 7585
7583: GO 7733
7585: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7586: LD_ADDR_VAR 0 2
7590: PUSH
7591: LD_INT 2
7593: PUSH
7594: LD_INT 4
7596: PUSH
7597: LD_INT 5
7599: PUSH
7600: LD_INT 6
7602: PUSH
7603: LD_INT 7
7605: PUSH
7606: LD_INT 8
7608: PUSH
7609: LD_INT 11
7611: PUSH
7612: LD_INT 12
7614: PUSH
7615: LD_INT 15
7617: PUSH
7618: LD_INT 16
7620: PUSH
7621: LD_INT 20
7623: PUSH
7624: LD_INT 21
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 23
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 28
7641: PUSH
7642: LD_INT 30
7644: PUSH
7645: LD_INT 31
7647: PUSH
7648: LD_INT 32
7650: PUSH
7651: LD_INT 36
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 101
7679: PUSH
7680: LD_INT 102
7682: PUSH
7683: LD_INT 103
7685: PUSH
7686: LD_INT 105
7688: PUSH
7689: LD_INT 106
7691: PUSH
7692: LD_INT 108
7694: PUSH
7695: LD_INT 109
7697: PUSH
7698: LD_INT 112
7700: PUSH
7701: LD_INT 114
7703: PUSH
7704: LD_INT 116
7706: PUSH
7707: LD_INT 117
7709: PUSH
7710: LD_INT 118
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: ST_TO_ADDR
7731: GO 9830
7733: LD_INT 10
7735: DOUBLE
7736: EQUAL
7737: IFTRUE 7741
7739: GO 7937
7741: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7742: LD_ADDR_VAR 0 2
7746: PUSH
7747: LD_INT 2
7749: PUSH
7750: LD_INT 4
7752: PUSH
7753: LD_INT 5
7755: PUSH
7756: LD_INT 6
7758: PUSH
7759: LD_INT 7
7761: PUSH
7762: LD_INT 8
7764: PUSH
7765: LD_INT 9
7767: PUSH
7768: LD_INT 10
7770: PUSH
7771: LD_INT 11
7773: PUSH
7774: LD_INT 12
7776: PUSH
7777: LD_INT 13
7779: PUSH
7780: LD_INT 14
7782: PUSH
7783: LD_INT 15
7785: PUSH
7786: LD_INT 16
7788: PUSH
7789: LD_INT 17
7791: PUSH
7792: LD_INT 18
7794: PUSH
7795: LD_INT 19
7797: PUSH
7798: LD_INT 20
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 22
7806: PUSH
7807: LD_INT 23
7809: PUSH
7810: LD_INT 24
7812: PUSH
7813: LD_INT 25
7815: PUSH
7816: LD_INT 26
7818: PUSH
7819: LD_INT 28
7821: PUSH
7822: LD_INT 30
7824: PUSH
7825: LD_INT 31
7827: PUSH
7828: LD_INT 32
7830: PUSH
7831: LD_INT 36
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 101
7867: PUSH
7868: LD_INT 102
7870: PUSH
7871: LD_INT 103
7873: PUSH
7874: LD_INT 104
7876: PUSH
7877: LD_INT 105
7879: PUSH
7880: LD_INT 106
7882: PUSH
7883: LD_INT 107
7885: PUSH
7886: LD_INT 108
7888: PUSH
7889: LD_INT 109
7891: PUSH
7892: LD_INT 110
7894: PUSH
7895: LD_INT 111
7897: PUSH
7898: LD_INT 112
7900: PUSH
7901: LD_INT 114
7903: PUSH
7904: LD_INT 116
7906: PUSH
7907: LD_INT 117
7909: PUSH
7910: LD_INT 118
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: ST_TO_ADDR
7935: GO 9830
7937: LD_INT 11
7939: DOUBLE
7940: EQUAL
7941: IFTRUE 7945
7943: GO 8149
7945: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7946: LD_ADDR_VAR 0 2
7950: PUSH
7951: LD_INT 2
7953: PUSH
7954: LD_INT 3
7956: PUSH
7957: LD_INT 4
7959: PUSH
7960: LD_INT 5
7962: PUSH
7963: LD_INT 6
7965: PUSH
7966: LD_INT 7
7968: PUSH
7969: LD_INT 8
7971: PUSH
7972: LD_INT 9
7974: PUSH
7975: LD_INT 10
7977: PUSH
7978: LD_INT 11
7980: PUSH
7981: LD_INT 12
7983: PUSH
7984: LD_INT 13
7986: PUSH
7987: LD_INT 14
7989: PUSH
7990: LD_INT 15
7992: PUSH
7993: LD_INT 16
7995: PUSH
7996: LD_INT 17
7998: PUSH
7999: LD_INT 18
8001: PUSH
8002: LD_INT 19
8004: PUSH
8005: LD_INT 20
8007: PUSH
8008: LD_INT 21
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: LD_INT 23
8016: PUSH
8017: LD_INT 24
8019: PUSH
8020: LD_INT 25
8022: PUSH
8023: LD_INT 26
8025: PUSH
8026: LD_INT 28
8028: PUSH
8029: LD_INT 30
8031: PUSH
8032: LD_INT 31
8034: PUSH
8035: LD_INT 32
8037: PUSH
8038: LD_INT 34
8040: PUSH
8041: LD_INT 36
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 101
8079: PUSH
8080: LD_INT 102
8082: PUSH
8083: LD_INT 103
8085: PUSH
8086: LD_INT 104
8088: PUSH
8089: LD_INT 105
8091: PUSH
8092: LD_INT 106
8094: PUSH
8095: LD_INT 107
8097: PUSH
8098: LD_INT 108
8100: PUSH
8101: LD_INT 109
8103: PUSH
8104: LD_INT 110
8106: PUSH
8107: LD_INT 111
8109: PUSH
8110: LD_INT 112
8112: PUSH
8113: LD_INT 114
8115: PUSH
8116: LD_INT 116
8118: PUSH
8119: LD_INT 117
8121: PUSH
8122: LD_INT 118
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: ST_TO_ADDR
8147: GO 9830
8149: LD_INT 12
8151: DOUBLE
8152: EQUAL
8153: IFTRUE 8157
8155: GO 8377
8157: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8158: LD_ADDR_VAR 0 2
8162: PUSH
8163: LD_INT 1
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: LD_INT 4
8174: PUSH
8175: LD_INT 5
8177: PUSH
8178: LD_INT 6
8180: PUSH
8181: LD_INT 7
8183: PUSH
8184: LD_INT 8
8186: PUSH
8187: LD_INT 9
8189: PUSH
8190: LD_INT 10
8192: PUSH
8193: LD_INT 11
8195: PUSH
8196: LD_INT 12
8198: PUSH
8199: LD_INT 13
8201: PUSH
8202: LD_INT 14
8204: PUSH
8205: LD_INT 15
8207: PUSH
8208: LD_INT 16
8210: PUSH
8211: LD_INT 17
8213: PUSH
8214: LD_INT 18
8216: PUSH
8217: LD_INT 19
8219: PUSH
8220: LD_INT 20
8222: PUSH
8223: LD_INT 21
8225: PUSH
8226: LD_INT 22
8228: PUSH
8229: LD_INT 23
8231: PUSH
8232: LD_INT 24
8234: PUSH
8235: LD_INT 25
8237: PUSH
8238: LD_INT 26
8240: PUSH
8241: LD_INT 27
8243: PUSH
8244: LD_INT 28
8246: PUSH
8247: LD_INT 30
8249: PUSH
8250: LD_INT 31
8252: PUSH
8253: LD_INT 32
8255: PUSH
8256: LD_INT 33
8258: PUSH
8259: LD_INT 34
8261: PUSH
8262: LD_INT 36
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 101
8303: PUSH
8304: LD_INT 102
8306: PUSH
8307: LD_INT 103
8309: PUSH
8310: LD_INT 104
8312: PUSH
8313: LD_INT 105
8315: PUSH
8316: LD_INT 106
8318: PUSH
8319: LD_INT 107
8321: PUSH
8322: LD_INT 108
8324: PUSH
8325: LD_INT 109
8327: PUSH
8328: LD_INT 110
8330: PUSH
8331: LD_INT 111
8333: PUSH
8334: LD_INT 112
8336: PUSH
8337: LD_INT 113
8339: PUSH
8340: LD_INT 114
8342: PUSH
8343: LD_INT 116
8345: PUSH
8346: LD_INT 117
8348: PUSH
8349: LD_INT 118
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: ST_TO_ADDR
8375: GO 9830
8377: LD_INT 13
8379: DOUBLE
8380: EQUAL
8381: IFTRUE 8385
8383: GO 8593
8385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8386: LD_ADDR_VAR 0 2
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: LD_INT 3
8399: PUSH
8400: LD_INT 4
8402: PUSH
8403: LD_INT 5
8405: PUSH
8406: LD_INT 8
8408: PUSH
8409: LD_INT 9
8411: PUSH
8412: LD_INT 10
8414: PUSH
8415: LD_INT 11
8417: PUSH
8418: LD_INT 12
8420: PUSH
8421: LD_INT 14
8423: PUSH
8424: LD_INT 15
8426: PUSH
8427: LD_INT 16
8429: PUSH
8430: LD_INT 17
8432: PUSH
8433: LD_INT 18
8435: PUSH
8436: LD_INT 19
8438: PUSH
8439: LD_INT 20
8441: PUSH
8442: LD_INT 21
8444: PUSH
8445: LD_INT 22
8447: PUSH
8448: LD_INT 23
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 26
8459: PUSH
8460: LD_INT 27
8462: PUSH
8463: LD_INT 28
8465: PUSH
8466: LD_INT 30
8468: PUSH
8469: LD_INT 31
8471: PUSH
8472: LD_INT 32
8474: PUSH
8475: LD_INT 33
8477: PUSH
8478: LD_INT 34
8480: PUSH
8481: LD_INT 36
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 101
8519: PUSH
8520: LD_INT 102
8522: PUSH
8523: LD_INT 103
8525: PUSH
8526: LD_INT 104
8528: PUSH
8529: LD_INT 105
8531: PUSH
8532: LD_INT 106
8534: PUSH
8535: LD_INT 107
8537: PUSH
8538: LD_INT 108
8540: PUSH
8541: LD_INT 109
8543: PUSH
8544: LD_INT 110
8546: PUSH
8547: LD_INT 111
8549: PUSH
8550: LD_INT 112
8552: PUSH
8553: LD_INT 113
8555: PUSH
8556: LD_INT 114
8558: PUSH
8559: LD_INT 116
8561: PUSH
8562: LD_INT 117
8564: PUSH
8565: LD_INT 118
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: ST_TO_ADDR
8591: GO 9830
8593: LD_INT 14
8595: DOUBLE
8596: EQUAL
8597: IFTRUE 8601
8599: GO 8825
8601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: LD_INT 2
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: LD_INT 5
8621: PUSH
8622: LD_INT 6
8624: PUSH
8625: LD_INT 7
8627: PUSH
8628: LD_INT 8
8630: PUSH
8631: LD_INT 9
8633: PUSH
8634: LD_INT 10
8636: PUSH
8637: LD_INT 11
8639: PUSH
8640: LD_INT 12
8642: PUSH
8643: LD_INT 13
8645: PUSH
8646: LD_INT 14
8648: PUSH
8649: LD_INT 15
8651: PUSH
8652: LD_INT 16
8654: PUSH
8655: LD_INT 17
8657: PUSH
8658: LD_INT 18
8660: PUSH
8661: LD_INT 19
8663: PUSH
8664: LD_INT 20
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 22
8672: PUSH
8673: LD_INT 23
8675: PUSH
8676: LD_INT 24
8678: PUSH
8679: LD_INT 25
8681: PUSH
8682: LD_INT 26
8684: PUSH
8685: LD_INT 27
8687: PUSH
8688: LD_INT 28
8690: PUSH
8691: LD_INT 29
8693: PUSH
8694: LD_INT 30
8696: PUSH
8697: LD_INT 31
8699: PUSH
8700: LD_INT 32
8702: PUSH
8703: LD_INT 33
8705: PUSH
8706: LD_INT 34
8708: PUSH
8709: LD_INT 36
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 101
8751: PUSH
8752: LD_INT 102
8754: PUSH
8755: LD_INT 103
8757: PUSH
8758: LD_INT 104
8760: PUSH
8761: LD_INT 105
8763: PUSH
8764: LD_INT 106
8766: PUSH
8767: LD_INT 107
8769: PUSH
8770: LD_INT 108
8772: PUSH
8773: LD_INT 109
8775: PUSH
8776: LD_INT 110
8778: PUSH
8779: LD_INT 111
8781: PUSH
8782: LD_INT 112
8784: PUSH
8785: LD_INT 113
8787: PUSH
8788: LD_INT 114
8790: PUSH
8791: LD_INT 116
8793: PUSH
8794: LD_INT 117
8796: PUSH
8797: LD_INT 118
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: ST_TO_ADDR
8823: GO 9830
8825: LD_INT 15
8827: DOUBLE
8828: EQUAL
8829: IFTRUE 8833
8831: GO 9057
8833: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8834: LD_ADDR_VAR 0 2
8838: PUSH
8839: LD_INT 1
8841: PUSH
8842: LD_INT 2
8844: PUSH
8845: LD_INT 3
8847: PUSH
8848: LD_INT 4
8850: PUSH
8851: LD_INT 5
8853: PUSH
8854: LD_INT 6
8856: PUSH
8857: LD_INT 7
8859: PUSH
8860: LD_INT 8
8862: PUSH
8863: LD_INT 9
8865: PUSH
8866: LD_INT 10
8868: PUSH
8869: LD_INT 11
8871: PUSH
8872: LD_INT 12
8874: PUSH
8875: LD_INT 13
8877: PUSH
8878: LD_INT 14
8880: PUSH
8881: LD_INT 15
8883: PUSH
8884: LD_INT 16
8886: PUSH
8887: LD_INT 17
8889: PUSH
8890: LD_INT 18
8892: PUSH
8893: LD_INT 19
8895: PUSH
8896: LD_INT 20
8898: PUSH
8899: LD_INT 21
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 23
8907: PUSH
8908: LD_INT 24
8910: PUSH
8911: LD_INT 25
8913: PUSH
8914: LD_INT 26
8916: PUSH
8917: LD_INT 27
8919: PUSH
8920: LD_INT 28
8922: PUSH
8923: LD_INT 29
8925: PUSH
8926: LD_INT 30
8928: PUSH
8929: LD_INT 31
8931: PUSH
8932: LD_INT 32
8934: PUSH
8935: LD_INT 33
8937: PUSH
8938: LD_INT 34
8940: PUSH
8941: LD_INT 36
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 101
8983: PUSH
8984: LD_INT 102
8986: PUSH
8987: LD_INT 103
8989: PUSH
8990: LD_INT 104
8992: PUSH
8993: LD_INT 105
8995: PUSH
8996: LD_INT 106
8998: PUSH
8999: LD_INT 107
9001: PUSH
9002: LD_INT 108
9004: PUSH
9005: LD_INT 109
9007: PUSH
9008: LD_INT 110
9010: PUSH
9011: LD_INT 111
9013: PUSH
9014: LD_INT 112
9016: PUSH
9017: LD_INT 113
9019: PUSH
9020: LD_INT 114
9022: PUSH
9023: LD_INT 116
9025: PUSH
9026: LD_INT 117
9028: PUSH
9029: LD_INT 118
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: ST_TO_ADDR
9055: GO 9830
9057: LD_INT 16
9059: DOUBLE
9060: EQUAL
9061: IFTRUE 9065
9063: GO 9201
9065: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9066: LD_ADDR_VAR 0 2
9070: PUSH
9071: LD_INT 2
9073: PUSH
9074: LD_INT 4
9076: PUSH
9077: LD_INT 5
9079: PUSH
9080: LD_INT 7
9082: PUSH
9083: LD_INT 11
9085: PUSH
9086: LD_INT 12
9088: PUSH
9089: LD_INT 15
9091: PUSH
9092: LD_INT 16
9094: PUSH
9095: LD_INT 20
9097: PUSH
9098: LD_INT 21
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_INT 23
9106: PUSH
9107: LD_INT 25
9109: PUSH
9110: LD_INT 26
9112: PUSH
9113: LD_INT 30
9115: PUSH
9116: LD_INT 31
9118: PUSH
9119: LD_INT 32
9121: PUSH
9122: LD_INT 33
9124: PUSH
9125: LD_INT 34
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 101
9151: PUSH
9152: LD_INT 102
9154: PUSH
9155: LD_INT 103
9157: PUSH
9158: LD_INT 106
9160: PUSH
9161: LD_INT 108
9163: PUSH
9164: LD_INT 112
9166: PUSH
9167: LD_INT 113
9169: PUSH
9170: LD_INT 114
9172: PUSH
9173: LD_INT 116
9175: PUSH
9176: LD_INT 117
9178: PUSH
9179: LD_INT 118
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: ST_TO_ADDR
9199: GO 9830
9201: LD_INT 17
9203: DOUBLE
9204: EQUAL
9205: IFTRUE 9209
9207: GO 9433
9209: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: LD_INT 3
9223: PUSH
9224: LD_INT 4
9226: PUSH
9227: LD_INT 5
9229: PUSH
9230: LD_INT 6
9232: PUSH
9233: LD_INT 7
9235: PUSH
9236: LD_INT 8
9238: PUSH
9239: LD_INT 9
9241: PUSH
9242: LD_INT 10
9244: PUSH
9245: LD_INT 11
9247: PUSH
9248: LD_INT 12
9250: PUSH
9251: LD_INT 13
9253: PUSH
9254: LD_INT 14
9256: PUSH
9257: LD_INT 15
9259: PUSH
9260: LD_INT 16
9262: PUSH
9263: LD_INT 17
9265: PUSH
9266: LD_INT 18
9268: PUSH
9269: LD_INT 19
9271: PUSH
9272: LD_INT 20
9274: PUSH
9275: LD_INT 21
9277: PUSH
9278: LD_INT 22
9280: PUSH
9281: LD_INT 23
9283: PUSH
9284: LD_INT 24
9286: PUSH
9287: LD_INT 25
9289: PUSH
9290: LD_INT 26
9292: PUSH
9293: LD_INT 27
9295: PUSH
9296: LD_INT 28
9298: PUSH
9299: LD_INT 29
9301: PUSH
9302: LD_INT 30
9304: PUSH
9305: LD_INT 31
9307: PUSH
9308: LD_INT 32
9310: PUSH
9311: LD_INT 33
9313: PUSH
9314: LD_INT 34
9316: PUSH
9317: LD_INT 36
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 101
9359: PUSH
9360: LD_INT 102
9362: PUSH
9363: LD_INT 103
9365: PUSH
9366: LD_INT 104
9368: PUSH
9369: LD_INT 105
9371: PUSH
9372: LD_INT 106
9374: PUSH
9375: LD_INT 107
9377: PUSH
9378: LD_INT 108
9380: PUSH
9381: LD_INT 109
9383: PUSH
9384: LD_INT 110
9386: PUSH
9387: LD_INT 111
9389: PUSH
9390: LD_INT 112
9392: PUSH
9393: LD_INT 113
9395: PUSH
9396: LD_INT 114
9398: PUSH
9399: LD_INT 116
9401: PUSH
9402: LD_INT 117
9404: PUSH
9405: LD_INT 118
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: ST_TO_ADDR
9431: GO 9830
9433: LD_INT 18
9435: DOUBLE
9436: EQUAL
9437: IFTRUE 9441
9439: GO 9589
9441: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9442: LD_ADDR_VAR 0 2
9446: PUSH
9447: LD_INT 2
9449: PUSH
9450: LD_INT 4
9452: PUSH
9453: LD_INT 5
9455: PUSH
9456: LD_INT 7
9458: PUSH
9459: LD_INT 11
9461: PUSH
9462: LD_INT 12
9464: PUSH
9465: LD_INT 15
9467: PUSH
9468: LD_INT 16
9470: PUSH
9471: LD_INT 20
9473: PUSH
9474: LD_INT 21
9476: PUSH
9477: LD_INT 22
9479: PUSH
9480: LD_INT 23
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 26
9488: PUSH
9489: LD_INT 30
9491: PUSH
9492: LD_INT 31
9494: PUSH
9495: LD_INT 32
9497: PUSH
9498: LD_INT 33
9500: PUSH
9501: LD_INT 34
9503: PUSH
9504: LD_INT 35
9506: PUSH
9507: LD_INT 36
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 101
9535: PUSH
9536: LD_INT 102
9538: PUSH
9539: LD_INT 103
9541: PUSH
9542: LD_INT 106
9544: PUSH
9545: LD_INT 108
9547: PUSH
9548: LD_INT 112
9550: PUSH
9551: LD_INT 113
9553: PUSH
9554: LD_INT 114
9556: PUSH
9557: LD_INT 115
9559: PUSH
9560: LD_INT 116
9562: PUSH
9563: LD_INT 117
9565: PUSH
9566: LD_INT 118
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: ST_TO_ADDR
9587: GO 9830
9589: LD_INT 19
9591: DOUBLE
9592: EQUAL
9593: IFTRUE 9597
9595: GO 9829
9597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: LD_INT 1
9605: PUSH
9606: LD_INT 2
9608: PUSH
9609: LD_INT 3
9611: PUSH
9612: LD_INT 4
9614: PUSH
9615: LD_INT 5
9617: PUSH
9618: LD_INT 6
9620: PUSH
9621: LD_INT 7
9623: PUSH
9624: LD_INT 8
9626: PUSH
9627: LD_INT 9
9629: PUSH
9630: LD_INT 10
9632: PUSH
9633: LD_INT 11
9635: PUSH
9636: LD_INT 12
9638: PUSH
9639: LD_INT 13
9641: PUSH
9642: LD_INT 14
9644: PUSH
9645: LD_INT 15
9647: PUSH
9648: LD_INT 16
9650: PUSH
9651: LD_INT 17
9653: PUSH
9654: LD_INT 18
9656: PUSH
9657: LD_INT 19
9659: PUSH
9660: LD_INT 20
9662: PUSH
9663: LD_INT 21
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 23
9671: PUSH
9672: LD_INT 24
9674: PUSH
9675: LD_INT 25
9677: PUSH
9678: LD_INT 26
9680: PUSH
9681: LD_INT 27
9683: PUSH
9684: LD_INT 28
9686: PUSH
9687: LD_INT 29
9689: PUSH
9690: LD_INT 30
9692: PUSH
9693: LD_INT 31
9695: PUSH
9696: LD_INT 32
9698: PUSH
9699: LD_INT 33
9701: PUSH
9702: LD_INT 34
9704: PUSH
9705: LD_INT 35
9707: PUSH
9708: LD_INT 36
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 101
9751: PUSH
9752: LD_INT 102
9754: PUSH
9755: LD_INT 103
9757: PUSH
9758: LD_INT 104
9760: PUSH
9761: LD_INT 105
9763: PUSH
9764: LD_INT 106
9766: PUSH
9767: LD_INT 107
9769: PUSH
9770: LD_INT 108
9772: PUSH
9773: LD_INT 109
9775: PUSH
9776: LD_INT 110
9778: PUSH
9779: LD_INT 111
9781: PUSH
9782: LD_INT 112
9784: PUSH
9785: LD_INT 113
9787: PUSH
9788: LD_INT 114
9790: PUSH
9791: LD_INT 115
9793: PUSH
9794: LD_INT 116
9796: PUSH
9797: LD_INT 117
9799: PUSH
9800: LD_INT 118
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: ST_TO_ADDR
9827: GO 9830
9829: POP
// end else
9830: GO 10061
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9832: LD_ADDR_VAR 0 2
9836: PUSH
9837: LD_INT 1
9839: PUSH
9840: LD_INT 2
9842: PUSH
9843: LD_INT 3
9845: PUSH
9846: LD_INT 4
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: LD_INT 6
9854: PUSH
9855: LD_INT 7
9857: PUSH
9858: LD_INT 8
9860: PUSH
9861: LD_INT 9
9863: PUSH
9864: LD_INT 10
9866: PUSH
9867: LD_INT 11
9869: PUSH
9870: LD_INT 12
9872: PUSH
9873: LD_INT 13
9875: PUSH
9876: LD_INT 14
9878: PUSH
9879: LD_INT 15
9881: PUSH
9882: LD_INT 16
9884: PUSH
9885: LD_INT 17
9887: PUSH
9888: LD_INT 18
9890: PUSH
9891: LD_INT 19
9893: PUSH
9894: LD_INT 20
9896: PUSH
9897: LD_INT 21
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 23
9905: PUSH
9906: LD_INT 24
9908: PUSH
9909: LD_INT 25
9911: PUSH
9912: LD_INT 26
9914: PUSH
9915: LD_INT 27
9917: PUSH
9918: LD_INT 28
9920: PUSH
9921: LD_INT 29
9923: PUSH
9924: LD_INT 30
9926: PUSH
9927: LD_INT 31
9929: PUSH
9930: LD_INT 32
9932: PUSH
9933: LD_INT 33
9935: PUSH
9936: LD_INT 34
9938: PUSH
9939: LD_INT 35
9941: PUSH
9942: LD_INT 36
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 101
9985: PUSH
9986: LD_INT 102
9988: PUSH
9989: LD_INT 103
9991: PUSH
9992: LD_INT 104
9994: PUSH
9995: LD_INT 105
9997: PUSH
9998: LD_INT 106
10000: PUSH
10001: LD_INT 107
10003: PUSH
10004: LD_INT 108
10006: PUSH
10007: LD_INT 109
10009: PUSH
10010: LD_INT 110
10012: PUSH
10013: LD_INT 111
10015: PUSH
10016: LD_INT 112
10018: PUSH
10019: LD_INT 113
10021: PUSH
10022: LD_INT 114
10024: PUSH
10025: LD_INT 115
10027: PUSH
10028: LD_INT 116
10030: PUSH
10031: LD_INT 117
10033: PUSH
10034: LD_INT 118
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: ST_TO_ADDR
// if result then
10061: LD_VAR 0 2
10065: IFFALSE 10851
// begin normal :=  ;
10067: LD_ADDR_VAR 0 5
10071: PUSH
10072: LD_STRING 
10074: ST_TO_ADDR
// hardcore :=  ;
10075: LD_ADDR_VAR 0 6
10079: PUSH
10080: LD_STRING 
10082: ST_TO_ADDR
// active :=  ;
10083: LD_ADDR_VAR 0 7
10087: PUSH
10088: LD_STRING 
10090: ST_TO_ADDR
// for i = 1 to normalCounter do
10091: LD_ADDR_VAR 0 8
10095: PUSH
10096: DOUBLE
10097: LD_INT 1
10099: DEC
10100: ST_TO_ADDR
10101: LD_EXP 16
10105: PUSH
10106: FOR_TO
10107: IFFALSE 10208
// begin tmp := 0 ;
10109: LD_ADDR_VAR 0 3
10113: PUSH
10114: LD_STRING 0
10116: ST_TO_ADDR
// if result [ 1 ] then
10117: LD_VAR 0 2
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: IFFALSE 10190
// if result [ 1 ] [ 1 ] = i then
10127: LD_VAR 0 2
10131: PUSH
10132: LD_INT 1
10134: ARRAY
10135: PUSH
10136: LD_INT 1
10138: ARRAY
10139: PUSH
10140: LD_VAR 0 8
10144: EQUAL
10145: IFFALSE 10190
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10147: LD_ADDR_VAR 0 2
10151: PUSH
10152: LD_VAR 0 2
10156: PPUSH
10157: LD_INT 1
10159: PPUSH
10160: LD_VAR 0 2
10164: PUSH
10165: LD_INT 1
10167: ARRAY
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: CALL_OW 3
10176: PPUSH
10177: CALL_OW 1
10181: ST_TO_ADDR
// tmp := 1 ;
10182: LD_ADDR_VAR 0 3
10186: PUSH
10187: LD_STRING 1
10189: ST_TO_ADDR
// end ; normal := normal & tmp ;
10190: LD_ADDR_VAR 0 5
10194: PUSH
10195: LD_VAR 0 5
10199: PUSH
10200: LD_VAR 0 3
10204: STR
10205: ST_TO_ADDR
// end ;
10206: GO 10106
10208: POP
10209: POP
// for i = 1 to hardcoreCounter do
10210: LD_ADDR_VAR 0 8
10214: PUSH
10215: DOUBLE
10216: LD_INT 1
10218: DEC
10219: ST_TO_ADDR
10220: LD_EXP 17
10224: PUSH
10225: FOR_TO
10226: IFFALSE 10331
// begin tmp := 0 ;
10228: LD_ADDR_VAR 0 3
10232: PUSH
10233: LD_STRING 0
10235: ST_TO_ADDR
// if result [ 2 ] then
10236: LD_VAR 0 2
10240: PUSH
10241: LD_INT 2
10243: ARRAY
10244: IFFALSE 10313
// if result [ 2 ] [ 1 ] = 100 + i then
10246: LD_VAR 0 2
10250: PUSH
10251: LD_INT 2
10253: ARRAY
10254: PUSH
10255: LD_INT 1
10257: ARRAY
10258: PUSH
10259: LD_INT 100
10261: PUSH
10262: LD_VAR 0 8
10266: PLUS
10267: EQUAL
10268: IFFALSE 10313
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: LD_VAR 0 2
10287: PUSH
10288: LD_INT 2
10290: ARRAY
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 3
10299: PPUSH
10300: CALL_OW 1
10304: ST_TO_ADDR
// tmp := 1 ;
10305: LD_ADDR_VAR 0 3
10309: PUSH
10310: LD_STRING 1
10312: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10313: LD_ADDR_VAR 0 6
10317: PUSH
10318: LD_VAR 0 6
10322: PUSH
10323: LD_VAR 0 3
10327: STR
10328: ST_TO_ADDR
// end ;
10329: GO 10225
10331: POP
10332: POP
// if isGameLoad then
10333: LD_VAR 0 1
10337: IFFALSE 10812
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10339: LD_ADDR_VAR 0 4
10343: PUSH
10344: LD_EXP 20
10348: PUSH
10349: LD_EXP 19
10353: PUSH
10354: LD_EXP 21
10358: PUSH
10359: LD_EXP 18
10363: PUSH
10364: LD_EXP 22
10368: PUSH
10369: LD_EXP 23
10373: PUSH
10374: LD_EXP 24
10378: PUSH
10379: LD_EXP 25
10383: PUSH
10384: LD_EXP 26
10388: PUSH
10389: LD_EXP 27
10393: PUSH
10394: LD_EXP 28
10398: PUSH
10399: LD_EXP 29
10403: PUSH
10404: LD_EXP 30
10408: PUSH
10409: LD_EXP 31
10413: PUSH
10414: LD_EXP 39
10418: PUSH
10419: LD_EXP 40
10423: PUSH
10424: LD_EXP 41
10428: PUSH
10429: LD_EXP 42
10433: PUSH
10434: LD_EXP 44
10438: PUSH
10439: LD_EXP 45
10443: PUSH
10444: LD_EXP 46
10448: PUSH
10449: LD_EXP 49
10453: PUSH
10454: LD_EXP 51
10458: PUSH
10459: LD_EXP 52
10463: PUSH
10464: LD_EXP 53
10468: PUSH
10469: LD_EXP 55
10473: PUSH
10474: LD_EXP 56
10478: PUSH
10479: LD_EXP 59
10483: PUSH
10484: LD_EXP 60
10488: PUSH
10489: LD_EXP 61
10493: PUSH
10494: LD_EXP 62
10498: PUSH
10499: LD_EXP 63
10503: PUSH
10504: LD_EXP 64
10508: PUSH
10509: LD_EXP 65
10513: PUSH
10514: LD_EXP 66
10518: PUSH
10519: LD_EXP 67
10523: PUSH
10524: LD_EXP 32
10528: PUSH
10529: LD_EXP 33
10533: PUSH
10534: LD_EXP 36
10538: PUSH
10539: LD_EXP 37
10543: PUSH
10544: LD_EXP 38
10548: PUSH
10549: LD_EXP 34
10553: PUSH
10554: LD_EXP 35
10558: PUSH
10559: LD_EXP 43
10563: PUSH
10564: LD_EXP 47
10568: PUSH
10569: LD_EXP 48
10573: PUSH
10574: LD_EXP 50
10578: PUSH
10579: LD_EXP 54
10583: PUSH
10584: LD_EXP 57
10588: PUSH
10589: LD_EXP 58
10593: PUSH
10594: LD_EXP 68
10598: PUSH
10599: LD_EXP 69
10603: PUSH
10604: LD_EXP 70
10608: PUSH
10609: LD_EXP 71
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: ST_TO_ADDR
// tmp :=  ;
10670: LD_ADDR_VAR 0 3
10674: PUSH
10675: LD_STRING 
10677: ST_TO_ADDR
// for i = 1 to normalCounter do
10678: LD_ADDR_VAR 0 8
10682: PUSH
10683: DOUBLE
10684: LD_INT 1
10686: DEC
10687: ST_TO_ADDR
10688: LD_EXP 16
10692: PUSH
10693: FOR_TO
10694: IFFALSE 10730
// begin if flags [ i ] then
10696: LD_VAR 0 4
10700: PUSH
10701: LD_VAR 0 8
10705: ARRAY
10706: IFFALSE 10728
// tmp := tmp & i & ; ;
10708: LD_ADDR_VAR 0 3
10712: PUSH
10713: LD_VAR 0 3
10717: PUSH
10718: LD_VAR 0 8
10722: STR
10723: PUSH
10724: LD_STRING ;
10726: STR
10727: ST_TO_ADDR
// end ;
10728: GO 10693
10730: POP
10731: POP
// for i = 1 to hardcoreCounter do
10732: LD_ADDR_VAR 0 8
10736: PUSH
10737: DOUBLE
10738: LD_INT 1
10740: DEC
10741: ST_TO_ADDR
10742: LD_EXP 17
10746: PUSH
10747: FOR_TO
10748: IFFALSE 10794
// begin if flags [ normalCounter + i ] then
10750: LD_VAR 0 4
10754: PUSH
10755: LD_EXP 16
10759: PUSH
10760: LD_VAR 0 8
10764: PLUS
10765: ARRAY
10766: IFFALSE 10792
// tmp := tmp & ( 100 + i ) & ; ;
10768: LD_ADDR_VAR 0 3
10772: PUSH
10773: LD_VAR 0 3
10777: PUSH
10778: LD_INT 100
10780: PUSH
10781: LD_VAR 0 8
10785: PLUS
10786: STR
10787: PUSH
10788: LD_STRING ;
10790: STR
10791: ST_TO_ADDR
// end ;
10792: GO 10747
10794: POP
10795: POP
// if tmp then
10796: LD_VAR 0 3
10800: IFFALSE 10812
// active := tmp ;
10802: LD_ADDR_VAR 0 7
10806: PUSH
10807: LD_VAR 0 3
10811: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10812: LD_STRING getStreamItemsFromMission("
10814: PUSH
10815: LD_VAR 0 5
10819: STR
10820: PUSH
10821: LD_STRING ","
10823: STR
10824: PUSH
10825: LD_VAR 0 6
10829: STR
10830: PUSH
10831: LD_STRING ","
10833: STR
10834: PUSH
10835: LD_VAR 0 7
10839: STR
10840: PUSH
10841: LD_STRING ")
10843: STR
10844: PPUSH
10845: CALL_OW 559
// end else
10849: GO 10858
// ToLua ( getStreamItemsFromMission("","","") ) ;
10851: LD_STRING getStreamItemsFromMission("","","")
10853: PPUSH
10854: CALL_OW 559
// end ;
10858: LD_VAR 0 2
10862: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10863: LD_EXP 15
10867: PUSH
10868: LD_EXP 20
10872: AND
10873: IFFALSE 10997
10875: GO 10877
10877: DISABLE
10878: LD_INT 0
10880: PPUSH
10881: PPUSH
// begin enable ;
10882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_OWVAR 2
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 34
10905: PUSH
10906: LD_INT 7
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 34
10915: PUSH
10916: LD_INT 45
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 34
10925: PUSH
10926: LD_INT 28
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 34
10935: PUSH
10936: LD_INT 47
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: ST_TO_ADDR
// if not tmp then
10959: LD_VAR 0 2
10963: NOT
10964: IFFALSE 10968
// exit ;
10966: GO 10997
// for i in tmp do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_VAR 0 2
10977: PUSH
10978: FOR_IN
10979: IFFALSE 10995
// begin SetLives ( i , 0 ) ;
10981: LD_VAR 0 1
10985: PPUSH
10986: LD_INT 0
10988: PPUSH
10989: CALL_OW 234
// end ;
10993: GO 10978
10995: POP
10996: POP
// end ;
10997: PPOPN 2
10999: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11000: LD_EXP 15
11004: PUSH
11005: LD_EXP 21
11009: AND
11010: IFFALSE 11094
11012: GO 11014
11014: DISABLE
11015: LD_INT 0
11017: PPUSH
11018: PPUSH
// begin enable ;
11019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 22
11027: PUSH
11028: LD_OWVAR 2
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 32
11039: PUSH
11040: LD_INT 3
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 69
11055: ST_TO_ADDR
// if not tmp then
11056: LD_VAR 0 2
11060: NOT
11061: IFFALSE 11065
// exit ;
11063: GO 11094
// for i in tmp do
11065: LD_ADDR_VAR 0 1
11069: PUSH
11070: LD_VAR 0 2
11074: PUSH
11075: FOR_IN
11076: IFFALSE 11092
// begin SetLives ( i , 0 ) ;
11078: LD_VAR 0 1
11082: PPUSH
11083: LD_INT 0
11085: PPUSH
11086: CALL_OW 234
// end ;
11090: GO 11075
11092: POP
11093: POP
// end ;
11094: PPOPN 2
11096: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11097: LD_EXP 15
11101: PUSH
11102: LD_EXP 18
11106: AND
11107: IFFALSE 11200
11109: GO 11111
11111: DISABLE
11112: LD_INT 0
11114: PPUSH
// begin enable ;
11115: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_OWVAR 2
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 5
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 25
11148: PUSH
11149: LD_INT 9
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 25
11158: PUSH
11159: LD_INT 8
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PPUSH
11176: CALL_OW 69
11180: PUSH
11181: FOR_IN
11182: IFFALSE 11198
// begin SetClass ( i , 1 ) ;
11184: LD_VAR 0 1
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 336
// end ;
11196: GO 11181
11198: POP
11199: POP
// end ;
11200: PPOPN 1
11202: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11203: LD_EXP 15
11207: PUSH
11208: LD_EXP 19
11212: AND
11213: PUSH
11214: LD_OWVAR 65
11218: PUSH
11219: LD_INT 7
11221: LESS
11222: AND
11223: IFFALSE 11237
11225: GO 11227
11227: DISABLE
// begin enable ;
11228: ENABLE
// game_speed := 7 ;
11229: LD_ADDR_OWVAR 65
11233: PUSH
11234: LD_INT 7
11236: ST_TO_ADDR
// end ;
11237: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11238: LD_EXP 15
11242: PUSH
11243: LD_EXP 22
11247: AND
11248: IFFALSE 11450
11250: GO 11252
11252: DISABLE
11253: LD_INT 0
11255: PPUSH
11256: PPUSH
11257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11258: LD_ADDR_VAR 0 3
11262: PUSH
11263: LD_INT 81
11265: PUSH
11266: LD_OWVAR 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 21
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PPUSH
11289: CALL_OW 69
11293: ST_TO_ADDR
// if not tmp then
11294: LD_VAR 0 3
11298: NOT
11299: IFFALSE 11303
// exit ;
11301: GO 11450
// if tmp > 5 then
11303: LD_VAR 0 3
11307: PUSH
11308: LD_INT 5
11310: GREATER
11311: IFFALSE 11323
// k := 5 else
11313: LD_ADDR_VAR 0 2
11317: PUSH
11318: LD_INT 5
11320: ST_TO_ADDR
11321: GO 11333
// k := tmp ;
11323: LD_ADDR_VAR 0 2
11327: PUSH
11328: LD_VAR 0 3
11332: ST_TO_ADDR
// for i := 1 to k do
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_VAR 0 2
11347: PUSH
11348: FOR_TO
11349: IFFALSE 11448
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_VAR 0 1
11360: ARRAY
11361: PPUSH
11362: LD_VAR 0 1
11366: PUSH
11367: LD_INT 4
11369: MOD
11370: PUSH
11371: LD_INT 1
11373: PLUS
11374: PPUSH
11375: CALL_OW 259
11379: PUSH
11380: LD_INT 10
11382: LESS
11383: IFFALSE 11446
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11385: LD_VAR 0 3
11389: PUSH
11390: LD_VAR 0 1
11394: ARRAY
11395: PPUSH
11396: LD_VAR 0 1
11400: PUSH
11401: LD_INT 4
11403: MOD
11404: PUSH
11405: LD_INT 1
11407: PLUS
11408: PPUSH
11409: LD_VAR 0 3
11413: PUSH
11414: LD_VAR 0 1
11418: ARRAY
11419: PPUSH
11420: LD_VAR 0 1
11424: PUSH
11425: LD_INT 4
11427: MOD
11428: PUSH
11429: LD_INT 1
11431: PLUS
11432: PPUSH
11433: CALL_OW 259
11437: PUSH
11438: LD_INT 1
11440: PLUS
11441: PPUSH
11442: CALL_OW 237
11446: GO 11348
11448: POP
11449: POP
// end ;
11450: PPOPN 3
11452: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11453: LD_EXP 15
11457: PUSH
11458: LD_EXP 23
11462: AND
11463: IFFALSE 11483
11465: GO 11467
11467: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11468: LD_INT 4
11470: PPUSH
11471: LD_OWVAR 2
11475: PPUSH
11476: LD_INT 0
11478: PPUSH
11479: CALL_OW 324
11483: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11484: LD_EXP 15
11488: PUSH
11489: LD_EXP 52
11493: AND
11494: IFFALSE 11514
11496: GO 11498
11498: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11499: LD_INT 19
11501: PPUSH
11502: LD_OWVAR 2
11506: PPUSH
11507: LD_INT 0
11509: PPUSH
11510: CALL_OW 324
11514: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11515: LD_EXP 15
11519: PUSH
11520: LD_EXP 24
11524: AND
11525: IFFALSE 11627
11527: GO 11529
11529: DISABLE
11530: LD_INT 0
11532: PPUSH
11533: PPUSH
// begin enable ;
11534: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11535: LD_ADDR_VAR 0 2
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_OWVAR 2
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 34
11557: PUSH
11558: LD_INT 11
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 34
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: ST_TO_ADDR
// if not tmp then
11589: LD_VAR 0 2
11593: NOT
11594: IFFALSE 11598
// exit ;
11596: GO 11627
// for i in tmp do
11598: LD_ADDR_VAR 0 1
11602: PUSH
11603: LD_VAR 0 2
11607: PUSH
11608: FOR_IN
11609: IFFALSE 11625
// begin SetLives ( i , 0 ) ;
11611: LD_VAR 0 1
11615: PPUSH
11616: LD_INT 0
11618: PPUSH
11619: CALL_OW 234
// end ;
11623: GO 11608
11625: POP
11626: POP
// end ;
11627: PPOPN 2
11629: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11630: LD_EXP 15
11634: PUSH
11635: LD_EXP 25
11639: AND
11640: IFFALSE 11660
11642: GO 11644
11644: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11645: LD_INT 32
11647: PPUSH
11648: LD_OWVAR 2
11652: PPUSH
11653: LD_INT 0
11655: PPUSH
11656: CALL_OW 324
11660: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11661: LD_EXP 15
11665: PUSH
11666: LD_EXP 26
11670: AND
11671: IFFALSE 11852
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
11680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11681: LD_ADDR_VAR 0 2
11685: PUSH
11686: LD_INT 22
11688: PUSH
11689: LD_OWVAR 2
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 33
11700: PUSH
11701: LD_INT 3
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PPUSH
11712: CALL_OW 69
11716: ST_TO_ADDR
// if not tmp then
11717: LD_VAR 0 2
11721: NOT
11722: IFFALSE 11726
// exit ;
11724: GO 11852
// side := 0 ;
11726: LD_ADDR_VAR 0 3
11730: PUSH
11731: LD_INT 0
11733: ST_TO_ADDR
// for i := 1 to 8 do
11734: LD_ADDR_VAR 0 1
11738: PUSH
11739: DOUBLE
11740: LD_INT 1
11742: DEC
11743: ST_TO_ADDR
11744: LD_INT 8
11746: PUSH
11747: FOR_TO
11748: IFFALSE 11796
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11750: LD_OWVAR 2
11754: PUSH
11755: LD_VAR 0 1
11759: NONEQUAL
11760: PUSH
11761: LD_OWVAR 2
11765: PPUSH
11766: LD_VAR 0 1
11770: PPUSH
11771: CALL_OW 81
11775: PUSH
11776: LD_INT 2
11778: EQUAL
11779: AND
11780: IFFALSE 11794
// begin side := i ;
11782: LD_ADDR_VAR 0 3
11786: PUSH
11787: LD_VAR 0 1
11791: ST_TO_ADDR
// break ;
11792: GO 11796
// end ;
11794: GO 11747
11796: POP
11797: POP
// if not side then
11798: LD_VAR 0 3
11802: NOT
11803: IFFALSE 11807
// exit ;
11805: GO 11852
// for i := 1 to tmp do
11807: LD_ADDR_VAR 0 1
11811: PUSH
11812: DOUBLE
11813: LD_INT 1
11815: DEC
11816: ST_TO_ADDR
11817: LD_VAR 0 2
11821: PUSH
11822: FOR_TO
11823: IFFALSE 11850
// if Prob ( 60 ) then
11825: LD_INT 60
11827: PPUSH
11828: CALL_OW 13
11832: IFFALSE 11848
// SetSide ( i , side ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: CALL_OW 235
11848: GO 11822
11850: POP
11851: POP
// end ;
11852: PPOPN 3
11854: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11855: LD_EXP 15
11859: PUSH
11860: LD_EXP 28
11864: AND
11865: IFFALSE 11984
11867: GO 11869
11869: DISABLE
11870: LD_INT 0
11872: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11873: LD_ADDR_VAR 0 1
11877: PUSH
11878: LD_INT 22
11880: PUSH
11881: LD_OWVAR 2
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 21
11892: PUSH
11893: LD_INT 1
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: LD_INT 23
11905: PUSH
11906: LD_INT 0
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: PUSH
11927: FOR_IN
11928: IFFALSE 11982
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11930: LD_VAR 0 1
11934: PPUSH
11935: CALL_OW 257
11939: PUSH
11940: LD_INT 1
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: LD_INT 4
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: IN
11958: IFFALSE 11980
// SetClass ( un , rand ( 1 , 4 ) ) ;
11960: LD_VAR 0 1
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: LD_INT 4
11970: PPUSH
11971: CALL_OW 12
11975: PPUSH
11976: CALL_OW 336
11980: GO 11927
11982: POP
11983: POP
// end ;
11984: PPOPN 1
11986: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11987: LD_EXP 15
11991: PUSH
11992: LD_EXP 27
11996: AND
11997: IFFALSE 12076
11999: GO 12001
12001: DISABLE
12002: LD_INT 0
12004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12005: LD_ADDR_VAR 0 1
12009: PUSH
12010: LD_INT 22
12012: PUSH
12013: LD_OWVAR 2
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 3
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: ST_TO_ADDR
// if not tmp then
12041: LD_VAR 0 1
12045: NOT
12046: IFFALSE 12050
// exit ;
12048: GO 12076
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12050: LD_VAR 0 1
12054: PUSH
12055: LD_INT 1
12057: PPUSH
12058: LD_VAR 0 1
12062: PPUSH
12063: CALL_OW 12
12067: ARRAY
12068: PPUSH
12069: LD_INT 100
12071: PPUSH
12072: CALL_OW 234
// end ;
12076: PPOPN 1
12078: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12079: LD_EXP 15
12083: PUSH
12084: LD_EXP 29
12088: AND
12089: IFFALSE 12187
12091: GO 12093
12093: DISABLE
12094: LD_INT 0
12096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_OWVAR 2
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 21
12116: PUSH
12117: LD_INT 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 69
12132: ST_TO_ADDR
// if not tmp then
12133: LD_VAR 0 1
12137: NOT
12138: IFFALSE 12142
// exit ;
12140: GO 12187
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12142: LD_VAR 0 1
12146: PUSH
12147: LD_INT 1
12149: PPUSH
12150: LD_VAR 0 1
12154: PPUSH
12155: CALL_OW 12
12159: ARRAY
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_INT 4
12166: PPUSH
12167: CALL_OW 12
12171: PPUSH
12172: LD_INT 3000
12174: PPUSH
12175: LD_INT 9000
12177: PPUSH
12178: CALL_OW 12
12182: PPUSH
12183: CALL_OW 492
// end ;
12187: PPOPN 1
12189: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12190: LD_EXP 15
12194: PUSH
12195: LD_EXP 30
12199: AND
12200: IFFALSE 12220
12202: GO 12204
12204: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12205: LD_INT 1
12207: PPUSH
12208: LD_OWVAR 2
12212: PPUSH
12213: LD_INT 0
12215: PPUSH
12216: CALL_OW 324
12220: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12221: LD_EXP 15
12225: PUSH
12226: LD_EXP 31
12230: AND
12231: IFFALSE 12314
12233: GO 12235
12235: DISABLE
12236: LD_INT 0
12238: PPUSH
12239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12240: LD_ADDR_VAR 0 2
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_OWVAR 2
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 21
12259: PUSH
12260: LD_INT 3
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PPUSH
12271: CALL_OW 69
12275: ST_TO_ADDR
// if not tmp then
12276: LD_VAR 0 2
12280: NOT
12281: IFFALSE 12285
// exit ;
12283: GO 12314
// for i in tmp do
12285: LD_ADDR_VAR 0 1
12289: PUSH
12290: LD_VAR 0 2
12294: PUSH
12295: FOR_IN
12296: IFFALSE 12312
// SetBLevel ( i , 10 ) ;
12298: LD_VAR 0 1
12302: PPUSH
12303: LD_INT 10
12305: PPUSH
12306: CALL_OW 241
12310: GO 12295
12312: POP
12313: POP
// end ;
12314: PPOPN 2
12316: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12317: LD_EXP 15
12321: PUSH
12322: LD_EXP 32
12326: AND
12327: IFFALSE 12438
12329: GO 12331
12331: DISABLE
12332: LD_INT 0
12334: PPUSH
12335: PPUSH
12336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12337: LD_ADDR_VAR 0 3
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_OWVAR 2
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 25
12356: PUSH
12357: LD_INT 1
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: ST_TO_ADDR
// if not tmp then
12373: LD_VAR 0 3
12377: NOT
12378: IFFALSE 12382
// exit ;
12380: GO 12438
// un := tmp [ rand ( 1 , tmp ) ] ;
12382: LD_ADDR_VAR 0 2
12386: PUSH
12387: LD_VAR 0 3
12391: PUSH
12392: LD_INT 1
12394: PPUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: CALL_OW 12
12404: ARRAY
12405: ST_TO_ADDR
// if Crawls ( un ) then
12406: LD_VAR 0 2
12410: PPUSH
12411: CALL_OW 318
12415: IFFALSE 12426
// ComWalk ( un ) ;
12417: LD_VAR 0 2
12421: PPUSH
12422: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12426: LD_VAR 0 2
12430: PPUSH
12431: LD_INT 5
12433: PPUSH
12434: CALL_OW 336
// end ;
12438: PPOPN 3
12440: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12441: LD_EXP 15
12445: PUSH
12446: LD_EXP 33
12450: AND
12451: PUSH
12452: LD_OWVAR 67
12456: PUSH
12457: LD_INT 4
12459: LESS
12460: AND
12461: IFFALSE 12480
12463: GO 12465
12465: DISABLE
// begin Difficulty := Difficulty + 1 ;
12466: LD_ADDR_OWVAR 67
12470: PUSH
12471: LD_OWVAR 67
12475: PUSH
12476: LD_INT 1
12478: PLUS
12479: ST_TO_ADDR
// end ;
12480: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12481: LD_EXP 15
12485: PUSH
12486: LD_EXP 34
12490: AND
12491: IFFALSE 12594
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
// begin for i := 1 to 5 do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: DOUBLE
12505: LD_INT 1
12507: DEC
12508: ST_TO_ADDR
12509: LD_INT 5
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12592
// begin uc_nation := nation_nature ;
12515: LD_ADDR_OWVAR 21
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// uc_side := 0 ;
12523: LD_ADDR_OWVAR 20
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12531: LD_ADDR_OWVAR 29
12535: PUSH
12536: LD_INT 12
12538: PUSH
12539: LD_INT 12
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: ST_TO_ADDR
// hc_agressivity := 20 ;
12546: LD_ADDR_OWVAR 35
12550: PUSH
12551: LD_INT 20
12553: ST_TO_ADDR
// hc_class := class_tiger ;
12554: LD_ADDR_OWVAR 28
12558: PUSH
12559: LD_INT 14
12561: ST_TO_ADDR
// hc_gallery :=  ;
12562: LD_ADDR_OWVAR 33
12566: PUSH
12567: LD_STRING 
12569: ST_TO_ADDR
// hc_name :=  ;
12570: LD_ADDR_OWVAR 26
12574: PUSH
12575: LD_STRING 
12577: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12578: CALL_OW 44
12582: PPUSH
12583: LD_INT 0
12585: PPUSH
12586: CALL_OW 51
// end ;
12590: GO 12512
12592: POP
12593: POP
// end ;
12594: PPOPN 1
12596: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12597: LD_EXP 15
12601: PUSH
12602: LD_EXP 35
12606: AND
12607: IFFALSE 12616
12609: GO 12611
12611: DISABLE
// StreamSibBomb ;
12612: CALL 12617 0 0
12616: END
// export function StreamSibBomb ; var i , x , y ; begin
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
// result := false ;
12623: LD_ADDR_VAR 0 1
12627: PUSH
12628: LD_INT 0
12630: ST_TO_ADDR
// for i := 1 to 16 do
12631: LD_ADDR_VAR 0 2
12635: PUSH
12636: DOUBLE
12637: LD_INT 1
12639: DEC
12640: ST_TO_ADDR
12641: LD_INT 16
12643: PUSH
12644: FOR_TO
12645: IFFALSE 12844
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12647: LD_ADDR_VAR 0 3
12651: PUSH
12652: LD_INT 10
12654: PUSH
12655: LD_INT 20
12657: PUSH
12658: LD_INT 30
12660: PUSH
12661: LD_INT 40
12663: PUSH
12664: LD_INT 50
12666: PUSH
12667: LD_INT 60
12669: PUSH
12670: LD_INT 70
12672: PUSH
12673: LD_INT 80
12675: PUSH
12676: LD_INT 90
12678: PUSH
12679: LD_INT 100
12681: PUSH
12682: LD_INT 110
12684: PUSH
12685: LD_INT 120
12687: PUSH
12688: LD_INT 130
12690: PUSH
12691: LD_INT 140
12693: PUSH
12694: LD_INT 150
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_INT 15
12719: PPUSH
12720: CALL_OW 12
12724: ARRAY
12725: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12726: LD_ADDR_VAR 0 4
12730: PUSH
12731: LD_INT 10
12733: PUSH
12734: LD_INT 20
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 40
12742: PUSH
12743: LD_INT 50
12745: PUSH
12746: LD_INT 60
12748: PUSH
12749: LD_INT 70
12751: PUSH
12752: LD_INT 80
12754: PUSH
12755: LD_INT 90
12757: PUSH
12758: LD_INT 100
12760: PUSH
12761: LD_INT 110
12763: PUSH
12764: LD_INT 120
12766: PUSH
12767: LD_INT 130
12769: PUSH
12770: LD_INT 140
12772: PUSH
12773: LD_INT 150
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 1
12795: PPUSH
12796: LD_INT 15
12798: PPUSH
12799: CALL_OW 12
12803: ARRAY
12804: ST_TO_ADDR
// if ValidHex ( x , y ) then
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_VAR 0 4
12814: PPUSH
12815: CALL_OW 488
12819: IFFALSE 12842
// begin result := [ x , y ] ;
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_VAR 0 3
12830: PUSH
12831: LD_VAR 0 4
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: ST_TO_ADDR
// break ;
12840: GO 12844
// end ; end ;
12842: GO 12644
12844: POP
12845: POP
// if result then
12846: LD_VAR 0 1
12850: IFFALSE 12910
// begin ToLua ( playSibBomb() ) ;
12852: LD_STRING playSibBomb()
12854: PPUSH
12855: CALL_OW 559
// wait ( 0 0$14 ) ;
12859: LD_INT 490
12861: PPUSH
12862: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12866: LD_VAR 0 1
12870: PUSH
12871: LD_INT 1
12873: ARRAY
12874: PPUSH
12875: LD_VAR 0 1
12879: PUSH
12880: LD_INT 2
12882: ARRAY
12883: PPUSH
12884: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: LD_VAR 0 1
12901: PUSH
12902: LD_INT 2
12904: ARRAY
12905: PPUSH
12906: CALL_OW 429
// end ; end ;
12910: LD_VAR 0 1
12914: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12915: LD_EXP 15
12919: PUSH
12920: LD_EXP 37
12924: AND
12925: IFFALSE 12937
12927: GO 12929
12929: DISABLE
// YouLost (  ) ;
12930: LD_STRING 
12932: PPUSH
12933: CALL_OW 104
12937: END
// every 0 0$1 trigger StreamModeActive and sFog do
12938: LD_EXP 15
12942: PUSH
12943: LD_EXP 36
12947: AND
12948: IFFALSE 12962
12950: GO 12952
12952: DISABLE
// FogOff ( your_side ) ;
12953: LD_OWVAR 2
12957: PPUSH
12958: CALL_OW 344
12962: END
// every 0 0$1 trigger StreamModeActive and sSun do
12963: LD_EXP 15
12967: PUSH
12968: LD_EXP 38
12972: AND
12973: IFFALSE 13001
12975: GO 12977
12977: DISABLE
// begin solar_recharge_percent := 0 ;
12978: LD_ADDR_OWVAR 79
12982: PUSH
12983: LD_INT 0
12985: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12986: LD_INT 10500
12988: PPUSH
12989: CALL_OW 67
// solar_recharge_percent := 100 ;
12993: LD_ADDR_OWVAR 79
12997: PUSH
12998: LD_INT 100
13000: ST_TO_ADDR
// end ;
13001: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13002: LD_EXP 15
13006: PUSH
13007: LD_EXP 39
13011: AND
13012: IFFALSE 13251
13014: GO 13016
13016: DISABLE
13017: LD_INT 0
13019: PPUSH
13020: PPUSH
13021: PPUSH
// begin tmp := [ ] ;
13022: LD_ADDR_VAR 0 3
13026: PUSH
13027: EMPTY
13028: ST_TO_ADDR
// for i := 1 to 6 do
13029: LD_ADDR_VAR 0 1
13033: PUSH
13034: DOUBLE
13035: LD_INT 1
13037: DEC
13038: ST_TO_ADDR
13039: LD_INT 6
13041: PUSH
13042: FOR_TO
13043: IFFALSE 13148
// begin uc_nation := nation_nature ;
13045: LD_ADDR_OWVAR 21
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// uc_side := 0 ;
13053: LD_ADDR_OWVAR 20
13057: PUSH
13058: LD_INT 0
13060: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13061: LD_ADDR_OWVAR 29
13065: PUSH
13066: LD_INT 12
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: ST_TO_ADDR
// hc_agressivity := 20 ;
13076: LD_ADDR_OWVAR 35
13080: PUSH
13081: LD_INT 20
13083: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13084: LD_ADDR_OWVAR 28
13088: PUSH
13089: LD_INT 17
13091: ST_TO_ADDR
// hc_gallery :=  ;
13092: LD_ADDR_OWVAR 33
13096: PUSH
13097: LD_STRING 
13099: ST_TO_ADDR
// hc_name :=  ;
13100: LD_ADDR_OWVAR 26
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// un := CreateHuman ;
13108: LD_ADDR_VAR 0 2
13112: PUSH
13113: CALL_OW 44
13117: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13118: LD_VAR 0 2
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 51
// tmp := tmp ^ un ;
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_VAR 0 3
13139: PUSH
13140: LD_VAR 0 2
13144: ADD
13145: ST_TO_ADDR
// end ;
13146: GO 13042
13148: POP
13149: POP
// repeat wait ( 0 0$1 ) ;
13150: LD_INT 35
13152: PPUSH
13153: CALL_OW 67
// for un in tmp do
13157: LD_ADDR_VAR 0 2
13161: PUSH
13162: LD_VAR 0 3
13166: PUSH
13167: FOR_IN
13168: IFFALSE 13242
// begin if IsDead ( un ) then
13170: LD_VAR 0 2
13174: PPUSH
13175: CALL_OW 301
13179: IFFALSE 13199
// begin tmp := tmp diff un ;
13181: LD_ADDR_VAR 0 3
13185: PUSH
13186: LD_VAR 0 3
13190: PUSH
13191: LD_VAR 0 2
13195: DIFF
13196: ST_TO_ADDR
// continue ;
13197: GO 13167
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13199: LD_VAR 0 2
13203: PPUSH
13204: LD_INT 3
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_INT 0
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: PPUSH
13226: LD_VAR 0 2
13230: PPUSH
13231: CALL_OW 74
13235: PPUSH
13236: CALL_OW 115
// end ;
13240: GO 13167
13242: POP
13243: POP
// until not tmp ;
13244: LD_VAR 0 3
13248: NOT
13249: IFFALSE 13150
// end ;
13251: PPOPN 3
13253: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13254: LD_EXP 15
13258: PUSH
13259: LD_EXP 40
13263: AND
13264: IFFALSE 13318
13266: GO 13268
13268: DISABLE
// begin ToLua ( displayTroll(); ) ;
13269: LD_STRING displayTroll();
13271: PPUSH
13272: CALL_OW 559
// wait ( 3 3$00 ) ;
13276: LD_INT 6300
13278: PPUSH
13279: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13283: LD_STRING hideTroll();
13285: PPUSH
13286: CALL_OW 559
// wait ( 1 1$00 ) ;
13290: LD_INT 2100
13292: PPUSH
13293: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13297: LD_STRING displayTroll();
13299: PPUSH
13300: CALL_OW 559
// wait ( 1 1$00 ) ;
13304: LD_INT 2100
13306: PPUSH
13307: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13311: LD_STRING hideTroll();
13313: PPUSH
13314: CALL_OW 559
// end ;
13318: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13319: LD_EXP 15
13323: PUSH
13324: LD_EXP 41
13328: AND
13329: IFFALSE 13392
13331: GO 13333
13333: DISABLE
13334: LD_INT 0
13336: PPUSH
// begin p := 0 ;
13337: LD_ADDR_VAR 0 1
13341: PUSH
13342: LD_INT 0
13344: ST_TO_ADDR
// repeat game_speed := 1 ;
13345: LD_ADDR_OWVAR 65
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13353: LD_INT 35
13355: PPUSH
13356: CALL_OW 67
// p := p + 1 ;
13360: LD_ADDR_VAR 0 1
13364: PUSH
13365: LD_VAR 0 1
13369: PUSH
13370: LD_INT 1
13372: PLUS
13373: ST_TO_ADDR
// until p >= 60 ;
13374: LD_VAR 0 1
13378: PUSH
13379: LD_INT 60
13381: GREATEREQUAL
13382: IFFALSE 13345
// game_speed := 4 ;
13384: LD_ADDR_OWVAR 65
13388: PUSH
13389: LD_INT 4
13391: ST_TO_ADDR
// end ;
13392: PPOPN 1
13394: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13395: LD_EXP 15
13399: PUSH
13400: LD_EXP 42
13404: AND
13405: IFFALSE 13551
13407: GO 13409
13409: DISABLE
13410: LD_INT 0
13412: PPUSH
13413: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13414: LD_ADDR_VAR 0 1
13418: PUSH
13419: LD_INT 22
13421: PUSH
13422: LD_OWVAR 2
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 2
13433: PUSH
13434: LD_INT 30
13436: PUSH
13437: LD_INT 0
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 30
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// if not depot then
13468: LD_VAR 0 1
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13551
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13477: LD_ADDR_VAR 0 2
13481: PUSH
13482: LD_VAR 0 1
13486: PUSH
13487: LD_INT 1
13489: PPUSH
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL_OW 12
13499: ARRAY
13500: PPUSH
13501: CALL_OW 274
13505: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13506: LD_VAR 0 2
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: LD_INT 0
13516: PPUSH
13517: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13521: LD_VAR 0 2
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: LD_INT 0
13531: PPUSH
13532: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13536: LD_VAR 0 2
13540: PPUSH
13541: LD_INT 3
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 277
// end ;
13551: PPOPN 2
13553: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13554: LD_EXP 15
13558: PUSH
13559: LD_EXP 43
13563: AND
13564: IFFALSE 13661
13566: GO 13568
13568: DISABLE
13569: LD_INT 0
13571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_OWVAR 2
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 21
13591: PUSH
13592: LD_INT 1
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: LD_INT 23
13604: PUSH
13605: LD_INT 0
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: ST_TO_ADDR
// if not tmp then
13626: LD_VAR 0 1
13630: NOT
13631: IFFALSE 13635
// exit ;
13633: GO 13661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13635: LD_VAR 0 1
13639: PUSH
13640: LD_INT 1
13642: PPUSH
13643: LD_VAR 0 1
13647: PPUSH
13648: CALL_OW 12
13652: ARRAY
13653: PPUSH
13654: LD_INT 200
13656: PPUSH
13657: CALL_OW 234
// end ;
13661: PPOPN 1
13663: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13664: LD_EXP 15
13668: PUSH
13669: LD_EXP 44
13673: AND
13674: IFFALSE 13753
13676: GO 13678
13678: DISABLE
13679: LD_INT 0
13681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_INT 22
13689: PUSH
13690: LD_OWVAR 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 21
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 69
13717: ST_TO_ADDR
// if not tmp then
13718: LD_VAR 0 1
13722: NOT
13723: IFFALSE 13727
// exit ;
13725: GO 13753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13727: LD_VAR 0 1
13731: PUSH
13732: LD_INT 1
13734: PPUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 12
13744: ARRAY
13745: PPUSH
13746: LD_INT 60
13748: PPUSH
13749: CALL_OW 234
// end ;
13753: PPOPN 1
13755: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13756: LD_EXP 15
13760: PUSH
13761: LD_EXP 45
13765: AND
13766: IFFALSE 13865
13768: GO 13770
13770: DISABLE
13771: LD_INT 0
13773: PPUSH
13774: PPUSH
// begin enable ;
13775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13776: LD_ADDR_VAR 0 1
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_OWVAR 2
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 61
13795: PUSH
13796: EMPTY
13797: LIST
13798: PUSH
13799: LD_INT 33
13801: PUSH
13802: LD_INT 2
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: ST_TO_ADDR
// if not tmp then
13819: LD_VAR 0 1
13823: NOT
13824: IFFALSE 13828
// exit ;
13826: GO 13865
// for i in tmp do
13828: LD_ADDR_VAR 0 2
13832: PUSH
13833: LD_VAR 0 1
13837: PUSH
13838: FOR_IN
13839: IFFALSE 13863
// if IsControledBy ( i ) then
13841: LD_VAR 0 2
13845: PPUSH
13846: CALL_OW 312
13850: IFFALSE 13861
// ComUnlink ( i ) ;
13852: LD_VAR 0 2
13856: PPUSH
13857: CALL_OW 136
13861: GO 13838
13863: POP
13864: POP
// end ;
13865: PPOPN 2
13867: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13868: LD_EXP 15
13872: PUSH
13873: LD_EXP 46
13877: AND
13878: IFFALSE 14018
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
13886: PPUSH
// begin ToLua ( displayPowell(); ) ;
13887: LD_STRING displayPowell();
13889: PPUSH
13890: CALL_OW 559
// uc_side := 0 ;
13894: LD_ADDR_OWVAR 20
13898: PUSH
13899: LD_INT 0
13901: ST_TO_ADDR
// uc_nation := 2 ;
13902: LD_ADDR_OWVAR 21
13906: PUSH
13907: LD_INT 2
13909: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13910: LD_ADDR_OWVAR 37
13914: PUSH
13915: LD_INT 14
13917: ST_TO_ADDR
// vc_engine := engine_siberite ;
13918: LD_ADDR_OWVAR 39
13922: PUSH
13923: LD_INT 3
13925: ST_TO_ADDR
// vc_control := control_apeman ;
13926: LD_ADDR_OWVAR 38
13930: PUSH
13931: LD_INT 5
13933: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13934: LD_ADDR_OWVAR 40
13938: PUSH
13939: LD_INT 29
13941: ST_TO_ADDR
// un := CreateVehicle ;
13942: LD_ADDR_VAR 0 2
13946: PUSH
13947: CALL_OW 45
13951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13952: LD_VAR 0 2
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13964: LD_INT 35
13966: PPUSH
13967: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13971: LD_VAR 0 2
13975: PPUSH
13976: LD_INT 22
13978: PUSH
13979: LD_OWVAR 2
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL_OW 69
13992: PPUSH
13993: LD_VAR 0 2
13997: PPUSH
13998: CALL_OW 74
14002: PPUSH
14003: CALL_OW 115
// until IsDead ( un ) ;
14007: LD_VAR 0 2
14011: PPUSH
14012: CALL_OW 301
14016: IFFALSE 13964
// end ;
14018: PPOPN 2
14020: END
// every 0 0$1 trigger StreamModeActive and sStu do
14021: LD_EXP 15
14025: PUSH
14026: LD_EXP 54
14030: AND
14031: IFFALSE 14047
14033: GO 14035
14035: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14036: LD_STRING displayStucuk();
14038: PPUSH
14039: CALL_OW 559
// ResetFog ;
14043: CALL_OW 335
// end ;
14047: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14048: LD_EXP 15
14052: PUSH
14053: LD_EXP 47
14057: AND
14058: IFFALSE 14199
14060: GO 14062
14062: DISABLE
14063: LD_INT 0
14065: PPUSH
14066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14067: LD_ADDR_VAR 0 2
14071: PUSH
14072: LD_INT 22
14074: PUSH
14075: LD_OWVAR 2
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 21
14086: PUSH
14087: LD_INT 1
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PPUSH
14098: CALL_OW 69
14102: ST_TO_ADDR
// if not tmp then
14103: LD_VAR 0 2
14107: NOT
14108: IFFALSE 14112
// exit ;
14110: GO 14199
// un := tmp [ rand ( 1 , tmp ) ] ;
14112: LD_ADDR_VAR 0 1
14116: PUSH
14117: LD_VAR 0 2
14121: PUSH
14122: LD_INT 1
14124: PPUSH
14125: LD_VAR 0 2
14129: PPUSH
14130: CALL_OW 12
14134: ARRAY
14135: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14136: LD_VAR 0 1
14140: PPUSH
14141: LD_INT 0
14143: PPUSH
14144: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14148: LD_VAR 0 1
14152: PPUSH
14153: LD_OWVAR 3
14157: PUSH
14158: LD_VAR 0 1
14162: DIFF
14163: PPUSH
14164: LD_VAR 0 1
14168: PPUSH
14169: CALL_OW 74
14173: PPUSH
14174: CALL_OW 115
// wait ( 0 0$20 ) ;
14178: LD_INT 700
14180: PPUSH
14181: CALL_OW 67
// SetSide ( un , your_side ) ;
14185: LD_VAR 0 1
14189: PPUSH
14190: LD_OWVAR 2
14194: PPUSH
14195: CALL_OW 235
// end ;
14199: PPOPN 2
14201: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14202: LD_EXP 15
14206: PUSH
14207: LD_EXP 48
14211: AND
14212: IFFALSE 14318
14214: GO 14216
14216: DISABLE
14217: LD_INT 0
14219: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14220: LD_ADDR_VAR 0 1
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_OWVAR 2
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: LD_INT 30
14242: PUSH
14243: LD_INT 0
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 30
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 69
14273: ST_TO_ADDR
// if not depot then
14274: LD_VAR 0 1
14278: NOT
14279: IFFALSE 14283
// exit ;
14281: GO 14318
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14283: LD_VAR 0 1
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: CALL_OW 250
14296: PPUSH
14297: LD_VAR 0 1
14301: PUSH
14302: LD_INT 1
14304: ARRAY
14305: PPUSH
14306: CALL_OW 251
14310: PPUSH
14311: LD_INT 70
14313: PPUSH
14314: CALL_OW 495
// end ;
14318: PPOPN 1
14320: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14321: LD_EXP 15
14325: PUSH
14326: LD_EXP 49
14330: AND
14331: IFFALSE 14542
14333: GO 14335
14335: DISABLE
14336: LD_INT 0
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14343: LD_ADDR_VAR 0 5
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_OWVAR 2
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 21
14362: PUSH
14363: LD_INT 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PPUSH
14374: CALL_OW 69
14378: ST_TO_ADDR
// if not tmp then
14379: LD_VAR 0 5
14383: NOT
14384: IFFALSE 14388
// exit ;
14386: GO 14542
// for i in tmp do
14388: LD_ADDR_VAR 0 1
14392: PUSH
14393: LD_VAR 0 5
14397: PUSH
14398: FOR_IN
14399: IFFALSE 14540
// begin d := rand ( 0 , 5 ) ;
14401: LD_ADDR_VAR 0 4
14405: PUSH
14406: LD_INT 0
14408: PPUSH
14409: LD_INT 5
14411: PPUSH
14412: CALL_OW 12
14416: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14417: LD_ADDR_VAR 0 2
14421: PUSH
14422: LD_VAR 0 1
14426: PPUSH
14427: CALL_OW 250
14431: PPUSH
14432: LD_VAR 0 4
14436: PPUSH
14437: LD_INT 3
14439: PPUSH
14440: LD_INT 12
14442: PPUSH
14443: CALL_OW 12
14447: PPUSH
14448: CALL_OW 272
14452: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14453: LD_ADDR_VAR 0 3
14457: PUSH
14458: LD_VAR 0 1
14462: PPUSH
14463: CALL_OW 251
14467: PPUSH
14468: LD_VAR 0 4
14472: PPUSH
14473: LD_INT 3
14475: PPUSH
14476: LD_INT 12
14478: PPUSH
14479: CALL_OW 12
14483: PPUSH
14484: CALL_OW 273
14488: ST_TO_ADDR
// if ValidHex ( x , y ) then
14489: LD_VAR 0 2
14493: PPUSH
14494: LD_VAR 0 3
14498: PPUSH
14499: CALL_OW 488
14503: IFFALSE 14538
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14505: LD_VAR 0 1
14509: PPUSH
14510: LD_VAR 0 2
14514: PPUSH
14515: LD_VAR 0 3
14519: PPUSH
14520: LD_INT 3
14522: PPUSH
14523: LD_INT 6
14525: PPUSH
14526: CALL_OW 12
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: CALL_OW 483
// end ;
14538: GO 14398
14540: POP
14541: POP
// end ;
14542: PPOPN 5
14544: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14545: LD_EXP 15
14549: PUSH
14550: LD_EXP 50
14554: AND
14555: IFFALSE 14649
14557: GO 14559
14559: DISABLE
14560: LD_INT 0
14562: PPUSH
14563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14564: LD_ADDR_VAR 0 2
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_OWVAR 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 32
14583: PUSH
14584: LD_INT 1
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 21
14593: PUSH
14594: LD_INT 2
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: ST_TO_ADDR
// if not tmp then
14611: LD_VAR 0 2
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 14649
// for i in tmp do
14620: LD_ADDR_VAR 0 1
14624: PUSH
14625: LD_VAR 0 2
14629: PUSH
14630: FOR_IN
14631: IFFALSE 14647
// SetFuel ( i , 0 ) ;
14633: LD_VAR 0 1
14637: PPUSH
14638: LD_INT 0
14640: PPUSH
14641: CALL_OW 240
14645: GO 14630
14647: POP
14648: POP
// end ;
14649: PPOPN 2
14651: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14652: LD_EXP 15
14656: PUSH
14657: LD_EXP 51
14661: AND
14662: IFFALSE 14728
14664: GO 14666
14666: DISABLE
14667: LD_INT 0
14669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14670: LD_ADDR_VAR 0 1
14674: PUSH
14675: LD_INT 22
14677: PUSH
14678: LD_OWVAR 2
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 30
14689: PUSH
14690: LD_INT 29
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PPUSH
14701: CALL_OW 69
14705: ST_TO_ADDR
// if not tmp then
14706: LD_VAR 0 1
14710: NOT
14711: IFFALSE 14715
// exit ;
14713: GO 14728
// DestroyUnit ( tmp [ 1 ] ) ;
14715: LD_VAR 0 1
14719: PUSH
14720: LD_INT 1
14722: ARRAY
14723: PPUSH
14724: CALL_OW 65
// end ;
14728: PPOPN 1
14730: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14731: LD_EXP 15
14735: PUSH
14736: LD_EXP 53
14740: AND
14741: IFFALSE 14870
14743: GO 14745
14745: DISABLE
14746: LD_INT 0
14748: PPUSH
// begin uc_side := 0 ;
14749: LD_ADDR_OWVAR 20
14753: PUSH
14754: LD_INT 0
14756: ST_TO_ADDR
// uc_nation := nation_arabian ;
14757: LD_ADDR_OWVAR 21
14761: PUSH
14762: LD_INT 2
14764: ST_TO_ADDR
// hc_gallery :=  ;
14765: LD_ADDR_OWVAR 33
14769: PUSH
14770: LD_STRING 
14772: ST_TO_ADDR
// hc_name :=  ;
14773: LD_ADDR_OWVAR 26
14777: PUSH
14778: LD_STRING 
14780: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14781: LD_INT 1
14783: PPUSH
14784: LD_INT 11
14786: PPUSH
14787: LD_INT 10
14789: PPUSH
14790: CALL_OW 380
// un := CreateHuman ;
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: CALL_OW 44
14803: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14804: LD_VAR 0 1
14808: PPUSH
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14816: LD_INT 35
14818: PPUSH
14819: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: LD_INT 22
14830: PUSH
14831: LD_OWVAR 2
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PPUSH
14845: LD_VAR 0 1
14849: PPUSH
14850: CALL_OW 74
14854: PPUSH
14855: CALL_OW 115
// until IsDead ( un ) ;
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 301
14868: IFFALSE 14816
// end ;
14870: PPOPN 1
14872: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14873: LD_EXP 15
14877: PUSH
14878: LD_EXP 55
14882: AND
14883: IFFALSE 14895
14885: GO 14887
14887: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14888: LD_STRING earthquake(getX(game), 0, 32)
14890: PPUSH
14891: CALL_OW 559
14895: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14896: LD_EXP 15
14900: PUSH
14901: LD_EXP 56
14905: AND
14906: IFFALSE 14997
14908: GO 14910
14910: DISABLE
14911: LD_INT 0
14913: PPUSH
// begin enable ;
14914: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14915: LD_ADDR_VAR 0 1
14919: PUSH
14920: LD_INT 22
14922: PUSH
14923: LD_OWVAR 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: LD_INT 2
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 33
14944: PUSH
14945: LD_INT 3
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: PPUSH
14957: CALL_OW 69
14961: ST_TO_ADDR
// if not tmp then
14962: LD_VAR 0 1
14966: NOT
14967: IFFALSE 14971
// exit ;
14969: GO 14997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14971: LD_VAR 0 1
14975: PUSH
14976: LD_INT 1
14978: PPUSH
14979: LD_VAR 0 1
14983: PPUSH
14984: CALL_OW 12
14988: ARRAY
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: CALL_OW 234
// end ;
14997: PPOPN 1
14999: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15000: LD_EXP 15
15004: PUSH
15005: LD_EXP 57
15009: AND
15010: IFFALSE 15151
15012: GO 15014
15014: DISABLE
15015: LD_INT 0
15017: PPUSH
15018: PPUSH
15019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15020: LD_ADDR_VAR 0 3
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_OWVAR 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 25
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: ST_TO_ADDR
// if not tmp then
15056: LD_VAR 0 3
15060: NOT
15061: IFFALSE 15065
// exit ;
15063: GO 15151
// un := tmp [ rand ( 1 , tmp ) ] ;
15065: LD_ADDR_VAR 0 2
15069: PUSH
15070: LD_VAR 0 3
15074: PUSH
15075: LD_INT 1
15077: PPUSH
15078: LD_VAR 0 3
15082: PPUSH
15083: CALL_OW 12
15087: ARRAY
15088: ST_TO_ADDR
// if Crawls ( un ) then
15089: LD_VAR 0 2
15093: PPUSH
15094: CALL_OW 318
15098: IFFALSE 15109
// ComWalk ( un ) ;
15100: LD_VAR 0 2
15104: PPUSH
15105: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15109: LD_VAR 0 2
15113: PPUSH
15114: LD_INT 9
15116: PPUSH
15117: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15121: LD_INT 28
15123: PPUSH
15124: LD_OWVAR 2
15128: PPUSH
15129: LD_INT 2
15131: PPUSH
15132: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15136: LD_INT 29
15138: PPUSH
15139: LD_OWVAR 2
15143: PPUSH
15144: LD_INT 2
15146: PPUSH
15147: CALL_OW 322
// end ;
15151: PPOPN 3
15153: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15154: LD_EXP 15
15158: PUSH
15159: LD_EXP 58
15163: AND
15164: IFFALSE 15275
15166: GO 15168
15168: DISABLE
15169: LD_INT 0
15171: PPUSH
15172: PPUSH
15173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15174: LD_ADDR_VAR 0 3
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_OWVAR 2
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 25
15193: PUSH
15194: LD_INT 1
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PPUSH
15205: CALL_OW 69
15209: ST_TO_ADDR
// if not tmp then
15210: LD_VAR 0 3
15214: NOT
15215: IFFALSE 15219
// exit ;
15217: GO 15275
// un := tmp [ rand ( 1 , tmp ) ] ;
15219: LD_ADDR_VAR 0 2
15223: PUSH
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 1
15231: PPUSH
15232: LD_VAR 0 3
15236: PPUSH
15237: CALL_OW 12
15241: ARRAY
15242: ST_TO_ADDR
// if Crawls ( un ) then
15243: LD_VAR 0 2
15247: PPUSH
15248: CALL_OW 318
15252: IFFALSE 15263
// ComWalk ( un ) ;
15254: LD_VAR 0 2
15258: PPUSH
15259: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15263: LD_VAR 0 2
15267: PPUSH
15268: LD_INT 8
15270: PPUSH
15271: CALL_OW 336
// end ;
15275: PPOPN 3
15277: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15278: LD_EXP 15
15282: PUSH
15283: LD_EXP 59
15287: AND
15288: IFFALSE 15432
15290: GO 15292
15292: DISABLE
15293: LD_INT 0
15295: PPUSH
15296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15297: LD_ADDR_VAR 0 2
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_OWVAR 2
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 2
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 2
15326: PUSH
15327: LD_INT 34
15329: PUSH
15330: LD_INT 12
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 34
15339: PUSH
15340: LD_INT 51
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 34
15349: PUSH
15350: LD_INT 32
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: PPUSH
15368: CALL_OW 69
15372: ST_TO_ADDR
// if not tmp then
15373: LD_VAR 0 2
15377: NOT
15378: IFFALSE 15382
// exit ;
15380: GO 15432
// for i in tmp do
15382: LD_ADDR_VAR 0 1
15386: PUSH
15387: LD_VAR 0 2
15391: PUSH
15392: FOR_IN
15393: IFFALSE 15430
// if GetCargo ( i , mat_artifact ) = 0 then
15395: LD_VAR 0 1
15399: PPUSH
15400: LD_INT 4
15402: PPUSH
15403: CALL_OW 289
15407: PUSH
15408: LD_INT 0
15410: EQUAL
15411: IFFALSE 15428
// SetCargo ( i , mat_siberit , 100 ) ;
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 3
15420: PPUSH
15421: LD_INT 100
15423: PPUSH
15424: CALL_OW 290
15428: GO 15392
15430: POP
15431: POP
// end ;
15432: PPOPN 2
15434: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15435: LD_EXP 15
15439: PUSH
15440: LD_EXP 60
15444: AND
15445: IFFALSE 15628
15447: GO 15449
15449: DISABLE
15450: LD_INT 0
15452: PPUSH
15453: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_OWVAR 2
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: ST_TO_ADDR
// if not tmp then
15476: LD_VAR 0 2
15480: NOT
15481: IFFALSE 15485
// exit ;
15483: GO 15628
// for i := 1 to 2 do
15485: LD_ADDR_VAR 0 1
15489: PUSH
15490: DOUBLE
15491: LD_INT 1
15493: DEC
15494: ST_TO_ADDR
15495: LD_INT 2
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15626
// begin uc_side := your_side ;
15501: LD_ADDR_OWVAR 20
15505: PUSH
15506: LD_OWVAR 2
15510: ST_TO_ADDR
// uc_nation := nation_american ;
15511: LD_ADDR_OWVAR 21
15515: PUSH
15516: LD_INT 1
15518: ST_TO_ADDR
// vc_chassis := us_morphling ;
15519: LD_ADDR_OWVAR 37
15523: PUSH
15524: LD_INT 5
15526: ST_TO_ADDR
// vc_engine := engine_siberite ;
15527: LD_ADDR_OWVAR 39
15531: PUSH
15532: LD_INT 3
15534: ST_TO_ADDR
// vc_control := control_computer ;
15535: LD_ADDR_OWVAR 38
15539: PUSH
15540: LD_INT 3
15542: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15543: LD_ADDR_OWVAR 40
15547: PUSH
15548: LD_INT 10
15550: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15551: LD_VAR 0 2
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: PPUSH
15560: CALL_OW 310
15564: NOT
15565: IFFALSE 15612
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15567: CALL_OW 45
15571: PPUSH
15572: LD_VAR 0 2
15576: PUSH
15577: LD_INT 1
15579: ARRAY
15580: PPUSH
15581: CALL_OW 250
15585: PPUSH
15586: LD_VAR 0 2
15590: PUSH
15591: LD_INT 1
15593: ARRAY
15594: PPUSH
15595: CALL_OW 251
15599: PPUSH
15600: LD_INT 12
15602: PPUSH
15603: LD_INT 1
15605: PPUSH
15606: CALL_OW 50
15610: GO 15624
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15612: CALL_OW 45
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 51
// end ;
15624: GO 15498
15626: POP
15627: POP
// end ;
15628: PPOPN 2
15630: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15631: LD_EXP 15
15635: PUSH
15636: LD_EXP 61
15640: AND
15641: IFFALSE 15863
15643: GO 15645
15645: DISABLE
15646: LD_INT 0
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15654: LD_ADDR_VAR 0 6
15658: PUSH
15659: LD_INT 22
15661: PUSH
15662: LD_OWVAR 2
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 21
15673: PUSH
15674: LD_INT 1
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 3
15683: PUSH
15684: LD_INT 23
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// if not tmp then
15708: LD_VAR 0 6
15712: NOT
15713: IFFALSE 15717
// exit ;
15715: GO 15863
// s1 := rand ( 1 , 4 ) ;
15717: LD_ADDR_VAR 0 2
15721: PUSH
15722: LD_INT 1
15724: PPUSH
15725: LD_INT 4
15727: PPUSH
15728: CALL_OW 12
15732: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15733: LD_ADDR_VAR 0 4
15737: PUSH
15738: LD_VAR 0 6
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: LD_VAR 0 2
15751: PPUSH
15752: CALL_OW 259
15756: ST_TO_ADDR
// if s1 = 1 then
15757: LD_VAR 0 2
15761: PUSH
15762: LD_INT 1
15764: EQUAL
15765: IFFALSE 15785
// s2 := rand ( 2 , 4 ) else
15767: LD_ADDR_VAR 0 3
15771: PUSH
15772: LD_INT 2
15774: PPUSH
15775: LD_INT 4
15777: PPUSH
15778: CALL_OW 12
15782: ST_TO_ADDR
15783: GO 15793
// s2 := 1 ;
15785: LD_ADDR_VAR 0 3
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15793: LD_ADDR_VAR 0 5
15797: PUSH
15798: LD_VAR 0 6
15802: PUSH
15803: LD_INT 1
15805: ARRAY
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: CALL_OW 259
15816: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15817: LD_VAR 0 6
15821: PUSH
15822: LD_INT 1
15824: ARRAY
15825: PPUSH
15826: LD_VAR 0 2
15830: PPUSH
15831: LD_VAR 0 5
15835: PPUSH
15836: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15840: LD_VAR 0 6
15844: PUSH
15845: LD_INT 1
15847: ARRAY
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_VAR 0 4
15858: PPUSH
15859: CALL_OW 237
// end ;
15863: PPOPN 6
15865: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15866: LD_EXP 15
15870: PUSH
15871: LD_EXP 62
15875: AND
15876: IFFALSE 15955
15878: GO 15880
15880: DISABLE
15881: LD_INT 0
15883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15884: LD_ADDR_VAR 0 1
15888: PUSH
15889: LD_INT 22
15891: PUSH
15892: LD_OWVAR 2
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 30
15903: PUSH
15904: LD_INT 3
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PPUSH
15915: CALL_OW 69
15919: ST_TO_ADDR
// if not tmp then
15920: LD_VAR 0 1
15924: NOT
15925: IFFALSE 15929
// exit ;
15927: GO 15955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15929: LD_VAR 0 1
15933: PUSH
15934: LD_INT 1
15936: PPUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 12
15946: ARRAY
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 234
// end ;
15955: PPOPN 1
15957: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15958: LD_EXP 15
15962: PUSH
15963: LD_EXP 63
15967: AND
15968: IFFALSE 16080
15970: GO 15972
15972: DISABLE
15973: LD_INT 0
15975: PPUSH
15976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15977: LD_ADDR_VAR 0 2
15981: PUSH
15982: LD_INT 22
15984: PUSH
15985: LD_OWVAR 2
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 2
15996: PUSH
15997: LD_INT 30
15999: PUSH
16000: LD_INT 27
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 30
16009: PUSH
16010: LD_INT 26
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 30
16019: PUSH
16020: LD_INT 28
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PPUSH
16037: CALL_OW 69
16041: ST_TO_ADDR
// if not tmp then
16042: LD_VAR 0 2
16046: NOT
16047: IFFALSE 16051
// exit ;
16049: GO 16080
// for i in tmp do
16051: LD_ADDR_VAR 0 1
16055: PUSH
16056: LD_VAR 0 2
16060: PUSH
16061: FOR_IN
16062: IFFALSE 16078
// SetLives ( i , 1 ) ;
16064: LD_VAR 0 1
16068: PPUSH
16069: LD_INT 1
16071: PPUSH
16072: CALL_OW 234
16076: GO 16061
16078: POP
16079: POP
// end ;
16080: PPOPN 2
16082: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16083: LD_EXP 15
16087: PUSH
16088: LD_EXP 64
16092: AND
16093: IFFALSE 16380
16095: GO 16097
16097: DISABLE
16098: LD_INT 0
16100: PPUSH
16101: PPUSH
16102: PPUSH
// begin i := rand ( 1 , 7 ) ;
16103: LD_ADDR_VAR 0 1
16107: PUSH
16108: LD_INT 1
16110: PPUSH
16111: LD_INT 7
16113: PPUSH
16114: CALL_OW 12
16118: ST_TO_ADDR
// case i of 1 :
16119: LD_VAR 0 1
16123: PUSH
16124: LD_INT 1
16126: DOUBLE
16127: EQUAL
16128: IFTRUE 16132
16130: GO 16142
16132: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16133: LD_STRING earthquake(getX(game), 0, 32)
16135: PPUSH
16136: CALL_OW 559
16140: GO 16380
16142: LD_INT 2
16144: DOUBLE
16145: EQUAL
16146: IFTRUE 16150
16148: GO 16164
16150: POP
// begin ToLua ( displayStucuk(); ) ;
16151: LD_STRING displayStucuk();
16153: PPUSH
16154: CALL_OW 559
// ResetFog ;
16158: CALL_OW 335
// end ; 3 :
16162: GO 16380
16164: LD_INT 3
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16276
16172: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16173: LD_ADDR_VAR 0 2
16177: PUSH
16178: LD_INT 22
16180: PUSH
16181: LD_OWVAR 2
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 25
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 69
16208: ST_TO_ADDR
// if not tmp then
16209: LD_VAR 0 2
16213: NOT
16214: IFFALSE 16218
// exit ;
16216: GO 16380
// un := tmp [ rand ( 1 , tmp ) ] ;
16218: LD_ADDR_VAR 0 3
16222: PUSH
16223: LD_VAR 0 2
16227: PUSH
16228: LD_INT 1
16230: PPUSH
16231: LD_VAR 0 2
16235: PPUSH
16236: CALL_OW 12
16240: ARRAY
16241: ST_TO_ADDR
// if Crawls ( un ) then
16242: LD_VAR 0 3
16246: PPUSH
16247: CALL_OW 318
16251: IFFALSE 16262
// ComWalk ( un ) ;
16253: LD_VAR 0 3
16257: PPUSH
16258: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16262: LD_VAR 0 3
16266: PPUSH
16267: LD_INT 8
16269: PPUSH
16270: CALL_OW 336
// end ; 4 :
16274: GO 16380
16276: LD_INT 4
16278: DOUBLE
16279: EQUAL
16280: IFTRUE 16284
16282: GO 16358
16284: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 30
16304: PUSH
16305: LD_INT 29
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// if not tmp then
16321: LD_VAR 0 2
16325: NOT
16326: IFFALSE 16330
// exit ;
16328: GO 16380
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16330: LD_VAR 0 2
16334: PUSH
16335: LD_INT 1
16337: ARRAY
16338: PPUSH
16339: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16343: LD_VAR 0 2
16347: PUSH
16348: LD_INT 1
16350: ARRAY
16351: PPUSH
16352: CALL_OW 65
// end ; 5 .. 7 :
16356: GO 16380
16358: LD_INT 5
16360: DOUBLE
16361: GREATEREQUAL
16362: IFFALSE 16370
16364: LD_INT 7
16366: DOUBLE
16367: LESSEQUAL
16368: IFTRUE 16372
16370: GO 16379
16372: POP
// StreamSibBomb ; end ;
16373: CALL 12617 0 0
16377: GO 16380
16379: POP
// end ;
16380: PPOPN 3
16382: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16383: LD_EXP 15
16387: PUSH
16388: LD_EXP 65
16392: AND
16393: IFFALSE 16549
16395: GO 16397
16397: DISABLE
16398: LD_INT 0
16400: PPUSH
16401: PPUSH
16402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: LD_INT 81
16410: PUSH
16411: LD_OWVAR 2
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: LD_INT 21
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 21
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 69
16456: ST_TO_ADDR
// if not tmp then
16457: LD_VAR 0 2
16461: NOT
16462: IFFALSE 16466
// exit ;
16464: GO 16549
// p := 0 ;
16466: LD_ADDR_VAR 0 3
16470: PUSH
16471: LD_INT 0
16473: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16474: LD_INT 35
16476: PPUSH
16477: CALL_OW 67
// p := p + 1 ;
16481: LD_ADDR_VAR 0 3
16485: PUSH
16486: LD_VAR 0 3
16490: PUSH
16491: LD_INT 1
16493: PLUS
16494: ST_TO_ADDR
// for i in tmp do
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: LD_VAR 0 2
16504: PUSH
16505: FOR_IN
16506: IFFALSE 16537
// if GetLives ( i ) < 1000 then
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 256
16517: PUSH
16518: LD_INT 1000
16520: LESS
16521: IFFALSE 16535
// SetLives ( i , 1000 ) ;
16523: LD_VAR 0 1
16527: PPUSH
16528: LD_INT 1000
16530: PPUSH
16531: CALL_OW 234
16535: GO 16505
16537: POP
16538: POP
// until p > 20 ;
16539: LD_VAR 0 3
16543: PUSH
16544: LD_INT 20
16546: GREATER
16547: IFFALSE 16474
// end ;
16549: PPOPN 3
16551: END
// every 0 0$1 trigger StreamModeActive and sTime do
16552: LD_EXP 15
16556: PUSH
16557: LD_EXP 66
16561: AND
16562: IFFALSE 16597
16564: GO 16566
16566: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16567: LD_INT 28
16569: PPUSH
16570: LD_OWVAR 2
16574: PPUSH
16575: LD_INT 2
16577: PPUSH
16578: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16582: LD_INT 30
16584: PPUSH
16585: LD_OWVAR 2
16589: PPUSH
16590: LD_INT 2
16592: PPUSH
16593: CALL_OW 322
// end ;
16597: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16598: LD_EXP 15
16602: PUSH
16603: LD_EXP 67
16607: AND
16608: IFFALSE 16729
16610: GO 16612
16612: DISABLE
16613: LD_INT 0
16615: PPUSH
16616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16617: LD_ADDR_VAR 0 2
16621: PUSH
16622: LD_INT 22
16624: PUSH
16625: LD_OWVAR 2
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 21
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 3
16646: PUSH
16647: LD_INT 23
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 69
16670: ST_TO_ADDR
// if not tmp then
16671: LD_VAR 0 2
16675: NOT
16676: IFFALSE 16680
// exit ;
16678: GO 16729
// for i in tmp do
16680: LD_ADDR_VAR 0 1
16684: PUSH
16685: LD_VAR 0 2
16689: PUSH
16690: FOR_IN
16691: IFFALSE 16727
// begin if Crawls ( i ) then
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 318
16702: IFFALSE 16713
// ComWalk ( i ) ;
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 138
// SetClass ( i , 2 ) ;
16713: LD_VAR 0 1
16717: PPUSH
16718: LD_INT 2
16720: PPUSH
16721: CALL_OW 336
// end ;
16725: GO 16690
16727: POP
16728: POP
// end ;
16729: PPOPN 2
16731: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16732: LD_EXP 15
16736: PUSH
16737: LD_EXP 68
16741: AND
16742: IFFALSE 17030
16744: GO 16746
16746: DISABLE
16747: LD_INT 0
16749: PPUSH
16750: PPUSH
16751: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16752: LD_OWVAR 2
16756: PPUSH
16757: LD_INT 9
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: LD_INT 1
16765: PPUSH
16766: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16770: LD_INT 9
16772: PPUSH
16773: LD_OWVAR 2
16777: PPUSH
16778: CALL_OW 343
// uc_side := 9 ;
16782: LD_ADDR_OWVAR 20
16786: PUSH
16787: LD_INT 9
16789: ST_TO_ADDR
// uc_nation := 2 ;
16790: LD_ADDR_OWVAR 21
16794: PUSH
16795: LD_INT 2
16797: ST_TO_ADDR
// hc_name := Dark Warrior ;
16798: LD_ADDR_OWVAR 26
16802: PUSH
16803: LD_STRING Dark Warrior
16805: ST_TO_ADDR
// hc_gallery :=  ;
16806: LD_ADDR_OWVAR 33
16810: PUSH
16811: LD_STRING 
16813: ST_TO_ADDR
// hc_noskilllimit := true ;
16814: LD_ADDR_OWVAR 76
16818: PUSH
16819: LD_INT 1
16821: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16822: LD_ADDR_OWVAR 31
16826: PUSH
16827: LD_INT 30
16829: PUSH
16830: LD_INT 30
16832: PUSH
16833: LD_INT 30
16835: PUSH
16836: LD_INT 30
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: ST_TO_ADDR
// un := CreateHuman ;
16845: LD_ADDR_VAR 0 3
16849: PUSH
16850: CALL_OW 44
16854: ST_TO_ADDR
// hc_noskilllimit := false ;
16855: LD_ADDR_OWVAR 76
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16863: LD_VAR 0 3
16867: PPUSH
16868: LD_INT 1
16870: PPUSH
16871: CALL_OW 51
// ToLua ( playRanger() ) ;
16875: LD_STRING playRanger()
16877: PPUSH
16878: CALL_OW 559
// p := 0 ;
16882: LD_ADDR_VAR 0 2
16886: PUSH
16887: LD_INT 0
16889: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// p := p + 1 ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: LD_VAR 0 2
16906: PUSH
16907: LD_INT 1
16909: PLUS
16910: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16911: LD_VAR 0 3
16915: PPUSH
16916: CALL_OW 256
16920: PUSH
16921: LD_INT 1000
16923: LESS
16924: IFFALSE 16938
// SetLives ( un , 1000 ) ;
16926: LD_VAR 0 3
16930: PPUSH
16931: LD_INT 1000
16933: PPUSH
16934: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16938: LD_VAR 0 3
16942: PPUSH
16943: LD_INT 81
16945: PUSH
16946: LD_OWVAR 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 91
16957: PUSH
16958: LD_VAR 0 3
16962: PUSH
16963: LD_INT 30
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PPUSH
16975: CALL_OW 69
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: CALL_OW 74
16989: PPUSH
16990: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16994: LD_VAR 0 2
16998: PUSH
16999: LD_INT 80
17001: GREATER
17002: PUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: CALL_OW 301
17012: OR
17013: IFFALSE 16890
// if un then
17015: LD_VAR 0 3
17019: IFFALSE 17030
// RemoveUnit ( un ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: CALL_OW 64
// end ;
17030: PPOPN 3
17032: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17033: LD_EXP 69
17037: IFFALSE 17153
17039: GO 17041
17041: DISABLE
17042: LD_INT 0
17044: PPUSH
17045: PPUSH
17046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 81
17054: PUSH
17055: LD_OWVAR 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 21
17066: PUSH
17067: LD_INT 1
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PPUSH
17078: CALL_OW 69
17082: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17083: LD_STRING playComputer()
17085: PPUSH
17086: CALL_OW 559
// if not tmp then
17090: LD_VAR 0 2
17094: NOT
17095: IFFALSE 17099
// exit ;
17097: GO 17153
// for i in tmp do
17099: LD_ADDR_VAR 0 1
17103: PUSH
17104: LD_VAR 0 2
17108: PUSH
17109: FOR_IN
17110: IFFALSE 17151
// for j := 1 to 4 do
17112: LD_ADDR_VAR 0 3
17116: PUSH
17117: DOUBLE
17118: LD_INT 1
17120: DEC
17121: ST_TO_ADDR
17122: LD_INT 4
17124: PUSH
17125: FOR_TO
17126: IFFALSE 17147
// SetSkill ( i , j , 10 ) ;
17128: LD_VAR 0 1
17132: PPUSH
17133: LD_VAR 0 3
17137: PPUSH
17138: LD_INT 10
17140: PPUSH
17141: CALL_OW 237
17145: GO 17125
17147: POP
17148: POP
17149: GO 17109
17151: POP
17152: POP
// end ;
17153: PPOPN 3
17155: END
// every 0 0$1 trigger s30 do var i , tmp ;
17156: LD_EXP 70
17160: IFFALSE 17229
17162: GO 17164
17164: DISABLE
17165: LD_INT 0
17167: PPUSH
17168: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17169: LD_ADDR_VAR 0 2
17173: PUSH
17174: LD_INT 22
17176: PUSH
17177: LD_OWVAR 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PPUSH
17186: CALL_OW 69
17190: ST_TO_ADDR
// if not tmp then
17191: LD_VAR 0 2
17195: NOT
17196: IFFALSE 17200
// exit ;
17198: GO 17229
// for i in tmp do
17200: LD_ADDR_VAR 0 1
17204: PUSH
17205: LD_VAR 0 2
17209: PUSH
17210: FOR_IN
17211: IFFALSE 17227
// SetLives ( i , 300 ) ;
17213: LD_VAR 0 1
17217: PPUSH
17218: LD_INT 300
17220: PPUSH
17221: CALL_OW 234
17225: GO 17210
17227: POP
17228: POP
// end ;
17229: PPOPN 2
17231: END
// every 0 0$1 trigger s60 do var i , tmp ;
17232: LD_EXP 71
17236: IFFALSE 17305
17238: GO 17240
17240: DISABLE
17241: LD_INT 0
17243: PPUSH
17244: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17245: LD_ADDR_VAR 0 2
17249: PUSH
17250: LD_INT 22
17252: PUSH
17253: LD_OWVAR 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PPUSH
17262: CALL_OW 69
17266: ST_TO_ADDR
// if not tmp then
17267: LD_VAR 0 2
17271: NOT
17272: IFFALSE 17276
// exit ;
17274: GO 17305
// for i in tmp do
17276: LD_ADDR_VAR 0 1
17280: PUSH
17281: LD_VAR 0 2
17285: PUSH
17286: FOR_IN
17287: IFFALSE 17303
// SetLives ( i , 600 ) ;
17289: LD_VAR 0 1
17293: PPUSH
17294: LD_INT 600
17296: PPUSH
17297: CALL_OW 234
17301: GO 17286
17303: POP
17304: POP
// end ;
17305: PPOPN 2
17307: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17308: LD_INT 0
17310: PPUSH
// case cmd of 301 :
17311: LD_VAR 0 1
17315: PUSH
17316: LD_INT 301
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17356
17324: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17325: LD_VAR 0 6
17329: PPUSH
17330: LD_VAR 0 7
17334: PPUSH
17335: LD_VAR 0 8
17339: PPUSH
17340: LD_VAR 0 4
17344: PPUSH
17345: LD_VAR 0 5
17349: PPUSH
17350: CALL 18557 0 5
17354: GO 17477
17356: LD_INT 302
17358: DOUBLE
17359: EQUAL
17360: IFTRUE 17364
17362: GO 17401
17364: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17365: LD_VAR 0 6
17369: PPUSH
17370: LD_VAR 0 7
17374: PPUSH
17375: LD_VAR 0 8
17379: PPUSH
17380: LD_VAR 0 9
17384: PPUSH
17385: LD_VAR 0 4
17389: PPUSH
17390: LD_VAR 0 5
17394: PPUSH
17395: CALL 18648 0 6
17399: GO 17477
17401: LD_INT 303
17403: DOUBLE
17404: EQUAL
17405: IFTRUE 17409
17407: GO 17446
17409: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17410: LD_VAR 0 6
17414: PPUSH
17415: LD_VAR 0 7
17419: PPUSH
17420: LD_VAR 0 8
17424: PPUSH
17425: LD_VAR 0 9
17429: PPUSH
17430: LD_VAR 0 4
17434: PPUSH
17435: LD_VAR 0 5
17439: PPUSH
17440: CALL 17482 0 6
17444: GO 17477
17446: LD_INT 304
17448: DOUBLE
17449: EQUAL
17450: IFTRUE 17454
17452: GO 17476
17454: POP
// hHackTeleport ( unit , x , y ) ; end ;
17455: LD_VAR 0 2
17459: PPUSH
17460: LD_VAR 0 4
17464: PPUSH
17465: LD_VAR 0 5
17469: PPUSH
17470: CALL 19241 0 3
17474: GO 17477
17476: POP
// end ;
17477: LD_VAR 0 12
17481: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17482: LD_INT 0
17484: PPUSH
17485: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 1
17493: LESS
17494: PUSH
17495: LD_VAR 0 1
17499: PUSH
17500: LD_INT 3
17502: GREATER
17503: OR
17504: PUSH
17505: LD_VAR 0 5
17509: PPUSH
17510: LD_VAR 0 6
17514: PPUSH
17515: CALL_OW 428
17519: OR
17520: IFFALSE 17524
// exit ;
17522: GO 18244
// uc_side := your_side ;
17524: LD_ADDR_OWVAR 20
17528: PUSH
17529: LD_OWVAR 2
17533: ST_TO_ADDR
// uc_nation := nation ;
17534: LD_ADDR_OWVAR 21
17538: PUSH
17539: LD_VAR 0 1
17543: ST_TO_ADDR
// bc_level = 1 ;
17544: LD_ADDR_OWVAR 43
17548: PUSH
17549: LD_INT 1
17551: ST_TO_ADDR
// case btype of 1 :
17552: LD_VAR 0 2
17556: PUSH
17557: LD_INT 1
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17576
17565: POP
// bc_type := b_depot ; 2 :
17566: LD_ADDR_OWVAR 42
17570: PUSH
17571: LD_INT 0
17573: ST_TO_ADDR
17574: GO 18188
17576: LD_INT 2
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 17595
17584: POP
// bc_type := b_warehouse ; 3 :
17585: LD_ADDR_OWVAR 42
17589: PUSH
17590: LD_INT 1
17592: ST_TO_ADDR
17593: GO 18188
17595: LD_INT 3
17597: DOUBLE
17598: EQUAL
17599: IFTRUE 17603
17601: GO 17614
17603: POP
// bc_type := b_lab ; 4 .. 9 :
17604: LD_ADDR_OWVAR 42
17608: PUSH
17609: LD_INT 6
17611: ST_TO_ADDR
17612: GO 18188
17614: LD_INT 4
17616: DOUBLE
17617: GREATEREQUAL
17618: IFFALSE 17626
17620: LD_INT 9
17622: DOUBLE
17623: LESSEQUAL
17624: IFTRUE 17628
17626: GO 17680
17628: POP
// begin bc_type := b_lab_half ;
17629: LD_ADDR_OWVAR 42
17633: PUSH
17634: LD_INT 7
17636: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17637: LD_ADDR_OWVAR 44
17641: PUSH
17642: LD_INT 10
17644: PUSH
17645: LD_INT 11
17647: PUSH
17648: LD_INT 12
17650: PUSH
17651: LD_INT 15
17653: PUSH
17654: LD_INT 14
17656: PUSH
17657: LD_INT 13
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: LD_VAR 0 2
17672: PUSH
17673: LD_INT 3
17675: MINUS
17676: ARRAY
17677: ST_TO_ADDR
// end ; 10 .. 13 :
17678: GO 18188
17680: LD_INT 10
17682: DOUBLE
17683: GREATEREQUAL
17684: IFFALSE 17692
17686: LD_INT 13
17688: DOUBLE
17689: LESSEQUAL
17690: IFTRUE 17694
17692: GO 17771
17694: POP
// begin bc_type := b_lab_full ;
17695: LD_ADDR_OWVAR 42
17699: PUSH
17700: LD_INT 8
17702: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17703: LD_ADDR_OWVAR 44
17707: PUSH
17708: LD_INT 10
17710: PUSH
17711: LD_INT 12
17713: PUSH
17714: LD_INT 14
17716: PUSH
17717: LD_INT 13
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: LD_VAR 0 2
17730: PUSH
17731: LD_INT 9
17733: MINUS
17734: ARRAY
17735: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17736: LD_ADDR_OWVAR 45
17740: PUSH
17741: LD_INT 11
17743: PUSH
17744: LD_INT 15
17746: PUSH
17747: LD_INT 12
17749: PUSH
17750: LD_INT 15
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: PUSH
17759: LD_VAR 0 2
17763: PUSH
17764: LD_INT 9
17766: MINUS
17767: ARRAY
17768: ST_TO_ADDR
// end ; 14 :
17769: GO 18188
17771: LD_INT 14
17773: DOUBLE
17774: EQUAL
17775: IFTRUE 17779
17777: GO 17790
17779: POP
// bc_type := b_workshop ; 15 :
17780: LD_ADDR_OWVAR 42
17784: PUSH
17785: LD_INT 2
17787: ST_TO_ADDR
17788: GO 18188
17790: LD_INT 15
17792: DOUBLE
17793: EQUAL
17794: IFTRUE 17798
17796: GO 17809
17798: POP
// bc_type := b_factory ; 16 :
17799: LD_ADDR_OWVAR 42
17803: PUSH
17804: LD_INT 3
17806: ST_TO_ADDR
17807: GO 18188
17809: LD_INT 16
17811: DOUBLE
17812: EQUAL
17813: IFTRUE 17817
17815: GO 17828
17817: POP
// bc_type := b_ext_gun ; 17 :
17818: LD_ADDR_OWVAR 42
17822: PUSH
17823: LD_INT 17
17825: ST_TO_ADDR
17826: GO 18188
17828: LD_INT 17
17830: DOUBLE
17831: EQUAL
17832: IFTRUE 17836
17834: GO 17864
17836: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17837: LD_ADDR_OWVAR 42
17841: PUSH
17842: LD_INT 19
17844: PUSH
17845: LD_INT 23
17847: PUSH
17848: LD_INT 19
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: LIST
17855: PUSH
17856: LD_VAR 0 1
17860: ARRAY
17861: ST_TO_ADDR
17862: GO 18188
17864: LD_INT 18
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 17883
17872: POP
// bc_type := b_ext_radar ; 19 :
17873: LD_ADDR_OWVAR 42
17877: PUSH
17878: LD_INT 20
17880: ST_TO_ADDR
17881: GO 18188
17883: LD_INT 19
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 17902
17891: POP
// bc_type := b_ext_radio ; 20 :
17892: LD_ADDR_OWVAR 42
17896: PUSH
17897: LD_INT 22
17899: ST_TO_ADDR
17900: GO 18188
17902: LD_INT 20
17904: DOUBLE
17905: EQUAL
17906: IFTRUE 17910
17908: GO 17921
17910: POP
// bc_type := b_ext_siberium ; 21 :
17911: LD_ADDR_OWVAR 42
17915: PUSH
17916: LD_INT 21
17918: ST_TO_ADDR
17919: GO 18188
17921: LD_INT 21
17923: DOUBLE
17924: EQUAL
17925: IFTRUE 17929
17927: GO 17940
17929: POP
// bc_type := b_ext_computer ; 22 :
17930: LD_ADDR_OWVAR 42
17934: PUSH
17935: LD_INT 24
17937: ST_TO_ADDR
17938: GO 18188
17940: LD_INT 22
17942: DOUBLE
17943: EQUAL
17944: IFTRUE 17948
17946: GO 17959
17948: POP
// bc_type := b_ext_track ; 23 :
17949: LD_ADDR_OWVAR 42
17953: PUSH
17954: LD_INT 16
17956: ST_TO_ADDR
17957: GO 18188
17959: LD_INT 23
17961: DOUBLE
17962: EQUAL
17963: IFTRUE 17967
17965: GO 17978
17967: POP
// bc_type := b_ext_laser ; 24 :
17968: LD_ADDR_OWVAR 42
17972: PUSH
17973: LD_INT 25
17975: ST_TO_ADDR
17976: GO 18188
17978: LD_INT 24
17980: DOUBLE
17981: EQUAL
17982: IFTRUE 17986
17984: GO 17997
17986: POP
// bc_type := b_control_tower ; 25 :
17987: LD_ADDR_OWVAR 42
17991: PUSH
17992: LD_INT 36
17994: ST_TO_ADDR
17995: GO 18188
17997: LD_INT 25
17999: DOUBLE
18000: EQUAL
18001: IFTRUE 18005
18003: GO 18016
18005: POP
// bc_type := b_breastwork ; 26 :
18006: LD_ADDR_OWVAR 42
18010: PUSH
18011: LD_INT 31
18013: ST_TO_ADDR
18014: GO 18188
18016: LD_INT 26
18018: DOUBLE
18019: EQUAL
18020: IFTRUE 18024
18022: GO 18035
18024: POP
// bc_type := b_bunker ; 27 :
18025: LD_ADDR_OWVAR 42
18029: PUSH
18030: LD_INT 32
18032: ST_TO_ADDR
18033: GO 18188
18035: LD_INT 27
18037: DOUBLE
18038: EQUAL
18039: IFTRUE 18043
18041: GO 18054
18043: POP
// bc_type := b_turret ; 28 :
18044: LD_ADDR_OWVAR 42
18048: PUSH
18049: LD_INT 33
18051: ST_TO_ADDR
18052: GO 18188
18054: LD_INT 28
18056: DOUBLE
18057: EQUAL
18058: IFTRUE 18062
18060: GO 18073
18062: POP
// bc_type := b_armoury ; 29 :
18063: LD_ADDR_OWVAR 42
18067: PUSH
18068: LD_INT 4
18070: ST_TO_ADDR
18071: GO 18188
18073: LD_INT 29
18075: DOUBLE
18076: EQUAL
18077: IFTRUE 18081
18079: GO 18092
18081: POP
// bc_type := b_barracks ; 30 :
18082: LD_ADDR_OWVAR 42
18086: PUSH
18087: LD_INT 5
18089: ST_TO_ADDR
18090: GO 18188
18092: LD_INT 30
18094: DOUBLE
18095: EQUAL
18096: IFTRUE 18100
18098: GO 18111
18100: POP
// bc_type := b_solar_power ; 31 :
18101: LD_ADDR_OWVAR 42
18105: PUSH
18106: LD_INT 27
18108: ST_TO_ADDR
18109: GO 18188
18111: LD_INT 31
18113: DOUBLE
18114: EQUAL
18115: IFTRUE 18119
18117: GO 18130
18119: POP
// bc_type := b_oil_power ; 32 :
18120: LD_ADDR_OWVAR 42
18124: PUSH
18125: LD_INT 26
18127: ST_TO_ADDR
18128: GO 18188
18130: LD_INT 32
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18149
18138: POP
// bc_type := b_siberite_power ; 33 :
18139: LD_ADDR_OWVAR 42
18143: PUSH
18144: LD_INT 28
18146: ST_TO_ADDR
18147: GO 18188
18149: LD_INT 33
18151: DOUBLE
18152: EQUAL
18153: IFTRUE 18157
18155: GO 18168
18157: POP
// bc_type := b_oil_mine ; 34 :
18158: LD_ADDR_OWVAR 42
18162: PUSH
18163: LD_INT 29
18165: ST_TO_ADDR
18166: GO 18188
18168: LD_INT 34
18170: DOUBLE
18171: EQUAL
18172: IFTRUE 18176
18174: GO 18187
18176: POP
// bc_type := b_siberite_mine ; end ;
18177: LD_ADDR_OWVAR 42
18181: PUSH
18182: LD_INT 30
18184: ST_TO_ADDR
18185: GO 18188
18187: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18188: LD_ADDR_VAR 0 8
18192: PUSH
18193: LD_VAR 0 5
18197: PPUSH
18198: LD_VAR 0 6
18202: PPUSH
18203: LD_VAR 0 3
18207: PPUSH
18208: CALL_OW 47
18212: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18213: LD_OWVAR 42
18217: PUSH
18218: LD_INT 32
18220: PUSH
18221: LD_INT 33
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: IN
18228: IFFALSE 18244
// PlaceWeaponTurret ( b , weapon ) ;
18230: LD_VAR 0 8
18234: PPUSH
18235: LD_VAR 0 4
18239: PPUSH
18240: CALL_OW 431
// end ;
18244: LD_VAR 0 7
18248: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18249: LD_INT 0
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18255: LD_ADDR_VAR 0 4
18259: PUSH
18260: LD_INT 22
18262: PUSH
18263: LD_OWVAR 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: LD_INT 30
18277: PUSH
18278: LD_INT 0
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 30
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PPUSH
18304: CALL_OW 69
18308: ST_TO_ADDR
// if not tmp then
18309: LD_VAR 0 4
18313: NOT
18314: IFFALSE 18318
// exit ;
18316: GO 18377
// for i in tmp do
18318: LD_ADDR_VAR 0 2
18322: PUSH
18323: LD_VAR 0 4
18327: PUSH
18328: FOR_IN
18329: IFFALSE 18375
// for j = 1 to 3 do
18331: LD_ADDR_VAR 0 3
18335: PUSH
18336: DOUBLE
18337: LD_INT 1
18339: DEC
18340: ST_TO_ADDR
18341: LD_INT 3
18343: PUSH
18344: FOR_TO
18345: IFFALSE 18371
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18347: LD_VAR 0 2
18351: PPUSH
18352: CALL_OW 274
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 99999
18364: PPUSH
18365: CALL_OW 277
18369: GO 18344
18371: POP
18372: POP
18373: GO 18328
18375: POP
18376: POP
// end ;
18377: LD_VAR 0 1
18381: RET
// export function hHackSetLevel10 ; var i , j ; begin
18382: LD_INT 0
18384: PPUSH
18385: PPUSH
18386: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18387: LD_ADDR_VAR 0 2
18391: PUSH
18392: LD_INT 21
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18460
// if IsSelected ( i ) then
18410: LD_VAR 0 2
18414: PPUSH
18415: CALL_OW 306
18419: IFFALSE 18458
// begin for j := 1 to 4 do
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: DOUBLE
18427: LD_INT 1
18429: DEC
18430: ST_TO_ADDR
18431: LD_INT 4
18433: PUSH
18434: FOR_TO
18435: IFFALSE 18456
// SetSkill ( i , j , 10 ) ;
18437: LD_VAR 0 2
18441: PPUSH
18442: LD_VAR 0 3
18446: PPUSH
18447: LD_INT 10
18449: PPUSH
18450: CALL_OW 237
18454: GO 18434
18456: POP
18457: POP
// end ;
18458: GO 18407
18460: POP
18461: POP
// end ;
18462: LD_VAR 0 1
18466: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18467: LD_INT 0
18469: PPUSH
18470: PPUSH
18471: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18472: LD_ADDR_VAR 0 2
18476: PUSH
18477: LD_INT 22
18479: PUSH
18480: LD_OWVAR 2
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 21
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: PUSH
18508: FOR_IN
18509: IFFALSE 18550
// begin for j := 1 to 4 do
18511: LD_ADDR_VAR 0 3
18515: PUSH
18516: DOUBLE
18517: LD_INT 1
18519: DEC
18520: ST_TO_ADDR
18521: LD_INT 4
18523: PUSH
18524: FOR_TO
18525: IFFALSE 18546
// SetSkill ( i , j , 10 ) ;
18527: LD_VAR 0 2
18531: PPUSH
18532: LD_VAR 0 3
18536: PPUSH
18537: LD_INT 10
18539: PPUSH
18540: CALL_OW 237
18544: GO 18524
18546: POP
18547: POP
// end ;
18548: GO 18508
18550: POP
18551: POP
// end ;
18552: LD_VAR 0 1
18556: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18557: LD_INT 0
18559: PPUSH
// uc_side := your_side ;
18560: LD_ADDR_OWVAR 20
18564: PUSH
18565: LD_OWVAR 2
18569: ST_TO_ADDR
// uc_nation := nation ;
18570: LD_ADDR_OWVAR 21
18574: PUSH
18575: LD_VAR 0 1
18579: ST_TO_ADDR
// InitHc ;
18580: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18584: LD_INT 0
18586: PPUSH
18587: LD_VAR 0 2
18591: PPUSH
18592: LD_VAR 0 3
18596: PPUSH
18597: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18601: LD_VAR 0 4
18605: PPUSH
18606: LD_VAR 0 5
18610: PPUSH
18611: CALL_OW 428
18615: PUSH
18616: LD_INT 0
18618: EQUAL
18619: IFFALSE 18643
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18621: CALL_OW 44
18625: PPUSH
18626: LD_VAR 0 4
18630: PPUSH
18631: LD_VAR 0 5
18635: PPUSH
18636: LD_INT 1
18638: PPUSH
18639: CALL_OW 48
// end ;
18643: LD_VAR 0 6
18647: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18648: LD_INT 0
18650: PPUSH
18651: PPUSH
// uc_side := your_side ;
18652: LD_ADDR_OWVAR 20
18656: PUSH
18657: LD_OWVAR 2
18661: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18662: LD_VAR 0 1
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: LD_INT 4
18678: PUSH
18679: LD_INT 5
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: IN
18689: IFFALSE 18701
// uc_nation := nation_american else
18691: LD_ADDR_OWVAR 21
18695: PUSH
18696: LD_INT 1
18698: ST_TO_ADDR
18699: GO 18744
// if chassis in [ 11 , 12 , 13 , 14 ] then
18701: LD_VAR 0 1
18705: PUSH
18706: LD_INT 11
18708: PUSH
18709: LD_INT 12
18711: PUSH
18712: LD_INT 13
18714: PUSH
18715: LD_INT 14
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: IN
18724: IFFALSE 18736
// uc_nation := nation_arabian else
18726: LD_ADDR_OWVAR 21
18730: PUSH
18731: LD_INT 2
18733: ST_TO_ADDR
18734: GO 18744
// uc_nation := nation_russian ;
18736: LD_ADDR_OWVAR 21
18740: PUSH
18741: LD_INT 3
18743: ST_TO_ADDR
// vc_chassis := chassis ;
18744: LD_ADDR_OWVAR 37
18748: PUSH
18749: LD_VAR 0 1
18753: ST_TO_ADDR
// vc_engine := engine ;
18754: LD_ADDR_OWVAR 39
18758: PUSH
18759: LD_VAR 0 2
18763: ST_TO_ADDR
// vc_control := control ;
18764: LD_ADDR_OWVAR 38
18768: PUSH
18769: LD_VAR 0 3
18773: ST_TO_ADDR
// vc_weapon := weapon ;
18774: LD_ADDR_OWVAR 40
18778: PUSH
18779: LD_VAR 0 4
18783: ST_TO_ADDR
// un := CreateVehicle ;
18784: LD_ADDR_VAR 0 8
18788: PUSH
18789: CALL_OW 45
18793: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18794: LD_VAR 0 8
18798: PPUSH
18799: LD_INT 0
18801: PPUSH
18802: LD_INT 5
18804: PPUSH
18805: CALL_OW 12
18809: PPUSH
18810: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18814: LD_VAR 0 8
18818: PPUSH
18819: LD_VAR 0 5
18823: PPUSH
18824: LD_VAR 0 6
18828: PPUSH
18829: LD_INT 1
18831: PPUSH
18832: CALL_OW 48
// end ;
18836: LD_VAR 0 7
18840: RET
// export hInvincible ; every 1 do
18841: GO 18843
18843: DISABLE
// hInvincible := [ ] ;
18844: LD_ADDR_EXP 72
18848: PUSH
18849: EMPTY
18850: ST_TO_ADDR
18851: END
// every 10 do var i ;
18852: GO 18854
18854: DISABLE
18855: LD_INT 0
18857: PPUSH
// begin enable ;
18858: ENABLE
// if not hInvincible then
18859: LD_EXP 72
18863: NOT
18864: IFFALSE 18868
// exit ;
18866: GO 18912
// for i in hInvincible do
18868: LD_ADDR_VAR 0 1
18872: PUSH
18873: LD_EXP 72
18877: PUSH
18878: FOR_IN
18879: IFFALSE 18910
// if GetLives ( i ) < 1000 then
18881: LD_VAR 0 1
18885: PPUSH
18886: CALL_OW 256
18890: PUSH
18891: LD_INT 1000
18893: LESS
18894: IFFALSE 18908
// SetLives ( i , 1000 ) ;
18896: LD_VAR 0 1
18900: PPUSH
18901: LD_INT 1000
18903: PPUSH
18904: CALL_OW 234
18908: GO 18878
18910: POP
18911: POP
// end ;
18912: PPOPN 1
18914: END
// export function hHackInvincible ; var i ; begin
18915: LD_INT 0
18917: PPUSH
18918: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18919: LD_ADDR_VAR 0 2
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: LD_INT 21
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 21
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: PPUSH
18952: CALL_OW 69
18956: PUSH
18957: FOR_IN
18958: IFFALSE 19019
// if IsSelected ( i ) then
18960: LD_VAR 0 2
18964: PPUSH
18965: CALL_OW 306
18969: IFFALSE 19017
// begin if i in hInvincible then
18971: LD_VAR 0 2
18975: PUSH
18976: LD_EXP 72
18980: IN
18981: IFFALSE 19001
// hInvincible := hInvincible diff i else
18983: LD_ADDR_EXP 72
18987: PUSH
18988: LD_EXP 72
18992: PUSH
18993: LD_VAR 0 2
18997: DIFF
18998: ST_TO_ADDR
18999: GO 19017
// hInvincible := hInvincible union i ;
19001: LD_ADDR_EXP 72
19005: PUSH
19006: LD_EXP 72
19010: PUSH
19011: LD_VAR 0 2
19015: UNION
19016: ST_TO_ADDR
// end ;
19017: GO 18957
19019: POP
19020: POP
// end ;
19021: LD_VAR 0 1
19025: RET
// export function hHackInvisible ; var i , j ; begin
19026: LD_INT 0
19028: PPUSH
19029: PPUSH
19030: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_INT 21
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PPUSH
19046: CALL_OW 69
19050: PUSH
19051: FOR_IN
19052: IFFALSE 19076
// if IsSelected ( i ) then
19054: LD_VAR 0 2
19058: PPUSH
19059: CALL_OW 306
19063: IFFALSE 19074
// ComForceInvisible ( i ) ;
19065: LD_VAR 0 2
19069: PPUSH
19070: CALL_OW 496
19074: GO 19051
19076: POP
19077: POP
// end ;
19078: LD_VAR 0 1
19082: RET
// export function hHackChangeYourSide ; begin
19083: LD_INT 0
19085: PPUSH
// if your_side = 8 then
19086: LD_OWVAR 2
19090: PUSH
19091: LD_INT 8
19093: EQUAL
19094: IFFALSE 19106
// your_side := 0 else
19096: LD_ADDR_OWVAR 2
19100: PUSH
19101: LD_INT 0
19103: ST_TO_ADDR
19104: GO 19120
// your_side := your_side + 1 ;
19106: LD_ADDR_OWVAR 2
19110: PUSH
19111: LD_OWVAR 2
19115: PUSH
19116: LD_INT 1
19118: PLUS
19119: ST_TO_ADDR
// end ;
19120: LD_VAR 0 1
19124: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
19129: PPUSH
// for i in all_units do
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_OWVAR 3
19139: PUSH
19140: FOR_IN
19141: IFFALSE 19219
// if IsSelected ( i ) then
19143: LD_VAR 0 2
19147: PPUSH
19148: CALL_OW 306
19152: IFFALSE 19217
// begin j := GetSide ( i ) ;
19154: LD_ADDR_VAR 0 3
19158: PUSH
19159: LD_VAR 0 2
19163: PPUSH
19164: CALL_OW 255
19168: ST_TO_ADDR
// if j = 8 then
19169: LD_VAR 0 3
19173: PUSH
19174: LD_INT 8
19176: EQUAL
19177: IFFALSE 19189
// j := 0 else
19179: LD_ADDR_VAR 0 3
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
19187: GO 19203
// j := j + 1 ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 1
19201: PLUS
19202: ST_TO_ADDR
// SetSide ( i , j ) ;
19203: LD_VAR 0 2
19207: PPUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: CALL_OW 235
// end ;
19217: GO 19140
19219: POP
19220: POP
// end ;
19221: LD_VAR 0 1
19225: RET
// export function hHackFog ; begin
19226: LD_INT 0
19228: PPUSH
// FogOff ( true ) ;
19229: LD_INT 1
19231: PPUSH
19232: CALL_OW 344
// end ;
19236: LD_VAR 0 1
19240: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19241: LD_INT 0
19243: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19244: LD_VAR 0 1
19248: PPUSH
19249: LD_VAR 0 2
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: LD_INT 1
19261: PPUSH
19262: LD_INT 1
19264: PPUSH
19265: CALL_OW 483
// CenterOnXY ( x , y ) ;
19269: LD_VAR 0 2
19273: PPUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: CALL_OW 84
// end ; end_of_file
19283: LD_VAR 0 4
19287: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19288: LD_INT 0
19290: PPUSH
19291: PPUSH
19292: PPUSH
19293: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 264
19303: PUSH
19304: LD_EXP 88
19308: EQUAL
19309: IFFALSE 19381
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19311: LD_INT 68
19313: PPUSH
19314: LD_VAR 0 1
19318: PPUSH
19319: CALL_OW 255
19323: PPUSH
19324: CALL_OW 321
19328: PUSH
19329: LD_INT 2
19331: EQUAL
19332: IFFALSE 19344
// eff := 70 else
19334: LD_ADDR_VAR 0 4
19338: PUSH
19339: LD_INT 70
19341: ST_TO_ADDR
19342: GO 19352
// eff := 30 ;
19344: LD_ADDR_VAR 0 4
19348: PUSH
19349: LD_INT 30
19351: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: CALL_OW 250
19361: PPUSH
19362: LD_VAR 0 1
19366: PPUSH
19367: CALL_OW 251
19371: PPUSH
19372: LD_VAR 0 4
19376: PPUSH
19377: CALL_OW 495
// end ; end ;
19381: LD_VAR 0 2
19385: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19386: LD_INT 0
19388: PPUSH
// end ;
19389: LD_VAR 0 4
19393: RET
// export function SOS_Command ( cmd ) ; begin
19394: LD_INT 0
19396: PPUSH
// end ;
19397: LD_VAR 0 2
19401: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19402: LD_INT 0
19404: PPUSH
// end ;
19405: LD_VAR 0 6
19409: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19410: LD_INT 0
19412: PPUSH
19413: PPUSH
// if not vehicle or not factory then
19414: LD_VAR 0 1
19418: NOT
19419: PUSH
19420: LD_VAR 0 2
19424: NOT
19425: OR
19426: IFFALSE 19430
// exit ;
19428: GO 19661
// if factoryWaypoints >= factory then
19430: LD_EXP 73
19434: PUSH
19435: LD_VAR 0 2
19439: GREATEREQUAL
19440: IFFALSE 19661
// if factoryWaypoints [ factory ] then
19442: LD_EXP 73
19446: PUSH
19447: LD_VAR 0 2
19451: ARRAY
19452: IFFALSE 19661
// begin if GetControl ( vehicle ) = control_manual then
19454: LD_VAR 0 1
19458: PPUSH
19459: CALL_OW 263
19463: PUSH
19464: LD_INT 1
19466: EQUAL
19467: IFFALSE 19548
// begin driver := IsDrivenBy ( vehicle ) ;
19469: LD_ADDR_VAR 0 4
19473: PUSH
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 311
19483: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19484: LD_VAR 0 4
19488: PPUSH
19489: LD_EXP 73
19493: PUSH
19494: LD_VAR 0 2
19498: ARRAY
19499: PUSH
19500: LD_INT 1
19502: ARRAY
19503: PPUSH
19504: LD_EXP 73
19508: PUSH
19509: LD_VAR 0 2
19513: ARRAY
19514: PUSH
19515: LD_INT 2
19517: ARRAY
19518: PPUSH
19519: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19523: LD_VAR 0 4
19527: PPUSH
19528: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19532: LD_VAR 0 4
19536: PPUSH
19537: LD_VAR 0 2
19541: PPUSH
19542: CALL_OW 180
// end else
19546: GO 19661
// if GetControl ( vehicle ) = control_remote then
19548: LD_VAR 0 1
19552: PPUSH
19553: CALL_OW 263
19557: PUSH
19558: LD_INT 2
19560: EQUAL
19561: IFFALSE 19622
// begin wait ( 0 0$2 ) ;
19563: LD_INT 70
19565: PPUSH
19566: CALL_OW 67
// if Connect ( vehicle ) then
19570: LD_VAR 0 1
19574: PPUSH
19575: CALL 32104 0 1
19579: IFFALSE 19620
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19581: LD_VAR 0 1
19585: PPUSH
19586: LD_EXP 73
19590: PUSH
19591: LD_VAR 0 2
19595: ARRAY
19596: PUSH
19597: LD_INT 1
19599: ARRAY
19600: PPUSH
19601: LD_EXP 73
19605: PUSH
19606: LD_VAR 0 2
19610: ARRAY
19611: PUSH
19612: LD_INT 2
19614: ARRAY
19615: PPUSH
19616: CALL_OW 171
// end else
19620: GO 19661
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19622: LD_VAR 0 1
19626: PPUSH
19627: LD_EXP 73
19631: PUSH
19632: LD_VAR 0 2
19636: ARRAY
19637: PUSH
19638: LD_INT 1
19640: ARRAY
19641: PPUSH
19642: LD_EXP 73
19646: PUSH
19647: LD_VAR 0 2
19651: ARRAY
19652: PUSH
19653: LD_INT 2
19655: ARRAY
19656: PPUSH
19657: CALL_OW 171
// end ; end ;
19661: LD_VAR 0 3
19665: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19666: LD_INT 0
19668: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 250
19676: EQUAL
19677: PUSH
19678: LD_VAR 0 2
19682: PPUSH
19683: CALL_OW 264
19687: PUSH
19688: LD_EXP 91
19692: EQUAL
19693: AND
19694: IFFALSE 19715
// MinerPlaceMine ( unit , x , y ) ;
19696: LD_VAR 0 2
19700: PPUSH
19701: LD_VAR 0 4
19705: PPUSH
19706: LD_VAR 0 5
19710: PPUSH
19711: CALL 22331 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19715: LD_VAR 0 1
19719: PUSH
19720: LD_INT 251
19722: EQUAL
19723: PUSH
19724: LD_VAR 0 2
19728: PPUSH
19729: CALL_OW 264
19733: PUSH
19734: LD_EXP 91
19738: EQUAL
19739: AND
19740: IFFALSE 19761
// MinerDetonateMine ( unit , x , y ) ;
19742: LD_VAR 0 2
19746: PPUSH
19747: LD_VAR 0 4
19751: PPUSH
19752: LD_VAR 0 5
19756: PPUSH
19757: CALL 22608 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19761: LD_VAR 0 1
19765: PUSH
19766: LD_INT 252
19768: EQUAL
19769: PUSH
19770: LD_VAR 0 2
19774: PPUSH
19775: CALL_OW 264
19779: PUSH
19780: LD_EXP 91
19784: EQUAL
19785: AND
19786: IFFALSE 19807
// MinerCreateMinefield ( unit , x , y ) ;
19788: LD_VAR 0 2
19792: PPUSH
19793: LD_VAR 0 4
19797: PPUSH
19798: LD_VAR 0 5
19802: PPUSH
19803: CALL 23025 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19807: LD_VAR 0 1
19811: PUSH
19812: LD_INT 253
19814: EQUAL
19815: PUSH
19816: LD_VAR 0 2
19820: PPUSH
19821: CALL_OW 257
19825: PUSH
19826: LD_INT 5
19828: EQUAL
19829: AND
19830: IFFALSE 19851
// ComBinocular ( unit , x , y ) ;
19832: LD_VAR 0 2
19836: PPUSH
19837: LD_VAR 0 4
19841: PPUSH
19842: LD_VAR 0 5
19846: PPUSH
19847: CALL 23396 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19851: LD_VAR 0 1
19855: PUSH
19856: LD_INT 254
19858: EQUAL
19859: PUSH
19860: LD_VAR 0 2
19864: PPUSH
19865: CALL_OW 264
19869: PUSH
19870: LD_EXP 86
19874: EQUAL
19875: AND
19876: PUSH
19877: LD_VAR 0 3
19881: PPUSH
19882: CALL_OW 263
19886: PUSH
19887: LD_INT 3
19889: EQUAL
19890: AND
19891: IFFALSE 19907
// HackDestroyVehicle ( unit , selectedUnit ) ;
19893: LD_VAR 0 2
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: CALL 21691 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19907: LD_VAR 0 1
19911: PUSH
19912: LD_INT 255
19914: EQUAL
19915: PUSH
19916: LD_VAR 0 2
19920: PPUSH
19921: CALL_OW 264
19925: PUSH
19926: LD_INT 14
19928: PUSH
19929: LD_INT 53
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: IN
19936: AND
19937: PUSH
19938: LD_VAR 0 4
19942: PPUSH
19943: LD_VAR 0 5
19947: PPUSH
19948: CALL_OW 488
19952: AND
19953: IFFALSE 19977
// CutTreeXYR ( unit , x , y , 12 ) ;
19955: LD_VAR 0 2
19959: PPUSH
19960: LD_VAR 0 4
19964: PPUSH
19965: LD_VAR 0 5
19969: PPUSH
19970: LD_INT 12
19972: PPUSH
19973: CALL 20257 0 4
// if cmd = 256 then
19977: LD_VAR 0 1
19981: PUSH
19982: LD_INT 256
19984: EQUAL
19985: IFFALSE 20006
// SetFactoryWaypoint ( unit , x , y ) ;
19987: LD_VAR 0 2
19991: PPUSH
19992: LD_VAR 0 4
19996: PPUSH
19997: LD_VAR 0 5
20001: PPUSH
20002: CALL 20011 0 3
// end ;
20006: LD_VAR 0 6
20010: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20011: LD_INT 0
20013: PPUSH
20014: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20015: LD_VAR 0 1
20019: NOT
20020: PUSH
20021: LD_VAR 0 2
20025: PPUSH
20026: LD_VAR 0 3
20030: PPUSH
20031: CALL_OW 488
20035: NOT
20036: OR
20037: PUSH
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 266
20047: PUSH
20048: LD_INT 3
20050: NONEQUAL
20051: PUSH
20052: LD_VAR 0 1
20056: PPUSH
20057: CALL_OW 247
20061: PUSH
20062: LD_INT 1
20064: EQUAL
20065: NOT
20066: AND
20067: OR
20068: IFFALSE 20072
// exit ;
20070: GO 20252
// if GetType ( factory ) = unit_human then
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL_OW 247
20081: PUSH
20082: LD_INT 1
20084: EQUAL
20085: IFFALSE 20102
// factory := IsInUnit ( factory ) ;
20087: LD_ADDR_VAR 0 1
20091: PUSH
20092: LD_VAR 0 1
20096: PPUSH
20097: CALL_OW 310
20101: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 266
20111: PUSH
20112: LD_INT 3
20114: NONEQUAL
20115: IFFALSE 20119
// exit ;
20117: GO 20252
// if HexInfo ( x , y ) = factory then
20119: LD_VAR 0 2
20123: PPUSH
20124: LD_VAR 0 3
20128: PPUSH
20129: CALL_OW 428
20133: PUSH
20134: LD_VAR 0 1
20138: EQUAL
20139: IFFALSE 20166
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20141: LD_ADDR_EXP 73
20145: PUSH
20146: LD_EXP 73
20150: PPUSH
20151: LD_VAR 0 1
20155: PPUSH
20156: LD_INT 0
20158: PPUSH
20159: CALL_OW 1
20163: ST_TO_ADDR
20164: GO 20252
// begin factoryWaypoints := Replace ( factoryWaypoints , factory , [ x , y ] ) ;
20166: LD_ADDR_EXP 73
20170: PUSH
20171: LD_EXP 73
20175: PPUSH
20176: LD_VAR 0 1
20180: PPUSH
20181: LD_VAR 0 2
20185: PUSH
20186: LD_VAR 0 3
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PPUSH
20195: CALL_OW 1
20199: ST_TO_ADDR
// ToLua ( setFactoryWaypointXY( & GetSide ( factory ) & , & factory & , & x & , & y & ) ) ;
20200: LD_STRING setFactoryWaypointXY(
20202: PUSH
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 255
20212: STR
20213: PUSH
20214: LD_STRING ,
20216: STR
20217: PUSH
20218: LD_VAR 0 1
20222: STR
20223: PUSH
20224: LD_STRING ,
20226: STR
20227: PUSH
20228: LD_VAR 0 2
20232: STR
20233: PUSH
20234: LD_STRING ,
20236: STR
20237: PUSH
20238: LD_VAR 0 3
20242: STR
20243: PUSH
20244: LD_STRING )
20246: STR
20247: PPUSH
20248: CALL_OW 559
// end ; end ;
20252: LD_VAR 0 4
20256: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20257: LD_INT 0
20259: PPUSH
20260: PPUSH
20261: PPUSH
20262: PPUSH
20263: PPUSH
20264: PPUSH
20265: PPUSH
20266: PPUSH
20267: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20268: LD_VAR 0 1
20272: NOT
20273: PUSH
20274: LD_VAR 0 2
20278: PPUSH
20279: LD_VAR 0 3
20283: PPUSH
20284: CALL_OW 488
20288: NOT
20289: OR
20290: PUSH
20291: LD_VAR 0 4
20295: NOT
20296: OR
20297: IFFALSE 20301
// exit ;
20299: GO 20641
// list := [ ] ;
20301: LD_ADDR_VAR 0 13
20305: PUSH
20306: EMPTY
20307: ST_TO_ADDR
// if x - r < 0 then
20308: LD_VAR 0 2
20312: PUSH
20313: LD_VAR 0 4
20317: MINUS
20318: PUSH
20319: LD_INT 0
20321: LESS
20322: IFFALSE 20334
// min_x := 0 else
20324: LD_ADDR_VAR 0 7
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
20332: GO 20350
// min_x := x - r ;
20334: LD_ADDR_VAR 0 7
20338: PUSH
20339: LD_VAR 0 2
20343: PUSH
20344: LD_VAR 0 4
20348: MINUS
20349: ST_TO_ADDR
// if y - r < 0 then
20350: LD_VAR 0 3
20354: PUSH
20355: LD_VAR 0 4
20359: MINUS
20360: PUSH
20361: LD_INT 0
20363: LESS
20364: IFFALSE 20376
// min_y := 0 else
20366: LD_ADDR_VAR 0 8
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
20374: GO 20392
// min_y := y - r ;
20376: LD_ADDR_VAR 0 8
20380: PUSH
20381: LD_VAR 0 3
20385: PUSH
20386: LD_VAR 0 4
20390: MINUS
20391: ST_TO_ADDR
// max_x := x + r ;
20392: LD_ADDR_VAR 0 9
20396: PUSH
20397: LD_VAR 0 2
20401: PUSH
20402: LD_VAR 0 4
20406: PLUS
20407: ST_TO_ADDR
// max_y := y + r ;
20408: LD_ADDR_VAR 0 10
20412: PUSH
20413: LD_VAR 0 3
20417: PUSH
20418: LD_VAR 0 4
20422: PLUS
20423: ST_TO_ADDR
// for _x = min_x to max_x do
20424: LD_ADDR_VAR 0 11
20428: PUSH
20429: DOUBLE
20430: LD_VAR 0 7
20434: DEC
20435: ST_TO_ADDR
20436: LD_VAR 0 9
20440: PUSH
20441: FOR_TO
20442: IFFALSE 20559
// for _y = min_y to max_y do
20444: LD_ADDR_VAR 0 12
20448: PUSH
20449: DOUBLE
20450: LD_VAR 0 8
20454: DEC
20455: ST_TO_ADDR
20456: LD_VAR 0 10
20460: PUSH
20461: FOR_TO
20462: IFFALSE 20555
// begin if not ValidHex ( _x , _y ) then
20464: LD_VAR 0 11
20468: PPUSH
20469: LD_VAR 0 12
20473: PPUSH
20474: CALL_OW 488
20478: NOT
20479: IFFALSE 20483
// continue ;
20481: GO 20461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20483: LD_VAR 0 11
20487: PPUSH
20488: LD_VAR 0 12
20492: PPUSH
20493: CALL_OW 351
20497: PUSH
20498: LD_VAR 0 11
20502: PPUSH
20503: LD_VAR 0 12
20507: PPUSH
20508: CALL_OW 554
20512: AND
20513: IFFALSE 20553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20515: LD_ADDR_VAR 0 13
20519: PUSH
20520: LD_VAR 0 13
20524: PPUSH
20525: LD_VAR 0 13
20529: PUSH
20530: LD_INT 1
20532: PLUS
20533: PPUSH
20534: LD_VAR 0 11
20538: PUSH
20539: LD_VAR 0 12
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PPUSH
20548: CALL_OW 2
20552: ST_TO_ADDR
// end ;
20553: GO 20461
20555: POP
20556: POP
20557: GO 20441
20559: POP
20560: POP
// if not list then
20561: LD_VAR 0 13
20565: NOT
20566: IFFALSE 20570
// exit ;
20568: GO 20641
// for i in list do
20570: LD_ADDR_VAR 0 6
20574: PUSH
20575: LD_VAR 0 13
20579: PUSH
20580: FOR_IN
20581: IFFALSE 20639
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20583: LD_VAR 0 1
20587: PPUSH
20588: LD_STRING M
20590: PUSH
20591: LD_VAR 0 6
20595: PUSH
20596: LD_INT 1
20598: ARRAY
20599: PUSH
20600: LD_VAR 0 6
20604: PUSH
20605: LD_INT 2
20607: ARRAY
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: PPUSH
20633: CALL_OW 447
20637: GO 20580
20639: POP
20640: POP
// end ;
20641: LD_VAR 0 5
20645: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20646: LD_EXP 74
20650: NOT
20651: IFFALSE 20701
20653: GO 20655
20655: DISABLE
// begin initHack := true ;
20656: LD_ADDR_EXP 74
20660: PUSH
20661: LD_INT 1
20663: ST_TO_ADDR
// hackTanks := [ ] ;
20664: LD_ADDR_EXP 75
20668: PUSH
20669: EMPTY
20670: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20671: LD_ADDR_EXP 76
20675: PUSH
20676: EMPTY
20677: ST_TO_ADDR
// hackLimit := 3 ;
20678: LD_ADDR_EXP 77
20682: PUSH
20683: LD_INT 3
20685: ST_TO_ADDR
// hackDist := 12 ;
20686: LD_ADDR_EXP 78
20690: PUSH
20691: LD_INT 12
20693: ST_TO_ADDR
// hackCounter := [ ] ;
20694: LD_ADDR_EXP 79
20698: PUSH
20699: EMPTY
20700: ST_TO_ADDR
// end ;
20701: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20702: LD_EXP 74
20706: PUSH
20707: LD_INT 34
20709: PUSH
20710: LD_EXP 86
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PPUSH
20719: CALL_OW 69
20723: AND
20724: IFFALSE 20979
20726: GO 20728
20728: DISABLE
20729: LD_INT 0
20731: PPUSH
20732: PPUSH
// begin enable ;
20733: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20734: LD_ADDR_VAR 0 1
20738: PUSH
20739: LD_INT 34
20741: PUSH
20742: LD_EXP 86
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PPUSH
20751: CALL_OW 69
20755: PUSH
20756: FOR_IN
20757: IFFALSE 20977
// begin if not i in hackTanks then
20759: LD_VAR 0 1
20763: PUSH
20764: LD_EXP 75
20768: IN
20769: NOT
20770: IFFALSE 20853
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20772: LD_ADDR_EXP 75
20776: PUSH
20777: LD_EXP 75
20781: PPUSH
20782: LD_EXP 75
20786: PUSH
20787: LD_INT 1
20789: PLUS
20790: PPUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: CALL_OW 1
20800: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20801: LD_ADDR_EXP 76
20805: PUSH
20806: LD_EXP 76
20810: PPUSH
20811: LD_EXP 76
20815: PUSH
20816: LD_INT 1
20818: PLUS
20819: PPUSH
20820: EMPTY
20821: PPUSH
20822: CALL_OW 1
20826: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20827: LD_ADDR_EXP 79
20831: PUSH
20832: LD_EXP 79
20836: PPUSH
20837: LD_EXP 79
20841: PUSH
20842: LD_INT 1
20844: PLUS
20845: PPUSH
20846: EMPTY
20847: PPUSH
20848: CALL_OW 1
20852: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 302
20862: NOT
20863: IFFALSE 20876
// begin HackUnlinkAll ( i ) ;
20865: LD_VAR 0 1
20869: PPUSH
20870: CALL 20982 0 1
// continue ;
20874: GO 20756
// end ; HackCheckCapturedStatus ( i ) ;
20876: LD_VAR 0 1
20880: PPUSH
20881: CALL 21425 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20885: LD_ADDR_VAR 0 2
20889: PUSH
20890: LD_INT 81
20892: PUSH
20893: LD_VAR 0 1
20897: PPUSH
20898: CALL_OW 255
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 33
20909: PUSH
20910: LD_INT 3
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 91
20919: PUSH
20920: LD_VAR 0 1
20924: PUSH
20925: LD_EXP 78
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 50
20937: PUSH
20938: EMPTY
20939: LIST
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: PPUSH
20947: CALL_OW 69
20951: ST_TO_ADDR
// if not tmp then
20952: LD_VAR 0 2
20956: NOT
20957: IFFALSE 20961
// continue ;
20959: GO 20756
// HackLink ( i , tmp ) ;
20961: LD_VAR 0 1
20965: PPUSH
20966: LD_VAR 0 2
20970: PPUSH
20971: CALL 21118 0 2
// end ;
20975: GO 20756
20977: POP
20978: POP
// end ;
20979: PPOPN 2
20981: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20982: LD_INT 0
20984: PPUSH
20985: PPUSH
20986: PPUSH
// if not hack in hackTanks then
20987: LD_VAR 0 1
20991: PUSH
20992: LD_EXP 75
20996: IN
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21113
// index := GetElementIndex ( hackTanks , hack ) ;
21002: LD_ADDR_VAR 0 4
21006: PUSH
21007: LD_EXP 75
21011: PPUSH
21012: LD_VAR 0 1
21016: PPUSH
21017: CALL 28918 0 2
21021: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21022: LD_EXP 76
21026: PUSH
21027: LD_VAR 0 4
21031: ARRAY
21032: IFFALSE 21113
// begin for i in hackTanksCaptured [ index ] do
21034: LD_ADDR_VAR 0 3
21038: PUSH
21039: LD_EXP 76
21043: PUSH
21044: LD_VAR 0 4
21048: ARRAY
21049: PUSH
21050: FOR_IN
21051: IFFALSE 21077
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21053: LD_VAR 0 3
21057: PUSH
21058: LD_INT 1
21060: ARRAY
21061: PPUSH
21062: LD_VAR 0 3
21066: PUSH
21067: LD_INT 2
21069: ARRAY
21070: PPUSH
21071: CALL_OW 235
21075: GO 21050
21077: POP
21078: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21079: LD_ADDR_EXP 76
21083: PUSH
21084: LD_EXP 76
21088: PPUSH
21089: LD_VAR 0 4
21093: PPUSH
21094: EMPTY
21095: PPUSH
21096: CALL_OW 1
21100: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21101: LD_VAR 0 1
21105: PPUSH
21106: LD_INT 0
21108: PPUSH
21109: CALL_OW 505
// end ; end ;
21113: LD_VAR 0 2
21117: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
21122: PPUSH
// if not hack in hackTanks or not vehicles then
21123: LD_VAR 0 1
21127: PUSH
21128: LD_EXP 75
21132: IN
21133: NOT
21134: PUSH
21135: LD_VAR 0 2
21139: NOT
21140: OR
21141: IFFALSE 21145
// exit ;
21143: GO 21420
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21145: LD_ADDR_VAR 0 2
21149: PUSH
21150: LD_VAR 0 1
21154: PPUSH
21155: LD_VAR 0 2
21159: PPUSH
21160: LD_INT 1
21162: PPUSH
21163: LD_INT 1
21165: PPUSH
21166: CALL 29568 0 4
21170: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21171: LD_ADDR_VAR 0 5
21175: PUSH
21176: LD_EXP 75
21180: PPUSH
21181: LD_VAR 0 1
21185: PPUSH
21186: CALL 28918 0 2
21190: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21191: LD_EXP 76
21195: PUSH
21196: LD_VAR 0 5
21200: ARRAY
21201: PUSH
21202: LD_EXP 77
21206: LESS
21207: IFFALSE 21396
// begin for i := 1 to vehicles do
21209: LD_ADDR_VAR 0 4
21213: PUSH
21214: DOUBLE
21215: LD_INT 1
21217: DEC
21218: ST_TO_ADDR
21219: LD_VAR 0 2
21223: PUSH
21224: FOR_TO
21225: IFFALSE 21394
// begin if hackTanksCaptured [ index ] = hackLimit then
21227: LD_EXP 76
21231: PUSH
21232: LD_VAR 0 5
21236: ARRAY
21237: PUSH
21238: LD_EXP 77
21242: EQUAL
21243: IFFALSE 21247
// break ;
21245: GO 21394
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21247: LD_ADDR_EXP 79
21251: PUSH
21252: LD_EXP 79
21256: PPUSH
21257: LD_VAR 0 5
21261: PPUSH
21262: LD_EXP 79
21266: PUSH
21267: LD_VAR 0 5
21271: ARRAY
21272: PUSH
21273: LD_INT 1
21275: PLUS
21276: PPUSH
21277: CALL_OW 1
21281: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21282: LD_ADDR_EXP 76
21286: PUSH
21287: LD_EXP 76
21291: PPUSH
21292: LD_VAR 0 5
21296: PUSH
21297: LD_EXP 76
21301: PUSH
21302: LD_VAR 0 5
21306: ARRAY
21307: PUSH
21308: LD_INT 1
21310: PLUS
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PPUSH
21316: LD_VAR 0 2
21320: PUSH
21321: LD_VAR 0 4
21325: ARRAY
21326: PUSH
21327: LD_VAR 0 2
21331: PUSH
21332: LD_VAR 0 4
21336: ARRAY
21337: PPUSH
21338: CALL_OW 255
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL 29133 0 3
21351: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21352: LD_VAR 0 2
21356: PUSH
21357: LD_VAR 0 4
21361: ARRAY
21362: PPUSH
21363: LD_VAR 0 1
21367: PPUSH
21368: CALL_OW 255
21372: PPUSH
21373: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21377: LD_VAR 0 2
21381: PUSH
21382: LD_VAR 0 4
21386: ARRAY
21387: PPUSH
21388: CALL_OW 141
// end ;
21392: GO 21224
21394: POP
21395: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21396: LD_VAR 0 1
21400: PPUSH
21401: LD_EXP 76
21405: PUSH
21406: LD_VAR 0 5
21410: ARRAY
21411: PUSH
21412: LD_INT 0
21414: PLUS
21415: PPUSH
21416: CALL_OW 505
// end ;
21420: LD_VAR 0 3
21424: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21425: LD_INT 0
21427: PPUSH
21428: PPUSH
21429: PPUSH
21430: PPUSH
// if not hack in hackTanks then
21431: LD_VAR 0 1
21435: PUSH
21436: LD_EXP 75
21440: IN
21441: NOT
21442: IFFALSE 21446
// exit ;
21444: GO 21686
// index := GetElementIndex ( hackTanks , hack ) ;
21446: LD_ADDR_VAR 0 4
21450: PUSH
21451: LD_EXP 75
21455: PPUSH
21456: LD_VAR 0 1
21460: PPUSH
21461: CALL 28918 0 2
21465: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: DOUBLE
21472: LD_EXP 76
21476: PUSH
21477: LD_VAR 0 4
21481: ARRAY
21482: INC
21483: ST_TO_ADDR
21484: LD_INT 1
21486: PUSH
21487: FOR_DOWNTO
21488: IFFALSE 21660
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21490: LD_ADDR_VAR 0 5
21494: PUSH
21495: LD_EXP 76
21499: PUSH
21500: LD_VAR 0 4
21504: ARRAY
21505: PUSH
21506: LD_VAR 0 3
21510: ARRAY
21511: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21512: LD_VAR 0 5
21516: PUSH
21517: LD_INT 1
21519: ARRAY
21520: PPUSH
21521: CALL_OW 302
21525: NOT
21526: PUSH
21527: LD_VAR 0 5
21531: PUSH
21532: LD_INT 1
21534: ARRAY
21535: PPUSH
21536: CALL_OW 255
21540: PUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 255
21550: NONEQUAL
21551: OR
21552: IFFALSE 21658
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21554: LD_VAR 0 5
21558: PUSH
21559: LD_INT 1
21561: ARRAY
21562: PPUSH
21563: CALL_OW 305
21567: PUSH
21568: LD_VAR 0 5
21572: PUSH
21573: LD_INT 1
21575: ARRAY
21576: PPUSH
21577: CALL_OW 255
21581: PUSH
21582: LD_VAR 0 1
21586: PPUSH
21587: CALL_OW 255
21591: EQUAL
21592: AND
21593: IFFALSE 21617
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21595: LD_VAR 0 5
21599: PUSH
21600: LD_INT 1
21602: ARRAY
21603: PPUSH
21604: LD_VAR 0 5
21608: PUSH
21609: LD_INT 2
21611: ARRAY
21612: PPUSH
21613: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21617: LD_ADDR_EXP 76
21621: PUSH
21622: LD_EXP 76
21626: PPUSH
21627: LD_VAR 0 4
21631: PPUSH
21632: LD_EXP 76
21636: PUSH
21637: LD_VAR 0 4
21641: ARRAY
21642: PPUSH
21643: LD_VAR 0 3
21647: PPUSH
21648: CALL_OW 3
21652: PPUSH
21653: CALL_OW 1
21657: ST_TO_ADDR
// end ; end ;
21658: GO 21487
21660: POP
21661: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21662: LD_VAR 0 1
21666: PPUSH
21667: LD_EXP 76
21671: PUSH
21672: LD_VAR 0 4
21676: ARRAY
21677: PUSH
21678: LD_INT 0
21680: PLUS
21681: PPUSH
21682: CALL_OW 505
// end ;
21686: LD_VAR 0 2
21690: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21691: LD_INT 0
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
// if not hack in hackTanks then
21697: LD_VAR 0 1
21701: PUSH
21702: LD_EXP 75
21706: IN
21707: NOT
21708: IFFALSE 21712
// exit ;
21710: GO 21797
// index := GetElementIndex ( hackTanks , hack ) ;
21712: LD_ADDR_VAR 0 5
21716: PUSH
21717: LD_EXP 75
21721: PPUSH
21722: LD_VAR 0 1
21726: PPUSH
21727: CALL 28918 0 2
21731: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21732: LD_ADDR_VAR 0 4
21736: PUSH
21737: DOUBLE
21738: LD_INT 1
21740: DEC
21741: ST_TO_ADDR
21742: LD_EXP 76
21746: PUSH
21747: LD_VAR 0 5
21751: ARRAY
21752: PUSH
21753: FOR_TO
21754: IFFALSE 21795
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21756: LD_EXP 76
21760: PUSH
21761: LD_VAR 0 5
21765: ARRAY
21766: PUSH
21767: LD_VAR 0 4
21771: ARRAY
21772: PUSH
21773: LD_INT 1
21775: ARRAY
21776: PUSH
21777: LD_VAR 0 2
21781: EQUAL
21782: IFFALSE 21793
// KillUnit ( vehicle ) ;
21784: LD_VAR 0 2
21788: PPUSH
21789: CALL_OW 66
21793: GO 21753
21795: POP
21796: POP
// end ;
21797: LD_VAR 0 3
21801: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21802: LD_EXP 80
21806: NOT
21807: IFFALSE 21842
21809: GO 21811
21811: DISABLE
// begin initMiner := true ;
21812: LD_ADDR_EXP 80
21816: PUSH
21817: LD_INT 1
21819: ST_TO_ADDR
// minersList := [ ] ;
21820: LD_ADDR_EXP 81
21824: PUSH
21825: EMPTY
21826: ST_TO_ADDR
// minerMinesList := [ ] ;
21827: LD_ADDR_EXP 82
21831: PUSH
21832: EMPTY
21833: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21834: LD_ADDR_EXP 83
21838: PUSH
21839: LD_INT 5
21841: ST_TO_ADDR
// end ;
21842: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21843: LD_EXP 80
21847: PUSH
21848: LD_INT 34
21850: PUSH
21851: LD_EXP 91
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PPUSH
21860: CALL_OW 69
21864: AND
21865: IFFALSE 22328
21867: GO 21869
21869: DISABLE
21870: LD_INT 0
21872: PPUSH
21873: PPUSH
21874: PPUSH
21875: PPUSH
// begin enable ;
21876: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21877: LD_ADDR_VAR 0 1
21881: PUSH
21882: LD_INT 34
21884: PUSH
21885: LD_EXP 91
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 69
21898: PUSH
21899: FOR_IN
21900: IFFALSE 21972
// begin if not i in minersList then
21902: LD_VAR 0 1
21906: PUSH
21907: LD_EXP 81
21911: IN
21912: NOT
21913: IFFALSE 21970
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21915: LD_ADDR_EXP 81
21919: PUSH
21920: LD_EXP 81
21924: PPUSH
21925: LD_EXP 81
21929: PUSH
21930: LD_INT 1
21932: PLUS
21933: PPUSH
21934: LD_VAR 0 1
21938: PPUSH
21939: CALL_OW 1
21943: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21944: LD_ADDR_EXP 82
21948: PUSH
21949: LD_EXP 82
21953: PPUSH
21954: LD_EXP 82
21958: PUSH
21959: LD_INT 1
21961: PLUS
21962: PPUSH
21963: EMPTY
21964: PPUSH
21965: CALL_OW 1
21969: ST_TO_ADDR
// end end ;
21970: GO 21899
21972: POP
21973: POP
// for i := minerMinesList downto 1 do
21974: LD_ADDR_VAR 0 1
21978: PUSH
21979: DOUBLE
21980: LD_EXP 82
21984: INC
21985: ST_TO_ADDR
21986: LD_INT 1
21988: PUSH
21989: FOR_DOWNTO
21990: IFFALSE 22326
// begin if IsLive ( minersList [ i ] ) then
21992: LD_EXP 81
21996: PUSH
21997: LD_VAR 0 1
22001: ARRAY
22002: PPUSH
22003: CALL_OW 300
22007: IFFALSE 22035
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22009: LD_EXP 81
22013: PUSH
22014: LD_VAR 0 1
22018: ARRAY
22019: PPUSH
22020: LD_EXP 82
22024: PUSH
22025: LD_VAR 0 1
22029: ARRAY
22030: PPUSH
22031: CALL_OW 505
// if not minerMinesList [ i ] then
22035: LD_EXP 82
22039: PUSH
22040: LD_VAR 0 1
22044: ARRAY
22045: NOT
22046: IFFALSE 22050
// continue ;
22048: GO 21989
// for j := minerMinesList [ i ] downto 1 do
22050: LD_ADDR_VAR 0 2
22054: PUSH
22055: DOUBLE
22056: LD_EXP 82
22060: PUSH
22061: LD_VAR 0 1
22065: ARRAY
22066: INC
22067: ST_TO_ADDR
22068: LD_INT 1
22070: PUSH
22071: FOR_DOWNTO
22072: IFFALSE 22322
// begin side := GetSide ( minersList [ i ] ) ;
22074: LD_ADDR_VAR 0 3
22078: PUSH
22079: LD_EXP 81
22083: PUSH
22084: LD_VAR 0 1
22088: ARRAY
22089: PPUSH
22090: CALL_OW 255
22094: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22095: LD_ADDR_VAR 0 4
22099: PUSH
22100: LD_EXP 82
22104: PUSH
22105: LD_VAR 0 1
22109: ARRAY
22110: PUSH
22111: LD_VAR 0 2
22115: ARRAY
22116: PUSH
22117: LD_INT 1
22119: ARRAY
22120: PPUSH
22121: LD_EXP 82
22125: PUSH
22126: LD_VAR 0 1
22130: ARRAY
22131: PUSH
22132: LD_VAR 0 2
22136: ARRAY
22137: PUSH
22138: LD_INT 2
22140: ARRAY
22141: PPUSH
22142: CALL_OW 428
22146: ST_TO_ADDR
// if not tmp then
22147: LD_VAR 0 4
22151: NOT
22152: IFFALSE 22156
// continue ;
22154: GO 22071
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22156: LD_VAR 0 4
22160: PUSH
22161: LD_INT 81
22163: PUSH
22164: LD_VAR 0 3
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PPUSH
22173: CALL_OW 69
22177: IN
22178: PUSH
22179: LD_EXP 82
22183: PUSH
22184: LD_VAR 0 1
22188: ARRAY
22189: PUSH
22190: LD_VAR 0 2
22194: ARRAY
22195: PUSH
22196: LD_INT 1
22198: ARRAY
22199: PPUSH
22200: LD_EXP 82
22204: PUSH
22205: LD_VAR 0 1
22209: ARRAY
22210: PUSH
22211: LD_VAR 0 2
22215: ARRAY
22216: PUSH
22217: LD_INT 2
22219: ARRAY
22220: PPUSH
22221: CALL_OW 458
22225: AND
22226: IFFALSE 22320
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22228: LD_EXP 82
22232: PUSH
22233: LD_VAR 0 1
22237: ARRAY
22238: PUSH
22239: LD_VAR 0 2
22243: ARRAY
22244: PUSH
22245: LD_INT 1
22247: ARRAY
22248: PPUSH
22249: LD_EXP 82
22253: PUSH
22254: LD_VAR 0 1
22258: ARRAY
22259: PUSH
22260: LD_VAR 0 2
22264: ARRAY
22265: PUSH
22266: LD_INT 2
22268: ARRAY
22269: PPUSH
22270: LD_VAR 0 3
22274: PPUSH
22275: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22279: LD_ADDR_EXP 82
22283: PUSH
22284: LD_EXP 82
22288: PPUSH
22289: LD_VAR 0 1
22293: PPUSH
22294: LD_EXP 82
22298: PUSH
22299: LD_VAR 0 1
22303: ARRAY
22304: PPUSH
22305: LD_VAR 0 2
22309: PPUSH
22310: CALL_OW 3
22314: PPUSH
22315: CALL_OW 1
22319: ST_TO_ADDR
// end ; end ;
22320: GO 22071
22322: POP
22323: POP
// end ;
22324: GO 21989
22326: POP
22327: POP
// end ;
22328: PPOPN 4
22330: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22331: LD_INT 0
22333: PPUSH
22334: PPUSH
// result := false ;
22335: LD_ADDR_VAR 0 4
22339: PUSH
22340: LD_INT 0
22342: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22343: LD_VAR 0 1
22347: PPUSH
22348: CALL_OW 264
22352: PUSH
22353: LD_EXP 91
22357: EQUAL
22358: NOT
22359: IFFALSE 22363
// exit ;
22361: GO 22603
// index := GetElementIndex ( minersList , unit ) ;
22363: LD_ADDR_VAR 0 5
22367: PUSH
22368: LD_EXP 81
22372: PPUSH
22373: LD_VAR 0 1
22377: PPUSH
22378: CALL 28918 0 2
22382: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22383: LD_EXP 82
22387: PUSH
22388: LD_VAR 0 5
22392: ARRAY
22393: PUSH
22394: LD_EXP 83
22398: GREATEREQUAL
22399: IFFALSE 22403
// exit ;
22401: GO 22603
// ComMoveXY ( unit , x , y ) ;
22403: LD_VAR 0 1
22407: PPUSH
22408: LD_VAR 0 2
22412: PPUSH
22413: LD_VAR 0 3
22417: PPUSH
22418: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22422: LD_INT 35
22424: PPUSH
22425: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22429: LD_VAR 0 1
22433: PPUSH
22434: LD_VAR 0 2
22438: PPUSH
22439: LD_VAR 0 3
22443: PPUSH
22444: CALL 59690 0 3
22448: NOT
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 314
22459: AND
22460: IFFALSE 22464
// exit ;
22462: GO 22603
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22464: LD_VAR 0 2
22468: PPUSH
22469: LD_VAR 0 3
22473: PPUSH
22474: CALL_OW 428
22478: PUSH
22479: LD_VAR 0 1
22483: EQUAL
22484: PUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 314
22494: NOT
22495: AND
22496: IFFALSE 22422
// PlaySoundXY ( x , y , PlantMine ) ;
22498: LD_VAR 0 2
22502: PPUSH
22503: LD_VAR 0 3
22507: PPUSH
22508: LD_STRING PlantMine
22510: PPUSH
22511: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22515: LD_VAR 0 2
22519: PPUSH
22520: LD_VAR 0 3
22524: PPUSH
22525: LD_VAR 0 1
22529: PPUSH
22530: CALL_OW 255
22534: PPUSH
22535: LD_INT 0
22537: PPUSH
22538: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22542: LD_ADDR_EXP 82
22546: PUSH
22547: LD_EXP 82
22551: PPUSH
22552: LD_VAR 0 5
22556: PUSH
22557: LD_EXP 82
22561: PUSH
22562: LD_VAR 0 5
22566: ARRAY
22567: PUSH
22568: LD_INT 1
22570: PLUS
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PPUSH
22576: LD_VAR 0 2
22580: PUSH
22581: LD_VAR 0 3
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PPUSH
22590: CALL 29133 0 3
22594: ST_TO_ADDR
// result := true ;
22595: LD_ADDR_VAR 0 4
22599: PUSH
22600: LD_INT 1
22602: ST_TO_ADDR
// end ;
22603: LD_VAR 0 4
22607: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22608: LD_INT 0
22610: PPUSH
22611: PPUSH
22612: PPUSH
// if not unit in minersList then
22613: LD_VAR 0 1
22617: PUSH
22618: LD_EXP 81
22622: IN
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 23020
// index := GetElementIndex ( minersList , unit ) ;
22628: LD_ADDR_VAR 0 6
22632: PUSH
22633: LD_EXP 81
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL 28918 0 2
22647: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22648: LD_ADDR_VAR 0 5
22652: PUSH
22653: DOUBLE
22654: LD_EXP 82
22658: PUSH
22659: LD_VAR 0 6
22663: ARRAY
22664: INC
22665: ST_TO_ADDR
22666: LD_INT 1
22668: PUSH
22669: FOR_DOWNTO
22670: IFFALSE 22831
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22672: LD_EXP 82
22676: PUSH
22677: LD_VAR 0 6
22681: ARRAY
22682: PUSH
22683: LD_VAR 0 5
22687: ARRAY
22688: PUSH
22689: LD_INT 1
22691: ARRAY
22692: PUSH
22693: LD_VAR 0 2
22697: EQUAL
22698: PUSH
22699: LD_EXP 82
22703: PUSH
22704: LD_VAR 0 6
22708: ARRAY
22709: PUSH
22710: LD_VAR 0 5
22714: ARRAY
22715: PUSH
22716: LD_INT 2
22718: ARRAY
22719: PUSH
22720: LD_VAR 0 3
22724: EQUAL
22725: AND
22726: IFFALSE 22829
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22728: LD_EXP 82
22732: PUSH
22733: LD_VAR 0 6
22737: ARRAY
22738: PUSH
22739: LD_VAR 0 5
22743: ARRAY
22744: PUSH
22745: LD_INT 1
22747: ARRAY
22748: PPUSH
22749: LD_EXP 82
22753: PUSH
22754: LD_VAR 0 6
22758: ARRAY
22759: PUSH
22760: LD_VAR 0 5
22764: ARRAY
22765: PUSH
22766: LD_INT 2
22768: ARRAY
22769: PPUSH
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 255
22779: PPUSH
22780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22784: LD_ADDR_EXP 82
22788: PUSH
22789: LD_EXP 82
22793: PPUSH
22794: LD_VAR 0 6
22798: PPUSH
22799: LD_EXP 82
22803: PUSH
22804: LD_VAR 0 6
22808: ARRAY
22809: PPUSH
22810: LD_VAR 0 5
22814: PPUSH
22815: CALL_OW 3
22819: PPUSH
22820: CALL_OW 1
22824: ST_TO_ADDR
// exit ;
22825: POP
22826: POP
22827: GO 23020
// end ; end ;
22829: GO 22669
22831: POP
22832: POP
// for i := minerMinesList [ index ] downto 1 do
22833: LD_ADDR_VAR 0 5
22837: PUSH
22838: DOUBLE
22839: LD_EXP 82
22843: PUSH
22844: LD_VAR 0 6
22848: ARRAY
22849: INC
22850: ST_TO_ADDR
22851: LD_INT 1
22853: PUSH
22854: FOR_DOWNTO
22855: IFFALSE 23018
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22857: LD_EXP 82
22861: PUSH
22862: LD_VAR 0 6
22866: ARRAY
22867: PUSH
22868: LD_VAR 0 5
22872: ARRAY
22873: PUSH
22874: LD_INT 1
22876: ARRAY
22877: PPUSH
22878: LD_EXP 82
22882: PUSH
22883: LD_VAR 0 6
22887: ARRAY
22888: PUSH
22889: LD_VAR 0 5
22893: ARRAY
22894: PUSH
22895: LD_INT 2
22897: ARRAY
22898: PPUSH
22899: LD_VAR 0 2
22903: PPUSH
22904: LD_VAR 0 3
22908: PPUSH
22909: CALL_OW 298
22913: PUSH
22914: LD_INT 6
22916: LESS
22917: IFFALSE 23016
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22919: LD_EXP 82
22923: PUSH
22924: LD_VAR 0 6
22928: ARRAY
22929: PUSH
22930: LD_VAR 0 5
22934: ARRAY
22935: PUSH
22936: LD_INT 1
22938: ARRAY
22939: PPUSH
22940: LD_EXP 82
22944: PUSH
22945: LD_VAR 0 6
22949: ARRAY
22950: PUSH
22951: LD_VAR 0 5
22955: ARRAY
22956: PUSH
22957: LD_INT 2
22959: ARRAY
22960: PPUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 255
22970: PPUSH
22971: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22975: LD_ADDR_EXP 82
22979: PUSH
22980: LD_EXP 82
22984: PPUSH
22985: LD_VAR 0 6
22989: PPUSH
22990: LD_EXP 82
22994: PUSH
22995: LD_VAR 0 6
22999: ARRAY
23000: PPUSH
23001: LD_VAR 0 5
23005: PPUSH
23006: CALL_OW 3
23010: PPUSH
23011: CALL_OW 1
23015: ST_TO_ADDR
// end ; end ;
23016: GO 22854
23018: POP
23019: POP
// end ;
23020: LD_VAR 0 4
23024: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23025: LD_INT 0
23027: PPUSH
23028: PPUSH
23029: PPUSH
23030: PPUSH
23031: PPUSH
23032: PPUSH
23033: PPUSH
23034: PPUSH
23035: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23036: LD_VAR 0 1
23040: PPUSH
23041: CALL_OW 264
23045: PUSH
23046: LD_EXP 91
23050: EQUAL
23051: NOT
23052: PUSH
23053: LD_VAR 0 1
23057: PUSH
23058: LD_EXP 81
23062: IN
23063: NOT
23064: OR
23065: IFFALSE 23069
// exit ;
23067: GO 23391
// index := GetElementIndex ( minersList , unit ) ;
23069: LD_ADDR_VAR 0 6
23073: PUSH
23074: LD_EXP 81
23078: PPUSH
23079: LD_VAR 0 1
23083: PPUSH
23084: CALL 28918 0 2
23088: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23089: LD_ADDR_VAR 0 8
23093: PUSH
23094: LD_EXP 83
23098: PUSH
23099: LD_EXP 82
23103: PUSH
23104: LD_VAR 0 6
23108: ARRAY
23109: MINUS
23110: ST_TO_ADDR
// if not minesFreeAmount then
23111: LD_VAR 0 8
23115: NOT
23116: IFFALSE 23120
// exit ;
23118: GO 23391
// tmp := [ ] ;
23120: LD_ADDR_VAR 0 7
23124: PUSH
23125: EMPTY
23126: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23127: LD_ADDR_VAR 0 5
23131: PUSH
23132: DOUBLE
23133: LD_INT 1
23135: DEC
23136: ST_TO_ADDR
23137: LD_VAR 0 8
23141: PUSH
23142: FOR_TO
23143: IFFALSE 23338
// begin _d := rand ( 0 , 5 ) ;
23145: LD_ADDR_VAR 0 11
23149: PUSH
23150: LD_INT 0
23152: PPUSH
23153: LD_INT 5
23155: PPUSH
23156: CALL_OW 12
23160: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23161: LD_ADDR_VAR 0 12
23165: PUSH
23166: LD_INT 2
23168: PPUSH
23169: LD_INT 6
23171: PPUSH
23172: CALL_OW 12
23176: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23177: LD_ADDR_VAR 0 9
23181: PUSH
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_VAR 0 11
23191: PPUSH
23192: LD_VAR 0 12
23196: PPUSH
23197: CALL_OW 272
23201: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23202: LD_ADDR_VAR 0 10
23206: PUSH
23207: LD_VAR 0 3
23211: PPUSH
23212: LD_VAR 0 11
23216: PPUSH
23217: LD_VAR 0 12
23221: PPUSH
23222: CALL_OW 273
23226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23227: LD_VAR 0 9
23231: PPUSH
23232: LD_VAR 0 10
23236: PPUSH
23237: CALL_OW 488
23241: PUSH
23242: LD_VAR 0 9
23246: PUSH
23247: LD_VAR 0 10
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_VAR 0 7
23260: IN
23261: NOT
23262: AND
23263: PUSH
23264: LD_VAR 0 9
23268: PPUSH
23269: LD_VAR 0 10
23273: PPUSH
23274: CALL_OW 458
23278: NOT
23279: AND
23280: IFFALSE 23322
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23282: LD_ADDR_VAR 0 7
23286: PUSH
23287: LD_VAR 0 7
23291: PPUSH
23292: LD_VAR 0 7
23296: PUSH
23297: LD_INT 1
23299: PLUS
23300: PPUSH
23301: LD_VAR 0 9
23305: PUSH
23306: LD_VAR 0 10
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PPUSH
23315: CALL_OW 1
23319: ST_TO_ADDR
23320: GO 23336
// i := i - 1 ;
23322: LD_ADDR_VAR 0 5
23326: PUSH
23327: LD_VAR 0 5
23331: PUSH
23332: LD_INT 1
23334: MINUS
23335: ST_TO_ADDR
// end ;
23336: GO 23142
23338: POP
23339: POP
// for i in tmp do
23340: LD_ADDR_VAR 0 5
23344: PUSH
23345: LD_VAR 0 7
23349: PUSH
23350: FOR_IN
23351: IFFALSE 23389
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23353: LD_VAR 0 1
23357: PPUSH
23358: LD_VAR 0 5
23362: PUSH
23363: LD_INT 1
23365: ARRAY
23366: PPUSH
23367: LD_VAR 0 5
23371: PUSH
23372: LD_INT 2
23374: ARRAY
23375: PPUSH
23376: CALL 22331 0 3
23380: NOT
23381: IFFALSE 23387
// exit ;
23383: POP
23384: POP
23385: GO 23391
23387: GO 23350
23389: POP
23390: POP
// end ;
23391: LD_VAR 0 4
23395: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23396: LD_INT 0
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
// if not GetClass ( unit ) = class_sniper then
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 257
23414: PUSH
23415: LD_INT 5
23417: EQUAL
23418: NOT
23419: IFFALSE 23423
// exit ;
23421: GO 23811
// dist := 8 ;
23423: LD_ADDR_VAR 0 5
23427: PUSH
23428: LD_INT 8
23430: ST_TO_ADDR
// viewRange := 12 ;
23431: LD_ADDR_VAR 0 7
23435: PUSH
23436: LD_INT 12
23438: ST_TO_ADDR
// side := GetSide ( unit ) ;
23439: LD_ADDR_VAR 0 6
23443: PUSH
23444: LD_VAR 0 1
23448: PPUSH
23449: CALL_OW 255
23453: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23454: LD_INT 61
23456: PPUSH
23457: LD_VAR 0 6
23461: PPUSH
23462: CALL_OW 321
23466: PUSH
23467: LD_INT 2
23469: EQUAL
23470: IFFALSE 23480
// viewRange := 16 ;
23472: LD_ADDR_VAR 0 7
23476: PUSH
23477: LD_INT 16
23479: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23480: LD_VAR 0 1
23484: PPUSH
23485: LD_VAR 0 2
23489: PPUSH
23490: LD_VAR 0 3
23494: PPUSH
23495: CALL_OW 297
23499: PUSH
23500: LD_VAR 0 5
23504: GREATER
23505: IFFALSE 23584
// begin ComMoveXY ( unit , x , y ) ;
23507: LD_VAR 0 1
23511: PPUSH
23512: LD_VAR 0 2
23516: PPUSH
23517: LD_VAR 0 3
23521: PPUSH
23522: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23526: LD_INT 35
23528: PPUSH
23529: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23533: LD_VAR 0 1
23537: PPUSH
23538: LD_VAR 0 2
23542: PPUSH
23543: LD_VAR 0 3
23547: PPUSH
23548: CALL 59690 0 3
23552: NOT
23553: IFFALSE 23557
// exit ;
23555: GO 23811
// until GetDistUnitXY ( unit , x , y ) < dist ;
23557: LD_VAR 0 1
23561: PPUSH
23562: LD_VAR 0 2
23566: PPUSH
23567: LD_VAR 0 3
23571: PPUSH
23572: CALL_OW 297
23576: PUSH
23577: LD_VAR 0 5
23581: LESS
23582: IFFALSE 23526
// end ; ComTurnXY ( unit , x , y ) ;
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_VAR 0 2
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: CALL_OW 118
// wait ( 5 ) ;
23603: LD_INT 5
23605: PPUSH
23606: CALL_OW 67
// _d := GetDir ( unit ) ;
23610: LD_ADDR_VAR 0 10
23614: PUSH
23615: LD_VAR 0 1
23619: PPUSH
23620: CALL_OW 254
23624: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23625: LD_ADDR_VAR 0 8
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 250
23639: PPUSH
23640: LD_VAR 0 10
23644: PPUSH
23645: LD_VAR 0 5
23649: PPUSH
23650: CALL_OW 272
23654: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23655: LD_ADDR_VAR 0 9
23659: PUSH
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 251
23669: PPUSH
23670: LD_VAR 0 10
23674: PPUSH
23675: LD_VAR 0 5
23679: PPUSH
23680: CALL_OW 273
23684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23685: LD_VAR 0 8
23689: PPUSH
23690: LD_VAR 0 9
23694: PPUSH
23695: CALL_OW 488
23699: NOT
23700: IFFALSE 23704
// exit ;
23702: GO 23811
// ComAnimCustom ( unit , 1 ) ;
23704: LD_VAR 0 1
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23716: LD_VAR 0 8
23720: PPUSH
23721: LD_VAR 0 9
23725: PPUSH
23726: LD_VAR 0 6
23730: PPUSH
23731: LD_VAR 0 7
23735: PPUSH
23736: CALL_OW 330
// repeat wait ( 1 ) ;
23740: LD_INT 1
23742: PPUSH
23743: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23747: LD_VAR 0 1
23751: PPUSH
23752: CALL_OW 316
23756: PUSH
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 314
23766: OR
23767: PUSH
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 302
23777: NOT
23778: OR
23779: PUSH
23780: LD_VAR 0 1
23784: PPUSH
23785: CALL_OW 301
23789: OR
23790: IFFALSE 23740
// RemoveSeeing ( _x , _y , side ) ;
23792: LD_VAR 0 8
23796: PPUSH
23797: LD_VAR 0 9
23801: PPUSH
23802: LD_VAR 0 6
23806: PPUSH
23807: CALL_OW 331
// end ; end_of_file
23811: LD_VAR 0 4
23815: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23816: LD_VAR 0 1
23820: PUSH
23821: LD_INT 200
23823: DOUBLE
23824: GREATEREQUAL
23825: IFFALSE 23833
23827: LD_INT 299
23829: DOUBLE
23830: LESSEQUAL
23831: IFTRUE 23835
23833: GO 23867
23835: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23836: LD_VAR 0 1
23840: PPUSH
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: LD_VAR 0 4
23855: PPUSH
23856: LD_VAR 0 5
23860: PPUSH
23861: CALL 19666 0 5
23865: GO 23944
23867: LD_INT 300
23869: DOUBLE
23870: GREATEREQUAL
23871: IFFALSE 23879
23873: LD_INT 399
23875: DOUBLE
23876: LESSEQUAL
23877: IFTRUE 23881
23879: GO 23943
23881: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
23882: LD_VAR 0 1
23886: PPUSH
23887: LD_VAR 0 2
23891: PPUSH
23892: LD_VAR 0 3
23896: PPUSH
23897: LD_VAR 0 4
23901: PPUSH
23902: LD_VAR 0 5
23906: PPUSH
23907: LD_VAR 0 6
23911: PPUSH
23912: LD_VAR 0 7
23916: PPUSH
23917: LD_VAR 0 8
23921: PPUSH
23922: LD_VAR 0 9
23926: PPUSH
23927: LD_VAR 0 10
23931: PPUSH
23932: LD_VAR 0 11
23936: PPUSH
23937: CALL 17308 0 11
23941: GO 23944
23943: POP
// end ;
23944: PPOPN 11
23946: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23947: LD_VAR 0 1
23951: PPUSH
23952: LD_VAR 0 2
23956: PPUSH
23957: LD_VAR 0 3
23961: PPUSH
23962: LD_VAR 0 4
23966: PPUSH
23967: LD_VAR 0 5
23971: PPUSH
23972: CALL 19402 0 5
// end ; end_of_file
23976: PPOPN 5
23978: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23979: LD_INT 0
23981: PPUSH
// ar_miner := 81 ;
23982: LD_ADDR_EXP 91
23986: PUSH
23987: LD_INT 81
23989: ST_TO_ADDR
// ar_crane := 88 ;
23990: LD_ADDR_EXP 90
23994: PUSH
23995: LD_INT 88
23997: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23998: LD_ADDR_EXP 85
24002: PUSH
24003: LD_INT 89
24005: ST_TO_ADDR
// us_hack := 99 ;
24006: LD_ADDR_EXP 86
24010: PUSH
24011: LD_INT 99
24013: ST_TO_ADDR
// us_artillery := 97 ;
24014: LD_ADDR_EXP 87
24018: PUSH
24019: LD_INT 97
24021: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24022: LD_ADDR_EXP 88
24026: PUSH
24027: LD_INT 91
24029: ST_TO_ADDR
// ar_mortar := 92 ;
24030: LD_ADDR_EXP 89
24034: PUSH
24035: LD_INT 92
24037: ST_TO_ADDR
// ru_radar := 98 ;
24038: LD_ADDR_EXP 84
24042: PUSH
24043: LD_INT 98
24045: ST_TO_ADDR
// tech_Artillery := 80 ;
24046: LD_ADDR_EXP 92
24050: PUSH
24051: LD_INT 80
24053: ST_TO_ADDR
// tech_RadMat := 81 ;
24054: LD_ADDR_EXP 93
24058: PUSH
24059: LD_INT 81
24061: ST_TO_ADDR
// tech_BasicTools := 82 ;
24062: LD_ADDR_EXP 94
24066: PUSH
24067: LD_INT 82
24069: ST_TO_ADDR
// tech_Cargo := 83 ;
24070: LD_ADDR_EXP 95
24074: PUSH
24075: LD_INT 83
24077: ST_TO_ADDR
// tech_Track := 84 ;
24078: LD_ADDR_EXP 96
24082: PUSH
24083: LD_INT 84
24085: ST_TO_ADDR
// tech_Crane := 85 ;
24086: LD_ADDR_EXP 97
24090: PUSH
24091: LD_INT 85
24093: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24094: LD_ADDR_EXP 98
24098: PUSH
24099: LD_INT 86
24101: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24102: LD_ADDR_EXP 99
24106: PUSH
24107: LD_INT 87
24109: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24110: LD_ADDR_EXP 100
24114: PUSH
24115: LD_INT 88
24117: ST_TO_ADDR
// class_mastodont := 31 ;
24118: LD_ADDR_EXP 101
24122: PUSH
24123: LD_INT 31
24125: ST_TO_ADDR
// class_horse := 21 ;
24126: LD_ADDR_EXP 102
24130: PUSH
24131: LD_INT 21
24133: ST_TO_ADDR
// end ;
24134: LD_VAR 0 1
24138: RET
// every 1 do
24139: GO 24141
24141: DISABLE
// InitGlobalVariables ; end_of_file
24142: CALL 23979 0 0
24146: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24147: LD_INT 0
24149: PPUSH
24150: PPUSH
// if exist_mode then
24151: LD_VAR 0 2
24155: IFFALSE 24180
// unit := CreateCharacter ( prefix & ident ) else
24157: LD_ADDR_VAR 0 5
24161: PUSH
24162: LD_VAR 0 3
24166: PUSH
24167: LD_VAR 0 1
24171: STR
24172: PPUSH
24173: CALL_OW 34
24177: ST_TO_ADDR
24178: GO 24195
// unit := NewCharacter ( ident ) ;
24180: LD_ADDR_VAR 0 5
24184: PUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 25
24194: ST_TO_ADDR
// result := unit ;
24195: LD_ADDR_VAR 0 4
24199: PUSH
24200: LD_VAR 0 5
24204: ST_TO_ADDR
// end ;
24205: LD_VAR 0 4
24209: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24210: LD_INT 0
24212: PPUSH
24213: PPUSH
// if not side or not nation then
24214: LD_VAR 0 1
24218: NOT
24219: PUSH
24220: LD_VAR 0 2
24224: NOT
24225: OR
24226: IFFALSE 24230
// exit ;
24228: GO 24998
// case nation of nation_american :
24230: LD_VAR 0 2
24234: PUSH
24235: LD_INT 1
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24243
24241: GO 24457
24243: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24244: LD_ADDR_VAR 0 4
24248: PUSH
24249: LD_INT 35
24251: PUSH
24252: LD_INT 45
24254: PUSH
24255: LD_INT 46
24257: PUSH
24258: LD_INT 47
24260: PUSH
24261: LD_INT 82
24263: PUSH
24264: LD_INT 83
24266: PUSH
24267: LD_INT 84
24269: PUSH
24270: LD_INT 85
24272: PUSH
24273: LD_INT 86
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: LD_INT 6
24284: PUSH
24285: LD_INT 15
24287: PUSH
24288: LD_INT 16
24290: PUSH
24291: LD_INT 7
24293: PUSH
24294: LD_INT 12
24296: PUSH
24297: LD_INT 13
24299: PUSH
24300: LD_INT 10
24302: PUSH
24303: LD_INT 14
24305: PUSH
24306: LD_INT 20
24308: PUSH
24309: LD_INT 21
24311: PUSH
24312: LD_INT 22
24314: PUSH
24315: LD_INT 25
24317: PUSH
24318: LD_INT 32
24320: PUSH
24321: LD_INT 27
24323: PUSH
24324: LD_INT 36
24326: PUSH
24327: LD_INT 69
24329: PUSH
24330: LD_INT 39
24332: PUSH
24333: LD_INT 34
24335: PUSH
24336: LD_INT 40
24338: PUSH
24339: LD_INT 48
24341: PUSH
24342: LD_INT 49
24344: PUSH
24345: LD_INT 50
24347: PUSH
24348: LD_INT 51
24350: PUSH
24351: LD_INT 52
24353: PUSH
24354: LD_INT 53
24356: PUSH
24357: LD_INT 54
24359: PUSH
24360: LD_INT 55
24362: PUSH
24363: LD_INT 56
24365: PUSH
24366: LD_INT 57
24368: PUSH
24369: LD_INT 58
24371: PUSH
24372: LD_INT 59
24374: PUSH
24375: LD_INT 60
24377: PUSH
24378: LD_INT 61
24380: PUSH
24381: LD_INT 62
24383: PUSH
24384: LD_INT 80
24386: PUSH
24387: LD_INT 82
24389: PUSH
24390: LD_INT 83
24392: PUSH
24393: LD_INT 84
24395: PUSH
24396: LD_INT 85
24398: PUSH
24399: LD_INT 86
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: ST_TO_ADDR
24455: GO 24922
24457: LD_INT 2
24459: DOUBLE
24460: EQUAL
24461: IFTRUE 24465
24463: GO 24691
24465: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24466: LD_ADDR_VAR 0 4
24470: PUSH
24471: LD_INT 35
24473: PUSH
24474: LD_INT 45
24476: PUSH
24477: LD_INT 46
24479: PUSH
24480: LD_INT 47
24482: PUSH
24483: LD_INT 82
24485: PUSH
24486: LD_INT 83
24488: PUSH
24489: LD_INT 84
24491: PUSH
24492: LD_INT 85
24494: PUSH
24495: LD_INT 87
24497: PUSH
24498: LD_INT 70
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: LD_INT 11
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: LD_INT 4
24512: PUSH
24513: LD_INT 5
24515: PUSH
24516: LD_INT 6
24518: PUSH
24519: LD_INT 15
24521: PUSH
24522: LD_INT 18
24524: PUSH
24525: LD_INT 7
24527: PUSH
24528: LD_INT 17
24530: PUSH
24531: LD_INT 8
24533: PUSH
24534: LD_INT 20
24536: PUSH
24537: LD_INT 21
24539: PUSH
24540: LD_INT 22
24542: PUSH
24543: LD_INT 72
24545: PUSH
24546: LD_INT 26
24548: PUSH
24549: LD_INT 69
24551: PUSH
24552: LD_INT 39
24554: PUSH
24555: LD_INT 40
24557: PUSH
24558: LD_INT 41
24560: PUSH
24561: LD_INT 42
24563: PUSH
24564: LD_INT 43
24566: PUSH
24567: LD_INT 48
24569: PUSH
24570: LD_INT 49
24572: PUSH
24573: LD_INT 50
24575: PUSH
24576: LD_INT 51
24578: PUSH
24579: LD_INT 52
24581: PUSH
24582: LD_INT 53
24584: PUSH
24585: LD_INT 54
24587: PUSH
24588: LD_INT 55
24590: PUSH
24591: LD_INT 56
24593: PUSH
24594: LD_INT 60
24596: PUSH
24597: LD_INT 61
24599: PUSH
24600: LD_INT 62
24602: PUSH
24603: LD_INT 66
24605: PUSH
24606: LD_INT 67
24608: PUSH
24609: LD_INT 68
24611: PUSH
24612: LD_INT 81
24614: PUSH
24615: LD_INT 82
24617: PUSH
24618: LD_INT 83
24620: PUSH
24621: LD_INT 84
24623: PUSH
24624: LD_INT 85
24626: PUSH
24627: LD_INT 87
24629: PUSH
24630: LD_INT 88
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: ST_TO_ADDR
24689: GO 24922
24691: LD_INT 3
24693: DOUBLE
24694: EQUAL
24695: IFTRUE 24699
24697: GO 24921
24699: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24700: LD_ADDR_VAR 0 4
24704: PUSH
24705: LD_INT 46
24707: PUSH
24708: LD_INT 47
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 2
24716: PUSH
24717: LD_INT 82
24719: PUSH
24720: LD_INT 83
24722: PUSH
24723: LD_INT 84
24725: PUSH
24726: LD_INT 85
24728: PUSH
24729: LD_INT 86
24731: PUSH
24732: LD_INT 11
24734: PUSH
24735: LD_INT 9
24737: PUSH
24738: LD_INT 20
24740: PUSH
24741: LD_INT 19
24743: PUSH
24744: LD_INT 21
24746: PUSH
24747: LD_INT 24
24749: PUSH
24750: LD_INT 22
24752: PUSH
24753: LD_INT 25
24755: PUSH
24756: LD_INT 28
24758: PUSH
24759: LD_INT 29
24761: PUSH
24762: LD_INT 30
24764: PUSH
24765: LD_INT 31
24767: PUSH
24768: LD_INT 37
24770: PUSH
24771: LD_INT 38
24773: PUSH
24774: LD_INT 32
24776: PUSH
24777: LD_INT 27
24779: PUSH
24780: LD_INT 33
24782: PUSH
24783: LD_INT 69
24785: PUSH
24786: LD_INT 39
24788: PUSH
24789: LD_INT 34
24791: PUSH
24792: LD_INT 40
24794: PUSH
24795: LD_INT 71
24797: PUSH
24798: LD_INT 23
24800: PUSH
24801: LD_INT 44
24803: PUSH
24804: LD_INT 48
24806: PUSH
24807: LD_INT 49
24809: PUSH
24810: LD_INT 50
24812: PUSH
24813: LD_INT 51
24815: PUSH
24816: LD_INT 52
24818: PUSH
24819: LD_INT 53
24821: PUSH
24822: LD_INT 54
24824: PUSH
24825: LD_INT 55
24827: PUSH
24828: LD_INT 56
24830: PUSH
24831: LD_INT 57
24833: PUSH
24834: LD_INT 58
24836: PUSH
24837: LD_INT 59
24839: PUSH
24840: LD_INT 63
24842: PUSH
24843: LD_INT 64
24845: PUSH
24846: LD_INT 65
24848: PUSH
24849: LD_INT 82
24851: PUSH
24852: LD_INT 83
24854: PUSH
24855: LD_INT 84
24857: PUSH
24858: LD_INT 85
24860: PUSH
24861: LD_INT 86
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: ST_TO_ADDR
24919: GO 24922
24921: POP
// if state > - 1 and state < 3 then
24922: LD_VAR 0 3
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: GREATER
24931: PUSH
24932: LD_VAR 0 3
24936: PUSH
24937: LD_INT 3
24939: LESS
24940: AND
24941: IFFALSE 24998
// for i in result do
24943: LD_ADDR_VAR 0 5
24947: PUSH
24948: LD_VAR 0 4
24952: PUSH
24953: FOR_IN
24954: IFFALSE 24996
// if GetTech ( i , side ) <> state then
24956: LD_VAR 0 5
24960: PPUSH
24961: LD_VAR 0 1
24965: PPUSH
24966: CALL_OW 321
24970: PUSH
24971: LD_VAR 0 3
24975: NONEQUAL
24976: IFFALSE 24994
// result := result diff i ;
24978: LD_ADDR_VAR 0 4
24982: PUSH
24983: LD_VAR 0 4
24987: PUSH
24988: LD_VAR 0 5
24992: DIFF
24993: ST_TO_ADDR
24994: GO 24953
24996: POP
24997: POP
// end ;
24998: LD_VAR 0 4
25002: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25003: LD_INT 0
25005: PPUSH
25006: PPUSH
25007: PPUSH
// result := true ;
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_INT 1
25015: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25016: LD_ADDR_VAR 0 5
25020: PUSH
25021: LD_VAR 0 2
25025: PPUSH
25026: CALL_OW 480
25030: ST_TO_ADDR
// if not tmp then
25031: LD_VAR 0 5
25035: NOT
25036: IFFALSE 25040
// exit ;
25038: GO 25089
// for i in tmp do
25040: LD_ADDR_VAR 0 4
25044: PUSH
25045: LD_VAR 0 5
25049: PUSH
25050: FOR_IN
25051: IFFALSE 25087
// if GetTech ( i , side ) <> state_researched then
25053: LD_VAR 0 4
25057: PPUSH
25058: LD_VAR 0 1
25062: PPUSH
25063: CALL_OW 321
25067: PUSH
25068: LD_INT 2
25070: NONEQUAL
25071: IFFALSE 25085
// begin result := false ;
25073: LD_ADDR_VAR 0 3
25077: PUSH
25078: LD_INT 0
25080: ST_TO_ADDR
// exit ;
25081: POP
25082: POP
25083: GO 25089
// end ;
25085: GO 25050
25087: POP
25088: POP
// end ;
25089: LD_VAR 0 3
25093: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25094: LD_INT 0
25096: PPUSH
25097: PPUSH
25098: PPUSH
25099: PPUSH
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25109: LD_VAR 0 1
25113: NOT
25114: PUSH
25115: LD_VAR 0 1
25119: PPUSH
25120: CALL_OW 257
25124: PUSH
25125: LD_INT 9
25127: NONEQUAL
25128: OR
25129: IFFALSE 25133
// exit ;
25131: GO 25706
// side := GetSide ( unit ) ;
25133: LD_ADDR_VAR 0 9
25137: PUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 255
25147: ST_TO_ADDR
// tech_space := tech_spacanom ;
25148: LD_ADDR_VAR 0 12
25152: PUSH
25153: LD_INT 29
25155: ST_TO_ADDR
// tech_time := tech_taurad ;
25156: LD_ADDR_VAR 0 13
25160: PUSH
25161: LD_INT 28
25163: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25164: LD_ADDR_VAR 0 11
25168: PUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 310
25178: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25179: LD_VAR 0 11
25183: PPUSH
25184: CALL_OW 247
25188: PUSH
25189: LD_INT 2
25191: EQUAL
25192: IFFALSE 25196
// exit ;
25194: GO 25706
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25196: LD_ADDR_VAR 0 8
25200: PUSH
25201: LD_INT 81
25203: PUSH
25204: LD_VAR 0 9
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 3
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 3
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PPUSH
25234: CALL_OW 69
25238: ST_TO_ADDR
// if not tmp then
25239: LD_VAR 0 8
25243: NOT
25244: IFFALSE 25248
// exit ;
25246: GO 25706
// if in_unit then
25248: LD_VAR 0 11
25252: IFFALSE 25276
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25254: LD_ADDR_VAR 0 10
25258: PUSH
25259: LD_VAR 0 8
25263: PPUSH
25264: LD_VAR 0 11
25268: PPUSH
25269: CALL_OW 74
25273: ST_TO_ADDR
25274: GO 25296
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25276: LD_ADDR_VAR 0 10
25280: PUSH
25281: LD_VAR 0 8
25285: PPUSH
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 74
25295: ST_TO_ADDR
// if not enemy then
25296: LD_VAR 0 10
25300: NOT
25301: IFFALSE 25305
// exit ;
25303: GO 25706
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25305: LD_VAR 0 11
25309: PUSH
25310: LD_VAR 0 11
25314: PPUSH
25315: LD_VAR 0 10
25319: PPUSH
25320: CALL_OW 296
25324: PUSH
25325: LD_INT 13
25327: GREATER
25328: AND
25329: PUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: LD_VAR 0 10
25339: PPUSH
25340: CALL_OW 296
25344: PUSH
25345: LD_INT 12
25347: GREATER
25348: OR
25349: IFFALSE 25353
// exit ;
25351: GO 25706
// missile := [ 1 ] ;
25353: LD_ADDR_VAR 0 14
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25364: LD_VAR 0 9
25368: PPUSH
25369: LD_VAR 0 12
25373: PPUSH
25374: CALL_OW 325
25378: IFFALSE 25407
// missile := Insert ( missile , missile + 1 , 2 ) ;
25380: LD_ADDR_VAR 0 14
25384: PUSH
25385: LD_VAR 0 14
25389: PPUSH
25390: LD_VAR 0 14
25394: PUSH
25395: LD_INT 1
25397: PLUS
25398: PPUSH
25399: LD_INT 2
25401: PPUSH
25402: CALL_OW 2
25406: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25407: LD_VAR 0 9
25411: PPUSH
25412: LD_VAR 0 13
25416: PPUSH
25417: CALL_OW 325
25421: PUSH
25422: LD_VAR 0 10
25426: PPUSH
25427: CALL_OW 255
25431: PPUSH
25432: LD_VAR 0 13
25436: PPUSH
25437: CALL_OW 325
25441: NOT
25442: AND
25443: IFFALSE 25472
// missile := Insert ( missile , missile + 1 , 3 ) ;
25445: LD_ADDR_VAR 0 14
25449: PUSH
25450: LD_VAR 0 14
25454: PPUSH
25455: LD_VAR 0 14
25459: PUSH
25460: LD_INT 1
25462: PLUS
25463: PPUSH
25464: LD_INT 3
25466: PPUSH
25467: CALL_OW 2
25471: ST_TO_ADDR
// if missile < 2 then
25472: LD_VAR 0 14
25476: PUSH
25477: LD_INT 2
25479: LESS
25480: IFFALSE 25484
// exit ;
25482: GO 25706
// x := GetX ( enemy ) ;
25484: LD_ADDR_VAR 0 4
25488: PUSH
25489: LD_VAR 0 10
25493: PPUSH
25494: CALL_OW 250
25498: ST_TO_ADDR
// y := GetY ( enemy ) ;
25499: LD_ADDR_VAR 0 5
25503: PUSH
25504: LD_VAR 0 10
25508: PPUSH
25509: CALL_OW 251
25513: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25514: LD_ADDR_VAR 0 6
25518: PUSH
25519: LD_VAR 0 4
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PPUSH
25528: LD_INT 1
25530: PPUSH
25531: CALL_OW 12
25535: PLUS
25536: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25537: LD_ADDR_VAR 0 7
25541: PUSH
25542: LD_VAR 0 5
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PPUSH
25551: LD_INT 1
25553: PPUSH
25554: CALL_OW 12
25558: PLUS
25559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25560: LD_VAR 0 6
25564: PPUSH
25565: LD_VAR 0 7
25569: PPUSH
25570: CALL_OW 488
25574: NOT
25575: IFFALSE 25597
// begin _x := x ;
25577: LD_ADDR_VAR 0 6
25581: PUSH
25582: LD_VAR 0 4
25586: ST_TO_ADDR
// _y := y ;
25587: LD_ADDR_VAR 0 7
25591: PUSH
25592: LD_VAR 0 5
25596: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: LD_INT 1
25604: PPUSH
25605: LD_VAR 0 14
25609: PPUSH
25610: CALL_OW 12
25614: ST_TO_ADDR
// case i of 1 :
25615: LD_VAR 0 3
25619: PUSH
25620: LD_INT 1
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25645
25628: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_VAR 0 10
25638: PPUSH
25639: CALL_OW 115
25643: GO 25706
25645: LD_INT 2
25647: DOUBLE
25648: EQUAL
25649: IFTRUE 25653
25651: GO 25675
25653: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25654: LD_VAR 0 1
25658: PPUSH
25659: LD_VAR 0 6
25663: PPUSH
25664: LD_VAR 0 7
25668: PPUSH
25669: CALL_OW 153
25673: GO 25706
25675: LD_INT 3
25677: DOUBLE
25678: EQUAL
25679: IFTRUE 25683
25681: GO 25705
25683: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25684: LD_VAR 0 1
25688: PPUSH
25689: LD_VAR 0 6
25693: PPUSH
25694: LD_VAR 0 7
25698: PPUSH
25699: CALL_OW 154
25703: GO 25706
25705: POP
// end ;
25706: LD_VAR 0 2
25710: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
// if not unit or not building then
25719: LD_VAR 0 1
25723: NOT
25724: PUSH
25725: LD_VAR 0 2
25729: NOT
25730: OR
25731: IFFALSE 25735
// exit ;
25733: GO 25893
// x := GetX ( building ) ;
25735: LD_ADDR_VAR 0 5
25739: PUSH
25740: LD_VAR 0 2
25744: PPUSH
25745: CALL_OW 250
25749: ST_TO_ADDR
// y := GetY ( building ) ;
25750: LD_ADDR_VAR 0 6
25754: PUSH
25755: LD_VAR 0 2
25759: PPUSH
25760: CALL_OW 251
25764: ST_TO_ADDR
// for i = 0 to 5 do
25765: LD_ADDR_VAR 0 4
25769: PUSH
25770: DOUBLE
25771: LD_INT 0
25773: DEC
25774: ST_TO_ADDR
25775: LD_INT 5
25777: PUSH
25778: FOR_TO
25779: IFFALSE 25891
// begin _x := ShiftX ( x , i , 3 ) ;
25781: LD_ADDR_VAR 0 7
25785: PUSH
25786: LD_VAR 0 5
25790: PPUSH
25791: LD_VAR 0 4
25795: PPUSH
25796: LD_INT 3
25798: PPUSH
25799: CALL_OW 272
25803: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25804: LD_ADDR_VAR 0 8
25808: PUSH
25809: LD_VAR 0 6
25813: PPUSH
25814: LD_VAR 0 4
25818: PPUSH
25819: LD_INT 3
25821: PPUSH
25822: CALL_OW 273
25826: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25827: LD_VAR 0 7
25831: PPUSH
25832: LD_VAR 0 8
25836: PPUSH
25837: CALL_OW 488
25841: NOT
25842: IFFALSE 25846
// continue ;
25844: GO 25778
// if HexInfo ( _x , _y ) = 0 then
25846: LD_VAR 0 7
25850: PPUSH
25851: LD_VAR 0 8
25855: PPUSH
25856: CALL_OW 428
25860: PUSH
25861: LD_INT 0
25863: EQUAL
25864: IFFALSE 25889
// begin ComMoveXY ( unit , _x , _y ) ;
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_VAR 0 7
25875: PPUSH
25876: LD_VAR 0 8
25880: PPUSH
25881: CALL_OW 111
// exit ;
25885: POP
25886: POP
25887: GO 25893
// end ; end ;
25889: GO 25778
25891: POP
25892: POP
// end ;
25893: LD_VAR 0 3
25897: RET
// export function ScanBase ( side , base_area ) ; begin
25898: LD_INT 0
25900: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25901: LD_ADDR_VAR 0 3
25905: PUSH
25906: LD_VAR 0 2
25910: PPUSH
25911: LD_INT 81
25913: PUSH
25914: LD_VAR 0 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PPUSH
25923: CALL_OW 70
25927: ST_TO_ADDR
// end ;
25928: LD_VAR 0 3
25932: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25933: LD_INT 0
25935: PPUSH
25936: PPUSH
25937: PPUSH
25938: PPUSH
// result := false ;
25939: LD_ADDR_VAR 0 2
25943: PUSH
25944: LD_INT 0
25946: ST_TO_ADDR
// side := GetSide ( unit ) ;
25947: LD_ADDR_VAR 0 3
25951: PUSH
25952: LD_VAR 0 1
25956: PPUSH
25957: CALL_OW 255
25961: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25962: LD_ADDR_VAR 0 4
25966: PUSH
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 248
25976: ST_TO_ADDR
// case nat of 1 :
25977: LD_VAR 0 4
25981: PUSH
25982: LD_INT 1
25984: DOUBLE
25985: EQUAL
25986: IFTRUE 25990
25988: GO 26001
25990: POP
// tech := tech_lassight ; 2 :
25991: LD_ADDR_VAR 0 5
25995: PUSH
25996: LD_INT 12
25998: ST_TO_ADDR
25999: GO 26040
26001: LD_INT 2
26003: DOUBLE
26004: EQUAL
26005: IFTRUE 26009
26007: GO 26020
26009: POP
// tech := tech_mortar ; 3 :
26010: LD_ADDR_VAR 0 5
26014: PUSH
26015: LD_INT 41
26017: ST_TO_ADDR
26018: GO 26040
26020: LD_INT 3
26022: DOUBLE
26023: EQUAL
26024: IFTRUE 26028
26026: GO 26039
26028: POP
// tech := tech_bazooka ; end ;
26029: LD_ADDR_VAR 0 5
26033: PUSH
26034: LD_INT 44
26036: ST_TO_ADDR
26037: GO 26040
26039: POP
// if Researched ( side , tech ) then
26040: LD_VAR 0 3
26044: PPUSH
26045: LD_VAR 0 5
26049: PPUSH
26050: CALL_OW 325
26054: IFFALSE 26081
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26056: LD_ADDR_VAR 0 2
26060: PUSH
26061: LD_INT 5
26063: PUSH
26064: LD_INT 8
26066: PUSH
26067: LD_INT 9
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: PUSH
26075: LD_VAR 0 4
26079: ARRAY
26080: ST_TO_ADDR
// end ;
26081: LD_VAR 0 2
26085: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26086: LD_INT 0
26088: PPUSH
26089: PPUSH
26090: PPUSH
// if not mines then
26091: LD_VAR 0 2
26095: NOT
26096: IFFALSE 26100
// exit ;
26098: GO 26244
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26100: LD_ADDR_VAR 0 5
26104: PUSH
26105: LD_INT 81
26107: PUSH
26108: LD_VAR 0 1
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 3
26119: PUSH
26120: LD_INT 21
26122: PUSH
26123: LD_INT 3
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: ST_TO_ADDR
// for i in mines do
26143: LD_ADDR_VAR 0 4
26147: PUSH
26148: LD_VAR 0 2
26152: PUSH
26153: FOR_IN
26154: IFFALSE 26242
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26156: LD_VAR 0 4
26160: PUSH
26161: LD_INT 1
26163: ARRAY
26164: PPUSH
26165: LD_VAR 0 4
26169: PUSH
26170: LD_INT 2
26172: ARRAY
26173: PPUSH
26174: CALL_OW 458
26178: NOT
26179: IFFALSE 26183
// continue ;
26181: GO 26153
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26183: LD_VAR 0 4
26187: PUSH
26188: LD_INT 1
26190: ARRAY
26191: PPUSH
26192: LD_VAR 0 4
26196: PUSH
26197: LD_INT 2
26199: ARRAY
26200: PPUSH
26201: CALL_OW 428
26205: PUSH
26206: LD_VAR 0 5
26210: IN
26211: IFFALSE 26240
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26213: LD_VAR 0 4
26217: PUSH
26218: LD_INT 1
26220: ARRAY
26221: PPUSH
26222: LD_VAR 0 4
26226: PUSH
26227: LD_INT 2
26229: ARRAY
26230: PPUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 456
// end ;
26240: GO 26153
26242: POP
26243: POP
// end ;
26244: LD_VAR 0 3
26248: RET
// export function Count ( array ) ; var i ; begin
26249: LD_INT 0
26251: PPUSH
26252: PPUSH
// result := 0 ;
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: LD_INT 0
26260: ST_TO_ADDR
// for i in array do
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_VAR 0 1
26270: PUSH
26271: FOR_IN
26272: IFFALSE 26296
// if i then
26274: LD_VAR 0 3
26278: IFFALSE 26294
// result := result + 1 ;
26280: LD_ADDR_VAR 0 2
26284: PUSH
26285: LD_VAR 0 2
26289: PUSH
26290: LD_INT 1
26292: PLUS
26293: ST_TO_ADDR
26294: GO 26271
26296: POP
26297: POP
// end ;
26298: LD_VAR 0 2
26302: RET
// export function IsEmpty ( building ) ; begin
26303: LD_INT 0
26305: PPUSH
// if not building then
26306: LD_VAR 0 1
26310: NOT
26311: IFFALSE 26315
// exit ;
26313: GO 26358
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26315: LD_ADDR_VAR 0 2
26319: PUSH
26320: LD_VAR 0 1
26324: PUSH
26325: LD_INT 22
26327: PUSH
26328: LD_VAR 0 1
26332: PPUSH
26333: CALL_OW 255
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 58
26344: PUSH
26345: EMPTY
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PPUSH
26352: CALL_OW 69
26356: IN
26357: ST_TO_ADDR
// end ;
26358: LD_VAR 0 2
26362: RET
// export function IsNotFull ( building ) ; begin
26363: LD_INT 0
26365: PPUSH
// if not building then
26366: LD_VAR 0 1
26370: NOT
26371: IFFALSE 26375
// exit ;
26373: GO 26394
// result := UnitsInside ( building ) < 6 ;
26375: LD_ADDR_VAR 0 2
26379: PUSH
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 313
26389: PUSH
26390: LD_INT 6
26392: LESS
26393: ST_TO_ADDR
// end ;
26394: LD_VAR 0 2
26398: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26399: LD_INT 0
26401: PPUSH
26402: PPUSH
26403: PPUSH
26404: PPUSH
// tmp := [ ] ;
26405: LD_ADDR_VAR 0 3
26409: PUSH
26410: EMPTY
26411: ST_TO_ADDR
// list := [ ] ;
26412: LD_ADDR_VAR 0 5
26416: PUSH
26417: EMPTY
26418: ST_TO_ADDR
// for i = 16 to 25 do
26419: LD_ADDR_VAR 0 4
26423: PUSH
26424: DOUBLE
26425: LD_INT 16
26427: DEC
26428: ST_TO_ADDR
26429: LD_INT 25
26431: PUSH
26432: FOR_TO
26433: IFFALSE 26506
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26435: LD_ADDR_VAR 0 3
26439: PUSH
26440: LD_VAR 0 3
26444: PUSH
26445: LD_INT 22
26447: PUSH
26448: LD_VAR 0 1
26452: PPUSH
26453: CALL_OW 255
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 91
26464: PUSH
26465: LD_VAR 0 1
26469: PUSH
26470: LD_INT 6
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 30
26480: PUSH
26481: LD_VAR 0 4
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: PPUSH
26498: CALL_OW 69
26502: ADD
26503: ST_TO_ADDR
26504: GO 26432
26506: POP
26507: POP
// for i = 1 to tmp do
26508: LD_ADDR_VAR 0 4
26512: PUSH
26513: DOUBLE
26514: LD_INT 1
26516: DEC
26517: ST_TO_ADDR
26518: LD_VAR 0 3
26522: PUSH
26523: FOR_TO
26524: IFFALSE 26612
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26526: LD_ADDR_VAR 0 5
26530: PUSH
26531: LD_VAR 0 5
26535: PUSH
26536: LD_VAR 0 3
26540: PUSH
26541: LD_VAR 0 4
26545: ARRAY
26546: PPUSH
26547: CALL_OW 266
26551: PUSH
26552: LD_VAR 0 3
26556: PUSH
26557: LD_VAR 0 4
26561: ARRAY
26562: PPUSH
26563: CALL_OW 250
26567: PUSH
26568: LD_VAR 0 3
26572: PUSH
26573: LD_VAR 0 4
26577: ARRAY
26578: PPUSH
26579: CALL_OW 251
26583: PUSH
26584: LD_VAR 0 3
26588: PUSH
26589: LD_VAR 0 4
26593: ARRAY
26594: PPUSH
26595: CALL_OW 254
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: ADD
26609: ST_TO_ADDR
26610: GO 26523
26612: POP
26613: POP
// result := list ;
26614: LD_ADDR_VAR 0 2
26618: PUSH
26619: LD_VAR 0 5
26623: ST_TO_ADDR
// end ;
26624: LD_VAR 0 2
26628: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26629: LD_INT 0
26631: PPUSH
26632: PPUSH
26633: PPUSH
26634: PPUSH
26635: PPUSH
26636: PPUSH
26637: PPUSH
// if not factory then
26638: LD_VAR 0 1
26642: NOT
26643: IFFALSE 26647
// exit ;
26645: GO 27240
// if control = control_apeman then
26647: LD_VAR 0 4
26651: PUSH
26652: LD_INT 5
26654: EQUAL
26655: IFFALSE 26764
// begin tmp := UnitsInside ( factory ) ;
26657: LD_ADDR_VAR 0 8
26661: PUSH
26662: LD_VAR 0 1
26666: PPUSH
26667: CALL_OW 313
26671: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26672: LD_VAR 0 8
26676: PPUSH
26677: LD_INT 25
26679: PUSH
26680: LD_INT 12
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PPUSH
26687: CALL_OW 72
26691: NOT
26692: IFFALSE 26702
// control := control_manual ;
26694: LD_ADDR_VAR 0 4
26698: PUSH
26699: LD_INT 1
26701: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26702: LD_ADDR_VAR 0 8
26706: PUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL 26399 0 1
26716: ST_TO_ADDR
// if tmp then
26717: LD_VAR 0 8
26721: IFFALSE 26764
// begin for i in tmp do
26723: LD_ADDR_VAR 0 7
26727: PUSH
26728: LD_VAR 0 8
26732: PUSH
26733: FOR_IN
26734: IFFALSE 26762
// if i [ 1 ] = b_ext_radio then
26736: LD_VAR 0 7
26740: PUSH
26741: LD_INT 1
26743: ARRAY
26744: PUSH
26745: LD_INT 22
26747: EQUAL
26748: IFFALSE 26760
// begin control := control_remote ;
26750: LD_ADDR_VAR 0 4
26754: PUSH
26755: LD_INT 2
26757: ST_TO_ADDR
// break ;
26758: GO 26762
// end ;
26760: GO 26733
26762: POP
26763: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26764: LD_VAR 0 1
26768: PPUSH
26769: LD_VAR 0 2
26773: PPUSH
26774: LD_VAR 0 3
26778: PPUSH
26779: LD_VAR 0 4
26783: PPUSH
26784: LD_VAR 0 5
26788: PPUSH
26789: CALL_OW 448
26793: IFFALSE 26828
// begin result := [ chassis , engine , control , weapon ] ;
26795: LD_ADDR_VAR 0 6
26799: PUSH
26800: LD_VAR 0 2
26804: PUSH
26805: LD_VAR 0 3
26809: PUSH
26810: LD_VAR 0 4
26814: PUSH
26815: LD_VAR 0 5
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
// exit ;
26826: GO 27240
// end ; _chassis := AvailableChassisList ( factory ) ;
26828: LD_ADDR_VAR 0 9
26832: PUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 475
26842: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26843: LD_ADDR_VAR 0 11
26847: PUSH
26848: LD_VAR 0 1
26852: PPUSH
26853: CALL_OW 476
26857: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26858: LD_ADDR_VAR 0 12
26862: PUSH
26863: LD_VAR 0 1
26867: PPUSH
26868: CALL_OW 477
26872: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26873: LD_ADDR_VAR 0 10
26877: PUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: CALL_OW 478
26887: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26888: LD_VAR 0 9
26892: NOT
26893: PUSH
26894: LD_VAR 0 11
26898: NOT
26899: OR
26900: PUSH
26901: LD_VAR 0 12
26905: NOT
26906: OR
26907: PUSH
26908: LD_VAR 0 10
26912: NOT
26913: OR
26914: IFFALSE 26949
// begin result := [ chassis , engine , control , weapon ] ;
26916: LD_ADDR_VAR 0 6
26920: PUSH
26921: LD_VAR 0 2
26925: PUSH
26926: LD_VAR 0 3
26930: PUSH
26931: LD_VAR 0 4
26935: PUSH
26936: LD_VAR 0 5
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: ST_TO_ADDR
// exit ;
26947: GO 27240
// end ; if not chassis in _chassis then
26949: LD_VAR 0 2
26953: PUSH
26954: LD_VAR 0 9
26958: IN
26959: NOT
26960: IFFALSE 26986
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26962: LD_ADDR_VAR 0 2
26966: PUSH
26967: LD_VAR 0 9
26971: PUSH
26972: LD_INT 1
26974: PPUSH
26975: LD_VAR 0 9
26979: PPUSH
26980: CALL_OW 12
26984: ARRAY
26985: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26986: LD_VAR 0 2
26990: PPUSH
26991: LD_VAR 0 3
26995: PPUSH
26996: CALL 27245 0 2
27000: NOT
27001: IFFALSE 27060
// repeat engine := _engine [ 1 ] ;
27003: LD_ADDR_VAR 0 3
27007: PUSH
27008: LD_VAR 0 11
27012: PUSH
27013: LD_INT 1
27015: ARRAY
27016: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27017: LD_ADDR_VAR 0 11
27021: PUSH
27022: LD_VAR 0 11
27026: PPUSH
27027: LD_INT 1
27029: PPUSH
27030: CALL_OW 3
27034: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27035: LD_VAR 0 2
27039: PPUSH
27040: LD_VAR 0 3
27044: PPUSH
27045: CALL 27245 0 2
27049: PUSH
27050: LD_VAR 0 11
27054: PUSH
27055: EMPTY
27056: EQUAL
27057: OR
27058: IFFALSE 27003
// if not control in _control then
27060: LD_VAR 0 4
27064: PUSH
27065: LD_VAR 0 12
27069: IN
27070: NOT
27071: IFFALSE 27097
// control := _control [ rand ( 1 , _control ) ] ;
27073: LD_ADDR_VAR 0 4
27077: PUSH
27078: LD_VAR 0 12
27082: PUSH
27083: LD_INT 1
27085: PPUSH
27086: LD_VAR 0 12
27090: PPUSH
27091: CALL_OW 12
27095: ARRAY
27096: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27097: LD_VAR 0 2
27101: PPUSH
27102: LD_VAR 0 5
27106: PPUSH
27107: CALL 27465 0 2
27111: NOT
27112: IFFALSE 27171
// repeat weapon := _weapon [ 1 ] ;
27114: LD_ADDR_VAR 0 5
27118: PUSH
27119: LD_VAR 0 10
27123: PUSH
27124: LD_INT 1
27126: ARRAY
27127: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27128: LD_ADDR_VAR 0 10
27132: PUSH
27133: LD_VAR 0 10
27137: PPUSH
27138: LD_INT 1
27140: PPUSH
27141: CALL_OW 3
27145: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27146: LD_VAR 0 2
27150: PPUSH
27151: LD_VAR 0 5
27155: PPUSH
27156: CALL 27465 0 2
27160: PUSH
27161: LD_VAR 0 10
27165: PUSH
27166: EMPTY
27167: EQUAL
27168: OR
27169: IFFALSE 27114
// result := [ ] ;
27171: LD_ADDR_VAR 0 6
27175: PUSH
27176: EMPTY
27177: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_VAR 0 2
27187: PPUSH
27188: LD_VAR 0 3
27192: PPUSH
27193: LD_VAR 0 4
27197: PPUSH
27198: LD_VAR 0 5
27202: PPUSH
27203: CALL_OW 448
27207: IFFALSE 27240
// result := [ chassis , engine , control , weapon ] ;
27209: LD_ADDR_VAR 0 6
27213: PUSH
27214: LD_VAR 0 2
27218: PUSH
27219: LD_VAR 0 3
27223: PUSH
27224: LD_VAR 0 4
27228: PUSH
27229: LD_VAR 0 5
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: ST_TO_ADDR
// end ;
27240: LD_VAR 0 6
27244: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27245: LD_INT 0
27247: PPUSH
// if not chassis or not engine then
27248: LD_VAR 0 1
27252: NOT
27253: PUSH
27254: LD_VAR 0 2
27258: NOT
27259: OR
27260: IFFALSE 27264
// exit ;
27262: GO 27460
// case engine of engine_solar :
27264: LD_VAR 0 2
27268: PUSH
27269: LD_INT 2
27271: DOUBLE
27272: EQUAL
27273: IFTRUE 27277
27275: GO 27315
27277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27278: LD_ADDR_VAR 0 3
27282: PUSH
27283: LD_INT 11
27285: PUSH
27286: LD_INT 12
27288: PUSH
27289: LD_INT 13
27291: PUSH
27292: LD_INT 14
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 3
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: ST_TO_ADDR
27313: GO 27444
27315: LD_INT 1
27317: DOUBLE
27318: EQUAL
27319: IFTRUE 27323
27321: GO 27385
27323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27324: LD_ADDR_VAR 0 3
27328: PUSH
27329: LD_INT 11
27331: PUSH
27332: LD_INT 12
27334: PUSH
27335: LD_INT 13
27337: PUSH
27338: LD_INT 14
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 3
27349: PUSH
27350: LD_INT 4
27352: PUSH
27353: LD_INT 5
27355: PUSH
27356: LD_INT 21
27358: PUSH
27359: LD_INT 23
27361: PUSH
27362: LD_INT 22
27364: PUSH
27365: LD_INT 24
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: ST_TO_ADDR
27383: GO 27444
27385: LD_INT 3
27387: DOUBLE
27388: EQUAL
27389: IFTRUE 27393
27391: GO 27443
27393: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27394: LD_ADDR_VAR 0 3
27398: PUSH
27399: LD_INT 13
27401: PUSH
27402: LD_INT 14
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: LD_INT 3
27410: PUSH
27411: LD_INT 4
27413: PUSH
27414: LD_INT 5
27416: PUSH
27417: LD_INT 21
27419: PUSH
27420: LD_INT 22
27422: PUSH
27423: LD_INT 23
27425: PUSH
27426: LD_INT 24
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: ST_TO_ADDR
27441: GO 27444
27443: POP
// result := ( chassis in result ) ;
27444: LD_ADDR_VAR 0 3
27448: PUSH
27449: LD_VAR 0 1
27453: PUSH
27454: LD_VAR 0 3
27458: IN
27459: ST_TO_ADDR
// end ;
27460: LD_VAR 0 3
27464: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27465: LD_INT 0
27467: PPUSH
// if not chassis or not weapon then
27468: LD_VAR 0 1
27472: NOT
27473: PUSH
27474: LD_VAR 0 2
27478: NOT
27479: OR
27480: IFFALSE 27484
// exit ;
27482: GO 28546
// case weapon of us_machine_gun :
27484: LD_VAR 0 2
27488: PUSH
27489: LD_INT 2
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27527
27497: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: LD_INT 3
27511: PUSH
27512: LD_INT 4
27514: PUSH
27515: LD_INT 5
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: ST_TO_ADDR
27525: GO 28530
27527: LD_INT 3
27529: DOUBLE
27530: EQUAL
27531: IFTRUE 27535
27533: GO 27565
27535: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27536: LD_ADDR_VAR 0 3
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 3
27549: PUSH
27550: LD_INT 4
27552: PUSH
27553: LD_INT 5
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: ST_TO_ADDR
27563: GO 28530
27565: LD_INT 11
27567: DOUBLE
27568: EQUAL
27569: IFTRUE 27573
27571: GO 27603
27573: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27574: LD_ADDR_VAR 0 3
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: LD_INT 4
27590: PUSH
27591: LD_INT 5
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: ST_TO_ADDR
27601: GO 28530
27603: LD_INT 4
27605: DOUBLE
27606: EQUAL
27607: IFTRUE 27611
27609: GO 27637
27611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27612: LD_ADDR_VAR 0 3
27616: PUSH
27617: LD_INT 2
27619: PUSH
27620: LD_INT 3
27622: PUSH
27623: LD_INT 4
27625: PUSH
27626: LD_INT 5
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
27635: GO 28530
27637: LD_INT 5
27639: DOUBLE
27640: EQUAL
27641: IFTRUE 27645
27643: GO 27671
27645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 2
27653: PUSH
27654: LD_INT 3
27656: PUSH
27657: LD_INT 4
27659: PUSH
27660: LD_INT 5
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: ST_TO_ADDR
27669: GO 28530
27671: LD_INT 9
27673: DOUBLE
27674: EQUAL
27675: IFTRUE 27679
27677: GO 27705
27679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27680: LD_ADDR_VAR 0 3
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: LD_INT 4
27693: PUSH
27694: LD_INT 5
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
27703: GO 28530
27705: LD_INT 7
27707: DOUBLE
27708: EQUAL
27709: IFTRUE 27713
27711: GO 27739
27713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27714: LD_ADDR_VAR 0 3
27718: PUSH
27719: LD_INT 2
27721: PUSH
27722: LD_INT 3
27724: PUSH
27725: LD_INT 4
27727: PUSH
27728: LD_INT 5
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: ST_TO_ADDR
27737: GO 28530
27739: LD_INT 12
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 27773
27747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: LD_INT 4
27761: PUSH
27762: LD_INT 5
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
27771: GO 28530
27773: LD_INT 13
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 27807
27781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27782: LD_ADDR_VAR 0 3
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: LD_INT 4
27795: PUSH
27796: LD_INT 5
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
27805: GO 28530
27807: LD_INT 14
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27815
27813: GO 27833
27815: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27816: LD_ADDR_VAR 0 3
27820: PUSH
27821: LD_INT 4
27823: PUSH
27824: LD_INT 5
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: ST_TO_ADDR
27831: GO 28530
27833: LD_INT 6
27835: DOUBLE
27836: EQUAL
27837: IFTRUE 27841
27839: GO 27859
27841: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_INT 4
27849: PUSH
27850: LD_INT 5
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: ST_TO_ADDR
27857: GO 28530
27859: LD_INT 10
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27885
27867: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_INT 4
27875: PUSH
27876: LD_INT 5
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: ST_TO_ADDR
27883: GO 28530
27885: LD_INT 22
27887: DOUBLE
27888: EQUAL
27889: IFTRUE 27893
27891: GO 27919
27893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27894: LD_ADDR_VAR 0 3
27898: PUSH
27899: LD_INT 11
27901: PUSH
27902: LD_INT 12
27904: PUSH
27905: LD_INT 13
27907: PUSH
27908: LD_INT 14
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
27917: GO 28530
27919: LD_INT 23
27921: DOUBLE
27922: EQUAL
27923: IFTRUE 27927
27925: GO 27953
27927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_INT 11
27935: PUSH
27936: LD_INT 12
27938: PUSH
27939: LD_INT 13
27941: PUSH
27942: LD_INT 14
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
27951: GO 28530
27953: LD_INT 24
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27961
27959: GO 27987
27961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27962: LD_ADDR_VAR 0 3
27966: PUSH
27967: LD_INT 11
27969: PUSH
27970: LD_INT 12
27972: PUSH
27973: LD_INT 13
27975: PUSH
27976: LD_INT 14
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: ST_TO_ADDR
27985: GO 28530
27987: LD_INT 30
27989: DOUBLE
27990: EQUAL
27991: IFTRUE 27995
27993: GO 28021
27995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27996: LD_ADDR_VAR 0 3
28000: PUSH
28001: LD_INT 11
28003: PUSH
28004: LD_INT 12
28006: PUSH
28007: LD_INT 13
28009: PUSH
28010: LD_INT 14
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: ST_TO_ADDR
28019: GO 28530
28021: LD_INT 25
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28047
28029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28030: LD_ADDR_VAR 0 3
28034: PUSH
28035: LD_INT 13
28037: PUSH
28038: LD_INT 14
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: ST_TO_ADDR
28045: GO 28530
28047: LD_INT 27
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28073
28055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_INT 13
28063: PUSH
28064: LD_INT 14
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: ST_TO_ADDR
28071: GO 28530
28073: LD_EXP 89
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28109
28083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_INT 11
28091: PUSH
28092: LD_INT 12
28094: PUSH
28095: LD_INT 13
28097: PUSH
28098: LD_INT 14
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
28107: GO 28530
28109: LD_INT 28
28111: DOUBLE
28112: EQUAL
28113: IFTRUE 28117
28115: GO 28135
28117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28118: LD_ADDR_VAR 0 3
28122: PUSH
28123: LD_INT 13
28125: PUSH
28126: LD_INT 14
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: ST_TO_ADDR
28133: GO 28530
28135: LD_INT 29
28137: DOUBLE
28138: EQUAL
28139: IFTRUE 28143
28141: GO 28161
28143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28144: LD_ADDR_VAR 0 3
28148: PUSH
28149: LD_INT 13
28151: PUSH
28152: LD_INT 14
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: ST_TO_ADDR
28159: GO 28530
28161: LD_INT 31
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28169
28167: GO 28187
28169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_INT 13
28177: PUSH
28178: LD_INT 14
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: ST_TO_ADDR
28185: GO 28530
28187: LD_INT 26
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28213
28195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28196: LD_ADDR_VAR 0 3
28200: PUSH
28201: LD_INT 13
28203: PUSH
28204: LD_INT 14
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: ST_TO_ADDR
28211: GO 28530
28213: LD_INT 42
28215: DOUBLE
28216: EQUAL
28217: IFTRUE 28221
28219: GO 28247
28221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28222: LD_ADDR_VAR 0 3
28226: PUSH
28227: LD_INT 21
28229: PUSH
28230: LD_INT 22
28232: PUSH
28233: LD_INT 23
28235: PUSH
28236: LD_INT 24
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: ST_TO_ADDR
28245: GO 28530
28247: LD_INT 43
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28281
28255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28256: LD_ADDR_VAR 0 3
28260: PUSH
28261: LD_INT 21
28263: PUSH
28264: LD_INT 22
28266: PUSH
28267: LD_INT 23
28269: PUSH
28270: LD_INT 24
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: ST_TO_ADDR
28279: GO 28530
28281: LD_INT 44
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28315
28289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28290: LD_ADDR_VAR 0 3
28294: PUSH
28295: LD_INT 21
28297: PUSH
28298: LD_INT 22
28300: PUSH
28301: LD_INT 23
28303: PUSH
28304: LD_INT 24
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
28313: GO 28530
28315: LD_INT 45
28317: DOUBLE
28318: EQUAL
28319: IFTRUE 28323
28321: GO 28349
28323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: LD_INT 21
28331: PUSH
28332: LD_INT 22
28334: PUSH
28335: LD_INT 23
28337: PUSH
28338: LD_INT 24
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: ST_TO_ADDR
28347: GO 28530
28349: LD_INT 49
28351: DOUBLE
28352: EQUAL
28353: IFTRUE 28357
28355: GO 28383
28357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28358: LD_ADDR_VAR 0 3
28362: PUSH
28363: LD_INT 21
28365: PUSH
28366: LD_INT 22
28368: PUSH
28369: LD_INT 23
28371: PUSH
28372: LD_INT 24
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: ST_TO_ADDR
28381: GO 28530
28383: LD_INT 51
28385: DOUBLE
28386: EQUAL
28387: IFTRUE 28391
28389: GO 28417
28391: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28392: LD_ADDR_VAR 0 3
28396: PUSH
28397: LD_INT 21
28399: PUSH
28400: LD_INT 22
28402: PUSH
28403: LD_INT 23
28405: PUSH
28406: LD_INT 24
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
28415: GO 28530
28417: LD_INT 52
28419: DOUBLE
28420: EQUAL
28421: IFTRUE 28425
28423: GO 28451
28425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28426: LD_ADDR_VAR 0 3
28430: PUSH
28431: LD_INT 21
28433: PUSH
28434: LD_INT 22
28436: PUSH
28437: LD_INT 23
28439: PUSH
28440: LD_INT 24
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: ST_TO_ADDR
28449: GO 28530
28451: LD_INT 53
28453: DOUBLE
28454: EQUAL
28455: IFTRUE 28459
28457: GO 28477
28459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28460: LD_ADDR_VAR 0 3
28464: PUSH
28465: LD_INT 23
28467: PUSH
28468: LD_INT 24
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: ST_TO_ADDR
28475: GO 28530
28477: LD_INT 46
28479: DOUBLE
28480: EQUAL
28481: IFTRUE 28485
28483: GO 28503
28485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_INT 23
28493: PUSH
28494: LD_INT 24
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: ST_TO_ADDR
28501: GO 28530
28503: LD_INT 47
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28529
28511: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_INT 23
28519: PUSH
28520: LD_INT 24
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: ST_TO_ADDR
28527: GO 28530
28529: POP
// result := ( chassis in result ) ;
28530: LD_ADDR_VAR 0 3
28534: PUSH
28535: LD_VAR 0 1
28539: PUSH
28540: LD_VAR 0 3
28544: IN
28545: ST_TO_ADDR
// end ;
28546: LD_VAR 0 3
28550: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28551: LD_INT 0
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
// result := array ;
28560: LD_ADDR_VAR 0 5
28564: PUSH
28565: LD_VAR 0 1
28569: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28570: LD_VAR 0 1
28574: NOT
28575: PUSH
28576: LD_VAR 0 2
28580: NOT
28581: OR
28582: PUSH
28583: LD_VAR 0 3
28587: NOT
28588: OR
28589: PUSH
28590: LD_VAR 0 2
28594: PUSH
28595: LD_VAR 0 1
28599: GREATER
28600: OR
28601: PUSH
28602: LD_VAR 0 3
28606: PUSH
28607: LD_VAR 0 1
28611: GREATER
28612: OR
28613: IFFALSE 28617
// exit ;
28615: GO 28913
// if direction then
28617: LD_VAR 0 4
28621: IFFALSE 28685
// begin d := 1 ;
28623: LD_ADDR_VAR 0 9
28627: PUSH
28628: LD_INT 1
28630: ST_TO_ADDR
// if i_from > i_to then
28631: LD_VAR 0 2
28635: PUSH
28636: LD_VAR 0 3
28640: GREATER
28641: IFFALSE 28667
// length := ( array - i_from ) + i_to else
28643: LD_ADDR_VAR 0 11
28647: PUSH
28648: LD_VAR 0 1
28652: PUSH
28653: LD_VAR 0 2
28657: MINUS
28658: PUSH
28659: LD_VAR 0 3
28663: PLUS
28664: ST_TO_ADDR
28665: GO 28683
// length := i_to - i_from ;
28667: LD_ADDR_VAR 0 11
28671: PUSH
28672: LD_VAR 0 3
28676: PUSH
28677: LD_VAR 0 2
28681: MINUS
28682: ST_TO_ADDR
// end else
28683: GO 28746
// begin d := - 1 ;
28685: LD_ADDR_VAR 0 9
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: ST_TO_ADDR
// if i_from > i_to then
28694: LD_VAR 0 2
28698: PUSH
28699: LD_VAR 0 3
28703: GREATER
28704: IFFALSE 28724
// length := i_from - i_to else
28706: LD_ADDR_VAR 0 11
28710: PUSH
28711: LD_VAR 0 2
28715: PUSH
28716: LD_VAR 0 3
28720: MINUS
28721: ST_TO_ADDR
28722: GO 28746
// length := ( array - i_to ) + i_from ;
28724: LD_ADDR_VAR 0 11
28728: PUSH
28729: LD_VAR 0 1
28733: PUSH
28734: LD_VAR 0 3
28738: MINUS
28739: PUSH
28740: LD_VAR 0 2
28744: PLUS
28745: ST_TO_ADDR
// end ; if not length then
28746: LD_VAR 0 11
28750: NOT
28751: IFFALSE 28755
// exit ;
28753: GO 28913
// tmp := array ;
28755: LD_ADDR_VAR 0 10
28759: PUSH
28760: LD_VAR 0 1
28764: ST_TO_ADDR
// for i = 1 to length do
28765: LD_ADDR_VAR 0 6
28769: PUSH
28770: DOUBLE
28771: LD_INT 1
28773: DEC
28774: ST_TO_ADDR
28775: LD_VAR 0 11
28779: PUSH
28780: FOR_TO
28781: IFFALSE 28901
// begin for j = 1 to array do
28783: LD_ADDR_VAR 0 7
28787: PUSH
28788: DOUBLE
28789: LD_INT 1
28791: DEC
28792: ST_TO_ADDR
28793: LD_VAR 0 1
28797: PUSH
28798: FOR_TO
28799: IFFALSE 28887
// begin k := j + d ;
28801: LD_ADDR_VAR 0 8
28805: PUSH
28806: LD_VAR 0 7
28810: PUSH
28811: LD_VAR 0 9
28815: PLUS
28816: ST_TO_ADDR
// if k > array then
28817: LD_VAR 0 8
28821: PUSH
28822: LD_VAR 0 1
28826: GREATER
28827: IFFALSE 28837
// k := 1 ;
28829: LD_ADDR_VAR 0 8
28833: PUSH
28834: LD_INT 1
28836: ST_TO_ADDR
// if not k then
28837: LD_VAR 0 8
28841: NOT
28842: IFFALSE 28854
// k := array ;
28844: LD_ADDR_VAR 0 8
28848: PUSH
28849: LD_VAR 0 1
28853: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28854: LD_ADDR_VAR 0 10
28858: PUSH
28859: LD_VAR 0 10
28863: PPUSH
28864: LD_VAR 0 8
28868: PPUSH
28869: LD_VAR 0 1
28873: PUSH
28874: LD_VAR 0 7
28878: ARRAY
28879: PPUSH
28880: CALL_OW 1
28884: ST_TO_ADDR
// end ;
28885: GO 28798
28887: POP
28888: POP
// array := tmp ;
28889: LD_ADDR_VAR 0 1
28893: PUSH
28894: LD_VAR 0 10
28898: ST_TO_ADDR
// end ;
28899: GO 28780
28901: POP
28902: POP
// result := array ;
28903: LD_ADDR_VAR 0 5
28907: PUSH
28908: LD_VAR 0 1
28912: ST_TO_ADDR
// end ;
28913: LD_VAR 0 5
28917: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28918: LD_INT 0
28920: PPUSH
28921: PPUSH
// result := 0 ;
28922: LD_ADDR_VAR 0 3
28926: PUSH
28927: LD_INT 0
28929: ST_TO_ADDR
// if not array or not value in array then
28930: LD_VAR 0 1
28934: NOT
28935: PUSH
28936: LD_VAR 0 2
28940: PUSH
28941: LD_VAR 0 1
28945: IN
28946: NOT
28947: OR
28948: IFFALSE 28952
// exit ;
28950: GO 29006
// for i = 1 to array do
28952: LD_ADDR_VAR 0 4
28956: PUSH
28957: DOUBLE
28958: LD_INT 1
28960: DEC
28961: ST_TO_ADDR
28962: LD_VAR 0 1
28966: PUSH
28967: FOR_TO
28968: IFFALSE 29004
// if value = array [ i ] then
28970: LD_VAR 0 2
28974: PUSH
28975: LD_VAR 0 1
28979: PUSH
28980: LD_VAR 0 4
28984: ARRAY
28985: EQUAL
28986: IFFALSE 29002
// begin result := i ;
28988: LD_ADDR_VAR 0 3
28992: PUSH
28993: LD_VAR 0 4
28997: ST_TO_ADDR
// exit ;
28998: POP
28999: POP
29000: GO 29006
// end ;
29002: GO 28967
29004: POP
29005: POP
// end ;
29006: LD_VAR 0 3
29010: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29011: LD_INT 0
29013: PPUSH
// vc_chassis := chassis ;
29014: LD_ADDR_OWVAR 37
29018: PUSH
29019: LD_VAR 0 1
29023: ST_TO_ADDR
// vc_engine := engine ;
29024: LD_ADDR_OWVAR 39
29028: PUSH
29029: LD_VAR 0 2
29033: ST_TO_ADDR
// vc_control := control ;
29034: LD_ADDR_OWVAR 38
29038: PUSH
29039: LD_VAR 0 3
29043: ST_TO_ADDR
// vc_weapon := weapon ;
29044: LD_ADDR_OWVAR 40
29048: PUSH
29049: LD_VAR 0 4
29053: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29054: LD_ADDR_OWVAR 41
29058: PUSH
29059: LD_VAR 0 5
29063: ST_TO_ADDR
// end ;
29064: LD_VAR 0 6
29068: RET
// export function WantPlant ( unit ) ; var task ; begin
29069: LD_INT 0
29071: PPUSH
29072: PPUSH
// result := false ;
29073: LD_ADDR_VAR 0 2
29077: PUSH
29078: LD_INT 0
29080: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_VAR 0 1
29090: PPUSH
29091: CALL_OW 437
29095: ST_TO_ADDR
// if task then
29096: LD_VAR 0 3
29100: IFFALSE 29128
// if task [ 1 ] [ 1 ] = p then
29102: LD_VAR 0 3
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PUSH
29111: LD_INT 1
29113: ARRAY
29114: PUSH
29115: LD_STRING p
29117: EQUAL
29118: IFFALSE 29128
// result := true ;
29120: LD_ADDR_VAR 0 2
29124: PUSH
29125: LD_INT 1
29127: ST_TO_ADDR
// end ;
29128: LD_VAR 0 2
29132: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29133: LD_INT 0
29135: PPUSH
29136: PPUSH
29137: PPUSH
29138: PPUSH
// if pos < 1 then
29139: LD_VAR 0 2
29143: PUSH
29144: LD_INT 1
29146: LESS
29147: IFFALSE 29151
// exit ;
29149: GO 29454
// if pos = 1 then
29151: LD_VAR 0 2
29155: PUSH
29156: LD_INT 1
29158: EQUAL
29159: IFFALSE 29192
// result := Replace ( arr , pos [ 1 ] , value ) else
29161: LD_ADDR_VAR 0 4
29165: PUSH
29166: LD_VAR 0 1
29170: PPUSH
29171: LD_VAR 0 2
29175: PUSH
29176: LD_INT 1
29178: ARRAY
29179: PPUSH
29180: LD_VAR 0 3
29184: PPUSH
29185: CALL_OW 1
29189: ST_TO_ADDR
29190: GO 29454
// begin tmp := arr ;
29192: LD_ADDR_VAR 0 6
29196: PUSH
29197: LD_VAR 0 1
29201: ST_TO_ADDR
// s_arr := [ tmp ] ;
29202: LD_ADDR_VAR 0 7
29206: PUSH
29207: LD_VAR 0 6
29211: PUSH
29212: EMPTY
29213: LIST
29214: ST_TO_ADDR
// for i = 1 to pos - 1 do
29215: LD_ADDR_VAR 0 5
29219: PUSH
29220: DOUBLE
29221: LD_INT 1
29223: DEC
29224: ST_TO_ADDR
29225: LD_VAR 0 2
29229: PUSH
29230: LD_INT 1
29232: MINUS
29233: PUSH
29234: FOR_TO
29235: IFFALSE 29280
// begin tmp := tmp [ pos [ i ] ] ;
29237: LD_ADDR_VAR 0 6
29241: PUSH
29242: LD_VAR 0 6
29246: PUSH
29247: LD_VAR 0 2
29251: PUSH
29252: LD_VAR 0 5
29256: ARRAY
29257: ARRAY
29258: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29259: LD_ADDR_VAR 0 7
29263: PUSH
29264: LD_VAR 0 7
29268: PUSH
29269: LD_VAR 0 6
29273: PUSH
29274: EMPTY
29275: LIST
29276: ADD
29277: ST_TO_ADDR
// end ;
29278: GO 29234
29280: POP
29281: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29282: LD_ADDR_VAR 0 6
29286: PUSH
29287: LD_VAR 0 6
29291: PPUSH
29292: LD_VAR 0 2
29296: PUSH
29297: LD_VAR 0 2
29301: ARRAY
29302: PPUSH
29303: LD_VAR 0 3
29307: PPUSH
29308: CALL_OW 1
29312: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29313: LD_ADDR_VAR 0 7
29317: PUSH
29318: LD_VAR 0 7
29322: PPUSH
29323: LD_VAR 0 7
29327: PPUSH
29328: LD_VAR 0 6
29332: PPUSH
29333: CALL_OW 1
29337: ST_TO_ADDR
// for i = s_arr downto 2 do
29338: LD_ADDR_VAR 0 5
29342: PUSH
29343: DOUBLE
29344: LD_VAR 0 7
29348: INC
29349: ST_TO_ADDR
29350: LD_INT 2
29352: PUSH
29353: FOR_DOWNTO
29354: IFFALSE 29438
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29356: LD_ADDR_VAR 0 6
29360: PUSH
29361: LD_VAR 0 7
29365: PUSH
29366: LD_VAR 0 5
29370: PUSH
29371: LD_INT 1
29373: MINUS
29374: ARRAY
29375: PPUSH
29376: LD_VAR 0 2
29380: PUSH
29381: LD_VAR 0 5
29385: PUSH
29386: LD_INT 1
29388: MINUS
29389: ARRAY
29390: PPUSH
29391: LD_VAR 0 7
29395: PUSH
29396: LD_VAR 0 5
29400: ARRAY
29401: PPUSH
29402: CALL_OW 1
29406: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29407: LD_ADDR_VAR 0 7
29411: PUSH
29412: LD_VAR 0 7
29416: PPUSH
29417: LD_VAR 0 5
29421: PUSH
29422: LD_INT 1
29424: MINUS
29425: PPUSH
29426: LD_VAR 0 6
29430: PPUSH
29431: CALL_OW 1
29435: ST_TO_ADDR
// end ;
29436: GO 29353
29438: POP
29439: POP
// result := s_arr [ 1 ] ;
29440: LD_ADDR_VAR 0 4
29444: PUSH
29445: LD_VAR 0 7
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: ST_TO_ADDR
// end ; end ;
29454: LD_VAR 0 4
29458: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29459: LD_INT 0
29461: PPUSH
29462: PPUSH
// if not list then
29463: LD_VAR 0 1
29467: NOT
29468: IFFALSE 29472
// exit ;
29470: GO 29563
// i := list [ pos1 ] ;
29472: LD_ADDR_VAR 0 5
29476: PUSH
29477: LD_VAR 0 1
29481: PUSH
29482: LD_VAR 0 2
29486: ARRAY
29487: ST_TO_ADDR
// if not i then
29488: LD_VAR 0 5
29492: NOT
29493: IFFALSE 29497
// exit ;
29495: GO 29563
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29497: LD_ADDR_VAR 0 1
29501: PUSH
29502: LD_VAR 0 1
29506: PPUSH
29507: LD_VAR 0 2
29511: PPUSH
29512: LD_VAR 0 1
29516: PUSH
29517: LD_VAR 0 3
29521: ARRAY
29522: PPUSH
29523: CALL_OW 1
29527: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29528: LD_ADDR_VAR 0 1
29532: PUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_VAR 0 3
29542: PPUSH
29543: LD_VAR 0 5
29547: PPUSH
29548: CALL_OW 1
29552: ST_TO_ADDR
// result := list ;
29553: LD_ADDR_VAR 0 4
29557: PUSH
29558: LD_VAR 0 1
29562: ST_TO_ADDR
// end ;
29563: LD_VAR 0 4
29567: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29568: LD_INT 0
29570: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29571: LD_ADDR_VAR 0 5
29575: PUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL_OW 250
29585: PPUSH
29586: LD_VAR 0 1
29590: PPUSH
29591: CALL_OW 251
29595: PPUSH
29596: LD_VAR 0 2
29600: PPUSH
29601: LD_VAR 0 3
29605: PPUSH
29606: LD_VAR 0 4
29610: PPUSH
29611: CALL 29621 0 5
29615: ST_TO_ADDR
// end ;
29616: LD_VAR 0 5
29620: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
// if not list then
29627: LD_VAR 0 3
29631: NOT
29632: IFFALSE 29636
// exit ;
29634: GO 30024
// result := [ ] ;
29636: LD_ADDR_VAR 0 6
29640: PUSH
29641: EMPTY
29642: ST_TO_ADDR
// for i in list do
29643: LD_ADDR_VAR 0 7
29647: PUSH
29648: LD_VAR 0 3
29652: PUSH
29653: FOR_IN
29654: IFFALSE 29856
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29656: LD_ADDR_VAR 0 9
29660: PUSH
29661: LD_VAR 0 7
29665: PPUSH
29666: LD_VAR 0 1
29670: PPUSH
29671: LD_VAR 0 2
29675: PPUSH
29676: CALL_OW 297
29680: ST_TO_ADDR
// if not result then
29681: LD_VAR 0 6
29685: NOT
29686: IFFALSE 29712
// result := [ [ i , tmp ] ] else
29688: LD_ADDR_VAR 0 6
29692: PUSH
29693: LD_VAR 0 7
29697: PUSH
29698: LD_VAR 0 9
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: ST_TO_ADDR
29710: GO 29854
// begin if result [ result ] [ 2 ] < tmp then
29712: LD_VAR 0 6
29716: PUSH
29717: LD_VAR 0 6
29721: ARRAY
29722: PUSH
29723: LD_INT 2
29725: ARRAY
29726: PUSH
29727: LD_VAR 0 9
29731: LESS
29732: IFFALSE 29774
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29734: LD_ADDR_VAR 0 6
29738: PUSH
29739: LD_VAR 0 6
29743: PPUSH
29744: LD_VAR 0 6
29748: PUSH
29749: LD_INT 1
29751: PLUS
29752: PPUSH
29753: LD_VAR 0 7
29757: PUSH
29758: LD_VAR 0 9
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PPUSH
29767: CALL_OW 2
29771: ST_TO_ADDR
29772: GO 29854
// for j = 1 to result do
29774: LD_ADDR_VAR 0 8
29778: PUSH
29779: DOUBLE
29780: LD_INT 1
29782: DEC
29783: ST_TO_ADDR
29784: LD_VAR 0 6
29788: PUSH
29789: FOR_TO
29790: IFFALSE 29852
// begin if tmp < result [ j ] [ 2 ] then
29792: LD_VAR 0 9
29796: PUSH
29797: LD_VAR 0 6
29801: PUSH
29802: LD_VAR 0 8
29806: ARRAY
29807: PUSH
29808: LD_INT 2
29810: ARRAY
29811: LESS
29812: IFFALSE 29850
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29814: LD_ADDR_VAR 0 6
29818: PUSH
29819: LD_VAR 0 6
29823: PPUSH
29824: LD_VAR 0 8
29828: PPUSH
29829: LD_VAR 0 7
29833: PUSH
29834: LD_VAR 0 9
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 2
29847: ST_TO_ADDR
// break ;
29848: GO 29852
// end ; end ;
29850: GO 29789
29852: POP
29853: POP
// end ; end ;
29854: GO 29653
29856: POP
29857: POP
// if result and not asc then
29858: LD_VAR 0 6
29862: PUSH
29863: LD_VAR 0 4
29867: NOT
29868: AND
29869: IFFALSE 29944
// begin tmp := result ;
29871: LD_ADDR_VAR 0 9
29875: PUSH
29876: LD_VAR 0 6
29880: ST_TO_ADDR
// for i = tmp downto 1 do
29881: LD_ADDR_VAR 0 7
29885: PUSH
29886: DOUBLE
29887: LD_VAR 0 9
29891: INC
29892: ST_TO_ADDR
29893: LD_INT 1
29895: PUSH
29896: FOR_DOWNTO
29897: IFFALSE 29942
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29899: LD_ADDR_VAR 0 6
29903: PUSH
29904: LD_VAR 0 6
29908: PPUSH
29909: LD_VAR 0 9
29913: PUSH
29914: LD_VAR 0 7
29918: MINUS
29919: PUSH
29920: LD_INT 1
29922: PLUS
29923: PPUSH
29924: LD_VAR 0 9
29928: PUSH
29929: LD_VAR 0 7
29933: ARRAY
29934: PPUSH
29935: CALL_OW 1
29939: ST_TO_ADDR
29940: GO 29896
29942: POP
29943: POP
// end ; tmp := [ ] ;
29944: LD_ADDR_VAR 0 9
29948: PUSH
29949: EMPTY
29950: ST_TO_ADDR
// if mode then
29951: LD_VAR 0 5
29955: IFFALSE 30024
// begin for i = 1 to result do
29957: LD_ADDR_VAR 0 7
29961: PUSH
29962: DOUBLE
29963: LD_INT 1
29965: DEC
29966: ST_TO_ADDR
29967: LD_VAR 0 6
29971: PUSH
29972: FOR_TO
29973: IFFALSE 30012
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29975: LD_ADDR_VAR 0 9
29979: PUSH
29980: LD_VAR 0 9
29984: PPUSH
29985: LD_VAR 0 7
29989: PPUSH
29990: LD_VAR 0 6
29994: PUSH
29995: LD_VAR 0 7
29999: ARRAY
30000: PUSH
30001: LD_INT 1
30003: ARRAY
30004: PPUSH
30005: CALL_OW 1
30009: ST_TO_ADDR
30010: GO 29972
30012: POP
30013: POP
// result := tmp ;
30014: LD_ADDR_VAR 0 6
30018: PUSH
30019: LD_VAR 0 9
30023: ST_TO_ADDR
// end ; end ;
30024: LD_VAR 0 6
30028: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30029: LD_INT 0
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30037: LD_ADDR_VAR 0 5
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: EMPTY
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: ST_TO_ADDR
// if not x or not y then
30059: LD_VAR 0 2
30063: NOT
30064: PUSH
30065: LD_VAR 0 3
30069: NOT
30070: OR
30071: IFFALSE 30075
// exit ;
30073: GO 31727
// if not range then
30075: LD_VAR 0 4
30079: NOT
30080: IFFALSE 30090
// range := 10 ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_INT 10
30089: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30090: LD_ADDR_VAR 0 8
30094: PUSH
30095: LD_INT 81
30097: PUSH
30098: LD_VAR 0 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 92
30109: PUSH
30110: LD_VAR 0 2
30114: PUSH
30115: LD_VAR 0 3
30119: PUSH
30120: LD_VAR 0 4
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: LD_INT 21
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: PPUSH
30153: CALL_OW 69
30157: ST_TO_ADDR
// if not tmp then
30158: LD_VAR 0 8
30162: NOT
30163: IFFALSE 30167
// exit ;
30165: GO 31727
// for i in tmp do
30167: LD_ADDR_VAR 0 6
30171: PUSH
30172: LD_VAR 0 8
30176: PUSH
30177: FOR_IN
30178: IFFALSE 31702
// begin points := [ 0 , 0 , 0 ] ;
30180: LD_ADDR_VAR 0 9
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
// bpoints := 1 ;
30199: LD_ADDR_VAR 0 10
30203: PUSH
30204: LD_INT 1
30206: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30207: LD_VAR 0 6
30211: PPUSH
30212: CALL_OW 247
30216: PUSH
30217: LD_INT 1
30219: DOUBLE
30220: EQUAL
30221: IFTRUE 30225
30223: GO 30803
30225: POP
// begin if GetClass ( i ) = 1 then
30226: LD_VAR 0 6
30230: PPUSH
30231: CALL_OW 257
30235: PUSH
30236: LD_INT 1
30238: EQUAL
30239: IFFALSE 30260
// points := [ 10 , 5 , 3 ] ;
30241: LD_ADDR_VAR 0 9
30245: PUSH
30246: LD_INT 10
30248: PUSH
30249: LD_INT 5
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30260: LD_VAR 0 6
30264: PPUSH
30265: CALL_OW 257
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: LD_INT 4
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: IN
30284: IFFALSE 30305
// points := [ 3 , 2 , 1 ] ;
30286: LD_ADDR_VAR 0 9
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 2
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30305: LD_VAR 0 6
30309: PPUSH
30310: CALL_OW 257
30314: PUSH
30315: LD_INT 5
30317: EQUAL
30318: IFFALSE 30339
// points := [ 130 , 5 , 2 ] ;
30320: LD_ADDR_VAR 0 9
30324: PUSH
30325: LD_INT 130
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30339: LD_VAR 0 6
30343: PPUSH
30344: CALL_OW 257
30348: PUSH
30349: LD_INT 8
30351: EQUAL
30352: IFFALSE 30373
// points := [ 35 , 35 , 30 ] ;
30354: LD_ADDR_VAR 0 9
30358: PUSH
30359: LD_INT 35
30361: PUSH
30362: LD_INT 35
30364: PUSH
30365: LD_INT 30
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30373: LD_VAR 0 6
30377: PPUSH
30378: CALL_OW 257
30382: PUSH
30383: LD_INT 9
30385: EQUAL
30386: IFFALSE 30407
// points := [ 20 , 55 , 40 ] ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_INT 20
30395: PUSH
30396: LD_INT 55
30398: PUSH
30399: LD_INT 40
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30407: LD_VAR 0 6
30411: PPUSH
30412: CALL_OW 257
30416: PUSH
30417: LD_INT 12
30419: PUSH
30420: LD_INT 16
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: IN
30427: IFFALSE 30448
// points := [ 5 , 3 , 2 ] ;
30429: LD_ADDR_VAR 0 9
30433: PUSH
30434: LD_INT 5
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30448: LD_VAR 0 6
30452: PPUSH
30453: CALL_OW 257
30457: PUSH
30458: LD_INT 17
30460: EQUAL
30461: IFFALSE 30482
// points := [ 100 , 50 , 75 ] ;
30463: LD_ADDR_VAR 0 9
30467: PUSH
30468: LD_INT 100
30470: PUSH
30471: LD_INT 50
30473: PUSH
30474: LD_INT 75
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30482: LD_VAR 0 6
30486: PPUSH
30487: CALL_OW 257
30491: PUSH
30492: LD_INT 15
30494: EQUAL
30495: IFFALSE 30516
// points := [ 10 , 5 , 3 ] ;
30497: LD_ADDR_VAR 0 9
30501: PUSH
30502: LD_INT 10
30504: PUSH
30505: LD_INT 5
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30516: LD_VAR 0 6
30520: PPUSH
30521: CALL_OW 257
30525: PUSH
30526: LD_INT 14
30528: EQUAL
30529: IFFALSE 30550
// points := [ 10 , 0 , 0 ] ;
30531: LD_ADDR_VAR 0 9
30535: PUSH
30536: LD_INT 10
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30550: LD_VAR 0 6
30554: PPUSH
30555: CALL_OW 257
30559: PUSH
30560: LD_INT 11
30562: EQUAL
30563: IFFALSE 30584
// points := [ 30 , 10 , 5 ] ;
30565: LD_ADDR_VAR 0 9
30569: PUSH
30570: LD_INT 30
30572: PUSH
30573: LD_INT 10
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30584: LD_VAR 0 1
30588: PPUSH
30589: LD_INT 5
30591: PPUSH
30592: CALL_OW 321
30596: PUSH
30597: LD_INT 2
30599: EQUAL
30600: IFFALSE 30617
// bpoints := bpoints * 1.8 ;
30602: LD_ADDR_VAR 0 10
30606: PUSH
30607: LD_VAR 0 10
30611: PUSH
30612: LD_REAL  1.80000000000000E+0000
30615: MUL
30616: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30617: LD_VAR 0 6
30621: PPUSH
30622: CALL_OW 257
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: LD_INT 4
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: IN
30645: PUSH
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_INT 51
30653: PPUSH
30654: CALL_OW 321
30658: PUSH
30659: LD_INT 2
30661: EQUAL
30662: AND
30663: IFFALSE 30680
// bpoints := bpoints * 1.2 ;
30665: LD_ADDR_VAR 0 10
30669: PUSH
30670: LD_VAR 0 10
30674: PUSH
30675: LD_REAL  1.20000000000000E+0000
30678: MUL
30679: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30680: LD_VAR 0 6
30684: PPUSH
30685: CALL_OW 257
30689: PUSH
30690: LD_INT 5
30692: PUSH
30693: LD_INT 7
30695: PUSH
30696: LD_INT 9
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: IN
30704: PUSH
30705: LD_VAR 0 1
30709: PPUSH
30710: LD_INT 52
30712: PPUSH
30713: CALL_OW 321
30717: PUSH
30718: LD_INT 2
30720: EQUAL
30721: AND
30722: IFFALSE 30739
// bpoints := bpoints * 1.5 ;
30724: LD_ADDR_VAR 0 10
30728: PUSH
30729: LD_VAR 0 10
30733: PUSH
30734: LD_REAL  1.50000000000000E+0000
30737: MUL
30738: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30739: LD_VAR 0 1
30743: PPUSH
30744: LD_INT 66
30746: PPUSH
30747: CALL_OW 321
30751: PUSH
30752: LD_INT 2
30754: EQUAL
30755: IFFALSE 30772
// bpoints := bpoints * 1.1 ;
30757: LD_ADDR_VAR 0 10
30761: PUSH
30762: LD_VAR 0 10
30766: PUSH
30767: LD_REAL  1.10000000000000E+0000
30770: MUL
30771: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30772: LD_ADDR_VAR 0 10
30776: PUSH
30777: LD_VAR 0 10
30781: PUSH
30782: LD_VAR 0 6
30786: PPUSH
30787: LD_INT 1
30789: PPUSH
30790: CALL_OW 259
30794: PUSH
30795: LD_REAL  1.15000000000000E+0000
30798: MUL
30799: MUL
30800: ST_TO_ADDR
// end ; unit_vehicle :
30801: GO 31631
30803: LD_INT 2
30805: DOUBLE
30806: EQUAL
30807: IFTRUE 30811
30809: GO 31619
30811: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30812: LD_VAR 0 6
30816: PPUSH
30817: CALL_OW 264
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: LD_INT 42
30827: PUSH
30828: LD_INT 24
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: IN
30836: IFFALSE 30857
// points := [ 25 , 5 , 3 ] ;
30838: LD_ADDR_VAR 0 9
30842: PUSH
30843: LD_INT 25
30845: PUSH
30846: LD_INT 5
30848: PUSH
30849: LD_INT 3
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30857: LD_VAR 0 6
30861: PPUSH
30862: CALL_OW 264
30866: PUSH
30867: LD_INT 4
30869: PUSH
30870: LD_INT 43
30872: PUSH
30873: LD_INT 25
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: LIST
30880: IN
30881: IFFALSE 30902
// points := [ 40 , 15 , 5 ] ;
30883: LD_ADDR_VAR 0 9
30887: PUSH
30888: LD_INT 40
30890: PUSH
30891: LD_INT 15
30893: PUSH
30894: LD_INT 5
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30902: LD_VAR 0 6
30906: PPUSH
30907: CALL_OW 264
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: LD_INT 23
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: IN
30922: IFFALSE 30943
// points := [ 7 , 25 , 8 ] ;
30924: LD_ADDR_VAR 0 9
30928: PUSH
30929: LD_INT 7
30931: PUSH
30932: LD_INT 25
30934: PUSH
30935: LD_INT 8
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30943: LD_VAR 0 6
30947: PPUSH
30948: CALL_OW 264
30952: PUSH
30953: LD_INT 5
30955: PUSH
30956: LD_INT 27
30958: PUSH
30959: LD_INT 44
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: LIST
30966: IN
30967: IFFALSE 30988
// points := [ 14 , 50 , 16 ] ;
30969: LD_ADDR_VAR 0 9
30973: PUSH
30974: LD_INT 14
30976: PUSH
30977: LD_INT 50
30979: PUSH
30980: LD_INT 16
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30988: LD_VAR 0 6
30992: PPUSH
30993: CALL_OW 264
30997: PUSH
30998: LD_INT 6
31000: PUSH
31001: LD_INT 46
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: IN
31008: IFFALSE 31029
// points := [ 32 , 120 , 70 ] ;
31010: LD_ADDR_VAR 0 9
31014: PUSH
31015: LD_INT 32
31017: PUSH
31018: LD_INT 120
31020: PUSH
31021: LD_INT 70
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31029: LD_VAR 0 6
31033: PPUSH
31034: CALL_OW 264
31038: PUSH
31039: LD_INT 7
31041: PUSH
31042: LD_INT 28
31044: PUSH
31045: LD_INT 45
31047: PUSH
31048: LD_EXP 89
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: IN
31059: IFFALSE 31080
// points := [ 35 , 20 , 45 ] ;
31061: LD_ADDR_VAR 0 9
31065: PUSH
31066: LD_INT 35
31068: PUSH
31069: LD_INT 20
31071: PUSH
31072: LD_INT 45
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31080: LD_VAR 0 6
31084: PPUSH
31085: CALL_OW 264
31089: PUSH
31090: LD_INT 47
31092: PUSH
31093: EMPTY
31094: LIST
31095: IN
31096: IFFALSE 31117
// points := [ 67 , 45 , 75 ] ;
31098: LD_ADDR_VAR 0 9
31102: PUSH
31103: LD_INT 67
31105: PUSH
31106: LD_INT 45
31108: PUSH
31109: LD_INT 75
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31117: LD_VAR 0 6
31121: PPUSH
31122: CALL_OW 264
31126: PUSH
31127: LD_INT 26
31129: PUSH
31130: EMPTY
31131: LIST
31132: IN
31133: IFFALSE 31154
// points := [ 120 , 30 , 80 ] ;
31135: LD_ADDR_VAR 0 9
31139: PUSH
31140: LD_INT 120
31142: PUSH
31143: LD_INT 30
31145: PUSH
31146: LD_INT 80
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31154: LD_VAR 0 6
31158: PPUSH
31159: CALL_OW 264
31163: PUSH
31164: LD_INT 22
31166: PUSH
31167: EMPTY
31168: LIST
31169: IN
31170: IFFALSE 31191
// points := [ 40 , 1 , 1 ] ;
31172: LD_ADDR_VAR 0 9
31176: PUSH
31177: LD_INT 40
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31191: LD_VAR 0 6
31195: PPUSH
31196: CALL_OW 264
31200: PUSH
31201: LD_INT 29
31203: PUSH
31204: EMPTY
31205: LIST
31206: IN
31207: IFFALSE 31228
// points := [ 70 , 200 , 400 ] ;
31209: LD_ADDR_VAR 0 9
31213: PUSH
31214: LD_INT 70
31216: PUSH
31217: LD_INT 200
31219: PUSH
31220: LD_INT 400
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31228: LD_VAR 0 6
31232: PPUSH
31233: CALL_OW 264
31237: PUSH
31238: LD_INT 14
31240: PUSH
31241: LD_INT 53
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: IN
31248: IFFALSE 31269
// points := [ 40 , 10 , 20 ] ;
31250: LD_ADDR_VAR 0 9
31254: PUSH
31255: LD_INT 40
31257: PUSH
31258: LD_INT 10
31260: PUSH
31261: LD_INT 20
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31269: LD_VAR 0 6
31273: PPUSH
31274: CALL_OW 264
31278: PUSH
31279: LD_INT 9
31281: PUSH
31282: EMPTY
31283: LIST
31284: IN
31285: IFFALSE 31306
// points := [ 5 , 70 , 20 ] ;
31287: LD_ADDR_VAR 0 9
31291: PUSH
31292: LD_INT 5
31294: PUSH
31295: LD_INT 70
31297: PUSH
31298: LD_INT 20
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31306: LD_VAR 0 6
31310: PPUSH
31311: CALL_OW 264
31315: PUSH
31316: LD_INT 10
31318: PUSH
31319: EMPTY
31320: LIST
31321: IN
31322: IFFALSE 31343
// points := [ 35 , 110 , 70 ] ;
31324: LD_ADDR_VAR 0 9
31328: PUSH
31329: LD_INT 35
31331: PUSH
31332: LD_INT 110
31334: PUSH
31335: LD_INT 70
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31343: LD_VAR 0 6
31347: PPUSH
31348: CALL_OW 265
31352: PUSH
31353: LD_INT 25
31355: EQUAL
31356: IFFALSE 31377
// points := [ 80 , 65 , 100 ] ;
31358: LD_ADDR_VAR 0 9
31362: PUSH
31363: LD_INT 80
31365: PUSH
31366: LD_INT 65
31368: PUSH
31369: LD_INT 100
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31377: LD_VAR 0 6
31381: PPUSH
31382: CALL_OW 263
31386: PUSH
31387: LD_INT 1
31389: EQUAL
31390: IFFALSE 31425
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31392: LD_ADDR_VAR 0 10
31396: PUSH
31397: LD_VAR 0 10
31401: PUSH
31402: LD_VAR 0 6
31406: PPUSH
31407: CALL_OW 311
31411: PPUSH
31412: LD_INT 3
31414: PPUSH
31415: CALL_OW 259
31419: PUSH
31420: LD_INT 4
31422: MUL
31423: MUL
31424: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31425: LD_VAR 0 6
31429: PPUSH
31430: CALL_OW 263
31434: PUSH
31435: LD_INT 2
31437: EQUAL
31438: IFFALSE 31489
// begin j := IsControledBy ( i ) ;
31440: LD_ADDR_VAR 0 7
31444: PUSH
31445: LD_VAR 0 6
31449: PPUSH
31450: CALL_OW 312
31454: ST_TO_ADDR
// if j then
31455: LD_VAR 0 7
31459: IFFALSE 31489
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31461: LD_ADDR_VAR 0 10
31465: PUSH
31466: LD_VAR 0 10
31470: PUSH
31471: LD_VAR 0 7
31475: PPUSH
31476: LD_INT 3
31478: PPUSH
31479: CALL_OW 259
31483: PUSH
31484: LD_INT 3
31486: MUL
31487: MUL
31488: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31489: LD_VAR 0 6
31493: PPUSH
31494: CALL_OW 264
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: LD_INT 6
31504: PUSH
31505: LD_INT 46
31507: PUSH
31508: LD_INT 44
31510: PUSH
31511: LD_INT 47
31513: PUSH
31514: LD_INT 45
31516: PUSH
31517: LD_INT 28
31519: PUSH
31520: LD_INT 7
31522: PUSH
31523: LD_INT 27
31525: PUSH
31526: LD_INT 29
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: IN
31541: PUSH
31542: LD_VAR 0 1
31546: PPUSH
31547: LD_INT 52
31549: PPUSH
31550: CALL_OW 321
31554: PUSH
31555: LD_INT 2
31557: EQUAL
31558: AND
31559: IFFALSE 31576
// bpoints := bpoints * 1.2 ;
31561: LD_ADDR_VAR 0 10
31565: PUSH
31566: LD_VAR 0 10
31570: PUSH
31571: LD_REAL  1.20000000000000E+0000
31574: MUL
31575: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31576: LD_VAR 0 6
31580: PPUSH
31581: CALL_OW 264
31585: PUSH
31586: LD_INT 6
31588: PUSH
31589: LD_INT 46
31591: PUSH
31592: LD_INT 47
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: IN
31600: IFFALSE 31617
// bpoints := bpoints * 1.2 ;
31602: LD_ADDR_VAR 0 10
31606: PUSH
31607: LD_VAR 0 10
31611: PUSH
31612: LD_REAL  1.20000000000000E+0000
31615: MUL
31616: ST_TO_ADDR
// end ; unit_building :
31617: GO 31631
31619: LD_INT 3
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31630
31627: POP
// ; end ;
31628: GO 31631
31630: POP
// for j = 1 to 3 do
31631: LD_ADDR_VAR 0 7
31635: PUSH
31636: DOUBLE
31637: LD_INT 1
31639: DEC
31640: ST_TO_ADDR
31641: LD_INT 3
31643: PUSH
31644: FOR_TO
31645: IFFALSE 31698
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31647: LD_ADDR_VAR 0 5
31651: PUSH
31652: LD_VAR 0 5
31656: PPUSH
31657: LD_VAR 0 7
31661: PPUSH
31662: LD_VAR 0 5
31666: PUSH
31667: LD_VAR 0 7
31671: ARRAY
31672: PUSH
31673: LD_VAR 0 9
31677: PUSH
31678: LD_VAR 0 7
31682: ARRAY
31683: PUSH
31684: LD_VAR 0 10
31688: MUL
31689: PLUS
31690: PPUSH
31691: CALL_OW 1
31695: ST_TO_ADDR
31696: GO 31644
31698: POP
31699: POP
// end ;
31700: GO 30177
31702: POP
31703: POP
// result := Replace ( result , 4 , tmp ) ;
31704: LD_ADDR_VAR 0 5
31708: PUSH
31709: LD_VAR 0 5
31713: PPUSH
31714: LD_INT 4
31716: PPUSH
31717: LD_VAR 0 8
31721: PPUSH
31722: CALL_OW 1
31726: ST_TO_ADDR
// end ;
31727: LD_VAR 0 5
31731: RET
// export function DangerAtRange ( unit , range ) ; begin
31732: LD_INT 0
31734: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 255
31749: PPUSH
31750: LD_VAR 0 1
31754: PPUSH
31755: CALL_OW 250
31759: PPUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 251
31769: PPUSH
31770: LD_VAR 0 2
31774: PPUSH
31775: CALL 30029 0 4
31779: ST_TO_ADDR
// end ;
31780: LD_VAR 0 3
31784: RET
// export function DangerInArea ( side , area ) ; begin
31785: LD_INT 0
31787: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31788: LD_ADDR_VAR 0 3
31792: PUSH
31793: LD_VAR 0 2
31797: PPUSH
31798: LD_INT 81
31800: PUSH
31801: LD_VAR 0 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PPUSH
31810: CALL_OW 70
31814: ST_TO_ADDR
// end ;
31815: LD_VAR 0 3
31819: RET
// export function IsExtension ( b ) ; begin
31820: LD_INT 0
31822: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31823: LD_ADDR_VAR 0 2
31827: PUSH
31828: LD_VAR 0 1
31832: PUSH
31833: LD_INT 23
31835: PUSH
31836: LD_INT 20
31838: PUSH
31839: LD_INT 22
31841: PUSH
31842: LD_INT 17
31844: PUSH
31845: LD_INT 24
31847: PUSH
31848: LD_INT 21
31850: PUSH
31851: LD_INT 19
31853: PUSH
31854: LD_INT 16
31856: PUSH
31857: LD_INT 25
31859: PUSH
31860: LD_INT 18
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: IN
31875: ST_TO_ADDR
// end ;
31876: LD_VAR 0 2
31880: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31881: LD_INT 0
31883: PPUSH
31884: PPUSH
31885: PPUSH
// result := [ ] ;
31886: LD_ADDR_VAR 0 4
31890: PUSH
31891: EMPTY
31892: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31893: LD_ADDR_VAR 0 5
31897: PUSH
31898: LD_VAR 0 2
31902: PPUSH
31903: LD_INT 21
31905: PUSH
31906: LD_INT 3
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PPUSH
31913: CALL_OW 70
31917: ST_TO_ADDR
// if not tmp then
31918: LD_VAR 0 5
31922: NOT
31923: IFFALSE 31927
// exit ;
31925: GO 31991
// if checkLink then
31927: LD_VAR 0 3
31931: IFFALSE 31981
// begin for i in tmp do
31933: LD_ADDR_VAR 0 6
31937: PUSH
31938: LD_VAR 0 5
31942: PUSH
31943: FOR_IN
31944: IFFALSE 31979
// if GetBase ( i ) <> base then
31946: LD_VAR 0 6
31950: PPUSH
31951: CALL_OW 274
31955: PUSH
31956: LD_VAR 0 1
31960: NONEQUAL
31961: IFFALSE 31977
// ComLinkToBase ( base , i ) ;
31963: LD_VAR 0 1
31967: PPUSH
31968: LD_VAR 0 6
31972: PPUSH
31973: CALL_OW 169
31977: GO 31943
31979: POP
31980: POP
// end ; result := tmp ;
31981: LD_ADDR_VAR 0 4
31985: PUSH
31986: LD_VAR 0 5
31990: ST_TO_ADDR
// end ;
31991: LD_VAR 0 4
31995: RET
// export function ComComplete ( units , b ) ; var i ; begin
31996: LD_INT 0
31998: PPUSH
31999: PPUSH
// if not units then
32000: LD_VAR 0 1
32004: NOT
32005: IFFALSE 32009
// exit ;
32007: GO 32099
// for i in units do
32009: LD_ADDR_VAR 0 4
32013: PUSH
32014: LD_VAR 0 1
32018: PUSH
32019: FOR_IN
32020: IFFALSE 32097
// if BuildingStatus ( b ) = bs_build then
32022: LD_VAR 0 2
32026: PPUSH
32027: CALL_OW 461
32031: PUSH
32032: LD_INT 1
32034: EQUAL
32035: IFFALSE 32095
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32037: LD_VAR 0 4
32041: PPUSH
32042: LD_STRING h
32044: PUSH
32045: LD_VAR 0 2
32049: PPUSH
32050: CALL_OW 250
32054: PUSH
32055: LD_VAR 0 2
32059: PPUSH
32060: CALL_OW 251
32064: PUSH
32065: LD_VAR 0 2
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: PPUSH
32091: CALL_OW 446
32095: GO 32019
32097: POP
32098: POP
// end ;
32099: LD_VAR 0 3
32103: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32112: LD_VAR 0 1
32116: NOT
32117: PUSH
32118: LD_VAR 0 1
32122: PPUSH
32123: CALL_OW 263
32127: PUSH
32128: LD_INT 2
32130: NONEQUAL
32131: OR
32132: IFFALSE 32136
// exit ;
32134: GO 32452
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32136: LD_ADDR_VAR 0 6
32140: PUSH
32141: LD_INT 22
32143: PUSH
32144: LD_VAR 0 1
32148: PPUSH
32149: CALL_OW 255
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: LD_INT 30
32163: PUSH
32164: LD_INT 36
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 34
32173: PUSH
32174: LD_INT 31
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PPUSH
32190: CALL_OW 69
32194: ST_TO_ADDR
// if not tmp then
32195: LD_VAR 0 6
32199: NOT
32200: IFFALSE 32204
// exit ;
32202: GO 32452
// result := [ ] ;
32204: LD_ADDR_VAR 0 2
32208: PUSH
32209: EMPTY
32210: ST_TO_ADDR
// for i in tmp do
32211: LD_ADDR_VAR 0 3
32215: PUSH
32216: LD_VAR 0 6
32220: PUSH
32221: FOR_IN
32222: IFFALSE 32293
// begin t := UnitsInside ( i ) ;
32224: LD_ADDR_VAR 0 4
32228: PUSH
32229: LD_VAR 0 3
32233: PPUSH
32234: CALL_OW 313
32238: ST_TO_ADDR
// if t then
32239: LD_VAR 0 4
32243: IFFALSE 32291
// for j in t do
32245: LD_ADDR_VAR 0 7
32249: PUSH
32250: LD_VAR 0 4
32254: PUSH
32255: FOR_IN
32256: IFFALSE 32289
// result := Replace ( result , result + 1 , j ) ;
32258: LD_ADDR_VAR 0 2
32262: PUSH
32263: LD_VAR 0 2
32267: PPUSH
32268: LD_VAR 0 2
32272: PUSH
32273: LD_INT 1
32275: PLUS
32276: PPUSH
32277: LD_VAR 0 7
32281: PPUSH
32282: CALL_OW 1
32286: ST_TO_ADDR
32287: GO 32255
32289: POP
32290: POP
// end ;
32291: GO 32221
32293: POP
32294: POP
// if not result then
32295: LD_VAR 0 2
32299: NOT
32300: IFFALSE 32304
// exit ;
32302: GO 32452
// mech := result [ 1 ] ;
32304: LD_ADDR_VAR 0 5
32308: PUSH
32309: LD_VAR 0 2
32313: PUSH
32314: LD_INT 1
32316: ARRAY
32317: ST_TO_ADDR
// if result > 1 then
32318: LD_VAR 0 2
32322: PUSH
32323: LD_INT 1
32325: GREATER
32326: IFFALSE 32438
// begin for i = 2 to result do
32328: LD_ADDR_VAR 0 3
32332: PUSH
32333: DOUBLE
32334: LD_INT 2
32336: DEC
32337: ST_TO_ADDR
32338: LD_VAR 0 2
32342: PUSH
32343: FOR_TO
32344: IFFALSE 32436
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32346: LD_ADDR_VAR 0 4
32350: PUSH
32351: LD_VAR 0 2
32355: PUSH
32356: LD_VAR 0 3
32360: ARRAY
32361: PPUSH
32362: LD_INT 3
32364: PPUSH
32365: CALL_OW 259
32369: PUSH
32370: LD_VAR 0 2
32374: PUSH
32375: LD_VAR 0 3
32379: ARRAY
32380: PPUSH
32381: CALL_OW 432
32385: MINUS
32386: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32387: LD_VAR 0 4
32391: PUSH
32392: LD_VAR 0 5
32396: PPUSH
32397: LD_INT 3
32399: PPUSH
32400: CALL_OW 259
32404: PUSH
32405: LD_VAR 0 5
32409: PPUSH
32410: CALL_OW 432
32414: MINUS
32415: GREATEREQUAL
32416: IFFALSE 32434
// mech := result [ i ] ;
32418: LD_ADDR_VAR 0 5
32422: PUSH
32423: LD_VAR 0 2
32427: PUSH
32428: LD_VAR 0 3
32432: ARRAY
32433: ST_TO_ADDR
// end ;
32434: GO 32343
32436: POP
32437: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32438: LD_VAR 0 1
32442: PPUSH
32443: LD_VAR 0 5
32447: PPUSH
32448: CALL_OW 135
// end ;
32452: LD_VAR 0 2
32456: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
// result := [ ] ;
32472: LD_ADDR_VAR 0 7
32476: PUSH
32477: EMPTY
32478: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32479: LD_VAR 0 1
32483: PPUSH
32484: CALL_OW 266
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: IN
32499: NOT
32500: IFFALSE 32504
// exit ;
32502: GO 34138
// if name then
32504: LD_VAR 0 3
32508: IFFALSE 32524
// SetBName ( base_dep , name ) ;
32510: LD_VAR 0 1
32514: PPUSH
32515: LD_VAR 0 3
32519: PPUSH
32520: CALL_OW 500
// base := GetBase ( base_dep ) ;
32524: LD_ADDR_VAR 0 15
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 274
32538: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32539: LD_ADDR_VAR 0 16
32543: PUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 255
32553: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32554: LD_ADDR_VAR 0 17
32558: PUSH
32559: LD_VAR 0 1
32563: PPUSH
32564: CALL_OW 248
32568: ST_TO_ADDR
// if sources then
32569: LD_VAR 0 5
32573: IFFALSE 32620
// for i = 1 to 3 do
32575: LD_ADDR_VAR 0 8
32579: PUSH
32580: DOUBLE
32581: LD_INT 1
32583: DEC
32584: ST_TO_ADDR
32585: LD_INT 3
32587: PUSH
32588: FOR_TO
32589: IFFALSE 32618
// AddResourceType ( base , i , sources [ i ] ) ;
32591: LD_VAR 0 15
32595: PPUSH
32596: LD_VAR 0 8
32600: PPUSH
32601: LD_VAR 0 5
32605: PUSH
32606: LD_VAR 0 8
32610: ARRAY
32611: PPUSH
32612: CALL_OW 276
32616: GO 32588
32618: POP
32619: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32620: LD_ADDR_VAR 0 18
32624: PUSH
32625: LD_VAR 0 15
32629: PPUSH
32630: LD_VAR 0 2
32634: PPUSH
32635: LD_INT 1
32637: PPUSH
32638: CALL 31881 0 3
32642: ST_TO_ADDR
// InitHc ;
32643: CALL_OW 19
// InitUc ;
32647: CALL_OW 18
// uc_side := side ;
32651: LD_ADDR_OWVAR 20
32655: PUSH
32656: LD_VAR 0 16
32660: ST_TO_ADDR
// uc_nation := nation ;
32661: LD_ADDR_OWVAR 21
32665: PUSH
32666: LD_VAR 0 17
32670: ST_TO_ADDR
// if buildings then
32671: LD_VAR 0 18
32675: IFFALSE 33997
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32677: LD_ADDR_VAR 0 19
32681: PUSH
32682: LD_VAR 0 18
32686: PPUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 30
32692: PUSH
32693: LD_INT 29
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 30
32702: PUSH
32703: LD_INT 30
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: LIST
32714: PPUSH
32715: CALL_OW 72
32719: ST_TO_ADDR
// if tmp then
32720: LD_VAR 0 19
32724: IFFALSE 32772
// for i in tmp do
32726: LD_ADDR_VAR 0 8
32730: PUSH
32731: LD_VAR 0 19
32735: PUSH
32736: FOR_IN
32737: IFFALSE 32770
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32739: LD_VAR 0 8
32743: PPUSH
32744: CALL_OW 250
32748: PPUSH
32749: LD_VAR 0 8
32753: PPUSH
32754: CALL_OW 251
32758: PPUSH
32759: LD_VAR 0 16
32763: PPUSH
32764: CALL_OW 441
32768: GO 32736
32770: POP
32771: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32772: LD_VAR 0 18
32776: PPUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 30
32782: PUSH
32783: LD_INT 32
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 30
32792: PUSH
32793: LD_INT 33
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: PPUSH
32805: CALL_OW 72
32809: IFFALSE 32897
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32811: LD_ADDR_VAR 0 8
32815: PUSH
32816: LD_VAR 0 18
32820: PPUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 30
32826: PUSH
32827: LD_INT 32
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 30
32836: PUSH
32837: LD_INT 33
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: PPUSH
32849: CALL_OW 72
32853: PUSH
32854: FOR_IN
32855: IFFALSE 32895
// begin if not GetBWeapon ( i ) then
32857: LD_VAR 0 8
32861: PPUSH
32862: CALL_OW 269
32866: NOT
32867: IFFALSE 32893
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32869: LD_VAR 0 8
32873: PPUSH
32874: LD_VAR 0 8
32878: PPUSH
32879: LD_VAR 0 2
32883: PPUSH
32884: CALL 34143 0 2
32888: PPUSH
32889: CALL_OW 431
// end ;
32893: GO 32854
32895: POP
32896: POP
// end ; for i = 1 to personel do
32897: LD_ADDR_VAR 0 8
32901: PUSH
32902: DOUBLE
32903: LD_INT 1
32905: DEC
32906: ST_TO_ADDR
32907: LD_VAR 0 6
32911: PUSH
32912: FOR_TO
32913: IFFALSE 33977
// begin if i > 4 then
32915: LD_VAR 0 8
32919: PUSH
32920: LD_INT 4
32922: GREATER
32923: IFFALSE 32927
// break ;
32925: GO 33977
// case i of 1 :
32927: LD_VAR 0 8
32931: PUSH
32932: LD_INT 1
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 33020
32940: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32941: LD_ADDR_VAR 0 12
32945: PUSH
32946: LD_VAR 0 18
32950: PPUSH
32951: LD_INT 22
32953: PUSH
32954: LD_VAR 0 16
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 58
32965: PUSH
32966: EMPTY
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 30
32974: PUSH
32975: LD_INT 32
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 30
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 30
32994: PUSH
32995: LD_INT 5
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: PPUSH
33013: CALL_OW 72
33017: ST_TO_ADDR
33018: GO 33242
33020: LD_INT 2
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33090
33028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33029: LD_ADDR_VAR 0 12
33033: PUSH
33034: LD_VAR 0 18
33038: PPUSH
33039: LD_INT 22
33041: PUSH
33042: LD_VAR 0 16
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: LD_INT 30
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 30
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PPUSH
33083: CALL_OW 72
33087: ST_TO_ADDR
33088: GO 33242
33090: LD_INT 3
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33160
33098: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33099: LD_ADDR_VAR 0 12
33103: PUSH
33104: LD_VAR 0 18
33108: PPUSH
33109: LD_INT 22
33111: PUSH
33112: LD_VAR 0 16
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 30
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 30
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PPUSH
33153: CALL_OW 72
33157: ST_TO_ADDR
33158: GO 33242
33160: LD_INT 4
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33241
33168: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33169: LD_ADDR_VAR 0 12
33173: PUSH
33174: LD_VAR 0 18
33178: PPUSH
33179: LD_INT 22
33181: PUSH
33182: LD_VAR 0 16
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 30
33196: PUSH
33197: LD_INT 6
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 30
33206: PUSH
33207: LD_INT 7
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 30
33216: PUSH
33217: LD_INT 8
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PPUSH
33234: CALL_OW 72
33238: ST_TO_ADDR
33239: GO 33242
33241: POP
// if i = 1 then
33242: LD_VAR 0 8
33246: PUSH
33247: LD_INT 1
33249: EQUAL
33250: IFFALSE 33361
// begin tmp := [ ] ;
33252: LD_ADDR_VAR 0 19
33256: PUSH
33257: EMPTY
33258: ST_TO_ADDR
// for j in f do
33259: LD_ADDR_VAR 0 9
33263: PUSH
33264: LD_VAR 0 12
33268: PUSH
33269: FOR_IN
33270: IFFALSE 33343
// if GetBType ( j ) = b_bunker then
33272: LD_VAR 0 9
33276: PPUSH
33277: CALL_OW 266
33281: PUSH
33282: LD_INT 32
33284: EQUAL
33285: IFFALSE 33312
// tmp := Insert ( tmp , 1 , j ) else
33287: LD_ADDR_VAR 0 19
33291: PUSH
33292: LD_VAR 0 19
33296: PPUSH
33297: LD_INT 1
33299: PPUSH
33300: LD_VAR 0 9
33304: PPUSH
33305: CALL_OW 2
33309: ST_TO_ADDR
33310: GO 33341
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33312: LD_ADDR_VAR 0 19
33316: PUSH
33317: LD_VAR 0 19
33321: PPUSH
33322: LD_VAR 0 19
33326: PUSH
33327: LD_INT 1
33329: PLUS
33330: PPUSH
33331: LD_VAR 0 9
33335: PPUSH
33336: CALL_OW 2
33340: ST_TO_ADDR
33341: GO 33269
33343: POP
33344: POP
// if tmp then
33345: LD_VAR 0 19
33349: IFFALSE 33361
// f := tmp ;
33351: LD_ADDR_VAR 0 12
33355: PUSH
33356: LD_VAR 0 19
33360: ST_TO_ADDR
// end ; x := personel [ i ] ;
33361: LD_ADDR_VAR 0 13
33365: PUSH
33366: LD_VAR 0 6
33370: PUSH
33371: LD_VAR 0 8
33375: ARRAY
33376: ST_TO_ADDR
// if x = - 1 then
33377: LD_VAR 0 13
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: EQUAL
33386: IFFALSE 33595
// begin for j in f do
33388: LD_ADDR_VAR 0 9
33392: PUSH
33393: LD_VAR 0 12
33397: PUSH
33398: FOR_IN
33399: IFFALSE 33591
// repeat InitHc ;
33401: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33405: LD_VAR 0 9
33409: PPUSH
33410: CALL_OW 266
33414: PUSH
33415: LD_INT 5
33417: EQUAL
33418: IFFALSE 33488
// begin if UnitsInside ( j ) < 3 then
33420: LD_VAR 0 9
33424: PPUSH
33425: CALL_OW 313
33429: PUSH
33430: LD_INT 3
33432: LESS
33433: IFFALSE 33469
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33435: LD_INT 0
33437: PPUSH
33438: LD_INT 5
33440: PUSH
33441: LD_INT 8
33443: PUSH
33444: LD_INT 9
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: PUSH
33452: LD_VAR 0 17
33456: ARRAY
33457: PPUSH
33458: LD_VAR 0 4
33462: PPUSH
33463: CALL_OW 380
33467: GO 33486
// PrepareHuman ( false , i , skill ) ;
33469: LD_INT 0
33471: PPUSH
33472: LD_VAR 0 8
33476: PPUSH
33477: LD_VAR 0 4
33481: PPUSH
33482: CALL_OW 380
// end else
33486: GO 33505
// PrepareHuman ( false , i , skill ) ;
33488: LD_INT 0
33490: PPUSH
33491: LD_VAR 0 8
33495: PPUSH
33496: LD_VAR 0 4
33500: PPUSH
33501: CALL_OW 380
// un := CreateHuman ;
33505: LD_ADDR_VAR 0 14
33509: PUSH
33510: CALL_OW 44
33514: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33515: LD_ADDR_VAR 0 7
33519: PUSH
33520: LD_VAR 0 7
33524: PPUSH
33525: LD_INT 1
33527: PPUSH
33528: LD_VAR 0 14
33532: PPUSH
33533: CALL_OW 2
33537: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33538: LD_VAR 0 14
33542: PPUSH
33543: LD_VAR 0 9
33547: PPUSH
33548: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33552: LD_VAR 0 9
33556: PPUSH
33557: CALL_OW 313
33561: PUSH
33562: LD_INT 6
33564: EQUAL
33565: PUSH
33566: LD_VAR 0 9
33570: PPUSH
33571: CALL_OW 266
33575: PUSH
33576: LD_INT 32
33578: PUSH
33579: LD_INT 31
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: IN
33586: OR
33587: IFFALSE 33401
33589: GO 33398
33591: POP
33592: POP
// end else
33593: GO 33975
// for j = 1 to x do
33595: LD_ADDR_VAR 0 9
33599: PUSH
33600: DOUBLE
33601: LD_INT 1
33603: DEC
33604: ST_TO_ADDR
33605: LD_VAR 0 13
33609: PUSH
33610: FOR_TO
33611: IFFALSE 33973
// begin InitHc ;
33613: CALL_OW 19
// if not f then
33617: LD_VAR 0 12
33621: NOT
33622: IFFALSE 33711
// begin PrepareHuman ( false , i , skill ) ;
33624: LD_INT 0
33626: PPUSH
33627: LD_VAR 0 8
33631: PPUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: CALL_OW 380
// un := CreateHuman ;
33641: LD_ADDR_VAR 0 14
33645: PUSH
33646: CALL_OW 44
33650: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33651: LD_ADDR_VAR 0 7
33655: PUSH
33656: LD_VAR 0 7
33660: PPUSH
33661: LD_INT 1
33663: PPUSH
33664: LD_VAR 0 14
33668: PPUSH
33669: CALL_OW 2
33673: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33674: LD_VAR 0 14
33678: PPUSH
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 250
33688: PPUSH
33689: LD_VAR 0 1
33693: PPUSH
33694: CALL_OW 251
33698: PPUSH
33699: LD_INT 10
33701: PPUSH
33702: LD_INT 0
33704: PPUSH
33705: CALL_OW 50
// continue ;
33709: GO 33610
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33711: LD_VAR 0 12
33715: PUSH
33716: LD_INT 1
33718: ARRAY
33719: PPUSH
33720: CALL_OW 313
33724: PUSH
33725: LD_VAR 0 12
33729: PUSH
33730: LD_INT 1
33732: ARRAY
33733: PPUSH
33734: CALL_OW 266
33738: PUSH
33739: LD_INT 32
33741: PUSH
33742: LD_INT 31
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: IN
33749: AND
33750: PUSH
33751: LD_VAR 0 12
33755: PUSH
33756: LD_INT 1
33758: ARRAY
33759: PPUSH
33760: CALL_OW 313
33764: PUSH
33765: LD_INT 6
33767: EQUAL
33768: OR
33769: IFFALSE 33789
// f := Delete ( f , 1 ) ;
33771: LD_ADDR_VAR 0 12
33775: PUSH
33776: LD_VAR 0 12
33780: PPUSH
33781: LD_INT 1
33783: PPUSH
33784: CALL_OW 3
33788: ST_TO_ADDR
// if not f then
33789: LD_VAR 0 12
33793: NOT
33794: IFFALSE 33812
// begin x := x + 2 ;
33796: LD_ADDR_VAR 0 13
33800: PUSH
33801: LD_VAR 0 13
33805: PUSH
33806: LD_INT 2
33808: PLUS
33809: ST_TO_ADDR
// continue ;
33810: GO 33610
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33812: LD_VAR 0 12
33816: PUSH
33817: LD_INT 1
33819: ARRAY
33820: PPUSH
33821: CALL_OW 266
33825: PUSH
33826: LD_INT 5
33828: EQUAL
33829: IFFALSE 33903
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33831: LD_VAR 0 12
33835: PUSH
33836: LD_INT 1
33838: ARRAY
33839: PPUSH
33840: CALL_OW 313
33844: PUSH
33845: LD_INT 3
33847: LESS
33848: IFFALSE 33884
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33850: LD_INT 0
33852: PPUSH
33853: LD_INT 5
33855: PUSH
33856: LD_INT 8
33858: PUSH
33859: LD_INT 9
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: PUSH
33867: LD_VAR 0 17
33871: ARRAY
33872: PPUSH
33873: LD_VAR 0 4
33877: PPUSH
33878: CALL_OW 380
33882: GO 33901
// PrepareHuman ( false , i , skill ) ;
33884: LD_INT 0
33886: PPUSH
33887: LD_VAR 0 8
33891: PPUSH
33892: LD_VAR 0 4
33896: PPUSH
33897: CALL_OW 380
// end else
33901: GO 33920
// PrepareHuman ( false , i , skill ) ;
33903: LD_INT 0
33905: PPUSH
33906: LD_VAR 0 8
33910: PPUSH
33911: LD_VAR 0 4
33915: PPUSH
33916: CALL_OW 380
// un := CreateHuman ;
33920: LD_ADDR_VAR 0 14
33924: PUSH
33925: CALL_OW 44
33929: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33930: LD_ADDR_VAR 0 7
33934: PUSH
33935: LD_VAR 0 7
33939: PPUSH
33940: LD_INT 1
33942: PPUSH
33943: LD_VAR 0 14
33947: PPUSH
33948: CALL_OW 2
33952: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33953: LD_VAR 0 14
33957: PPUSH
33958: LD_VAR 0 12
33962: PUSH
33963: LD_INT 1
33965: ARRAY
33966: PPUSH
33967: CALL_OW 52
// end ;
33971: GO 33610
33973: POP
33974: POP
// end ;
33975: GO 32912
33977: POP
33978: POP
// result := result ^ buildings ;
33979: LD_ADDR_VAR 0 7
33983: PUSH
33984: LD_VAR 0 7
33988: PUSH
33989: LD_VAR 0 18
33993: ADD
33994: ST_TO_ADDR
// end else
33995: GO 34138
// begin for i = 1 to personel do
33997: LD_ADDR_VAR 0 8
34001: PUSH
34002: DOUBLE
34003: LD_INT 1
34005: DEC
34006: ST_TO_ADDR
34007: LD_VAR 0 6
34011: PUSH
34012: FOR_TO
34013: IFFALSE 34136
// begin if i > 4 then
34015: LD_VAR 0 8
34019: PUSH
34020: LD_INT 4
34022: GREATER
34023: IFFALSE 34027
// break ;
34025: GO 34136
// x := personel [ i ] ;
34027: LD_ADDR_VAR 0 13
34031: PUSH
34032: LD_VAR 0 6
34036: PUSH
34037: LD_VAR 0 8
34041: ARRAY
34042: ST_TO_ADDR
// if x = - 1 then
34043: LD_VAR 0 13
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: EQUAL
34052: IFFALSE 34056
// continue ;
34054: GO 34012
// PrepareHuman ( false , i , skill ) ;
34056: LD_INT 0
34058: PPUSH
34059: LD_VAR 0 8
34063: PPUSH
34064: LD_VAR 0 4
34068: PPUSH
34069: CALL_OW 380
// un := CreateHuman ;
34073: LD_ADDR_VAR 0 14
34077: PUSH
34078: CALL_OW 44
34082: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34083: LD_VAR 0 14
34087: PPUSH
34088: LD_VAR 0 1
34092: PPUSH
34093: CALL_OW 250
34097: PPUSH
34098: LD_VAR 0 1
34102: PPUSH
34103: CALL_OW 251
34107: PPUSH
34108: LD_INT 10
34110: PPUSH
34111: LD_INT 0
34113: PPUSH
34114: CALL_OW 50
// result := result ^ un ;
34118: LD_ADDR_VAR 0 7
34122: PUSH
34123: LD_VAR 0 7
34127: PUSH
34128: LD_VAR 0 14
34132: ADD
34133: ST_TO_ADDR
// end ;
34134: GO 34012
34136: POP
34137: POP
// end ; end ;
34138: LD_VAR 0 7
34142: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34143: LD_INT 0
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
34149: PPUSH
34150: PPUSH
34151: PPUSH
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
34159: PPUSH
34160: PPUSH
// result := false ;
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_INT 0
34168: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34169: LD_VAR 0 1
34173: NOT
34174: PUSH
34175: LD_VAR 0 1
34179: PPUSH
34180: CALL_OW 266
34184: PUSH
34185: LD_INT 32
34187: PUSH
34188: LD_INT 33
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: IN
34195: NOT
34196: OR
34197: IFFALSE 34201
// exit ;
34199: GO 35310
// nat := GetNation ( tower ) ;
34201: LD_ADDR_VAR 0 12
34205: PUSH
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL_OW 248
34215: ST_TO_ADDR
// side := GetSide ( tower ) ;
34216: LD_ADDR_VAR 0 16
34220: PUSH
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL_OW 255
34230: ST_TO_ADDR
// x := GetX ( tower ) ;
34231: LD_ADDR_VAR 0 10
34235: PUSH
34236: LD_VAR 0 1
34240: PPUSH
34241: CALL_OW 250
34245: ST_TO_ADDR
// y := GetY ( tower ) ;
34246: LD_ADDR_VAR 0 11
34250: PUSH
34251: LD_VAR 0 1
34255: PPUSH
34256: CALL_OW 251
34260: ST_TO_ADDR
// if not x or not y then
34261: LD_VAR 0 10
34265: NOT
34266: PUSH
34267: LD_VAR 0 11
34271: NOT
34272: OR
34273: IFFALSE 34277
// exit ;
34275: GO 35310
// weapon := 0 ;
34277: LD_ADDR_VAR 0 18
34281: PUSH
34282: LD_INT 0
34284: ST_TO_ADDR
// fac_list := [ ] ;
34285: LD_ADDR_VAR 0 17
34289: PUSH
34290: EMPTY
34291: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_VAR 0 1
34301: PPUSH
34302: CALL_OW 274
34306: PPUSH
34307: LD_VAR 0 2
34311: PPUSH
34312: LD_INT 0
34314: PPUSH
34315: CALL 31881 0 3
34319: PPUSH
34320: LD_INT 30
34322: PUSH
34323: LD_INT 3
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PPUSH
34330: CALL_OW 72
34334: ST_TO_ADDR
// if not factories then
34335: LD_VAR 0 6
34339: NOT
34340: IFFALSE 34344
// exit ;
34342: GO 35310
// for i in factories do
34344: LD_ADDR_VAR 0 8
34348: PUSH
34349: LD_VAR 0 6
34353: PUSH
34354: FOR_IN
34355: IFFALSE 34380
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34357: LD_ADDR_VAR 0 17
34361: PUSH
34362: LD_VAR 0 17
34366: PUSH
34367: LD_VAR 0 8
34371: PPUSH
34372: CALL_OW 478
34376: UNION
34377: ST_TO_ADDR
34378: GO 34354
34380: POP
34381: POP
// if not fac_list then
34382: LD_VAR 0 17
34386: NOT
34387: IFFALSE 34391
// exit ;
34389: GO 35310
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34391: LD_ADDR_VAR 0 5
34395: PUSH
34396: LD_INT 4
34398: PUSH
34399: LD_INT 5
34401: PUSH
34402: LD_INT 9
34404: PUSH
34405: LD_INT 10
34407: PUSH
34408: LD_INT 6
34410: PUSH
34411: LD_INT 7
34413: PUSH
34414: LD_INT 11
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 27
34428: PUSH
34429: LD_INT 28
34431: PUSH
34432: LD_INT 26
34434: PUSH
34435: LD_INT 30
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 43
34446: PUSH
34447: LD_INT 44
34449: PUSH
34450: LD_INT 46
34452: PUSH
34453: LD_INT 45
34455: PUSH
34456: LD_INT 47
34458: PUSH
34459: LD_INT 49
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: LIST
34474: PUSH
34475: LD_VAR 0 12
34479: ARRAY
34480: ST_TO_ADDR
// list := list isect fac_list ;
34481: LD_ADDR_VAR 0 5
34485: PUSH
34486: LD_VAR 0 5
34490: PUSH
34491: LD_VAR 0 17
34495: ISECT
34496: ST_TO_ADDR
// if not list then
34497: LD_VAR 0 5
34501: NOT
34502: IFFALSE 34506
// exit ;
34504: GO 35310
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34506: LD_VAR 0 12
34510: PUSH
34511: LD_INT 3
34513: EQUAL
34514: PUSH
34515: LD_INT 49
34517: PUSH
34518: LD_VAR 0 5
34522: IN
34523: AND
34524: PUSH
34525: LD_INT 31
34527: PPUSH
34528: LD_VAR 0 16
34532: PPUSH
34533: CALL_OW 321
34537: PUSH
34538: LD_INT 2
34540: EQUAL
34541: AND
34542: IFFALSE 34602
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34544: LD_INT 22
34546: PUSH
34547: LD_VAR 0 16
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 35
34558: PUSH
34559: LD_INT 49
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 91
34568: PUSH
34569: LD_VAR 0 1
34573: PUSH
34574: LD_INT 10
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: LIST
34586: PPUSH
34587: CALL_OW 69
34591: NOT
34592: IFFALSE 34602
// weapon := ru_time_lapser ;
34594: LD_ADDR_VAR 0 18
34598: PUSH
34599: LD_INT 49
34601: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34602: LD_VAR 0 12
34606: PUSH
34607: LD_INT 1
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: IN
34617: PUSH
34618: LD_INT 11
34620: PUSH
34621: LD_VAR 0 5
34625: IN
34626: PUSH
34627: LD_INT 30
34629: PUSH
34630: LD_VAR 0 5
34634: IN
34635: OR
34636: AND
34637: PUSH
34638: LD_INT 6
34640: PPUSH
34641: LD_VAR 0 16
34645: PPUSH
34646: CALL_OW 321
34650: PUSH
34651: LD_INT 2
34653: EQUAL
34654: AND
34655: IFFALSE 34820
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34657: LD_INT 22
34659: PUSH
34660: LD_VAR 0 16
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 35
34674: PUSH
34675: LD_INT 11
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 35
34684: PUSH
34685: LD_INT 30
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 91
34699: PUSH
34700: LD_VAR 0 1
34704: PUSH
34705: LD_INT 18
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: LIST
34717: PPUSH
34718: CALL_OW 69
34722: NOT
34723: PUSH
34724: LD_INT 22
34726: PUSH
34727: LD_VAR 0 16
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: LD_INT 30
34741: PUSH
34742: LD_INT 32
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 30
34751: PUSH
34752: LD_INT 33
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 91
34766: PUSH
34767: LD_VAR 0 1
34771: PUSH
34772: LD_INT 12
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: PPUSH
34788: CALL_OW 69
34792: PUSH
34793: LD_INT 2
34795: GREATER
34796: AND
34797: IFFALSE 34820
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34799: LD_ADDR_VAR 0 18
34803: PUSH
34804: LD_INT 11
34806: PUSH
34807: LD_INT 30
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_VAR 0 12
34818: ARRAY
34819: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34820: LD_VAR 0 18
34824: NOT
34825: PUSH
34826: LD_INT 40
34828: PPUSH
34829: LD_VAR 0 16
34833: PPUSH
34834: CALL_OW 321
34838: PUSH
34839: LD_INT 2
34841: EQUAL
34842: AND
34843: PUSH
34844: LD_INT 7
34846: PUSH
34847: LD_VAR 0 5
34851: IN
34852: PUSH
34853: LD_INT 28
34855: PUSH
34856: LD_VAR 0 5
34860: IN
34861: OR
34862: PUSH
34863: LD_INT 45
34865: PUSH
34866: LD_VAR 0 5
34870: IN
34871: OR
34872: AND
34873: IFFALSE 35127
// begin hex := GetHexInfo ( x , y ) ;
34875: LD_ADDR_VAR 0 4
34879: PUSH
34880: LD_VAR 0 10
34884: PPUSH
34885: LD_VAR 0 11
34889: PPUSH
34890: CALL_OW 546
34894: ST_TO_ADDR
// if hex [ 1 ] then
34895: LD_VAR 0 4
34899: PUSH
34900: LD_INT 1
34902: ARRAY
34903: IFFALSE 34907
// exit ;
34905: GO 35310
// height := hex [ 2 ] ;
34907: LD_ADDR_VAR 0 15
34911: PUSH
34912: LD_VAR 0 4
34916: PUSH
34917: LD_INT 2
34919: ARRAY
34920: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34921: LD_ADDR_VAR 0 14
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: LD_INT 2
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: LD_INT 5
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
// for i in tmp do
34944: LD_ADDR_VAR 0 8
34948: PUSH
34949: LD_VAR 0 14
34953: PUSH
34954: FOR_IN
34955: IFFALSE 35125
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34957: LD_ADDR_VAR 0 9
34961: PUSH
34962: LD_VAR 0 10
34966: PPUSH
34967: LD_VAR 0 8
34971: PPUSH
34972: LD_INT 5
34974: PPUSH
34975: CALL_OW 272
34979: PUSH
34980: LD_VAR 0 11
34984: PPUSH
34985: LD_VAR 0 8
34989: PPUSH
34990: LD_INT 5
34992: PPUSH
34993: CALL_OW 273
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35002: LD_VAR 0 9
35006: PUSH
35007: LD_INT 1
35009: ARRAY
35010: PPUSH
35011: LD_VAR 0 9
35015: PUSH
35016: LD_INT 2
35018: ARRAY
35019: PPUSH
35020: CALL_OW 488
35024: IFFALSE 35123
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35026: LD_ADDR_VAR 0 4
35030: PUSH
35031: LD_VAR 0 9
35035: PUSH
35036: LD_INT 1
35038: ARRAY
35039: PPUSH
35040: LD_VAR 0 9
35044: PUSH
35045: LD_INT 2
35047: ARRAY
35048: PPUSH
35049: CALL_OW 546
35053: ST_TO_ADDR
// if hex [ 1 ] then
35054: LD_VAR 0 4
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: IFFALSE 35066
// continue ;
35064: GO 34954
// h := hex [ 2 ] ;
35066: LD_ADDR_VAR 0 13
35070: PUSH
35071: LD_VAR 0 4
35075: PUSH
35076: LD_INT 2
35078: ARRAY
35079: ST_TO_ADDR
// if h + 7 < height then
35080: LD_VAR 0 13
35084: PUSH
35085: LD_INT 7
35087: PLUS
35088: PUSH
35089: LD_VAR 0 15
35093: LESS
35094: IFFALSE 35123
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35096: LD_ADDR_VAR 0 18
35100: PUSH
35101: LD_INT 7
35103: PUSH
35104: LD_INT 28
35106: PUSH
35107: LD_INT 45
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: PUSH
35115: LD_VAR 0 12
35119: ARRAY
35120: ST_TO_ADDR
// break ;
35121: GO 35125
// end ; end ; end ;
35123: GO 34954
35125: POP
35126: POP
// end ; if not weapon then
35127: LD_VAR 0 18
35131: NOT
35132: IFFALSE 35192
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35134: LD_ADDR_VAR 0 5
35138: PUSH
35139: LD_VAR 0 5
35143: PUSH
35144: LD_INT 11
35146: PUSH
35147: LD_INT 30
35149: PUSH
35150: LD_INT 49
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: DIFF
35158: ST_TO_ADDR
// if not list then
35159: LD_VAR 0 5
35163: NOT
35164: IFFALSE 35168
// exit ;
35166: GO 35310
// weapon := list [ rand ( 1 , list ) ] ;
35168: LD_ADDR_VAR 0 18
35172: PUSH
35173: LD_VAR 0 5
35177: PUSH
35178: LD_INT 1
35180: PPUSH
35181: LD_VAR 0 5
35185: PPUSH
35186: CALL_OW 12
35190: ARRAY
35191: ST_TO_ADDR
// end ; if weapon then
35192: LD_VAR 0 18
35196: IFFALSE 35310
// begin tmp := CostOfWeapon ( weapon ) ;
35198: LD_ADDR_VAR 0 14
35202: PUSH
35203: LD_VAR 0 18
35207: PPUSH
35208: CALL_OW 451
35212: ST_TO_ADDR
// j := GetBase ( tower ) ;
35213: LD_ADDR_VAR 0 9
35217: PUSH
35218: LD_VAR 0 1
35222: PPUSH
35223: CALL_OW 274
35227: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35228: LD_VAR 0 9
35232: PPUSH
35233: LD_INT 1
35235: PPUSH
35236: CALL_OW 275
35240: PUSH
35241: LD_VAR 0 14
35245: PUSH
35246: LD_INT 1
35248: ARRAY
35249: GREATEREQUAL
35250: PUSH
35251: LD_VAR 0 9
35255: PPUSH
35256: LD_INT 2
35258: PPUSH
35259: CALL_OW 275
35263: PUSH
35264: LD_VAR 0 14
35268: PUSH
35269: LD_INT 2
35271: ARRAY
35272: GREATEREQUAL
35273: AND
35274: PUSH
35275: LD_VAR 0 9
35279: PPUSH
35280: LD_INT 3
35282: PPUSH
35283: CALL_OW 275
35287: PUSH
35288: LD_VAR 0 14
35292: PUSH
35293: LD_INT 3
35295: ARRAY
35296: GREATEREQUAL
35297: AND
35298: IFFALSE 35310
// result := weapon ;
35300: LD_ADDR_VAR 0 3
35304: PUSH
35305: LD_VAR 0 18
35309: ST_TO_ADDR
// end ; end ;
35310: LD_VAR 0 3
35314: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35315: LD_INT 0
35317: PPUSH
35318: PPUSH
// result := true ;
35319: LD_ADDR_VAR 0 3
35323: PUSH
35324: LD_INT 1
35326: ST_TO_ADDR
// if array1 = array2 then
35327: LD_VAR 0 1
35331: PUSH
35332: LD_VAR 0 2
35336: EQUAL
35337: IFFALSE 35397
// begin for i = 1 to array1 do
35339: LD_ADDR_VAR 0 4
35343: PUSH
35344: DOUBLE
35345: LD_INT 1
35347: DEC
35348: ST_TO_ADDR
35349: LD_VAR 0 1
35353: PUSH
35354: FOR_TO
35355: IFFALSE 35393
// if array1 [ i ] <> array2 [ i ] then
35357: LD_VAR 0 1
35361: PUSH
35362: LD_VAR 0 4
35366: ARRAY
35367: PUSH
35368: LD_VAR 0 2
35372: PUSH
35373: LD_VAR 0 4
35377: ARRAY
35378: NONEQUAL
35379: IFFALSE 35391
// begin result := false ;
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_INT 0
35388: ST_TO_ADDR
// break ;
35389: GO 35393
// end ;
35391: GO 35354
35393: POP
35394: POP
// end else
35395: GO 35405
// result := false ;
35397: LD_ADDR_VAR 0 3
35401: PUSH
35402: LD_INT 0
35404: ST_TO_ADDR
// end ;
35405: LD_VAR 0 3
35409: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35410: LD_INT 0
35412: PPUSH
35413: PPUSH
// if not array1 or not array2 then
35414: LD_VAR 0 1
35418: NOT
35419: PUSH
35420: LD_VAR 0 2
35424: NOT
35425: OR
35426: IFFALSE 35430
// exit ;
35428: GO 35494
// result := true ;
35430: LD_ADDR_VAR 0 3
35434: PUSH
35435: LD_INT 1
35437: ST_TO_ADDR
// for i = 1 to array1 do
35438: LD_ADDR_VAR 0 4
35442: PUSH
35443: DOUBLE
35444: LD_INT 1
35446: DEC
35447: ST_TO_ADDR
35448: LD_VAR 0 1
35452: PUSH
35453: FOR_TO
35454: IFFALSE 35492
// if array1 [ i ] <> array2 [ i ] then
35456: LD_VAR 0 1
35460: PUSH
35461: LD_VAR 0 4
35465: ARRAY
35466: PUSH
35467: LD_VAR 0 2
35471: PUSH
35472: LD_VAR 0 4
35476: ARRAY
35477: NONEQUAL
35478: IFFALSE 35490
// begin result := false ;
35480: LD_ADDR_VAR 0 3
35484: PUSH
35485: LD_INT 0
35487: ST_TO_ADDR
// break ;
35488: GO 35492
// end ;
35490: GO 35453
35492: POP
35493: POP
// end ;
35494: LD_VAR 0 3
35498: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35499: LD_INT 0
35501: PPUSH
35502: PPUSH
35503: PPUSH
// pom := GetBase ( fac ) ;
35504: LD_ADDR_VAR 0 5
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 274
35518: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35519: LD_ADDR_VAR 0 4
35523: PUSH
35524: LD_VAR 0 2
35528: PUSH
35529: LD_INT 1
35531: ARRAY
35532: PPUSH
35533: LD_VAR 0 2
35537: PUSH
35538: LD_INT 2
35540: ARRAY
35541: PPUSH
35542: LD_VAR 0 2
35546: PUSH
35547: LD_INT 3
35549: ARRAY
35550: PPUSH
35551: LD_VAR 0 2
35555: PUSH
35556: LD_INT 4
35558: ARRAY
35559: PPUSH
35560: CALL_OW 449
35564: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35565: LD_ADDR_VAR 0 3
35569: PUSH
35570: LD_VAR 0 5
35574: PPUSH
35575: LD_INT 1
35577: PPUSH
35578: CALL_OW 275
35582: PUSH
35583: LD_VAR 0 4
35587: PUSH
35588: LD_INT 1
35590: ARRAY
35591: GREATEREQUAL
35592: PUSH
35593: LD_VAR 0 5
35597: PPUSH
35598: LD_INT 2
35600: PPUSH
35601: CALL_OW 275
35605: PUSH
35606: LD_VAR 0 4
35610: PUSH
35611: LD_INT 2
35613: ARRAY
35614: GREATEREQUAL
35615: AND
35616: PUSH
35617: LD_VAR 0 5
35621: PPUSH
35622: LD_INT 3
35624: PPUSH
35625: CALL_OW 275
35629: PUSH
35630: LD_VAR 0 4
35634: PUSH
35635: LD_INT 3
35637: ARRAY
35638: GREATEREQUAL
35639: AND
35640: ST_TO_ADDR
// end ;
35641: LD_VAR 0 3
35645: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35646: LD_INT 0
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
// pom := GetBase ( building ) ;
35652: LD_ADDR_VAR 0 3
35656: PUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 274
35666: ST_TO_ADDR
// if not pom then
35667: LD_VAR 0 3
35671: NOT
35672: IFFALSE 35676
// exit ;
35674: GO 35846
// btype := GetBType ( building ) ;
35676: LD_ADDR_VAR 0 5
35680: PUSH
35681: LD_VAR 0 1
35685: PPUSH
35686: CALL_OW 266
35690: ST_TO_ADDR
// if btype = b_armoury then
35691: LD_VAR 0 5
35695: PUSH
35696: LD_INT 4
35698: EQUAL
35699: IFFALSE 35709
// btype := b_barracks ;
35701: LD_ADDR_VAR 0 5
35705: PUSH
35706: LD_INT 5
35708: ST_TO_ADDR
// if btype = b_depot then
35709: LD_VAR 0 5
35713: PUSH
35714: LD_INT 0
35716: EQUAL
35717: IFFALSE 35727
// btype := b_warehouse ;
35719: LD_ADDR_VAR 0 5
35723: PUSH
35724: LD_INT 1
35726: ST_TO_ADDR
// if btype = b_workshop then
35727: LD_VAR 0 5
35731: PUSH
35732: LD_INT 2
35734: EQUAL
35735: IFFALSE 35745
// btype := b_factory ;
35737: LD_ADDR_VAR 0 5
35741: PUSH
35742: LD_INT 3
35744: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35745: LD_ADDR_VAR 0 4
35749: PUSH
35750: LD_VAR 0 5
35754: PPUSH
35755: LD_VAR 0 1
35759: PPUSH
35760: CALL_OW 248
35764: PPUSH
35765: CALL_OW 450
35769: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35770: LD_ADDR_VAR 0 2
35774: PUSH
35775: LD_VAR 0 3
35779: PPUSH
35780: LD_INT 1
35782: PPUSH
35783: CALL_OW 275
35787: PUSH
35788: LD_VAR 0 4
35792: PUSH
35793: LD_INT 1
35795: ARRAY
35796: GREATEREQUAL
35797: PUSH
35798: LD_VAR 0 3
35802: PPUSH
35803: LD_INT 2
35805: PPUSH
35806: CALL_OW 275
35810: PUSH
35811: LD_VAR 0 4
35815: PUSH
35816: LD_INT 2
35818: ARRAY
35819: GREATEREQUAL
35820: AND
35821: PUSH
35822: LD_VAR 0 3
35826: PPUSH
35827: LD_INT 3
35829: PPUSH
35830: CALL_OW 275
35834: PUSH
35835: LD_VAR 0 4
35839: PUSH
35840: LD_INT 3
35842: ARRAY
35843: GREATEREQUAL
35844: AND
35845: ST_TO_ADDR
// end ;
35846: LD_VAR 0 2
35850: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35851: LD_INT 0
35853: PPUSH
35854: PPUSH
35855: PPUSH
// pom := GetBase ( building ) ;
35856: LD_ADDR_VAR 0 4
35860: PUSH
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL_OW 274
35870: ST_TO_ADDR
// if not pom then
35871: LD_VAR 0 4
35875: NOT
35876: IFFALSE 35880
// exit ;
35878: GO 35981
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35880: LD_ADDR_VAR 0 5
35884: PUSH
35885: LD_VAR 0 2
35889: PPUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: CALL_OW 248
35899: PPUSH
35900: CALL_OW 450
35904: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35905: LD_ADDR_VAR 0 3
35909: PUSH
35910: LD_VAR 0 4
35914: PPUSH
35915: LD_INT 1
35917: PPUSH
35918: CALL_OW 275
35922: PUSH
35923: LD_VAR 0 5
35927: PUSH
35928: LD_INT 1
35930: ARRAY
35931: GREATEREQUAL
35932: PUSH
35933: LD_VAR 0 4
35937: PPUSH
35938: LD_INT 2
35940: PPUSH
35941: CALL_OW 275
35945: PUSH
35946: LD_VAR 0 5
35950: PUSH
35951: LD_INT 2
35953: ARRAY
35954: GREATEREQUAL
35955: AND
35956: PUSH
35957: LD_VAR 0 4
35961: PPUSH
35962: LD_INT 3
35964: PPUSH
35965: CALL_OW 275
35969: PUSH
35970: LD_VAR 0 5
35974: PUSH
35975: LD_INT 3
35977: ARRAY
35978: GREATEREQUAL
35979: AND
35980: ST_TO_ADDR
// end ;
35981: LD_VAR 0 3
35985: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35986: LD_INT 0
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
35997: PPUSH
35998: PPUSH
// result := false ;
35999: LD_ADDR_VAR 0 8
36003: PUSH
36004: LD_INT 0
36006: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36007: LD_VAR 0 5
36011: NOT
36012: PUSH
36013: LD_VAR 0 1
36017: NOT
36018: OR
36019: PUSH
36020: LD_VAR 0 2
36024: NOT
36025: OR
36026: PUSH
36027: LD_VAR 0 3
36031: NOT
36032: OR
36033: IFFALSE 36037
// exit ;
36035: GO 36851
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36037: LD_ADDR_VAR 0 14
36041: PUSH
36042: LD_VAR 0 1
36046: PPUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: LD_VAR 0 3
36056: PPUSH
36057: LD_VAR 0 4
36061: PPUSH
36062: LD_VAR 0 5
36066: PUSH
36067: LD_INT 1
36069: ARRAY
36070: PPUSH
36071: CALL_OW 248
36075: PPUSH
36076: LD_INT 0
36078: PPUSH
36079: CALL 38088 0 6
36083: ST_TO_ADDR
// if not hexes then
36084: LD_VAR 0 14
36088: NOT
36089: IFFALSE 36093
// exit ;
36091: GO 36851
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36093: LD_ADDR_VAR 0 17
36097: PUSH
36098: LD_VAR 0 5
36102: PPUSH
36103: LD_INT 22
36105: PUSH
36106: LD_VAR 0 13
36110: PPUSH
36111: CALL_OW 255
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: LD_INT 30
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 30
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PPUSH
36152: CALL_OW 72
36156: ST_TO_ADDR
// for i = 1 to hexes do
36157: LD_ADDR_VAR 0 9
36161: PUSH
36162: DOUBLE
36163: LD_INT 1
36165: DEC
36166: ST_TO_ADDR
36167: LD_VAR 0 14
36171: PUSH
36172: FOR_TO
36173: IFFALSE 36849
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36175: LD_ADDR_VAR 0 13
36179: PUSH
36180: LD_VAR 0 14
36184: PUSH
36185: LD_VAR 0 9
36189: ARRAY
36190: PUSH
36191: LD_INT 1
36193: ARRAY
36194: PPUSH
36195: LD_VAR 0 14
36199: PUSH
36200: LD_VAR 0 9
36204: ARRAY
36205: PUSH
36206: LD_INT 2
36208: ARRAY
36209: PPUSH
36210: CALL_OW 428
36214: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36215: LD_VAR 0 14
36219: PUSH
36220: LD_VAR 0 9
36224: ARRAY
36225: PUSH
36226: LD_INT 1
36228: ARRAY
36229: PPUSH
36230: LD_VAR 0 14
36234: PUSH
36235: LD_VAR 0 9
36239: ARRAY
36240: PUSH
36241: LD_INT 2
36243: ARRAY
36244: PPUSH
36245: CALL_OW 351
36249: PUSH
36250: LD_VAR 0 14
36254: PUSH
36255: LD_VAR 0 9
36259: ARRAY
36260: PUSH
36261: LD_INT 1
36263: ARRAY
36264: PPUSH
36265: LD_VAR 0 14
36269: PUSH
36270: LD_VAR 0 9
36274: ARRAY
36275: PUSH
36276: LD_INT 2
36278: ARRAY
36279: PPUSH
36280: CALL_OW 488
36284: NOT
36285: OR
36286: PUSH
36287: LD_VAR 0 13
36291: PPUSH
36292: CALL_OW 247
36296: PUSH
36297: LD_INT 3
36299: EQUAL
36300: OR
36301: IFFALSE 36307
// exit ;
36303: POP
36304: POP
36305: GO 36851
// if not tmp then
36307: LD_VAR 0 13
36311: NOT
36312: IFFALSE 36316
// continue ;
36314: GO 36172
// result := true ;
36316: LD_ADDR_VAR 0 8
36320: PUSH
36321: LD_INT 1
36323: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36324: LD_VAR 0 6
36328: PUSH
36329: LD_VAR 0 13
36333: PPUSH
36334: CALL_OW 247
36338: PUSH
36339: LD_INT 2
36341: EQUAL
36342: AND
36343: PUSH
36344: LD_VAR 0 13
36348: PPUSH
36349: CALL_OW 263
36353: PUSH
36354: LD_INT 1
36356: EQUAL
36357: AND
36358: IFFALSE 36522
// begin if IsDrivenBy ( tmp ) then
36360: LD_VAR 0 13
36364: PPUSH
36365: CALL_OW 311
36369: IFFALSE 36373
// continue ;
36371: GO 36172
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36373: LD_VAR 0 6
36377: PPUSH
36378: LD_INT 3
36380: PUSH
36381: LD_INT 60
36383: PUSH
36384: EMPTY
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 3
36393: PUSH
36394: LD_INT 55
36396: PUSH
36397: EMPTY
36398: LIST
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PPUSH
36408: CALL_OW 72
36412: IFFALSE 36520
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36414: LD_ADDR_VAR 0 18
36418: PUSH
36419: LD_VAR 0 6
36423: PPUSH
36424: LD_INT 3
36426: PUSH
36427: LD_INT 60
36429: PUSH
36430: EMPTY
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 3
36439: PUSH
36440: LD_INT 55
36442: PUSH
36443: EMPTY
36444: LIST
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PPUSH
36454: CALL_OW 72
36458: PUSH
36459: LD_INT 1
36461: ARRAY
36462: ST_TO_ADDR
// if IsInUnit ( driver ) then
36463: LD_VAR 0 18
36467: PPUSH
36468: CALL_OW 310
36472: IFFALSE 36483
// ComExit ( driver ) ;
36474: LD_VAR 0 18
36478: PPUSH
36479: CALL 61272 0 1
// AddComEnterUnit ( driver , tmp ) ;
36483: LD_VAR 0 18
36487: PPUSH
36488: LD_VAR 0 13
36492: PPUSH
36493: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36497: LD_VAR 0 18
36501: PPUSH
36502: LD_VAR 0 7
36506: PPUSH
36507: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36511: LD_VAR 0 18
36515: PPUSH
36516: CALL_OW 181
// end ; continue ;
36520: GO 36172
// end ; if not cleaners or not tmp in cleaners then
36522: LD_VAR 0 6
36526: NOT
36527: PUSH
36528: LD_VAR 0 13
36532: PUSH
36533: LD_VAR 0 6
36537: IN
36538: NOT
36539: OR
36540: IFFALSE 36847
// begin if dep then
36542: LD_VAR 0 17
36546: IFFALSE 36682
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36548: LD_ADDR_VAR 0 16
36552: PUSH
36553: LD_VAR 0 17
36557: PUSH
36558: LD_INT 1
36560: ARRAY
36561: PPUSH
36562: CALL_OW 250
36566: PPUSH
36567: LD_VAR 0 17
36571: PUSH
36572: LD_INT 1
36574: ARRAY
36575: PPUSH
36576: CALL_OW 254
36580: PPUSH
36581: LD_INT 5
36583: PPUSH
36584: CALL_OW 272
36588: PUSH
36589: LD_VAR 0 17
36593: PUSH
36594: LD_INT 1
36596: ARRAY
36597: PPUSH
36598: CALL_OW 251
36602: PPUSH
36603: LD_VAR 0 17
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: CALL_OW 254
36616: PPUSH
36617: LD_INT 5
36619: PPUSH
36620: CALL_OW 273
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36629: LD_VAR 0 16
36633: PUSH
36634: LD_INT 1
36636: ARRAY
36637: PPUSH
36638: LD_VAR 0 16
36642: PUSH
36643: LD_INT 2
36645: ARRAY
36646: PPUSH
36647: CALL_OW 488
36651: IFFALSE 36682
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36653: LD_VAR 0 13
36657: PPUSH
36658: LD_VAR 0 16
36662: PUSH
36663: LD_INT 1
36665: ARRAY
36666: PPUSH
36667: LD_VAR 0 16
36671: PUSH
36672: LD_INT 2
36674: ARRAY
36675: PPUSH
36676: CALL_OW 111
// continue ;
36680: GO 36172
// end ; end ; r := GetDir ( tmp ) ;
36682: LD_ADDR_VAR 0 15
36686: PUSH
36687: LD_VAR 0 13
36691: PPUSH
36692: CALL_OW 254
36696: ST_TO_ADDR
// if r = 5 then
36697: LD_VAR 0 15
36701: PUSH
36702: LD_INT 5
36704: EQUAL
36705: IFFALSE 36715
// r := 0 ;
36707: LD_ADDR_VAR 0 15
36711: PUSH
36712: LD_INT 0
36714: ST_TO_ADDR
// for j = r to 5 do
36715: LD_ADDR_VAR 0 10
36719: PUSH
36720: DOUBLE
36721: LD_VAR 0 15
36725: DEC
36726: ST_TO_ADDR
36727: LD_INT 5
36729: PUSH
36730: FOR_TO
36731: IFFALSE 36845
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36733: LD_ADDR_VAR 0 11
36737: PUSH
36738: LD_VAR 0 13
36742: PPUSH
36743: CALL_OW 250
36747: PPUSH
36748: LD_VAR 0 10
36752: PPUSH
36753: LD_INT 2
36755: PPUSH
36756: CALL_OW 272
36760: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36761: LD_ADDR_VAR 0 12
36765: PUSH
36766: LD_VAR 0 13
36770: PPUSH
36771: CALL_OW 251
36775: PPUSH
36776: LD_VAR 0 10
36780: PPUSH
36781: LD_INT 2
36783: PPUSH
36784: CALL_OW 273
36788: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36789: LD_VAR 0 11
36793: PPUSH
36794: LD_VAR 0 12
36798: PPUSH
36799: CALL_OW 488
36803: PUSH
36804: LD_VAR 0 11
36808: PPUSH
36809: LD_VAR 0 12
36813: PPUSH
36814: CALL_OW 428
36818: NOT
36819: AND
36820: IFFALSE 36843
// begin ComMoveXY ( tmp , _x , _y ) ;
36822: LD_VAR 0 13
36826: PPUSH
36827: LD_VAR 0 11
36831: PPUSH
36832: LD_VAR 0 12
36836: PPUSH
36837: CALL_OW 111
// break ;
36841: GO 36845
// end ; end ;
36843: GO 36730
36845: POP
36846: POP
// end ; end ;
36847: GO 36172
36849: POP
36850: POP
// end ;
36851: LD_VAR 0 8
36855: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36856: LD_INT 0
36858: PPUSH
// result := true ;
36859: LD_ADDR_VAR 0 3
36863: PUSH
36864: LD_INT 1
36866: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36867: LD_VAR 0 2
36871: PUSH
36872: LD_INT 24
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36886
36878: LD_INT 33
36880: DOUBLE
36881: EQUAL
36882: IFTRUE 36886
36884: GO 36911
36886: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36887: LD_ADDR_VAR 0 3
36891: PUSH
36892: LD_INT 32
36894: PPUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 321
36904: PUSH
36905: LD_INT 2
36907: EQUAL
36908: ST_TO_ADDR
36909: GO 37231
36911: LD_INT 20
36913: DOUBLE
36914: EQUAL
36915: IFTRUE 36919
36917: GO 36944
36919: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36920: LD_ADDR_VAR 0 3
36924: PUSH
36925: LD_INT 6
36927: PPUSH
36928: LD_VAR 0 1
36932: PPUSH
36933: CALL_OW 321
36937: PUSH
36938: LD_INT 2
36940: EQUAL
36941: ST_TO_ADDR
36942: GO 37231
36944: LD_INT 22
36946: DOUBLE
36947: EQUAL
36948: IFTRUE 36958
36950: LD_INT 36
36952: DOUBLE
36953: EQUAL
36954: IFTRUE 36958
36956: GO 36983
36958: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36959: LD_ADDR_VAR 0 3
36963: PUSH
36964: LD_INT 15
36966: PPUSH
36967: LD_VAR 0 1
36971: PPUSH
36972: CALL_OW 321
36976: PUSH
36977: LD_INT 2
36979: EQUAL
36980: ST_TO_ADDR
36981: GO 37231
36983: LD_INT 30
36985: DOUBLE
36986: EQUAL
36987: IFTRUE 36991
36989: GO 37016
36991: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_INT 20
36999: PPUSH
37000: LD_VAR 0 1
37004: PPUSH
37005: CALL_OW 321
37009: PUSH
37010: LD_INT 2
37012: EQUAL
37013: ST_TO_ADDR
37014: GO 37231
37016: LD_INT 28
37018: DOUBLE
37019: EQUAL
37020: IFTRUE 37030
37022: LD_INT 21
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37030
37028: GO 37055
37030: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_INT 21
37038: PPUSH
37039: LD_VAR 0 1
37043: PPUSH
37044: CALL_OW 321
37048: PUSH
37049: LD_INT 2
37051: EQUAL
37052: ST_TO_ADDR
37053: GO 37231
37055: LD_INT 16
37057: DOUBLE
37058: EQUAL
37059: IFTRUE 37063
37061: GO 37090
37063: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37064: LD_ADDR_VAR 0 3
37068: PUSH
37069: LD_EXP 96
37073: PPUSH
37074: LD_VAR 0 1
37078: PPUSH
37079: CALL_OW 321
37083: PUSH
37084: LD_INT 2
37086: EQUAL
37087: ST_TO_ADDR
37088: GO 37231
37090: LD_INT 19
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37104
37096: LD_INT 23
37098: DOUBLE
37099: EQUAL
37100: IFTRUE 37104
37102: GO 37131
37104: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37105: LD_ADDR_VAR 0 3
37109: PUSH
37110: LD_EXP 95
37114: PPUSH
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 321
37124: PUSH
37125: LD_INT 2
37127: EQUAL
37128: ST_TO_ADDR
37129: GO 37231
37131: LD_INT 17
37133: DOUBLE
37134: EQUAL
37135: IFTRUE 37139
37137: GO 37164
37139: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37140: LD_ADDR_VAR 0 3
37144: PUSH
37145: LD_INT 39
37147: PPUSH
37148: LD_VAR 0 1
37152: PPUSH
37153: CALL_OW 321
37157: PUSH
37158: LD_INT 2
37160: EQUAL
37161: ST_TO_ADDR
37162: GO 37231
37164: LD_INT 18
37166: DOUBLE
37167: EQUAL
37168: IFTRUE 37172
37170: GO 37197
37172: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 40
37180: PPUSH
37181: LD_VAR 0 1
37185: PPUSH
37186: CALL_OW 321
37190: PUSH
37191: LD_INT 2
37193: EQUAL
37194: ST_TO_ADDR
37195: GO 37231
37197: LD_INT 27
37199: DOUBLE
37200: EQUAL
37201: IFTRUE 37205
37203: GO 37230
37205: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: LD_INT 35
37213: PPUSH
37214: LD_VAR 0 1
37218: PPUSH
37219: CALL_OW 321
37223: PUSH
37224: LD_INT 2
37226: EQUAL
37227: ST_TO_ADDR
37228: GO 37231
37230: POP
// end ;
37231: LD_VAR 0 3
37235: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37236: LD_INT 0
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
// result := false ;
37249: LD_ADDR_VAR 0 6
37253: PUSH
37254: LD_INT 0
37256: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37257: LD_VAR 0 1
37261: NOT
37262: PUSH
37263: LD_VAR 0 1
37267: PPUSH
37268: CALL_OW 266
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: IN
37283: NOT
37284: OR
37285: PUSH
37286: LD_VAR 0 2
37290: NOT
37291: OR
37292: PUSH
37293: LD_VAR 0 5
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 3
37309: PUSH
37310: LD_INT 4
37312: PUSH
37313: LD_INT 5
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: IN
37324: NOT
37325: OR
37326: PUSH
37327: LD_VAR 0 3
37331: PPUSH
37332: LD_VAR 0 4
37336: PPUSH
37337: CALL_OW 488
37341: NOT
37342: OR
37343: IFFALSE 37347
// exit ;
37345: GO 38083
// side := GetSide ( depot ) ;
37347: LD_ADDR_VAR 0 9
37351: PUSH
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 255
37361: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37362: LD_VAR 0 9
37366: PPUSH
37367: LD_VAR 0 2
37371: PPUSH
37372: CALL 36856 0 2
37376: NOT
37377: IFFALSE 37381
// exit ;
37379: GO 38083
// pom := GetBase ( depot ) ;
37381: LD_ADDR_VAR 0 10
37385: PUSH
37386: LD_VAR 0 1
37390: PPUSH
37391: CALL_OW 274
37395: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37396: LD_ADDR_VAR 0 11
37400: PUSH
37401: LD_VAR 0 2
37405: PPUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 248
37415: PPUSH
37416: CALL_OW 450
37420: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37421: LD_VAR 0 10
37425: PPUSH
37426: LD_INT 1
37428: PPUSH
37429: CALL_OW 275
37433: PUSH
37434: LD_VAR 0 11
37438: PUSH
37439: LD_INT 1
37441: ARRAY
37442: GREATEREQUAL
37443: PUSH
37444: LD_VAR 0 10
37448: PPUSH
37449: LD_INT 2
37451: PPUSH
37452: CALL_OW 275
37456: PUSH
37457: LD_VAR 0 11
37461: PUSH
37462: LD_INT 2
37464: ARRAY
37465: GREATEREQUAL
37466: AND
37467: PUSH
37468: LD_VAR 0 10
37472: PPUSH
37473: LD_INT 3
37475: PPUSH
37476: CALL_OW 275
37480: PUSH
37481: LD_VAR 0 11
37485: PUSH
37486: LD_INT 3
37488: ARRAY
37489: GREATEREQUAL
37490: AND
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 38083
// if GetBType ( depot ) = b_depot then
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 266
37505: PUSH
37506: LD_INT 0
37508: EQUAL
37509: IFFALSE 37521
// dist := 28 else
37511: LD_ADDR_VAR 0 14
37515: PUSH
37516: LD_INT 28
37518: ST_TO_ADDR
37519: GO 37529
// dist := 36 ;
37521: LD_ADDR_VAR 0 14
37525: PUSH
37526: LD_INT 36
37528: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37529: LD_VAR 0 1
37533: PPUSH
37534: LD_VAR 0 3
37538: PPUSH
37539: LD_VAR 0 4
37543: PPUSH
37544: CALL_OW 297
37548: PUSH
37549: LD_VAR 0 14
37553: GREATER
37554: IFFALSE 37558
// exit ;
37556: GO 38083
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37558: LD_ADDR_VAR 0 12
37562: PUSH
37563: LD_VAR 0 2
37567: PPUSH
37568: LD_VAR 0 3
37572: PPUSH
37573: LD_VAR 0 4
37577: PPUSH
37578: LD_VAR 0 5
37582: PPUSH
37583: LD_VAR 0 1
37587: PPUSH
37588: CALL_OW 248
37592: PPUSH
37593: LD_INT 0
37595: PPUSH
37596: CALL 38088 0 6
37600: ST_TO_ADDR
// if not hexes then
37601: LD_VAR 0 12
37605: NOT
37606: IFFALSE 37610
// exit ;
37608: GO 38083
// hex := GetHexInfo ( x , y ) ;
37610: LD_ADDR_VAR 0 15
37614: PUSH
37615: LD_VAR 0 3
37619: PPUSH
37620: LD_VAR 0 4
37624: PPUSH
37625: CALL_OW 546
37629: ST_TO_ADDR
// if hex [ 1 ] then
37630: LD_VAR 0 15
37634: PUSH
37635: LD_INT 1
37637: ARRAY
37638: IFFALSE 37642
// exit ;
37640: GO 38083
// height := hex [ 2 ] ;
37642: LD_ADDR_VAR 0 13
37646: PUSH
37647: LD_VAR 0 15
37651: PUSH
37652: LD_INT 2
37654: ARRAY
37655: ST_TO_ADDR
// for i = 1 to hexes do
37656: LD_ADDR_VAR 0 7
37660: PUSH
37661: DOUBLE
37662: LD_INT 1
37664: DEC
37665: ST_TO_ADDR
37666: LD_VAR 0 12
37670: PUSH
37671: FOR_TO
37672: IFFALSE 38002
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37674: LD_VAR 0 12
37678: PUSH
37679: LD_VAR 0 7
37683: ARRAY
37684: PUSH
37685: LD_INT 1
37687: ARRAY
37688: PPUSH
37689: LD_VAR 0 12
37693: PUSH
37694: LD_VAR 0 7
37698: ARRAY
37699: PUSH
37700: LD_INT 2
37702: ARRAY
37703: PPUSH
37704: CALL_OW 488
37708: NOT
37709: PUSH
37710: LD_VAR 0 12
37714: PUSH
37715: LD_VAR 0 7
37719: ARRAY
37720: PUSH
37721: LD_INT 1
37723: ARRAY
37724: PPUSH
37725: LD_VAR 0 12
37729: PUSH
37730: LD_VAR 0 7
37734: ARRAY
37735: PUSH
37736: LD_INT 2
37738: ARRAY
37739: PPUSH
37740: CALL_OW 428
37744: PUSH
37745: LD_INT 0
37747: GREATER
37748: OR
37749: PUSH
37750: LD_VAR 0 12
37754: PUSH
37755: LD_VAR 0 7
37759: ARRAY
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: PPUSH
37765: LD_VAR 0 12
37769: PUSH
37770: LD_VAR 0 7
37774: ARRAY
37775: PUSH
37776: LD_INT 2
37778: ARRAY
37779: PPUSH
37780: CALL_OW 351
37784: OR
37785: IFFALSE 37791
// exit ;
37787: POP
37788: POP
37789: GO 38083
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37791: LD_ADDR_VAR 0 8
37795: PUSH
37796: LD_VAR 0 12
37800: PUSH
37801: LD_VAR 0 7
37805: ARRAY
37806: PUSH
37807: LD_INT 1
37809: ARRAY
37810: PPUSH
37811: LD_VAR 0 12
37815: PUSH
37816: LD_VAR 0 7
37820: ARRAY
37821: PUSH
37822: LD_INT 2
37824: ARRAY
37825: PPUSH
37826: CALL_OW 546
37830: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37831: LD_VAR 0 8
37835: PUSH
37836: LD_INT 1
37838: ARRAY
37839: PUSH
37840: LD_VAR 0 8
37844: PUSH
37845: LD_INT 2
37847: ARRAY
37848: PUSH
37849: LD_VAR 0 13
37853: PUSH
37854: LD_INT 2
37856: PLUS
37857: GREATER
37858: OR
37859: PUSH
37860: LD_VAR 0 8
37864: PUSH
37865: LD_INT 2
37867: ARRAY
37868: PUSH
37869: LD_VAR 0 13
37873: PUSH
37874: LD_INT 2
37876: MINUS
37877: LESS
37878: OR
37879: PUSH
37880: LD_VAR 0 8
37884: PUSH
37885: LD_INT 3
37887: ARRAY
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 8
37894: PUSH
37895: LD_INT 9
37897: PUSH
37898: LD_INT 10
37900: PUSH
37901: LD_INT 11
37903: PUSH
37904: LD_INT 12
37906: PUSH
37907: LD_INT 13
37909: PUSH
37910: LD_INT 16
37912: PUSH
37913: LD_INT 17
37915: PUSH
37916: LD_INT 18
37918: PUSH
37919: LD_INT 19
37921: PUSH
37922: LD_INT 20
37924: PUSH
37925: LD_INT 21
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: IN
37943: NOT
37944: OR
37945: PUSH
37946: LD_VAR 0 8
37950: PUSH
37951: LD_INT 5
37953: ARRAY
37954: NOT
37955: OR
37956: PUSH
37957: LD_VAR 0 8
37961: PUSH
37962: LD_INT 6
37964: ARRAY
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 7
37974: PUSH
37975: LD_INT 9
37977: PUSH
37978: LD_INT 10
37980: PUSH
37981: LD_INT 11
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: IN
37992: NOT
37993: OR
37994: IFFALSE 38000
// exit ;
37996: POP
37997: POP
37998: GO 38083
// end ;
38000: GO 37671
38002: POP
38003: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38004: LD_VAR 0 9
38008: PPUSH
38009: LD_VAR 0 3
38013: PPUSH
38014: LD_VAR 0 4
38018: PPUSH
38019: LD_INT 20
38021: PPUSH
38022: CALL 30029 0 4
38026: PUSH
38027: LD_INT 4
38029: ARRAY
38030: IFFALSE 38034
// exit ;
38032: GO 38083
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38034: LD_VAR 0 2
38038: PUSH
38039: LD_INT 29
38041: PUSH
38042: LD_INT 30
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: IN
38049: PUSH
38050: LD_VAR 0 3
38054: PPUSH
38055: LD_VAR 0 4
38059: PPUSH
38060: LD_VAR 0 9
38064: PPUSH
38065: CALL_OW 440
38069: NOT
38070: AND
38071: IFFALSE 38075
// exit ;
38073: GO 38083
// result := true ;
38075: LD_ADDR_VAR 0 6
38079: PUSH
38080: LD_INT 1
38082: ST_TO_ADDR
// end ;
38083: LD_VAR 0 6
38087: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38088: LD_INT 0
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
38095: PPUSH
38096: PPUSH
38097: PPUSH
38098: PPUSH
38099: PPUSH
38100: PPUSH
38101: PPUSH
38102: PPUSH
38103: PPUSH
38104: PPUSH
38105: PPUSH
38106: PPUSH
38107: PPUSH
38108: PPUSH
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
38126: PPUSH
38127: PPUSH
38128: PPUSH
38129: PPUSH
38130: PPUSH
38131: PPUSH
38132: PPUSH
38133: PPUSH
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
38147: PPUSH
// result = [ ] ;
38148: LD_ADDR_VAR 0 7
38152: PUSH
38153: EMPTY
38154: ST_TO_ADDR
// temp_list = [ ] ;
38155: LD_ADDR_VAR 0 9
38159: PUSH
38160: EMPTY
38161: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38162: LD_VAR 0 4
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: LD_INT 4
38181: PUSH
38182: LD_INT 5
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: IN
38193: NOT
38194: PUSH
38195: LD_VAR 0 1
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: IN
38210: PUSH
38211: LD_VAR 0 5
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: IN
38230: NOT
38231: AND
38232: OR
38233: IFFALSE 38237
// exit ;
38235: GO 56628
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38237: LD_VAR 0 1
38241: PUSH
38242: LD_INT 6
38244: PUSH
38245: LD_INT 7
38247: PUSH
38248: LD_INT 8
38250: PUSH
38251: LD_INT 13
38253: PUSH
38254: LD_INT 12
38256: PUSH
38257: LD_INT 15
38259: PUSH
38260: LD_INT 11
38262: PUSH
38263: LD_INT 14
38265: PUSH
38266: LD_INT 10
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: IN
38280: IFFALSE 38290
// btype = b_lab ;
38282: LD_ADDR_VAR 0 1
38286: PUSH
38287: LD_INT 6
38289: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38290: LD_VAR 0 6
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: IN
38309: NOT
38310: PUSH
38311: LD_VAR 0 1
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 3
38327: PUSH
38328: LD_INT 6
38330: PUSH
38331: LD_INT 36
38333: PUSH
38334: LD_INT 4
38336: PUSH
38337: LD_INT 5
38339: PUSH
38340: LD_INT 31
38342: PUSH
38343: LD_INT 32
38345: PUSH
38346: LD_INT 33
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: IN
38362: NOT
38363: PUSH
38364: LD_VAR 0 6
38368: PUSH
38369: LD_INT 1
38371: EQUAL
38372: AND
38373: OR
38374: PUSH
38375: LD_VAR 0 1
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 3
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: IN
38390: NOT
38391: PUSH
38392: LD_VAR 0 6
38396: PUSH
38397: LD_INT 2
38399: EQUAL
38400: AND
38401: OR
38402: IFFALSE 38412
// mode = 0 ;
38404: LD_ADDR_VAR 0 6
38408: PUSH
38409: LD_INT 0
38411: ST_TO_ADDR
// case mode of 0 :
38412: LD_VAR 0 6
38416: PUSH
38417: LD_INT 0
38419: DOUBLE
38420: EQUAL
38421: IFTRUE 38425
38423: GO 49878
38425: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38426: LD_ADDR_VAR 0 11
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38619: LD_ADDR_VAR 0 12
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 3
38776: NEG
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38815: LD_ADDR_VAR 0 13
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: LD_INT 2
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 3
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 3
38974: NEG
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 3
38986: NEG
38987: PUSH
38988: LD_INT 3
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39014: LD_ADDR_VAR 0 14
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: LD_INT 3
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39210: LD_ADDR_VAR 0 15
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: NEG
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 3
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39403: LD_ADDR_VAR 0 16
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 2
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 3
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 3
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39596: LD_ADDR_VAR 0 17
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39826: LD_ADDR_VAR 0 18
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40056: LD_ADDR_VAR 0 19
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40286: LD_ADDR_VAR 0 20
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40516: LD_ADDR_VAR 0 21
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40746: LD_ADDR_VAR 0 22
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40976: LD_ADDR_VAR 0 23
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: LD_INT 3
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 3
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41256: LD_ADDR_VAR 0 24
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41532: LD_ADDR_VAR 0 25
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 3
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41806: LD_ADDR_VAR 0 26
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42082: LD_ADDR_VAR 0 27
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 3
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 3
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42362: LD_ADDR_VAR 0 28
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 3
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: NEG
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 3
42609: NEG
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42644: LD_ADDR_VAR 0 29
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 3
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42923: LD_ADDR_VAR 0 30
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 3
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 3
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43201: LD_ADDR_VAR 0 31
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 3
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43479: LD_ADDR_VAR 0 32
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 3
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: NEG
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43757: LD_ADDR_VAR 0 33
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 3
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 3
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 3
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 3
44001: NEG
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44036: LD_ADDR_VAR 0 34
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 3
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 3
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44316: LD_ADDR_VAR 0 35
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44428: LD_ADDR_VAR 0 36
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44540: LD_ADDR_VAR 0 37
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44652: LD_ADDR_VAR 0 38
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44764: LD_ADDR_VAR 0 39
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44876: LD_ADDR_VAR 0 40
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44988: LD_ADDR_VAR 0 41
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 3
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 3
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 3
45285: NEG
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45338: LD_ADDR_VAR 0 42
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: LD_INT 3
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 3
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 3
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 3
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 3
45635: NEG
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 3
45647: NEG
45648: PUSH
45649: LD_INT 3
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45688: LD_ADDR_VAR 0 43
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 3
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 3
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 3
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46036: LD_ADDR_VAR 0 44
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 3
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46386: LD_ADDR_VAR 0 45
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 3
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 3
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46736: LD_ADDR_VAR 0 46
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47084: LD_ADDR_VAR 0 47
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47235: LD_ADDR_VAR 0 48
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47382: LD_ADDR_VAR 0 49
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47526: LD_ADDR_VAR 0 50
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47670: LD_ADDR_VAR 0 51
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47817: LD_ADDR_VAR 0 52
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47968: LD_ADDR_VAR 0 53
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48198: LD_ADDR_VAR 0 54
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48428: LD_ADDR_VAR 0 55
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48658: LD_ADDR_VAR 0 56
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 2
48834: NEG
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48888: LD_ADDR_VAR 0 57
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49118: LD_ADDR_VAR 0 58
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49348: LD_ADDR_VAR 0 59
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49436: LD_ADDR_VAR 0 60
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49524: LD_ADDR_VAR 0 61
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49612: LD_ADDR_VAR 0 62
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49700: LD_ADDR_VAR 0 63
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49788: LD_ADDR_VAR 0 64
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: ST_TO_ADDR
// end ; 1 :
49876: GO 55773
49878: LD_INT 1
49880: DOUBLE
49881: EQUAL
49882: IFTRUE 49886
49884: GO 52509
49886: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49887: LD_ADDR_VAR 0 11
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 3
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49931: LD_ADDR_VAR 0 12
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49972: LD_ADDR_VAR 0 13
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50012: LD_ADDR_VAR 0 14
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 3
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: LIST
50052: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50053: LD_ADDR_VAR 0 15
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 3
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50097: LD_ADDR_VAR 0 16
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50143: LD_ADDR_VAR 0 17
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50187: LD_ADDR_VAR 0 18
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50228: LD_ADDR_VAR 0 19
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: LD_INT 3
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 3
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50268: LD_ADDR_VAR 0 20
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 3
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 3
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50309: LD_ADDR_VAR 0 21
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: NEG
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50353: LD_ADDR_VAR 0 22
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: NEG
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 3
50384: NEG
50385: PUSH
50386: LD_INT 3
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50399: LD_ADDR_VAR 0 23
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 4
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 3
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50443: LD_ADDR_VAR 0 24
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 4
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50484: LD_ADDR_VAR 0 25
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 4
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 3
50511: PUSH
50512: LD_INT 4
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: LIST
50523: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50524: LD_ADDR_VAR 0 26
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 4
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50565: LD_ADDR_VAR 0 27
50569: PUSH
50570: LD_INT 3
50572: NEG
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 4
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50609: LD_ADDR_VAR 0 28
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: LD_INT 3
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: LD_INT 4
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 4
50640: NEG
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50655: LD_ADDR_VAR 0 29
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 3
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 4
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 4
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 5
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 5
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 6
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 6
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 5
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50810: LD_ADDR_VAR 0 30
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 4
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 5
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 5
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 5
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 6
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 6
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50953: LD_ADDR_VAR 0 31
50957: PUSH
50958: LD_INT 3
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 4
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 4
51000: PUSH
51001: LD_INT 4
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: LD_INT 4
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 5
51020: PUSH
51021: LD_INT 4
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 5
51030: PUSH
51031: LD_INT 5
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 4
51040: PUSH
51041: LD_INT 5
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 6
51050: PUSH
51051: LD_INT 5
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 6
51060: PUSH
51061: LD_INT 6
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 5
51070: PUSH
51071: LD_INT 6
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51092: LD_ADDR_VAR 0 32
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 4
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 4
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 3
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 5
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 5
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 4
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 6
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 6
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 5
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51235: LD_ADDR_VAR 0 33
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 3
51253: NEG
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 4
51287: NEG
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 4
51298: NEG
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 4
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 5
51321: NEG
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 5
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 5
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 6
51355: NEG
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 6
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51390: LD_ADDR_VAR 0 34
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: LD_INT 4
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 4
51445: NEG
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 4
51457: NEG
51458: PUSH
51459: LD_INT 4
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: LD_INT 5
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 5
51481: NEG
51482: PUSH
51483: LD_INT 4
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 5
51493: NEG
51494: PUSH
51495: LD_INT 5
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 5
51505: NEG
51506: PUSH
51507: LD_INT 6
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 6
51517: NEG
51518: PUSH
51519: LD_INT 5
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 6
51529: NEG
51530: PUSH
51531: LD_INT 6
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51553: LD_ADDR_VAR 0 41
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51597: LD_ADDR_VAR 0 42
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51638: LD_ADDR_VAR 0 43
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51678: LD_ADDR_VAR 0 44
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51719: LD_ADDR_VAR 0 45
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51763: LD_ADDR_VAR 0 46
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 3
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51809: LD_ADDR_VAR 0 47
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51842: LD_ADDR_VAR 0 48
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51873: LD_ADDR_VAR 0 49
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51902: LD_ADDR_VAR 0 50
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51931: LD_ADDR_VAR 0 51
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51962: LD_ADDR_VAR 0 52
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51995: LD_ADDR_VAR 0 53
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52039: LD_ADDR_VAR 0 54
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52080: LD_ADDR_VAR 0 55
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52120: LD_ADDR_VAR 0 56
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52161: LD_ADDR_VAR 0 57
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52205: LD_ADDR_VAR 0 58
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52251: LD_ADDR_VAR 0 59
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52295: LD_ADDR_VAR 0 60
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52336: LD_ADDR_VAR 0 61
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52376: LD_ADDR_VAR 0 62
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52417: LD_ADDR_VAR 0 63
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52461: LD_ADDR_VAR 0 64
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: ST_TO_ADDR
// end ; 2 :
52507: GO 55773
52509: LD_INT 2
52511: DOUBLE
52512: EQUAL
52513: IFTRUE 52517
52515: GO 55772
52517: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52518: LD_ADDR_VAR 0 29
52522: PUSH
52523: LD_INT 4
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 4
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 5
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 5
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 4
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 3
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 3
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 4
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 4
52648: PUSH
52649: LD_INT 4
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 3
52658: PUSH
52659: LD_INT 4
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 4
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 4
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 4
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 5
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 5
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 4
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: LD_INT 5
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 3
52801: NEG
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 4
52857: NEG
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 4
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 4
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 4
52903: NEG
52904: PUSH
52905: LD_INT 4
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 4
52915: NEG
52916: PUSH
52917: LD_INT 5
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: LD_INT 4
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: NEG
52940: PUSH
52941: LD_INT 3
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 4
52951: NEG
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 5
52963: NEG
52964: PUSH
52965: LD_INT 4
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 5
52975: NEG
52976: PUSH
52977: LD_INT 5
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 3
52987: NEG
52988: PUSH
52989: LD_INT 5
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 5
52999: NEG
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53056: LD_ADDR_VAR 0 30
53060: PUSH
53061: LD_INT 4
53063: PUSH
53064: LD_INT 4
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 4
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 5
53083: PUSH
53084: LD_INT 4
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 5
53093: PUSH
53094: LD_INT 5
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 4
53103: PUSH
53104: LD_INT 5
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: LD_INT 4
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 5
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 5
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 3
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 4
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 4
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 4
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: NEG
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 5
53302: NEG
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 5
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 5
53325: NEG
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: NEG
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: LD_INT 4
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 3
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 4
53420: NEG
53421: PUSH
53422: LD_INT 4
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 4
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 4
53444: NEG
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 4
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 5
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 4
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 4
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 5
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 5
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53603: LD_ADDR_VAR 0 31
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 4
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 4
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 5
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 5
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: LD_INT 5
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 4
53759: NEG
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: NEG
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 4
53782: NEG
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 4
53805: NEG
53806: PUSH
53807: LD_INT 4
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 4
53817: NEG
53818: PUSH
53819: LD_INT 5
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 4
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 4
53853: NEG
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 5
53865: NEG
53866: PUSH
53867: LD_INT 4
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 5
53877: NEG
53878: PUSH
53879: LD_INT 5
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: NEG
53890: PUSH
53891: LD_INT 5
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 5
53901: NEG
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 4
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 4
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 5
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 5
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 4
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 3
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 5
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54153: LD_ADDR_VAR 0 32
54157: PUSH
54158: LD_INT 4
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 4
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 3
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 4
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 5
54216: NEG
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 5
54227: NEG
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 5
54239: NEG
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: LD_INT 3
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 3
54274: NEG
54275: PUSH
54276: LD_INT 4
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 4
54322: NEG
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 4
54334: NEG
54335: PUSH
54336: LD_INT 4
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 4
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 4
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 5
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 4
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: LD_INT 4
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 5
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 5
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 3
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 4
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 4
54565: PUSH
54566: LD_INT 4
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 5
54585: PUSH
54586: LD_INT 4
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 5
54595: PUSH
54596: LD_INT 5
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 4
54605: PUSH
54606: LD_INT 5
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: PUSH
54616: LD_INT 4
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 3
54625: PUSH
54626: LD_INT 3
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 5
54635: PUSH
54636: LD_INT 3
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 5
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54700: LD_ADDR_VAR 0 33
54704: PUSH
54705: LD_INT 4
54707: NEG
54708: PUSH
54709: LD_INT 4
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: LD_INT 5
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 3
54731: NEG
54732: PUSH
54733: LD_INT 4
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 4
54755: NEG
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 5
54767: NEG
54768: PUSH
54769: LD_INT 4
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 5
54779: NEG
54780: PUSH
54781: LD_INT 5
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 5
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 5
54803: NEG
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 4
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 4
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 4
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 5
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 5
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 4
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 3
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 5
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 4
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 4
55040: PUSH
55041: LD_INT 4
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: PUSH
55051: LD_INT 4
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 4
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 4
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 4
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 5
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 5
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 4
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 5
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55238: LD_ADDR_VAR 0 34
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 4
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 5
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 4
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: LD_INT 3
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 4
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 5
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 3
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 5
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 4
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 2
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 4
55440: PUSH
55441: LD_INT 4
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 4
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 5
55460: PUSH
55461: LD_INT 4
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 5
55470: PUSH
55471: LD_INT 5
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 4
55480: PUSH
55481: LD_INT 5
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: LD_INT 4
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 5
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: LD_INT 5
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 3
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 4
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 4
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 4
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 4
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 4
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 4
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 5
55679: NEG
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 5
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 5
55702: NEG
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 3
55714: NEG
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// end ; end ;
55770: GO 55773
55772: POP
// case btype of b_depot , b_warehouse :
55773: LD_VAR 0 1
55777: PUSH
55778: LD_INT 0
55780: DOUBLE
55781: EQUAL
55782: IFTRUE 55792
55784: LD_INT 1
55786: DOUBLE
55787: EQUAL
55788: IFTRUE 55792
55790: GO 55993
55792: POP
// case nation of nation_american :
55793: LD_VAR 0 5
55797: PUSH
55798: LD_INT 1
55800: DOUBLE
55801: EQUAL
55802: IFTRUE 55806
55804: GO 55862
55806: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55807: LD_ADDR_VAR 0 9
55811: PUSH
55812: LD_VAR 0 11
55816: PUSH
55817: LD_VAR 0 12
55821: PUSH
55822: LD_VAR 0 13
55826: PUSH
55827: LD_VAR 0 14
55831: PUSH
55832: LD_VAR 0 15
55836: PUSH
55837: LD_VAR 0 16
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: PUSH
55850: LD_VAR 0 4
55854: PUSH
55855: LD_INT 1
55857: PLUS
55858: ARRAY
55859: ST_TO_ADDR
55860: GO 55991
55862: LD_INT 2
55864: DOUBLE
55865: EQUAL
55866: IFTRUE 55870
55868: GO 55926
55870: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55871: LD_ADDR_VAR 0 9
55875: PUSH
55876: LD_VAR 0 17
55880: PUSH
55881: LD_VAR 0 18
55885: PUSH
55886: LD_VAR 0 19
55890: PUSH
55891: LD_VAR 0 20
55895: PUSH
55896: LD_VAR 0 21
55900: PUSH
55901: LD_VAR 0 22
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: PUSH
55914: LD_VAR 0 4
55918: PUSH
55919: LD_INT 1
55921: PLUS
55922: ARRAY
55923: ST_TO_ADDR
55924: GO 55991
55926: LD_INT 3
55928: DOUBLE
55929: EQUAL
55930: IFTRUE 55934
55932: GO 55990
55934: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55935: LD_ADDR_VAR 0 9
55939: PUSH
55940: LD_VAR 0 23
55944: PUSH
55945: LD_VAR 0 24
55949: PUSH
55950: LD_VAR 0 25
55954: PUSH
55955: LD_VAR 0 26
55959: PUSH
55960: LD_VAR 0 27
55964: PUSH
55965: LD_VAR 0 28
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: PUSH
55978: LD_VAR 0 4
55982: PUSH
55983: LD_INT 1
55985: PLUS
55986: ARRAY
55987: ST_TO_ADDR
55988: GO 55991
55990: POP
55991: GO 56546
55993: LD_INT 2
55995: DOUBLE
55996: EQUAL
55997: IFTRUE 56007
55999: LD_INT 3
56001: DOUBLE
56002: EQUAL
56003: IFTRUE 56007
56005: GO 56063
56007: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56008: LD_ADDR_VAR 0 9
56012: PUSH
56013: LD_VAR 0 29
56017: PUSH
56018: LD_VAR 0 30
56022: PUSH
56023: LD_VAR 0 31
56027: PUSH
56028: LD_VAR 0 32
56032: PUSH
56033: LD_VAR 0 33
56037: PUSH
56038: LD_VAR 0 34
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: PUSH
56051: LD_VAR 0 4
56055: PUSH
56056: LD_INT 1
56058: PLUS
56059: ARRAY
56060: ST_TO_ADDR
56061: GO 56546
56063: LD_INT 16
56065: DOUBLE
56066: EQUAL
56067: IFTRUE 56125
56069: LD_INT 17
56071: DOUBLE
56072: EQUAL
56073: IFTRUE 56125
56075: LD_INT 18
56077: DOUBLE
56078: EQUAL
56079: IFTRUE 56125
56081: LD_INT 19
56083: DOUBLE
56084: EQUAL
56085: IFTRUE 56125
56087: LD_INT 22
56089: DOUBLE
56090: EQUAL
56091: IFTRUE 56125
56093: LD_INT 20
56095: DOUBLE
56096: EQUAL
56097: IFTRUE 56125
56099: LD_INT 21
56101: DOUBLE
56102: EQUAL
56103: IFTRUE 56125
56105: LD_INT 23
56107: DOUBLE
56108: EQUAL
56109: IFTRUE 56125
56111: LD_INT 24
56113: DOUBLE
56114: EQUAL
56115: IFTRUE 56125
56117: LD_INT 25
56119: DOUBLE
56120: EQUAL
56121: IFTRUE 56125
56123: GO 56181
56125: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56126: LD_ADDR_VAR 0 9
56130: PUSH
56131: LD_VAR 0 35
56135: PUSH
56136: LD_VAR 0 36
56140: PUSH
56141: LD_VAR 0 37
56145: PUSH
56146: LD_VAR 0 38
56150: PUSH
56151: LD_VAR 0 39
56155: PUSH
56156: LD_VAR 0 40
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: PUSH
56169: LD_VAR 0 4
56173: PUSH
56174: LD_INT 1
56176: PLUS
56177: ARRAY
56178: ST_TO_ADDR
56179: GO 56546
56181: LD_INT 6
56183: DOUBLE
56184: EQUAL
56185: IFTRUE 56237
56187: LD_INT 7
56189: DOUBLE
56190: EQUAL
56191: IFTRUE 56237
56193: LD_INT 8
56195: DOUBLE
56196: EQUAL
56197: IFTRUE 56237
56199: LD_INT 13
56201: DOUBLE
56202: EQUAL
56203: IFTRUE 56237
56205: LD_INT 12
56207: DOUBLE
56208: EQUAL
56209: IFTRUE 56237
56211: LD_INT 15
56213: DOUBLE
56214: EQUAL
56215: IFTRUE 56237
56217: LD_INT 11
56219: DOUBLE
56220: EQUAL
56221: IFTRUE 56237
56223: LD_INT 14
56225: DOUBLE
56226: EQUAL
56227: IFTRUE 56237
56229: LD_INT 10
56231: DOUBLE
56232: EQUAL
56233: IFTRUE 56237
56235: GO 56293
56237: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56238: LD_ADDR_VAR 0 9
56242: PUSH
56243: LD_VAR 0 41
56247: PUSH
56248: LD_VAR 0 42
56252: PUSH
56253: LD_VAR 0 43
56257: PUSH
56258: LD_VAR 0 44
56262: PUSH
56263: LD_VAR 0 45
56267: PUSH
56268: LD_VAR 0 46
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: PUSH
56281: LD_VAR 0 4
56285: PUSH
56286: LD_INT 1
56288: PLUS
56289: ARRAY
56290: ST_TO_ADDR
56291: GO 56546
56293: LD_INT 36
56295: DOUBLE
56296: EQUAL
56297: IFTRUE 56301
56299: GO 56357
56301: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56302: LD_ADDR_VAR 0 9
56306: PUSH
56307: LD_VAR 0 47
56311: PUSH
56312: LD_VAR 0 48
56316: PUSH
56317: LD_VAR 0 49
56321: PUSH
56322: LD_VAR 0 50
56326: PUSH
56327: LD_VAR 0 51
56331: PUSH
56332: LD_VAR 0 52
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: PUSH
56345: LD_VAR 0 4
56349: PUSH
56350: LD_INT 1
56352: PLUS
56353: ARRAY
56354: ST_TO_ADDR
56355: GO 56546
56357: LD_INT 4
56359: DOUBLE
56360: EQUAL
56361: IFTRUE 56383
56363: LD_INT 5
56365: DOUBLE
56366: EQUAL
56367: IFTRUE 56383
56369: LD_INT 34
56371: DOUBLE
56372: EQUAL
56373: IFTRUE 56383
56375: LD_INT 37
56377: DOUBLE
56378: EQUAL
56379: IFTRUE 56383
56381: GO 56439
56383: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56384: LD_ADDR_VAR 0 9
56388: PUSH
56389: LD_VAR 0 53
56393: PUSH
56394: LD_VAR 0 54
56398: PUSH
56399: LD_VAR 0 55
56403: PUSH
56404: LD_VAR 0 56
56408: PUSH
56409: LD_VAR 0 57
56413: PUSH
56414: LD_VAR 0 58
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: PUSH
56427: LD_VAR 0 4
56431: PUSH
56432: LD_INT 1
56434: PLUS
56435: ARRAY
56436: ST_TO_ADDR
56437: GO 56546
56439: LD_INT 31
56441: DOUBLE
56442: EQUAL
56443: IFTRUE 56489
56445: LD_INT 32
56447: DOUBLE
56448: EQUAL
56449: IFTRUE 56489
56451: LD_INT 33
56453: DOUBLE
56454: EQUAL
56455: IFTRUE 56489
56457: LD_INT 27
56459: DOUBLE
56460: EQUAL
56461: IFTRUE 56489
56463: LD_INT 26
56465: DOUBLE
56466: EQUAL
56467: IFTRUE 56489
56469: LD_INT 28
56471: DOUBLE
56472: EQUAL
56473: IFTRUE 56489
56475: LD_INT 29
56477: DOUBLE
56478: EQUAL
56479: IFTRUE 56489
56481: LD_INT 30
56483: DOUBLE
56484: EQUAL
56485: IFTRUE 56489
56487: GO 56545
56489: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56490: LD_ADDR_VAR 0 9
56494: PUSH
56495: LD_VAR 0 59
56499: PUSH
56500: LD_VAR 0 60
56504: PUSH
56505: LD_VAR 0 61
56509: PUSH
56510: LD_VAR 0 62
56514: PUSH
56515: LD_VAR 0 63
56519: PUSH
56520: LD_VAR 0 64
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: PUSH
56533: LD_VAR 0 4
56537: PUSH
56538: LD_INT 1
56540: PLUS
56541: ARRAY
56542: ST_TO_ADDR
56543: GO 56546
56545: POP
// temp_list2 = [ ] ;
56546: LD_ADDR_VAR 0 10
56550: PUSH
56551: EMPTY
56552: ST_TO_ADDR
// for i in temp_list do
56553: LD_ADDR_VAR 0 8
56557: PUSH
56558: LD_VAR 0 9
56562: PUSH
56563: FOR_IN
56564: IFFALSE 56616
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56566: LD_ADDR_VAR 0 10
56570: PUSH
56571: LD_VAR 0 10
56575: PUSH
56576: LD_VAR 0 8
56580: PUSH
56581: LD_INT 1
56583: ARRAY
56584: PUSH
56585: LD_VAR 0 2
56589: PLUS
56590: PUSH
56591: LD_VAR 0 8
56595: PUSH
56596: LD_INT 2
56598: ARRAY
56599: PUSH
56600: LD_VAR 0 3
56604: PLUS
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: EMPTY
56611: LIST
56612: ADD
56613: ST_TO_ADDR
56614: GO 56563
56616: POP
56617: POP
// result = temp_list2 ;
56618: LD_ADDR_VAR 0 7
56622: PUSH
56623: LD_VAR 0 10
56627: ST_TO_ADDR
// end ;
56628: LD_VAR 0 7
56632: RET
// export function EnemyInRange ( unit , dist ) ; begin
56633: LD_INT 0
56635: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56636: LD_ADDR_VAR 0 3
56640: PUSH
56641: LD_VAR 0 1
56645: PPUSH
56646: CALL_OW 255
56650: PPUSH
56651: LD_VAR 0 1
56655: PPUSH
56656: CALL_OW 250
56660: PPUSH
56661: LD_VAR 0 1
56665: PPUSH
56666: CALL_OW 251
56670: PPUSH
56671: LD_VAR 0 2
56675: PPUSH
56676: CALL 30029 0 4
56680: PUSH
56681: LD_INT 4
56683: ARRAY
56684: ST_TO_ADDR
// end ;
56685: LD_VAR 0 3
56689: RET
// export function PlayerSeeMe ( unit ) ; begin
56690: LD_INT 0
56692: PPUSH
// result := See ( your_side , unit ) ;
56693: LD_ADDR_VAR 0 2
56697: PUSH
56698: LD_OWVAR 2
56702: PPUSH
56703: LD_VAR 0 1
56707: PPUSH
56708: CALL_OW 292
56712: ST_TO_ADDR
// end ;
56713: LD_VAR 0 2
56717: RET
// export function ReverseDir ( unit ) ; begin
56718: LD_INT 0
56720: PPUSH
// if not unit then
56721: LD_VAR 0 1
56725: NOT
56726: IFFALSE 56730
// exit ;
56728: GO 56753
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56730: LD_ADDR_VAR 0 2
56734: PUSH
56735: LD_VAR 0 1
56739: PPUSH
56740: CALL_OW 254
56744: PUSH
56745: LD_INT 3
56747: PLUS
56748: PUSH
56749: LD_INT 6
56751: MOD
56752: ST_TO_ADDR
// end ;
56753: LD_VAR 0 2
56757: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56758: LD_INT 0
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
// if not hexes then
56765: LD_VAR 0 2
56769: NOT
56770: IFFALSE 56774
// exit ;
56772: GO 56922
// dist := 9999 ;
56774: LD_ADDR_VAR 0 5
56778: PUSH
56779: LD_INT 9999
56781: ST_TO_ADDR
// for i = 1 to hexes do
56782: LD_ADDR_VAR 0 4
56786: PUSH
56787: DOUBLE
56788: LD_INT 1
56790: DEC
56791: ST_TO_ADDR
56792: LD_VAR 0 2
56796: PUSH
56797: FOR_TO
56798: IFFALSE 56910
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56800: LD_VAR 0 1
56804: PPUSH
56805: LD_VAR 0 2
56809: PUSH
56810: LD_VAR 0 4
56814: ARRAY
56815: PUSH
56816: LD_INT 1
56818: ARRAY
56819: PPUSH
56820: LD_VAR 0 2
56824: PUSH
56825: LD_VAR 0 4
56829: ARRAY
56830: PUSH
56831: LD_INT 2
56833: ARRAY
56834: PPUSH
56835: CALL_OW 297
56839: PUSH
56840: LD_VAR 0 5
56844: LESS
56845: IFFALSE 56908
// begin hex := hexes [ i ] ;
56847: LD_ADDR_VAR 0 7
56851: PUSH
56852: LD_VAR 0 2
56856: PUSH
56857: LD_VAR 0 4
56861: ARRAY
56862: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56863: LD_ADDR_VAR 0 5
56867: PUSH
56868: LD_VAR 0 1
56872: PPUSH
56873: LD_VAR 0 2
56877: PUSH
56878: LD_VAR 0 4
56882: ARRAY
56883: PUSH
56884: LD_INT 1
56886: ARRAY
56887: PPUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_VAR 0 4
56897: ARRAY
56898: PUSH
56899: LD_INT 2
56901: ARRAY
56902: PPUSH
56903: CALL_OW 297
56907: ST_TO_ADDR
// end ; end ;
56908: GO 56797
56910: POP
56911: POP
// result := hex ;
56912: LD_ADDR_VAR 0 3
56916: PUSH
56917: LD_VAR 0 7
56921: ST_TO_ADDR
// end ;
56922: LD_VAR 0 3
56926: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56927: LD_INT 0
56929: PPUSH
56930: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56931: LD_VAR 0 1
56935: NOT
56936: PUSH
56937: LD_VAR 0 1
56941: PUSH
56942: LD_INT 21
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 23
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PPUSH
56966: CALL_OW 69
56970: IN
56971: NOT
56972: OR
56973: IFFALSE 56977
// exit ;
56975: GO 57024
// for i = 1 to 3 do
56977: LD_ADDR_VAR 0 3
56981: PUSH
56982: DOUBLE
56983: LD_INT 1
56985: DEC
56986: ST_TO_ADDR
56987: LD_INT 3
56989: PUSH
56990: FOR_TO
56991: IFFALSE 57022
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56993: LD_VAR 0 1
56997: PPUSH
56998: CALL_OW 250
57002: PPUSH
57003: LD_VAR 0 1
57007: PPUSH
57008: CALL_OW 251
57012: PPUSH
57013: LD_INT 1
57015: PPUSH
57016: CALL_OW 453
57020: GO 56990
57022: POP
57023: POP
// end ;
57024: LD_VAR 0 2
57028: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57029: LD_INT 0
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
57035: PPUSH
57036: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57037: LD_VAR 0 1
57041: NOT
57042: PUSH
57043: LD_VAR 0 2
57047: NOT
57048: OR
57049: PUSH
57050: LD_VAR 0 1
57054: PPUSH
57055: CALL_OW 314
57059: OR
57060: IFFALSE 57064
// exit ;
57062: GO 57505
// x := GetX ( enemy_unit ) ;
57064: LD_ADDR_VAR 0 7
57068: PUSH
57069: LD_VAR 0 2
57073: PPUSH
57074: CALL_OW 250
57078: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57079: LD_ADDR_VAR 0 8
57083: PUSH
57084: LD_VAR 0 2
57088: PPUSH
57089: CALL_OW 251
57093: ST_TO_ADDR
// if not x or not y then
57094: LD_VAR 0 7
57098: NOT
57099: PUSH
57100: LD_VAR 0 8
57104: NOT
57105: OR
57106: IFFALSE 57110
// exit ;
57108: GO 57505
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57110: LD_ADDR_VAR 0 6
57114: PUSH
57115: LD_VAR 0 7
57119: PPUSH
57120: LD_INT 0
57122: PPUSH
57123: LD_INT 4
57125: PPUSH
57126: CALL_OW 272
57130: PUSH
57131: LD_VAR 0 8
57135: PPUSH
57136: LD_INT 0
57138: PPUSH
57139: LD_INT 4
57141: PPUSH
57142: CALL_OW 273
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_VAR 0 7
57155: PPUSH
57156: LD_INT 1
57158: PPUSH
57159: LD_INT 4
57161: PPUSH
57162: CALL_OW 272
57166: PUSH
57167: LD_VAR 0 8
57171: PPUSH
57172: LD_INT 1
57174: PPUSH
57175: LD_INT 4
57177: PPUSH
57178: CALL_OW 273
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_VAR 0 7
57191: PPUSH
57192: LD_INT 2
57194: PPUSH
57195: LD_INT 4
57197: PPUSH
57198: CALL_OW 272
57202: PUSH
57203: LD_VAR 0 8
57207: PPUSH
57208: LD_INT 2
57210: PPUSH
57211: LD_INT 4
57213: PPUSH
57214: CALL_OW 273
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_VAR 0 7
57227: PPUSH
57228: LD_INT 3
57230: PPUSH
57231: LD_INT 4
57233: PPUSH
57234: CALL_OW 272
57238: PUSH
57239: LD_VAR 0 8
57243: PPUSH
57244: LD_INT 3
57246: PPUSH
57247: LD_INT 4
57249: PPUSH
57250: CALL_OW 273
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_VAR 0 7
57263: PPUSH
57264: LD_INT 4
57266: PPUSH
57267: LD_INT 4
57269: PPUSH
57270: CALL_OW 272
57274: PUSH
57275: LD_VAR 0 8
57279: PPUSH
57280: LD_INT 4
57282: PPUSH
57283: LD_INT 4
57285: PPUSH
57286: CALL_OW 273
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_VAR 0 7
57299: PPUSH
57300: LD_INT 5
57302: PPUSH
57303: LD_INT 4
57305: PPUSH
57306: CALL_OW 272
57310: PUSH
57311: LD_VAR 0 8
57315: PPUSH
57316: LD_INT 5
57318: PPUSH
57319: LD_INT 4
57321: PPUSH
57322: CALL_OW 273
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// for i = tmp downto 1 do
57339: LD_ADDR_VAR 0 4
57343: PUSH
57344: DOUBLE
57345: LD_VAR 0 6
57349: INC
57350: ST_TO_ADDR
57351: LD_INT 1
57353: PUSH
57354: FOR_DOWNTO
57355: IFFALSE 57456
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57357: LD_VAR 0 6
57361: PUSH
57362: LD_VAR 0 4
57366: ARRAY
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PPUSH
57372: LD_VAR 0 6
57376: PUSH
57377: LD_VAR 0 4
57381: ARRAY
57382: PUSH
57383: LD_INT 2
57385: ARRAY
57386: PPUSH
57387: CALL_OW 488
57391: NOT
57392: PUSH
57393: LD_VAR 0 6
57397: PUSH
57398: LD_VAR 0 4
57402: ARRAY
57403: PUSH
57404: LD_INT 1
57406: ARRAY
57407: PPUSH
57408: LD_VAR 0 6
57412: PUSH
57413: LD_VAR 0 4
57417: ARRAY
57418: PUSH
57419: LD_INT 2
57421: ARRAY
57422: PPUSH
57423: CALL_OW 428
57427: PUSH
57428: LD_INT 0
57430: NONEQUAL
57431: OR
57432: IFFALSE 57454
// tmp := Delete ( tmp , i ) ;
57434: LD_ADDR_VAR 0 6
57438: PUSH
57439: LD_VAR 0 6
57443: PPUSH
57444: LD_VAR 0 4
57448: PPUSH
57449: CALL_OW 3
57453: ST_TO_ADDR
57454: GO 57354
57456: POP
57457: POP
// j := GetClosestHex ( unit , tmp ) ;
57458: LD_ADDR_VAR 0 5
57462: PUSH
57463: LD_VAR 0 1
57467: PPUSH
57468: LD_VAR 0 6
57472: PPUSH
57473: CALL 56758 0 2
57477: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57478: LD_VAR 0 1
57482: PPUSH
57483: LD_VAR 0 5
57487: PUSH
57488: LD_INT 1
57490: ARRAY
57491: PPUSH
57492: LD_VAR 0 5
57496: PUSH
57497: LD_INT 2
57499: ARRAY
57500: PPUSH
57501: CALL_OW 111
// end ;
57505: LD_VAR 0 3
57509: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57510: LD_INT 0
57512: PPUSH
57513: PPUSH
57514: PPUSH
// uc_side = 0 ;
57515: LD_ADDR_OWVAR 20
57519: PUSH
57520: LD_INT 0
57522: ST_TO_ADDR
// uc_nation = 0 ;
57523: LD_ADDR_OWVAR 21
57527: PUSH
57528: LD_INT 0
57530: ST_TO_ADDR
// InitHc_All ( ) ;
57531: CALL_OW 584
// InitVc ;
57535: CALL_OW 20
// if mastodonts then
57539: LD_VAR 0 6
57543: IFFALSE 57610
// for i = 1 to mastodonts do
57545: LD_ADDR_VAR 0 11
57549: PUSH
57550: DOUBLE
57551: LD_INT 1
57553: DEC
57554: ST_TO_ADDR
57555: LD_VAR 0 6
57559: PUSH
57560: FOR_TO
57561: IFFALSE 57608
// begin vc_chassis := 31 ;
57563: LD_ADDR_OWVAR 37
57567: PUSH
57568: LD_INT 31
57570: ST_TO_ADDR
// vc_control := control_rider ;
57571: LD_ADDR_OWVAR 38
57575: PUSH
57576: LD_INT 4
57578: ST_TO_ADDR
// animal := CreateVehicle ;
57579: LD_ADDR_VAR 0 12
57583: PUSH
57584: CALL_OW 45
57588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57589: LD_VAR 0 12
57593: PPUSH
57594: LD_VAR 0 8
57598: PPUSH
57599: LD_INT 0
57601: PPUSH
57602: CALL 59798 0 3
// end ;
57606: GO 57560
57608: POP
57609: POP
// if horses then
57610: LD_VAR 0 5
57614: IFFALSE 57681
// for i = 1 to horses do
57616: LD_ADDR_VAR 0 11
57620: PUSH
57621: DOUBLE
57622: LD_INT 1
57624: DEC
57625: ST_TO_ADDR
57626: LD_VAR 0 5
57630: PUSH
57631: FOR_TO
57632: IFFALSE 57679
// begin hc_class := 21 ;
57634: LD_ADDR_OWVAR 28
57638: PUSH
57639: LD_INT 21
57641: ST_TO_ADDR
// hc_gallery :=  ;
57642: LD_ADDR_OWVAR 33
57646: PUSH
57647: LD_STRING 
57649: ST_TO_ADDR
// animal := CreateHuman ;
57650: LD_ADDR_VAR 0 12
57654: PUSH
57655: CALL_OW 44
57659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57660: LD_VAR 0 12
57664: PPUSH
57665: LD_VAR 0 8
57669: PPUSH
57670: LD_INT 0
57672: PPUSH
57673: CALL 59798 0 3
// end ;
57677: GO 57631
57679: POP
57680: POP
// if birds then
57681: LD_VAR 0 1
57685: IFFALSE 57752
// for i = 1 to birds do
57687: LD_ADDR_VAR 0 11
57691: PUSH
57692: DOUBLE
57693: LD_INT 1
57695: DEC
57696: ST_TO_ADDR
57697: LD_VAR 0 1
57701: PUSH
57702: FOR_TO
57703: IFFALSE 57750
// begin hc_class = 18 ;
57705: LD_ADDR_OWVAR 28
57709: PUSH
57710: LD_INT 18
57712: ST_TO_ADDR
// hc_gallery =  ;
57713: LD_ADDR_OWVAR 33
57717: PUSH
57718: LD_STRING 
57720: ST_TO_ADDR
// animal := CreateHuman ;
57721: LD_ADDR_VAR 0 12
57725: PUSH
57726: CALL_OW 44
57730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57731: LD_VAR 0 12
57735: PPUSH
57736: LD_VAR 0 8
57740: PPUSH
57741: LD_INT 0
57743: PPUSH
57744: CALL 59798 0 3
// end ;
57748: GO 57702
57750: POP
57751: POP
// if tigers then
57752: LD_VAR 0 2
57756: IFFALSE 57840
// for i = 1 to tigers do
57758: LD_ADDR_VAR 0 11
57762: PUSH
57763: DOUBLE
57764: LD_INT 1
57766: DEC
57767: ST_TO_ADDR
57768: LD_VAR 0 2
57772: PUSH
57773: FOR_TO
57774: IFFALSE 57838
// begin hc_class = class_tiger ;
57776: LD_ADDR_OWVAR 28
57780: PUSH
57781: LD_INT 14
57783: ST_TO_ADDR
// hc_gallery =  ;
57784: LD_ADDR_OWVAR 33
57788: PUSH
57789: LD_STRING 
57791: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57792: LD_ADDR_OWVAR 35
57796: PUSH
57797: LD_INT 7
57799: NEG
57800: PPUSH
57801: LD_INT 7
57803: PPUSH
57804: CALL_OW 12
57808: ST_TO_ADDR
// animal := CreateHuman ;
57809: LD_ADDR_VAR 0 12
57813: PUSH
57814: CALL_OW 44
57818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57819: LD_VAR 0 12
57823: PPUSH
57824: LD_VAR 0 8
57828: PPUSH
57829: LD_INT 0
57831: PPUSH
57832: CALL 59798 0 3
// end ;
57836: GO 57773
57838: POP
57839: POP
// if apemans then
57840: LD_VAR 0 3
57844: IFFALSE 57967
// for i = 1 to apemans do
57846: LD_ADDR_VAR 0 11
57850: PUSH
57851: DOUBLE
57852: LD_INT 1
57854: DEC
57855: ST_TO_ADDR
57856: LD_VAR 0 3
57860: PUSH
57861: FOR_TO
57862: IFFALSE 57965
// begin hc_class = class_apeman ;
57864: LD_ADDR_OWVAR 28
57868: PUSH
57869: LD_INT 12
57871: ST_TO_ADDR
// hc_gallery =  ;
57872: LD_ADDR_OWVAR 33
57876: PUSH
57877: LD_STRING 
57879: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57880: LD_ADDR_OWVAR 35
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PPUSH
57889: LD_INT 2
57891: PPUSH
57892: CALL_OW 12
57896: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57897: LD_ADDR_OWVAR 31
57901: PUSH
57902: LD_INT 1
57904: PPUSH
57905: LD_INT 3
57907: PPUSH
57908: CALL_OW 12
57912: PUSH
57913: LD_INT 1
57915: PPUSH
57916: LD_INT 3
57918: PPUSH
57919: CALL_OW 12
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// animal := CreateHuman ;
57936: LD_ADDR_VAR 0 12
57940: PUSH
57941: CALL_OW 44
57945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57946: LD_VAR 0 12
57950: PPUSH
57951: LD_VAR 0 8
57955: PPUSH
57956: LD_INT 0
57958: PPUSH
57959: CALL 59798 0 3
// end ;
57963: GO 57861
57965: POP
57966: POP
// if enchidnas then
57967: LD_VAR 0 4
57971: IFFALSE 58038
// for i = 1 to enchidnas do
57973: LD_ADDR_VAR 0 11
57977: PUSH
57978: DOUBLE
57979: LD_INT 1
57981: DEC
57982: ST_TO_ADDR
57983: LD_VAR 0 4
57987: PUSH
57988: FOR_TO
57989: IFFALSE 58036
// begin hc_class = 13 ;
57991: LD_ADDR_OWVAR 28
57995: PUSH
57996: LD_INT 13
57998: ST_TO_ADDR
// hc_gallery =  ;
57999: LD_ADDR_OWVAR 33
58003: PUSH
58004: LD_STRING 
58006: ST_TO_ADDR
// animal := CreateHuman ;
58007: LD_ADDR_VAR 0 12
58011: PUSH
58012: CALL_OW 44
58016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58017: LD_VAR 0 12
58021: PPUSH
58022: LD_VAR 0 8
58026: PPUSH
58027: LD_INT 0
58029: PPUSH
58030: CALL 59798 0 3
// end ;
58034: GO 57988
58036: POP
58037: POP
// if fishes then
58038: LD_VAR 0 7
58042: IFFALSE 58109
// for i = 1 to fishes do
58044: LD_ADDR_VAR 0 11
58048: PUSH
58049: DOUBLE
58050: LD_INT 1
58052: DEC
58053: ST_TO_ADDR
58054: LD_VAR 0 7
58058: PUSH
58059: FOR_TO
58060: IFFALSE 58107
// begin hc_class = 20 ;
58062: LD_ADDR_OWVAR 28
58066: PUSH
58067: LD_INT 20
58069: ST_TO_ADDR
// hc_gallery =  ;
58070: LD_ADDR_OWVAR 33
58074: PUSH
58075: LD_STRING 
58077: ST_TO_ADDR
// animal := CreateHuman ;
58078: LD_ADDR_VAR 0 12
58082: PUSH
58083: CALL_OW 44
58087: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58088: LD_VAR 0 12
58092: PPUSH
58093: LD_VAR 0 9
58097: PPUSH
58098: LD_INT 0
58100: PPUSH
58101: CALL 59798 0 3
// end ;
58105: GO 58059
58107: POP
58108: POP
// end ;
58109: LD_VAR 0 10
58113: RET
// export function WantHeal ( sci , unit ) ; begin
58114: LD_INT 0
58116: PPUSH
// if GetTaskList ( sci ) > 0 then
58117: LD_VAR 0 1
58121: PPUSH
58122: CALL_OW 437
58126: PUSH
58127: LD_INT 0
58129: GREATER
58130: IFFALSE 58200
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58132: LD_VAR 0 1
58136: PPUSH
58137: CALL_OW 437
58141: PUSH
58142: LD_INT 1
58144: ARRAY
58145: PUSH
58146: LD_INT 1
58148: ARRAY
58149: PUSH
58150: LD_STRING l
58152: EQUAL
58153: PUSH
58154: LD_VAR 0 1
58158: PPUSH
58159: CALL_OW 437
58163: PUSH
58164: LD_INT 1
58166: ARRAY
58167: PUSH
58168: LD_INT 4
58170: ARRAY
58171: PUSH
58172: LD_VAR 0 2
58176: EQUAL
58177: AND
58178: IFFALSE 58190
// result := true else
58180: LD_ADDR_VAR 0 3
58184: PUSH
58185: LD_INT 1
58187: ST_TO_ADDR
58188: GO 58198
// result := false ;
58190: LD_ADDR_VAR 0 3
58194: PUSH
58195: LD_INT 0
58197: ST_TO_ADDR
// end else
58198: GO 58208
// result := false ;
58200: LD_ADDR_VAR 0 3
58204: PUSH
58205: LD_INT 0
58207: ST_TO_ADDR
// end ;
58208: LD_VAR 0 3
58212: RET
// export function HealTarget ( sci ) ; begin
58213: LD_INT 0
58215: PPUSH
// if not sci then
58216: LD_VAR 0 1
58220: NOT
58221: IFFALSE 58225
// exit ;
58223: GO 58290
// result := 0 ;
58225: LD_ADDR_VAR 0 2
58229: PUSH
58230: LD_INT 0
58232: ST_TO_ADDR
// if GetTaskList ( sci ) then
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL_OW 437
58242: IFFALSE 58290
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58244: LD_VAR 0 1
58248: PPUSH
58249: CALL_OW 437
58253: PUSH
58254: LD_INT 1
58256: ARRAY
58257: PUSH
58258: LD_INT 1
58260: ARRAY
58261: PUSH
58262: LD_STRING l
58264: EQUAL
58265: IFFALSE 58290
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58267: LD_ADDR_VAR 0 2
58271: PUSH
58272: LD_VAR 0 1
58276: PPUSH
58277: CALL_OW 437
58281: PUSH
58282: LD_INT 1
58284: ARRAY
58285: PUSH
58286: LD_INT 4
58288: ARRAY
58289: ST_TO_ADDR
// end ;
58290: LD_VAR 0 2
58294: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58295: LD_INT 0
58297: PPUSH
58298: PPUSH
58299: PPUSH
58300: PPUSH
// if not base_units then
58301: LD_VAR 0 1
58305: NOT
58306: IFFALSE 58310
// exit ;
58308: GO 58397
// result := false ;
58310: LD_ADDR_VAR 0 2
58314: PUSH
58315: LD_INT 0
58317: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58318: LD_ADDR_VAR 0 5
58322: PUSH
58323: LD_VAR 0 1
58327: PPUSH
58328: LD_INT 21
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PPUSH
58338: CALL_OW 72
58342: ST_TO_ADDR
// if not tmp then
58343: LD_VAR 0 5
58347: NOT
58348: IFFALSE 58352
// exit ;
58350: GO 58397
// for i in tmp do
58352: LD_ADDR_VAR 0 3
58356: PUSH
58357: LD_VAR 0 5
58361: PUSH
58362: FOR_IN
58363: IFFALSE 58395
// begin result := EnemyInRange ( i , 22 ) ;
58365: LD_ADDR_VAR 0 2
58369: PUSH
58370: LD_VAR 0 3
58374: PPUSH
58375: LD_INT 22
58377: PPUSH
58378: CALL 56633 0 2
58382: ST_TO_ADDR
// if result then
58383: LD_VAR 0 2
58387: IFFALSE 58393
// exit ;
58389: POP
58390: POP
58391: GO 58397
// end ;
58393: GO 58362
58395: POP
58396: POP
// end ;
58397: LD_VAR 0 2
58401: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58402: LD_INT 0
58404: PPUSH
58405: PPUSH
// if not units then
58406: LD_VAR 0 1
58410: NOT
58411: IFFALSE 58415
// exit ;
58413: GO 58485
// result := [ ] ;
58415: LD_ADDR_VAR 0 3
58419: PUSH
58420: EMPTY
58421: ST_TO_ADDR
// for i in units do
58422: LD_ADDR_VAR 0 4
58426: PUSH
58427: LD_VAR 0 1
58431: PUSH
58432: FOR_IN
58433: IFFALSE 58483
// if GetTag ( i ) = tag then
58435: LD_VAR 0 4
58439: PPUSH
58440: CALL_OW 110
58444: PUSH
58445: LD_VAR 0 2
58449: EQUAL
58450: IFFALSE 58481
// result := Replace ( result , result + 1 , i ) ;
58452: LD_ADDR_VAR 0 3
58456: PUSH
58457: LD_VAR 0 3
58461: PPUSH
58462: LD_VAR 0 3
58466: PUSH
58467: LD_INT 1
58469: PLUS
58470: PPUSH
58471: LD_VAR 0 4
58475: PPUSH
58476: CALL_OW 1
58480: ST_TO_ADDR
58481: GO 58432
58483: POP
58484: POP
// end ;
58485: LD_VAR 0 3
58489: RET
// export function IsDriver ( un ) ; begin
58490: LD_INT 0
58492: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58493: LD_ADDR_VAR 0 2
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: LD_INT 55
58505: PUSH
58506: EMPTY
58507: LIST
58508: PPUSH
58509: CALL_OW 69
58513: IN
58514: ST_TO_ADDR
// end ;
58515: LD_VAR 0 2
58519: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58520: LD_INT 0
58522: PPUSH
58523: PPUSH
// list := [ ] ;
58524: LD_ADDR_VAR 0 5
58528: PUSH
58529: EMPTY
58530: ST_TO_ADDR
// case d of 0 :
58531: LD_VAR 0 3
58535: PUSH
58536: LD_INT 0
58538: DOUBLE
58539: EQUAL
58540: IFTRUE 58544
58542: GO 58677
58544: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58545: LD_ADDR_VAR 0 5
58549: PUSH
58550: LD_VAR 0 1
58554: PUSH
58555: LD_INT 4
58557: MINUS
58558: PUSH
58559: LD_VAR 0 2
58563: PUSH
58564: LD_INT 4
58566: MINUS
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: PUSH
58576: LD_VAR 0 1
58580: PUSH
58581: LD_INT 3
58583: MINUS
58584: PUSH
58585: LD_VAR 0 2
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: PUSH
58598: LD_VAR 0 1
58602: PUSH
58603: LD_INT 4
58605: PLUS
58606: PUSH
58607: LD_VAR 0 2
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: PUSH
58620: LD_VAR 0 1
58624: PUSH
58625: LD_INT 3
58627: PLUS
58628: PUSH
58629: LD_VAR 0 2
58633: PUSH
58634: LD_INT 3
58636: PLUS
58637: PUSH
58638: LD_INT 5
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: PUSH
58646: LD_VAR 0 1
58650: PUSH
58651: LD_VAR 0 2
58655: PUSH
58656: LD_INT 4
58658: PLUS
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: ST_TO_ADDR
// end ; 1 :
58675: GO 59375
58677: LD_INT 1
58679: DOUBLE
58680: EQUAL
58681: IFTRUE 58685
58683: GO 58818
58685: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58686: LD_ADDR_VAR 0 5
58690: PUSH
58691: LD_VAR 0 1
58695: PUSH
58696: LD_VAR 0 2
58700: PUSH
58701: LD_INT 4
58703: MINUS
58704: PUSH
58705: LD_INT 3
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: PUSH
58713: LD_VAR 0 1
58717: PUSH
58718: LD_INT 3
58720: MINUS
58721: PUSH
58722: LD_VAR 0 2
58726: PUSH
58727: LD_INT 3
58729: MINUS
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: LIST
58738: PUSH
58739: LD_VAR 0 1
58743: PUSH
58744: LD_INT 4
58746: MINUS
58747: PUSH
58748: LD_VAR 0 2
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: PUSH
58761: LD_VAR 0 1
58765: PUSH
58766: LD_VAR 0 2
58770: PUSH
58771: LD_INT 3
58773: PLUS
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: PUSH
58783: LD_VAR 0 1
58787: PUSH
58788: LD_INT 4
58790: PLUS
58791: PUSH
58792: LD_VAR 0 2
58796: PUSH
58797: LD_INT 4
58799: PLUS
58800: PUSH
58801: LD_INT 5
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// end ; 2 :
58816: GO 59375
58818: LD_INT 2
58820: DOUBLE
58821: EQUAL
58822: IFTRUE 58826
58824: GO 58955
58826: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58827: LD_ADDR_VAR 0 5
58831: PUSH
58832: LD_VAR 0 1
58836: PUSH
58837: LD_VAR 0 2
58841: PUSH
58842: LD_INT 3
58844: MINUS
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: PUSH
58854: LD_VAR 0 1
58858: PUSH
58859: LD_INT 4
58861: PLUS
58862: PUSH
58863: LD_VAR 0 2
58867: PUSH
58868: LD_INT 4
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: PUSH
58876: LD_VAR 0 1
58880: PUSH
58881: LD_VAR 0 2
58885: PUSH
58886: LD_INT 4
58888: PLUS
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: LIST
58897: PUSH
58898: LD_VAR 0 1
58902: PUSH
58903: LD_INT 3
58905: MINUS
58906: PUSH
58907: LD_VAR 0 2
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: LD_VAR 0 1
58924: PUSH
58925: LD_INT 4
58927: MINUS
58928: PUSH
58929: LD_VAR 0 2
58933: PUSH
58934: LD_INT 4
58936: MINUS
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: ST_TO_ADDR
// end ; 3 :
58953: GO 59375
58955: LD_INT 3
58957: DOUBLE
58958: EQUAL
58959: IFTRUE 58963
58961: GO 59096
58963: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58964: LD_ADDR_VAR 0 5
58968: PUSH
58969: LD_VAR 0 1
58973: PUSH
58974: LD_INT 3
58976: PLUS
58977: PUSH
58978: LD_VAR 0 2
58982: PUSH
58983: LD_INT 4
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: LIST
58990: PUSH
58991: LD_VAR 0 1
58995: PUSH
58996: LD_INT 4
58998: PLUS
58999: PUSH
59000: LD_VAR 0 2
59004: PUSH
59005: LD_INT 4
59007: PLUS
59008: PUSH
59009: LD_INT 5
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: PUSH
59017: LD_VAR 0 1
59021: PUSH
59022: LD_INT 4
59024: MINUS
59025: PUSH
59026: LD_VAR 0 2
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: PUSH
59039: LD_VAR 0 1
59043: PUSH
59044: LD_VAR 0 2
59048: PUSH
59049: LD_INT 4
59051: MINUS
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: PUSH
59061: LD_VAR 0 1
59065: PUSH
59066: LD_INT 3
59068: MINUS
59069: PUSH
59070: LD_VAR 0 2
59074: PUSH
59075: LD_INT 3
59077: MINUS
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// end ; 4 :
59094: GO 59375
59096: LD_INT 4
59098: DOUBLE
59099: EQUAL
59100: IFTRUE 59104
59102: GO 59237
59104: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59105: LD_ADDR_VAR 0 5
59109: PUSH
59110: LD_VAR 0 1
59114: PUSH
59115: LD_VAR 0 2
59119: PUSH
59120: LD_INT 4
59122: PLUS
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: PUSH
59132: LD_VAR 0 1
59136: PUSH
59137: LD_INT 3
59139: PLUS
59140: PUSH
59141: LD_VAR 0 2
59145: PUSH
59146: LD_INT 3
59148: PLUS
59149: PUSH
59150: LD_INT 5
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: PUSH
59158: LD_VAR 0 1
59162: PUSH
59163: LD_INT 4
59165: PLUS
59166: PUSH
59167: LD_VAR 0 2
59171: PUSH
59172: LD_INT 4
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: PUSH
59180: LD_VAR 0 1
59184: PUSH
59185: LD_VAR 0 2
59189: PUSH
59190: LD_INT 3
59192: MINUS
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: PUSH
59202: LD_VAR 0 1
59206: PUSH
59207: LD_INT 4
59209: MINUS
59210: PUSH
59211: LD_VAR 0 2
59215: PUSH
59216: LD_INT 4
59218: MINUS
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// end ; 5 :
59235: GO 59375
59237: LD_INT 5
59239: DOUBLE
59240: EQUAL
59241: IFTRUE 59245
59243: GO 59374
59245: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59246: LD_ADDR_VAR 0 5
59250: PUSH
59251: LD_VAR 0 1
59255: PUSH
59256: LD_INT 4
59258: MINUS
59259: PUSH
59260: LD_VAR 0 2
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: PUSH
59273: LD_VAR 0 1
59277: PUSH
59278: LD_VAR 0 2
59282: PUSH
59283: LD_INT 4
59285: MINUS
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: LIST
59294: PUSH
59295: LD_VAR 0 1
59299: PUSH
59300: LD_INT 4
59302: PLUS
59303: PUSH
59304: LD_VAR 0 2
59308: PUSH
59309: LD_INT 4
59311: PLUS
59312: PUSH
59313: LD_INT 5
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: PUSH
59321: LD_VAR 0 1
59325: PUSH
59326: LD_INT 3
59328: PLUS
59329: PUSH
59330: LD_VAR 0 2
59334: PUSH
59335: LD_INT 4
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: PUSH
59343: LD_VAR 0 1
59347: PUSH
59348: LD_VAR 0 2
59352: PUSH
59353: LD_INT 3
59355: PLUS
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: ST_TO_ADDR
// end ; end ;
59372: GO 59375
59374: POP
// result := list ;
59375: LD_ADDR_VAR 0 4
59379: PUSH
59380: LD_VAR 0 5
59384: ST_TO_ADDR
// end ;
59385: LD_VAR 0 4
59389: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59390: LD_INT 0
59392: PPUSH
59393: PPUSH
59394: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59395: LD_VAR 0 1
59399: NOT
59400: PUSH
59401: LD_VAR 0 2
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 3
59414: PUSH
59415: LD_INT 4
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: IN
59424: NOT
59425: OR
59426: IFFALSE 59430
// exit ;
59428: GO 59522
// tmp := [ ] ;
59430: LD_ADDR_VAR 0 5
59434: PUSH
59435: EMPTY
59436: ST_TO_ADDR
// for i in units do
59437: LD_ADDR_VAR 0 4
59441: PUSH
59442: LD_VAR 0 1
59446: PUSH
59447: FOR_IN
59448: IFFALSE 59491
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59450: LD_ADDR_VAR 0 5
59454: PUSH
59455: LD_VAR 0 5
59459: PPUSH
59460: LD_VAR 0 5
59464: PUSH
59465: LD_INT 1
59467: PLUS
59468: PPUSH
59469: LD_VAR 0 4
59473: PPUSH
59474: LD_VAR 0 2
59478: PPUSH
59479: CALL_OW 259
59483: PPUSH
59484: CALL_OW 2
59488: ST_TO_ADDR
59489: GO 59447
59491: POP
59492: POP
// if not tmp then
59493: LD_VAR 0 5
59497: NOT
59498: IFFALSE 59502
// exit ;
59500: GO 59522
// result := SortListByListDesc ( units , tmp ) ;
59502: LD_ADDR_VAR 0 3
59506: PUSH
59507: LD_VAR 0 1
59511: PPUSH
59512: LD_VAR 0 5
59516: PPUSH
59517: CALL_OW 77
59521: ST_TO_ADDR
// end ;
59522: LD_VAR 0 3
59526: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59527: LD_INT 0
59529: PPUSH
59530: PPUSH
59531: PPUSH
// result := false ;
59532: LD_ADDR_VAR 0 3
59536: PUSH
59537: LD_INT 0
59539: ST_TO_ADDR
// x := GetX ( building ) ;
59540: LD_ADDR_VAR 0 4
59544: PUSH
59545: LD_VAR 0 2
59549: PPUSH
59550: CALL_OW 250
59554: ST_TO_ADDR
// y := GetY ( building ) ;
59555: LD_ADDR_VAR 0 5
59559: PUSH
59560: LD_VAR 0 2
59564: PPUSH
59565: CALL_OW 251
59569: ST_TO_ADDR
// if not building or not x or not y then
59570: LD_VAR 0 2
59574: NOT
59575: PUSH
59576: LD_VAR 0 4
59580: NOT
59581: OR
59582: PUSH
59583: LD_VAR 0 5
59587: NOT
59588: OR
59589: IFFALSE 59593
// exit ;
59591: GO 59685
// if GetTaskList ( unit ) then
59593: LD_VAR 0 1
59597: PPUSH
59598: CALL_OW 437
59602: IFFALSE 59685
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59604: LD_STRING e
59606: PUSH
59607: LD_VAR 0 1
59611: PPUSH
59612: CALL_OW 437
59616: PUSH
59617: LD_INT 1
59619: ARRAY
59620: PUSH
59621: LD_INT 1
59623: ARRAY
59624: EQUAL
59625: PUSH
59626: LD_VAR 0 4
59630: PUSH
59631: LD_VAR 0 1
59635: PPUSH
59636: CALL_OW 437
59640: PUSH
59641: LD_INT 1
59643: ARRAY
59644: PUSH
59645: LD_INT 2
59647: ARRAY
59648: EQUAL
59649: AND
59650: PUSH
59651: LD_VAR 0 5
59655: PUSH
59656: LD_VAR 0 1
59660: PPUSH
59661: CALL_OW 437
59665: PUSH
59666: LD_INT 1
59668: ARRAY
59669: PUSH
59670: LD_INT 3
59672: ARRAY
59673: EQUAL
59674: AND
59675: IFFALSE 59685
// result := true end ;
59677: LD_ADDR_VAR 0 3
59681: PUSH
59682: LD_INT 1
59684: ST_TO_ADDR
// end ;
59685: LD_VAR 0 3
59689: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59690: LD_INT 0
59692: PPUSH
// result := false ;
59693: LD_ADDR_VAR 0 4
59697: PUSH
59698: LD_INT 0
59700: ST_TO_ADDR
// if GetTaskList ( unit ) then
59701: LD_VAR 0 1
59705: PPUSH
59706: CALL_OW 437
59710: IFFALSE 59793
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59712: LD_STRING M
59714: PUSH
59715: LD_VAR 0 1
59719: PPUSH
59720: CALL_OW 437
59724: PUSH
59725: LD_INT 1
59727: ARRAY
59728: PUSH
59729: LD_INT 1
59731: ARRAY
59732: EQUAL
59733: PUSH
59734: LD_VAR 0 2
59738: PUSH
59739: LD_VAR 0 1
59743: PPUSH
59744: CALL_OW 437
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: PUSH
59753: LD_INT 2
59755: ARRAY
59756: EQUAL
59757: AND
59758: PUSH
59759: LD_VAR 0 3
59763: PUSH
59764: LD_VAR 0 1
59768: PPUSH
59769: CALL_OW 437
59773: PUSH
59774: LD_INT 1
59776: ARRAY
59777: PUSH
59778: LD_INT 3
59780: ARRAY
59781: EQUAL
59782: AND
59783: IFFALSE 59793
// result := true ;
59785: LD_ADDR_VAR 0 4
59789: PUSH
59790: LD_INT 1
59792: ST_TO_ADDR
// end ; end ;
59793: LD_VAR 0 4
59797: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59798: LD_INT 0
59800: PPUSH
59801: PPUSH
59802: PPUSH
59803: PPUSH
// if not unit or not area then
59804: LD_VAR 0 1
59808: NOT
59809: PUSH
59810: LD_VAR 0 2
59814: NOT
59815: OR
59816: IFFALSE 59820
// exit ;
59818: GO 59984
// tmp := AreaToList ( area , i ) ;
59820: LD_ADDR_VAR 0 6
59824: PUSH
59825: LD_VAR 0 2
59829: PPUSH
59830: LD_VAR 0 5
59834: PPUSH
59835: CALL_OW 517
59839: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59840: LD_ADDR_VAR 0 5
59844: PUSH
59845: DOUBLE
59846: LD_INT 1
59848: DEC
59849: ST_TO_ADDR
59850: LD_VAR 0 6
59854: PUSH
59855: LD_INT 1
59857: ARRAY
59858: PUSH
59859: FOR_TO
59860: IFFALSE 59982
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59862: LD_ADDR_VAR 0 7
59866: PUSH
59867: LD_VAR 0 6
59871: PUSH
59872: LD_INT 1
59874: ARRAY
59875: PUSH
59876: LD_VAR 0 5
59880: ARRAY
59881: PUSH
59882: LD_VAR 0 6
59886: PUSH
59887: LD_INT 2
59889: ARRAY
59890: PUSH
59891: LD_VAR 0 5
59895: ARRAY
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59901: LD_VAR 0 7
59905: PUSH
59906: LD_INT 1
59908: ARRAY
59909: PPUSH
59910: LD_VAR 0 7
59914: PUSH
59915: LD_INT 2
59917: ARRAY
59918: PPUSH
59919: CALL_OW 428
59923: PUSH
59924: LD_INT 0
59926: EQUAL
59927: IFFALSE 59980
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59929: LD_VAR 0 1
59933: PPUSH
59934: LD_VAR 0 7
59938: PUSH
59939: LD_INT 1
59941: ARRAY
59942: PPUSH
59943: LD_VAR 0 7
59947: PUSH
59948: LD_INT 2
59950: ARRAY
59951: PPUSH
59952: LD_VAR 0 3
59956: PPUSH
59957: CALL_OW 48
// result := IsPlaced ( unit ) ;
59961: LD_ADDR_VAR 0 4
59965: PUSH
59966: LD_VAR 0 1
59970: PPUSH
59971: CALL_OW 305
59975: ST_TO_ADDR
// exit ;
59976: POP
59977: POP
59978: GO 59984
// end ; end ;
59980: GO 59859
59982: POP
59983: POP
// end ;
59984: LD_VAR 0 4
59988: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59989: LD_INT 0
59991: PPUSH
59992: PPUSH
59993: PPUSH
// if not side or side > 8 then
59994: LD_VAR 0 1
59998: NOT
59999: PUSH
60000: LD_VAR 0 1
60004: PUSH
60005: LD_INT 8
60007: GREATER
60008: OR
60009: IFFALSE 60013
// exit ;
60011: GO 60200
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60013: LD_ADDR_VAR 0 4
60017: PUSH
60018: LD_INT 22
60020: PUSH
60021: LD_VAR 0 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 21
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PPUSH
60044: CALL_OW 69
60048: ST_TO_ADDR
// if not tmp then
60049: LD_VAR 0 4
60053: NOT
60054: IFFALSE 60058
// exit ;
60056: GO 60200
// enable_addtolog := true ;
60058: LD_ADDR_OWVAR 81
60062: PUSH
60063: LD_INT 1
60065: ST_TO_ADDR
// AddToLog ( [ ) ;
60066: LD_STRING [
60068: PPUSH
60069: CALL_OW 561
// for i in tmp do
60073: LD_ADDR_VAR 0 3
60077: PUSH
60078: LD_VAR 0 4
60082: PUSH
60083: FOR_IN
60084: IFFALSE 60191
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60086: LD_STRING [
60088: PUSH
60089: LD_VAR 0 3
60093: PPUSH
60094: CALL_OW 266
60098: STR
60099: PUSH
60100: LD_STRING , 
60102: STR
60103: PUSH
60104: LD_VAR 0 3
60108: PPUSH
60109: CALL_OW 250
60113: STR
60114: PUSH
60115: LD_STRING , 
60117: STR
60118: PUSH
60119: LD_VAR 0 3
60123: PPUSH
60124: CALL_OW 251
60128: STR
60129: PUSH
60130: LD_STRING , 
60132: STR
60133: PUSH
60134: LD_VAR 0 3
60138: PPUSH
60139: CALL_OW 254
60143: STR
60144: PUSH
60145: LD_STRING , 
60147: STR
60148: PUSH
60149: LD_VAR 0 3
60153: PPUSH
60154: LD_INT 1
60156: PPUSH
60157: CALL_OW 268
60161: STR
60162: PUSH
60163: LD_STRING , 
60165: STR
60166: PUSH
60167: LD_VAR 0 3
60171: PPUSH
60172: LD_INT 2
60174: PPUSH
60175: CALL_OW 268
60179: STR
60180: PUSH
60181: LD_STRING ],
60183: STR
60184: PPUSH
60185: CALL_OW 561
// end ;
60189: GO 60083
60191: POP
60192: POP
// AddToLog ( ]; ) ;
60193: LD_STRING ];
60195: PPUSH
60196: CALL_OW 561
// end ;
60200: LD_VAR 0 2
60204: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60205: LD_INT 0
60207: PPUSH
60208: PPUSH
60209: PPUSH
60210: PPUSH
60211: PPUSH
// if not area or not rate or not max then
60212: LD_VAR 0 1
60216: NOT
60217: PUSH
60218: LD_VAR 0 2
60222: NOT
60223: OR
60224: PUSH
60225: LD_VAR 0 4
60229: NOT
60230: OR
60231: IFFALSE 60235
// exit ;
60233: GO 60427
// while 1 do
60235: LD_INT 1
60237: IFFALSE 60427
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60239: LD_ADDR_VAR 0 9
60243: PUSH
60244: LD_VAR 0 1
60248: PPUSH
60249: LD_INT 1
60251: PPUSH
60252: CALL_OW 287
60256: PUSH
60257: LD_INT 10
60259: MUL
60260: ST_TO_ADDR
// r := rate / 10 ;
60261: LD_ADDR_VAR 0 7
60265: PUSH
60266: LD_VAR 0 2
60270: PUSH
60271: LD_INT 10
60273: DIVREAL
60274: ST_TO_ADDR
// time := 1 1$00 ;
60275: LD_ADDR_VAR 0 8
60279: PUSH
60280: LD_INT 2100
60282: ST_TO_ADDR
// if amount < min then
60283: LD_VAR 0 9
60287: PUSH
60288: LD_VAR 0 3
60292: LESS
60293: IFFALSE 60311
// r := r * 2 else
60295: LD_ADDR_VAR 0 7
60299: PUSH
60300: LD_VAR 0 7
60304: PUSH
60305: LD_INT 2
60307: MUL
60308: ST_TO_ADDR
60309: GO 60337
// if amount > max then
60311: LD_VAR 0 9
60315: PUSH
60316: LD_VAR 0 4
60320: GREATER
60321: IFFALSE 60337
// r := r / 2 ;
60323: LD_ADDR_VAR 0 7
60327: PUSH
60328: LD_VAR 0 7
60332: PUSH
60333: LD_INT 2
60335: DIVREAL
60336: ST_TO_ADDR
// time := time / r ;
60337: LD_ADDR_VAR 0 8
60341: PUSH
60342: LD_VAR 0 8
60346: PUSH
60347: LD_VAR 0 7
60351: DIVREAL
60352: ST_TO_ADDR
// if time < 0 then
60353: LD_VAR 0 8
60357: PUSH
60358: LD_INT 0
60360: LESS
60361: IFFALSE 60378
// time := time * - 1 ;
60363: LD_ADDR_VAR 0 8
60367: PUSH
60368: LD_VAR 0 8
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: MUL
60377: ST_TO_ADDR
// wait ( time ) ;
60378: LD_VAR 0 8
60382: PPUSH
60383: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60387: LD_INT 35
60389: PPUSH
60390: LD_INT 875
60392: PPUSH
60393: CALL_OW 12
60397: PPUSH
60398: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60402: LD_INT 1
60404: PPUSH
60405: LD_INT 5
60407: PPUSH
60408: CALL_OW 12
60412: PPUSH
60413: LD_VAR 0 1
60417: PPUSH
60418: LD_INT 1
60420: PPUSH
60421: CALL_OW 55
// end ;
60425: GO 60235
// end ;
60427: LD_VAR 0 5
60431: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60432: LD_INT 0
60434: PPUSH
60435: PPUSH
60436: PPUSH
60437: PPUSH
60438: PPUSH
60439: PPUSH
60440: PPUSH
60441: PPUSH
// if not turrets or not factories then
60442: LD_VAR 0 1
60446: NOT
60447: PUSH
60448: LD_VAR 0 2
60452: NOT
60453: OR
60454: IFFALSE 60458
// exit ;
60456: GO 60765
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60458: LD_ADDR_VAR 0 10
60462: PUSH
60463: LD_INT 5
60465: PUSH
60466: LD_INT 6
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: LD_INT 5
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 24
60500: PUSH
60501: LD_INT 25
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 23
60510: PUSH
60511: LD_INT 27
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 42
60524: PUSH
60525: LD_INT 43
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 44
60534: PUSH
60535: LD_INT 46
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 45
60544: PUSH
60545: LD_INT 47
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: LIST
60561: ST_TO_ADDR
// result := [ ] ;
60562: LD_ADDR_VAR 0 3
60566: PUSH
60567: EMPTY
60568: ST_TO_ADDR
// for i in turrets do
60569: LD_ADDR_VAR 0 4
60573: PUSH
60574: LD_VAR 0 1
60578: PUSH
60579: FOR_IN
60580: IFFALSE 60763
// begin nat := GetNation ( i ) ;
60582: LD_ADDR_VAR 0 7
60586: PUSH
60587: LD_VAR 0 4
60591: PPUSH
60592: CALL_OW 248
60596: ST_TO_ADDR
// weapon := 0 ;
60597: LD_ADDR_VAR 0 8
60601: PUSH
60602: LD_INT 0
60604: ST_TO_ADDR
// if not nat then
60605: LD_VAR 0 7
60609: NOT
60610: IFFALSE 60614
// continue ;
60612: GO 60579
// for j in list [ nat ] do
60614: LD_ADDR_VAR 0 5
60618: PUSH
60619: LD_VAR 0 10
60623: PUSH
60624: LD_VAR 0 7
60628: ARRAY
60629: PUSH
60630: FOR_IN
60631: IFFALSE 60672
// if GetBWeapon ( i ) = j [ 1 ] then
60633: LD_VAR 0 4
60637: PPUSH
60638: CALL_OW 269
60642: PUSH
60643: LD_VAR 0 5
60647: PUSH
60648: LD_INT 1
60650: ARRAY
60651: EQUAL
60652: IFFALSE 60670
// begin weapon := j [ 2 ] ;
60654: LD_ADDR_VAR 0 8
60658: PUSH
60659: LD_VAR 0 5
60663: PUSH
60664: LD_INT 2
60666: ARRAY
60667: ST_TO_ADDR
// break ;
60668: GO 60672
// end ;
60670: GO 60630
60672: POP
60673: POP
// if not weapon then
60674: LD_VAR 0 8
60678: NOT
60679: IFFALSE 60683
// continue ;
60681: GO 60579
// for k in factories do
60683: LD_ADDR_VAR 0 6
60687: PUSH
60688: LD_VAR 0 2
60692: PUSH
60693: FOR_IN
60694: IFFALSE 60759
// begin weapons := AvailableWeaponList ( k ) ;
60696: LD_ADDR_VAR 0 9
60700: PUSH
60701: LD_VAR 0 6
60705: PPUSH
60706: CALL_OW 478
60710: ST_TO_ADDR
// if not weapons then
60711: LD_VAR 0 9
60715: NOT
60716: IFFALSE 60720
// continue ;
60718: GO 60693
// if weapon in weapons then
60720: LD_VAR 0 8
60724: PUSH
60725: LD_VAR 0 9
60729: IN
60730: IFFALSE 60757
// begin result := [ i , weapon ] ;
60732: LD_ADDR_VAR 0 3
60736: PUSH
60737: LD_VAR 0 4
60741: PUSH
60742: LD_VAR 0 8
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: ST_TO_ADDR
// exit ;
60751: POP
60752: POP
60753: POP
60754: POP
60755: GO 60765
// end ; end ;
60757: GO 60693
60759: POP
60760: POP
// end ;
60761: GO 60579
60763: POP
60764: POP
// end ;
60765: LD_VAR 0 3
60769: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60770: LD_INT 0
60772: PPUSH
// if not side or side > 8 then
60773: LD_VAR 0 3
60777: NOT
60778: PUSH
60779: LD_VAR 0 3
60783: PUSH
60784: LD_INT 8
60786: GREATER
60787: OR
60788: IFFALSE 60792
// exit ;
60790: GO 60851
// if not range then
60792: LD_VAR 0 4
60796: NOT
60797: IFFALSE 60808
// range := - 12 ;
60799: LD_ADDR_VAR 0 4
60803: PUSH
60804: LD_INT 12
60806: NEG
60807: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60808: LD_VAR 0 1
60812: PPUSH
60813: LD_VAR 0 2
60817: PPUSH
60818: LD_VAR 0 3
60822: PPUSH
60823: LD_VAR 0 4
60827: PPUSH
60828: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60832: LD_VAR 0 1
60836: PPUSH
60837: LD_VAR 0 2
60841: PPUSH
60842: LD_VAR 0 3
60846: PPUSH
60847: CALL_OW 331
// end ;
60851: LD_VAR 0 5
60855: RET
// export function Video ( mode ) ; begin
60856: LD_INT 0
60858: PPUSH
// ingame_video = mode ;
60859: LD_ADDR_OWVAR 52
60863: PUSH
60864: LD_VAR 0 1
60868: ST_TO_ADDR
// interface_hidden = mode ;
60869: LD_ADDR_OWVAR 54
60873: PUSH
60874: LD_VAR 0 1
60878: ST_TO_ADDR
// end ;
60879: LD_VAR 0 2
60883: RET
// export function Join ( array , element ) ; begin
60884: LD_INT 0
60886: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60887: LD_ADDR_VAR 0 3
60891: PUSH
60892: LD_VAR 0 1
60896: PPUSH
60897: LD_VAR 0 1
60901: PUSH
60902: LD_INT 1
60904: PLUS
60905: PPUSH
60906: LD_VAR 0 2
60910: PPUSH
60911: CALL_OW 1
60915: ST_TO_ADDR
// end ;
60916: LD_VAR 0 3
60920: RET
// export function JoinUnion ( array , element ) ; begin
60921: LD_INT 0
60923: PPUSH
// result := array union element ;
60924: LD_ADDR_VAR 0 3
60928: PUSH
60929: LD_VAR 0 1
60933: PUSH
60934: LD_VAR 0 2
60938: UNION
60939: ST_TO_ADDR
// end ;
60940: LD_VAR 0 3
60944: RET
// export function GetBehemoths ( side ) ; begin
60945: LD_INT 0
60947: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60948: LD_ADDR_VAR 0 2
60952: PUSH
60953: LD_INT 22
60955: PUSH
60956: LD_VAR 0 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 31
60967: PUSH
60968: LD_INT 25
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PPUSH
60979: CALL_OW 69
60983: ST_TO_ADDR
// end ;
60984: LD_VAR 0 2
60988: RET
// export function Shuffle ( array ) ; var i , index ; begin
60989: LD_INT 0
60991: PPUSH
60992: PPUSH
60993: PPUSH
// result := [ ] ;
60994: LD_ADDR_VAR 0 2
60998: PUSH
60999: EMPTY
61000: ST_TO_ADDR
// if not array then
61001: LD_VAR 0 1
61005: NOT
61006: IFFALSE 61010
// exit ;
61008: GO 61109
// Randomize ;
61010: CALL_OW 10
// for i = array downto 1 do
61014: LD_ADDR_VAR 0 3
61018: PUSH
61019: DOUBLE
61020: LD_VAR 0 1
61024: INC
61025: ST_TO_ADDR
61026: LD_INT 1
61028: PUSH
61029: FOR_DOWNTO
61030: IFFALSE 61107
// begin index := rand ( 1 , array ) ;
61032: LD_ADDR_VAR 0 4
61036: PUSH
61037: LD_INT 1
61039: PPUSH
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 12
61049: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61050: LD_ADDR_VAR 0 2
61054: PUSH
61055: LD_VAR 0 2
61059: PPUSH
61060: LD_VAR 0 2
61064: PUSH
61065: LD_INT 1
61067: PLUS
61068: PPUSH
61069: LD_VAR 0 1
61073: PUSH
61074: LD_VAR 0 4
61078: ARRAY
61079: PPUSH
61080: CALL_OW 2
61084: ST_TO_ADDR
// array := Delete ( array , index ) ;
61085: LD_ADDR_VAR 0 1
61089: PUSH
61090: LD_VAR 0 1
61094: PPUSH
61095: LD_VAR 0 4
61099: PPUSH
61100: CALL_OW 3
61104: ST_TO_ADDR
// end ;
61105: GO 61029
61107: POP
61108: POP
// end ;
61109: LD_VAR 0 2
61113: RET
// export function GetBaseMaterials ( base ) ; begin
61114: LD_INT 0
61116: PPUSH
// result := [ 0 , 0 , 0 ] ;
61117: LD_ADDR_VAR 0 2
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: ST_TO_ADDR
// if not base then
61136: LD_VAR 0 1
61140: NOT
61141: IFFALSE 61145
// exit ;
61143: GO 61194
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61145: LD_ADDR_VAR 0 2
61149: PUSH
61150: LD_VAR 0 1
61154: PPUSH
61155: LD_INT 1
61157: PPUSH
61158: CALL_OW 275
61162: PUSH
61163: LD_VAR 0 1
61167: PPUSH
61168: LD_INT 2
61170: PPUSH
61171: CALL_OW 275
61175: PUSH
61176: LD_VAR 0 1
61180: PPUSH
61181: LD_INT 3
61183: PPUSH
61184: CALL_OW 275
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: LIST
61193: ST_TO_ADDR
// end ;
61194: LD_VAR 0 2
61198: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61199: LD_INT 0
61201: PPUSH
61202: PPUSH
// result := array ;
61203: LD_ADDR_VAR 0 3
61207: PUSH
61208: LD_VAR 0 1
61212: ST_TO_ADDR
// if size > 0 then
61213: LD_VAR 0 2
61217: PUSH
61218: LD_INT 0
61220: GREATER
61221: IFFALSE 61267
// for i := array downto size do
61223: LD_ADDR_VAR 0 4
61227: PUSH
61228: DOUBLE
61229: LD_VAR 0 1
61233: INC
61234: ST_TO_ADDR
61235: LD_VAR 0 2
61239: PUSH
61240: FOR_DOWNTO
61241: IFFALSE 61265
// result := Delete ( result , result ) ;
61243: LD_ADDR_VAR 0 3
61247: PUSH
61248: LD_VAR 0 3
61252: PPUSH
61253: LD_VAR 0 3
61257: PPUSH
61258: CALL_OW 3
61262: ST_TO_ADDR
61263: GO 61240
61265: POP
61266: POP
// end ;
61267: LD_VAR 0 3
61271: RET
// export function ComExit ( unit ) ; var tmp ; begin
61272: LD_INT 0
61274: PPUSH
61275: PPUSH
// if not IsInUnit ( unit ) then
61276: LD_VAR 0 1
61280: PPUSH
61281: CALL_OW 310
61285: NOT
61286: IFFALSE 61290
// exit ;
61288: GO 61350
// tmp := IsInUnit ( unit ) ;
61290: LD_ADDR_VAR 0 3
61294: PUSH
61295: LD_VAR 0 1
61299: PPUSH
61300: CALL_OW 310
61304: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61305: LD_VAR 0 3
61309: PPUSH
61310: CALL_OW 247
61314: PUSH
61315: LD_INT 2
61317: EQUAL
61318: IFFALSE 61331
// ComExitVehicle ( unit ) else
61320: LD_VAR 0 1
61324: PPUSH
61325: CALL_OW 121
61329: GO 61340
// ComExitBuilding ( unit ) ;
61331: LD_VAR 0 1
61335: PPUSH
61336: CALL_OW 122
// result := tmp ;
61340: LD_ADDR_VAR 0 2
61344: PUSH
61345: LD_VAR 0 3
61349: ST_TO_ADDR
// end ;
61350: LD_VAR 0 2
61354: RET
// export function ComExitAll ( units ) ; var i ; begin
61355: LD_INT 0
61357: PPUSH
61358: PPUSH
// if not units then
61359: LD_VAR 0 1
61363: NOT
61364: IFFALSE 61368
// exit ;
61366: GO 61394
// for i in units do
61368: LD_ADDR_VAR 0 3
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: FOR_IN
61379: IFFALSE 61392
// ComExit ( i ) ;
61381: LD_VAR 0 3
61385: PPUSH
61386: CALL 61272 0 1
61390: GO 61378
61392: POP
61393: POP
// end ;
61394: LD_VAR 0 2
61398: RET
// export function ResetHc ; begin
61399: LD_INT 0
61401: PPUSH
// InitHc ;
61402: CALL_OW 19
// hc_importance := 0 ;
61406: LD_ADDR_OWVAR 32
61410: PUSH
61411: LD_INT 0
61413: ST_TO_ADDR
// end ;
61414: LD_VAR 0 1
61418: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61419: LD_INT 0
61421: PPUSH
61422: PPUSH
61423: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61424: LD_ADDR_VAR 0 6
61428: PUSH
61429: LD_VAR 0 1
61433: PUSH
61434: LD_VAR 0 3
61438: PLUS
61439: PUSH
61440: LD_INT 2
61442: DIV
61443: ST_TO_ADDR
// if _x < 0 then
61444: LD_VAR 0 6
61448: PUSH
61449: LD_INT 0
61451: LESS
61452: IFFALSE 61469
// _x := _x * - 1 ;
61454: LD_ADDR_VAR 0 6
61458: PUSH
61459: LD_VAR 0 6
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: MUL
61468: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61469: LD_ADDR_VAR 0 7
61473: PUSH
61474: LD_VAR 0 2
61478: PUSH
61479: LD_VAR 0 4
61483: PLUS
61484: PUSH
61485: LD_INT 2
61487: DIV
61488: ST_TO_ADDR
// if _y < 0 then
61489: LD_VAR 0 7
61493: PUSH
61494: LD_INT 0
61496: LESS
61497: IFFALSE 61514
// _y := _y * - 1 ;
61499: LD_ADDR_VAR 0 7
61503: PUSH
61504: LD_VAR 0 7
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: MUL
61513: ST_TO_ADDR
// result := [ _x , _y ] ;
61514: LD_ADDR_VAR 0 5
61518: PUSH
61519: LD_VAR 0 6
61523: PUSH
61524: LD_VAR 0 7
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: ST_TO_ADDR
// end ;
61533: LD_VAR 0 5
61537: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61538: LD_INT 0
61540: PPUSH
61541: PPUSH
61542: PPUSH
61543: PPUSH
// task := GetTaskList ( unit ) ;
61544: LD_ADDR_VAR 0 7
61548: PUSH
61549: LD_VAR 0 1
61553: PPUSH
61554: CALL_OW 437
61558: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61559: LD_VAR 0 7
61563: NOT
61564: PUSH
61565: LD_VAR 0 1
61569: PPUSH
61570: LD_VAR 0 2
61574: PPUSH
61575: CALL_OW 308
61579: NOT
61580: AND
61581: IFFALSE 61585
// exit ;
61583: GO 61703
// if IsInArea ( unit , area ) then
61585: LD_VAR 0 1
61589: PPUSH
61590: LD_VAR 0 2
61594: PPUSH
61595: CALL_OW 308
61599: IFFALSE 61617
// begin ComMoveToArea ( unit , goAway ) ;
61601: LD_VAR 0 1
61605: PPUSH
61606: LD_VAR 0 3
61610: PPUSH
61611: CALL_OW 113
// exit ;
61615: GO 61703
// end ; if task [ 1 ] [ 1 ] <> M then
61617: LD_VAR 0 7
61621: PUSH
61622: LD_INT 1
61624: ARRAY
61625: PUSH
61626: LD_INT 1
61628: ARRAY
61629: PUSH
61630: LD_STRING M
61632: NONEQUAL
61633: IFFALSE 61637
// exit ;
61635: GO 61703
// x := task [ 1 ] [ 2 ] ;
61637: LD_ADDR_VAR 0 5
61641: PUSH
61642: LD_VAR 0 7
61646: PUSH
61647: LD_INT 1
61649: ARRAY
61650: PUSH
61651: LD_INT 2
61653: ARRAY
61654: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61655: LD_ADDR_VAR 0 6
61659: PUSH
61660: LD_VAR 0 7
61664: PUSH
61665: LD_INT 1
61667: ARRAY
61668: PUSH
61669: LD_INT 3
61671: ARRAY
61672: ST_TO_ADDR
// if InArea ( x , y , area ) then
61673: LD_VAR 0 5
61677: PPUSH
61678: LD_VAR 0 6
61682: PPUSH
61683: LD_VAR 0 2
61687: PPUSH
61688: CALL_OW 309
61692: IFFALSE 61703
// ComStop ( unit ) ;
61694: LD_VAR 0 1
61698: PPUSH
61699: CALL_OW 141
// end ;
61703: LD_VAR 0 4
61707: RET
// export function Abs ( value ) ; begin
61708: LD_INT 0
61710: PPUSH
// result := value ;
61711: LD_ADDR_VAR 0 2
61715: PUSH
61716: LD_VAR 0 1
61720: ST_TO_ADDR
// if value < 0 then
61721: LD_VAR 0 1
61725: PUSH
61726: LD_INT 0
61728: LESS
61729: IFFALSE 61746
// result := value * - 1 ;
61731: LD_ADDR_VAR 0 2
61735: PUSH
61736: LD_VAR 0 1
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: MUL
61745: ST_TO_ADDR
// end ;
61746: LD_VAR 0 2
61750: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61751: LD_INT 0
61753: PPUSH
61754: PPUSH
61755: PPUSH
61756: PPUSH
61757: PPUSH
61758: PPUSH
61759: PPUSH
61760: PPUSH
// if not unit or not building then
61761: LD_VAR 0 1
61765: NOT
61766: PUSH
61767: LD_VAR 0 2
61771: NOT
61772: OR
61773: IFFALSE 61777
// exit ;
61775: GO 62003
// x := GetX ( building ) ;
61777: LD_ADDR_VAR 0 4
61781: PUSH
61782: LD_VAR 0 2
61786: PPUSH
61787: CALL_OW 250
61791: ST_TO_ADDR
// y := GetY ( building ) ;
61792: LD_ADDR_VAR 0 6
61796: PUSH
61797: LD_VAR 0 2
61801: PPUSH
61802: CALL_OW 251
61806: ST_TO_ADDR
// d := GetDir ( building ) ;
61807: LD_ADDR_VAR 0 8
61811: PUSH
61812: LD_VAR 0 2
61816: PPUSH
61817: CALL_OW 254
61821: ST_TO_ADDR
// r := 4 ;
61822: LD_ADDR_VAR 0 9
61826: PUSH
61827: LD_INT 4
61829: ST_TO_ADDR
// for i := 1 to 5 do
61830: LD_ADDR_VAR 0 10
61834: PUSH
61835: DOUBLE
61836: LD_INT 1
61838: DEC
61839: ST_TO_ADDR
61840: LD_INT 5
61842: PUSH
61843: FOR_TO
61844: IFFALSE 62001
// begin _x := ShiftX ( x , d , r + i ) ;
61846: LD_ADDR_VAR 0 5
61850: PUSH
61851: LD_VAR 0 4
61855: PPUSH
61856: LD_VAR 0 8
61860: PPUSH
61861: LD_VAR 0 9
61865: PUSH
61866: LD_VAR 0 10
61870: PLUS
61871: PPUSH
61872: CALL_OW 272
61876: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61877: LD_ADDR_VAR 0 7
61881: PUSH
61882: LD_VAR 0 6
61886: PPUSH
61887: LD_VAR 0 8
61891: PPUSH
61892: LD_VAR 0 9
61896: PUSH
61897: LD_VAR 0 10
61901: PLUS
61902: PPUSH
61903: CALL_OW 273
61907: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61908: LD_VAR 0 5
61912: PPUSH
61913: LD_VAR 0 7
61917: PPUSH
61918: CALL_OW 488
61922: PUSH
61923: LD_VAR 0 5
61927: PPUSH
61928: LD_VAR 0 7
61932: PPUSH
61933: CALL_OW 428
61937: PPUSH
61938: CALL_OW 247
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: IN
61953: NOT
61954: AND
61955: IFFALSE 61999
// begin ComMoveXY ( unit , _x , _y ) ;
61957: LD_VAR 0 1
61961: PPUSH
61962: LD_VAR 0 5
61966: PPUSH
61967: LD_VAR 0 7
61971: PPUSH
61972: CALL_OW 111
// result := [ _x , _y ] ;
61976: LD_ADDR_VAR 0 3
61980: PUSH
61981: LD_VAR 0 5
61985: PUSH
61986: LD_VAR 0 7
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: ST_TO_ADDR
// exit ;
61995: POP
61996: POP
61997: GO 62003
// end ; end ;
61999: GO 61843
62001: POP
62002: POP
// end ;
62003: LD_VAR 0 3
62007: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62008: LD_INT 0
62010: PPUSH
62011: PPUSH
62012: PPUSH
// result := 0 ;
62013: LD_ADDR_VAR 0 3
62017: PUSH
62018: LD_INT 0
62020: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62021: LD_VAR 0 1
62025: PUSH
62026: LD_INT 0
62028: LESS
62029: PUSH
62030: LD_VAR 0 1
62034: PUSH
62035: LD_INT 8
62037: GREATER
62038: OR
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_INT 0
62047: LESS
62048: OR
62049: PUSH
62050: LD_VAR 0 2
62054: PUSH
62055: LD_INT 8
62057: GREATER
62058: OR
62059: IFFALSE 62063
// exit ;
62061: GO 62138
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62063: LD_ADDR_VAR 0 4
62067: PUSH
62068: LD_INT 22
62070: PUSH
62071: LD_VAR 0 2
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PPUSH
62080: CALL_OW 69
62084: PUSH
62085: FOR_IN
62086: IFFALSE 62136
// begin un := UnitShoot ( i ) ;
62088: LD_ADDR_VAR 0 5
62092: PUSH
62093: LD_VAR 0 4
62097: PPUSH
62098: CALL_OW 504
62102: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62103: LD_VAR 0 5
62107: PPUSH
62108: CALL_OW 255
62112: PUSH
62113: LD_VAR 0 1
62117: EQUAL
62118: IFFALSE 62134
// begin result := un ;
62120: LD_ADDR_VAR 0 3
62124: PUSH
62125: LD_VAR 0 5
62129: ST_TO_ADDR
// exit ;
62130: POP
62131: POP
62132: GO 62138
// end ; end ;
62134: GO 62085
62136: POP
62137: POP
// end ;
62138: LD_VAR 0 3
62142: RET
// export function GetCargoBay ( units ) ; begin
62143: LD_INT 0
62145: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62146: LD_ADDR_VAR 0 2
62150: PUSH
62151: LD_VAR 0 1
62155: PPUSH
62156: LD_INT 2
62158: PUSH
62159: LD_INT 34
62161: PUSH
62162: LD_INT 12
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 34
62171: PUSH
62172: LD_INT 51
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 34
62181: PUSH
62182: LD_INT 32
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 34
62191: PUSH
62192: LD_EXP 85
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: PPUSH
62208: CALL_OW 72
62212: ST_TO_ADDR
// end ;
62213: LD_VAR 0 2
62217: RET
// export function Negate ( value ) ; begin
62218: LD_INT 0
62220: PPUSH
// result := not value ;
62221: LD_ADDR_VAR 0 2
62225: PUSH
62226: LD_VAR 0 1
62230: NOT
62231: ST_TO_ADDR
// end ;
62232: LD_VAR 0 2
62236: RET
// export function Inc ( value ) ; begin
62237: LD_INT 0
62239: PPUSH
// result := value + 1 ;
62240: LD_ADDR_VAR 0 2
62244: PUSH
62245: LD_VAR 0 1
62249: PUSH
62250: LD_INT 1
62252: PLUS
62253: ST_TO_ADDR
// end ;
62254: LD_VAR 0 2
62258: RET
// export function Dec ( value ) ; begin
62259: LD_INT 0
62261: PPUSH
// result := value - 1 ;
62262: LD_ADDR_VAR 0 2
62266: PUSH
62267: LD_VAR 0 1
62271: PUSH
62272: LD_INT 1
62274: MINUS
62275: ST_TO_ADDR
// end ;
62276: LD_VAR 0 2
62280: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62281: LD_INT 0
62283: PPUSH
62284: PPUSH
62285: PPUSH
62286: PPUSH
62287: PPUSH
62288: PPUSH
62289: PPUSH
62290: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62291: LD_VAR 0 1
62295: PPUSH
62296: LD_VAR 0 2
62300: PPUSH
62301: CALL_OW 488
62305: NOT
62306: PUSH
62307: LD_VAR 0 3
62311: PPUSH
62312: LD_VAR 0 4
62316: PPUSH
62317: CALL_OW 488
62321: NOT
62322: OR
62323: IFFALSE 62336
// begin result := - 1 ;
62325: LD_ADDR_VAR 0 5
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: ST_TO_ADDR
// exit ;
62334: GO 62571
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62336: LD_ADDR_VAR 0 12
62340: PUSH
62341: LD_VAR 0 1
62345: PPUSH
62346: LD_VAR 0 2
62350: PPUSH
62351: LD_VAR 0 3
62355: PPUSH
62356: LD_VAR 0 4
62360: PPUSH
62361: CALL 61419 0 4
62365: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62366: LD_ADDR_VAR 0 11
62370: PUSH
62371: LD_VAR 0 1
62375: PPUSH
62376: LD_VAR 0 2
62380: PPUSH
62381: LD_VAR 0 12
62385: PUSH
62386: LD_INT 1
62388: ARRAY
62389: PPUSH
62390: LD_VAR 0 12
62394: PUSH
62395: LD_INT 2
62397: ARRAY
62398: PPUSH
62399: CALL_OW 298
62403: ST_TO_ADDR
// distance := 9999 ;
62404: LD_ADDR_VAR 0 10
62408: PUSH
62409: LD_INT 9999
62411: ST_TO_ADDR
// for i := 0 to 5 do
62412: LD_ADDR_VAR 0 6
62416: PUSH
62417: DOUBLE
62418: LD_INT 0
62420: DEC
62421: ST_TO_ADDR
62422: LD_INT 5
62424: PUSH
62425: FOR_TO
62426: IFFALSE 62569
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62428: LD_ADDR_VAR 0 7
62432: PUSH
62433: LD_VAR 0 1
62437: PPUSH
62438: LD_VAR 0 6
62442: PPUSH
62443: LD_VAR 0 11
62447: PPUSH
62448: CALL_OW 272
62452: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62453: LD_ADDR_VAR 0 8
62457: PUSH
62458: LD_VAR 0 2
62462: PPUSH
62463: LD_VAR 0 6
62467: PPUSH
62468: LD_VAR 0 11
62472: PPUSH
62473: CALL_OW 273
62477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62478: LD_VAR 0 7
62482: PPUSH
62483: LD_VAR 0 8
62487: PPUSH
62488: CALL_OW 488
62492: NOT
62493: IFFALSE 62497
// continue ;
62495: GO 62425
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62497: LD_ADDR_VAR 0 9
62501: PUSH
62502: LD_VAR 0 12
62506: PUSH
62507: LD_INT 1
62509: ARRAY
62510: PPUSH
62511: LD_VAR 0 12
62515: PUSH
62516: LD_INT 2
62518: ARRAY
62519: PPUSH
62520: LD_VAR 0 7
62524: PPUSH
62525: LD_VAR 0 8
62529: PPUSH
62530: CALL_OW 298
62534: ST_TO_ADDR
// if tmp < distance then
62535: LD_VAR 0 9
62539: PUSH
62540: LD_VAR 0 10
62544: LESS
62545: IFFALSE 62567
// begin result := i ;
62547: LD_ADDR_VAR 0 5
62551: PUSH
62552: LD_VAR 0 6
62556: ST_TO_ADDR
// distance := tmp ;
62557: LD_ADDR_VAR 0 10
62561: PUSH
62562: LD_VAR 0 9
62566: ST_TO_ADDR
// end ; end ;
62567: GO 62425
62569: POP
62570: POP
// end ;
62571: LD_VAR 0 5
62575: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62576: LD_INT 0
62578: PPUSH
62579: PPUSH
// if not driver or not IsInUnit ( driver ) then
62580: LD_VAR 0 1
62584: NOT
62585: PUSH
62586: LD_VAR 0 1
62590: PPUSH
62591: CALL_OW 310
62595: NOT
62596: OR
62597: IFFALSE 62601
// exit ;
62599: GO 62691
// vehicle := IsInUnit ( driver ) ;
62601: LD_ADDR_VAR 0 3
62605: PUSH
62606: LD_VAR 0 1
62610: PPUSH
62611: CALL_OW 310
62615: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62616: LD_VAR 0 1
62620: PPUSH
62621: LD_STRING \
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: PUSH
62651: LD_STRING E
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_VAR 0 3
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PPUSH
62687: CALL_OW 446
// end ;
62691: LD_VAR 0 2
62695: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62696: LD_INT 0
62698: PPUSH
62699: PPUSH
// if not driver or not IsInUnit ( driver ) then
62700: LD_VAR 0 1
62704: NOT
62705: PUSH
62706: LD_VAR 0 1
62710: PPUSH
62711: CALL_OW 310
62715: NOT
62716: OR
62717: IFFALSE 62721
// exit ;
62719: GO 62811
// vehicle := IsInUnit ( driver ) ;
62721: LD_ADDR_VAR 0 3
62725: PUSH
62726: LD_VAR 0 1
62730: PPUSH
62731: CALL_OW 310
62735: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62736: LD_VAR 0 1
62740: PPUSH
62741: LD_STRING \
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: PUSH
62771: LD_STRING E
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: LD_VAR 0 3
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PPUSH
62807: CALL_OW 447
// end ;
62811: LD_VAR 0 2
62815: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62816: LD_INT 0
62818: PPUSH
62819: PPUSH
62820: PPUSH
// tmp := [ ] ;
62821: LD_ADDR_VAR 0 5
62825: PUSH
62826: EMPTY
62827: ST_TO_ADDR
// for i in units do
62828: LD_ADDR_VAR 0 4
62832: PUSH
62833: LD_VAR 0 1
62837: PUSH
62838: FOR_IN
62839: IFFALSE 62877
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62841: LD_ADDR_VAR 0 5
62845: PUSH
62846: LD_VAR 0 5
62850: PPUSH
62851: LD_VAR 0 5
62855: PUSH
62856: LD_INT 1
62858: PLUS
62859: PPUSH
62860: LD_VAR 0 4
62864: PPUSH
62865: CALL_OW 256
62869: PPUSH
62870: CALL_OW 2
62874: ST_TO_ADDR
62875: GO 62838
62877: POP
62878: POP
// if not tmp then
62879: LD_VAR 0 5
62883: NOT
62884: IFFALSE 62888
// exit ;
62886: GO 62936
// if asc then
62888: LD_VAR 0 2
62892: IFFALSE 62916
// result := SortListByListAsc ( units , tmp ) else
62894: LD_ADDR_VAR 0 3
62898: PUSH
62899: LD_VAR 0 1
62903: PPUSH
62904: LD_VAR 0 5
62908: PPUSH
62909: CALL_OW 76
62913: ST_TO_ADDR
62914: GO 62936
// result := SortListByListDesc ( units , tmp ) ;
62916: LD_ADDR_VAR 0 3
62920: PUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: LD_VAR 0 5
62930: PPUSH
62931: CALL_OW 77
62935: ST_TO_ADDR
// end ;
62936: LD_VAR 0 3
62940: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62941: LD_INT 0
62943: PPUSH
62944: PPUSH
// task := GetTaskList ( mech ) ;
62945: LD_ADDR_VAR 0 4
62949: PUSH
62950: LD_VAR 0 1
62954: PPUSH
62955: CALL_OW 437
62959: ST_TO_ADDR
// if not task then
62960: LD_VAR 0 4
62964: NOT
62965: IFFALSE 62969
// exit ;
62967: GO 63011
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62969: LD_ADDR_VAR 0 3
62973: PUSH
62974: LD_VAR 0 4
62978: PUSH
62979: LD_INT 1
62981: ARRAY
62982: PUSH
62983: LD_INT 1
62985: ARRAY
62986: PUSH
62987: LD_STRING r
62989: EQUAL
62990: PUSH
62991: LD_VAR 0 4
62995: PUSH
62996: LD_INT 1
62998: ARRAY
62999: PUSH
63000: LD_INT 4
63002: ARRAY
63003: PUSH
63004: LD_VAR 0 2
63008: EQUAL
63009: AND
63010: ST_TO_ADDR
// end ;
63011: LD_VAR 0 3
63015: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63016: LD_INT 0
63018: PPUSH
// SetDir ( unit , d ) ;
63019: LD_VAR 0 1
63023: PPUSH
63024: LD_VAR 0 4
63028: PPUSH
63029: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63033: LD_VAR 0 1
63037: PPUSH
63038: LD_VAR 0 2
63042: PPUSH
63043: LD_VAR 0 3
63047: PPUSH
63048: LD_VAR 0 5
63052: PPUSH
63053: CALL_OW 48
// end ;
63057: LD_VAR 0 6
63061: RET
// export function ToNaturalNumber ( number ) ; begin
63062: LD_INT 0
63064: PPUSH
// result := number div 1 ;
63065: LD_ADDR_VAR 0 2
63069: PUSH
63070: LD_VAR 0 1
63074: PUSH
63075: LD_INT 1
63077: DIV
63078: ST_TO_ADDR
// if number < 0 then
63079: LD_VAR 0 1
63083: PUSH
63084: LD_INT 0
63086: LESS
63087: IFFALSE 63097
// result := 0 ;
63089: LD_ADDR_VAR 0 2
63093: PUSH
63094: LD_INT 0
63096: ST_TO_ADDR
// end ;
63097: LD_VAR 0 2
63101: RET
// export function SortByClass ( units , class ) ; var un ; begin
63102: LD_INT 0
63104: PPUSH
63105: PPUSH
// if not units or not class then
63106: LD_VAR 0 1
63110: NOT
63111: PUSH
63112: LD_VAR 0 2
63116: NOT
63117: OR
63118: IFFALSE 63122
// exit ;
63120: GO 63217
// result := [ ] ;
63122: LD_ADDR_VAR 0 3
63126: PUSH
63127: EMPTY
63128: ST_TO_ADDR
// for un in units do
63129: LD_ADDR_VAR 0 4
63133: PUSH
63134: LD_VAR 0 1
63138: PUSH
63139: FOR_IN
63140: IFFALSE 63215
// if GetClass ( un ) = class then
63142: LD_VAR 0 4
63146: PPUSH
63147: CALL_OW 257
63151: PUSH
63152: LD_VAR 0 2
63156: EQUAL
63157: IFFALSE 63184
// result := Insert ( result , 1 , un ) else
63159: LD_ADDR_VAR 0 3
63163: PUSH
63164: LD_VAR 0 3
63168: PPUSH
63169: LD_INT 1
63171: PPUSH
63172: LD_VAR 0 4
63176: PPUSH
63177: CALL_OW 2
63181: ST_TO_ADDR
63182: GO 63213
// result := Replace ( result , result + 1 , un ) ;
63184: LD_ADDR_VAR 0 3
63188: PUSH
63189: LD_VAR 0 3
63193: PPUSH
63194: LD_VAR 0 3
63198: PUSH
63199: LD_INT 1
63201: PLUS
63202: PPUSH
63203: LD_VAR 0 4
63207: PPUSH
63208: CALL_OW 1
63212: ST_TO_ADDR
63213: GO 63139
63215: POP
63216: POP
// end ;
63217: LD_VAR 0 3
63221: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63222: LD_INT 0
63224: PPUSH
63225: PPUSH
63226: PPUSH
63227: PPUSH
63228: PPUSH
63229: PPUSH
63230: PPUSH
// result := [ ] ;
63231: LD_ADDR_VAR 0 4
63235: PUSH
63236: EMPTY
63237: ST_TO_ADDR
// if x - r < 0 then
63238: LD_VAR 0 1
63242: PUSH
63243: LD_VAR 0 3
63247: MINUS
63248: PUSH
63249: LD_INT 0
63251: LESS
63252: IFFALSE 63264
// min_x := 0 else
63254: LD_ADDR_VAR 0 8
63258: PUSH
63259: LD_INT 0
63261: ST_TO_ADDR
63262: GO 63280
// min_x := x - r ;
63264: LD_ADDR_VAR 0 8
63268: PUSH
63269: LD_VAR 0 1
63273: PUSH
63274: LD_VAR 0 3
63278: MINUS
63279: ST_TO_ADDR
// if y - r < 0 then
63280: LD_VAR 0 2
63284: PUSH
63285: LD_VAR 0 3
63289: MINUS
63290: PUSH
63291: LD_INT 0
63293: LESS
63294: IFFALSE 63306
// min_y := 0 else
63296: LD_ADDR_VAR 0 7
63300: PUSH
63301: LD_INT 0
63303: ST_TO_ADDR
63304: GO 63322
// min_y := y - r ;
63306: LD_ADDR_VAR 0 7
63310: PUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_VAR 0 3
63320: MINUS
63321: ST_TO_ADDR
// max_x := x + r ;
63322: LD_ADDR_VAR 0 9
63326: PUSH
63327: LD_VAR 0 1
63331: PUSH
63332: LD_VAR 0 3
63336: PLUS
63337: ST_TO_ADDR
// max_y := y + r ;
63338: LD_ADDR_VAR 0 10
63342: PUSH
63343: LD_VAR 0 2
63347: PUSH
63348: LD_VAR 0 3
63352: PLUS
63353: ST_TO_ADDR
// for _x = min_x to max_x do
63354: LD_ADDR_VAR 0 5
63358: PUSH
63359: DOUBLE
63360: LD_VAR 0 8
63364: DEC
63365: ST_TO_ADDR
63366: LD_VAR 0 9
63370: PUSH
63371: FOR_TO
63372: IFFALSE 63473
// for _y = min_y to max_y do
63374: LD_ADDR_VAR 0 6
63378: PUSH
63379: DOUBLE
63380: LD_VAR 0 7
63384: DEC
63385: ST_TO_ADDR
63386: LD_VAR 0 10
63390: PUSH
63391: FOR_TO
63392: IFFALSE 63469
// begin if not ValidHex ( _x , _y ) then
63394: LD_VAR 0 5
63398: PPUSH
63399: LD_VAR 0 6
63403: PPUSH
63404: CALL_OW 488
63408: NOT
63409: IFFALSE 63413
// continue ;
63411: GO 63391
// if GetResourceTypeXY ( _x , _y ) then
63413: LD_VAR 0 5
63417: PPUSH
63418: LD_VAR 0 6
63422: PPUSH
63423: CALL_OW 283
63427: IFFALSE 63467
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63429: LD_ADDR_VAR 0 4
63433: PUSH
63434: LD_VAR 0 4
63438: PPUSH
63439: LD_VAR 0 4
63443: PUSH
63444: LD_INT 1
63446: PLUS
63447: PPUSH
63448: LD_VAR 0 5
63452: PUSH
63453: LD_VAR 0 6
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PPUSH
63462: CALL_OW 1
63466: ST_TO_ADDR
// end ;
63467: GO 63391
63469: POP
63470: POP
63471: GO 63371
63473: POP
63474: POP
// end ;
63475: LD_VAR 0 4
63479: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63480: LD_INT 0
63482: PPUSH
63483: PPUSH
63484: PPUSH
63485: PPUSH
63486: PPUSH
63487: PPUSH
63488: PPUSH
63489: PPUSH
// if not units then
63490: LD_VAR 0 1
63494: NOT
63495: IFFALSE 63499
// exit ;
63497: GO 63924
// result := UnitFilter ( units , [ f_ok ] ) ;
63499: LD_ADDR_VAR 0 3
63503: PUSH
63504: LD_VAR 0 1
63508: PPUSH
63509: LD_INT 50
63511: PUSH
63512: EMPTY
63513: LIST
63514: PPUSH
63515: CALL_OW 72
63519: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63520: LD_ADDR_VAR 0 8
63524: PUSH
63525: LD_VAR 0 1
63529: PUSH
63530: LD_INT 1
63532: ARRAY
63533: PPUSH
63534: CALL_OW 255
63538: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
63539: LD_ADDR_VAR 0 10
63543: PUSH
63544: LD_INT 29
63546: PUSH
63547: LD_EXP 88
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: ST_TO_ADDR
// if not result then
63556: LD_VAR 0 3
63560: NOT
63561: IFFALSE 63565
// exit ;
63563: GO 63924
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63565: LD_ADDR_VAR 0 5
63569: PUSH
63570: LD_INT 81
63572: PUSH
63573: LD_VAR 0 8
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PPUSH
63582: CALL_OW 69
63586: ST_TO_ADDR
// for i in result do
63587: LD_ADDR_VAR 0 4
63591: PUSH
63592: LD_VAR 0 3
63596: PUSH
63597: FOR_IN
63598: IFFALSE 63922
// begin tag := GetTag ( i ) + 1 ;
63600: LD_ADDR_VAR 0 9
63604: PUSH
63605: LD_VAR 0 4
63609: PPUSH
63610: CALL_OW 110
63614: PUSH
63615: LD_INT 1
63617: PLUS
63618: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63619: LD_ADDR_VAR 0 7
63623: PUSH
63624: LD_VAR 0 4
63628: PPUSH
63629: CALL_OW 250
63633: PPUSH
63634: LD_VAR 0 4
63638: PPUSH
63639: CALL_OW 251
63643: PPUSH
63644: LD_INT 6
63646: PPUSH
63647: CALL 63222 0 3
63651: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63652: LD_VAR 0 7
63656: PUSH
63657: LD_VAR 0 4
63661: PPUSH
63662: CALL_OW 264
63666: PUSH
63667: LD_VAR 0 10
63671: IN
63672: NOT
63673: AND
63674: IFFALSE 63713
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63676: LD_VAR 0 4
63680: PPUSH
63681: LD_VAR 0 7
63685: PUSH
63686: LD_INT 1
63688: ARRAY
63689: PUSH
63690: LD_INT 1
63692: ARRAY
63693: PPUSH
63694: LD_VAR 0 7
63698: PUSH
63699: LD_INT 1
63701: ARRAY
63702: PUSH
63703: LD_INT 2
63705: ARRAY
63706: PPUSH
63707: CALL_OW 116
63711: GO 63920
// if path > tag then
63713: LD_VAR 0 2
63717: PUSH
63718: LD_VAR 0 9
63722: GREATER
63723: IFFALSE 63890
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63725: LD_ADDR_VAR 0 6
63729: PUSH
63730: LD_VAR 0 5
63734: PPUSH
63735: LD_INT 91
63737: PUSH
63738: LD_VAR 0 4
63742: PUSH
63743: LD_INT 12
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: PPUSH
63751: CALL_OW 72
63755: ST_TO_ADDR
// if nearEnemy then
63756: LD_VAR 0 6
63760: IFFALSE 63788
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63762: LD_VAR 0 4
63766: PPUSH
63767: LD_VAR 0 6
63771: PPUSH
63772: LD_VAR 0 4
63776: PPUSH
63777: CALL_OW 74
63781: PPUSH
63782: CALL_OW 115
63786: GO 63888
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63788: LD_VAR 0 4
63792: PPUSH
63793: LD_VAR 0 2
63797: PUSH
63798: LD_VAR 0 9
63802: ARRAY
63803: PUSH
63804: LD_INT 1
63806: ARRAY
63807: PPUSH
63808: LD_VAR 0 2
63812: PUSH
63813: LD_VAR 0 9
63817: ARRAY
63818: PUSH
63819: LD_INT 2
63821: ARRAY
63822: PPUSH
63823: CALL_OW 297
63827: PUSH
63828: LD_INT 6
63830: GREATER
63831: IFFALSE 63874
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63833: LD_VAR 0 4
63837: PPUSH
63838: LD_VAR 0 2
63842: PUSH
63843: LD_VAR 0 9
63847: ARRAY
63848: PUSH
63849: LD_INT 1
63851: ARRAY
63852: PPUSH
63853: LD_VAR 0 2
63857: PUSH
63858: LD_VAR 0 9
63862: ARRAY
63863: PUSH
63864: LD_INT 2
63866: ARRAY
63867: PPUSH
63868: CALL_OW 114
63872: GO 63888
// SetTag ( i , tag ) ;
63874: LD_VAR 0 4
63878: PPUSH
63879: LD_VAR 0 9
63883: PPUSH
63884: CALL_OW 109
// end else
63888: GO 63920
// if enemy then
63890: LD_VAR 0 5
63894: IFFALSE 63920
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63896: LD_VAR 0 4
63900: PPUSH
63901: LD_VAR 0 5
63905: PPUSH
63906: LD_VAR 0 4
63910: PPUSH
63911: CALL_OW 74
63915: PPUSH
63916: CALL_OW 115
// end ;
63920: GO 63597
63922: POP
63923: POP
// end ;
63924: LD_VAR 0 3
63928: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63929: LD_INT 0
63931: PPUSH
63932: PPUSH
63933: PPUSH
// if not unit or IsInUnit ( unit ) then
63934: LD_VAR 0 1
63938: NOT
63939: PUSH
63940: LD_VAR 0 1
63944: PPUSH
63945: CALL_OW 310
63949: OR
63950: IFFALSE 63954
// exit ;
63952: GO 64045
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63954: LD_ADDR_VAR 0 4
63958: PUSH
63959: LD_VAR 0 1
63963: PPUSH
63964: CALL_OW 250
63968: PPUSH
63969: LD_VAR 0 2
63973: PPUSH
63974: LD_INT 1
63976: PPUSH
63977: CALL_OW 272
63981: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63982: LD_ADDR_VAR 0 5
63986: PUSH
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 251
63996: PPUSH
63997: LD_VAR 0 2
64001: PPUSH
64002: LD_INT 1
64004: PPUSH
64005: CALL_OW 273
64009: ST_TO_ADDR
// if ValidHex ( x , y ) then
64010: LD_VAR 0 4
64014: PPUSH
64015: LD_VAR 0 5
64019: PPUSH
64020: CALL_OW 488
64024: IFFALSE 64045
// ComTurnXY ( unit , x , y ) ;
64026: LD_VAR 0 1
64030: PPUSH
64031: LD_VAR 0 4
64035: PPUSH
64036: LD_VAR 0 5
64040: PPUSH
64041: CALL_OW 118
// end ;
64045: LD_VAR 0 3
64049: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64050: LD_INT 0
64052: PPUSH
64053: PPUSH
// result := false ;
64054: LD_ADDR_VAR 0 3
64058: PUSH
64059: LD_INT 0
64061: ST_TO_ADDR
// if not units then
64062: LD_VAR 0 2
64066: NOT
64067: IFFALSE 64071
// exit ;
64069: GO 64116
// for i in units do
64071: LD_ADDR_VAR 0 4
64075: PUSH
64076: LD_VAR 0 2
64080: PUSH
64081: FOR_IN
64082: IFFALSE 64114
// if See ( side , i ) then
64084: LD_VAR 0 1
64088: PPUSH
64089: LD_VAR 0 4
64093: PPUSH
64094: CALL_OW 292
64098: IFFALSE 64112
// begin result := true ;
64100: LD_ADDR_VAR 0 3
64104: PUSH
64105: LD_INT 1
64107: ST_TO_ADDR
// exit ;
64108: POP
64109: POP
64110: GO 64116
// end ;
64112: GO 64081
64114: POP
64115: POP
// end ;
64116: LD_VAR 0 3
64120: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64121: LD_INT 0
64123: PPUSH
64124: PPUSH
64125: PPUSH
64126: PPUSH
// if not unit or not points then
64127: LD_VAR 0 1
64131: NOT
64132: PUSH
64133: LD_VAR 0 2
64137: NOT
64138: OR
64139: IFFALSE 64143
// exit ;
64141: GO 64233
// dist := 99999 ;
64143: LD_ADDR_VAR 0 5
64147: PUSH
64148: LD_INT 99999
64150: ST_TO_ADDR
// for i in points do
64151: LD_ADDR_VAR 0 4
64155: PUSH
64156: LD_VAR 0 2
64160: PUSH
64161: FOR_IN
64162: IFFALSE 64231
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64164: LD_ADDR_VAR 0 6
64168: PUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: LD_VAR 0 4
64178: PUSH
64179: LD_INT 1
64181: ARRAY
64182: PPUSH
64183: LD_VAR 0 4
64187: PUSH
64188: LD_INT 2
64190: ARRAY
64191: PPUSH
64192: CALL_OW 297
64196: ST_TO_ADDR
// if tmpDist < dist then
64197: LD_VAR 0 6
64201: PUSH
64202: LD_VAR 0 5
64206: LESS
64207: IFFALSE 64229
// begin result := i ;
64209: LD_ADDR_VAR 0 3
64213: PUSH
64214: LD_VAR 0 4
64218: ST_TO_ADDR
// dist := tmpDist ;
64219: LD_ADDR_VAR 0 5
64223: PUSH
64224: LD_VAR 0 6
64228: ST_TO_ADDR
// end ; end ;
64229: GO 64161
64231: POP
64232: POP
// end ; end_of_file
64233: LD_VAR 0 3
64237: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64238: LD_VAR 0 1
64242: PPUSH
64243: LD_VAR 0 2
64247: PPUSH
64248: LD_VAR 0 3
64252: PPUSH
64253: LD_VAR 0 4
64257: PPUSH
64258: LD_VAR 0 5
64262: PPUSH
64263: LD_VAR 0 6
64267: PPUSH
64268: CALL 5001 0 6
// end ;
64272: PPOPN 6
64274: END
