// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6078 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6056
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 17091 0 0
5948: GO 6056
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 17224 0 0
5963: GO 6056
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 4 :
5974: CALL 17309 0 0
5978: GO 6056
5980: LD_INT 4
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackInvincible ; 5 :
5989: CALL 17757 0 0
5993: GO 6056
5995: LD_INT 5
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackInvisible ; 6 :
6004: CALL 17868 0 0
6008: GO 6056
6010: LD_INT 6
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackChangeYourSide ; 7 :
6019: CALL 17925 0 0
6023: GO 6056
6025: LD_INT 7
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackChangeUnitSide ; 8 :
6034: CALL 17967 0 0
6038: GO 6056
6040: LD_INT 8
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackFog ; end ;
6049: CALL 18068 0 0
6053: GO 6056
6055: POP
// end ; end ;
6056: PPOPN 6
6058: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6059: GO 6061
6061: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6062: LD_STRING initStreamRollete();
6064: PPUSH
6065: CALL_OW 559
// InitStreamMode ;
6069: CALL 6078 0 0
// DefineStreamItems ( ) ;
6073: CALL 6518 0 0
// end ;
6077: END
// function InitStreamMode ; begin
6078: LD_INT 0
6080: PPUSH
// streamModeActive := false ;
6081: LD_ADDR_EXP 15
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// normalCounter := 36 ;
6089: LD_ADDR_EXP 16
6093: PUSH
6094: LD_INT 36
6096: ST_TO_ADDR
// hardcoreCounter := 16 ;
6097: LD_ADDR_EXP 17
6101: PUSH
6102: LD_INT 16
6104: ST_TO_ADDR
// sRocket := false ;
6105: LD_ADDR_EXP 20
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sSpeed := false ;
6113: LD_ADDR_EXP 19
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sEngine := false ;
6121: LD_ADDR_EXP 21
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sSpec := false ;
6129: LD_ADDR_EXP 18
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sLevel := false ;
6137: LD_ADDR_EXP 22
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sArmoury := false ;
6145: LD_ADDR_EXP 23
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sRadar := false ;
6153: LD_ADDR_EXP 24
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sBunker := false ;
6161: LD_ADDR_EXP 25
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sHack := false ;
6169: LD_ADDR_EXP 26
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sFire := false ;
6177: LD_ADDR_EXP 27
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sRefresh := false ;
6185: LD_ADDR_EXP 28
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sExp := false ;
6193: LD_ADDR_EXP 29
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sDepot := false ;
6201: LD_ADDR_EXP 30
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sFlag := false ;
6209: LD_ADDR_EXP 31
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sKamikadze := false ;
6217: LD_ADDR_EXP 39
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sTroll := false ;
6225: LD_ADDR_EXP 40
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sSlow := false ;
6233: LD_ADDR_EXP 41
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sLack := false ;
6241: LD_ADDR_EXP 42
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sTank := false ;
6249: LD_ADDR_EXP 44
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sRemote := false ;
6257: LD_ADDR_EXP 45
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sPowell := false ;
6265: LD_ADDR_EXP 46
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sTeleport := false ;
6273: LD_ADDR_EXP 49
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// sOilTower := false ;
6281: LD_ADDR_EXP 51
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// sShovel := false ;
6289: LD_ADDR_EXP 52
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// sSheik := false ;
6297: LD_ADDR_EXP 53
6301: PUSH
6302: LD_INT 0
6304: ST_TO_ADDR
// sEarthquake := false ;
6305: LD_ADDR_EXP 55
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// sAI := false ;
6313: LD_ADDR_EXP 56
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// sCargo := false ;
6321: LD_ADDR_EXP 59
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// sDLaser := false ;
6329: LD_ADDR_EXP 60
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// sExchange := false ;
6337: LD_ADDR_EXP 61
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// sFac := false ;
6345: LD_ADDR_EXP 62
6349: PUSH
6350: LD_INT 0
6352: ST_TO_ADDR
// sPower := false ;
6353: LD_ADDR_EXP 63
6357: PUSH
6358: LD_INT 0
6360: ST_TO_ADDR
// sRandom := false ;
6361: LD_ADDR_EXP 64
6365: PUSH
6366: LD_INT 0
6368: ST_TO_ADDR
// sShield := false ;
6369: LD_ADDR_EXP 65
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// sTime := false ;
6377: LD_ADDR_EXP 66
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// sTools := false ;
6385: LD_ADDR_EXP 67
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// sSold := false ;
6393: LD_ADDR_EXP 32
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// sDiff := false ;
6401: LD_ADDR_EXP 33
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sFog := false ;
6409: LD_ADDR_EXP 36
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sReset := false ;
6417: LD_ADDR_EXP 37
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sSun := false ;
6425: LD_ADDR_EXP 38
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sTiger := false ;
6433: LD_ADDR_EXP 34
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sBomb := false ;
6441: LD_ADDR_EXP 35
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sWound := false ;
6449: LD_ADDR_EXP 43
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sBetray := false ;
6457: LD_ADDR_EXP 47
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sContamin := false ;
6465: LD_ADDR_EXP 48
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// sOil := false ;
6473: LD_ADDR_EXP 50
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// sStu := false ;
6481: LD_ADDR_EXP 54
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// sBazooka := false ;
6489: LD_ADDR_EXP 57
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// sMortar := false ;
6497: LD_ADDR_EXP 58
6501: PUSH
6502: LD_INT 0
6504: ST_TO_ADDR
// sRanger := false ;
6505: LD_ADDR_EXP 68
6509: PUSH
6510: LD_INT 0
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 1
6517: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
// result := [ ] ;
6525: LD_ADDR_VAR 0 1
6529: PUSH
6530: EMPTY
6531: ST_TO_ADDR
// if campaign_id = 1 then
6532: LD_OWVAR 69
6536: PUSH
6537: LD_INT 1
6539: EQUAL
6540: IFFALSE 9478
// begin case mission_number of 1 :
6542: LD_OWVAR 70
6546: PUSH
6547: LD_INT 1
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6619
6555: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6556: LD_ADDR_VAR 0 1
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 15
6575: PUSH
6576: LD_INT 16
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 23
6584: PUSH
6585: LD_INT 26
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 102
6604: PUSH
6605: LD_INT 106
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ST_TO_ADDR
6617: GO 9476
6619: LD_INT 2
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6699
6627: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6628: LD_ADDR_VAR 0 1
6632: PUSH
6633: LD_INT 2
6635: PUSH
6636: LD_INT 4
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 101
6673: PUSH
6674: LD_INT 102
6676: PUSH
6677: LD_INT 105
6679: PUSH
6680: LD_INT 106
6682: PUSH
6683: LD_INT 108
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 9476
6699: LD_INT 3
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6783
6707: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 4
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 11
6724: PUSH
6725: LD_INT 12
6727: PUSH
6728: LD_INT 15
6730: PUSH
6731: LD_INT 16
6733: PUSH
6734: LD_INT 22
6736: PUSH
6737: LD_INT 26
6739: PUSH
6740: LD_INT 36
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 105
6763: PUSH
6764: LD_INT 106
6766: PUSH
6767: LD_INT 108
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 9476
6783: LD_INT 4
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6875
6791: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: LD_INT 5
6805: PUSH
6806: LD_INT 8
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 15
6817: PUSH
6818: LD_INT 16
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 26
6829: PUSH
6830: LD_INT 36
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 101
6849: PUSH
6850: LD_INT 102
6852: PUSH
6853: LD_INT 105
6855: PUSH
6856: LD_INT 106
6858: PUSH
6859: LD_INT 108
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: ST_TO_ADDR
6873: GO 9476
6875: LD_INT 5
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6983
6883: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6884: LD_ADDR_VAR 0 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: LD_INT 8
6903: PUSH
6904: LD_INT 11
6906: PUSH
6907: LD_INT 12
6909: PUSH
6910: LD_INT 15
6912: PUSH
6913: LD_INT 16
6915: PUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 25
6924: PUSH
6925: LD_INT 26
6927: PUSH
6928: LD_INT 36
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 101
6949: PUSH
6950: LD_INT 102
6952: PUSH
6953: LD_INT 105
6955: PUSH
6956: LD_INT 106
6958: PUSH
6959: LD_INT 108
6961: PUSH
6962: LD_INT 109
6964: PUSH
6965: LD_INT 112
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 9476
6983: LD_INT 6
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7111
6991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6992: LD_ADDR_VAR 0 1
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 4
7002: PUSH
7003: LD_INT 5
7005: PUSH
7006: LD_INT 6
7008: PUSH
7009: LD_INT 8
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 12
7017: PUSH
7018: LD_INT 15
7020: PUSH
7021: LD_INT 16
7023: PUSH
7024: LD_INT 20
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 26
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 31
7047: PUSH
7048: LD_INT 32
7050: PUSH
7051: LD_INT 36
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 101
7077: PUSH
7078: LD_INT 102
7080: PUSH
7081: LD_INT 105
7083: PUSH
7084: LD_INT 106
7086: PUSH
7087: LD_INT 108
7089: PUSH
7090: LD_INT 109
7092: PUSH
7093: LD_INT 112
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
7109: GO 9476
7111: LD_INT 7
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7219
7119: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7120: LD_ADDR_VAR 0 1
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_INT 4
7130: PUSH
7131: LD_INT 5
7133: PUSH
7134: LD_INT 7
7136: PUSH
7137: LD_INT 11
7139: PUSH
7140: LD_INT 12
7142: PUSH
7143: LD_INT 15
7145: PUSH
7146: LD_INT 16
7148: PUSH
7149: LD_INT 20
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 26
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 101
7185: PUSH
7186: LD_INT 102
7188: PUSH
7189: LD_INT 103
7191: PUSH
7192: LD_INT 105
7194: PUSH
7195: LD_INT 106
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 112
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: ST_TO_ADDR
7217: GO 9476
7219: LD_INT 8
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7355
7227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7228: LD_ADDR_VAR 0 1
7232: PUSH
7233: LD_INT 2
7235: PUSH
7236: LD_INT 4
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: LD_INT 6
7244: PUSH
7245: LD_INT 7
7247: PUSH
7248: LD_INT 8
7250: PUSH
7251: LD_INT 11
7253: PUSH
7254: LD_INT 12
7256: PUSH
7257: LD_INT 15
7259: PUSH
7260: LD_INT 16
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 26
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 31
7286: PUSH
7287: LD_INT 32
7289: PUSH
7290: LD_INT 36
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 101
7317: PUSH
7318: LD_INT 102
7320: PUSH
7321: LD_INT 103
7323: PUSH
7324: LD_INT 105
7326: PUSH
7327: LD_INT 106
7329: PUSH
7330: LD_INT 108
7332: PUSH
7333: LD_INT 109
7335: PUSH
7336: LD_INT 112
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: ST_TO_ADDR
7353: GO 9476
7355: LD_INT 9
7357: DOUBLE
7358: EQUAL
7359: IFTRUE 7363
7361: GO 7499
7363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7364: LD_ADDR_VAR 0 1
7368: PUSH
7369: LD_INT 2
7371: PUSH
7372: LD_INT 4
7374: PUSH
7375: LD_INT 5
7377: PUSH
7378: LD_INT 6
7380: PUSH
7381: LD_INT 7
7383: PUSH
7384: LD_INT 8
7386: PUSH
7387: LD_INT 11
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 15
7395: PUSH
7396: LD_INT 16
7398: PUSH
7399: LD_INT 20
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: LD_INT 28
7419: PUSH
7420: LD_INT 30
7422: PUSH
7423: LD_INT 31
7425: PUSH
7426: LD_INT 32
7428: PUSH
7429: LD_INT 36
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 101
7457: PUSH
7458: LD_INT 102
7460: PUSH
7461: LD_INT 103
7463: PUSH
7464: LD_INT 105
7466: PUSH
7467: LD_INT 106
7469: PUSH
7470: LD_INT 108
7472: PUSH
7473: LD_INT 109
7475: PUSH
7476: LD_INT 112
7478: PUSH
7479: LD_INT 114
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: ST_TO_ADDR
7497: GO 9476
7499: LD_INT 10
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7691
7507: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: LD_INT 5
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: LD_INT 7
7527: PUSH
7528: LD_INT 8
7530: PUSH
7531: LD_INT 9
7533: PUSH
7534: LD_INT 10
7536: PUSH
7537: LD_INT 11
7539: PUSH
7540: LD_INT 12
7542: PUSH
7543: LD_INT 13
7545: PUSH
7546: LD_INT 14
7548: PUSH
7549: LD_INT 15
7551: PUSH
7552: LD_INT 16
7554: PUSH
7555: LD_INT 17
7557: PUSH
7558: LD_INT 18
7560: PUSH
7561: LD_INT 19
7563: PUSH
7564: LD_INT 20
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_INT 23
7575: PUSH
7576: LD_INT 24
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: LD_INT 28
7587: PUSH
7588: LD_INT 30
7590: PUSH
7591: LD_INT 31
7593: PUSH
7594: LD_INT 32
7596: PUSH
7597: LD_INT 36
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 101
7633: PUSH
7634: LD_INT 102
7636: PUSH
7637: LD_INT 103
7639: PUSH
7640: LD_INT 104
7642: PUSH
7643: LD_INT 105
7645: PUSH
7646: LD_INT 106
7648: PUSH
7649: LD_INT 107
7651: PUSH
7652: LD_INT 108
7654: PUSH
7655: LD_INT 109
7657: PUSH
7658: LD_INT 110
7660: PUSH
7661: LD_INT 111
7663: PUSH
7664: LD_INT 112
7666: PUSH
7667: LD_INT 114
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
7689: GO 9476
7691: LD_INT 11
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7891
7699: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7700: LD_ADDR_VAR 0 1
7704: PUSH
7705: LD_INT 2
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 4
7713: PUSH
7714: LD_INT 5
7716: PUSH
7717: LD_INT 6
7719: PUSH
7720: LD_INT 7
7722: PUSH
7723: LD_INT 8
7725: PUSH
7726: LD_INT 9
7728: PUSH
7729: LD_INT 10
7731: PUSH
7732: LD_INT 11
7734: PUSH
7735: LD_INT 12
7737: PUSH
7738: LD_INT 13
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: LD_INT 16
7749: PUSH
7750: LD_INT 17
7752: PUSH
7753: LD_INT 18
7755: PUSH
7756: LD_INT 19
7758: PUSH
7759: LD_INT 20
7761: PUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 22
7767: PUSH
7768: LD_INT 23
7770: PUSH
7771: LD_INT 24
7773: PUSH
7774: LD_INT 25
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: LD_INT 28
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 31
7788: PUSH
7789: LD_INT 32
7791: PUSH
7792: LD_INT 34
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 101
7833: PUSH
7834: LD_INT 102
7836: PUSH
7837: LD_INT 103
7839: PUSH
7840: LD_INT 104
7842: PUSH
7843: LD_INT 105
7845: PUSH
7846: LD_INT 106
7848: PUSH
7849: LD_INT 107
7851: PUSH
7852: LD_INT 108
7854: PUSH
7855: LD_INT 109
7857: PUSH
7858: LD_INT 110
7860: PUSH
7861: LD_INT 111
7863: PUSH
7864: LD_INT 112
7866: PUSH
7867: LD_INT 114
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9476
7891: LD_INT 12
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8107
7899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 6
7922: PUSH
7923: LD_INT 7
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: LD_INT 9
7931: PUSH
7932: LD_INT 10
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: LD_INT 12
7940: PUSH
7941: LD_INT 13
7943: PUSH
7944: LD_INT 14
7946: PUSH
7947: LD_INT 15
7949: PUSH
7950: LD_INT 16
7952: PUSH
7953: LD_INT 17
7955: PUSH
7956: LD_INT 18
7958: PUSH
7959: LD_INT 19
7961: PUSH
7962: LD_INT 20
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 23
7973: PUSH
7974: LD_INT 24
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 27
7985: PUSH
7986: LD_INT 28
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 31
7994: PUSH
7995: LD_INT 32
7997: PUSH
7998: LD_INT 33
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 36
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 101
8045: PUSH
8046: LD_INT 102
8048: PUSH
8049: LD_INT 103
8051: PUSH
8052: LD_INT 104
8054: PUSH
8055: LD_INT 105
8057: PUSH
8058: LD_INT 106
8060: PUSH
8061: LD_INT 107
8063: PUSH
8064: LD_INT 108
8066: PUSH
8067: LD_INT 109
8069: PUSH
8070: LD_INT 110
8072: PUSH
8073: LD_INT 111
8075: PUSH
8076: LD_INT 112
8078: PUSH
8079: LD_INT 113
8081: PUSH
8082: LD_INT 114
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: ST_TO_ADDR
8105: GO 9476
8107: LD_INT 13
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8311
8115: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8116: LD_ADDR_VAR 0 1
8120: PUSH
8121: LD_INT 1
8123: PUSH
8124: LD_INT 2
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 8
8138: PUSH
8139: LD_INT 9
8141: PUSH
8142: LD_INT 10
8144: PUSH
8145: LD_INT 11
8147: PUSH
8148: LD_INT 12
8150: PUSH
8151: LD_INT 14
8153: PUSH
8154: LD_INT 15
8156: PUSH
8157: LD_INT 16
8159: PUSH
8160: LD_INT 17
8162: PUSH
8163: LD_INT 18
8165: PUSH
8166: LD_INT 19
8168: PUSH
8169: LD_INT 20
8171: PUSH
8172: LD_INT 21
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_INT 23
8180: PUSH
8181: LD_INT 24
8183: PUSH
8184: LD_INT 25
8186: PUSH
8187: LD_INT 26
8189: PUSH
8190: LD_INT 27
8192: PUSH
8193: LD_INT 28
8195: PUSH
8196: LD_INT 30
8198: PUSH
8199: LD_INT 31
8201: PUSH
8202: LD_INT 32
8204: PUSH
8205: LD_INT 33
8207: PUSH
8208: LD_INT 34
8210: PUSH
8211: LD_INT 36
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 101
8249: PUSH
8250: LD_INT 102
8252: PUSH
8253: LD_INT 103
8255: PUSH
8256: LD_INT 104
8258: PUSH
8259: LD_INT 105
8261: PUSH
8262: LD_INT 106
8264: PUSH
8265: LD_INT 107
8267: PUSH
8268: LD_INT 108
8270: PUSH
8271: LD_INT 109
8273: PUSH
8274: LD_INT 110
8276: PUSH
8277: LD_INT 111
8279: PUSH
8280: LD_INT 112
8282: PUSH
8283: LD_INT 113
8285: PUSH
8286: LD_INT 114
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: ST_TO_ADDR
8309: GO 9476
8311: LD_INT 14
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8531
8319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8320: LD_ADDR_VAR 0 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: LD_INT 2
8330: PUSH
8331: LD_INT 3
8333: PUSH
8334: LD_INT 4
8336: PUSH
8337: LD_INT 5
8339: PUSH
8340: LD_INT 6
8342: PUSH
8343: LD_INT 7
8345: PUSH
8346: LD_INT 8
8348: PUSH
8349: LD_INT 9
8351: PUSH
8352: LD_INT 10
8354: PUSH
8355: LD_INT 11
8357: PUSH
8358: LD_INT 12
8360: PUSH
8361: LD_INT 13
8363: PUSH
8364: LD_INT 14
8366: PUSH
8367: LD_INT 15
8369: PUSH
8370: LD_INT 16
8372: PUSH
8373: LD_INT 17
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 19
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 21
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 24
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 28
8408: PUSH
8409: LD_INT 29
8411: PUSH
8412: LD_INT 30
8414: PUSH
8415: LD_INT 31
8417: PUSH
8418: LD_INT 32
8420: PUSH
8421: LD_INT 33
8423: PUSH
8424: LD_INT 34
8426: PUSH
8427: LD_INT 36
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 101
8469: PUSH
8470: LD_INT 102
8472: PUSH
8473: LD_INT 103
8475: PUSH
8476: LD_INT 104
8478: PUSH
8479: LD_INT 105
8481: PUSH
8482: LD_INT 106
8484: PUSH
8485: LD_INT 107
8487: PUSH
8488: LD_INT 108
8490: PUSH
8491: LD_INT 109
8493: PUSH
8494: LD_INT 110
8496: PUSH
8497: LD_INT 111
8499: PUSH
8500: LD_INT 112
8502: PUSH
8503: LD_INT 113
8505: PUSH
8506: LD_INT 114
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: ST_TO_ADDR
8529: GO 9476
8531: LD_INT 15
8533: DOUBLE
8534: EQUAL
8535: IFTRUE 8539
8537: GO 8751
8539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 27
8625: PUSH
8626: LD_INT 28
8628: PUSH
8629: LD_INT 29
8631: PUSH
8632: LD_INT 30
8634: PUSH
8635: LD_INT 31
8637: PUSH
8638: LD_INT 32
8640: PUSH
8641: LD_INT 33
8643: PUSH
8644: LD_INT 34
8646: PUSH
8647: LD_INT 36
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 101
8689: PUSH
8690: LD_INT 102
8692: PUSH
8693: LD_INT 103
8695: PUSH
8696: LD_INT 104
8698: PUSH
8699: LD_INT 105
8701: PUSH
8702: LD_INT 106
8704: PUSH
8705: LD_INT 107
8707: PUSH
8708: LD_INT 108
8710: PUSH
8711: LD_INT 109
8713: PUSH
8714: LD_INT 110
8716: PUSH
8717: LD_INT 111
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 113
8725: PUSH
8726: LD_INT 114
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9476
8751: LD_INT 16
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8883
8759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8760: LD_ADDR_VAR 0 1
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 4
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 7
8776: PUSH
8777: LD_INT 11
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: LD_INT 15
8785: PUSH
8786: LD_INT 16
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 23
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 26
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 31
8812: PUSH
8813: LD_INT 32
8815: PUSH
8816: LD_INT 33
8818: PUSH
8819: LD_INT 34
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 101
8845: PUSH
8846: LD_INT 102
8848: PUSH
8849: LD_INT 103
8851: PUSH
8852: LD_INT 106
8854: PUSH
8855: LD_INT 108
8857: PUSH
8858: LD_INT 112
8860: PUSH
8861: LD_INT 113
8863: PUSH
8864: LD_INT 114
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
8881: GO 9476
8883: LD_INT 17
8885: DOUBLE
8886: EQUAL
8887: IFTRUE 8891
8889: GO 9103
8891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: LD_INT 4
8908: PUSH
8909: LD_INT 5
8911: PUSH
8912: LD_INT 6
8914: PUSH
8915: LD_INT 7
8917: PUSH
8918: LD_INT 8
8920: PUSH
8921: LD_INT 9
8923: PUSH
8924: LD_INT 10
8926: PUSH
8927: LD_INT 11
8929: PUSH
8930: LD_INT 12
8932: PUSH
8933: LD_INT 13
8935: PUSH
8936: LD_INT 14
8938: PUSH
8939: LD_INT 15
8941: PUSH
8942: LD_INT 16
8944: PUSH
8945: LD_INT 17
8947: PUSH
8948: LD_INT 18
8950: PUSH
8951: LD_INT 19
8953: PUSH
8954: LD_INT 20
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_INT 23
8965: PUSH
8966: LD_INT 24
8968: PUSH
8969: LD_INT 25
8971: PUSH
8972: LD_INT 26
8974: PUSH
8975: LD_INT 27
8977: PUSH
8978: LD_INT 28
8980: PUSH
8981: LD_INT 29
8983: PUSH
8984: LD_INT 30
8986: PUSH
8987: LD_INT 31
8989: PUSH
8990: LD_INT 32
8992: PUSH
8993: LD_INT 33
8995: PUSH
8996: LD_INT 34
8998: PUSH
8999: LD_INT 36
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 101
9041: PUSH
9042: LD_INT 102
9044: PUSH
9045: LD_INT 103
9047: PUSH
9048: LD_INT 104
9050: PUSH
9051: LD_INT 105
9053: PUSH
9054: LD_INT 106
9056: PUSH
9057: LD_INT 107
9059: PUSH
9060: LD_INT 108
9062: PUSH
9063: LD_INT 109
9065: PUSH
9066: LD_INT 110
9068: PUSH
9069: LD_INT 111
9071: PUSH
9072: LD_INT 112
9074: PUSH
9075: LD_INT 113
9077: PUSH
9078: LD_INT 114
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: ST_TO_ADDR
9101: GO 9476
9103: LD_INT 18
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9247
9111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: LD_INT 5
9125: PUSH
9126: LD_INT 7
9128: PUSH
9129: LD_INT 11
9131: PUSH
9132: LD_INT 12
9134: PUSH
9135: LD_INT 15
9137: PUSH
9138: LD_INT 16
9140: PUSH
9141: LD_INT 20
9143: PUSH
9144: LD_INT 21
9146: PUSH
9147: LD_INT 22
9149: PUSH
9150: LD_INT 23
9152: PUSH
9153: LD_INT 25
9155: PUSH
9156: LD_INT 26
9158: PUSH
9159: LD_INT 30
9161: PUSH
9162: LD_INT 31
9164: PUSH
9165: LD_INT 32
9167: PUSH
9168: LD_INT 33
9170: PUSH
9171: LD_INT 34
9173: PUSH
9174: LD_INT 35
9176: PUSH
9177: LD_INT 36
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 101
9205: PUSH
9206: LD_INT 102
9208: PUSH
9209: LD_INT 103
9211: PUSH
9212: LD_INT 106
9214: PUSH
9215: LD_INT 108
9217: PUSH
9218: LD_INT 112
9220: PUSH
9221: LD_INT 113
9223: PUSH
9224: LD_INT 114
9226: PUSH
9227: LD_INT 115
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: ST_TO_ADDR
9245: GO 9476
9247: LD_INT 19
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9475
9255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9256: LD_ADDR_VAR 0 1
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: LD_INT 5
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: LD_INT 7
9281: PUSH
9282: LD_INT 8
9284: PUSH
9285: LD_INT 9
9287: PUSH
9288: LD_INT 10
9290: PUSH
9291: LD_INT 11
9293: PUSH
9294: LD_INT 12
9296: PUSH
9297: LD_INT 13
9299: PUSH
9300: LD_INT 14
9302: PUSH
9303: LD_INT 15
9305: PUSH
9306: LD_INT 16
9308: PUSH
9309: LD_INT 17
9311: PUSH
9312: LD_INT 18
9314: PUSH
9315: LD_INT 19
9317: PUSH
9318: LD_INT 20
9320: PUSH
9321: LD_INT 21
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_INT 23
9329: PUSH
9330: LD_INT 24
9332: PUSH
9333: LD_INT 25
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: LD_INT 27
9341: PUSH
9342: LD_INT 28
9344: PUSH
9345: LD_INT 29
9347: PUSH
9348: LD_INT 30
9350: PUSH
9351: LD_INT 31
9353: PUSH
9354: LD_INT 32
9356: PUSH
9357: LD_INT 33
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 36
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 101
9409: PUSH
9410: LD_INT 102
9412: PUSH
9413: LD_INT 103
9415: PUSH
9416: LD_INT 104
9418: PUSH
9419: LD_INT 105
9421: PUSH
9422: LD_INT 106
9424: PUSH
9425: LD_INT 107
9427: PUSH
9428: LD_INT 108
9430: PUSH
9431: LD_INT 109
9433: PUSH
9434: LD_INT 110
9436: PUSH
9437: LD_INT 111
9439: PUSH
9440: LD_INT 112
9442: PUSH
9443: LD_INT 113
9445: PUSH
9446: LD_INT 114
9448: PUSH
9449: LD_INT 115
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: ST_TO_ADDR
9473: GO 9476
9475: POP
// end else
9476: GO 9695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9478: LD_ADDR_VAR 0 1
9482: PUSH
9483: LD_INT 1
9485: PUSH
9486: LD_INT 2
9488: PUSH
9489: LD_INT 3
9491: PUSH
9492: LD_INT 4
9494: PUSH
9495: LD_INT 5
9497: PUSH
9498: LD_INT 6
9500: PUSH
9501: LD_INT 7
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: LD_INT 9
9509: PUSH
9510: LD_INT 10
9512: PUSH
9513: LD_INT 11
9515: PUSH
9516: LD_INT 12
9518: PUSH
9519: LD_INT 13
9521: PUSH
9522: LD_INT 14
9524: PUSH
9525: LD_INT 15
9527: PUSH
9528: LD_INT 16
9530: PUSH
9531: LD_INT 17
9533: PUSH
9534: LD_INT 18
9536: PUSH
9537: LD_INT 19
9539: PUSH
9540: LD_INT 20
9542: PUSH
9543: LD_INT 21
9545: PUSH
9546: LD_INT 22
9548: PUSH
9549: LD_INT 23
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 26
9560: PUSH
9561: LD_INT 27
9563: PUSH
9564: LD_INT 28
9566: PUSH
9567: LD_INT 29
9569: PUSH
9570: LD_INT 30
9572: PUSH
9573: LD_INT 31
9575: PUSH
9576: LD_INT 32
9578: PUSH
9579: LD_INT 33
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 35
9587: PUSH
9588: LD_INT 36
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 101
9631: PUSH
9632: LD_INT 102
9634: PUSH
9635: LD_INT 103
9637: PUSH
9638: LD_INT 104
9640: PUSH
9641: LD_INT 105
9643: PUSH
9644: LD_INT 106
9646: PUSH
9647: LD_INT 107
9649: PUSH
9650: LD_INT 108
9652: PUSH
9653: LD_INT 109
9655: PUSH
9656: LD_INT 110
9658: PUSH
9659: LD_INT 111
9661: PUSH
9662: LD_INT 112
9664: PUSH
9665: LD_INT 113
9667: PUSH
9668: LD_INT 114
9670: PUSH
9671: LD_INT 115
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: ST_TO_ADDR
// if result then
9695: LD_VAR 0 1
9699: IFFALSE 9988
// begin normal :=  ;
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_STRING 
9708: ST_TO_ADDR
// hardcore :=  ;
9709: LD_ADDR_VAR 0 4
9713: PUSH
9714: LD_STRING 
9716: ST_TO_ADDR
// for i = 1 to normalCounter do
9717: LD_ADDR_VAR 0 5
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_EXP 16
9731: PUSH
9732: FOR_TO
9733: IFFALSE 9834
// begin tmp := 0 ;
9735: LD_ADDR_VAR 0 2
9739: PUSH
9740: LD_STRING 0
9742: ST_TO_ADDR
// if result [ 1 ] then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: IFFALSE 9816
// if result [ 1 ] [ 1 ] = i then
9753: LD_VAR 0 1
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PUSH
9766: LD_VAR 0 5
9770: EQUAL
9771: IFFALSE 9816
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 1
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 3
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
// tmp := 1 ;
9808: LD_ADDR_VAR 0 2
9812: PUSH
9813: LD_STRING 1
9815: ST_TO_ADDR
// end ; normal := normal & tmp ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_VAR 0 2
9830: STR
9831: ST_TO_ADDR
// end ;
9832: GO 9732
9834: POP
9835: POP
// for i = 1 to hardcoreCounter do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: DOUBLE
9842: LD_INT 1
9844: DEC
9845: ST_TO_ADDR
9846: LD_EXP 17
9850: PUSH
9851: FOR_TO
9852: IFFALSE 9957
// begin tmp := 0 ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_STRING 0
9861: ST_TO_ADDR
// if result [ 2 ] then
9862: LD_VAR 0 1
9866: PUSH
9867: LD_INT 2
9869: ARRAY
9870: IFFALSE 9939
// if result [ 2 ] [ 1 ] = 100 + i then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 2
9879: ARRAY
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PUSH
9885: LD_INT 100
9887: PUSH
9888: LD_VAR 0 5
9892: PLUS
9893: EQUAL
9894: IFFALSE 9939
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 2
9908: PPUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 2
9916: ARRAY
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 3
9925: PPUSH
9926: CALL_OW 1
9930: ST_TO_ADDR
// tmp := 1 ;
9931: LD_ADDR_VAR 0 2
9935: PUSH
9936: LD_STRING 1
9938: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: LD_VAR 0 4
9948: PUSH
9949: LD_VAR 0 2
9953: STR
9954: ST_TO_ADDR
// end ;
9955: GO 9851
9957: POP
9958: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9959: LD_STRING getStreamItemsFromMission("
9961: PUSH
9962: LD_VAR 0 3
9966: STR
9967: PUSH
9968: LD_STRING ","
9970: STR
9971: PUSH
9972: LD_VAR 0 4
9976: STR
9977: PUSH
9978: LD_STRING ")
9980: STR
9981: PPUSH
9982: CALL_OW 559
// end else
9986: GO 9995
// ToLua ( getStreamItemsFromMission("","") ) ;
9988: LD_STRING getStreamItemsFromMission("","")
9990: PPUSH
9991: CALL_OW 559
// end ;
9995: LD_VAR 0 1
9999: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10000: LD_EXP 15
10004: PUSH
10005: LD_EXP 20
10009: AND
10010: IFFALSE 10134
10012: GO 10014
10014: DISABLE
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
// begin enable ;
10019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_OWVAR 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: LD_INT 34
10042: PUSH
10043: LD_INT 7
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 34
10052: PUSH
10053: LD_INT 45
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 28
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 34
10072: PUSH
10073: LD_INT 47
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: ST_TO_ADDR
// if not tmp then
10096: LD_VAR 0 2
10100: NOT
10101: IFFALSE 10105
// exit ;
10103: GO 10134
// for i in tmp do
10105: LD_ADDR_VAR 0 1
10109: PUSH
10110: LD_VAR 0 2
10114: PUSH
10115: FOR_IN
10116: IFFALSE 10132
// begin SetLives ( i , 0 ) ;
10118: LD_VAR 0 1
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 234
// end ;
10130: GO 10115
10132: POP
10133: POP
// end ;
10134: PPOPN 2
10136: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10137: LD_EXP 15
10141: PUSH
10142: LD_EXP 21
10146: AND
10147: IFFALSE 10231
10149: GO 10151
10151: DISABLE
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
// begin enable ;
10156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10157: LD_ADDR_VAR 0 2
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_OWVAR 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 32
10176: PUSH
10177: LD_INT 3
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not tmp then
10193: LD_VAR 0 2
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10231
// for i in tmp do
10202: LD_ADDR_VAR 0 1
10206: PUSH
10207: LD_VAR 0 2
10211: PUSH
10212: FOR_IN
10213: IFFALSE 10229
// begin SetLives ( i , 0 ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_INT 0
10222: PPUSH
10223: CALL_OW 234
// end ;
10227: GO 10212
10229: POP
10230: POP
// end ;
10231: PPOPN 2
10233: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10234: LD_EXP 15
10238: PUSH
10239: LD_EXP 18
10243: AND
10244: IFFALSE 10337
10246: GO 10248
10248: DISABLE
10249: LD_INT 0
10251: PPUSH
// begin enable ;
10252: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10253: LD_ADDR_VAR 0 1
10257: PUSH
10258: LD_INT 22
10260: PUSH
10261: LD_OWVAR 2
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 25
10285: PUSH
10286: LD_INT 9
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 25
10295: PUSH
10296: LD_INT 8
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: PUSH
10318: FOR_IN
10319: IFFALSE 10335
// begin SetClass ( i , 1 ) ;
10321: LD_VAR 0 1
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 336
// end ;
10333: GO 10318
10335: POP
10336: POP
// end ;
10337: PPOPN 1
10339: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10340: LD_EXP 15
10344: PUSH
10345: LD_EXP 19
10349: AND
10350: PUSH
10351: LD_OWVAR 65
10355: PUSH
10356: LD_INT 7
10358: LESS
10359: AND
10360: IFFALSE 10374
10362: GO 10364
10364: DISABLE
// begin enable ;
10365: ENABLE
// game_speed := 7 ;
10366: LD_ADDR_OWVAR 65
10370: PUSH
10371: LD_INT 7
10373: ST_TO_ADDR
// end ;
10374: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10375: LD_EXP 15
10379: PUSH
10380: LD_EXP 22
10384: AND
10385: IFFALSE 10587
10387: GO 10389
10389: DISABLE
10390: LD_INT 0
10392: PPUSH
10393: PPUSH
10394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_INT 81
10402: PUSH
10403: LD_OWVAR 2
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 3
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10587
// if tmp > 5 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 5
10447: GREATER
10448: IFFALSE 10460
// k := 5 else
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 5
10457: ST_TO_ADDR
10458: GO 10470
// k := tmp ;
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: LD_VAR 0 3
10469: ST_TO_ADDR
// for i := 1 to k do
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: DOUBLE
10476: LD_INT 1
10478: DEC
10479: ST_TO_ADDR
10480: LD_VAR 0 2
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10585
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10488: LD_VAR 0 3
10492: PUSH
10493: LD_VAR 0 1
10497: ARRAY
10498: PPUSH
10499: LD_VAR 0 1
10503: PUSH
10504: LD_INT 4
10506: MOD
10507: PUSH
10508: LD_INT 1
10510: PLUS
10511: PPUSH
10512: CALL_OW 259
10516: PUSH
10517: LD_INT 10
10519: LESS
10520: IFFALSE 10583
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10522: LD_VAR 0 3
10526: PUSH
10527: LD_VAR 0 1
10531: ARRAY
10532: PPUSH
10533: LD_VAR 0 1
10537: PUSH
10538: LD_INT 4
10540: MOD
10541: PUSH
10542: LD_INT 1
10544: PLUS
10545: PPUSH
10546: LD_VAR 0 3
10550: PUSH
10551: LD_VAR 0 1
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 4
10564: MOD
10565: PUSH
10566: LD_INT 1
10568: PLUS
10569: PPUSH
10570: CALL_OW 259
10574: PUSH
10575: LD_INT 1
10577: PLUS
10578: PPUSH
10579: CALL_OW 237
10583: GO 10485
10585: POP
10586: POP
// end ;
10587: PPOPN 3
10589: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10590: LD_EXP 15
10594: PUSH
10595: LD_EXP 23
10599: AND
10600: IFFALSE 10620
10602: GO 10604
10604: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10605: LD_INT 4
10607: PPUSH
10608: LD_OWVAR 2
10612: PPUSH
10613: LD_INT 0
10615: PPUSH
10616: CALL_OW 324
10620: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10621: LD_EXP 15
10625: PUSH
10626: LD_EXP 52
10630: AND
10631: IFFALSE 10651
10633: GO 10635
10635: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10636: LD_INT 19
10638: PPUSH
10639: LD_OWVAR 2
10643: PPUSH
10644: LD_INT 0
10646: PPUSH
10647: CALL_OW 324
10651: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10652: LD_EXP 15
10656: PUSH
10657: LD_EXP 24
10661: AND
10662: IFFALSE 10764
10664: GO 10666
10666: DISABLE
10667: LD_INT 0
10669: PPUSH
10670: PPUSH
// begin enable ;
10671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10672: LD_ADDR_VAR 0 2
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_OWVAR 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 34
10694: PUSH
10695: LD_INT 11
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 34
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: ST_TO_ADDR
// if not tmp then
10726: LD_VAR 0 2
10730: NOT
10731: IFFALSE 10735
// exit ;
10733: GO 10764
// for i in tmp do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_VAR 0 2
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10762
// begin SetLives ( i , 0 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 234
// end ;
10760: GO 10745
10762: POP
10763: POP
// end ;
10764: PPOPN 2
10766: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10767: LD_EXP 15
10771: PUSH
10772: LD_EXP 25
10776: AND
10777: IFFALSE 10797
10779: GO 10781
10781: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10782: LD_INT 32
10784: PPUSH
10785: LD_OWVAR 2
10789: PPUSH
10790: LD_INT 0
10792: PPUSH
10793: CALL_OW 324
10797: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10798: LD_EXP 15
10802: PUSH
10803: LD_EXP 26
10807: AND
10808: IFFALSE 10989
10810: GO 10812
10812: DISABLE
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
10817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_OWVAR 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 33
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: ST_TO_ADDR
// if not tmp then
10854: LD_VAR 0 2
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 10989
// side := 0 ;
10863: LD_ADDR_VAR 0 3
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// for i := 1 to 8 do
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 8
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10933
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10887: LD_OWVAR 2
10891: PUSH
10892: LD_VAR 0 1
10896: NONEQUAL
10897: PUSH
10898: LD_OWVAR 2
10902: PPUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 81
10912: PUSH
10913: LD_INT 2
10915: EQUAL
10916: AND
10917: IFFALSE 10931
// begin side := i ;
10919: LD_ADDR_VAR 0 3
10923: PUSH
10924: LD_VAR 0 1
10928: ST_TO_ADDR
// break ;
10929: GO 10933
// end ;
10931: GO 10884
10933: POP
10934: POP
// if not side then
10935: LD_VAR 0 3
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 10989
// for i := 1 to tmp do
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: DOUBLE
10950: LD_INT 1
10952: DEC
10953: ST_TO_ADDR
10954: LD_VAR 0 2
10958: PUSH
10959: FOR_TO
10960: IFFALSE 10987
// if Prob ( 60 ) then
10962: LD_INT 60
10964: PPUSH
10965: CALL_OW 13
10969: IFFALSE 10985
// SetSide ( i , side ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: CALL_OW 235
10985: GO 10959
10987: POP
10988: POP
// end ;
10989: PPOPN 3
10991: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10992: LD_EXP 15
10996: PUSH
10997: LD_EXP 28
11001: AND
11002: IFFALSE 11121
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: LD_INT 22
11017: PUSH
11018: LD_OWVAR 2
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: FOR_IN
11065: IFFALSE 11119
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 257
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: IN
11095: IFFALSE 11117
// SetClass ( un , rand ( 1 , 4 ) ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_INT 4
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 336
11117: GO 11064
11119: POP
11120: POP
// end ;
11121: PPOPN 1
11123: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11124: LD_EXP 15
11128: PUSH
11129: LD_EXP 27
11133: AND
11134: IFFALSE 11213
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_OWVAR 2
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 21
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: ST_TO_ADDR
// if not tmp then
11178: LD_VAR 0 1
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_VAR 0 1
11199: PPUSH
11200: CALL_OW 12
11204: ARRAY
11205: PPUSH
11206: LD_INT 100
11208: PPUSH
11209: CALL_OW 234
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11216: LD_EXP 15
11220: PUSH
11221: LD_EXP 29
11225: AND
11226: IFFALSE 11324
11228: GO 11230
11230: DISABLE
11231: LD_INT 0
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: ST_TO_ADDR
// if not tmp then
11270: LD_VAR 0 1
11274: NOT
11275: IFFALSE 11279
// exit ;
11277: GO 11324
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 1
11291: PPUSH
11292: CALL_OW 12
11296: ARRAY
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 4
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 3000
11311: PPUSH
11312: LD_INT 9000
11314: PPUSH
11315: CALL_OW 12
11319: PPUSH
11320: CALL_OW 492
// end ;
11324: PPOPN 1
11326: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11327: LD_EXP 15
11331: PUSH
11332: LD_EXP 30
11336: AND
11337: IFFALSE 11357
11339: GO 11341
11341: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11342: LD_INT 1
11344: PPUSH
11345: LD_OWVAR 2
11349: PPUSH
11350: LD_INT 0
11352: PPUSH
11353: CALL_OW 324
11357: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11358: LD_EXP 15
11362: PUSH
11363: LD_EXP 31
11367: AND
11368: IFFALSE 11451
11370: GO 11372
11372: DISABLE
11373: LD_INT 0
11375: PPUSH
11376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11377: LD_ADDR_VAR 0 2
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_OWVAR 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 21
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PPUSH
11408: CALL_OW 69
11412: ST_TO_ADDR
// if not tmp then
11413: LD_VAR 0 2
11417: NOT
11418: IFFALSE 11422
// exit ;
11420: GO 11451
// for i in tmp do
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_VAR 0 2
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetBLevel ( i , 10 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 10
11442: PPUSH
11443: CALL_OW 241
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 2
11453: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11454: LD_EXP 15
11458: PUSH
11459: LD_EXP 32
11463: AND
11464: IFFALSE 11575
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_OWVAR 2
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 25
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: ST_TO_ADDR
// if not tmp then
11510: LD_VAR 0 3
11514: NOT
11515: IFFALSE 11519
// exit ;
11517: GO 11575
// un := tmp [ rand ( 1 , tmp ) ] ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_VAR 0 3
11528: PUSH
11529: LD_INT 1
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: CALL_OW 12
11541: ARRAY
11542: ST_TO_ADDR
// if Crawls ( un ) then
11543: LD_VAR 0 2
11547: PPUSH
11548: CALL_OW 318
11552: IFFALSE 11563
// ComWalk ( un ) ;
11554: LD_VAR 0 2
11558: PPUSH
11559: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 5
11570: PPUSH
11571: CALL_OW 336
// end ;
11575: PPOPN 3
11577: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11578: LD_EXP 15
11582: PUSH
11583: LD_EXP 33
11587: AND
11588: PUSH
11589: LD_OWVAR 67
11593: PUSH
11594: LD_INT 3
11596: LESS
11597: AND
11598: IFFALSE 11617
11600: GO 11602
11602: DISABLE
// Difficulty := Difficulty + 1 ;
11603: LD_ADDR_OWVAR 67
11607: PUSH
11608: LD_OWVAR 67
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: ST_TO_ADDR
11617: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11618: LD_EXP 15
11622: PUSH
11623: LD_EXP 34
11627: AND
11628: IFFALSE 11731
11630: GO 11632
11632: DISABLE
11633: LD_INT 0
11635: PPUSH
// begin for i := 1 to 5 do
11636: LD_ADDR_VAR 0 1
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 5
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11729
// begin uc_nation := nation_nature ;
11652: LD_ADDR_OWVAR 21
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// uc_side := 0 ;
11660: LD_ADDR_OWVAR 20
11664: PUSH
11665: LD_INT 0
11667: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11668: LD_ADDR_OWVAR 29
11672: PUSH
11673: LD_INT 12
11675: PUSH
11676: LD_INT 12
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
// hc_agressivity := 20 ;
11683: LD_ADDR_OWVAR 35
11687: PUSH
11688: LD_INT 20
11690: ST_TO_ADDR
// hc_class := class_tiger ;
11691: LD_ADDR_OWVAR 28
11695: PUSH
11696: LD_INT 14
11698: ST_TO_ADDR
// hc_gallery :=  ;
11699: LD_ADDR_OWVAR 33
11703: PUSH
11704: LD_STRING 
11706: ST_TO_ADDR
// hc_name :=  ;
11707: LD_ADDR_OWVAR 26
11711: PUSH
11712: LD_STRING 
11714: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11715: CALL_OW 44
11719: PPUSH
11720: LD_INT 0
11722: PPUSH
11723: CALL_OW 51
// end ;
11727: GO 11649
11729: POP
11730: POP
// end ;
11731: PPOPN 1
11733: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11734: LD_EXP 15
11738: PUSH
11739: LD_EXP 35
11743: AND
11744: IFFALSE 11753
11746: GO 11748
11748: DISABLE
// StreamSibBomb ;
11749: CALL 11754 0 0
11753: END
// export function StreamSibBomb ; var i , x , y ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
// result := false ;
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// for i := 1 to 16 do
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: DOUBLE
11774: LD_INT 1
11776: DEC
11777: ST_TO_ADDR
11778: LD_INT 16
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11981
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 10
11791: PUSH
11792: LD_INT 20
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 40
11800: PUSH
11801: LD_INT 50
11803: PUSH
11804: LD_INT 60
11806: PUSH
11807: LD_INT 70
11809: PUSH
11810: LD_INT 80
11812: PUSH
11813: LD_INT 90
11815: PUSH
11816: LD_INT 100
11818: PUSH
11819: LD_INT 110
11821: PUSH
11822: LD_INT 120
11824: PUSH
11825: LD_INT 130
11827: PUSH
11828: LD_INT 140
11830: PUSH
11831: LD_INT 150
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 15
11856: PPUSH
11857: CALL_OW 12
11861: ARRAY
11862: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_INT 10
11870: PUSH
11871: LD_INT 20
11873: PUSH
11874: LD_INT 30
11876: PUSH
11877: LD_INT 40
11879: PUSH
11880: LD_INT 50
11882: PUSH
11883: LD_INT 60
11885: PUSH
11886: LD_INT 70
11888: PUSH
11889: LD_INT 80
11891: PUSH
11892: LD_INT 90
11894: PUSH
11895: LD_INT 100
11897: PUSH
11898: LD_INT 110
11900: PUSH
11901: LD_INT 120
11903: PUSH
11904: LD_INT 130
11906: PUSH
11907: LD_INT 140
11909: PUSH
11910: LD_INT 150
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_INT 15
11935: PPUSH
11936: CALL_OW 12
11940: ARRAY
11941: ST_TO_ADDR
// if ValidHex ( x , y ) then
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_VAR 0 4
11951: PPUSH
11952: CALL_OW 488
11956: IFFALSE 11979
// begin result := [ x , y ] ;
11958: LD_ADDR_VAR 0 1
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: LD_VAR 0 4
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: ST_TO_ADDR
// break ;
11977: GO 11981
// end ; end ;
11979: GO 11781
11981: POP
11982: POP
// if result then
11983: LD_VAR 0 1
11987: IFFALSE 12047
// begin ToLua ( playSibBomb() ) ;
11989: LD_STRING playSibBomb()
11991: PPUSH
11992: CALL_OW 559
// wait ( 0 0$14 ) ;
11996: LD_INT 490
11998: PPUSH
11999: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12003: LD_VAR 0 1
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: LD_VAR 0 1
12016: PUSH
12017: LD_INT 2
12019: ARRAY
12020: PPUSH
12021: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 429
// end ; end ;
12047: LD_VAR 0 1
12051: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12052: LD_EXP 15
12056: PUSH
12057: LD_EXP 37
12061: AND
12062: IFFALSE 12074
12064: GO 12066
12066: DISABLE
// YouLost (  ) ;
12067: LD_STRING 
12069: PPUSH
12070: CALL_OW 104
12074: END
// every 0 0$1 trigger StreamModeActive and sFog do
12075: LD_EXP 15
12079: PUSH
12080: LD_EXP 36
12084: AND
12085: IFFALSE 12099
12087: GO 12089
12089: DISABLE
// FogOff ( your_side ) ;
12090: LD_OWVAR 2
12094: PPUSH
12095: CALL_OW 344
12099: END
// every 0 0$1 trigger StreamModeActive and sSun do
12100: LD_EXP 15
12104: PUSH
12105: LD_EXP 38
12109: AND
12110: IFFALSE 12138
12112: GO 12114
12114: DISABLE
// begin solar_recharge_percent := 0 ;
12115: LD_ADDR_OWVAR 79
12119: PUSH
12120: LD_INT 0
12122: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12123: LD_INT 10500
12125: PPUSH
12126: CALL_OW 67
// solar_recharge_percent := 100 ;
12130: LD_ADDR_OWVAR 79
12134: PUSH
12135: LD_INT 100
12137: ST_TO_ADDR
// end ;
12138: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12139: LD_EXP 15
12143: PUSH
12144: LD_EXP 39
12148: AND
12149: IFFALSE 12388
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
12157: PPUSH
12158: PPUSH
// begin tmp := [ ] ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: EMPTY
12165: ST_TO_ADDR
// for i := 1 to 6 do
12166: LD_ADDR_VAR 0 1
12170: PUSH
12171: DOUBLE
12172: LD_INT 1
12174: DEC
12175: ST_TO_ADDR
12176: LD_INT 6
12178: PUSH
12179: FOR_TO
12180: IFFALSE 12285
// begin uc_nation := nation_nature ;
12182: LD_ADDR_OWVAR 21
12186: PUSH
12187: LD_INT 0
12189: ST_TO_ADDR
// uc_side := 0 ;
12190: LD_ADDR_OWVAR 20
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12198: LD_ADDR_OWVAR 29
12202: PUSH
12203: LD_INT 12
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: ST_TO_ADDR
// hc_agressivity := 20 ;
12213: LD_ADDR_OWVAR 35
12217: PUSH
12218: LD_INT 20
12220: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12221: LD_ADDR_OWVAR 28
12225: PUSH
12226: LD_INT 17
12228: ST_TO_ADDR
// hc_gallery :=  ;
12229: LD_ADDR_OWVAR 33
12233: PUSH
12234: LD_STRING 
12236: ST_TO_ADDR
// hc_name :=  ;
12237: LD_ADDR_OWVAR 26
12241: PUSH
12242: LD_STRING 
12244: ST_TO_ADDR
// un := CreateHuman ;
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: CALL_OW 44
12254: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12255: LD_VAR 0 2
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 51
// tmp := tmp ^ un ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 2
12281: ADD
12282: ST_TO_ADDR
// end ;
12283: GO 12179
12285: POP
12286: POP
// repeat wait ( 0 0$1 ) ;
12287: LD_INT 35
12289: PPUSH
12290: CALL_OW 67
// for un in tmp do
12294: LD_ADDR_VAR 0 2
12298: PUSH
12299: LD_VAR 0 3
12303: PUSH
12304: FOR_IN
12305: IFFALSE 12379
// begin if IsDead ( un ) then
12307: LD_VAR 0 2
12311: PPUSH
12312: CALL_OW 301
12316: IFFALSE 12336
// begin tmp := tmp diff un ;
12318: LD_ADDR_VAR 0 3
12322: PUSH
12323: LD_VAR 0 3
12327: PUSH
12328: LD_VAR 0 2
12332: DIFF
12333: ST_TO_ADDR
// continue ;
12334: GO 12304
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12336: LD_VAR 0 2
12340: PPUSH
12341: LD_INT 3
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_INT 0
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PPUSH
12363: LD_VAR 0 2
12367: PPUSH
12368: CALL_OW 74
12372: PPUSH
12373: CALL_OW 115
// end ;
12377: GO 12304
12379: POP
12380: POP
// until not tmp ;
12381: LD_VAR 0 3
12385: NOT
12386: IFFALSE 12287
// end ;
12388: PPOPN 3
12390: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12391: LD_EXP 15
12395: PUSH
12396: LD_EXP 40
12400: AND
12401: IFFALSE 12455
12403: GO 12405
12405: DISABLE
// begin ToLua ( displayTroll(); ) ;
12406: LD_STRING displayTroll();
12408: PPUSH
12409: CALL_OW 559
// wait ( 3 3$00 ) ;
12413: LD_INT 6300
12415: PPUSH
12416: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12420: LD_STRING hideTroll();
12422: PPUSH
12423: CALL_OW 559
// wait ( 1 1$00 ) ;
12427: LD_INT 2100
12429: PPUSH
12430: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12434: LD_STRING displayTroll();
12436: PPUSH
12437: CALL_OW 559
// wait ( 1 1$00 ) ;
12441: LD_INT 2100
12443: PPUSH
12444: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12448: LD_STRING hideTroll();
12450: PPUSH
12451: CALL_OW 559
// end ;
12455: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12456: LD_EXP 15
12460: PUSH
12461: LD_EXP 41
12465: AND
12466: IFFALSE 12529
12468: GO 12470
12470: DISABLE
12471: LD_INT 0
12473: PPUSH
// begin p := 0 ;
12474: LD_ADDR_VAR 0 1
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// repeat game_speed := 1 ;
12482: LD_ADDR_OWVAR 65
12486: PUSH
12487: LD_INT 1
12489: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12490: LD_INT 35
12492: PPUSH
12493: CALL_OW 67
// p := p + 1 ;
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 1
12509: PLUS
12510: ST_TO_ADDR
// until p >= 60 ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 60
12518: GREATEREQUAL
12519: IFFALSE 12482
// game_speed := 4 ;
12521: LD_ADDR_OWVAR 65
12525: PUSH
12526: LD_INT 4
12528: ST_TO_ADDR
// end ;
12529: PPOPN 1
12531: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12532: LD_EXP 15
12536: PUSH
12537: LD_EXP 42
12541: AND
12542: IFFALSE 12688
12544: GO 12546
12546: DISABLE
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12551: LD_ADDR_VAR 0 1
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: LD_OWVAR 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 0
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 1
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PPUSH
12600: CALL_OW 69
12604: ST_TO_ADDR
// if not depot then
12605: LD_VAR 0 1
12609: NOT
12610: IFFALSE 12614
// exit ;
12612: GO 12688
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: CALL_OW 274
12642: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12643: LD_VAR 0 2
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: LD_INT 0
12668: PPUSH
12669: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12673: LD_VAR 0 2
12677: PPUSH
12678: LD_INT 3
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 277
// end ;
12688: PPOPN 2
12690: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12691: LD_EXP 15
12695: PUSH
12696: LD_EXP 43
12700: AND
12701: IFFALSE 12798
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_OWVAR 2
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 0
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 1
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 12
12789: ARRAY
12790: PPUSH
12791: LD_INT 200
12793: PPUSH
12794: CALL_OW 234
// end ;
12798: PPOPN 1
12800: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12801: LD_EXP 15
12805: PUSH
12806: LD_EXP 44
12810: AND
12811: IFFALSE 12890
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_OWVAR 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// if not tmp then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 12890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 12
12881: ARRAY
12882: PPUSH
12883: LD_INT 60
12885: PPUSH
12886: CALL_OW 234
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12893: LD_EXP 15
12897: PUSH
12898: LD_EXP 45
12902: AND
12903: IFFALSE 13002
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
// begin enable ;
12912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 61
12932: PUSH
12933: EMPTY
12934: LIST
12935: PUSH
12936: LD_INT 33
12938: PUSH
12939: LD_INT 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// if not tmp then
12956: LD_VAR 0 1
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 13002
// for i in tmp do
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_VAR 0 1
12974: PUSH
12975: FOR_IN
12976: IFFALSE 13000
// if IsControledBy ( i ) then
12978: LD_VAR 0 2
12982: PPUSH
12983: CALL_OW 312
12987: IFFALSE 12998
// ComUnlink ( i ) ;
12989: LD_VAR 0 2
12993: PPUSH
12994: CALL_OW 136
12998: GO 12975
13000: POP
13001: POP
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13005: LD_EXP 15
13009: PUSH
13010: LD_EXP 46
13014: AND
13015: IFFALSE 13155
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
13023: PPUSH
// begin ToLua ( displayPowell(); ) ;
13024: LD_STRING displayPowell();
13026: PPUSH
13027: CALL_OW 559
// uc_side := 0 ;
13031: LD_ADDR_OWVAR 20
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// uc_nation := 2 ;
13039: LD_ADDR_OWVAR 21
13043: PUSH
13044: LD_INT 2
13046: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13047: LD_ADDR_OWVAR 37
13051: PUSH
13052: LD_INT 14
13054: ST_TO_ADDR
// vc_engine := engine_siberite ;
13055: LD_ADDR_OWVAR 39
13059: PUSH
13060: LD_INT 3
13062: ST_TO_ADDR
// vc_control := control_apeman ;
13063: LD_ADDR_OWVAR 38
13067: PUSH
13068: LD_INT 5
13070: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13071: LD_ADDR_OWVAR 40
13075: PUSH
13076: LD_INT 29
13078: ST_TO_ADDR
// un := CreateVehicle ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: CALL_OW 45
13088: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13089: LD_VAR 0 2
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13101: LD_INT 35
13103: PPUSH
13104: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13108: LD_VAR 0 2
13112: PPUSH
13113: LD_INT 22
13115: PUSH
13116: LD_OWVAR 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PPUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: CALL_OW 74
13139: PPUSH
13140: CALL_OW 115
// until IsDead ( un ) ;
13144: LD_VAR 0 2
13148: PPUSH
13149: CALL_OW 301
13153: IFFALSE 13101
// end ;
13155: PPOPN 2
13157: END
// every 0 0$1 trigger StreamModeActive and sStu do
13158: LD_EXP 15
13162: PUSH
13163: LD_EXP 54
13167: AND
13168: IFFALSE 13184
13170: GO 13172
13172: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13173: LD_STRING displayStucuk();
13175: PPUSH
13176: CALL_OW 559
// ResetFog ;
13180: CALL_OW 335
// end ;
13184: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13185: LD_EXP 15
13189: PUSH
13190: LD_EXP 47
13194: AND
13195: IFFALSE 13336
13197: GO 13199
13199: DISABLE
13200: LD_INT 0
13202: PPUSH
13203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_OWVAR 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: ST_TO_ADDR
// if not tmp then
13240: LD_VAR 0 2
13244: NOT
13245: IFFALSE 13249
// exit ;
13247: GO 13336
// un := tmp [ rand ( 1 , tmp ) ] ;
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: LD_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: PPUSH
13262: LD_VAR 0 2
13266: PPUSH
13267: CALL_OW 12
13271: ARRAY
13272: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 0
13280: PPUSH
13281: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_OWVAR 3
13294: PUSH
13295: LD_VAR 0 1
13299: DIFF
13300: PPUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 74
13310: PPUSH
13311: CALL_OW 115
// wait ( 0 0$20 ) ;
13315: LD_INT 700
13317: PPUSH
13318: CALL_OW 67
// SetSide ( un , your_side ) ;
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_OWVAR 2
13331: PPUSH
13332: CALL_OW 235
// end ;
13336: PPOPN 2
13338: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13339: LD_EXP 15
13343: PUSH
13344: LD_EXP 48
13348: AND
13349: IFFALSE 13455
13351: GO 13353
13353: DISABLE
13354: LD_INT 0
13356: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13357: LD_ADDR_VAR 0 1
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_OWVAR 2
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 0
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if not depot then
13411: LD_VAR 0 1
13415: NOT
13416: IFFALSE 13420
// exit ;
13418: GO 13455
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 250
13433: PPUSH
13434: LD_VAR 0 1
13438: PUSH
13439: LD_INT 1
13441: ARRAY
13442: PPUSH
13443: CALL_OW 251
13447: PPUSH
13448: LD_INT 70
13450: PPUSH
13451: CALL_OW 495
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13458: LD_EXP 15
13462: PUSH
13463: LD_EXP 49
13467: AND
13468: IFFALSE 13679
13470: GO 13472
13472: DISABLE
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13480: LD_ADDR_VAR 0 5
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_OWVAR 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PPUSH
13511: CALL_OW 69
13515: ST_TO_ADDR
// if not tmp then
13516: LD_VAR 0 5
13520: NOT
13521: IFFALSE 13525
// exit ;
13523: GO 13679
// for i in tmp do
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_VAR 0 5
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13677
// begin d := rand ( 0 , 5 ) ;
13538: LD_ADDR_VAR 0 4
13542: PUSH
13543: LD_INT 0
13545: PPUSH
13546: LD_INT 5
13548: PPUSH
13549: CALL_OW 12
13553: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13554: LD_ADDR_VAR 0 2
13558: PUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 250
13568: PPUSH
13569: LD_VAR 0 4
13573: PPUSH
13574: LD_INT 3
13576: PPUSH
13577: LD_INT 12
13579: PPUSH
13580: CALL_OW 12
13584: PPUSH
13585: CALL_OW 272
13589: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 251
13604: PPUSH
13605: LD_VAR 0 4
13609: PPUSH
13610: LD_INT 3
13612: PPUSH
13613: LD_INT 12
13615: PPUSH
13616: CALL_OW 12
13620: PPUSH
13621: CALL_OW 273
13625: ST_TO_ADDR
// if ValidHex ( x , y ) then
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: CALL_OW 488
13640: IFFALSE 13675
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: LD_VAR 0 2
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: LD_INT 6
13662: PPUSH
13663: CALL_OW 12
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 483
// end ;
13675: GO 13535
13677: POP
13678: POP
// end ;
13679: PPOPN 5
13681: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13682: LD_EXP 15
13686: PUSH
13687: LD_EXP 50
13691: AND
13692: IFFALSE 13786
13694: GO 13696
13696: DISABLE
13697: LD_INT 0
13699: PPUSH
13700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13701: LD_ADDR_VAR 0 2
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_OWVAR 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 32
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 21
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: ST_TO_ADDR
// if not tmp then
13748: LD_VAR 0 2
13752: NOT
13753: IFFALSE 13757
// exit ;
13755: GO 13786
// for i in tmp do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: FOR_IN
13768: IFFALSE 13784
// SetFuel ( i , 0 ) ;
13770: LD_VAR 0 1
13774: PPUSH
13775: LD_INT 0
13777: PPUSH
13778: CALL_OW 240
13782: GO 13767
13784: POP
13785: POP
// end ;
13786: PPOPN 2
13788: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13789: LD_EXP 15
13793: PUSH
13794: LD_EXP 51
13798: AND
13799: IFFALSE 13865
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 29
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: ST_TO_ADDR
// if not tmp then
13843: LD_VAR 0 1
13847: NOT
13848: IFFALSE 13852
// exit ;
13850: GO 13865
// DestroyUnit ( tmp [ 1 ] ) ;
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PPUSH
13861: CALL_OW 65
// end ;
13865: PPOPN 1
13867: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13868: LD_EXP 15
13872: PUSH
13873: LD_EXP 53
13877: AND
13878: IFFALSE 14007
13880: GO 13882
13882: DISABLE
13883: LD_INT 0
13885: PPUSH
// begin uc_side := 0 ;
13886: LD_ADDR_OWVAR 20
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// uc_nation := nation_arabian ;
13894: LD_ADDR_OWVAR 21
13898: PUSH
13899: LD_INT 2
13901: ST_TO_ADDR
// hc_gallery :=  ;
13902: LD_ADDR_OWVAR 33
13906: PUSH
13907: LD_STRING 
13909: ST_TO_ADDR
// hc_name :=  ;
13910: LD_ADDR_OWVAR 26
13914: PUSH
13915: LD_STRING 
13917: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13918: LD_INT 1
13920: PPUSH
13921: LD_INT 11
13923: PPUSH
13924: LD_INT 10
13926: PPUSH
13927: CALL_OW 380
// un := CreateHuman ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: CALL_OW 44
13940: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13941: LD_VAR 0 1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13953: LD_INT 35
13955: PPUSH
13956: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_INT 22
13967: PUSH
13968: LD_OWVAR 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PPUSH
13977: CALL_OW 69
13981: PPUSH
13982: LD_VAR 0 1
13986: PPUSH
13987: CALL_OW 74
13991: PPUSH
13992: CALL_OW 115
// until IsDead ( un ) ;
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 301
14005: IFFALSE 13953
// end ;
14007: PPOPN 1
14009: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14010: LD_EXP 15
14014: PUSH
14015: LD_EXP 55
14019: AND
14020: IFFALSE 14032
14022: GO 14024
14024: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14025: LD_STRING earthquake(getX(game), 0, 32)
14027: PPUSH
14028: CALL_OW 559
14032: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14033: LD_EXP 15
14037: PUSH
14038: LD_EXP 56
14042: AND
14043: IFFALSE 14134
14045: GO 14047
14047: DISABLE
14048: LD_INT 0
14050: PPUSH
// begin enable ;
14051: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14052: LD_ADDR_VAR 0 1
14056: PUSH
14057: LD_INT 22
14059: PUSH
14060: LD_OWVAR 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 2
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 33
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: ST_TO_ADDR
// if not tmp then
14099: LD_VAR 0 1
14103: NOT
14104: IFFALSE 14108
// exit ;
14106: GO 14134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14108: LD_VAR 0 1
14112: PUSH
14113: LD_INT 1
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 12
14125: ARRAY
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: CALL_OW 234
// end ;
14134: PPOPN 1
14136: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14137: LD_EXP 15
14141: PUSH
14142: LD_EXP 57
14146: AND
14147: IFFALSE 14288
14149: GO 14151
14151: DISABLE
14152: LD_INT 0
14154: PPUSH
14155: PPUSH
14156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_OWVAR 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 69
14192: ST_TO_ADDR
// if not tmp then
14193: LD_VAR 0 3
14197: NOT
14198: IFFALSE 14202
// exit ;
14200: GO 14288
// un := tmp [ rand ( 1 , tmp ) ] ;
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_VAR 0 3
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: CALL_OW 12
14224: ARRAY
14225: ST_TO_ADDR
// if Crawls ( un ) then
14226: LD_VAR 0 2
14230: PPUSH
14231: CALL_OW 318
14235: IFFALSE 14246
// ComWalk ( un ) ;
14237: LD_VAR 0 2
14241: PPUSH
14242: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14246: LD_VAR 0 2
14250: PPUSH
14251: LD_INT 9
14253: PPUSH
14254: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14258: LD_INT 28
14260: PPUSH
14261: LD_OWVAR 2
14265: PPUSH
14266: LD_INT 2
14268: PPUSH
14269: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14273: LD_INT 29
14275: PPUSH
14276: LD_OWVAR 2
14280: PPUSH
14281: LD_INT 2
14283: PPUSH
14284: CALL_OW 322
// end ;
14288: PPOPN 3
14290: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14291: LD_EXP 15
14295: PUSH
14296: LD_EXP 58
14300: AND
14301: IFFALSE 14412
14303: GO 14305
14305: DISABLE
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 25
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: ST_TO_ADDR
// if not tmp then
14347: LD_VAR 0 3
14351: NOT
14352: IFFALSE 14356
// exit ;
14354: GO 14412
// un := tmp [ rand ( 1 , tmp ) ] ;
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_VAR 0 3
14365: PUSH
14366: LD_INT 1
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 12
14378: ARRAY
14379: ST_TO_ADDR
// if Crawls ( un ) then
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 318
14389: IFFALSE 14400
// ComWalk ( un ) ;
14391: LD_VAR 0 2
14395: PPUSH
14396: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_INT 8
14407: PPUSH
14408: CALL_OW 336
// end ;
14412: PPOPN 3
14414: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14415: LD_EXP 15
14419: PUSH
14420: LD_EXP 59
14424: AND
14425: IFFALSE 14569
14427: GO 14429
14429: DISABLE
14430: LD_INT 0
14432: PPUSH
14433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: LD_INT 34
14466: PUSH
14467: LD_INT 12
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 34
14476: PUSH
14477: LD_INT 51
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 34
14486: PUSH
14487: LD_INT 32
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: ST_TO_ADDR
// if not tmp then
14510: LD_VAR 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 14569
// for i in tmp do
14519: LD_ADDR_VAR 0 1
14523: PUSH
14524: LD_VAR 0 2
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14567
// if GetCargo ( i , mat_artifact ) = 0 then
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 4
14539: PPUSH
14540: CALL_OW 289
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14565
// SetCargo ( i , mat_siberit , 100 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 3
14557: PPUSH
14558: LD_INT 100
14560: PPUSH
14561: CALL_OW 290
14565: GO 14529
14567: POP
14568: POP
// end ;
14569: PPOPN 2
14571: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14572: LD_EXP 15
14576: PUSH
14577: LD_EXP 60
14581: AND
14582: IFFALSE 14765
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_INT 22
14598: PUSH
14599: LD_OWVAR 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: ST_TO_ADDR
// if not tmp then
14613: LD_VAR 0 2
14617: NOT
14618: IFFALSE 14622
// exit ;
14620: GO 14765
// for i := 1 to 2 do
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: DOUBLE
14628: LD_INT 1
14630: DEC
14631: ST_TO_ADDR
14632: LD_INT 2
14634: PUSH
14635: FOR_TO
14636: IFFALSE 14763
// begin uc_side := your_side ;
14638: LD_ADDR_OWVAR 20
14642: PUSH
14643: LD_OWVAR 2
14647: ST_TO_ADDR
// uc_nation := nation_american ;
14648: LD_ADDR_OWVAR 21
14652: PUSH
14653: LD_INT 1
14655: ST_TO_ADDR
// vc_chassis := us_morphling ;
14656: LD_ADDR_OWVAR 37
14660: PUSH
14661: LD_INT 5
14663: ST_TO_ADDR
// vc_engine := engine_siberite ;
14664: LD_ADDR_OWVAR 39
14668: PUSH
14669: LD_INT 3
14671: ST_TO_ADDR
// vc_control := control_computer ;
14672: LD_ADDR_OWVAR 38
14676: PUSH
14677: LD_INT 3
14679: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14680: LD_ADDR_OWVAR 40
14684: PUSH
14685: LD_INT 10
14687: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14688: LD_VAR 0 2
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PPUSH
14697: CALL_OW 310
14701: NOT
14702: IFFALSE 14749
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14704: CALL_OW 45
14708: PPUSH
14709: LD_VAR 0 2
14713: PUSH
14714: LD_INT 1
14716: ARRAY
14717: PPUSH
14718: CALL_OW 250
14722: PPUSH
14723: LD_VAR 0 2
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: CALL_OW 251
14736: PPUSH
14737: LD_INT 12
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 50
14747: GO 14761
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14749: CALL_OW 45
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 51
// end ;
14761: GO 14635
14763: POP
14764: POP
// end ;
14765: PPOPN 2
14767: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14768: LD_EXP 15
14772: PUSH
14773: LD_EXP 61
14777: AND
14778: IFFALSE 15000
14780: GO 14782
14782: DISABLE
14783: LD_INT 0
14785: PPUSH
14786: PPUSH
14787: PPUSH
14788: PPUSH
14789: PPUSH
14790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14791: LD_ADDR_VAR 0 6
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 23
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: ST_TO_ADDR
// if not tmp then
14845: LD_VAR 0 6
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 15000
// s1 := rand ( 1 , 4 ) ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 1
14861: PPUSH
14862: LD_INT 4
14864: PPUSH
14865: CALL_OW 12
14869: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14870: LD_ADDR_VAR 0 4
14874: PUSH
14875: LD_VAR 0 6
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PPUSH
14884: LD_VAR 0 2
14888: PPUSH
14889: CALL_OW 259
14893: ST_TO_ADDR
// if s1 = 1 then
14894: LD_VAR 0 2
14898: PUSH
14899: LD_INT 1
14901: EQUAL
14902: IFFALSE 14922
// s2 := rand ( 2 , 4 ) else
14904: LD_ADDR_VAR 0 3
14908: PUSH
14909: LD_INT 2
14911: PPUSH
14912: LD_INT 4
14914: PPUSH
14915: CALL_OW 12
14919: ST_TO_ADDR
14920: GO 14930
// s2 := 1 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_VAR 0 6
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: CALL_OW 259
14953: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14954: LD_VAR 0 6
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_VAR 0 5
14972: PPUSH
14973: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14977: LD_VAR 0 6
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_VAR 0 4
14995: PPUSH
14996: CALL_OW 237
// end ;
15000: PPOPN 6
15002: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15003: LD_EXP 15
15007: PUSH
15008: LD_EXP 62
15012: AND
15013: IFFALSE 15092
15015: GO 15017
15017: DISABLE
15018: LD_INT 0
15020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_OWVAR 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 30
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 69
15056: ST_TO_ADDR
// if not tmp then
15057: LD_VAR 0 1
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15066: LD_VAR 0 1
15070: PUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 12
15083: ARRAY
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 234
// end ;
15092: PPOPN 1
15094: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15095: LD_EXP 15
15099: PUSH
15100: LD_EXP 63
15104: AND
15105: IFFALSE 15217
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 27
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 30
15146: PUSH
15147: LD_INT 26
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 30
15156: PUSH
15157: LD_INT 28
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: ST_TO_ADDR
// if not tmp then
15179: LD_VAR 0 2
15183: NOT
15184: IFFALSE 15188
// exit ;
15186: GO 15217
// for i in tmp do
15188: LD_ADDR_VAR 0 1
15192: PUSH
15193: LD_VAR 0 2
15197: PUSH
15198: FOR_IN
15199: IFFALSE 15215
// SetLives ( i , 1 ) ;
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 234
15213: GO 15198
15215: POP
15216: POP
// end ;
15217: PPOPN 2
15219: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15220: LD_EXP 15
15224: PUSH
15225: LD_EXP 64
15229: AND
15230: IFFALSE 15504
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
15239: PPUSH
// begin i := rand ( 1 , 7 ) ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_INT 7
15250: PPUSH
15251: CALL_OW 12
15255: ST_TO_ADDR
// case i of 1 :
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 15279
15269: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15270: LD_STRING earthquake(getX(game), 0, 32)
15272: PPUSH
15273: CALL_OW 559
15277: GO 15504
15279: LD_INT 2
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15287
15285: GO 15301
15287: POP
// begin ToLua ( displayStucuk(); ) ;
15288: LD_STRING displayStucuk();
15290: PPUSH
15291: CALL_OW 559
// ResetFog ;
15295: CALL_OW 335
// end ; 3 :
15299: GO 15504
15301: LD_INT 3
15303: DOUBLE
15304: EQUAL
15305: IFTRUE 15309
15307: GO 15413
15309: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15310: LD_ADDR_VAR 0 2
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_OWVAR 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 25
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// if not tmp then
15346: LD_VAR 0 2
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15504
// un := tmp [ rand ( 1 , tmp ) ] ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: LD_INT 1
15367: PPUSH
15368: LD_VAR 0 2
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: ST_TO_ADDR
// if Crawls ( un ) then
15379: LD_VAR 0 3
15383: PPUSH
15384: CALL_OW 318
15388: IFFALSE 15399
// ComWalk ( un ) ;
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 8
15406: PPUSH
15407: CALL_OW 336
// end ; 4 :
15411: GO 15504
15413: LD_INT 4
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15482
15421: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15422: LD_ADDR_VAR 0 2
15426: PUSH
15427: LD_INT 22
15429: PUSH
15430: LD_OWVAR 2
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 30
15441: PUSH
15442: LD_INT 29
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 2
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15504
// DestroyUnit ( tmp [ 1 ] ) ;
15467: LD_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: CALL_OW 65
// end ; 5 .. 7 :
15480: GO 15504
15482: LD_INT 5
15484: DOUBLE
15485: GREATEREQUAL
15486: IFFALSE 15494
15488: LD_INT 7
15490: DOUBLE
15491: LESSEQUAL
15492: IFTRUE 15496
15494: GO 15503
15496: POP
// StreamSibBomb ; end ;
15497: CALL 11754 0 0
15501: GO 15504
15503: POP
// end ;
15504: PPOPN 3
15506: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15507: LD_EXP 15
15511: PUSH
15512: LD_EXP 65
15516: AND
15517: IFFALSE 15673
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
15525: PPUSH
15526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 81
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: ST_TO_ADDR
// if not tmp then
15581: LD_VAR 0 2
15585: NOT
15586: IFFALSE 15590
// exit ;
15588: GO 15673
// p := 0 ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 0
15597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15598: LD_INT 35
15600: PPUSH
15601: CALL_OW 67
// p := p + 1 ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_INT 1
15617: PLUS
15618: ST_TO_ADDR
// for i in tmp do
15619: LD_ADDR_VAR 0 1
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: FOR_IN
15630: IFFALSE 15661
// if GetLives ( i ) < 1000 then
15632: LD_VAR 0 1
15636: PPUSH
15637: CALL_OW 256
15641: PUSH
15642: LD_INT 1000
15644: LESS
15645: IFFALSE 15659
// SetLives ( i , 1000 ) ;
15647: LD_VAR 0 1
15651: PPUSH
15652: LD_INT 1000
15654: PPUSH
15655: CALL_OW 234
15659: GO 15629
15661: POP
15662: POP
// until p > 20 ;
15663: LD_VAR 0 3
15667: PUSH
15668: LD_INT 20
15670: GREATER
15671: IFFALSE 15598
// end ;
15673: PPOPN 3
15675: END
// every 0 0$1 trigger StreamModeActive and sTime do
15676: LD_EXP 15
15680: PUSH
15681: LD_EXP 66
15685: AND
15686: IFFALSE 15721
15688: GO 15690
15690: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15691: LD_INT 28
15693: PPUSH
15694: LD_OWVAR 2
15698: PPUSH
15699: LD_INT 2
15701: PPUSH
15702: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15706: LD_INT 30
15708: PPUSH
15709: LD_OWVAR 2
15713: PPUSH
15714: LD_INT 2
15716: PPUSH
15717: CALL_OW 322
// end ;
15721: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15722: LD_EXP 15
15726: PUSH
15727: LD_EXP 67
15731: AND
15732: IFFALSE 15853
15734: GO 15736
15736: DISABLE
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15741: LD_ADDR_VAR 0 2
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_OWVAR 2
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 21
15760: PUSH
15761: LD_INT 1
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 23
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: ST_TO_ADDR
// if not tmp then
15795: LD_VAR 0 2
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 15853
// for i in tmp do
15804: LD_ADDR_VAR 0 1
15808: PUSH
15809: LD_VAR 0 2
15813: PUSH
15814: FOR_IN
15815: IFFALSE 15851
// begin if Crawls ( i ) then
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 318
15826: IFFALSE 15837
// ComWalk ( i ) ;
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 138
// SetClass ( i , 2 ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: LD_INT 2
15844: PPUSH
15845: CALL_OW 336
// end ;
15849: GO 15814
15851: POP
15852: POP
// end ;
15853: PPOPN 2
15855: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15856: LD_EXP 15
15860: PUSH
15861: LD_EXP 68
15865: AND
15866: IFFALSE 16147
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 9
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15894: LD_INT 9
15896: PPUSH
15897: LD_OWVAR 2
15901: PPUSH
15902: CALL_OW 343
// uc_side := 9 ;
15906: LD_ADDR_OWVAR 20
15910: PUSH
15911: LD_INT 9
15913: ST_TO_ADDR
// uc_nation := 2 ;
15914: LD_ADDR_OWVAR 21
15918: PUSH
15919: LD_INT 2
15921: ST_TO_ADDR
// hc_name := Dark Warrior ;
15922: LD_ADDR_OWVAR 26
15926: PUSH
15927: LD_STRING Dark Warrior
15929: ST_TO_ADDR
// hc_gallery :=  ;
15930: LD_ADDR_OWVAR 33
15934: PUSH
15935: LD_STRING 
15937: ST_TO_ADDR
// hc_noskilllimit := true ;
15938: LD_ADDR_OWVAR 76
15942: PUSH
15943: LD_INT 1
15945: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15946: LD_ADDR_OWVAR 31
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 30
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: ST_TO_ADDR
// un := CreateHuman ;
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: CALL_OW 44
15978: ST_TO_ADDR
// hc_noskilllimit := false ;
15979: LD_ADDR_OWVAR 76
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 51
// p := 0 ;
15999: LD_ADDR_VAR 0 2
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16007: LD_INT 35
16009: PPUSH
16010: CALL_OW 67
// p := p + 1 ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: LD_INT 1
16026: PLUS
16027: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16028: LD_VAR 0 3
16032: PPUSH
16033: CALL_OW 256
16037: PUSH
16038: LD_INT 1000
16040: LESS
16041: IFFALSE 16055
// SetLives ( un , 1000 ) ;
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1000
16050: PPUSH
16051: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 81
16062: PUSH
16063: LD_OWVAR 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 91
16074: PUSH
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: CALL_OW 74
16106: PPUSH
16107: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16111: LD_VAR 0 2
16115: PUSH
16116: LD_INT 60
16118: GREATER
16119: PUSH
16120: LD_VAR 0 3
16124: PPUSH
16125: CALL_OW 301
16129: OR
16130: IFFALSE 16007
// if un then
16132: LD_VAR 0 3
16136: IFFALSE 16147
// RemoveUnit ( un ) ;
16138: LD_VAR 0 3
16142: PPUSH
16143: CALL_OW 64
// end ;
16147: PPOPN 3
16149: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16150: LD_INT 0
16152: PPUSH
// case cmd of 301 :
16153: LD_VAR 0 1
16157: PUSH
16158: LD_INT 301
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16198
16166: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16167: LD_VAR 0 6
16171: PPUSH
16172: LD_VAR 0 7
16176: PPUSH
16177: LD_VAR 0 8
16181: PPUSH
16182: LD_VAR 0 4
16186: PPUSH
16187: LD_VAR 0 5
16191: PPUSH
16192: CALL 17399 0 5
16196: GO 16319
16198: LD_INT 302
16200: DOUBLE
16201: EQUAL
16202: IFTRUE 16206
16204: GO 16243
16206: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16207: LD_VAR 0 6
16211: PPUSH
16212: LD_VAR 0 7
16216: PPUSH
16217: LD_VAR 0 8
16221: PPUSH
16222: LD_VAR 0 9
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL 17490 0 6
16241: GO 16319
16243: LD_INT 303
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16288
16251: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16252: LD_VAR 0 6
16256: PPUSH
16257: LD_VAR 0 7
16261: PPUSH
16262: LD_VAR 0 8
16266: PPUSH
16267: LD_VAR 0 9
16271: PPUSH
16272: LD_VAR 0 4
16276: PPUSH
16277: LD_VAR 0 5
16281: PPUSH
16282: CALL 16324 0 6
16286: GO 16319
16288: LD_INT 304
16290: DOUBLE
16291: EQUAL
16292: IFTRUE 16296
16294: GO 16318
16296: POP
// hHackTeleport ( unit , x , y ) ; end ;
16297: LD_VAR 0 2
16301: PPUSH
16302: LD_VAR 0 4
16306: PPUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: CALL 18083 0 3
16316: GO 16319
16318: POP
// end ;
16319: LD_VAR 0 12
16323: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16328: LD_VAR 0 1
16332: PUSH
16333: LD_INT 1
16335: LESS
16336: PUSH
16337: LD_VAR 0 1
16341: PUSH
16342: LD_INT 3
16344: GREATER
16345: OR
16346: PUSH
16347: LD_VAR 0 5
16351: PPUSH
16352: LD_VAR 0 6
16356: PPUSH
16357: CALL_OW 428
16361: OR
16362: IFFALSE 16366
// exit ;
16364: GO 17086
// uc_side := your_side ;
16366: LD_ADDR_OWVAR 20
16370: PUSH
16371: LD_OWVAR 2
16375: ST_TO_ADDR
// uc_nation := nation ;
16376: LD_ADDR_OWVAR 21
16380: PUSH
16381: LD_VAR 0 1
16385: ST_TO_ADDR
// bc_level = 1 ;
16386: LD_ADDR_OWVAR 43
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// case btype of 1 :
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 1
16401: DOUBLE
16402: EQUAL
16403: IFTRUE 16407
16405: GO 16418
16407: POP
// bc_type := b_depot ; 2 :
16408: LD_ADDR_OWVAR 42
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
16416: GO 17030
16418: LD_INT 2
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16437
16426: POP
// bc_type := b_warehouse ; 3 :
16427: LD_ADDR_OWVAR 42
16431: PUSH
16432: LD_INT 1
16434: ST_TO_ADDR
16435: GO 17030
16437: LD_INT 3
16439: DOUBLE
16440: EQUAL
16441: IFTRUE 16445
16443: GO 16456
16445: POP
// bc_type := b_lab ; 4 .. 9 :
16446: LD_ADDR_OWVAR 42
16450: PUSH
16451: LD_INT 6
16453: ST_TO_ADDR
16454: GO 17030
16456: LD_INT 4
16458: DOUBLE
16459: GREATEREQUAL
16460: IFFALSE 16468
16462: LD_INT 9
16464: DOUBLE
16465: LESSEQUAL
16466: IFTRUE 16470
16468: GO 16522
16470: POP
// begin bc_type := b_lab_half ;
16471: LD_ADDR_OWVAR 42
16475: PUSH
16476: LD_INT 7
16478: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16479: LD_ADDR_OWVAR 44
16483: PUSH
16484: LD_INT 10
16486: PUSH
16487: LD_INT 11
16489: PUSH
16490: LD_INT 12
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 14
16498: PUSH
16499: LD_INT 13
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: LD_VAR 0 2
16514: PUSH
16515: LD_INT 3
16517: MINUS
16518: ARRAY
16519: ST_TO_ADDR
// end ; 10 .. 13 :
16520: GO 17030
16522: LD_INT 10
16524: DOUBLE
16525: GREATEREQUAL
16526: IFFALSE 16534
16528: LD_INT 13
16530: DOUBLE
16531: LESSEQUAL
16532: IFTRUE 16536
16534: GO 16613
16536: POP
// begin bc_type := b_lab_full ;
16537: LD_ADDR_OWVAR 42
16541: PUSH
16542: LD_INT 8
16544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16545: LD_ADDR_OWVAR 44
16549: PUSH
16550: LD_INT 10
16552: PUSH
16553: LD_INT 12
16555: PUSH
16556: LD_INT 14
16558: PUSH
16559: LD_INT 13
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: LD_INT 9
16575: MINUS
16576: ARRAY
16577: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16578: LD_ADDR_OWVAR 45
16582: PUSH
16583: LD_INT 11
16585: PUSH
16586: LD_INT 15
16588: PUSH
16589: LD_INT 12
16591: PUSH
16592: LD_INT 15
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_VAR 0 2
16605: PUSH
16606: LD_INT 9
16608: MINUS
16609: ARRAY
16610: ST_TO_ADDR
// end ; 14 :
16611: GO 17030
16613: LD_INT 14
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16632
16621: POP
// bc_type := b_workshop ; 15 :
16622: LD_ADDR_OWVAR 42
16626: PUSH
16627: LD_INT 2
16629: ST_TO_ADDR
16630: GO 17030
16632: LD_INT 15
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16651
16640: POP
// bc_type := b_factory ; 16 :
16641: LD_ADDR_OWVAR 42
16645: PUSH
16646: LD_INT 3
16648: ST_TO_ADDR
16649: GO 17030
16651: LD_INT 16
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16670
16659: POP
// bc_type := b_ext_gun ; 17 :
16660: LD_ADDR_OWVAR 42
16664: PUSH
16665: LD_INT 17
16667: ST_TO_ADDR
16668: GO 17030
16670: LD_INT 17
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16706
16678: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16679: LD_ADDR_OWVAR 42
16683: PUSH
16684: LD_INT 19
16686: PUSH
16687: LD_INT 23
16689: PUSH
16690: LD_INT 19
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: ST_TO_ADDR
16704: GO 17030
16706: LD_INT 18
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16725
16714: POP
// bc_type := b_ext_radar ; 19 :
16715: LD_ADDR_OWVAR 42
16719: PUSH
16720: LD_INT 20
16722: ST_TO_ADDR
16723: GO 17030
16725: LD_INT 19
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16744
16733: POP
// bc_type := b_ext_radio ; 20 :
16734: LD_ADDR_OWVAR 42
16738: PUSH
16739: LD_INT 22
16741: ST_TO_ADDR
16742: GO 17030
16744: LD_INT 20
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16763
16752: POP
// bc_type := b_ext_siberium ; 21 :
16753: LD_ADDR_OWVAR 42
16757: PUSH
16758: LD_INT 21
16760: ST_TO_ADDR
16761: GO 17030
16763: LD_INT 21
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16782
16771: POP
// bc_type := b_ext_computer ; 22 :
16772: LD_ADDR_OWVAR 42
16776: PUSH
16777: LD_INT 24
16779: ST_TO_ADDR
16780: GO 17030
16782: LD_INT 22
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16801
16790: POP
// bc_type := b_ext_track ; 23 :
16791: LD_ADDR_OWVAR 42
16795: PUSH
16796: LD_INT 16
16798: ST_TO_ADDR
16799: GO 17030
16801: LD_INT 23
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 16820
16809: POP
// bc_type := b_ext_laser ; 24 :
16810: LD_ADDR_OWVAR 42
16814: PUSH
16815: LD_INT 25
16817: ST_TO_ADDR
16818: GO 17030
16820: LD_INT 24
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16839
16828: POP
// bc_type := b_control_tower ; 25 :
16829: LD_ADDR_OWVAR 42
16833: PUSH
16834: LD_INT 36
16836: ST_TO_ADDR
16837: GO 17030
16839: LD_INT 25
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16858
16847: POP
// bc_type := b_breastwork ; 26 :
16848: LD_ADDR_OWVAR 42
16852: PUSH
16853: LD_INT 31
16855: ST_TO_ADDR
16856: GO 17030
16858: LD_INT 26
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16877
16866: POP
// bc_type := b_bunker ; 27 :
16867: LD_ADDR_OWVAR 42
16871: PUSH
16872: LD_INT 32
16874: ST_TO_ADDR
16875: GO 17030
16877: LD_INT 27
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16896
16885: POP
// bc_type := b_turret ; 28 :
16886: LD_ADDR_OWVAR 42
16890: PUSH
16891: LD_INT 33
16893: ST_TO_ADDR
16894: GO 17030
16896: LD_INT 28
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16915
16904: POP
// bc_type := b_armoury ; 29 :
16905: LD_ADDR_OWVAR 42
16909: PUSH
16910: LD_INT 4
16912: ST_TO_ADDR
16913: GO 17030
16915: LD_INT 29
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16934
16923: POP
// bc_type := b_barracks ; 30 :
16924: LD_ADDR_OWVAR 42
16928: PUSH
16929: LD_INT 5
16931: ST_TO_ADDR
16932: GO 17030
16934: LD_INT 30
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16953
16942: POP
// bc_type := b_solar_power ; 31 :
16943: LD_ADDR_OWVAR 42
16947: PUSH
16948: LD_INT 27
16950: ST_TO_ADDR
16951: GO 17030
16953: LD_INT 31
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 16972
16961: POP
// bc_type := b_oil_power ; 32 :
16962: LD_ADDR_OWVAR 42
16966: PUSH
16967: LD_INT 26
16969: ST_TO_ADDR
16970: GO 17030
16972: LD_INT 32
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 16991
16980: POP
// bc_type := b_siberite_power ; 33 :
16981: LD_ADDR_OWVAR 42
16985: PUSH
16986: LD_INT 28
16988: ST_TO_ADDR
16989: GO 17030
16991: LD_INT 33
16993: DOUBLE
16994: EQUAL
16995: IFTRUE 16999
16997: GO 17010
16999: POP
// bc_type := b_oil_mine ; 34 :
17000: LD_ADDR_OWVAR 42
17004: PUSH
17005: LD_INT 29
17007: ST_TO_ADDR
17008: GO 17030
17010: LD_INT 34
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17029
17018: POP
// bc_type := b_siberite_mine ; end ;
17019: LD_ADDR_OWVAR 42
17023: PUSH
17024: LD_INT 30
17026: ST_TO_ADDR
17027: GO 17030
17029: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 5
17039: PPUSH
17040: LD_VAR 0 6
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: CALL_OW 47
17054: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17055: LD_OWVAR 42
17059: PUSH
17060: LD_INT 32
17062: PUSH
17063: LD_INT 33
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: IN
17070: IFFALSE 17086
// PlaceWeaponTurret ( b , weapon ) ;
17072: LD_VAR 0 8
17076: PPUSH
17077: LD_VAR 0 4
17081: PPUSH
17082: CALL_OW 431
// end ;
17086: LD_VAR 0 7
17090: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_OWVAR 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 30
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 30
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL_OW 69
17150: ST_TO_ADDR
// if not tmp then
17151: LD_VAR 0 4
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17219
// for i in tmp do
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_VAR 0 4
17169: PUSH
17170: FOR_IN
17171: IFFALSE 17217
// for j = 1 to 3 do
17173: LD_ADDR_VAR 0 3
17177: PUSH
17178: DOUBLE
17179: LD_INT 1
17181: DEC
17182: ST_TO_ADDR
17183: LD_INT 3
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17213
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17189: LD_VAR 0 2
17193: PPUSH
17194: CALL_OW 274
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 99999
17206: PPUSH
17207: CALL_OW 277
17211: GO 17186
17213: POP
17214: POP
17215: GO 17170
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 1
17223: RET
// export function hHackSetLevel10 ; var i , j ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17302
// if IsSelected ( i ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 306
17261: IFFALSE 17300
// begin for j := 1 to 4 do
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: DOUBLE
17269: LD_INT 1
17271: DEC
17272: ST_TO_ADDR
17273: LD_INT 4
17275: PUSH
17276: FOR_TO
17277: IFFALSE 17298
// SetSkill ( i , j , 10 ) ;
17279: LD_VAR 0 2
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_INT 10
17291: PPUSH
17292: CALL_OW 237
17296: GO 17276
17298: POP
17299: POP
// end ;
17300: GO 17249
17302: POP
17303: POP
// end ;
17304: LD_VAR 0 1
17308: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PPUSH
17345: CALL_OW 69
17349: PUSH
17350: FOR_IN
17351: IFFALSE 17392
// begin for j := 1 to 4 do
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 4
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17388
// SetSkill ( i , j , 10 ) ;
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: LD_INT 10
17381: PPUSH
17382: CALL_OW 237
17386: GO 17366
17388: POP
17389: POP
// end ;
17390: GO 17350
17392: POP
17393: POP
// end ;
17394: LD_VAR 0 1
17398: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17399: LD_INT 0
17401: PPUSH
// uc_side := your_side ;
17402: LD_ADDR_OWVAR 20
17406: PUSH
17407: LD_OWVAR 2
17411: ST_TO_ADDR
// uc_nation := nation ;
17412: LD_ADDR_OWVAR 21
17416: PUSH
17417: LD_VAR 0 1
17421: ST_TO_ADDR
// InitHc ;
17422: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17426: LD_INT 0
17428: PPUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_VAR 0 3
17438: PPUSH
17439: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17443: LD_VAR 0 4
17447: PPUSH
17448: LD_VAR 0 5
17452: PPUSH
17453: CALL_OW 428
17457: PUSH
17458: LD_INT 0
17460: EQUAL
17461: IFFALSE 17485
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17463: CALL_OW 44
17467: PPUSH
17468: LD_VAR 0 4
17472: PPUSH
17473: LD_VAR 0 5
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 48
// end ;
17485: LD_VAR 0 6
17489: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// uc_side := your_side ;
17494: LD_ADDR_OWVAR 20
17498: PUSH
17499: LD_OWVAR 2
17503: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: LD_INT 5
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: IN
17531: IFFALSE 17543
// uc_nation := nation_american else
17533: LD_ADDR_OWVAR 21
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
17541: GO 17586
// if chassis in [ 11 , 12 , 13 , 14 ] then
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 11
17550: PUSH
17551: LD_INT 12
17553: PUSH
17554: LD_INT 13
17556: PUSH
17557: LD_INT 14
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17578
// uc_nation := nation_arabian else
17568: LD_ADDR_OWVAR 21
17572: PUSH
17573: LD_INT 2
17575: ST_TO_ADDR
17576: GO 17586
// uc_nation := nation_russian ;
17578: LD_ADDR_OWVAR 21
17582: PUSH
17583: LD_INT 3
17585: ST_TO_ADDR
// vc_chassis := chassis ;
17586: LD_ADDR_OWVAR 37
17590: PUSH
17591: LD_VAR 0 1
17595: ST_TO_ADDR
// vc_engine := engine ;
17596: LD_ADDR_OWVAR 39
17600: PUSH
17601: LD_VAR 0 2
17605: ST_TO_ADDR
// vc_control := control ;
17606: LD_ADDR_OWVAR 38
17610: PUSH
17611: LD_VAR 0 3
17615: ST_TO_ADDR
// vc_weapon := weapon ;
17616: LD_ADDR_OWVAR 40
17620: PUSH
17621: LD_VAR 0 4
17625: ST_TO_ADDR
// un := CreateVehicle ;
17626: LD_ADDR_VAR 0 8
17630: PUSH
17631: CALL_OW 45
17635: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17636: LD_VAR 0 8
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 5
17646: PPUSH
17647: CALL_OW 12
17651: PPUSH
17652: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17656: LD_VAR 0 8
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: LD_VAR 0 6
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 48
// end ;
17678: LD_VAR 0 7
17682: RET
// export hInvincible ; every 1 do
17683: GO 17685
17685: DISABLE
// hInvincible := [ ] ;
17686: LD_ADDR_EXP 69
17690: PUSH
17691: EMPTY
17692: ST_TO_ADDR
17693: END
// every 10 do var i ;
17694: GO 17696
17696: DISABLE
17697: LD_INT 0
17699: PPUSH
// begin enable ;
17700: ENABLE
// if not hInvincible then
17701: LD_EXP 69
17705: NOT
17706: IFFALSE 17710
// exit ;
17708: GO 17754
// for i in hInvincible do
17710: LD_ADDR_VAR 0 1
17714: PUSH
17715: LD_EXP 69
17719: PUSH
17720: FOR_IN
17721: IFFALSE 17752
// if GetLives ( i ) < 1000 then
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL_OW 256
17732: PUSH
17733: LD_INT 1000
17735: LESS
17736: IFFALSE 17750
// SetLives ( i , 1000 ) ;
17738: LD_VAR 0 1
17742: PPUSH
17743: LD_INT 1000
17745: PPUSH
17746: CALL_OW 234
17750: GO 17720
17752: POP
17753: POP
// end ;
17754: PPOPN 1
17756: END
// export function hHackInvincible ; var i ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 21
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 21
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_IN
17800: IFFALSE 17861
// if IsSelected ( i ) then
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 306
17811: IFFALSE 17859
// begin if i in hInvincible then
17813: LD_VAR 0 2
17817: PUSH
17818: LD_EXP 69
17822: IN
17823: IFFALSE 17843
// hInvincible := hInvincible diff i else
17825: LD_ADDR_EXP 69
17829: PUSH
17830: LD_EXP 69
17834: PUSH
17835: LD_VAR 0 2
17839: DIFF
17840: ST_TO_ADDR
17841: GO 17859
// hInvincible := hInvincible union i ;
17843: LD_ADDR_EXP 69
17847: PUSH
17848: LD_EXP 69
17852: PUSH
17853: LD_VAR 0 2
17857: UNION
17858: ST_TO_ADDR
// end ;
17859: GO 17799
17861: POP
17862: POP
// end ;
17863: LD_VAR 0 1
17867: RET
// export function hHackInvisible ; var i , j ; begin
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17873: LD_ADDR_VAR 0 2
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 69
17892: PUSH
17893: FOR_IN
17894: IFFALSE 17918
// if IsSelected ( i ) then
17896: LD_VAR 0 2
17900: PPUSH
17901: CALL_OW 306
17905: IFFALSE 17916
// ComForceInvisible ( i ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 496
17916: GO 17893
17918: POP
17919: POP
// end ;
17920: LD_VAR 0 1
17924: RET
// export function hHackChangeYourSide ; begin
17925: LD_INT 0
17927: PPUSH
// if your_side = 8 then
17928: LD_OWVAR 2
17932: PUSH
17933: LD_INT 8
17935: EQUAL
17936: IFFALSE 17948
// your_side := 0 else
17938: LD_ADDR_OWVAR 2
17942: PUSH
17943: LD_INT 0
17945: ST_TO_ADDR
17946: GO 17962
// your_side := your_side + 1 ;
17948: LD_ADDR_OWVAR 2
17952: PUSH
17953: LD_OWVAR 2
17957: PUSH
17958: LD_INT 1
17960: PLUS
17961: ST_TO_ADDR
// end ;
17962: LD_VAR 0 1
17966: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
17971: PPUSH
// for i in all_units do
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_OWVAR 3
17981: PUSH
17982: FOR_IN
17983: IFFALSE 18061
// if IsSelected ( i ) then
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 306
17994: IFFALSE 18059
// begin j := GetSide ( i ) ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: CALL_OW 255
18010: ST_TO_ADDR
// if j = 8 then
18011: LD_VAR 0 3
18015: PUSH
18016: LD_INT 8
18018: EQUAL
18019: IFFALSE 18031
// j := 0 else
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
18029: GO 18045
// j := j + 1 ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 1
18043: PLUS
18044: ST_TO_ADDR
// SetSide ( i , j ) ;
18045: LD_VAR 0 2
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: CALL_OW 235
// end ;
18059: GO 17982
18061: POP
18062: POP
// end ;
18063: LD_VAR 0 1
18067: RET
// export function hHackFog ; begin
18068: LD_INT 0
18070: PPUSH
// FogOff ( true ) ;
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 344
// end ;
18078: LD_VAR 0 1
18082: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18083: LD_INT 0
18085: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 483
// CenterOnXY ( x , y ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: CALL_OW 84
// end ; end_of_file
18125: LD_VAR 0 4
18129: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
18135: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 264
18145: PUSH
18146: LD_EXP 84
18150: EQUAL
18151: IFFALSE 18223
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18153: LD_INT 68
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 255
18165: PPUSH
18166: CALL_OW 321
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: IFFALSE 18186
// eff := 70 else
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_INT 70
18183: ST_TO_ADDR
18184: GO 18194
// eff := 30 ;
18186: LD_ADDR_VAR 0 4
18190: PUSH
18191: LD_INT 30
18193: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 250
18203: PPUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 251
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL_OW 495
// end ; end ;
18223: LD_VAR 0 2
18227: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18228: LD_INT 0
18230: PPUSH
// end ;
18231: LD_VAR 0 4
18235: RET
// export function SOS_Command ( cmd ) ; begin
18236: LD_INT 0
18238: PPUSH
// end ;
18239: LD_VAR 0 2
18243: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18244: LD_INT 0
18246: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18247: LD_VAR 0 1
18251: PUSH
18252: LD_INT 250
18254: EQUAL
18255: PUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 264
18265: PUSH
18266: LD_EXP 87
18270: EQUAL
18271: AND
18272: IFFALSE 18293
// MinerPlaceMine ( unit , x , y ) ;
18274: LD_VAR 0 2
18278: PPUSH
18279: LD_VAR 0 4
18283: PPUSH
18284: LD_VAR 0 5
18288: PPUSH
18289: CALL 20590 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18293: LD_VAR 0 1
18297: PUSH
18298: LD_INT 251
18300: EQUAL
18301: PUSH
18302: LD_VAR 0 2
18306: PPUSH
18307: CALL_OW 264
18311: PUSH
18312: LD_EXP 87
18316: EQUAL
18317: AND
18318: IFFALSE 18339
// MinerDetonateMine ( unit , x , y ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_VAR 0 4
18329: PPUSH
18330: LD_VAR 0 5
18334: PPUSH
18335: CALL 20867 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 252
18346: EQUAL
18347: PUSH
18348: LD_VAR 0 2
18352: PPUSH
18353: CALL_OW 264
18357: PUSH
18358: LD_EXP 87
18362: EQUAL
18363: AND
18364: IFFALSE 18385
// MinerCreateMinefield ( unit , x , y ) ;
18366: LD_VAR 0 2
18370: PPUSH
18371: LD_VAR 0 4
18375: PPUSH
18376: LD_VAR 0 5
18380: PPUSH
18381: CALL 21093 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18385: LD_VAR 0 1
18389: PUSH
18390: LD_INT 254
18392: EQUAL
18393: PUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: CALL_OW 264
18403: PUSH
18404: LD_EXP 82
18408: EQUAL
18409: AND
18410: PUSH
18411: LD_VAR 0 3
18415: PPUSH
18416: CALL_OW 263
18420: PUSH
18421: LD_INT 3
18423: EQUAL
18424: AND
18425: IFFALSE 18441
// HackDestroyVehicle ( unit , selectedUnit ) ;
18427: LD_VAR 0 2
18431: PPUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: CALL 19950 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18441: LD_VAR 0 1
18445: PUSH
18446: LD_INT 255
18448: EQUAL
18449: PUSH
18450: LD_VAR 0 2
18454: PPUSH
18455: CALL_OW 264
18459: PUSH
18460: LD_INT 14
18462: PUSH
18463: LD_INT 53
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: IN
18470: AND
18471: PUSH
18472: LD_VAR 0 4
18476: PPUSH
18477: LD_VAR 0 5
18481: PPUSH
18482: CALL_OW 488
18486: AND
18487: IFFALSE 18511
// CutTreeXYR ( unit , x , y , 12 ) ;
18489: LD_VAR 0 2
18493: PPUSH
18494: LD_VAR 0 4
18498: PPUSH
18499: LD_VAR 0 5
18503: PPUSH
18504: LD_INT 12
18506: PPUSH
18507: CALL 18516 0 4
// end ;
18511: LD_VAR 0 6
18515: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18516: LD_INT 0
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18527: LD_VAR 0 1
18531: NOT
18532: PUSH
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: CALL_OW 488
18547: NOT
18548: OR
18549: PUSH
18550: LD_VAR 0 4
18554: NOT
18555: OR
18556: IFFALSE 18560
// exit ;
18558: GO 18900
// list := [ ] ;
18560: LD_ADDR_VAR 0 13
18564: PUSH
18565: EMPTY
18566: ST_TO_ADDR
// if x - r < 0 then
18567: LD_VAR 0 2
18571: PUSH
18572: LD_VAR 0 4
18576: MINUS
18577: PUSH
18578: LD_INT 0
18580: LESS
18581: IFFALSE 18593
// min_x := 0 else
18583: LD_ADDR_VAR 0 7
18587: PUSH
18588: LD_INT 0
18590: ST_TO_ADDR
18591: GO 18609
// min_x := x - r ;
18593: LD_ADDR_VAR 0 7
18597: PUSH
18598: LD_VAR 0 2
18602: PUSH
18603: LD_VAR 0 4
18607: MINUS
18608: ST_TO_ADDR
// if y - r < 0 then
18609: LD_VAR 0 3
18613: PUSH
18614: LD_VAR 0 4
18618: MINUS
18619: PUSH
18620: LD_INT 0
18622: LESS
18623: IFFALSE 18635
// min_y := 0 else
18625: LD_ADDR_VAR 0 8
18629: PUSH
18630: LD_INT 0
18632: ST_TO_ADDR
18633: GO 18651
// min_y := y - r ;
18635: LD_ADDR_VAR 0 8
18639: PUSH
18640: LD_VAR 0 3
18644: PUSH
18645: LD_VAR 0 4
18649: MINUS
18650: ST_TO_ADDR
// max_x := x + r ;
18651: LD_ADDR_VAR 0 9
18655: PUSH
18656: LD_VAR 0 2
18660: PUSH
18661: LD_VAR 0 4
18665: PLUS
18666: ST_TO_ADDR
// max_y := y + r ;
18667: LD_ADDR_VAR 0 10
18671: PUSH
18672: LD_VAR 0 3
18676: PUSH
18677: LD_VAR 0 4
18681: PLUS
18682: ST_TO_ADDR
// for _x = min_x to max_x do
18683: LD_ADDR_VAR 0 11
18687: PUSH
18688: DOUBLE
18689: LD_VAR 0 7
18693: DEC
18694: ST_TO_ADDR
18695: LD_VAR 0 9
18699: PUSH
18700: FOR_TO
18701: IFFALSE 18818
// for _y = min_y to max_y do
18703: LD_ADDR_VAR 0 12
18707: PUSH
18708: DOUBLE
18709: LD_VAR 0 8
18713: DEC
18714: ST_TO_ADDR
18715: LD_VAR 0 10
18719: PUSH
18720: FOR_TO
18721: IFFALSE 18814
// begin if not ValidHex ( _x , _y ) then
18723: LD_VAR 0 11
18727: PPUSH
18728: LD_VAR 0 12
18732: PPUSH
18733: CALL_OW 488
18737: NOT
18738: IFFALSE 18742
// continue ;
18740: GO 18720
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18742: LD_VAR 0 11
18746: PPUSH
18747: LD_VAR 0 12
18751: PPUSH
18752: CALL_OW 351
18756: PUSH
18757: LD_VAR 0 11
18761: PPUSH
18762: LD_VAR 0 12
18766: PPUSH
18767: CALL_OW 554
18771: AND
18772: IFFALSE 18812
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18774: LD_ADDR_VAR 0 13
18778: PUSH
18779: LD_VAR 0 13
18783: PPUSH
18784: LD_VAR 0 13
18788: PUSH
18789: LD_INT 1
18791: PLUS
18792: PPUSH
18793: LD_VAR 0 11
18797: PUSH
18798: LD_VAR 0 12
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 2
18811: ST_TO_ADDR
// end ;
18812: GO 18720
18814: POP
18815: POP
18816: GO 18700
18818: POP
18819: POP
// if not list then
18820: LD_VAR 0 13
18824: NOT
18825: IFFALSE 18829
// exit ;
18827: GO 18900
// for i in list do
18829: LD_ADDR_VAR 0 6
18833: PUSH
18834: LD_VAR 0 13
18838: PUSH
18839: FOR_IN
18840: IFFALSE 18898
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18842: LD_VAR 0 1
18846: PPUSH
18847: LD_STRING M
18849: PUSH
18850: LD_VAR 0 6
18854: PUSH
18855: LD_INT 1
18857: ARRAY
18858: PUSH
18859: LD_VAR 0 6
18863: PUSH
18864: LD_INT 2
18866: ARRAY
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: PPUSH
18892: CALL_OW 447
18896: GO 18839
18898: POP
18899: POP
// end ;
18900: LD_VAR 0 5
18904: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18905: LD_EXP 70
18909: NOT
18910: IFFALSE 18960
18912: GO 18914
18914: DISABLE
// begin initHack := true ;
18915: LD_ADDR_EXP 70
18919: PUSH
18920: LD_INT 1
18922: ST_TO_ADDR
// hackTanks := [ ] ;
18923: LD_ADDR_EXP 71
18927: PUSH
18928: EMPTY
18929: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18930: LD_ADDR_EXP 72
18934: PUSH
18935: EMPTY
18936: ST_TO_ADDR
// hackLimit := 3 ;
18937: LD_ADDR_EXP 73
18941: PUSH
18942: LD_INT 3
18944: ST_TO_ADDR
// hackDist := 12 ;
18945: LD_ADDR_EXP 74
18949: PUSH
18950: LD_INT 12
18952: ST_TO_ADDR
// hackCounter := [ ] ;
18953: LD_ADDR_EXP 75
18957: PUSH
18958: EMPTY
18959: ST_TO_ADDR
// end ;
18960: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18961: LD_EXP 70
18965: PUSH
18966: LD_INT 34
18968: PUSH
18969: LD_EXP 82
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 69
18982: AND
18983: IFFALSE 19238
18985: GO 18987
18987: DISABLE
18988: LD_INT 0
18990: PPUSH
18991: PPUSH
// begin enable ;
18992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18993: LD_ADDR_VAR 0 1
18997: PUSH
18998: LD_INT 34
19000: PUSH
19001: LD_EXP 82
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: PUSH
19015: FOR_IN
19016: IFFALSE 19236
// begin if not i in hackTanks then
19018: LD_VAR 0 1
19022: PUSH
19023: LD_EXP 71
19027: IN
19028: NOT
19029: IFFALSE 19112
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19031: LD_ADDR_EXP 71
19035: PUSH
19036: LD_EXP 71
19040: PPUSH
19041: LD_EXP 71
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: PPUSH
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19060: LD_ADDR_EXP 72
19064: PUSH
19065: LD_EXP 72
19069: PPUSH
19070: LD_EXP 72
19074: PUSH
19075: LD_INT 1
19077: PLUS
19078: PPUSH
19079: EMPTY
19080: PPUSH
19081: CALL_OW 1
19085: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19086: LD_ADDR_EXP 75
19090: PUSH
19091: LD_EXP 75
19095: PPUSH
19096: LD_EXP 75
19100: PUSH
19101: LD_INT 1
19103: PLUS
19104: PPUSH
19105: EMPTY
19106: PPUSH
19107: CALL_OW 1
19111: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19112: LD_VAR 0 1
19116: PPUSH
19117: CALL_OW 302
19121: NOT
19122: IFFALSE 19135
// begin HackUnlinkAll ( i ) ;
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL 19241 0 1
// continue ;
19133: GO 19015
// end ; HackCheckCapturedStatus ( i ) ;
19135: LD_VAR 0 1
19139: PPUSH
19140: CALL 19684 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19144: LD_ADDR_VAR 0 2
19148: PUSH
19149: LD_INT 81
19151: PUSH
19152: LD_VAR 0 1
19156: PPUSH
19157: CALL_OW 255
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 33
19168: PUSH
19169: LD_INT 3
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 91
19178: PUSH
19179: LD_VAR 0 1
19183: PUSH
19184: LD_EXP 74
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 50
19196: PUSH
19197: EMPTY
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 69
19210: ST_TO_ADDR
// if not tmp then
19211: LD_VAR 0 2
19215: NOT
19216: IFFALSE 19220
// continue ;
19218: GO 19015
// HackLink ( i , tmp ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_VAR 0 2
19229: PPUSH
19230: CALL 19377 0 2
// end ;
19234: GO 19015
19236: POP
19237: POP
// end ;
19238: PPOPN 2
19240: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19241: LD_INT 0
19243: PPUSH
19244: PPUSH
19245: PPUSH
// if not hack in hackTanks then
19246: LD_VAR 0 1
19250: PUSH
19251: LD_EXP 71
19255: IN
19256: NOT
19257: IFFALSE 19261
// exit ;
19259: GO 19372
// index := GetElementIndex ( hackTanks , hack ) ;
19261: LD_ADDR_VAR 0 4
19265: PUSH
19266: LD_EXP 71
19270: PPUSH
19271: LD_VAR 0 1
19275: PPUSH
19276: CALL 26470 0 2
19280: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19281: LD_EXP 72
19285: PUSH
19286: LD_VAR 0 4
19290: ARRAY
19291: IFFALSE 19372
// begin for i in hackTanksCaptured [ index ] do
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_EXP 72
19302: PUSH
19303: LD_VAR 0 4
19307: ARRAY
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19336
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 1
19319: ARRAY
19320: PPUSH
19321: LD_VAR 0 3
19325: PUSH
19326: LD_INT 2
19328: ARRAY
19329: PPUSH
19330: CALL_OW 235
19334: GO 19309
19336: POP
19337: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19338: LD_ADDR_EXP 72
19342: PUSH
19343: LD_EXP 72
19347: PPUSH
19348: LD_VAR 0 4
19352: PPUSH
19353: EMPTY
19354: PPUSH
19355: CALL_OW 1
19359: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19360: LD_VAR 0 1
19364: PPUSH
19365: LD_INT 0
19367: PPUSH
19368: CALL_OW 505
// end ; end ;
19372: LD_VAR 0 2
19376: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
19381: PPUSH
// if not hack in hackTanks or not vehicles then
19382: LD_VAR 0 1
19386: PUSH
19387: LD_EXP 71
19391: IN
19392: NOT
19393: PUSH
19394: LD_VAR 0 2
19398: NOT
19399: OR
19400: IFFALSE 19404
// exit ;
19402: GO 19679
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19404: LD_ADDR_VAR 0 2
19408: PUSH
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_VAR 0 2
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: LD_INT 1
19424: PPUSH
19425: CALL 27120 0 4
19429: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19430: LD_ADDR_VAR 0 5
19434: PUSH
19435: LD_EXP 71
19439: PPUSH
19440: LD_VAR 0 1
19444: PPUSH
19445: CALL 26470 0 2
19449: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19450: LD_EXP 72
19454: PUSH
19455: LD_VAR 0 5
19459: ARRAY
19460: PUSH
19461: LD_EXP 73
19465: LESS
19466: IFFALSE 19655
// begin for i := 1 to vehicles do
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: DOUBLE
19474: LD_INT 1
19476: DEC
19477: ST_TO_ADDR
19478: LD_VAR 0 2
19482: PUSH
19483: FOR_TO
19484: IFFALSE 19653
// begin if hackTanksCaptured [ index ] = hackLimit then
19486: LD_EXP 72
19490: PUSH
19491: LD_VAR 0 5
19495: ARRAY
19496: PUSH
19497: LD_EXP 73
19501: EQUAL
19502: IFFALSE 19506
// break ;
19504: GO 19653
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19506: LD_ADDR_EXP 75
19510: PUSH
19511: LD_EXP 75
19515: PPUSH
19516: LD_VAR 0 5
19520: PPUSH
19521: LD_EXP 75
19525: PUSH
19526: LD_VAR 0 5
19530: ARRAY
19531: PUSH
19532: LD_INT 1
19534: PLUS
19535: PPUSH
19536: CALL_OW 1
19540: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19541: LD_ADDR_EXP 72
19545: PUSH
19546: LD_EXP 72
19550: PPUSH
19551: LD_VAR 0 5
19555: PUSH
19556: LD_EXP 72
19560: PUSH
19561: LD_VAR 0 5
19565: ARRAY
19566: PUSH
19567: LD_INT 1
19569: PLUS
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PPUSH
19575: LD_VAR 0 2
19579: PUSH
19580: LD_VAR 0 4
19584: ARRAY
19585: PUSH
19586: LD_VAR 0 2
19590: PUSH
19591: LD_VAR 0 4
19595: ARRAY
19596: PPUSH
19597: CALL_OW 255
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PPUSH
19606: CALL 26685 0 3
19610: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19611: LD_VAR 0 2
19615: PUSH
19616: LD_VAR 0 4
19620: ARRAY
19621: PPUSH
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 255
19631: PPUSH
19632: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19636: LD_VAR 0 2
19640: PUSH
19641: LD_VAR 0 4
19645: ARRAY
19646: PPUSH
19647: CALL_OW 141
// end ;
19651: GO 19483
19653: POP
19654: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19655: LD_VAR 0 1
19659: PPUSH
19660: LD_EXP 72
19664: PUSH
19665: LD_VAR 0 5
19669: ARRAY
19670: PUSH
19671: LD_INT 0
19673: PLUS
19674: PPUSH
19675: CALL_OW 505
// end ;
19679: LD_VAR 0 3
19683: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19684: LD_INT 0
19686: PPUSH
19687: PPUSH
19688: PPUSH
19689: PPUSH
// if not hack in hackTanks then
19690: LD_VAR 0 1
19694: PUSH
19695: LD_EXP 71
19699: IN
19700: NOT
19701: IFFALSE 19705
// exit ;
19703: GO 19945
// index := GetElementIndex ( hackTanks , hack ) ;
19705: LD_ADDR_VAR 0 4
19709: PUSH
19710: LD_EXP 71
19714: PPUSH
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL 26470 0 2
19724: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19725: LD_ADDR_VAR 0 3
19729: PUSH
19730: DOUBLE
19731: LD_EXP 72
19735: PUSH
19736: LD_VAR 0 4
19740: ARRAY
19741: INC
19742: ST_TO_ADDR
19743: LD_INT 1
19745: PUSH
19746: FOR_DOWNTO
19747: IFFALSE 19919
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19749: LD_ADDR_VAR 0 5
19753: PUSH
19754: LD_EXP 72
19758: PUSH
19759: LD_VAR 0 4
19763: ARRAY
19764: PUSH
19765: LD_VAR 0 3
19769: ARRAY
19770: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19771: LD_VAR 0 5
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: PPUSH
19780: CALL_OW 302
19784: NOT
19785: PUSH
19786: LD_VAR 0 5
19790: PUSH
19791: LD_INT 1
19793: ARRAY
19794: PPUSH
19795: CALL_OW 255
19799: PUSH
19800: LD_VAR 0 1
19804: PPUSH
19805: CALL_OW 255
19809: NONEQUAL
19810: OR
19811: IFFALSE 19917
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19813: LD_VAR 0 5
19817: PUSH
19818: LD_INT 1
19820: ARRAY
19821: PPUSH
19822: CALL_OW 305
19826: PUSH
19827: LD_VAR 0 5
19831: PUSH
19832: LD_INT 1
19834: ARRAY
19835: PPUSH
19836: CALL_OW 255
19840: PUSH
19841: LD_VAR 0 1
19845: PPUSH
19846: CALL_OW 255
19850: EQUAL
19851: AND
19852: IFFALSE 19876
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19854: LD_VAR 0 5
19858: PUSH
19859: LD_INT 1
19861: ARRAY
19862: PPUSH
19863: LD_VAR 0 5
19867: PUSH
19868: LD_INT 2
19870: ARRAY
19871: PPUSH
19872: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19876: LD_ADDR_EXP 72
19880: PUSH
19881: LD_EXP 72
19885: PPUSH
19886: LD_VAR 0 4
19890: PPUSH
19891: LD_EXP 72
19895: PUSH
19896: LD_VAR 0 4
19900: ARRAY
19901: PPUSH
19902: LD_VAR 0 3
19906: PPUSH
19907: CALL_OW 3
19911: PPUSH
19912: CALL_OW 1
19916: ST_TO_ADDR
// end ; end ;
19917: GO 19746
19919: POP
19920: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_EXP 72
19930: PUSH
19931: LD_VAR 0 4
19935: ARRAY
19936: PUSH
19937: LD_INT 0
19939: PLUS
19940: PPUSH
19941: CALL_OW 505
// end ;
19945: LD_VAR 0 2
19949: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19950: LD_INT 0
19952: PPUSH
19953: PPUSH
19954: PPUSH
19955: PPUSH
// if not hack in hackTanks then
19956: LD_VAR 0 1
19960: PUSH
19961: LD_EXP 71
19965: IN
19966: NOT
19967: IFFALSE 19971
// exit ;
19969: GO 20056
// index := GetElementIndex ( hackTanks , hack ) ;
19971: LD_ADDR_VAR 0 5
19975: PUSH
19976: LD_EXP 71
19980: PPUSH
19981: LD_VAR 0 1
19985: PPUSH
19986: CALL 26470 0 2
19990: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19991: LD_ADDR_VAR 0 4
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_EXP 72
20005: PUSH
20006: LD_VAR 0 5
20010: ARRAY
20011: PUSH
20012: FOR_TO
20013: IFFALSE 20054
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20015: LD_EXP 72
20019: PUSH
20020: LD_VAR 0 5
20024: ARRAY
20025: PUSH
20026: LD_VAR 0 4
20030: ARRAY
20031: PUSH
20032: LD_INT 1
20034: ARRAY
20035: PUSH
20036: LD_VAR 0 2
20040: EQUAL
20041: IFFALSE 20052
// KillUnit ( vehicle ) ;
20043: LD_VAR 0 2
20047: PPUSH
20048: CALL_OW 66
20052: GO 20012
20054: POP
20055: POP
// end ;
20056: LD_VAR 0 3
20060: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20061: LD_EXP 76
20065: NOT
20066: IFFALSE 20101
20068: GO 20070
20070: DISABLE
// begin initMiner := true ;
20071: LD_ADDR_EXP 76
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// minersList := [ ] ;
20079: LD_ADDR_EXP 77
20083: PUSH
20084: EMPTY
20085: ST_TO_ADDR
// minerMinesList := [ ] ;
20086: LD_ADDR_EXP 78
20090: PUSH
20091: EMPTY
20092: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20093: LD_ADDR_EXP 79
20097: PUSH
20098: LD_INT 5
20100: ST_TO_ADDR
// end ;
20101: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20102: LD_EXP 76
20106: PUSH
20107: LD_INT 34
20109: PUSH
20110: LD_EXP 87
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: AND
20124: IFFALSE 20587
20126: GO 20128
20128: DISABLE
20129: LD_INT 0
20131: PPUSH
20132: PPUSH
20133: PPUSH
20134: PPUSH
// begin enable ;
20135: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20136: LD_ADDR_VAR 0 1
20140: PUSH
20141: LD_INT 34
20143: PUSH
20144: LD_EXP 87
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PPUSH
20153: CALL_OW 69
20157: PUSH
20158: FOR_IN
20159: IFFALSE 20231
// begin if not i in minersList then
20161: LD_VAR 0 1
20165: PUSH
20166: LD_EXP 77
20170: IN
20171: NOT
20172: IFFALSE 20229
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20174: LD_ADDR_EXP 77
20178: PUSH
20179: LD_EXP 77
20183: PPUSH
20184: LD_EXP 77
20188: PUSH
20189: LD_INT 1
20191: PLUS
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 1
20202: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20203: LD_ADDR_EXP 78
20207: PUSH
20208: LD_EXP 78
20212: PPUSH
20213: LD_EXP 78
20217: PUSH
20218: LD_INT 1
20220: PLUS
20221: PPUSH
20222: EMPTY
20223: PPUSH
20224: CALL_OW 1
20228: ST_TO_ADDR
// end end ;
20229: GO 20158
20231: POP
20232: POP
// for i := minerMinesList downto 1 do
20233: LD_ADDR_VAR 0 1
20237: PUSH
20238: DOUBLE
20239: LD_EXP 78
20243: INC
20244: ST_TO_ADDR
20245: LD_INT 1
20247: PUSH
20248: FOR_DOWNTO
20249: IFFALSE 20585
// begin if IsLive ( minersList [ i ] ) then
20251: LD_EXP 77
20255: PUSH
20256: LD_VAR 0 1
20260: ARRAY
20261: PPUSH
20262: CALL_OW 300
20266: IFFALSE 20294
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20268: LD_EXP 77
20272: PUSH
20273: LD_VAR 0 1
20277: ARRAY
20278: PPUSH
20279: LD_EXP 78
20283: PUSH
20284: LD_VAR 0 1
20288: ARRAY
20289: PPUSH
20290: CALL_OW 505
// if not minerMinesList [ i ] then
20294: LD_EXP 78
20298: PUSH
20299: LD_VAR 0 1
20303: ARRAY
20304: NOT
20305: IFFALSE 20309
// continue ;
20307: GO 20248
// for j := minerMinesList [ i ] downto 1 do
20309: LD_ADDR_VAR 0 2
20313: PUSH
20314: DOUBLE
20315: LD_EXP 78
20319: PUSH
20320: LD_VAR 0 1
20324: ARRAY
20325: INC
20326: ST_TO_ADDR
20327: LD_INT 1
20329: PUSH
20330: FOR_DOWNTO
20331: IFFALSE 20581
// begin side := GetSide ( minersList [ i ] ) ;
20333: LD_ADDR_VAR 0 3
20337: PUSH
20338: LD_EXP 77
20342: PUSH
20343: LD_VAR 0 1
20347: ARRAY
20348: PPUSH
20349: CALL_OW 255
20353: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20354: LD_ADDR_VAR 0 4
20358: PUSH
20359: LD_EXP 78
20363: PUSH
20364: LD_VAR 0 1
20368: ARRAY
20369: PUSH
20370: LD_VAR 0 2
20374: ARRAY
20375: PUSH
20376: LD_INT 1
20378: ARRAY
20379: PPUSH
20380: LD_EXP 78
20384: PUSH
20385: LD_VAR 0 1
20389: ARRAY
20390: PUSH
20391: LD_VAR 0 2
20395: ARRAY
20396: PUSH
20397: LD_INT 2
20399: ARRAY
20400: PPUSH
20401: CALL_OW 428
20405: ST_TO_ADDR
// if not tmp then
20406: LD_VAR 0 4
20410: NOT
20411: IFFALSE 20415
// continue ;
20413: GO 20330
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20415: LD_VAR 0 4
20419: PUSH
20420: LD_INT 81
20422: PUSH
20423: LD_VAR 0 3
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 69
20436: IN
20437: PUSH
20438: LD_EXP 78
20442: PUSH
20443: LD_VAR 0 1
20447: ARRAY
20448: PUSH
20449: LD_VAR 0 2
20453: ARRAY
20454: PUSH
20455: LD_INT 1
20457: ARRAY
20458: PPUSH
20459: LD_EXP 78
20463: PUSH
20464: LD_VAR 0 1
20468: ARRAY
20469: PUSH
20470: LD_VAR 0 2
20474: ARRAY
20475: PUSH
20476: LD_INT 2
20478: ARRAY
20479: PPUSH
20480: CALL_OW 458
20484: AND
20485: IFFALSE 20579
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20487: LD_EXP 78
20491: PUSH
20492: LD_VAR 0 1
20496: ARRAY
20497: PUSH
20498: LD_VAR 0 2
20502: ARRAY
20503: PUSH
20504: LD_INT 1
20506: ARRAY
20507: PPUSH
20508: LD_EXP 78
20512: PUSH
20513: LD_VAR 0 1
20517: ARRAY
20518: PUSH
20519: LD_VAR 0 2
20523: ARRAY
20524: PUSH
20525: LD_INT 2
20527: ARRAY
20528: PPUSH
20529: LD_VAR 0 3
20533: PPUSH
20534: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20538: LD_ADDR_EXP 78
20542: PUSH
20543: LD_EXP 78
20547: PPUSH
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_EXP 78
20557: PUSH
20558: LD_VAR 0 1
20562: ARRAY
20563: PPUSH
20564: LD_VAR 0 2
20568: PPUSH
20569: CALL_OW 3
20573: PPUSH
20574: CALL_OW 1
20578: ST_TO_ADDR
// end ; end ;
20579: GO 20330
20581: POP
20582: POP
// end ;
20583: GO 20248
20585: POP
20586: POP
// end ;
20587: PPOPN 4
20589: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20590: LD_INT 0
20592: PPUSH
20593: PPUSH
// result := false ;
20594: LD_ADDR_VAR 0 4
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20602: LD_VAR 0 1
20606: PPUSH
20607: CALL_OW 264
20611: PUSH
20612: LD_EXP 87
20616: EQUAL
20617: NOT
20618: IFFALSE 20622
// exit ;
20620: GO 20862
// index := GetElementIndex ( minersList , unit ) ;
20622: LD_ADDR_VAR 0 5
20626: PUSH
20627: LD_EXP 77
20631: PPUSH
20632: LD_VAR 0 1
20636: PPUSH
20637: CALL 26470 0 2
20641: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20642: LD_EXP 78
20646: PUSH
20647: LD_VAR 0 5
20651: ARRAY
20652: PUSH
20653: LD_EXP 79
20657: GREATEREQUAL
20658: IFFALSE 20662
// exit ;
20660: GO 20862
// ComMoveXY ( unit , x , y ) ;
20662: LD_VAR 0 1
20666: PPUSH
20667: LD_VAR 0 2
20671: PPUSH
20672: LD_VAR 0 3
20676: PPUSH
20677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20681: LD_INT 35
20683: PPUSH
20684: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20688: LD_VAR 0 1
20692: PPUSH
20693: LD_VAR 0 2
20697: PPUSH
20698: LD_VAR 0 3
20702: PPUSH
20703: CALL 56534 0 3
20707: NOT
20708: PUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 314
20718: AND
20719: IFFALSE 20723
// exit ;
20721: GO 20862
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20723: LD_VAR 0 2
20727: PPUSH
20728: LD_VAR 0 3
20732: PPUSH
20733: CALL_OW 428
20737: PUSH
20738: LD_VAR 0 1
20742: EQUAL
20743: PUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: CALL_OW 314
20753: NOT
20754: AND
20755: IFFALSE 20681
// PlaySoundXY ( x , y , PlantMine ) ;
20757: LD_VAR 0 2
20761: PPUSH
20762: LD_VAR 0 3
20766: PPUSH
20767: LD_STRING PlantMine
20769: PPUSH
20770: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20774: LD_VAR 0 2
20778: PPUSH
20779: LD_VAR 0 3
20783: PPUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 255
20793: PPUSH
20794: LD_INT 0
20796: PPUSH
20797: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20801: LD_ADDR_EXP 78
20805: PUSH
20806: LD_EXP 78
20810: PPUSH
20811: LD_VAR 0 5
20815: PUSH
20816: LD_EXP 78
20820: PUSH
20821: LD_VAR 0 5
20825: ARRAY
20826: PUSH
20827: LD_INT 1
20829: PLUS
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PPUSH
20835: LD_VAR 0 2
20839: PUSH
20840: LD_VAR 0 3
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL 26685 0 3
20853: ST_TO_ADDR
// result := true ;
20854: LD_ADDR_VAR 0 4
20858: PUSH
20859: LD_INT 1
20861: ST_TO_ADDR
// end ;
20862: LD_VAR 0 4
20866: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20867: LD_INT 0
20869: PPUSH
20870: PPUSH
20871: PPUSH
// if not unit in minersList then
20872: LD_VAR 0 1
20876: PUSH
20877: LD_EXP 77
20881: IN
20882: NOT
20883: IFFALSE 20887
// exit ;
20885: GO 21088
// index := GetElementIndex ( minersList , unit ) ;
20887: LD_ADDR_VAR 0 6
20891: PUSH
20892: LD_EXP 77
20896: PPUSH
20897: LD_VAR 0 1
20901: PPUSH
20902: CALL 26470 0 2
20906: ST_TO_ADDR
// for i := 1 to minerMinesList [ index ] do
20907: LD_ADDR_VAR 0 5
20911: PUSH
20912: DOUBLE
20913: LD_INT 1
20915: DEC
20916: ST_TO_ADDR
20917: LD_EXP 78
20921: PUSH
20922: LD_VAR 0 6
20926: ARRAY
20927: PUSH
20928: FOR_TO
20929: IFFALSE 21086
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20931: LD_EXP 78
20935: PUSH
20936: LD_VAR 0 6
20940: ARRAY
20941: PUSH
20942: LD_VAR 0 5
20946: ARRAY
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PUSH
20952: LD_VAR 0 2
20956: EQUAL
20957: PUSH
20958: LD_EXP 78
20962: PUSH
20963: LD_VAR 0 6
20967: ARRAY
20968: PUSH
20969: LD_VAR 0 5
20973: ARRAY
20974: PUSH
20975: LD_INT 2
20977: ARRAY
20978: PUSH
20979: LD_VAR 0 3
20983: EQUAL
20984: AND
20985: IFFALSE 21084
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20987: LD_EXP 78
20991: PUSH
20992: LD_VAR 0 6
20996: ARRAY
20997: PUSH
20998: LD_VAR 0 5
21002: ARRAY
21003: PUSH
21004: LD_INT 1
21006: ARRAY
21007: PPUSH
21008: LD_EXP 78
21012: PUSH
21013: LD_VAR 0 6
21017: ARRAY
21018: PUSH
21019: LD_VAR 0 5
21023: ARRAY
21024: PUSH
21025: LD_INT 2
21027: ARRAY
21028: PPUSH
21029: LD_VAR 0 1
21033: PPUSH
21034: CALL_OW 255
21038: PPUSH
21039: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21043: LD_ADDR_EXP 78
21047: PUSH
21048: LD_EXP 78
21052: PPUSH
21053: LD_VAR 0 6
21057: PPUSH
21058: LD_EXP 78
21062: PUSH
21063: LD_VAR 0 6
21067: ARRAY
21068: PPUSH
21069: LD_VAR 0 5
21073: PPUSH
21074: CALL_OW 3
21078: PPUSH
21079: CALL_OW 1
21083: ST_TO_ADDR
// end ; end ;
21084: GO 20928
21086: POP
21087: POP
// end ;
21088: LD_VAR 0 4
21092: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21093: LD_INT 0
21095: PPUSH
21096: PPUSH
21097: PPUSH
21098: PPUSH
21099: PPUSH
21100: PPUSH
21101: PPUSH
21102: PPUSH
21103: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 264
21113: PUSH
21114: LD_EXP 87
21118: EQUAL
21119: NOT
21120: PUSH
21121: LD_VAR 0 1
21125: PUSH
21126: LD_EXP 77
21130: IN
21131: NOT
21132: OR
21133: IFFALSE 21137
// exit ;
21135: GO 21459
// index := GetElementIndex ( minersList , unit ) ;
21137: LD_ADDR_VAR 0 6
21141: PUSH
21142: LD_EXP 77
21146: PPUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL 26470 0 2
21156: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21157: LD_ADDR_VAR 0 8
21161: PUSH
21162: LD_EXP 79
21166: PUSH
21167: LD_EXP 78
21171: PUSH
21172: LD_VAR 0 6
21176: ARRAY
21177: MINUS
21178: ST_TO_ADDR
// if not minesFreeAmount then
21179: LD_VAR 0 8
21183: NOT
21184: IFFALSE 21188
// exit ;
21186: GO 21459
// tmp := [ ] ;
21188: LD_ADDR_VAR 0 7
21192: PUSH
21193: EMPTY
21194: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: DOUBLE
21201: LD_INT 1
21203: DEC
21204: ST_TO_ADDR
21205: LD_VAR 0 8
21209: PUSH
21210: FOR_TO
21211: IFFALSE 21406
// begin _d := rand ( 0 , 5 ) ;
21213: LD_ADDR_VAR 0 11
21217: PUSH
21218: LD_INT 0
21220: PPUSH
21221: LD_INT 5
21223: PPUSH
21224: CALL_OW 12
21228: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21229: LD_ADDR_VAR 0 12
21233: PUSH
21234: LD_INT 2
21236: PPUSH
21237: LD_INT 6
21239: PPUSH
21240: CALL_OW 12
21244: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21245: LD_ADDR_VAR 0 9
21249: PUSH
21250: LD_VAR 0 2
21254: PPUSH
21255: LD_VAR 0 11
21259: PPUSH
21260: LD_VAR 0 12
21264: PPUSH
21265: CALL_OW 272
21269: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21270: LD_ADDR_VAR 0 10
21274: PUSH
21275: LD_VAR 0 3
21279: PPUSH
21280: LD_VAR 0 11
21284: PPUSH
21285: LD_VAR 0 12
21289: PPUSH
21290: CALL_OW 273
21294: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21295: LD_VAR 0 9
21299: PPUSH
21300: LD_VAR 0 10
21304: PPUSH
21305: CALL_OW 488
21309: PUSH
21310: LD_VAR 0 9
21314: PUSH
21315: LD_VAR 0 10
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_VAR 0 7
21328: IN
21329: NOT
21330: AND
21331: PUSH
21332: LD_VAR 0 9
21336: PPUSH
21337: LD_VAR 0 10
21341: PPUSH
21342: CALL_OW 458
21346: NOT
21347: AND
21348: IFFALSE 21390
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21350: LD_ADDR_VAR 0 7
21354: PUSH
21355: LD_VAR 0 7
21359: PPUSH
21360: LD_VAR 0 7
21364: PUSH
21365: LD_INT 1
21367: PLUS
21368: PPUSH
21369: LD_VAR 0 9
21373: PUSH
21374: LD_VAR 0 10
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PPUSH
21383: CALL_OW 1
21387: ST_TO_ADDR
21388: GO 21404
// i := i - 1 ;
21390: LD_ADDR_VAR 0 5
21394: PUSH
21395: LD_VAR 0 5
21399: PUSH
21400: LD_INT 1
21402: MINUS
21403: ST_TO_ADDR
// end ;
21404: GO 21210
21406: POP
21407: POP
// for i in tmp do
21408: LD_ADDR_VAR 0 5
21412: PUSH
21413: LD_VAR 0 7
21417: PUSH
21418: FOR_IN
21419: IFFALSE 21457
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21421: LD_VAR 0 1
21425: PPUSH
21426: LD_VAR 0 5
21430: PUSH
21431: LD_INT 1
21433: ARRAY
21434: PPUSH
21435: LD_VAR 0 5
21439: PUSH
21440: LD_INT 2
21442: ARRAY
21443: PPUSH
21444: CALL 20590 0 3
21448: NOT
21449: IFFALSE 21455
// exit ;
21451: POP
21452: POP
21453: GO 21459
21455: GO 21418
21457: POP
21458: POP
// end ; end_of_file
21459: LD_VAR 0 4
21463: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21464: LD_VAR 0 1
21468: PUSH
21469: LD_INT 200
21471: DOUBLE
21472: GREATEREQUAL
21473: IFFALSE 21481
21475: LD_INT 299
21477: DOUBLE
21478: LESSEQUAL
21479: IFTRUE 21483
21481: GO 21515
21483: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21484: LD_VAR 0 1
21488: PPUSH
21489: LD_VAR 0 2
21493: PPUSH
21494: LD_VAR 0 3
21498: PPUSH
21499: LD_VAR 0 4
21503: PPUSH
21504: LD_VAR 0 5
21508: PPUSH
21509: CALL 18244 0 5
21513: GO 21592
21515: LD_INT 300
21517: DOUBLE
21518: GREATEREQUAL
21519: IFFALSE 21527
21521: LD_INT 399
21523: DOUBLE
21524: LESSEQUAL
21525: IFTRUE 21529
21527: GO 21591
21529: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21530: LD_VAR 0 1
21534: PPUSH
21535: LD_VAR 0 2
21539: PPUSH
21540: LD_VAR 0 3
21544: PPUSH
21545: LD_VAR 0 4
21549: PPUSH
21550: LD_VAR 0 5
21554: PPUSH
21555: LD_VAR 0 6
21559: PPUSH
21560: LD_VAR 0 7
21564: PPUSH
21565: LD_VAR 0 8
21569: PPUSH
21570: LD_VAR 0 9
21574: PPUSH
21575: LD_VAR 0 10
21579: PPUSH
21580: LD_VAR 0 11
21584: PPUSH
21585: CALL 16150 0 11
21589: GO 21592
21591: POP
// end ; end_of_file
21592: PPOPN 11
21594: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
21595: LD_INT 0
21597: PPUSH
// ar_miner := 81 ;
21598: LD_ADDR_EXP 87
21602: PUSH
21603: LD_INT 81
21605: ST_TO_ADDR
// ar_crane := 88 ;
21606: LD_ADDR_EXP 86
21610: PUSH
21611: LD_INT 88
21613: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21614: LD_ADDR_EXP 81
21618: PUSH
21619: LD_INT 89
21621: ST_TO_ADDR
// us_hack := 99 ;
21622: LD_ADDR_EXP 82
21626: PUSH
21627: LD_INT 99
21629: ST_TO_ADDR
// us_artillery := 97 ;
21630: LD_ADDR_EXP 83
21634: PUSH
21635: LD_INT 97
21637: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21638: LD_ADDR_EXP 84
21642: PUSH
21643: LD_INT 91
21645: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21646: LD_ADDR_EXP 85
21650: PUSH
21651: LD_INT 92
21653: ST_TO_ADDR
// ru_radar := 98 ;
21654: LD_ADDR_EXP 80
21658: PUSH
21659: LD_INT 98
21661: ST_TO_ADDR
// tech_Artillery := 80 ;
21662: LD_ADDR_EXP 88
21666: PUSH
21667: LD_INT 80
21669: ST_TO_ADDR
// tech_RadMat := 81 ;
21670: LD_ADDR_EXP 89
21674: PUSH
21675: LD_INT 81
21677: ST_TO_ADDR
// tech_BasicTools := 82 ;
21678: LD_ADDR_EXP 90
21682: PUSH
21683: LD_INT 82
21685: ST_TO_ADDR
// tech_Cargo := 83 ;
21686: LD_ADDR_EXP 91
21690: PUSH
21691: LD_INT 83
21693: ST_TO_ADDR
// tech_Track := 84 ;
21694: LD_ADDR_EXP 92
21698: PUSH
21699: LD_INT 84
21701: ST_TO_ADDR
// tech_Crane := 85 ;
21702: LD_ADDR_EXP 93
21706: PUSH
21707: LD_INT 85
21709: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21710: LD_ADDR_EXP 94
21714: PUSH
21715: LD_INT 86
21717: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21718: LD_ADDR_EXP 95
21722: PUSH
21723: LD_INT 87
21725: ST_TO_ADDR
// end ;
21726: LD_VAR 0 1
21730: RET
// every 1 do
21731: GO 21733
21733: DISABLE
// InitGlobalVariables ; end_of_file
21734: CALL 21595 0 0
21738: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
// if exist_mode then
21743: LD_VAR 0 2
21747: IFFALSE 21772
// unit := CreateCharacter ( prefix & ident ) else
21749: LD_ADDR_VAR 0 5
21753: PUSH
21754: LD_VAR 0 3
21758: PUSH
21759: LD_VAR 0 1
21763: STR
21764: PPUSH
21765: CALL_OW 34
21769: ST_TO_ADDR
21770: GO 21787
// unit := NewCharacter ( ident ) ;
21772: LD_ADDR_VAR 0 5
21776: PUSH
21777: LD_VAR 0 1
21781: PPUSH
21782: CALL_OW 25
21786: ST_TO_ADDR
// result := unit ;
21787: LD_ADDR_VAR 0 4
21791: PUSH
21792: LD_VAR 0 5
21796: ST_TO_ADDR
// end ;
21797: LD_VAR 0 4
21801: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21802: LD_INT 0
21804: PPUSH
21805: PPUSH
// if not side or not nation then
21806: LD_VAR 0 1
21810: NOT
21811: PUSH
21812: LD_VAR 0 2
21816: NOT
21817: OR
21818: IFFALSE 21822
// exit ;
21820: GO 22586
// case nation of nation_american :
21822: LD_VAR 0 2
21826: PUSH
21827: LD_INT 1
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 22049
21835: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21836: LD_ADDR_VAR 0 4
21840: PUSH
21841: LD_INT 35
21843: PUSH
21844: LD_INT 45
21846: PUSH
21847: LD_INT 46
21849: PUSH
21850: LD_INT 47
21852: PUSH
21853: LD_INT 82
21855: PUSH
21856: LD_INT 83
21858: PUSH
21859: LD_INT 84
21861: PUSH
21862: LD_INT 85
21864: PUSH
21865: LD_INT 86
21867: PUSH
21868: LD_INT 1
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: LD_INT 6
21876: PUSH
21877: LD_INT 15
21879: PUSH
21880: LD_INT 16
21882: PUSH
21883: LD_INT 7
21885: PUSH
21886: LD_INT 12
21888: PUSH
21889: LD_INT 13
21891: PUSH
21892: LD_INT 10
21894: PUSH
21895: LD_INT 14
21897: PUSH
21898: LD_INT 20
21900: PUSH
21901: LD_INT 21
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_INT 25
21909: PUSH
21910: LD_INT 32
21912: PUSH
21913: LD_INT 27
21915: PUSH
21916: LD_INT 36
21918: PUSH
21919: LD_INT 69
21921: PUSH
21922: LD_INT 39
21924: PUSH
21925: LD_INT 34
21927: PUSH
21928: LD_INT 40
21930: PUSH
21931: LD_INT 48
21933: PUSH
21934: LD_INT 49
21936: PUSH
21937: LD_INT 50
21939: PUSH
21940: LD_INT 51
21942: PUSH
21943: LD_INT 52
21945: PUSH
21946: LD_INT 53
21948: PUSH
21949: LD_INT 54
21951: PUSH
21952: LD_INT 55
21954: PUSH
21955: LD_INT 56
21957: PUSH
21958: LD_INT 57
21960: PUSH
21961: LD_INT 58
21963: PUSH
21964: LD_INT 59
21966: PUSH
21967: LD_INT 60
21969: PUSH
21970: LD_INT 61
21972: PUSH
21973: LD_INT 62
21975: PUSH
21976: LD_INT 80
21978: PUSH
21979: LD_INT 82
21981: PUSH
21982: LD_INT 83
21984: PUSH
21985: LD_INT 84
21987: PUSH
21988: LD_INT 85
21990: PUSH
21991: LD_INT 86
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: ST_TO_ADDR
22047: GO 22510
22049: LD_INT 2
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22279
22057: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22058: LD_ADDR_VAR 0 4
22062: PUSH
22063: LD_INT 35
22065: PUSH
22066: LD_INT 45
22068: PUSH
22069: LD_INT 46
22071: PUSH
22072: LD_INT 47
22074: PUSH
22075: LD_INT 82
22077: PUSH
22078: LD_INT 83
22080: PUSH
22081: LD_INT 84
22083: PUSH
22084: LD_INT 85
22086: PUSH
22087: LD_INT 87
22089: PUSH
22090: LD_INT 70
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 11
22098: PUSH
22099: LD_INT 3
22101: PUSH
22102: LD_INT 4
22104: PUSH
22105: LD_INT 5
22107: PUSH
22108: LD_INT 6
22110: PUSH
22111: LD_INT 15
22113: PUSH
22114: LD_INT 18
22116: PUSH
22117: LD_INT 7
22119: PUSH
22120: LD_INT 17
22122: PUSH
22123: LD_INT 8
22125: PUSH
22126: LD_INT 20
22128: PUSH
22129: LD_INT 21
22131: PUSH
22132: LD_INT 22
22134: PUSH
22135: LD_INT 72
22137: PUSH
22138: LD_INT 26
22140: PUSH
22141: LD_INT 69
22143: PUSH
22144: LD_INT 39
22146: PUSH
22147: LD_INT 40
22149: PUSH
22150: LD_INT 41
22152: PUSH
22153: LD_INT 42
22155: PUSH
22156: LD_INT 43
22158: PUSH
22159: LD_INT 48
22161: PUSH
22162: LD_INT 49
22164: PUSH
22165: LD_INT 50
22167: PUSH
22168: LD_INT 51
22170: PUSH
22171: LD_INT 52
22173: PUSH
22174: LD_INT 53
22176: PUSH
22177: LD_INT 54
22179: PUSH
22180: LD_INT 55
22182: PUSH
22183: LD_INT 56
22185: PUSH
22186: LD_INT 60
22188: PUSH
22189: LD_INT 61
22191: PUSH
22192: LD_INT 62
22194: PUSH
22195: LD_INT 66
22197: PUSH
22198: LD_INT 67
22200: PUSH
22201: LD_INT 68
22203: PUSH
22204: LD_INT 81
22206: PUSH
22207: LD_INT 82
22209: PUSH
22210: LD_INT 83
22212: PUSH
22213: LD_INT 84
22215: PUSH
22216: LD_INT 85
22218: PUSH
22219: LD_INT 87
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: ST_TO_ADDR
22277: GO 22510
22279: LD_INT 3
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22509
22287: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22288: LD_ADDR_VAR 0 4
22292: PUSH
22293: LD_INT 46
22295: PUSH
22296: LD_INT 47
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 82
22307: PUSH
22308: LD_INT 83
22310: PUSH
22311: LD_INT 84
22313: PUSH
22314: LD_INT 85
22316: PUSH
22317: LD_INT 86
22319: PUSH
22320: LD_INT 11
22322: PUSH
22323: LD_INT 9
22325: PUSH
22326: LD_INT 20
22328: PUSH
22329: LD_INT 19
22331: PUSH
22332: LD_INT 21
22334: PUSH
22335: LD_INT 24
22337: PUSH
22338: LD_INT 22
22340: PUSH
22341: LD_INT 25
22343: PUSH
22344: LD_INT 28
22346: PUSH
22347: LD_INT 29
22349: PUSH
22350: LD_INT 30
22352: PUSH
22353: LD_INT 31
22355: PUSH
22356: LD_INT 37
22358: PUSH
22359: LD_INT 38
22361: PUSH
22362: LD_INT 32
22364: PUSH
22365: LD_INT 27
22367: PUSH
22368: LD_INT 33
22370: PUSH
22371: LD_INT 69
22373: PUSH
22374: LD_INT 39
22376: PUSH
22377: LD_INT 34
22379: PUSH
22380: LD_INT 40
22382: PUSH
22383: LD_INT 71
22385: PUSH
22386: LD_INT 23
22388: PUSH
22389: LD_INT 44
22391: PUSH
22392: LD_INT 48
22394: PUSH
22395: LD_INT 49
22397: PUSH
22398: LD_INT 50
22400: PUSH
22401: LD_INT 51
22403: PUSH
22404: LD_INT 52
22406: PUSH
22407: LD_INT 53
22409: PUSH
22410: LD_INT 54
22412: PUSH
22413: LD_INT 55
22415: PUSH
22416: LD_INT 56
22418: PUSH
22419: LD_INT 57
22421: PUSH
22422: LD_INT 58
22424: PUSH
22425: LD_INT 59
22427: PUSH
22428: LD_INT 63
22430: PUSH
22431: LD_INT 64
22433: PUSH
22434: LD_INT 65
22436: PUSH
22437: LD_INT 82
22439: PUSH
22440: LD_INT 83
22442: PUSH
22443: LD_INT 84
22445: PUSH
22446: LD_INT 85
22448: PUSH
22449: LD_INT 86
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: ST_TO_ADDR
22507: GO 22510
22509: POP
// if state > - 1 and state < 3 then
22510: LD_VAR 0 3
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: GREATER
22519: PUSH
22520: LD_VAR 0 3
22524: PUSH
22525: LD_INT 3
22527: LESS
22528: AND
22529: IFFALSE 22586
// for i in result do
22531: LD_ADDR_VAR 0 5
22535: PUSH
22536: LD_VAR 0 4
22540: PUSH
22541: FOR_IN
22542: IFFALSE 22584
// if GetTech ( i , side ) <> state then
22544: LD_VAR 0 5
22548: PPUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 321
22558: PUSH
22559: LD_VAR 0 3
22563: NONEQUAL
22564: IFFALSE 22582
// result := result diff i ;
22566: LD_ADDR_VAR 0 4
22570: PUSH
22571: LD_VAR 0 4
22575: PUSH
22576: LD_VAR 0 5
22580: DIFF
22581: ST_TO_ADDR
22582: GO 22541
22584: POP
22585: POP
// end ;
22586: LD_VAR 0 4
22590: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22591: LD_INT 0
22593: PPUSH
22594: PPUSH
22595: PPUSH
// result := true ;
22596: LD_ADDR_VAR 0 3
22600: PUSH
22601: LD_INT 1
22603: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22604: LD_ADDR_VAR 0 5
22608: PUSH
22609: LD_VAR 0 2
22613: PPUSH
22614: CALL_OW 480
22618: ST_TO_ADDR
// if not tmp then
22619: LD_VAR 0 5
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 22677
// for i in tmp do
22628: LD_ADDR_VAR 0 4
22632: PUSH
22633: LD_VAR 0 5
22637: PUSH
22638: FOR_IN
22639: IFFALSE 22675
// if GetTech ( i , side ) <> state_researched then
22641: LD_VAR 0 4
22645: PPUSH
22646: LD_VAR 0 1
22650: PPUSH
22651: CALL_OW 321
22655: PUSH
22656: LD_INT 2
22658: NONEQUAL
22659: IFFALSE 22673
// begin result := false ;
22661: LD_ADDR_VAR 0 3
22665: PUSH
22666: LD_INT 0
22668: ST_TO_ADDR
// exit ;
22669: POP
22670: POP
22671: GO 22677
// end ;
22673: GO 22638
22675: POP
22676: POP
// end ;
22677: LD_VAR 0 3
22681: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22682: LD_INT 0
22684: PPUSH
22685: PPUSH
22686: PPUSH
22687: PPUSH
22688: PPUSH
22689: PPUSH
22690: PPUSH
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
22696: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22697: LD_VAR 0 1
22701: NOT
22702: PUSH
22703: LD_VAR 0 1
22707: PPUSH
22708: CALL_OW 257
22712: PUSH
22713: LD_INT 9
22715: NONEQUAL
22716: OR
22717: IFFALSE 22721
// exit ;
22719: GO 23294
// side := GetSide ( unit ) ;
22721: LD_ADDR_VAR 0 9
22725: PUSH
22726: LD_VAR 0 1
22730: PPUSH
22731: CALL_OW 255
22735: ST_TO_ADDR
// tech_space := tech_spacanom ;
22736: LD_ADDR_VAR 0 12
22740: PUSH
22741: LD_INT 29
22743: ST_TO_ADDR
// tech_time := tech_taurad ;
22744: LD_ADDR_VAR 0 13
22748: PUSH
22749: LD_INT 28
22751: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22752: LD_ADDR_VAR 0 11
22756: PUSH
22757: LD_VAR 0 1
22761: PPUSH
22762: CALL_OW 310
22766: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22767: LD_VAR 0 11
22771: PPUSH
22772: CALL_OW 247
22776: PUSH
22777: LD_INT 2
22779: EQUAL
22780: IFFALSE 22784
// exit ;
22782: GO 23294
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22784: LD_ADDR_VAR 0 8
22788: PUSH
22789: LD_INT 81
22791: PUSH
22792: LD_VAR 0 9
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 3
22803: PUSH
22804: LD_INT 21
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PPUSH
22822: CALL_OW 69
22826: ST_TO_ADDR
// if not tmp then
22827: LD_VAR 0 8
22831: NOT
22832: IFFALSE 22836
// exit ;
22834: GO 23294
// if in_unit then
22836: LD_VAR 0 11
22840: IFFALSE 22864
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22842: LD_ADDR_VAR 0 10
22846: PUSH
22847: LD_VAR 0 8
22851: PPUSH
22852: LD_VAR 0 11
22856: PPUSH
22857: CALL_OW 74
22861: ST_TO_ADDR
22862: GO 22884
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22864: LD_ADDR_VAR 0 10
22868: PUSH
22869: LD_VAR 0 8
22873: PPUSH
22874: LD_VAR 0 1
22878: PPUSH
22879: CALL_OW 74
22883: ST_TO_ADDR
// if not enemy then
22884: LD_VAR 0 10
22888: NOT
22889: IFFALSE 22893
// exit ;
22891: GO 23294
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22893: LD_VAR 0 11
22897: PUSH
22898: LD_VAR 0 11
22902: PPUSH
22903: LD_VAR 0 10
22907: PPUSH
22908: CALL_OW 296
22912: PUSH
22913: LD_INT 13
22915: GREATER
22916: AND
22917: PUSH
22918: LD_VAR 0 1
22922: PPUSH
22923: LD_VAR 0 10
22927: PPUSH
22928: CALL_OW 296
22932: PUSH
22933: LD_INT 12
22935: GREATER
22936: OR
22937: IFFALSE 22941
// exit ;
22939: GO 23294
// missile := [ 1 ] ;
22941: LD_ADDR_VAR 0 14
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: EMPTY
22950: LIST
22951: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22952: LD_VAR 0 9
22956: PPUSH
22957: LD_VAR 0 12
22961: PPUSH
22962: CALL_OW 325
22966: IFFALSE 22995
// missile := Insert ( missile , missile + 1 , 2 ) ;
22968: LD_ADDR_VAR 0 14
22972: PUSH
22973: LD_VAR 0 14
22977: PPUSH
22978: LD_VAR 0 14
22982: PUSH
22983: LD_INT 1
22985: PLUS
22986: PPUSH
22987: LD_INT 2
22989: PPUSH
22990: CALL_OW 2
22994: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22995: LD_VAR 0 9
22999: PPUSH
23000: LD_VAR 0 13
23004: PPUSH
23005: CALL_OW 325
23009: PUSH
23010: LD_VAR 0 10
23014: PPUSH
23015: CALL_OW 255
23019: PPUSH
23020: LD_VAR 0 13
23024: PPUSH
23025: CALL_OW 325
23029: NOT
23030: AND
23031: IFFALSE 23060
// missile := Insert ( missile , missile + 1 , 3 ) ;
23033: LD_ADDR_VAR 0 14
23037: PUSH
23038: LD_VAR 0 14
23042: PPUSH
23043: LD_VAR 0 14
23047: PUSH
23048: LD_INT 1
23050: PLUS
23051: PPUSH
23052: LD_INT 3
23054: PPUSH
23055: CALL_OW 2
23059: ST_TO_ADDR
// if missile < 2 then
23060: LD_VAR 0 14
23064: PUSH
23065: LD_INT 2
23067: LESS
23068: IFFALSE 23072
// exit ;
23070: GO 23294
// x := GetX ( enemy ) ;
23072: LD_ADDR_VAR 0 4
23076: PUSH
23077: LD_VAR 0 10
23081: PPUSH
23082: CALL_OW 250
23086: ST_TO_ADDR
// y := GetY ( enemy ) ;
23087: LD_ADDR_VAR 0 5
23091: PUSH
23092: LD_VAR 0 10
23096: PPUSH
23097: CALL_OW 251
23101: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23102: LD_ADDR_VAR 0 6
23106: PUSH
23107: LD_VAR 0 4
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 12
23123: PLUS
23124: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23125: LD_ADDR_VAR 0 7
23129: PUSH
23130: LD_VAR 0 5
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PPUSH
23139: LD_INT 1
23141: PPUSH
23142: CALL_OW 12
23146: PLUS
23147: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23148: LD_VAR 0 6
23152: PPUSH
23153: LD_VAR 0 7
23157: PPUSH
23158: CALL_OW 488
23162: NOT
23163: IFFALSE 23185
// begin _x := x ;
23165: LD_ADDR_VAR 0 6
23169: PUSH
23170: LD_VAR 0 4
23174: ST_TO_ADDR
// _y := y ;
23175: LD_ADDR_VAR 0 7
23179: PUSH
23180: LD_VAR 0 5
23184: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23185: LD_ADDR_VAR 0 3
23189: PUSH
23190: LD_INT 1
23192: PPUSH
23193: LD_VAR 0 14
23197: PPUSH
23198: CALL_OW 12
23202: ST_TO_ADDR
// case i of 1 :
23203: LD_VAR 0 3
23207: PUSH
23208: LD_INT 1
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23233
23216: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23217: LD_VAR 0 1
23221: PPUSH
23222: LD_VAR 0 10
23226: PPUSH
23227: CALL_OW 115
23231: GO 23294
23233: LD_INT 2
23235: DOUBLE
23236: EQUAL
23237: IFTRUE 23241
23239: GO 23263
23241: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23242: LD_VAR 0 1
23246: PPUSH
23247: LD_VAR 0 6
23251: PPUSH
23252: LD_VAR 0 7
23256: PPUSH
23257: CALL_OW 153
23261: GO 23294
23263: LD_INT 3
23265: DOUBLE
23266: EQUAL
23267: IFTRUE 23271
23269: GO 23293
23271: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_VAR 0 6
23281: PPUSH
23282: LD_VAR 0 7
23286: PPUSH
23287: CALL_OW 154
23291: GO 23294
23293: POP
// end ;
23294: LD_VAR 0 2
23298: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23299: LD_INT 0
23301: PPUSH
23302: PPUSH
23303: PPUSH
23304: PPUSH
23305: PPUSH
23306: PPUSH
// if not unit or not building then
23307: LD_VAR 0 1
23311: NOT
23312: PUSH
23313: LD_VAR 0 2
23317: NOT
23318: OR
23319: IFFALSE 23323
// exit ;
23321: GO 23481
// x := GetX ( building ) ;
23323: LD_ADDR_VAR 0 5
23327: PUSH
23328: LD_VAR 0 2
23332: PPUSH
23333: CALL_OW 250
23337: ST_TO_ADDR
// y := GetY ( building ) ;
23338: LD_ADDR_VAR 0 6
23342: PUSH
23343: LD_VAR 0 2
23347: PPUSH
23348: CALL_OW 251
23352: ST_TO_ADDR
// for i = 0 to 5 do
23353: LD_ADDR_VAR 0 4
23357: PUSH
23358: DOUBLE
23359: LD_INT 0
23361: DEC
23362: ST_TO_ADDR
23363: LD_INT 5
23365: PUSH
23366: FOR_TO
23367: IFFALSE 23479
// begin _x := ShiftX ( x , i , 3 ) ;
23369: LD_ADDR_VAR 0 7
23373: PUSH
23374: LD_VAR 0 5
23378: PPUSH
23379: LD_VAR 0 4
23383: PPUSH
23384: LD_INT 3
23386: PPUSH
23387: CALL_OW 272
23391: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23392: LD_ADDR_VAR 0 8
23396: PUSH
23397: LD_VAR 0 6
23401: PPUSH
23402: LD_VAR 0 4
23406: PPUSH
23407: LD_INT 3
23409: PPUSH
23410: CALL_OW 273
23414: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23415: LD_VAR 0 7
23419: PPUSH
23420: LD_VAR 0 8
23424: PPUSH
23425: CALL_OW 488
23429: NOT
23430: IFFALSE 23434
// continue ;
23432: GO 23366
// if HexInfo ( _x , _y ) = 0 then
23434: LD_VAR 0 7
23438: PPUSH
23439: LD_VAR 0 8
23443: PPUSH
23444: CALL_OW 428
23448: PUSH
23449: LD_INT 0
23451: EQUAL
23452: IFFALSE 23477
// begin ComMoveXY ( unit , _x , _y ) ;
23454: LD_VAR 0 1
23458: PPUSH
23459: LD_VAR 0 7
23463: PPUSH
23464: LD_VAR 0 8
23468: PPUSH
23469: CALL_OW 111
// exit ;
23473: POP
23474: POP
23475: GO 23481
// end ; end ;
23477: GO 23366
23479: POP
23480: POP
// end ;
23481: LD_VAR 0 3
23485: RET
// export function ScanBase ( side , base_area ) ; begin
23486: LD_INT 0
23488: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23489: LD_ADDR_VAR 0 3
23493: PUSH
23494: LD_VAR 0 2
23498: PPUSH
23499: LD_INT 81
23501: PUSH
23502: LD_VAR 0 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PPUSH
23511: CALL_OW 70
23515: ST_TO_ADDR
// end ;
23516: LD_VAR 0 3
23520: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23521: LD_INT 0
23523: PPUSH
23524: PPUSH
23525: PPUSH
23526: PPUSH
// result := false ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_INT 0
23534: ST_TO_ADDR
// side := GetSide ( unit ) ;
23535: LD_ADDR_VAR 0 3
23539: PUSH
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL_OW 255
23549: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23550: LD_ADDR_VAR 0 4
23554: PUSH
23555: LD_VAR 0 1
23559: PPUSH
23560: CALL_OW 248
23564: ST_TO_ADDR
// case nat of 1 :
23565: LD_VAR 0 4
23569: PUSH
23570: LD_INT 1
23572: DOUBLE
23573: EQUAL
23574: IFTRUE 23578
23576: GO 23589
23578: POP
// tech := tech_lassight ; 2 :
23579: LD_ADDR_VAR 0 5
23583: PUSH
23584: LD_INT 12
23586: ST_TO_ADDR
23587: GO 23628
23589: LD_INT 2
23591: DOUBLE
23592: EQUAL
23593: IFTRUE 23597
23595: GO 23608
23597: POP
// tech := tech_mortar ; 3 :
23598: LD_ADDR_VAR 0 5
23602: PUSH
23603: LD_INT 41
23605: ST_TO_ADDR
23606: GO 23628
23608: LD_INT 3
23610: DOUBLE
23611: EQUAL
23612: IFTRUE 23616
23614: GO 23627
23616: POP
// tech := tech_bazooka ; end ;
23617: LD_ADDR_VAR 0 5
23621: PUSH
23622: LD_INT 44
23624: ST_TO_ADDR
23625: GO 23628
23627: POP
// if Researched ( side , tech ) then
23628: LD_VAR 0 3
23632: PPUSH
23633: LD_VAR 0 5
23637: PPUSH
23638: CALL_OW 325
23642: IFFALSE 23669
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23644: LD_ADDR_VAR 0 2
23648: PUSH
23649: LD_INT 5
23651: PUSH
23652: LD_INT 8
23654: PUSH
23655: LD_INT 9
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: LD_VAR 0 4
23667: ARRAY
23668: ST_TO_ADDR
// end ;
23669: LD_VAR 0 2
23673: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23674: LD_INT 0
23676: PPUSH
23677: PPUSH
23678: PPUSH
// if not mines then
23679: LD_VAR 0 2
23683: NOT
23684: IFFALSE 23688
// exit ;
23686: GO 23832
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23688: LD_ADDR_VAR 0 5
23692: PUSH
23693: LD_INT 81
23695: PUSH
23696: LD_VAR 0 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: LD_INT 21
23710: PUSH
23711: LD_INT 3
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 69
23730: ST_TO_ADDR
// for i in mines do
23731: LD_ADDR_VAR 0 4
23735: PUSH
23736: LD_VAR 0 2
23740: PUSH
23741: FOR_IN
23742: IFFALSE 23830
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23744: LD_VAR 0 4
23748: PUSH
23749: LD_INT 1
23751: ARRAY
23752: PPUSH
23753: LD_VAR 0 4
23757: PUSH
23758: LD_INT 2
23760: ARRAY
23761: PPUSH
23762: CALL_OW 458
23766: NOT
23767: IFFALSE 23771
// continue ;
23769: GO 23741
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23771: LD_VAR 0 4
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PPUSH
23780: LD_VAR 0 4
23784: PUSH
23785: LD_INT 2
23787: ARRAY
23788: PPUSH
23789: CALL_OW 428
23793: PUSH
23794: LD_VAR 0 5
23798: IN
23799: IFFALSE 23828
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23801: LD_VAR 0 4
23805: PUSH
23806: LD_INT 1
23808: ARRAY
23809: PPUSH
23810: LD_VAR 0 4
23814: PUSH
23815: LD_INT 2
23817: ARRAY
23818: PPUSH
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL_OW 456
// end ;
23828: GO 23741
23830: POP
23831: POP
// end ;
23832: LD_VAR 0 3
23836: RET
// export function Count ( array ) ; var i ; begin
23837: LD_INT 0
23839: PPUSH
23840: PPUSH
// result := 0 ;
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_INT 0
23848: ST_TO_ADDR
// for i in array do
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_VAR 0 1
23858: PUSH
23859: FOR_IN
23860: IFFALSE 23884
// if i then
23862: LD_VAR 0 3
23866: IFFALSE 23882
// result := result + 1 ;
23868: LD_ADDR_VAR 0 2
23872: PUSH
23873: LD_VAR 0 2
23877: PUSH
23878: LD_INT 1
23880: PLUS
23881: ST_TO_ADDR
23882: GO 23859
23884: POP
23885: POP
// end ;
23886: LD_VAR 0 2
23890: RET
// export function IsEmpty ( building ) ; begin
23891: LD_INT 0
23893: PPUSH
// if not building then
23894: LD_VAR 0 1
23898: NOT
23899: IFFALSE 23903
// exit ;
23901: GO 23946
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23903: LD_ADDR_VAR 0 2
23907: PUSH
23908: LD_VAR 0 1
23912: PUSH
23913: LD_INT 22
23915: PUSH
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 255
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 58
23932: PUSH
23933: EMPTY
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: IN
23945: ST_TO_ADDR
// end ;
23946: LD_VAR 0 2
23950: RET
// export function IsNotFull ( building ) ; begin
23951: LD_INT 0
23953: PPUSH
// if not building then
23954: LD_VAR 0 1
23958: NOT
23959: IFFALSE 23963
// exit ;
23961: GO 23982
// result := UnitsInside ( building ) < 6 ;
23963: LD_ADDR_VAR 0 2
23967: PUSH
23968: LD_VAR 0 1
23972: PPUSH
23973: CALL_OW 313
23977: PUSH
23978: LD_INT 6
23980: LESS
23981: ST_TO_ADDR
// end ;
23982: LD_VAR 0 2
23986: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23987: LD_INT 0
23989: PPUSH
23990: PPUSH
23991: PPUSH
23992: PPUSH
// tmp := [ ] ;
23993: LD_ADDR_VAR 0 3
23997: PUSH
23998: EMPTY
23999: ST_TO_ADDR
// list := [ ] ;
24000: LD_ADDR_VAR 0 5
24004: PUSH
24005: EMPTY
24006: ST_TO_ADDR
// for i = 16 to 25 do
24007: LD_ADDR_VAR 0 4
24011: PUSH
24012: DOUBLE
24013: LD_INT 16
24015: DEC
24016: ST_TO_ADDR
24017: LD_INT 25
24019: PUSH
24020: FOR_TO
24021: IFFALSE 24094
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_VAR 0 3
24032: PUSH
24033: LD_INT 22
24035: PUSH
24036: LD_VAR 0 1
24040: PPUSH
24041: CALL_OW 255
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 91
24052: PUSH
24053: LD_VAR 0 1
24057: PUSH
24058: LD_INT 6
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 30
24068: PUSH
24069: LD_VAR 0 4
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: PPUSH
24086: CALL_OW 69
24090: ADD
24091: ST_TO_ADDR
24092: GO 24020
24094: POP
24095: POP
// for i = 1 to tmp do
24096: LD_ADDR_VAR 0 4
24100: PUSH
24101: DOUBLE
24102: LD_INT 1
24104: DEC
24105: ST_TO_ADDR
24106: LD_VAR 0 3
24110: PUSH
24111: FOR_TO
24112: IFFALSE 24200
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24114: LD_ADDR_VAR 0 5
24118: PUSH
24119: LD_VAR 0 5
24123: PUSH
24124: LD_VAR 0 3
24128: PUSH
24129: LD_VAR 0 4
24133: ARRAY
24134: PPUSH
24135: CALL_OW 266
24139: PUSH
24140: LD_VAR 0 3
24144: PUSH
24145: LD_VAR 0 4
24149: ARRAY
24150: PPUSH
24151: CALL_OW 250
24155: PUSH
24156: LD_VAR 0 3
24160: PUSH
24161: LD_VAR 0 4
24165: ARRAY
24166: PPUSH
24167: CALL_OW 251
24171: PUSH
24172: LD_VAR 0 3
24176: PUSH
24177: LD_VAR 0 4
24181: ARRAY
24182: PPUSH
24183: CALL_OW 254
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: PUSH
24194: EMPTY
24195: LIST
24196: ADD
24197: ST_TO_ADDR
24198: GO 24111
24200: POP
24201: POP
// result := list ;
24202: LD_ADDR_VAR 0 2
24206: PUSH
24207: LD_VAR 0 5
24211: ST_TO_ADDR
// end ;
24212: LD_VAR 0 2
24216: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24217: LD_INT 0
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
24223: PPUSH
24224: PPUSH
24225: PPUSH
// if not factory then
24226: LD_VAR 0 1
24230: NOT
24231: IFFALSE 24235
// exit ;
24233: GO 24828
// if control = control_apeman then
24235: LD_VAR 0 4
24239: PUSH
24240: LD_INT 5
24242: EQUAL
24243: IFFALSE 24352
// begin tmp := UnitsInside ( factory ) ;
24245: LD_ADDR_VAR 0 8
24249: PUSH
24250: LD_VAR 0 1
24254: PPUSH
24255: CALL_OW 313
24259: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24260: LD_VAR 0 8
24264: PPUSH
24265: LD_INT 25
24267: PUSH
24268: LD_INT 12
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 72
24279: NOT
24280: IFFALSE 24290
// control := control_manual ;
24282: LD_ADDR_VAR 0 4
24286: PUSH
24287: LD_INT 1
24289: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24290: LD_ADDR_VAR 0 8
24294: PUSH
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL 23987 0 1
24304: ST_TO_ADDR
// if tmp then
24305: LD_VAR 0 8
24309: IFFALSE 24352
// begin for i in tmp do
24311: LD_ADDR_VAR 0 7
24315: PUSH
24316: LD_VAR 0 8
24320: PUSH
24321: FOR_IN
24322: IFFALSE 24350
// if i [ 1 ] = b_ext_radio then
24324: LD_VAR 0 7
24328: PUSH
24329: LD_INT 1
24331: ARRAY
24332: PUSH
24333: LD_INT 22
24335: EQUAL
24336: IFFALSE 24348
// begin control := control_remote ;
24338: LD_ADDR_VAR 0 4
24342: PUSH
24343: LD_INT 2
24345: ST_TO_ADDR
// break ;
24346: GO 24350
// end ;
24348: GO 24321
24350: POP
24351: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24352: LD_VAR 0 1
24356: PPUSH
24357: LD_VAR 0 2
24361: PPUSH
24362: LD_VAR 0 3
24366: PPUSH
24367: LD_VAR 0 4
24371: PPUSH
24372: LD_VAR 0 5
24376: PPUSH
24377: CALL_OW 448
24381: IFFALSE 24416
// begin result := [ chassis , engine , control , weapon ] ;
24383: LD_ADDR_VAR 0 6
24387: PUSH
24388: LD_VAR 0 2
24392: PUSH
24393: LD_VAR 0 3
24397: PUSH
24398: LD_VAR 0 4
24402: PUSH
24403: LD_VAR 0 5
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: ST_TO_ADDR
// exit ;
24414: GO 24828
// end ; _chassis := AvailableChassisList ( factory ) ;
24416: LD_ADDR_VAR 0 9
24420: PUSH
24421: LD_VAR 0 1
24425: PPUSH
24426: CALL_OW 475
24430: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24431: LD_ADDR_VAR 0 11
24435: PUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL_OW 476
24445: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24446: LD_ADDR_VAR 0 12
24450: PUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 477
24460: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24461: LD_ADDR_VAR 0 10
24465: PUSH
24466: LD_VAR 0 1
24470: PPUSH
24471: CALL_OW 478
24475: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24476: LD_VAR 0 9
24480: NOT
24481: PUSH
24482: LD_VAR 0 11
24486: NOT
24487: OR
24488: PUSH
24489: LD_VAR 0 12
24493: NOT
24494: OR
24495: PUSH
24496: LD_VAR 0 10
24500: NOT
24501: OR
24502: IFFALSE 24537
// begin result := [ chassis , engine , control , weapon ] ;
24504: LD_ADDR_VAR 0 6
24508: PUSH
24509: LD_VAR 0 2
24513: PUSH
24514: LD_VAR 0 3
24518: PUSH
24519: LD_VAR 0 4
24523: PUSH
24524: LD_VAR 0 5
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: ST_TO_ADDR
// exit ;
24535: GO 24828
// end ; if not chassis in _chassis then
24537: LD_VAR 0 2
24541: PUSH
24542: LD_VAR 0 9
24546: IN
24547: NOT
24548: IFFALSE 24574
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24550: LD_ADDR_VAR 0 2
24554: PUSH
24555: LD_VAR 0 9
24559: PUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_VAR 0 9
24567: PPUSH
24568: CALL_OW 12
24572: ARRAY
24573: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24574: LD_VAR 0 2
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: CALL 24833 0 2
24588: NOT
24589: IFFALSE 24648
// repeat engine := _engine [ 1 ] ;
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_VAR 0 11
24600: PUSH
24601: LD_INT 1
24603: ARRAY
24604: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24605: LD_ADDR_VAR 0 11
24609: PUSH
24610: LD_VAR 0 11
24614: PPUSH
24615: LD_INT 1
24617: PPUSH
24618: CALL_OW 3
24622: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24623: LD_VAR 0 2
24627: PPUSH
24628: LD_VAR 0 3
24632: PPUSH
24633: CALL 24833 0 2
24637: PUSH
24638: LD_VAR 0 11
24642: PUSH
24643: EMPTY
24644: EQUAL
24645: OR
24646: IFFALSE 24591
// if not control in _control then
24648: LD_VAR 0 4
24652: PUSH
24653: LD_VAR 0 12
24657: IN
24658: NOT
24659: IFFALSE 24685
// control := _control [ rand ( 1 , _control ) ] ;
24661: LD_ADDR_VAR 0 4
24665: PUSH
24666: LD_VAR 0 12
24670: PUSH
24671: LD_INT 1
24673: PPUSH
24674: LD_VAR 0 12
24678: PPUSH
24679: CALL_OW 12
24683: ARRAY
24684: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24685: LD_VAR 0 2
24689: PPUSH
24690: LD_VAR 0 5
24694: PPUSH
24695: CALL 25053 0 2
24699: NOT
24700: IFFALSE 24759
// repeat weapon := _weapon [ 1 ] ;
24702: LD_ADDR_VAR 0 5
24706: PUSH
24707: LD_VAR 0 10
24711: PUSH
24712: LD_INT 1
24714: ARRAY
24715: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24716: LD_ADDR_VAR 0 10
24720: PUSH
24721: LD_VAR 0 10
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: CALL_OW 3
24733: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24734: LD_VAR 0 2
24738: PPUSH
24739: LD_VAR 0 5
24743: PPUSH
24744: CALL 25053 0 2
24748: PUSH
24749: LD_VAR 0 10
24753: PUSH
24754: EMPTY
24755: EQUAL
24756: OR
24757: IFFALSE 24702
// result := [ ] ;
24759: LD_ADDR_VAR 0 6
24763: PUSH
24764: EMPTY
24765: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24766: LD_VAR 0 1
24770: PPUSH
24771: LD_VAR 0 2
24775: PPUSH
24776: LD_VAR 0 3
24780: PPUSH
24781: LD_VAR 0 4
24785: PPUSH
24786: LD_VAR 0 5
24790: PPUSH
24791: CALL_OW 448
24795: IFFALSE 24828
// result := [ chassis , engine , control , weapon ] ;
24797: LD_ADDR_VAR 0 6
24801: PUSH
24802: LD_VAR 0 2
24806: PUSH
24807: LD_VAR 0 3
24811: PUSH
24812: LD_VAR 0 4
24816: PUSH
24817: LD_VAR 0 5
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: ST_TO_ADDR
// end ;
24828: LD_VAR 0 6
24832: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24833: LD_INT 0
24835: PPUSH
// if not chassis or not engine then
24836: LD_VAR 0 1
24840: NOT
24841: PUSH
24842: LD_VAR 0 2
24846: NOT
24847: OR
24848: IFFALSE 24852
// exit ;
24850: GO 25048
// case engine of engine_solar :
24852: LD_VAR 0 2
24856: PUSH
24857: LD_INT 2
24859: DOUBLE
24860: EQUAL
24861: IFTRUE 24865
24863: GO 24903
24865: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_INT 11
24873: PUSH
24874: LD_INT 12
24876: PUSH
24877: LD_INT 13
24879: PUSH
24880: LD_INT 14
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: LD_INT 3
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: ST_TO_ADDR
24901: GO 25032
24903: LD_INT 1
24905: DOUBLE
24906: EQUAL
24907: IFTRUE 24911
24909: GO 24973
24911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_INT 11
24919: PUSH
24920: LD_INT 12
24922: PUSH
24923: LD_INT 13
24925: PUSH
24926: LD_INT 14
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 3
24937: PUSH
24938: LD_INT 4
24940: PUSH
24941: LD_INT 5
24943: PUSH
24944: LD_INT 21
24946: PUSH
24947: LD_INT 23
24949: PUSH
24950: LD_INT 22
24952: PUSH
24953: LD_INT 24
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: ST_TO_ADDR
24971: GO 25032
24973: LD_INT 3
24975: DOUBLE
24976: EQUAL
24977: IFTRUE 24981
24979: GO 25031
24981: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_INT 13
24989: PUSH
24990: LD_INT 14
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: LD_INT 3
24998: PUSH
24999: LD_INT 4
25001: PUSH
25002: LD_INT 5
25004: PUSH
25005: LD_INT 21
25007: PUSH
25008: LD_INT 22
25010: PUSH
25011: LD_INT 23
25013: PUSH
25014: LD_INT 24
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: ST_TO_ADDR
25029: GO 25032
25031: POP
// result := ( chassis in result ) ;
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: LD_VAR 0 1
25041: PUSH
25042: LD_VAR 0 3
25046: IN
25047: ST_TO_ADDR
// end ;
25048: LD_VAR 0 3
25052: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25053: LD_INT 0
25055: PPUSH
// if not chassis or not weapon then
25056: LD_VAR 0 1
25060: NOT
25061: PUSH
25062: LD_VAR 0 2
25066: NOT
25067: OR
25068: IFFALSE 25072
// exit ;
25070: GO 26098
// case weapon of us_machine_gun :
25072: LD_VAR 0 2
25076: PUSH
25077: LD_INT 2
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25115
25085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25086: LD_ADDR_VAR 0 3
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: LD_INT 4
25102: PUSH
25103: LD_INT 5
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: ST_TO_ADDR
25113: GO 26082
25115: LD_INT 3
25117: DOUBLE
25118: EQUAL
25119: IFTRUE 25123
25121: GO 25153
25123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 3
25137: PUSH
25138: LD_INT 4
25140: PUSH
25141: LD_INT 5
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: ST_TO_ADDR
25151: GO 26082
25153: LD_INT 11
25155: DOUBLE
25156: EQUAL
25157: IFTRUE 25161
25159: GO 25191
25161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25162: LD_ADDR_VAR 0 3
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: LD_INT 3
25175: PUSH
25176: LD_INT 4
25178: PUSH
25179: LD_INT 5
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: ST_TO_ADDR
25189: GO 26082
25191: LD_INT 4
25193: DOUBLE
25194: EQUAL
25195: IFTRUE 25199
25197: GO 25225
25199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: LD_INT 4
25213: PUSH
25214: LD_INT 5
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: ST_TO_ADDR
25223: GO 26082
25225: LD_INT 5
25227: DOUBLE
25228: EQUAL
25229: IFTRUE 25233
25231: GO 25259
25233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 3
25244: PUSH
25245: LD_INT 4
25247: PUSH
25248: LD_INT 5
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
25257: GO 26082
25259: LD_INT 9
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25293
25267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25268: LD_ADDR_VAR 0 3
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 3
25278: PUSH
25279: LD_INT 4
25281: PUSH
25282: LD_INT 5
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
25291: GO 26082
25293: LD_INT 7
25295: DOUBLE
25296: EQUAL
25297: IFTRUE 25301
25299: GO 25327
25301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: LD_INT 3
25312: PUSH
25313: LD_INT 4
25315: PUSH
25316: LD_INT 5
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
25325: GO 26082
25327: LD_INT 12
25329: DOUBLE
25330: EQUAL
25331: IFTRUE 25335
25333: GO 25361
25335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: LD_INT 3
25346: PUSH
25347: LD_INT 4
25349: PUSH
25350: LD_INT 5
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: ST_TO_ADDR
25359: GO 26082
25361: LD_INT 13
25363: DOUBLE
25364: EQUAL
25365: IFTRUE 25369
25367: GO 25395
25369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25370: LD_ADDR_VAR 0 3
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 3
25380: PUSH
25381: LD_INT 4
25383: PUSH
25384: LD_INT 5
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: ST_TO_ADDR
25393: GO 26082
25395: LD_INT 14
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25421
25403: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_INT 4
25411: PUSH
25412: LD_INT 5
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: ST_TO_ADDR
25419: GO 26082
25421: LD_INT 6
25423: DOUBLE
25424: EQUAL
25425: IFTRUE 25429
25427: GO 25447
25429: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25430: LD_ADDR_VAR 0 3
25434: PUSH
25435: LD_INT 4
25437: PUSH
25438: LD_INT 5
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: ST_TO_ADDR
25445: GO 26082
25447: LD_INT 10
25449: DOUBLE
25450: EQUAL
25451: IFTRUE 25455
25453: GO 25473
25455: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_INT 4
25463: PUSH
25464: LD_INT 5
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: ST_TO_ADDR
25471: GO 26082
25473: LD_INT 22
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25507
25481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_INT 11
25489: PUSH
25490: LD_INT 12
25492: PUSH
25493: LD_INT 13
25495: PUSH
25496: LD_INT 14
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: ST_TO_ADDR
25505: GO 26082
25507: LD_INT 23
25509: DOUBLE
25510: EQUAL
25511: IFTRUE 25515
25513: GO 25541
25515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_INT 11
25523: PUSH
25524: LD_INT 12
25526: PUSH
25527: LD_INT 13
25529: PUSH
25530: LD_INT 14
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: ST_TO_ADDR
25539: GO 26082
25541: LD_INT 24
25543: DOUBLE
25544: EQUAL
25545: IFTRUE 25549
25547: GO 25575
25549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25550: LD_ADDR_VAR 0 3
25554: PUSH
25555: LD_INT 11
25557: PUSH
25558: LD_INT 12
25560: PUSH
25561: LD_INT 13
25563: PUSH
25564: LD_INT 14
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: ST_TO_ADDR
25573: GO 26082
25575: LD_INT 30
25577: DOUBLE
25578: EQUAL
25579: IFTRUE 25583
25581: GO 25609
25583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25584: LD_ADDR_VAR 0 3
25588: PUSH
25589: LD_INT 11
25591: PUSH
25592: LD_INT 12
25594: PUSH
25595: LD_INT 13
25597: PUSH
25598: LD_INT 14
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: ST_TO_ADDR
25607: GO 26082
25609: LD_INT 25
25611: DOUBLE
25612: EQUAL
25613: IFTRUE 25617
25615: GO 25635
25617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25618: LD_ADDR_VAR 0 3
25622: PUSH
25623: LD_INT 13
25625: PUSH
25626: LD_INT 14
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: ST_TO_ADDR
25633: GO 26082
25635: LD_INT 27
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25661
25643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25644: LD_ADDR_VAR 0 3
25648: PUSH
25649: LD_INT 13
25651: PUSH
25652: LD_INT 14
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: ST_TO_ADDR
25659: GO 26082
25661: LD_INT 28
25663: DOUBLE
25664: EQUAL
25665: IFTRUE 25669
25667: GO 25687
25669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25670: LD_ADDR_VAR 0 3
25674: PUSH
25675: LD_INT 13
25677: PUSH
25678: LD_INT 14
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: ST_TO_ADDR
25685: GO 26082
25687: LD_INT 29
25689: DOUBLE
25690: EQUAL
25691: IFTRUE 25695
25693: GO 25713
25695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25696: LD_ADDR_VAR 0 3
25700: PUSH
25701: LD_INT 13
25703: PUSH
25704: LD_INT 14
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: ST_TO_ADDR
25711: GO 26082
25713: LD_INT 31
25715: DOUBLE
25716: EQUAL
25717: IFTRUE 25721
25719: GO 25739
25721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_INT 13
25729: PUSH
25730: LD_INT 14
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: ST_TO_ADDR
25737: GO 26082
25739: LD_INT 26
25741: DOUBLE
25742: EQUAL
25743: IFTRUE 25747
25745: GO 25765
25747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25748: LD_ADDR_VAR 0 3
25752: PUSH
25753: LD_INT 13
25755: PUSH
25756: LD_INT 14
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: ST_TO_ADDR
25763: GO 26082
25765: LD_INT 42
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25773
25771: GO 25799
25773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_INT 21
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_INT 23
25787: PUSH
25788: LD_INT 24
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: ST_TO_ADDR
25797: GO 26082
25799: LD_INT 43
25801: DOUBLE
25802: EQUAL
25803: IFTRUE 25807
25805: GO 25833
25807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_INT 21
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_INT 23
25821: PUSH
25822: LD_INT 24
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
25831: GO 26082
25833: LD_INT 44
25835: DOUBLE
25836: EQUAL
25837: IFTRUE 25841
25839: GO 25867
25841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25842: LD_ADDR_VAR 0 3
25846: PUSH
25847: LD_INT 21
25849: PUSH
25850: LD_INT 22
25852: PUSH
25853: LD_INT 23
25855: PUSH
25856: LD_INT 24
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: ST_TO_ADDR
25865: GO 26082
25867: LD_INT 45
25869: DOUBLE
25870: EQUAL
25871: IFTRUE 25875
25873: GO 25901
25875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25876: LD_ADDR_VAR 0 3
25880: PUSH
25881: LD_INT 21
25883: PUSH
25884: LD_INT 22
25886: PUSH
25887: LD_INT 23
25889: PUSH
25890: LD_INT 24
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
25899: GO 26082
25901: LD_INT 49
25903: DOUBLE
25904: EQUAL
25905: IFTRUE 25909
25907: GO 25935
25909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25910: LD_ADDR_VAR 0 3
25914: PUSH
25915: LD_INT 21
25917: PUSH
25918: LD_INT 22
25920: PUSH
25921: LD_INT 23
25923: PUSH
25924: LD_INT 24
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: ST_TO_ADDR
25933: GO 26082
25935: LD_INT 51
25937: DOUBLE
25938: EQUAL
25939: IFTRUE 25943
25941: GO 25969
25943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_INT 21
25951: PUSH
25952: LD_INT 22
25954: PUSH
25955: LD_INT 23
25957: PUSH
25958: LD_INT 24
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: ST_TO_ADDR
25967: GO 26082
25969: LD_INT 52
25971: DOUBLE
25972: EQUAL
25973: IFTRUE 25977
25975: GO 26003
25977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25978: LD_ADDR_VAR 0 3
25982: PUSH
25983: LD_INT 21
25985: PUSH
25986: LD_INT 22
25988: PUSH
25989: LD_INT 23
25991: PUSH
25992: LD_INT 24
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: ST_TO_ADDR
26001: GO 26082
26003: LD_INT 53
26005: DOUBLE
26006: EQUAL
26007: IFTRUE 26011
26009: GO 26029
26011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26012: LD_ADDR_VAR 0 3
26016: PUSH
26017: LD_INT 23
26019: PUSH
26020: LD_INT 24
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: ST_TO_ADDR
26027: GO 26082
26029: LD_INT 46
26031: DOUBLE
26032: EQUAL
26033: IFTRUE 26037
26035: GO 26055
26037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26038: LD_ADDR_VAR 0 3
26042: PUSH
26043: LD_INT 23
26045: PUSH
26046: LD_INT 24
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: ST_TO_ADDR
26053: GO 26082
26055: LD_INT 47
26057: DOUBLE
26058: EQUAL
26059: IFTRUE 26063
26061: GO 26081
26063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26064: LD_ADDR_VAR 0 3
26068: PUSH
26069: LD_INT 23
26071: PUSH
26072: LD_INT 24
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: ST_TO_ADDR
26079: GO 26082
26081: POP
// result := ( chassis in result ) ;
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: LD_VAR 0 1
26091: PUSH
26092: LD_VAR 0 3
26096: IN
26097: ST_TO_ADDR
// end ;
26098: LD_VAR 0 3
26102: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26103: LD_INT 0
26105: PPUSH
26106: PPUSH
26107: PPUSH
26108: PPUSH
26109: PPUSH
26110: PPUSH
26111: PPUSH
// result := array ;
26112: LD_ADDR_VAR 0 5
26116: PUSH
26117: LD_VAR 0 1
26121: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26122: LD_VAR 0 1
26126: NOT
26127: PUSH
26128: LD_VAR 0 2
26132: NOT
26133: OR
26134: PUSH
26135: LD_VAR 0 3
26139: NOT
26140: OR
26141: PUSH
26142: LD_VAR 0 2
26146: PUSH
26147: LD_VAR 0 1
26151: GREATER
26152: OR
26153: PUSH
26154: LD_VAR 0 3
26158: PUSH
26159: LD_VAR 0 1
26163: GREATER
26164: OR
26165: IFFALSE 26169
// exit ;
26167: GO 26465
// if direction then
26169: LD_VAR 0 4
26173: IFFALSE 26237
// begin d := 1 ;
26175: LD_ADDR_VAR 0 9
26179: PUSH
26180: LD_INT 1
26182: ST_TO_ADDR
// if i_from > i_to then
26183: LD_VAR 0 2
26187: PUSH
26188: LD_VAR 0 3
26192: GREATER
26193: IFFALSE 26219
// length := ( array - i_from ) + i_to else
26195: LD_ADDR_VAR 0 11
26199: PUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_VAR 0 2
26209: MINUS
26210: PUSH
26211: LD_VAR 0 3
26215: PLUS
26216: ST_TO_ADDR
26217: GO 26235
// length := i_to - i_from ;
26219: LD_ADDR_VAR 0 11
26223: PUSH
26224: LD_VAR 0 3
26228: PUSH
26229: LD_VAR 0 2
26233: MINUS
26234: ST_TO_ADDR
// end else
26235: GO 26298
// begin d := - 1 ;
26237: LD_ADDR_VAR 0 9
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: ST_TO_ADDR
// if i_from > i_to then
26246: LD_VAR 0 2
26250: PUSH
26251: LD_VAR 0 3
26255: GREATER
26256: IFFALSE 26276
// length := i_from - i_to else
26258: LD_ADDR_VAR 0 11
26262: PUSH
26263: LD_VAR 0 2
26267: PUSH
26268: LD_VAR 0 3
26272: MINUS
26273: ST_TO_ADDR
26274: GO 26298
// length := ( array - i_to ) + i_from ;
26276: LD_ADDR_VAR 0 11
26280: PUSH
26281: LD_VAR 0 1
26285: PUSH
26286: LD_VAR 0 3
26290: MINUS
26291: PUSH
26292: LD_VAR 0 2
26296: PLUS
26297: ST_TO_ADDR
// end ; if not length then
26298: LD_VAR 0 11
26302: NOT
26303: IFFALSE 26307
// exit ;
26305: GO 26465
// tmp := array ;
26307: LD_ADDR_VAR 0 10
26311: PUSH
26312: LD_VAR 0 1
26316: ST_TO_ADDR
// for i = 1 to length do
26317: LD_ADDR_VAR 0 6
26321: PUSH
26322: DOUBLE
26323: LD_INT 1
26325: DEC
26326: ST_TO_ADDR
26327: LD_VAR 0 11
26331: PUSH
26332: FOR_TO
26333: IFFALSE 26453
// begin for j = 1 to array do
26335: LD_ADDR_VAR 0 7
26339: PUSH
26340: DOUBLE
26341: LD_INT 1
26343: DEC
26344: ST_TO_ADDR
26345: LD_VAR 0 1
26349: PUSH
26350: FOR_TO
26351: IFFALSE 26439
// begin k := j + d ;
26353: LD_ADDR_VAR 0 8
26357: PUSH
26358: LD_VAR 0 7
26362: PUSH
26363: LD_VAR 0 9
26367: PLUS
26368: ST_TO_ADDR
// if k > array then
26369: LD_VAR 0 8
26373: PUSH
26374: LD_VAR 0 1
26378: GREATER
26379: IFFALSE 26389
// k := 1 ;
26381: LD_ADDR_VAR 0 8
26385: PUSH
26386: LD_INT 1
26388: ST_TO_ADDR
// if not k then
26389: LD_VAR 0 8
26393: NOT
26394: IFFALSE 26406
// k := array ;
26396: LD_ADDR_VAR 0 8
26400: PUSH
26401: LD_VAR 0 1
26405: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26406: LD_ADDR_VAR 0 10
26410: PUSH
26411: LD_VAR 0 10
26415: PPUSH
26416: LD_VAR 0 8
26420: PPUSH
26421: LD_VAR 0 1
26425: PUSH
26426: LD_VAR 0 7
26430: ARRAY
26431: PPUSH
26432: CALL_OW 1
26436: ST_TO_ADDR
// end ;
26437: GO 26350
26439: POP
26440: POP
// array := tmp ;
26441: LD_ADDR_VAR 0 1
26445: PUSH
26446: LD_VAR 0 10
26450: ST_TO_ADDR
// end ;
26451: GO 26332
26453: POP
26454: POP
// result := array ;
26455: LD_ADDR_VAR 0 5
26459: PUSH
26460: LD_VAR 0 1
26464: ST_TO_ADDR
// end ;
26465: LD_VAR 0 5
26469: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26470: LD_INT 0
26472: PPUSH
26473: PPUSH
// result := 0 ;
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_INT 0
26481: ST_TO_ADDR
// if not array or not value in array then
26482: LD_VAR 0 1
26486: NOT
26487: PUSH
26488: LD_VAR 0 2
26492: PUSH
26493: LD_VAR 0 1
26497: IN
26498: NOT
26499: OR
26500: IFFALSE 26504
// exit ;
26502: GO 26558
// for i = 1 to array do
26504: LD_ADDR_VAR 0 4
26508: PUSH
26509: DOUBLE
26510: LD_INT 1
26512: DEC
26513: ST_TO_ADDR
26514: LD_VAR 0 1
26518: PUSH
26519: FOR_TO
26520: IFFALSE 26556
// if value = array [ i ] then
26522: LD_VAR 0 2
26526: PUSH
26527: LD_VAR 0 1
26531: PUSH
26532: LD_VAR 0 4
26536: ARRAY
26537: EQUAL
26538: IFFALSE 26554
// begin result := i ;
26540: LD_ADDR_VAR 0 3
26544: PUSH
26545: LD_VAR 0 4
26549: ST_TO_ADDR
// exit ;
26550: POP
26551: POP
26552: GO 26558
// end ;
26554: GO 26519
26556: POP
26557: POP
// end ;
26558: LD_VAR 0 3
26562: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26563: LD_INT 0
26565: PPUSH
// vc_chassis := chassis ;
26566: LD_ADDR_OWVAR 37
26570: PUSH
26571: LD_VAR 0 1
26575: ST_TO_ADDR
// vc_engine := engine ;
26576: LD_ADDR_OWVAR 39
26580: PUSH
26581: LD_VAR 0 2
26585: ST_TO_ADDR
// vc_control := control ;
26586: LD_ADDR_OWVAR 38
26590: PUSH
26591: LD_VAR 0 3
26595: ST_TO_ADDR
// vc_weapon := weapon ;
26596: LD_ADDR_OWVAR 40
26600: PUSH
26601: LD_VAR 0 4
26605: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26606: LD_ADDR_OWVAR 41
26610: PUSH
26611: LD_VAR 0 5
26615: ST_TO_ADDR
// end ;
26616: LD_VAR 0 6
26620: RET
// export function WantPlant ( unit ) ; var task ; begin
26621: LD_INT 0
26623: PPUSH
26624: PPUSH
// result := false ;
26625: LD_ADDR_VAR 0 2
26629: PUSH
26630: LD_INT 0
26632: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_VAR 0 1
26642: PPUSH
26643: CALL_OW 437
26647: ST_TO_ADDR
// if task then
26648: LD_VAR 0 3
26652: IFFALSE 26680
// if task [ 1 ] [ 1 ] = p then
26654: LD_VAR 0 3
26658: PUSH
26659: LD_INT 1
26661: ARRAY
26662: PUSH
26663: LD_INT 1
26665: ARRAY
26666: PUSH
26667: LD_STRING p
26669: EQUAL
26670: IFFALSE 26680
// result := true ;
26672: LD_ADDR_VAR 0 2
26676: PUSH
26677: LD_INT 1
26679: ST_TO_ADDR
// end ;
26680: LD_VAR 0 2
26684: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26685: LD_INT 0
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
// if pos < 1 then
26691: LD_VAR 0 2
26695: PUSH
26696: LD_INT 1
26698: LESS
26699: IFFALSE 26703
// exit ;
26701: GO 27006
// if pos = 1 then
26703: LD_VAR 0 2
26707: PUSH
26708: LD_INT 1
26710: EQUAL
26711: IFFALSE 26744
// result := Replace ( arr , pos [ 1 ] , value ) else
26713: LD_ADDR_VAR 0 4
26717: PUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_VAR 0 2
26727: PUSH
26728: LD_INT 1
26730: ARRAY
26731: PPUSH
26732: LD_VAR 0 3
26736: PPUSH
26737: CALL_OW 1
26741: ST_TO_ADDR
26742: GO 27006
// begin tmp := arr ;
26744: LD_ADDR_VAR 0 6
26748: PUSH
26749: LD_VAR 0 1
26753: ST_TO_ADDR
// s_arr := [ tmp ] ;
26754: LD_ADDR_VAR 0 7
26758: PUSH
26759: LD_VAR 0 6
26763: PUSH
26764: EMPTY
26765: LIST
26766: ST_TO_ADDR
// for i = 1 to pos - 1 do
26767: LD_ADDR_VAR 0 5
26771: PUSH
26772: DOUBLE
26773: LD_INT 1
26775: DEC
26776: ST_TO_ADDR
26777: LD_VAR 0 2
26781: PUSH
26782: LD_INT 1
26784: MINUS
26785: PUSH
26786: FOR_TO
26787: IFFALSE 26832
// begin tmp := tmp [ pos [ i ] ] ;
26789: LD_ADDR_VAR 0 6
26793: PUSH
26794: LD_VAR 0 6
26798: PUSH
26799: LD_VAR 0 2
26803: PUSH
26804: LD_VAR 0 5
26808: ARRAY
26809: ARRAY
26810: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26811: LD_ADDR_VAR 0 7
26815: PUSH
26816: LD_VAR 0 7
26820: PUSH
26821: LD_VAR 0 6
26825: PUSH
26826: EMPTY
26827: LIST
26828: ADD
26829: ST_TO_ADDR
// end ;
26830: GO 26786
26832: POP
26833: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26834: LD_ADDR_VAR 0 6
26838: PUSH
26839: LD_VAR 0 6
26843: PPUSH
26844: LD_VAR 0 2
26848: PUSH
26849: LD_VAR 0 2
26853: ARRAY
26854: PPUSH
26855: LD_VAR 0 3
26859: PPUSH
26860: CALL_OW 1
26864: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26865: LD_ADDR_VAR 0 7
26869: PUSH
26870: LD_VAR 0 7
26874: PPUSH
26875: LD_VAR 0 7
26879: PPUSH
26880: LD_VAR 0 6
26884: PPUSH
26885: CALL_OW 1
26889: ST_TO_ADDR
// for i = s_arr downto 2 do
26890: LD_ADDR_VAR 0 5
26894: PUSH
26895: DOUBLE
26896: LD_VAR 0 7
26900: INC
26901: ST_TO_ADDR
26902: LD_INT 2
26904: PUSH
26905: FOR_DOWNTO
26906: IFFALSE 26990
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26908: LD_ADDR_VAR 0 6
26912: PUSH
26913: LD_VAR 0 7
26917: PUSH
26918: LD_VAR 0 5
26922: PUSH
26923: LD_INT 1
26925: MINUS
26926: ARRAY
26927: PPUSH
26928: LD_VAR 0 2
26932: PUSH
26933: LD_VAR 0 5
26937: PUSH
26938: LD_INT 1
26940: MINUS
26941: ARRAY
26942: PPUSH
26943: LD_VAR 0 7
26947: PUSH
26948: LD_VAR 0 5
26952: ARRAY
26953: PPUSH
26954: CALL_OW 1
26958: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26959: LD_ADDR_VAR 0 7
26963: PUSH
26964: LD_VAR 0 7
26968: PPUSH
26969: LD_VAR 0 5
26973: PUSH
26974: LD_INT 1
26976: MINUS
26977: PPUSH
26978: LD_VAR 0 6
26982: PPUSH
26983: CALL_OW 1
26987: ST_TO_ADDR
// end ;
26988: GO 26905
26990: POP
26991: POP
// result := s_arr [ 1 ] ;
26992: LD_ADDR_VAR 0 4
26996: PUSH
26997: LD_VAR 0 7
27001: PUSH
27002: LD_INT 1
27004: ARRAY
27005: ST_TO_ADDR
// end ; end ;
27006: LD_VAR 0 4
27010: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27011: LD_INT 0
27013: PPUSH
27014: PPUSH
// if not list then
27015: LD_VAR 0 1
27019: NOT
27020: IFFALSE 27024
// exit ;
27022: GO 27115
// i := list [ pos1 ] ;
27024: LD_ADDR_VAR 0 5
27028: PUSH
27029: LD_VAR 0 1
27033: PUSH
27034: LD_VAR 0 2
27038: ARRAY
27039: ST_TO_ADDR
// if not i then
27040: LD_VAR 0 5
27044: NOT
27045: IFFALSE 27049
// exit ;
27047: GO 27115
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: LD_VAR 0 2
27063: PPUSH
27064: LD_VAR 0 1
27068: PUSH
27069: LD_VAR 0 3
27073: ARRAY
27074: PPUSH
27075: CALL_OW 1
27079: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27080: LD_ADDR_VAR 0 1
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: LD_VAR 0 3
27094: PPUSH
27095: LD_VAR 0 5
27099: PPUSH
27100: CALL_OW 1
27104: ST_TO_ADDR
// result := list ;
27105: LD_ADDR_VAR 0 4
27109: PUSH
27110: LD_VAR 0 1
27114: ST_TO_ADDR
// end ;
27115: LD_VAR 0 4
27119: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27120: LD_INT 0
27122: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27123: LD_ADDR_VAR 0 5
27127: PUSH
27128: LD_VAR 0 1
27132: PPUSH
27133: CALL_OW 250
27137: PPUSH
27138: LD_VAR 0 1
27142: PPUSH
27143: CALL_OW 251
27147: PPUSH
27148: LD_VAR 0 2
27152: PPUSH
27153: LD_VAR 0 3
27157: PPUSH
27158: LD_VAR 0 4
27162: PPUSH
27163: CALL 27173 0 5
27167: ST_TO_ADDR
// end ;
27168: LD_VAR 0 5
27172: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27173: LD_INT 0
27175: PPUSH
27176: PPUSH
27177: PPUSH
27178: PPUSH
// if not list then
27179: LD_VAR 0 3
27183: NOT
27184: IFFALSE 27188
// exit ;
27186: GO 27576
// result := [ ] ;
27188: LD_ADDR_VAR 0 6
27192: PUSH
27193: EMPTY
27194: ST_TO_ADDR
// for i in list do
27195: LD_ADDR_VAR 0 7
27199: PUSH
27200: LD_VAR 0 3
27204: PUSH
27205: FOR_IN
27206: IFFALSE 27408
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27208: LD_ADDR_VAR 0 9
27212: PUSH
27213: LD_VAR 0 7
27217: PPUSH
27218: LD_VAR 0 1
27222: PPUSH
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL_OW 297
27232: ST_TO_ADDR
// if not result then
27233: LD_VAR 0 6
27237: NOT
27238: IFFALSE 27264
// result := [ [ i , tmp ] ] else
27240: LD_ADDR_VAR 0 6
27244: PUSH
27245: LD_VAR 0 7
27249: PUSH
27250: LD_VAR 0 9
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: ST_TO_ADDR
27262: GO 27406
// begin if result [ result ] [ 2 ] < tmp then
27264: LD_VAR 0 6
27268: PUSH
27269: LD_VAR 0 6
27273: ARRAY
27274: PUSH
27275: LD_INT 2
27277: ARRAY
27278: PUSH
27279: LD_VAR 0 9
27283: LESS
27284: IFFALSE 27326
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27286: LD_ADDR_VAR 0 6
27290: PUSH
27291: LD_VAR 0 6
27295: PPUSH
27296: LD_VAR 0 6
27300: PUSH
27301: LD_INT 1
27303: PLUS
27304: PPUSH
27305: LD_VAR 0 7
27309: PUSH
27310: LD_VAR 0 9
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PPUSH
27319: CALL_OW 2
27323: ST_TO_ADDR
27324: GO 27406
// for j = 1 to result do
27326: LD_ADDR_VAR 0 8
27330: PUSH
27331: DOUBLE
27332: LD_INT 1
27334: DEC
27335: ST_TO_ADDR
27336: LD_VAR 0 6
27340: PUSH
27341: FOR_TO
27342: IFFALSE 27404
// begin if tmp < result [ j ] [ 2 ] then
27344: LD_VAR 0 9
27348: PUSH
27349: LD_VAR 0 6
27353: PUSH
27354: LD_VAR 0 8
27358: ARRAY
27359: PUSH
27360: LD_INT 2
27362: ARRAY
27363: LESS
27364: IFFALSE 27402
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27366: LD_ADDR_VAR 0 6
27370: PUSH
27371: LD_VAR 0 6
27375: PPUSH
27376: LD_VAR 0 8
27380: PPUSH
27381: LD_VAR 0 7
27385: PUSH
27386: LD_VAR 0 9
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PPUSH
27395: CALL_OW 2
27399: ST_TO_ADDR
// break ;
27400: GO 27404
// end ; end ;
27402: GO 27341
27404: POP
27405: POP
// end ; end ;
27406: GO 27205
27408: POP
27409: POP
// if result and not asc then
27410: LD_VAR 0 6
27414: PUSH
27415: LD_VAR 0 4
27419: NOT
27420: AND
27421: IFFALSE 27496
// begin tmp := result ;
27423: LD_ADDR_VAR 0 9
27427: PUSH
27428: LD_VAR 0 6
27432: ST_TO_ADDR
// for i = tmp downto 1 do
27433: LD_ADDR_VAR 0 7
27437: PUSH
27438: DOUBLE
27439: LD_VAR 0 9
27443: INC
27444: ST_TO_ADDR
27445: LD_INT 1
27447: PUSH
27448: FOR_DOWNTO
27449: IFFALSE 27494
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27451: LD_ADDR_VAR 0 6
27455: PUSH
27456: LD_VAR 0 6
27460: PPUSH
27461: LD_VAR 0 9
27465: PUSH
27466: LD_VAR 0 7
27470: MINUS
27471: PUSH
27472: LD_INT 1
27474: PLUS
27475: PPUSH
27476: LD_VAR 0 9
27480: PUSH
27481: LD_VAR 0 7
27485: ARRAY
27486: PPUSH
27487: CALL_OW 1
27491: ST_TO_ADDR
27492: GO 27448
27494: POP
27495: POP
// end ; tmp := [ ] ;
27496: LD_ADDR_VAR 0 9
27500: PUSH
27501: EMPTY
27502: ST_TO_ADDR
// if mode then
27503: LD_VAR 0 5
27507: IFFALSE 27576
// begin for i = 1 to result do
27509: LD_ADDR_VAR 0 7
27513: PUSH
27514: DOUBLE
27515: LD_INT 1
27517: DEC
27518: ST_TO_ADDR
27519: LD_VAR 0 6
27523: PUSH
27524: FOR_TO
27525: IFFALSE 27564
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27527: LD_ADDR_VAR 0 9
27531: PUSH
27532: LD_VAR 0 9
27536: PPUSH
27537: LD_VAR 0 7
27541: PPUSH
27542: LD_VAR 0 6
27546: PUSH
27547: LD_VAR 0 7
27551: ARRAY
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PPUSH
27557: CALL_OW 1
27561: ST_TO_ADDR
27562: GO 27524
27564: POP
27565: POP
// result := tmp ;
27566: LD_ADDR_VAR 0 6
27570: PUSH
27571: LD_VAR 0 9
27575: ST_TO_ADDR
// end ; end ;
27576: LD_VAR 0 6
27580: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27581: LD_INT 0
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27589: LD_ADDR_VAR 0 5
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: ST_TO_ADDR
// if not x or not y then
27611: LD_VAR 0 2
27615: NOT
27616: PUSH
27617: LD_VAR 0 3
27621: NOT
27622: OR
27623: IFFALSE 27627
// exit ;
27625: GO 29273
// if not range then
27627: LD_VAR 0 4
27631: NOT
27632: IFFALSE 27642
// range := 10 ;
27634: LD_ADDR_VAR 0 4
27638: PUSH
27639: LD_INT 10
27641: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27642: LD_ADDR_VAR 0 8
27646: PUSH
27647: LD_INT 81
27649: PUSH
27650: LD_VAR 0 1
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 92
27661: PUSH
27662: LD_VAR 0 2
27666: PUSH
27667: LD_VAR 0 3
27671: PUSH
27672: LD_VAR 0 4
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 21
27688: PUSH
27689: LD_INT 3
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: PPUSH
27705: CALL_OW 69
27709: ST_TO_ADDR
// if not tmp then
27710: LD_VAR 0 8
27714: NOT
27715: IFFALSE 27719
// exit ;
27717: GO 29273
// for i in tmp do
27719: LD_ADDR_VAR 0 6
27723: PUSH
27724: LD_VAR 0 8
27728: PUSH
27729: FOR_IN
27730: IFFALSE 29248
// begin points := [ 0 , 0 , 0 ] ;
27732: LD_ADDR_VAR 0 9
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: ST_TO_ADDR
// bpoints := 1 ;
27751: LD_ADDR_VAR 0 10
27755: PUSH
27756: LD_INT 1
27758: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27759: LD_VAR 0 6
27763: PPUSH
27764: CALL_OW 247
27768: PUSH
27769: LD_INT 1
27771: DOUBLE
27772: EQUAL
27773: IFTRUE 27777
27775: GO 28355
27777: POP
// begin if GetClass ( i ) = 1 then
27778: LD_VAR 0 6
27782: PPUSH
27783: CALL_OW 257
27787: PUSH
27788: LD_INT 1
27790: EQUAL
27791: IFFALSE 27812
// points := [ 10 , 5 , 3 ] ;
27793: LD_ADDR_VAR 0 9
27797: PUSH
27798: LD_INT 10
27800: PUSH
27801: LD_INT 5
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27812: LD_VAR 0 6
27816: PPUSH
27817: CALL_OW 257
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: LD_INT 3
27827: PUSH
27828: LD_INT 4
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: IN
27836: IFFALSE 27857
// points := [ 3 , 2 , 1 ] ;
27838: LD_ADDR_VAR 0 9
27842: PUSH
27843: LD_INT 3
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27857: LD_VAR 0 6
27861: PPUSH
27862: CALL_OW 257
27866: PUSH
27867: LD_INT 5
27869: EQUAL
27870: IFFALSE 27891
// points := [ 130 , 5 , 2 ] ;
27872: LD_ADDR_VAR 0 9
27876: PUSH
27877: LD_INT 130
27879: PUSH
27880: LD_INT 5
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 257
27900: PUSH
27901: LD_INT 8
27903: EQUAL
27904: IFFALSE 27925
// points := [ 35 , 35 , 30 ] ;
27906: LD_ADDR_VAR 0 9
27910: PUSH
27911: LD_INT 35
27913: PUSH
27914: LD_INT 35
27916: PUSH
27917: LD_INT 30
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27925: LD_VAR 0 6
27929: PPUSH
27930: CALL_OW 257
27934: PUSH
27935: LD_INT 9
27937: EQUAL
27938: IFFALSE 27959
// points := [ 20 , 55 , 40 ] ;
27940: LD_ADDR_VAR 0 9
27944: PUSH
27945: LD_INT 20
27947: PUSH
27948: LD_INT 55
27950: PUSH
27951: LD_INT 40
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27959: LD_VAR 0 6
27963: PPUSH
27964: CALL_OW 257
27968: PUSH
27969: LD_INT 12
27971: PUSH
27972: LD_INT 16
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: IN
27979: IFFALSE 28000
// points := [ 5 , 3 , 2 ] ;
27981: LD_ADDR_VAR 0 9
27985: PUSH
27986: LD_INT 5
27988: PUSH
27989: LD_INT 3
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28000: LD_VAR 0 6
28004: PPUSH
28005: CALL_OW 257
28009: PUSH
28010: LD_INT 17
28012: EQUAL
28013: IFFALSE 28034
// points := [ 100 , 50 , 75 ] ;
28015: LD_ADDR_VAR 0 9
28019: PUSH
28020: LD_INT 100
28022: PUSH
28023: LD_INT 50
28025: PUSH
28026: LD_INT 75
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28034: LD_VAR 0 6
28038: PPUSH
28039: CALL_OW 257
28043: PUSH
28044: LD_INT 15
28046: EQUAL
28047: IFFALSE 28068
// points := [ 10 , 5 , 3 ] ;
28049: LD_ADDR_VAR 0 9
28053: PUSH
28054: LD_INT 10
28056: PUSH
28057: LD_INT 5
28059: PUSH
28060: LD_INT 3
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28068: LD_VAR 0 6
28072: PPUSH
28073: CALL_OW 257
28077: PUSH
28078: LD_INT 14
28080: EQUAL
28081: IFFALSE 28102
// points := [ 10 , 0 , 0 ] ;
28083: LD_ADDR_VAR 0 9
28087: PUSH
28088: LD_INT 10
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28102: LD_VAR 0 6
28106: PPUSH
28107: CALL_OW 257
28111: PUSH
28112: LD_INT 11
28114: EQUAL
28115: IFFALSE 28136
// points := [ 30 , 10 , 5 ] ;
28117: LD_ADDR_VAR 0 9
28121: PUSH
28122: LD_INT 30
28124: PUSH
28125: LD_INT 10
28127: PUSH
28128: LD_INT 5
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: LIST
28135: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28136: LD_VAR 0 1
28140: PPUSH
28141: LD_INT 5
28143: PPUSH
28144: CALL_OW 321
28148: PUSH
28149: LD_INT 2
28151: EQUAL
28152: IFFALSE 28169
// bpoints := bpoints * 1.8 ;
28154: LD_ADDR_VAR 0 10
28158: PUSH
28159: LD_VAR 0 10
28163: PUSH
28164: LD_REAL  1.80000000000000E+0000
28167: MUL
28168: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28169: LD_VAR 0 6
28173: PPUSH
28174: CALL_OW 257
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: LD_INT 3
28187: PUSH
28188: LD_INT 4
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: IN
28197: PUSH
28198: LD_VAR 0 1
28202: PPUSH
28203: LD_INT 51
28205: PPUSH
28206: CALL_OW 321
28210: PUSH
28211: LD_INT 2
28213: EQUAL
28214: AND
28215: IFFALSE 28232
// bpoints := bpoints * 1.2 ;
28217: LD_ADDR_VAR 0 10
28221: PUSH
28222: LD_VAR 0 10
28226: PUSH
28227: LD_REAL  1.20000000000000E+0000
28230: MUL
28231: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28232: LD_VAR 0 6
28236: PPUSH
28237: CALL_OW 257
28241: PUSH
28242: LD_INT 5
28244: PUSH
28245: LD_INT 7
28247: PUSH
28248: LD_INT 9
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: IN
28256: PUSH
28257: LD_VAR 0 1
28261: PPUSH
28262: LD_INT 52
28264: PPUSH
28265: CALL_OW 321
28269: PUSH
28270: LD_INT 2
28272: EQUAL
28273: AND
28274: IFFALSE 28291
// bpoints := bpoints * 1.5 ;
28276: LD_ADDR_VAR 0 10
28280: PUSH
28281: LD_VAR 0 10
28285: PUSH
28286: LD_REAL  1.50000000000000E+0000
28289: MUL
28290: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28291: LD_VAR 0 1
28295: PPUSH
28296: LD_INT 66
28298: PPUSH
28299: CALL_OW 321
28303: PUSH
28304: LD_INT 2
28306: EQUAL
28307: IFFALSE 28324
// bpoints := bpoints * 1.1 ;
28309: LD_ADDR_VAR 0 10
28313: PUSH
28314: LD_VAR 0 10
28318: PUSH
28319: LD_REAL  1.10000000000000E+0000
28322: MUL
28323: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28324: LD_ADDR_VAR 0 10
28328: PUSH
28329: LD_VAR 0 10
28333: PUSH
28334: LD_VAR 0 6
28338: PPUSH
28339: LD_INT 1
28341: PPUSH
28342: CALL_OW 259
28346: PUSH
28347: LD_REAL  1.15000000000000E+0000
28350: MUL
28351: MUL
28352: ST_TO_ADDR
// end ; unit_vehicle :
28353: GO 29177
28355: LD_INT 2
28357: DOUBLE
28358: EQUAL
28359: IFTRUE 28363
28361: GO 29165
28363: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28364: LD_VAR 0 6
28368: PPUSH
28369: CALL_OW 264
28373: PUSH
28374: LD_INT 2
28376: PUSH
28377: LD_INT 42
28379: PUSH
28380: LD_INT 24
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: IN
28388: IFFALSE 28409
// points := [ 25 , 5 , 3 ] ;
28390: LD_ADDR_VAR 0 9
28394: PUSH
28395: LD_INT 25
28397: PUSH
28398: LD_INT 5
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28409: LD_VAR 0 6
28413: PPUSH
28414: CALL_OW 264
28418: PUSH
28419: LD_INT 4
28421: PUSH
28422: LD_INT 43
28424: PUSH
28425: LD_INT 25
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: IN
28433: IFFALSE 28454
// points := [ 40 , 15 , 5 ] ;
28435: LD_ADDR_VAR 0 9
28439: PUSH
28440: LD_INT 40
28442: PUSH
28443: LD_INT 15
28445: PUSH
28446: LD_INT 5
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28454: LD_VAR 0 6
28458: PPUSH
28459: CALL_OW 264
28463: PUSH
28464: LD_INT 3
28466: PUSH
28467: LD_INT 23
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: IN
28474: IFFALSE 28495
// points := [ 7 , 25 , 8 ] ;
28476: LD_ADDR_VAR 0 9
28480: PUSH
28481: LD_INT 7
28483: PUSH
28484: LD_INT 25
28486: PUSH
28487: LD_INT 8
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28495: LD_VAR 0 6
28499: PPUSH
28500: CALL_OW 264
28504: PUSH
28505: LD_INT 5
28507: PUSH
28508: LD_INT 27
28510: PUSH
28511: LD_INT 44
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: IN
28519: IFFALSE 28540
// points := [ 14 , 50 , 16 ] ;
28521: LD_ADDR_VAR 0 9
28525: PUSH
28526: LD_INT 14
28528: PUSH
28529: LD_INT 50
28531: PUSH
28532: LD_INT 16
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28540: LD_VAR 0 6
28544: PPUSH
28545: CALL_OW 264
28549: PUSH
28550: LD_INT 6
28552: PUSH
28553: LD_INT 46
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: IN
28560: IFFALSE 28581
// points := [ 32 , 120 , 70 ] ;
28562: LD_ADDR_VAR 0 9
28566: PUSH
28567: LD_INT 32
28569: PUSH
28570: LD_INT 120
28572: PUSH
28573: LD_INT 70
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28581: LD_VAR 0 6
28585: PPUSH
28586: CALL_OW 264
28590: PUSH
28591: LD_INT 7
28593: PUSH
28594: LD_INT 28
28596: PUSH
28597: LD_INT 45
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: IN
28605: IFFALSE 28626
// points := [ 35 , 20 , 45 ] ;
28607: LD_ADDR_VAR 0 9
28611: PUSH
28612: LD_INT 35
28614: PUSH
28615: LD_INT 20
28617: PUSH
28618: LD_INT 45
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28626: LD_VAR 0 6
28630: PPUSH
28631: CALL_OW 264
28635: PUSH
28636: LD_INT 47
28638: PUSH
28639: EMPTY
28640: LIST
28641: IN
28642: IFFALSE 28663
// points := [ 67 , 45 , 75 ] ;
28644: LD_ADDR_VAR 0 9
28648: PUSH
28649: LD_INT 67
28651: PUSH
28652: LD_INT 45
28654: PUSH
28655: LD_INT 75
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28663: LD_VAR 0 6
28667: PPUSH
28668: CALL_OW 264
28672: PUSH
28673: LD_INT 26
28675: PUSH
28676: EMPTY
28677: LIST
28678: IN
28679: IFFALSE 28700
// points := [ 120 , 30 , 80 ] ;
28681: LD_ADDR_VAR 0 9
28685: PUSH
28686: LD_INT 120
28688: PUSH
28689: LD_INT 30
28691: PUSH
28692: LD_INT 80
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28700: LD_VAR 0 6
28704: PPUSH
28705: CALL_OW 264
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: EMPTY
28714: LIST
28715: IN
28716: IFFALSE 28737
// points := [ 40 , 1 , 1 ] ;
28718: LD_ADDR_VAR 0 9
28722: PUSH
28723: LD_INT 40
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28737: LD_VAR 0 6
28741: PPUSH
28742: CALL_OW 264
28746: PUSH
28747: LD_INT 29
28749: PUSH
28750: EMPTY
28751: LIST
28752: IN
28753: IFFALSE 28774
// points := [ 70 , 200 , 400 ] ;
28755: LD_ADDR_VAR 0 9
28759: PUSH
28760: LD_INT 70
28762: PUSH
28763: LD_INT 200
28765: PUSH
28766: LD_INT 400
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28774: LD_VAR 0 6
28778: PPUSH
28779: CALL_OW 264
28783: PUSH
28784: LD_INT 14
28786: PUSH
28787: LD_INT 53
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: IN
28794: IFFALSE 28815
// points := [ 40 , 10 , 20 ] ;
28796: LD_ADDR_VAR 0 9
28800: PUSH
28801: LD_INT 40
28803: PUSH
28804: LD_INT 10
28806: PUSH
28807: LD_INT 20
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28815: LD_VAR 0 6
28819: PPUSH
28820: CALL_OW 264
28824: PUSH
28825: LD_INT 9
28827: PUSH
28828: EMPTY
28829: LIST
28830: IN
28831: IFFALSE 28852
// points := [ 5 , 70 , 20 ] ;
28833: LD_ADDR_VAR 0 9
28837: PUSH
28838: LD_INT 5
28840: PUSH
28841: LD_INT 70
28843: PUSH
28844: LD_INT 20
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28852: LD_VAR 0 6
28856: PPUSH
28857: CALL_OW 264
28861: PUSH
28862: LD_INT 10
28864: PUSH
28865: EMPTY
28866: LIST
28867: IN
28868: IFFALSE 28889
// points := [ 35 , 110 , 70 ] ;
28870: LD_ADDR_VAR 0 9
28874: PUSH
28875: LD_INT 35
28877: PUSH
28878: LD_INT 110
28880: PUSH
28881: LD_INT 70
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28889: LD_VAR 0 6
28893: PPUSH
28894: CALL_OW 265
28898: PUSH
28899: LD_INT 25
28901: EQUAL
28902: IFFALSE 28923
// points := [ 80 , 65 , 100 ] ;
28904: LD_ADDR_VAR 0 9
28908: PUSH
28909: LD_INT 80
28911: PUSH
28912: LD_INT 65
28914: PUSH
28915: LD_INT 100
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28923: LD_VAR 0 6
28927: PPUSH
28928: CALL_OW 263
28932: PUSH
28933: LD_INT 1
28935: EQUAL
28936: IFFALSE 28971
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28938: LD_ADDR_VAR 0 10
28942: PUSH
28943: LD_VAR 0 10
28947: PUSH
28948: LD_VAR 0 6
28952: PPUSH
28953: CALL_OW 311
28957: PPUSH
28958: LD_INT 3
28960: PPUSH
28961: CALL_OW 259
28965: PUSH
28966: LD_INT 4
28968: MUL
28969: MUL
28970: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28971: LD_VAR 0 6
28975: PPUSH
28976: CALL_OW 263
28980: PUSH
28981: LD_INT 2
28983: EQUAL
28984: IFFALSE 29035
// begin j := IsControledBy ( i ) ;
28986: LD_ADDR_VAR 0 7
28990: PUSH
28991: LD_VAR 0 6
28995: PPUSH
28996: CALL_OW 312
29000: ST_TO_ADDR
// if j then
29001: LD_VAR 0 7
29005: IFFALSE 29035
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29007: LD_ADDR_VAR 0 10
29011: PUSH
29012: LD_VAR 0 10
29016: PUSH
29017: LD_VAR 0 7
29021: PPUSH
29022: LD_INT 3
29024: PPUSH
29025: CALL_OW 259
29029: PUSH
29030: LD_INT 3
29032: MUL
29033: MUL
29034: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29035: LD_VAR 0 6
29039: PPUSH
29040: CALL_OW 264
29044: PUSH
29045: LD_INT 5
29047: PUSH
29048: LD_INT 6
29050: PUSH
29051: LD_INT 46
29053: PUSH
29054: LD_INT 44
29056: PUSH
29057: LD_INT 47
29059: PUSH
29060: LD_INT 45
29062: PUSH
29063: LD_INT 28
29065: PUSH
29066: LD_INT 7
29068: PUSH
29069: LD_INT 27
29071: PUSH
29072: LD_INT 29
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: IN
29087: PUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: LD_INT 52
29095: PPUSH
29096: CALL_OW 321
29100: PUSH
29101: LD_INT 2
29103: EQUAL
29104: AND
29105: IFFALSE 29122
// bpoints := bpoints * 1.2 ;
29107: LD_ADDR_VAR 0 10
29111: PUSH
29112: LD_VAR 0 10
29116: PUSH
29117: LD_REAL  1.20000000000000E+0000
29120: MUL
29121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29122: LD_VAR 0 6
29126: PPUSH
29127: CALL_OW 264
29131: PUSH
29132: LD_INT 6
29134: PUSH
29135: LD_INT 46
29137: PUSH
29138: LD_INT 47
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: IN
29146: IFFALSE 29163
// bpoints := bpoints * 1.2 ;
29148: LD_ADDR_VAR 0 10
29152: PUSH
29153: LD_VAR 0 10
29157: PUSH
29158: LD_REAL  1.20000000000000E+0000
29161: MUL
29162: ST_TO_ADDR
// end ; unit_building :
29163: GO 29177
29165: LD_INT 3
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29176
29173: POP
// ; end ;
29174: GO 29177
29176: POP
// for j = 1 to 3 do
29177: LD_ADDR_VAR 0 7
29181: PUSH
29182: DOUBLE
29183: LD_INT 1
29185: DEC
29186: ST_TO_ADDR
29187: LD_INT 3
29189: PUSH
29190: FOR_TO
29191: IFFALSE 29244
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29193: LD_ADDR_VAR 0 5
29197: PUSH
29198: LD_VAR 0 5
29202: PPUSH
29203: LD_VAR 0 7
29207: PPUSH
29208: LD_VAR 0 5
29212: PUSH
29213: LD_VAR 0 7
29217: ARRAY
29218: PUSH
29219: LD_VAR 0 9
29223: PUSH
29224: LD_VAR 0 7
29228: ARRAY
29229: PUSH
29230: LD_VAR 0 10
29234: MUL
29235: PLUS
29236: PPUSH
29237: CALL_OW 1
29241: ST_TO_ADDR
29242: GO 29190
29244: POP
29245: POP
// end ;
29246: GO 27729
29248: POP
29249: POP
// result := Replace ( result , 4 , tmp ) ;
29250: LD_ADDR_VAR 0 5
29254: PUSH
29255: LD_VAR 0 5
29259: PPUSH
29260: LD_INT 4
29262: PPUSH
29263: LD_VAR 0 8
29267: PPUSH
29268: CALL_OW 1
29272: ST_TO_ADDR
// end ;
29273: LD_VAR 0 5
29277: RET
// export function DangerAtRange ( unit , range ) ; begin
29278: LD_INT 0
29280: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29281: LD_ADDR_VAR 0 3
29285: PUSH
29286: LD_VAR 0 1
29290: PPUSH
29291: CALL_OW 255
29295: PPUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 250
29305: PPUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 251
29315: PPUSH
29316: LD_VAR 0 2
29320: PPUSH
29321: CALL 27581 0 4
29325: ST_TO_ADDR
// end ;
29326: LD_VAR 0 3
29330: RET
// export function DangerInArea ( side , area ) ; begin
29331: LD_INT 0
29333: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29334: LD_ADDR_VAR 0 3
29338: PUSH
29339: LD_VAR 0 2
29343: PPUSH
29344: LD_INT 81
29346: PUSH
29347: LD_VAR 0 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PPUSH
29356: CALL_OW 70
29360: ST_TO_ADDR
// end ;
29361: LD_VAR 0 3
29365: RET
// export function IsExtension ( b ) ; begin
29366: LD_INT 0
29368: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29369: LD_ADDR_VAR 0 2
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 23
29381: PUSH
29382: LD_INT 20
29384: PUSH
29385: LD_INT 22
29387: PUSH
29388: LD_INT 17
29390: PUSH
29391: LD_INT 24
29393: PUSH
29394: LD_INT 21
29396: PUSH
29397: LD_INT 19
29399: PUSH
29400: LD_INT 16
29402: PUSH
29403: LD_INT 25
29405: PUSH
29406: LD_INT 18
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: IN
29421: ST_TO_ADDR
// end ;
29422: LD_VAR 0 2
29426: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29427: LD_INT 0
29429: PPUSH
29430: PPUSH
29431: PPUSH
// result := [ ] ;
29432: LD_ADDR_VAR 0 3
29436: PUSH
29437: EMPTY
29438: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29439: LD_ADDR_VAR 0 4
29443: PUSH
29444: LD_VAR 0 2
29448: PPUSH
29449: LD_INT 21
29451: PUSH
29452: LD_INT 3
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PPUSH
29459: CALL_OW 70
29463: ST_TO_ADDR
// if not tmp then
29464: LD_VAR 0 4
29468: NOT
29469: IFFALSE 29473
// exit ;
29471: GO 29531
// for i in tmp do
29473: LD_ADDR_VAR 0 5
29477: PUSH
29478: LD_VAR 0 4
29482: PUSH
29483: FOR_IN
29484: IFFALSE 29519
// if GetBase ( i ) <> base then
29486: LD_VAR 0 5
29490: PPUSH
29491: CALL_OW 274
29495: PUSH
29496: LD_VAR 0 1
29500: NONEQUAL
29501: IFFALSE 29517
// ComLinkToBase ( base , i ) ;
29503: LD_VAR 0 1
29507: PPUSH
29508: LD_VAR 0 5
29512: PPUSH
29513: CALL_OW 169
29517: GO 29483
29519: POP
29520: POP
// result := tmp ;
29521: LD_ADDR_VAR 0 3
29525: PUSH
29526: LD_VAR 0 4
29530: ST_TO_ADDR
// end ;
29531: LD_VAR 0 3
29535: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29536: LD_INT 0
29538: PPUSH
29539: PPUSH
// if BuildingStatus ( b ) = bs_build then
29540: LD_VAR 0 2
29544: PPUSH
29545: CALL_OW 461
29549: PUSH
29550: LD_INT 1
29552: EQUAL
29553: IFFALSE 29613
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29555: LD_VAR 0 1
29559: PPUSH
29560: LD_STRING h
29562: PUSH
29563: LD_VAR 0 2
29567: PPUSH
29568: CALL_OW 250
29572: PUSH
29573: LD_VAR 0 2
29577: PPUSH
29578: CALL_OW 251
29582: PUSH
29583: LD_VAR 0 2
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: PPUSH
29609: CALL_OW 446
// end ;
29613: LD_VAR 0 3
29617: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29618: LD_INT 0
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29626: LD_VAR 0 1
29630: NOT
29631: PUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL_OW 263
29641: PUSH
29642: LD_INT 2
29644: EQUAL
29645: NOT
29646: OR
29647: IFFALSE 29651
// exit ;
29649: GO 29967
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29651: LD_ADDR_VAR 0 6
29655: PUSH
29656: LD_INT 22
29658: PUSH
29659: LD_VAR 0 1
29663: PPUSH
29664: CALL_OW 255
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: PUSH
29676: LD_INT 30
29678: PUSH
29679: LD_INT 36
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 34
29688: PUSH
29689: LD_INT 31
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PPUSH
29705: CALL_OW 69
29709: ST_TO_ADDR
// if not tmp then
29710: LD_VAR 0 6
29714: NOT
29715: IFFALSE 29719
// exit ;
29717: GO 29967
// result := [ ] ;
29719: LD_ADDR_VAR 0 2
29723: PUSH
29724: EMPTY
29725: ST_TO_ADDR
// for i in tmp do
29726: LD_ADDR_VAR 0 3
29730: PUSH
29731: LD_VAR 0 6
29735: PUSH
29736: FOR_IN
29737: IFFALSE 29808
// begin t := UnitsInside ( i ) ;
29739: LD_ADDR_VAR 0 4
29743: PUSH
29744: LD_VAR 0 3
29748: PPUSH
29749: CALL_OW 313
29753: ST_TO_ADDR
// if t then
29754: LD_VAR 0 4
29758: IFFALSE 29806
// for j in t do
29760: LD_ADDR_VAR 0 7
29764: PUSH
29765: LD_VAR 0 4
29769: PUSH
29770: FOR_IN
29771: IFFALSE 29804
// result := Insert ( result , result + 1 , j ) ;
29773: LD_ADDR_VAR 0 2
29777: PUSH
29778: LD_VAR 0 2
29782: PPUSH
29783: LD_VAR 0 2
29787: PUSH
29788: LD_INT 1
29790: PLUS
29791: PPUSH
29792: LD_VAR 0 7
29796: PPUSH
29797: CALL_OW 2
29801: ST_TO_ADDR
29802: GO 29770
29804: POP
29805: POP
// end ;
29806: GO 29736
29808: POP
29809: POP
// if not result then
29810: LD_VAR 0 2
29814: NOT
29815: IFFALSE 29819
// exit ;
29817: GO 29967
// mech := result [ 1 ] ;
29819: LD_ADDR_VAR 0 5
29823: PUSH
29824: LD_VAR 0 2
29828: PUSH
29829: LD_INT 1
29831: ARRAY
29832: ST_TO_ADDR
// if result > 1 then
29833: LD_VAR 0 2
29837: PUSH
29838: LD_INT 1
29840: GREATER
29841: IFFALSE 29953
// for i = 2 to result do
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: DOUBLE
29849: LD_INT 2
29851: DEC
29852: ST_TO_ADDR
29853: LD_VAR 0 2
29857: PUSH
29858: FOR_TO
29859: IFFALSE 29951
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29861: LD_ADDR_VAR 0 4
29865: PUSH
29866: LD_VAR 0 2
29870: PUSH
29871: LD_VAR 0 3
29875: ARRAY
29876: PPUSH
29877: LD_INT 3
29879: PPUSH
29880: CALL_OW 259
29884: PUSH
29885: LD_VAR 0 2
29889: PUSH
29890: LD_VAR 0 3
29894: ARRAY
29895: PPUSH
29896: CALL_OW 432
29900: MINUS
29901: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29902: LD_VAR 0 4
29906: PUSH
29907: LD_VAR 0 5
29911: PPUSH
29912: LD_INT 3
29914: PPUSH
29915: CALL_OW 259
29919: PUSH
29920: LD_VAR 0 5
29924: PPUSH
29925: CALL_OW 432
29929: MINUS
29930: GREATEREQUAL
29931: IFFALSE 29949
// mech := result [ i ] ;
29933: LD_ADDR_VAR 0 5
29937: PUSH
29938: LD_VAR 0 2
29942: PUSH
29943: LD_VAR 0 3
29947: ARRAY
29948: ST_TO_ADDR
// end ;
29949: GO 29858
29951: POP
29952: POP
// ComLinkTo ( vehicle , mech ) ;
29953: LD_VAR 0 1
29957: PPUSH
29958: LD_VAR 0 5
29962: PPUSH
29963: CALL_OW 135
// end ;
29967: LD_VAR 0 2
29971: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29972: LD_INT 0
29974: PPUSH
29975: PPUSH
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
// result := [ ] ;
29987: LD_ADDR_VAR 0 7
29991: PUSH
29992: EMPTY
29993: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29994: LD_VAR 0 1
29998: PPUSH
29999: CALL_OW 266
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: IN
30014: NOT
30015: IFFALSE 30019
// exit ;
30017: GO 31650
// if name then
30019: LD_VAR 0 3
30023: IFFALSE 30039
// SetBName ( base_dep , name ) ;
30025: LD_VAR 0 1
30029: PPUSH
30030: LD_VAR 0 3
30034: PPUSH
30035: CALL_OW 500
// base := GetBase ( base_dep ) ;
30039: LD_ADDR_VAR 0 15
30043: PUSH
30044: LD_VAR 0 1
30048: PPUSH
30049: CALL_OW 274
30053: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30054: LD_ADDR_VAR 0 16
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 255
30068: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30069: LD_ADDR_VAR 0 17
30073: PUSH
30074: LD_VAR 0 1
30078: PPUSH
30079: CALL_OW 248
30083: ST_TO_ADDR
// if sources then
30084: LD_VAR 0 5
30088: IFFALSE 30135
// for i = 1 to 3 do
30090: LD_ADDR_VAR 0 8
30094: PUSH
30095: DOUBLE
30096: LD_INT 1
30098: DEC
30099: ST_TO_ADDR
30100: LD_INT 3
30102: PUSH
30103: FOR_TO
30104: IFFALSE 30133
// AddResourceType ( base , i , sources [ i ] ) ;
30106: LD_VAR 0 15
30110: PPUSH
30111: LD_VAR 0 8
30115: PPUSH
30116: LD_VAR 0 5
30120: PUSH
30121: LD_VAR 0 8
30125: ARRAY
30126: PPUSH
30127: CALL_OW 276
30131: GO 30103
30133: POP
30134: POP
// buildings := GetBaseBuildings ( base , area ) ;
30135: LD_ADDR_VAR 0 18
30139: PUSH
30140: LD_VAR 0 15
30144: PPUSH
30145: LD_VAR 0 2
30149: PPUSH
30150: CALL 29427 0 2
30154: ST_TO_ADDR
// InitHc ;
30155: CALL_OW 19
// InitUc ;
30159: CALL_OW 18
// uc_side := side ;
30163: LD_ADDR_OWVAR 20
30167: PUSH
30168: LD_VAR 0 16
30172: ST_TO_ADDR
// uc_nation := nation ;
30173: LD_ADDR_OWVAR 21
30177: PUSH
30178: LD_VAR 0 17
30182: ST_TO_ADDR
// if buildings then
30183: LD_VAR 0 18
30187: IFFALSE 31509
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30189: LD_ADDR_VAR 0 19
30193: PUSH
30194: LD_VAR 0 18
30198: PPUSH
30199: LD_INT 2
30201: PUSH
30202: LD_INT 30
30204: PUSH
30205: LD_INT 29
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 30
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: PPUSH
30227: CALL_OW 72
30231: ST_TO_ADDR
// if tmp then
30232: LD_VAR 0 19
30236: IFFALSE 30284
// for i in tmp do
30238: LD_ADDR_VAR 0 8
30242: PUSH
30243: LD_VAR 0 19
30247: PUSH
30248: FOR_IN
30249: IFFALSE 30282
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30251: LD_VAR 0 8
30255: PPUSH
30256: CALL_OW 250
30260: PPUSH
30261: LD_VAR 0 8
30265: PPUSH
30266: CALL_OW 251
30270: PPUSH
30271: LD_VAR 0 16
30275: PPUSH
30276: CALL_OW 441
30280: GO 30248
30282: POP
30283: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30284: LD_VAR 0 18
30288: PPUSH
30289: LD_INT 2
30291: PUSH
30292: LD_INT 30
30294: PUSH
30295: LD_INT 32
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 30
30304: PUSH
30305: LD_INT 33
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 72
30321: IFFALSE 30409
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30323: LD_ADDR_VAR 0 8
30327: PUSH
30328: LD_VAR 0 18
30332: PPUSH
30333: LD_INT 2
30335: PUSH
30336: LD_INT 30
30338: PUSH
30339: LD_INT 32
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 30
30348: PUSH
30349: LD_INT 33
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 72
30365: PUSH
30366: FOR_IN
30367: IFFALSE 30407
// begin if not GetBWeapon ( i ) then
30369: LD_VAR 0 8
30373: PPUSH
30374: CALL_OW 269
30378: NOT
30379: IFFALSE 30405
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30381: LD_VAR 0 8
30385: PPUSH
30386: LD_VAR 0 8
30390: PPUSH
30391: LD_VAR 0 2
30395: PPUSH
30396: CALL 31655 0 2
30400: PPUSH
30401: CALL_OW 431
// end ;
30405: GO 30366
30407: POP
30408: POP
// end ; for i = 1 to personel do
30409: LD_ADDR_VAR 0 8
30413: PUSH
30414: DOUBLE
30415: LD_INT 1
30417: DEC
30418: ST_TO_ADDR
30419: LD_VAR 0 6
30423: PUSH
30424: FOR_TO
30425: IFFALSE 31489
// begin if i > 4 then
30427: LD_VAR 0 8
30431: PUSH
30432: LD_INT 4
30434: GREATER
30435: IFFALSE 30439
// break ;
30437: GO 31489
// case i of 1 :
30439: LD_VAR 0 8
30443: PUSH
30444: LD_INT 1
30446: DOUBLE
30447: EQUAL
30448: IFTRUE 30452
30450: GO 30532
30452: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30453: LD_ADDR_VAR 0 12
30457: PUSH
30458: LD_VAR 0 18
30462: PPUSH
30463: LD_INT 22
30465: PUSH
30466: LD_VAR 0 16
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 58
30477: PUSH
30478: EMPTY
30479: LIST
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: LD_INT 30
30486: PUSH
30487: LD_INT 32
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 30
30496: PUSH
30497: LD_INT 4
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 30
30506: PUSH
30507: LD_INT 5
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 72
30529: ST_TO_ADDR
30530: GO 30754
30532: LD_INT 2
30534: DOUBLE
30535: EQUAL
30536: IFTRUE 30540
30538: GO 30602
30540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30541: LD_ADDR_VAR 0 12
30545: PUSH
30546: LD_VAR 0 18
30550: PPUSH
30551: LD_INT 22
30553: PUSH
30554: LD_VAR 0 16
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: PUSH
30566: LD_INT 30
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 30
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PPUSH
30595: CALL_OW 72
30599: ST_TO_ADDR
30600: GO 30754
30602: LD_INT 3
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 30672
30610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30611: LD_ADDR_VAR 0 12
30615: PUSH
30616: LD_VAR 0 18
30620: PPUSH
30621: LD_INT 22
30623: PUSH
30624: LD_VAR 0 16
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 30
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 30
30648: PUSH
30649: LD_INT 3
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PPUSH
30665: CALL_OW 72
30669: ST_TO_ADDR
30670: GO 30754
30672: LD_INT 4
30674: DOUBLE
30675: EQUAL
30676: IFTRUE 30680
30678: GO 30753
30680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30681: LD_ADDR_VAR 0 12
30685: PUSH
30686: LD_VAR 0 18
30690: PPUSH
30691: LD_INT 22
30693: PUSH
30694: LD_VAR 0 16
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: LD_INT 30
30708: PUSH
30709: LD_INT 6
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 30
30718: PUSH
30719: LD_INT 7
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 30
30728: PUSH
30729: LD_INT 8
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PPUSH
30746: CALL_OW 72
30750: ST_TO_ADDR
30751: GO 30754
30753: POP
// if i = 1 then
30754: LD_VAR 0 8
30758: PUSH
30759: LD_INT 1
30761: EQUAL
30762: IFFALSE 30873
// begin tmp := [ ] ;
30764: LD_ADDR_VAR 0 19
30768: PUSH
30769: EMPTY
30770: ST_TO_ADDR
// for j in f do
30771: LD_ADDR_VAR 0 9
30775: PUSH
30776: LD_VAR 0 12
30780: PUSH
30781: FOR_IN
30782: IFFALSE 30855
// if GetBType ( j ) = b_bunker then
30784: LD_VAR 0 9
30788: PPUSH
30789: CALL_OW 266
30793: PUSH
30794: LD_INT 32
30796: EQUAL
30797: IFFALSE 30824
// tmp := Insert ( tmp , 1 , j ) else
30799: LD_ADDR_VAR 0 19
30803: PUSH
30804: LD_VAR 0 19
30808: PPUSH
30809: LD_INT 1
30811: PPUSH
30812: LD_VAR 0 9
30816: PPUSH
30817: CALL_OW 2
30821: ST_TO_ADDR
30822: GO 30853
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30824: LD_ADDR_VAR 0 19
30828: PUSH
30829: LD_VAR 0 19
30833: PPUSH
30834: LD_VAR 0 19
30838: PUSH
30839: LD_INT 1
30841: PLUS
30842: PPUSH
30843: LD_VAR 0 9
30847: PPUSH
30848: CALL_OW 2
30852: ST_TO_ADDR
30853: GO 30781
30855: POP
30856: POP
// if tmp then
30857: LD_VAR 0 19
30861: IFFALSE 30873
// f := tmp ;
30863: LD_ADDR_VAR 0 12
30867: PUSH
30868: LD_VAR 0 19
30872: ST_TO_ADDR
// end ; x := personel [ i ] ;
30873: LD_ADDR_VAR 0 13
30877: PUSH
30878: LD_VAR 0 6
30882: PUSH
30883: LD_VAR 0 8
30887: ARRAY
30888: ST_TO_ADDR
// if x = - 1 then
30889: LD_VAR 0 13
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: EQUAL
30898: IFFALSE 31107
// begin for j in f do
30900: LD_ADDR_VAR 0 9
30904: PUSH
30905: LD_VAR 0 12
30909: PUSH
30910: FOR_IN
30911: IFFALSE 31103
// repeat InitHc ;
30913: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30917: LD_VAR 0 9
30921: PPUSH
30922: CALL_OW 266
30926: PUSH
30927: LD_INT 5
30929: EQUAL
30930: IFFALSE 31000
// begin if UnitsInside ( j ) < 3 then
30932: LD_VAR 0 9
30936: PPUSH
30937: CALL_OW 313
30941: PUSH
30942: LD_INT 3
30944: LESS
30945: IFFALSE 30981
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30947: LD_INT 0
30949: PPUSH
30950: LD_INT 5
30952: PUSH
30953: LD_INT 8
30955: PUSH
30956: LD_INT 9
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: PUSH
30964: LD_VAR 0 17
30968: ARRAY
30969: PPUSH
30970: LD_VAR 0 4
30974: PPUSH
30975: CALL_OW 380
30979: GO 30998
// PrepareHuman ( false , i , skill ) ;
30981: LD_INT 0
30983: PPUSH
30984: LD_VAR 0 8
30988: PPUSH
30989: LD_VAR 0 4
30993: PPUSH
30994: CALL_OW 380
// end else
30998: GO 31017
// PrepareHuman ( false , i , skill ) ;
31000: LD_INT 0
31002: PPUSH
31003: LD_VAR 0 8
31007: PPUSH
31008: LD_VAR 0 4
31012: PPUSH
31013: CALL_OW 380
// un := CreateHuman ;
31017: LD_ADDR_VAR 0 14
31021: PUSH
31022: CALL_OW 44
31026: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31027: LD_ADDR_VAR 0 7
31031: PUSH
31032: LD_VAR 0 7
31036: PPUSH
31037: LD_INT 1
31039: PPUSH
31040: LD_VAR 0 14
31044: PPUSH
31045: CALL_OW 2
31049: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31050: LD_VAR 0 14
31054: PPUSH
31055: LD_VAR 0 9
31059: PPUSH
31060: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31064: LD_VAR 0 9
31068: PPUSH
31069: CALL_OW 313
31073: PUSH
31074: LD_INT 6
31076: EQUAL
31077: PUSH
31078: LD_VAR 0 9
31082: PPUSH
31083: CALL_OW 266
31087: PUSH
31088: LD_INT 32
31090: PUSH
31091: LD_INT 31
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: IN
31098: OR
31099: IFFALSE 30913
31101: GO 30910
31103: POP
31104: POP
// end else
31105: GO 31487
// for j = 1 to x do
31107: LD_ADDR_VAR 0 9
31111: PUSH
31112: DOUBLE
31113: LD_INT 1
31115: DEC
31116: ST_TO_ADDR
31117: LD_VAR 0 13
31121: PUSH
31122: FOR_TO
31123: IFFALSE 31485
// begin InitHc ;
31125: CALL_OW 19
// if not f then
31129: LD_VAR 0 12
31133: NOT
31134: IFFALSE 31223
// begin PrepareHuman ( false , i , skill ) ;
31136: LD_INT 0
31138: PPUSH
31139: LD_VAR 0 8
31143: PPUSH
31144: LD_VAR 0 4
31148: PPUSH
31149: CALL_OW 380
// un := CreateHuman ;
31153: LD_ADDR_VAR 0 14
31157: PUSH
31158: CALL_OW 44
31162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31163: LD_ADDR_VAR 0 7
31167: PUSH
31168: LD_VAR 0 7
31172: PPUSH
31173: LD_INT 1
31175: PPUSH
31176: LD_VAR 0 14
31180: PPUSH
31181: CALL_OW 2
31185: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31186: LD_VAR 0 14
31190: PPUSH
31191: LD_VAR 0 1
31195: PPUSH
31196: CALL_OW 250
31200: PPUSH
31201: LD_VAR 0 1
31205: PPUSH
31206: CALL_OW 251
31210: PPUSH
31211: LD_INT 10
31213: PPUSH
31214: LD_INT 0
31216: PPUSH
31217: CALL_OW 50
// continue ;
31221: GO 31122
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31223: LD_VAR 0 12
31227: PUSH
31228: LD_INT 1
31230: ARRAY
31231: PPUSH
31232: CALL_OW 313
31236: PUSH
31237: LD_VAR 0 12
31241: PUSH
31242: LD_INT 1
31244: ARRAY
31245: PPUSH
31246: CALL_OW 266
31250: PUSH
31251: LD_INT 32
31253: PUSH
31254: LD_INT 31
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: IN
31261: AND
31262: PUSH
31263: LD_VAR 0 12
31267: PUSH
31268: LD_INT 1
31270: ARRAY
31271: PPUSH
31272: CALL_OW 313
31276: PUSH
31277: LD_INT 6
31279: EQUAL
31280: OR
31281: IFFALSE 31301
// f := Delete ( f , 1 ) ;
31283: LD_ADDR_VAR 0 12
31287: PUSH
31288: LD_VAR 0 12
31292: PPUSH
31293: LD_INT 1
31295: PPUSH
31296: CALL_OW 3
31300: ST_TO_ADDR
// if not f then
31301: LD_VAR 0 12
31305: NOT
31306: IFFALSE 31324
// begin x := x + 2 ;
31308: LD_ADDR_VAR 0 13
31312: PUSH
31313: LD_VAR 0 13
31317: PUSH
31318: LD_INT 2
31320: PLUS
31321: ST_TO_ADDR
// continue ;
31322: GO 31122
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31324: LD_VAR 0 12
31328: PUSH
31329: LD_INT 1
31331: ARRAY
31332: PPUSH
31333: CALL_OW 266
31337: PUSH
31338: LD_INT 5
31340: EQUAL
31341: IFFALSE 31415
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31343: LD_VAR 0 12
31347: PUSH
31348: LD_INT 1
31350: ARRAY
31351: PPUSH
31352: CALL_OW 313
31356: PUSH
31357: LD_INT 3
31359: LESS
31360: IFFALSE 31396
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31362: LD_INT 0
31364: PPUSH
31365: LD_INT 5
31367: PUSH
31368: LD_INT 8
31370: PUSH
31371: LD_INT 9
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: PUSH
31379: LD_VAR 0 17
31383: ARRAY
31384: PPUSH
31385: LD_VAR 0 4
31389: PPUSH
31390: CALL_OW 380
31394: GO 31413
// PrepareHuman ( false , i , skill ) ;
31396: LD_INT 0
31398: PPUSH
31399: LD_VAR 0 8
31403: PPUSH
31404: LD_VAR 0 4
31408: PPUSH
31409: CALL_OW 380
// end else
31413: GO 31432
// PrepareHuman ( false , i , skill ) ;
31415: LD_INT 0
31417: PPUSH
31418: LD_VAR 0 8
31422: PPUSH
31423: LD_VAR 0 4
31427: PPUSH
31428: CALL_OW 380
// un := CreateHuman ;
31432: LD_ADDR_VAR 0 14
31436: PUSH
31437: CALL_OW 44
31441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31442: LD_ADDR_VAR 0 7
31446: PUSH
31447: LD_VAR 0 7
31451: PPUSH
31452: LD_INT 1
31454: PPUSH
31455: LD_VAR 0 14
31459: PPUSH
31460: CALL_OW 2
31464: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31465: LD_VAR 0 14
31469: PPUSH
31470: LD_VAR 0 12
31474: PUSH
31475: LD_INT 1
31477: ARRAY
31478: PPUSH
31479: CALL_OW 52
// end ;
31483: GO 31122
31485: POP
31486: POP
// end ;
31487: GO 30424
31489: POP
31490: POP
// result := result ^ buildings ;
31491: LD_ADDR_VAR 0 7
31495: PUSH
31496: LD_VAR 0 7
31500: PUSH
31501: LD_VAR 0 18
31505: ADD
31506: ST_TO_ADDR
// end else
31507: GO 31650
// begin for i = 1 to personel do
31509: LD_ADDR_VAR 0 8
31513: PUSH
31514: DOUBLE
31515: LD_INT 1
31517: DEC
31518: ST_TO_ADDR
31519: LD_VAR 0 6
31523: PUSH
31524: FOR_TO
31525: IFFALSE 31648
// begin if i > 4 then
31527: LD_VAR 0 8
31531: PUSH
31532: LD_INT 4
31534: GREATER
31535: IFFALSE 31539
// break ;
31537: GO 31648
// x := personel [ i ] ;
31539: LD_ADDR_VAR 0 13
31543: PUSH
31544: LD_VAR 0 6
31548: PUSH
31549: LD_VAR 0 8
31553: ARRAY
31554: ST_TO_ADDR
// if x = - 1 then
31555: LD_VAR 0 13
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: EQUAL
31564: IFFALSE 31568
// continue ;
31566: GO 31524
// PrepareHuman ( false , i , skill ) ;
31568: LD_INT 0
31570: PPUSH
31571: LD_VAR 0 8
31575: PPUSH
31576: LD_VAR 0 4
31580: PPUSH
31581: CALL_OW 380
// un := CreateHuman ;
31585: LD_ADDR_VAR 0 14
31589: PUSH
31590: CALL_OW 44
31594: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31595: LD_VAR 0 14
31599: PPUSH
31600: LD_VAR 0 1
31604: PPUSH
31605: CALL_OW 250
31609: PPUSH
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL_OW 251
31619: PPUSH
31620: LD_INT 10
31622: PPUSH
31623: LD_INT 0
31625: PPUSH
31626: CALL_OW 50
// result := result ^ un ;
31630: LD_ADDR_VAR 0 7
31634: PUSH
31635: LD_VAR 0 7
31639: PUSH
31640: LD_VAR 0 14
31644: ADD
31645: ST_TO_ADDR
// end ;
31646: GO 31524
31648: POP
31649: POP
// end ; end ;
31650: LD_VAR 0 7
31654: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
31665: PPUSH
31666: PPUSH
31667: PPUSH
31668: PPUSH
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
// result := false ;
31673: LD_ADDR_VAR 0 3
31677: PUSH
31678: LD_INT 0
31680: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31681: LD_VAR 0 1
31685: NOT
31686: PUSH
31687: LD_VAR 0 1
31691: PPUSH
31692: CALL_OW 266
31696: PUSH
31697: LD_INT 32
31699: PUSH
31700: LD_INT 33
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: IN
31707: NOT
31708: OR
31709: IFFALSE 31713
// exit ;
31711: GO 32849
// nat := GetNation ( tower ) ;
31713: LD_ADDR_VAR 0 12
31717: PUSH
31718: LD_VAR 0 1
31722: PPUSH
31723: CALL_OW 248
31727: ST_TO_ADDR
// side := GetSide ( tower ) ;
31728: LD_ADDR_VAR 0 16
31732: PUSH
31733: LD_VAR 0 1
31737: PPUSH
31738: CALL_OW 255
31742: ST_TO_ADDR
// x := GetX ( tower ) ;
31743: LD_ADDR_VAR 0 10
31747: PUSH
31748: LD_VAR 0 1
31752: PPUSH
31753: CALL_OW 250
31757: ST_TO_ADDR
// y := GetY ( tower ) ;
31758: LD_ADDR_VAR 0 11
31762: PUSH
31763: LD_VAR 0 1
31767: PPUSH
31768: CALL_OW 251
31772: ST_TO_ADDR
// if not x or not y then
31773: LD_VAR 0 10
31777: NOT
31778: PUSH
31779: LD_VAR 0 11
31783: NOT
31784: OR
31785: IFFALSE 31789
// exit ;
31787: GO 32849
// weapon := 0 ;
31789: LD_ADDR_VAR 0 18
31793: PUSH
31794: LD_INT 0
31796: ST_TO_ADDR
// fac_list := [ ] ;
31797: LD_ADDR_VAR 0 17
31801: PUSH
31802: EMPTY
31803: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31804: LD_ADDR_VAR 0 6
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL_OW 274
31818: PPUSH
31819: LD_VAR 0 2
31823: PPUSH
31824: CALL 29427 0 2
31828: PPUSH
31829: LD_INT 30
31831: PUSH
31832: LD_INT 3
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PPUSH
31839: CALL_OW 72
31843: ST_TO_ADDR
// if not factories then
31844: LD_VAR 0 6
31848: NOT
31849: IFFALSE 31853
// exit ;
31851: GO 32849
// for i in factories do
31853: LD_ADDR_VAR 0 8
31857: PUSH
31858: LD_VAR 0 6
31862: PUSH
31863: FOR_IN
31864: IFFALSE 31889
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31866: LD_ADDR_VAR 0 17
31870: PUSH
31871: LD_VAR 0 17
31875: PUSH
31876: LD_VAR 0 8
31880: PPUSH
31881: CALL_OW 478
31885: UNION
31886: ST_TO_ADDR
31887: GO 31863
31889: POP
31890: POP
// if not fac_list then
31891: LD_VAR 0 17
31895: NOT
31896: IFFALSE 31900
// exit ;
31898: GO 32849
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31900: LD_ADDR_VAR 0 5
31904: PUSH
31905: LD_INT 4
31907: PUSH
31908: LD_INT 5
31910: PUSH
31911: LD_INT 9
31913: PUSH
31914: LD_INT 10
31916: PUSH
31917: LD_INT 6
31919: PUSH
31920: LD_INT 7
31922: PUSH
31923: LD_INT 11
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 27
31937: PUSH
31938: LD_INT 28
31940: PUSH
31941: LD_INT 26
31943: PUSH
31944: LD_INT 30
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 43
31955: PUSH
31956: LD_INT 44
31958: PUSH
31959: LD_INT 46
31961: PUSH
31962: LD_INT 45
31964: PUSH
31965: LD_INT 47
31967: PUSH
31968: LD_INT 49
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: PUSH
31984: LD_VAR 0 12
31988: ARRAY
31989: ST_TO_ADDR
// for i in list do
31990: LD_ADDR_VAR 0 8
31994: PUSH
31995: LD_VAR 0 5
31999: PUSH
32000: FOR_IN
32001: IFFALSE 32034
// if not i in fac_list then
32003: LD_VAR 0 8
32007: PUSH
32008: LD_VAR 0 17
32012: IN
32013: NOT
32014: IFFALSE 32032
// list := list diff i ;
32016: LD_ADDR_VAR 0 5
32020: PUSH
32021: LD_VAR 0 5
32025: PUSH
32026: LD_VAR 0 8
32030: DIFF
32031: ST_TO_ADDR
32032: GO 32000
32034: POP
32035: POP
// if not list then
32036: LD_VAR 0 5
32040: NOT
32041: IFFALSE 32045
// exit ;
32043: GO 32849
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32045: LD_VAR 0 12
32049: PUSH
32050: LD_INT 3
32052: EQUAL
32053: PUSH
32054: LD_INT 49
32056: PUSH
32057: LD_VAR 0 5
32061: IN
32062: AND
32063: PUSH
32064: LD_INT 31
32066: PPUSH
32067: LD_VAR 0 16
32071: PPUSH
32072: CALL_OW 321
32076: PUSH
32077: LD_INT 2
32079: EQUAL
32080: AND
32081: IFFALSE 32141
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32083: LD_INT 22
32085: PUSH
32086: LD_VAR 0 16
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 35
32097: PUSH
32098: LD_INT 49
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 91
32107: PUSH
32108: LD_VAR 0 1
32112: PUSH
32113: LD_INT 10
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: LIST
32125: PPUSH
32126: CALL_OW 69
32130: NOT
32131: IFFALSE 32141
// weapon := ru_time_lapser ;
32133: LD_ADDR_VAR 0 18
32137: PUSH
32138: LD_INT 49
32140: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32141: LD_VAR 0 12
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: IN
32156: PUSH
32157: LD_INT 11
32159: PUSH
32160: LD_VAR 0 5
32164: IN
32165: PUSH
32166: LD_INT 30
32168: PUSH
32169: LD_VAR 0 5
32173: IN
32174: OR
32175: AND
32176: PUSH
32177: LD_INT 6
32179: PPUSH
32180: LD_VAR 0 16
32184: PPUSH
32185: CALL_OW 321
32189: PUSH
32190: LD_INT 2
32192: EQUAL
32193: AND
32194: IFFALSE 32359
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32196: LD_INT 22
32198: PUSH
32199: LD_VAR 0 16
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: LD_INT 35
32213: PUSH
32214: LD_INT 11
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 35
32223: PUSH
32224: LD_INT 30
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 91
32238: PUSH
32239: LD_VAR 0 1
32243: PUSH
32244: LD_INT 18
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: LIST
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: PPUSH
32257: CALL_OW 69
32261: NOT
32262: PUSH
32263: LD_INT 22
32265: PUSH
32266: LD_VAR 0 16
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 30
32280: PUSH
32281: LD_INT 32
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 30
32290: PUSH
32291: LD_INT 33
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 91
32305: PUSH
32306: LD_VAR 0 1
32310: PUSH
32311: LD_INT 12
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: PPUSH
32327: CALL_OW 69
32331: PUSH
32332: LD_INT 2
32334: GREATER
32335: AND
32336: IFFALSE 32359
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32338: LD_ADDR_VAR 0 18
32342: PUSH
32343: LD_INT 11
32345: PUSH
32346: LD_INT 30
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_VAR 0 12
32357: ARRAY
32358: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32359: LD_VAR 0 18
32363: NOT
32364: PUSH
32365: LD_INT 40
32367: PPUSH
32368: LD_VAR 0 16
32372: PPUSH
32373: CALL_OW 321
32377: PUSH
32378: LD_INT 2
32380: EQUAL
32381: AND
32382: PUSH
32383: LD_INT 7
32385: PUSH
32386: LD_VAR 0 5
32390: IN
32391: PUSH
32392: LD_INT 28
32394: PUSH
32395: LD_VAR 0 5
32399: IN
32400: OR
32401: PUSH
32402: LD_INT 45
32404: PUSH
32405: LD_VAR 0 5
32409: IN
32410: OR
32411: AND
32412: IFFALSE 32666
// begin hex := GetHexInfo ( x , y ) ;
32414: LD_ADDR_VAR 0 4
32418: PUSH
32419: LD_VAR 0 10
32423: PPUSH
32424: LD_VAR 0 11
32428: PPUSH
32429: CALL_OW 546
32433: ST_TO_ADDR
// if hex [ 1 ] then
32434: LD_VAR 0 4
32438: PUSH
32439: LD_INT 1
32441: ARRAY
32442: IFFALSE 32446
// exit ;
32444: GO 32849
// height := hex [ 2 ] ;
32446: LD_ADDR_VAR 0 15
32450: PUSH
32451: LD_VAR 0 4
32455: PUSH
32456: LD_INT 2
32458: ARRAY
32459: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32460: LD_ADDR_VAR 0 14
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: ST_TO_ADDR
// for i in tmp do
32483: LD_ADDR_VAR 0 8
32487: PUSH
32488: LD_VAR 0 14
32492: PUSH
32493: FOR_IN
32494: IFFALSE 32664
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32496: LD_ADDR_VAR 0 9
32500: PUSH
32501: LD_VAR 0 10
32505: PPUSH
32506: LD_VAR 0 8
32510: PPUSH
32511: LD_INT 5
32513: PPUSH
32514: CALL_OW 272
32518: PUSH
32519: LD_VAR 0 11
32523: PPUSH
32524: LD_VAR 0 8
32528: PPUSH
32529: LD_INT 5
32531: PPUSH
32532: CALL_OW 273
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32541: LD_VAR 0 9
32545: PUSH
32546: LD_INT 1
32548: ARRAY
32549: PPUSH
32550: LD_VAR 0 9
32554: PUSH
32555: LD_INT 2
32557: ARRAY
32558: PPUSH
32559: CALL_OW 488
32563: IFFALSE 32662
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32565: LD_ADDR_VAR 0 4
32569: PUSH
32570: LD_VAR 0 9
32574: PUSH
32575: LD_INT 1
32577: ARRAY
32578: PPUSH
32579: LD_VAR 0 9
32583: PUSH
32584: LD_INT 2
32586: ARRAY
32587: PPUSH
32588: CALL_OW 546
32592: ST_TO_ADDR
// if hex [ 1 ] then
32593: LD_VAR 0 4
32597: PUSH
32598: LD_INT 1
32600: ARRAY
32601: IFFALSE 32605
// continue ;
32603: GO 32493
// h := hex [ 2 ] ;
32605: LD_ADDR_VAR 0 13
32609: PUSH
32610: LD_VAR 0 4
32614: PUSH
32615: LD_INT 2
32617: ARRAY
32618: ST_TO_ADDR
// if h + 7 < height then
32619: LD_VAR 0 13
32623: PUSH
32624: LD_INT 7
32626: PLUS
32627: PUSH
32628: LD_VAR 0 15
32632: LESS
32633: IFFALSE 32662
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32635: LD_ADDR_VAR 0 18
32639: PUSH
32640: LD_INT 7
32642: PUSH
32643: LD_INT 28
32645: PUSH
32646: LD_INT 45
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: PUSH
32654: LD_VAR 0 12
32658: ARRAY
32659: ST_TO_ADDR
// break ;
32660: GO 32664
// end ; end ; end ;
32662: GO 32493
32664: POP
32665: POP
// end ; if not weapon then
32666: LD_VAR 0 18
32670: NOT
32671: IFFALSE 32731
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32673: LD_ADDR_VAR 0 5
32677: PUSH
32678: LD_VAR 0 5
32682: PUSH
32683: LD_INT 11
32685: PUSH
32686: LD_INT 30
32688: PUSH
32689: LD_INT 49
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: LIST
32696: DIFF
32697: ST_TO_ADDR
// if not list then
32698: LD_VAR 0 5
32702: NOT
32703: IFFALSE 32707
// exit ;
32705: GO 32849
// weapon := list [ rand ( 1 , list ) ] ;
32707: LD_ADDR_VAR 0 18
32711: PUSH
32712: LD_VAR 0 5
32716: PUSH
32717: LD_INT 1
32719: PPUSH
32720: LD_VAR 0 5
32724: PPUSH
32725: CALL_OW 12
32729: ARRAY
32730: ST_TO_ADDR
// end ; if weapon then
32731: LD_VAR 0 18
32735: IFFALSE 32849
// begin tmp := CostOfWeapon ( weapon ) ;
32737: LD_ADDR_VAR 0 14
32741: PUSH
32742: LD_VAR 0 18
32746: PPUSH
32747: CALL_OW 451
32751: ST_TO_ADDR
// j := GetBase ( tower ) ;
32752: LD_ADDR_VAR 0 9
32756: PUSH
32757: LD_VAR 0 1
32761: PPUSH
32762: CALL_OW 274
32766: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32767: LD_VAR 0 9
32771: PPUSH
32772: LD_INT 1
32774: PPUSH
32775: CALL_OW 275
32779: PUSH
32780: LD_VAR 0 14
32784: PUSH
32785: LD_INT 1
32787: ARRAY
32788: GREATEREQUAL
32789: PUSH
32790: LD_VAR 0 9
32794: PPUSH
32795: LD_INT 2
32797: PPUSH
32798: CALL_OW 275
32802: PUSH
32803: LD_VAR 0 14
32807: PUSH
32808: LD_INT 2
32810: ARRAY
32811: GREATEREQUAL
32812: AND
32813: PUSH
32814: LD_VAR 0 9
32818: PPUSH
32819: LD_INT 3
32821: PPUSH
32822: CALL_OW 275
32826: PUSH
32827: LD_VAR 0 14
32831: PUSH
32832: LD_INT 3
32834: ARRAY
32835: GREATEREQUAL
32836: AND
32837: IFFALSE 32849
// result := weapon ;
32839: LD_ADDR_VAR 0 3
32843: PUSH
32844: LD_VAR 0 18
32848: ST_TO_ADDR
// end ; end ;
32849: LD_VAR 0 3
32853: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32854: LD_INT 0
32856: PPUSH
32857: PPUSH
// result := true ;
32858: LD_ADDR_VAR 0 3
32862: PUSH
32863: LD_INT 1
32865: ST_TO_ADDR
// if array1 = array2 then
32866: LD_VAR 0 1
32870: PUSH
32871: LD_VAR 0 2
32875: EQUAL
32876: IFFALSE 32936
// begin for i = 1 to array1 do
32878: LD_ADDR_VAR 0 4
32882: PUSH
32883: DOUBLE
32884: LD_INT 1
32886: DEC
32887: ST_TO_ADDR
32888: LD_VAR 0 1
32892: PUSH
32893: FOR_TO
32894: IFFALSE 32932
// if array1 [ i ] <> array2 [ i ] then
32896: LD_VAR 0 1
32900: PUSH
32901: LD_VAR 0 4
32905: ARRAY
32906: PUSH
32907: LD_VAR 0 2
32911: PUSH
32912: LD_VAR 0 4
32916: ARRAY
32917: NONEQUAL
32918: IFFALSE 32930
// begin result := false ;
32920: LD_ADDR_VAR 0 3
32924: PUSH
32925: LD_INT 0
32927: ST_TO_ADDR
// break ;
32928: GO 32932
// end ;
32930: GO 32893
32932: POP
32933: POP
// end else
32934: GO 32944
// result := false ;
32936: LD_ADDR_VAR 0 3
32940: PUSH
32941: LD_INT 0
32943: ST_TO_ADDR
// end ;
32944: LD_VAR 0 3
32948: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32949: LD_INT 0
32951: PPUSH
32952: PPUSH
32953: PPUSH
// pom := GetBase ( fac ) ;
32954: LD_ADDR_VAR 0 5
32958: PUSH
32959: LD_VAR 0 1
32963: PPUSH
32964: CALL_OW 274
32968: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32969: LD_ADDR_VAR 0 4
32973: PUSH
32974: LD_VAR 0 2
32978: PUSH
32979: LD_INT 1
32981: ARRAY
32982: PPUSH
32983: LD_VAR 0 2
32987: PUSH
32988: LD_INT 2
32990: ARRAY
32991: PPUSH
32992: LD_VAR 0 2
32996: PUSH
32997: LD_INT 3
32999: ARRAY
33000: PPUSH
33001: LD_VAR 0 2
33005: PUSH
33006: LD_INT 4
33008: ARRAY
33009: PPUSH
33010: CALL_OW 449
33014: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33015: LD_ADDR_VAR 0 3
33019: PUSH
33020: LD_VAR 0 5
33024: PPUSH
33025: LD_INT 1
33027: PPUSH
33028: CALL_OW 275
33032: PUSH
33033: LD_VAR 0 4
33037: PUSH
33038: LD_INT 1
33040: ARRAY
33041: GREATEREQUAL
33042: PUSH
33043: LD_VAR 0 5
33047: PPUSH
33048: LD_INT 2
33050: PPUSH
33051: CALL_OW 275
33055: PUSH
33056: LD_VAR 0 4
33060: PUSH
33061: LD_INT 2
33063: ARRAY
33064: GREATEREQUAL
33065: AND
33066: PUSH
33067: LD_VAR 0 5
33071: PPUSH
33072: LD_INT 3
33074: PPUSH
33075: CALL_OW 275
33079: PUSH
33080: LD_VAR 0 4
33084: PUSH
33085: LD_INT 3
33087: ARRAY
33088: GREATEREQUAL
33089: AND
33090: ST_TO_ADDR
// end ;
33091: LD_VAR 0 3
33095: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33096: LD_INT 0
33098: PPUSH
33099: PPUSH
33100: PPUSH
33101: PPUSH
// pom := GetBase ( building ) ;
33102: LD_ADDR_VAR 0 3
33106: PUSH
33107: LD_VAR 0 1
33111: PPUSH
33112: CALL_OW 274
33116: ST_TO_ADDR
// if not pom then
33117: LD_VAR 0 3
33121: NOT
33122: IFFALSE 33126
// exit ;
33124: GO 33296
// btype := GetBType ( building ) ;
33126: LD_ADDR_VAR 0 5
33130: PUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 266
33140: ST_TO_ADDR
// if btype = b_armoury then
33141: LD_VAR 0 5
33145: PUSH
33146: LD_INT 4
33148: EQUAL
33149: IFFALSE 33159
// btype := b_barracks ;
33151: LD_ADDR_VAR 0 5
33155: PUSH
33156: LD_INT 5
33158: ST_TO_ADDR
// if btype = b_depot then
33159: LD_VAR 0 5
33163: PUSH
33164: LD_INT 0
33166: EQUAL
33167: IFFALSE 33177
// btype := b_warehouse ;
33169: LD_ADDR_VAR 0 5
33173: PUSH
33174: LD_INT 1
33176: ST_TO_ADDR
// if btype = b_workshop then
33177: LD_VAR 0 5
33181: PUSH
33182: LD_INT 2
33184: EQUAL
33185: IFFALSE 33195
// btype := b_factory ;
33187: LD_ADDR_VAR 0 5
33191: PUSH
33192: LD_INT 3
33194: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33195: LD_ADDR_VAR 0 4
33199: PUSH
33200: LD_VAR 0 5
33204: PPUSH
33205: LD_VAR 0 1
33209: PPUSH
33210: CALL_OW 248
33214: PPUSH
33215: CALL_OW 450
33219: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33220: LD_ADDR_VAR 0 2
33224: PUSH
33225: LD_VAR 0 3
33229: PPUSH
33230: LD_INT 1
33232: PPUSH
33233: CALL_OW 275
33237: PUSH
33238: LD_VAR 0 4
33242: PUSH
33243: LD_INT 1
33245: ARRAY
33246: GREATEREQUAL
33247: PUSH
33248: LD_VAR 0 3
33252: PPUSH
33253: LD_INT 2
33255: PPUSH
33256: CALL_OW 275
33260: PUSH
33261: LD_VAR 0 4
33265: PUSH
33266: LD_INT 2
33268: ARRAY
33269: GREATEREQUAL
33270: AND
33271: PUSH
33272: LD_VAR 0 3
33276: PPUSH
33277: LD_INT 3
33279: PPUSH
33280: CALL_OW 275
33284: PUSH
33285: LD_VAR 0 4
33289: PUSH
33290: LD_INT 3
33292: ARRAY
33293: GREATEREQUAL
33294: AND
33295: ST_TO_ADDR
// end ;
33296: LD_VAR 0 2
33300: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33301: LD_INT 0
33303: PPUSH
33304: PPUSH
33305: PPUSH
// pom := GetBase ( building ) ;
33306: LD_ADDR_VAR 0 4
33310: PUSH
33311: LD_VAR 0 1
33315: PPUSH
33316: CALL_OW 274
33320: ST_TO_ADDR
// if not pom then
33321: LD_VAR 0 4
33325: NOT
33326: IFFALSE 33330
// exit ;
33328: GO 33431
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33330: LD_ADDR_VAR 0 5
33334: PUSH
33335: LD_VAR 0 2
33339: PPUSH
33340: LD_VAR 0 1
33344: PPUSH
33345: CALL_OW 248
33349: PPUSH
33350: CALL_OW 450
33354: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_VAR 0 4
33364: PPUSH
33365: LD_INT 1
33367: PPUSH
33368: CALL_OW 275
33372: PUSH
33373: LD_VAR 0 5
33377: PUSH
33378: LD_INT 1
33380: ARRAY
33381: GREATEREQUAL
33382: PUSH
33383: LD_VAR 0 4
33387: PPUSH
33388: LD_INT 2
33390: PPUSH
33391: CALL_OW 275
33395: PUSH
33396: LD_VAR 0 5
33400: PUSH
33401: LD_INT 2
33403: ARRAY
33404: GREATEREQUAL
33405: AND
33406: PUSH
33407: LD_VAR 0 4
33411: PPUSH
33412: LD_INT 3
33414: PPUSH
33415: CALL_OW 275
33419: PUSH
33420: LD_VAR 0 5
33424: PUSH
33425: LD_INT 3
33427: ARRAY
33428: GREATEREQUAL
33429: AND
33430: ST_TO_ADDR
// end ;
33431: LD_VAR 0 3
33435: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33436: LD_INT 0
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
33442: PPUSH
33443: PPUSH
33444: PPUSH
33445: PPUSH
33446: PPUSH
33447: PPUSH
// result := false ;
33448: LD_ADDR_VAR 0 6
33452: PUSH
33453: LD_INT 0
33455: ST_TO_ADDR
// if not base or not btype or not x or not y then
33456: LD_VAR 0 1
33460: NOT
33461: PUSH
33462: LD_VAR 0 2
33466: NOT
33467: OR
33468: PUSH
33469: LD_VAR 0 3
33473: NOT
33474: OR
33475: PUSH
33476: LD_VAR 0 4
33480: NOT
33481: OR
33482: IFFALSE 33486
// exit ;
33484: GO 34095
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33486: LD_ADDR_VAR 0 12
33490: PUSH
33491: LD_VAR 0 2
33495: PPUSH
33496: LD_VAR 0 3
33500: PPUSH
33501: LD_VAR 0 4
33505: PPUSH
33506: LD_VAR 0 5
33510: PPUSH
33511: LD_VAR 0 1
33515: PUSH
33516: LD_INT 1
33518: ARRAY
33519: PPUSH
33520: CALL_OW 248
33524: PPUSH
33525: LD_INT 0
33527: PPUSH
33528: CALL 34932 0 6
33532: ST_TO_ADDR
// if not hexes then
33533: LD_VAR 0 12
33537: NOT
33538: IFFALSE 33542
// exit ;
33540: GO 34095
// for i = 1 to hexes do
33542: LD_ADDR_VAR 0 7
33546: PUSH
33547: DOUBLE
33548: LD_INT 1
33550: DEC
33551: ST_TO_ADDR
33552: LD_VAR 0 12
33556: PUSH
33557: FOR_TO
33558: IFFALSE 34093
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33560: LD_ADDR_VAR 0 11
33564: PUSH
33565: LD_VAR 0 12
33569: PUSH
33570: LD_VAR 0 7
33574: ARRAY
33575: PUSH
33576: LD_INT 1
33578: ARRAY
33579: PPUSH
33580: LD_VAR 0 12
33584: PUSH
33585: LD_VAR 0 7
33589: ARRAY
33590: PUSH
33591: LD_INT 2
33593: ARRAY
33594: PPUSH
33595: CALL_OW 428
33599: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33600: LD_VAR 0 12
33604: PUSH
33605: LD_VAR 0 7
33609: ARRAY
33610: PUSH
33611: LD_INT 1
33613: ARRAY
33614: PPUSH
33615: LD_VAR 0 12
33619: PUSH
33620: LD_VAR 0 7
33624: ARRAY
33625: PUSH
33626: LD_INT 2
33628: ARRAY
33629: PPUSH
33630: CALL_OW 351
33634: PUSH
33635: LD_VAR 0 12
33639: PUSH
33640: LD_VAR 0 7
33644: ARRAY
33645: PUSH
33646: LD_INT 1
33648: ARRAY
33649: PPUSH
33650: LD_VAR 0 12
33654: PUSH
33655: LD_VAR 0 7
33659: ARRAY
33660: PUSH
33661: LD_INT 2
33663: ARRAY
33664: PPUSH
33665: CALL_OW 488
33669: NOT
33670: OR
33671: PUSH
33672: LD_VAR 0 11
33676: PPUSH
33677: CALL_OW 247
33681: PUSH
33682: LD_INT 3
33684: EQUAL
33685: OR
33686: IFFALSE 33692
// exit ;
33688: POP
33689: POP
33690: GO 34095
// if not tmp or not tmp in base then
33692: LD_VAR 0 11
33696: NOT
33697: PUSH
33698: LD_VAR 0 11
33702: PUSH
33703: LD_VAR 0 1
33707: IN
33708: NOT
33709: OR
33710: IFFALSE 33714
// continue ;
33712: GO 33557
// result := true ;
33714: LD_ADDR_VAR 0 6
33718: PUSH
33719: LD_INT 1
33721: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33722: LD_ADDR_VAR 0 15
33726: PUSH
33727: LD_VAR 0 1
33731: PPUSH
33732: LD_INT 22
33734: PUSH
33735: LD_VAR 0 11
33739: PPUSH
33740: CALL_OW 255
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: LD_INT 30
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 30
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: LIST
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PPUSH
33781: CALL_OW 72
33785: ST_TO_ADDR
// if dep then
33786: LD_VAR 0 15
33790: IFFALSE 33926
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33792: LD_ADDR_VAR 0 14
33796: PUSH
33797: LD_VAR 0 15
33801: PUSH
33802: LD_INT 1
33804: ARRAY
33805: PPUSH
33806: CALL_OW 250
33810: PPUSH
33811: LD_VAR 0 15
33815: PUSH
33816: LD_INT 1
33818: ARRAY
33819: PPUSH
33820: CALL_OW 254
33824: PPUSH
33825: LD_INT 5
33827: PPUSH
33828: CALL_OW 272
33832: PUSH
33833: LD_VAR 0 15
33837: PUSH
33838: LD_INT 1
33840: ARRAY
33841: PPUSH
33842: CALL_OW 251
33846: PPUSH
33847: LD_VAR 0 15
33851: PUSH
33852: LD_INT 1
33854: ARRAY
33855: PPUSH
33856: CALL_OW 254
33860: PPUSH
33861: LD_INT 5
33863: PPUSH
33864: CALL_OW 273
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33873: LD_VAR 0 14
33877: PUSH
33878: LD_INT 1
33880: ARRAY
33881: PPUSH
33882: LD_VAR 0 14
33886: PUSH
33887: LD_INT 2
33889: ARRAY
33890: PPUSH
33891: CALL_OW 488
33895: IFFALSE 33926
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33897: LD_VAR 0 11
33901: PPUSH
33902: LD_VAR 0 14
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: PPUSH
33911: LD_VAR 0 14
33915: PUSH
33916: LD_INT 2
33918: ARRAY
33919: PPUSH
33920: CALL_OW 111
// continue ;
33924: GO 33557
// end ; end ; r := GetDir ( tmp ) ;
33926: LD_ADDR_VAR 0 13
33930: PUSH
33931: LD_VAR 0 11
33935: PPUSH
33936: CALL_OW 254
33940: ST_TO_ADDR
// if r = 5 then
33941: LD_VAR 0 13
33945: PUSH
33946: LD_INT 5
33948: EQUAL
33949: IFFALSE 33959
// r := 0 ;
33951: LD_ADDR_VAR 0 13
33955: PUSH
33956: LD_INT 0
33958: ST_TO_ADDR
// for j = r to 5 do
33959: LD_ADDR_VAR 0 8
33963: PUSH
33964: DOUBLE
33965: LD_VAR 0 13
33969: DEC
33970: ST_TO_ADDR
33971: LD_INT 5
33973: PUSH
33974: FOR_TO
33975: IFFALSE 34089
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33977: LD_ADDR_VAR 0 9
33981: PUSH
33982: LD_VAR 0 11
33986: PPUSH
33987: CALL_OW 250
33991: PPUSH
33992: LD_VAR 0 8
33996: PPUSH
33997: LD_INT 2
33999: PPUSH
34000: CALL_OW 272
34004: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34005: LD_ADDR_VAR 0 10
34009: PUSH
34010: LD_VAR 0 11
34014: PPUSH
34015: CALL_OW 251
34019: PPUSH
34020: LD_VAR 0 8
34024: PPUSH
34025: LD_INT 2
34027: PPUSH
34028: CALL_OW 273
34032: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34033: LD_VAR 0 9
34037: PPUSH
34038: LD_VAR 0 10
34042: PPUSH
34043: CALL_OW 488
34047: PUSH
34048: LD_VAR 0 9
34052: PPUSH
34053: LD_VAR 0 10
34057: PPUSH
34058: CALL_OW 428
34062: NOT
34063: AND
34064: IFFALSE 34087
// begin ComMoveXY ( tmp , _x , _y ) ;
34066: LD_VAR 0 11
34070: PPUSH
34071: LD_VAR 0 9
34075: PPUSH
34076: LD_VAR 0 10
34080: PPUSH
34081: CALL_OW 111
// break ;
34085: GO 34089
// end ; end ;
34087: GO 33974
34089: POP
34090: POP
// end ;
34091: GO 33557
34093: POP
34094: POP
// end ;
34095: LD_VAR 0 6
34099: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34100: LD_INT 0
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
34107: PPUSH
34108: PPUSH
34109: PPUSH
34110: PPUSH
34111: PPUSH
// result := false ;
34112: LD_ADDR_VAR 0 6
34116: PUSH
34117: LD_INT 0
34119: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34120: LD_VAR 0 1
34124: NOT
34125: PUSH
34126: LD_VAR 0 1
34130: PPUSH
34131: CALL_OW 266
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: IN
34146: NOT
34147: OR
34148: PUSH
34149: LD_VAR 0 2
34153: NOT
34154: OR
34155: PUSH
34156: LD_VAR 0 5
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: LD_INT 4
34175: PUSH
34176: LD_INT 5
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: IN
34187: NOT
34188: OR
34189: PUSH
34190: LD_VAR 0 3
34194: PPUSH
34195: LD_VAR 0 4
34199: PPUSH
34200: CALL_OW 488
34204: NOT
34205: OR
34206: IFFALSE 34210
// exit ;
34208: GO 34927
// pom := GetBase ( depot ) ;
34210: LD_ADDR_VAR 0 10
34214: PUSH
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 274
34224: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34225: LD_ADDR_VAR 0 11
34229: PUSH
34230: LD_VAR 0 2
34234: PPUSH
34235: LD_VAR 0 1
34239: PPUSH
34240: CALL_OW 248
34244: PPUSH
34245: CALL_OW 450
34249: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34250: LD_VAR 0 10
34254: PPUSH
34255: LD_INT 1
34257: PPUSH
34258: CALL_OW 275
34262: PUSH
34263: LD_VAR 0 11
34267: PUSH
34268: LD_INT 1
34270: ARRAY
34271: GREATEREQUAL
34272: PUSH
34273: LD_VAR 0 10
34277: PPUSH
34278: LD_INT 2
34280: PPUSH
34281: CALL_OW 275
34285: PUSH
34286: LD_VAR 0 11
34290: PUSH
34291: LD_INT 2
34293: ARRAY
34294: GREATEREQUAL
34295: AND
34296: PUSH
34297: LD_VAR 0 10
34301: PPUSH
34302: LD_INT 3
34304: PPUSH
34305: CALL_OW 275
34309: PUSH
34310: LD_VAR 0 11
34314: PUSH
34315: LD_INT 3
34317: ARRAY
34318: GREATEREQUAL
34319: AND
34320: NOT
34321: IFFALSE 34325
// exit ;
34323: GO 34927
// if GetBType ( depot ) = b_depot then
34325: LD_VAR 0 1
34329: PPUSH
34330: CALL_OW 266
34334: PUSH
34335: LD_INT 0
34337: EQUAL
34338: IFFALSE 34350
// dist := 28 else
34340: LD_ADDR_VAR 0 14
34344: PUSH
34345: LD_INT 28
34347: ST_TO_ADDR
34348: GO 34358
// dist := 36 ;
34350: LD_ADDR_VAR 0 14
34354: PUSH
34355: LD_INT 36
34357: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34358: LD_VAR 0 1
34362: PPUSH
34363: LD_VAR 0 3
34367: PPUSH
34368: LD_VAR 0 4
34372: PPUSH
34373: CALL_OW 297
34377: PUSH
34378: LD_VAR 0 14
34382: GREATER
34383: IFFALSE 34387
// exit ;
34385: GO 34927
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34387: LD_ADDR_VAR 0 12
34391: PUSH
34392: LD_VAR 0 2
34396: PPUSH
34397: LD_VAR 0 3
34401: PPUSH
34402: LD_VAR 0 4
34406: PPUSH
34407: LD_VAR 0 5
34411: PPUSH
34412: LD_VAR 0 1
34416: PPUSH
34417: CALL_OW 248
34421: PPUSH
34422: LD_INT 0
34424: PPUSH
34425: CALL 34932 0 6
34429: ST_TO_ADDR
// if not hexes then
34430: LD_VAR 0 12
34434: NOT
34435: IFFALSE 34439
// exit ;
34437: GO 34927
// hex := GetHexInfo ( x , y ) ;
34439: LD_ADDR_VAR 0 15
34443: PUSH
34444: LD_VAR 0 3
34448: PPUSH
34449: LD_VAR 0 4
34453: PPUSH
34454: CALL_OW 546
34458: ST_TO_ADDR
// if hex [ 1 ] then
34459: LD_VAR 0 15
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: IFFALSE 34471
// exit ;
34469: GO 34927
// height := hex [ 2 ] ;
34471: LD_ADDR_VAR 0 13
34475: PUSH
34476: LD_VAR 0 15
34480: PUSH
34481: LD_INT 2
34483: ARRAY
34484: ST_TO_ADDR
// for i = 1 to hexes do
34485: LD_ADDR_VAR 0 7
34489: PUSH
34490: DOUBLE
34491: LD_INT 1
34493: DEC
34494: ST_TO_ADDR
34495: LD_VAR 0 12
34499: PUSH
34500: FOR_TO
34501: IFFALSE 34831
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34503: LD_VAR 0 12
34507: PUSH
34508: LD_VAR 0 7
34512: ARRAY
34513: PUSH
34514: LD_INT 1
34516: ARRAY
34517: PPUSH
34518: LD_VAR 0 12
34522: PUSH
34523: LD_VAR 0 7
34527: ARRAY
34528: PUSH
34529: LD_INT 2
34531: ARRAY
34532: PPUSH
34533: CALL_OW 488
34537: NOT
34538: PUSH
34539: LD_VAR 0 12
34543: PUSH
34544: LD_VAR 0 7
34548: ARRAY
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: PPUSH
34554: LD_VAR 0 12
34558: PUSH
34559: LD_VAR 0 7
34563: ARRAY
34564: PUSH
34565: LD_INT 2
34567: ARRAY
34568: PPUSH
34569: CALL_OW 428
34573: PUSH
34574: LD_INT 0
34576: GREATER
34577: OR
34578: PUSH
34579: LD_VAR 0 12
34583: PUSH
34584: LD_VAR 0 7
34588: ARRAY
34589: PUSH
34590: LD_INT 1
34592: ARRAY
34593: PPUSH
34594: LD_VAR 0 12
34598: PUSH
34599: LD_VAR 0 7
34603: ARRAY
34604: PUSH
34605: LD_INT 2
34607: ARRAY
34608: PPUSH
34609: CALL_OW 351
34613: OR
34614: IFFALSE 34620
// exit ;
34616: POP
34617: POP
34618: GO 34927
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34620: LD_ADDR_VAR 0 8
34624: PUSH
34625: LD_VAR 0 12
34629: PUSH
34630: LD_VAR 0 7
34634: ARRAY
34635: PUSH
34636: LD_INT 1
34638: ARRAY
34639: PPUSH
34640: LD_VAR 0 12
34644: PUSH
34645: LD_VAR 0 7
34649: ARRAY
34650: PUSH
34651: LD_INT 2
34653: ARRAY
34654: PPUSH
34655: CALL_OW 546
34659: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34660: LD_VAR 0 8
34664: PUSH
34665: LD_INT 1
34667: ARRAY
34668: PUSH
34669: LD_VAR 0 8
34673: PUSH
34674: LD_INT 2
34676: ARRAY
34677: PUSH
34678: LD_VAR 0 13
34682: PUSH
34683: LD_INT 2
34685: PLUS
34686: GREATER
34687: OR
34688: PUSH
34689: LD_VAR 0 8
34693: PUSH
34694: LD_INT 2
34696: ARRAY
34697: PUSH
34698: LD_VAR 0 13
34702: PUSH
34703: LD_INT 2
34705: MINUS
34706: LESS
34707: OR
34708: PUSH
34709: LD_VAR 0 8
34713: PUSH
34714: LD_INT 3
34716: ARRAY
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 8
34723: PUSH
34724: LD_INT 9
34726: PUSH
34727: LD_INT 10
34729: PUSH
34730: LD_INT 11
34732: PUSH
34733: LD_INT 12
34735: PUSH
34736: LD_INT 13
34738: PUSH
34739: LD_INT 16
34741: PUSH
34742: LD_INT 17
34744: PUSH
34745: LD_INT 18
34747: PUSH
34748: LD_INT 19
34750: PUSH
34751: LD_INT 20
34753: PUSH
34754: LD_INT 21
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: IN
34772: NOT
34773: OR
34774: PUSH
34775: LD_VAR 0 8
34779: PUSH
34780: LD_INT 5
34782: ARRAY
34783: NOT
34784: OR
34785: PUSH
34786: LD_VAR 0 8
34790: PUSH
34791: LD_INT 6
34793: ARRAY
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: LD_INT 7
34803: PUSH
34804: LD_INT 9
34806: PUSH
34807: LD_INT 10
34809: PUSH
34810: LD_INT 11
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: IN
34821: NOT
34822: OR
34823: IFFALSE 34829
// exit ;
34825: POP
34826: POP
34827: GO 34927
// end ;
34829: GO 34500
34831: POP
34832: POP
// side := GetSide ( depot ) ;
34833: LD_ADDR_VAR 0 9
34837: PUSH
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL_OW 255
34847: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34848: LD_VAR 0 9
34852: PPUSH
34853: LD_VAR 0 3
34857: PPUSH
34858: LD_VAR 0 4
34862: PPUSH
34863: LD_INT 20
34865: PPUSH
34866: CALL 27581 0 4
34870: PUSH
34871: LD_INT 4
34873: ARRAY
34874: IFFALSE 34878
// exit ;
34876: GO 34927
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34878: LD_VAR 0 2
34882: PUSH
34883: LD_INT 29
34885: PUSH
34886: LD_INT 30
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: IN
34893: PUSH
34894: LD_VAR 0 3
34898: PPUSH
34899: LD_VAR 0 4
34903: PPUSH
34904: LD_VAR 0 9
34908: PPUSH
34909: CALL_OW 440
34913: NOT
34914: AND
34915: IFFALSE 34919
// exit ;
34917: GO 34927
// result := true ;
34919: LD_ADDR_VAR 0 6
34923: PUSH
34924: LD_INT 1
34926: ST_TO_ADDR
// end ;
34927: LD_VAR 0 6
34931: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
// result = [ ] ;
34992: LD_ADDR_VAR 0 7
34996: PUSH
34997: EMPTY
34998: ST_TO_ADDR
// temp_list = [ ] ;
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: EMPTY
35005: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35006: LD_VAR 0 4
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: LD_INT 4
35025: PUSH
35026: LD_INT 5
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: IN
35037: NOT
35038: PUSH
35039: LD_VAR 0 1
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: IN
35054: PUSH
35055: LD_VAR 0 5
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 2
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: IN
35074: NOT
35075: AND
35076: OR
35077: IFFALSE 35081
// exit ;
35079: GO 53472
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35081: LD_VAR 0 1
35085: PUSH
35086: LD_INT 6
35088: PUSH
35089: LD_INT 7
35091: PUSH
35092: LD_INT 8
35094: PUSH
35095: LD_INT 13
35097: PUSH
35098: LD_INT 12
35100: PUSH
35101: LD_INT 15
35103: PUSH
35104: LD_INT 11
35106: PUSH
35107: LD_INT 14
35109: PUSH
35110: LD_INT 10
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: IN
35124: IFFALSE 35134
// btype = b_lab ;
35126: LD_ADDR_VAR 0 1
35130: PUSH
35131: LD_INT 6
35133: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35134: LD_VAR 0 6
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: IN
35153: NOT
35154: PUSH
35155: LD_VAR 0 1
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: LD_INT 6
35174: PUSH
35175: LD_INT 36
35177: PUSH
35178: LD_INT 4
35180: PUSH
35181: LD_INT 5
35183: PUSH
35184: LD_INT 31
35186: PUSH
35187: LD_INT 32
35189: PUSH
35190: LD_INT 33
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: IN
35206: NOT
35207: PUSH
35208: LD_VAR 0 6
35212: PUSH
35213: LD_INT 1
35215: EQUAL
35216: AND
35217: OR
35218: PUSH
35219: LD_VAR 0 1
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: LD_INT 3
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: IN
35234: NOT
35235: PUSH
35236: LD_VAR 0 6
35240: PUSH
35241: LD_INT 2
35243: EQUAL
35244: AND
35245: OR
35246: IFFALSE 35256
// mode = 0 ;
35248: LD_ADDR_VAR 0 6
35252: PUSH
35253: LD_INT 0
35255: ST_TO_ADDR
// case mode of 0 :
35256: LD_VAR 0 6
35260: PUSH
35261: LD_INT 0
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 46722
35269: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35270: LD_ADDR_VAR 0 11
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 3
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 3
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35463: LD_ADDR_VAR 0 12
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 0
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 3
35620: NEG
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 3
35631: NEG
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35659: LD_ADDR_VAR 0 13
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: LD_INT 2
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: LD_INT 2
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 3
35818: NEG
35819: PUSH
35820: LD_INT 2
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 3
35830: NEG
35831: PUSH
35832: LD_INT 3
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35858: LD_ADDR_VAR 0 14
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: LD_INT 3
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 3
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 2
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36054: LD_ADDR_VAR 0 15
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 3
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 3
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36247: LD_ADDR_VAR 0 16
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 2
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 3
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36440: LD_ADDR_VAR 0 17
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: LD_INT 2
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 2
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36670: LD_ADDR_VAR 0 18
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 2
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: NEG
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36900: LD_ADDR_VAR 0 19
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 2
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37130: LD_ADDR_VAR 0 20
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37360: LD_ADDR_VAR 0 21
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 2
37559: NEG
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37590: LD_ADDR_VAR 0 22
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37820: LD_ADDR_VAR 0 23
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38100: LD_ADDR_VAR 0 24
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 2
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38376: LD_ADDR_VAR 0 25
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38650: LD_ADDR_VAR 0 26
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: NEG
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38926: LD_ADDR_VAR 0 27
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: NEG
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39206: LD_ADDR_VAR 0 28
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: LD_INT 3
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 3
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: NEG
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39488: LD_ADDR_VAR 0 29
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 2
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: LD_INT 3
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 3
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 3
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 3
39732: NEG
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39767: LD_ADDR_VAR 0 30
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: LD_INT 3
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 3
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 3
40010: NEG
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40045: LD_ADDR_VAR 0 31
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: LD_INT 3
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 3
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 3
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40323: LD_ADDR_VAR 0 32
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 1
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 3
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: LD_INT 3
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 3
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40601: LD_ADDR_VAR 0 33
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 3
40845: NEG
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40880: LD_ADDR_VAR 0 34
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 3
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 3
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41160: LD_ADDR_VAR 0 35
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41272: LD_ADDR_VAR 0 36
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41384: LD_ADDR_VAR 0 37
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41496: LD_ADDR_VAR 0 38
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41608: LD_ADDR_VAR 0 39
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41720: LD_ADDR_VAR 0 40
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41832: LD_ADDR_VAR 0 41
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 3
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: LD_INT 3
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 3
42106: NEG
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 3
42129: NEG
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 3
42141: NEG
42142: PUSH
42143: LD_INT 3
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42182: LD_ADDR_VAR 0 42
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: LD_INT 3
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 3
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 3
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 3
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 3
42479: NEG
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 3
42491: NEG
42492: PUSH
42493: LD_INT 3
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42532: LD_ADDR_VAR 0 43
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 3
42828: NEG
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42880: LD_ADDR_VAR 0 44
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 3
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 3
43154: NEG
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: NEG
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43230: LD_ADDR_VAR 0 45
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 3
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 3
43527: NEG
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: LD_INT 3
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43580: LD_ADDR_VAR 0 46
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 3
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: NEG
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43928: LD_ADDR_VAR 0 47
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44079: LD_ADDR_VAR 0 48
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44226: LD_ADDR_VAR 0 49
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44370: LD_ADDR_VAR 0 50
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44514: LD_ADDR_VAR 0 51
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44661: LD_ADDR_VAR 0 52
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44812: LD_ADDR_VAR 0 53
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45042: LD_ADDR_VAR 0 54
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45272: LD_ADDR_VAR 0 55
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45502: LD_ADDR_VAR 0 56
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45732: LD_ADDR_VAR 0 57
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45962: LD_ADDR_VAR 0 58
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46192: LD_ADDR_VAR 0 59
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46280: LD_ADDR_VAR 0 60
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46368: LD_ADDR_VAR 0 61
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46456: LD_ADDR_VAR 0 62
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46544: LD_ADDR_VAR 0 63
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46632: LD_ADDR_VAR 0 64
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// end ; 1 :
46720: GO 52617
46722: LD_INT 1
46724: DOUBLE
46725: EQUAL
46726: IFTRUE 46730
46728: GO 49353
46730: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46731: LD_ADDR_VAR 0 11
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46775: LD_ADDR_VAR 0 12
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46816: LD_ADDR_VAR 0 13
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46856: LD_ADDR_VAR 0 14
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 3
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46897: LD_ADDR_VAR 0 15
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46941: LD_ADDR_VAR 0 16
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: NEG
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46987: LD_ADDR_VAR 0 17
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47031: LD_ADDR_VAR 0 18
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47072: LD_ADDR_VAR 0 19
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47112: LD_ADDR_VAR 0 20
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 3
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47153: LD_ADDR_VAR 0 21
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47197: LD_ADDR_VAR 0 22
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47243: LD_ADDR_VAR 0 23
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 3
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 4
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47287: LD_ADDR_VAR 0 24
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 4
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47328: LD_ADDR_VAR 0 25
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 4
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: PUSH
47356: LD_INT 4
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47368: LD_ADDR_VAR 0 26
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 4
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47409: LD_ADDR_VAR 0 27
47413: PUSH
47414: LD_INT 3
47416: NEG
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 4
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47453: LD_ADDR_VAR 0 28
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: LD_INT 4
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 4
47484: NEG
47485: PUSH
47486: LD_INT 3
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47499: LD_ADDR_VAR 0 29
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 3
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 3
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 4
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 4
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 3
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 5
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 5
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 4
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 6
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 6
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 5
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47654: LD_ADDR_VAR 0 30
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 3
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 3
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 4
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 4
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 5
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 5
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 5
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 6
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 6
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47797: LD_ADDR_VAR 0 31
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 3
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 4
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 4
47844: PUSH
47845: LD_INT 4
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: LD_INT 4
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 5
47864: PUSH
47865: LD_INT 4
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 5
47874: PUSH
47875: LD_INT 5
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 4
47884: PUSH
47885: LD_INT 5
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 6
47894: PUSH
47895: LD_INT 5
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 6
47904: PUSH
47905: LD_INT 6
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: LD_INT 6
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47936: LD_ADDR_VAR 0 32
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 4
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 5
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 5
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: LD_INT 4
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 6
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 6
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 5
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48079: LD_ADDR_VAR 0 33
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 3
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 4
48131: NEG
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 4
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 4
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 5
48165: NEG
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 5
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 5
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 6
48199: NEG
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 6
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48234: LD_ADDR_VAR 0 34
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: LD_INT 3
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 3
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 3
48265: NEG
48266: PUSH
48267: LD_INT 3
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 3
48277: NEG
48278: PUSH
48279: LD_INT 4
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 4
48289: NEG
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 4
48301: NEG
48302: PUSH
48303: LD_INT 4
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 4
48313: NEG
48314: PUSH
48315: LD_INT 5
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 5
48325: NEG
48326: PUSH
48327: LD_INT 4
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 5
48337: NEG
48338: PUSH
48339: LD_INT 5
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 5
48349: NEG
48350: PUSH
48351: LD_INT 6
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 6
48361: NEG
48362: PUSH
48363: LD_INT 5
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 6
48373: NEG
48374: PUSH
48375: LD_INT 6
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48397: LD_ADDR_VAR 0 41
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 3
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48441: LD_ADDR_VAR 0 42
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 3
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48482: LD_ADDR_VAR 0 43
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48522: LD_ADDR_VAR 0 44
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48563: LD_ADDR_VAR 0 45
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 3
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48607: LD_ADDR_VAR 0 46
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48653: LD_ADDR_VAR 0 47
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48686: LD_ADDR_VAR 0 48
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48717: LD_ADDR_VAR 0 49
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48746: LD_ADDR_VAR 0 50
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48775: LD_ADDR_VAR 0 51
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48806: LD_ADDR_VAR 0 52
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48839: LD_ADDR_VAR 0 53
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 3
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48883: LD_ADDR_VAR 0 54
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48924: LD_ADDR_VAR 0 55
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 3
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48964: LD_ADDR_VAR 0 56
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 3
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 3
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49005: LD_ADDR_VAR 0 57
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 3
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: LIST
49048: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49049: LD_ADDR_VAR 0 58
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: NEG
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 3
49080: NEG
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49095: LD_ADDR_VAR 0 59
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49139: LD_ADDR_VAR 0 60
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49180: LD_ADDR_VAR 0 61
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49220: LD_ADDR_VAR 0 62
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49261: LD_ADDR_VAR 0 63
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49305: LD_ADDR_VAR 0 64
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// end ; 2 :
49351: GO 52617
49353: LD_INT 2
49355: DOUBLE
49356: EQUAL
49357: IFTRUE 49361
49359: GO 52616
49361: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49362: LD_ADDR_VAR 0 29
49366: PUSH
49367: LD_INT 4
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 4
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 5
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 5
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 4
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 5
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: LD_INT 3
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 4
49482: PUSH
49483: LD_INT 3
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 4
49492: PUSH
49493: LD_INT 4
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: LD_INT 4
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 4
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 4
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 4
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 4
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 5
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 5
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 4
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 3
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 5
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 3
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 4
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 4
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 4
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 4
49747: NEG
49748: PUSH
49749: LD_INT 4
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 4
49759: NEG
49760: PUSH
49761: LD_INT 5
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 3
49771: NEG
49772: PUSH
49773: LD_INT 4
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 3
49783: NEG
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 4
49795: NEG
49796: PUSH
49797: LD_INT 3
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 5
49807: NEG
49808: PUSH
49809: LD_INT 4
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 5
49819: NEG
49820: PUSH
49821: LD_INT 5
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: LD_INT 5
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 5
49843: NEG
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49900: LD_ADDR_VAR 0 30
49904: PUSH
49905: LD_INT 4
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 4
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 5
49927: PUSH
49928: LD_INT 4
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 5
49937: PUSH
49938: LD_INT 5
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 4
49947: PUSH
49948: LD_INT 5
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: LD_INT 4
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 3
49987: PUSH
49988: LD_INT 5
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 3
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: LD_INT 4
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 4
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 4
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 4
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 4
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 5
50146: NEG
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 5
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 5
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: LD_INT 3
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: LD_INT 4
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: LD_INT 3
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 4
50252: NEG
50253: PUSH
50254: LD_INT 3
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 4
50264: NEG
50265: PUSH
50266: LD_INT 4
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: LD_INT 4
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 4
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 4
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 5
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 4
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 3
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 4
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 5
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 5
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50447: LD_ADDR_VAR 0 31
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: LD_INT 4
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 3
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 4
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 5
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 4
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 3
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: LD_INT 5
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 3
50547: NEG
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 4
50603: NEG
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 4
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 4
50626: NEG
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 4
50649: NEG
50650: PUSH
50651: LD_INT 4
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 4
50661: NEG
50662: PUSH
50663: LD_INT 5
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: LD_INT 4
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: LD_INT 3
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 4
50697: NEG
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 5
50709: NEG
50710: PUSH
50711: LD_INT 4
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 5
50721: NEG
50722: PUSH
50723: LD_INT 5
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: LD_INT 5
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 5
50745: NEG
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 4
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 3
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 4
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: LD_INT 4
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 4
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 5
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 5
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 5
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50997: LD_ADDR_VAR 0 32
51001: PUSH
51002: LD_INT 4
51004: NEG
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 4
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 4
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 5
51060: NEG
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 5
51071: NEG
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 5
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: LD_INT 4
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 4
51166: NEG
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 4
51178: NEG
51179: PUSH
51180: LD_INT 4
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 4
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 4
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 4
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 5
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 4
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 4
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 5
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: LD_INT 3
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 5
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 4
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 4
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 4
51409: PUSH
51410: LD_INT 4
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 4
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 5
51429: PUSH
51430: LD_INT 4
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 5
51439: PUSH
51440: LD_INT 5
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 4
51449: PUSH
51450: LD_INT 5
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: LD_INT 4
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: LD_INT 3
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 5
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: LD_INT 5
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51544: LD_ADDR_VAR 0 33
51548: PUSH
51549: LD_INT 4
51551: NEG
51552: PUSH
51553: LD_INT 4
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 4
51563: NEG
51564: PUSH
51565: LD_INT 5
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: LD_INT 4
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 4
51599: NEG
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 5
51611: NEG
51612: PUSH
51613: LD_INT 4
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 5
51623: NEG
51624: PUSH
51625: LD_INT 5
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: NEG
51636: PUSH
51637: LD_INT 5
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 5
51647: NEG
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 4
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 4
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 4
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 4
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 5
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 4
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 5
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 4
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 4
51884: PUSH
51885: LD_INT 4
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: LD_INT 4
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 4
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 4
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 4
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 4
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: LD_INT 5
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 5
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 5
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52082: LD_ADDR_VAR 0 34
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 4
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 5
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 4
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 5
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: LD_INT 5
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 4
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: LD_INT 4
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 5
52304: PUSH
52305: LD_INT 4
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: LD_INT 5
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: PUSH
52325: LD_INT 5
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 5
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: LD_INT 5
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 3
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 4
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 4
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: LD_INT 4
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 4
52467: NEG
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 4
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 4
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 5
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 5
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 5
52546: NEG
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: NEG
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// end ; end ;
52614: GO 52617
52616: POP
// case btype of b_depot , b_warehouse :
52617: LD_VAR 0 1
52621: PUSH
52622: LD_INT 0
52624: DOUBLE
52625: EQUAL
52626: IFTRUE 52636
52628: LD_INT 1
52630: DOUBLE
52631: EQUAL
52632: IFTRUE 52636
52634: GO 52837
52636: POP
// case nation of nation_american :
52637: LD_VAR 0 5
52641: PUSH
52642: LD_INT 1
52644: DOUBLE
52645: EQUAL
52646: IFTRUE 52650
52648: GO 52706
52650: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52651: LD_ADDR_VAR 0 9
52655: PUSH
52656: LD_VAR 0 11
52660: PUSH
52661: LD_VAR 0 12
52665: PUSH
52666: LD_VAR 0 13
52670: PUSH
52671: LD_VAR 0 14
52675: PUSH
52676: LD_VAR 0 15
52680: PUSH
52681: LD_VAR 0 16
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: PUSH
52694: LD_VAR 0 4
52698: PUSH
52699: LD_INT 1
52701: PLUS
52702: ARRAY
52703: ST_TO_ADDR
52704: GO 52835
52706: LD_INT 2
52708: DOUBLE
52709: EQUAL
52710: IFTRUE 52714
52712: GO 52770
52714: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52715: LD_ADDR_VAR 0 9
52719: PUSH
52720: LD_VAR 0 17
52724: PUSH
52725: LD_VAR 0 18
52729: PUSH
52730: LD_VAR 0 19
52734: PUSH
52735: LD_VAR 0 20
52739: PUSH
52740: LD_VAR 0 21
52744: PUSH
52745: LD_VAR 0 22
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: PUSH
52758: LD_VAR 0 4
52762: PUSH
52763: LD_INT 1
52765: PLUS
52766: ARRAY
52767: ST_TO_ADDR
52768: GO 52835
52770: LD_INT 3
52772: DOUBLE
52773: EQUAL
52774: IFTRUE 52778
52776: GO 52834
52778: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52779: LD_ADDR_VAR 0 9
52783: PUSH
52784: LD_VAR 0 23
52788: PUSH
52789: LD_VAR 0 24
52793: PUSH
52794: LD_VAR 0 25
52798: PUSH
52799: LD_VAR 0 26
52803: PUSH
52804: LD_VAR 0 27
52808: PUSH
52809: LD_VAR 0 28
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: PUSH
52822: LD_VAR 0 4
52826: PUSH
52827: LD_INT 1
52829: PLUS
52830: ARRAY
52831: ST_TO_ADDR
52832: GO 52835
52834: POP
52835: GO 53390
52837: LD_INT 2
52839: DOUBLE
52840: EQUAL
52841: IFTRUE 52851
52843: LD_INT 3
52845: DOUBLE
52846: EQUAL
52847: IFTRUE 52851
52849: GO 52907
52851: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52852: LD_ADDR_VAR 0 9
52856: PUSH
52857: LD_VAR 0 29
52861: PUSH
52862: LD_VAR 0 30
52866: PUSH
52867: LD_VAR 0 31
52871: PUSH
52872: LD_VAR 0 32
52876: PUSH
52877: LD_VAR 0 33
52881: PUSH
52882: LD_VAR 0 34
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: PUSH
52895: LD_VAR 0 4
52899: PUSH
52900: LD_INT 1
52902: PLUS
52903: ARRAY
52904: ST_TO_ADDR
52905: GO 53390
52907: LD_INT 16
52909: DOUBLE
52910: EQUAL
52911: IFTRUE 52969
52913: LD_INT 17
52915: DOUBLE
52916: EQUAL
52917: IFTRUE 52969
52919: LD_INT 18
52921: DOUBLE
52922: EQUAL
52923: IFTRUE 52969
52925: LD_INT 19
52927: DOUBLE
52928: EQUAL
52929: IFTRUE 52969
52931: LD_INT 22
52933: DOUBLE
52934: EQUAL
52935: IFTRUE 52969
52937: LD_INT 20
52939: DOUBLE
52940: EQUAL
52941: IFTRUE 52969
52943: LD_INT 21
52945: DOUBLE
52946: EQUAL
52947: IFTRUE 52969
52949: LD_INT 23
52951: DOUBLE
52952: EQUAL
52953: IFTRUE 52969
52955: LD_INT 24
52957: DOUBLE
52958: EQUAL
52959: IFTRUE 52969
52961: LD_INT 25
52963: DOUBLE
52964: EQUAL
52965: IFTRUE 52969
52967: GO 53025
52969: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52970: LD_ADDR_VAR 0 9
52974: PUSH
52975: LD_VAR 0 35
52979: PUSH
52980: LD_VAR 0 36
52984: PUSH
52985: LD_VAR 0 37
52989: PUSH
52990: LD_VAR 0 38
52994: PUSH
52995: LD_VAR 0 39
52999: PUSH
53000: LD_VAR 0 40
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: PUSH
53013: LD_VAR 0 4
53017: PUSH
53018: LD_INT 1
53020: PLUS
53021: ARRAY
53022: ST_TO_ADDR
53023: GO 53390
53025: LD_INT 6
53027: DOUBLE
53028: EQUAL
53029: IFTRUE 53081
53031: LD_INT 7
53033: DOUBLE
53034: EQUAL
53035: IFTRUE 53081
53037: LD_INT 8
53039: DOUBLE
53040: EQUAL
53041: IFTRUE 53081
53043: LD_INT 13
53045: DOUBLE
53046: EQUAL
53047: IFTRUE 53081
53049: LD_INT 12
53051: DOUBLE
53052: EQUAL
53053: IFTRUE 53081
53055: LD_INT 15
53057: DOUBLE
53058: EQUAL
53059: IFTRUE 53081
53061: LD_INT 11
53063: DOUBLE
53064: EQUAL
53065: IFTRUE 53081
53067: LD_INT 14
53069: DOUBLE
53070: EQUAL
53071: IFTRUE 53081
53073: LD_INT 10
53075: DOUBLE
53076: EQUAL
53077: IFTRUE 53081
53079: GO 53137
53081: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53082: LD_ADDR_VAR 0 9
53086: PUSH
53087: LD_VAR 0 41
53091: PUSH
53092: LD_VAR 0 42
53096: PUSH
53097: LD_VAR 0 43
53101: PUSH
53102: LD_VAR 0 44
53106: PUSH
53107: LD_VAR 0 45
53111: PUSH
53112: LD_VAR 0 46
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: PUSH
53125: LD_VAR 0 4
53129: PUSH
53130: LD_INT 1
53132: PLUS
53133: ARRAY
53134: ST_TO_ADDR
53135: GO 53390
53137: LD_INT 36
53139: DOUBLE
53140: EQUAL
53141: IFTRUE 53145
53143: GO 53201
53145: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53146: LD_ADDR_VAR 0 9
53150: PUSH
53151: LD_VAR 0 47
53155: PUSH
53156: LD_VAR 0 48
53160: PUSH
53161: LD_VAR 0 49
53165: PUSH
53166: LD_VAR 0 50
53170: PUSH
53171: LD_VAR 0 51
53175: PUSH
53176: LD_VAR 0 52
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: PUSH
53189: LD_VAR 0 4
53193: PUSH
53194: LD_INT 1
53196: PLUS
53197: ARRAY
53198: ST_TO_ADDR
53199: GO 53390
53201: LD_INT 4
53203: DOUBLE
53204: EQUAL
53205: IFTRUE 53227
53207: LD_INT 5
53209: DOUBLE
53210: EQUAL
53211: IFTRUE 53227
53213: LD_INT 34
53215: DOUBLE
53216: EQUAL
53217: IFTRUE 53227
53219: LD_INT 37
53221: DOUBLE
53222: EQUAL
53223: IFTRUE 53227
53225: GO 53283
53227: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53228: LD_ADDR_VAR 0 9
53232: PUSH
53233: LD_VAR 0 53
53237: PUSH
53238: LD_VAR 0 54
53242: PUSH
53243: LD_VAR 0 55
53247: PUSH
53248: LD_VAR 0 56
53252: PUSH
53253: LD_VAR 0 57
53257: PUSH
53258: LD_VAR 0 58
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: PUSH
53271: LD_VAR 0 4
53275: PUSH
53276: LD_INT 1
53278: PLUS
53279: ARRAY
53280: ST_TO_ADDR
53281: GO 53390
53283: LD_INT 31
53285: DOUBLE
53286: EQUAL
53287: IFTRUE 53333
53289: LD_INT 32
53291: DOUBLE
53292: EQUAL
53293: IFTRUE 53333
53295: LD_INT 33
53297: DOUBLE
53298: EQUAL
53299: IFTRUE 53333
53301: LD_INT 27
53303: DOUBLE
53304: EQUAL
53305: IFTRUE 53333
53307: LD_INT 26
53309: DOUBLE
53310: EQUAL
53311: IFTRUE 53333
53313: LD_INT 28
53315: DOUBLE
53316: EQUAL
53317: IFTRUE 53333
53319: LD_INT 29
53321: DOUBLE
53322: EQUAL
53323: IFTRUE 53333
53325: LD_INT 30
53327: DOUBLE
53328: EQUAL
53329: IFTRUE 53333
53331: GO 53389
53333: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53334: LD_ADDR_VAR 0 9
53338: PUSH
53339: LD_VAR 0 59
53343: PUSH
53344: LD_VAR 0 60
53348: PUSH
53349: LD_VAR 0 61
53353: PUSH
53354: LD_VAR 0 62
53358: PUSH
53359: LD_VAR 0 63
53363: PUSH
53364: LD_VAR 0 64
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: PUSH
53377: LD_VAR 0 4
53381: PUSH
53382: LD_INT 1
53384: PLUS
53385: ARRAY
53386: ST_TO_ADDR
53387: GO 53390
53389: POP
// temp_list2 = [ ] ;
53390: LD_ADDR_VAR 0 10
53394: PUSH
53395: EMPTY
53396: ST_TO_ADDR
// for i in temp_list do
53397: LD_ADDR_VAR 0 8
53401: PUSH
53402: LD_VAR 0 9
53406: PUSH
53407: FOR_IN
53408: IFFALSE 53460
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53410: LD_ADDR_VAR 0 10
53414: PUSH
53415: LD_VAR 0 10
53419: PUSH
53420: LD_VAR 0 8
53424: PUSH
53425: LD_INT 1
53427: ARRAY
53428: PUSH
53429: LD_VAR 0 2
53433: PLUS
53434: PUSH
53435: LD_VAR 0 8
53439: PUSH
53440: LD_INT 2
53442: ARRAY
53443: PUSH
53444: LD_VAR 0 3
53448: PLUS
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: EMPTY
53455: LIST
53456: ADD
53457: ST_TO_ADDR
53458: GO 53407
53460: POP
53461: POP
// result = temp_list2 ;
53462: LD_ADDR_VAR 0 7
53466: PUSH
53467: LD_VAR 0 10
53471: ST_TO_ADDR
// end ;
53472: LD_VAR 0 7
53476: RET
// export function EnemyInRange ( unit , dist ) ; begin
53477: LD_INT 0
53479: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53480: LD_ADDR_VAR 0 3
53484: PUSH
53485: LD_VAR 0 1
53489: PPUSH
53490: CALL_OW 255
53494: PPUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 250
53504: PPUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: CALL_OW 251
53514: PPUSH
53515: LD_VAR 0 2
53519: PPUSH
53520: CALL 27581 0 4
53524: PUSH
53525: LD_INT 4
53527: ARRAY
53528: ST_TO_ADDR
// end ;
53529: LD_VAR 0 3
53533: RET
// export function PlayerSeeMe ( unit ) ; begin
53534: LD_INT 0
53536: PPUSH
// result := See ( your_side , unit ) ;
53537: LD_ADDR_VAR 0 2
53541: PUSH
53542: LD_OWVAR 2
53546: PPUSH
53547: LD_VAR 0 1
53551: PPUSH
53552: CALL_OW 292
53556: ST_TO_ADDR
// end ;
53557: LD_VAR 0 2
53561: RET
// export function ReverseDir ( unit ) ; begin
53562: LD_INT 0
53564: PPUSH
// if not unit then
53565: LD_VAR 0 1
53569: NOT
53570: IFFALSE 53574
// exit ;
53572: GO 53597
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53574: LD_ADDR_VAR 0 2
53578: PUSH
53579: LD_VAR 0 1
53583: PPUSH
53584: CALL_OW 254
53588: PUSH
53589: LD_INT 3
53591: PLUS
53592: PUSH
53593: LD_INT 6
53595: MOD
53596: ST_TO_ADDR
// end ;
53597: LD_VAR 0 2
53601: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53602: LD_INT 0
53604: PPUSH
53605: PPUSH
53606: PPUSH
53607: PPUSH
53608: PPUSH
// if not hexes then
53609: LD_VAR 0 2
53613: NOT
53614: IFFALSE 53618
// exit ;
53616: GO 53766
// dist := 9999 ;
53618: LD_ADDR_VAR 0 5
53622: PUSH
53623: LD_INT 9999
53625: ST_TO_ADDR
// for i = 1 to hexes do
53626: LD_ADDR_VAR 0 4
53630: PUSH
53631: DOUBLE
53632: LD_INT 1
53634: DEC
53635: ST_TO_ADDR
53636: LD_VAR 0 2
53640: PUSH
53641: FOR_TO
53642: IFFALSE 53754
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53644: LD_VAR 0 1
53648: PPUSH
53649: LD_VAR 0 2
53653: PUSH
53654: LD_VAR 0 4
53658: ARRAY
53659: PUSH
53660: LD_INT 1
53662: ARRAY
53663: PPUSH
53664: LD_VAR 0 2
53668: PUSH
53669: LD_VAR 0 4
53673: ARRAY
53674: PUSH
53675: LD_INT 2
53677: ARRAY
53678: PPUSH
53679: CALL_OW 297
53683: PUSH
53684: LD_VAR 0 5
53688: LESS
53689: IFFALSE 53752
// begin hex := hexes [ i ] ;
53691: LD_ADDR_VAR 0 7
53695: PUSH
53696: LD_VAR 0 2
53700: PUSH
53701: LD_VAR 0 4
53705: ARRAY
53706: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53707: LD_ADDR_VAR 0 5
53711: PUSH
53712: LD_VAR 0 1
53716: PPUSH
53717: LD_VAR 0 2
53721: PUSH
53722: LD_VAR 0 4
53726: ARRAY
53727: PUSH
53728: LD_INT 1
53730: ARRAY
53731: PPUSH
53732: LD_VAR 0 2
53736: PUSH
53737: LD_VAR 0 4
53741: ARRAY
53742: PUSH
53743: LD_INT 2
53745: ARRAY
53746: PPUSH
53747: CALL_OW 297
53751: ST_TO_ADDR
// end ; end ;
53752: GO 53641
53754: POP
53755: POP
// result := hex ;
53756: LD_ADDR_VAR 0 3
53760: PUSH
53761: LD_VAR 0 7
53765: ST_TO_ADDR
// end ;
53766: LD_VAR 0 3
53770: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53771: LD_INT 0
53773: PPUSH
53774: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53775: LD_VAR 0 1
53779: NOT
53780: PUSH
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 21
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 23
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PPUSH
53810: CALL_OW 69
53814: IN
53815: NOT
53816: OR
53817: IFFALSE 53821
// exit ;
53819: GO 53868
// for i = 1 to 3 do
53821: LD_ADDR_VAR 0 3
53825: PUSH
53826: DOUBLE
53827: LD_INT 1
53829: DEC
53830: ST_TO_ADDR
53831: LD_INT 3
53833: PUSH
53834: FOR_TO
53835: IFFALSE 53866
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53837: LD_VAR 0 1
53841: PPUSH
53842: CALL_OW 250
53846: PPUSH
53847: LD_VAR 0 1
53851: PPUSH
53852: CALL_OW 251
53856: PPUSH
53857: LD_INT 1
53859: PPUSH
53860: CALL_OW 453
53864: GO 53834
53866: POP
53867: POP
// end ;
53868: LD_VAR 0 2
53872: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53873: LD_INT 0
53875: PPUSH
53876: PPUSH
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53881: LD_VAR 0 1
53885: NOT
53886: PUSH
53887: LD_VAR 0 2
53891: NOT
53892: OR
53893: PUSH
53894: LD_VAR 0 1
53898: PPUSH
53899: CALL_OW 314
53903: OR
53904: IFFALSE 53908
// exit ;
53906: GO 54349
// x := GetX ( enemy_unit ) ;
53908: LD_ADDR_VAR 0 7
53912: PUSH
53913: LD_VAR 0 2
53917: PPUSH
53918: CALL_OW 250
53922: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53923: LD_ADDR_VAR 0 8
53927: PUSH
53928: LD_VAR 0 2
53932: PPUSH
53933: CALL_OW 251
53937: ST_TO_ADDR
// if not x or not y then
53938: LD_VAR 0 7
53942: NOT
53943: PUSH
53944: LD_VAR 0 8
53948: NOT
53949: OR
53950: IFFALSE 53954
// exit ;
53952: GO 54349
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53954: LD_ADDR_VAR 0 6
53958: PUSH
53959: LD_VAR 0 7
53963: PPUSH
53964: LD_INT 0
53966: PPUSH
53967: LD_INT 4
53969: PPUSH
53970: CALL_OW 272
53974: PUSH
53975: LD_VAR 0 8
53979: PPUSH
53980: LD_INT 0
53982: PPUSH
53983: LD_INT 4
53985: PPUSH
53986: CALL_OW 273
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_VAR 0 7
53999: PPUSH
54000: LD_INT 1
54002: PPUSH
54003: LD_INT 4
54005: PPUSH
54006: CALL_OW 272
54010: PUSH
54011: LD_VAR 0 8
54015: PPUSH
54016: LD_INT 1
54018: PPUSH
54019: LD_INT 4
54021: PPUSH
54022: CALL_OW 273
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_VAR 0 7
54035: PPUSH
54036: LD_INT 2
54038: PPUSH
54039: LD_INT 4
54041: PPUSH
54042: CALL_OW 272
54046: PUSH
54047: LD_VAR 0 8
54051: PPUSH
54052: LD_INT 2
54054: PPUSH
54055: LD_INT 4
54057: PPUSH
54058: CALL_OW 273
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_VAR 0 7
54071: PPUSH
54072: LD_INT 3
54074: PPUSH
54075: LD_INT 4
54077: PPUSH
54078: CALL_OW 272
54082: PUSH
54083: LD_VAR 0 8
54087: PPUSH
54088: LD_INT 3
54090: PPUSH
54091: LD_INT 4
54093: PPUSH
54094: CALL_OW 273
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_VAR 0 7
54107: PPUSH
54108: LD_INT 4
54110: PPUSH
54111: LD_INT 4
54113: PPUSH
54114: CALL_OW 272
54118: PUSH
54119: LD_VAR 0 8
54123: PPUSH
54124: LD_INT 4
54126: PPUSH
54127: LD_INT 4
54129: PPUSH
54130: CALL_OW 273
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_VAR 0 7
54143: PPUSH
54144: LD_INT 5
54146: PPUSH
54147: LD_INT 4
54149: PPUSH
54150: CALL_OW 272
54154: PUSH
54155: LD_VAR 0 8
54159: PPUSH
54160: LD_INT 5
54162: PPUSH
54163: LD_INT 4
54165: PPUSH
54166: CALL_OW 273
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// for i = tmp downto 1 do
54183: LD_ADDR_VAR 0 4
54187: PUSH
54188: DOUBLE
54189: LD_VAR 0 6
54193: INC
54194: ST_TO_ADDR
54195: LD_INT 1
54197: PUSH
54198: FOR_DOWNTO
54199: IFFALSE 54300
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54201: LD_VAR 0 6
54205: PUSH
54206: LD_VAR 0 4
54210: ARRAY
54211: PUSH
54212: LD_INT 1
54214: ARRAY
54215: PPUSH
54216: LD_VAR 0 6
54220: PUSH
54221: LD_VAR 0 4
54225: ARRAY
54226: PUSH
54227: LD_INT 2
54229: ARRAY
54230: PPUSH
54231: CALL_OW 488
54235: NOT
54236: PUSH
54237: LD_VAR 0 6
54241: PUSH
54242: LD_VAR 0 4
54246: ARRAY
54247: PUSH
54248: LD_INT 1
54250: ARRAY
54251: PPUSH
54252: LD_VAR 0 6
54256: PUSH
54257: LD_VAR 0 4
54261: ARRAY
54262: PUSH
54263: LD_INT 2
54265: ARRAY
54266: PPUSH
54267: CALL_OW 428
54271: PUSH
54272: LD_INT 0
54274: NONEQUAL
54275: OR
54276: IFFALSE 54298
// tmp := Delete ( tmp , i ) ;
54278: LD_ADDR_VAR 0 6
54282: PUSH
54283: LD_VAR 0 6
54287: PPUSH
54288: LD_VAR 0 4
54292: PPUSH
54293: CALL_OW 3
54297: ST_TO_ADDR
54298: GO 54198
54300: POP
54301: POP
// j := GetClosestHex ( unit , tmp ) ;
54302: LD_ADDR_VAR 0 5
54306: PUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: LD_VAR 0 6
54316: PPUSH
54317: CALL 53602 0 2
54321: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54322: LD_VAR 0 1
54326: PPUSH
54327: LD_VAR 0 5
54331: PUSH
54332: LD_INT 1
54334: ARRAY
54335: PPUSH
54336: LD_VAR 0 5
54340: PUSH
54341: LD_INT 2
54343: ARRAY
54344: PPUSH
54345: CALL_OW 111
// end ;
54349: LD_VAR 0 3
54353: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54354: LD_INT 0
54356: PPUSH
54357: PPUSH
54358: PPUSH
// uc_side = 0 ;
54359: LD_ADDR_OWVAR 20
54363: PUSH
54364: LD_INT 0
54366: ST_TO_ADDR
// uc_nation = 0 ;
54367: LD_ADDR_OWVAR 21
54371: PUSH
54372: LD_INT 0
54374: ST_TO_ADDR
// InitHc ;
54375: CALL_OW 19
// InitVc ;
54379: CALL_OW 20
// if mastodonts then
54383: LD_VAR 0 6
54387: IFFALSE 54454
// for i = 1 to mastodonts do
54389: LD_ADDR_VAR 0 11
54393: PUSH
54394: DOUBLE
54395: LD_INT 1
54397: DEC
54398: ST_TO_ADDR
54399: LD_VAR 0 6
54403: PUSH
54404: FOR_TO
54405: IFFALSE 54452
// begin vc_chassis := 31 ;
54407: LD_ADDR_OWVAR 37
54411: PUSH
54412: LD_INT 31
54414: ST_TO_ADDR
// vc_control := control_rider ;
54415: LD_ADDR_OWVAR 38
54419: PUSH
54420: LD_INT 4
54422: ST_TO_ADDR
// animal := CreateVehicle ;
54423: LD_ADDR_VAR 0 12
54427: PUSH
54428: CALL_OW 45
54432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54433: LD_VAR 0 12
54437: PPUSH
54438: LD_VAR 0 8
54442: PPUSH
54443: LD_INT 0
54445: PPUSH
54446: CALL 56642 0 3
// end ;
54450: GO 54404
54452: POP
54453: POP
// if horses then
54454: LD_VAR 0 5
54458: IFFALSE 54525
// for i = 1 to horses do
54460: LD_ADDR_VAR 0 11
54464: PUSH
54465: DOUBLE
54466: LD_INT 1
54468: DEC
54469: ST_TO_ADDR
54470: LD_VAR 0 5
54474: PUSH
54475: FOR_TO
54476: IFFALSE 54523
// begin hc_class := 21 ;
54478: LD_ADDR_OWVAR 28
54482: PUSH
54483: LD_INT 21
54485: ST_TO_ADDR
// hc_gallery :=  ;
54486: LD_ADDR_OWVAR 33
54490: PUSH
54491: LD_STRING 
54493: ST_TO_ADDR
// animal := CreateHuman ;
54494: LD_ADDR_VAR 0 12
54498: PUSH
54499: CALL_OW 44
54503: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54504: LD_VAR 0 12
54508: PPUSH
54509: LD_VAR 0 8
54513: PPUSH
54514: LD_INT 0
54516: PPUSH
54517: CALL 56642 0 3
// end ;
54521: GO 54475
54523: POP
54524: POP
// if birds then
54525: LD_VAR 0 1
54529: IFFALSE 54596
// for i = 1 to birds do
54531: LD_ADDR_VAR 0 11
54535: PUSH
54536: DOUBLE
54537: LD_INT 1
54539: DEC
54540: ST_TO_ADDR
54541: LD_VAR 0 1
54545: PUSH
54546: FOR_TO
54547: IFFALSE 54594
// begin hc_class = 18 ;
54549: LD_ADDR_OWVAR 28
54553: PUSH
54554: LD_INT 18
54556: ST_TO_ADDR
// hc_gallery =  ;
54557: LD_ADDR_OWVAR 33
54561: PUSH
54562: LD_STRING 
54564: ST_TO_ADDR
// animal := CreateHuman ;
54565: LD_ADDR_VAR 0 12
54569: PUSH
54570: CALL_OW 44
54574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54575: LD_VAR 0 12
54579: PPUSH
54580: LD_VAR 0 8
54584: PPUSH
54585: LD_INT 0
54587: PPUSH
54588: CALL 56642 0 3
// end ;
54592: GO 54546
54594: POP
54595: POP
// if tigers then
54596: LD_VAR 0 2
54600: IFFALSE 54684
// for i = 1 to tigers do
54602: LD_ADDR_VAR 0 11
54606: PUSH
54607: DOUBLE
54608: LD_INT 1
54610: DEC
54611: ST_TO_ADDR
54612: LD_VAR 0 2
54616: PUSH
54617: FOR_TO
54618: IFFALSE 54682
// begin hc_class = class_tiger ;
54620: LD_ADDR_OWVAR 28
54624: PUSH
54625: LD_INT 14
54627: ST_TO_ADDR
// hc_gallery =  ;
54628: LD_ADDR_OWVAR 33
54632: PUSH
54633: LD_STRING 
54635: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54636: LD_ADDR_OWVAR 35
54640: PUSH
54641: LD_INT 7
54643: NEG
54644: PPUSH
54645: LD_INT 7
54647: PPUSH
54648: CALL_OW 12
54652: ST_TO_ADDR
// animal := CreateHuman ;
54653: LD_ADDR_VAR 0 12
54657: PUSH
54658: CALL_OW 44
54662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54663: LD_VAR 0 12
54667: PPUSH
54668: LD_VAR 0 8
54672: PPUSH
54673: LD_INT 0
54675: PPUSH
54676: CALL 56642 0 3
// end ;
54680: GO 54617
54682: POP
54683: POP
// if apemans then
54684: LD_VAR 0 3
54688: IFFALSE 54811
// for i = 1 to apemans do
54690: LD_ADDR_VAR 0 11
54694: PUSH
54695: DOUBLE
54696: LD_INT 1
54698: DEC
54699: ST_TO_ADDR
54700: LD_VAR 0 3
54704: PUSH
54705: FOR_TO
54706: IFFALSE 54809
// begin hc_class = class_apeman ;
54708: LD_ADDR_OWVAR 28
54712: PUSH
54713: LD_INT 12
54715: ST_TO_ADDR
// hc_gallery =  ;
54716: LD_ADDR_OWVAR 33
54720: PUSH
54721: LD_STRING 
54723: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54724: LD_ADDR_OWVAR 35
54728: PUSH
54729: LD_INT 5
54731: NEG
54732: PPUSH
54733: LD_INT 5
54735: PPUSH
54736: CALL_OW 12
54740: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54741: LD_ADDR_OWVAR 31
54745: PUSH
54746: LD_INT 1
54748: PPUSH
54749: LD_INT 3
54751: PPUSH
54752: CALL_OW 12
54756: PUSH
54757: LD_INT 1
54759: PPUSH
54760: LD_INT 3
54762: PPUSH
54763: CALL_OW 12
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// animal := CreateHuman ;
54780: LD_ADDR_VAR 0 12
54784: PUSH
54785: CALL_OW 44
54789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54790: LD_VAR 0 12
54794: PPUSH
54795: LD_VAR 0 8
54799: PPUSH
54800: LD_INT 0
54802: PPUSH
54803: CALL 56642 0 3
// end ;
54807: GO 54705
54809: POP
54810: POP
// if enchidnas then
54811: LD_VAR 0 4
54815: IFFALSE 54882
// for i = 1 to enchidnas do
54817: LD_ADDR_VAR 0 11
54821: PUSH
54822: DOUBLE
54823: LD_INT 1
54825: DEC
54826: ST_TO_ADDR
54827: LD_VAR 0 4
54831: PUSH
54832: FOR_TO
54833: IFFALSE 54880
// begin hc_class = 13 ;
54835: LD_ADDR_OWVAR 28
54839: PUSH
54840: LD_INT 13
54842: ST_TO_ADDR
// hc_gallery =  ;
54843: LD_ADDR_OWVAR 33
54847: PUSH
54848: LD_STRING 
54850: ST_TO_ADDR
// animal := CreateHuman ;
54851: LD_ADDR_VAR 0 12
54855: PUSH
54856: CALL_OW 44
54860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54861: LD_VAR 0 12
54865: PPUSH
54866: LD_VAR 0 8
54870: PPUSH
54871: LD_INT 0
54873: PPUSH
54874: CALL 56642 0 3
// end ;
54878: GO 54832
54880: POP
54881: POP
// if fishes then
54882: LD_VAR 0 7
54886: IFFALSE 54953
// for i = 1 to fishes do
54888: LD_ADDR_VAR 0 11
54892: PUSH
54893: DOUBLE
54894: LD_INT 1
54896: DEC
54897: ST_TO_ADDR
54898: LD_VAR 0 7
54902: PUSH
54903: FOR_TO
54904: IFFALSE 54951
// begin hc_class = 20 ;
54906: LD_ADDR_OWVAR 28
54910: PUSH
54911: LD_INT 20
54913: ST_TO_ADDR
// hc_gallery =  ;
54914: LD_ADDR_OWVAR 33
54918: PUSH
54919: LD_STRING 
54921: ST_TO_ADDR
// animal := CreateHuman ;
54922: LD_ADDR_VAR 0 12
54926: PUSH
54927: CALL_OW 44
54931: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54932: LD_VAR 0 12
54936: PPUSH
54937: LD_VAR 0 9
54941: PPUSH
54942: LD_INT 0
54944: PPUSH
54945: CALL 56642 0 3
// end ;
54949: GO 54903
54951: POP
54952: POP
// end ;
54953: LD_VAR 0 10
54957: RET
// export function WantHeal ( sci , unit ) ; begin
54958: LD_INT 0
54960: PPUSH
// if GetTaskList ( sci ) > 0 then
54961: LD_VAR 0 1
54965: PPUSH
54966: CALL_OW 437
54970: PUSH
54971: LD_INT 0
54973: GREATER
54974: IFFALSE 55044
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54976: LD_VAR 0 1
54980: PPUSH
54981: CALL_OW 437
54985: PUSH
54986: LD_INT 1
54988: ARRAY
54989: PUSH
54990: LD_INT 1
54992: ARRAY
54993: PUSH
54994: LD_STRING l
54996: EQUAL
54997: PUSH
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 437
55007: PUSH
55008: LD_INT 1
55010: ARRAY
55011: PUSH
55012: LD_INT 4
55014: ARRAY
55015: PUSH
55016: LD_VAR 0 2
55020: EQUAL
55021: AND
55022: IFFALSE 55034
// result := true else
55024: LD_ADDR_VAR 0 3
55028: PUSH
55029: LD_INT 1
55031: ST_TO_ADDR
55032: GO 55042
// result := false ;
55034: LD_ADDR_VAR 0 3
55038: PUSH
55039: LD_INT 0
55041: ST_TO_ADDR
// end else
55042: GO 55052
// result := false ;
55044: LD_ADDR_VAR 0 3
55048: PUSH
55049: LD_INT 0
55051: ST_TO_ADDR
// end ;
55052: LD_VAR 0 3
55056: RET
// export function HealTarget ( sci ) ; begin
55057: LD_INT 0
55059: PPUSH
// if not sci then
55060: LD_VAR 0 1
55064: NOT
55065: IFFALSE 55069
// exit ;
55067: GO 55134
// result := 0 ;
55069: LD_ADDR_VAR 0 2
55073: PUSH
55074: LD_INT 0
55076: ST_TO_ADDR
// if GetTaskList ( sci ) then
55077: LD_VAR 0 1
55081: PPUSH
55082: CALL_OW 437
55086: IFFALSE 55134
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55088: LD_VAR 0 1
55092: PPUSH
55093: CALL_OW 437
55097: PUSH
55098: LD_INT 1
55100: ARRAY
55101: PUSH
55102: LD_INT 1
55104: ARRAY
55105: PUSH
55106: LD_STRING l
55108: EQUAL
55109: IFFALSE 55134
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55111: LD_ADDR_VAR 0 2
55115: PUSH
55116: LD_VAR 0 1
55120: PPUSH
55121: CALL_OW 437
55125: PUSH
55126: LD_INT 1
55128: ARRAY
55129: PUSH
55130: LD_INT 4
55132: ARRAY
55133: ST_TO_ADDR
// end ;
55134: LD_VAR 0 2
55138: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55139: LD_INT 0
55141: PPUSH
55142: PPUSH
55143: PPUSH
55144: PPUSH
// if not base_units then
55145: LD_VAR 0 1
55149: NOT
55150: IFFALSE 55154
// exit ;
55152: GO 55241
// result := false ;
55154: LD_ADDR_VAR 0 2
55158: PUSH
55159: LD_INT 0
55161: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55162: LD_ADDR_VAR 0 5
55166: PUSH
55167: LD_VAR 0 1
55171: PPUSH
55172: LD_INT 21
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PPUSH
55182: CALL_OW 72
55186: ST_TO_ADDR
// if not tmp then
55187: LD_VAR 0 5
55191: NOT
55192: IFFALSE 55196
// exit ;
55194: GO 55241
// for i in tmp do
55196: LD_ADDR_VAR 0 3
55200: PUSH
55201: LD_VAR 0 5
55205: PUSH
55206: FOR_IN
55207: IFFALSE 55239
// begin result := EnemyInRange ( i , 22 ) ;
55209: LD_ADDR_VAR 0 2
55213: PUSH
55214: LD_VAR 0 3
55218: PPUSH
55219: LD_INT 22
55221: PPUSH
55222: CALL 53477 0 2
55226: ST_TO_ADDR
// if result then
55227: LD_VAR 0 2
55231: IFFALSE 55237
// exit ;
55233: POP
55234: POP
55235: GO 55241
// end ;
55237: GO 55206
55239: POP
55240: POP
// end ;
55241: LD_VAR 0 2
55245: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55246: LD_INT 0
55248: PPUSH
55249: PPUSH
// if not units then
55250: LD_VAR 0 1
55254: NOT
55255: IFFALSE 55259
// exit ;
55257: GO 55329
// result := [ ] ;
55259: LD_ADDR_VAR 0 3
55263: PUSH
55264: EMPTY
55265: ST_TO_ADDR
// for i in units do
55266: LD_ADDR_VAR 0 4
55270: PUSH
55271: LD_VAR 0 1
55275: PUSH
55276: FOR_IN
55277: IFFALSE 55327
// if GetTag ( i ) = tag then
55279: LD_VAR 0 4
55283: PPUSH
55284: CALL_OW 110
55288: PUSH
55289: LD_VAR 0 2
55293: EQUAL
55294: IFFALSE 55325
// result := Insert ( result , result + 1 , i ) ;
55296: LD_ADDR_VAR 0 3
55300: PUSH
55301: LD_VAR 0 3
55305: PPUSH
55306: LD_VAR 0 3
55310: PUSH
55311: LD_INT 1
55313: PLUS
55314: PPUSH
55315: LD_VAR 0 4
55319: PPUSH
55320: CALL_OW 2
55324: ST_TO_ADDR
55325: GO 55276
55327: POP
55328: POP
// end ;
55329: LD_VAR 0 3
55333: RET
// export function IsDriver ( un ) ; begin
55334: LD_INT 0
55336: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55337: LD_ADDR_VAR 0 2
55341: PUSH
55342: LD_VAR 0 1
55346: PUSH
55347: LD_INT 55
55349: PUSH
55350: EMPTY
55351: LIST
55352: PPUSH
55353: CALL_OW 69
55357: IN
55358: ST_TO_ADDR
// end ;
55359: LD_VAR 0 2
55363: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55364: LD_INT 0
55366: PPUSH
55367: PPUSH
// list := [ ] ;
55368: LD_ADDR_VAR 0 5
55372: PUSH
55373: EMPTY
55374: ST_TO_ADDR
// case d of 0 :
55375: LD_VAR 0 3
55379: PUSH
55380: LD_INT 0
55382: DOUBLE
55383: EQUAL
55384: IFTRUE 55388
55386: GO 55521
55388: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55389: LD_ADDR_VAR 0 5
55393: PUSH
55394: LD_VAR 0 1
55398: PUSH
55399: LD_INT 4
55401: MINUS
55402: PUSH
55403: LD_VAR 0 2
55407: PUSH
55408: LD_INT 4
55410: MINUS
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: PUSH
55420: LD_VAR 0 1
55424: PUSH
55425: LD_INT 3
55427: MINUS
55428: PUSH
55429: LD_VAR 0 2
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: PUSH
55442: LD_VAR 0 1
55446: PUSH
55447: LD_INT 4
55449: PLUS
55450: PUSH
55451: LD_VAR 0 2
55455: PUSH
55456: LD_INT 4
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: PUSH
55464: LD_VAR 0 1
55468: PUSH
55469: LD_INT 3
55471: PLUS
55472: PUSH
55473: LD_VAR 0 2
55477: PUSH
55478: LD_INT 3
55480: PLUS
55481: PUSH
55482: LD_INT 5
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: PUSH
55490: LD_VAR 0 1
55494: PUSH
55495: LD_VAR 0 2
55499: PUSH
55500: LD_INT 4
55502: PLUS
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: ST_TO_ADDR
// end ; 1 :
55519: GO 56219
55521: LD_INT 1
55523: DOUBLE
55524: EQUAL
55525: IFTRUE 55529
55527: GO 55662
55529: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55530: LD_ADDR_VAR 0 5
55534: PUSH
55535: LD_VAR 0 1
55539: PUSH
55540: LD_VAR 0 2
55544: PUSH
55545: LD_INT 4
55547: MINUS
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: PUSH
55557: LD_VAR 0 1
55561: PUSH
55562: LD_INT 3
55564: MINUS
55565: PUSH
55566: LD_VAR 0 2
55570: PUSH
55571: LD_INT 3
55573: MINUS
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: PUSH
55583: LD_VAR 0 1
55587: PUSH
55588: LD_INT 4
55590: MINUS
55591: PUSH
55592: LD_VAR 0 2
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: LIST
55604: PUSH
55605: LD_VAR 0 1
55609: PUSH
55610: LD_VAR 0 2
55614: PUSH
55615: LD_INT 3
55617: PLUS
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: PUSH
55627: LD_VAR 0 1
55631: PUSH
55632: LD_INT 4
55634: PLUS
55635: PUSH
55636: LD_VAR 0 2
55640: PUSH
55641: LD_INT 4
55643: PLUS
55644: PUSH
55645: LD_INT 5
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: LIST
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// end ; 2 :
55660: GO 56219
55662: LD_INT 2
55664: DOUBLE
55665: EQUAL
55666: IFTRUE 55670
55668: GO 55799
55670: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55671: LD_ADDR_VAR 0 5
55675: PUSH
55676: LD_VAR 0 1
55680: PUSH
55681: LD_VAR 0 2
55685: PUSH
55686: LD_INT 3
55688: MINUS
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: PUSH
55698: LD_VAR 0 1
55702: PUSH
55703: LD_INT 4
55705: PLUS
55706: PUSH
55707: LD_VAR 0 2
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: PUSH
55720: LD_VAR 0 1
55724: PUSH
55725: LD_VAR 0 2
55729: PUSH
55730: LD_INT 4
55732: PLUS
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: PUSH
55742: LD_VAR 0 1
55746: PUSH
55747: LD_INT 3
55749: MINUS
55750: PUSH
55751: LD_VAR 0 2
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: PUSH
55764: LD_VAR 0 1
55768: PUSH
55769: LD_INT 4
55771: MINUS
55772: PUSH
55773: LD_VAR 0 2
55777: PUSH
55778: LD_INT 4
55780: MINUS
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: ST_TO_ADDR
// end ; 3 :
55797: GO 56219
55799: LD_INT 3
55801: DOUBLE
55802: EQUAL
55803: IFTRUE 55807
55805: GO 55940
55807: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55808: LD_ADDR_VAR 0 5
55812: PUSH
55813: LD_VAR 0 1
55817: PUSH
55818: LD_INT 3
55820: PLUS
55821: PUSH
55822: LD_VAR 0 2
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: PUSH
55835: LD_VAR 0 1
55839: PUSH
55840: LD_INT 4
55842: PLUS
55843: PUSH
55844: LD_VAR 0 2
55848: PUSH
55849: LD_INT 4
55851: PLUS
55852: PUSH
55853: LD_INT 5
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: LIST
55860: PUSH
55861: LD_VAR 0 1
55865: PUSH
55866: LD_INT 4
55868: MINUS
55869: PUSH
55870: LD_VAR 0 2
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: PUSH
55883: LD_VAR 0 1
55887: PUSH
55888: LD_VAR 0 2
55892: PUSH
55893: LD_INT 4
55895: MINUS
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: PUSH
55905: LD_VAR 0 1
55909: PUSH
55910: LD_INT 3
55912: MINUS
55913: PUSH
55914: LD_VAR 0 2
55918: PUSH
55919: LD_INT 3
55921: MINUS
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: ST_TO_ADDR
// end ; 4 :
55938: GO 56219
55940: LD_INT 4
55942: DOUBLE
55943: EQUAL
55944: IFTRUE 55948
55946: GO 56081
55948: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55949: LD_ADDR_VAR 0 5
55953: PUSH
55954: LD_VAR 0 1
55958: PUSH
55959: LD_VAR 0 2
55963: PUSH
55964: LD_INT 4
55966: PLUS
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: PUSH
55976: LD_VAR 0 1
55980: PUSH
55981: LD_INT 3
55983: PLUS
55984: PUSH
55985: LD_VAR 0 2
55989: PUSH
55990: LD_INT 3
55992: PLUS
55993: PUSH
55994: LD_INT 5
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: PUSH
56002: LD_VAR 0 1
56006: PUSH
56007: LD_INT 4
56009: PLUS
56010: PUSH
56011: LD_VAR 0 2
56015: PUSH
56016: LD_INT 4
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: PUSH
56024: LD_VAR 0 1
56028: PUSH
56029: LD_VAR 0 2
56033: PUSH
56034: LD_INT 3
56036: MINUS
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: PUSH
56046: LD_VAR 0 1
56050: PUSH
56051: LD_INT 4
56053: MINUS
56054: PUSH
56055: LD_VAR 0 2
56059: PUSH
56060: LD_INT 4
56062: MINUS
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// end ; 5 :
56079: GO 56219
56081: LD_INT 5
56083: DOUBLE
56084: EQUAL
56085: IFTRUE 56089
56087: GO 56218
56089: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56090: LD_ADDR_VAR 0 5
56094: PUSH
56095: LD_VAR 0 1
56099: PUSH
56100: LD_INT 4
56102: MINUS
56103: PUSH
56104: LD_VAR 0 2
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: PUSH
56117: LD_VAR 0 1
56121: PUSH
56122: LD_VAR 0 2
56126: PUSH
56127: LD_INT 4
56129: MINUS
56130: PUSH
56131: LD_INT 3
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: PUSH
56139: LD_VAR 0 1
56143: PUSH
56144: LD_INT 4
56146: PLUS
56147: PUSH
56148: LD_VAR 0 2
56152: PUSH
56153: LD_INT 4
56155: PLUS
56156: PUSH
56157: LD_INT 5
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: LIST
56164: PUSH
56165: LD_VAR 0 1
56169: PUSH
56170: LD_INT 3
56172: PLUS
56173: PUSH
56174: LD_VAR 0 2
56178: PUSH
56179: LD_INT 4
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: PUSH
56187: LD_VAR 0 1
56191: PUSH
56192: LD_VAR 0 2
56196: PUSH
56197: LD_INT 3
56199: PLUS
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: ST_TO_ADDR
// end ; end ;
56216: GO 56219
56218: POP
// result := list ;
56219: LD_ADDR_VAR 0 4
56223: PUSH
56224: LD_VAR 0 5
56228: ST_TO_ADDR
// end ;
56229: LD_VAR 0 4
56233: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56234: LD_INT 0
56236: PPUSH
56237: PPUSH
56238: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56239: LD_VAR 0 1
56243: NOT
56244: PUSH
56245: LD_VAR 0 2
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: LD_INT 4
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: IN
56268: NOT
56269: OR
56270: IFFALSE 56274
// exit ;
56272: GO 56366
// tmp := [ ] ;
56274: LD_ADDR_VAR 0 5
56278: PUSH
56279: EMPTY
56280: ST_TO_ADDR
// for i in units do
56281: LD_ADDR_VAR 0 4
56285: PUSH
56286: LD_VAR 0 1
56290: PUSH
56291: FOR_IN
56292: IFFALSE 56335
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56294: LD_ADDR_VAR 0 5
56298: PUSH
56299: LD_VAR 0 5
56303: PPUSH
56304: LD_VAR 0 5
56308: PUSH
56309: LD_INT 1
56311: PLUS
56312: PPUSH
56313: LD_VAR 0 4
56317: PPUSH
56318: LD_VAR 0 2
56322: PPUSH
56323: CALL_OW 259
56327: PPUSH
56328: CALL_OW 2
56332: ST_TO_ADDR
56333: GO 56291
56335: POP
56336: POP
// if not tmp then
56337: LD_VAR 0 5
56341: NOT
56342: IFFALSE 56346
// exit ;
56344: GO 56366
// result := SortListByListDesc ( units , tmp ) ;
56346: LD_ADDR_VAR 0 3
56350: PUSH
56351: LD_VAR 0 1
56355: PPUSH
56356: LD_VAR 0 5
56360: PPUSH
56361: CALL_OW 77
56365: ST_TO_ADDR
// end ;
56366: LD_VAR 0 3
56370: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56371: LD_INT 0
56373: PPUSH
56374: PPUSH
56375: PPUSH
// result := false ;
56376: LD_ADDR_VAR 0 3
56380: PUSH
56381: LD_INT 0
56383: ST_TO_ADDR
// x := GetX ( building ) ;
56384: LD_ADDR_VAR 0 4
56388: PUSH
56389: LD_VAR 0 2
56393: PPUSH
56394: CALL_OW 250
56398: ST_TO_ADDR
// y := GetY ( building ) ;
56399: LD_ADDR_VAR 0 5
56403: PUSH
56404: LD_VAR 0 2
56408: PPUSH
56409: CALL_OW 251
56413: ST_TO_ADDR
// if not building or not x or not y then
56414: LD_VAR 0 2
56418: NOT
56419: PUSH
56420: LD_VAR 0 4
56424: NOT
56425: OR
56426: PUSH
56427: LD_VAR 0 5
56431: NOT
56432: OR
56433: IFFALSE 56437
// exit ;
56435: GO 56529
// if GetTaskList ( unit ) then
56437: LD_VAR 0 1
56441: PPUSH
56442: CALL_OW 437
56446: IFFALSE 56529
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56448: LD_STRING e
56450: PUSH
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL_OW 437
56460: PUSH
56461: LD_INT 1
56463: ARRAY
56464: PUSH
56465: LD_INT 1
56467: ARRAY
56468: EQUAL
56469: PUSH
56470: LD_VAR 0 4
56474: PUSH
56475: LD_VAR 0 1
56479: PPUSH
56480: CALL_OW 437
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: PUSH
56489: LD_INT 2
56491: ARRAY
56492: EQUAL
56493: AND
56494: PUSH
56495: LD_VAR 0 5
56499: PUSH
56500: LD_VAR 0 1
56504: PPUSH
56505: CALL_OW 437
56509: PUSH
56510: LD_INT 1
56512: ARRAY
56513: PUSH
56514: LD_INT 3
56516: ARRAY
56517: EQUAL
56518: AND
56519: IFFALSE 56529
// result := true end ;
56521: LD_ADDR_VAR 0 3
56525: PUSH
56526: LD_INT 1
56528: ST_TO_ADDR
// end ;
56529: LD_VAR 0 3
56533: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56534: LD_INT 0
56536: PPUSH
// result := false ;
56537: LD_ADDR_VAR 0 4
56541: PUSH
56542: LD_INT 0
56544: ST_TO_ADDR
// if GetTaskList ( unit ) then
56545: LD_VAR 0 1
56549: PPUSH
56550: CALL_OW 437
56554: IFFALSE 56637
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56556: LD_STRING M
56558: PUSH
56559: LD_VAR 0 1
56563: PPUSH
56564: CALL_OW 437
56568: PUSH
56569: LD_INT 1
56571: ARRAY
56572: PUSH
56573: LD_INT 1
56575: ARRAY
56576: EQUAL
56577: PUSH
56578: LD_VAR 0 2
56582: PUSH
56583: LD_VAR 0 1
56587: PPUSH
56588: CALL_OW 437
56592: PUSH
56593: LD_INT 1
56595: ARRAY
56596: PUSH
56597: LD_INT 2
56599: ARRAY
56600: EQUAL
56601: AND
56602: PUSH
56603: LD_VAR 0 3
56607: PUSH
56608: LD_VAR 0 1
56612: PPUSH
56613: CALL_OW 437
56617: PUSH
56618: LD_INT 1
56620: ARRAY
56621: PUSH
56622: LD_INT 3
56624: ARRAY
56625: EQUAL
56626: AND
56627: IFFALSE 56637
// result := true ;
56629: LD_ADDR_VAR 0 4
56633: PUSH
56634: LD_INT 1
56636: ST_TO_ADDR
// end ; end ;
56637: LD_VAR 0 4
56641: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56642: LD_INT 0
56644: PPUSH
56645: PPUSH
56646: PPUSH
56647: PPUSH
// if not unit or not area then
56648: LD_VAR 0 1
56652: NOT
56653: PUSH
56654: LD_VAR 0 2
56658: NOT
56659: OR
56660: IFFALSE 56664
// exit ;
56662: GO 56828
// tmp := AreaToList ( area , i ) ;
56664: LD_ADDR_VAR 0 6
56668: PUSH
56669: LD_VAR 0 2
56673: PPUSH
56674: LD_VAR 0 5
56678: PPUSH
56679: CALL_OW 517
56683: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56684: LD_ADDR_VAR 0 5
56688: PUSH
56689: DOUBLE
56690: LD_INT 1
56692: DEC
56693: ST_TO_ADDR
56694: LD_VAR 0 6
56698: PUSH
56699: LD_INT 1
56701: ARRAY
56702: PUSH
56703: FOR_TO
56704: IFFALSE 56826
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56706: LD_ADDR_VAR 0 7
56710: PUSH
56711: LD_VAR 0 6
56715: PUSH
56716: LD_INT 1
56718: ARRAY
56719: PUSH
56720: LD_VAR 0 5
56724: ARRAY
56725: PUSH
56726: LD_VAR 0 6
56730: PUSH
56731: LD_INT 2
56733: ARRAY
56734: PUSH
56735: LD_VAR 0 5
56739: ARRAY
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56745: LD_VAR 0 7
56749: PUSH
56750: LD_INT 1
56752: ARRAY
56753: PPUSH
56754: LD_VAR 0 7
56758: PUSH
56759: LD_INT 2
56761: ARRAY
56762: PPUSH
56763: CALL_OW 428
56767: PUSH
56768: LD_INT 0
56770: EQUAL
56771: IFFALSE 56824
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56773: LD_VAR 0 1
56777: PPUSH
56778: LD_VAR 0 7
56782: PUSH
56783: LD_INT 1
56785: ARRAY
56786: PPUSH
56787: LD_VAR 0 7
56791: PUSH
56792: LD_INT 2
56794: ARRAY
56795: PPUSH
56796: LD_VAR 0 3
56800: PPUSH
56801: CALL_OW 48
// result := IsPlaced ( unit ) ;
56805: LD_ADDR_VAR 0 4
56809: PUSH
56810: LD_VAR 0 1
56814: PPUSH
56815: CALL_OW 305
56819: ST_TO_ADDR
// exit ;
56820: POP
56821: POP
56822: GO 56828
// end ; end ;
56824: GO 56703
56826: POP
56827: POP
// end ;
56828: LD_VAR 0 4
56832: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56833: LD_INT 0
56835: PPUSH
56836: PPUSH
56837: PPUSH
// if not side or side > 8 then
56838: LD_VAR 0 1
56842: NOT
56843: PUSH
56844: LD_VAR 0 1
56848: PUSH
56849: LD_INT 8
56851: GREATER
56852: OR
56853: IFFALSE 56857
// exit ;
56855: GO 57044
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56857: LD_ADDR_VAR 0 4
56861: PUSH
56862: LD_INT 22
56864: PUSH
56865: LD_VAR 0 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 21
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PPUSH
56888: CALL_OW 69
56892: ST_TO_ADDR
// if not tmp then
56893: LD_VAR 0 4
56897: NOT
56898: IFFALSE 56902
// exit ;
56900: GO 57044
// enable_addtolog := true ;
56902: LD_ADDR_OWVAR 81
56906: PUSH
56907: LD_INT 1
56909: ST_TO_ADDR
// AddToLog ( [ ) ;
56910: LD_STRING [
56912: PPUSH
56913: CALL_OW 561
// for i in tmp do
56917: LD_ADDR_VAR 0 3
56921: PUSH
56922: LD_VAR 0 4
56926: PUSH
56927: FOR_IN
56928: IFFALSE 57035
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56930: LD_STRING [
56932: PUSH
56933: LD_VAR 0 3
56937: PPUSH
56938: CALL_OW 266
56942: STR
56943: PUSH
56944: LD_STRING , 
56946: STR
56947: PUSH
56948: LD_VAR 0 3
56952: PPUSH
56953: CALL_OW 250
56957: STR
56958: PUSH
56959: LD_STRING , 
56961: STR
56962: PUSH
56963: LD_VAR 0 3
56967: PPUSH
56968: CALL_OW 251
56972: STR
56973: PUSH
56974: LD_STRING , 
56976: STR
56977: PUSH
56978: LD_VAR 0 3
56982: PPUSH
56983: CALL_OW 254
56987: STR
56988: PUSH
56989: LD_STRING , 
56991: STR
56992: PUSH
56993: LD_VAR 0 3
56997: PPUSH
56998: LD_INT 1
57000: PPUSH
57001: CALL_OW 268
57005: STR
57006: PUSH
57007: LD_STRING , 
57009: STR
57010: PUSH
57011: LD_VAR 0 3
57015: PPUSH
57016: LD_INT 2
57018: PPUSH
57019: CALL_OW 268
57023: STR
57024: PUSH
57025: LD_STRING ],
57027: STR
57028: PPUSH
57029: CALL_OW 561
// end ;
57033: GO 56927
57035: POP
57036: POP
// AddToLog ( ]; ) ;
57037: LD_STRING ];
57039: PPUSH
57040: CALL_OW 561
// end ;
57044: LD_VAR 0 2
57048: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57049: LD_INT 0
57051: PPUSH
57052: PPUSH
57053: PPUSH
57054: PPUSH
57055: PPUSH
// if not area or not rate or not max then
57056: LD_VAR 0 1
57060: NOT
57061: PUSH
57062: LD_VAR 0 2
57066: NOT
57067: OR
57068: PUSH
57069: LD_VAR 0 4
57073: NOT
57074: OR
57075: IFFALSE 57079
// exit ;
57077: GO 57271
// while 1 do
57079: LD_INT 1
57081: IFFALSE 57271
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57083: LD_ADDR_VAR 0 9
57087: PUSH
57088: LD_VAR 0 1
57092: PPUSH
57093: LD_INT 1
57095: PPUSH
57096: CALL_OW 287
57100: PUSH
57101: LD_INT 10
57103: MUL
57104: ST_TO_ADDR
// r := rate / 10 ;
57105: LD_ADDR_VAR 0 7
57109: PUSH
57110: LD_VAR 0 2
57114: PUSH
57115: LD_INT 10
57117: DIVREAL
57118: ST_TO_ADDR
// time := 1 1$00 ;
57119: LD_ADDR_VAR 0 8
57123: PUSH
57124: LD_INT 2100
57126: ST_TO_ADDR
// if amount < min then
57127: LD_VAR 0 9
57131: PUSH
57132: LD_VAR 0 3
57136: LESS
57137: IFFALSE 57155
// r := r * 2 else
57139: LD_ADDR_VAR 0 7
57143: PUSH
57144: LD_VAR 0 7
57148: PUSH
57149: LD_INT 2
57151: MUL
57152: ST_TO_ADDR
57153: GO 57181
// if amount > max then
57155: LD_VAR 0 9
57159: PUSH
57160: LD_VAR 0 4
57164: GREATER
57165: IFFALSE 57181
// r := r / 2 ;
57167: LD_ADDR_VAR 0 7
57171: PUSH
57172: LD_VAR 0 7
57176: PUSH
57177: LD_INT 2
57179: DIVREAL
57180: ST_TO_ADDR
// time := time / r ;
57181: LD_ADDR_VAR 0 8
57185: PUSH
57186: LD_VAR 0 8
57190: PUSH
57191: LD_VAR 0 7
57195: DIVREAL
57196: ST_TO_ADDR
// if time < 0 then
57197: LD_VAR 0 8
57201: PUSH
57202: LD_INT 0
57204: LESS
57205: IFFALSE 57222
// time := time * - 1 ;
57207: LD_ADDR_VAR 0 8
57211: PUSH
57212: LD_VAR 0 8
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: MUL
57221: ST_TO_ADDR
// wait ( time ) ;
57222: LD_VAR 0 8
57226: PPUSH
57227: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57231: LD_INT 35
57233: PPUSH
57234: LD_INT 875
57236: PPUSH
57237: CALL_OW 12
57241: PPUSH
57242: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57246: LD_INT 1
57248: PPUSH
57249: LD_INT 5
57251: PPUSH
57252: CALL_OW 12
57256: PPUSH
57257: LD_VAR 0 1
57261: PPUSH
57262: LD_INT 1
57264: PPUSH
57265: CALL_OW 55
// end ;
57269: GO 57079
// end ;
57271: LD_VAR 0 5
57275: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57276: LD_INT 0
57278: PPUSH
57279: PPUSH
57280: PPUSH
57281: PPUSH
57282: PPUSH
57283: PPUSH
57284: PPUSH
57285: PPUSH
// if not turrets or not factories then
57286: LD_VAR 0 1
57290: NOT
57291: PUSH
57292: LD_VAR 0 2
57296: NOT
57297: OR
57298: IFFALSE 57302
// exit ;
57300: GO 57609
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57302: LD_ADDR_VAR 0 10
57306: PUSH
57307: LD_INT 5
57309: PUSH
57310: LD_INT 6
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: LD_INT 5
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 24
57344: PUSH
57345: LD_INT 25
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 23
57354: PUSH
57355: LD_INT 27
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 42
57368: PUSH
57369: LD_INT 43
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 44
57378: PUSH
57379: LD_INT 46
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 45
57388: PUSH
57389: LD_INT 47
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// result := [ ] ;
57406: LD_ADDR_VAR 0 3
57410: PUSH
57411: EMPTY
57412: ST_TO_ADDR
// for i in turrets do
57413: LD_ADDR_VAR 0 4
57417: PUSH
57418: LD_VAR 0 1
57422: PUSH
57423: FOR_IN
57424: IFFALSE 57607
// begin nat := GetNation ( i ) ;
57426: LD_ADDR_VAR 0 7
57430: PUSH
57431: LD_VAR 0 4
57435: PPUSH
57436: CALL_OW 248
57440: ST_TO_ADDR
// weapon := 0 ;
57441: LD_ADDR_VAR 0 8
57445: PUSH
57446: LD_INT 0
57448: ST_TO_ADDR
// if not nat then
57449: LD_VAR 0 7
57453: NOT
57454: IFFALSE 57458
// continue ;
57456: GO 57423
// for j in list [ nat ] do
57458: LD_ADDR_VAR 0 5
57462: PUSH
57463: LD_VAR 0 10
57467: PUSH
57468: LD_VAR 0 7
57472: ARRAY
57473: PUSH
57474: FOR_IN
57475: IFFALSE 57516
// if GetBWeapon ( i ) = j [ 1 ] then
57477: LD_VAR 0 4
57481: PPUSH
57482: CALL_OW 269
57486: PUSH
57487: LD_VAR 0 5
57491: PUSH
57492: LD_INT 1
57494: ARRAY
57495: EQUAL
57496: IFFALSE 57514
// begin weapon := j [ 2 ] ;
57498: LD_ADDR_VAR 0 8
57502: PUSH
57503: LD_VAR 0 5
57507: PUSH
57508: LD_INT 2
57510: ARRAY
57511: ST_TO_ADDR
// break ;
57512: GO 57516
// end ;
57514: GO 57474
57516: POP
57517: POP
// if not weapon then
57518: LD_VAR 0 8
57522: NOT
57523: IFFALSE 57527
// continue ;
57525: GO 57423
// for k in factories do
57527: LD_ADDR_VAR 0 6
57531: PUSH
57532: LD_VAR 0 2
57536: PUSH
57537: FOR_IN
57538: IFFALSE 57603
// begin weapons := AvailableWeaponList ( k ) ;
57540: LD_ADDR_VAR 0 9
57544: PUSH
57545: LD_VAR 0 6
57549: PPUSH
57550: CALL_OW 478
57554: ST_TO_ADDR
// if not weapons then
57555: LD_VAR 0 9
57559: NOT
57560: IFFALSE 57564
// continue ;
57562: GO 57537
// if weapon in weapons then
57564: LD_VAR 0 8
57568: PUSH
57569: LD_VAR 0 9
57573: IN
57574: IFFALSE 57601
// begin result := [ i , weapon ] ;
57576: LD_ADDR_VAR 0 3
57580: PUSH
57581: LD_VAR 0 4
57585: PUSH
57586: LD_VAR 0 8
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: ST_TO_ADDR
// exit ;
57595: POP
57596: POP
57597: POP
57598: POP
57599: GO 57609
// end ; end ;
57601: GO 57537
57603: POP
57604: POP
// end ;
57605: GO 57423
57607: POP
57608: POP
// end ;
57609: LD_VAR 0 3
57613: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57614: LD_INT 0
57616: PPUSH
// if not side or side > 8 then
57617: LD_VAR 0 3
57621: NOT
57622: PUSH
57623: LD_VAR 0 3
57627: PUSH
57628: LD_INT 8
57630: GREATER
57631: OR
57632: IFFALSE 57636
// exit ;
57634: GO 57695
// if not range then
57636: LD_VAR 0 4
57640: NOT
57641: IFFALSE 57652
// range := - 12 ;
57643: LD_ADDR_VAR 0 4
57647: PUSH
57648: LD_INT 12
57650: NEG
57651: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57652: LD_VAR 0 1
57656: PPUSH
57657: LD_VAR 0 2
57661: PPUSH
57662: LD_VAR 0 3
57666: PPUSH
57667: LD_VAR 0 4
57671: PPUSH
57672: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57676: LD_VAR 0 1
57680: PPUSH
57681: LD_VAR 0 2
57685: PPUSH
57686: LD_VAR 0 3
57690: PPUSH
57691: CALL_OW 331
// end ;
57695: LD_VAR 0 5
57699: RET
// export function Video ( mode ) ; begin
57700: LD_INT 0
57702: PPUSH
// ingame_video = mode ;
57703: LD_ADDR_OWVAR 52
57707: PUSH
57708: LD_VAR 0 1
57712: ST_TO_ADDR
// interface_hidden = mode ;
57713: LD_ADDR_OWVAR 54
57717: PUSH
57718: LD_VAR 0 1
57722: ST_TO_ADDR
// end ;
57723: LD_VAR 0 2
57727: RET
// export function Join ( array , element ) ; begin
57728: LD_INT 0
57730: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57731: LD_ADDR_VAR 0 3
57735: PUSH
57736: LD_VAR 0 1
57740: PPUSH
57741: LD_VAR 0 1
57745: PUSH
57746: LD_INT 1
57748: PLUS
57749: PPUSH
57750: LD_VAR 0 2
57754: PPUSH
57755: CALL_OW 1
57759: ST_TO_ADDR
// end ;
57760: LD_VAR 0 3
57764: RET
// export function JoinUnion ( array , element ) ; begin
57765: LD_INT 0
57767: PPUSH
// result := array union element ;
57768: LD_ADDR_VAR 0 3
57772: PUSH
57773: LD_VAR 0 1
57777: PUSH
57778: LD_VAR 0 2
57782: UNION
57783: ST_TO_ADDR
// end ;
57784: LD_VAR 0 3
57788: RET
// export function GetBehemoths ( side ) ; begin
57789: LD_INT 0
57791: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57792: LD_ADDR_VAR 0 2
57796: PUSH
57797: LD_INT 22
57799: PUSH
57800: LD_VAR 0 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 31
57811: PUSH
57812: LD_INT 25
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PPUSH
57823: CALL_OW 69
57827: ST_TO_ADDR
// end ;
57828: LD_VAR 0 2
57832: RET
// export function Shuffle ( array ) ; var i , index ; begin
57833: LD_INT 0
57835: PPUSH
57836: PPUSH
57837: PPUSH
// result := [ ] ;
57838: LD_ADDR_VAR 0 2
57842: PUSH
57843: EMPTY
57844: ST_TO_ADDR
// if not array then
57845: LD_VAR 0 1
57849: NOT
57850: IFFALSE 57854
// exit ;
57852: GO 57953
// Randomize ;
57854: CALL_OW 10
// for i = array downto 1 do
57858: LD_ADDR_VAR 0 3
57862: PUSH
57863: DOUBLE
57864: LD_VAR 0 1
57868: INC
57869: ST_TO_ADDR
57870: LD_INT 1
57872: PUSH
57873: FOR_DOWNTO
57874: IFFALSE 57951
// begin index := rand ( 1 , array ) ;
57876: LD_ADDR_VAR 0 4
57880: PUSH
57881: LD_INT 1
57883: PPUSH
57884: LD_VAR 0 1
57888: PPUSH
57889: CALL_OW 12
57893: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57894: LD_ADDR_VAR 0 2
57898: PUSH
57899: LD_VAR 0 2
57903: PPUSH
57904: LD_VAR 0 2
57908: PUSH
57909: LD_INT 1
57911: PLUS
57912: PPUSH
57913: LD_VAR 0 1
57917: PUSH
57918: LD_VAR 0 4
57922: ARRAY
57923: PPUSH
57924: CALL_OW 2
57928: ST_TO_ADDR
// array := Delete ( array , index ) ;
57929: LD_ADDR_VAR 0 1
57933: PUSH
57934: LD_VAR 0 1
57938: PPUSH
57939: LD_VAR 0 4
57943: PPUSH
57944: CALL_OW 3
57948: ST_TO_ADDR
// end ;
57949: GO 57873
57951: POP
57952: POP
// end ;
57953: LD_VAR 0 2
57957: RET
// export function GetBaseMaterials ( base ) ; begin
57958: LD_INT 0
57960: PPUSH
// result := [ 0 , 0 , 0 ] ;
57961: LD_ADDR_VAR 0 2
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// if not base then
57980: LD_VAR 0 1
57984: NOT
57985: IFFALSE 57989
// exit ;
57987: GO 58038
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57989: LD_ADDR_VAR 0 2
57993: PUSH
57994: LD_VAR 0 1
57998: PPUSH
57999: LD_INT 1
58001: PPUSH
58002: CALL_OW 275
58006: PUSH
58007: LD_VAR 0 1
58011: PPUSH
58012: LD_INT 2
58014: PPUSH
58015: CALL_OW 275
58019: PUSH
58020: LD_VAR 0 1
58024: PPUSH
58025: LD_INT 3
58027: PPUSH
58028: CALL_OW 275
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// end ;
58038: LD_VAR 0 2
58042: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58043: LD_INT 0
58045: PPUSH
58046: PPUSH
// result := array ;
58047: LD_ADDR_VAR 0 3
58051: PUSH
58052: LD_VAR 0 1
58056: ST_TO_ADDR
// if size > 0 then
58057: LD_VAR 0 2
58061: PUSH
58062: LD_INT 0
58064: GREATER
58065: IFFALSE 58111
// for i := array downto size do
58067: LD_ADDR_VAR 0 4
58071: PUSH
58072: DOUBLE
58073: LD_VAR 0 1
58077: INC
58078: ST_TO_ADDR
58079: LD_VAR 0 2
58083: PUSH
58084: FOR_DOWNTO
58085: IFFALSE 58109
// result := Delete ( result , result ) ;
58087: LD_ADDR_VAR 0 3
58091: PUSH
58092: LD_VAR 0 3
58096: PPUSH
58097: LD_VAR 0 3
58101: PPUSH
58102: CALL_OW 3
58106: ST_TO_ADDR
58107: GO 58084
58109: POP
58110: POP
// end ;
58111: LD_VAR 0 3
58115: RET
// export function ComExit ( unit ) ; var tmp ; begin
58116: LD_INT 0
58118: PPUSH
58119: PPUSH
// if not IsInUnit ( unit ) then
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 310
58129: NOT
58130: IFFALSE 58134
// exit ;
58132: GO 58194
// tmp := IsInUnit ( unit ) ;
58134: LD_ADDR_VAR 0 3
58138: PUSH
58139: LD_VAR 0 1
58143: PPUSH
58144: CALL_OW 310
58148: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58149: LD_VAR 0 3
58153: PPUSH
58154: CALL_OW 247
58158: PUSH
58159: LD_INT 2
58161: EQUAL
58162: IFFALSE 58175
// ComExitVehicle ( unit ) else
58164: LD_VAR 0 1
58168: PPUSH
58169: CALL_OW 121
58173: GO 58184
// ComExitBuilding ( unit ) ;
58175: LD_VAR 0 1
58179: PPUSH
58180: CALL_OW 122
// result := tmp ;
58184: LD_ADDR_VAR 0 2
58188: PUSH
58189: LD_VAR 0 3
58193: ST_TO_ADDR
// end ;
58194: LD_VAR 0 2
58198: RET
// export function ResetHc ; begin
58199: LD_INT 0
58201: PPUSH
// InitHc ;
58202: CALL_OW 19
// hc_importance := 0 ;
58206: LD_ADDR_OWVAR 32
58210: PUSH
58211: LD_INT 0
58213: ST_TO_ADDR
// end ;
58214: LD_VAR 0 1
58218: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58219: LD_INT 0
58221: PPUSH
58222: PPUSH
58223: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58224: LD_ADDR_VAR 0 6
58228: PUSH
58229: LD_VAR 0 1
58233: PUSH
58234: LD_VAR 0 3
58238: PLUS
58239: PUSH
58240: LD_INT 2
58242: DIV
58243: ST_TO_ADDR
// if _x < 0 then
58244: LD_VAR 0 6
58248: PUSH
58249: LD_INT 0
58251: LESS
58252: IFFALSE 58269
// _x := _x * - 1 ;
58254: LD_ADDR_VAR 0 6
58258: PUSH
58259: LD_VAR 0 6
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: MUL
58268: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58269: LD_ADDR_VAR 0 7
58273: PUSH
58274: LD_VAR 0 2
58278: PUSH
58279: LD_VAR 0 4
58283: PLUS
58284: PUSH
58285: LD_INT 2
58287: DIV
58288: ST_TO_ADDR
// if _y < 0 then
58289: LD_VAR 0 7
58293: PUSH
58294: LD_INT 0
58296: LESS
58297: IFFALSE 58314
// _y := _y * - 1 ;
58299: LD_ADDR_VAR 0 7
58303: PUSH
58304: LD_VAR 0 7
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: MUL
58313: ST_TO_ADDR
// result := [ _x , _y ] ;
58314: LD_ADDR_VAR 0 5
58318: PUSH
58319: LD_VAR 0 6
58323: PUSH
58324: LD_VAR 0 7
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: ST_TO_ADDR
// end ;
58333: LD_VAR 0 5
58337: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58338: LD_INT 0
58340: PPUSH
58341: PPUSH
58342: PPUSH
58343: PPUSH
// task := GetTaskList ( unit ) ;
58344: LD_ADDR_VAR 0 7
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 437
58358: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58359: LD_VAR 0 7
58363: NOT
58364: PUSH
58365: LD_VAR 0 1
58369: PPUSH
58370: LD_VAR 0 2
58374: PPUSH
58375: CALL_OW 308
58379: NOT
58380: AND
58381: IFFALSE 58385
// exit ;
58383: GO 58503
// if IsInArea ( unit , area ) then
58385: LD_VAR 0 1
58389: PPUSH
58390: LD_VAR 0 2
58394: PPUSH
58395: CALL_OW 308
58399: IFFALSE 58417
// begin ComMoveToArea ( unit , goAway ) ;
58401: LD_VAR 0 1
58405: PPUSH
58406: LD_VAR 0 3
58410: PPUSH
58411: CALL_OW 113
// exit ;
58415: GO 58503
// end ; if task [ 1 ] [ 1 ] <> M then
58417: LD_VAR 0 7
58421: PUSH
58422: LD_INT 1
58424: ARRAY
58425: PUSH
58426: LD_INT 1
58428: ARRAY
58429: PUSH
58430: LD_STRING M
58432: NONEQUAL
58433: IFFALSE 58437
// exit ;
58435: GO 58503
// x := task [ 1 ] [ 2 ] ;
58437: LD_ADDR_VAR 0 5
58441: PUSH
58442: LD_VAR 0 7
58446: PUSH
58447: LD_INT 1
58449: ARRAY
58450: PUSH
58451: LD_INT 2
58453: ARRAY
58454: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58455: LD_ADDR_VAR 0 6
58459: PUSH
58460: LD_VAR 0 7
58464: PUSH
58465: LD_INT 1
58467: ARRAY
58468: PUSH
58469: LD_INT 3
58471: ARRAY
58472: ST_TO_ADDR
// if InArea ( x , y , area ) then
58473: LD_VAR 0 5
58477: PPUSH
58478: LD_VAR 0 6
58482: PPUSH
58483: LD_VAR 0 2
58487: PPUSH
58488: CALL_OW 309
58492: IFFALSE 58503
// ComStop ( unit ) ;
58494: LD_VAR 0 1
58498: PPUSH
58499: CALL_OW 141
// end ;
58503: LD_VAR 0 4
58507: RET
