// var am , oth ; var john , joan , sik , lucy , grant , will , phi , off , others , budovy ; var joanok , oothersok , buildingsok , killhim , buildinglives ; var disable_07 , debug , follow ; starting begin randomizeall ;
   0: CALL_OW 11
// am = 1 ;
   4: LD_ADDR_LOC 1
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// oth = 4 ;
  12: LD_ADDR_LOC 2
  16: PUSH
  17: LD_INT 4
  19: ST_TO_ADDR
// revealfogarea ( am , rev ) ;
  20: LD_LOC 1
  24: PPUSH
  25: LD_INT 5
  27: PPUSH
  28: CALL_OW 332
// ingame_video = true ;
  32: LD_ADDR_OWVAR 52
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// interface_hidden = true ;
  40: LD_ADDR_OWVAR 54
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// debug = false ;
  48: LD_ADDR_LOC 19
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// joanok = true ;
  56: LD_ADDR_LOC 13
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// oothersok = true ;
  64: LD_ADDR_LOC 14
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// buildingsok = true ;
  72: LD_ADDR_LOC 15
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// killhim = false ;
  80: LD_ADDR_LOC 16
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// budovy = [ depot1 , depot2 , depot3 , lab1 , arm1 , arm2 , eon ] ;
  88: LD_ADDR_LOC 12
  92: PUSH
  93: LD_INT 9
  95: PUSH
  96: LD_INT 10
  98: PUSH
  99: LD_INT 11
 101: PUSH
 102: LD_INT 8
 104: PUSH
 105: LD_INT 12
 107: PUSH
 108: LD_INT 13
 110: PUSH
 111: LD_INT 14
 113: PUSH
 114: EMPTY
 115: LIST
 116: LIST
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: ST_TO_ADDR
// CreatePersonnel ;
 123: CALL 3955 0 0
// disable ( 01 ) ;
 127: LD_INT 1
 129: DISABLE_MARKED
// disable ( 02 ) ;
 130: LD_INT 2
 132: DISABLE_MARKED
// disable ( 03 ) ;
 133: LD_INT 3
 135: DISABLE_MARKED
// disable ( 04 ) ;
 136: LD_INT 4
 138: DISABLE_MARKED
// disable ( 05 ) ;
 139: LD_INT 5
 141: DISABLE_MARKED
// disable_07 = false ;
 142: LD_ADDR_LOC 18
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// uc_side = am ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_LOC 1
 159: ST_TO_ADDR
// john = newcharacter ( JMM ) ;
 160: LD_ADDR_LOC 3
 164: PUSH
 165: LD_STRING JMM
 167: PPUSH
 168: CALL_OW 25
 172: ST_TO_ADDR
// uc_side = oth ;
 173: LD_ADDR_OWVAR 20
 177: PUSH
 178: LD_LOC 2
 182: ST_TO_ADDR
// joan = newcharacter ( Joan ) ;
 183: LD_ADDR_LOC 4
 187: PUSH
 188: LD_STRING Joan
 190: PPUSH
 191: CALL_OW 25
 195: ST_TO_ADDR
// lucy = newcharacter ( Donaldson ) ;
 196: LD_ADDR_LOC 6
 200: PUSH
 201: LD_STRING Donaldson
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// grant = newcharacter ( Gary ) ;
 209: LD_ADDR_LOC 7
 213: PUSH
 214: LD_STRING Gary
 216: PPUSH
 217: CALL_OW 25
 221: ST_TO_ADDR
// sik = newcharacter ( Sikorski ) ;
 222: LD_ADDR_LOC 5
 226: PUSH
 227: LD_STRING Sikorski
 229: PPUSH
 230: CALL_OW 25
 234: ST_TO_ADDR
// will = newcharacter ( Williams ) ;
 235: LD_ADDR_LOC 8
 239: PUSH
 240: LD_STRING Williams
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// phi = newcharacter ( Phillips ) ;
 248: LD_ADDR_LOC 9
 252: PUSH
 253: LD_STRING Phillips
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// off = newcharacter ( Officer ) ;
 261: LD_ADDR_LOC 10
 265: PUSH
 266: LD_STRING Officer
 268: PPUSH
 269: CALL_OW 25
 273: ST_TO_ADDR
// CreateOfficer2 ;
 274: CALL 3812 0 0
// others = [ lucy , grant , sik , will , phi ] ;
 278: LD_ADDR_LOC 11
 282: PUSH
 283: LD_LOC 6
 287: PUSH
 288: LD_LOC 7
 292: PUSH
 293: LD_LOC 5
 297: PUSH
 298: LD_LOC 8
 302: PUSH
 303: LD_LOC 9
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: ST_TO_ADDR
// placeunitxy ( off , 49 , 37 , false ) ;
 315: LD_LOC 10
 319: PPUSH
 320: LD_INT 49
 322: PPUSH
 323: LD_INT 37
 325: PPUSH
 326: LD_INT 0
 328: PPUSH
 329: CALL_OW 48
// placeunitxyr ( off2 , 74 , 32 , 3 , false ) ;
 333: LD_EXP 1
 337: PPUSH
 338: LD_INT 74
 340: PPUSH
 341: LD_INT 32
 343: PPUSH
 344: LD_INT 3
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 50
// PlaceHumanInUnit ( john , arm1 ) ;
 354: LD_LOC 3
 358: PPUSH
 359: LD_INT 12
 361: PPUSH
 362: CALL_OW 52
// PlaceHumanInUnit ( lucy , arm1 ) ;
 366: LD_LOC 6
 370: PPUSH
 371: LD_INT 12
 373: PPUSH
 374: CALL_OW 52
// PlaceHumanInUnit ( grant , arm1 ) ;
 378: LD_LOC 7
 382: PPUSH
 383: LD_INT 12
 385: PPUSH
 386: CALL_OW 52
// PlaceHumanInUnit ( sik , arm1 ) ;
 390: LD_LOC 5
 394: PPUSH
 395: LD_INT 12
 397: PPUSH
 398: CALL_OW 52
// PlaceHumanInUnit ( will , arm1 ) ;
 402: LD_LOC 8
 406: PPUSH
 407: LD_INT 12
 409: PPUSH
 410: CALL_OW 52
// PlaceHumanInUnit ( phi , arm1 ) ;
 414: LD_LOC 9
 418: PPUSH
 419: LD_INT 12
 421: PPUSH
 422: CALL_OW 52
// comhold ( others ^ [ off , off2 ] ) ;
 426: LD_LOC 11
 430: PUSH
 431: LD_LOC 10
 435: PUSH
 436: LD_EXP 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: ADD
 445: PPUSH
 446: CALL_OW 140
// AddComTurnXY ( off2 , 67 , 52 ) ;
 450: LD_EXP 1
 454: PPUSH
 455: LD_INT 67
 457: PPUSH
 458: LD_INT 52
 460: PPUSH
 461: CALL_OW 178
// placeunitxy ( joan , 40 , 32 , false ) ;
 465: LD_LOC 4
 469: PPUSH
 470: LD_INT 40
 472: PPUSH
 473: LD_INT 32
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// comhold ( [ joan , john ] ) ;
 483: LD_LOC 4
 487: PUSH
 488: LD_LOC 3
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PPUSH
 497: CALL_OW 140
// centernowonXY ( 48 , 38 ) ;
 501: LD_INT 48
 503: PPUSH
 504: LD_INT 38
 506: PPUSH
 507: CALL_OW 86
// commovexy ( joan , 47 , 41 ) ;
 511: LD_LOC 4
 515: PPUSH
 516: LD_INT 47
 518: PPUSH
 519: LD_INT 41
 521: PPUSH
 522: CALL_OW 111
// AddComTurnUnit ( joan , john ) ;
 526: LD_LOC 4
 530: PPUSH
 531: LD_LOC 3
 535: PPUSH
 536: CALL_OW 179
// ComMoveXY ( off , 49 , 41 ) ;
 540: LD_LOC 10
 544: PPUSH
 545: LD_INT 49
 547: PPUSH
 548: LD_INT 41
 550: PPUSH
 551: CALL_OW 111
// AddComTurnXY ( off , 51 , 42 ) ;
 555: LD_LOC 10
 559: PPUSH
 560: LD_INT 51
 562: PPUSH
 563: LD_INT 42
 565: PPUSH
 566: CALL_OW 178
// wait ( 0 0$3 ) ;
 570: LD_INT 105
 572: PPUSH
 573: CALL_OW 67
// say ( off , DX1-Off-1 ) ;
 577: LD_LOC 10
 581: PPUSH
 582: LD_STRING DX1-Off-1
 584: PPUSH
 585: CALL_OW 88
// ComMoveXY ( off , 51 , 38 ) ;
 589: LD_LOC 10
 593: PPUSH
 594: LD_INT 51
 596: PPUSH
 597: LD_INT 38
 599: PPUSH
 600: CALL_OW 111
// ComMoveXY ( john , 50 , 39 ) ;
 604: LD_LOC 3
 608: PPUSH
 609: LD_INT 50
 611: PPUSH
 612: LD_INT 39
 614: PPUSH
 615: CALL_OW 111
// ComMoveXY ( lucy , 51 , 40 ) ;
 619: LD_LOC 6
 623: PPUSH
 624: LD_INT 51
 626: PPUSH
 627: LD_INT 40
 629: PPUSH
 630: CALL_OW 111
// ComMoveXY ( grant , 52 , 41 ) ;
 634: LD_LOC 7
 638: PPUSH
 639: LD_INT 52
 641: PPUSH
 642: LD_INT 41
 644: PPUSH
 645: CALL_OW 111
// wait ( 0 0$1 ) ;
 649: LD_INT 35
 651: PPUSH
 652: CALL_OW 67
// ComMoveXY ( sik , 50 , 40 ) ;
 656: LD_LOC 5
 660: PPUSH
 661: LD_INT 50
 663: PPUSH
 664: LD_INT 40
 666: PPUSH
 667: CALL_OW 111
// ComMoveXY ( will , 51 , 41 ) ;
 671: LD_LOC 8
 675: PPUSH
 676: LD_INT 51
 678: PPUSH
 679: LD_INT 41
 681: PPUSH
 682: CALL_OW 111
// ComMoveXY ( phi , 52 , 42 ) ;
 686: LD_LOC 9
 690: PPUSH
 691: LD_INT 52
 693: PPUSH
 694: LD_INT 42
 696: PPUSH
 697: CALL_OW 111
// AddComTurnXY ( off , 50 , 47 ) ;
 701: LD_LOC 10
 705: PPUSH
 706: LD_INT 50
 708: PPUSH
 709: LD_INT 47
 711: PPUSH
 712: CALL_OW 178
// AddComTurnXY ( john , 65 , 25 ) ;
 716: LD_LOC 3
 720: PPUSH
 721: LD_INT 65
 723: PPUSH
 724: LD_INT 25
 726: PPUSH
 727: CALL_OW 178
// AddComTurnXY ( lucy , 65 , 25 ) ;
 731: LD_LOC 6
 735: PPUSH
 736: LD_INT 65
 738: PPUSH
 739: LD_INT 25
 741: PPUSH
 742: CALL_OW 178
// AddComTurnXY ( grant , 65 , 25 ) ;
 746: LD_LOC 7
 750: PPUSH
 751: LD_INT 65
 753: PPUSH
 754: LD_INT 25
 756: PPUSH
 757: CALL_OW 178
// AddComTurnXY ( sik , 65 , 25 ) ;
 761: LD_LOC 5
 765: PPUSH
 766: LD_INT 65
 768: PPUSH
 769: LD_INT 25
 771: PPUSH
 772: CALL_OW 178
// AddComTurnXY ( will , 65 , 25 ) ;
 776: LD_LOC 8
 780: PPUSH
 781: LD_INT 65
 783: PPUSH
 784: LD_INT 25
 786: PPUSH
 787: CALL_OW 178
// AddComTurnXY ( phi , 65 , 25 ) ;
 791: LD_LOC 9
 795: PPUSH
 796: LD_INT 65
 798: PPUSH
 799: LD_INT 25
 801: PPUSH
 802: CALL_OW 178
// wait ( 0 0$2 ) ;
 806: LD_INT 70
 808: PPUSH
 809: CALL_OW 67
// say ( off , DX1-Off-1a ) ;
 813: LD_LOC 10
 817: PPUSH
 818: LD_STRING DX1-Off-1a
 820: PPUSH
 821: CALL_OW 88
// commovexy ( others , 75 , 36 ) ;
 825: LD_LOC 11
 829: PPUSH
 830: LD_INT 75
 832: PPUSH
 833: LD_INT 36
 835: PPUSH
 836: CALL_OW 111
// commovexy ( off , 71 , 34 ) ;
 840: LD_LOC 10
 844: PPUSH
 845: LD_INT 71
 847: PPUSH
 848: LD_INT 34
 850: PPUSH
 851: CALL_OW 111
// commovexy ( john , 53 , 44 ) ;
 855: LD_LOC 3
 859: PPUSH
 860: LD_INT 53
 862: PPUSH
 863: LD_INT 44
 865: PPUSH
 866: CALL_OW 111
// wait ( 0 0$1 ) ;
 870: LD_INT 35
 872: PPUSH
 873: CALL_OW 67
// commovexy ( joan , 50 , 41 ) ;
 877: LD_LOC 4
 881: PPUSH
 882: LD_INT 50
 884: PPUSH
 885: LD_INT 41
 887: PPUSH
 888: CALL_OW 111
// addcomturnunit ( john , joan ) ;
 892: LD_LOC 3
 896: PPUSH
 897: LD_LOC 4
 901: PPUSH
 902: CALL_OW 179
// addcomturnunit ( joan , john ) ;
 906: LD_LOC 4
 910: PPUSH
 911: LD_LOC 3
 915: PPUSH
 916: CALL_OW 179
// wait ( 0 0$5 ) ;
 920: LD_INT 175
 922: PPUSH
 923: CALL_OW 67
// say ( john , DX1-JMM-1 ) ;
 927: LD_LOC 3
 931: PPUSH
 932: LD_STRING DX1-JMM-1
 934: PPUSH
 935: CALL_OW 88
// say ( joan , DX1-Joan-1 ) ;
 939: LD_LOC 4
 943: PPUSH
 944: LD_STRING DX1-Joan-1
 946: PPUSH
 947: CALL_OW 88
// say ( john , DX1-JMM-2 ) ;
 951: LD_LOC 3
 955: PPUSH
 956: LD_STRING DX1-JMM-2
 958: PPUSH
 959: CALL_OW 88
// say ( joan , DX1-Joan-2 ) ;
 963: LD_LOC 4
 967: PPUSH
 968: LD_STRING DX1-Joan-2
 970: PPUSH
 971: CALL_OW 88
// say ( john , DX1-JMM-3 ) ;
 975: LD_LOC 3
 979: PPUSH
 980: LD_STRING DX1-JMM-3
 982: PPUSH
 983: CALL_OW 88
// say ( joan , DX1-Joan-3 ) ;
 987: LD_LOC 4
 991: PPUSH
 992: LD_STRING DX1-Joan-3
 994: PPUSH
 995: CALL_OW 88
// say ( john , DX1-JMM-4 ) ;
 999: LD_LOC 3
1003: PPUSH
1004: LD_STRING DX1-JMM-4
1006: PPUSH
1007: CALL_OW 88
// follow = true ;
1011: LD_ADDR_LOC 20
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// wait ( 0 0$0.3 ) ;
1019: LD_INT 10
1021: PPUSH
1022: CALL_OW 67
// changemissionobjectives ( M0 ) ;
1026: LD_STRING M0
1028: PPUSH
1029: CALL_OW 337
// ingame_video = false ;
1033: LD_ADDR_OWVAR 52
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// interface_hidden = false ;
1041: LD_ADDR_OWVAR 54
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// wait ( 0 0$1 ) ;
1049: LD_INT 35
1051: PPUSH
1052: CALL_OW 67
// wait ( 0 0$1 ) ;
1056: LD_INT 35
1058: PPUSH
1059: CALL_OW 67
// enable ( 01 ) ;
1063: LD_INT 1
1065: ENABLE_MARKED
// enable ( 02 ) ;
1066: LD_INT 2
1068: ENABLE_MARKED
// enable ( 03 ) ;
1069: LD_INT 3
1071: ENABLE_MARKED
// enable ( 04 ) ;
1072: LD_INT 4
1074: ENABLE_MARKED
// enable ( 05 ) ;
1075: LD_INT 5
1077: ENABLE_MARKED
// end ;
1078: END
// every 0 0$3 trigger follow do var i ;
1079: LD_LOC 20
1083: IFFALSE 1130
1085: GO 1087
1087: DISABLE
1088: LD_INT 0
1090: PPUSH
// begin for i in FilterAllUnits ( [ f_class , 2 ] ) do
1091: LD_ADDR_VAR 0 1
1095: PUSH
1096: LD_INT 25
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PPUSH
1106: CALL_OW 69
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1128
// ComEnterUnit ( i , depot2 ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_INT 10
1121: PPUSH
1122: CALL_OW 120
1126: GO 1111
1128: POP
1129: POP
// end ;
1130: PPOPN 1
1132: END
// every 0 0$0.5 trigger ( not killhim ) and follow do var tmp , tmp2 , tmp3 , x , y , px , py , dir ;
1133: LD_LOC 16
1137: NOT
1138: PUSH
1139: LD_LOC 20
1143: AND
1144: IFFALSE 1437
1146: GO 1148
1148: DISABLE
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
// begin tmp = getdistunits ( john , joan ) ;
1159: LD_ADDR_VAR 0 1
1163: PUSH
1164: LD_LOC 3
1168: PPUSH
1169: LD_LOC 4
1173: PPUSH
1174: CALL_OW 296
1178: ST_TO_ADDR
// x = getx ( john ) ;
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_LOC 3
1188: PPUSH
1189: CALL_OW 250
1193: ST_TO_ADDR
// y = gety ( john ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_LOC 3
1203: PPUSH
1204: CALL_OW 251
1208: ST_TO_ADDR
// tmp2 = [ ] ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: EMPTY
1215: ST_TO_ADDR
// tmp3 = [ ] ;
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// if tmp >= 7 then
1223: LD_VAR 0 1
1227: PUSH
1228: LD_INT 7
1230: GREATEREQUAL
1231: IFFALSE 1436
// begin for dir = 0 to 5 do
1233: LD_ADDR_VAR 0 8
1237: PUSH
1238: DOUBLE
1239: LD_INT 0
1241: DEC
1242: ST_TO_ADDR
1243: LD_INT 5
1245: PUSH
1246: FOR_TO
1247: IFFALSE 1387
// begin px = shiftx ( x , dir , tmp - 2 ) ;
1249: LD_ADDR_VAR 0 6
1253: PUSH
1254: LD_VAR 0 4
1258: PPUSH
1259: LD_VAR 0 8
1263: PPUSH
1264: LD_VAR 0 1
1268: PUSH
1269: LD_INT 2
1271: MINUS
1272: PPUSH
1273: CALL_OW 272
1277: ST_TO_ADDR
// py = shifty ( y , dir , tmp - 2 ) ;
1278: LD_ADDR_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: PPUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 1
1297: PUSH
1298: LD_INT 2
1300: MINUS
1301: PPUSH
1302: CALL_OW 273
1306: ST_TO_ADDR
// if ValidHex ( px , py ) then
1307: LD_VAR 0 6
1311: PPUSH
1312: LD_VAR 0 7
1316: PPUSH
1317: CALL_OW 488
1321: IFFALSE 1385
// begin tmp2 = tmp2 ^ [ [ px , py ] ] ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_VAR 0 6
1337: PUSH
1338: LD_VAR 0 7
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: ADD
1350: ST_TO_ADDR
// tmp3 = tmp3 ^ [ getdistunitxy ( joan , px , py ) ] ;
1351: LD_ADDR_VAR 0 3
1355: PUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_LOC 4
1365: PPUSH
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 7
1375: PPUSH
1376: CALL_OW 297
1380: PUSH
1381: EMPTY
1382: LIST
1383: ADD
1384: ST_TO_ADDR
// end end ;
1385: GO 1246
1387: POP
1388: POP
// tmp = bestfromlistbylist ( tmp2 , tmp3 ) ;
1389: LD_ADDR_VAR 0 1
1393: PUSH
1394: LD_VAR 0 2
1398: PPUSH
1399: LD_VAR 0 3
1403: PPUSH
1404: CALL_OW 79
1408: ST_TO_ADDR
// commovexy ( joan , tmp [ 1 ] , tmp [ 2 ] ) ;
1409: LD_LOC 4
1413: PPUSH
1414: LD_VAR 0 1
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_VAR 0 1
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// end ; enable ;
1436: ENABLE
// end ;
1437: PPOPN 8
1439: END
// on destinationunreachable ( un ) do if un = joan then
1440: LD_VAR 0 1
1444: PUSH
1445: LD_LOC 4
1449: EQUAL
1450: IFFALSE 1481
// commovexy ( joan , getx ( john ) , gety ( john ) ) ;
1452: LD_LOC 4
1456: PPUSH
1457: LD_LOC 3
1461: PPUSH
1462: CALL_OW 250
1466: PPUSH
1467: LD_LOC 3
1471: PPUSH
1472: CALL_OW 251
1476: PPUSH
1477: CALL_OW 111
1481: PPOPN 1
1483: END
// every 0 0$0.4 trigger crawls ( john ) marked 04 do
1484: LD_LOC 3
1488: PPUSH
1489: CALL_OW 318
1493: IFFALSE 1524
1495: GO 1497
1497: DISABLE
// begin if not killhim then
1498: LD_LOC 16
1502: NOT
1503: IFFALSE 1517
// say ( joan , DXComments-Joan-1 ) ;
1505: LD_LOC 4
1509: PPUSH
1510: LD_STRING DXComments-Joan-1
1512: PPUSH
1513: CALL_OW 88
// SetAchievement ( ACH_TROLL ) ;
1517: LD_STRING ACH_TROLL
1519: PPUSH
1520: CALL_OW 543
// end ;
1524: END
// every 0 0$0.4 + 2 trigger isinarea ( john , zapad ) marked 05 do
1525: LD_LOC 3
1529: PPUSH
1530: LD_INT 2
1532: PPUSH
1533: CALL_OW 308
1537: IFFALSE 1561
1539: GO 1541
1541: DISABLE
// begin if not killhim then
1542: LD_LOC 16
1546: NOT
1547: IFFALSE 1561
// say ( joan , DXComments-Joan-1a ) ;
1549: LD_LOC 4
1553: PPUSH
1554: LD_STRING DXComments-Joan-1a
1556: PPUSH
1557: CALL_OW 88
// end ;
1561: END
// every 0 0$1 + 1 1$10 marked 29 do
1562: GO 1564
1564: DISABLE
// begin if not isinarea ( john , okolieonu ) then
1565: LD_LOC 3
1569: PPUSH
1570: LD_INT 3
1572: PPUSH
1573: CALL_OW 308
1577: NOT
1578: IFFALSE 1601
// begin if not killhim then
1580: LD_LOC 16
1584: NOT
1585: IFFALSE 1599
// say ( joan , DXComments-Joan-1b ) ;
1587: LD_LOC 4
1591: PPUSH
1592: LD_STRING DXComments-Joan-1b
1594: PPUSH
1595: CALL_OW 88
// end else
1599: GO 1602
// enable ;
1601: ENABLE
// end ;
1602: END
// every 0 0$0.3 trigger not killhim marked 097 do
1603: LD_LOC 16
1607: NOT
1608: IFFALSE 2124
1610: GO 1612
1612: DISABLE
// begin if joanok then
1613: LD_LOC 13
1617: IFFALSE 1792
// if getlives ( joan ) < 1000 then
1619: LD_LOC 4
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 1000
1631: LESS
1632: IFFALSE 1792
// begin if debug then
1634: LD_LOC 19
1638: IFFALSE 1658
// msg ( joan:  & getlives ( joan ) ) ;
1640: LD_STRING joan: 
1642: PUSH
1643: LD_LOC 4
1647: PPUSH
1648: CALL_OW 256
1652: STR
1653: PPUSH
1654: CALL_OW 100
// comhold ( joan ) ;
1658: LD_LOC 4
1662: PPUSH
1663: CALL_OW 140
// dialogueon ;
1667: CALL_OW 6
// say ( joan , DXAttack-Joan-1 ) ;
1671: LD_LOC 4
1675: PPUSH
1676: LD_STRING DXAttack-Joan-1
1678: PPUSH
1679: CALL_OW 88
// killhim = true ;
1683: LD_ADDR_LOC 16
1687: PUSH
1688: LD_INT 1
1690: ST_TO_ADDR
// music_class = 1 ;
1691: LD_ADDR_OWVAR 72
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
1699: LD_LOC 4
1703: PPUSH
1704: LD_LOC 5
1708: PPUSH
1709: CALL_OW 250
1713: PPUSH
1714: LD_LOC 5
1718: PPUSH
1719: CALL_OW 251
1723: PPUSH
1724: CALL_OW 111
// wait ( 0 0$1 ) ;
1728: LD_INT 35
1730: PPUSH
1731: CALL_OW 67
// setattitude ( am , oth , att_enemy , true ) ;
1735: LD_LOC 1
1739: PPUSH
1740: LD_LOC 2
1744: PPUSH
1745: LD_INT 2
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1755: LD_LOC 11
1759: PUSH
1760: LD_LOC 10
1764: PUSH
1765: LD_EXP 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: ADD
1774: PPUSH
1775: LD_LOC 3
1779: PPUSH
1780: CALL_OW 115
// joanok = false ;
1784: LD_ADDR_LOC 13
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// end ; if oothersok then
1792: LD_LOC 14
1796: IFFALSE 1991
// if getlives ( others ^ [ off , off2 ] ) < 1000 then
1798: LD_LOC 11
1802: PUSH
1803: LD_LOC 10
1807: PUSH
1808: LD_EXP 1
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: ADD
1817: PPUSH
1818: CALL_OW 256
1822: PUSH
1823: LD_INT 1000
1825: LESS
1826: IFFALSE 1991
// begin if debug then
1828: LD_LOC 19
1832: IFFALSE 1861
// msg ( others+off:  & getlives ( others ^ [ off ] ) ) ;
1834: LD_STRING others+off: 
1836: PUSH
1837: LD_LOC 11
1841: PUSH
1842: LD_LOC 10
1846: PUSH
1847: EMPTY
1848: LIST
1849: ADD
1850: PPUSH
1851: CALL_OW 256
1855: STR
1856: PPUSH
1857: CALL_OW 100
// comhold ( others ^ [ off ] ) ;
1861: LD_LOC 11
1865: PUSH
1866: LD_LOC 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: ADD
1874: PPUSH
1875: CALL_OW 140
// dialogueon ;
1879: CALL_OW 6
// say ( joan , DXAttack-Joan-1a ) ;
1883: LD_LOC 4
1887: PPUSH
1888: LD_STRING DXAttack-Joan-1a
1890: PPUSH
1891: CALL_OW 88
// wait ( 0 0$0.7 ) ;
1895: LD_INT 24
1897: PPUSH
1898: CALL_OW 67
// killhim = true ;
1902: LD_ADDR_LOC 16
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// music_class = 1 ;
1910: LD_ADDR_OWVAR 72
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
1918: LD_LOC 5
1922: PPUSH
1923: LD_STRING DXAttack-Sik-1
1925: PPUSH
1926: CALL_OW 88
// dialogueoff ;
1930: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
1934: LD_LOC 1
1938: PPUSH
1939: LD_LOC 2
1943: PPUSH
1944: LD_INT 2
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
1954: LD_LOC 11
1958: PUSH
1959: LD_LOC 10
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: ADD
1973: PPUSH
1974: LD_LOC 3
1978: PPUSH
1979: CALL_OW 115
// oothersok = false ;
1983: LD_ADDR_LOC 14
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// end ; if buildingsok then
1991: LD_LOC 15
1995: IFFALSE 2116
// if getlives ( budovy ) < 1000 then
1997: LD_LOC 12
2001: PPUSH
2002: CALL_OW 256
2006: PUSH
2007: LD_INT 1000
2009: LESS
2010: IFFALSE 2116
// begin if debug then
2012: LD_LOC 19
2016: IFFALSE 2036
// msg ( budovy:  & getlives ( budovy ) ) ;
2018: LD_STRING budovy: 
2020: PUSH
2021: LD_LOC 12
2025: PPUSH
2026: CALL_OW 256
2030: STR
2031: PPUSH
2032: CALL_OW 100
// dialogueon ;
2036: CALL_OW 6
// say ( joan , DXAttack-Joan-1b ) ;
2040: LD_LOC 4
2044: PPUSH
2045: LD_STRING DXAttack-Joan-1b
2047: PPUSH
2048: CALL_OW 88
// dialogueoff ;
2052: CALL_OW 7
// follow = false ;
2056: LD_ADDR_LOC 20
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// commovexy ( joan , getx ( sik ) , gety ( sik ) ) ;
2064: LD_LOC 4
2068: PPUSH
2069: LD_LOC 5
2073: PPUSH
2074: CALL_OW 250
2078: PPUSH
2079: LD_LOC 5
2083: PPUSH
2084: CALL_OW 251
2088: PPUSH
2089: CALL_OW 111
// buildingsok = false ;
2093: LD_ADDR_LOC 15
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// buildinglives = getlives ( budovy ) ;
2101: LD_ADDR_LOC 17
2105: PUSH
2106: LD_LOC 12
2110: PPUSH
2111: CALL_OW 256
2115: ST_TO_ADDR
// end ; if not killhim then
2116: LD_LOC 16
2120: NOT
2121: IFFALSE 2124
// enable ;
2123: ENABLE
// end ;
2124: END
// every 0 0$0.3 trigger ( not buildingsok ) and ( not killhim ) marked 06 do
2125: LD_LOC 15
2129: NOT
2130: PUSH
2131: LD_LOC 16
2135: NOT
2136: AND
2137: IFFALSE 2260
2139: GO 2141
2141: DISABLE
// begin if buildinglives - getlives ( budovy ) > 7 then
2142: LD_LOC 17
2146: PUSH
2147: LD_LOC 12
2151: PPUSH
2152: CALL_OW 256
2156: MINUS
2157: PUSH
2158: LD_INT 7
2160: GREATER
2161: IFFALSE 2259
// begin disable ( 097 ) ;
2163: LD_INT 97
2165: DISABLE_MARKED
// disable_07 = true ;
2166: LD_ADDR_LOC 18
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// dialogueon ;
2174: CALL_OW 6
// music_class = 1 ;
2178: LD_ADDR_OWVAR 72
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2186: LD_LOC 5
2190: PPUSH
2191: LD_STRING DXAttack-Sik-1
2193: PPUSH
2194: CALL_OW 88
// dialogueoff ;
2198: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2202: LD_LOC 1
2206: PPUSH
2207: LD_LOC 2
2211: PPUSH
2212: LD_INT 2
2214: PPUSH
2215: LD_INT 1
2217: PPUSH
2218: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2222: LD_LOC 11
2226: PUSH
2227: LD_LOC 10
2231: PUSH
2232: LD_EXP 1
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: ADD
2241: PPUSH
2242: LD_LOC 3
2246: PPUSH
2247: CALL_OW 115
// killhim = true ;
2251: LD_ADDR_LOC 16
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// end ; enable ;
2259: ENABLE
// end ;
2260: END
// every 0 0$0.3 trigger IsInUnit ( john ) = truck and ( not killhim ) do
2261: LD_LOC 3
2265: PPUSH
2266: CALL_OW 310
2270: PUSH
2271: LD_INT 27
2273: EQUAL
2274: PUSH
2275: LD_LOC 16
2279: NOT
2280: AND
2281: IFFALSE 2382
2283: GO 2285
2285: DISABLE
// begin disable ( 097 ) ;
2286: LD_INT 97
2288: DISABLE_MARKED
// disable_07 = true ;
2289: LD_ADDR_LOC 18
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// dialogueon ;
2297: CALL_OW 6
// music_class = 1 ;
2301: LD_ADDR_OWVAR 72
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2309: LD_LOC 5
2313: PPUSH
2314: LD_STRING DXAttack-Sik-1
2316: PPUSH
2317: CALL_OW 88
// dialogueoff ;
2321: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2325: LD_LOC 1
2329: PPUSH
2330: LD_LOC 2
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2345: LD_LOC 11
2349: PUSH
2350: LD_LOC 10
2354: PUSH
2355: LD_EXP 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ADD
2364: PPUSH
2365: LD_LOC 3
2369: PPUSH
2370: CALL_OW 115
// killhim = true ;
2374: LD_ADDR_LOC 16
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// end ;
2382: END
// on unitgoestored ( un ) do if un = john then
2383: LD_VAR 0 1
2387: PUSH
2388: LD_LOC 3
2392: EQUAL
2393: IFFALSE 2484
// begin commovexy ( off , getx ( john ) , gety ( john ) ) ;
2395: LD_LOC 10
2399: PPUSH
2400: LD_LOC 3
2404: PPUSH
2405: CALL_OW 250
2409: PPUSH
2410: LD_LOC 3
2414: PPUSH
2415: CALL_OW 251
2419: PPUSH
2420: CALL_OW 111
// wait ( 0 0$1 ) ;
2424: LD_INT 35
2426: PPUSH
2427: CALL_OW 67
// InGameOn ;
2431: CALL_OW 8
// SetLives ( john , 240 ) ;
2435: LD_LOC 3
2439: PPUSH
2440: LD_INT 240
2442: PPUSH
2443: CALL_OW 234
// SetSide ( john , 8 ) ;
2447: LD_LOC 3
2451: PPUSH
2452: LD_INT 8
2454: PPUSH
2455: CALL_OW 235
// say ( off , DXAttack-Off-1 ) ;
2459: LD_LOC 10
2463: PPUSH
2464: LD_STRING DXAttack-Off-1
2466: PPUSH
2467: CALL_OW 88
// InGameOff ;
2471: CALL_OW 9
// youlost ( Dissmiss ) ;
2475: LD_STRING Dissmiss
2477: PPUSH
2478: CALL_OW 104
// end else
2482: GO 2608
// if not disable_07 then
2484: LD_LOC 18
2488: NOT
2489: IFFALSE 2608
// if ( not killhim ) then
2491: LD_LOC 16
2495: NOT
2496: IFFALSE 2608
// if ( gettype ( un ) = unit_human ) then
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL_OW 247
2507: PUSH
2508: LD_INT 1
2510: EQUAL
2511: IFFALSE 2608
// begin disable ( 06 ) ;
2513: LD_INT 6
2515: DISABLE_MARKED
// wait ( 0 0$0.5 ) ;
2516: LD_INT 18
2518: PPUSH
2519: CALL_OW 67
// dialogueon ;
2523: CALL_OW 6
// music_class = 1 ;
2527: LD_ADDR_OWVAR 72
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// say ( sik , DXAttack-Sik-1 ) ;
2535: LD_LOC 5
2539: PPUSH
2540: LD_STRING DXAttack-Sik-1
2542: PPUSH
2543: CALL_OW 88
// dialogueoff ;
2547: CALL_OW 7
// setattitude ( am , oth , att_enemy , true ) ;
2551: LD_LOC 1
2555: PPUSH
2556: LD_LOC 2
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
2571: LD_LOC 11
2575: PUSH
2576: LD_LOC 10
2580: PUSH
2581: LD_EXP 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ADD
2590: PPUSH
2591: LD_LOC 3
2595: PPUSH
2596: CALL_OW 115
// killhim = true ;
2600: LD_ADDR_LOC 16
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ;
2608: PPOPN 1
2610: END
// every 0 0$0.4 trigger isinarea ( john , aeon ) and not killhim do
2611: LD_LOC 3
2615: PPUSH
2616: LD_INT 4
2618: PPUSH
2619: CALL_OW 308
2623: PUSH
2624: LD_LOC 16
2628: NOT
2629: AND
2630: IFFALSE 3408
2632: GO 2634
2634: DISABLE
// begin follow = false ;
2635: LD_ADDR_LOC 20
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// if Crawls ( john ) then
2643: LD_LOC 3
2647: PPUSH
2648: CALL_OW 318
2652: IFFALSE 2670
// begin ComWalk ( john ) ;
2654: LD_LOC 3
2658: PPUSH
2659: CALL_OW 138
// wait ( 0 0$0.3 ) ;
2663: LD_INT 10
2665: PPUSH
2666: CALL_OW 67
// end ; centernowonunits ( [ eon ] ) ;
2670: LD_INT 14
2672: PUSH
2673: EMPTY
2674: LIST
2675: PPUSH
2676: CALL_OW 87
// commovexy ( john , 75 , 36 ) ;
2680: LD_LOC 3
2684: PPUSH
2685: LD_INT 75
2687: PPUSH
2688: LD_INT 36
2690: PPUSH
2691: CALL_OW 111
// ComTurnUnit ( Joan , John ) ;
2695: LD_LOC 4
2699: PPUSH
2700: LD_LOC 3
2704: PPUSH
2705: CALL_OW 119
// InGameOn ;
2709: CALL_OW 8
// ComTurnUnit ( John , off ) ;
2713: LD_LOC 3
2717: PPUSH
2718: LD_LOC 10
2722: PPUSH
2723: CALL_OW 119
// say ( off , DXReady-Off-1 ) ;
2727: LD_LOC 10
2731: PPUSH
2732: LD_STRING DXReady-Off-1
2734: PPUSH
2735: CALL_OW 88
// ComTurnUnit ( sik , lucy ) ;
2739: LD_LOC 5
2743: PPUSH
2744: LD_LOC 6
2748: PPUSH
2749: CALL_OW 119
// say ( sik , DXReady-Sik-1 ) ;
2753: LD_LOC 5
2757: PPUSH
2758: LD_STRING DXReady-Sik-1
2760: PPUSH
2761: CALL_OW 88
// SayEffect ( DXReady-All-1 ) ;
2765: LD_STRING DXReady-All-1
2767: PPUSH
2768: CALL_OW 96
// wait ( 0 0$2 ) ;
2772: LD_INT 70
2774: PPUSH
2775: CALL_OW 67
// ComTurnUnit ( lucy , sik ) ;
2779: LD_LOC 6
2783: PPUSH
2784: LD_LOC 5
2788: PPUSH
2789: CALL_OW 119
// say ( lucy , DXReady-Don-1 ) ;
2793: LD_LOC 6
2797: PPUSH
2798: LD_STRING DXReady-Don-1
2800: PPUSH
2801: CALL_OW 88
// SayEffect ( DXReady-All-2 ) ;
2805: LD_STRING DXReady-All-2
2807: PPUSH
2808: CALL_OW 96
// wait ( 0 0$2 ) ;
2812: LD_INT 70
2814: PPUSH
2815: CALL_OW 67
// say ( off2 , DXReady-Off2-1 ) ;
2819: LD_EXP 1
2823: PPUSH
2824: LD_STRING DXReady-Off2-1
2826: PPUSH
2827: CALL_OW 88
// wait ( 0 0$1 ) ;
2831: LD_INT 35
2833: PPUSH
2834: CALL_OW 67
// say ( off2 , DXReady-Off2-2 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING DXReady-Off2-2
2845: PPUSH
2846: CALL_OW 88
// ComMoveXY ( off , 72 , 29 ) ;
2850: LD_LOC 10
2854: PPUSH
2855: LD_INT 72
2857: PPUSH
2858: LD_INT 29
2860: PPUSH
2861: CALL_OW 111
// ComMoveXY ( off2 , 73 , 31 ) ;
2865: LD_EXP 1
2869: PPUSH
2870: LD_INT 73
2872: PPUSH
2873: LD_INT 31
2875: PPUSH
2876: CALL_OW 111
// ComMoveXY ( john , 67 , 28 ) ;
2880: LD_LOC 3
2884: PPUSH
2885: LD_INT 67
2887: PPUSH
2888: LD_INT 28
2890: PPUSH
2891: CALL_OW 111
// ComMoveXY ( lucy , 68 , 30 ) ;
2895: LD_LOC 6
2899: PPUSH
2900: LD_INT 68
2902: PPUSH
2903: LD_INT 30
2905: PPUSH
2906: CALL_OW 111
// ComMoveXY ( grant , 69 , 32 ) ;
2910: LD_LOC 7
2914: PPUSH
2915: LD_INT 69
2917: PPUSH
2918: LD_INT 32
2920: PPUSH
2921: CALL_OW 111
// ComMoveXY ( sik , 66 , 28 ) ;
2925: LD_LOC 5
2929: PPUSH
2930: LD_INT 66
2932: PPUSH
2933: LD_INT 28
2935: PPUSH
2936: CALL_OW 111
// ComMoveXY ( will , 67 , 30 ) ;
2940: LD_LOC 8
2944: PPUSH
2945: LD_INT 67
2947: PPUSH
2948: LD_INT 30
2950: PPUSH
2951: CALL_OW 111
// ComMoveXY ( phi , 68 , 32 ) ;
2955: LD_LOC 9
2959: PPUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 32
2965: PPUSH
2966: CALL_OW 111
// AddComTurnXY ( off , 49 , 27 ) ;
2970: LD_LOC 10
2974: PPUSH
2975: LD_INT 49
2977: PPUSH
2978: LD_INT 27
2980: PPUSH
2981: CALL_OW 178
// AddComTurnXY ( off2 , 49 , 27 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_INT 49
2992: PPUSH
2993: LD_INT 27
2995: PPUSH
2996: CALL_OW 178
// AddComTurnXY ( john , 85 , 33 ) ;
3000: LD_LOC 3
3004: PPUSH
3005: LD_INT 85
3007: PPUSH
3008: LD_INT 33
3010: PPUSH
3011: CALL_OW 178
// AddComTurnXY ( lucy , 85 , 33 ) ;
3015: LD_LOC 6
3019: PPUSH
3020: LD_INT 85
3022: PPUSH
3023: LD_INT 33
3025: PPUSH
3026: CALL_OW 178
// AddComTurnXY ( grant , 85 , 33 ) ;
3030: LD_LOC 7
3034: PPUSH
3035: LD_INT 85
3037: PPUSH
3038: LD_INT 33
3040: PPUSH
3041: CALL_OW 178
// AddComTurnXY ( sik , 85 , 33 ) ;
3045: LD_LOC 5
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 33
3055: PPUSH
3056: CALL_OW 178
// AddComTurnXY ( will , 85 , 33 ) ;
3060: LD_LOC 8
3064: PPUSH
3065: LD_INT 85
3067: PPUSH
3068: LD_INT 33
3070: PPUSH
3071: CALL_OW 178
// AddComTurnXY ( phi , 85 , 33 ) ;
3075: LD_LOC 9
3079: PPUSH
3080: LD_INT 85
3082: PPUSH
3083: LD_INT 33
3085: PPUSH
3086: CALL_OW 178
// wait ( 0 0$9 ) ;
3090: LD_INT 315
3092: PPUSH
3093: CALL_OW 67
// say ( off2 , DXReady-Off2-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING DXReady-Off2-3
3104: PPUSH
3105: CALL_OW 88
// wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// case query ( QQuit ) of 1 :
3116: LD_STRING QQuit
3118: PPUSH
3119: CALL_OW 97
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3201
3132: POP
// begin say ( off2 , DQrQuit#1-Off2-1 ) ;
3133: LD_EXP 1
3137: PPUSH
3138: LD_STRING DQrQuit#1-Off2-1
3140: PPUSH
3141: CALL_OW 88
// say ( john , DQrQuit#1-JMM-1a ) ;
3145: LD_LOC 3
3149: PPUSH
3150: LD_STRING DQrQuit#1-JMM-1a
3152: PPUSH
3153: CALL_OW 88
// say ( off2 , DQrQuit#1-Off2-2 ) ;
3157: LD_EXP 1
3161: PPUSH
3162: LD_STRING DQrQuit#1-Off2-2
3164: PPUSH
3165: CALL_OW 88
// ComMoveXY ( john , 73 , 49 ) ;
3169: LD_LOC 3
3173: PPUSH
3174: LD_INT 73
3176: PPUSH
3177: LD_INT 49
3179: PPUSH
3180: CALL_OW 111
// wait ( 0 0$3 ) ;
3184: LD_INT 105
3186: PPUSH
3187: CALL_OW 67
// ingameoff ;
3191: CALL_OW 9
// YouDidSomethingExtraordinary ;
3195: CALL_OW 105
// end ; 2 :
3199: GO 3408
3201: LD_INT 2
3203: DOUBLE
3204: EQUAL
3205: IFTRUE 3209
3207: GO 3407
3209: POP
// begin disable ( 29 ) ;
3210: LD_INT 29
3212: DISABLE_MARKED
// wait ( 0 0$1 ) ;
3213: LD_INT 35
3215: PPUSH
3216: CALL_OW 67
// say ( off2 , DXReady-Off2-4 ) ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_STRING DXReady-Off2-4
3227: PPUSH
3228: CALL_OW 88
// wait ( 0 0$1 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// say ( off , DXReady-Off-2 ) ;
3239: LD_LOC 10
3243: PPUSH
3244: LD_STRING DXReady-Off-2
3246: PPUSH
3247: CALL_OW 88
// comenterunit ( will , eon ) ;
3251: LD_LOC 8
3255: PPUSH
3256: LD_INT 14
3258: PPUSH
3259: CALL_OW 120
// wait ( 0 0$3 ) ;
3263: LD_INT 105
3265: PPUSH
3266: CALL_OW 67
// say ( off , DXReady-Off-3 ) ;
3270: LD_LOC 10
3274: PPUSH
3275: LD_STRING DXReady-Off-3
3277: PPUSH
3278: CALL_OW 88
// comenterunit ( sik , eon ) ;
3282: LD_LOC 5
3286: PPUSH
3287: LD_INT 14
3289: PPUSH
3290: CALL_OW 120
// wait ( 0 0$3 ) ;
3294: LD_INT 105
3296: PPUSH
3297: CALL_OW 67
// say ( off , DXReady-Off-4 ) ;
3301: LD_LOC 10
3305: PPUSH
3306: LD_STRING DXReady-Off-4
3308: PPUSH
3309: CALL_OW 88
// comenterunit ( lucy , eon ) ;
3313: LD_LOC 6
3317: PPUSH
3318: LD_INT 14
3320: PPUSH
3321: CALL_OW 120
// wait ( 0 0$3 ) ;
3325: LD_INT 105
3327: PPUSH
3328: CALL_OW 67
// say ( off , DXReady-Off-5 ) ;
3332: LD_LOC 10
3336: PPUSH
3337: LD_STRING DXReady-Off-5
3339: PPUSH
3340: CALL_OW 88
// ComMoveXY ( john , 76 , 34 ) ;
3344: LD_LOC 3
3348: PPUSH
3349: LD_INT 76
3351: PPUSH
3352: LD_INT 34
3354: PPUSH
3355: CALL_OW 111
// AddComTurnXY ( john , 76 , 33 ) ;
3359: LD_LOC 3
3363: PPUSH
3364: LD_INT 76
3366: PPUSH
3367: LD_INT 33
3369: PPUSH
3370: CALL_OW 178
// wait ( 0 0$4 ) ;
3374: LD_INT 140
3376: PPUSH
3377: CALL_OW 67
// say ( john , DQrQuit#2-JMM-1 ) ;
3381: LD_LOC 3
3385: PPUSH
3386: LD_STRING DQrQuit#2-JMM-1
3388: PPUSH
3389: CALL_OW 88
// comenterunit ( john , eon ) ;
3393: LD_LOC 3
3397: PPUSH
3398: LD_INT 14
3400: PPUSH
3401: CALL_OW 120
// end ; end ;
3405: GO 3408
3407: POP
// end ;
3408: END
// every 0 0$1 trigger GetDistUnitXY ( john , 48 , 66 ) < 5 do
3409: LD_LOC 3
3413: PPUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 66
3419: PPUSH
3420: CALL_OW 297
3424: PUSH
3425: LD_INT 5
3427: LESS
3428: IFFALSE 3445
3430: GO 3432
3432: DISABLE
// ForceExclamation ( john , 28 ) ;
3433: LD_LOC 3
3437: PPUSH
3438: LD_INT 28
3440: PPUSH
3441: CALL_OW 582
3445: END
// on enterbuilding ( b , un ) do begin if b = eon then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 14
3453: EQUAL
3454: IFFALSE 3634
// case un of john :
3456: LD_VAR 0 2
3460: PUSH
3461: LD_LOC 3
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3624
3471: POP
// if not killhim then
3472: LD_LOC 16
3476: NOT
3477: IFFALSE 3581
// begin music_class := 6 ;
3479: LD_ADDR_OWVAR 72
3483: PUSH
3484: LD_INT 6
3486: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3487: LD_INT 70
3489: PPUSH
3490: CALL_OW 67
// DialogueOn ;
3494: CALL_OW 6
// CenterNowOnXY ( 1 , 1 ) ;
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 86
// RemoveUnit ( joan ) ;
3508: LD_LOC 4
3512: PPUSH
3513: CALL_OW 64
// ChangeSideFog ( 1 , 8 ) ;
3517: LD_INT 1
3519: PPUSH
3520: LD_INT 8
3522: PPUSH
3523: CALL_OW 343
// ResetFog ;
3527: CALL_OW 335
// wait ( 0 0$1 ) ;
3531: LD_INT 35
3533: PPUSH
3534: CALL_OW 67
// Say ( joan , DX1-Joan-4 ) ;
3538: LD_LOC 4
3542: PPUSH
3543: LD_STRING DX1-Joan-4
3545: PPUSH
3546: CALL_OW 88
// savecharacters ( john , JMM ) ;
3550: LD_LOC 3
3554: PPUSH
3555: LD_STRING JMM
3557: PPUSH
3558: CALL_OW 38
// wait ( 0 0$1 ) ;
3562: LD_INT 35
3564: PPUSH
3565: CALL_OW 67
// changemap ( 1 , %_cont ) ;
3569: LD_STRING 1
3571: PPUSH
3572: LD_STRING %_cont
3574: PPUSH
3575: CALL_OW 340
// end else
3579: GO 3622
// begin placeunitxy ( john , 76 , 34 , false ) ;
3581: LD_LOC 3
3585: PPUSH
3586: LD_INT 76
3588: PPUSH
3589: LD_INT 34
3591: PPUSH
3592: LD_INT 0
3594: PPUSH
3595: CALL_OW 48
// comattackunit ( others ^ [ off ] , john ) ;
3599: LD_LOC 11
3603: PUSH
3604: LD_LOC 10
3608: PUSH
3609: EMPTY
3610: LIST
3611: ADD
3612: PPUSH
3613: LD_LOC 3
3617: PPUSH
3618: CALL_OW 115
// end ; else
3622: GO 3634
3624: POP
// RemoveUnit ( un ) ; end ;
3625: LD_VAR 0 2
3629: PPUSH
3630: CALL_OW 64
// end ;
3634: PPOPN 2
3636: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 4 and killhim = false then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 1
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: AND
3655: PUSH
3656: LD_LOC 16
3660: PUSH
3661: LD_INT 0
3663: EQUAL
3664: AND
3665: IFFALSE 3759
// begin wait ( 0 0$1 ) ;
3667: LD_INT 35
3669: PPUSH
3670: CALL_OW 67
// music_class = 1 ;
3674: LD_ADDR_OWVAR 72
3678: PUSH
3679: LD_INT 1
3681: ST_TO_ADDR
// DialogueOn ;
3682: CALL_OW 6
// say ( sik , DXAttack-Sik-1 ) ;
3686: LD_LOC 5
3690: PPUSH
3691: LD_STRING DXAttack-Sik-1
3693: PPUSH
3694: CALL_OW 88
// dialogueoff ;
3698: CALL_OW 7
// killhim = true ;
3702: LD_ADDR_LOC 16
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// setattitude ( am , oth , att_enemy , true ) ;
3710: LD_LOC 1
3714: PPUSH
3715: LD_LOC 2
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 80
// comattackunit ( others ^ [ off , off2 ] , john ) ;
3730: LD_LOC 11
3734: PUSH
3735: LD_LOC 10
3739: PUSH
3740: LD_EXP 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: ADD
3749: PPUSH
3750: LD_LOC 3
3754: PPUSH
3755: CALL_OW 115
// end ; end ;
3759: PPOPN 2
3761: END
// on EnterVehicle ( veh , unit ) do begin if unit = john then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_LOC 3
3771: EQUAL
3772: IFFALSE 3809
// begin async ;
3774: ASYNC
// Say ( joan , DXComments-Joan-1 ) ;
3775: LD_LOC 4
3779: PPUSH
3780: LD_STRING DXComments-Joan-1
3782: PPUSH
3783: CALL_OW 88
// ComExitVehicle ( john ) ;
3787: LD_LOC 3
3791: PPUSH
3792: CALL_OW 121
// SetSide ( veh , 4 ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 4
3803: PPUSH
3804: CALL_OW 235
// sync ;
3808: SYNC
// end ; end ; end_of_file
3809: PPOPN 2
3811: END
// export off2 ; export engi1 , engi2 , truckdriver , tankdriver , snip1 , snip2 , sol1 , sol2 , sol3 , pat1 , pat2 ; export patrol , allmen ; export function CreateOfficer2 ; begin
3812: LD_INT 0
3814: PPUSH
// uc_side := 4 ;
3815: LD_ADDR_OWVAR 20
3819: PUSH
3820: LD_INT 4
3822: ST_TO_ADDR
// uc_nation := nation_american ;
3823: LD_ADDR_OWVAR 21
3827: PUSH
3828: LD_INT 1
3830: ST_TO_ADDR
// hc_importance = 50 ;
3831: LD_ADDR_OWVAR 32
3835: PUSH
3836: LD_INT 50
3838: ST_TO_ADDR
// hc_sex = sex_male ;
3839: LD_ADDR_OWVAR 27
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_class = 1 ;
3847: LD_ADDR_OWVAR 28
3851: PUSH
3852: LD_INT 1
3854: ST_TO_ADDR
// hc_basic_skills = [ 7 , 3 , 2 , 2 ] ;
3855: LD_ADDR_OWVAR 30
3859: PUSH
3860: LD_INT 7
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 2 , 2 ] ;
3878: LD_ADDR_OWVAR 31
3882: PUSH
3883: LD_INT 7
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_attr = [ 11 , 11 ] ;
3901: LD_ADDR_OWVAR 29
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 11
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: ST_TO_ADDR
// hc_name := Officer2 ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING Officer2
3923: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3924: LD_ADDR_OWVAR 33
3928: PUSH
3929: LD_STRING AmGalRemake
3931: ST_TO_ADDR
// hc_face_number := 3 ;
3932: LD_ADDR_OWVAR 34
3936: PUSH
3937: LD_INT 3
3939: ST_TO_ADDR
// off2 := CreateHuman ;
3940: LD_ADDR_EXP 1
3944: PUSH
3945: CALL_OW 44
3949: ST_TO_ADDR
// end ;
3950: LD_VAR 0 1
3954: RET
// export function CreatePersonnel ; begin
3955: LD_INT 0
3957: PPUSH
// uc_side := 4 ;
3958: LD_ADDR_OWVAR 20
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// uc_nation := nation_american ;
3966: LD_ADDR_OWVAR 21
3970: PUSH
3971: LD_INT 1
3973: ST_TO_ADDR
// hc_importance = 10 ;
3974: LD_ADDR_OWVAR 32
3978: PUSH
3979: LD_INT 10
3981: ST_TO_ADDR
// hc_name :=  ;
3982: LD_ADDR_OWVAR 26
3986: PUSH
3987: LD_STRING 
3989: ST_TO_ADDR
// hc_gallery :=  ;
3990: LD_ADDR_OWVAR 33
3994: PUSH
3995: LD_STRING 
3997: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
3998: LD_INT 1
4000: PPUSH
4001: LD_INT 2
4003: NEG
4004: PPUSH
4005: CALL_OW 382
// engi1 := CreateHuman ;
4009: LD_ADDR_EXP 2
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PrepareEngineer ( 1 , - 2 ) ;
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: NEG
4025: PPUSH
4026: CALL_OW 382
// engi2 := CreateHuman ;
4030: LD_ADDR_EXP 3
4034: PUSH
4035: CALL_OW 44
4039: ST_TO_ADDR
// PlaceHumanInUnit ( engi1 , depot2 ) ;
4040: LD_EXP 2
4044: PPUSH
4045: LD_INT 10
4047: PPUSH
4048: CALL_OW 52
// PlaceHumanInUnit ( engi2 , depot2 ) ;
4052: LD_EXP 3
4056: PPUSH
4057: LD_INT 10
4059: PPUSH
4060: CALL_OW 52
// PrepareMechanic ( 1 , - 1 ) ;
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 1
4069: NEG
4070: PPUSH
4071: CALL_OW 383
// truckdriver := CreateHuman ;
4075: LD_ADDR_EXP 4
4079: PUSH
4080: CALL_OW 44
4084: ST_TO_ADDR
// PlaceHumanInUnit ( truckdriver , truck ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_INT 27
4092: PPUSH
4093: CALL_OW 52
// SetCargo ( truck , mat_cans , 100 ) ;
4097: LD_INT 27
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 100
4105: PPUSH
4106: CALL_OW 290
// PrepareSoldier ( 1 , 3 ) ;
4110: LD_INT 1
4112: PPUSH
4113: LD_INT 3
4115: PPUSH
4116: CALL_OW 381
// hc_class = class_soldier ;
4120: LD_ADDR_OWVAR 28
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// snip1 := CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: CALL_OW 44
4137: ST_TO_ADDR
// PrepareSoldier ( 2 , 3 ) ;
4138: LD_INT 2
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 381
// hc_class = class_soldier ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 1
4155: ST_TO_ADDR
// snip2 := CreateHuman ;
4156: LD_ADDR_EXP 7
4160: PUSH
4161: CALL_OW 44
4165: ST_TO_ADDR
// PlaceUnitXY ( snip1 , 47 , 17 , false ) ;
4166: LD_EXP 6
4170: PPUSH
4171: LD_INT 47
4173: PPUSH
4174: LD_INT 17
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: CALL_OW 48
// PlaceUnitXY ( snip2 , 29 , 31 , false ) ;
4184: LD_EXP 7
4188: PPUSH
4189: LD_INT 29
4191: PPUSH
4192: LD_INT 31
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: CALL_OW 48
// ComHold ( [ snip1 , snip2 ] ) ;
4202: LD_EXP 6
4206: PUSH
4207: LD_EXP 7
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 140
// PrepareSoldier ( 1 , 3 ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: CALL_OW 381
// sol1 := CreateHuman ;
4230: LD_ADDR_EXP 8
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// SetDir ( sol1 , 2 ) ;
4240: LD_EXP 8
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: CALL_OW 233
// PlaceHumanInUnit ( sol1 , bunker1 ) ;
4252: LD_EXP 8
4256: PPUSH
4257: LD_INT 15
4259: PPUSH
4260: CALL_OW 52
// PrepareSoldier ( 1 , 3 ) ;
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 381
// sol2 := CreateHuman ;
4274: LD_ADDR_EXP 9
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4284: LD_INT 1
4286: PPUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL_OW 381
// sol3 := CreateHuman ;
4294: LD_ADDR_EXP 10
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitXY ( sol2 , 40 , 42 , false ) ;
4304: LD_EXP 9
4308: PPUSH
4309: LD_INT 40
4311: PPUSH
4312: LD_INT 42
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 48
// PlaceUnitXY ( sol3 , 53 , 34 , false ) ;
4322: LD_EXP 10
4326: PPUSH
4327: LD_INT 53
4329: PPUSH
4330: LD_INT 34
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 48
// PrepareSoldier ( 1 , 3 ) ;
4340: LD_INT 1
4342: PPUSH
4343: LD_INT 3
4345: PPUSH
4346: CALL_OW 381
// pat1 := CreateHuman ;
4350: LD_ADDR_EXP 11
4354: PUSH
4355: CALL_OW 44
4359: ST_TO_ADDR
// PrepareSoldier ( 1 , 3 ) ;
4360: LD_INT 1
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 381
// pat2 := CreateHuman ;
4370: LD_ADDR_EXP 12
4374: PUSH
4375: CALL_OW 44
4379: ST_TO_ADDR
// PlaceUnitXY ( pat1 , 29 , 6 , false ) ;
4380: LD_EXP 11
4384: PPUSH
4385: LD_INT 29
4387: PPUSH
4388: LD_INT 6
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL_OW 48
// PlaceUnitXY ( pat2 , 30 , 7 , false ) ;
4398: LD_EXP 12
4402: PPUSH
4403: LD_INT 30
4405: PPUSH
4406: LD_INT 7
4408: PPUSH
4409: LD_INT 0
4411: PPUSH
4412: CALL_OW 48
// patrol = [ pat1 , pat2 ] ;
4416: LD_ADDR_EXP 13
4420: PUSH
4421: LD_EXP 11
4425: PUSH
4426: LD_EXP 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// allmen = [ engi1 , engi2 , sol1 , sol2 , sol3 , snip1 , snip2 , patrol , truckdriver ] ;
4435: LD_ADDR_EXP 14
4439: PUSH
4440: LD_EXP 2
4444: PUSH
4445: LD_EXP 3
4449: PUSH
4450: LD_EXP 8
4454: PUSH
4455: LD_EXP 9
4459: PUSH
4460: LD_EXP 10
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_EXP 7
4474: PUSH
4475: LD_EXP 13
4479: PUSH
4480: LD_EXP 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
// end ;
4496: LD_VAR 0 1
4500: RET
// every 0 0$1 do
4501: GO 4503
4503: DISABLE
// begin AddComMoveXY ( patrol , 64 , 22 ) ;
4504: LD_EXP 13
4508: PPUSH
4509: LD_INT 64
4511: PPUSH
4512: LD_INT 22
4514: PPUSH
4515: CALL_OW 171
// wait ( 0 0$25 ) ;
4519: LD_INT 875
4521: PPUSH
4522: CALL_OW 67
// AddComMoveXY ( patrol , 30 , 8 ) ;
4526: LD_EXP 13
4530: PPUSH
4531: LD_INT 30
4533: PPUSH
4534: LD_INT 8
4536: PPUSH
4537: CALL_OW 171
// wait ( 0 0$25 ) ;
4541: LD_INT 875
4543: PPUSH
4544: CALL_OW 67
// enable ;
4548: ENABLE
// end ;
4549: END
// every 0 0$1 do
4550: GO 4552
4552: DISABLE
// begin SetLives ( truck , 550 ) ;
4553: LD_INT 27
4555: PPUSH
4556: LD_INT 550
4558: PPUSH
4559: CALL_OW 234
// ComMoveXY ( truck , 42 , 35 ) ;
4563: LD_INT 27
4565: PPUSH
4566: LD_INT 42
4568: PPUSH
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 111
// AddComUnload ( truck ) ;
4576: LD_INT 27
4578: PPUSH
4579: CALL_OW 219
// Wait ( 0 0$8 ) ;
4583: LD_INT 280
4585: PPUSH
4586: CALL_OW 67
// ComMoveXY ( [ engi1 , engi2 ] , 45 , 36 ) ;
4590: LD_EXP 2
4594: PUSH
4595: LD_EXP 3
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: LD_INT 45
4606: PPUSH
4607: LD_INT 36
4609: PPUSH
4610: CALL_OW 111
// ComExitVehicle ( truckdriver ) ;
4614: LD_EXP 4
4618: PPUSH
4619: CALL_OW 121
// AddComMoveXY ( truckdriver , 40 , 33 ) ;
4623: LD_EXP 4
4627: PPUSH
4628: LD_INT 40
4630: PPUSH
4631: LD_INT 33
4633: PPUSH
4634: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4638: LD_INT 35
4640: PPUSH
4641: CALL_OW 67
// ComRepairVehicle ( truckdriver , truck ) ;
4645: LD_EXP 4
4649: PPUSH
4650: LD_INT 27
4652: PPUSH
4653: CALL_OW 129
// until GetLives ( truck ) = 1000 ;
4657: LD_INT 27
4659: PPUSH
4660: CALL_OW 256
4664: PUSH
4665: LD_INT 1000
4667: EQUAL
4668: IFFALSE 4638
// ComEnterUnit ( [ engi1 , engi2 ] , depot2 ) ;
4670: LD_EXP 2
4674: PUSH
4675: LD_EXP 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: LD_INT 10
4686: PPUSH
4687: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// until not IsDrivenBy ( truck ) ;
4698: LD_INT 27
4700: PPUSH
4701: CALL_OW 311
4705: NOT
4706: IFFALSE 4691
// ComEnterUnit ( truckdriver , truck ) ;
4708: LD_EXP 4
4712: PPUSH
4713: LD_INT 27
4715: PPUSH
4716: CALL_OW 120
// AddComMoveXY ( truckdriver , 74 , 52 ) ;
4720: LD_EXP 4
4724: PPUSH
4725: LD_INT 74
4727: PPUSH
4728: LD_INT 52
4730: PPUSH
4731: CALL_OW 171
// AddComMoveXY ( truckdriver , 90 , 58 ) ;
4735: LD_EXP 4
4739: PPUSH
4740: LD_INT 90
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 171
// AddComMoveXY ( truckdriver , 98 , 61 ) ;
4750: LD_EXP 4
4754: PPUSH
4755: LD_INT 98
4757: PPUSH
4758: LD_INT 61
4760: PPUSH
4761: CALL_OW 171
// end ;
4765: END
// every 0 0$1 trigger FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do var i ;
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 4
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: IFFALSE 4831
4785: GO 4787
4787: DISABLE
4788: LD_INT 0
4790: PPUSH
// begin enable ;
4791: ENABLE
// for i in FilterUnitsInArea ( ExitArea , [ f_side , 4 ] ) do
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_INT 7
4799: PPUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 70
4814: PUSH
4815: FOR_IN
4816: IFFALSE 4829
// RemoveUnit ( i ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: CALL_OW 64
4827: GO 4815
4829: POP
4830: POP
// end ;
4831: PPOPN 1
4833: END
// every 3 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do var i ;
4834: LD_INT 22
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 3
4846: PUSH
4847: LD_INT 24
4849: PUSH
4850: LD_INT 1000
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: IFFALSE 4960
4882: GO 4884
4884: DISABLE
4885: LD_INT 0
4887: PPUSH
// begin enable ;
4888: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_human ] ] ) do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_INT 22
4896: PUSH
4897: LD_INT 4
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 3
4906: PUSH
4907: LD_INT 24
4909: PUSH
4910: LD_INT 1000
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4958
// SetLives ( i , 1000 ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 1000
4951: PPUSH
4952: CALL_OW 234
4956: GO 4941
4958: POP
4959: POP
// end ; end_of_file
4960: PPOPN 1
4962: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 100
4970: EQUAL
4971: IFFALSE 5920
// begin if not StreamModeActive then
4973: LD_EXP 15
4977: NOT
4978: IFFALSE 4988
// StreamModeActive := true ;
4980: LD_ADDR_EXP 15
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 0 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: IFFALSE 5002
// InitStreamMode ;
4998: CALL 6153 0 0
// if p3 = 1 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 1
5009: EQUAL
5010: IFFALSE 5020
// sRocket := true ;
5012: LD_ADDR_EXP 20
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 2 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: EQUAL
5028: IFFALSE 5038
// sSpeed := true ;
5030: LD_ADDR_EXP 19
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 3 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 3
5045: EQUAL
5046: IFFALSE 5056
// sEngine := true ;
5048: LD_ADDR_EXP 21
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 4 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: EQUAL
5064: IFFALSE 5074
// sSpec := true ;
5066: LD_ADDR_EXP 18
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 5 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 5
5081: EQUAL
5082: IFFALSE 5092
// sLevel := true ;
5084: LD_ADDR_EXP 22
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 6 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 6
5099: EQUAL
5100: IFFALSE 5110
// sArmoury := true ;
5102: LD_ADDR_EXP 23
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 7 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 7
5117: EQUAL
5118: IFFALSE 5128
// sRadar := true ;
5120: LD_ADDR_EXP 24
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 8 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 8
5135: EQUAL
5136: IFFALSE 5146
// sBunker := true ;
5138: LD_ADDR_EXP 25
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 9 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 9
5153: EQUAL
5154: IFFALSE 5164
// sHack := true ;
5156: LD_ADDR_EXP 26
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 10 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 10
5171: EQUAL
5172: IFFALSE 5182
// sFire := true ;
5174: LD_ADDR_EXP 27
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 11 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 11
5189: EQUAL
5190: IFFALSE 5200
// sRefresh := true ;
5192: LD_ADDR_EXP 28
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 12 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 12
5207: EQUAL
5208: IFFALSE 5218
// sExp := true ;
5210: LD_ADDR_EXP 29
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 13 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 13
5225: EQUAL
5226: IFFALSE 5236
// sDepot := true ;
5228: LD_ADDR_EXP 30
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 14 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 14
5243: EQUAL
5244: IFFALSE 5254
// sFlag := true ;
5246: LD_ADDR_EXP 31
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 15 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 15
5261: EQUAL
5262: IFFALSE 5272
// sKamikadze := true ;
5264: LD_ADDR_EXP 39
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 16 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 16
5279: EQUAL
5280: IFFALSE 5290
// sTroll := true ;
5282: LD_ADDR_EXP 40
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 17 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 17
5297: EQUAL
5298: IFFALSE 5308
// sSlow := true ;
5300: LD_ADDR_EXP 41
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 18 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 18
5315: EQUAL
5316: IFFALSE 5326
// sLack := true ;
5318: LD_ADDR_EXP 42
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 19 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 19
5333: EQUAL
5334: IFFALSE 5344
// sTank := true ;
5336: LD_ADDR_EXP 44
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 20 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 20
5351: EQUAL
5352: IFFALSE 5362
// sRemote := true ;
5354: LD_ADDR_EXP 45
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 21 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 21
5369: EQUAL
5370: IFFALSE 5380
// sPowell := true ;
5372: LD_ADDR_EXP 46
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 22 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 22
5387: EQUAL
5388: IFFALSE 5398
// sTeleport := true ;
5390: LD_ADDR_EXP 49
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 23 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 23
5405: EQUAL
5406: IFFALSE 5416
// sOilTower := true ;
5408: LD_ADDR_EXP 51
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 24 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 24
5423: EQUAL
5424: IFFALSE 5434
// sShovel := true ;
5426: LD_ADDR_EXP 52
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 25 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 25
5441: EQUAL
5442: IFFALSE 5452
// sSheik := true ;
5444: LD_ADDR_EXP 53
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 26 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 26
5459: EQUAL
5460: IFFALSE 5470
// sEarthquake := true ;
5462: LD_ADDR_EXP 55
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 27 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 27
5477: EQUAL
5478: IFFALSE 5488
// sAI := true ;
5480: LD_ADDR_EXP 56
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 28 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 28
5495: EQUAL
5496: IFFALSE 5506
// sCargo := true ;
5498: LD_ADDR_EXP 59
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 29 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 29
5513: EQUAL
5514: IFFALSE 5524
// sDLaser := true ;
5516: LD_ADDR_EXP 60
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 30 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 30
5531: EQUAL
5532: IFFALSE 5542
// sExchange := true ;
5534: LD_ADDR_EXP 61
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 31 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 31
5549: EQUAL
5550: IFFALSE 5560
// sFac := true ;
5552: LD_ADDR_EXP 62
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 32 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 32
5567: EQUAL
5568: IFFALSE 5578
// sPower := true ;
5570: LD_ADDR_EXP 63
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 33 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 33
5585: EQUAL
5586: IFFALSE 5596
// sRandom := true ;
5588: LD_ADDR_EXP 64
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 34 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 34
5603: EQUAL
5604: IFFALSE 5614
// sShield := true ;
5606: LD_ADDR_EXP 65
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 35 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 35
5621: EQUAL
5622: IFFALSE 5632
// sTime := true ;
5624: LD_ADDR_EXP 66
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 36 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 36
5639: EQUAL
5640: IFFALSE 5650
// sTools := true ;
5642: LD_ADDR_EXP 67
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 101 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 101
5657: EQUAL
5658: IFFALSE 5668
// sSold := true ;
5660: LD_ADDR_EXP 32
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 102 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 102
5675: EQUAL
5676: IFFALSE 5686
// sDiff := true ;
5678: LD_ADDR_EXP 33
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 103 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 103
5693: EQUAL
5694: IFFALSE 5704
// sFog := true ;
5696: LD_ADDR_EXP 36
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 104 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 104
5711: EQUAL
5712: IFFALSE 5722
// sReset := true ;
5714: LD_ADDR_EXP 37
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 105 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 105
5729: EQUAL
5730: IFFALSE 5740
// sSun := true ;
5732: LD_ADDR_EXP 38
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 106 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 106
5747: EQUAL
5748: IFFALSE 5758
// sTiger := true ;
5750: LD_ADDR_EXP 34
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 107 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 107
5765: EQUAL
5766: IFFALSE 5776
// sBomb := true ;
5768: LD_ADDR_EXP 35
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 108 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 108
5783: EQUAL
5784: IFFALSE 5794
// sWound := true ;
5786: LD_ADDR_EXP 43
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 109 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 109
5801: EQUAL
5802: IFFALSE 5812
// sBetray := true ;
5804: LD_ADDR_EXP 47
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 110 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 110
5819: EQUAL
5820: IFFALSE 5830
// sContamin := true ;
5822: LD_ADDR_EXP 48
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 111 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 111
5837: EQUAL
5838: IFFALSE 5848
// sOil := true ;
5840: LD_ADDR_EXP 50
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// if p3 = 112 then
5848: LD_VAR 0 3
5852: PUSH
5853: LD_INT 112
5855: EQUAL
5856: IFFALSE 5866
// sStu := true ;
5858: LD_ADDR_EXP 54
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// if p3 = 113 then
5866: LD_VAR 0 3
5870: PUSH
5871: LD_INT 113
5873: EQUAL
5874: IFFALSE 5884
// sBazooka := true ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// if p3 = 114 then
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 114
5891: EQUAL
5892: IFFALSE 5902
// sMortar := true ;
5894: LD_ADDR_EXP 58
5898: PUSH
5899: LD_INT 1
5901: ST_TO_ADDR
// if p3 = 115 then
5902: LD_VAR 0 3
5906: PUSH
5907: LD_INT 115
5909: EQUAL
5910: IFFALSE 5920
// sRanger := true ;
5912: LD_ADDR_EXP 68
5916: PUSH
5917: LD_INT 1
5919: ST_TO_ADDR
// end ; if p2 = 101 then
5920: LD_VAR 0 2
5924: PUSH
5925: LD_INT 101
5927: EQUAL
5928: IFFALSE 6131
// begin case p3 of 1 :
5930: LD_VAR 0 3
5934: PUSH
5935: LD_INT 1
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackUnlimitedResources ; 2 :
5944: CALL 16225 0 0
5948: GO 6131
5950: LD_INT 2
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackSetLevel10 ; 3 :
5959: CALL 16358 0 0
5963: GO 6131
5965: LD_INT 3
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackSetLevel10YourUnits ; 4 :
5974: CALL 16443 0 0
5978: GO 6131
5980: LD_INT 4
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 6010
5988: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
5989: LD_VAR 0 4
5993: PPUSH
5994: LD_VAR 0 5
5998: PPUSH
5999: LD_VAR 0 6
6003: PPUSH
6004: CALL 16533 0 3
6008: GO 6131
6010: LD_INT 5
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackSpawnVehicle ; 6 :
6019: CALL 16594 0 0
6023: GO 6131
6025: LD_INT 6
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6040
6033: POP
// hHackInvincible ; 7 :
6034: CALL 17140 0 0
6038: GO 6131
6040: LD_INT 7
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6055
6048: POP
// hHackInvisible ; 8 :
6049: CALL 17251 0 0
6053: GO 6131
6055: LD_INT 8
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6070
6063: POP
// hHackChangeYourSide ; 9 :
6064: CALL 17308 0 0
6068: GO 6131
6070: LD_INT 9
6072: DOUBLE
6073: EQUAL
6074: IFTRUE 6078
6076: GO 6085
6078: POP
// hHackChangeUnitSide ; 10 :
6079: CALL 17350 0 0
6083: GO 6131
6085: LD_INT 10
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6100
6093: POP
// hHackFog ; 11 :
6094: CALL 17451 0 0
6098: GO 6131
6100: LD_INT 11
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6115
6108: POP
// hHackApeman ; 12 :
6109: CALL 17466 0 0
6113: GO 6131
6115: LD_INT 12
6117: DOUBLE
6118: EQUAL
6119: IFTRUE 6123
6121: GO 6130
6123: POP
// hHackBoom ; end ;
6124: CALL 17551 0 0
6128: GO 6131
6130: POP
// end ; end ;
6131: PPOPN 6
6133: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6134: GO 6136
6136: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6137: LD_STRING initStreamRollete();
6139: PPUSH
6140: CALL_OW 559
// InitStreamMode ;
6144: CALL 6153 0 0
// DefineStreamItems ( ) ;
6148: CALL 6593 0 0
// end ;
6152: END
// function InitStreamMode ; begin
6153: LD_INT 0
6155: PPUSH
// streamModeActive := false ;
6156: LD_ADDR_EXP 15
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// normalCounter := 36 ;
6164: LD_ADDR_EXP 16
6168: PUSH
6169: LD_INT 36
6171: ST_TO_ADDR
// hardcoreCounter := 16 ;
6172: LD_ADDR_EXP 17
6176: PUSH
6177: LD_INT 16
6179: ST_TO_ADDR
// sRocket := false ;
6180: LD_ADDR_EXP 20
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sSpeed := false ;
6188: LD_ADDR_EXP 19
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sEngine := false ;
6196: LD_ADDR_EXP 21
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sSpec := false ;
6204: LD_ADDR_EXP 18
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sLevel := false ;
6212: LD_ADDR_EXP 22
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sArmoury := false ;
6220: LD_ADDR_EXP 23
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sRadar := false ;
6228: LD_ADDR_EXP 24
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sBunker := false ;
6236: LD_ADDR_EXP 25
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sHack := false ;
6244: LD_ADDR_EXP 26
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sFire := false ;
6252: LD_ADDR_EXP 27
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sRefresh := false ;
6260: LD_ADDR_EXP 28
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sExp := false ;
6268: LD_ADDR_EXP 29
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sDepot := false ;
6276: LD_ADDR_EXP 30
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sFlag := false ;
6284: LD_ADDR_EXP 31
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sKamikadze := false ;
6292: LD_ADDR_EXP 39
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sTroll := false ;
6300: LD_ADDR_EXP 40
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// sSlow := false ;
6308: LD_ADDR_EXP 41
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// sLack := false ;
6316: LD_ADDR_EXP 42
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// sTank := false ;
6324: LD_ADDR_EXP 44
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// sRemote := false ;
6332: LD_ADDR_EXP 45
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// sPowell := false ;
6340: LD_ADDR_EXP 46
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// sTeleport := false ;
6348: LD_ADDR_EXP 49
6352: PUSH
6353: LD_INT 0
6355: ST_TO_ADDR
// sOilTower := false ;
6356: LD_ADDR_EXP 51
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// sShovel := false ;
6364: LD_ADDR_EXP 52
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// sSheik := false ;
6372: LD_ADDR_EXP 53
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// sEarthquake := false ;
6380: LD_ADDR_EXP 55
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// sAI := false ;
6388: LD_ADDR_EXP 56
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// sCargo := false ;
6396: LD_ADDR_EXP 59
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// sDLaser := false ;
6404: LD_ADDR_EXP 60
6408: PUSH
6409: LD_INT 0
6411: ST_TO_ADDR
// sExchange := false ;
6412: LD_ADDR_EXP 61
6416: PUSH
6417: LD_INT 0
6419: ST_TO_ADDR
// sFac := false ;
6420: LD_ADDR_EXP 62
6424: PUSH
6425: LD_INT 0
6427: ST_TO_ADDR
// sPower := false ;
6428: LD_ADDR_EXP 63
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// sRandom := false ;
6436: LD_ADDR_EXP 64
6440: PUSH
6441: LD_INT 0
6443: ST_TO_ADDR
// sShield := false ;
6444: LD_ADDR_EXP 65
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// sTime := false ;
6452: LD_ADDR_EXP 66
6456: PUSH
6457: LD_INT 0
6459: ST_TO_ADDR
// sTools := false ;
6460: LD_ADDR_EXP 67
6464: PUSH
6465: LD_INT 0
6467: ST_TO_ADDR
// sSold := false ;
6468: LD_ADDR_EXP 32
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// sDiff := false ;
6476: LD_ADDR_EXP 33
6480: PUSH
6481: LD_INT 0
6483: ST_TO_ADDR
// sFog := false ;
6484: LD_ADDR_EXP 36
6488: PUSH
6489: LD_INT 0
6491: ST_TO_ADDR
// sReset := false ;
6492: LD_ADDR_EXP 37
6496: PUSH
6497: LD_INT 0
6499: ST_TO_ADDR
// sSun := false ;
6500: LD_ADDR_EXP 38
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// sTiger := false ;
6508: LD_ADDR_EXP 34
6512: PUSH
6513: LD_INT 0
6515: ST_TO_ADDR
// sBomb := false ;
6516: LD_ADDR_EXP 35
6520: PUSH
6521: LD_INT 0
6523: ST_TO_ADDR
// sWound := false ;
6524: LD_ADDR_EXP 43
6528: PUSH
6529: LD_INT 0
6531: ST_TO_ADDR
// sBetray := false ;
6532: LD_ADDR_EXP 47
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// sContamin := false ;
6540: LD_ADDR_EXP 48
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// sOil := false ;
6548: LD_ADDR_EXP 50
6552: PUSH
6553: LD_INT 0
6555: ST_TO_ADDR
// sStu := false ;
6556: LD_ADDR_EXP 54
6560: PUSH
6561: LD_INT 0
6563: ST_TO_ADDR
// sBazooka := false ;
6564: LD_ADDR_EXP 57
6568: PUSH
6569: LD_INT 0
6571: ST_TO_ADDR
// sMortar := false ;
6572: LD_ADDR_EXP 58
6576: PUSH
6577: LD_INT 0
6579: ST_TO_ADDR
// sRanger := false ;
6580: LD_ADDR_EXP 68
6584: PUSH
6585: LD_INT 0
6587: ST_TO_ADDR
// end ;
6588: LD_VAR 0 1
6592: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
// result := [ ] ;
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: EMPTY
6606: ST_TO_ADDR
// if campaign_id = 1 then
6607: LD_OWVAR 69
6611: PUSH
6612: LD_INT 1
6614: EQUAL
6615: IFFALSE 9553
// begin case mission_number of 1 :
6617: LD_OWVAR 70
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6694
6630: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6631: LD_ADDR_VAR 0 1
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 4
6641: PUSH
6642: LD_INT 11
6644: PUSH
6645: LD_INT 12
6647: PUSH
6648: LD_INT 15
6650: PUSH
6651: LD_INT 16
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_INT 23
6659: PUSH
6660: LD_INT 26
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 101
6676: PUSH
6677: LD_INT 102
6679: PUSH
6680: LD_INT 106
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: ST_TO_ADDR
6692: GO 9551
6694: LD_INT 2
6696: DOUBLE
6697: EQUAL
6698: IFTRUE 6702
6700: GO 6774
6702: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6703: LD_ADDR_VAR 0 1
6707: PUSH
6708: LD_INT 2
6710: PUSH
6711: LD_INT 4
6713: PUSH
6714: LD_INT 11
6716: PUSH
6717: LD_INT 12
6719: PUSH
6720: LD_INT 15
6722: PUSH
6723: LD_INT 16
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 23
6731: PUSH
6732: LD_INT 26
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 101
6748: PUSH
6749: LD_INT 102
6751: PUSH
6752: LD_INT 105
6754: PUSH
6755: LD_INT 106
6757: PUSH
6758: LD_INT 108
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: ST_TO_ADDR
6772: GO 9551
6774: LD_INT 3
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6858
6782: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6783: LD_ADDR_VAR 0 1
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: LD_INT 4
6793: PUSH
6794: LD_INT 5
6796: PUSH
6797: LD_INT 11
6799: PUSH
6800: LD_INT 12
6802: PUSH
6803: LD_INT 15
6805: PUSH
6806: LD_INT 16
6808: PUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 26
6814: PUSH
6815: LD_INT 36
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 101
6832: PUSH
6833: LD_INT 102
6835: PUSH
6836: LD_INT 105
6838: PUSH
6839: LD_INT 106
6841: PUSH
6842: LD_INT 108
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: ST_TO_ADDR
6856: GO 9551
6858: LD_INT 4
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6950
6866: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6867: LD_ADDR_VAR 0 1
6871: PUSH
6872: LD_INT 2
6874: PUSH
6875: LD_INT 4
6877: PUSH
6878: LD_INT 5
6880: PUSH
6881: LD_INT 8
6883: PUSH
6884: LD_INT 11
6886: PUSH
6887: LD_INT 12
6889: PUSH
6890: LD_INT 15
6892: PUSH
6893: LD_INT 16
6895: PUSH
6896: LD_INT 22
6898: PUSH
6899: LD_INT 23
6901: PUSH
6902: LD_INT 26
6904: PUSH
6905: LD_INT 36
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 108
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: ST_TO_ADDR
6948: GO 9551
6950: LD_INT 5
6952: DOUBLE
6953: EQUAL
6954: IFTRUE 6958
6956: GO 7058
6958: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6959: LD_ADDR_VAR 0 1
6963: PUSH
6964: LD_INT 2
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: LD_INT 5
6972: PUSH
6973: LD_INT 6
6975: PUSH
6976: LD_INT 8
6978: PUSH
6979: LD_INT 11
6981: PUSH
6982: LD_INT 12
6984: PUSH
6985: LD_INT 15
6987: PUSH
6988: LD_INT 16
6990: PUSH
6991: LD_INT 22
6993: PUSH
6994: LD_INT 23
6996: PUSH
6997: LD_INT 25
6999: PUSH
7000: LD_INT 26
7002: PUSH
7003: LD_INT 36
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 101
7024: PUSH
7025: LD_INT 102
7027: PUSH
7028: LD_INT 105
7030: PUSH
7031: LD_INT 106
7033: PUSH
7034: LD_INT 108
7036: PUSH
7037: LD_INT 109
7039: PUSH
7040: LD_INT 112
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: ST_TO_ADDR
7056: GO 9551
7058: LD_INT 6
7060: DOUBLE
7061: EQUAL
7062: IFTRUE 7066
7064: GO 7186
7066: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7067: LD_ADDR_VAR 0 1
7071: PUSH
7072: LD_INT 2
7074: PUSH
7075: LD_INT 4
7077: PUSH
7078: LD_INT 5
7080: PUSH
7081: LD_INT 6
7083: PUSH
7084: LD_INT 8
7086: PUSH
7087: LD_INT 11
7089: PUSH
7090: LD_INT 12
7092: PUSH
7093: LD_INT 15
7095: PUSH
7096: LD_INT 16
7098: PUSH
7099: LD_INT 20
7101: PUSH
7102: LD_INT 21
7104: PUSH
7105: LD_INT 22
7107: PUSH
7108: LD_INT 23
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 26
7116: PUSH
7117: LD_INT 30
7119: PUSH
7120: LD_INT 31
7122: PUSH
7123: LD_INT 32
7125: PUSH
7126: LD_INT 36
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 101
7152: PUSH
7153: LD_INT 102
7155: PUSH
7156: LD_INT 105
7158: PUSH
7159: LD_INT 106
7161: PUSH
7162: LD_INT 108
7164: PUSH
7165: LD_INT 109
7167: PUSH
7168: LD_INT 112
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: ST_TO_ADDR
7184: GO 9551
7186: LD_INT 7
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7294
7194: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7195: LD_ADDR_VAR 0 1
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 4
7205: PUSH
7206: LD_INT 5
7208: PUSH
7209: LD_INT 7
7211: PUSH
7212: LD_INT 11
7214: PUSH
7215: LD_INT 12
7217: PUSH
7218: LD_INT 15
7220: PUSH
7221: LD_INT 16
7223: PUSH
7224: LD_INT 20
7226: PUSH
7227: LD_INT 21
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_INT 23
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 26
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 101
7260: PUSH
7261: LD_INT 102
7263: PUSH
7264: LD_INT 103
7266: PUSH
7267: LD_INT 105
7269: PUSH
7270: LD_INT 106
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 112
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: ST_TO_ADDR
7292: GO 9551
7294: LD_INT 8
7296: DOUBLE
7297: EQUAL
7298: IFTRUE 7302
7300: GO 7430
7302: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7303: LD_ADDR_VAR 0 1
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: LD_INT 4
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: LD_INT 11
7328: PUSH
7329: LD_INT 12
7331: PUSH
7332: LD_INT 15
7334: PUSH
7335: LD_INT 16
7337: PUSH
7338: LD_INT 20
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 23
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 26
7355: PUSH
7356: LD_INT 30
7358: PUSH
7359: LD_INT 31
7361: PUSH
7362: LD_INT 32
7364: PUSH
7365: LD_INT 36
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: LD_INT 101
7392: PUSH
7393: LD_INT 102
7395: PUSH
7396: LD_INT 103
7398: PUSH
7399: LD_INT 105
7401: PUSH
7402: LD_INT 106
7404: PUSH
7405: LD_INT 108
7407: PUSH
7408: LD_INT 109
7410: PUSH
7411: LD_INT 112
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: ST_TO_ADDR
7428: GO 9551
7430: LD_INT 9
7432: DOUBLE
7433: EQUAL
7434: IFTRUE 7438
7436: GO 7574
7438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7439: LD_ADDR_VAR 0 1
7443: PUSH
7444: LD_INT 2
7446: PUSH
7447: LD_INT 4
7449: PUSH
7450: LD_INT 5
7452: PUSH
7453: LD_INT 6
7455: PUSH
7456: LD_INT 7
7458: PUSH
7459: LD_INT 8
7461: PUSH
7462: LD_INT 11
7464: PUSH
7465: LD_INT 12
7467: PUSH
7468: LD_INT 15
7470: PUSH
7471: LD_INT 16
7473: PUSH
7474: LD_INT 20
7476: PUSH
7477: LD_INT 21
7479: PUSH
7480: LD_INT 22
7482: PUSH
7483: LD_INT 23
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 26
7491: PUSH
7492: LD_INT 28
7494: PUSH
7495: LD_INT 30
7497: PUSH
7498: LD_INT 31
7500: PUSH
7501: LD_INT 32
7503: PUSH
7504: LD_INT 36
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 101
7532: PUSH
7533: LD_INT 102
7535: PUSH
7536: LD_INT 103
7538: PUSH
7539: LD_INT 105
7541: PUSH
7542: LD_INT 106
7544: PUSH
7545: LD_INT 108
7547: PUSH
7548: LD_INT 109
7550: PUSH
7551: LD_INT 112
7553: PUSH
7554: LD_INT 114
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: ST_TO_ADDR
7572: GO 9551
7574: LD_INT 10
7576: DOUBLE
7577: EQUAL
7578: IFTRUE 7582
7580: GO 7766
7582: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7583: LD_ADDR_VAR 0 1
7587: PUSH
7588: LD_INT 2
7590: PUSH
7591: LD_INT 4
7593: PUSH
7594: LD_INT 5
7596: PUSH
7597: LD_INT 6
7599: PUSH
7600: LD_INT 7
7602: PUSH
7603: LD_INT 8
7605: PUSH
7606: LD_INT 9
7608: PUSH
7609: LD_INT 10
7611: PUSH
7612: LD_INT 11
7614: PUSH
7615: LD_INT 12
7617: PUSH
7618: LD_INT 13
7620: PUSH
7621: LD_INT 14
7623: PUSH
7624: LD_INT 15
7626: PUSH
7627: LD_INT 16
7629: PUSH
7630: LD_INT 17
7632: PUSH
7633: LD_INT 18
7635: PUSH
7636: LD_INT 19
7638: PUSH
7639: LD_INT 20
7641: PUSH
7642: LD_INT 21
7644: PUSH
7645: LD_INT 22
7647: PUSH
7648: LD_INT 23
7650: PUSH
7651: LD_INT 24
7653: PUSH
7654: LD_INT 25
7656: PUSH
7657: LD_INT 26
7659: PUSH
7660: LD_INT 28
7662: PUSH
7663: LD_INT 30
7665: PUSH
7666: LD_INT 31
7668: PUSH
7669: LD_INT 32
7671: PUSH
7672: LD_INT 36
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 101
7708: PUSH
7709: LD_INT 102
7711: PUSH
7712: LD_INT 103
7714: PUSH
7715: LD_INT 104
7717: PUSH
7718: LD_INT 105
7720: PUSH
7721: LD_INT 106
7723: PUSH
7724: LD_INT 107
7726: PUSH
7727: LD_INT 108
7729: PUSH
7730: LD_INT 109
7732: PUSH
7733: LD_INT 110
7735: PUSH
7736: LD_INT 111
7738: PUSH
7739: LD_INT 112
7741: PUSH
7742: LD_INT 114
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: ST_TO_ADDR
7764: GO 9551
7766: LD_INT 11
7768: DOUBLE
7769: EQUAL
7770: IFTRUE 7774
7772: GO 7966
7774: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7775: LD_ADDR_VAR 0 1
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 4
7788: PUSH
7789: LD_INT 5
7791: PUSH
7792: LD_INT 6
7794: PUSH
7795: LD_INT 7
7797: PUSH
7798: LD_INT 8
7800: PUSH
7801: LD_INT 9
7803: PUSH
7804: LD_INT 10
7806: PUSH
7807: LD_INT 11
7809: PUSH
7810: LD_INT 12
7812: PUSH
7813: LD_INT 13
7815: PUSH
7816: LD_INT 14
7818: PUSH
7819: LD_INT 15
7821: PUSH
7822: LD_INT 16
7824: PUSH
7825: LD_INT 17
7827: PUSH
7828: LD_INT 18
7830: PUSH
7831: LD_INT 19
7833: PUSH
7834: LD_INT 20
7836: PUSH
7837: LD_INT 21
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_INT 23
7845: PUSH
7846: LD_INT 24
7848: PUSH
7849: LD_INT 25
7851: PUSH
7852: LD_INT 26
7854: PUSH
7855: LD_INT 28
7857: PUSH
7858: LD_INT 30
7860: PUSH
7861: LD_INT 31
7863: PUSH
7864: LD_INT 32
7866: PUSH
7867: LD_INT 34
7869: PUSH
7870: LD_INT 36
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 101
7908: PUSH
7909: LD_INT 102
7911: PUSH
7912: LD_INT 103
7914: PUSH
7915: LD_INT 104
7917: PUSH
7918: LD_INT 105
7920: PUSH
7921: LD_INT 106
7923: PUSH
7924: LD_INT 107
7926: PUSH
7927: LD_INT 108
7929: PUSH
7930: LD_INT 109
7932: PUSH
7933: LD_INT 110
7935: PUSH
7936: LD_INT 111
7938: PUSH
7939: LD_INT 112
7941: PUSH
7942: LD_INT 114
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: ST_TO_ADDR
7964: GO 9551
7966: LD_INT 12
7968: DOUBLE
7969: EQUAL
7970: IFTRUE 7974
7972: GO 8182
7974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7975: LD_ADDR_VAR 0 1
7979: PUSH
7980: LD_INT 1
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 3
7988: PUSH
7989: LD_INT 4
7991: PUSH
7992: LD_INT 5
7994: PUSH
7995: LD_INT 6
7997: PUSH
7998: LD_INT 7
8000: PUSH
8001: LD_INT 8
8003: PUSH
8004: LD_INT 9
8006: PUSH
8007: LD_INT 10
8009: PUSH
8010: LD_INT 11
8012: PUSH
8013: LD_INT 12
8015: PUSH
8016: LD_INT 13
8018: PUSH
8019: LD_INT 14
8021: PUSH
8022: LD_INT 15
8024: PUSH
8025: LD_INT 16
8027: PUSH
8028: LD_INT 17
8030: PUSH
8031: LD_INT 18
8033: PUSH
8034: LD_INT 19
8036: PUSH
8037: LD_INT 20
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 22
8045: PUSH
8046: LD_INT 23
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: LD_INT 25
8054: PUSH
8055: LD_INT 26
8057: PUSH
8058: LD_INT 27
8060: PUSH
8061: LD_INT 28
8063: PUSH
8064: LD_INT 30
8066: PUSH
8067: LD_INT 31
8069: PUSH
8070: LD_INT 32
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 34
8078: PUSH
8079: LD_INT 36
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 101
8120: PUSH
8121: LD_INT 102
8123: PUSH
8124: LD_INT 103
8126: PUSH
8127: LD_INT 104
8129: PUSH
8130: LD_INT 105
8132: PUSH
8133: LD_INT 106
8135: PUSH
8136: LD_INT 107
8138: PUSH
8139: LD_INT 108
8141: PUSH
8142: LD_INT 109
8144: PUSH
8145: LD_INT 110
8147: PUSH
8148: LD_INT 111
8150: PUSH
8151: LD_INT 112
8153: PUSH
8154: LD_INT 113
8156: PUSH
8157: LD_INT 114
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: ST_TO_ADDR
8180: GO 9551
8182: LD_INT 13
8184: DOUBLE
8185: EQUAL
8186: IFTRUE 8190
8188: GO 8386
8190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8191: LD_ADDR_VAR 0 1
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: LD_INT 2
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: LD_INT 4
8207: PUSH
8208: LD_INT 5
8210: PUSH
8211: LD_INT 8
8213: PUSH
8214: LD_INT 9
8216: PUSH
8217: LD_INT 10
8219: PUSH
8220: LD_INT 11
8222: PUSH
8223: LD_INT 12
8225: PUSH
8226: LD_INT 14
8228: PUSH
8229: LD_INT 15
8231: PUSH
8232: LD_INT 16
8234: PUSH
8235: LD_INT 17
8237: PUSH
8238: LD_INT 18
8240: PUSH
8241: LD_INT 19
8243: PUSH
8244: LD_INT 20
8246: PUSH
8247: LD_INT 21
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 23
8255: PUSH
8256: LD_INT 24
8258: PUSH
8259: LD_INT 25
8261: PUSH
8262: LD_INT 26
8264: PUSH
8265: LD_INT 27
8267: PUSH
8268: LD_INT 28
8270: PUSH
8271: LD_INT 30
8273: PUSH
8274: LD_INT 31
8276: PUSH
8277: LD_INT 32
8279: PUSH
8280: LD_INT 33
8282: PUSH
8283: LD_INT 34
8285: PUSH
8286: LD_INT 36
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 101
8324: PUSH
8325: LD_INT 102
8327: PUSH
8328: LD_INT 103
8330: PUSH
8331: LD_INT 104
8333: PUSH
8334: LD_INT 105
8336: PUSH
8337: LD_INT 106
8339: PUSH
8340: LD_INT 107
8342: PUSH
8343: LD_INT 108
8345: PUSH
8346: LD_INT 109
8348: PUSH
8349: LD_INT 110
8351: PUSH
8352: LD_INT 111
8354: PUSH
8355: LD_INT 112
8357: PUSH
8358: LD_INT 113
8360: PUSH
8361: LD_INT 114
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: ST_TO_ADDR
8384: GO 9551
8386: LD_INT 14
8388: DOUBLE
8389: EQUAL
8390: IFTRUE 8394
8392: GO 8606
8394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8395: LD_ADDR_VAR 0 1
8399: PUSH
8400: LD_INT 1
8402: PUSH
8403: LD_INT 2
8405: PUSH
8406: LD_INT 3
8408: PUSH
8409: LD_INT 4
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: LD_INT 6
8417: PUSH
8418: LD_INT 7
8420: PUSH
8421: LD_INT 8
8423: PUSH
8424: LD_INT 9
8426: PUSH
8427: LD_INT 10
8429: PUSH
8430: LD_INT 11
8432: PUSH
8433: LD_INT 12
8435: PUSH
8436: LD_INT 13
8438: PUSH
8439: LD_INT 14
8441: PUSH
8442: LD_INT 15
8444: PUSH
8445: LD_INT 16
8447: PUSH
8448: LD_INT 17
8450: PUSH
8451: LD_INT 18
8453: PUSH
8454: LD_INT 19
8456: PUSH
8457: LD_INT 20
8459: PUSH
8460: LD_INT 21
8462: PUSH
8463: LD_INT 22
8465: PUSH
8466: LD_INT 23
8468: PUSH
8469: LD_INT 24
8471: PUSH
8472: LD_INT 25
8474: PUSH
8475: LD_INT 26
8477: PUSH
8478: LD_INT 27
8480: PUSH
8481: LD_INT 28
8483: PUSH
8484: LD_INT 29
8486: PUSH
8487: LD_INT 30
8489: PUSH
8490: LD_INT 31
8492: PUSH
8493: LD_INT 32
8495: PUSH
8496: LD_INT 33
8498: PUSH
8499: LD_INT 34
8501: PUSH
8502: LD_INT 36
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 101
8544: PUSH
8545: LD_INT 102
8547: PUSH
8548: LD_INT 103
8550: PUSH
8551: LD_INT 104
8553: PUSH
8554: LD_INT 105
8556: PUSH
8557: LD_INT 106
8559: PUSH
8560: LD_INT 107
8562: PUSH
8563: LD_INT 108
8565: PUSH
8566: LD_INT 109
8568: PUSH
8569: LD_INT 110
8571: PUSH
8572: LD_INT 111
8574: PUSH
8575: LD_INT 112
8577: PUSH
8578: LD_INT 113
8580: PUSH
8581: LD_INT 114
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: ST_TO_ADDR
8604: GO 9551
8606: LD_INT 15
8608: DOUBLE
8609: EQUAL
8610: IFTRUE 8614
8612: GO 8826
8614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8615: LD_ADDR_VAR 0 1
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 3
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: LD_INT 6
8637: PUSH
8638: LD_INT 7
8640: PUSH
8641: LD_INT 8
8643: PUSH
8644: LD_INT 9
8646: PUSH
8647: LD_INT 10
8649: PUSH
8650: LD_INT 11
8652: PUSH
8653: LD_INT 12
8655: PUSH
8656: LD_INT 13
8658: PUSH
8659: LD_INT 14
8661: PUSH
8662: LD_INT 15
8664: PUSH
8665: LD_INT 16
8667: PUSH
8668: LD_INT 17
8670: PUSH
8671: LD_INT 18
8673: PUSH
8674: LD_INT 19
8676: PUSH
8677: LD_INT 20
8679: PUSH
8680: LD_INT 21
8682: PUSH
8683: LD_INT 22
8685: PUSH
8686: LD_INT 23
8688: PUSH
8689: LD_INT 24
8691: PUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 26
8697: PUSH
8698: LD_INT 27
8700: PUSH
8701: LD_INT 28
8703: PUSH
8704: LD_INT 29
8706: PUSH
8707: LD_INT 30
8709: PUSH
8710: LD_INT 31
8712: PUSH
8713: LD_INT 32
8715: PUSH
8716: LD_INT 33
8718: PUSH
8719: LD_INT 34
8721: PUSH
8722: LD_INT 36
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 101
8764: PUSH
8765: LD_INT 102
8767: PUSH
8768: LD_INT 103
8770: PUSH
8771: LD_INT 104
8773: PUSH
8774: LD_INT 105
8776: PUSH
8777: LD_INT 106
8779: PUSH
8780: LD_INT 107
8782: PUSH
8783: LD_INT 108
8785: PUSH
8786: LD_INT 109
8788: PUSH
8789: LD_INT 110
8791: PUSH
8792: LD_INT 111
8794: PUSH
8795: LD_INT 112
8797: PUSH
8798: LD_INT 113
8800: PUSH
8801: LD_INT 114
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: ST_TO_ADDR
8824: GO 9551
8826: LD_INT 16
8828: DOUBLE
8829: EQUAL
8830: IFTRUE 8834
8832: GO 8958
8834: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8835: LD_ADDR_VAR 0 1
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: LD_INT 4
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: LD_INT 7
8851: PUSH
8852: LD_INT 11
8854: PUSH
8855: LD_INT 12
8857: PUSH
8858: LD_INT 15
8860: PUSH
8861: LD_INT 16
8863: PUSH
8864: LD_INT 20
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 23
8875: PUSH
8876: LD_INT 25
8878: PUSH
8879: LD_INT 26
8881: PUSH
8882: LD_INT 30
8884: PUSH
8885: LD_INT 31
8887: PUSH
8888: LD_INT 32
8890: PUSH
8891: LD_INT 33
8893: PUSH
8894: LD_INT 34
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 101
8920: PUSH
8921: LD_INT 102
8923: PUSH
8924: LD_INT 103
8926: PUSH
8927: LD_INT 106
8929: PUSH
8930: LD_INT 108
8932: PUSH
8933: LD_INT 112
8935: PUSH
8936: LD_INT 113
8938: PUSH
8939: LD_INT 114
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: ST_TO_ADDR
8956: GO 9551
8958: LD_INT 17
8960: DOUBLE
8961: EQUAL
8962: IFTRUE 8966
8964: GO 9178
8966: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8967: LD_ADDR_VAR 0 1
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: LD_INT 2
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: LD_INT 4
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: LD_INT 6
8989: PUSH
8990: LD_INT 7
8992: PUSH
8993: LD_INT 8
8995: PUSH
8996: LD_INT 9
8998: PUSH
8999: LD_INT 10
9001: PUSH
9002: LD_INT 11
9004: PUSH
9005: LD_INT 12
9007: PUSH
9008: LD_INT 13
9010: PUSH
9011: LD_INT 14
9013: PUSH
9014: LD_INT 15
9016: PUSH
9017: LD_INT 16
9019: PUSH
9020: LD_INT 17
9022: PUSH
9023: LD_INT 18
9025: PUSH
9026: LD_INT 19
9028: PUSH
9029: LD_INT 20
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 22
9037: PUSH
9038: LD_INT 23
9040: PUSH
9041: LD_INT 24
9043: PUSH
9044: LD_INT 25
9046: PUSH
9047: LD_INT 26
9049: PUSH
9050: LD_INT 27
9052: PUSH
9053: LD_INT 28
9055: PUSH
9056: LD_INT 29
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 31
9064: PUSH
9065: LD_INT 32
9067: PUSH
9068: LD_INT 33
9070: PUSH
9071: LD_INT 34
9073: PUSH
9074: LD_INT 36
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 101
9116: PUSH
9117: LD_INT 102
9119: PUSH
9120: LD_INT 103
9122: PUSH
9123: LD_INT 104
9125: PUSH
9126: LD_INT 105
9128: PUSH
9129: LD_INT 106
9131: PUSH
9132: LD_INT 107
9134: PUSH
9135: LD_INT 108
9137: PUSH
9138: LD_INT 109
9140: PUSH
9141: LD_INT 110
9143: PUSH
9144: LD_INT 111
9146: PUSH
9147: LD_INT 112
9149: PUSH
9150: LD_INT 113
9152: PUSH
9153: LD_INT 114
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ST_TO_ADDR
9176: GO 9551
9178: LD_INT 18
9180: DOUBLE
9181: EQUAL
9182: IFTRUE 9186
9184: GO 9322
9186: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9187: LD_ADDR_VAR 0 1
9191: PUSH
9192: LD_INT 2
9194: PUSH
9195: LD_INT 4
9197: PUSH
9198: LD_INT 5
9200: PUSH
9201: LD_INT 7
9203: PUSH
9204: LD_INT 11
9206: PUSH
9207: LD_INT 12
9209: PUSH
9210: LD_INT 15
9212: PUSH
9213: LD_INT 16
9215: PUSH
9216: LD_INT 20
9218: PUSH
9219: LD_INT 21
9221: PUSH
9222: LD_INT 22
9224: PUSH
9225: LD_INT 23
9227: PUSH
9228: LD_INT 25
9230: PUSH
9231: LD_INT 26
9233: PUSH
9234: LD_INT 30
9236: PUSH
9237: LD_INT 31
9239: PUSH
9240: LD_INT 32
9242: PUSH
9243: LD_INT 33
9245: PUSH
9246: LD_INT 34
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 36
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 101
9280: PUSH
9281: LD_INT 102
9283: PUSH
9284: LD_INT 103
9286: PUSH
9287: LD_INT 106
9289: PUSH
9290: LD_INT 108
9292: PUSH
9293: LD_INT 112
9295: PUSH
9296: LD_INT 113
9298: PUSH
9299: LD_INT 114
9301: PUSH
9302: LD_INT 115
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: ST_TO_ADDR
9320: GO 9551
9322: LD_INT 19
9324: DOUBLE
9325: EQUAL
9326: IFTRUE 9330
9328: GO 9550
9330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9331: LD_ADDR_VAR 0 1
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: LD_INT 3
9344: PUSH
9345: LD_INT 4
9347: PUSH
9348: LD_INT 5
9350: PUSH
9351: LD_INT 6
9353: PUSH
9354: LD_INT 7
9356: PUSH
9357: LD_INT 8
9359: PUSH
9360: LD_INT 9
9362: PUSH
9363: LD_INT 10
9365: PUSH
9366: LD_INT 11
9368: PUSH
9369: LD_INT 12
9371: PUSH
9372: LD_INT 13
9374: PUSH
9375: LD_INT 14
9377: PUSH
9378: LD_INT 15
9380: PUSH
9381: LD_INT 16
9383: PUSH
9384: LD_INT 17
9386: PUSH
9387: LD_INT 18
9389: PUSH
9390: LD_INT 19
9392: PUSH
9393: LD_INT 20
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 22
9401: PUSH
9402: LD_INT 23
9404: PUSH
9405: LD_INT 24
9407: PUSH
9408: LD_INT 25
9410: PUSH
9411: LD_INT 26
9413: PUSH
9414: LD_INT 27
9416: PUSH
9417: LD_INT 28
9419: PUSH
9420: LD_INT 29
9422: PUSH
9423: LD_INT 30
9425: PUSH
9426: LD_INT 31
9428: PUSH
9429: LD_INT 32
9431: PUSH
9432: LD_INT 33
9434: PUSH
9435: LD_INT 34
9437: PUSH
9438: LD_INT 35
9440: PUSH
9441: LD_INT 36
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: PUSH
9482: LD_INT 101
9484: PUSH
9485: LD_INT 102
9487: PUSH
9488: LD_INT 103
9490: PUSH
9491: LD_INT 104
9493: PUSH
9494: LD_INT 105
9496: PUSH
9497: LD_INT 106
9499: PUSH
9500: LD_INT 107
9502: PUSH
9503: LD_INT 108
9505: PUSH
9506: LD_INT 109
9508: PUSH
9509: LD_INT 110
9511: PUSH
9512: LD_INT 111
9514: PUSH
9515: LD_INT 112
9517: PUSH
9518: LD_INT 113
9520: PUSH
9521: LD_INT 114
9523: PUSH
9524: LD_INT 115
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: ST_TO_ADDR
9548: GO 9551
9550: POP
// end else
9551: GO 9770
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9553: LD_ADDR_VAR 0 1
9557: PUSH
9558: LD_INT 1
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: LD_INT 3
9566: PUSH
9567: LD_INT 4
9569: PUSH
9570: LD_INT 5
9572: PUSH
9573: LD_INT 6
9575: PUSH
9576: LD_INT 7
9578: PUSH
9579: LD_INT 8
9581: PUSH
9582: LD_INT 9
9584: PUSH
9585: LD_INT 10
9587: PUSH
9588: LD_INT 11
9590: PUSH
9591: LD_INT 12
9593: PUSH
9594: LD_INT 13
9596: PUSH
9597: LD_INT 14
9599: PUSH
9600: LD_INT 15
9602: PUSH
9603: LD_INT 16
9605: PUSH
9606: LD_INT 17
9608: PUSH
9609: LD_INT 18
9611: PUSH
9612: LD_INT 19
9614: PUSH
9615: LD_INT 20
9617: PUSH
9618: LD_INT 21
9620: PUSH
9621: LD_INT 22
9623: PUSH
9624: LD_INT 23
9626: PUSH
9627: LD_INT 24
9629: PUSH
9630: LD_INT 25
9632: PUSH
9633: LD_INT 26
9635: PUSH
9636: LD_INT 27
9638: PUSH
9639: LD_INT 28
9641: PUSH
9642: LD_INT 29
9644: PUSH
9645: LD_INT 30
9647: PUSH
9648: LD_INT 31
9650: PUSH
9651: LD_INT 32
9653: PUSH
9654: LD_INT 33
9656: PUSH
9657: LD_INT 34
9659: PUSH
9660: LD_INT 35
9662: PUSH
9663: LD_INT 36
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 101
9706: PUSH
9707: LD_INT 102
9709: PUSH
9710: LD_INT 103
9712: PUSH
9713: LD_INT 104
9715: PUSH
9716: LD_INT 105
9718: PUSH
9719: LD_INT 106
9721: PUSH
9722: LD_INT 107
9724: PUSH
9725: LD_INT 108
9727: PUSH
9728: LD_INT 109
9730: PUSH
9731: LD_INT 110
9733: PUSH
9734: LD_INT 111
9736: PUSH
9737: LD_INT 112
9739: PUSH
9740: LD_INT 113
9742: PUSH
9743: LD_INT 114
9745: PUSH
9746: LD_INT 115
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: ST_TO_ADDR
// if result then
9770: LD_VAR 0 1
9774: IFFALSE 10063
// begin normal :=  ;
9776: LD_ADDR_VAR 0 3
9780: PUSH
9781: LD_STRING 
9783: ST_TO_ADDR
// hardcore :=  ;
9784: LD_ADDR_VAR 0 4
9788: PUSH
9789: LD_STRING 
9791: ST_TO_ADDR
// for i = 1 to normalCounter do
9792: LD_ADDR_VAR 0 5
9796: PUSH
9797: DOUBLE
9798: LD_INT 1
9800: DEC
9801: ST_TO_ADDR
9802: LD_EXP 16
9806: PUSH
9807: FOR_TO
9808: IFFALSE 9909
// begin tmp := 0 ;
9810: LD_ADDR_VAR 0 2
9814: PUSH
9815: LD_STRING 0
9817: ST_TO_ADDR
// if result [ 1 ] then
9818: LD_VAR 0 1
9822: PUSH
9823: LD_INT 1
9825: ARRAY
9826: IFFALSE 9891
// if result [ 1 ] [ 1 ] = i then
9828: LD_VAR 0 1
9832: PUSH
9833: LD_INT 1
9835: ARRAY
9836: PUSH
9837: LD_INT 1
9839: ARRAY
9840: PUSH
9841: LD_VAR 0 5
9845: EQUAL
9846: IFFALSE 9891
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9848: LD_ADDR_VAR 0 1
9852: PUSH
9853: LD_VAR 0 1
9857: PPUSH
9858: LD_INT 1
9860: PPUSH
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: ARRAY
9869: PPUSH
9870: LD_INT 1
9872: PPUSH
9873: CALL_OW 3
9877: PPUSH
9878: CALL_OW 1
9882: ST_TO_ADDR
// tmp := 1 ;
9883: LD_ADDR_VAR 0 2
9887: PUSH
9888: LD_STRING 1
9890: ST_TO_ADDR
// end ; normal := normal & tmp ;
9891: LD_ADDR_VAR 0 3
9895: PUSH
9896: LD_VAR 0 3
9900: PUSH
9901: LD_VAR 0 2
9905: STR
9906: ST_TO_ADDR
// end ;
9907: GO 9807
9909: POP
9910: POP
// for i = 1 to hardcoreCounter do
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: DOUBLE
9917: LD_INT 1
9919: DEC
9920: ST_TO_ADDR
9921: LD_EXP 17
9925: PUSH
9926: FOR_TO
9927: IFFALSE 10032
// begin tmp := 0 ;
9929: LD_ADDR_VAR 0 2
9933: PUSH
9934: LD_STRING 0
9936: ST_TO_ADDR
// if result [ 2 ] then
9937: LD_VAR 0 1
9941: PUSH
9942: LD_INT 2
9944: ARRAY
9945: IFFALSE 10014
// if result [ 2 ] [ 1 ] = 100 + i then
9947: LD_VAR 0 1
9951: PUSH
9952: LD_INT 2
9954: ARRAY
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PUSH
9960: LD_INT 100
9962: PUSH
9963: LD_VAR 0 5
9967: PLUS
9968: EQUAL
9969: IFFALSE 10014
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9971: LD_ADDR_VAR 0 1
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: LD_INT 2
9983: PPUSH
9984: LD_VAR 0 1
9988: PUSH
9989: LD_INT 2
9991: ARRAY
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 3
10000: PPUSH
10001: CALL_OW 1
10005: ST_TO_ADDR
// tmp := 1 ;
10006: LD_ADDR_VAR 0 2
10010: PUSH
10011: LD_STRING 1
10013: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10014: LD_ADDR_VAR 0 4
10018: PUSH
10019: LD_VAR 0 4
10023: PUSH
10024: LD_VAR 0 2
10028: STR
10029: ST_TO_ADDR
// end ;
10030: GO 9926
10032: POP
10033: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10034: LD_STRING getStreamItemsFromMission("
10036: PUSH
10037: LD_VAR 0 3
10041: STR
10042: PUSH
10043: LD_STRING ","
10045: STR
10046: PUSH
10047: LD_VAR 0 4
10051: STR
10052: PUSH
10053: LD_STRING ")
10055: STR
10056: PPUSH
10057: CALL_OW 559
// end else
10061: GO 10070
// ToLua ( getStreamItemsFromMission("","") ) ;
10063: LD_STRING getStreamItemsFromMission("","")
10065: PPUSH
10066: CALL_OW 559
// end ;
10070: LD_VAR 0 1
10074: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10075: LD_EXP 15
10079: PUSH
10080: LD_EXP 20
10084: AND
10085: IFFALSE 10209
10087: GO 10089
10089: DISABLE
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
// begin enable ;
10094: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10095: LD_ADDR_VAR 0 2
10099: PUSH
10100: LD_INT 22
10102: PUSH
10103: LD_OWVAR 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 2
10114: PUSH
10115: LD_INT 34
10117: PUSH
10118: LD_INT 7
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 34
10127: PUSH
10128: LD_INT 45
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 34
10137: PUSH
10138: LD_INT 28
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 34
10147: PUSH
10148: LD_INT 47
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: ST_TO_ADDR
// if not tmp then
10171: LD_VAR 0 2
10175: NOT
10176: IFFALSE 10180
// exit ;
10178: GO 10209
// for i in tmp do
10180: LD_ADDR_VAR 0 1
10184: PUSH
10185: LD_VAR 0 2
10189: PUSH
10190: FOR_IN
10191: IFFALSE 10207
// begin SetLives ( i , 0 ) ;
10193: LD_VAR 0 1
10197: PPUSH
10198: LD_INT 0
10200: PPUSH
10201: CALL_OW 234
// end ;
10205: GO 10190
10207: POP
10208: POP
// end ;
10209: PPOPN 2
10211: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10212: LD_EXP 15
10216: PUSH
10217: LD_EXP 21
10221: AND
10222: IFFALSE 10306
10224: GO 10226
10226: DISABLE
10227: LD_INT 0
10229: PPUSH
10230: PPUSH
// begin enable ;
10231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10232: LD_ADDR_VAR 0 2
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_OWVAR 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 32
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PPUSH
10263: CALL_OW 69
10267: ST_TO_ADDR
// if not tmp then
10268: LD_VAR 0 2
10272: NOT
10273: IFFALSE 10277
// exit ;
10275: GO 10306
// for i in tmp do
10277: LD_ADDR_VAR 0 1
10281: PUSH
10282: LD_VAR 0 2
10286: PUSH
10287: FOR_IN
10288: IFFALSE 10304
// begin SetLives ( i , 0 ) ;
10290: LD_VAR 0 1
10294: PPUSH
10295: LD_INT 0
10297: PPUSH
10298: CALL_OW 234
// end ;
10302: GO 10287
10304: POP
10305: POP
// end ;
10306: PPOPN 2
10308: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10309: LD_EXP 15
10313: PUSH
10314: LD_EXP 18
10318: AND
10319: IFFALSE 10412
10321: GO 10323
10323: DISABLE
10324: LD_INT 0
10326: PPUSH
// begin enable ;
10327: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10328: LD_ADDR_VAR 0 1
10332: PUSH
10333: LD_INT 22
10335: PUSH
10336: LD_OWVAR 2
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: LD_INT 25
10350: PUSH
10351: LD_INT 5
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 25
10360: PUSH
10361: LD_INT 9
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 25
10370: PUSH
10371: LD_INT 8
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PUSH
10393: FOR_IN
10394: IFFALSE 10410
// begin SetClass ( i , 1 ) ;
10396: LD_VAR 0 1
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 336
// end ;
10408: GO 10393
10410: POP
10411: POP
// end ;
10412: PPOPN 1
10414: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10415: LD_EXP 15
10419: PUSH
10420: LD_EXP 19
10424: AND
10425: PUSH
10426: LD_OWVAR 65
10430: PUSH
10431: LD_INT 7
10433: LESS
10434: AND
10435: IFFALSE 10449
10437: GO 10439
10439: DISABLE
// begin enable ;
10440: ENABLE
// game_speed := 7 ;
10441: LD_ADDR_OWVAR 65
10445: PUSH
10446: LD_INT 7
10448: ST_TO_ADDR
// end ;
10449: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10450: LD_EXP 15
10454: PUSH
10455: LD_EXP 22
10459: AND
10460: IFFALSE 10662
10462: GO 10464
10464: DISABLE
10465: LD_INT 0
10467: PPUSH
10468: PPUSH
10469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10470: LD_ADDR_VAR 0 3
10474: PUSH
10475: LD_INT 81
10477: PUSH
10478: LD_OWVAR 2
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 21
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PPUSH
10501: CALL_OW 69
10505: ST_TO_ADDR
// if not tmp then
10506: LD_VAR 0 3
10510: NOT
10511: IFFALSE 10515
// exit ;
10513: GO 10662
// if tmp > 5 then
10515: LD_VAR 0 3
10519: PUSH
10520: LD_INT 5
10522: GREATER
10523: IFFALSE 10535
// k := 5 else
10525: LD_ADDR_VAR 0 2
10529: PUSH
10530: LD_INT 5
10532: ST_TO_ADDR
10533: GO 10545
// k := tmp ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: LD_VAR 0 3
10544: ST_TO_ADDR
// for i := 1 to k do
10545: LD_ADDR_VAR 0 1
10549: PUSH
10550: DOUBLE
10551: LD_INT 1
10553: DEC
10554: ST_TO_ADDR
10555: LD_VAR 0 2
10559: PUSH
10560: FOR_TO
10561: IFFALSE 10660
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10563: LD_VAR 0 3
10567: PUSH
10568: LD_VAR 0 1
10572: ARRAY
10573: PPUSH
10574: LD_VAR 0 1
10578: PUSH
10579: LD_INT 4
10581: MOD
10582: PUSH
10583: LD_INT 1
10585: PLUS
10586: PPUSH
10587: CALL_OW 259
10591: PUSH
10592: LD_INT 10
10594: LESS
10595: IFFALSE 10658
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10597: LD_VAR 0 3
10601: PUSH
10602: LD_VAR 0 1
10606: ARRAY
10607: PPUSH
10608: LD_VAR 0 1
10612: PUSH
10613: LD_INT 4
10615: MOD
10616: PUSH
10617: LD_INT 1
10619: PLUS
10620: PPUSH
10621: LD_VAR 0 3
10625: PUSH
10626: LD_VAR 0 1
10630: ARRAY
10631: PPUSH
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 4
10639: MOD
10640: PUSH
10641: LD_INT 1
10643: PLUS
10644: PPUSH
10645: CALL_OW 259
10649: PUSH
10650: LD_INT 1
10652: PLUS
10653: PPUSH
10654: CALL_OW 237
10658: GO 10560
10660: POP
10661: POP
// end ;
10662: PPOPN 3
10664: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10665: LD_EXP 15
10669: PUSH
10670: LD_EXP 23
10674: AND
10675: IFFALSE 10695
10677: GO 10679
10679: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10680: LD_INT 4
10682: PPUSH
10683: LD_OWVAR 2
10687: PPUSH
10688: LD_INT 0
10690: PPUSH
10691: CALL_OW 324
10695: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10696: LD_EXP 15
10700: PUSH
10701: LD_EXP 52
10705: AND
10706: IFFALSE 10726
10708: GO 10710
10710: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10711: LD_INT 19
10713: PPUSH
10714: LD_OWVAR 2
10718: PPUSH
10719: LD_INT 0
10721: PPUSH
10722: CALL_OW 324
10726: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10727: LD_EXP 15
10731: PUSH
10732: LD_EXP 24
10736: AND
10737: IFFALSE 10839
10739: GO 10741
10741: DISABLE
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
// begin enable ;
10746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10747: LD_ADDR_VAR 0 2
10751: PUSH
10752: LD_INT 22
10754: PUSH
10755: LD_OWVAR 2
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 34
10769: PUSH
10770: LD_INT 11
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 34
10779: PUSH
10780: LD_INT 30
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 69
10800: ST_TO_ADDR
// if not tmp then
10801: LD_VAR 0 2
10805: NOT
10806: IFFALSE 10810
// exit ;
10808: GO 10839
// for i in tmp do
10810: LD_ADDR_VAR 0 1
10814: PUSH
10815: LD_VAR 0 2
10819: PUSH
10820: FOR_IN
10821: IFFALSE 10837
// begin SetLives ( i , 0 ) ;
10823: LD_VAR 0 1
10827: PPUSH
10828: LD_INT 0
10830: PPUSH
10831: CALL_OW 234
// end ;
10835: GO 10820
10837: POP
10838: POP
// end ;
10839: PPOPN 2
10841: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10842: LD_EXP 15
10846: PUSH
10847: LD_EXP 25
10851: AND
10852: IFFALSE 10872
10854: GO 10856
10856: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10857: LD_INT 32
10859: PPUSH
10860: LD_OWVAR 2
10864: PPUSH
10865: LD_INT 0
10867: PPUSH
10868: CALL_OW 324
10872: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10873: LD_EXP 15
10877: PUSH
10878: LD_EXP 26
10882: AND
10883: IFFALSE 11064
10885: GO 10887
10887: DISABLE
10888: LD_INT 0
10890: PPUSH
10891: PPUSH
10892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10893: LD_ADDR_VAR 0 2
10897: PUSH
10898: LD_INT 22
10900: PUSH
10901: LD_OWVAR 2
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 33
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 69
10928: ST_TO_ADDR
// if not tmp then
10929: LD_VAR 0 2
10933: NOT
10934: IFFALSE 10938
// exit ;
10936: GO 11064
// side := 0 ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// for i := 1 to 8 do
10946: LD_ADDR_VAR 0 1
10950: PUSH
10951: DOUBLE
10952: LD_INT 1
10954: DEC
10955: ST_TO_ADDR
10956: LD_INT 8
10958: PUSH
10959: FOR_TO
10960: IFFALSE 11008
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10962: LD_OWVAR 2
10966: PUSH
10967: LD_VAR 0 1
10971: NONEQUAL
10972: PUSH
10973: LD_OWVAR 2
10977: PPUSH
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 81
10987: PUSH
10988: LD_INT 2
10990: EQUAL
10991: AND
10992: IFFALSE 11006
// begin side := i ;
10994: LD_ADDR_VAR 0 3
10998: PUSH
10999: LD_VAR 0 1
11003: ST_TO_ADDR
// break ;
11004: GO 11008
// end ;
11006: GO 10959
11008: POP
11009: POP
// if not side then
11010: LD_VAR 0 3
11014: NOT
11015: IFFALSE 11019
// exit ;
11017: GO 11064
// for i := 1 to tmp do
11019: LD_ADDR_VAR 0 1
11023: PUSH
11024: DOUBLE
11025: LD_INT 1
11027: DEC
11028: ST_TO_ADDR
11029: LD_VAR 0 2
11033: PUSH
11034: FOR_TO
11035: IFFALSE 11062
// if Prob ( 60 ) then
11037: LD_INT 60
11039: PPUSH
11040: CALL_OW 13
11044: IFFALSE 11060
// SetSide ( i , side ) ;
11046: LD_VAR 0 1
11050: PPUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 235
11060: GO 11034
11062: POP
11063: POP
// end ;
11064: PPOPN 3
11066: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11067: LD_EXP 15
11071: PUSH
11072: LD_EXP 28
11076: AND
11077: IFFALSE 11196
11079: GO 11081
11081: DISABLE
11082: LD_INT 0
11084: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11085: LD_ADDR_VAR 0 1
11089: PUSH
11090: LD_INT 22
11092: PUSH
11093: LD_OWVAR 2
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 23
11117: PUSH
11118: LD_INT 0
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: PPUSH
11134: CALL_OW 69
11138: PUSH
11139: FOR_IN
11140: IFFALSE 11194
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11142: LD_VAR 0 1
11146: PPUSH
11147: CALL_OW 257
11151: PUSH
11152: LD_INT 1
11154: PUSH
11155: LD_INT 2
11157: PUSH
11158: LD_INT 3
11160: PUSH
11161: LD_INT 4
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: IN
11170: IFFALSE 11192
// SetClass ( un , rand ( 1 , 4 ) ) ;
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: LD_INT 4
11182: PPUSH
11183: CALL_OW 12
11187: PPUSH
11188: CALL_OW 336
11192: GO 11139
11194: POP
11195: POP
// end ;
11196: PPOPN 1
11198: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11199: LD_EXP 15
11203: PUSH
11204: LD_EXP 27
11208: AND
11209: IFFALSE 11288
11211: GO 11213
11213: DISABLE
11214: LD_INT 0
11216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 3
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: ST_TO_ADDR
// if not tmp then
11253: LD_VAR 0 1
11257: NOT
11258: IFFALSE 11262
// exit ;
11260: GO 11288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11262: LD_VAR 0 1
11266: PUSH
11267: LD_INT 1
11269: PPUSH
11270: LD_VAR 0 1
11274: PPUSH
11275: CALL_OW 12
11279: ARRAY
11280: PPUSH
11281: LD_INT 100
11283: PPUSH
11284: CALL_OW 234
// end ;
11288: PPOPN 1
11290: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11291: LD_EXP 15
11295: PUSH
11296: LD_EXP 29
11300: AND
11301: IFFALSE 11399
11303: GO 11305
11305: DISABLE
11306: LD_INT 0
11308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11309: LD_ADDR_VAR 0 1
11313: PUSH
11314: LD_INT 22
11316: PUSH
11317: LD_OWVAR 2
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 21
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 69
11344: ST_TO_ADDR
// if not tmp then
11345: LD_VAR 0 1
11349: NOT
11350: IFFALSE 11354
// exit ;
11352: GO 11399
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11354: LD_VAR 0 1
11358: PUSH
11359: LD_INT 1
11361: PPUSH
11362: LD_VAR 0 1
11366: PPUSH
11367: CALL_OW 12
11371: ARRAY
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: LD_INT 4
11378: PPUSH
11379: CALL_OW 12
11383: PPUSH
11384: LD_INT 3000
11386: PPUSH
11387: LD_INT 9000
11389: PPUSH
11390: CALL_OW 12
11394: PPUSH
11395: CALL_OW 492
// end ;
11399: PPOPN 1
11401: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11402: LD_EXP 15
11406: PUSH
11407: LD_EXP 30
11411: AND
11412: IFFALSE 11432
11414: GO 11416
11416: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11417: LD_INT 1
11419: PPUSH
11420: LD_OWVAR 2
11424: PPUSH
11425: LD_INT 0
11427: PPUSH
11428: CALL_OW 324
11432: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11433: LD_EXP 15
11437: PUSH
11438: LD_EXP 31
11442: AND
11443: IFFALSE 11526
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11452: LD_ADDR_VAR 0 2
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_OWVAR 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 21
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 69
11487: ST_TO_ADDR
// if not tmp then
11488: LD_VAR 0 2
11492: NOT
11493: IFFALSE 11497
// exit ;
11495: GO 11526
// for i in tmp do
11497: LD_ADDR_VAR 0 1
11501: PUSH
11502: LD_VAR 0 2
11506: PUSH
11507: FOR_IN
11508: IFFALSE 11524
// SetBLevel ( i , 10 ) ;
11510: LD_VAR 0 1
11514: PPUSH
11515: LD_INT 10
11517: PPUSH
11518: CALL_OW 241
11522: GO 11507
11524: POP
11525: POP
// end ;
11526: PPOPN 2
11528: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11529: LD_EXP 15
11533: PUSH
11534: LD_EXP 32
11538: AND
11539: IFFALSE 11650
11541: GO 11543
11543: DISABLE
11544: LD_INT 0
11546: PPUSH
11547: PPUSH
11548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_INT 22
11556: PUSH
11557: LD_OWVAR 2
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 25
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 69
11584: ST_TO_ADDR
// if not tmp then
11585: LD_VAR 0 3
11589: NOT
11590: IFFALSE 11594
// exit ;
11592: GO 11650
// un := tmp [ rand ( 1 , tmp ) ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 1
11606: PPUSH
11607: LD_VAR 0 3
11611: PPUSH
11612: CALL_OW 12
11616: ARRAY
11617: ST_TO_ADDR
// if Crawls ( un ) then
11618: LD_VAR 0 2
11622: PPUSH
11623: CALL_OW 318
11627: IFFALSE 11638
// ComWalk ( un ) ;
11629: LD_VAR 0 2
11633: PPUSH
11634: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11638: LD_VAR 0 2
11642: PPUSH
11643: LD_INT 5
11645: PPUSH
11646: CALL_OW 336
// end ;
11650: PPOPN 3
11652: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11653: LD_EXP 15
11657: PUSH
11658: LD_EXP 33
11662: AND
11663: PUSH
11664: LD_OWVAR 67
11668: PUSH
11669: LD_INT 3
11671: LESS
11672: AND
11673: IFFALSE 11692
11675: GO 11677
11677: DISABLE
// Difficulty := Difficulty + 1 ;
11678: LD_ADDR_OWVAR 67
11682: PUSH
11683: LD_OWVAR 67
11687: PUSH
11688: LD_INT 1
11690: PLUS
11691: ST_TO_ADDR
11692: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11693: LD_EXP 15
11697: PUSH
11698: LD_EXP 34
11702: AND
11703: IFFALSE 11806
11705: GO 11707
11707: DISABLE
11708: LD_INT 0
11710: PPUSH
// begin for i := 1 to 5 do
11711: LD_ADDR_VAR 0 1
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_INT 5
11723: PUSH
11724: FOR_TO
11725: IFFALSE 11804
// begin uc_nation := nation_nature ;
11727: LD_ADDR_OWVAR 21
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// uc_side := 0 ;
11735: LD_ADDR_OWVAR 20
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11743: LD_ADDR_OWVAR 29
11747: PUSH
11748: LD_INT 12
11750: PUSH
11751: LD_INT 12
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: ST_TO_ADDR
// hc_agressivity := 20 ;
11758: LD_ADDR_OWVAR 35
11762: PUSH
11763: LD_INT 20
11765: ST_TO_ADDR
// hc_class := class_tiger ;
11766: LD_ADDR_OWVAR 28
11770: PUSH
11771: LD_INT 14
11773: ST_TO_ADDR
// hc_gallery :=  ;
11774: LD_ADDR_OWVAR 33
11778: PUSH
11779: LD_STRING 
11781: ST_TO_ADDR
// hc_name :=  ;
11782: LD_ADDR_OWVAR 26
11786: PUSH
11787: LD_STRING 
11789: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11790: CALL_OW 44
11794: PPUSH
11795: LD_INT 0
11797: PPUSH
11798: CALL_OW 51
// end ;
11802: GO 11724
11804: POP
11805: POP
// end ;
11806: PPOPN 1
11808: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11809: LD_EXP 15
11813: PUSH
11814: LD_EXP 35
11818: AND
11819: IFFALSE 11828
11821: GO 11823
11823: DISABLE
// StreamSibBomb ;
11824: CALL 11829 0 0
11828: END
// export function StreamSibBomb ; var i , x , y ; begin
11829: LD_INT 0
11831: PPUSH
11832: PPUSH
11833: PPUSH
11834: PPUSH
// result := false ;
11835: LD_ADDR_VAR 0 1
11839: PUSH
11840: LD_INT 0
11842: ST_TO_ADDR
// for i := 1 to 16 do
11843: LD_ADDR_VAR 0 2
11847: PUSH
11848: DOUBLE
11849: LD_INT 1
11851: DEC
11852: ST_TO_ADDR
11853: LD_INT 16
11855: PUSH
11856: FOR_TO
11857: IFFALSE 12056
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11859: LD_ADDR_VAR 0 3
11863: PUSH
11864: LD_INT 10
11866: PUSH
11867: LD_INT 20
11869: PUSH
11870: LD_INT 30
11872: PUSH
11873: LD_INT 40
11875: PUSH
11876: LD_INT 50
11878: PUSH
11879: LD_INT 60
11881: PUSH
11882: LD_INT 70
11884: PUSH
11885: LD_INT 80
11887: PUSH
11888: LD_INT 90
11890: PUSH
11891: LD_INT 100
11893: PUSH
11894: LD_INT 110
11896: PUSH
11897: LD_INT 120
11899: PUSH
11900: LD_INT 130
11902: PUSH
11903: LD_INT 140
11905: PUSH
11906: LD_INT 150
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 1
11928: PPUSH
11929: LD_INT 15
11931: PPUSH
11932: CALL_OW 12
11936: ARRAY
11937: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11938: LD_ADDR_VAR 0 4
11942: PUSH
11943: LD_INT 10
11945: PUSH
11946: LD_INT 20
11948: PUSH
11949: LD_INT 30
11951: PUSH
11952: LD_INT 40
11954: PUSH
11955: LD_INT 50
11957: PUSH
11958: LD_INT 60
11960: PUSH
11961: LD_INT 70
11963: PUSH
11964: LD_INT 80
11966: PUSH
11967: LD_INT 90
11969: PUSH
11970: LD_INT 100
11972: PUSH
11973: LD_INT 110
11975: PUSH
11976: LD_INT 120
11978: PUSH
11979: LD_INT 130
11981: PUSH
11982: LD_INT 140
11984: PUSH
11985: LD_INT 150
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 1
12007: PPUSH
12008: LD_INT 15
12010: PPUSH
12011: CALL_OW 12
12015: ARRAY
12016: ST_TO_ADDR
// if ValidHex ( x , y ) then
12017: LD_VAR 0 3
12021: PPUSH
12022: LD_VAR 0 4
12026: PPUSH
12027: CALL_OW 488
12031: IFFALSE 12054
// begin result := [ x , y ] ;
12033: LD_ADDR_VAR 0 1
12037: PUSH
12038: LD_VAR 0 3
12042: PUSH
12043: LD_VAR 0 4
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: ST_TO_ADDR
// break ;
12052: GO 12056
// end ; end ;
12054: GO 11856
12056: POP
12057: POP
// if result then
12058: LD_VAR 0 1
12062: IFFALSE 12122
// begin ToLua ( playSibBomb() ) ;
12064: LD_STRING playSibBomb()
12066: PPUSH
12067: CALL_OW 559
// wait ( 0 0$14 ) ;
12071: LD_INT 490
12073: PPUSH
12074: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12078: LD_VAR 0 1
12082: PUSH
12083: LD_INT 1
12085: ARRAY
12086: PPUSH
12087: LD_VAR 0 1
12091: PUSH
12092: LD_INT 2
12094: ARRAY
12095: PPUSH
12096: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12100: LD_VAR 0 1
12104: PUSH
12105: LD_INT 1
12107: ARRAY
12108: PPUSH
12109: LD_VAR 0 1
12113: PUSH
12114: LD_INT 2
12116: ARRAY
12117: PPUSH
12118: CALL_OW 429
// end ; end ;
12122: LD_VAR 0 1
12126: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12127: LD_EXP 15
12131: PUSH
12132: LD_EXP 37
12136: AND
12137: IFFALSE 12149
12139: GO 12141
12141: DISABLE
// YouLost (  ) ;
12142: LD_STRING 
12144: PPUSH
12145: CALL_OW 104
12149: END
// every 0 0$1 trigger StreamModeActive and sFog do
12150: LD_EXP 15
12154: PUSH
12155: LD_EXP 36
12159: AND
12160: IFFALSE 12174
12162: GO 12164
12164: DISABLE
// FogOff ( your_side ) ;
12165: LD_OWVAR 2
12169: PPUSH
12170: CALL_OW 344
12174: END
// every 0 0$1 trigger StreamModeActive and sSun do
12175: LD_EXP 15
12179: PUSH
12180: LD_EXP 38
12184: AND
12185: IFFALSE 12213
12187: GO 12189
12189: DISABLE
// begin solar_recharge_percent := 0 ;
12190: LD_ADDR_OWVAR 79
12194: PUSH
12195: LD_INT 0
12197: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12198: LD_INT 10500
12200: PPUSH
12201: CALL_OW 67
// solar_recharge_percent := 100 ;
12205: LD_ADDR_OWVAR 79
12209: PUSH
12210: LD_INT 100
12212: ST_TO_ADDR
// end ;
12213: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12214: LD_EXP 15
12218: PUSH
12219: LD_EXP 39
12223: AND
12224: IFFALSE 12463
12226: GO 12228
12228: DISABLE
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
12233: PPUSH
// begin tmp := [ ] ;
12234: LD_ADDR_VAR 0 3
12238: PUSH
12239: EMPTY
12240: ST_TO_ADDR
// for i := 1 to 6 do
12241: LD_ADDR_VAR 0 1
12245: PUSH
12246: DOUBLE
12247: LD_INT 1
12249: DEC
12250: ST_TO_ADDR
12251: LD_INT 6
12253: PUSH
12254: FOR_TO
12255: IFFALSE 12360
// begin uc_nation := nation_nature ;
12257: LD_ADDR_OWVAR 21
12261: PUSH
12262: LD_INT 0
12264: ST_TO_ADDR
// uc_side := 0 ;
12265: LD_ADDR_OWVAR 20
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12273: LD_ADDR_OWVAR 29
12277: PUSH
12278: LD_INT 12
12280: PUSH
12281: LD_INT 12
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: ST_TO_ADDR
// hc_agressivity := 20 ;
12288: LD_ADDR_OWVAR 35
12292: PUSH
12293: LD_INT 20
12295: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12296: LD_ADDR_OWVAR 28
12300: PUSH
12301: LD_INT 17
12303: ST_TO_ADDR
// hc_gallery :=  ;
12304: LD_ADDR_OWVAR 33
12308: PUSH
12309: LD_STRING 
12311: ST_TO_ADDR
// hc_name :=  ;
12312: LD_ADDR_OWVAR 26
12316: PUSH
12317: LD_STRING 
12319: ST_TO_ADDR
// un := CreateHuman ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: CALL_OW 44
12329: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12330: LD_VAR 0 2
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 51
// tmp := tmp ^ un ;
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: LD_VAR 0 3
12351: PUSH
12352: LD_VAR 0 2
12356: ADD
12357: ST_TO_ADDR
// end ;
12358: GO 12254
12360: POP
12361: POP
// repeat wait ( 0 0$1 ) ;
12362: LD_INT 35
12364: PPUSH
12365: CALL_OW 67
// for un in tmp do
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_VAR 0 3
12378: PUSH
12379: FOR_IN
12380: IFFALSE 12454
// begin if IsDead ( un ) then
12382: LD_VAR 0 2
12386: PPUSH
12387: CALL_OW 301
12391: IFFALSE 12411
// begin tmp := tmp diff un ;
12393: LD_ADDR_VAR 0 3
12397: PUSH
12398: LD_VAR 0 3
12402: PUSH
12403: LD_VAR 0 2
12407: DIFF
12408: ST_TO_ADDR
// continue ;
12409: GO 12379
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12411: LD_VAR 0 2
12415: PPUSH
12416: LD_INT 3
12418: PUSH
12419: LD_INT 22
12421: PUSH
12422: LD_INT 0
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PPUSH
12433: CALL_OW 69
12437: PPUSH
12438: LD_VAR 0 2
12442: PPUSH
12443: CALL_OW 74
12447: PPUSH
12448: CALL_OW 115
// end ;
12452: GO 12379
12454: POP
12455: POP
// until not tmp ;
12456: LD_VAR 0 3
12460: NOT
12461: IFFALSE 12362
// end ;
12463: PPOPN 3
12465: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12466: LD_EXP 15
12470: PUSH
12471: LD_EXP 40
12475: AND
12476: IFFALSE 12530
12478: GO 12480
12480: DISABLE
// begin ToLua ( displayTroll(); ) ;
12481: LD_STRING displayTroll();
12483: PPUSH
12484: CALL_OW 559
// wait ( 3 3$00 ) ;
12488: LD_INT 6300
12490: PPUSH
12491: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12495: LD_STRING hideTroll();
12497: PPUSH
12498: CALL_OW 559
// wait ( 1 1$00 ) ;
12502: LD_INT 2100
12504: PPUSH
12505: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12509: LD_STRING displayTroll();
12511: PPUSH
12512: CALL_OW 559
// wait ( 1 1$00 ) ;
12516: LD_INT 2100
12518: PPUSH
12519: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12523: LD_STRING hideTroll();
12525: PPUSH
12526: CALL_OW 559
// end ;
12530: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12531: LD_EXP 15
12535: PUSH
12536: LD_EXP 41
12540: AND
12541: IFFALSE 12604
12543: GO 12545
12545: DISABLE
12546: LD_INT 0
12548: PPUSH
// begin p := 0 ;
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// repeat game_speed := 1 ;
12557: LD_ADDR_OWVAR 65
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12565: LD_INT 35
12567: PPUSH
12568: CALL_OW 67
// p := p + 1 ;
12572: LD_ADDR_VAR 0 1
12576: PUSH
12577: LD_VAR 0 1
12581: PUSH
12582: LD_INT 1
12584: PLUS
12585: ST_TO_ADDR
// until p >= 60 ;
12586: LD_VAR 0 1
12590: PUSH
12591: LD_INT 60
12593: GREATEREQUAL
12594: IFFALSE 12557
// game_speed := 4 ;
12596: LD_ADDR_OWVAR 65
12600: PUSH
12601: LD_INT 4
12603: ST_TO_ADDR
// end ;
12604: PPOPN 1
12606: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12607: LD_EXP 15
12611: PUSH
12612: LD_EXP 42
12616: AND
12617: IFFALSE 12763
12619: GO 12621
12621: DISABLE
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_INT 22
12633: PUSH
12634: LD_OWVAR 2
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: LD_INT 30
12648: PUSH
12649: LD_INT 0
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 30
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 69
12679: ST_TO_ADDR
// if not depot then
12680: LD_VAR 0 1
12684: NOT
12685: IFFALSE 12689
// exit ;
12687: GO 12763
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12689: LD_ADDR_VAR 0 2
12693: PUSH
12694: LD_VAR 0 1
12698: PUSH
12699: LD_INT 1
12701: PPUSH
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 12
12711: ARRAY
12712: PPUSH
12713: CALL_OW 274
12717: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12718: LD_VAR 0 2
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12733: LD_VAR 0 2
12737: PPUSH
12738: LD_INT 2
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12748: LD_VAR 0 2
12752: PPUSH
12753: LD_INT 3
12755: PPUSH
12756: LD_INT 0
12758: PPUSH
12759: CALL_OW 277
// end ;
12763: PPOPN 2
12765: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12766: LD_EXP 15
12770: PUSH
12771: LD_EXP 43
12775: AND
12776: IFFALSE 12873
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12784: LD_ADDR_VAR 0 1
12788: PUSH
12789: LD_INT 22
12791: PUSH
12792: LD_OWVAR 2
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 1
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: LD_INT 23
12816: PUSH
12817: LD_INT 0
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: LIST
12832: PPUSH
12833: CALL_OW 69
12837: ST_TO_ADDR
// if not tmp then
12838: LD_VAR 0 1
12842: NOT
12843: IFFALSE 12847
// exit ;
12845: GO 12873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12847: LD_VAR 0 1
12851: PUSH
12852: LD_INT 1
12854: PPUSH
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL_OW 12
12864: ARRAY
12865: PPUSH
12866: LD_INT 200
12868: PPUSH
12869: CALL_OW 234
// end ;
12873: PPOPN 1
12875: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12876: LD_EXP 15
12880: PUSH
12881: LD_EXP 44
12885: AND
12886: IFFALSE 12965
12888: GO 12890
12890: DISABLE
12891: LD_INT 0
12893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_INT 22
12901: PUSH
12902: LD_OWVAR 2
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 21
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 69
12929: ST_TO_ADDR
// if not tmp then
12930: LD_VAR 0 1
12934: NOT
12935: IFFALSE 12939
// exit ;
12937: GO 12965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12939: LD_VAR 0 1
12943: PUSH
12944: LD_INT 1
12946: PPUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 12
12956: ARRAY
12957: PPUSH
12958: LD_INT 60
12960: PPUSH
12961: CALL_OW 234
// end ;
12965: PPOPN 1
12967: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12968: LD_EXP 15
12972: PUSH
12973: LD_EXP 45
12977: AND
12978: IFFALSE 13077
12980: GO 12982
12982: DISABLE
12983: LD_INT 0
12985: PPUSH
12986: PPUSH
// begin enable ;
12987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12988: LD_ADDR_VAR 0 1
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_OWVAR 2
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 61
13007: PUSH
13008: EMPTY
13009: LIST
13010: PUSH
13011: LD_INT 33
13013: PUSH
13014: LD_INT 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 69
13030: ST_TO_ADDR
// if not tmp then
13031: LD_VAR 0 1
13035: NOT
13036: IFFALSE 13040
// exit ;
13038: GO 13077
// for i in tmp do
13040: LD_ADDR_VAR 0 2
13044: PUSH
13045: LD_VAR 0 1
13049: PUSH
13050: FOR_IN
13051: IFFALSE 13075
// if IsControledBy ( i ) then
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL_OW 312
13062: IFFALSE 13073
// ComUnlink ( i ) ;
13064: LD_VAR 0 2
13068: PPUSH
13069: CALL_OW 136
13073: GO 13050
13075: POP
13076: POP
// end ;
13077: PPOPN 2
13079: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13080: LD_EXP 15
13084: PUSH
13085: LD_EXP 46
13089: AND
13090: IFFALSE 13230
13092: GO 13094
13094: DISABLE
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
// begin ToLua ( displayPowell(); ) ;
13099: LD_STRING displayPowell();
13101: PPUSH
13102: CALL_OW 559
// uc_side := 0 ;
13106: LD_ADDR_OWVAR 20
13110: PUSH
13111: LD_INT 0
13113: ST_TO_ADDR
// uc_nation := 2 ;
13114: LD_ADDR_OWVAR 21
13118: PUSH
13119: LD_INT 2
13121: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13122: LD_ADDR_OWVAR 37
13126: PUSH
13127: LD_INT 14
13129: ST_TO_ADDR
// vc_engine := engine_siberite ;
13130: LD_ADDR_OWVAR 39
13134: PUSH
13135: LD_INT 3
13137: ST_TO_ADDR
// vc_control := control_apeman ;
13138: LD_ADDR_OWVAR 38
13142: PUSH
13143: LD_INT 5
13145: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13146: LD_ADDR_OWVAR 40
13150: PUSH
13151: LD_INT 29
13153: ST_TO_ADDR
// un := CreateVehicle ;
13154: LD_ADDR_VAR 0 2
13158: PUSH
13159: CALL_OW 45
13163: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13164: LD_VAR 0 2
13168: PPUSH
13169: LD_INT 1
13171: PPUSH
13172: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13176: LD_INT 35
13178: PPUSH
13179: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13183: LD_VAR 0 2
13187: PPUSH
13188: LD_INT 22
13190: PUSH
13191: LD_OWVAR 2
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 69
13204: PPUSH
13205: LD_VAR 0 2
13209: PPUSH
13210: CALL_OW 74
13214: PPUSH
13215: CALL_OW 115
// until IsDead ( un ) ;
13219: LD_VAR 0 2
13223: PPUSH
13224: CALL_OW 301
13228: IFFALSE 13176
// end ;
13230: PPOPN 2
13232: END
// every 0 0$1 trigger StreamModeActive and sStu do
13233: LD_EXP 15
13237: PUSH
13238: LD_EXP 54
13242: AND
13243: IFFALSE 13259
13245: GO 13247
13247: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13248: LD_STRING displayStucuk();
13250: PPUSH
13251: CALL_OW 559
// ResetFog ;
13255: CALL_OW 335
// end ;
13259: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13260: LD_EXP 15
13264: PUSH
13265: LD_EXP 47
13269: AND
13270: IFFALSE 13411
13272: GO 13274
13274: DISABLE
13275: LD_INT 0
13277: PPUSH
13278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13279: LD_ADDR_VAR 0 2
13283: PUSH
13284: LD_INT 22
13286: PUSH
13287: LD_OWVAR 2
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 21
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: ST_TO_ADDR
// if not tmp then
13315: LD_VAR 0 2
13319: NOT
13320: IFFALSE 13324
// exit ;
13322: GO 13411
// un := tmp [ rand ( 1 , tmp ) ] ;
13324: LD_ADDR_VAR 0 1
13328: PUSH
13329: LD_VAR 0 2
13333: PUSH
13334: LD_INT 1
13336: PPUSH
13337: LD_VAR 0 2
13341: PPUSH
13342: CALL_OW 12
13346: ARRAY
13347: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_INT 0
13355: PPUSH
13356: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13360: LD_VAR 0 1
13364: PPUSH
13365: LD_OWVAR 3
13369: PUSH
13370: LD_VAR 0 1
13374: DIFF
13375: PPUSH
13376: LD_VAR 0 1
13380: PPUSH
13381: CALL_OW 74
13385: PPUSH
13386: CALL_OW 115
// wait ( 0 0$20 ) ;
13390: LD_INT 700
13392: PPUSH
13393: CALL_OW 67
// SetSide ( un , your_side ) ;
13397: LD_VAR 0 1
13401: PPUSH
13402: LD_OWVAR 2
13406: PPUSH
13407: CALL_OW 235
// end ;
13411: PPOPN 2
13413: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13414: LD_EXP 15
13418: PUSH
13419: LD_EXP 48
13423: AND
13424: IFFALSE 13530
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13432: LD_ADDR_VAR 0 1
13436: PUSH
13437: LD_INT 22
13439: PUSH
13440: LD_OWVAR 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 2
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: LD_INT 0
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 30
13464: PUSH
13465: LD_INT 1
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PPUSH
13481: CALL_OW 69
13485: ST_TO_ADDR
// if not depot then
13486: LD_VAR 0 1
13490: NOT
13491: IFFALSE 13495
// exit ;
13493: GO 13530
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13495: LD_VAR 0 1
13499: PUSH
13500: LD_INT 1
13502: ARRAY
13503: PPUSH
13504: CALL_OW 250
13508: PPUSH
13509: LD_VAR 0 1
13513: PUSH
13514: LD_INT 1
13516: ARRAY
13517: PPUSH
13518: CALL_OW 251
13522: PPUSH
13523: LD_INT 70
13525: PPUSH
13526: CALL_OW 495
// end ;
13530: PPOPN 1
13532: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13533: LD_EXP 15
13537: PUSH
13538: LD_EXP 49
13542: AND
13543: IFFALSE 13754
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
13553: PPUSH
13554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13555: LD_ADDR_VAR 0 5
13559: PUSH
13560: LD_INT 22
13562: PUSH
13563: LD_OWVAR 2
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 21
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PPUSH
13586: CALL_OW 69
13590: ST_TO_ADDR
// if not tmp then
13591: LD_VAR 0 5
13595: NOT
13596: IFFALSE 13600
// exit ;
13598: GO 13754
// for i in tmp do
13600: LD_ADDR_VAR 0 1
13604: PUSH
13605: LD_VAR 0 5
13609: PUSH
13610: FOR_IN
13611: IFFALSE 13752
// begin d := rand ( 0 , 5 ) ;
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: LD_INT 0
13620: PPUSH
13621: LD_INT 5
13623: PPUSH
13624: CALL_OW 12
13628: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13629: LD_ADDR_VAR 0 2
13633: PUSH
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL_OW 250
13643: PPUSH
13644: LD_VAR 0 4
13648: PPUSH
13649: LD_INT 3
13651: PPUSH
13652: LD_INT 12
13654: PPUSH
13655: CALL_OW 12
13659: PPUSH
13660: CALL_OW 272
13664: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13665: LD_ADDR_VAR 0 3
13669: PUSH
13670: LD_VAR 0 1
13674: PPUSH
13675: CALL_OW 251
13679: PPUSH
13680: LD_VAR 0 4
13684: PPUSH
13685: LD_INT 3
13687: PPUSH
13688: LD_INT 12
13690: PPUSH
13691: CALL_OW 12
13695: PPUSH
13696: CALL_OW 273
13700: ST_TO_ADDR
// if ValidHex ( x , y ) then
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: CALL_OW 488
13715: IFFALSE 13750
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13717: LD_VAR 0 1
13721: PPUSH
13722: LD_VAR 0 2
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: LD_INT 3
13734: PPUSH
13735: LD_INT 6
13737: PPUSH
13738: CALL_OW 12
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 483
// end ;
13750: GO 13610
13752: POP
13753: POP
// end ;
13754: PPOPN 5
13756: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13757: LD_EXP 15
13761: PUSH
13762: LD_EXP 50
13766: AND
13767: IFFALSE 13861
13769: GO 13771
13771: DISABLE
13772: LD_INT 0
13774: PPUSH
13775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_OWVAR 2
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 32
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: ST_TO_ADDR
// if not tmp then
13823: LD_VAR 0 2
13827: NOT
13828: IFFALSE 13832
// exit ;
13830: GO 13861
// for i in tmp do
13832: LD_ADDR_VAR 0 1
13836: PUSH
13837: LD_VAR 0 2
13841: PUSH
13842: FOR_IN
13843: IFFALSE 13859
// SetFuel ( i , 0 ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_INT 0
13852: PPUSH
13853: CALL_OW 240
13857: GO 13842
13859: POP
13860: POP
// end ;
13861: PPOPN 2
13863: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13864: LD_EXP 15
13868: PUSH
13869: LD_EXP 51
13873: AND
13874: IFFALSE 13940
13876: GO 13878
13878: DISABLE
13879: LD_INT 0
13881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_OWVAR 2
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 30
13901: PUSH
13902: LD_INT 29
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: ST_TO_ADDR
// if not tmp then
13918: LD_VAR 0 1
13922: NOT
13923: IFFALSE 13927
// exit ;
13925: GO 13940
// DestroyUnit ( tmp [ 1 ] ) ;
13927: LD_VAR 0 1
13931: PUSH
13932: LD_INT 1
13934: ARRAY
13935: PPUSH
13936: CALL_OW 65
// end ;
13940: PPOPN 1
13942: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13943: LD_EXP 15
13947: PUSH
13948: LD_EXP 53
13952: AND
13953: IFFALSE 14082
13955: GO 13957
13957: DISABLE
13958: LD_INT 0
13960: PPUSH
// begin uc_side := 0 ;
13961: LD_ADDR_OWVAR 20
13965: PUSH
13966: LD_INT 0
13968: ST_TO_ADDR
// uc_nation := nation_arabian ;
13969: LD_ADDR_OWVAR 21
13973: PUSH
13974: LD_INT 2
13976: ST_TO_ADDR
// hc_gallery :=  ;
13977: LD_ADDR_OWVAR 33
13981: PUSH
13982: LD_STRING 
13984: ST_TO_ADDR
// hc_name :=  ;
13985: LD_ADDR_OWVAR 26
13989: PUSH
13990: LD_STRING 
13992: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13993: LD_INT 1
13995: PPUSH
13996: LD_INT 11
13998: PPUSH
13999: LD_INT 10
14001: PPUSH
14002: CALL_OW 380
// un := CreateHuman ;
14006: LD_ADDR_VAR 0 1
14010: PUSH
14011: CALL_OW 44
14015: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14016: LD_VAR 0 1
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14035: LD_VAR 0 1
14039: PPUSH
14040: LD_INT 22
14042: PUSH
14043: LD_OWVAR 2
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 69
14056: PPUSH
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 74
14066: PPUSH
14067: CALL_OW 115
// until IsDead ( un ) ;
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 301
14080: IFFALSE 14028
// end ;
14082: PPOPN 1
14084: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14085: LD_EXP 15
14089: PUSH
14090: LD_EXP 55
14094: AND
14095: IFFALSE 14107
14097: GO 14099
14099: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14100: LD_STRING earthquake(getX(game), 0, 32)
14102: PPUSH
14103: CALL_OW 559
14107: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14108: LD_EXP 15
14112: PUSH
14113: LD_EXP 56
14117: AND
14118: IFFALSE 14209
14120: GO 14122
14122: DISABLE
14123: LD_INT 0
14125: PPUSH
// begin enable ;
14126: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14127: LD_ADDR_VAR 0 1
14131: PUSH
14132: LD_INT 22
14134: PUSH
14135: LD_OWVAR 2
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 21
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 33
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: PPUSH
14169: CALL_OW 69
14173: ST_TO_ADDR
// if not tmp then
14174: LD_VAR 0 1
14178: NOT
14179: IFFALSE 14183
// exit ;
14181: GO 14209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14183: LD_VAR 0 1
14187: PUSH
14188: LD_INT 1
14190: PPUSH
14191: LD_VAR 0 1
14195: PPUSH
14196: CALL_OW 12
14200: ARRAY
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: CALL_OW 234
// end ;
14209: PPOPN 1
14211: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14212: LD_EXP 15
14216: PUSH
14217: LD_EXP 57
14221: AND
14222: IFFALSE 14363
14224: GO 14226
14226: DISABLE
14227: LD_INT 0
14229: PPUSH
14230: PPUSH
14231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_OWVAR 2
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 25
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 69
14267: ST_TO_ADDR
// if not tmp then
14268: LD_VAR 0 3
14272: NOT
14273: IFFALSE 14277
// exit ;
14275: GO 14363
// un := tmp [ rand ( 1 , tmp ) ] ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_VAR 0 3
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: ST_TO_ADDR
// if Crawls ( un ) then
14301: LD_VAR 0 2
14305: PPUSH
14306: CALL_OW 318
14310: IFFALSE 14321
// ComWalk ( un ) ;
14312: LD_VAR 0 2
14316: PPUSH
14317: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14321: LD_VAR 0 2
14325: PPUSH
14326: LD_INT 9
14328: PPUSH
14329: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14333: LD_INT 28
14335: PPUSH
14336: LD_OWVAR 2
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14348: LD_INT 29
14350: PPUSH
14351: LD_OWVAR 2
14355: PPUSH
14356: LD_INT 2
14358: PPUSH
14359: CALL_OW 322
// end ;
14363: PPOPN 3
14365: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14366: LD_EXP 15
14370: PUSH
14371: LD_EXP 58
14375: AND
14376: IFFALSE 14487
14378: GO 14380
14380: DISABLE
14381: LD_INT 0
14383: PPUSH
14384: PPUSH
14385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14386: LD_ADDR_VAR 0 3
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_OWVAR 2
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 25
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 69
14421: ST_TO_ADDR
// if not tmp then
14422: LD_VAR 0 3
14426: NOT
14427: IFFALSE 14431
// exit ;
14429: GO 14487
// un := tmp [ rand ( 1 , tmp ) ] ;
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: LD_VAR 0 3
14440: PUSH
14441: LD_INT 1
14443: PPUSH
14444: LD_VAR 0 3
14448: PPUSH
14449: CALL_OW 12
14453: ARRAY
14454: ST_TO_ADDR
// if Crawls ( un ) then
14455: LD_VAR 0 2
14459: PPUSH
14460: CALL_OW 318
14464: IFFALSE 14475
// ComWalk ( un ) ;
14466: LD_VAR 0 2
14470: PPUSH
14471: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14475: LD_VAR 0 2
14479: PPUSH
14480: LD_INT 8
14482: PPUSH
14483: CALL_OW 336
// end ;
14487: PPOPN 3
14489: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14490: LD_EXP 15
14494: PUSH
14495: LD_EXP 59
14499: AND
14500: IFFALSE 14644
14502: GO 14504
14504: DISABLE
14505: LD_INT 0
14507: PPUSH
14508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14509: LD_ADDR_VAR 0 2
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_OWVAR 2
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 21
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: LD_INT 34
14541: PUSH
14542: LD_INT 12
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 34
14551: PUSH
14552: LD_INT 51
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 34
14561: PUSH
14562: LD_INT 32
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: ST_TO_ADDR
// if not tmp then
14585: LD_VAR 0 2
14589: NOT
14590: IFFALSE 14594
// exit ;
14592: GO 14644
// for i in tmp do
14594: LD_ADDR_VAR 0 1
14598: PUSH
14599: LD_VAR 0 2
14603: PUSH
14604: FOR_IN
14605: IFFALSE 14642
// if GetCargo ( i , mat_artifact ) = 0 then
14607: LD_VAR 0 1
14611: PPUSH
14612: LD_INT 4
14614: PPUSH
14615: CALL_OW 289
14619: PUSH
14620: LD_INT 0
14622: EQUAL
14623: IFFALSE 14640
// SetCargo ( i , mat_siberit , 100 ) ;
14625: LD_VAR 0 1
14629: PPUSH
14630: LD_INT 3
14632: PPUSH
14633: LD_INT 100
14635: PPUSH
14636: CALL_OW 290
14640: GO 14604
14642: POP
14643: POP
// end ;
14644: PPOPN 2
14646: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14647: LD_EXP 15
14651: PUSH
14652: LD_EXP 60
14656: AND
14657: IFFALSE 14840
14659: GO 14661
14661: DISABLE
14662: LD_INT 0
14664: PPUSH
14665: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_OWVAR 2
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PPUSH
14683: CALL_OW 69
14687: ST_TO_ADDR
// if not tmp then
14688: LD_VAR 0 2
14692: NOT
14693: IFFALSE 14697
// exit ;
14695: GO 14840
// for i := 1 to 2 do
14697: LD_ADDR_VAR 0 1
14701: PUSH
14702: DOUBLE
14703: LD_INT 1
14705: DEC
14706: ST_TO_ADDR
14707: LD_INT 2
14709: PUSH
14710: FOR_TO
14711: IFFALSE 14838
// begin uc_side := your_side ;
14713: LD_ADDR_OWVAR 20
14717: PUSH
14718: LD_OWVAR 2
14722: ST_TO_ADDR
// uc_nation := nation_american ;
14723: LD_ADDR_OWVAR 21
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// vc_chassis := us_morphling ;
14731: LD_ADDR_OWVAR 37
14735: PUSH
14736: LD_INT 5
14738: ST_TO_ADDR
// vc_engine := engine_siberite ;
14739: LD_ADDR_OWVAR 39
14743: PUSH
14744: LD_INT 3
14746: ST_TO_ADDR
// vc_control := control_computer ;
14747: LD_ADDR_OWVAR 38
14751: PUSH
14752: LD_INT 3
14754: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14755: LD_ADDR_OWVAR 40
14759: PUSH
14760: LD_INT 10
14762: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14763: LD_VAR 0 2
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: CALL_OW 310
14776: NOT
14777: IFFALSE 14824
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14779: CALL_OW 45
14783: PPUSH
14784: LD_VAR 0 2
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: CALL_OW 250
14797: PPUSH
14798: LD_VAR 0 2
14802: PUSH
14803: LD_INT 1
14805: ARRAY
14806: PPUSH
14807: CALL_OW 251
14811: PPUSH
14812: LD_INT 12
14814: PPUSH
14815: LD_INT 1
14817: PPUSH
14818: CALL_OW 50
14822: GO 14836
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14824: CALL_OW 45
14828: PPUSH
14829: LD_INT 1
14831: PPUSH
14832: CALL_OW 51
// end ;
14836: GO 14710
14838: POP
14839: POP
// end ;
14840: PPOPN 2
14842: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14843: LD_EXP 15
14847: PUSH
14848: LD_EXP 61
14852: AND
14853: IFFALSE 15075
14855: GO 14857
14857: DISABLE
14858: LD_INT 0
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14866: LD_ADDR_VAR 0 6
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_OWVAR 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 21
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: LD_INT 23
14898: PUSH
14899: LD_INT 0
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: ST_TO_ADDR
// if not tmp then
14920: LD_VAR 0 6
14924: NOT
14925: IFFALSE 14929
// exit ;
14927: GO 15075
// s1 := rand ( 1 , 4 ) ;
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_INT 1
14936: PPUSH
14937: LD_INT 4
14939: PPUSH
14940: CALL_OW 12
14944: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14945: LD_ADDR_VAR 0 4
14949: PUSH
14950: LD_VAR 0 6
14954: PUSH
14955: LD_INT 1
14957: ARRAY
14958: PPUSH
14959: LD_VAR 0 2
14963: PPUSH
14964: CALL_OW 259
14968: ST_TO_ADDR
// if s1 = 1 then
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: EQUAL
14977: IFFALSE 14997
// s2 := rand ( 2 , 4 ) else
14979: LD_ADDR_VAR 0 3
14983: PUSH
14984: LD_INT 2
14986: PPUSH
14987: LD_INT 4
14989: PPUSH
14990: CALL_OW 12
14994: ST_TO_ADDR
14995: GO 15005
// s2 := 1 ;
14997: LD_ADDR_VAR 0 3
15001: PUSH
15002: LD_INT 1
15004: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15005: LD_ADDR_VAR 0 5
15009: PUSH
15010: LD_VAR 0 6
15014: PUSH
15015: LD_INT 1
15017: ARRAY
15018: PPUSH
15019: LD_VAR 0 3
15023: PPUSH
15024: CALL_OW 259
15028: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15029: LD_VAR 0 6
15033: PUSH
15034: LD_INT 1
15036: ARRAY
15037: PPUSH
15038: LD_VAR 0 2
15042: PPUSH
15043: LD_VAR 0 5
15047: PPUSH
15048: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15052: LD_VAR 0 6
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_VAR 0 4
15070: PPUSH
15071: CALL_OW 237
// end ;
15075: PPOPN 6
15077: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15078: LD_EXP 15
15082: PUSH
15083: LD_EXP 62
15087: AND
15088: IFFALSE 15167
15090: GO 15092
15092: DISABLE
15093: LD_INT 0
15095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15096: LD_ADDR_VAR 0 1
15100: PUSH
15101: LD_INT 22
15103: PUSH
15104: LD_OWVAR 2
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 30
15115: PUSH
15116: LD_INT 3
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: ST_TO_ADDR
// if not tmp then
15132: LD_VAR 0 1
15136: NOT
15137: IFFALSE 15141
// exit ;
15139: GO 15167
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15141: LD_VAR 0 1
15145: PUSH
15146: LD_INT 1
15148: PPUSH
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 12
15158: ARRAY
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 234
// end ;
15167: PPOPN 1
15169: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15170: LD_EXP 15
15174: PUSH
15175: LD_EXP 63
15179: AND
15180: IFFALSE 15292
15182: GO 15184
15184: DISABLE
15185: LD_INT 0
15187: PPUSH
15188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15189: LD_ADDR_VAR 0 2
15193: PUSH
15194: LD_INT 22
15196: PUSH
15197: LD_OWVAR 2
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: LD_INT 30
15211: PUSH
15212: LD_INT 27
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 26
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 30
15231: PUSH
15232: LD_INT 28
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 69
15253: ST_TO_ADDR
// if not tmp then
15254: LD_VAR 0 2
15258: NOT
15259: IFFALSE 15263
// exit ;
15261: GO 15292
// for i in tmp do
15263: LD_ADDR_VAR 0 1
15267: PUSH
15268: LD_VAR 0 2
15272: PUSH
15273: FOR_IN
15274: IFFALSE 15290
// SetLives ( i , 1 ) ;
15276: LD_VAR 0 1
15280: PPUSH
15281: LD_INT 1
15283: PPUSH
15284: CALL_OW 234
15288: GO 15273
15290: POP
15291: POP
// end ;
15292: PPOPN 2
15294: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15295: LD_EXP 15
15299: PUSH
15300: LD_EXP 64
15304: AND
15305: IFFALSE 15579
15307: GO 15309
15309: DISABLE
15310: LD_INT 0
15312: PPUSH
15313: PPUSH
15314: PPUSH
// begin i := rand ( 1 , 7 ) ;
15315: LD_ADDR_VAR 0 1
15319: PUSH
15320: LD_INT 1
15322: PPUSH
15323: LD_INT 7
15325: PPUSH
15326: CALL_OW 12
15330: ST_TO_ADDR
// case i of 1 :
15331: LD_VAR 0 1
15335: PUSH
15336: LD_INT 1
15338: DOUBLE
15339: EQUAL
15340: IFTRUE 15344
15342: GO 15354
15344: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15345: LD_STRING earthquake(getX(game), 0, 32)
15347: PPUSH
15348: CALL_OW 559
15352: GO 15579
15354: LD_INT 2
15356: DOUBLE
15357: EQUAL
15358: IFTRUE 15362
15360: GO 15376
15362: POP
// begin ToLua ( displayStucuk(); ) ;
15363: LD_STRING displayStucuk();
15365: PPUSH
15366: CALL_OW 559
// ResetFog ;
15370: CALL_OW 335
// end ; 3 :
15374: GO 15579
15376: LD_INT 3
15378: DOUBLE
15379: EQUAL
15380: IFTRUE 15384
15382: GO 15488
15384: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15385: LD_ADDR_VAR 0 2
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_OWVAR 2
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 1
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 69
15420: ST_TO_ADDR
// if not tmp then
15421: LD_VAR 0 2
15425: NOT
15426: IFFALSE 15430
// exit ;
15428: GO 15579
// un := tmp [ rand ( 1 , tmp ) ] ;
15430: LD_ADDR_VAR 0 3
15434: PUSH
15435: LD_VAR 0 2
15439: PUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 2
15447: PPUSH
15448: CALL_OW 12
15452: ARRAY
15453: ST_TO_ADDR
// if Crawls ( un ) then
15454: LD_VAR 0 3
15458: PPUSH
15459: CALL_OW 318
15463: IFFALSE 15474
// ComWalk ( un ) ;
15465: LD_VAR 0 3
15469: PPUSH
15470: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15474: LD_VAR 0 3
15478: PPUSH
15479: LD_INT 8
15481: PPUSH
15482: CALL_OW 336
// end ; 4 :
15486: GO 15579
15488: LD_INT 4
15490: DOUBLE
15491: EQUAL
15492: IFTRUE 15496
15494: GO 15557
15496: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15497: LD_ADDR_VAR 0 2
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_OWVAR 2
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 30
15516: PUSH
15517: LD_INT 29
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 69
15532: ST_TO_ADDR
// if not tmp then
15533: LD_VAR 0 2
15537: NOT
15538: IFFALSE 15542
// exit ;
15540: GO 15579
// DestroyUnit ( tmp [ 1 ] ) ;
15542: LD_VAR 0 2
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: CALL_OW 65
// end ; 5 .. 7 :
15555: GO 15579
15557: LD_INT 5
15559: DOUBLE
15560: GREATEREQUAL
15561: IFFALSE 15569
15563: LD_INT 7
15565: DOUBLE
15566: LESSEQUAL
15567: IFTRUE 15571
15569: GO 15578
15571: POP
// StreamSibBomb ; end ;
15572: CALL 11829 0 0
15576: GO 15579
15578: POP
// end ;
15579: PPOPN 3
15581: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15582: LD_EXP 15
15586: PUSH
15587: LD_EXP 65
15591: AND
15592: IFFALSE 15748
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 81
15609: PUSH
15610: LD_OWVAR 2
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PPUSH
15651: CALL_OW 69
15655: ST_TO_ADDR
// if not tmp then
15656: LD_VAR 0 2
15660: NOT
15661: IFFALSE 15665
// exit ;
15663: GO 15748
// p := 0 ;
15665: LD_ADDR_VAR 0 3
15669: PUSH
15670: LD_INT 0
15672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15673: LD_INT 35
15675: PPUSH
15676: CALL_OW 67
// p := p + 1 ;
15680: LD_ADDR_VAR 0 3
15684: PUSH
15685: LD_VAR 0 3
15689: PUSH
15690: LD_INT 1
15692: PLUS
15693: ST_TO_ADDR
// for i in tmp do
15694: LD_ADDR_VAR 0 1
15698: PUSH
15699: LD_VAR 0 2
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15736
// if GetLives ( i ) < 1000 then
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL_OW 256
15716: PUSH
15717: LD_INT 1000
15719: LESS
15720: IFFALSE 15734
// SetLives ( i , 1000 ) ;
15722: LD_VAR 0 1
15726: PPUSH
15727: LD_INT 1000
15729: PPUSH
15730: CALL_OW 234
15734: GO 15704
15736: POP
15737: POP
// until p > 20 ;
15738: LD_VAR 0 3
15742: PUSH
15743: LD_INT 20
15745: GREATER
15746: IFFALSE 15673
// end ;
15748: PPOPN 3
15750: END
// every 0 0$1 trigger StreamModeActive and sTime do
15751: LD_EXP 15
15755: PUSH
15756: LD_EXP 66
15760: AND
15761: IFFALSE 15796
15763: GO 15765
15765: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15766: LD_INT 28
15768: PPUSH
15769: LD_OWVAR 2
15773: PPUSH
15774: LD_INT 2
15776: PPUSH
15777: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15781: LD_INT 30
15783: PPUSH
15784: LD_OWVAR 2
15788: PPUSH
15789: LD_INT 2
15791: PPUSH
15792: CALL_OW 322
// end ;
15796: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15797: LD_EXP 15
15801: PUSH
15802: LD_EXP 67
15806: AND
15807: IFFALSE 15928
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15816: LD_ADDR_VAR 0 2
15820: PUSH
15821: LD_INT 22
15823: PUSH
15824: LD_OWVAR 2
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 3
15845: PUSH
15846: LD_INT 23
15848: PUSH
15849: LD_INT 0
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: PPUSH
15865: CALL_OW 69
15869: ST_TO_ADDR
// if not tmp then
15870: LD_VAR 0 2
15874: NOT
15875: IFFALSE 15879
// exit ;
15877: GO 15928
// for i in tmp do
15879: LD_ADDR_VAR 0 1
15883: PUSH
15884: LD_VAR 0 2
15888: PUSH
15889: FOR_IN
15890: IFFALSE 15926
// begin if Crawls ( i ) then
15892: LD_VAR 0 1
15896: PPUSH
15897: CALL_OW 318
15901: IFFALSE 15912
// ComWalk ( i ) ;
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 138
// SetClass ( i , 2 ) ;
15912: LD_VAR 0 1
15916: PPUSH
15917: LD_INT 2
15919: PPUSH
15920: CALL_OW 336
// end ;
15924: GO 15889
15926: POP
15927: POP
// end ;
15928: PPOPN 2
15930: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15931: LD_EXP 15
15935: PUSH
15936: LD_EXP 68
15940: AND
15941: IFFALSE 16222
15943: GO 15945
15945: DISABLE
15946: LD_INT 0
15948: PPUSH
15949: PPUSH
15950: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15951: LD_OWVAR 2
15955: PPUSH
15956: LD_INT 9
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15969: LD_INT 9
15971: PPUSH
15972: LD_OWVAR 2
15976: PPUSH
15977: CALL_OW 343
// uc_side := 9 ;
15981: LD_ADDR_OWVAR 20
15985: PUSH
15986: LD_INT 9
15988: ST_TO_ADDR
// uc_nation := 2 ;
15989: LD_ADDR_OWVAR 21
15993: PUSH
15994: LD_INT 2
15996: ST_TO_ADDR
// hc_name := Dark Warrior ;
15997: LD_ADDR_OWVAR 26
16001: PUSH
16002: LD_STRING Dark Warrior
16004: ST_TO_ADDR
// hc_gallery :=  ;
16005: LD_ADDR_OWVAR 33
16009: PUSH
16010: LD_STRING 
16012: ST_TO_ADDR
// hc_noskilllimit := true ;
16013: LD_ADDR_OWVAR 76
16017: PUSH
16018: LD_INT 1
16020: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16021: LD_ADDR_OWVAR 31
16025: PUSH
16026: LD_INT 30
16028: PUSH
16029: LD_INT 30
16031: PUSH
16032: LD_INT 30
16034: PUSH
16035: LD_INT 30
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: ST_TO_ADDR
// un := CreateHuman ;
16044: LD_ADDR_VAR 0 3
16048: PUSH
16049: CALL_OW 44
16053: ST_TO_ADDR
// hc_noskilllimit := false ;
16054: LD_ADDR_OWVAR 76
16058: PUSH
16059: LD_INT 0
16061: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 51
// p := 0 ;
16074: LD_ADDR_VAR 0 2
16078: PUSH
16079: LD_INT 0
16081: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16082: LD_INT 35
16084: PPUSH
16085: CALL_OW 67
// p := p + 1 ;
16089: LD_ADDR_VAR 0 2
16093: PUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_INT 1
16101: PLUS
16102: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16103: LD_VAR 0 3
16107: PPUSH
16108: CALL_OW 256
16112: PUSH
16113: LD_INT 1000
16115: LESS
16116: IFFALSE 16130
// SetLives ( un , 1000 ) ;
16118: LD_VAR 0 3
16122: PPUSH
16123: LD_INT 1000
16125: PPUSH
16126: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 81
16137: PUSH
16138: LD_OWVAR 2
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 91
16149: PUSH
16150: LD_VAR 0 3
16154: PUSH
16155: LD_INT 30
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: CALL_OW 74
16181: PPUSH
16182: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16186: LD_VAR 0 2
16190: PUSH
16191: LD_INT 60
16193: GREATER
16194: PUSH
16195: LD_VAR 0 3
16199: PPUSH
16200: CALL_OW 301
16204: OR
16205: IFFALSE 16082
// if un then
16207: LD_VAR 0 3
16211: IFFALSE 16222
// RemoveUnit ( un ) ;
16213: LD_VAR 0 3
16217: PPUSH
16218: CALL_OW 64
// end ;
16222: PPOPN 3
16224: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16225: LD_INT 0
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16231: LD_ADDR_VAR 0 4
16235: PUSH
16236: LD_INT 22
16238: PUSH
16239: LD_OWVAR 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 2
16250: PUSH
16251: LD_INT 30
16253: PUSH
16254: LD_INT 0
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 30
16263: PUSH
16264: LD_INT 1
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PPUSH
16280: CALL_OW 69
16284: ST_TO_ADDR
// if not tmp then
16285: LD_VAR 0 4
16289: NOT
16290: IFFALSE 16294
// exit ;
16292: GO 16353
// for i in tmp do
16294: LD_ADDR_VAR 0 2
16298: PUSH
16299: LD_VAR 0 4
16303: PUSH
16304: FOR_IN
16305: IFFALSE 16351
// for j = 1 to 3 do
16307: LD_ADDR_VAR 0 3
16311: PUSH
16312: DOUBLE
16313: LD_INT 1
16315: DEC
16316: ST_TO_ADDR
16317: LD_INT 3
16319: PUSH
16320: FOR_TO
16321: IFFALSE 16347
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 274
16332: PPUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: LD_INT 99999
16340: PPUSH
16341: CALL_OW 277
16345: GO 16320
16347: POP
16348: POP
16349: GO 16304
16351: POP
16352: POP
// end ;
16353: LD_VAR 0 1
16357: RET
// export function hHackSetLevel10 ; var i , j ; begin
16358: LD_INT 0
16360: PPUSH
16361: PPUSH
16362: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: LD_INT 21
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PPUSH
16378: CALL_OW 69
16382: PUSH
16383: FOR_IN
16384: IFFALSE 16436
// if IsSelected ( i ) then
16386: LD_VAR 0 2
16390: PPUSH
16391: CALL_OW 306
16395: IFFALSE 16434
// begin for j := 1 to 4 do
16397: LD_ADDR_VAR 0 3
16401: PUSH
16402: DOUBLE
16403: LD_INT 1
16405: DEC
16406: ST_TO_ADDR
16407: LD_INT 4
16409: PUSH
16410: FOR_TO
16411: IFFALSE 16432
// SetSkill ( i , j , 10 ) ;
16413: LD_VAR 0 2
16417: PPUSH
16418: LD_VAR 0 3
16422: PPUSH
16423: LD_INT 10
16425: PPUSH
16426: CALL_OW 237
16430: GO 16410
16432: POP
16433: POP
// end ;
16434: GO 16383
16436: POP
16437: POP
// end ;
16438: LD_VAR 0 1
16442: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16443: LD_INT 0
16445: PPUSH
16446: PPUSH
16447: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16448: LD_ADDR_VAR 0 2
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_OWVAR 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 21
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 69
16483: PUSH
16484: FOR_IN
16485: IFFALSE 16526
// begin for j := 1 to 4 do
16487: LD_ADDR_VAR 0 3
16491: PUSH
16492: DOUBLE
16493: LD_INT 1
16495: DEC
16496: ST_TO_ADDR
16497: LD_INT 4
16499: PUSH
16500: FOR_TO
16501: IFFALSE 16522
// SetSkill ( i , j , 10 ) ;
16503: LD_VAR 0 2
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: LD_INT 10
16515: PPUSH
16516: CALL_OW 237
16520: GO 16500
16522: POP
16523: POP
// end ;
16524: GO 16484
16526: POP
16527: POP
// end ;
16528: LD_VAR 0 1
16532: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
16533: LD_INT 0
16535: PPUSH
// uc_side := your_side ;
16536: LD_ADDR_OWVAR 20
16540: PUSH
16541: LD_OWVAR 2
16545: ST_TO_ADDR
// uc_nation := nation ;
16546: LD_ADDR_OWVAR 21
16550: PUSH
16551: LD_VAR 0 1
16555: ST_TO_ADDR
// InitHc ;
16556: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16560: LD_INT 0
16562: PPUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: LD_VAR 0 3
16572: PPUSH
16573: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
16577: CALL_OW 44
16581: PPUSH
16582: LD_INT 1
16584: PPUSH
16585: CALL_OW 51
// end ;
16589: LD_VAR 0 4
16593: RET
// export function hHackSpawnVehicle ; begin
16594: LD_INT 0
16596: PPUSH
// uc_side := your_side ;
16597: LD_ADDR_OWVAR 20
16601: PUSH
16602: LD_OWVAR 2
16606: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
16607: LD_ADDR_OWVAR 21
16611: PUSH
16612: LD_INT 1
16614: PPUSH
16615: LD_INT 3
16617: PPUSH
16618: CALL_OW 12
16622: ST_TO_ADDR
// InitVc ;
16623: CALL_OW 20
// case uc_nation of 1 :
16627: LD_OWVAR 21
16631: PUSH
16632: LD_INT 1
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16784
16640: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
16641: LD_ADDR_OWVAR 37
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: LD_INT 3
16654: PUSH
16655: LD_INT 4
16657: PUSH
16658: LD_INT 5
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 1
16670: PPUSH
16671: LD_INT 5
16673: PPUSH
16674: CALL_OW 12
16678: ARRAY
16679: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16680: LD_ADDR_OWVAR 39
16684: PUSH
16685: LD_INT 1
16687: PPUSH
16688: LD_INT 3
16690: PPUSH
16691: CALL_OW 12
16695: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
16696: LD_ADDR_OWVAR 38
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: LD_INT 2
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 1
16717: PPUSH
16718: LD_INT 3
16720: PPUSH
16721: CALL_OW 12
16725: ARRAY
16726: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
16727: LD_ADDR_OWVAR 40
16731: PUSH
16732: LD_INT 2
16734: PUSH
16735: LD_INT 4
16737: PUSH
16738: LD_INT 5
16740: PUSH
16741: LD_INT 3
16743: PUSH
16744: LD_INT 7
16746: PUSH
16747: LD_INT 8
16749: PUSH
16750: LD_INT 9
16752: PUSH
16753: LD_INT 10
16755: PUSH
16756: LD_INT 6
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: PPUSH
16773: LD_INT 9
16775: PPUSH
16776: CALL_OW 12
16780: ARRAY
16781: ST_TO_ADDR
// end ; 2 :
16782: GO 17049
16784: LD_INT 2
16786: DOUBLE
16787: EQUAL
16788: IFTRUE 16792
16790: GO 16916
16792: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
16793: LD_ADDR_OWVAR 37
16797: PUSH
16798: LD_INT 11
16800: PUSH
16801: LD_INT 12
16803: PUSH
16804: LD_INT 13
16806: PUSH
16807: LD_INT 14
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 1
16818: PPUSH
16819: LD_INT 4
16821: PPUSH
16822: CALL_OW 12
16826: ARRAY
16827: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16828: LD_ADDR_OWVAR 39
16832: PUSH
16833: LD_INT 1
16835: PPUSH
16836: LD_INT 3
16838: PPUSH
16839: CALL_OW 12
16843: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
16844: LD_ADDR_OWVAR 38
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: LD_INT 2
16854: PUSH
16855: LD_INT 5
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 1
16865: PPUSH
16866: LD_INT 3
16868: PPUSH
16869: CALL_OW 12
16873: ARRAY
16874: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
16875: LD_ADDR_OWVAR 40
16879: PUSH
16880: LD_INT 24
16882: PUSH
16883: LD_INT 26
16885: PUSH
16886: LD_INT 27
16888: PUSH
16889: LD_INT 28
16891: PUSH
16892: LD_INT 29
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 1
16904: PPUSH
16905: LD_INT 5
16907: PPUSH
16908: CALL_OW 12
16912: ARRAY
16913: ST_TO_ADDR
// end ; 3 :
16914: GO 17049
16916: LD_INT 3
16918: DOUBLE
16919: EQUAL
16920: IFTRUE 16924
16922: GO 17048
16924: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
16925: LD_ADDR_OWVAR 37
16929: PUSH
16930: LD_INT 21
16932: PUSH
16933: LD_INT 23
16935: PUSH
16936: LD_INT 22
16938: PUSH
16939: LD_INT 24
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 1
16950: PPUSH
16951: LD_INT 4
16953: PPUSH
16954: CALL_OW 12
16958: ARRAY
16959: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16960: LD_ADDR_OWVAR 39
16964: PUSH
16965: LD_INT 1
16967: PPUSH
16968: LD_INT 3
16970: PPUSH
16971: CALL_OW 12
16975: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
16976: LD_ADDR_OWVAR 38
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: LD_INT 3
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: PPUSH
16994: LD_INT 2
16996: PPUSH
16997: CALL_OW 12
17001: ARRAY
17002: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
17003: LD_ADDR_OWVAR 40
17007: PUSH
17008: LD_INT 42
17010: PUSH
17011: LD_INT 43
17013: PUSH
17014: LD_INT 44
17016: PUSH
17017: LD_INT 46
17019: PUSH
17020: LD_INT 48
17022: PUSH
17023: LD_INT 47
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 1
17036: PPUSH
17037: LD_INT 6
17039: PPUSH
17040: CALL_OW 12
17044: ARRAY
17045: ST_TO_ADDR
// end ; end ;
17046: GO 17049
17048: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17049: CALL_OW 45
17053: PPUSH
17054: LD_INT 1
17056: PPUSH
17057: CALL_OW 51
// end ;
17061: LD_VAR 0 1
17065: RET
// export hInvincible ; every 1 do
17066: GO 17068
17068: DISABLE
// hInvincible := [ ] ;
17069: LD_ADDR_EXP 69
17073: PUSH
17074: EMPTY
17075: ST_TO_ADDR
17076: END
// every 10 do var i ;
17077: GO 17079
17079: DISABLE
17080: LD_INT 0
17082: PPUSH
// begin enable ;
17083: ENABLE
// if not hInvincible then
17084: LD_EXP 69
17088: NOT
17089: IFFALSE 17093
// exit ;
17091: GO 17137
// for i in hInvincible do
17093: LD_ADDR_VAR 0 1
17097: PUSH
17098: LD_EXP 69
17102: PUSH
17103: FOR_IN
17104: IFFALSE 17135
// if GetLives ( i ) < 1000 then
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 256
17115: PUSH
17116: LD_INT 1000
17118: LESS
17119: IFFALSE 17133
// SetLives ( i , 1000 ) ;
17121: LD_VAR 0 1
17125: PPUSH
17126: LD_INT 1000
17128: PPUSH
17129: CALL_OW 234
17133: GO 17103
17135: POP
17136: POP
// end ;
17137: PPOPN 1
17139: END
// export function hHackInvincible ; var i ; begin
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17144: LD_ADDR_VAR 0 2
17148: PUSH
17149: LD_INT 2
17151: PUSH
17152: LD_INT 21
17154: PUSH
17155: LD_INT 1
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 21
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: PPUSH
17177: CALL_OW 69
17181: PUSH
17182: FOR_IN
17183: IFFALSE 17244
// if IsSelected ( i ) then
17185: LD_VAR 0 2
17189: PPUSH
17190: CALL_OW 306
17194: IFFALSE 17242
// begin if i in hInvincible then
17196: LD_VAR 0 2
17200: PUSH
17201: LD_EXP 69
17205: IN
17206: IFFALSE 17226
// hInvincible := hInvincible diff i else
17208: LD_ADDR_EXP 69
17212: PUSH
17213: LD_EXP 69
17217: PUSH
17218: LD_VAR 0 2
17222: DIFF
17223: ST_TO_ADDR
17224: GO 17242
// hInvincible := hInvincible union i ;
17226: LD_ADDR_EXP 69
17230: PUSH
17231: LD_EXP 69
17235: PUSH
17236: LD_VAR 0 2
17240: UNION
17241: ST_TO_ADDR
// end ;
17242: GO 17182
17244: POP
17245: POP
// end ;
17246: LD_VAR 0 1
17250: RET
// export function hHackInvisible ; var i , j ; begin
17251: LD_INT 0
17253: PPUSH
17254: PPUSH
17255: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17256: LD_ADDR_VAR 0 2
17260: PUSH
17261: LD_INT 21
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: PUSH
17276: FOR_IN
17277: IFFALSE 17301
// if IsSelected ( i ) then
17279: LD_VAR 0 2
17283: PPUSH
17284: CALL_OW 306
17288: IFFALSE 17299
// ComForceInvisible ( i ) ;
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL_OW 496
17299: GO 17276
17301: POP
17302: POP
// end ;
17303: LD_VAR 0 1
17307: RET
// export function hHackChangeYourSide ; begin
17308: LD_INT 0
17310: PPUSH
// if your_side = 8 then
17311: LD_OWVAR 2
17315: PUSH
17316: LD_INT 8
17318: EQUAL
17319: IFFALSE 17331
// your_side := 0 else
17321: LD_ADDR_OWVAR 2
17325: PUSH
17326: LD_INT 0
17328: ST_TO_ADDR
17329: GO 17345
// your_side := your_side + 1 ;
17331: LD_ADDR_OWVAR 2
17335: PUSH
17336: LD_OWVAR 2
17340: PUSH
17341: LD_INT 1
17343: PLUS
17344: ST_TO_ADDR
// end ;
17345: LD_VAR 0 1
17349: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17350: LD_INT 0
17352: PPUSH
17353: PPUSH
17354: PPUSH
// for i in all_units do
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: LD_OWVAR 3
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17444
// if IsSelected ( i ) then
17368: LD_VAR 0 2
17372: PPUSH
17373: CALL_OW 306
17377: IFFALSE 17442
// begin j := GetSide ( i ) ;
17379: LD_ADDR_VAR 0 3
17383: PUSH
17384: LD_VAR 0 2
17388: PPUSH
17389: CALL_OW 255
17393: ST_TO_ADDR
// if j = 8 then
17394: LD_VAR 0 3
17398: PUSH
17399: LD_INT 8
17401: EQUAL
17402: IFFALSE 17414
// j := 0 else
17404: LD_ADDR_VAR 0 3
17408: PUSH
17409: LD_INT 0
17411: ST_TO_ADDR
17412: GO 17428
// j := j + 1 ;
17414: LD_ADDR_VAR 0 3
17418: PUSH
17419: LD_VAR 0 3
17423: PUSH
17424: LD_INT 1
17426: PLUS
17427: ST_TO_ADDR
// SetSide ( i , j ) ;
17428: LD_VAR 0 2
17432: PPUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: CALL_OW 235
// end ;
17442: GO 17365
17444: POP
17445: POP
// end ;
17446: LD_VAR 0 1
17450: RET
// export function hHackFog ; begin
17451: LD_INT 0
17453: PPUSH
// FogOff ( true ) ;
17454: LD_INT 1
17456: PPUSH
17457: CALL_OW 344
// end ;
17461: LD_VAR 0 1
17465: RET
// export function hHackApeman ; begin
17466: LD_INT 0
17468: PPUSH
// uc_side := your_side ;
17469: LD_ADDR_OWVAR 20
17473: PUSH
17474: LD_OWVAR 2
17478: ST_TO_ADDR
// uc_nation := 0 ;
17479: LD_ADDR_OWVAR 21
17483: PUSH
17484: LD_INT 0
17486: ST_TO_ADDR
// hc_name :=  ;
17487: LD_ADDR_OWVAR 26
17491: PUSH
17492: LD_STRING 
17494: ST_TO_ADDR
// hc_gallery :=  ;
17495: LD_ADDR_OWVAR 33
17499: PUSH
17500: LD_STRING 
17502: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
17503: LD_ADDR_OWVAR 31
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: ST_TO_ADDR
// hc_class := class_apeman ;
17526: LD_ADDR_OWVAR 28
17530: PUSH
17531: LD_INT 12
17533: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17534: CALL_OW 44
17538: PPUSH
17539: LD_INT 1
17541: PPUSH
17542: CALL_OW 51
// end ;
17546: LD_VAR 0 1
17550: RET
// export function hHackBoom ; begin
17551: LD_INT 0
17553: PPUSH
// uc_side := your_side ;
17554: LD_ADDR_OWVAR 20
17558: PUSH
17559: LD_OWVAR 2
17563: ST_TO_ADDR
// uc_nation := 1 ;
17564: LD_ADDR_OWVAR 21
17568: PUSH
17569: LD_INT 1
17571: ST_TO_ADDR
// vc_chassis := us_morphling ;
17572: LD_ADDR_OWVAR 37
17576: PUSH
17577: LD_INT 5
17579: ST_TO_ADDR
// vc_engine := engine_siberite ;
17580: LD_ADDR_OWVAR 39
17584: PUSH
17585: LD_INT 3
17587: ST_TO_ADDR
// vc_control := control_computer ;
17588: LD_ADDR_OWVAR 38
17592: PUSH
17593: LD_INT 3
17595: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
17596: LD_ADDR_OWVAR 40
17600: PUSH
17601: LD_INT 8
17603: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17604: CALL_OW 45
17608: PPUSH
17609: LD_INT 1
17611: PPUSH
17612: CALL_OW 51
// end ;
17616: LD_VAR 0 1
17620: RET
